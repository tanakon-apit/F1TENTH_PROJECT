
microros_demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00018644  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000fdc  080187d8  080187d8  000197d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080197b4  080197b4  0001b2e0  2**0
                  CONTENTS
  4 .ARM          00000008  080197b4  080197b4  0001a7b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080197bc  080197bc  0001b2e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080197bc  080197bc  0001a7bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080197c4  080197c4  0001a7c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002e0  20000000  080197c8  0001b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000bf4c  200002e0  08019aa8  0001b2e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000c22c  08019aa8  0001c22c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001b2e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000247d0  00000000  00000000  0001b310  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004afb  00000000  00000000  0003fae0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001cf0  00000000  00000000  000445e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001677  00000000  00000000  000462d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027144  00000000  00000000  00047947  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00022c73  00000000  00000000  0006ea8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e2efa  00000000  00000000  000916fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000076  00000000  00000000  001745f8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008820  00000000  00000000  00174670  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  0017ce90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002e0 	.word	0x200002e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080187bc 	.word	0x080187bc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002e4 	.word	0x200002e4
 80001cc:	080187bc 	.word	0x080187bc

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_ldivmod>:
 80002a0:	b97b      	cbnz	r3, 80002c2 <__aeabi_ldivmod+0x22>
 80002a2:	b972      	cbnz	r2, 80002c2 <__aeabi_ldivmod+0x22>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bfbe      	ittt	lt
 80002a8:	2000      	movlt	r0, #0
 80002aa:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 80002ae:	e006      	blt.n	80002be <__aeabi_ldivmod+0x1e>
 80002b0:	bf08      	it	eq
 80002b2:	2800      	cmpeq	r0, #0
 80002b4:	bf1c      	itt	ne
 80002b6:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 80002ba:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002be:	f000 b9b5 	b.w	800062c <__aeabi_idiv0>
 80002c2:	f1ad 0c08 	sub.w	ip, sp, #8
 80002c6:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002ca:	2900      	cmp	r1, #0
 80002cc:	db09      	blt.n	80002e2 <__aeabi_ldivmod+0x42>
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	db1a      	blt.n	8000308 <__aeabi_ldivmod+0x68>
 80002d2:	f000 f84d 	bl	8000370 <__udivmoddi4>
 80002d6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002da:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002de:	b004      	add	sp, #16
 80002e0:	4770      	bx	lr
 80002e2:	4240      	negs	r0, r0
 80002e4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	db1b      	blt.n	8000324 <__aeabi_ldivmod+0x84>
 80002ec:	f000 f840 	bl	8000370 <__udivmoddi4>
 80002f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002f8:	b004      	add	sp, #16
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	4252      	negs	r2, r2
 8000302:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000306:	4770      	bx	lr
 8000308:	4252      	negs	r2, r2
 800030a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800030e:	f000 f82f 	bl	8000370 <__udivmoddi4>
 8000312:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000316:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031a:	b004      	add	sp, #16
 800031c:	4240      	negs	r0, r0
 800031e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000322:	4770      	bx	lr
 8000324:	4252      	negs	r2, r2
 8000326:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800032a:	f000 f821 	bl	8000370 <__udivmoddi4>
 800032e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000332:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000336:	b004      	add	sp, #16
 8000338:	4252      	negs	r2, r2
 800033a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800033e:	4770      	bx	lr

08000340 <__aeabi_uldivmod>:
 8000340:	b953      	cbnz	r3, 8000358 <__aeabi_uldivmod+0x18>
 8000342:	b94a      	cbnz	r2, 8000358 <__aeabi_uldivmod+0x18>
 8000344:	2900      	cmp	r1, #0
 8000346:	bf08      	it	eq
 8000348:	2800      	cmpeq	r0, #0
 800034a:	bf1c      	itt	ne
 800034c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000350:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000354:	f000 b96a 	b.w	800062c <__aeabi_idiv0>
 8000358:	f1ad 0c08 	sub.w	ip, sp, #8
 800035c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000360:	f000 f806 	bl	8000370 <__udivmoddi4>
 8000364:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000368:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800036c:	b004      	add	sp, #16
 800036e:	4770      	bx	lr

08000370 <__udivmoddi4>:
 8000370:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000374:	9d08      	ldr	r5, [sp, #32]
 8000376:	460c      	mov	r4, r1
 8000378:	2b00      	cmp	r3, #0
 800037a:	d14e      	bne.n	800041a <__udivmoddi4+0xaa>
 800037c:	4694      	mov	ip, r2
 800037e:	458c      	cmp	ip, r1
 8000380:	4686      	mov	lr, r0
 8000382:	fab2 f282 	clz	r2, r2
 8000386:	d962      	bls.n	800044e <__udivmoddi4+0xde>
 8000388:	b14a      	cbz	r2, 800039e <__udivmoddi4+0x2e>
 800038a:	f1c2 0320 	rsb	r3, r2, #32
 800038e:	4091      	lsls	r1, r2
 8000390:	fa20 f303 	lsr.w	r3, r0, r3
 8000394:	fa0c fc02 	lsl.w	ip, ip, r2
 8000398:	4319      	orrs	r1, r3
 800039a:	fa00 fe02 	lsl.w	lr, r0, r2
 800039e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a2:	fa1f f68c 	uxth.w	r6, ip
 80003a6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003aa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ae:	fb07 1114 	mls	r1, r7, r4, r1
 80003b2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003b6:	fb04 f106 	mul.w	r1, r4, r6
 80003ba:	4299      	cmp	r1, r3
 80003bc:	d90a      	bls.n	80003d4 <__udivmoddi4+0x64>
 80003be:	eb1c 0303 	adds.w	r3, ip, r3
 80003c2:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 80003c6:	f080 8112 	bcs.w	80005ee <__udivmoddi4+0x27e>
 80003ca:	4299      	cmp	r1, r3
 80003cc:	f240 810f 	bls.w	80005ee <__udivmoddi4+0x27e>
 80003d0:	3c02      	subs	r4, #2
 80003d2:	4463      	add	r3, ip
 80003d4:	1a59      	subs	r1, r3, r1
 80003d6:	fa1f f38e 	uxth.w	r3, lr
 80003da:	fbb1 f0f7 	udiv	r0, r1, r7
 80003de:	fb07 1110 	mls	r1, r7, r0, r1
 80003e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003e6:	fb00 f606 	mul.w	r6, r0, r6
 80003ea:	429e      	cmp	r6, r3
 80003ec:	d90a      	bls.n	8000404 <__udivmoddi4+0x94>
 80003ee:	eb1c 0303 	adds.w	r3, ip, r3
 80003f2:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80003f6:	f080 80fc 	bcs.w	80005f2 <__udivmoddi4+0x282>
 80003fa:	429e      	cmp	r6, r3
 80003fc:	f240 80f9 	bls.w	80005f2 <__udivmoddi4+0x282>
 8000400:	4463      	add	r3, ip
 8000402:	3802      	subs	r0, #2
 8000404:	1b9b      	subs	r3, r3, r6
 8000406:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800040a:	2100      	movs	r1, #0
 800040c:	b11d      	cbz	r5, 8000416 <__udivmoddi4+0xa6>
 800040e:	40d3      	lsrs	r3, r2
 8000410:	2200      	movs	r2, #0
 8000412:	e9c5 3200 	strd	r3, r2, [r5]
 8000416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041a:	428b      	cmp	r3, r1
 800041c:	d905      	bls.n	800042a <__udivmoddi4+0xba>
 800041e:	b10d      	cbz	r5, 8000424 <__udivmoddi4+0xb4>
 8000420:	e9c5 0100 	strd	r0, r1, [r5]
 8000424:	2100      	movs	r1, #0
 8000426:	4608      	mov	r0, r1
 8000428:	e7f5      	b.n	8000416 <__udivmoddi4+0xa6>
 800042a:	fab3 f183 	clz	r1, r3
 800042e:	2900      	cmp	r1, #0
 8000430:	d146      	bne.n	80004c0 <__udivmoddi4+0x150>
 8000432:	42a3      	cmp	r3, r4
 8000434:	d302      	bcc.n	800043c <__udivmoddi4+0xcc>
 8000436:	4290      	cmp	r0, r2
 8000438:	f0c0 80f0 	bcc.w	800061c <__udivmoddi4+0x2ac>
 800043c:	1a86      	subs	r6, r0, r2
 800043e:	eb64 0303 	sbc.w	r3, r4, r3
 8000442:	2001      	movs	r0, #1
 8000444:	2d00      	cmp	r5, #0
 8000446:	d0e6      	beq.n	8000416 <__udivmoddi4+0xa6>
 8000448:	e9c5 6300 	strd	r6, r3, [r5]
 800044c:	e7e3      	b.n	8000416 <__udivmoddi4+0xa6>
 800044e:	2a00      	cmp	r2, #0
 8000450:	f040 8090 	bne.w	8000574 <__udivmoddi4+0x204>
 8000454:	eba1 040c 	sub.w	r4, r1, ip
 8000458:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800045c:	fa1f f78c 	uxth.w	r7, ip
 8000460:	2101      	movs	r1, #1
 8000462:	fbb4 f6f8 	udiv	r6, r4, r8
 8000466:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800046a:	fb08 4416 	mls	r4, r8, r6, r4
 800046e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000472:	fb07 f006 	mul.w	r0, r7, r6
 8000476:	4298      	cmp	r0, r3
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x11c>
 800047a:	eb1c 0303 	adds.w	r3, ip, r3
 800047e:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000482:	d202      	bcs.n	800048a <__udivmoddi4+0x11a>
 8000484:	4298      	cmp	r0, r3
 8000486:	f200 80cd 	bhi.w	8000624 <__udivmoddi4+0x2b4>
 800048a:	4626      	mov	r6, r4
 800048c:	1a1c      	subs	r4, r3, r0
 800048e:	fa1f f38e 	uxth.w	r3, lr
 8000492:	fbb4 f0f8 	udiv	r0, r4, r8
 8000496:	fb08 4410 	mls	r4, r8, r0, r4
 800049a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800049e:	fb00 f707 	mul.w	r7, r0, r7
 80004a2:	429f      	cmp	r7, r3
 80004a4:	d908      	bls.n	80004b8 <__udivmoddi4+0x148>
 80004a6:	eb1c 0303 	adds.w	r3, ip, r3
 80004aa:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80004ae:	d202      	bcs.n	80004b6 <__udivmoddi4+0x146>
 80004b0:	429f      	cmp	r7, r3
 80004b2:	f200 80b0 	bhi.w	8000616 <__udivmoddi4+0x2a6>
 80004b6:	4620      	mov	r0, r4
 80004b8:	1bdb      	subs	r3, r3, r7
 80004ba:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80004be:	e7a5      	b.n	800040c <__udivmoddi4+0x9c>
 80004c0:	f1c1 0620 	rsb	r6, r1, #32
 80004c4:	408b      	lsls	r3, r1
 80004c6:	fa22 f706 	lsr.w	r7, r2, r6
 80004ca:	431f      	orrs	r7, r3
 80004cc:	fa20 fc06 	lsr.w	ip, r0, r6
 80004d0:	fa04 f301 	lsl.w	r3, r4, r1
 80004d4:	ea43 030c 	orr.w	r3, r3, ip
 80004d8:	40f4      	lsrs	r4, r6
 80004da:	fa00 f801 	lsl.w	r8, r0, r1
 80004de:	0c38      	lsrs	r0, r7, #16
 80004e0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80004e4:	fbb4 fef0 	udiv	lr, r4, r0
 80004e8:	fa1f fc87 	uxth.w	ip, r7
 80004ec:	fb00 441e 	mls	r4, r0, lr, r4
 80004f0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004f4:	fb0e f90c 	mul.w	r9, lr, ip
 80004f8:	45a1      	cmp	r9, r4
 80004fa:	fa02 f201 	lsl.w	r2, r2, r1
 80004fe:	d90a      	bls.n	8000516 <__udivmoddi4+0x1a6>
 8000500:	193c      	adds	r4, r7, r4
 8000502:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000506:	f080 8084 	bcs.w	8000612 <__udivmoddi4+0x2a2>
 800050a:	45a1      	cmp	r9, r4
 800050c:	f240 8081 	bls.w	8000612 <__udivmoddi4+0x2a2>
 8000510:	f1ae 0e02 	sub.w	lr, lr, #2
 8000514:	443c      	add	r4, r7
 8000516:	eba4 0409 	sub.w	r4, r4, r9
 800051a:	fa1f f983 	uxth.w	r9, r3
 800051e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000522:	fb00 4413 	mls	r4, r0, r3, r4
 8000526:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800052a:	fb03 fc0c 	mul.w	ip, r3, ip
 800052e:	45a4      	cmp	ip, r4
 8000530:	d907      	bls.n	8000542 <__udivmoddi4+0x1d2>
 8000532:	193c      	adds	r4, r7, r4
 8000534:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000538:	d267      	bcs.n	800060a <__udivmoddi4+0x29a>
 800053a:	45a4      	cmp	ip, r4
 800053c:	d965      	bls.n	800060a <__udivmoddi4+0x29a>
 800053e:	3b02      	subs	r3, #2
 8000540:	443c      	add	r4, r7
 8000542:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000546:	fba0 9302 	umull	r9, r3, r0, r2
 800054a:	eba4 040c 	sub.w	r4, r4, ip
 800054e:	429c      	cmp	r4, r3
 8000550:	46ce      	mov	lr, r9
 8000552:	469c      	mov	ip, r3
 8000554:	d351      	bcc.n	80005fa <__udivmoddi4+0x28a>
 8000556:	d04e      	beq.n	80005f6 <__udivmoddi4+0x286>
 8000558:	b155      	cbz	r5, 8000570 <__udivmoddi4+0x200>
 800055a:	ebb8 030e 	subs.w	r3, r8, lr
 800055e:	eb64 040c 	sbc.w	r4, r4, ip
 8000562:	fa04 f606 	lsl.w	r6, r4, r6
 8000566:	40cb      	lsrs	r3, r1
 8000568:	431e      	orrs	r6, r3
 800056a:	40cc      	lsrs	r4, r1
 800056c:	e9c5 6400 	strd	r6, r4, [r5]
 8000570:	2100      	movs	r1, #0
 8000572:	e750      	b.n	8000416 <__udivmoddi4+0xa6>
 8000574:	f1c2 0320 	rsb	r3, r2, #32
 8000578:	fa20 f103 	lsr.w	r1, r0, r3
 800057c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000580:	fa24 f303 	lsr.w	r3, r4, r3
 8000584:	4094      	lsls	r4, r2
 8000586:	430c      	orrs	r4, r1
 8000588:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800058c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000590:	fa1f f78c 	uxth.w	r7, ip
 8000594:	fbb3 f0f8 	udiv	r0, r3, r8
 8000598:	fb08 3110 	mls	r1, r8, r0, r3
 800059c:	0c23      	lsrs	r3, r4, #16
 800059e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005a2:	fb00 f107 	mul.w	r1, r0, r7
 80005a6:	4299      	cmp	r1, r3
 80005a8:	d908      	bls.n	80005bc <__udivmoddi4+0x24c>
 80005aa:	eb1c 0303 	adds.w	r3, ip, r3
 80005ae:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80005b2:	d22c      	bcs.n	800060e <__udivmoddi4+0x29e>
 80005b4:	4299      	cmp	r1, r3
 80005b6:	d92a      	bls.n	800060e <__udivmoddi4+0x29e>
 80005b8:	3802      	subs	r0, #2
 80005ba:	4463      	add	r3, ip
 80005bc:	1a5b      	subs	r3, r3, r1
 80005be:	b2a4      	uxth	r4, r4
 80005c0:	fbb3 f1f8 	udiv	r1, r3, r8
 80005c4:	fb08 3311 	mls	r3, r8, r1, r3
 80005c8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80005cc:	fb01 f307 	mul.w	r3, r1, r7
 80005d0:	42a3      	cmp	r3, r4
 80005d2:	d908      	bls.n	80005e6 <__udivmoddi4+0x276>
 80005d4:	eb1c 0404 	adds.w	r4, ip, r4
 80005d8:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 80005dc:	d213      	bcs.n	8000606 <__udivmoddi4+0x296>
 80005de:	42a3      	cmp	r3, r4
 80005e0:	d911      	bls.n	8000606 <__udivmoddi4+0x296>
 80005e2:	3902      	subs	r1, #2
 80005e4:	4464      	add	r4, ip
 80005e6:	1ae4      	subs	r4, r4, r3
 80005e8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80005ec:	e739      	b.n	8000462 <__udivmoddi4+0xf2>
 80005ee:	4604      	mov	r4, r0
 80005f0:	e6f0      	b.n	80003d4 <__udivmoddi4+0x64>
 80005f2:	4608      	mov	r0, r1
 80005f4:	e706      	b.n	8000404 <__udivmoddi4+0x94>
 80005f6:	45c8      	cmp	r8, r9
 80005f8:	d2ae      	bcs.n	8000558 <__udivmoddi4+0x1e8>
 80005fa:	ebb9 0e02 	subs.w	lr, r9, r2
 80005fe:	eb63 0c07 	sbc.w	ip, r3, r7
 8000602:	3801      	subs	r0, #1
 8000604:	e7a8      	b.n	8000558 <__udivmoddi4+0x1e8>
 8000606:	4631      	mov	r1, r6
 8000608:	e7ed      	b.n	80005e6 <__udivmoddi4+0x276>
 800060a:	4603      	mov	r3, r0
 800060c:	e799      	b.n	8000542 <__udivmoddi4+0x1d2>
 800060e:	4630      	mov	r0, r6
 8000610:	e7d4      	b.n	80005bc <__udivmoddi4+0x24c>
 8000612:	46d6      	mov	lr, sl
 8000614:	e77f      	b.n	8000516 <__udivmoddi4+0x1a6>
 8000616:	4463      	add	r3, ip
 8000618:	3802      	subs	r0, #2
 800061a:	e74d      	b.n	80004b8 <__udivmoddi4+0x148>
 800061c:	4606      	mov	r6, r0
 800061e:	4623      	mov	r3, r4
 8000620:	4608      	mov	r0, r1
 8000622:	e70f      	b.n	8000444 <__udivmoddi4+0xd4>
 8000624:	3e02      	subs	r6, #2
 8000626:	4463      	add	r3, ip
 8000628:	e730      	b.n	800048c <__udivmoddi4+0x11c>
 800062a:	bf00      	nop

0800062c <__aeabi_idiv0>:
 800062c:	4770      	bx	lr
 800062e:	bf00      	nop

08000630 <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b08a      	sub	sp, #40	@ 0x28
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8000638:	2300      	movs	r3, #0
 800063a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800063c:	f007 fb6c 	bl	8007d18 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8000640:	4b5a      	ldr	r3, [pc, #360]	@ (80007ac <pvPortMallocMicroROS+0x17c>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	2b00      	cmp	r3, #0
 8000646:	d101      	bne.n	800064c <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 8000648:	f000 f986 	bl	8000958 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800064c:	4b58      	ldr	r3, [pc, #352]	@ (80007b0 <pvPortMallocMicroROS+0x180>)
 800064e:	681a      	ldr	r2, [r3, #0]
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	4013      	ands	r3, r2
 8000654:	2b00      	cmp	r3, #0
 8000656:	f040 8090 	bne.w	800077a <pvPortMallocMicroROS+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	2b00      	cmp	r3, #0
 800065e:	d01e      	beq.n	800069e <pvPortMallocMicroROS+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8000660:	2208      	movs	r2, #8
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	4413      	add	r3, r2
 8000666:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	f003 0307 	and.w	r3, r3, #7
 800066e:	2b00      	cmp	r3, #0
 8000670:	d015      	beq.n	800069e <pvPortMallocMicroROS+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	f023 0307 	bic.w	r3, r3, #7
 8000678:	3308      	adds	r3, #8
 800067a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	f003 0307 	and.w	r3, r3, #7
 8000682:	2b00      	cmp	r3, #0
 8000684:	d00b      	beq.n	800069e <pvPortMallocMicroROS+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000686:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800068a:	f383 8811 	msr	BASEPRI, r3
 800068e:	f3bf 8f6f 	isb	sy
 8000692:	f3bf 8f4f 	dsb	sy
 8000696:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8000698:	bf00      	nop
 800069a:	bf00      	nop
 800069c:	e7fd      	b.n	800069a <pvPortMallocMicroROS+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d06a      	beq.n	800077a <pvPortMallocMicroROS+0x14a>
 80006a4:	4b43      	ldr	r3, [pc, #268]	@ (80007b4 <pvPortMallocMicroROS+0x184>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	687a      	ldr	r2, [r7, #4]
 80006aa:	429a      	cmp	r2, r3
 80006ac:	d865      	bhi.n	800077a <pvPortMallocMicroROS+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80006ae:	4b42      	ldr	r3, [pc, #264]	@ (80007b8 <pvPortMallocMicroROS+0x188>)
 80006b0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80006b2:	4b41      	ldr	r3, [pc, #260]	@ (80007b8 <pvPortMallocMicroROS+0x188>)
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80006b8:	e004      	b.n	80006c4 <pvPortMallocMicroROS+0x94>
				{
					pxPreviousBlock = pxBlock;
 80006ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006bc:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80006be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80006c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006c6:	685b      	ldr	r3, [r3, #4]
 80006c8:	687a      	ldr	r2, [r7, #4]
 80006ca:	429a      	cmp	r2, r3
 80006cc:	d903      	bls.n	80006d6 <pvPortMallocMicroROS+0xa6>
 80006ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d1f1      	bne.n	80006ba <pvPortMallocMicroROS+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80006d6:	4b35      	ldr	r3, [pc, #212]	@ (80007ac <pvPortMallocMicroROS+0x17c>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80006dc:	429a      	cmp	r2, r3
 80006de:	d04c      	beq.n	800077a <pvPortMallocMicroROS+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80006e0:	6a3b      	ldr	r3, [r7, #32]
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	2208      	movs	r2, #8
 80006e6:	4413      	add	r3, r2
 80006e8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80006ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006ec:	681a      	ldr	r2, [r3, #0]
 80006ee:	6a3b      	ldr	r3, [r7, #32]
 80006f0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80006f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006f4:	685a      	ldr	r2, [r3, #4]
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	1ad2      	subs	r2, r2, r3
 80006fa:	2308      	movs	r3, #8
 80006fc:	005b      	lsls	r3, r3, #1
 80006fe:	429a      	cmp	r2, r3
 8000700:	d920      	bls.n	8000744 <pvPortMallocMicroROS+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8000702:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	4413      	add	r3, r2
 8000708:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800070a:	69bb      	ldr	r3, [r7, #24]
 800070c:	f003 0307 	and.w	r3, r3, #7
 8000710:	2b00      	cmp	r3, #0
 8000712:	d00b      	beq.n	800072c <pvPortMallocMicroROS+0xfc>
	__asm volatile
 8000714:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000718:	f383 8811 	msr	BASEPRI, r3
 800071c:	f3bf 8f6f 	isb	sy
 8000720:	f3bf 8f4f 	dsb	sy
 8000724:	613b      	str	r3, [r7, #16]
}
 8000726:	bf00      	nop
 8000728:	bf00      	nop
 800072a:	e7fd      	b.n	8000728 <pvPortMallocMicroROS+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800072c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800072e:	685a      	ldr	r2, [r3, #4]
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	1ad2      	subs	r2, r2, r3
 8000734:	69bb      	ldr	r3, [r7, #24]
 8000736:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8000738:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800073a:	687a      	ldr	r2, [r7, #4]
 800073c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800073e:	69b8      	ldr	r0, [r7, #24]
 8000740:	f000 f96c 	bl	8000a1c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8000744:	4b1b      	ldr	r3, [pc, #108]	@ (80007b4 <pvPortMallocMicroROS+0x184>)
 8000746:	681a      	ldr	r2, [r3, #0]
 8000748:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800074a:	685b      	ldr	r3, [r3, #4]
 800074c:	1ad3      	subs	r3, r2, r3
 800074e:	4a19      	ldr	r2, [pc, #100]	@ (80007b4 <pvPortMallocMicroROS+0x184>)
 8000750:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8000752:	4b18      	ldr	r3, [pc, #96]	@ (80007b4 <pvPortMallocMicroROS+0x184>)
 8000754:	681a      	ldr	r2, [r3, #0]
 8000756:	4b19      	ldr	r3, [pc, #100]	@ (80007bc <pvPortMallocMicroROS+0x18c>)
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	429a      	cmp	r2, r3
 800075c:	d203      	bcs.n	8000766 <pvPortMallocMicroROS+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800075e:	4b15      	ldr	r3, [pc, #84]	@ (80007b4 <pvPortMallocMicroROS+0x184>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	4a16      	ldr	r2, [pc, #88]	@ (80007bc <pvPortMallocMicroROS+0x18c>)
 8000764:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8000766:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000768:	685a      	ldr	r2, [r3, #4]
 800076a:	4b11      	ldr	r3, [pc, #68]	@ (80007b0 <pvPortMallocMicroROS+0x180>)
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	431a      	orrs	r2, r3
 8000770:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000772:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8000774:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000776:	2200      	movs	r2, #0
 8000778:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800077a:	f007 fadb 	bl	8007d34 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800077e:	69fb      	ldr	r3, [r7, #28]
 8000780:	f003 0307 	and.w	r3, r3, #7
 8000784:	2b00      	cmp	r3, #0
 8000786:	d00b      	beq.n	80007a0 <pvPortMallocMicroROS+0x170>
	__asm volatile
 8000788:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800078c:	f383 8811 	msr	BASEPRI, r3
 8000790:	f3bf 8f6f 	isb	sy
 8000794:	f3bf 8f4f 	dsb	sy
 8000798:	60fb      	str	r3, [r7, #12]
}
 800079a:	bf00      	nop
 800079c:	bf00      	nop
 800079e:	e7fd      	b.n	800079c <pvPortMallocMicroROS+0x16c>
	return pvReturn;
 80007a0:	69fb      	ldr	r3, [r7, #28]
}
 80007a2:	4618      	mov	r0, r3
 80007a4:	3728      	adds	r7, #40	@ 0x28
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	20000ebc 	.word	0x20000ebc
 80007b0:	20000ec8 	.word	0x20000ec8
 80007b4:	20000ec0 	.word	0x20000ec0
 80007b8:	20000eb4 	.word	0x20000eb4
 80007bc:	20000ec4 	.word	0x20000ec4

080007c0 <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b086      	sub	sp, #24
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d04a      	beq.n	8000868 <vPortFreeMicroROS+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80007d2:	2308      	movs	r3, #8
 80007d4:	425b      	negs	r3, r3
 80007d6:	697a      	ldr	r2, [r7, #20]
 80007d8:	4413      	add	r3, r2
 80007da:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80007dc:	697b      	ldr	r3, [r7, #20]
 80007de:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80007e0:	693b      	ldr	r3, [r7, #16]
 80007e2:	685a      	ldr	r2, [r3, #4]
 80007e4:	4b22      	ldr	r3, [pc, #136]	@ (8000870 <vPortFreeMicroROS+0xb0>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	4013      	ands	r3, r2
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d10b      	bne.n	8000806 <vPortFreeMicroROS+0x46>
	__asm volatile
 80007ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80007f2:	f383 8811 	msr	BASEPRI, r3
 80007f6:	f3bf 8f6f 	isb	sy
 80007fa:	f3bf 8f4f 	dsb	sy
 80007fe:	60fb      	str	r3, [r7, #12]
}
 8000800:	bf00      	nop
 8000802:	bf00      	nop
 8000804:	e7fd      	b.n	8000802 <vPortFreeMicroROS+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8000806:	693b      	ldr	r3, [r7, #16]
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	2b00      	cmp	r3, #0
 800080c:	d00b      	beq.n	8000826 <vPortFreeMicroROS+0x66>
	__asm volatile
 800080e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000812:	f383 8811 	msr	BASEPRI, r3
 8000816:	f3bf 8f6f 	isb	sy
 800081a:	f3bf 8f4f 	dsb	sy
 800081e:	60bb      	str	r3, [r7, #8]
}
 8000820:	bf00      	nop
 8000822:	bf00      	nop
 8000824:	e7fd      	b.n	8000822 <vPortFreeMicroROS+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8000826:	693b      	ldr	r3, [r7, #16]
 8000828:	685a      	ldr	r2, [r3, #4]
 800082a:	4b11      	ldr	r3, [pc, #68]	@ (8000870 <vPortFreeMicroROS+0xb0>)
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	4013      	ands	r3, r2
 8000830:	2b00      	cmp	r3, #0
 8000832:	d019      	beq.n	8000868 <vPortFreeMicroROS+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8000834:	693b      	ldr	r3, [r7, #16]
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	2b00      	cmp	r3, #0
 800083a:	d115      	bne.n	8000868 <vPortFreeMicroROS+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800083c:	693b      	ldr	r3, [r7, #16]
 800083e:	685a      	ldr	r2, [r3, #4]
 8000840:	4b0b      	ldr	r3, [pc, #44]	@ (8000870 <vPortFreeMicroROS+0xb0>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	43db      	mvns	r3, r3
 8000846:	401a      	ands	r2, r3
 8000848:	693b      	ldr	r3, [r7, #16]
 800084a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800084c:	f007 fa64 	bl	8007d18 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8000850:	693b      	ldr	r3, [r7, #16]
 8000852:	685a      	ldr	r2, [r3, #4]
 8000854:	4b07      	ldr	r3, [pc, #28]	@ (8000874 <vPortFreeMicroROS+0xb4>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	4413      	add	r3, r2
 800085a:	4a06      	ldr	r2, [pc, #24]	@ (8000874 <vPortFreeMicroROS+0xb4>)
 800085c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800085e:	6938      	ldr	r0, [r7, #16]
 8000860:	f000 f8dc 	bl	8000a1c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8000864:	f007 fa66 	bl	8007d34 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8000868:	bf00      	nop
 800086a:	3718      	adds	r7, #24
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}
 8000870:	20000ec8 	.word	0x20000ec8
 8000874:	20000ec0 	.word	0x20000ec0

08000878 <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 8000878:	b480      	push	{r7}
 800087a:	b087      	sub	sp, #28
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 8000884:	2308      	movs	r3, #8
 8000886:	425b      	negs	r3, r3
 8000888:	697a      	ldr	r2, [r7, #20]
 800088a:	4413      	add	r3, r2
 800088c:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 800088e:	697b      	ldr	r3, [r7, #20]
 8000890:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 8000892:	693b      	ldr	r3, [r7, #16]
 8000894:	685a      	ldr	r2, [r3, #4]
 8000896:	4b06      	ldr	r3, [pc, #24]	@ (80008b0 <getBlockSize+0x38>)
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	43db      	mvns	r3, r3
 800089c:	4013      	ands	r3, r2
 800089e:	60fb      	str	r3, [r7, #12]

	return count;
 80008a0:	68fb      	ldr	r3, [r7, #12]
}
 80008a2:	4618      	mov	r0, r3
 80008a4:	371c      	adds	r7, #28
 80008a6:	46bd      	mov	sp, r7
 80008a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ac:	4770      	bx	lr
 80008ae:	bf00      	nop
 80008b0:	20000ec8 	.word	0x20000ec8

080008b4 <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b084      	sub	sp, #16
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
 80008bc:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 80008be:	f007 fa2b 	bl	8007d18 <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 80008c2:	6838      	ldr	r0, [r7, #0]
 80008c4:	f7ff feb4 	bl	8000630 <pvPortMallocMicroROS>
 80008c8:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 80008ca:	68bb      	ldr	r3, [r7, #8]
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d017      	beq.n	8000900 <pvPortReallocMicroROS+0x4c>
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d014      	beq.n	8000900 <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 80008d6:	6878      	ldr	r0, [r7, #4]
 80008d8:	f7ff ffce 	bl	8000878 <getBlockSize>
 80008dc:	4603      	mov	r3, r0
 80008de:	2208      	movs	r2, #8
 80008e0:	1a9b      	subs	r3, r3, r2
 80008e2:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 80008e4:	683a      	ldr	r2, [r7, #0]
 80008e6:	68fb      	ldr	r3, [r7, #12]
 80008e8:	429a      	cmp	r2, r3
 80008ea:	d201      	bcs.n	80008f0 <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 80008ec:	683b      	ldr	r3, [r7, #0]
 80008ee:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 80008f0:	68fa      	ldr	r2, [r7, #12]
 80008f2:	6879      	ldr	r1, [r7, #4]
 80008f4:	68b8      	ldr	r0, [r7, #8]
 80008f6:	f017 f920 	bl	8017b3a <memcpy>

		vPortFreeMicroROS(pv);
 80008fa:	6878      	ldr	r0, [r7, #4]
 80008fc:	f7ff ff60 	bl	80007c0 <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 8000900:	f007 fa18 	bl	8007d34 <xTaskResumeAll>

	return newmem;
 8000904:	68bb      	ldr	r3, [r7, #8]
}
 8000906:	4618      	mov	r0, r3
 8000908:	3710      	adds	r7, #16
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}

0800090e <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 800090e:	b580      	push	{r7, lr}
 8000910:	b086      	sub	sp, #24
 8000912:	af00      	add	r7, sp, #0
 8000914:	6078      	str	r0, [r7, #4]
 8000916:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8000918:	f007 f9fe 	bl	8007d18 <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 800091c:	683b      	ldr	r3, [r7, #0]
 800091e:	687a      	ldr	r2, [r7, #4]
 8000920:	fb02 f303 	mul.w	r3, r2, r3
 8000924:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 8000926:	6978      	ldr	r0, [r7, #20]
 8000928:	f7ff fe82 	bl	8000630 <pvPortMallocMicroROS>
 800092c:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 800092e:	68fb      	ldr	r3, [r7, #12]
 8000930:	613b      	str	r3, [r7, #16]

  	while(count--)
 8000932:	e004      	b.n	800093e <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 8000934:	693b      	ldr	r3, [r7, #16]
 8000936:	1c5a      	adds	r2, r3, #1
 8000938:	613a      	str	r2, [r7, #16]
 800093a:	2200      	movs	r2, #0
 800093c:	701a      	strb	r2, [r3, #0]
  	while(count--)
 800093e:	697b      	ldr	r3, [r7, #20]
 8000940:	1e5a      	subs	r2, r3, #1
 8000942:	617a      	str	r2, [r7, #20]
 8000944:	2b00      	cmp	r3, #0
 8000946:	d1f5      	bne.n	8000934 <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 8000948:	f007 f9f4 	bl	8007d34 <xTaskResumeAll>
  	return mem;
 800094c:	68fb      	ldr	r3, [r7, #12]
}
 800094e:	4618      	mov	r0, r3
 8000950:	3718      	adds	r7, #24
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}
	...

08000958 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8000958:	b480      	push	{r7}
 800095a:	b085      	sub	sp, #20
 800095c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800095e:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8000962:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8000964:	4b27      	ldr	r3, [pc, #156]	@ (8000a04 <prvHeapInit+0xac>)
 8000966:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8000968:	68fb      	ldr	r3, [r7, #12]
 800096a:	f003 0307 	and.w	r3, r3, #7
 800096e:	2b00      	cmp	r3, #0
 8000970:	d00c      	beq.n	800098c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8000972:	68fb      	ldr	r3, [r7, #12]
 8000974:	3307      	adds	r3, #7
 8000976:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000978:	68fb      	ldr	r3, [r7, #12]
 800097a:	f023 0307 	bic.w	r3, r3, #7
 800097e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8000980:	68ba      	ldr	r2, [r7, #8]
 8000982:	68fb      	ldr	r3, [r7, #12]
 8000984:	1ad3      	subs	r3, r2, r3
 8000986:	4a1f      	ldr	r2, [pc, #124]	@ (8000a04 <prvHeapInit+0xac>)
 8000988:	4413      	add	r3, r2
 800098a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800098c:	68fb      	ldr	r3, [r7, #12]
 800098e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8000990:	4a1d      	ldr	r2, [pc, #116]	@ (8000a08 <prvHeapInit+0xb0>)
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8000996:	4b1c      	ldr	r3, [pc, #112]	@ (8000a08 <prvHeapInit+0xb0>)
 8000998:	2200      	movs	r2, #0
 800099a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	68ba      	ldr	r2, [r7, #8]
 80009a0:	4413      	add	r3, r2
 80009a2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80009a4:	2208      	movs	r2, #8
 80009a6:	68fb      	ldr	r3, [r7, #12]
 80009a8:	1a9b      	subs	r3, r3, r2
 80009aa:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80009ac:	68fb      	ldr	r3, [r7, #12]
 80009ae:	f023 0307 	bic.w	r3, r3, #7
 80009b2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	4a15      	ldr	r2, [pc, #84]	@ (8000a0c <prvHeapInit+0xb4>)
 80009b8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80009ba:	4b14      	ldr	r3, [pc, #80]	@ (8000a0c <prvHeapInit+0xb4>)
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	2200      	movs	r2, #0
 80009c0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80009c2:	4b12      	ldr	r3, [pc, #72]	@ (8000a0c <prvHeapInit+0xb4>)
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	2200      	movs	r2, #0
 80009c8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80009ce:	683b      	ldr	r3, [r7, #0]
 80009d0:	68fa      	ldr	r2, [r7, #12]
 80009d2:	1ad2      	subs	r2, r2, r3
 80009d4:	683b      	ldr	r3, [r7, #0]
 80009d6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80009d8:	4b0c      	ldr	r3, [pc, #48]	@ (8000a0c <prvHeapInit+0xb4>)
 80009da:	681a      	ldr	r2, [r3, #0]
 80009dc:	683b      	ldr	r3, [r7, #0]
 80009de:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80009e0:	683b      	ldr	r3, [r7, #0]
 80009e2:	685b      	ldr	r3, [r3, #4]
 80009e4:	4a0a      	ldr	r2, [pc, #40]	@ (8000a10 <prvHeapInit+0xb8>)
 80009e6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80009e8:	683b      	ldr	r3, [r7, #0]
 80009ea:	685b      	ldr	r3, [r3, #4]
 80009ec:	4a09      	ldr	r2, [pc, #36]	@ (8000a14 <prvHeapInit+0xbc>)
 80009ee:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80009f0:	4b09      	ldr	r3, [pc, #36]	@ (8000a18 <prvHeapInit+0xc0>)
 80009f2:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80009f6:	601a      	str	r2, [r3, #0]
}
 80009f8:	bf00      	nop
 80009fa:	3714      	adds	r7, #20
 80009fc:	46bd      	mov	sp, r7
 80009fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a02:	4770      	bx	lr
 8000a04:	200002fc 	.word	0x200002fc
 8000a08:	20000eb4 	.word	0x20000eb4
 8000a0c:	20000ebc 	.word	0x20000ebc
 8000a10:	20000ec4 	.word	0x20000ec4
 8000a14:	20000ec0 	.word	0x20000ec0
 8000a18:	20000ec8 	.word	0x20000ec8

08000a1c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	b085      	sub	sp, #20
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8000a24:	4b28      	ldr	r3, [pc, #160]	@ (8000ac8 <prvInsertBlockIntoFreeList+0xac>)
 8000a26:	60fb      	str	r3, [r7, #12]
 8000a28:	e002      	b.n	8000a30 <prvInsertBlockIntoFreeList+0x14>
 8000a2a:	68fb      	ldr	r3, [r7, #12]
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	60fb      	str	r3, [r7, #12]
 8000a30:	68fb      	ldr	r3, [r7, #12]
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	687a      	ldr	r2, [r7, #4]
 8000a36:	429a      	cmp	r2, r3
 8000a38:	d8f7      	bhi.n	8000a2a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8000a3a:	68fb      	ldr	r3, [r7, #12]
 8000a3c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8000a3e:	68fb      	ldr	r3, [r7, #12]
 8000a40:	685b      	ldr	r3, [r3, #4]
 8000a42:	68ba      	ldr	r2, [r7, #8]
 8000a44:	4413      	add	r3, r2
 8000a46:	687a      	ldr	r2, [r7, #4]
 8000a48:	429a      	cmp	r2, r3
 8000a4a:	d108      	bne.n	8000a5e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8000a4c:	68fb      	ldr	r3, [r7, #12]
 8000a4e:	685a      	ldr	r2, [r3, #4]
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	685b      	ldr	r3, [r3, #4]
 8000a54:	441a      	add	r2, r3
 8000a56:	68fb      	ldr	r3, [r7, #12]
 8000a58:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8000a5a:	68fb      	ldr	r3, [r7, #12]
 8000a5c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	685b      	ldr	r3, [r3, #4]
 8000a66:	68ba      	ldr	r2, [r7, #8]
 8000a68:	441a      	add	r2, r3
 8000a6a:	68fb      	ldr	r3, [r7, #12]
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	429a      	cmp	r2, r3
 8000a70:	d118      	bne.n	8000aa4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8000a72:	68fb      	ldr	r3, [r7, #12]
 8000a74:	681a      	ldr	r2, [r3, #0]
 8000a76:	4b15      	ldr	r3, [pc, #84]	@ (8000acc <prvInsertBlockIntoFreeList+0xb0>)
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	429a      	cmp	r2, r3
 8000a7c:	d00d      	beq.n	8000a9a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	685a      	ldr	r2, [r3, #4]
 8000a82:	68fb      	ldr	r3, [r7, #12]
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	685b      	ldr	r3, [r3, #4]
 8000a88:	441a      	add	r2, r3
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8000a8e:	68fb      	ldr	r3, [r7, #12]
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	681a      	ldr	r2, [r3, #0]
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	601a      	str	r2, [r3, #0]
 8000a98:	e008      	b.n	8000aac <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8000a9a:	4b0c      	ldr	r3, [pc, #48]	@ (8000acc <prvInsertBlockIntoFreeList+0xb0>)
 8000a9c:	681a      	ldr	r2, [r3, #0]
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	601a      	str	r2, [r3, #0]
 8000aa2:	e003      	b.n	8000aac <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8000aa4:	68fb      	ldr	r3, [r7, #12]
 8000aa6:	681a      	ldr	r2, [r3, #0]
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8000aac:	68fa      	ldr	r2, [r7, #12]
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	429a      	cmp	r2, r3
 8000ab2:	d002      	beq.n	8000aba <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	687a      	ldr	r2, [r7, #4]
 8000ab8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8000aba:	bf00      	nop
 8000abc:	3714      	adds	r7, #20
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop
 8000ac8:	20000eb4 	.word	0x20000eb4
 8000acc:	20000ebc 	.word	0x20000ebc

08000ad0 <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b084      	sub	sp, #16
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8000ade:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 8000ae0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000ae4:	4904      	ldr	r1, [pc, #16]	@ (8000af8 <cubemx_transport_open+0x28>)
 8000ae6:	68f8      	ldr	r0, [r7, #12]
 8000ae8:	f004 fcec 	bl	80054c4 <HAL_UART_Receive_DMA>
    return true;
 8000aec:	2301      	movs	r3, #1
}
 8000aee:	4618      	mov	r0, r3
 8000af0:	3710      	adds	r7, #16
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	20000ecc 	.word	0x20000ecc

08000afc <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b084      	sub	sp, #16
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8000b0a:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 8000b0c:	68f8      	ldr	r0, [r7, #12]
 8000b0e:	f004 fd25 	bl	800555c <HAL_UART_DMAStop>
    return true;
 8000b12:	2301      	movs	r3, #1
}
 8000b14:	4618      	mov	r0, r3
 8000b16:	3710      	adds	r7, #16
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}

08000b1c <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b086      	sub	sp, #24
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	60f8      	str	r0, [r7, #12]
 8000b24:	60b9      	str	r1, [r7, #8]
 8000b26:	607a      	str	r2, [r7, #4]
 8000b28:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000b2a:	68fb      	ldr	r3, [r7, #12]
 8000b2c:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8000b30:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 8000b32:	697b      	ldr	r3, [r7, #20]
 8000b34:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8000b36:	2b20      	cmp	r3, #32
 8000b38:	d11a      	bne.n	8000b70 <cubemx_transport_write+0x54>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	b29b      	uxth	r3, r3
 8000b3e:	461a      	mov	r2, r3
 8000b40:	68b9      	ldr	r1, [r7, #8]
 8000b42:	6978      	ldr	r0, [r7, #20]
 8000b44:	f004 fc42 	bl	80053cc <HAL_UART_Transmit_DMA>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8000b4c:	e002      	b.n	8000b54 <cubemx_transport_write+0x38>
            osDelay(1);
 8000b4e:	2001      	movs	r0, #1
 8000b50:	f006 f880 	bl	8006c54 <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8000b54:	7cfb      	ldrb	r3, [r7, #19]
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d103      	bne.n	8000b62 <cubemx_transport_write+0x46>
 8000b5a:	697b      	ldr	r3, [r7, #20]
 8000b5c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8000b5e:	2b20      	cmp	r3, #32
 8000b60:	d1f5      	bne.n	8000b4e <cubemx_transport_write+0x32>
        }

        return (ret == HAL_OK) ? len : 0;
 8000b62:	7cfb      	ldrb	r3, [r7, #19]
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d101      	bne.n	8000b6c <cubemx_transport_write+0x50>
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	e002      	b.n	8000b72 <cubemx_transport_write+0x56>
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	e000      	b.n	8000b72 <cubemx_transport_write+0x56>
    }else{
        return 0;
 8000b70:	2300      	movs	r3, #0
    }
}
 8000b72:	4618      	mov	r0, r3
 8000b74:	3718      	adds	r7, #24
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}
	...

08000b7c <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b088      	sub	sp, #32
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	60f8      	str	r0, [r7, #12]
 8000b84:	60b9      	str	r1, [r7, #8]
 8000b86:	607a      	str	r2, [r7, #4]
 8000b88:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000b8a:	68fb      	ldr	r3, [r7, #12]
 8000b8c:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8000b90:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 8000b92:	2300      	movs	r3, #0
 8000b94:	61fb      	str	r3, [r7, #28]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b96:	b672      	cpsid	i
}
 8000b98:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 8000b9a:	697b      	ldr	r3, [r7, #20]
 8000b9c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	685b      	ldr	r3, [r3, #4]
 8000ba2:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 8000ba6:	4a1c      	ldr	r2, [pc, #112]	@ (8000c18 <cubemx_transport_read+0x9c>)
 8000ba8:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000baa:	b662      	cpsie	i
}
 8000bac:	bf00      	nop
        __enable_irq();
        ms_used++;
 8000bae:	69fb      	ldr	r3, [r7, #28]
 8000bb0:	3301      	adds	r3, #1
 8000bb2:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 8000bb4:	2001      	movs	r0, #1
 8000bb6:	f006 f84d 	bl	8006c54 <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 8000bba:	4b18      	ldr	r3, [pc, #96]	@ (8000c1c <cubemx_transport_read+0xa0>)
 8000bbc:	681a      	ldr	r2, [r3, #0]
 8000bbe:	4b16      	ldr	r3, [pc, #88]	@ (8000c18 <cubemx_transport_read+0x9c>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	429a      	cmp	r2, r3
 8000bc4:	d103      	bne.n	8000bce <cubemx_transport_read+0x52>
 8000bc6:	69fa      	ldr	r2, [r7, #28]
 8000bc8:	683b      	ldr	r3, [r7, #0]
 8000bca:	429a      	cmp	r2, r3
 8000bcc:	dbe3      	blt.n	8000b96 <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8000bd2:	e011      	b.n	8000bf8 <cubemx_transport_read+0x7c>
        buf[wrote] = dma_buffer[dma_head];
 8000bd4:	4b11      	ldr	r3, [pc, #68]	@ (8000c1c <cubemx_transport_read+0xa0>)
 8000bd6:	681a      	ldr	r2, [r3, #0]
 8000bd8:	68b9      	ldr	r1, [r7, #8]
 8000bda:	69bb      	ldr	r3, [r7, #24]
 8000bdc:	440b      	add	r3, r1
 8000bde:	4910      	ldr	r1, [pc, #64]	@ (8000c20 <cubemx_transport_read+0xa4>)
 8000be0:	5c8a      	ldrb	r2, [r1, r2]
 8000be2:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 8000be4:	4b0d      	ldr	r3, [pc, #52]	@ (8000c1c <cubemx_transport_read+0xa0>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	3301      	adds	r3, #1
 8000bea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000bee:	4a0b      	ldr	r2, [pc, #44]	@ (8000c1c <cubemx_transport_read+0xa0>)
 8000bf0:	6013      	str	r3, [r2, #0]
        wrote++;
 8000bf2:	69bb      	ldr	r3, [r7, #24]
 8000bf4:	3301      	adds	r3, #1
 8000bf6:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8000bf8:	4b08      	ldr	r3, [pc, #32]	@ (8000c1c <cubemx_transport_read+0xa0>)
 8000bfa:	681a      	ldr	r2, [r3, #0]
 8000bfc:	4b06      	ldr	r3, [pc, #24]	@ (8000c18 <cubemx_transport_read+0x9c>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	429a      	cmp	r2, r3
 8000c02:	d003      	beq.n	8000c0c <cubemx_transport_read+0x90>
 8000c04:	69ba      	ldr	r2, [r7, #24]
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	429a      	cmp	r2, r3
 8000c0a:	d3e3      	bcc.n	8000bd4 <cubemx_transport_read+0x58>
    }
    
    return wrote;
 8000c0c:	69bb      	ldr	r3, [r7, #24]
}
 8000c0e:	4618      	mov	r0, r3
 8000c10:	3720      	adds	r7, #32
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	200016d0 	.word	0x200016d0
 8000c1c:	200016cc 	.word	0x200016cc
 8000c20:	20000ecc 	.word	0x20000ecc

08000c24 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c28:	f001 fa3f 	bl	80020aa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c2c:	f000 f824 	bl	8000c78 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c30:	f000 fab6 	bl	80011a0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000c34:	f000 fa8e 	bl	8001154 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000c38:	f000 fa5c 	bl	80010f4 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000c3c:	f000 f87e 	bl	8000d3c <MX_I2C1_Init>
  MX_I2C3_Init();
 8000c40:	f000 f8bc 	bl	8000dbc <MX_I2C3_Init>
  MX_TIM1_Init();
 8000c44:	f000 f8fa 	bl	8000e3c <MX_TIM1_Init>
  MX_TIM2_Init();
 8000c48:	f000 f952 	bl	8000ef0 <MX_TIM2_Init>
  MX_TIM15_Init();
 8000c4c:	f000 f9a4 	bl	8000f98 <MX_TIM15_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000c50:	f005 ff24 	bl	8006a9c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000c54:	4a05      	ldr	r2, [pc, #20]	@ (8000c6c <main+0x48>)
 8000c56:	2100      	movs	r1, #0
 8000c58:	4805      	ldr	r0, [pc, #20]	@ (8000c70 <main+0x4c>)
 8000c5a:	f005 ff69 	bl	8006b30 <osThreadNew>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	4a04      	ldr	r2, [pc, #16]	@ (8000c74 <main+0x50>)
 8000c62:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000c64:	f005 ff3e 	bl	8006ae4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c68:	bf00      	nop
 8000c6a:	e7fd      	b.n	8000c68 <main+0x44>
 8000c6c:	08018888 	.word	0x08018888
 8000c70:	080012c9 	.word	0x080012c9
 8000c74:	20001978 	.word	0x20001978

08000c78 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b096      	sub	sp, #88	@ 0x58
 8000c7c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c7e:	f107 0314 	add.w	r3, r7, #20
 8000c82:	2244      	movs	r2, #68	@ 0x44
 8000c84:	2100      	movs	r1, #0
 8000c86:	4618      	mov	r0, r3
 8000c88:	f016 fe38 	bl	80178fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c8c:	463b      	mov	r3, r7
 8000c8e:	2200      	movs	r2, #0
 8000c90:	601a      	str	r2, [r3, #0]
 8000c92:	605a      	str	r2, [r3, #4]
 8000c94:	609a      	str	r2, [r3, #8]
 8000c96:	60da      	str	r2, [r3, #12]
 8000c98:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000c9a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000c9e:	f002 f85b 	bl	8002d58 <HAL_PWREx_ControlVoltageScaling>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d001      	beq.n	8000cac <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000ca8:	f000 fc20 	bl	80014ec <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000cac:	f002 f836 	bl	8002d1c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000cb0:	4b21      	ldr	r3, [pc, #132]	@ (8000d38 <SystemClock_Config+0xc0>)
 8000cb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000cb6:	4a20      	ldr	r2, [pc, #128]	@ (8000d38 <SystemClock_Config+0xc0>)
 8000cb8:	f023 0318 	bic.w	r3, r3, #24
 8000cbc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000cc0:	2314      	movs	r3, #20
 8000cc2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000cc4:	2301      	movs	r3, #1
 8000cc6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000cc8:	2301      	movs	r3, #1
 8000cca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000cd0:	2360      	movs	r3, #96	@ 0x60
 8000cd2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cd4:	2302      	movs	r3, #2
 8000cd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000cd8:	2301      	movs	r3, #1
 8000cda:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000cdc:	2301      	movs	r3, #1
 8000cde:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000ce0:	2328      	movs	r3, #40	@ 0x28
 8000ce2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000ce4:	2307      	movs	r3, #7
 8000ce6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000ce8:	2302      	movs	r3, #2
 8000cea:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000cec:	2302      	movs	r3, #2
 8000cee:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cf0:	f107 0314 	add.w	r3, r7, #20
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f002 f885 	bl	8002e04 <HAL_RCC_OscConfig>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d001      	beq.n	8000d04 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000d00:	f000 fbf4 	bl	80014ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d04:	230f      	movs	r3, #15
 8000d06:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d08:	2303      	movs	r3, #3
 8000d0a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d10:	2300      	movs	r3, #0
 8000d12:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d14:	2300      	movs	r3, #0
 8000d16:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000d18:	463b      	mov	r3, r7
 8000d1a:	2104      	movs	r1, #4
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f002 fc85 	bl	800362c <HAL_RCC_ClockConfig>
 8000d22:	4603      	mov	r3, r0
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d001      	beq.n	8000d2c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000d28:	f000 fbe0 	bl	80014ec <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000d2c:	f003 f8ca 	bl	8003ec4 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000d30:	bf00      	nop
 8000d32:	3758      	adds	r7, #88	@ 0x58
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	40021000 	.word	0x40021000

08000d3c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000d40:	4b1b      	ldr	r3, [pc, #108]	@ (8000db0 <MX_I2C1_Init+0x74>)
 8000d42:	4a1c      	ldr	r2, [pc, #112]	@ (8000db4 <MX_I2C1_Init+0x78>)
 8000d44:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00702991;
 8000d46:	4b1a      	ldr	r3, [pc, #104]	@ (8000db0 <MX_I2C1_Init+0x74>)
 8000d48:	4a1b      	ldr	r2, [pc, #108]	@ (8000db8 <MX_I2C1_Init+0x7c>)
 8000d4a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000d4c:	4b18      	ldr	r3, [pc, #96]	@ (8000db0 <MX_I2C1_Init+0x74>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d52:	4b17      	ldr	r3, [pc, #92]	@ (8000db0 <MX_I2C1_Init+0x74>)
 8000d54:	2201      	movs	r2, #1
 8000d56:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d58:	4b15      	ldr	r3, [pc, #84]	@ (8000db0 <MX_I2C1_Init+0x74>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000d5e:	4b14      	ldr	r3, [pc, #80]	@ (8000db0 <MX_I2C1_Init+0x74>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000d64:	4b12      	ldr	r3, [pc, #72]	@ (8000db0 <MX_I2C1_Init+0x74>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d6a:	4b11      	ldr	r3, [pc, #68]	@ (8000db0 <MX_I2C1_Init+0x74>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d70:	4b0f      	ldr	r3, [pc, #60]	@ (8000db0 <MX_I2C1_Init+0x74>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d76:	480e      	ldr	r0, [pc, #56]	@ (8000db0 <MX_I2C1_Init+0x74>)
 8000d78:	f001 fe9e 	bl	8002ab8 <HAL_I2C_Init>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d001      	beq.n	8000d86 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000d82:	f000 fbb3 	bl	80014ec <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d86:	2100      	movs	r1, #0
 8000d88:	4809      	ldr	r0, [pc, #36]	@ (8000db0 <MX_I2C1_Init+0x74>)
 8000d8a:	f001 ff30 	bl	8002bee <HAL_I2CEx_ConfigAnalogFilter>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d001      	beq.n	8000d98 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000d94:	f000 fbaa 	bl	80014ec <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000d98:	2100      	movs	r1, #0
 8000d9a:	4805      	ldr	r0, [pc, #20]	@ (8000db0 <MX_I2C1_Init+0x74>)
 8000d9c:	f001 ff72 	bl	8002c84 <HAL_I2CEx_ConfigDigitalFilter>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d001      	beq.n	8000daa <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000da6:	f000 fba1 	bl	80014ec <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000daa:	bf00      	nop
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	200016d4 	.word	0x200016d4
 8000db4:	40005400 	.word	0x40005400
 8000db8:	00702991 	.word	0x00702991

08000dbc <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000dc0:	4b1b      	ldr	r3, [pc, #108]	@ (8000e30 <MX_I2C3_Init+0x74>)
 8000dc2:	4a1c      	ldr	r2, [pc, #112]	@ (8000e34 <MX_I2C3_Init+0x78>)
 8000dc4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00702991;
 8000dc6:	4b1a      	ldr	r3, [pc, #104]	@ (8000e30 <MX_I2C3_Init+0x74>)
 8000dc8:	4a1b      	ldr	r2, [pc, #108]	@ (8000e38 <MX_I2C3_Init+0x7c>)
 8000dca:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000dcc:	4b18      	ldr	r3, [pc, #96]	@ (8000e30 <MX_I2C3_Init+0x74>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000dd2:	4b17      	ldr	r3, [pc, #92]	@ (8000e30 <MX_I2C3_Init+0x74>)
 8000dd4:	2201      	movs	r2, #1
 8000dd6:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000dd8:	4b15      	ldr	r3, [pc, #84]	@ (8000e30 <MX_I2C3_Init+0x74>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000dde:	4b14      	ldr	r3, [pc, #80]	@ (8000e30 <MX_I2C3_Init+0x74>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000de4:	4b12      	ldr	r3, [pc, #72]	@ (8000e30 <MX_I2C3_Init+0x74>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000dea:	4b11      	ldr	r3, [pc, #68]	@ (8000e30 <MX_I2C3_Init+0x74>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000df0:	4b0f      	ldr	r3, [pc, #60]	@ (8000e30 <MX_I2C3_Init+0x74>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000df6:	480e      	ldr	r0, [pc, #56]	@ (8000e30 <MX_I2C3_Init+0x74>)
 8000df8:	f001 fe5e 	bl	8002ab8 <HAL_I2C_Init>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d001      	beq.n	8000e06 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000e02:	f000 fb73 	bl	80014ec <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000e06:	2100      	movs	r1, #0
 8000e08:	4809      	ldr	r0, [pc, #36]	@ (8000e30 <MX_I2C3_Init+0x74>)
 8000e0a:	f001 fef0 	bl	8002bee <HAL_I2CEx_ConfigAnalogFilter>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d001      	beq.n	8000e18 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000e14:	f000 fb6a 	bl	80014ec <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000e18:	2100      	movs	r1, #0
 8000e1a:	4805      	ldr	r0, [pc, #20]	@ (8000e30 <MX_I2C3_Init+0x74>)
 8000e1c:	f001 ff32 	bl	8002c84 <HAL_I2CEx_ConfigDigitalFilter>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d001      	beq.n	8000e2a <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8000e26:	f000 fb61 	bl	80014ec <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000e2a:	bf00      	nop
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	20001728 	.word	0x20001728
 8000e34:	40005c00 	.word	0x40005c00
 8000e38:	00702991 	.word	0x00702991

08000e3c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b08c      	sub	sp, #48	@ 0x30
 8000e40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000e42:	f107 030c 	add.w	r3, r7, #12
 8000e46:	2224      	movs	r2, #36	@ 0x24
 8000e48:	2100      	movs	r1, #0
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f016 fd56 	bl	80178fc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e50:	463b      	mov	r3, r7
 8000e52:	2200      	movs	r2, #0
 8000e54:	601a      	str	r2, [r3, #0]
 8000e56:	605a      	str	r2, [r3, #4]
 8000e58:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000e5a:	4b23      	ldr	r3, [pc, #140]	@ (8000ee8 <MX_TIM1_Init+0xac>)
 8000e5c:	4a23      	ldr	r2, [pc, #140]	@ (8000eec <MX_TIM1_Init+0xb0>)
 8000e5e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000e60:	4b21      	ldr	r3, [pc, #132]	@ (8000ee8 <MX_TIM1_Init+0xac>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e66:	4b20      	ldr	r3, [pc, #128]	@ (8000ee8 <MX_TIM1_Init+0xac>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000e6c:	4b1e      	ldr	r3, [pc, #120]	@ (8000ee8 <MX_TIM1_Init+0xac>)
 8000e6e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000e72:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e74:	4b1c      	ldr	r3, [pc, #112]	@ (8000ee8 <MX_TIM1_Init+0xac>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000e7a:	4b1b      	ldr	r3, [pc, #108]	@ (8000ee8 <MX_TIM1_Init+0xac>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e80:	4b19      	ldr	r3, [pc, #100]	@ (8000ee8 <MX_TIM1_Init+0xac>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000e86:	2303      	movs	r3, #3
 8000e88:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000e8e:	2301      	movs	r3, #1
 8000e90:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000e92:	2300      	movs	r3, #0
 8000e94:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000e96:	2300      	movs	r3, #0
 8000e98:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8000eaa:	f107 030c 	add.w	r3, r7, #12
 8000eae:	4619      	mov	r1, r3
 8000eb0:	480d      	ldr	r0, [pc, #52]	@ (8000ee8 <MX_TIM1_Init+0xac>)
 8000eb2:	f003 fa16 	bl	80042e2 <HAL_TIM_Encoder_Init>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d001      	beq.n	8000ec0 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8000ebc:	f000 fb16 	bl	80014ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000ecc:	463b      	mov	r3, r7
 8000ece:	4619      	mov	r1, r3
 8000ed0:	4805      	ldr	r0, [pc, #20]	@ (8000ee8 <MX_TIM1_Init+0xac>)
 8000ed2:	f004 f931 	bl	8005138 <HAL_TIMEx_MasterConfigSynchronization>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d001      	beq.n	8000ee0 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8000edc:	f000 fb06 	bl	80014ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000ee0:	bf00      	nop
 8000ee2:	3730      	adds	r7, #48	@ 0x30
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	2000177c 	.word	0x2000177c
 8000eec:	40012c00 	.word	0x40012c00

08000ef0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b08c      	sub	sp, #48	@ 0x30
 8000ef4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000ef6:	f107 030c 	add.w	r3, r7, #12
 8000efa:	2224      	movs	r2, #36	@ 0x24
 8000efc:	2100      	movs	r1, #0
 8000efe:	4618      	mov	r0, r3
 8000f00:	f016 fcfc 	bl	80178fc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f04:	463b      	mov	r3, r7
 8000f06:	2200      	movs	r2, #0
 8000f08:	601a      	str	r2, [r3, #0]
 8000f0a:	605a      	str	r2, [r3, #4]
 8000f0c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f0e:	4b21      	ldr	r3, [pc, #132]	@ (8000f94 <MX_TIM2_Init+0xa4>)
 8000f10:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000f14:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000f16:	4b1f      	ldr	r3, [pc, #124]	@ (8000f94 <MX_TIM2_Init+0xa4>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f1c:	4b1d      	ldr	r3, [pc, #116]	@ (8000f94 <MX_TIM2_Init+0xa4>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000f22:	4b1c      	ldr	r3, [pc, #112]	@ (8000f94 <MX_TIM2_Init+0xa4>)
 8000f24:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000f28:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f2a:	4b1a      	ldr	r3, [pc, #104]	@ (8000f94 <MX_TIM2_Init+0xa4>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f30:	4b18      	ldr	r3, [pc, #96]	@ (8000f94 <MX_TIM2_Init+0xa4>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000f36:	2303      	movs	r3, #3
 8000f38:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000f3e:	2301      	movs	r3, #1
 8000f40:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000f42:	2300      	movs	r3, #0
 8000f44:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000f46:	2300      	movs	r3, #0
 8000f48:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000f4e:	2301      	movs	r3, #1
 8000f50:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000f52:	2300      	movs	r3, #0
 8000f54:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000f56:	2300      	movs	r3, #0
 8000f58:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000f5a:	f107 030c 	add.w	r3, r7, #12
 8000f5e:	4619      	mov	r1, r3
 8000f60:	480c      	ldr	r0, [pc, #48]	@ (8000f94 <MX_TIM2_Init+0xa4>)
 8000f62:	f003 f9be 	bl	80042e2 <HAL_TIM_Encoder_Init>
 8000f66:	4603      	mov	r3, r0
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d001      	beq.n	8000f70 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8000f6c:	f000 fabe 	bl	80014ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f70:	2300      	movs	r3, #0
 8000f72:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f74:	2300      	movs	r3, #0
 8000f76:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f78:	463b      	mov	r3, r7
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	4805      	ldr	r0, [pc, #20]	@ (8000f94 <MX_TIM2_Init+0xa4>)
 8000f7e:	f004 f8db 	bl	8005138 <HAL_TIMEx_MasterConfigSynchronization>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d001      	beq.n	8000f8c <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8000f88:	f000 fab0 	bl	80014ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000f8c:	bf00      	nop
 8000f8e:	3730      	adds	r7, #48	@ 0x30
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	200017c8 	.word	0x200017c8

08000f98 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b09a      	sub	sp, #104	@ 0x68
 8000f9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f9e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	601a      	str	r2, [r3, #0]
 8000fa6:	605a      	str	r2, [r3, #4]
 8000fa8:	609a      	str	r2, [r3, #8]
 8000faa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fac:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	601a      	str	r2, [r3, #0]
 8000fb4:	605a      	str	r2, [r3, #4]
 8000fb6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000fb8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	601a      	str	r2, [r3, #0]
 8000fc0:	605a      	str	r2, [r3, #4]
 8000fc2:	609a      	str	r2, [r3, #8]
 8000fc4:	60da      	str	r2, [r3, #12]
 8000fc6:	611a      	str	r2, [r3, #16]
 8000fc8:	615a      	str	r2, [r3, #20]
 8000fca:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000fcc:	1d3b      	adds	r3, r7, #4
 8000fce:	222c      	movs	r2, #44	@ 0x2c
 8000fd0:	2100      	movs	r1, #0
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f016 fc92 	bl	80178fc <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8000fd8:	4b44      	ldr	r3, [pc, #272]	@ (80010ec <MX_TIM15_Init+0x154>)
 8000fda:	4a45      	ldr	r2, [pc, #276]	@ (80010f0 <MX_TIM15_Init+0x158>)
 8000fdc:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8000fde:	4b43      	ldr	r3, [pc, #268]	@ (80010ec <MX_TIM15_Init+0x154>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fe4:	4b41      	ldr	r3, [pc, #260]	@ (80010ec <MX_TIM15_Init+0x154>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8000fea:	4b40      	ldr	r3, [pc, #256]	@ (80010ec <MX_TIM15_Init+0x154>)
 8000fec:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000ff0:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ff2:	4b3e      	ldr	r3, [pc, #248]	@ (80010ec <MX_TIM15_Init+0x154>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8000ff8:	4b3c      	ldr	r3, [pc, #240]	@ (80010ec <MX_TIM15_Init+0x154>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ffe:	4b3b      	ldr	r3, [pc, #236]	@ (80010ec <MX_TIM15_Init+0x154>)
 8001000:	2200      	movs	r2, #0
 8001002:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8001004:	4839      	ldr	r0, [pc, #228]	@ (80010ec <MX_TIM15_Init+0x154>)
 8001006:	f003 f85f 	bl	80040c8 <HAL_TIM_Base_Init>
 800100a:	4603      	mov	r3, r0
 800100c:	2b00      	cmp	r3, #0
 800100e:	d001      	beq.n	8001014 <MX_TIM15_Init+0x7c>
  {
    Error_Handler();
 8001010:	f000 fa6c 	bl	80014ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001014:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001018:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 800101a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800101e:	4619      	mov	r1, r3
 8001020:	4832      	ldr	r0, [pc, #200]	@ (80010ec <MX_TIM15_Init+0x154>)
 8001022:	f003 fc1b 	bl	800485c <HAL_TIM_ConfigClockSource>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d001      	beq.n	8001030 <MX_TIM15_Init+0x98>
  {
    Error_Handler();
 800102c:	f000 fa5e 	bl	80014ec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8001030:	482e      	ldr	r0, [pc, #184]	@ (80010ec <MX_TIM15_Init+0x154>)
 8001032:	f003 f8f5 	bl	8004220 <HAL_TIM_PWM_Init>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	d001      	beq.n	8001040 <MX_TIM15_Init+0xa8>
  {
    Error_Handler();
 800103c:	f000 fa56 	bl	80014ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001040:	2300      	movs	r3, #0
 8001042:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001044:	2300      	movs	r3, #0
 8001046:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8001048:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800104c:	4619      	mov	r1, r3
 800104e:	4827      	ldr	r0, [pc, #156]	@ (80010ec <MX_TIM15_Init+0x154>)
 8001050:	f004 f872 	bl	8005138 <HAL_TIMEx_MasterConfigSynchronization>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d001      	beq.n	800105e <MX_TIM15_Init+0xc6>
  {
    Error_Handler();
 800105a:	f000 fa47 	bl	80014ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800105e:	2360      	movs	r3, #96	@ 0x60
 8001060:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8001062:	2300      	movs	r3, #0
 8001064:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001066:	2300      	movs	r3, #0
 8001068:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800106a:	2300      	movs	r3, #0
 800106c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800106e:	2300      	movs	r3, #0
 8001070:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001072:	2300      	movs	r3, #0
 8001074:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001076:	2300      	movs	r3, #0
 8001078:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800107a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800107e:	2200      	movs	r2, #0
 8001080:	4619      	mov	r1, r3
 8001082:	481a      	ldr	r0, [pc, #104]	@ (80010ec <MX_TIM15_Init+0x154>)
 8001084:	f003 fad6 	bl	8004634 <HAL_TIM_PWM_ConfigChannel>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d001      	beq.n	8001092 <MX_TIM15_Init+0xfa>
  {
    Error_Handler();
 800108e:	f000 fa2d 	bl	80014ec <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001092:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001096:	2204      	movs	r2, #4
 8001098:	4619      	mov	r1, r3
 800109a:	4814      	ldr	r0, [pc, #80]	@ (80010ec <MX_TIM15_Init+0x154>)
 800109c:	f003 faca 	bl	8004634 <HAL_TIM_PWM_ConfigChannel>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d001      	beq.n	80010aa <MX_TIM15_Init+0x112>
  {
    Error_Handler();
 80010a6:	f000 fa21 	bl	80014ec <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80010aa:	2300      	movs	r3, #0
 80010ac:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80010ae:	2300      	movs	r3, #0
 80010b0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80010b2:	2300      	movs	r3, #0
 80010b4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80010b6:	2300      	movs	r3, #0
 80010b8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80010ba:	2300      	movs	r3, #0
 80010bc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80010be:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80010c2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80010c4:	2300      	movs	r3, #0
 80010c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 80010c8:	1d3b      	adds	r3, r7, #4
 80010ca:	4619      	mov	r1, r3
 80010cc:	4807      	ldr	r0, [pc, #28]	@ (80010ec <MX_TIM15_Init+0x154>)
 80010ce:	f004 f899 	bl	8005204 <HAL_TIMEx_ConfigBreakDeadTime>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d001      	beq.n	80010dc <MX_TIM15_Init+0x144>
  {
    Error_Handler();
 80010d8:	f000 fa08 	bl	80014ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 80010dc:	4803      	ldr	r0, [pc, #12]	@ (80010ec <MX_TIM15_Init+0x154>)
 80010de:	f000 fd21 	bl	8001b24 <HAL_TIM_MspPostInit>

}
 80010e2:	bf00      	nop
 80010e4:	3768      	adds	r7, #104	@ 0x68
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	20001814 	.word	0x20001814
 80010f0:	40014000 	.word	0x40014000

080010f4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80010f8:	4b13      	ldr	r3, [pc, #76]	@ (8001148 <MX_USART2_UART_Init+0x54>)
 80010fa:	4a14      	ldr	r2, [pc, #80]	@ (800114c <MX_USART2_UART_Init+0x58>)
 80010fc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 2000000;
 80010fe:	4b12      	ldr	r3, [pc, #72]	@ (8001148 <MX_USART2_UART_Init+0x54>)
 8001100:	4a13      	ldr	r2, [pc, #76]	@ (8001150 <MX_USART2_UART_Init+0x5c>)
 8001102:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001104:	4b10      	ldr	r3, [pc, #64]	@ (8001148 <MX_USART2_UART_Init+0x54>)
 8001106:	2200      	movs	r2, #0
 8001108:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800110a:	4b0f      	ldr	r3, [pc, #60]	@ (8001148 <MX_USART2_UART_Init+0x54>)
 800110c:	2200      	movs	r2, #0
 800110e:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001110:	4b0d      	ldr	r3, [pc, #52]	@ (8001148 <MX_USART2_UART_Init+0x54>)
 8001112:	2200      	movs	r2, #0
 8001114:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001116:	4b0c      	ldr	r3, [pc, #48]	@ (8001148 <MX_USART2_UART_Init+0x54>)
 8001118:	220c      	movs	r2, #12
 800111a:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800111c:	4b0a      	ldr	r3, [pc, #40]	@ (8001148 <MX_USART2_UART_Init+0x54>)
 800111e:	2200      	movs	r2, #0
 8001120:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001122:	4b09      	ldr	r3, [pc, #36]	@ (8001148 <MX_USART2_UART_Init+0x54>)
 8001124:	2200      	movs	r2, #0
 8001126:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001128:	4b07      	ldr	r3, [pc, #28]	@ (8001148 <MX_USART2_UART_Init+0x54>)
 800112a:	2200      	movs	r2, #0
 800112c:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800112e:	4b06      	ldr	r3, [pc, #24]	@ (8001148 <MX_USART2_UART_Init+0x54>)
 8001130:	2200      	movs	r2, #0
 8001132:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001134:	4804      	ldr	r0, [pc, #16]	@ (8001148 <MX_USART2_UART_Init+0x54>)
 8001136:	f004 f8fb 	bl	8005330 <HAL_UART_Init>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d001      	beq.n	8001144 <MX_USART2_UART_Init+0x50>
  {
    Error_Handler();
 8001140:	f000 f9d4 	bl	80014ec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001144:	bf00      	nop
 8001146:	bd80      	pop	{r7, pc}
 8001148:	20001860 	.word	0x20001860
 800114c:	40004400 	.word	0x40004400
 8001150:	001e8480 	.word	0x001e8480

08001154 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800115a:	4b10      	ldr	r3, [pc, #64]	@ (800119c <MX_DMA_Init+0x48>)
 800115c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800115e:	4a0f      	ldr	r2, [pc, #60]	@ (800119c <MX_DMA_Init+0x48>)
 8001160:	f043 0301 	orr.w	r3, r3, #1
 8001164:	6493      	str	r3, [r2, #72]	@ 0x48
 8001166:	4b0d      	ldr	r3, [pc, #52]	@ (800119c <MX_DMA_Init+0x48>)
 8001168:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800116a:	f003 0301 	and.w	r3, r3, #1
 800116e:	607b      	str	r3, [r7, #4]
 8001170:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 5, 0);
 8001172:	2200      	movs	r2, #0
 8001174:	2105      	movs	r1, #5
 8001176:	2010      	movs	r0, #16
 8001178:	f001 f888 	bl	800228c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 800117c:	2010      	movs	r0, #16
 800117e:	f001 f8a1 	bl	80022c4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 5, 0);
 8001182:	2200      	movs	r2, #0
 8001184:	2105      	movs	r1, #5
 8001186:	2011      	movs	r0, #17
 8001188:	f001 f880 	bl	800228c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 800118c:	2011      	movs	r0, #17
 800118e:	f001 f899 	bl	80022c4 <HAL_NVIC_EnableIRQ>

}
 8001192:	bf00      	nop
 8001194:	3708      	adds	r7, #8
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	40021000 	.word	0x40021000

080011a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b085      	sub	sp, #20
 80011a4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011a6:	4b15      	ldr	r3, [pc, #84]	@ (80011fc <MX_GPIO_Init+0x5c>)
 80011a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011aa:	4a14      	ldr	r2, [pc, #80]	@ (80011fc <MX_GPIO_Init+0x5c>)
 80011ac:	f043 0304 	orr.w	r3, r3, #4
 80011b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011b2:	4b12      	ldr	r3, [pc, #72]	@ (80011fc <MX_GPIO_Init+0x5c>)
 80011b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011b6:	f003 0304 	and.w	r3, r3, #4
 80011ba:	60fb      	str	r3, [r7, #12]
 80011bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011be:	4b0f      	ldr	r3, [pc, #60]	@ (80011fc <MX_GPIO_Init+0x5c>)
 80011c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011c2:	4a0e      	ldr	r2, [pc, #56]	@ (80011fc <MX_GPIO_Init+0x5c>)
 80011c4:	f043 0301 	orr.w	r3, r3, #1
 80011c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011ca:	4b0c      	ldr	r3, [pc, #48]	@ (80011fc <MX_GPIO_Init+0x5c>)
 80011cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011ce:	f003 0301 	and.w	r3, r3, #1
 80011d2:	60bb      	str	r3, [r7, #8]
 80011d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011d6:	4b09      	ldr	r3, [pc, #36]	@ (80011fc <MX_GPIO_Init+0x5c>)
 80011d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011da:	4a08      	ldr	r2, [pc, #32]	@ (80011fc <MX_GPIO_Init+0x5c>)
 80011dc:	f043 0302 	orr.w	r3, r3, #2
 80011e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011e2:	4b06      	ldr	r3, [pc, #24]	@ (80011fc <MX_GPIO_Init+0x5c>)
 80011e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011e6:	f003 0302 	and.w	r3, r3, #2
 80011ea:	607b      	str	r3, [r7, #4]
 80011ec:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80011ee:	bf00      	nop
 80011f0:	3714      	adds	r7, #20
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr
 80011fa:	bf00      	nop
 80011fc:	40021000 	.word	0x40021000

08001200 <enc_timer_callback>:
void microros_deallocate(void * pointer, void * state);
void * microros_reallocate(void * pointer, size_t size, void * state);
void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state);

void enc_timer_callback(rcl_timer_t * timer, int64_t last_call_time)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b086      	sub	sp, #24
 8001204:	af00      	add	r7, sp, #0
 8001206:	60f8      	str	r0, [r7, #12]
 8001208:	e9c7 2300 	strd	r2, r3, [r7]
	RCLC_UNUSED(last_call_time);
	if (timer != NULL)
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d00d      	beq.n	800122e <enc_timer_callback+0x2e>
	{
		rcl_ret_t ret = rcl_publish(&enc_publisher, &enc_msg, NULL);
 8001212:	2200      	movs	r2, #0
 8001214:	4908      	ldr	r1, [pc, #32]	@ (8001238 <enc_timer_callback+0x38>)
 8001216:	4809      	ldr	r0, [pc, #36]	@ (800123c <enc_timer_callback+0x3c>)
 8001218:	f008 fae0 	bl	80097dc <rcl_publish>
 800121c:	6178      	str	r0, [r7, #20]
		if (ret != RCL_RET_OK)
 800121e:	697b      	ldr	r3, [r7, #20]
 8001220:	2b00      	cmp	r3, #0
 8001222:	d004      	beq.n	800122e <enc_timer_callback+0x2e>
		{
			printf("Error publishing (line %d)\n", __LINE__);
 8001224:	f240 2177 	movw	r1, #631	@ 0x277
 8001228:	4805      	ldr	r0, [pc, #20]	@ (8001240 <enc_timer_callback+0x40>)
 800122a:	f016 f9e7 	bl	80175fc <iprintf>
		}
	}
}
 800122e:	bf00      	nop
 8001230:	3718      	adds	r7, #24
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	20005a30 	.word	0x20005a30
 800123c:	20005a24 	.word	0x20005a24
 8001240:	080187e4 	.word	0x080187e4

08001244 <imu_timer_callback>:

void imu_timer_callback(rcl_timer_t * timer, int64_t last_call_time)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b086      	sub	sp, #24
 8001248:	af00      	add	r7, sp, #0
 800124a:	60f8      	str	r0, [r7, #12]
 800124c:	e9c7 2300 	strd	r2, r3, [r7]
	RCLC_UNUSED(last_call_time);
	if (timer != NULL)
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d00d      	beq.n	8001272 <imu_timer_callback+0x2e>
	{
		rcl_ret_t ret = rcl_publish(&imu_publisher, &imu_msg, NULL);
 8001256:	2200      	movs	r2, #0
 8001258:	4908      	ldr	r1, [pc, #32]	@ (800127c <imu_timer_callback+0x38>)
 800125a:	4809      	ldr	r0, [pc, #36]	@ (8001280 <imu_timer_callback+0x3c>)
 800125c:	f008 fabe 	bl	80097dc <rcl_publish>
 8001260:	6178      	str	r0, [r7, #20]
		if (ret != RCL_RET_OK)
 8001262:	697b      	ldr	r3, [r7, #20]
 8001264:	2b00      	cmp	r3, #0
 8001266:	d004      	beq.n	8001272 <imu_timer_callback+0x2e>
		{
			printf("Error publishing (line %d)\n", __LINE__);
 8001268:	f44f 7121 	mov.w	r1, #644	@ 0x284
 800126c:	4805      	ldr	r0, [pc, #20]	@ (8001284 <imu_timer_callback+0x40>)
 800126e:	f016 f9c5 	bl	80175fc <iprintf>
		}
	}
}
 8001272:	bf00      	nop
 8001274:	3718      	adds	r7, #24
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	20005a4c 	.word	0x20005a4c
 8001280:	20005a28 	.word	0x20005a28
 8001284:	080187e4 	.word	0x080187e4

08001288 <subscription_callback>:

void subscription_callback(const void * msgin)
{
 8001288:	b480      	push	{r7}
 800128a:	b085      	sub	sp, #20
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  const std_msgs__msg__Float64MultiArray *cmd_msg = (const std_msgs__msg__Float64MultiArray *)msgin;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	60fb      	str	r3, [r7, #12]

	enc_msg.data.data[0] = cmd_msg->data.data[0];
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	691b      	ldr	r3, [r3, #16]
 8001298:	4a0a      	ldr	r2, [pc, #40]	@ (80012c4 <subscription_callback+0x3c>)
 800129a:	6911      	ldr	r1, [r2, #16]
 800129c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012a0:	e9c1 2300 	strd	r2, r3, [r1]
	enc_msg.data.data[1] = cmd_msg->data.data[1];
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	691b      	ldr	r3, [r3, #16]
 80012a8:	4a06      	ldr	r2, [pc, #24]	@ (80012c4 <subscription_callback+0x3c>)
 80012aa:	6912      	ldr	r2, [r2, #16]
 80012ac:	f102 0108 	add.w	r1, r2, #8
 80012b0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80012b4:	e9c1 2300 	strd	r2, r3, [r1]
}
 80012b8:	bf00      	nop
 80012ba:	3714      	adds	r7, #20
 80012bc:	46bd      	mov	sp, r7
 80012be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c2:	4770      	bx	lr
 80012c4:	20005a30 	.word	0x20005a30

080012c8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80012c8:	b5b0      	push	{r4, r5, r7, lr}
 80012ca:	b090      	sub	sp, #64	@ 0x40
 80012cc:	af02      	add	r7, sp, #8
 80012ce:	61f8      	str	r0, [r7, #28]
  /* USER CODE BEGIN 5 */

	// micro-ROS configuration

	rmw_uros_set_custom_transport(
 80012d0:	4b5d      	ldr	r3, [pc, #372]	@ (8001448 <StartDefaultTask+0x180>)
 80012d2:	9301      	str	r3, [sp, #4]
 80012d4:	4b5d      	ldr	r3, [pc, #372]	@ (800144c <StartDefaultTask+0x184>)
 80012d6:	9300      	str	r3, [sp, #0]
 80012d8:	4b5d      	ldr	r3, [pc, #372]	@ (8001450 <StartDefaultTask+0x188>)
 80012da:	4a5e      	ldr	r2, [pc, #376]	@ (8001454 <StartDefaultTask+0x18c>)
 80012dc:	495e      	ldr	r1, [pc, #376]	@ (8001458 <StartDefaultTask+0x190>)
 80012de:	2001      	movs	r0, #1
 80012e0:	f009 fb0e 	bl	800a900 <rmw_uros_set_custom_transport>
			cubemx_transport_open,
			cubemx_transport_close,
			cubemx_transport_write,
			cubemx_transport_read);

	rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 80012e4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012e8:	4618      	mov	r0, r3
 80012ea:	f009 fa3b 	bl	800a764 <rcutils_get_zero_initialized_allocator>
	freeRTOS_allocator.allocate = microros_allocate;
 80012ee:	4b5b      	ldr	r3, [pc, #364]	@ (800145c <StartDefaultTask+0x194>)
 80012f0:	627b      	str	r3, [r7, #36]	@ 0x24
	freeRTOS_allocator.deallocate = microros_deallocate;
 80012f2:	4b5b      	ldr	r3, [pc, #364]	@ (8001460 <StartDefaultTask+0x198>)
 80012f4:	62bb      	str	r3, [r7, #40]	@ 0x28
	freeRTOS_allocator.reallocate = microros_reallocate;
 80012f6:	4b5b      	ldr	r3, [pc, #364]	@ (8001464 <StartDefaultTask+0x19c>)
 80012f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	freeRTOS_allocator.zero_allocate =  microros_zero_allocate;
 80012fa:	4b5b      	ldr	r3, [pc, #364]	@ (8001468 <StartDefaultTask+0x1a0>)
 80012fc:	633b      	str	r3, [r7, #48]	@ 0x30

	if (!rcutils_set_default_allocator(&freeRTOS_allocator)) {
 80012fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001302:	4618      	mov	r0, r3
 8001304:	f009 fa3c 	bl	800a780 <rcutils_set_default_allocator>
 8001308:	4603      	mov	r3, r0
 800130a:	f083 0301 	eor.w	r3, r3, #1
 800130e:	b2db      	uxtb	r3, r3
 8001310:	2b00      	cmp	r3, #0
 8001312:	d004      	beq.n	800131e <StartDefaultTask+0x56>
		printf("Error on default allocators (line %d)\n", __LINE__);
 8001314:	f240 21ae 	movw	r1, #686	@ 0x2ae
 8001318:	4854      	ldr	r0, [pc, #336]	@ (800146c <StartDefaultTask+0x1a4>)
 800131a:	f016 f96f 	bl	80175fc <iprintf>
	}

	// micro-ROS app

	allocator = rcl_get_default_allocator();
 800131e:	4c54      	ldr	r4, [pc, #336]	@ (8001470 <StartDefaultTask+0x1a8>)
 8001320:	463b      	mov	r3, r7
 8001322:	4618      	mov	r0, r3
 8001324:	f009 fa4a 	bl	800a7bc <rcutils_get_default_allocator>
 8001328:	4625      	mov	r5, r4
 800132a:	463c      	mov	r4, r7
 800132c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800132e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001330:	6823      	ldr	r3, [r4, #0]
 8001332:	602b      	str	r3, [r5, #0]

	//create init_options
	rclc_support_init(&support, 0, NULL, &allocator);
 8001334:	4b4e      	ldr	r3, [pc, #312]	@ (8001470 <StartDefaultTask+0x1a8>)
 8001336:	2200      	movs	r2, #0
 8001338:	2100      	movs	r1, #0
 800133a:	484e      	ldr	r0, [pc, #312]	@ (8001474 <StartDefaultTask+0x1ac>)
 800133c:	f009 f8ec 	bl	800a518 <rclc_support_init>

	// create node
	rclc_node_init_default(&node, "cubemx_node", "", &support);
 8001340:	4b4c      	ldr	r3, [pc, #304]	@ (8001474 <StartDefaultTask+0x1ac>)
 8001342:	4a4d      	ldr	r2, [pc, #308]	@ (8001478 <StartDefaultTask+0x1b0>)
 8001344:	494d      	ldr	r1, [pc, #308]	@ (800147c <StartDefaultTask+0x1b4>)
 8001346:	484e      	ldr	r0, [pc, #312]	@ (8001480 <StartDefaultTask+0x1b8>)
 8001348:	f009 f930 	bl	800a5ac <rclc_node_init_default>

	// create publisher
	rclc_publisher_init_default(
 800134c:	f00a f804 	bl	800b358 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray>
 8001350:	4602      	mov	r2, r0
 8001352:	4b4c      	ldr	r3, [pc, #304]	@ (8001484 <StartDefaultTask+0x1bc>)
 8001354:	494a      	ldr	r1, [pc, #296]	@ (8001480 <StartDefaultTask+0x1b8>)
 8001356:	484c      	ldr	r0, [pc, #304]	@ (8001488 <StartDefaultTask+0x1c0>)
 8001358:	f009 f964 	bl	800a624 <rclc_publisher_init_default>
			&enc_publisher,
			&node,
			ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Float64MultiArray),
			"enc_raw");
	rclc_publisher_init_default(&imu_publisher,
 800135c:	f009 fffc 	bl	800b358 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray>
 8001360:	4602      	mov	r2, r0
 8001362:	4b4a      	ldr	r3, [pc, #296]	@ (800148c <StartDefaultTask+0x1c4>)
 8001364:	4946      	ldr	r1, [pc, #280]	@ (8001480 <StartDefaultTask+0x1b8>)
 8001366:	484a      	ldr	r0, [pc, #296]	@ (8001490 <StartDefaultTask+0x1c8>)
 8001368:	f009 f95c 	bl	800a624 <rclc_publisher_init_default>
			&node,
			ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Float64MultiArray),
			"imu_raw");

	rclc_subscription_init_default(
 800136c:	f009 fff4 	bl	800b358 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray>
 8001370:	4602      	mov	r2, r0
 8001372:	4b48      	ldr	r3, [pc, #288]	@ (8001494 <StartDefaultTask+0x1cc>)
 8001374:	4942      	ldr	r1, [pc, #264]	@ (8001480 <StartDefaultTask+0x1b8>)
 8001376:	4848      	ldr	r0, [pc, #288]	@ (8001498 <StartDefaultTask+0x1d0>)
 8001378:	f009 f988 	bl	800a68c <rclc_subscription_init_default>
			&cmd_subscription,
			&node,
			ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Float64MultiArray),
			"mcu_cmd");

	rclc_timer_init_default(
 800137c:	4b47      	ldr	r3, [pc, #284]	@ (800149c <StartDefaultTask+0x1d4>)
 800137e:	9300      	str	r3, [sp, #0]
 8001380:	a32f      	add	r3, pc, #188	@ (adr r3, 8001440 <StartDefaultTask+0x178>)
 8001382:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001386:	493b      	ldr	r1, [pc, #236]	@ (8001474 <StartDefaultTask+0x1ac>)
 8001388:	4845      	ldr	r0, [pc, #276]	@ (80014a0 <StartDefaultTask+0x1d8>)
 800138a:	f009 f9b3 	bl	800a6f4 <rclc_timer_init_default>
			&enc_timer,
			&support,
			RCL_MS_TO_NS(20),
			enc_timer_callback);

	rclc_timer_init_default(&imu_timer,
 800138e:	4b45      	ldr	r3, [pc, #276]	@ (80014a4 <StartDefaultTask+0x1dc>)
 8001390:	9300      	str	r3, [sp, #0]
 8001392:	4a45      	ldr	r2, [pc, #276]	@ (80014a8 <StartDefaultTask+0x1e0>)
 8001394:	f04f 0300 	mov.w	r3, #0
 8001398:	4936      	ldr	r1, [pc, #216]	@ (8001474 <StartDefaultTask+0x1ac>)
 800139a:	4844      	ldr	r0, [pc, #272]	@ (80014ac <StartDefaultTask+0x1e4>)
 800139c:	f009 f9aa 	bl	800a6f4 <rclc_timer_init_default>
			&support,
			RCL_MS_TO_NS(10),
			imu_timer_callback);

	enc_msg.data.capacity = 3;
 80013a0:	4b43      	ldr	r3, [pc, #268]	@ (80014b0 <StartDefaultTask+0x1e8>)
 80013a2:	2203      	movs	r2, #3
 80013a4:	619a      	str	r2, [r3, #24]
	enc_msg.data.data = (double*) malloc(enc_msg.data.capacity * sizeof(double));
 80013a6:	4b42      	ldr	r3, [pc, #264]	@ (80014b0 <StartDefaultTask+0x1e8>)
 80013a8:	699b      	ldr	r3, [r3, #24]
 80013aa:	00db      	lsls	r3, r3, #3
 80013ac:	4618      	mov	r0, r3
 80013ae:	f015 fe31 	bl	8017014 <malloc>
 80013b2:	4603      	mov	r3, r0
 80013b4:	461a      	mov	r2, r3
 80013b6:	4b3e      	ldr	r3, [pc, #248]	@ (80014b0 <StartDefaultTask+0x1e8>)
 80013b8:	611a      	str	r2, [r3, #16]
	enc_msg.data.size = 3;
 80013ba:	4b3d      	ldr	r3, [pc, #244]	@ (80014b0 <StartDefaultTask+0x1e8>)
 80013bc:	2203      	movs	r2, #3
 80013be:	615a      	str	r2, [r3, #20]

	imu_msg.data.capacity = 10;
 80013c0:	4b3c      	ldr	r3, [pc, #240]	@ (80014b4 <StartDefaultTask+0x1ec>)
 80013c2:	220a      	movs	r2, #10
 80013c4:	619a      	str	r2, [r3, #24]
	imu_msg.data.data = (double*) malloc(imu_msg.data.capacity * sizeof(double));
 80013c6:	4b3b      	ldr	r3, [pc, #236]	@ (80014b4 <StartDefaultTask+0x1ec>)
 80013c8:	699b      	ldr	r3, [r3, #24]
 80013ca:	00db      	lsls	r3, r3, #3
 80013cc:	4618      	mov	r0, r3
 80013ce:	f015 fe21 	bl	8017014 <malloc>
 80013d2:	4603      	mov	r3, r0
 80013d4:	461a      	mov	r2, r3
 80013d6:	4b37      	ldr	r3, [pc, #220]	@ (80014b4 <StartDefaultTask+0x1ec>)
 80013d8:	611a      	str	r2, [r3, #16]
	imu_msg.data.size = 10;
 80013da:	4b36      	ldr	r3, [pc, #216]	@ (80014b4 <StartDefaultTask+0x1ec>)
 80013dc:	220a      	movs	r2, #10
 80013de:	615a      	str	r2, [r3, #20]

	cmd_msg.data.capacity = 2;
 80013e0:	4b35      	ldr	r3, [pc, #212]	@ (80014b8 <StartDefaultTask+0x1f0>)
 80013e2:	2202      	movs	r2, #2
 80013e4:	619a      	str	r2, [r3, #24]
	cmd_msg.data.data = (double*) malloc(cmd_msg.data.capacity * sizeof(double));
 80013e6:	4b34      	ldr	r3, [pc, #208]	@ (80014b8 <StartDefaultTask+0x1f0>)
 80013e8:	699b      	ldr	r3, [r3, #24]
 80013ea:	00db      	lsls	r3, r3, #3
 80013ec:	4618      	mov	r0, r3
 80013ee:	f015 fe11 	bl	8017014 <malloc>
 80013f2:	4603      	mov	r3, r0
 80013f4:	461a      	mov	r2, r3
 80013f6:	4b30      	ldr	r3, [pc, #192]	@ (80014b8 <StartDefaultTask+0x1f0>)
 80013f8:	611a      	str	r2, [r3, #16]
	cmd_msg.data.size = 2;
 80013fa:	4b2f      	ldr	r3, [pc, #188]	@ (80014b8 <StartDefaultTask+0x1f0>)
 80013fc:	2202      	movs	r2, #2
 80013fe:	615a      	str	r2, [r3, #20]

	rclc_executor_init(&executor, &support.context, 3, &allocator);
 8001400:	4b1b      	ldr	r3, [pc, #108]	@ (8001470 <StartDefaultTask+0x1a8>)
 8001402:	2203      	movs	r2, #3
 8001404:	491b      	ldr	r1, [pc, #108]	@ (8001474 <StartDefaultTask+0x1ac>)
 8001406:	482d      	ldr	r0, [pc, #180]	@ (80014bc <StartDefaultTask+0x1f4>)
 8001408:	f008 fd76 	bl	8009ef8 <rclc_executor_init>
	rclc_executor_add_subscription(&executor, &cmd_subscription, &cmd_msg, &subscription_callback, ON_NEW_DATA);
 800140c:	2300      	movs	r3, #0
 800140e:	9300      	str	r3, [sp, #0]
 8001410:	4b2b      	ldr	r3, [pc, #172]	@ (80014c0 <StartDefaultTask+0x1f8>)
 8001412:	4a29      	ldr	r2, [pc, #164]	@ (80014b8 <StartDefaultTask+0x1f0>)
 8001414:	4920      	ldr	r1, [pc, #128]	@ (8001498 <StartDefaultTask+0x1d0>)
 8001416:	4829      	ldr	r0, [pc, #164]	@ (80014bc <StartDefaultTask+0x1f4>)
 8001418:	f008 fdde 	bl	8009fd8 <rclc_executor_add_subscription>
	rclc_executor_add_timer(&executor, &enc_timer);
 800141c:	4920      	ldr	r1, [pc, #128]	@ (80014a0 <StartDefaultTask+0x1d8>)
 800141e:	4827      	ldr	r0, [pc, #156]	@ (80014bc <StartDefaultTask+0x1f4>)
 8001420:	f008 fe0e 	bl	800a040 <rclc_executor_add_timer>
	rclc_executor_add_timer(&executor, &imu_timer);
 8001424:	4921      	ldr	r1, [pc, #132]	@ (80014ac <StartDefaultTask+0x1e4>)
 8001426:	4825      	ldr	r0, [pc, #148]	@ (80014bc <StartDefaultTask+0x1f4>)
 8001428:	f008 fe0a 	bl	800a040 <rclc_executor_add_timer>
	rclc_executor_spin(&executor);
 800142c:	4823      	ldr	r0, [pc, #140]	@ (80014bc <StartDefaultTask+0x1f4>)
 800142e:	f009 f833 	bl	800a498 <rclc_executor_spin>

	/* Infinite loop */
	for(;;)
	{
		rclc_executor_spin_some(&executor, RCL_MS_TO_NS(1));
 8001432:	4a24      	ldr	r2, [pc, #144]	@ (80014c4 <StartDefaultTask+0x1fc>)
 8001434:	f04f 0300 	mov.w	r3, #0
 8001438:	4820      	ldr	r0, [pc, #128]	@ (80014bc <StartDefaultTask+0x1f4>)
 800143a:	f009 f817 	bl	800a46c <rclc_executor_spin_some>
 800143e:	e7f8      	b.n	8001432 <StartDefaultTask+0x16a>
 8001440:	01312d00 	.word	0x01312d00
 8001444:	00000000 	.word	0x00000000
 8001448:	08000b7d 	.word	0x08000b7d
 800144c:	08000b1d 	.word	0x08000b1d
 8001450:	08000afd 	.word	0x08000afd
 8001454:	08000ad1 	.word	0x08000ad1
 8001458:	20001860 	.word	0x20001860
 800145c:	080014f9 	.word	0x080014f9
 8001460:	0800153d 	.word	0x0800153d
 8001464:	08001575 	.word	0x08001575
 8001468:	080015e1 	.word	0x080015e1
 800146c:	08018800 	.word	0x08018800
 8001470:	20005b40 	.word	0x20005b40
 8001474:	20005a84 	.word	0x20005a84
 8001478:	08018828 	.word	0x08018828
 800147c:	0801882c 	.word	0x0801882c
 8001480:	20005b54 	.word	0x20005b54
 8001484:	08018838 	.word	0x08018838
 8001488:	20005a24 	.word	0x20005a24
 800148c:	08018840 	.word	0x08018840
 8001490:	20005a28 	.word	0x20005a28
 8001494:	08018848 	.word	0x08018848
 8001498:	20005a2c 	.word	0x20005a2c
 800149c:	08001201 	.word	0x08001201
 80014a0:	20005b5c 	.word	0x20005b5c
 80014a4:	08001245 	.word	0x08001245
 80014a8:	00989680 	.word	0x00989680
 80014ac:	20005b60 	.word	0x20005b60
 80014b0:	20005a30 	.word	0x20005a30
 80014b4:	20005a4c 	.word	0x20005a4c
 80014b8:	20005a68 	.word	0x20005a68
 80014bc:	20005ab8 	.word	0x20005ab8
 80014c0:	08001289 	.word	0x08001289
 80014c4:	000f4240 	.word	0x000f4240

080014c8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b082      	sub	sp, #8
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4a04      	ldr	r2, [pc, #16]	@ (80014e8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d101      	bne.n	80014de <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80014da:	f000 fdff 	bl	80020dc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80014de:	bf00      	nop
 80014e0:	3708      	adds	r7, #8
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	40001000 	.word	0x40001000

080014ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80014f0:	b672      	cpsid	i
}
 80014f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014f4:	bf00      	nop
 80014f6:	e7fd      	b.n	80014f4 <Error_Handler+0x8>

080014f8 <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b082      	sub	sp, #8
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
 8001500:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8001502:	4b0c      	ldr	r3, [pc, #48]	@ (8001534 <microros_allocate+0x3c>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	461a      	mov	r2, r3
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	4413      	add	r3, r2
 800150c:	461a      	mov	r2, r3
 800150e:	4b09      	ldr	r3, [pc, #36]	@ (8001534 <microros_allocate+0x3c>)
 8001510:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8001512:	4b09      	ldr	r3, [pc, #36]	@ (8001538 <microros_allocate+0x40>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	461a      	mov	r2, r3
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	4413      	add	r3, r2
 800151c:	461a      	mov	r2, r3
 800151e:	4b06      	ldr	r3, [pc, #24]	@ (8001538 <microros_allocate+0x40>)
 8001520:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 8001522:	6878      	ldr	r0, [r7, #4]
 8001524:	f7ff f884 	bl	8000630 <pvPortMallocMicroROS>
 8001528:	4603      	mov	r3, r0
}
 800152a:	4618      	mov	r0, r3
 800152c:	3708      	adds	r7, #8
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	20005b64 	.word	0x20005b64
 8001538:	20005b68 	.word	0x20005b68

0800153c <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 800153c:	b580      	push	{r7, lr}
 800153e:	b082      	sub	sp, #8
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
 8001544:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d00c      	beq.n	8001566 <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 800154c:	6878      	ldr	r0, [r7, #4]
 800154e:	f7ff f993 	bl	8000878 <getBlockSize>
 8001552:	4603      	mov	r3, r0
 8001554:	4a06      	ldr	r2, [pc, #24]	@ (8001570 <microros_deallocate+0x34>)
 8001556:	6812      	ldr	r2, [r2, #0]
 8001558:	1ad3      	subs	r3, r2, r3
 800155a:	461a      	mov	r2, r3
 800155c:	4b04      	ldr	r3, [pc, #16]	@ (8001570 <microros_deallocate+0x34>)
 800155e:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 8001560:	6878      	ldr	r0, [r7, #4]
 8001562:	f7ff f92d 	bl	80007c0 <vPortFreeMicroROS>
  }
}
 8001566:	bf00      	nop
 8001568:	3708      	adds	r7, #8
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	20005b68 	.word	0x20005b68

08001574 <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 8001574:	b580      	push	{r7, lr}
 8001576:	b084      	sub	sp, #16
 8001578:	af00      	add	r7, sp, #0
 800157a:	60f8      	str	r0, [r7, #12]
 800157c:	60b9      	str	r1, [r7, #8]
 800157e:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8001580:	4b15      	ldr	r3, [pc, #84]	@ (80015d8 <microros_reallocate+0x64>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	461a      	mov	r2, r3
 8001586:	68bb      	ldr	r3, [r7, #8]
 8001588:	4413      	add	r3, r2
 800158a:	461a      	mov	r2, r3
 800158c:	4b12      	ldr	r3, [pc, #72]	@ (80015d8 <microros_reallocate+0x64>)
 800158e:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8001590:	4b12      	ldr	r3, [pc, #72]	@ (80015dc <microros_reallocate+0x68>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	461a      	mov	r2, r3
 8001596:	68bb      	ldr	r3, [r7, #8]
 8001598:	4413      	add	r3, r2
 800159a:	461a      	mov	r2, r3
 800159c:	4b0f      	ldr	r3, [pc, #60]	@ (80015dc <microros_reallocate+0x68>)
 800159e:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d104      	bne.n	80015b0 <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 80015a6:	68b8      	ldr	r0, [r7, #8]
 80015a8:	f7ff f842 	bl	8000630 <pvPortMallocMicroROS>
 80015ac:	4603      	mov	r3, r0
 80015ae:	e00e      	b.n	80015ce <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 80015b0:	68f8      	ldr	r0, [r7, #12]
 80015b2:	f7ff f961 	bl	8000878 <getBlockSize>
 80015b6:	4603      	mov	r3, r0
 80015b8:	4a08      	ldr	r2, [pc, #32]	@ (80015dc <microros_reallocate+0x68>)
 80015ba:	6812      	ldr	r2, [r2, #0]
 80015bc:	1ad3      	subs	r3, r2, r3
 80015be:	461a      	mov	r2, r3
 80015c0:	4b06      	ldr	r3, [pc, #24]	@ (80015dc <microros_reallocate+0x68>)
 80015c2:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 80015c4:	68b9      	ldr	r1, [r7, #8]
 80015c6:	68f8      	ldr	r0, [r7, #12]
 80015c8:	f7ff f974 	bl	80008b4 <pvPortReallocMicroROS>
 80015cc:	4603      	mov	r3, r0
  }
}
 80015ce:	4618      	mov	r0, r3
 80015d0:	3710      	adds	r7, #16
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	20005b64 	.word	0x20005b64
 80015dc:	20005b68 	.word	0x20005b68

080015e0 <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b084      	sub	sp, #16
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	60f8      	str	r0, [r7, #12]
 80015e8:	60b9      	str	r1, [r7, #8]
 80015ea:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	68ba      	ldr	r2, [r7, #8]
 80015f0:	fb02 f303 	mul.w	r3, r2, r3
 80015f4:	4a0c      	ldr	r2, [pc, #48]	@ (8001628 <microros_zero_allocate+0x48>)
 80015f6:	6812      	ldr	r2, [r2, #0]
 80015f8:	4413      	add	r3, r2
 80015fa:	461a      	mov	r2, r3
 80015fc:	4b0a      	ldr	r3, [pc, #40]	@ (8001628 <microros_zero_allocate+0x48>)
 80015fe:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	68ba      	ldr	r2, [r7, #8]
 8001604:	fb02 f303 	mul.w	r3, r2, r3
 8001608:	4a08      	ldr	r2, [pc, #32]	@ (800162c <microros_zero_allocate+0x4c>)
 800160a:	6812      	ldr	r2, [r2, #0]
 800160c:	4413      	add	r3, r2
 800160e:	461a      	mov	r2, r3
 8001610:	4b06      	ldr	r3, [pc, #24]	@ (800162c <microros_zero_allocate+0x4c>)
 8001612:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 8001614:	68b9      	ldr	r1, [r7, #8]
 8001616:	68f8      	ldr	r0, [r7, #12]
 8001618:	f7ff f979 	bl	800090e <pvPortCallocMicroROS>
 800161c:	4603      	mov	r3, r0
 800161e:	4618      	mov	r0, r3
 8001620:	3710      	adds	r7, #16
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	20005b64 	.word	0x20005b64
 800162c:	20005b68 	.word	0x20005b68

08001630 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 8001630:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001634:	b086      	sub	sp, #24
 8001636:	af00      	add	r7, sp, #0
 8001638:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800163c:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 800163e:	2300      	movs	r3, #0
 8001640:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 8001642:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001646:	a320      	add	r3, pc, #128	@ (adr r3, 80016c8 <UTILS_NanosecondsToTimespec+0x98>)
 8001648:	e9d3 2300 	ldrd	r2, r3, [r3]
 800164c:	f7fe fe28 	bl	80002a0 <__aeabi_ldivmod>
 8001650:	4602      	mov	r2, r0
 8001652:	460b      	mov	r3, r1
 8001654:	6879      	ldr	r1, [r7, #4]
 8001656:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 800165a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800165e:	a31a      	add	r3, pc, #104	@ (adr r3, 80016c8 <UTILS_NanosecondsToTimespec+0x98>)
 8001660:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001664:	f7fe fe1c 	bl	80002a0 <__aeabi_ldivmod>
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	689b      	ldr	r3, [r3, #8]
 8001670:	2b00      	cmp	r3, #0
 8001672:	da20      	bge.n	80016b6 <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	689b      	ldr	r3, [r3, #8]
 8001678:	4a11      	ldr	r2, [pc, #68]	@ (80016c0 <UTILS_NanosecondsToTimespec+0x90>)
 800167a:	fb82 1203 	smull	r1, r2, r2, r3
 800167e:	1712      	asrs	r2, r2, #28
 8001680:	17db      	asrs	r3, r3, #31
 8001682:	1ad3      	subs	r3, r2, r3
 8001684:	3301      	adds	r3, #1
 8001686:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800168e:	6979      	ldr	r1, [r7, #20]
 8001690:	17c8      	asrs	r0, r1, #31
 8001692:	460c      	mov	r4, r1
 8001694:	4605      	mov	r5, r0
 8001696:	ebb2 0804 	subs.w	r8, r2, r4
 800169a:	eb63 0905 	sbc.w	r9, r3, r5
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	689a      	ldr	r2, [r3, #8]
 80016a8:	697b      	ldr	r3, [r7, #20]
 80016aa:	4906      	ldr	r1, [pc, #24]	@ (80016c4 <UTILS_NanosecondsToTimespec+0x94>)
 80016ac:	fb01 f303 	mul.w	r3, r1, r3
 80016b0:	441a      	add	r2, r3
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	609a      	str	r2, [r3, #8]
    }
}
 80016b6:	bf00      	nop
 80016b8:	3718      	adds	r7, #24
 80016ba:	46bd      	mov	sp, r7
 80016bc:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80016c0:	44b82fa1 	.word	0x44b82fa1
 80016c4:	3b9aca00 	.word	0x3b9aca00
 80016c8:	3b9aca00 	.word	0x3b9aca00
 80016cc:	00000000 	.word	0x00000000

080016d0 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 80016d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80016d4:	b08e      	sub	sp, #56	@ 0x38
 80016d6:	af00      	add	r7, sp, #0
 80016d8:	6278      	str	r0, [r7, #36]	@ 0x24
 80016da:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 80016dc:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80016e0:	2300      	movs	r3, #0
 80016e2:	6013      	str	r3, [r2, #0]
 80016e4:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 80016e6:	f04f 0200 	mov.w	r2, #0
 80016ea:	f04f 0300 	mov.w	r3, #0
 80016ee:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 80016f2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80016f6:	4618      	mov	r0, r3
 80016f8:	f006 fda0 	bl	800823c <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 80016fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80016fe:	17da      	asrs	r2, r3, #31
 8001700:	61bb      	str	r3, [r7, #24]
 8001702:	61fa      	str	r2, [r7, #28]
 8001704:	f04f 0200 	mov.w	r2, #0
 8001708:	f04f 0300 	mov.w	r3, #0
 800170c:	69b9      	ldr	r1, [r7, #24]
 800170e:	000b      	movs	r3, r1
 8001710:	2200      	movs	r2, #0
 8001712:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 8001716:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001718:	2200      	movs	r2, #0
 800171a:	461c      	mov	r4, r3
 800171c:	4615      	mov	r5, r2
 800171e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001722:	1911      	adds	r1, r2, r4
 8001724:	60b9      	str	r1, [r7, #8]
 8001726:	416b      	adcs	r3, r5
 8001728:	60fb      	str	r3, [r7, #12]
 800172a:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800172e:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 8001732:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8001736:	4602      	mov	r2, r0
 8001738:	460b      	mov	r3, r1
 800173a:	f04f 0400 	mov.w	r4, #0
 800173e:	f04f 0500 	mov.w	r5, #0
 8001742:	015d      	lsls	r5, r3, #5
 8001744:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8001748:	0154      	lsls	r4, r2, #5
 800174a:	4622      	mov	r2, r4
 800174c:	462b      	mov	r3, r5
 800174e:	ebb2 0800 	subs.w	r8, r2, r0
 8001752:	eb63 0901 	sbc.w	r9, r3, r1
 8001756:	f04f 0200 	mov.w	r2, #0
 800175a:	f04f 0300 	mov.w	r3, #0
 800175e:	ea4f 2349 	mov.w	r3, r9, lsl #9
 8001762:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 8001766:	ea4f 2248 	mov.w	r2, r8, lsl #9
 800176a:	4690      	mov	r8, r2
 800176c:	4699      	mov	r9, r3
 800176e:	eb18 0a00 	adds.w	sl, r8, r0
 8001772:	eb49 0b01 	adc.w	fp, r9, r1
 8001776:	f04f 0200 	mov.w	r2, #0
 800177a:	f04f 0300 	mov.w	r3, #0
 800177e:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001782:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001786:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800178a:	ebb2 040a 	subs.w	r4, r2, sl
 800178e:	603c      	str	r4, [r7, #0]
 8001790:	eb63 030b 	sbc.w	r3, r3, fp
 8001794:	607b      	str	r3, [r7, #4]
 8001796:	e9d7 4500 	ldrd	r4, r5, [r7]
 800179a:	4623      	mov	r3, r4
 800179c:	181b      	adds	r3, r3, r0
 800179e:	613b      	str	r3, [r7, #16]
 80017a0:	462b      	mov	r3, r5
 80017a2:	eb41 0303 	adc.w	r3, r1, r3
 80017a6:	617b      	str	r3, [r7, #20]
 80017a8:	6a3a      	ldr	r2, [r7, #32]
 80017aa:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80017ae:	f7ff ff3f 	bl	8001630 <UTILS_NanosecondsToTimespec>

    return 0;
 80017b2:	2300      	movs	r3, #0
 80017b4:	4618      	mov	r0, r3
 80017b6:	3738      	adds	r7, #56	@ 0x38
 80017b8:	46bd      	mov	sp, r7
 80017ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

080017c0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b082      	sub	sp, #8
 80017c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017c6:	4b11      	ldr	r3, [pc, #68]	@ (800180c <HAL_MspInit+0x4c>)
 80017c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017ca:	4a10      	ldr	r2, [pc, #64]	@ (800180c <HAL_MspInit+0x4c>)
 80017cc:	f043 0301 	orr.w	r3, r3, #1
 80017d0:	6613      	str	r3, [r2, #96]	@ 0x60
 80017d2:	4b0e      	ldr	r3, [pc, #56]	@ (800180c <HAL_MspInit+0x4c>)
 80017d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017d6:	f003 0301 	and.w	r3, r3, #1
 80017da:	607b      	str	r3, [r7, #4]
 80017dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017de:	4b0b      	ldr	r3, [pc, #44]	@ (800180c <HAL_MspInit+0x4c>)
 80017e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017e2:	4a0a      	ldr	r2, [pc, #40]	@ (800180c <HAL_MspInit+0x4c>)
 80017e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017e8:	6593      	str	r3, [r2, #88]	@ 0x58
 80017ea:	4b08      	ldr	r3, [pc, #32]	@ (800180c <HAL_MspInit+0x4c>)
 80017ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017f2:	603b      	str	r3, [r7, #0]
 80017f4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80017f6:	2200      	movs	r2, #0
 80017f8:	210f      	movs	r1, #15
 80017fa:	f06f 0001 	mvn.w	r0, #1
 80017fe:	f000 fd45 	bl	800228c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001802:	bf00      	nop
 8001804:	3708      	adds	r7, #8
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	40021000 	.word	0x40021000

08001810 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b0a2      	sub	sp, #136	@ 0x88
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001818:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800181c:	2200      	movs	r2, #0
 800181e:	601a      	str	r2, [r3, #0]
 8001820:	605a      	str	r2, [r3, #4]
 8001822:	609a      	str	r2, [r3, #8]
 8001824:	60da      	str	r2, [r3, #12]
 8001826:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001828:	f107 0320 	add.w	r3, r7, #32
 800182c:	2254      	movs	r2, #84	@ 0x54
 800182e:	2100      	movs	r1, #0
 8001830:	4618      	mov	r0, r3
 8001832:	f016 f863 	bl	80178fc <memset>
  if(hi2c->Instance==I2C1)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4a5e      	ldr	r2, [pc, #376]	@ (80019b4 <HAL_I2C_MspInit+0x1a4>)
 800183c:	4293      	cmp	r3, r2
 800183e:	d158      	bne.n	80018f2 <HAL_I2C_MspInit+0xe2>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001840:	2340      	movs	r3, #64	@ 0x40
 8001842:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001844:	2300      	movs	r3, #0
 8001846:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001848:	f107 0320 	add.w	r3, r7, #32
 800184c:	4618      	mov	r0, r3
 800184e:	f002 f943 	bl	8003ad8 <HAL_RCCEx_PeriphCLKConfig>
 8001852:	4603      	mov	r3, r0
 8001854:	2b00      	cmp	r3, #0
 8001856:	d001      	beq.n	800185c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001858:	f7ff fe48 	bl	80014ec <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800185c:	4b56      	ldr	r3, [pc, #344]	@ (80019b8 <HAL_I2C_MspInit+0x1a8>)
 800185e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001860:	4a55      	ldr	r2, [pc, #340]	@ (80019b8 <HAL_I2C_MspInit+0x1a8>)
 8001862:	f043 0301 	orr.w	r3, r3, #1
 8001866:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001868:	4b53      	ldr	r3, [pc, #332]	@ (80019b8 <HAL_I2C_MspInit+0x1a8>)
 800186a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800186c:	f003 0301 	and.w	r3, r3, #1
 8001870:	61fb      	str	r3, [r7, #28]
 8001872:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001874:	4b50      	ldr	r3, [pc, #320]	@ (80019b8 <HAL_I2C_MspInit+0x1a8>)
 8001876:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001878:	4a4f      	ldr	r2, [pc, #316]	@ (80019b8 <HAL_I2C_MspInit+0x1a8>)
 800187a:	f043 0302 	orr.w	r3, r3, #2
 800187e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001880:	4b4d      	ldr	r3, [pc, #308]	@ (80019b8 <HAL_I2C_MspInit+0x1a8>)
 8001882:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001884:	f003 0302 	and.w	r3, r3, #2
 8001888:	61bb      	str	r3, [r7, #24]
 800188a:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PA10     ------> I2C1_SDA
    PB6     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800188c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001890:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001892:	2312      	movs	r3, #18
 8001894:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001896:	2300      	movs	r3, #0
 8001898:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800189a:	2303      	movs	r3, #3
 800189c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80018a0:	2304      	movs	r3, #4
 80018a2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018a6:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80018aa:	4619      	mov	r1, r3
 80018ac:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80018b0:	f000 ff98 	bl	80027e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80018b4:	2340      	movs	r3, #64	@ 0x40
 80018b6:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018b8:	2312      	movs	r3, #18
 80018ba:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018bc:	2300      	movs	r3, #0
 80018be:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018c0:	2303      	movs	r3, #3
 80018c2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80018c6:	2304      	movs	r3, #4
 80018c8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018cc:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80018d0:	4619      	mov	r1, r3
 80018d2:	483a      	ldr	r0, [pc, #232]	@ (80019bc <HAL_I2C_MspInit+0x1ac>)
 80018d4:	f000 ff86 	bl	80027e4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80018d8:	4b37      	ldr	r3, [pc, #220]	@ (80019b8 <HAL_I2C_MspInit+0x1a8>)
 80018da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018dc:	4a36      	ldr	r2, [pc, #216]	@ (80019b8 <HAL_I2C_MspInit+0x1a8>)
 80018de:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80018e2:	6593      	str	r3, [r2, #88]	@ 0x58
 80018e4:	4b34      	ldr	r3, [pc, #208]	@ (80019b8 <HAL_I2C_MspInit+0x1a8>)
 80018e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018e8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80018ec:	617b      	str	r3, [r7, #20]
 80018ee:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80018f0:	e05c      	b.n	80019ac <HAL_I2C_MspInit+0x19c>
  else if(hi2c->Instance==I2C3)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4a32      	ldr	r2, [pc, #200]	@ (80019c0 <HAL_I2C_MspInit+0x1b0>)
 80018f8:	4293      	cmp	r3, r2
 80018fa:	d157      	bne.n	80019ac <HAL_I2C_MspInit+0x19c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80018fc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001900:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8001902:	2300      	movs	r3, #0
 8001904:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001906:	f107 0320 	add.w	r3, r7, #32
 800190a:	4618      	mov	r0, r3
 800190c:	f002 f8e4 	bl	8003ad8 <HAL_RCCEx_PeriphCLKConfig>
 8001910:	4603      	mov	r3, r0
 8001912:	2b00      	cmp	r3, #0
 8001914:	d001      	beq.n	800191a <HAL_I2C_MspInit+0x10a>
      Error_Handler();
 8001916:	f7ff fde9 	bl	80014ec <Error_Handler>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800191a:	4b27      	ldr	r3, [pc, #156]	@ (80019b8 <HAL_I2C_MspInit+0x1a8>)
 800191c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800191e:	4a26      	ldr	r2, [pc, #152]	@ (80019b8 <HAL_I2C_MspInit+0x1a8>)
 8001920:	f043 0301 	orr.w	r3, r3, #1
 8001924:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001926:	4b24      	ldr	r3, [pc, #144]	@ (80019b8 <HAL_I2C_MspInit+0x1a8>)
 8001928:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800192a:	f003 0301 	and.w	r3, r3, #1
 800192e:	613b      	str	r3, [r7, #16]
 8001930:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001932:	4b21      	ldr	r3, [pc, #132]	@ (80019b8 <HAL_I2C_MspInit+0x1a8>)
 8001934:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001936:	4a20      	ldr	r2, [pc, #128]	@ (80019b8 <HAL_I2C_MspInit+0x1a8>)
 8001938:	f043 0302 	orr.w	r3, r3, #2
 800193c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800193e:	4b1e      	ldr	r3, [pc, #120]	@ (80019b8 <HAL_I2C_MspInit+0x1a8>)
 8001940:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001942:	f003 0302 	and.w	r3, r3, #2
 8001946:	60fb      	str	r3, [r7, #12]
 8001948:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800194a:	2380      	movs	r3, #128	@ 0x80
 800194c:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800194e:	2312      	movs	r3, #18
 8001950:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001952:	2300      	movs	r3, #0
 8001954:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001956:	2303      	movs	r3, #3
 8001958:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800195c:	2304      	movs	r3, #4
 800195e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001962:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001966:	4619      	mov	r1, r3
 8001968:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800196c:	f000 ff3a 	bl	80027e4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001970:	2310      	movs	r3, #16
 8001972:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001974:	2312      	movs	r3, #18
 8001976:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001978:	2300      	movs	r3, #0
 800197a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800197c:	2303      	movs	r3, #3
 800197e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001982:	2304      	movs	r3, #4
 8001984:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001988:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800198c:	4619      	mov	r1, r3
 800198e:	480b      	ldr	r0, [pc, #44]	@ (80019bc <HAL_I2C_MspInit+0x1ac>)
 8001990:	f000 ff28 	bl	80027e4 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001994:	4b08      	ldr	r3, [pc, #32]	@ (80019b8 <HAL_I2C_MspInit+0x1a8>)
 8001996:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001998:	4a07      	ldr	r2, [pc, #28]	@ (80019b8 <HAL_I2C_MspInit+0x1a8>)
 800199a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800199e:	6593      	str	r3, [r2, #88]	@ 0x58
 80019a0:	4b05      	ldr	r3, [pc, #20]	@ (80019b8 <HAL_I2C_MspInit+0x1a8>)
 80019a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019a4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80019a8:	60bb      	str	r3, [r7, #8]
 80019aa:	68bb      	ldr	r3, [r7, #8]
}
 80019ac:	bf00      	nop
 80019ae:	3788      	adds	r7, #136	@ 0x88
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}
 80019b4:	40005400 	.word	0x40005400
 80019b8:	40021000 	.word	0x40021000
 80019bc:	48000400 	.word	0x48000400
 80019c0:	40005c00 	.word	0x40005c00

080019c4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b08c      	sub	sp, #48	@ 0x30
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019cc:	f107 031c 	add.w	r3, r7, #28
 80019d0:	2200      	movs	r2, #0
 80019d2:	601a      	str	r2, [r3, #0]
 80019d4:	605a      	str	r2, [r3, #4]
 80019d6:	609a      	str	r2, [r3, #8]
 80019d8:	60da      	str	r2, [r3, #12]
 80019da:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a3d      	ldr	r2, [pc, #244]	@ (8001ad8 <HAL_TIM_Encoder_MspInit+0x114>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d12a      	bne.n	8001a3c <HAL_TIM_Encoder_MspInit+0x78>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80019e6:	4b3d      	ldr	r3, [pc, #244]	@ (8001adc <HAL_TIM_Encoder_MspInit+0x118>)
 80019e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019ea:	4a3c      	ldr	r2, [pc, #240]	@ (8001adc <HAL_TIM_Encoder_MspInit+0x118>)
 80019ec:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80019f0:	6613      	str	r3, [r2, #96]	@ 0x60
 80019f2:	4b3a      	ldr	r3, [pc, #232]	@ (8001adc <HAL_TIM_Encoder_MspInit+0x118>)
 80019f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019f6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80019fa:	61bb      	str	r3, [r7, #24]
 80019fc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019fe:	4b37      	ldr	r3, [pc, #220]	@ (8001adc <HAL_TIM_Encoder_MspInit+0x118>)
 8001a00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a02:	4a36      	ldr	r2, [pc, #216]	@ (8001adc <HAL_TIM_Encoder_MspInit+0x118>)
 8001a04:	f043 0301 	orr.w	r3, r3, #1
 8001a08:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a0a:	4b34      	ldr	r3, [pc, #208]	@ (8001adc <HAL_TIM_Encoder_MspInit+0x118>)
 8001a0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a0e:	f003 0301 	and.w	r3, r3, #1
 8001a12:	617b      	str	r3, [r7, #20]
 8001a14:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001a16:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001a1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a1c:	2302      	movs	r3, #2
 8001a1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a20:	2300      	movs	r3, #0
 8001a22:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a24:	2300      	movs	r3, #0
 8001a26:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001a28:	2301      	movs	r3, #1
 8001a2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a2c:	f107 031c 	add.w	r3, r7, #28
 8001a30:	4619      	mov	r1, r3
 8001a32:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a36:	f000 fed5 	bl	80027e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001a3a:	e049      	b.n	8001ad0 <HAL_TIM_Encoder_MspInit+0x10c>
  else if(htim_encoder->Instance==TIM2)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001a44:	d144      	bne.n	8001ad0 <HAL_TIM_Encoder_MspInit+0x10c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a46:	4b25      	ldr	r3, [pc, #148]	@ (8001adc <HAL_TIM_Encoder_MspInit+0x118>)
 8001a48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a4a:	4a24      	ldr	r2, [pc, #144]	@ (8001adc <HAL_TIM_Encoder_MspInit+0x118>)
 8001a4c:	f043 0301 	orr.w	r3, r3, #1
 8001a50:	6593      	str	r3, [r2, #88]	@ 0x58
 8001a52:	4b22      	ldr	r3, [pc, #136]	@ (8001adc <HAL_TIM_Encoder_MspInit+0x118>)
 8001a54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a56:	f003 0301 	and.w	r3, r3, #1
 8001a5a:	613b      	str	r3, [r7, #16]
 8001a5c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a5e:	4b1f      	ldr	r3, [pc, #124]	@ (8001adc <HAL_TIM_Encoder_MspInit+0x118>)
 8001a60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a62:	4a1e      	ldr	r2, [pc, #120]	@ (8001adc <HAL_TIM_Encoder_MspInit+0x118>)
 8001a64:	f043 0301 	orr.w	r3, r3, #1
 8001a68:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a6a:	4b1c      	ldr	r3, [pc, #112]	@ (8001adc <HAL_TIM_Encoder_MspInit+0x118>)
 8001a6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a6e:	f003 0301 	and.w	r3, r3, #1
 8001a72:	60fb      	str	r3, [r7, #12]
 8001a74:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a76:	4b19      	ldr	r3, [pc, #100]	@ (8001adc <HAL_TIM_Encoder_MspInit+0x118>)
 8001a78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a7a:	4a18      	ldr	r2, [pc, #96]	@ (8001adc <HAL_TIM_Encoder_MspInit+0x118>)
 8001a7c:	f043 0302 	orr.w	r3, r3, #2
 8001a80:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a82:	4b16      	ldr	r3, [pc, #88]	@ (8001adc <HAL_TIM_Encoder_MspInit+0x118>)
 8001a84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a86:	f003 0302 	and.w	r3, r3, #2
 8001a8a:	60bb      	str	r3, [r7, #8]
 8001a8c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001a8e:	2320      	movs	r3, #32
 8001a90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a92:	2302      	movs	r3, #2
 8001a94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a96:	2300      	movs	r3, #0
 8001a98:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aa2:	f107 031c 	add.w	r3, r7, #28
 8001aa6:	4619      	mov	r1, r3
 8001aa8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001aac:	f000 fe9a 	bl	80027e4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001ab0:	2308      	movs	r3, #8
 8001ab2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ab4:	2302      	movs	r3, #2
 8001ab6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001abc:	2300      	movs	r3, #0
 8001abe:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ac4:	f107 031c 	add.w	r3, r7, #28
 8001ac8:	4619      	mov	r1, r3
 8001aca:	4805      	ldr	r0, [pc, #20]	@ (8001ae0 <HAL_TIM_Encoder_MspInit+0x11c>)
 8001acc:	f000 fe8a 	bl	80027e4 <HAL_GPIO_Init>
}
 8001ad0:	bf00      	nop
 8001ad2:	3730      	adds	r7, #48	@ 0x30
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	40012c00 	.word	0x40012c00
 8001adc:	40021000 	.word	0x40021000
 8001ae0:	48000400 	.word	0x48000400

08001ae4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b085      	sub	sp, #20
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM15)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a0a      	ldr	r2, [pc, #40]	@ (8001b1c <HAL_TIM_Base_MspInit+0x38>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d10b      	bne.n	8001b0e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM15_MspInit 0 */

  /* USER CODE END TIM15_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 8001af6:	4b0a      	ldr	r3, [pc, #40]	@ (8001b20 <HAL_TIM_Base_MspInit+0x3c>)
 8001af8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001afa:	4a09      	ldr	r2, [pc, #36]	@ (8001b20 <HAL_TIM_Base_MspInit+0x3c>)
 8001afc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b00:	6613      	str	r3, [r2, #96]	@ 0x60
 8001b02:	4b07      	ldr	r3, [pc, #28]	@ (8001b20 <HAL_TIM_Base_MspInit+0x3c>)
 8001b04:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b06:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b0a:	60fb      	str	r3, [r7, #12]
 8001b0c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8001b0e:	bf00      	nop
 8001b10:	3714      	adds	r7, #20
 8001b12:	46bd      	mov	sp, r7
 8001b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b18:	4770      	bx	lr
 8001b1a:	bf00      	nop
 8001b1c:	40014000 	.word	0x40014000
 8001b20:	40021000 	.word	0x40021000

08001b24 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b088      	sub	sp, #32
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b2c:	f107 030c 	add.w	r3, r7, #12
 8001b30:	2200      	movs	r2, #0
 8001b32:	601a      	str	r2, [r3, #0]
 8001b34:	605a      	str	r2, [r3, #4]
 8001b36:	609a      	str	r2, [r3, #8]
 8001b38:	60da      	str	r2, [r3, #12]
 8001b3a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM15)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a11      	ldr	r2, [pc, #68]	@ (8001b88 <HAL_TIM_MspPostInit+0x64>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d11c      	bne.n	8001b80 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM15_MspPostInit 0 */

  /* USER CODE END TIM15_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b46:	4b11      	ldr	r3, [pc, #68]	@ (8001b8c <HAL_TIM_MspPostInit+0x68>)
 8001b48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b4a:	4a10      	ldr	r2, [pc, #64]	@ (8001b8c <HAL_TIM_MspPostInit+0x68>)
 8001b4c:	f043 0301 	orr.w	r3, r3, #1
 8001b50:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b52:	4b0e      	ldr	r3, [pc, #56]	@ (8001b8c <HAL_TIM_MspPostInit+0x68>)
 8001b54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b56:	f003 0301 	and.w	r3, r3, #1
 8001b5a:	60bb      	str	r3, [r7, #8]
 8001b5c:	68bb      	ldr	r3, [r7, #8]
    /**TIM15 GPIO Configuration
    PA1     ------> TIM15_CH1N
    PA3     ------> TIM15_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 8001b5e:	230a      	movs	r3, #10
 8001b60:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b62:	2302      	movs	r3, #2
 8001b64:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b66:	2300      	movs	r3, #0
 8001b68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 8001b6e:	230e      	movs	r3, #14
 8001b70:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b72:	f107 030c 	add.w	r3, r7, #12
 8001b76:	4619      	mov	r1, r3
 8001b78:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b7c:	f000 fe32 	bl	80027e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8001b80:	bf00      	nop
 8001b82:	3720      	adds	r7, #32
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}
 8001b88:	40014000 	.word	0x40014000
 8001b8c:	40021000 	.word	0x40021000

08001b90 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b09e      	sub	sp, #120	@ 0x78
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b98:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	601a      	str	r2, [r3, #0]
 8001ba0:	605a      	str	r2, [r3, #4]
 8001ba2:	609a      	str	r2, [r3, #8]
 8001ba4:	60da      	str	r2, [r3, #12]
 8001ba6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ba8:	f107 0310 	add.w	r3, r7, #16
 8001bac:	2254      	movs	r2, #84	@ 0x54
 8001bae:	2100      	movs	r1, #0
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f015 fea3 	bl	80178fc <memset>
  if(huart->Instance==USART2)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4a56      	ldr	r2, [pc, #344]	@ (8001d14 <HAL_UART_MspInit+0x184>)
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	f040 80a5 	bne.w	8001d0c <HAL_UART_MspInit+0x17c>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001bc2:	2302      	movs	r3, #2
 8001bc4:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001bca:	f107 0310 	add.w	r3, r7, #16
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f001 ff82 	bl	8003ad8 <HAL_RCCEx_PeriphCLKConfig>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d001      	beq.n	8001bde <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001bda:	f7ff fc87 	bl	80014ec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001bde:	4b4e      	ldr	r3, [pc, #312]	@ (8001d18 <HAL_UART_MspInit+0x188>)
 8001be0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001be2:	4a4d      	ldr	r2, [pc, #308]	@ (8001d18 <HAL_UART_MspInit+0x188>)
 8001be4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001be8:	6593      	str	r3, [r2, #88]	@ 0x58
 8001bea:	4b4b      	ldr	r3, [pc, #300]	@ (8001d18 <HAL_UART_MspInit+0x188>)
 8001bec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bf2:	60fb      	str	r3, [r7, #12]
 8001bf4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bf6:	4b48      	ldr	r3, [pc, #288]	@ (8001d18 <HAL_UART_MspInit+0x188>)
 8001bf8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bfa:	4a47      	ldr	r2, [pc, #284]	@ (8001d18 <HAL_UART_MspInit+0x188>)
 8001bfc:	f043 0301 	orr.w	r3, r3, #1
 8001c00:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c02:	4b45      	ldr	r3, [pc, #276]	@ (8001d18 <HAL_UART_MspInit+0x188>)
 8001c04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c06:	f003 0301 	and.w	r3, r3, #1
 8001c0a:	60bb      	str	r3, [r7, #8]
 8001c0c:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8001c0e:	2304      	movs	r3, #4
 8001c10:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c12:	2302      	movs	r3, #2
 8001c14:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c16:	2300      	movs	r3, #0
 8001c18:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c1a:	2303      	movs	r3, #3
 8001c1c:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001c1e:	2307      	movs	r3, #7
 8001c20:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8001c22:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001c26:	4619      	mov	r1, r3
 8001c28:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c2c:	f000 fdda 	bl	80027e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8001c30:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001c34:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c36:	2302      	movs	r3, #2
 8001c38:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c3e:	2303      	movs	r3, #3
 8001c40:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8001c42:	2303      	movs	r3, #3
 8001c44:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8001c46:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001c4a:	4619      	mov	r1, r3
 8001c4c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c50:	f000 fdc8 	bl	80027e4 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8001c54:	4b31      	ldr	r3, [pc, #196]	@ (8001d1c <HAL_UART_MspInit+0x18c>)
 8001c56:	4a32      	ldr	r2, [pc, #200]	@ (8001d20 <HAL_UART_MspInit+0x190>)
 8001c58:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_2;
 8001c5a:	4b30      	ldr	r3, [pc, #192]	@ (8001d1c <HAL_UART_MspInit+0x18c>)
 8001c5c:	2202      	movs	r2, #2
 8001c5e:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001c60:	4b2e      	ldr	r3, [pc, #184]	@ (8001d1c <HAL_UART_MspInit+0x18c>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c66:	4b2d      	ldr	r3, [pc, #180]	@ (8001d1c <HAL_UART_MspInit+0x18c>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001c6c:	4b2b      	ldr	r3, [pc, #172]	@ (8001d1c <HAL_UART_MspInit+0x18c>)
 8001c6e:	2280      	movs	r2, #128	@ 0x80
 8001c70:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001c72:	4b2a      	ldr	r3, [pc, #168]	@ (8001d1c <HAL_UART_MspInit+0x18c>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c78:	4b28      	ldr	r3, [pc, #160]	@ (8001d1c <HAL_UART_MspInit+0x18c>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8001c7e:	4b27      	ldr	r3, [pc, #156]	@ (8001d1c <HAL_UART_MspInit+0x18c>)
 8001c80:	2220      	movs	r2, #32
 8001c82:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001c84:	4b25      	ldr	r3, [pc, #148]	@ (8001d1c <HAL_UART_MspInit+0x18c>)
 8001c86:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 8001c8a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001c8c:	4823      	ldr	r0, [pc, #140]	@ (8001d1c <HAL_UART_MspInit+0x18c>)
 8001c8e:	f000 fb27 	bl	80022e0 <HAL_DMA_Init>
 8001c92:	4603      	mov	r3, r0
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d001      	beq.n	8001c9c <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 8001c98:	f7ff fc28 	bl	80014ec <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	4a1f      	ldr	r2, [pc, #124]	@ (8001d1c <HAL_UART_MspInit+0x18c>)
 8001ca0:	675a      	str	r2, [r3, #116]	@ 0x74
 8001ca2:	4a1e      	ldr	r2, [pc, #120]	@ (8001d1c <HAL_UART_MspInit+0x18c>)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8001ca8:	4b1e      	ldr	r3, [pc, #120]	@ (8001d24 <HAL_UART_MspInit+0x194>)
 8001caa:	4a1f      	ldr	r2, [pc, #124]	@ (8001d28 <HAL_UART_MspInit+0x198>)
 8001cac:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_2;
 8001cae:	4b1d      	ldr	r3, [pc, #116]	@ (8001d24 <HAL_UART_MspInit+0x194>)
 8001cb0:	2202      	movs	r2, #2
 8001cb2:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001cb4:	4b1b      	ldr	r3, [pc, #108]	@ (8001d24 <HAL_UART_MspInit+0x194>)
 8001cb6:	2210      	movs	r2, #16
 8001cb8:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001cba:	4b1a      	ldr	r3, [pc, #104]	@ (8001d24 <HAL_UART_MspInit+0x194>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001cc0:	4b18      	ldr	r3, [pc, #96]	@ (8001d24 <HAL_UART_MspInit+0x194>)
 8001cc2:	2280      	movs	r2, #128	@ 0x80
 8001cc4:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001cc6:	4b17      	ldr	r3, [pc, #92]	@ (8001d24 <HAL_UART_MspInit+0x194>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001ccc:	4b15      	ldr	r3, [pc, #84]	@ (8001d24 <HAL_UART_MspInit+0x194>)
 8001cce:	2200      	movs	r2, #0
 8001cd0:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001cd2:	4b14      	ldr	r3, [pc, #80]	@ (8001d24 <HAL_UART_MspInit+0x194>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001cd8:	4b12      	ldr	r3, [pc, #72]	@ (8001d24 <HAL_UART_MspInit+0x194>)
 8001cda:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 8001cde:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001ce0:	4810      	ldr	r0, [pc, #64]	@ (8001d24 <HAL_UART_MspInit+0x194>)
 8001ce2:	f000 fafd 	bl	80022e0 <HAL_DMA_Init>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d001      	beq.n	8001cf0 <HAL_UART_MspInit+0x160>
    {
      Error_Handler();
 8001cec:	f7ff fbfe 	bl	80014ec <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	4a0c      	ldr	r2, [pc, #48]	@ (8001d24 <HAL_UART_MspInit+0x194>)
 8001cf4:	671a      	str	r2, [r3, #112]	@ 0x70
 8001cf6:	4a0b      	ldr	r2, [pc, #44]	@ (8001d24 <HAL_UART_MspInit+0x194>)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	2105      	movs	r1, #5
 8001d00:	2026      	movs	r0, #38	@ 0x26
 8001d02:	f000 fac3 	bl	800228c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001d06:	2026      	movs	r0, #38	@ 0x26
 8001d08:	f000 fadc 	bl	80022c4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001d0c:	bf00      	nop
 8001d0e:	3778      	adds	r7, #120	@ 0x78
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}
 8001d14:	40004400 	.word	0x40004400
 8001d18:	40021000 	.word	0x40021000
 8001d1c:	200018e8 	.word	0x200018e8
 8001d20:	4002006c 	.word	0x4002006c
 8001d24:	20001930 	.word	0x20001930
 8001d28:	40020080 	.word	0x40020080

08001d2c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b08e      	sub	sp, #56	@ 0x38
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001d34:	2300      	movs	r3, #0
 8001d36:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001d3a:	4b34      	ldr	r3, [pc, #208]	@ (8001e0c <HAL_InitTick+0xe0>)
 8001d3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d3e:	4a33      	ldr	r2, [pc, #204]	@ (8001e0c <HAL_InitTick+0xe0>)
 8001d40:	f043 0310 	orr.w	r3, r3, #16
 8001d44:	6593      	str	r3, [r2, #88]	@ 0x58
 8001d46:	4b31      	ldr	r3, [pc, #196]	@ (8001e0c <HAL_InitTick+0xe0>)
 8001d48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d4a:	f003 0310 	and.w	r3, r3, #16
 8001d4e:	60fb      	str	r3, [r7, #12]
 8001d50:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001d52:	f107 0210 	add.w	r2, r7, #16
 8001d56:	f107 0314 	add.w	r3, r7, #20
 8001d5a:	4611      	mov	r1, r2
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f001 fe29 	bl	80039b4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001d62:	6a3b      	ldr	r3, [r7, #32]
 8001d64:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001d66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d103      	bne.n	8001d74 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001d6c:	f001 fdf6 	bl	800395c <HAL_RCC_GetPCLK1Freq>
 8001d70:	6378      	str	r0, [r7, #52]	@ 0x34
 8001d72:	e004      	b.n	8001d7e <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001d74:	f001 fdf2 	bl	800395c <HAL_RCC_GetPCLK1Freq>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	005b      	lsls	r3, r3, #1
 8001d7c:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001d7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001d80:	4a23      	ldr	r2, [pc, #140]	@ (8001e10 <HAL_InitTick+0xe4>)
 8001d82:	fba2 2303 	umull	r2, r3, r2, r3
 8001d86:	0c9b      	lsrs	r3, r3, #18
 8001d88:	3b01      	subs	r3, #1
 8001d8a:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001d8c:	4b21      	ldr	r3, [pc, #132]	@ (8001e14 <HAL_InitTick+0xe8>)
 8001d8e:	4a22      	ldr	r2, [pc, #136]	@ (8001e18 <HAL_InitTick+0xec>)
 8001d90:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001d92:	4b20      	ldr	r3, [pc, #128]	@ (8001e14 <HAL_InitTick+0xe8>)
 8001d94:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001d98:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001d9a:	4a1e      	ldr	r2, [pc, #120]	@ (8001e14 <HAL_InitTick+0xe8>)
 8001d9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d9e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001da0:	4b1c      	ldr	r3, [pc, #112]	@ (8001e14 <HAL_InitTick+0xe8>)
 8001da2:	2200      	movs	r2, #0
 8001da4:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001da6:	4b1b      	ldr	r3, [pc, #108]	@ (8001e14 <HAL_InitTick+0xe8>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dac:	4b19      	ldr	r3, [pc, #100]	@ (8001e14 <HAL_InitTick+0xe8>)
 8001dae:	2200      	movs	r2, #0
 8001db0:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001db2:	4818      	ldr	r0, [pc, #96]	@ (8001e14 <HAL_InitTick+0xe8>)
 8001db4:	f002 f988 	bl	80040c8 <HAL_TIM_Base_Init>
 8001db8:	4603      	mov	r3, r0
 8001dba:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001dbe:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d11b      	bne.n	8001dfe <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001dc6:	4813      	ldr	r0, [pc, #76]	@ (8001e14 <HAL_InitTick+0xe8>)
 8001dc8:	f002 f9d6 	bl	8004178 <HAL_TIM_Base_Start_IT>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001dd2:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d111      	bne.n	8001dfe <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001dda:	2036      	movs	r0, #54	@ 0x36
 8001ddc:	f000 fa72 	bl	80022c4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2b0f      	cmp	r3, #15
 8001de4:	d808      	bhi.n	8001df8 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001de6:	2200      	movs	r2, #0
 8001de8:	6879      	ldr	r1, [r7, #4]
 8001dea:	2036      	movs	r0, #54	@ 0x36
 8001dec:	f000 fa4e 	bl	800228c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001df0:	4a0a      	ldr	r2, [pc, #40]	@ (8001e1c <HAL_InitTick+0xf0>)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6013      	str	r3, [r2, #0]
 8001df6:	e002      	b.n	8001dfe <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8001df8:	2301      	movs	r3, #1
 8001dfa:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001dfe:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	3738      	adds	r7, #56	@ 0x38
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	40021000 	.word	0x40021000
 8001e10:	431bde83 	.word	0x431bde83
 8001e14:	20005b6c 	.word	0x20005b6c
 8001e18:	40001000 	.word	0x40001000
 8001e1c:	20000008 	.word	0x20000008

08001e20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e20:	b480      	push	{r7}
 8001e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001e24:	bf00      	nop
 8001e26:	e7fd      	b.n	8001e24 <NMI_Handler+0x4>

08001e28 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e2c:	bf00      	nop
 8001e2e:	e7fd      	b.n	8001e2c <HardFault_Handler+0x4>

08001e30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e30:	b480      	push	{r7}
 8001e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e34:	bf00      	nop
 8001e36:	e7fd      	b.n	8001e34 <MemManage_Handler+0x4>

08001e38 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e3c:	bf00      	nop
 8001e3e:	e7fd      	b.n	8001e3c <BusFault_Handler+0x4>

08001e40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e40:	b480      	push	{r7}
 8001e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e44:	bf00      	nop
 8001e46:	e7fd      	b.n	8001e44 <UsageFault_Handler+0x4>

08001e48 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e4c:	bf00      	nop
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e54:	4770      	bx	lr
	...

08001e58 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001e5c:	4802      	ldr	r0, [pc, #8]	@ (8001e68 <DMA1_Channel6_IRQHandler+0x10>)
 8001e5e:	f000 fbd6 	bl	800260e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8001e62:	bf00      	nop
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	200018e8 	.word	0x200018e8

08001e6c <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001e70:	4802      	ldr	r0, [pc, #8]	@ (8001e7c <DMA1_Channel7_IRQHandler+0x10>)
 8001e72:	f000 fbcc 	bl	800260e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8001e76:	bf00      	nop
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	20001930 	.word	0x20001930

08001e80 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001e84:	4802      	ldr	r0, [pc, #8]	@ (8001e90 <USART2_IRQHandler+0x10>)
 8001e86:	f003 fbfb 	bl	8005680 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001e8a:	bf00      	nop
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	20001860 	.word	0x20001860

08001e94 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001e98:	4802      	ldr	r0, [pc, #8]	@ (8001ea4 <TIM6_DAC_IRQHandler+0x10>)
 8001e9a:	f002 fac8 	bl	800442e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001e9e:	bf00      	nop
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	bf00      	nop
 8001ea4:	20005b6c 	.word	0x20005b6c

08001ea8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	af00      	add	r7, sp, #0
  return 1;
 8001eac:	2301      	movs	r3, #1
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb6:	4770      	bx	lr

08001eb8 <_kill>:

int _kill(int pid, int sig)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b082      	sub	sp, #8
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
 8001ec0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001ec2:	f015 fe05 	bl	8017ad0 <__errno>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	2216      	movs	r2, #22
 8001eca:	601a      	str	r2, [r3, #0]
  return -1;
 8001ecc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	3708      	adds	r7, #8
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}

08001ed8 <_exit>:

void _exit (int status)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b082      	sub	sp, #8
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001ee0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001ee4:	6878      	ldr	r0, [r7, #4]
 8001ee6:	f7ff ffe7 	bl	8001eb8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001eea:	bf00      	nop
 8001eec:	e7fd      	b.n	8001eea <_exit+0x12>

08001eee <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001eee:	b580      	push	{r7, lr}
 8001ef0:	b086      	sub	sp, #24
 8001ef2:	af00      	add	r7, sp, #0
 8001ef4:	60f8      	str	r0, [r7, #12]
 8001ef6:	60b9      	str	r1, [r7, #8]
 8001ef8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001efa:	2300      	movs	r3, #0
 8001efc:	617b      	str	r3, [r7, #20]
 8001efe:	e00a      	b.n	8001f16 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001f00:	f3af 8000 	nop.w
 8001f04:	4601      	mov	r1, r0
 8001f06:	68bb      	ldr	r3, [r7, #8]
 8001f08:	1c5a      	adds	r2, r3, #1
 8001f0a:	60ba      	str	r2, [r7, #8]
 8001f0c:	b2ca      	uxtb	r2, r1
 8001f0e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	3301      	adds	r3, #1
 8001f14:	617b      	str	r3, [r7, #20]
 8001f16:	697a      	ldr	r2, [r7, #20]
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	429a      	cmp	r2, r3
 8001f1c:	dbf0      	blt.n	8001f00 <_read+0x12>
  }

  return len;
 8001f1e:	687b      	ldr	r3, [r7, #4]
}
 8001f20:	4618      	mov	r0, r3
 8001f22:	3718      	adds	r7, #24
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bd80      	pop	{r7, pc}

08001f28 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b086      	sub	sp, #24
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	60f8      	str	r0, [r7, #12]
 8001f30:	60b9      	str	r1, [r7, #8]
 8001f32:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f34:	2300      	movs	r3, #0
 8001f36:	617b      	str	r3, [r7, #20]
 8001f38:	e009      	b.n	8001f4e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001f3a:	68bb      	ldr	r3, [r7, #8]
 8001f3c:	1c5a      	adds	r2, r3, #1
 8001f3e:	60ba      	str	r2, [r7, #8]
 8001f40:	781b      	ldrb	r3, [r3, #0]
 8001f42:	4618      	mov	r0, r3
 8001f44:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f48:	697b      	ldr	r3, [r7, #20]
 8001f4a:	3301      	adds	r3, #1
 8001f4c:	617b      	str	r3, [r7, #20]
 8001f4e:	697a      	ldr	r2, [r7, #20]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	429a      	cmp	r2, r3
 8001f54:	dbf1      	blt.n	8001f3a <_write+0x12>
  }
  return len;
 8001f56:	687b      	ldr	r3, [r7, #4]
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	3718      	adds	r7, #24
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}

08001f60 <_close>:

int _close(int file)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b083      	sub	sp, #12
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001f68:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	370c      	adds	r7, #12
 8001f70:	46bd      	mov	sp, r7
 8001f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f76:	4770      	bx	lr

08001f78 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b083      	sub	sp, #12
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
 8001f80:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001f88:	605a      	str	r2, [r3, #4]
  return 0;
 8001f8a:	2300      	movs	r3, #0
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	370c      	adds	r7, #12
 8001f90:	46bd      	mov	sp, r7
 8001f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f96:	4770      	bx	lr

08001f98 <_isatty>:

int _isatty(int file)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b083      	sub	sp, #12
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001fa0:	2301      	movs	r3, #1
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	370c      	adds	r7, #12
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fac:	4770      	bx	lr

08001fae <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001fae:	b480      	push	{r7}
 8001fb0:	b085      	sub	sp, #20
 8001fb2:	af00      	add	r7, sp, #0
 8001fb4:	60f8      	str	r0, [r7, #12]
 8001fb6:	60b9      	str	r1, [r7, #8]
 8001fb8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001fba:	2300      	movs	r3, #0
}
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	3714      	adds	r7, #20
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc6:	4770      	bx	lr

08001fc8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b086      	sub	sp, #24
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001fd0:	4a14      	ldr	r2, [pc, #80]	@ (8002024 <_sbrk+0x5c>)
 8001fd2:	4b15      	ldr	r3, [pc, #84]	@ (8002028 <_sbrk+0x60>)
 8001fd4:	1ad3      	subs	r3, r2, r3
 8001fd6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001fdc:	4b13      	ldr	r3, [pc, #76]	@ (800202c <_sbrk+0x64>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d102      	bne.n	8001fea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001fe4:	4b11      	ldr	r3, [pc, #68]	@ (800202c <_sbrk+0x64>)
 8001fe6:	4a12      	ldr	r2, [pc, #72]	@ (8002030 <_sbrk+0x68>)
 8001fe8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001fea:	4b10      	ldr	r3, [pc, #64]	@ (800202c <_sbrk+0x64>)
 8001fec:	681a      	ldr	r2, [r3, #0]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	4413      	add	r3, r2
 8001ff2:	693a      	ldr	r2, [r7, #16]
 8001ff4:	429a      	cmp	r2, r3
 8001ff6:	d207      	bcs.n	8002008 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ff8:	f015 fd6a 	bl	8017ad0 <__errno>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	220c      	movs	r2, #12
 8002000:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002002:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002006:	e009      	b.n	800201c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002008:	4b08      	ldr	r3, [pc, #32]	@ (800202c <_sbrk+0x64>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800200e:	4b07      	ldr	r3, [pc, #28]	@ (800202c <_sbrk+0x64>)
 8002010:	681a      	ldr	r2, [r3, #0]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	4413      	add	r3, r2
 8002016:	4a05      	ldr	r2, [pc, #20]	@ (800202c <_sbrk+0x64>)
 8002018:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800201a:	68fb      	ldr	r3, [r7, #12]
}
 800201c:	4618      	mov	r0, r3
 800201e:	3718      	adds	r7, #24
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}
 8002024:	20010000 	.word	0x20010000
 8002028:	00000400 	.word	0x00000400
 800202c:	20005bbc 	.word	0x20005bbc
 8002030:	2000c230 	.word	0x2000c230

08002034 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002034:	b480      	push	{r7}
 8002036:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002038:	4b06      	ldr	r3, [pc, #24]	@ (8002054 <SystemInit+0x20>)
 800203a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800203e:	4a05      	ldr	r2, [pc, #20]	@ (8002054 <SystemInit+0x20>)
 8002040:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002044:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8002048:	bf00      	nop
 800204a:	46bd      	mov	sp, r7
 800204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002050:	4770      	bx	lr
 8002052:	bf00      	nop
 8002054:	e000ed00 	.word	0xe000ed00

08002058 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002058:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002090 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800205c:	f7ff ffea 	bl	8002034 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002060:	480c      	ldr	r0, [pc, #48]	@ (8002094 <LoopForever+0x6>)
  ldr r1, =_edata
 8002062:	490d      	ldr	r1, [pc, #52]	@ (8002098 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002064:	4a0d      	ldr	r2, [pc, #52]	@ (800209c <LoopForever+0xe>)
  movs r3, #0
 8002066:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002068:	e002      	b.n	8002070 <LoopCopyDataInit>

0800206a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800206a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800206c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800206e:	3304      	adds	r3, #4

08002070 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002070:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002072:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002074:	d3f9      	bcc.n	800206a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002076:	4a0a      	ldr	r2, [pc, #40]	@ (80020a0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002078:	4c0a      	ldr	r4, [pc, #40]	@ (80020a4 <LoopForever+0x16>)
  movs r3, #0
 800207a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800207c:	e001      	b.n	8002082 <LoopFillZerobss>

0800207e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800207e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002080:	3204      	adds	r2, #4

08002082 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002082:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002084:	d3fb      	bcc.n	800207e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002086:	f015 fd29 	bl	8017adc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800208a:	f7fe fdcb 	bl	8000c24 <main>

0800208e <LoopForever>:

LoopForever:
    b LoopForever
 800208e:	e7fe      	b.n	800208e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002090:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002094:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002098:	200002e0 	.word	0x200002e0
  ldr r2, =_sidata
 800209c:	080197c8 	.word	0x080197c8
  ldr r2, =_sbss
 80020a0:	200002e0 	.word	0x200002e0
  ldr r4, =_ebss
 80020a4:	2000c22c 	.word	0x2000c22c

080020a8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80020a8:	e7fe      	b.n	80020a8 <ADC1_IRQHandler>

080020aa <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020aa:	b580      	push	{r7, lr}
 80020ac:	b082      	sub	sp, #8
 80020ae:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80020b0:	2300      	movs	r3, #0
 80020b2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020b4:	2003      	movs	r0, #3
 80020b6:	f000 f8de 	bl	8002276 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80020ba:	200f      	movs	r0, #15
 80020bc:	f7ff fe36 	bl	8001d2c <HAL_InitTick>
 80020c0:	4603      	mov	r3, r0
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d002      	beq.n	80020cc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80020c6:	2301      	movs	r3, #1
 80020c8:	71fb      	strb	r3, [r7, #7]
 80020ca:	e001      	b.n	80020d0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80020cc:	f7ff fb78 	bl	80017c0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80020d0:	79fb      	ldrb	r3, [r7, #7]
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	3708      	adds	r7, #8
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}
	...

080020dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020dc:	b480      	push	{r7}
 80020de:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80020e0:	4b06      	ldr	r3, [pc, #24]	@ (80020fc <HAL_IncTick+0x20>)
 80020e2:	781b      	ldrb	r3, [r3, #0]
 80020e4:	461a      	mov	r2, r3
 80020e6:	4b06      	ldr	r3, [pc, #24]	@ (8002100 <HAL_IncTick+0x24>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4413      	add	r3, r2
 80020ec:	4a04      	ldr	r2, [pc, #16]	@ (8002100 <HAL_IncTick+0x24>)
 80020ee:	6013      	str	r3, [r2, #0]
}
 80020f0:	bf00      	nop
 80020f2:	46bd      	mov	sp, r7
 80020f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f8:	4770      	bx	lr
 80020fa:	bf00      	nop
 80020fc:	2000000c 	.word	0x2000000c
 8002100:	20005bc0 	.word	0x20005bc0

08002104 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002104:	b480      	push	{r7}
 8002106:	af00      	add	r7, sp, #0
  return uwTick;
 8002108:	4b03      	ldr	r3, [pc, #12]	@ (8002118 <HAL_GetTick+0x14>)
 800210a:	681b      	ldr	r3, [r3, #0]
}
 800210c:	4618      	mov	r0, r3
 800210e:	46bd      	mov	sp, r7
 8002110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002114:	4770      	bx	lr
 8002116:	bf00      	nop
 8002118:	20005bc0 	.word	0x20005bc0

0800211c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800211c:	b480      	push	{r7}
 800211e:	b085      	sub	sp, #20
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	f003 0307 	and.w	r3, r3, #7
 800212a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800212c:	4b0c      	ldr	r3, [pc, #48]	@ (8002160 <__NVIC_SetPriorityGrouping+0x44>)
 800212e:	68db      	ldr	r3, [r3, #12]
 8002130:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002132:	68ba      	ldr	r2, [r7, #8]
 8002134:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002138:	4013      	ands	r3, r2
 800213a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002140:	68bb      	ldr	r3, [r7, #8]
 8002142:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002144:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002148:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800214c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800214e:	4a04      	ldr	r2, [pc, #16]	@ (8002160 <__NVIC_SetPriorityGrouping+0x44>)
 8002150:	68bb      	ldr	r3, [r7, #8]
 8002152:	60d3      	str	r3, [r2, #12]
}
 8002154:	bf00      	nop
 8002156:	3714      	adds	r7, #20
 8002158:	46bd      	mov	sp, r7
 800215a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215e:	4770      	bx	lr
 8002160:	e000ed00 	.word	0xe000ed00

08002164 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002164:	b480      	push	{r7}
 8002166:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002168:	4b04      	ldr	r3, [pc, #16]	@ (800217c <__NVIC_GetPriorityGrouping+0x18>)
 800216a:	68db      	ldr	r3, [r3, #12]
 800216c:	0a1b      	lsrs	r3, r3, #8
 800216e:	f003 0307 	and.w	r3, r3, #7
}
 8002172:	4618      	mov	r0, r3
 8002174:	46bd      	mov	sp, r7
 8002176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217a:	4770      	bx	lr
 800217c:	e000ed00 	.word	0xe000ed00

08002180 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002180:	b480      	push	{r7}
 8002182:	b083      	sub	sp, #12
 8002184:	af00      	add	r7, sp, #0
 8002186:	4603      	mov	r3, r0
 8002188:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800218a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800218e:	2b00      	cmp	r3, #0
 8002190:	db0b      	blt.n	80021aa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002192:	79fb      	ldrb	r3, [r7, #7]
 8002194:	f003 021f 	and.w	r2, r3, #31
 8002198:	4907      	ldr	r1, [pc, #28]	@ (80021b8 <__NVIC_EnableIRQ+0x38>)
 800219a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800219e:	095b      	lsrs	r3, r3, #5
 80021a0:	2001      	movs	r0, #1
 80021a2:	fa00 f202 	lsl.w	r2, r0, r2
 80021a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80021aa:	bf00      	nop
 80021ac:	370c      	adds	r7, #12
 80021ae:	46bd      	mov	sp, r7
 80021b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b4:	4770      	bx	lr
 80021b6:	bf00      	nop
 80021b8:	e000e100 	.word	0xe000e100

080021bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021bc:	b480      	push	{r7}
 80021be:	b083      	sub	sp, #12
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	4603      	mov	r3, r0
 80021c4:	6039      	str	r1, [r7, #0]
 80021c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	db0a      	blt.n	80021e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	b2da      	uxtb	r2, r3
 80021d4:	490c      	ldr	r1, [pc, #48]	@ (8002208 <__NVIC_SetPriority+0x4c>)
 80021d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021da:	0112      	lsls	r2, r2, #4
 80021dc:	b2d2      	uxtb	r2, r2
 80021de:	440b      	add	r3, r1
 80021e0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021e4:	e00a      	b.n	80021fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	b2da      	uxtb	r2, r3
 80021ea:	4908      	ldr	r1, [pc, #32]	@ (800220c <__NVIC_SetPriority+0x50>)
 80021ec:	79fb      	ldrb	r3, [r7, #7]
 80021ee:	f003 030f 	and.w	r3, r3, #15
 80021f2:	3b04      	subs	r3, #4
 80021f4:	0112      	lsls	r2, r2, #4
 80021f6:	b2d2      	uxtb	r2, r2
 80021f8:	440b      	add	r3, r1
 80021fa:	761a      	strb	r2, [r3, #24]
}
 80021fc:	bf00      	nop
 80021fe:	370c      	adds	r7, #12
 8002200:	46bd      	mov	sp, r7
 8002202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002206:	4770      	bx	lr
 8002208:	e000e100 	.word	0xe000e100
 800220c:	e000ed00 	.word	0xe000ed00

08002210 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002210:	b480      	push	{r7}
 8002212:	b089      	sub	sp, #36	@ 0x24
 8002214:	af00      	add	r7, sp, #0
 8002216:	60f8      	str	r0, [r7, #12]
 8002218:	60b9      	str	r1, [r7, #8]
 800221a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	f003 0307 	and.w	r3, r3, #7
 8002222:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002224:	69fb      	ldr	r3, [r7, #28]
 8002226:	f1c3 0307 	rsb	r3, r3, #7
 800222a:	2b04      	cmp	r3, #4
 800222c:	bf28      	it	cs
 800222e:	2304      	movcs	r3, #4
 8002230:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002232:	69fb      	ldr	r3, [r7, #28]
 8002234:	3304      	adds	r3, #4
 8002236:	2b06      	cmp	r3, #6
 8002238:	d902      	bls.n	8002240 <NVIC_EncodePriority+0x30>
 800223a:	69fb      	ldr	r3, [r7, #28]
 800223c:	3b03      	subs	r3, #3
 800223e:	e000      	b.n	8002242 <NVIC_EncodePriority+0x32>
 8002240:	2300      	movs	r3, #0
 8002242:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002244:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002248:	69bb      	ldr	r3, [r7, #24]
 800224a:	fa02 f303 	lsl.w	r3, r2, r3
 800224e:	43da      	mvns	r2, r3
 8002250:	68bb      	ldr	r3, [r7, #8]
 8002252:	401a      	ands	r2, r3
 8002254:	697b      	ldr	r3, [r7, #20]
 8002256:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002258:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	fa01 f303 	lsl.w	r3, r1, r3
 8002262:	43d9      	mvns	r1, r3
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002268:	4313      	orrs	r3, r2
         );
}
 800226a:	4618      	mov	r0, r3
 800226c:	3724      	adds	r7, #36	@ 0x24
 800226e:	46bd      	mov	sp, r7
 8002270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002274:	4770      	bx	lr

08002276 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002276:	b580      	push	{r7, lr}
 8002278:	b082      	sub	sp, #8
 800227a:	af00      	add	r7, sp, #0
 800227c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800227e:	6878      	ldr	r0, [r7, #4]
 8002280:	f7ff ff4c 	bl	800211c <__NVIC_SetPriorityGrouping>
}
 8002284:	bf00      	nop
 8002286:	3708      	adds	r7, #8
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}

0800228c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b086      	sub	sp, #24
 8002290:	af00      	add	r7, sp, #0
 8002292:	4603      	mov	r3, r0
 8002294:	60b9      	str	r1, [r7, #8]
 8002296:	607a      	str	r2, [r7, #4]
 8002298:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800229a:	2300      	movs	r3, #0
 800229c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800229e:	f7ff ff61 	bl	8002164 <__NVIC_GetPriorityGrouping>
 80022a2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022a4:	687a      	ldr	r2, [r7, #4]
 80022a6:	68b9      	ldr	r1, [r7, #8]
 80022a8:	6978      	ldr	r0, [r7, #20]
 80022aa:	f7ff ffb1 	bl	8002210 <NVIC_EncodePriority>
 80022ae:	4602      	mov	r2, r0
 80022b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022b4:	4611      	mov	r1, r2
 80022b6:	4618      	mov	r0, r3
 80022b8:	f7ff ff80 	bl	80021bc <__NVIC_SetPriority>
}
 80022bc:	bf00      	nop
 80022be:	3718      	adds	r7, #24
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}

080022c4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b082      	sub	sp, #8
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	4603      	mov	r3, r0
 80022cc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022d2:	4618      	mov	r0, r3
 80022d4:	f7ff ff54 	bl	8002180 <__NVIC_EnableIRQ>
}
 80022d8:	bf00      	nop
 80022da:	3708      	adds	r7, #8
 80022dc:	46bd      	mov	sp, r7
 80022de:	bd80      	pop	{r7, pc}

080022e0 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b085      	sub	sp, #20
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d101      	bne.n	80022f2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80022ee:	2301      	movs	r3, #1
 80022f0:	e098      	b.n	8002424 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	461a      	mov	r2, r3
 80022f8:	4b4d      	ldr	r3, [pc, #308]	@ (8002430 <HAL_DMA_Init+0x150>)
 80022fa:	429a      	cmp	r2, r3
 80022fc:	d80f      	bhi.n	800231e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	461a      	mov	r2, r3
 8002304:	4b4b      	ldr	r3, [pc, #300]	@ (8002434 <HAL_DMA_Init+0x154>)
 8002306:	4413      	add	r3, r2
 8002308:	4a4b      	ldr	r2, [pc, #300]	@ (8002438 <HAL_DMA_Init+0x158>)
 800230a:	fba2 2303 	umull	r2, r3, r2, r3
 800230e:	091b      	lsrs	r3, r3, #4
 8002310:	009a      	lsls	r2, r3, #2
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	4a48      	ldr	r2, [pc, #288]	@ (800243c <HAL_DMA_Init+0x15c>)
 800231a:	641a      	str	r2, [r3, #64]	@ 0x40
 800231c:	e00e      	b.n	800233c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	461a      	mov	r2, r3
 8002324:	4b46      	ldr	r3, [pc, #280]	@ (8002440 <HAL_DMA_Init+0x160>)
 8002326:	4413      	add	r3, r2
 8002328:	4a43      	ldr	r2, [pc, #268]	@ (8002438 <HAL_DMA_Init+0x158>)
 800232a:	fba2 2303 	umull	r2, r3, r2, r3
 800232e:	091b      	lsrs	r3, r3, #4
 8002330:	009a      	lsls	r2, r3, #2
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	4a42      	ldr	r2, [pc, #264]	@ (8002444 <HAL_DMA_Init+0x164>)
 800233a:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2202      	movs	r2, #2
 8002340:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8002352:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002356:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002360:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	691b      	ldr	r3, [r3, #16]
 8002366:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800236c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	699b      	ldr	r3, [r3, #24]
 8002372:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002378:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6a1b      	ldr	r3, [r3, #32]
 800237e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002380:	68fa      	ldr	r2, [r7, #12]
 8002382:	4313      	orrs	r3, r2
 8002384:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	68fa      	ldr	r2, [r7, #12]
 800238c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	689b      	ldr	r3, [r3, #8]
 8002392:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002396:	d039      	beq.n	800240c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800239c:	4a27      	ldr	r2, [pc, #156]	@ (800243c <HAL_DMA_Init+0x15c>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d11a      	bne.n	80023d8 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80023a2:	4b29      	ldr	r3, [pc, #164]	@ (8002448 <HAL_DMA_Init+0x168>)
 80023a4:	681a      	ldr	r2, [r3, #0]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023aa:	f003 031c 	and.w	r3, r3, #28
 80023ae:	210f      	movs	r1, #15
 80023b0:	fa01 f303 	lsl.w	r3, r1, r3
 80023b4:	43db      	mvns	r3, r3
 80023b6:	4924      	ldr	r1, [pc, #144]	@ (8002448 <HAL_DMA_Init+0x168>)
 80023b8:	4013      	ands	r3, r2
 80023ba:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80023bc:	4b22      	ldr	r3, [pc, #136]	@ (8002448 <HAL_DMA_Init+0x168>)
 80023be:	681a      	ldr	r2, [r3, #0]
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6859      	ldr	r1, [r3, #4]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023c8:	f003 031c 	and.w	r3, r3, #28
 80023cc:	fa01 f303 	lsl.w	r3, r1, r3
 80023d0:	491d      	ldr	r1, [pc, #116]	@ (8002448 <HAL_DMA_Init+0x168>)
 80023d2:	4313      	orrs	r3, r2
 80023d4:	600b      	str	r3, [r1, #0]
 80023d6:	e019      	b.n	800240c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80023d8:	4b1c      	ldr	r3, [pc, #112]	@ (800244c <HAL_DMA_Init+0x16c>)
 80023da:	681a      	ldr	r2, [r3, #0]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023e0:	f003 031c 	and.w	r3, r3, #28
 80023e4:	210f      	movs	r1, #15
 80023e6:	fa01 f303 	lsl.w	r3, r1, r3
 80023ea:	43db      	mvns	r3, r3
 80023ec:	4917      	ldr	r1, [pc, #92]	@ (800244c <HAL_DMA_Init+0x16c>)
 80023ee:	4013      	ands	r3, r2
 80023f0:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80023f2:	4b16      	ldr	r3, [pc, #88]	@ (800244c <HAL_DMA_Init+0x16c>)
 80023f4:	681a      	ldr	r2, [r3, #0]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6859      	ldr	r1, [r3, #4]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023fe:	f003 031c 	and.w	r3, r3, #28
 8002402:	fa01 f303 	lsl.w	r3, r1, r3
 8002406:	4911      	ldr	r1, [pc, #68]	@ (800244c <HAL_DMA_Init+0x16c>)
 8002408:	4313      	orrs	r3, r2
 800240a:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2200      	movs	r2, #0
 8002410:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2201      	movs	r2, #1
 8002416:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2200      	movs	r2, #0
 800241e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002422:	2300      	movs	r3, #0
}
 8002424:	4618      	mov	r0, r3
 8002426:	3714      	adds	r7, #20
 8002428:	46bd      	mov	sp, r7
 800242a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242e:	4770      	bx	lr
 8002430:	40020407 	.word	0x40020407
 8002434:	bffdfff8 	.word	0xbffdfff8
 8002438:	cccccccd 	.word	0xcccccccd
 800243c:	40020000 	.word	0x40020000
 8002440:	bffdfbf8 	.word	0xbffdfbf8
 8002444:	40020400 	.word	0x40020400
 8002448:	400200a8 	.word	0x400200a8
 800244c:	400204a8 	.word	0x400204a8

08002450 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b086      	sub	sp, #24
 8002454:	af00      	add	r7, sp, #0
 8002456:	60f8      	str	r0, [r7, #12]
 8002458:	60b9      	str	r1, [r7, #8]
 800245a:	607a      	str	r2, [r7, #4]
 800245c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800245e:	2300      	movs	r3, #0
 8002460:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002468:	2b01      	cmp	r3, #1
 800246a:	d101      	bne.n	8002470 <HAL_DMA_Start_IT+0x20>
 800246c:	2302      	movs	r3, #2
 800246e:	e04b      	b.n	8002508 <HAL_DMA_Start_IT+0xb8>
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	2201      	movs	r2, #1
 8002474:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800247e:	b2db      	uxtb	r3, r3
 8002480:	2b01      	cmp	r3, #1
 8002482:	d13a      	bne.n	80024fa <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	2202      	movs	r2, #2
 8002488:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	2200      	movs	r2, #0
 8002490:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	681a      	ldr	r2, [r3, #0]
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f022 0201 	bic.w	r2, r2, #1
 80024a0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	687a      	ldr	r2, [r7, #4]
 80024a6:	68b9      	ldr	r1, [r7, #8]
 80024a8:	68f8      	ldr	r0, [r7, #12]
 80024aa:	f000 f96b 	bl	8002784 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d008      	beq.n	80024c8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	681a      	ldr	r2, [r3, #0]
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f042 020e 	orr.w	r2, r2, #14
 80024c4:	601a      	str	r2, [r3, #0]
 80024c6:	e00f      	b.n	80024e8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	681a      	ldr	r2, [r3, #0]
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f022 0204 	bic.w	r2, r2, #4
 80024d6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	681a      	ldr	r2, [r3, #0]
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f042 020a 	orr.w	r2, r2, #10
 80024e6:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	681a      	ldr	r2, [r3, #0]
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f042 0201 	orr.w	r2, r2, #1
 80024f6:	601a      	str	r2, [r3, #0]
 80024f8:	e005      	b.n	8002506 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	2200      	movs	r2, #0
 80024fe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002502:	2302      	movs	r3, #2
 8002504:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002506:	7dfb      	ldrb	r3, [r7, #23]
}
 8002508:	4618      	mov	r0, r3
 800250a:	3718      	adds	r7, #24
 800250c:	46bd      	mov	sp, r7
 800250e:	bd80      	pop	{r7, pc}

08002510 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002510:	b480      	push	{r7}
 8002512:	b085      	sub	sp, #20
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002518:	2300      	movs	r3, #0
 800251a:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002522:	b2db      	uxtb	r3, r3
 8002524:	2b02      	cmp	r3, #2
 8002526:	d008      	beq.n	800253a <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2204      	movs	r2, #4
 800252c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2200      	movs	r2, #0
 8002532:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002536:	2301      	movs	r3, #1
 8002538:	e022      	b.n	8002580 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	681a      	ldr	r2, [r3, #0]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f022 020e 	bic.w	r2, r2, #14
 8002548:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	681a      	ldr	r2, [r3, #0]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f022 0201 	bic.w	r2, r2, #1
 8002558:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800255e:	f003 021c 	and.w	r2, r3, #28
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002566:	2101      	movs	r1, #1
 8002568:	fa01 f202 	lsl.w	r2, r1, r2
 800256c:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2201      	movs	r2, #1
 8002572:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2200      	movs	r2, #0
 800257a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 800257e:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002580:	4618      	mov	r0, r3
 8002582:	3714      	adds	r7, #20
 8002584:	46bd      	mov	sp, r7
 8002586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258a:	4770      	bx	lr

0800258c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b084      	sub	sp, #16
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002594:	2300      	movs	r3, #0
 8002596:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800259e:	b2db      	uxtb	r3, r3
 80025a0:	2b02      	cmp	r3, #2
 80025a2:	d005      	beq.n	80025b0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2204      	movs	r2, #4
 80025a8:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80025aa:	2301      	movs	r3, #1
 80025ac:	73fb      	strb	r3, [r7, #15]
 80025ae:	e029      	b.n	8002604 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	681a      	ldr	r2, [r3, #0]
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f022 020e 	bic.w	r2, r2, #14
 80025be:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	681a      	ldr	r2, [r3, #0]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f022 0201 	bic.w	r2, r2, #1
 80025ce:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025d4:	f003 021c 	and.w	r2, r3, #28
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025dc:	2101      	movs	r1, #1
 80025de:	fa01 f202 	lsl.w	r2, r1, r2
 80025e2:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2201      	movs	r2, #1
 80025e8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2200      	movs	r2, #0
 80025f0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d003      	beq.n	8002604 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002600:	6878      	ldr	r0, [r7, #4]
 8002602:	4798      	blx	r3
    }
  }
  return status;
 8002604:	7bfb      	ldrb	r3, [r7, #15]
}
 8002606:	4618      	mov	r0, r3
 8002608:	3710      	adds	r7, #16
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}

0800260e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800260e:	b580      	push	{r7, lr}
 8002610:	b084      	sub	sp, #16
 8002612:	af00      	add	r7, sp, #0
 8002614:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800262a:	f003 031c 	and.w	r3, r3, #28
 800262e:	2204      	movs	r2, #4
 8002630:	409a      	lsls	r2, r3
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	4013      	ands	r3, r2
 8002636:	2b00      	cmp	r3, #0
 8002638:	d026      	beq.n	8002688 <HAL_DMA_IRQHandler+0x7a>
 800263a:	68bb      	ldr	r3, [r7, #8]
 800263c:	f003 0304 	and.w	r3, r3, #4
 8002640:	2b00      	cmp	r3, #0
 8002642:	d021      	beq.n	8002688 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f003 0320 	and.w	r3, r3, #32
 800264e:	2b00      	cmp	r3, #0
 8002650:	d107      	bne.n	8002662 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	681a      	ldr	r2, [r3, #0]
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f022 0204 	bic.w	r2, r2, #4
 8002660:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002666:	f003 021c 	and.w	r2, r3, #28
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800266e:	2104      	movs	r1, #4
 8002670:	fa01 f202 	lsl.w	r2, r1, r2
 8002674:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800267a:	2b00      	cmp	r3, #0
 800267c:	d071      	beq.n	8002762 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002682:	6878      	ldr	r0, [r7, #4]
 8002684:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002686:	e06c      	b.n	8002762 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800268c:	f003 031c 	and.w	r3, r3, #28
 8002690:	2202      	movs	r2, #2
 8002692:	409a      	lsls	r2, r3
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	4013      	ands	r3, r2
 8002698:	2b00      	cmp	r3, #0
 800269a:	d02e      	beq.n	80026fa <HAL_DMA_IRQHandler+0xec>
 800269c:	68bb      	ldr	r3, [r7, #8]
 800269e:	f003 0302 	and.w	r3, r3, #2
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d029      	beq.n	80026fa <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f003 0320 	and.w	r3, r3, #32
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d10b      	bne.n	80026cc <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	681a      	ldr	r2, [r3, #0]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f022 020a 	bic.w	r2, r2, #10
 80026c2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2201      	movs	r2, #1
 80026c8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026d0:	f003 021c 	and.w	r2, r3, #28
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026d8:	2102      	movs	r1, #2
 80026da:	fa01 f202 	lsl.w	r2, r1, r2
 80026de:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2200      	movs	r2, #0
 80026e4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d038      	beq.n	8002762 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026f4:	6878      	ldr	r0, [r7, #4]
 80026f6:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80026f8:	e033      	b.n	8002762 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026fe:	f003 031c 	and.w	r3, r3, #28
 8002702:	2208      	movs	r2, #8
 8002704:	409a      	lsls	r2, r3
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	4013      	ands	r3, r2
 800270a:	2b00      	cmp	r3, #0
 800270c:	d02a      	beq.n	8002764 <HAL_DMA_IRQHandler+0x156>
 800270e:	68bb      	ldr	r3, [r7, #8]
 8002710:	f003 0308 	and.w	r3, r3, #8
 8002714:	2b00      	cmp	r3, #0
 8002716:	d025      	beq.n	8002764 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	681a      	ldr	r2, [r3, #0]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f022 020e 	bic.w	r2, r2, #14
 8002726:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800272c:	f003 021c 	and.w	r2, r3, #28
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002734:	2101      	movs	r1, #1
 8002736:	fa01 f202 	lsl.w	r2, r1, r2
 800273a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2201      	movs	r2, #1
 8002740:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2201      	movs	r2, #1
 8002746:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2200      	movs	r2, #0
 800274e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002756:	2b00      	cmp	r3, #0
 8002758:	d004      	beq.n	8002764 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800275e:	6878      	ldr	r0, [r7, #4]
 8002760:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002762:	bf00      	nop
 8002764:	bf00      	nop
}
 8002766:	3710      	adds	r7, #16
 8002768:	46bd      	mov	sp, r7
 800276a:	bd80      	pop	{r7, pc}

0800276c <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800276c:	b480      	push	{r7}
 800276e:	b083      	sub	sp, #12
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 8002778:	4618      	mov	r0, r3
 800277a:	370c      	adds	r7, #12
 800277c:	46bd      	mov	sp, r7
 800277e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002782:	4770      	bx	lr

08002784 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002784:	b480      	push	{r7}
 8002786:	b085      	sub	sp, #20
 8002788:	af00      	add	r7, sp, #0
 800278a:	60f8      	str	r0, [r7, #12]
 800278c:	60b9      	str	r1, [r7, #8]
 800278e:	607a      	str	r2, [r7, #4]
 8002790:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002796:	f003 021c 	and.w	r2, r3, #28
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800279e:	2101      	movs	r1, #1
 80027a0:	fa01 f202 	lsl.w	r2, r1, r2
 80027a4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	683a      	ldr	r2, [r7, #0]
 80027ac:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	689b      	ldr	r3, [r3, #8]
 80027b2:	2b10      	cmp	r3, #16
 80027b4:	d108      	bne.n	80027c8 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	687a      	ldr	r2, [r7, #4]
 80027bc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	68ba      	ldr	r2, [r7, #8]
 80027c4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80027c6:	e007      	b.n	80027d8 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	68ba      	ldr	r2, [r7, #8]
 80027ce:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	687a      	ldr	r2, [r7, #4]
 80027d6:	60da      	str	r2, [r3, #12]
}
 80027d8:	bf00      	nop
 80027da:	3714      	adds	r7, #20
 80027dc:	46bd      	mov	sp, r7
 80027de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e2:	4770      	bx	lr

080027e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b087      	sub	sp, #28
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
 80027ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80027ee:	2300      	movs	r3, #0
 80027f0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80027f2:	e148      	b.n	8002a86 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	681a      	ldr	r2, [r3, #0]
 80027f8:	2101      	movs	r1, #1
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	fa01 f303 	lsl.w	r3, r1, r3
 8002800:	4013      	ands	r3, r2
 8002802:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	2b00      	cmp	r3, #0
 8002808:	f000 813a 	beq.w	8002a80 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	f003 0303 	and.w	r3, r3, #3
 8002814:	2b01      	cmp	r3, #1
 8002816:	d005      	beq.n	8002824 <HAL_GPIO_Init+0x40>
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	f003 0303 	and.w	r3, r3, #3
 8002820:	2b02      	cmp	r3, #2
 8002822:	d130      	bne.n	8002886 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	689b      	ldr	r3, [r3, #8]
 8002828:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800282a:	697b      	ldr	r3, [r7, #20]
 800282c:	005b      	lsls	r3, r3, #1
 800282e:	2203      	movs	r2, #3
 8002830:	fa02 f303 	lsl.w	r3, r2, r3
 8002834:	43db      	mvns	r3, r3
 8002836:	693a      	ldr	r2, [r7, #16]
 8002838:	4013      	ands	r3, r2
 800283a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	68da      	ldr	r2, [r3, #12]
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	005b      	lsls	r3, r3, #1
 8002844:	fa02 f303 	lsl.w	r3, r2, r3
 8002848:	693a      	ldr	r2, [r7, #16]
 800284a:	4313      	orrs	r3, r2
 800284c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	693a      	ldr	r2, [r7, #16]
 8002852:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800285a:	2201      	movs	r2, #1
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	fa02 f303 	lsl.w	r3, r2, r3
 8002862:	43db      	mvns	r3, r3
 8002864:	693a      	ldr	r2, [r7, #16]
 8002866:	4013      	ands	r3, r2
 8002868:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	091b      	lsrs	r3, r3, #4
 8002870:	f003 0201 	and.w	r2, r3, #1
 8002874:	697b      	ldr	r3, [r7, #20]
 8002876:	fa02 f303 	lsl.w	r3, r2, r3
 800287a:	693a      	ldr	r2, [r7, #16]
 800287c:	4313      	orrs	r3, r2
 800287e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	693a      	ldr	r2, [r7, #16]
 8002884:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	f003 0303 	and.w	r3, r3, #3
 800288e:	2b03      	cmp	r3, #3
 8002890:	d017      	beq.n	80028c2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	68db      	ldr	r3, [r3, #12]
 8002896:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	005b      	lsls	r3, r3, #1
 800289c:	2203      	movs	r2, #3
 800289e:	fa02 f303 	lsl.w	r3, r2, r3
 80028a2:	43db      	mvns	r3, r3
 80028a4:	693a      	ldr	r2, [r7, #16]
 80028a6:	4013      	ands	r3, r2
 80028a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	689a      	ldr	r2, [r3, #8]
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	005b      	lsls	r3, r3, #1
 80028b2:	fa02 f303 	lsl.w	r3, r2, r3
 80028b6:	693a      	ldr	r2, [r7, #16]
 80028b8:	4313      	orrs	r3, r2
 80028ba:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	693a      	ldr	r2, [r7, #16]
 80028c0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	f003 0303 	and.w	r3, r3, #3
 80028ca:	2b02      	cmp	r3, #2
 80028cc:	d123      	bne.n	8002916 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80028ce:	697b      	ldr	r3, [r7, #20]
 80028d0:	08da      	lsrs	r2, r3, #3
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	3208      	adds	r2, #8
 80028d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028da:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80028dc:	697b      	ldr	r3, [r7, #20]
 80028de:	f003 0307 	and.w	r3, r3, #7
 80028e2:	009b      	lsls	r3, r3, #2
 80028e4:	220f      	movs	r2, #15
 80028e6:	fa02 f303 	lsl.w	r3, r2, r3
 80028ea:	43db      	mvns	r3, r3
 80028ec:	693a      	ldr	r2, [r7, #16]
 80028ee:	4013      	ands	r3, r2
 80028f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	691a      	ldr	r2, [r3, #16]
 80028f6:	697b      	ldr	r3, [r7, #20]
 80028f8:	f003 0307 	and.w	r3, r3, #7
 80028fc:	009b      	lsls	r3, r3, #2
 80028fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002902:	693a      	ldr	r2, [r7, #16]
 8002904:	4313      	orrs	r3, r2
 8002906:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	08da      	lsrs	r2, r3, #3
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	3208      	adds	r2, #8
 8002910:	6939      	ldr	r1, [r7, #16]
 8002912:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	005b      	lsls	r3, r3, #1
 8002920:	2203      	movs	r2, #3
 8002922:	fa02 f303 	lsl.w	r3, r2, r3
 8002926:	43db      	mvns	r3, r3
 8002928:	693a      	ldr	r2, [r7, #16]
 800292a:	4013      	ands	r3, r2
 800292c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	f003 0203 	and.w	r2, r3, #3
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	005b      	lsls	r3, r3, #1
 800293a:	fa02 f303 	lsl.w	r3, r2, r3
 800293e:	693a      	ldr	r2, [r7, #16]
 8002940:	4313      	orrs	r3, r2
 8002942:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	693a      	ldr	r2, [r7, #16]
 8002948:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002952:	2b00      	cmp	r3, #0
 8002954:	f000 8094 	beq.w	8002a80 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002958:	4b52      	ldr	r3, [pc, #328]	@ (8002aa4 <HAL_GPIO_Init+0x2c0>)
 800295a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800295c:	4a51      	ldr	r2, [pc, #324]	@ (8002aa4 <HAL_GPIO_Init+0x2c0>)
 800295e:	f043 0301 	orr.w	r3, r3, #1
 8002962:	6613      	str	r3, [r2, #96]	@ 0x60
 8002964:	4b4f      	ldr	r3, [pc, #316]	@ (8002aa4 <HAL_GPIO_Init+0x2c0>)
 8002966:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002968:	f003 0301 	and.w	r3, r3, #1
 800296c:	60bb      	str	r3, [r7, #8]
 800296e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002970:	4a4d      	ldr	r2, [pc, #308]	@ (8002aa8 <HAL_GPIO_Init+0x2c4>)
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	089b      	lsrs	r3, r3, #2
 8002976:	3302      	adds	r3, #2
 8002978:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800297c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	f003 0303 	and.w	r3, r3, #3
 8002984:	009b      	lsls	r3, r3, #2
 8002986:	220f      	movs	r2, #15
 8002988:	fa02 f303 	lsl.w	r3, r2, r3
 800298c:	43db      	mvns	r3, r3
 800298e:	693a      	ldr	r2, [r7, #16]
 8002990:	4013      	ands	r3, r2
 8002992:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800299a:	d00d      	beq.n	80029b8 <HAL_GPIO_Init+0x1d4>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	4a43      	ldr	r2, [pc, #268]	@ (8002aac <HAL_GPIO_Init+0x2c8>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d007      	beq.n	80029b4 <HAL_GPIO_Init+0x1d0>
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	4a42      	ldr	r2, [pc, #264]	@ (8002ab0 <HAL_GPIO_Init+0x2cc>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d101      	bne.n	80029b0 <HAL_GPIO_Init+0x1cc>
 80029ac:	2302      	movs	r3, #2
 80029ae:	e004      	b.n	80029ba <HAL_GPIO_Init+0x1d6>
 80029b0:	2307      	movs	r3, #7
 80029b2:	e002      	b.n	80029ba <HAL_GPIO_Init+0x1d6>
 80029b4:	2301      	movs	r3, #1
 80029b6:	e000      	b.n	80029ba <HAL_GPIO_Init+0x1d6>
 80029b8:	2300      	movs	r3, #0
 80029ba:	697a      	ldr	r2, [r7, #20]
 80029bc:	f002 0203 	and.w	r2, r2, #3
 80029c0:	0092      	lsls	r2, r2, #2
 80029c2:	4093      	lsls	r3, r2
 80029c4:	693a      	ldr	r2, [r7, #16]
 80029c6:	4313      	orrs	r3, r2
 80029c8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80029ca:	4937      	ldr	r1, [pc, #220]	@ (8002aa8 <HAL_GPIO_Init+0x2c4>)
 80029cc:	697b      	ldr	r3, [r7, #20]
 80029ce:	089b      	lsrs	r3, r3, #2
 80029d0:	3302      	adds	r3, #2
 80029d2:	693a      	ldr	r2, [r7, #16]
 80029d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80029d8:	4b36      	ldr	r3, [pc, #216]	@ (8002ab4 <HAL_GPIO_Init+0x2d0>)
 80029da:	689b      	ldr	r3, [r3, #8]
 80029dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	43db      	mvns	r3, r3
 80029e2:	693a      	ldr	r2, [r7, #16]
 80029e4:	4013      	ands	r3, r2
 80029e6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d003      	beq.n	80029fc <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80029f4:	693a      	ldr	r2, [r7, #16]
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	4313      	orrs	r3, r2
 80029fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80029fc:	4a2d      	ldr	r2, [pc, #180]	@ (8002ab4 <HAL_GPIO_Init+0x2d0>)
 80029fe:	693b      	ldr	r3, [r7, #16]
 8002a00:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002a02:	4b2c      	ldr	r3, [pc, #176]	@ (8002ab4 <HAL_GPIO_Init+0x2d0>)
 8002a04:	68db      	ldr	r3, [r3, #12]
 8002a06:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	43db      	mvns	r3, r3
 8002a0c:	693a      	ldr	r2, [r7, #16]
 8002a0e:	4013      	ands	r3, r2
 8002a10:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d003      	beq.n	8002a26 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8002a1e:	693a      	ldr	r2, [r7, #16]
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	4313      	orrs	r3, r2
 8002a24:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002a26:	4a23      	ldr	r2, [pc, #140]	@ (8002ab4 <HAL_GPIO_Init+0x2d0>)
 8002a28:	693b      	ldr	r3, [r7, #16]
 8002a2a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002a2c:	4b21      	ldr	r3, [pc, #132]	@ (8002ab4 <HAL_GPIO_Init+0x2d0>)
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	43db      	mvns	r3, r3
 8002a36:	693a      	ldr	r2, [r7, #16]
 8002a38:	4013      	ands	r3, r2
 8002a3a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d003      	beq.n	8002a50 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8002a48:	693a      	ldr	r2, [r7, #16]
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002a50:	4a18      	ldr	r2, [pc, #96]	@ (8002ab4 <HAL_GPIO_Init+0x2d0>)
 8002a52:	693b      	ldr	r3, [r7, #16]
 8002a54:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002a56:	4b17      	ldr	r3, [pc, #92]	@ (8002ab4 <HAL_GPIO_Init+0x2d0>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	43db      	mvns	r3, r3
 8002a60:	693a      	ldr	r2, [r7, #16]
 8002a62:	4013      	ands	r3, r2
 8002a64:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d003      	beq.n	8002a7a <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8002a72:	693a      	ldr	r2, [r7, #16]
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	4313      	orrs	r3, r2
 8002a78:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002a7a:	4a0e      	ldr	r2, [pc, #56]	@ (8002ab4 <HAL_GPIO_Init+0x2d0>)
 8002a7c:	693b      	ldr	r3, [r7, #16]
 8002a7e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002a80:	697b      	ldr	r3, [r7, #20]
 8002a82:	3301      	adds	r3, #1
 8002a84:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	681a      	ldr	r2, [r3, #0]
 8002a8a:	697b      	ldr	r3, [r7, #20]
 8002a8c:	fa22 f303 	lsr.w	r3, r2, r3
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	f47f aeaf 	bne.w	80027f4 <HAL_GPIO_Init+0x10>
  }
}
 8002a96:	bf00      	nop
 8002a98:	bf00      	nop
 8002a9a:	371c      	adds	r7, #28
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa2:	4770      	bx	lr
 8002aa4:	40021000 	.word	0x40021000
 8002aa8:	40010000 	.word	0x40010000
 8002aac:	48000400 	.word	0x48000400
 8002ab0:	48000800 	.word	0x48000800
 8002ab4:	40010400 	.word	0x40010400

08002ab8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b082      	sub	sp, #8
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d101      	bne.n	8002aca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	e08d      	b.n	8002be6 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ad0:	b2db      	uxtb	r3, r3
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d106      	bne.n	8002ae4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002ade:	6878      	ldr	r0, [r7, #4]
 8002ae0:	f7fe fe96 	bl	8001810 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2224      	movs	r2, #36	@ 0x24
 8002ae8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	681a      	ldr	r2, [r3, #0]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f022 0201 	bic.w	r2, r2, #1
 8002afa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	685a      	ldr	r2, [r3, #4]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002b08:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	689a      	ldr	r2, [r3, #8]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002b18:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	68db      	ldr	r3, [r3, #12]
 8002b1e:	2b01      	cmp	r3, #1
 8002b20:	d107      	bne.n	8002b32 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	689a      	ldr	r2, [r3, #8]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002b2e:	609a      	str	r2, [r3, #8]
 8002b30:	e006      	b.n	8002b40 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	689a      	ldr	r2, [r3, #8]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002b3e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	68db      	ldr	r3, [r3, #12]
 8002b44:	2b02      	cmp	r3, #2
 8002b46:	d108      	bne.n	8002b5a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	685a      	ldr	r2, [r3, #4]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002b56:	605a      	str	r2, [r3, #4]
 8002b58:	e007      	b.n	8002b6a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	685a      	ldr	r2, [r3, #4]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002b68:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	687a      	ldr	r2, [r7, #4]
 8002b72:	6812      	ldr	r2, [r2, #0]
 8002b74:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002b78:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002b7c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	68da      	ldr	r2, [r3, #12]
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002b8c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	691a      	ldr	r2, [r3, #16]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	695b      	ldr	r3, [r3, #20]
 8002b96:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	699b      	ldr	r3, [r3, #24]
 8002b9e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	430a      	orrs	r2, r1
 8002ba6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	69d9      	ldr	r1, [r3, #28]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6a1a      	ldr	r2, [r3, #32]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	430a      	orrs	r2, r1
 8002bb6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	681a      	ldr	r2, [r3, #0]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f042 0201 	orr.w	r2, r2, #1
 8002bc6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2220      	movs	r2, #32
 8002bd2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2200      	movs	r2, #0
 8002bda:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2200      	movs	r2, #0
 8002be0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002be4:	2300      	movs	r3, #0
}
 8002be6:	4618      	mov	r0, r3
 8002be8:	3708      	adds	r7, #8
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}

08002bee <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002bee:	b480      	push	{r7}
 8002bf0:	b083      	sub	sp, #12
 8002bf2:	af00      	add	r7, sp, #0
 8002bf4:	6078      	str	r0, [r7, #4]
 8002bf6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002bfe:	b2db      	uxtb	r3, r3
 8002c00:	2b20      	cmp	r3, #32
 8002c02:	d138      	bne.n	8002c76 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002c0a:	2b01      	cmp	r3, #1
 8002c0c:	d101      	bne.n	8002c12 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002c0e:	2302      	movs	r3, #2
 8002c10:	e032      	b.n	8002c78 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2201      	movs	r2, #1
 8002c16:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2224      	movs	r2, #36	@ 0x24
 8002c1e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	681a      	ldr	r2, [r3, #0]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f022 0201 	bic.w	r2, r2, #1
 8002c30:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	681a      	ldr	r2, [r3, #0]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002c40:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	6819      	ldr	r1, [r3, #0]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	683a      	ldr	r2, [r7, #0]
 8002c4e:	430a      	orrs	r2, r1
 8002c50:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	681a      	ldr	r2, [r3, #0]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f042 0201 	orr.w	r2, r2, #1
 8002c60:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2220      	movs	r2, #32
 8002c66:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002c72:	2300      	movs	r3, #0
 8002c74:	e000      	b.n	8002c78 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002c76:	2302      	movs	r3, #2
  }
}
 8002c78:	4618      	mov	r0, r3
 8002c7a:	370c      	adds	r7, #12
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c82:	4770      	bx	lr

08002c84 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002c84:	b480      	push	{r7}
 8002c86:	b085      	sub	sp, #20
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
 8002c8c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c94:	b2db      	uxtb	r3, r3
 8002c96:	2b20      	cmp	r3, #32
 8002c98:	d139      	bne.n	8002d0e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002ca0:	2b01      	cmp	r3, #1
 8002ca2:	d101      	bne.n	8002ca8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002ca4:	2302      	movs	r3, #2
 8002ca6:	e033      	b.n	8002d10 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2201      	movs	r2, #1
 8002cac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2224      	movs	r2, #36	@ 0x24
 8002cb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	681a      	ldr	r2, [r3, #0]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f022 0201 	bic.w	r2, r2, #1
 8002cc6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002cd6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	021b      	lsls	r3, r3, #8
 8002cdc:	68fa      	ldr	r2, [r7, #12]
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	68fa      	ldr	r2, [r7, #12]
 8002ce8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	681a      	ldr	r2, [r3, #0]
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f042 0201 	orr.w	r2, r2, #1
 8002cf8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2220      	movs	r2, #32
 8002cfe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2200      	movs	r2, #0
 8002d06:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	e000      	b.n	8002d10 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002d0e:	2302      	movs	r3, #2
  }
}
 8002d10:	4618      	mov	r0, r3
 8002d12:	3714      	adds	r7, #20
 8002d14:	46bd      	mov	sp, r7
 8002d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1a:	4770      	bx	lr

08002d1c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d20:	4b05      	ldr	r3, [pc, #20]	@ (8002d38 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a04      	ldr	r2, [pc, #16]	@ (8002d38 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002d26:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d2a:	6013      	str	r3, [r2, #0]
}
 8002d2c:	bf00      	nop
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d34:	4770      	bx	lr
 8002d36:	bf00      	nop
 8002d38:	40007000 	.word	0x40007000

08002d3c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002d40:	4b04      	ldr	r3, [pc, #16]	@ (8002d54 <HAL_PWREx_GetVoltageRange+0x18>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d50:	4770      	bx	lr
 8002d52:	bf00      	nop
 8002d54:	40007000 	.word	0x40007000

08002d58 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	b085      	sub	sp, #20
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002d66:	d130      	bne.n	8002dca <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002d68:	4b23      	ldr	r3, [pc, #140]	@ (8002df8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002d70:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002d74:	d038      	beq.n	8002de8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002d76:	4b20      	ldr	r3, [pc, #128]	@ (8002df8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002d7e:	4a1e      	ldr	r2, [pc, #120]	@ (8002df8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d80:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002d84:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002d86:	4b1d      	ldr	r3, [pc, #116]	@ (8002dfc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	2232      	movs	r2, #50	@ 0x32
 8002d8c:	fb02 f303 	mul.w	r3, r2, r3
 8002d90:	4a1b      	ldr	r2, [pc, #108]	@ (8002e00 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002d92:	fba2 2303 	umull	r2, r3, r2, r3
 8002d96:	0c9b      	lsrs	r3, r3, #18
 8002d98:	3301      	adds	r3, #1
 8002d9a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002d9c:	e002      	b.n	8002da4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	3b01      	subs	r3, #1
 8002da2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002da4:	4b14      	ldr	r3, [pc, #80]	@ (8002df8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002da6:	695b      	ldr	r3, [r3, #20]
 8002da8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002dac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002db0:	d102      	bne.n	8002db8 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d1f2      	bne.n	8002d9e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002db8:	4b0f      	ldr	r3, [pc, #60]	@ (8002df8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002dba:	695b      	ldr	r3, [r3, #20]
 8002dbc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002dc0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002dc4:	d110      	bne.n	8002de8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002dc6:	2303      	movs	r3, #3
 8002dc8:	e00f      	b.n	8002dea <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002dca:	4b0b      	ldr	r3, [pc, #44]	@ (8002df8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002dd2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002dd6:	d007      	beq.n	8002de8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002dd8:	4b07      	ldr	r3, [pc, #28]	@ (8002df8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002de0:	4a05      	ldr	r2, [pc, #20]	@ (8002df8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002de2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002de6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002de8:	2300      	movs	r3, #0
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	3714      	adds	r7, #20
 8002dee:	46bd      	mov	sp, r7
 8002df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df4:	4770      	bx	lr
 8002df6:	bf00      	nop
 8002df8:	40007000 	.word	0x40007000
 8002dfc:	20000004 	.word	0x20000004
 8002e00:	431bde83 	.word	0x431bde83

08002e04 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b088      	sub	sp, #32
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d102      	bne.n	8002e18 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002e12:	2301      	movs	r3, #1
 8002e14:	f000 bc02 	b.w	800361c <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e18:	4b96      	ldr	r3, [pc, #600]	@ (8003074 <HAL_RCC_OscConfig+0x270>)
 8002e1a:	689b      	ldr	r3, [r3, #8]
 8002e1c:	f003 030c 	and.w	r3, r3, #12
 8002e20:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002e22:	4b94      	ldr	r3, [pc, #592]	@ (8003074 <HAL_RCC_OscConfig+0x270>)
 8002e24:	68db      	ldr	r3, [r3, #12]
 8002e26:	f003 0303 	and.w	r3, r3, #3
 8002e2a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f003 0310 	and.w	r3, r3, #16
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	f000 80e4 	beq.w	8003002 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002e3a:	69bb      	ldr	r3, [r7, #24]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d007      	beq.n	8002e50 <HAL_RCC_OscConfig+0x4c>
 8002e40:	69bb      	ldr	r3, [r7, #24]
 8002e42:	2b0c      	cmp	r3, #12
 8002e44:	f040 808b 	bne.w	8002f5e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002e48:	697b      	ldr	r3, [r7, #20]
 8002e4a:	2b01      	cmp	r3, #1
 8002e4c:	f040 8087 	bne.w	8002f5e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002e50:	4b88      	ldr	r3, [pc, #544]	@ (8003074 <HAL_RCC_OscConfig+0x270>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f003 0302 	and.w	r3, r3, #2
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d005      	beq.n	8002e68 <HAL_RCC_OscConfig+0x64>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	699b      	ldr	r3, [r3, #24]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d101      	bne.n	8002e68 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002e64:	2301      	movs	r3, #1
 8002e66:	e3d9      	b.n	800361c <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6a1a      	ldr	r2, [r3, #32]
 8002e6c:	4b81      	ldr	r3, [pc, #516]	@ (8003074 <HAL_RCC_OscConfig+0x270>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f003 0308 	and.w	r3, r3, #8
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d004      	beq.n	8002e82 <HAL_RCC_OscConfig+0x7e>
 8002e78:	4b7e      	ldr	r3, [pc, #504]	@ (8003074 <HAL_RCC_OscConfig+0x270>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002e80:	e005      	b.n	8002e8e <HAL_RCC_OscConfig+0x8a>
 8002e82:	4b7c      	ldr	r3, [pc, #496]	@ (8003074 <HAL_RCC_OscConfig+0x270>)
 8002e84:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002e88:	091b      	lsrs	r3, r3, #4
 8002e8a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d223      	bcs.n	8002eda <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6a1b      	ldr	r3, [r3, #32]
 8002e96:	4618      	mov	r0, r3
 8002e98:	f000 fdbe 	bl	8003a18 <RCC_SetFlashLatencyFromMSIRange>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d001      	beq.n	8002ea6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e3ba      	b.n	800361c <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ea6:	4b73      	ldr	r3, [pc, #460]	@ (8003074 <HAL_RCC_OscConfig+0x270>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4a72      	ldr	r2, [pc, #456]	@ (8003074 <HAL_RCC_OscConfig+0x270>)
 8002eac:	f043 0308 	orr.w	r3, r3, #8
 8002eb0:	6013      	str	r3, [r2, #0]
 8002eb2:	4b70      	ldr	r3, [pc, #448]	@ (8003074 <HAL_RCC_OscConfig+0x270>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6a1b      	ldr	r3, [r3, #32]
 8002ebe:	496d      	ldr	r1, [pc, #436]	@ (8003074 <HAL_RCC_OscConfig+0x270>)
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ec4:	4b6b      	ldr	r3, [pc, #428]	@ (8003074 <HAL_RCC_OscConfig+0x270>)
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	69db      	ldr	r3, [r3, #28]
 8002ed0:	021b      	lsls	r3, r3, #8
 8002ed2:	4968      	ldr	r1, [pc, #416]	@ (8003074 <HAL_RCC_OscConfig+0x270>)
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	604b      	str	r3, [r1, #4]
 8002ed8:	e025      	b.n	8002f26 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002eda:	4b66      	ldr	r3, [pc, #408]	@ (8003074 <HAL_RCC_OscConfig+0x270>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4a65      	ldr	r2, [pc, #404]	@ (8003074 <HAL_RCC_OscConfig+0x270>)
 8002ee0:	f043 0308 	orr.w	r3, r3, #8
 8002ee4:	6013      	str	r3, [r2, #0]
 8002ee6:	4b63      	ldr	r3, [pc, #396]	@ (8003074 <HAL_RCC_OscConfig+0x270>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6a1b      	ldr	r3, [r3, #32]
 8002ef2:	4960      	ldr	r1, [pc, #384]	@ (8003074 <HAL_RCC_OscConfig+0x270>)
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ef8:	4b5e      	ldr	r3, [pc, #376]	@ (8003074 <HAL_RCC_OscConfig+0x270>)
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	69db      	ldr	r3, [r3, #28]
 8002f04:	021b      	lsls	r3, r3, #8
 8002f06:	495b      	ldr	r1, [pc, #364]	@ (8003074 <HAL_RCC_OscConfig+0x270>)
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002f0c:	69bb      	ldr	r3, [r7, #24]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d109      	bne.n	8002f26 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6a1b      	ldr	r3, [r3, #32]
 8002f16:	4618      	mov	r0, r3
 8002f18:	f000 fd7e 	bl	8003a18 <RCC_SetFlashLatencyFromMSIRange>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d001      	beq.n	8002f26 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	e37a      	b.n	800361c <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002f26:	f000 fc81 	bl	800382c <HAL_RCC_GetSysClockFreq>
 8002f2a:	4602      	mov	r2, r0
 8002f2c:	4b51      	ldr	r3, [pc, #324]	@ (8003074 <HAL_RCC_OscConfig+0x270>)
 8002f2e:	689b      	ldr	r3, [r3, #8]
 8002f30:	091b      	lsrs	r3, r3, #4
 8002f32:	f003 030f 	and.w	r3, r3, #15
 8002f36:	4950      	ldr	r1, [pc, #320]	@ (8003078 <HAL_RCC_OscConfig+0x274>)
 8002f38:	5ccb      	ldrb	r3, [r1, r3]
 8002f3a:	f003 031f 	and.w	r3, r3, #31
 8002f3e:	fa22 f303 	lsr.w	r3, r2, r3
 8002f42:	4a4e      	ldr	r2, [pc, #312]	@ (800307c <HAL_RCC_OscConfig+0x278>)
 8002f44:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002f46:	4b4e      	ldr	r3, [pc, #312]	@ (8003080 <HAL_RCC_OscConfig+0x27c>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f7fe feee 	bl	8001d2c <HAL_InitTick>
 8002f50:	4603      	mov	r3, r0
 8002f52:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002f54:	7bfb      	ldrb	r3, [r7, #15]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d052      	beq.n	8003000 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002f5a:	7bfb      	ldrb	r3, [r7, #15]
 8002f5c:	e35e      	b.n	800361c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	699b      	ldr	r3, [r3, #24]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d032      	beq.n	8002fcc <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002f66:	4b43      	ldr	r3, [pc, #268]	@ (8003074 <HAL_RCC_OscConfig+0x270>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4a42      	ldr	r2, [pc, #264]	@ (8003074 <HAL_RCC_OscConfig+0x270>)
 8002f6c:	f043 0301 	orr.w	r3, r3, #1
 8002f70:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002f72:	f7ff f8c7 	bl	8002104 <HAL_GetTick>
 8002f76:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002f78:	e008      	b.n	8002f8c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002f7a:	f7ff f8c3 	bl	8002104 <HAL_GetTick>
 8002f7e:	4602      	mov	r2, r0
 8002f80:	693b      	ldr	r3, [r7, #16]
 8002f82:	1ad3      	subs	r3, r2, r3
 8002f84:	2b02      	cmp	r3, #2
 8002f86:	d901      	bls.n	8002f8c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002f88:	2303      	movs	r3, #3
 8002f8a:	e347      	b.n	800361c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002f8c:	4b39      	ldr	r3, [pc, #228]	@ (8003074 <HAL_RCC_OscConfig+0x270>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f003 0302 	and.w	r3, r3, #2
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d0f0      	beq.n	8002f7a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002f98:	4b36      	ldr	r3, [pc, #216]	@ (8003074 <HAL_RCC_OscConfig+0x270>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a35      	ldr	r2, [pc, #212]	@ (8003074 <HAL_RCC_OscConfig+0x270>)
 8002f9e:	f043 0308 	orr.w	r3, r3, #8
 8002fa2:	6013      	str	r3, [r2, #0]
 8002fa4:	4b33      	ldr	r3, [pc, #204]	@ (8003074 <HAL_RCC_OscConfig+0x270>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6a1b      	ldr	r3, [r3, #32]
 8002fb0:	4930      	ldr	r1, [pc, #192]	@ (8003074 <HAL_RCC_OscConfig+0x270>)
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002fb6:	4b2f      	ldr	r3, [pc, #188]	@ (8003074 <HAL_RCC_OscConfig+0x270>)
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	69db      	ldr	r3, [r3, #28]
 8002fc2:	021b      	lsls	r3, r3, #8
 8002fc4:	492b      	ldr	r1, [pc, #172]	@ (8003074 <HAL_RCC_OscConfig+0x270>)
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	604b      	str	r3, [r1, #4]
 8002fca:	e01a      	b.n	8003002 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002fcc:	4b29      	ldr	r3, [pc, #164]	@ (8003074 <HAL_RCC_OscConfig+0x270>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a28      	ldr	r2, [pc, #160]	@ (8003074 <HAL_RCC_OscConfig+0x270>)
 8002fd2:	f023 0301 	bic.w	r3, r3, #1
 8002fd6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002fd8:	f7ff f894 	bl	8002104 <HAL_GetTick>
 8002fdc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002fde:	e008      	b.n	8002ff2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002fe0:	f7ff f890 	bl	8002104 <HAL_GetTick>
 8002fe4:	4602      	mov	r2, r0
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	1ad3      	subs	r3, r2, r3
 8002fea:	2b02      	cmp	r3, #2
 8002fec:	d901      	bls.n	8002ff2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002fee:	2303      	movs	r3, #3
 8002ff0:	e314      	b.n	800361c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002ff2:	4b20      	ldr	r3, [pc, #128]	@ (8003074 <HAL_RCC_OscConfig+0x270>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f003 0302 	and.w	r3, r3, #2
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d1f0      	bne.n	8002fe0 <HAL_RCC_OscConfig+0x1dc>
 8002ffe:	e000      	b.n	8003002 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003000:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f003 0301 	and.w	r3, r3, #1
 800300a:	2b00      	cmp	r3, #0
 800300c:	d073      	beq.n	80030f6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800300e:	69bb      	ldr	r3, [r7, #24]
 8003010:	2b08      	cmp	r3, #8
 8003012:	d005      	beq.n	8003020 <HAL_RCC_OscConfig+0x21c>
 8003014:	69bb      	ldr	r3, [r7, #24]
 8003016:	2b0c      	cmp	r3, #12
 8003018:	d10e      	bne.n	8003038 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800301a:	697b      	ldr	r3, [r7, #20]
 800301c:	2b03      	cmp	r3, #3
 800301e:	d10b      	bne.n	8003038 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003020:	4b14      	ldr	r3, [pc, #80]	@ (8003074 <HAL_RCC_OscConfig+0x270>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003028:	2b00      	cmp	r3, #0
 800302a:	d063      	beq.n	80030f4 <HAL_RCC_OscConfig+0x2f0>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d15f      	bne.n	80030f4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003034:	2301      	movs	r3, #1
 8003036:	e2f1      	b.n	800361c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003040:	d106      	bne.n	8003050 <HAL_RCC_OscConfig+0x24c>
 8003042:	4b0c      	ldr	r3, [pc, #48]	@ (8003074 <HAL_RCC_OscConfig+0x270>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a0b      	ldr	r2, [pc, #44]	@ (8003074 <HAL_RCC_OscConfig+0x270>)
 8003048:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800304c:	6013      	str	r3, [r2, #0]
 800304e:	e025      	b.n	800309c <HAL_RCC_OscConfig+0x298>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003058:	d114      	bne.n	8003084 <HAL_RCC_OscConfig+0x280>
 800305a:	4b06      	ldr	r3, [pc, #24]	@ (8003074 <HAL_RCC_OscConfig+0x270>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a05      	ldr	r2, [pc, #20]	@ (8003074 <HAL_RCC_OscConfig+0x270>)
 8003060:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003064:	6013      	str	r3, [r2, #0]
 8003066:	4b03      	ldr	r3, [pc, #12]	@ (8003074 <HAL_RCC_OscConfig+0x270>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a02      	ldr	r2, [pc, #8]	@ (8003074 <HAL_RCC_OscConfig+0x270>)
 800306c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003070:	6013      	str	r3, [r2, #0]
 8003072:	e013      	b.n	800309c <HAL_RCC_OscConfig+0x298>
 8003074:	40021000 	.word	0x40021000
 8003078:	080188ac 	.word	0x080188ac
 800307c:	20000004 	.word	0x20000004
 8003080:	20000008 	.word	0x20000008
 8003084:	4ba0      	ldr	r3, [pc, #640]	@ (8003308 <HAL_RCC_OscConfig+0x504>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a9f      	ldr	r2, [pc, #636]	@ (8003308 <HAL_RCC_OscConfig+0x504>)
 800308a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800308e:	6013      	str	r3, [r2, #0]
 8003090:	4b9d      	ldr	r3, [pc, #628]	@ (8003308 <HAL_RCC_OscConfig+0x504>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a9c      	ldr	r2, [pc, #624]	@ (8003308 <HAL_RCC_OscConfig+0x504>)
 8003096:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800309a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d013      	beq.n	80030cc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030a4:	f7ff f82e 	bl	8002104 <HAL_GetTick>
 80030a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80030aa:	e008      	b.n	80030be <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030ac:	f7ff f82a 	bl	8002104 <HAL_GetTick>
 80030b0:	4602      	mov	r2, r0
 80030b2:	693b      	ldr	r3, [r7, #16]
 80030b4:	1ad3      	subs	r3, r2, r3
 80030b6:	2b64      	cmp	r3, #100	@ 0x64
 80030b8:	d901      	bls.n	80030be <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80030ba:	2303      	movs	r3, #3
 80030bc:	e2ae      	b.n	800361c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80030be:	4b92      	ldr	r3, [pc, #584]	@ (8003308 <HAL_RCC_OscConfig+0x504>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d0f0      	beq.n	80030ac <HAL_RCC_OscConfig+0x2a8>
 80030ca:	e014      	b.n	80030f6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030cc:	f7ff f81a 	bl	8002104 <HAL_GetTick>
 80030d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80030d2:	e008      	b.n	80030e6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030d4:	f7ff f816 	bl	8002104 <HAL_GetTick>
 80030d8:	4602      	mov	r2, r0
 80030da:	693b      	ldr	r3, [r7, #16]
 80030dc:	1ad3      	subs	r3, r2, r3
 80030de:	2b64      	cmp	r3, #100	@ 0x64
 80030e0:	d901      	bls.n	80030e6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80030e2:	2303      	movs	r3, #3
 80030e4:	e29a      	b.n	800361c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80030e6:	4b88      	ldr	r3, [pc, #544]	@ (8003308 <HAL_RCC_OscConfig+0x504>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d1f0      	bne.n	80030d4 <HAL_RCC_OscConfig+0x2d0>
 80030f2:	e000      	b.n	80030f6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f003 0302 	and.w	r3, r3, #2
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d060      	beq.n	80031c4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003102:	69bb      	ldr	r3, [r7, #24]
 8003104:	2b04      	cmp	r3, #4
 8003106:	d005      	beq.n	8003114 <HAL_RCC_OscConfig+0x310>
 8003108:	69bb      	ldr	r3, [r7, #24]
 800310a:	2b0c      	cmp	r3, #12
 800310c:	d119      	bne.n	8003142 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800310e:	697b      	ldr	r3, [r7, #20]
 8003110:	2b02      	cmp	r3, #2
 8003112:	d116      	bne.n	8003142 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003114:	4b7c      	ldr	r3, [pc, #496]	@ (8003308 <HAL_RCC_OscConfig+0x504>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800311c:	2b00      	cmp	r3, #0
 800311e:	d005      	beq.n	800312c <HAL_RCC_OscConfig+0x328>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	68db      	ldr	r3, [r3, #12]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d101      	bne.n	800312c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003128:	2301      	movs	r3, #1
 800312a:	e277      	b.n	800361c <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800312c:	4b76      	ldr	r3, [pc, #472]	@ (8003308 <HAL_RCC_OscConfig+0x504>)
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	691b      	ldr	r3, [r3, #16]
 8003138:	061b      	lsls	r3, r3, #24
 800313a:	4973      	ldr	r1, [pc, #460]	@ (8003308 <HAL_RCC_OscConfig+0x504>)
 800313c:	4313      	orrs	r3, r2
 800313e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003140:	e040      	b.n	80031c4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	68db      	ldr	r3, [r3, #12]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d023      	beq.n	8003192 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800314a:	4b6f      	ldr	r3, [pc, #444]	@ (8003308 <HAL_RCC_OscConfig+0x504>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4a6e      	ldr	r2, [pc, #440]	@ (8003308 <HAL_RCC_OscConfig+0x504>)
 8003150:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003154:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003156:	f7fe ffd5 	bl	8002104 <HAL_GetTick>
 800315a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800315c:	e008      	b.n	8003170 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800315e:	f7fe ffd1 	bl	8002104 <HAL_GetTick>
 8003162:	4602      	mov	r2, r0
 8003164:	693b      	ldr	r3, [r7, #16]
 8003166:	1ad3      	subs	r3, r2, r3
 8003168:	2b02      	cmp	r3, #2
 800316a:	d901      	bls.n	8003170 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800316c:	2303      	movs	r3, #3
 800316e:	e255      	b.n	800361c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003170:	4b65      	ldr	r3, [pc, #404]	@ (8003308 <HAL_RCC_OscConfig+0x504>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003178:	2b00      	cmp	r3, #0
 800317a:	d0f0      	beq.n	800315e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800317c:	4b62      	ldr	r3, [pc, #392]	@ (8003308 <HAL_RCC_OscConfig+0x504>)
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	691b      	ldr	r3, [r3, #16]
 8003188:	061b      	lsls	r3, r3, #24
 800318a:	495f      	ldr	r1, [pc, #380]	@ (8003308 <HAL_RCC_OscConfig+0x504>)
 800318c:	4313      	orrs	r3, r2
 800318e:	604b      	str	r3, [r1, #4]
 8003190:	e018      	b.n	80031c4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003192:	4b5d      	ldr	r3, [pc, #372]	@ (8003308 <HAL_RCC_OscConfig+0x504>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4a5c      	ldr	r2, [pc, #368]	@ (8003308 <HAL_RCC_OscConfig+0x504>)
 8003198:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800319c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800319e:	f7fe ffb1 	bl	8002104 <HAL_GetTick>
 80031a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80031a4:	e008      	b.n	80031b8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031a6:	f7fe ffad 	bl	8002104 <HAL_GetTick>
 80031aa:	4602      	mov	r2, r0
 80031ac:	693b      	ldr	r3, [r7, #16]
 80031ae:	1ad3      	subs	r3, r2, r3
 80031b0:	2b02      	cmp	r3, #2
 80031b2:	d901      	bls.n	80031b8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80031b4:	2303      	movs	r3, #3
 80031b6:	e231      	b.n	800361c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80031b8:	4b53      	ldr	r3, [pc, #332]	@ (8003308 <HAL_RCC_OscConfig+0x504>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d1f0      	bne.n	80031a6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f003 0308 	and.w	r3, r3, #8
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d03c      	beq.n	800324a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	695b      	ldr	r3, [r3, #20]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d01c      	beq.n	8003212 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031d8:	4b4b      	ldr	r3, [pc, #300]	@ (8003308 <HAL_RCC_OscConfig+0x504>)
 80031da:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80031de:	4a4a      	ldr	r2, [pc, #296]	@ (8003308 <HAL_RCC_OscConfig+0x504>)
 80031e0:	f043 0301 	orr.w	r3, r3, #1
 80031e4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031e8:	f7fe ff8c 	bl	8002104 <HAL_GetTick>
 80031ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80031ee:	e008      	b.n	8003202 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031f0:	f7fe ff88 	bl	8002104 <HAL_GetTick>
 80031f4:	4602      	mov	r2, r0
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	1ad3      	subs	r3, r2, r3
 80031fa:	2b02      	cmp	r3, #2
 80031fc:	d901      	bls.n	8003202 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80031fe:	2303      	movs	r3, #3
 8003200:	e20c      	b.n	800361c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003202:	4b41      	ldr	r3, [pc, #260]	@ (8003308 <HAL_RCC_OscConfig+0x504>)
 8003204:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003208:	f003 0302 	and.w	r3, r3, #2
 800320c:	2b00      	cmp	r3, #0
 800320e:	d0ef      	beq.n	80031f0 <HAL_RCC_OscConfig+0x3ec>
 8003210:	e01b      	b.n	800324a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003212:	4b3d      	ldr	r3, [pc, #244]	@ (8003308 <HAL_RCC_OscConfig+0x504>)
 8003214:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003218:	4a3b      	ldr	r2, [pc, #236]	@ (8003308 <HAL_RCC_OscConfig+0x504>)
 800321a:	f023 0301 	bic.w	r3, r3, #1
 800321e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003222:	f7fe ff6f 	bl	8002104 <HAL_GetTick>
 8003226:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003228:	e008      	b.n	800323c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800322a:	f7fe ff6b 	bl	8002104 <HAL_GetTick>
 800322e:	4602      	mov	r2, r0
 8003230:	693b      	ldr	r3, [r7, #16]
 8003232:	1ad3      	subs	r3, r2, r3
 8003234:	2b02      	cmp	r3, #2
 8003236:	d901      	bls.n	800323c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003238:	2303      	movs	r3, #3
 800323a:	e1ef      	b.n	800361c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800323c:	4b32      	ldr	r3, [pc, #200]	@ (8003308 <HAL_RCC_OscConfig+0x504>)
 800323e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003242:	f003 0302 	and.w	r3, r3, #2
 8003246:	2b00      	cmp	r3, #0
 8003248:	d1ef      	bne.n	800322a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f003 0304 	and.w	r3, r3, #4
 8003252:	2b00      	cmp	r3, #0
 8003254:	f000 80a6 	beq.w	80033a4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003258:	2300      	movs	r3, #0
 800325a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800325c:	4b2a      	ldr	r3, [pc, #168]	@ (8003308 <HAL_RCC_OscConfig+0x504>)
 800325e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003260:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003264:	2b00      	cmp	r3, #0
 8003266:	d10d      	bne.n	8003284 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003268:	4b27      	ldr	r3, [pc, #156]	@ (8003308 <HAL_RCC_OscConfig+0x504>)
 800326a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800326c:	4a26      	ldr	r2, [pc, #152]	@ (8003308 <HAL_RCC_OscConfig+0x504>)
 800326e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003272:	6593      	str	r3, [r2, #88]	@ 0x58
 8003274:	4b24      	ldr	r3, [pc, #144]	@ (8003308 <HAL_RCC_OscConfig+0x504>)
 8003276:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003278:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800327c:	60bb      	str	r3, [r7, #8]
 800327e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003280:	2301      	movs	r3, #1
 8003282:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003284:	4b21      	ldr	r3, [pc, #132]	@ (800330c <HAL_RCC_OscConfig+0x508>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800328c:	2b00      	cmp	r3, #0
 800328e:	d118      	bne.n	80032c2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003290:	4b1e      	ldr	r3, [pc, #120]	@ (800330c <HAL_RCC_OscConfig+0x508>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4a1d      	ldr	r2, [pc, #116]	@ (800330c <HAL_RCC_OscConfig+0x508>)
 8003296:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800329a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800329c:	f7fe ff32 	bl	8002104 <HAL_GetTick>
 80032a0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80032a2:	e008      	b.n	80032b6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032a4:	f7fe ff2e 	bl	8002104 <HAL_GetTick>
 80032a8:	4602      	mov	r2, r0
 80032aa:	693b      	ldr	r3, [r7, #16]
 80032ac:	1ad3      	subs	r3, r2, r3
 80032ae:	2b02      	cmp	r3, #2
 80032b0:	d901      	bls.n	80032b6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80032b2:	2303      	movs	r3, #3
 80032b4:	e1b2      	b.n	800361c <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80032b6:	4b15      	ldr	r3, [pc, #84]	@ (800330c <HAL_RCC_OscConfig+0x508>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d0f0      	beq.n	80032a4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	689b      	ldr	r3, [r3, #8]
 80032c6:	2b01      	cmp	r3, #1
 80032c8:	d108      	bne.n	80032dc <HAL_RCC_OscConfig+0x4d8>
 80032ca:	4b0f      	ldr	r3, [pc, #60]	@ (8003308 <HAL_RCC_OscConfig+0x504>)
 80032cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032d0:	4a0d      	ldr	r2, [pc, #52]	@ (8003308 <HAL_RCC_OscConfig+0x504>)
 80032d2:	f043 0301 	orr.w	r3, r3, #1
 80032d6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80032da:	e029      	b.n	8003330 <HAL_RCC_OscConfig+0x52c>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	689b      	ldr	r3, [r3, #8]
 80032e0:	2b05      	cmp	r3, #5
 80032e2:	d115      	bne.n	8003310 <HAL_RCC_OscConfig+0x50c>
 80032e4:	4b08      	ldr	r3, [pc, #32]	@ (8003308 <HAL_RCC_OscConfig+0x504>)
 80032e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032ea:	4a07      	ldr	r2, [pc, #28]	@ (8003308 <HAL_RCC_OscConfig+0x504>)
 80032ec:	f043 0304 	orr.w	r3, r3, #4
 80032f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80032f4:	4b04      	ldr	r3, [pc, #16]	@ (8003308 <HAL_RCC_OscConfig+0x504>)
 80032f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032fa:	4a03      	ldr	r2, [pc, #12]	@ (8003308 <HAL_RCC_OscConfig+0x504>)
 80032fc:	f043 0301 	orr.w	r3, r3, #1
 8003300:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003304:	e014      	b.n	8003330 <HAL_RCC_OscConfig+0x52c>
 8003306:	bf00      	nop
 8003308:	40021000 	.word	0x40021000
 800330c:	40007000 	.word	0x40007000
 8003310:	4b9a      	ldr	r3, [pc, #616]	@ (800357c <HAL_RCC_OscConfig+0x778>)
 8003312:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003316:	4a99      	ldr	r2, [pc, #612]	@ (800357c <HAL_RCC_OscConfig+0x778>)
 8003318:	f023 0301 	bic.w	r3, r3, #1
 800331c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003320:	4b96      	ldr	r3, [pc, #600]	@ (800357c <HAL_RCC_OscConfig+0x778>)
 8003322:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003326:	4a95      	ldr	r2, [pc, #596]	@ (800357c <HAL_RCC_OscConfig+0x778>)
 8003328:	f023 0304 	bic.w	r3, r3, #4
 800332c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	689b      	ldr	r3, [r3, #8]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d016      	beq.n	8003366 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003338:	f7fe fee4 	bl	8002104 <HAL_GetTick>
 800333c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800333e:	e00a      	b.n	8003356 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003340:	f7fe fee0 	bl	8002104 <HAL_GetTick>
 8003344:	4602      	mov	r2, r0
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	1ad3      	subs	r3, r2, r3
 800334a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800334e:	4293      	cmp	r3, r2
 8003350:	d901      	bls.n	8003356 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003352:	2303      	movs	r3, #3
 8003354:	e162      	b.n	800361c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003356:	4b89      	ldr	r3, [pc, #548]	@ (800357c <HAL_RCC_OscConfig+0x778>)
 8003358:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800335c:	f003 0302 	and.w	r3, r3, #2
 8003360:	2b00      	cmp	r3, #0
 8003362:	d0ed      	beq.n	8003340 <HAL_RCC_OscConfig+0x53c>
 8003364:	e015      	b.n	8003392 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003366:	f7fe fecd 	bl	8002104 <HAL_GetTick>
 800336a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800336c:	e00a      	b.n	8003384 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800336e:	f7fe fec9 	bl	8002104 <HAL_GetTick>
 8003372:	4602      	mov	r2, r0
 8003374:	693b      	ldr	r3, [r7, #16]
 8003376:	1ad3      	subs	r3, r2, r3
 8003378:	f241 3288 	movw	r2, #5000	@ 0x1388
 800337c:	4293      	cmp	r3, r2
 800337e:	d901      	bls.n	8003384 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003380:	2303      	movs	r3, #3
 8003382:	e14b      	b.n	800361c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003384:	4b7d      	ldr	r3, [pc, #500]	@ (800357c <HAL_RCC_OscConfig+0x778>)
 8003386:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800338a:	f003 0302 	and.w	r3, r3, #2
 800338e:	2b00      	cmp	r3, #0
 8003390:	d1ed      	bne.n	800336e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003392:	7ffb      	ldrb	r3, [r7, #31]
 8003394:	2b01      	cmp	r3, #1
 8003396:	d105      	bne.n	80033a4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003398:	4b78      	ldr	r3, [pc, #480]	@ (800357c <HAL_RCC_OscConfig+0x778>)
 800339a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800339c:	4a77      	ldr	r2, [pc, #476]	@ (800357c <HAL_RCC_OscConfig+0x778>)
 800339e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80033a2:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f003 0320 	and.w	r3, r3, #32
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d03c      	beq.n	800342a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d01c      	beq.n	80033f2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80033b8:	4b70      	ldr	r3, [pc, #448]	@ (800357c <HAL_RCC_OscConfig+0x778>)
 80033ba:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80033be:	4a6f      	ldr	r2, [pc, #444]	@ (800357c <HAL_RCC_OscConfig+0x778>)
 80033c0:	f043 0301 	orr.w	r3, r3, #1
 80033c4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033c8:	f7fe fe9c 	bl	8002104 <HAL_GetTick>
 80033cc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80033ce:	e008      	b.n	80033e2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80033d0:	f7fe fe98 	bl	8002104 <HAL_GetTick>
 80033d4:	4602      	mov	r2, r0
 80033d6:	693b      	ldr	r3, [r7, #16]
 80033d8:	1ad3      	subs	r3, r2, r3
 80033da:	2b02      	cmp	r3, #2
 80033dc:	d901      	bls.n	80033e2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80033de:	2303      	movs	r3, #3
 80033e0:	e11c      	b.n	800361c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80033e2:	4b66      	ldr	r3, [pc, #408]	@ (800357c <HAL_RCC_OscConfig+0x778>)
 80033e4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80033e8:	f003 0302 	and.w	r3, r3, #2
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d0ef      	beq.n	80033d0 <HAL_RCC_OscConfig+0x5cc>
 80033f0:	e01b      	b.n	800342a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80033f2:	4b62      	ldr	r3, [pc, #392]	@ (800357c <HAL_RCC_OscConfig+0x778>)
 80033f4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80033f8:	4a60      	ldr	r2, [pc, #384]	@ (800357c <HAL_RCC_OscConfig+0x778>)
 80033fa:	f023 0301 	bic.w	r3, r3, #1
 80033fe:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003402:	f7fe fe7f 	bl	8002104 <HAL_GetTick>
 8003406:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003408:	e008      	b.n	800341c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800340a:	f7fe fe7b 	bl	8002104 <HAL_GetTick>
 800340e:	4602      	mov	r2, r0
 8003410:	693b      	ldr	r3, [r7, #16]
 8003412:	1ad3      	subs	r3, r2, r3
 8003414:	2b02      	cmp	r3, #2
 8003416:	d901      	bls.n	800341c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003418:	2303      	movs	r3, #3
 800341a:	e0ff      	b.n	800361c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800341c:	4b57      	ldr	r3, [pc, #348]	@ (800357c <HAL_RCC_OscConfig+0x778>)
 800341e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003422:	f003 0302 	and.w	r3, r3, #2
 8003426:	2b00      	cmp	r3, #0
 8003428:	d1ef      	bne.n	800340a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800342e:	2b00      	cmp	r3, #0
 8003430:	f000 80f3 	beq.w	800361a <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003438:	2b02      	cmp	r3, #2
 800343a:	f040 80c9 	bne.w	80035d0 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800343e:	4b4f      	ldr	r3, [pc, #316]	@ (800357c <HAL_RCC_OscConfig+0x778>)
 8003440:	68db      	ldr	r3, [r3, #12]
 8003442:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	f003 0203 	and.w	r2, r3, #3
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800344e:	429a      	cmp	r2, r3
 8003450:	d12c      	bne.n	80034ac <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003452:	697b      	ldr	r3, [r7, #20]
 8003454:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800345c:	3b01      	subs	r3, #1
 800345e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003460:	429a      	cmp	r2, r3
 8003462:	d123      	bne.n	80034ac <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800346e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003470:	429a      	cmp	r2, r3
 8003472:	d11b      	bne.n	80034ac <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003474:	697b      	ldr	r3, [r7, #20]
 8003476:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800347e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003480:	429a      	cmp	r2, r3
 8003482:	d113      	bne.n	80034ac <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003484:	697b      	ldr	r3, [r7, #20]
 8003486:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800348e:	085b      	lsrs	r3, r3, #1
 8003490:	3b01      	subs	r3, #1
 8003492:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003494:	429a      	cmp	r2, r3
 8003496:	d109      	bne.n	80034ac <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034a2:	085b      	lsrs	r3, r3, #1
 80034a4:	3b01      	subs	r3, #1
 80034a6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80034a8:	429a      	cmp	r2, r3
 80034aa:	d06b      	beq.n	8003584 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80034ac:	69bb      	ldr	r3, [r7, #24]
 80034ae:	2b0c      	cmp	r3, #12
 80034b0:	d062      	beq.n	8003578 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80034b2:	4b32      	ldr	r3, [pc, #200]	@ (800357c <HAL_RCC_OscConfig+0x778>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d001      	beq.n	80034c2 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80034be:	2301      	movs	r3, #1
 80034c0:	e0ac      	b.n	800361c <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80034c2:	4b2e      	ldr	r3, [pc, #184]	@ (800357c <HAL_RCC_OscConfig+0x778>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a2d      	ldr	r2, [pc, #180]	@ (800357c <HAL_RCC_OscConfig+0x778>)
 80034c8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80034cc:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80034ce:	f7fe fe19 	bl	8002104 <HAL_GetTick>
 80034d2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034d4:	e008      	b.n	80034e8 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034d6:	f7fe fe15 	bl	8002104 <HAL_GetTick>
 80034da:	4602      	mov	r2, r0
 80034dc:	693b      	ldr	r3, [r7, #16]
 80034de:	1ad3      	subs	r3, r2, r3
 80034e0:	2b02      	cmp	r3, #2
 80034e2:	d901      	bls.n	80034e8 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80034e4:	2303      	movs	r3, #3
 80034e6:	e099      	b.n	800361c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034e8:	4b24      	ldr	r3, [pc, #144]	@ (800357c <HAL_RCC_OscConfig+0x778>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d1f0      	bne.n	80034d6 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80034f4:	4b21      	ldr	r3, [pc, #132]	@ (800357c <HAL_RCC_OscConfig+0x778>)
 80034f6:	68da      	ldr	r2, [r3, #12]
 80034f8:	4b21      	ldr	r3, [pc, #132]	@ (8003580 <HAL_RCC_OscConfig+0x77c>)
 80034fa:	4013      	ands	r3, r2
 80034fc:	687a      	ldr	r2, [r7, #4]
 80034fe:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003500:	687a      	ldr	r2, [r7, #4]
 8003502:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003504:	3a01      	subs	r2, #1
 8003506:	0112      	lsls	r2, r2, #4
 8003508:	4311      	orrs	r1, r2
 800350a:	687a      	ldr	r2, [r7, #4]
 800350c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800350e:	0212      	lsls	r2, r2, #8
 8003510:	4311      	orrs	r1, r2
 8003512:	687a      	ldr	r2, [r7, #4]
 8003514:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003516:	0852      	lsrs	r2, r2, #1
 8003518:	3a01      	subs	r2, #1
 800351a:	0552      	lsls	r2, r2, #21
 800351c:	4311      	orrs	r1, r2
 800351e:	687a      	ldr	r2, [r7, #4]
 8003520:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003522:	0852      	lsrs	r2, r2, #1
 8003524:	3a01      	subs	r2, #1
 8003526:	0652      	lsls	r2, r2, #25
 8003528:	4311      	orrs	r1, r2
 800352a:	687a      	ldr	r2, [r7, #4]
 800352c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800352e:	06d2      	lsls	r2, r2, #27
 8003530:	430a      	orrs	r2, r1
 8003532:	4912      	ldr	r1, [pc, #72]	@ (800357c <HAL_RCC_OscConfig+0x778>)
 8003534:	4313      	orrs	r3, r2
 8003536:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003538:	4b10      	ldr	r3, [pc, #64]	@ (800357c <HAL_RCC_OscConfig+0x778>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a0f      	ldr	r2, [pc, #60]	@ (800357c <HAL_RCC_OscConfig+0x778>)
 800353e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003542:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003544:	4b0d      	ldr	r3, [pc, #52]	@ (800357c <HAL_RCC_OscConfig+0x778>)
 8003546:	68db      	ldr	r3, [r3, #12]
 8003548:	4a0c      	ldr	r2, [pc, #48]	@ (800357c <HAL_RCC_OscConfig+0x778>)
 800354a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800354e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003550:	f7fe fdd8 	bl	8002104 <HAL_GetTick>
 8003554:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003556:	e008      	b.n	800356a <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003558:	f7fe fdd4 	bl	8002104 <HAL_GetTick>
 800355c:	4602      	mov	r2, r0
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	1ad3      	subs	r3, r2, r3
 8003562:	2b02      	cmp	r3, #2
 8003564:	d901      	bls.n	800356a <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8003566:	2303      	movs	r3, #3
 8003568:	e058      	b.n	800361c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800356a:	4b04      	ldr	r3, [pc, #16]	@ (800357c <HAL_RCC_OscConfig+0x778>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003572:	2b00      	cmp	r3, #0
 8003574:	d0f0      	beq.n	8003558 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003576:	e050      	b.n	800361a <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003578:	2301      	movs	r3, #1
 800357a:	e04f      	b.n	800361c <HAL_RCC_OscConfig+0x818>
 800357c:	40021000 	.word	0x40021000
 8003580:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003584:	4b27      	ldr	r3, [pc, #156]	@ (8003624 <HAL_RCC_OscConfig+0x820>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800358c:	2b00      	cmp	r3, #0
 800358e:	d144      	bne.n	800361a <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003590:	4b24      	ldr	r3, [pc, #144]	@ (8003624 <HAL_RCC_OscConfig+0x820>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a23      	ldr	r2, [pc, #140]	@ (8003624 <HAL_RCC_OscConfig+0x820>)
 8003596:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800359a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800359c:	4b21      	ldr	r3, [pc, #132]	@ (8003624 <HAL_RCC_OscConfig+0x820>)
 800359e:	68db      	ldr	r3, [r3, #12]
 80035a0:	4a20      	ldr	r2, [pc, #128]	@ (8003624 <HAL_RCC_OscConfig+0x820>)
 80035a2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80035a6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80035a8:	f7fe fdac 	bl	8002104 <HAL_GetTick>
 80035ac:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035ae:	e008      	b.n	80035c2 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035b0:	f7fe fda8 	bl	8002104 <HAL_GetTick>
 80035b4:	4602      	mov	r2, r0
 80035b6:	693b      	ldr	r3, [r7, #16]
 80035b8:	1ad3      	subs	r3, r2, r3
 80035ba:	2b02      	cmp	r3, #2
 80035bc:	d901      	bls.n	80035c2 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80035be:	2303      	movs	r3, #3
 80035c0:	e02c      	b.n	800361c <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035c2:	4b18      	ldr	r3, [pc, #96]	@ (8003624 <HAL_RCC_OscConfig+0x820>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d0f0      	beq.n	80035b0 <HAL_RCC_OscConfig+0x7ac>
 80035ce:	e024      	b.n	800361a <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80035d0:	69bb      	ldr	r3, [r7, #24]
 80035d2:	2b0c      	cmp	r3, #12
 80035d4:	d01f      	beq.n	8003616 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035d6:	4b13      	ldr	r3, [pc, #76]	@ (8003624 <HAL_RCC_OscConfig+0x820>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a12      	ldr	r2, [pc, #72]	@ (8003624 <HAL_RCC_OscConfig+0x820>)
 80035dc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80035e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035e2:	f7fe fd8f 	bl	8002104 <HAL_GetTick>
 80035e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035e8:	e008      	b.n	80035fc <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035ea:	f7fe fd8b 	bl	8002104 <HAL_GetTick>
 80035ee:	4602      	mov	r2, r0
 80035f0:	693b      	ldr	r3, [r7, #16]
 80035f2:	1ad3      	subs	r3, r2, r3
 80035f4:	2b02      	cmp	r3, #2
 80035f6:	d901      	bls.n	80035fc <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80035f8:	2303      	movs	r3, #3
 80035fa:	e00f      	b.n	800361c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035fc:	4b09      	ldr	r3, [pc, #36]	@ (8003624 <HAL_RCC_OscConfig+0x820>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003604:	2b00      	cmp	r3, #0
 8003606:	d1f0      	bne.n	80035ea <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8003608:	4b06      	ldr	r3, [pc, #24]	@ (8003624 <HAL_RCC_OscConfig+0x820>)
 800360a:	68da      	ldr	r2, [r3, #12]
 800360c:	4905      	ldr	r1, [pc, #20]	@ (8003624 <HAL_RCC_OscConfig+0x820>)
 800360e:	4b06      	ldr	r3, [pc, #24]	@ (8003628 <HAL_RCC_OscConfig+0x824>)
 8003610:	4013      	ands	r3, r2
 8003612:	60cb      	str	r3, [r1, #12]
 8003614:	e001      	b.n	800361a <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003616:	2301      	movs	r3, #1
 8003618:	e000      	b.n	800361c <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 800361a:	2300      	movs	r3, #0
}
 800361c:	4618      	mov	r0, r3
 800361e:	3720      	adds	r7, #32
 8003620:	46bd      	mov	sp, r7
 8003622:	bd80      	pop	{r7, pc}
 8003624:	40021000 	.word	0x40021000
 8003628:	feeefffc 	.word	0xfeeefffc

0800362c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b084      	sub	sp, #16
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
 8003634:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d101      	bne.n	8003640 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800363c:	2301      	movs	r3, #1
 800363e:	e0e7      	b.n	8003810 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003640:	4b75      	ldr	r3, [pc, #468]	@ (8003818 <HAL_RCC_ClockConfig+0x1ec>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f003 0307 	and.w	r3, r3, #7
 8003648:	683a      	ldr	r2, [r7, #0]
 800364a:	429a      	cmp	r2, r3
 800364c:	d910      	bls.n	8003670 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800364e:	4b72      	ldr	r3, [pc, #456]	@ (8003818 <HAL_RCC_ClockConfig+0x1ec>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f023 0207 	bic.w	r2, r3, #7
 8003656:	4970      	ldr	r1, [pc, #448]	@ (8003818 <HAL_RCC_ClockConfig+0x1ec>)
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	4313      	orrs	r3, r2
 800365c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800365e:	4b6e      	ldr	r3, [pc, #440]	@ (8003818 <HAL_RCC_ClockConfig+0x1ec>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f003 0307 	and.w	r3, r3, #7
 8003666:	683a      	ldr	r2, [r7, #0]
 8003668:	429a      	cmp	r2, r3
 800366a:	d001      	beq.n	8003670 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800366c:	2301      	movs	r3, #1
 800366e:	e0cf      	b.n	8003810 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f003 0302 	and.w	r3, r3, #2
 8003678:	2b00      	cmp	r3, #0
 800367a:	d010      	beq.n	800369e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	689a      	ldr	r2, [r3, #8]
 8003680:	4b66      	ldr	r3, [pc, #408]	@ (800381c <HAL_RCC_ClockConfig+0x1f0>)
 8003682:	689b      	ldr	r3, [r3, #8]
 8003684:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003688:	429a      	cmp	r2, r3
 800368a:	d908      	bls.n	800369e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800368c:	4b63      	ldr	r3, [pc, #396]	@ (800381c <HAL_RCC_ClockConfig+0x1f0>)
 800368e:	689b      	ldr	r3, [r3, #8]
 8003690:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	4960      	ldr	r1, [pc, #384]	@ (800381c <HAL_RCC_ClockConfig+0x1f0>)
 800369a:	4313      	orrs	r3, r2
 800369c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f003 0301 	and.w	r3, r3, #1
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d04c      	beq.n	8003744 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	2b03      	cmp	r3, #3
 80036b0:	d107      	bne.n	80036c2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036b2:	4b5a      	ldr	r3, [pc, #360]	@ (800381c <HAL_RCC_ClockConfig+0x1f0>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d121      	bne.n	8003702 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80036be:	2301      	movs	r3, #1
 80036c0:	e0a6      	b.n	8003810 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	2b02      	cmp	r3, #2
 80036c8:	d107      	bne.n	80036da <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80036ca:	4b54      	ldr	r3, [pc, #336]	@ (800381c <HAL_RCC_ClockConfig+0x1f0>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d115      	bne.n	8003702 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80036d6:	2301      	movs	r3, #1
 80036d8:	e09a      	b.n	8003810 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d107      	bne.n	80036f2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80036e2:	4b4e      	ldr	r3, [pc, #312]	@ (800381c <HAL_RCC_ClockConfig+0x1f0>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f003 0302 	and.w	r3, r3, #2
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d109      	bne.n	8003702 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80036ee:	2301      	movs	r3, #1
 80036f0:	e08e      	b.n	8003810 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80036f2:	4b4a      	ldr	r3, [pc, #296]	@ (800381c <HAL_RCC_ClockConfig+0x1f0>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d101      	bne.n	8003702 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80036fe:	2301      	movs	r3, #1
 8003700:	e086      	b.n	8003810 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003702:	4b46      	ldr	r3, [pc, #280]	@ (800381c <HAL_RCC_ClockConfig+0x1f0>)
 8003704:	689b      	ldr	r3, [r3, #8]
 8003706:	f023 0203 	bic.w	r2, r3, #3
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	4943      	ldr	r1, [pc, #268]	@ (800381c <HAL_RCC_ClockConfig+0x1f0>)
 8003710:	4313      	orrs	r3, r2
 8003712:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003714:	f7fe fcf6 	bl	8002104 <HAL_GetTick>
 8003718:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800371a:	e00a      	b.n	8003732 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800371c:	f7fe fcf2 	bl	8002104 <HAL_GetTick>
 8003720:	4602      	mov	r2, r0
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	1ad3      	subs	r3, r2, r3
 8003726:	f241 3288 	movw	r2, #5000	@ 0x1388
 800372a:	4293      	cmp	r3, r2
 800372c:	d901      	bls.n	8003732 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800372e:	2303      	movs	r3, #3
 8003730:	e06e      	b.n	8003810 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003732:	4b3a      	ldr	r3, [pc, #232]	@ (800381c <HAL_RCC_ClockConfig+0x1f0>)
 8003734:	689b      	ldr	r3, [r3, #8]
 8003736:	f003 020c 	and.w	r2, r3, #12
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	009b      	lsls	r3, r3, #2
 8003740:	429a      	cmp	r2, r3
 8003742:	d1eb      	bne.n	800371c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f003 0302 	and.w	r3, r3, #2
 800374c:	2b00      	cmp	r3, #0
 800374e:	d010      	beq.n	8003772 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	689a      	ldr	r2, [r3, #8]
 8003754:	4b31      	ldr	r3, [pc, #196]	@ (800381c <HAL_RCC_ClockConfig+0x1f0>)
 8003756:	689b      	ldr	r3, [r3, #8]
 8003758:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800375c:	429a      	cmp	r2, r3
 800375e:	d208      	bcs.n	8003772 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003760:	4b2e      	ldr	r3, [pc, #184]	@ (800381c <HAL_RCC_ClockConfig+0x1f0>)
 8003762:	689b      	ldr	r3, [r3, #8]
 8003764:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	689b      	ldr	r3, [r3, #8]
 800376c:	492b      	ldr	r1, [pc, #172]	@ (800381c <HAL_RCC_ClockConfig+0x1f0>)
 800376e:	4313      	orrs	r3, r2
 8003770:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003772:	4b29      	ldr	r3, [pc, #164]	@ (8003818 <HAL_RCC_ClockConfig+0x1ec>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f003 0307 	and.w	r3, r3, #7
 800377a:	683a      	ldr	r2, [r7, #0]
 800377c:	429a      	cmp	r2, r3
 800377e:	d210      	bcs.n	80037a2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003780:	4b25      	ldr	r3, [pc, #148]	@ (8003818 <HAL_RCC_ClockConfig+0x1ec>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f023 0207 	bic.w	r2, r3, #7
 8003788:	4923      	ldr	r1, [pc, #140]	@ (8003818 <HAL_RCC_ClockConfig+0x1ec>)
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	4313      	orrs	r3, r2
 800378e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003790:	4b21      	ldr	r3, [pc, #132]	@ (8003818 <HAL_RCC_ClockConfig+0x1ec>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f003 0307 	and.w	r3, r3, #7
 8003798:	683a      	ldr	r2, [r7, #0]
 800379a:	429a      	cmp	r2, r3
 800379c:	d001      	beq.n	80037a2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800379e:	2301      	movs	r3, #1
 80037a0:	e036      	b.n	8003810 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f003 0304 	and.w	r3, r3, #4
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d008      	beq.n	80037c0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80037ae:	4b1b      	ldr	r3, [pc, #108]	@ (800381c <HAL_RCC_ClockConfig+0x1f0>)
 80037b0:	689b      	ldr	r3, [r3, #8]
 80037b2:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	68db      	ldr	r3, [r3, #12]
 80037ba:	4918      	ldr	r1, [pc, #96]	@ (800381c <HAL_RCC_ClockConfig+0x1f0>)
 80037bc:	4313      	orrs	r3, r2
 80037be:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f003 0308 	and.w	r3, r3, #8
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d009      	beq.n	80037e0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80037cc:	4b13      	ldr	r3, [pc, #76]	@ (800381c <HAL_RCC_ClockConfig+0x1f0>)
 80037ce:	689b      	ldr	r3, [r3, #8]
 80037d0:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	691b      	ldr	r3, [r3, #16]
 80037d8:	00db      	lsls	r3, r3, #3
 80037da:	4910      	ldr	r1, [pc, #64]	@ (800381c <HAL_RCC_ClockConfig+0x1f0>)
 80037dc:	4313      	orrs	r3, r2
 80037de:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80037e0:	f000 f824 	bl	800382c <HAL_RCC_GetSysClockFreq>
 80037e4:	4602      	mov	r2, r0
 80037e6:	4b0d      	ldr	r3, [pc, #52]	@ (800381c <HAL_RCC_ClockConfig+0x1f0>)
 80037e8:	689b      	ldr	r3, [r3, #8]
 80037ea:	091b      	lsrs	r3, r3, #4
 80037ec:	f003 030f 	and.w	r3, r3, #15
 80037f0:	490b      	ldr	r1, [pc, #44]	@ (8003820 <HAL_RCC_ClockConfig+0x1f4>)
 80037f2:	5ccb      	ldrb	r3, [r1, r3]
 80037f4:	f003 031f 	and.w	r3, r3, #31
 80037f8:	fa22 f303 	lsr.w	r3, r2, r3
 80037fc:	4a09      	ldr	r2, [pc, #36]	@ (8003824 <HAL_RCC_ClockConfig+0x1f8>)
 80037fe:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003800:	4b09      	ldr	r3, [pc, #36]	@ (8003828 <HAL_RCC_ClockConfig+0x1fc>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4618      	mov	r0, r3
 8003806:	f7fe fa91 	bl	8001d2c <HAL_InitTick>
 800380a:	4603      	mov	r3, r0
 800380c:	72fb      	strb	r3, [r7, #11]

  return status;
 800380e:	7afb      	ldrb	r3, [r7, #11]
}
 8003810:	4618      	mov	r0, r3
 8003812:	3710      	adds	r7, #16
 8003814:	46bd      	mov	sp, r7
 8003816:	bd80      	pop	{r7, pc}
 8003818:	40022000 	.word	0x40022000
 800381c:	40021000 	.word	0x40021000
 8003820:	080188ac 	.word	0x080188ac
 8003824:	20000004 	.word	0x20000004
 8003828:	20000008 	.word	0x20000008

0800382c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800382c:	b480      	push	{r7}
 800382e:	b089      	sub	sp, #36	@ 0x24
 8003830:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003832:	2300      	movs	r3, #0
 8003834:	61fb      	str	r3, [r7, #28]
 8003836:	2300      	movs	r3, #0
 8003838:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800383a:	4b3e      	ldr	r3, [pc, #248]	@ (8003934 <HAL_RCC_GetSysClockFreq+0x108>)
 800383c:	689b      	ldr	r3, [r3, #8]
 800383e:	f003 030c 	and.w	r3, r3, #12
 8003842:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003844:	4b3b      	ldr	r3, [pc, #236]	@ (8003934 <HAL_RCC_GetSysClockFreq+0x108>)
 8003846:	68db      	ldr	r3, [r3, #12]
 8003848:	f003 0303 	and.w	r3, r3, #3
 800384c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800384e:	693b      	ldr	r3, [r7, #16]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d005      	beq.n	8003860 <HAL_RCC_GetSysClockFreq+0x34>
 8003854:	693b      	ldr	r3, [r7, #16]
 8003856:	2b0c      	cmp	r3, #12
 8003858:	d121      	bne.n	800389e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	2b01      	cmp	r3, #1
 800385e:	d11e      	bne.n	800389e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003860:	4b34      	ldr	r3, [pc, #208]	@ (8003934 <HAL_RCC_GetSysClockFreq+0x108>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f003 0308 	and.w	r3, r3, #8
 8003868:	2b00      	cmp	r3, #0
 800386a:	d107      	bne.n	800387c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800386c:	4b31      	ldr	r3, [pc, #196]	@ (8003934 <HAL_RCC_GetSysClockFreq+0x108>)
 800386e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003872:	0a1b      	lsrs	r3, r3, #8
 8003874:	f003 030f 	and.w	r3, r3, #15
 8003878:	61fb      	str	r3, [r7, #28]
 800387a:	e005      	b.n	8003888 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800387c:	4b2d      	ldr	r3, [pc, #180]	@ (8003934 <HAL_RCC_GetSysClockFreq+0x108>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	091b      	lsrs	r3, r3, #4
 8003882:	f003 030f 	and.w	r3, r3, #15
 8003886:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003888:	4a2b      	ldr	r2, [pc, #172]	@ (8003938 <HAL_RCC_GetSysClockFreq+0x10c>)
 800388a:	69fb      	ldr	r3, [r7, #28]
 800388c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003890:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003892:	693b      	ldr	r3, [r7, #16]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d10d      	bne.n	80038b4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003898:	69fb      	ldr	r3, [r7, #28]
 800389a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800389c:	e00a      	b.n	80038b4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800389e:	693b      	ldr	r3, [r7, #16]
 80038a0:	2b04      	cmp	r3, #4
 80038a2:	d102      	bne.n	80038aa <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80038a4:	4b25      	ldr	r3, [pc, #148]	@ (800393c <HAL_RCC_GetSysClockFreq+0x110>)
 80038a6:	61bb      	str	r3, [r7, #24]
 80038a8:	e004      	b.n	80038b4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	2b08      	cmp	r3, #8
 80038ae:	d101      	bne.n	80038b4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80038b0:	4b23      	ldr	r3, [pc, #140]	@ (8003940 <HAL_RCC_GetSysClockFreq+0x114>)
 80038b2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80038b4:	693b      	ldr	r3, [r7, #16]
 80038b6:	2b0c      	cmp	r3, #12
 80038b8:	d134      	bne.n	8003924 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80038ba:	4b1e      	ldr	r3, [pc, #120]	@ (8003934 <HAL_RCC_GetSysClockFreq+0x108>)
 80038bc:	68db      	ldr	r3, [r3, #12]
 80038be:	f003 0303 	and.w	r3, r3, #3
 80038c2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	2b02      	cmp	r3, #2
 80038c8:	d003      	beq.n	80038d2 <HAL_RCC_GetSysClockFreq+0xa6>
 80038ca:	68bb      	ldr	r3, [r7, #8]
 80038cc:	2b03      	cmp	r3, #3
 80038ce:	d003      	beq.n	80038d8 <HAL_RCC_GetSysClockFreq+0xac>
 80038d0:	e005      	b.n	80038de <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80038d2:	4b1a      	ldr	r3, [pc, #104]	@ (800393c <HAL_RCC_GetSysClockFreq+0x110>)
 80038d4:	617b      	str	r3, [r7, #20]
      break;
 80038d6:	e005      	b.n	80038e4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80038d8:	4b19      	ldr	r3, [pc, #100]	@ (8003940 <HAL_RCC_GetSysClockFreq+0x114>)
 80038da:	617b      	str	r3, [r7, #20]
      break;
 80038dc:	e002      	b.n	80038e4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80038de:	69fb      	ldr	r3, [r7, #28]
 80038e0:	617b      	str	r3, [r7, #20]
      break;
 80038e2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80038e4:	4b13      	ldr	r3, [pc, #76]	@ (8003934 <HAL_RCC_GetSysClockFreq+0x108>)
 80038e6:	68db      	ldr	r3, [r3, #12]
 80038e8:	091b      	lsrs	r3, r3, #4
 80038ea:	f003 0307 	and.w	r3, r3, #7
 80038ee:	3301      	adds	r3, #1
 80038f0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80038f2:	4b10      	ldr	r3, [pc, #64]	@ (8003934 <HAL_RCC_GetSysClockFreq+0x108>)
 80038f4:	68db      	ldr	r3, [r3, #12]
 80038f6:	0a1b      	lsrs	r3, r3, #8
 80038f8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80038fc:	697a      	ldr	r2, [r7, #20]
 80038fe:	fb03 f202 	mul.w	r2, r3, r2
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	fbb2 f3f3 	udiv	r3, r2, r3
 8003908:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800390a:	4b0a      	ldr	r3, [pc, #40]	@ (8003934 <HAL_RCC_GetSysClockFreq+0x108>)
 800390c:	68db      	ldr	r3, [r3, #12]
 800390e:	0e5b      	lsrs	r3, r3, #25
 8003910:	f003 0303 	and.w	r3, r3, #3
 8003914:	3301      	adds	r3, #1
 8003916:	005b      	lsls	r3, r3, #1
 8003918:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800391a:	697a      	ldr	r2, [r7, #20]
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003922:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003924:	69bb      	ldr	r3, [r7, #24]
}
 8003926:	4618      	mov	r0, r3
 8003928:	3724      	adds	r7, #36	@ 0x24
 800392a:	46bd      	mov	sp, r7
 800392c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003930:	4770      	bx	lr
 8003932:	bf00      	nop
 8003934:	40021000 	.word	0x40021000
 8003938:	080188c4 	.word	0x080188c4
 800393c:	00f42400 	.word	0x00f42400
 8003940:	007a1200 	.word	0x007a1200

08003944 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003944:	b480      	push	{r7}
 8003946:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003948:	4b03      	ldr	r3, [pc, #12]	@ (8003958 <HAL_RCC_GetHCLKFreq+0x14>)
 800394a:	681b      	ldr	r3, [r3, #0]
}
 800394c:	4618      	mov	r0, r3
 800394e:	46bd      	mov	sp, r7
 8003950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003954:	4770      	bx	lr
 8003956:	bf00      	nop
 8003958:	20000004 	.word	0x20000004

0800395c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003960:	f7ff fff0 	bl	8003944 <HAL_RCC_GetHCLKFreq>
 8003964:	4602      	mov	r2, r0
 8003966:	4b06      	ldr	r3, [pc, #24]	@ (8003980 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003968:	689b      	ldr	r3, [r3, #8]
 800396a:	0a1b      	lsrs	r3, r3, #8
 800396c:	f003 0307 	and.w	r3, r3, #7
 8003970:	4904      	ldr	r1, [pc, #16]	@ (8003984 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003972:	5ccb      	ldrb	r3, [r1, r3]
 8003974:	f003 031f 	and.w	r3, r3, #31
 8003978:	fa22 f303 	lsr.w	r3, r2, r3
}
 800397c:	4618      	mov	r0, r3
 800397e:	bd80      	pop	{r7, pc}
 8003980:	40021000 	.word	0x40021000
 8003984:	080188bc 	.word	0x080188bc

08003988 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800398c:	f7ff ffda 	bl	8003944 <HAL_RCC_GetHCLKFreq>
 8003990:	4602      	mov	r2, r0
 8003992:	4b06      	ldr	r3, [pc, #24]	@ (80039ac <HAL_RCC_GetPCLK2Freq+0x24>)
 8003994:	689b      	ldr	r3, [r3, #8]
 8003996:	0adb      	lsrs	r3, r3, #11
 8003998:	f003 0307 	and.w	r3, r3, #7
 800399c:	4904      	ldr	r1, [pc, #16]	@ (80039b0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800399e:	5ccb      	ldrb	r3, [r1, r3]
 80039a0:	f003 031f 	and.w	r3, r3, #31
 80039a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039a8:	4618      	mov	r0, r3
 80039aa:	bd80      	pop	{r7, pc}
 80039ac:	40021000 	.word	0x40021000
 80039b0:	080188bc 	.word	0x080188bc

080039b4 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80039b4:	b480      	push	{r7}
 80039b6:	b083      	sub	sp, #12
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
 80039bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	220f      	movs	r2, #15
 80039c2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80039c4:	4b12      	ldr	r3, [pc, #72]	@ (8003a10 <HAL_RCC_GetClockConfig+0x5c>)
 80039c6:	689b      	ldr	r3, [r3, #8]
 80039c8:	f003 0203 	and.w	r2, r3, #3
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80039d0:	4b0f      	ldr	r3, [pc, #60]	@ (8003a10 <HAL_RCC_GetClockConfig+0x5c>)
 80039d2:	689b      	ldr	r3, [r3, #8]
 80039d4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80039dc:	4b0c      	ldr	r3, [pc, #48]	@ (8003a10 <HAL_RCC_GetClockConfig+0x5c>)
 80039de:	689b      	ldr	r3, [r3, #8]
 80039e0:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80039e8:	4b09      	ldr	r3, [pc, #36]	@ (8003a10 <HAL_RCC_GetClockConfig+0x5c>)
 80039ea:	689b      	ldr	r3, [r3, #8]
 80039ec:	08db      	lsrs	r3, r3, #3
 80039ee:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80039f6:	4b07      	ldr	r3, [pc, #28]	@ (8003a14 <HAL_RCC_GetClockConfig+0x60>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f003 0207 	and.w	r2, r3, #7
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	601a      	str	r2, [r3, #0]
}
 8003a02:	bf00      	nop
 8003a04:	370c      	adds	r7, #12
 8003a06:	46bd      	mov	sp, r7
 8003a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0c:	4770      	bx	lr
 8003a0e:	bf00      	nop
 8003a10:	40021000 	.word	0x40021000
 8003a14:	40022000 	.word	0x40022000

08003a18 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b086      	sub	sp, #24
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003a20:	2300      	movs	r3, #0
 8003a22:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003a24:	4b2a      	ldr	r3, [pc, #168]	@ (8003ad0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a28:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d003      	beq.n	8003a38 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003a30:	f7ff f984 	bl	8002d3c <HAL_PWREx_GetVoltageRange>
 8003a34:	6178      	str	r0, [r7, #20]
 8003a36:	e014      	b.n	8003a62 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003a38:	4b25      	ldr	r3, [pc, #148]	@ (8003ad0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a3c:	4a24      	ldr	r2, [pc, #144]	@ (8003ad0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a3e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a42:	6593      	str	r3, [r2, #88]	@ 0x58
 8003a44:	4b22      	ldr	r3, [pc, #136]	@ (8003ad0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a48:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a4c:	60fb      	str	r3, [r7, #12]
 8003a4e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003a50:	f7ff f974 	bl	8002d3c <HAL_PWREx_GetVoltageRange>
 8003a54:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003a56:	4b1e      	ldr	r3, [pc, #120]	@ (8003ad0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a5a:	4a1d      	ldr	r2, [pc, #116]	@ (8003ad0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a5c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003a60:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003a62:	697b      	ldr	r3, [r7, #20]
 8003a64:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003a68:	d10b      	bne.n	8003a82 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2b80      	cmp	r3, #128	@ 0x80
 8003a6e:	d919      	bls.n	8003aa4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2ba0      	cmp	r3, #160	@ 0xa0
 8003a74:	d902      	bls.n	8003a7c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003a76:	2302      	movs	r3, #2
 8003a78:	613b      	str	r3, [r7, #16]
 8003a7a:	e013      	b.n	8003aa4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	613b      	str	r3, [r7, #16]
 8003a80:	e010      	b.n	8003aa4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2b80      	cmp	r3, #128	@ 0x80
 8003a86:	d902      	bls.n	8003a8e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003a88:	2303      	movs	r3, #3
 8003a8a:	613b      	str	r3, [r7, #16]
 8003a8c:	e00a      	b.n	8003aa4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2b80      	cmp	r3, #128	@ 0x80
 8003a92:	d102      	bne.n	8003a9a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003a94:	2302      	movs	r3, #2
 8003a96:	613b      	str	r3, [r7, #16]
 8003a98:	e004      	b.n	8003aa4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2b70      	cmp	r3, #112	@ 0x70
 8003a9e:	d101      	bne.n	8003aa4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003aa4:	4b0b      	ldr	r3, [pc, #44]	@ (8003ad4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f023 0207 	bic.w	r2, r3, #7
 8003aac:	4909      	ldr	r1, [pc, #36]	@ (8003ad4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003aae:	693b      	ldr	r3, [r7, #16]
 8003ab0:	4313      	orrs	r3, r2
 8003ab2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003ab4:	4b07      	ldr	r3, [pc, #28]	@ (8003ad4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f003 0307 	and.w	r3, r3, #7
 8003abc:	693a      	ldr	r2, [r7, #16]
 8003abe:	429a      	cmp	r2, r3
 8003ac0:	d001      	beq.n	8003ac6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	e000      	b.n	8003ac8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003ac6:	2300      	movs	r3, #0
}
 8003ac8:	4618      	mov	r0, r3
 8003aca:	3718      	adds	r7, #24
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bd80      	pop	{r7, pc}
 8003ad0:	40021000 	.word	0x40021000
 8003ad4:	40022000 	.word	0x40022000

08003ad8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b086      	sub	sp, #24
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d031      	beq.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003af8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003afc:	d01a      	beq.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8003afe:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003b02:	d814      	bhi.n	8003b2e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d009      	beq.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003b08:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003b0c:	d10f      	bne.n	8003b2e <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8003b0e:	4b5d      	ldr	r3, [pc, #372]	@ (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003b10:	68db      	ldr	r3, [r3, #12]
 8003b12:	4a5c      	ldr	r2, [pc, #368]	@ (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003b14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b18:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003b1a:	e00c      	b.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	3304      	adds	r3, #4
 8003b20:	2100      	movs	r1, #0
 8003b22:	4618      	mov	r0, r3
 8003b24:	f000 f9de 	bl	8003ee4 <RCCEx_PLLSAI1_Config>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003b2c:	e003      	b.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003b2e:	2301      	movs	r3, #1
 8003b30:	74fb      	strb	r3, [r7, #19]
      break;
 8003b32:	e000      	b.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8003b34:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b36:	7cfb      	ldrb	r3, [r7, #19]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d10b      	bne.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003b3c:	4b51      	ldr	r3, [pc, #324]	@ (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003b3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b42:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b4a:	494e      	ldr	r1, [pc, #312]	@ (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003b52:	e001      	b.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b54:	7cfb      	ldrb	r3, [r7, #19]
 8003b56:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	f000 809e 	beq.w	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b66:	2300      	movs	r3, #0
 8003b68:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003b6a:	4b46      	ldr	r3, [pc, #280]	@ (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003b6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d101      	bne.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8003b76:	2301      	movs	r3, #1
 8003b78:	e000      	b.n	8003b7c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d00d      	beq.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b80:	4b40      	ldr	r3, [pc, #256]	@ (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003b82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b84:	4a3f      	ldr	r2, [pc, #252]	@ (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003b86:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b8a:	6593      	str	r3, [r2, #88]	@ 0x58
 8003b8c:	4b3d      	ldr	r3, [pc, #244]	@ (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003b8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b90:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b94:	60bb      	str	r3, [r7, #8]
 8003b96:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b98:	2301      	movs	r3, #1
 8003b9a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003b9c:	4b3a      	ldr	r3, [pc, #232]	@ (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4a39      	ldr	r2, [pc, #228]	@ (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003ba2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ba6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003ba8:	f7fe faac 	bl	8002104 <HAL_GetTick>
 8003bac:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003bae:	e009      	b.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bb0:	f7fe faa8 	bl	8002104 <HAL_GetTick>
 8003bb4:	4602      	mov	r2, r0
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	1ad3      	subs	r3, r2, r3
 8003bba:	2b02      	cmp	r3, #2
 8003bbc:	d902      	bls.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8003bbe:	2303      	movs	r3, #3
 8003bc0:	74fb      	strb	r3, [r7, #19]
        break;
 8003bc2:	e005      	b.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003bc4:	4b30      	ldr	r3, [pc, #192]	@ (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d0ef      	beq.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8003bd0:	7cfb      	ldrb	r3, [r7, #19]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d15a      	bne.n	8003c8c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003bd6:	4b2b      	ldr	r3, [pc, #172]	@ (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003bd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bdc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003be0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003be2:	697b      	ldr	r3, [r7, #20]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d01e      	beq.n	8003c26 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003bec:	697a      	ldr	r2, [r7, #20]
 8003bee:	429a      	cmp	r2, r3
 8003bf0:	d019      	beq.n	8003c26 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003bf2:	4b24      	ldr	r3, [pc, #144]	@ (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003bf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bf8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003bfc:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003bfe:	4b21      	ldr	r3, [pc, #132]	@ (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003c00:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c04:	4a1f      	ldr	r2, [pc, #124]	@ (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003c06:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c0a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003c0e:	4b1d      	ldr	r3, [pc, #116]	@ (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003c10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c14:	4a1b      	ldr	r2, [pc, #108]	@ (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003c16:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c1a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003c1e:	4a19      	ldr	r2, [pc, #100]	@ (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003c20:	697b      	ldr	r3, [r7, #20]
 8003c22:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003c26:	697b      	ldr	r3, [r7, #20]
 8003c28:	f003 0301 	and.w	r3, r3, #1
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d016      	beq.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c30:	f7fe fa68 	bl	8002104 <HAL_GetTick>
 8003c34:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c36:	e00b      	b.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c38:	f7fe fa64 	bl	8002104 <HAL_GetTick>
 8003c3c:	4602      	mov	r2, r0
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	1ad3      	subs	r3, r2, r3
 8003c42:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d902      	bls.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8003c4a:	2303      	movs	r3, #3
 8003c4c:	74fb      	strb	r3, [r7, #19]
            break;
 8003c4e:	e006      	b.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c50:	4b0c      	ldr	r3, [pc, #48]	@ (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003c52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c56:	f003 0302 	and.w	r3, r3, #2
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d0ec      	beq.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8003c5e:	7cfb      	ldrb	r3, [r7, #19]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d10b      	bne.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c64:	4b07      	ldr	r3, [pc, #28]	@ (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003c66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c6a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c72:	4904      	ldr	r1, [pc, #16]	@ (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003c74:	4313      	orrs	r3, r2
 8003c76:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003c7a:	e009      	b.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003c7c:	7cfb      	ldrb	r3, [r7, #19]
 8003c7e:	74bb      	strb	r3, [r7, #18]
 8003c80:	e006      	b.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8003c82:	bf00      	nop
 8003c84:	40021000 	.word	0x40021000
 8003c88:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c8c:	7cfb      	ldrb	r3, [r7, #19]
 8003c8e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c90:	7c7b      	ldrb	r3, [r7, #17]
 8003c92:	2b01      	cmp	r3, #1
 8003c94:	d105      	bne.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c96:	4b8a      	ldr	r3, [pc, #552]	@ (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003c98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c9a:	4a89      	ldr	r2, [pc, #548]	@ (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003c9c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003ca0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f003 0301 	and.w	r3, r3, #1
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d00a      	beq.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003cae:	4b84      	ldr	r3, [pc, #528]	@ (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003cb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cb4:	f023 0203 	bic.w	r2, r3, #3
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6a1b      	ldr	r3, [r3, #32]
 8003cbc:	4980      	ldr	r1, [pc, #512]	@ (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f003 0302 	and.w	r3, r3, #2
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d00a      	beq.n	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003cd0:	4b7b      	ldr	r3, [pc, #492]	@ (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003cd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cd6:	f023 020c 	bic.w	r2, r3, #12
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cde:	4978      	ldr	r1, [pc, #480]	@ (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f003 0320 	and.w	r3, r3, #32
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d00a      	beq.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003cf2:	4b73      	ldr	r3, [pc, #460]	@ (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003cf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cf8:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d00:	496f      	ldr	r1, [pc, #444]	@ (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003d02:	4313      	orrs	r3, r2
 8003d04:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d00a      	beq.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003d14:	4b6a      	ldr	r3, [pc, #424]	@ (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003d16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d1a:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d22:	4967      	ldr	r1, [pc, #412]	@ (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003d24:	4313      	orrs	r3, r2
 8003d26:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d00a      	beq.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003d36:	4b62      	ldr	r3, [pc, #392]	@ (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003d38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d3c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d44:	495e      	ldr	r1, [pc, #376]	@ (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003d46:	4313      	orrs	r3, r2
 8003d48:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d00a      	beq.n	8003d6e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003d58:	4b59      	ldr	r3, [pc, #356]	@ (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003d5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d5e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d66:	4956      	ldr	r1, [pc, #344]	@ (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d00a      	beq.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003d7a:	4b51      	ldr	r3, [pc, #324]	@ (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003d7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d80:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d88:	494d      	ldr	r1, [pc, #308]	@ (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d028      	beq.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003d9c:	4b48      	ldr	r3, [pc, #288]	@ (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003d9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003da2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003daa:	4945      	ldr	r1, [pc, #276]	@ (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003dac:	4313      	orrs	r3, r2
 8003dae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003db6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003dba:	d106      	bne.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003dbc:	4b40      	ldr	r3, [pc, #256]	@ (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003dbe:	68db      	ldr	r3, [r3, #12]
 8003dc0:	4a3f      	ldr	r2, [pc, #252]	@ (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003dc2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003dc6:	60d3      	str	r3, [r2, #12]
 8003dc8:	e011      	b.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dce:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003dd2:	d10c      	bne.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	3304      	adds	r3, #4
 8003dd8:	2101      	movs	r1, #1
 8003dda:	4618      	mov	r0, r3
 8003ddc:	f000 f882 	bl	8003ee4 <RCCEx_PLLSAI1_Config>
 8003de0:	4603      	mov	r3, r0
 8003de2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003de4:	7cfb      	ldrb	r3, [r7, #19]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d001      	beq.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8003dea:	7cfb      	ldrb	r3, [r7, #19]
 8003dec:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d028      	beq.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003dfa:	4b31      	ldr	r3, [pc, #196]	@ (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003dfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e00:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e08:	492d      	ldr	r1, [pc, #180]	@ (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e14:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003e18:	d106      	bne.n	8003e28 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e1a:	4b29      	ldr	r3, [pc, #164]	@ (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003e1c:	68db      	ldr	r3, [r3, #12]
 8003e1e:	4a28      	ldr	r2, [pc, #160]	@ (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003e20:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003e24:	60d3      	str	r3, [r2, #12]
 8003e26:	e011      	b.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e2c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003e30:	d10c      	bne.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	3304      	adds	r3, #4
 8003e36:	2101      	movs	r1, #1
 8003e38:	4618      	mov	r0, r3
 8003e3a:	f000 f853 	bl	8003ee4 <RCCEx_PLLSAI1_Config>
 8003e3e:	4603      	mov	r3, r0
 8003e40:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003e42:	7cfb      	ldrb	r3, [r7, #19]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d001      	beq.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8003e48:	7cfb      	ldrb	r3, [r7, #19]
 8003e4a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d01c      	beq.n	8003e92 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003e58:	4b19      	ldr	r3, [pc, #100]	@ (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003e5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e5e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e66:	4916      	ldr	r1, [pc, #88]	@ (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003e68:	4313      	orrs	r3, r2
 8003e6a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e72:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003e76:	d10c      	bne.n	8003e92 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	3304      	adds	r3, #4
 8003e7c:	2102      	movs	r1, #2
 8003e7e:	4618      	mov	r0, r3
 8003e80:	f000 f830 	bl	8003ee4 <RCCEx_PLLSAI1_Config>
 8003e84:	4603      	mov	r3, r0
 8003e86:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003e88:	7cfb      	ldrb	r3, [r7, #19]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d001      	beq.n	8003e92 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8003e8e:	7cfb      	ldrb	r3, [r7, #19]
 8003e90:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d00a      	beq.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003e9e:	4b08      	ldr	r3, [pc, #32]	@ (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003ea0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ea4:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003eac:	4904      	ldr	r1, [pc, #16]	@ (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003eb4:	7cbb      	ldrb	r3, [r7, #18]
}
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	3718      	adds	r7, #24
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bd80      	pop	{r7, pc}
 8003ebe:	bf00      	nop
 8003ec0:	40021000 	.word	0x40021000

08003ec4 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8003ec8:	4b05      	ldr	r3, [pc, #20]	@ (8003ee0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a04      	ldr	r2, [pc, #16]	@ (8003ee0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003ece:	f043 0304 	orr.w	r3, r3, #4
 8003ed2:	6013      	str	r3, [r2, #0]
}
 8003ed4:	bf00      	nop
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003edc:	4770      	bx	lr
 8003ede:	bf00      	nop
 8003ee0:	40021000 	.word	0x40021000

08003ee4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b084      	sub	sp, #16
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
 8003eec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003eee:	2300      	movs	r3, #0
 8003ef0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003ef2:	4b74      	ldr	r3, [pc, #464]	@ (80040c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ef4:	68db      	ldr	r3, [r3, #12]
 8003ef6:	f003 0303 	and.w	r3, r3, #3
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d018      	beq.n	8003f30 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003efe:	4b71      	ldr	r3, [pc, #452]	@ (80040c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f00:	68db      	ldr	r3, [r3, #12]
 8003f02:	f003 0203 	and.w	r2, r3, #3
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	429a      	cmp	r2, r3
 8003f0c:	d10d      	bne.n	8003f2a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
       ||
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d009      	beq.n	8003f2a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003f16:	4b6b      	ldr	r3, [pc, #428]	@ (80040c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f18:	68db      	ldr	r3, [r3, #12]
 8003f1a:	091b      	lsrs	r3, r3, #4
 8003f1c:	f003 0307 	and.w	r3, r3, #7
 8003f20:	1c5a      	adds	r2, r3, #1
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	685b      	ldr	r3, [r3, #4]
       ||
 8003f26:	429a      	cmp	r2, r3
 8003f28:	d047      	beq.n	8003fba <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	73fb      	strb	r3, [r7, #15]
 8003f2e:	e044      	b.n	8003fba <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	2b03      	cmp	r3, #3
 8003f36:	d018      	beq.n	8003f6a <RCCEx_PLLSAI1_Config+0x86>
 8003f38:	2b03      	cmp	r3, #3
 8003f3a:	d825      	bhi.n	8003f88 <RCCEx_PLLSAI1_Config+0xa4>
 8003f3c:	2b01      	cmp	r3, #1
 8003f3e:	d002      	beq.n	8003f46 <RCCEx_PLLSAI1_Config+0x62>
 8003f40:	2b02      	cmp	r3, #2
 8003f42:	d009      	beq.n	8003f58 <RCCEx_PLLSAI1_Config+0x74>
 8003f44:	e020      	b.n	8003f88 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003f46:	4b5f      	ldr	r3, [pc, #380]	@ (80040c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f003 0302 	and.w	r3, r3, #2
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d11d      	bne.n	8003f8e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003f52:	2301      	movs	r3, #1
 8003f54:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f56:	e01a      	b.n	8003f8e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003f58:	4b5a      	ldr	r3, [pc, #360]	@ (80040c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d116      	bne.n	8003f92 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003f64:	2301      	movs	r3, #1
 8003f66:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f68:	e013      	b.n	8003f92 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003f6a:	4b56      	ldr	r3, [pc, #344]	@ (80040c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d10f      	bne.n	8003f96 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003f76:	4b53      	ldr	r3, [pc, #332]	@ (80040c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d109      	bne.n	8003f96 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003f82:	2301      	movs	r3, #1
 8003f84:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003f86:	e006      	b.n	8003f96 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003f88:	2301      	movs	r3, #1
 8003f8a:	73fb      	strb	r3, [r7, #15]
      break;
 8003f8c:	e004      	b.n	8003f98 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003f8e:	bf00      	nop
 8003f90:	e002      	b.n	8003f98 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003f92:	bf00      	nop
 8003f94:	e000      	b.n	8003f98 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003f96:	bf00      	nop
    }

    if(status == HAL_OK)
 8003f98:	7bfb      	ldrb	r3, [r7, #15]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d10d      	bne.n	8003fba <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003f9e:	4b49      	ldr	r3, [pc, #292]	@ (80040c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003fa0:	68db      	ldr	r3, [r3, #12]
 8003fa2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6819      	ldr	r1, [r3, #0]
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	3b01      	subs	r3, #1
 8003fb0:	011b      	lsls	r3, r3, #4
 8003fb2:	430b      	orrs	r3, r1
 8003fb4:	4943      	ldr	r1, [pc, #268]	@ (80040c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003fba:	7bfb      	ldrb	r3, [r7, #15]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d17c      	bne.n	80040ba <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003fc0:	4b40      	ldr	r3, [pc, #256]	@ (80040c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a3f      	ldr	r2, [pc, #252]	@ (80040c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003fc6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003fca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003fcc:	f7fe f89a 	bl	8002104 <HAL_GetTick>
 8003fd0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003fd2:	e009      	b.n	8003fe8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003fd4:	f7fe f896 	bl	8002104 <HAL_GetTick>
 8003fd8:	4602      	mov	r2, r0
 8003fda:	68bb      	ldr	r3, [r7, #8]
 8003fdc:	1ad3      	subs	r3, r2, r3
 8003fde:	2b02      	cmp	r3, #2
 8003fe0:	d902      	bls.n	8003fe8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003fe2:	2303      	movs	r3, #3
 8003fe4:	73fb      	strb	r3, [r7, #15]
        break;
 8003fe6:	e005      	b.n	8003ff4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003fe8:	4b36      	ldr	r3, [pc, #216]	@ (80040c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d1ef      	bne.n	8003fd4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003ff4:	7bfb      	ldrb	r3, [r7, #15]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d15f      	bne.n	80040ba <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d110      	bne.n	8004022 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004000:	4b30      	ldr	r3, [pc, #192]	@ (80040c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004002:	691b      	ldr	r3, [r3, #16]
 8004004:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8004008:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800400c:	687a      	ldr	r2, [r7, #4]
 800400e:	6892      	ldr	r2, [r2, #8]
 8004010:	0211      	lsls	r1, r2, #8
 8004012:	687a      	ldr	r2, [r7, #4]
 8004014:	68d2      	ldr	r2, [r2, #12]
 8004016:	06d2      	lsls	r2, r2, #27
 8004018:	430a      	orrs	r2, r1
 800401a:	492a      	ldr	r1, [pc, #168]	@ (80040c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800401c:	4313      	orrs	r3, r2
 800401e:	610b      	str	r3, [r1, #16]
 8004020:	e027      	b.n	8004072 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	2b01      	cmp	r3, #1
 8004026:	d112      	bne.n	800404e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004028:	4b26      	ldr	r3, [pc, #152]	@ (80040c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800402a:	691b      	ldr	r3, [r3, #16]
 800402c:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8004030:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004034:	687a      	ldr	r2, [r7, #4]
 8004036:	6892      	ldr	r2, [r2, #8]
 8004038:	0211      	lsls	r1, r2, #8
 800403a:	687a      	ldr	r2, [r7, #4]
 800403c:	6912      	ldr	r2, [r2, #16]
 800403e:	0852      	lsrs	r2, r2, #1
 8004040:	3a01      	subs	r2, #1
 8004042:	0552      	lsls	r2, r2, #21
 8004044:	430a      	orrs	r2, r1
 8004046:	491f      	ldr	r1, [pc, #124]	@ (80040c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004048:	4313      	orrs	r3, r2
 800404a:	610b      	str	r3, [r1, #16]
 800404c:	e011      	b.n	8004072 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800404e:	4b1d      	ldr	r3, [pc, #116]	@ (80040c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004050:	691b      	ldr	r3, [r3, #16]
 8004052:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004056:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800405a:	687a      	ldr	r2, [r7, #4]
 800405c:	6892      	ldr	r2, [r2, #8]
 800405e:	0211      	lsls	r1, r2, #8
 8004060:	687a      	ldr	r2, [r7, #4]
 8004062:	6952      	ldr	r2, [r2, #20]
 8004064:	0852      	lsrs	r2, r2, #1
 8004066:	3a01      	subs	r2, #1
 8004068:	0652      	lsls	r2, r2, #25
 800406a:	430a      	orrs	r2, r1
 800406c:	4915      	ldr	r1, [pc, #84]	@ (80040c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800406e:	4313      	orrs	r3, r2
 8004070:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004072:	4b14      	ldr	r3, [pc, #80]	@ (80040c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4a13      	ldr	r2, [pc, #76]	@ (80040c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004078:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800407c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800407e:	f7fe f841 	bl	8002104 <HAL_GetTick>
 8004082:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004084:	e009      	b.n	800409a <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004086:	f7fe f83d 	bl	8002104 <HAL_GetTick>
 800408a:	4602      	mov	r2, r0
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	1ad3      	subs	r3, r2, r3
 8004090:	2b02      	cmp	r3, #2
 8004092:	d902      	bls.n	800409a <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8004094:	2303      	movs	r3, #3
 8004096:	73fb      	strb	r3, [r7, #15]
          break;
 8004098:	e005      	b.n	80040a6 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800409a:	4b0a      	ldr	r3, [pc, #40]	@ (80040c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d0ef      	beq.n	8004086 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80040a6:	7bfb      	ldrb	r3, [r7, #15]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d106      	bne.n	80040ba <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80040ac:	4b05      	ldr	r3, [pc, #20]	@ (80040c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80040ae:	691a      	ldr	r2, [r3, #16]
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	699b      	ldr	r3, [r3, #24]
 80040b4:	4903      	ldr	r1, [pc, #12]	@ (80040c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80040b6:	4313      	orrs	r3, r2
 80040b8:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80040ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80040bc:	4618      	mov	r0, r3
 80040be:	3710      	adds	r7, #16
 80040c0:	46bd      	mov	sp, r7
 80040c2:	bd80      	pop	{r7, pc}
 80040c4:	40021000 	.word	0x40021000

080040c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b082      	sub	sp, #8
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d101      	bne.n	80040da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80040d6:	2301      	movs	r3, #1
 80040d8:	e049      	b.n	800416e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80040e0:	b2db      	uxtb	r3, r3
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d106      	bne.n	80040f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2200      	movs	r2, #0
 80040ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80040ee:	6878      	ldr	r0, [r7, #4]
 80040f0:	f7fd fcf8 	bl	8001ae4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2202      	movs	r2, #2
 80040f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681a      	ldr	r2, [r3, #0]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	3304      	adds	r3, #4
 8004104:	4619      	mov	r1, r3
 8004106:	4610      	mov	r0, r2
 8004108:	f000 fc9a 	bl	8004a40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2201      	movs	r2, #1
 8004110:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2201      	movs	r2, #1
 8004118:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2201      	movs	r2, #1
 8004120:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2201      	movs	r2, #1
 8004128:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2201      	movs	r2, #1
 8004130:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2201      	movs	r2, #1
 8004138:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2201      	movs	r2, #1
 8004140:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2201      	movs	r2, #1
 8004148:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2201      	movs	r2, #1
 8004150:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2201      	movs	r2, #1
 8004158:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2201      	movs	r2, #1
 8004160:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2201      	movs	r2, #1
 8004168:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800416c:	2300      	movs	r3, #0
}
 800416e:	4618      	mov	r0, r3
 8004170:	3708      	adds	r7, #8
 8004172:	46bd      	mov	sp, r7
 8004174:	bd80      	pop	{r7, pc}
	...

08004178 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004178:	b480      	push	{r7}
 800417a:	b085      	sub	sp, #20
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004186:	b2db      	uxtb	r3, r3
 8004188:	2b01      	cmp	r3, #1
 800418a:	d001      	beq.n	8004190 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800418c:	2301      	movs	r3, #1
 800418e:	e03b      	b.n	8004208 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2202      	movs	r2, #2
 8004194:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	68da      	ldr	r2, [r3, #12]
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f042 0201 	orr.w	r2, r2, #1
 80041a6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4a19      	ldr	r2, [pc, #100]	@ (8004214 <HAL_TIM_Base_Start_IT+0x9c>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d009      	beq.n	80041c6 <HAL_TIM_Base_Start_IT+0x4e>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80041ba:	d004      	beq.n	80041c6 <HAL_TIM_Base_Start_IT+0x4e>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4a15      	ldr	r2, [pc, #84]	@ (8004218 <HAL_TIM_Base_Start_IT+0xa0>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d115      	bne.n	80041f2 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	689a      	ldr	r2, [r3, #8]
 80041cc:	4b13      	ldr	r3, [pc, #76]	@ (800421c <HAL_TIM_Base_Start_IT+0xa4>)
 80041ce:	4013      	ands	r3, r2
 80041d0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	2b06      	cmp	r3, #6
 80041d6:	d015      	beq.n	8004204 <HAL_TIM_Base_Start_IT+0x8c>
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80041de:	d011      	beq.n	8004204 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	681a      	ldr	r2, [r3, #0]
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f042 0201 	orr.w	r2, r2, #1
 80041ee:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041f0:	e008      	b.n	8004204 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	681a      	ldr	r2, [r3, #0]
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f042 0201 	orr.w	r2, r2, #1
 8004200:	601a      	str	r2, [r3, #0]
 8004202:	e000      	b.n	8004206 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004204:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004206:	2300      	movs	r3, #0
}
 8004208:	4618      	mov	r0, r3
 800420a:	3714      	adds	r7, #20
 800420c:	46bd      	mov	sp, r7
 800420e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004212:	4770      	bx	lr
 8004214:	40012c00 	.word	0x40012c00
 8004218:	40014000 	.word	0x40014000
 800421c:	00010007 	.word	0x00010007

08004220 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b082      	sub	sp, #8
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d101      	bne.n	8004232 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800422e:	2301      	movs	r3, #1
 8004230:	e049      	b.n	80042c6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004238:	b2db      	uxtb	r3, r3
 800423a:	2b00      	cmp	r3, #0
 800423c:	d106      	bne.n	800424c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2200      	movs	r2, #0
 8004242:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004246:	6878      	ldr	r0, [r7, #4]
 8004248:	f000 f841 	bl	80042ce <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2202      	movs	r2, #2
 8004250:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681a      	ldr	r2, [r3, #0]
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	3304      	adds	r3, #4
 800425c:	4619      	mov	r1, r3
 800425e:	4610      	mov	r0, r2
 8004260:	f000 fbee 	bl	8004a40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2201      	movs	r2, #1
 8004268:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2201      	movs	r2, #1
 8004270:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2201      	movs	r2, #1
 8004278:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2201      	movs	r2, #1
 8004280:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2201      	movs	r2, #1
 8004288:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2201      	movs	r2, #1
 8004290:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2201      	movs	r2, #1
 8004298:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2201      	movs	r2, #1
 80042a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2201      	movs	r2, #1
 80042a8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2201      	movs	r2, #1
 80042b0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2201      	movs	r2, #1
 80042b8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2201      	movs	r2, #1
 80042c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80042c4:	2300      	movs	r3, #0
}
 80042c6:	4618      	mov	r0, r3
 80042c8:	3708      	adds	r7, #8
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bd80      	pop	{r7, pc}

080042ce <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80042ce:	b480      	push	{r7}
 80042d0:	b083      	sub	sp, #12
 80042d2:	af00      	add	r7, sp, #0
 80042d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80042d6:	bf00      	nop
 80042d8:	370c      	adds	r7, #12
 80042da:	46bd      	mov	sp, r7
 80042dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e0:	4770      	bx	lr

080042e2 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80042e2:	b580      	push	{r7, lr}
 80042e4:	b086      	sub	sp, #24
 80042e6:	af00      	add	r7, sp, #0
 80042e8:	6078      	str	r0, [r7, #4]
 80042ea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d101      	bne.n	80042f6 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80042f2:	2301      	movs	r3, #1
 80042f4:	e097      	b.n	8004426 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80042fc:	b2db      	uxtb	r3, r3
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d106      	bne.n	8004310 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2200      	movs	r2, #0
 8004306:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800430a:	6878      	ldr	r0, [r7, #4]
 800430c:	f7fd fb5a 	bl	80019c4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2202      	movs	r2, #2
 8004314:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	689b      	ldr	r3, [r3, #8]
 800431e:	687a      	ldr	r2, [r7, #4]
 8004320:	6812      	ldr	r2, [r2, #0]
 8004322:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8004326:	f023 0307 	bic.w	r3, r3, #7
 800432a:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681a      	ldr	r2, [r3, #0]
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	3304      	adds	r3, #4
 8004334:	4619      	mov	r1, r3
 8004336:	4610      	mov	r0, r2
 8004338:	f000 fb82 	bl	8004a40 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	689b      	ldr	r3, [r3, #8]
 8004342:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	699b      	ldr	r3, [r3, #24]
 800434a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	6a1b      	ldr	r3, [r3, #32]
 8004352:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	697a      	ldr	r2, [r7, #20]
 800435a:	4313      	orrs	r3, r2
 800435c:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800435e:	693b      	ldr	r3, [r7, #16]
 8004360:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004364:	f023 0303 	bic.w	r3, r3, #3
 8004368:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	689a      	ldr	r2, [r3, #8]
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	699b      	ldr	r3, [r3, #24]
 8004372:	021b      	lsls	r3, r3, #8
 8004374:	4313      	orrs	r3, r2
 8004376:	693a      	ldr	r2, [r7, #16]
 8004378:	4313      	orrs	r3, r2
 800437a:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800437c:	693b      	ldr	r3, [r7, #16]
 800437e:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8004382:	f023 030c 	bic.w	r3, r3, #12
 8004386:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004388:	693b      	ldr	r3, [r7, #16]
 800438a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800438e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004392:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	68da      	ldr	r2, [r3, #12]
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	69db      	ldr	r3, [r3, #28]
 800439c:	021b      	lsls	r3, r3, #8
 800439e:	4313      	orrs	r3, r2
 80043a0:	693a      	ldr	r2, [r7, #16]
 80043a2:	4313      	orrs	r3, r2
 80043a4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	691b      	ldr	r3, [r3, #16]
 80043aa:	011a      	lsls	r2, r3, #4
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	6a1b      	ldr	r3, [r3, #32]
 80043b0:	031b      	lsls	r3, r3, #12
 80043b2:	4313      	orrs	r3, r2
 80043b4:	693a      	ldr	r2, [r7, #16]
 80043b6:	4313      	orrs	r3, r2
 80043b8:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80043c0:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 80043c8:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	685a      	ldr	r2, [r3, #4]
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	695b      	ldr	r3, [r3, #20]
 80043d2:	011b      	lsls	r3, r3, #4
 80043d4:	4313      	orrs	r3, r2
 80043d6:	68fa      	ldr	r2, [r7, #12]
 80043d8:	4313      	orrs	r3, r2
 80043da:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	697a      	ldr	r2, [r7, #20]
 80043e2:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	693a      	ldr	r2, [r7, #16]
 80043ea:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	68fa      	ldr	r2, [r7, #12]
 80043f2:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2201      	movs	r2, #1
 80043f8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2201      	movs	r2, #1
 8004400:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2201      	movs	r2, #1
 8004408:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2201      	movs	r2, #1
 8004410:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2201      	movs	r2, #1
 8004418:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2201      	movs	r2, #1
 8004420:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004424:	2300      	movs	r3, #0
}
 8004426:	4618      	mov	r0, r3
 8004428:	3718      	adds	r7, #24
 800442a:	46bd      	mov	sp, r7
 800442c:	bd80      	pop	{r7, pc}

0800442e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800442e:	b580      	push	{r7, lr}
 8004430:	b084      	sub	sp, #16
 8004432:	af00      	add	r7, sp, #0
 8004434:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	68db      	ldr	r3, [r3, #12]
 800443c:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	691b      	ldr	r3, [r3, #16]
 8004444:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004446:	68bb      	ldr	r3, [r7, #8]
 8004448:	f003 0302 	and.w	r3, r3, #2
 800444c:	2b00      	cmp	r3, #0
 800444e:	d020      	beq.n	8004492 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	f003 0302 	and.w	r3, r3, #2
 8004456:	2b00      	cmp	r3, #0
 8004458:	d01b      	beq.n	8004492 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f06f 0202 	mvn.w	r2, #2
 8004462:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2201      	movs	r2, #1
 8004468:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	699b      	ldr	r3, [r3, #24]
 8004470:	f003 0303 	and.w	r3, r3, #3
 8004474:	2b00      	cmp	r3, #0
 8004476:	d003      	beq.n	8004480 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004478:	6878      	ldr	r0, [r7, #4]
 800447a:	f000 fac2 	bl	8004a02 <HAL_TIM_IC_CaptureCallback>
 800447e:	e005      	b.n	800448c <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004480:	6878      	ldr	r0, [r7, #4]
 8004482:	f000 fab4 	bl	80049ee <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004486:	6878      	ldr	r0, [r7, #4]
 8004488:	f000 fac5 	bl	8004a16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2200      	movs	r2, #0
 8004490:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004492:	68bb      	ldr	r3, [r7, #8]
 8004494:	f003 0304 	and.w	r3, r3, #4
 8004498:	2b00      	cmp	r3, #0
 800449a:	d020      	beq.n	80044de <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	f003 0304 	and.w	r3, r3, #4
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d01b      	beq.n	80044de <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f06f 0204 	mvn.w	r2, #4
 80044ae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2202      	movs	r2, #2
 80044b4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	699b      	ldr	r3, [r3, #24]
 80044bc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d003      	beq.n	80044cc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044c4:	6878      	ldr	r0, [r7, #4]
 80044c6:	f000 fa9c 	bl	8004a02 <HAL_TIM_IC_CaptureCallback>
 80044ca:	e005      	b.n	80044d8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044cc:	6878      	ldr	r0, [r7, #4]
 80044ce:	f000 fa8e 	bl	80049ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044d2:	6878      	ldr	r0, [r7, #4]
 80044d4:	f000 fa9f 	bl	8004a16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2200      	movs	r2, #0
 80044dc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80044de:	68bb      	ldr	r3, [r7, #8]
 80044e0:	f003 0308 	and.w	r3, r3, #8
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d020      	beq.n	800452a <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	f003 0308 	and.w	r3, r3, #8
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d01b      	beq.n	800452a <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f06f 0208 	mvn.w	r2, #8
 80044fa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2204      	movs	r2, #4
 8004500:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	69db      	ldr	r3, [r3, #28]
 8004508:	f003 0303 	and.w	r3, r3, #3
 800450c:	2b00      	cmp	r3, #0
 800450e:	d003      	beq.n	8004518 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004510:	6878      	ldr	r0, [r7, #4]
 8004512:	f000 fa76 	bl	8004a02 <HAL_TIM_IC_CaptureCallback>
 8004516:	e005      	b.n	8004524 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004518:	6878      	ldr	r0, [r7, #4]
 800451a:	f000 fa68 	bl	80049ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800451e:	6878      	ldr	r0, [r7, #4]
 8004520:	f000 fa79 	bl	8004a16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2200      	movs	r2, #0
 8004528:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800452a:	68bb      	ldr	r3, [r7, #8]
 800452c:	f003 0310 	and.w	r3, r3, #16
 8004530:	2b00      	cmp	r3, #0
 8004532:	d020      	beq.n	8004576 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	f003 0310 	and.w	r3, r3, #16
 800453a:	2b00      	cmp	r3, #0
 800453c:	d01b      	beq.n	8004576 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f06f 0210 	mvn.w	r2, #16
 8004546:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2208      	movs	r2, #8
 800454c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	69db      	ldr	r3, [r3, #28]
 8004554:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004558:	2b00      	cmp	r3, #0
 800455a:	d003      	beq.n	8004564 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800455c:	6878      	ldr	r0, [r7, #4]
 800455e:	f000 fa50 	bl	8004a02 <HAL_TIM_IC_CaptureCallback>
 8004562:	e005      	b.n	8004570 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004564:	6878      	ldr	r0, [r7, #4]
 8004566:	f000 fa42 	bl	80049ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800456a:	6878      	ldr	r0, [r7, #4]
 800456c:	f000 fa53 	bl	8004a16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2200      	movs	r2, #0
 8004574:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004576:	68bb      	ldr	r3, [r7, #8]
 8004578:	f003 0301 	and.w	r3, r3, #1
 800457c:	2b00      	cmp	r3, #0
 800457e:	d00c      	beq.n	800459a <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	f003 0301 	and.w	r3, r3, #1
 8004586:	2b00      	cmp	r3, #0
 8004588:	d007      	beq.n	800459a <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f06f 0201 	mvn.w	r2, #1
 8004592:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004594:	6878      	ldr	r0, [r7, #4]
 8004596:	f7fc ff97 	bl	80014c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800459a:	68bb      	ldr	r3, [r7, #8]
 800459c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d00c      	beq.n	80045be <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d007      	beq.n	80045be <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80045b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80045b8:	6878      	ldr	r0, [r7, #4]
 80045ba:	f000 fea5 	bl	8005308 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80045be:	68bb      	ldr	r3, [r7, #8]
 80045c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d00c      	beq.n	80045e2 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d007      	beq.n	80045e2 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80045da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80045dc:	6878      	ldr	r0, [r7, #4]
 80045de:	f000 fe9d 	bl	800531c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80045e2:	68bb      	ldr	r3, [r7, #8]
 80045e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d00c      	beq.n	8004606 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d007      	beq.n	8004606 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80045fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004600:	6878      	ldr	r0, [r7, #4]
 8004602:	f000 fa12 	bl	8004a2a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004606:	68bb      	ldr	r3, [r7, #8]
 8004608:	f003 0320 	and.w	r3, r3, #32
 800460c:	2b00      	cmp	r3, #0
 800460e:	d00c      	beq.n	800462a <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	f003 0320 	and.w	r3, r3, #32
 8004616:	2b00      	cmp	r3, #0
 8004618:	d007      	beq.n	800462a <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f06f 0220 	mvn.w	r2, #32
 8004622:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004624:	6878      	ldr	r0, [r7, #4]
 8004626:	f000 fe65 	bl	80052f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800462a:	bf00      	nop
 800462c:	3710      	adds	r7, #16
 800462e:	46bd      	mov	sp, r7
 8004630:	bd80      	pop	{r7, pc}
	...

08004634 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b086      	sub	sp, #24
 8004638:	af00      	add	r7, sp, #0
 800463a:	60f8      	str	r0, [r7, #12]
 800463c:	60b9      	str	r1, [r7, #8]
 800463e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004640:	2300      	movs	r3, #0
 8004642:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800464a:	2b01      	cmp	r3, #1
 800464c:	d101      	bne.n	8004652 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800464e:	2302      	movs	r3, #2
 8004650:	e0ff      	b.n	8004852 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	2201      	movs	r2, #1
 8004656:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2b14      	cmp	r3, #20
 800465e:	f200 80f0 	bhi.w	8004842 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004662:	a201      	add	r2, pc, #4	@ (adr r2, 8004668 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004664:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004668:	080046bd 	.word	0x080046bd
 800466c:	08004843 	.word	0x08004843
 8004670:	08004843 	.word	0x08004843
 8004674:	08004843 	.word	0x08004843
 8004678:	080046fd 	.word	0x080046fd
 800467c:	08004843 	.word	0x08004843
 8004680:	08004843 	.word	0x08004843
 8004684:	08004843 	.word	0x08004843
 8004688:	0800473f 	.word	0x0800473f
 800468c:	08004843 	.word	0x08004843
 8004690:	08004843 	.word	0x08004843
 8004694:	08004843 	.word	0x08004843
 8004698:	0800477f 	.word	0x0800477f
 800469c:	08004843 	.word	0x08004843
 80046a0:	08004843 	.word	0x08004843
 80046a4:	08004843 	.word	0x08004843
 80046a8:	080047c1 	.word	0x080047c1
 80046ac:	08004843 	.word	0x08004843
 80046b0:	08004843 	.word	0x08004843
 80046b4:	08004843 	.word	0x08004843
 80046b8:	08004801 	.word	0x08004801
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	68b9      	ldr	r1, [r7, #8]
 80046c2:	4618      	mov	r0, r3
 80046c4:	f000 fa20 	bl	8004b08 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	699a      	ldr	r2, [r3, #24]
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f042 0208 	orr.w	r2, r2, #8
 80046d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	699a      	ldr	r2, [r3, #24]
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f022 0204 	bic.w	r2, r2, #4
 80046e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	6999      	ldr	r1, [r3, #24]
 80046ee:	68bb      	ldr	r3, [r7, #8]
 80046f0:	691a      	ldr	r2, [r3, #16]
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	430a      	orrs	r2, r1
 80046f8:	619a      	str	r2, [r3, #24]
      break;
 80046fa:	e0a5      	b.n	8004848 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	68b9      	ldr	r1, [r7, #8]
 8004702:	4618      	mov	r0, r3
 8004704:	f000 fa7c 	bl	8004c00 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	699a      	ldr	r2, [r3, #24]
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004716:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	699a      	ldr	r2, [r3, #24]
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004726:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	6999      	ldr	r1, [r3, #24]
 800472e:	68bb      	ldr	r3, [r7, #8]
 8004730:	691b      	ldr	r3, [r3, #16]
 8004732:	021a      	lsls	r2, r3, #8
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	430a      	orrs	r2, r1
 800473a:	619a      	str	r2, [r3, #24]
      break;
 800473c:	e084      	b.n	8004848 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	68b9      	ldr	r1, [r7, #8]
 8004744:	4618      	mov	r0, r3
 8004746:	f000 fad5 	bl	8004cf4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	69da      	ldr	r2, [r3, #28]
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f042 0208 	orr.w	r2, r2, #8
 8004758:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	69da      	ldr	r2, [r3, #28]
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f022 0204 	bic.w	r2, r2, #4
 8004768:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	69d9      	ldr	r1, [r3, #28]
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	691a      	ldr	r2, [r3, #16]
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	430a      	orrs	r2, r1
 800477a:	61da      	str	r2, [r3, #28]
      break;
 800477c:	e064      	b.n	8004848 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	68b9      	ldr	r1, [r7, #8]
 8004784:	4618      	mov	r0, r3
 8004786:	f000 fb2d 	bl	8004de4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	69da      	ldr	r2, [r3, #28]
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004798:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	69da      	ldr	r2, [r3, #28]
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80047a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	69d9      	ldr	r1, [r3, #28]
 80047b0:	68bb      	ldr	r3, [r7, #8]
 80047b2:	691b      	ldr	r3, [r3, #16]
 80047b4:	021a      	lsls	r2, r3, #8
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	430a      	orrs	r2, r1
 80047bc:	61da      	str	r2, [r3, #28]
      break;
 80047be:	e043      	b.n	8004848 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	68b9      	ldr	r1, [r7, #8]
 80047c6:	4618      	mov	r0, r3
 80047c8:	f000 fb6a 	bl	8004ea0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f042 0208 	orr.w	r2, r2, #8
 80047da:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f022 0204 	bic.w	r2, r2, #4
 80047ea:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80047f2:	68bb      	ldr	r3, [r7, #8]
 80047f4:	691a      	ldr	r2, [r3, #16]
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	430a      	orrs	r2, r1
 80047fc:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80047fe:	e023      	b.n	8004848 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	68b9      	ldr	r1, [r7, #8]
 8004806:	4618      	mov	r0, r3
 8004808:	f000 fba2 	bl	8004f50 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800481a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800482a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004832:	68bb      	ldr	r3, [r7, #8]
 8004834:	691b      	ldr	r3, [r3, #16]
 8004836:	021a      	lsls	r2, r3, #8
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	430a      	orrs	r2, r1
 800483e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004840:	e002      	b.n	8004848 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004842:	2301      	movs	r3, #1
 8004844:	75fb      	strb	r3, [r7, #23]
      break;
 8004846:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	2200      	movs	r2, #0
 800484c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004850:	7dfb      	ldrb	r3, [r7, #23]
}
 8004852:	4618      	mov	r0, r3
 8004854:	3718      	adds	r7, #24
 8004856:	46bd      	mov	sp, r7
 8004858:	bd80      	pop	{r7, pc}
 800485a:	bf00      	nop

0800485c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b084      	sub	sp, #16
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
 8004864:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004866:	2300      	movs	r3, #0
 8004868:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004870:	2b01      	cmp	r3, #1
 8004872:	d101      	bne.n	8004878 <HAL_TIM_ConfigClockSource+0x1c>
 8004874:	2302      	movs	r3, #2
 8004876:	e0b6      	b.n	80049e6 <HAL_TIM_ConfigClockSource+0x18a>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2201      	movs	r2, #1
 800487c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2202      	movs	r2, #2
 8004884:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	689b      	ldr	r3, [r3, #8]
 800488e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004890:	68bb      	ldr	r3, [r7, #8]
 8004892:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004896:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800489a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800489c:	68bb      	ldr	r3, [r7, #8]
 800489e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80048a2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	68ba      	ldr	r2, [r7, #8]
 80048aa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80048b4:	d03e      	beq.n	8004934 <HAL_TIM_ConfigClockSource+0xd8>
 80048b6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80048ba:	f200 8087 	bhi.w	80049cc <HAL_TIM_ConfigClockSource+0x170>
 80048be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80048c2:	f000 8086 	beq.w	80049d2 <HAL_TIM_ConfigClockSource+0x176>
 80048c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80048ca:	d87f      	bhi.n	80049cc <HAL_TIM_ConfigClockSource+0x170>
 80048cc:	2b70      	cmp	r3, #112	@ 0x70
 80048ce:	d01a      	beq.n	8004906 <HAL_TIM_ConfigClockSource+0xaa>
 80048d0:	2b70      	cmp	r3, #112	@ 0x70
 80048d2:	d87b      	bhi.n	80049cc <HAL_TIM_ConfigClockSource+0x170>
 80048d4:	2b60      	cmp	r3, #96	@ 0x60
 80048d6:	d050      	beq.n	800497a <HAL_TIM_ConfigClockSource+0x11e>
 80048d8:	2b60      	cmp	r3, #96	@ 0x60
 80048da:	d877      	bhi.n	80049cc <HAL_TIM_ConfigClockSource+0x170>
 80048dc:	2b50      	cmp	r3, #80	@ 0x50
 80048de:	d03c      	beq.n	800495a <HAL_TIM_ConfigClockSource+0xfe>
 80048e0:	2b50      	cmp	r3, #80	@ 0x50
 80048e2:	d873      	bhi.n	80049cc <HAL_TIM_ConfigClockSource+0x170>
 80048e4:	2b40      	cmp	r3, #64	@ 0x40
 80048e6:	d058      	beq.n	800499a <HAL_TIM_ConfigClockSource+0x13e>
 80048e8:	2b40      	cmp	r3, #64	@ 0x40
 80048ea:	d86f      	bhi.n	80049cc <HAL_TIM_ConfigClockSource+0x170>
 80048ec:	2b30      	cmp	r3, #48	@ 0x30
 80048ee:	d064      	beq.n	80049ba <HAL_TIM_ConfigClockSource+0x15e>
 80048f0:	2b30      	cmp	r3, #48	@ 0x30
 80048f2:	d86b      	bhi.n	80049cc <HAL_TIM_ConfigClockSource+0x170>
 80048f4:	2b20      	cmp	r3, #32
 80048f6:	d060      	beq.n	80049ba <HAL_TIM_ConfigClockSource+0x15e>
 80048f8:	2b20      	cmp	r3, #32
 80048fa:	d867      	bhi.n	80049cc <HAL_TIM_ConfigClockSource+0x170>
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d05c      	beq.n	80049ba <HAL_TIM_ConfigClockSource+0x15e>
 8004900:	2b10      	cmp	r3, #16
 8004902:	d05a      	beq.n	80049ba <HAL_TIM_ConfigClockSource+0x15e>
 8004904:	e062      	b.n	80049cc <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004916:	f000 fbef 	bl	80050f8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	689b      	ldr	r3, [r3, #8]
 8004920:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004922:	68bb      	ldr	r3, [r7, #8]
 8004924:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004928:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	68ba      	ldr	r2, [r7, #8]
 8004930:	609a      	str	r2, [r3, #8]
      break;
 8004932:	e04f      	b.n	80049d4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004944:	f000 fbd8 	bl	80050f8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	689a      	ldr	r2, [r3, #8]
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004956:	609a      	str	r2, [r3, #8]
      break;
 8004958:	e03c      	b.n	80049d4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004966:	461a      	mov	r2, r3
 8004968:	f000 fb4c 	bl	8005004 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	2150      	movs	r1, #80	@ 0x50
 8004972:	4618      	mov	r0, r3
 8004974:	f000 fba5 	bl	80050c2 <TIM_ITRx_SetConfig>
      break;
 8004978:	e02c      	b.n	80049d4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004986:	461a      	mov	r2, r3
 8004988:	f000 fb6b 	bl	8005062 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	2160      	movs	r1, #96	@ 0x60
 8004992:	4618      	mov	r0, r3
 8004994:	f000 fb95 	bl	80050c2 <TIM_ITRx_SetConfig>
      break;
 8004998:	e01c      	b.n	80049d4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80049a6:	461a      	mov	r2, r3
 80049a8:	f000 fb2c 	bl	8005004 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	2140      	movs	r1, #64	@ 0x40
 80049b2:	4618      	mov	r0, r3
 80049b4:	f000 fb85 	bl	80050c2 <TIM_ITRx_SetConfig>
      break;
 80049b8:	e00c      	b.n	80049d4 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681a      	ldr	r2, [r3, #0]
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4619      	mov	r1, r3
 80049c4:	4610      	mov	r0, r2
 80049c6:	f000 fb7c 	bl	80050c2 <TIM_ITRx_SetConfig>
      break;
 80049ca:	e003      	b.n	80049d4 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80049cc:	2301      	movs	r3, #1
 80049ce:	73fb      	strb	r3, [r7, #15]
      break;
 80049d0:	e000      	b.n	80049d4 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80049d2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2201      	movs	r2, #1
 80049d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2200      	movs	r2, #0
 80049e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80049e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80049e6:	4618      	mov	r0, r3
 80049e8:	3710      	adds	r7, #16
 80049ea:	46bd      	mov	sp, r7
 80049ec:	bd80      	pop	{r7, pc}

080049ee <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80049ee:	b480      	push	{r7}
 80049f0:	b083      	sub	sp, #12
 80049f2:	af00      	add	r7, sp, #0
 80049f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80049f6:	bf00      	nop
 80049f8:	370c      	adds	r7, #12
 80049fa:	46bd      	mov	sp, r7
 80049fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a00:	4770      	bx	lr

08004a02 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004a02:	b480      	push	{r7}
 8004a04:	b083      	sub	sp, #12
 8004a06:	af00      	add	r7, sp, #0
 8004a08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004a0a:	bf00      	nop
 8004a0c:	370c      	adds	r7, #12
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a14:	4770      	bx	lr

08004a16 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004a16:	b480      	push	{r7}
 8004a18:	b083      	sub	sp, #12
 8004a1a:	af00      	add	r7, sp, #0
 8004a1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004a1e:	bf00      	nop
 8004a20:	370c      	adds	r7, #12
 8004a22:	46bd      	mov	sp, r7
 8004a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a28:	4770      	bx	lr

08004a2a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004a2a:	b480      	push	{r7}
 8004a2c:	b083      	sub	sp, #12
 8004a2e:	af00      	add	r7, sp, #0
 8004a30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004a32:	bf00      	nop
 8004a34:	370c      	adds	r7, #12
 8004a36:	46bd      	mov	sp, r7
 8004a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3c:	4770      	bx	lr
	...

08004a40 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004a40:	b480      	push	{r7}
 8004a42:	b085      	sub	sp, #20
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
 8004a48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	4a2a      	ldr	r2, [pc, #168]	@ (8004afc <TIM_Base_SetConfig+0xbc>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d003      	beq.n	8004a60 <TIM_Base_SetConfig+0x20>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a5e:	d108      	bne.n	8004a72 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a66:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	685b      	ldr	r3, [r3, #4]
 8004a6c:	68fa      	ldr	r2, [r7, #12]
 8004a6e:	4313      	orrs	r3, r2
 8004a70:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	4a21      	ldr	r2, [pc, #132]	@ (8004afc <TIM_Base_SetConfig+0xbc>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d00b      	beq.n	8004a92 <TIM_Base_SetConfig+0x52>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a80:	d007      	beq.n	8004a92 <TIM_Base_SetConfig+0x52>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	4a1e      	ldr	r2, [pc, #120]	@ (8004b00 <TIM_Base_SetConfig+0xc0>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d003      	beq.n	8004a92 <TIM_Base_SetConfig+0x52>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	4a1d      	ldr	r2, [pc, #116]	@ (8004b04 <TIM_Base_SetConfig+0xc4>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d108      	bne.n	8004aa4 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004a98:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	68db      	ldr	r3, [r3, #12]
 8004a9e:	68fa      	ldr	r2, [r7, #12]
 8004aa0:	4313      	orrs	r3, r2
 8004aa2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	695b      	ldr	r3, [r3, #20]
 8004aae:	4313      	orrs	r3, r2
 8004ab0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	68fa      	ldr	r2, [r7, #12]
 8004ab6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	689a      	ldr	r2, [r3, #8]
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	681a      	ldr	r2, [r3, #0]
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	4a0c      	ldr	r2, [pc, #48]	@ (8004afc <TIM_Base_SetConfig+0xbc>)
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d007      	beq.n	8004ae0 <TIM_Base_SetConfig+0xa0>
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	4a0b      	ldr	r2, [pc, #44]	@ (8004b00 <TIM_Base_SetConfig+0xc0>)
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d003      	beq.n	8004ae0 <TIM_Base_SetConfig+0xa0>
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	4a0a      	ldr	r2, [pc, #40]	@ (8004b04 <TIM_Base_SetConfig+0xc4>)
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d103      	bne.n	8004ae8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	691a      	ldr	r2, [r3, #16]
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2201      	movs	r2, #1
 8004aec:	615a      	str	r2, [r3, #20]
}
 8004aee:	bf00      	nop
 8004af0:	3714      	adds	r7, #20
 8004af2:	46bd      	mov	sp, r7
 8004af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af8:	4770      	bx	lr
 8004afa:	bf00      	nop
 8004afc:	40012c00 	.word	0x40012c00
 8004b00:	40014000 	.word	0x40014000
 8004b04:	40014400 	.word	0x40014400

08004b08 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004b08:	b480      	push	{r7}
 8004b0a:	b087      	sub	sp, #28
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
 8004b10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6a1b      	ldr	r3, [r3, #32]
 8004b16:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6a1b      	ldr	r3, [r3, #32]
 8004b1c:	f023 0201 	bic.w	r2, r3, #1
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	685b      	ldr	r3, [r3, #4]
 8004b28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	699b      	ldr	r3, [r3, #24]
 8004b2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004b36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	f023 0303 	bic.w	r3, r3, #3
 8004b42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	68fa      	ldr	r2, [r7, #12]
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004b4e:	697b      	ldr	r3, [r7, #20]
 8004b50:	f023 0302 	bic.w	r3, r3, #2
 8004b54:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	689b      	ldr	r3, [r3, #8]
 8004b5a:	697a      	ldr	r2, [r7, #20]
 8004b5c:	4313      	orrs	r3, r2
 8004b5e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	4a24      	ldr	r2, [pc, #144]	@ (8004bf4 <TIM_OC1_SetConfig+0xec>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d007      	beq.n	8004b78 <TIM_OC1_SetConfig+0x70>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	4a23      	ldr	r2, [pc, #140]	@ (8004bf8 <TIM_OC1_SetConfig+0xf0>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d003      	beq.n	8004b78 <TIM_OC1_SetConfig+0x70>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	4a22      	ldr	r2, [pc, #136]	@ (8004bfc <TIM_OC1_SetConfig+0xf4>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d10c      	bne.n	8004b92 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004b78:	697b      	ldr	r3, [r7, #20]
 8004b7a:	f023 0308 	bic.w	r3, r3, #8
 8004b7e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	68db      	ldr	r3, [r3, #12]
 8004b84:	697a      	ldr	r2, [r7, #20]
 8004b86:	4313      	orrs	r3, r2
 8004b88:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004b8a:	697b      	ldr	r3, [r7, #20]
 8004b8c:	f023 0304 	bic.w	r3, r3, #4
 8004b90:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	4a17      	ldr	r2, [pc, #92]	@ (8004bf4 <TIM_OC1_SetConfig+0xec>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d007      	beq.n	8004baa <TIM_OC1_SetConfig+0xa2>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	4a16      	ldr	r2, [pc, #88]	@ (8004bf8 <TIM_OC1_SetConfig+0xf0>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d003      	beq.n	8004baa <TIM_OC1_SetConfig+0xa2>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	4a15      	ldr	r2, [pc, #84]	@ (8004bfc <TIM_OC1_SetConfig+0xf4>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d111      	bne.n	8004bce <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004baa:	693b      	ldr	r3, [r7, #16]
 8004bac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004bb0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004bb2:	693b      	ldr	r3, [r7, #16]
 8004bb4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004bb8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	695b      	ldr	r3, [r3, #20]
 8004bbe:	693a      	ldr	r2, [r7, #16]
 8004bc0:	4313      	orrs	r3, r2
 8004bc2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	699b      	ldr	r3, [r3, #24]
 8004bc8:	693a      	ldr	r2, [r7, #16]
 8004bca:	4313      	orrs	r3, r2
 8004bcc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	693a      	ldr	r2, [r7, #16]
 8004bd2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	68fa      	ldr	r2, [r7, #12]
 8004bd8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	685a      	ldr	r2, [r3, #4]
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	697a      	ldr	r2, [r7, #20]
 8004be6:	621a      	str	r2, [r3, #32]
}
 8004be8:	bf00      	nop
 8004bea:	371c      	adds	r7, #28
 8004bec:	46bd      	mov	sp, r7
 8004bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf2:	4770      	bx	lr
 8004bf4:	40012c00 	.word	0x40012c00
 8004bf8:	40014000 	.word	0x40014000
 8004bfc:	40014400 	.word	0x40014400

08004c00 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004c00:	b480      	push	{r7}
 8004c02:	b087      	sub	sp, #28
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
 8004c08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6a1b      	ldr	r3, [r3, #32]
 8004c0e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6a1b      	ldr	r3, [r3, #32]
 8004c14:	f023 0210 	bic.w	r2, r3, #16
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	685b      	ldr	r3, [r3, #4]
 8004c20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	699b      	ldr	r3, [r3, #24]
 8004c26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004c2e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004c32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004c3a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	021b      	lsls	r3, r3, #8
 8004c42:	68fa      	ldr	r2, [r7, #12]
 8004c44:	4313      	orrs	r3, r2
 8004c46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004c48:	697b      	ldr	r3, [r7, #20]
 8004c4a:	f023 0320 	bic.w	r3, r3, #32
 8004c4e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	689b      	ldr	r3, [r3, #8]
 8004c54:	011b      	lsls	r3, r3, #4
 8004c56:	697a      	ldr	r2, [r7, #20]
 8004c58:	4313      	orrs	r3, r2
 8004c5a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	4a22      	ldr	r2, [pc, #136]	@ (8004ce8 <TIM_OC2_SetConfig+0xe8>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d10d      	bne.n	8004c80 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004c64:	697b      	ldr	r3, [r7, #20]
 8004c66:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004c6a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	68db      	ldr	r3, [r3, #12]
 8004c70:	011b      	lsls	r3, r3, #4
 8004c72:	697a      	ldr	r2, [r7, #20]
 8004c74:	4313      	orrs	r3, r2
 8004c76:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004c78:	697b      	ldr	r3, [r7, #20]
 8004c7a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004c7e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	4a19      	ldr	r2, [pc, #100]	@ (8004ce8 <TIM_OC2_SetConfig+0xe8>)
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d007      	beq.n	8004c98 <TIM_OC2_SetConfig+0x98>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	4a18      	ldr	r2, [pc, #96]	@ (8004cec <TIM_OC2_SetConfig+0xec>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d003      	beq.n	8004c98 <TIM_OC2_SetConfig+0x98>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	4a17      	ldr	r2, [pc, #92]	@ (8004cf0 <TIM_OC2_SetConfig+0xf0>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d113      	bne.n	8004cc0 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004c98:	693b      	ldr	r3, [r7, #16]
 8004c9a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004c9e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004ca0:	693b      	ldr	r3, [r7, #16]
 8004ca2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004ca6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	695b      	ldr	r3, [r3, #20]
 8004cac:	009b      	lsls	r3, r3, #2
 8004cae:	693a      	ldr	r2, [r7, #16]
 8004cb0:	4313      	orrs	r3, r2
 8004cb2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	699b      	ldr	r3, [r3, #24]
 8004cb8:	009b      	lsls	r3, r3, #2
 8004cba:	693a      	ldr	r2, [r7, #16]
 8004cbc:	4313      	orrs	r3, r2
 8004cbe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	693a      	ldr	r2, [r7, #16]
 8004cc4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	68fa      	ldr	r2, [r7, #12]
 8004cca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	685a      	ldr	r2, [r3, #4]
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	697a      	ldr	r2, [r7, #20]
 8004cd8:	621a      	str	r2, [r3, #32]
}
 8004cda:	bf00      	nop
 8004cdc:	371c      	adds	r7, #28
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce4:	4770      	bx	lr
 8004ce6:	bf00      	nop
 8004ce8:	40012c00 	.word	0x40012c00
 8004cec:	40014000 	.word	0x40014000
 8004cf0:	40014400 	.word	0x40014400

08004cf4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004cf4:	b480      	push	{r7}
 8004cf6:	b087      	sub	sp, #28
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
 8004cfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6a1b      	ldr	r3, [r3, #32]
 8004d02:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6a1b      	ldr	r3, [r3, #32]
 8004d08:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	685b      	ldr	r3, [r3, #4]
 8004d14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	69db      	ldr	r3, [r3, #28]
 8004d1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004d22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	f023 0303 	bic.w	r3, r3, #3
 8004d2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	68fa      	ldr	r2, [r7, #12]
 8004d36:	4313      	orrs	r3, r2
 8004d38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004d3a:	697b      	ldr	r3, [r7, #20]
 8004d3c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004d40:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	689b      	ldr	r3, [r3, #8]
 8004d46:	021b      	lsls	r3, r3, #8
 8004d48:	697a      	ldr	r2, [r7, #20]
 8004d4a:	4313      	orrs	r3, r2
 8004d4c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	4a21      	ldr	r2, [pc, #132]	@ (8004dd8 <TIM_OC3_SetConfig+0xe4>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d10d      	bne.n	8004d72 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004d56:	697b      	ldr	r3, [r7, #20]
 8004d58:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004d5c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	68db      	ldr	r3, [r3, #12]
 8004d62:	021b      	lsls	r3, r3, #8
 8004d64:	697a      	ldr	r2, [r7, #20]
 8004d66:	4313      	orrs	r3, r2
 8004d68:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004d6a:	697b      	ldr	r3, [r7, #20]
 8004d6c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004d70:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	4a18      	ldr	r2, [pc, #96]	@ (8004dd8 <TIM_OC3_SetConfig+0xe4>)
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d007      	beq.n	8004d8a <TIM_OC3_SetConfig+0x96>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	4a17      	ldr	r2, [pc, #92]	@ (8004ddc <TIM_OC3_SetConfig+0xe8>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d003      	beq.n	8004d8a <TIM_OC3_SetConfig+0x96>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	4a16      	ldr	r2, [pc, #88]	@ (8004de0 <TIM_OC3_SetConfig+0xec>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d113      	bne.n	8004db2 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004d8a:	693b      	ldr	r3, [r7, #16]
 8004d8c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004d90:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004d92:	693b      	ldr	r3, [r7, #16]
 8004d94:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004d98:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	695b      	ldr	r3, [r3, #20]
 8004d9e:	011b      	lsls	r3, r3, #4
 8004da0:	693a      	ldr	r2, [r7, #16]
 8004da2:	4313      	orrs	r3, r2
 8004da4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	699b      	ldr	r3, [r3, #24]
 8004daa:	011b      	lsls	r3, r3, #4
 8004dac:	693a      	ldr	r2, [r7, #16]
 8004dae:	4313      	orrs	r3, r2
 8004db0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	693a      	ldr	r2, [r7, #16]
 8004db6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	68fa      	ldr	r2, [r7, #12]
 8004dbc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	685a      	ldr	r2, [r3, #4]
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	697a      	ldr	r2, [r7, #20]
 8004dca:	621a      	str	r2, [r3, #32]
}
 8004dcc:	bf00      	nop
 8004dce:	371c      	adds	r7, #28
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd6:	4770      	bx	lr
 8004dd8:	40012c00 	.word	0x40012c00
 8004ddc:	40014000 	.word	0x40014000
 8004de0:	40014400 	.word	0x40014400

08004de4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004de4:	b480      	push	{r7}
 8004de6:	b087      	sub	sp, #28
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
 8004dec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6a1b      	ldr	r3, [r3, #32]
 8004df2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6a1b      	ldr	r3, [r3, #32]
 8004df8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	685b      	ldr	r3, [r3, #4]
 8004e04:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	69db      	ldr	r3, [r3, #28]
 8004e0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004e12:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004e16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e1e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	021b      	lsls	r3, r3, #8
 8004e26:	68fa      	ldr	r2, [r7, #12]
 8004e28:	4313      	orrs	r3, r2
 8004e2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004e2c:	693b      	ldr	r3, [r7, #16]
 8004e2e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004e32:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	689b      	ldr	r3, [r3, #8]
 8004e38:	031b      	lsls	r3, r3, #12
 8004e3a:	693a      	ldr	r2, [r7, #16]
 8004e3c:	4313      	orrs	r3, r2
 8004e3e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	4a14      	ldr	r2, [pc, #80]	@ (8004e94 <TIM_OC4_SetConfig+0xb0>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d007      	beq.n	8004e58 <TIM_OC4_SetConfig+0x74>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	4a13      	ldr	r2, [pc, #76]	@ (8004e98 <TIM_OC4_SetConfig+0xb4>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d003      	beq.n	8004e58 <TIM_OC4_SetConfig+0x74>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	4a12      	ldr	r2, [pc, #72]	@ (8004e9c <TIM_OC4_SetConfig+0xb8>)
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d109      	bne.n	8004e6c <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004e58:	697b      	ldr	r3, [r7, #20]
 8004e5a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004e5e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	695b      	ldr	r3, [r3, #20]
 8004e64:	019b      	lsls	r3, r3, #6
 8004e66:	697a      	ldr	r2, [r7, #20]
 8004e68:	4313      	orrs	r3, r2
 8004e6a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	697a      	ldr	r2, [r7, #20]
 8004e70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	68fa      	ldr	r2, [r7, #12]
 8004e76:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	685a      	ldr	r2, [r3, #4]
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	693a      	ldr	r2, [r7, #16]
 8004e84:	621a      	str	r2, [r3, #32]
}
 8004e86:	bf00      	nop
 8004e88:	371c      	adds	r7, #28
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e90:	4770      	bx	lr
 8004e92:	bf00      	nop
 8004e94:	40012c00 	.word	0x40012c00
 8004e98:	40014000 	.word	0x40014000
 8004e9c:	40014400 	.word	0x40014400

08004ea0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004ea0:	b480      	push	{r7}
 8004ea2:	b087      	sub	sp, #28
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
 8004ea8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6a1b      	ldr	r3, [r3, #32]
 8004eae:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6a1b      	ldr	r3, [r3, #32]
 8004eb4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	685b      	ldr	r3, [r3, #4]
 8004ec0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ec6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004ece:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ed2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	68fa      	ldr	r2, [r7, #12]
 8004eda:	4313      	orrs	r3, r2
 8004edc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004ede:	693b      	ldr	r3, [r7, #16]
 8004ee0:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8004ee4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	689b      	ldr	r3, [r3, #8]
 8004eea:	041b      	lsls	r3, r3, #16
 8004eec:	693a      	ldr	r2, [r7, #16]
 8004eee:	4313      	orrs	r3, r2
 8004ef0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	4a13      	ldr	r2, [pc, #76]	@ (8004f44 <TIM_OC5_SetConfig+0xa4>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d007      	beq.n	8004f0a <TIM_OC5_SetConfig+0x6a>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	4a12      	ldr	r2, [pc, #72]	@ (8004f48 <TIM_OC5_SetConfig+0xa8>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d003      	beq.n	8004f0a <TIM_OC5_SetConfig+0x6a>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	4a11      	ldr	r2, [pc, #68]	@ (8004f4c <TIM_OC5_SetConfig+0xac>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d109      	bne.n	8004f1e <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004f0a:	697b      	ldr	r3, [r7, #20]
 8004f0c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004f10:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	695b      	ldr	r3, [r3, #20]
 8004f16:	021b      	lsls	r3, r3, #8
 8004f18:	697a      	ldr	r2, [r7, #20]
 8004f1a:	4313      	orrs	r3, r2
 8004f1c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	697a      	ldr	r2, [r7, #20]
 8004f22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	68fa      	ldr	r2, [r7, #12]
 8004f28:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	685a      	ldr	r2, [r3, #4]
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	693a      	ldr	r2, [r7, #16]
 8004f36:	621a      	str	r2, [r3, #32]
}
 8004f38:	bf00      	nop
 8004f3a:	371c      	adds	r7, #28
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f42:	4770      	bx	lr
 8004f44:	40012c00 	.word	0x40012c00
 8004f48:	40014000 	.word	0x40014000
 8004f4c:	40014400 	.word	0x40014400

08004f50 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004f50:	b480      	push	{r7}
 8004f52:	b087      	sub	sp, #28
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
 8004f58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6a1b      	ldr	r3, [r3, #32]
 8004f5e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6a1b      	ldr	r3, [r3, #32]
 8004f64:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	685b      	ldr	r3, [r3, #4]
 8004f70:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004f7e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004f82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	021b      	lsls	r3, r3, #8
 8004f8a:	68fa      	ldr	r2, [r7, #12]
 8004f8c:	4313      	orrs	r3, r2
 8004f8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004f90:	693b      	ldr	r3, [r7, #16]
 8004f92:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004f96:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	689b      	ldr	r3, [r3, #8]
 8004f9c:	051b      	lsls	r3, r3, #20
 8004f9e:	693a      	ldr	r2, [r7, #16]
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	4a14      	ldr	r2, [pc, #80]	@ (8004ff8 <TIM_OC6_SetConfig+0xa8>)
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d007      	beq.n	8004fbc <TIM_OC6_SetConfig+0x6c>
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	4a13      	ldr	r2, [pc, #76]	@ (8004ffc <TIM_OC6_SetConfig+0xac>)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d003      	beq.n	8004fbc <TIM_OC6_SetConfig+0x6c>
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	4a12      	ldr	r2, [pc, #72]	@ (8005000 <TIM_OC6_SetConfig+0xb0>)
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d109      	bne.n	8004fd0 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004fbc:	697b      	ldr	r3, [r7, #20]
 8004fbe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004fc2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	695b      	ldr	r3, [r3, #20]
 8004fc8:	029b      	lsls	r3, r3, #10
 8004fca:	697a      	ldr	r2, [r7, #20]
 8004fcc:	4313      	orrs	r3, r2
 8004fce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	697a      	ldr	r2, [r7, #20]
 8004fd4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	68fa      	ldr	r2, [r7, #12]
 8004fda:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	685a      	ldr	r2, [r3, #4]
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	693a      	ldr	r2, [r7, #16]
 8004fe8:	621a      	str	r2, [r3, #32]
}
 8004fea:	bf00      	nop
 8004fec:	371c      	adds	r7, #28
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff4:	4770      	bx	lr
 8004ff6:	bf00      	nop
 8004ff8:	40012c00 	.word	0x40012c00
 8004ffc:	40014000 	.word	0x40014000
 8005000:	40014400 	.word	0x40014400

08005004 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005004:	b480      	push	{r7}
 8005006:	b087      	sub	sp, #28
 8005008:	af00      	add	r7, sp, #0
 800500a:	60f8      	str	r0, [r7, #12]
 800500c:	60b9      	str	r1, [r7, #8]
 800500e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	6a1b      	ldr	r3, [r3, #32]
 8005014:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	6a1b      	ldr	r3, [r3, #32]
 800501a:	f023 0201 	bic.w	r2, r3, #1
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	699b      	ldr	r3, [r3, #24]
 8005026:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005028:	693b      	ldr	r3, [r7, #16]
 800502a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800502e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	011b      	lsls	r3, r3, #4
 8005034:	693a      	ldr	r2, [r7, #16]
 8005036:	4313      	orrs	r3, r2
 8005038:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800503a:	697b      	ldr	r3, [r7, #20]
 800503c:	f023 030a 	bic.w	r3, r3, #10
 8005040:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005042:	697a      	ldr	r2, [r7, #20]
 8005044:	68bb      	ldr	r3, [r7, #8]
 8005046:	4313      	orrs	r3, r2
 8005048:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	693a      	ldr	r2, [r7, #16]
 800504e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	697a      	ldr	r2, [r7, #20]
 8005054:	621a      	str	r2, [r3, #32]
}
 8005056:	bf00      	nop
 8005058:	371c      	adds	r7, #28
 800505a:	46bd      	mov	sp, r7
 800505c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005060:	4770      	bx	lr

08005062 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005062:	b480      	push	{r7}
 8005064:	b087      	sub	sp, #28
 8005066:	af00      	add	r7, sp, #0
 8005068:	60f8      	str	r0, [r7, #12]
 800506a:	60b9      	str	r1, [r7, #8]
 800506c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	6a1b      	ldr	r3, [r3, #32]
 8005072:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	6a1b      	ldr	r3, [r3, #32]
 8005078:	f023 0210 	bic.w	r2, r3, #16
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	699b      	ldr	r3, [r3, #24]
 8005084:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005086:	693b      	ldr	r3, [r7, #16]
 8005088:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800508c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	031b      	lsls	r3, r3, #12
 8005092:	693a      	ldr	r2, [r7, #16]
 8005094:	4313      	orrs	r3, r2
 8005096:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005098:	697b      	ldr	r3, [r7, #20]
 800509a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800509e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80050a0:	68bb      	ldr	r3, [r7, #8]
 80050a2:	011b      	lsls	r3, r3, #4
 80050a4:	697a      	ldr	r2, [r7, #20]
 80050a6:	4313      	orrs	r3, r2
 80050a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	693a      	ldr	r2, [r7, #16]
 80050ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	697a      	ldr	r2, [r7, #20]
 80050b4:	621a      	str	r2, [r3, #32]
}
 80050b6:	bf00      	nop
 80050b8:	371c      	adds	r7, #28
 80050ba:	46bd      	mov	sp, r7
 80050bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c0:	4770      	bx	lr

080050c2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80050c2:	b480      	push	{r7}
 80050c4:	b085      	sub	sp, #20
 80050c6:	af00      	add	r7, sp, #0
 80050c8:	6078      	str	r0, [r7, #4]
 80050ca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	689b      	ldr	r3, [r3, #8]
 80050d0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80050d8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80050da:	683a      	ldr	r2, [r7, #0]
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	4313      	orrs	r3, r2
 80050e0:	f043 0307 	orr.w	r3, r3, #7
 80050e4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	68fa      	ldr	r2, [r7, #12]
 80050ea:	609a      	str	r2, [r3, #8]
}
 80050ec:	bf00      	nop
 80050ee:	3714      	adds	r7, #20
 80050f0:	46bd      	mov	sp, r7
 80050f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f6:	4770      	bx	lr

080050f8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80050f8:	b480      	push	{r7}
 80050fa:	b087      	sub	sp, #28
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	60f8      	str	r0, [r7, #12]
 8005100:	60b9      	str	r1, [r7, #8]
 8005102:	607a      	str	r2, [r7, #4]
 8005104:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	689b      	ldr	r3, [r3, #8]
 800510a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800510c:	697b      	ldr	r3, [r7, #20]
 800510e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005112:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	021a      	lsls	r2, r3, #8
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	431a      	orrs	r2, r3
 800511c:	68bb      	ldr	r3, [r7, #8]
 800511e:	4313      	orrs	r3, r2
 8005120:	697a      	ldr	r2, [r7, #20]
 8005122:	4313      	orrs	r3, r2
 8005124:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	697a      	ldr	r2, [r7, #20]
 800512a:	609a      	str	r2, [r3, #8]
}
 800512c:	bf00      	nop
 800512e:	371c      	adds	r7, #28
 8005130:	46bd      	mov	sp, r7
 8005132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005136:	4770      	bx	lr

08005138 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005138:	b480      	push	{r7}
 800513a:	b085      	sub	sp, #20
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
 8005140:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005148:	2b01      	cmp	r3, #1
 800514a:	d101      	bne.n	8005150 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800514c:	2302      	movs	r3, #2
 800514e:	e04f      	b.n	80051f0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2201      	movs	r2, #1
 8005154:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2202      	movs	r2, #2
 800515c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	685b      	ldr	r3, [r3, #4]
 8005166:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	689b      	ldr	r3, [r3, #8]
 800516e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	4a21      	ldr	r2, [pc, #132]	@ (80051fc <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d108      	bne.n	800518c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005180:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	685b      	ldr	r3, [r3, #4]
 8005186:	68fa      	ldr	r2, [r7, #12]
 8005188:	4313      	orrs	r3, r2
 800518a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005192:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	68fa      	ldr	r2, [r7, #12]
 800519a:	4313      	orrs	r3, r2
 800519c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	68fa      	ldr	r2, [r7, #12]
 80051a4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	4a14      	ldr	r2, [pc, #80]	@ (80051fc <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d009      	beq.n	80051c4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80051b8:	d004      	beq.n	80051c4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	4a10      	ldr	r2, [pc, #64]	@ (8005200 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d10c      	bne.n	80051de <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80051ca:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	689b      	ldr	r3, [r3, #8]
 80051d0:	68ba      	ldr	r2, [r7, #8]
 80051d2:	4313      	orrs	r3, r2
 80051d4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	68ba      	ldr	r2, [r7, #8]
 80051dc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2201      	movs	r2, #1
 80051e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2200      	movs	r2, #0
 80051ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80051ee:	2300      	movs	r3, #0
}
 80051f0:	4618      	mov	r0, r3
 80051f2:	3714      	adds	r7, #20
 80051f4:	46bd      	mov	sp, r7
 80051f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fa:	4770      	bx	lr
 80051fc:	40012c00 	.word	0x40012c00
 8005200:	40014000 	.word	0x40014000

08005204 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005204:	b480      	push	{r7}
 8005206:	b085      	sub	sp, #20
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
 800520c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800520e:	2300      	movs	r3, #0
 8005210:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005218:	2b01      	cmp	r3, #1
 800521a:	d101      	bne.n	8005220 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800521c:	2302      	movs	r3, #2
 800521e:	e060      	b.n	80052e2 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2201      	movs	r2, #1
 8005224:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	68db      	ldr	r3, [r3, #12]
 8005232:	4313      	orrs	r3, r2
 8005234:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	689b      	ldr	r3, [r3, #8]
 8005240:	4313      	orrs	r3, r2
 8005242:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	685b      	ldr	r3, [r3, #4]
 800524e:	4313      	orrs	r3, r2
 8005250:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	4313      	orrs	r3, r2
 800525e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	691b      	ldr	r3, [r3, #16]
 800526a:	4313      	orrs	r3, r2
 800526c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	695b      	ldr	r3, [r3, #20]
 8005278:	4313      	orrs	r3, r2
 800527a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005286:	4313      	orrs	r3, r2
 8005288:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	699b      	ldr	r3, [r3, #24]
 8005294:	041b      	lsls	r3, r3, #16
 8005296:	4313      	orrs	r3, r2
 8005298:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	4a14      	ldr	r2, [pc, #80]	@ (80052f0 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d115      	bne.n	80052d0 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052ae:	051b      	lsls	r3, r3, #20
 80052b0:	4313      	orrs	r3, r2
 80052b2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	69db      	ldr	r3, [r3, #28]
 80052be:	4313      	orrs	r3, r2
 80052c0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	6a1b      	ldr	r3, [r3, #32]
 80052cc:	4313      	orrs	r3, r2
 80052ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	68fa      	ldr	r2, [r7, #12]
 80052d6:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2200      	movs	r2, #0
 80052dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80052e0:	2300      	movs	r3, #0
}
 80052e2:	4618      	mov	r0, r3
 80052e4:	3714      	adds	r7, #20
 80052e6:	46bd      	mov	sp, r7
 80052e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ec:	4770      	bx	lr
 80052ee:	bf00      	nop
 80052f0:	40012c00 	.word	0x40012c00

080052f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80052f4:	b480      	push	{r7}
 80052f6:	b083      	sub	sp, #12
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80052fc:	bf00      	nop
 80052fe:	370c      	adds	r7, #12
 8005300:	46bd      	mov	sp, r7
 8005302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005306:	4770      	bx	lr

08005308 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005308:	b480      	push	{r7}
 800530a:	b083      	sub	sp, #12
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005310:	bf00      	nop
 8005312:	370c      	adds	r7, #12
 8005314:	46bd      	mov	sp, r7
 8005316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531a:	4770      	bx	lr

0800531c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800531c:	b480      	push	{r7}
 800531e:	b083      	sub	sp, #12
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005324:	bf00      	nop
 8005326:	370c      	adds	r7, #12
 8005328:	46bd      	mov	sp, r7
 800532a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532e:	4770      	bx	lr

08005330 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b082      	sub	sp, #8
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d101      	bne.n	8005342 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800533e:	2301      	movs	r3, #1
 8005340:	e040      	b.n	80053c4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005346:	2b00      	cmp	r3, #0
 8005348:	d106      	bne.n	8005358 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2200      	movs	r2, #0
 800534e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005352:	6878      	ldr	r0, [r7, #4]
 8005354:	f7fc fc1c 	bl	8001b90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2224      	movs	r2, #36	@ 0x24
 800535c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	681a      	ldr	r2, [r3, #0]
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f022 0201 	bic.w	r2, r2, #1
 800536c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005372:	2b00      	cmp	r3, #0
 8005374:	d002      	beq.n	800537c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005376:	6878      	ldr	r0, [r7, #4]
 8005378:	f000 fed6 	bl	8006128 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800537c:	6878      	ldr	r0, [r7, #4]
 800537e:	f000 fca7 	bl	8005cd0 <UART_SetConfig>
 8005382:	4603      	mov	r3, r0
 8005384:	2b01      	cmp	r3, #1
 8005386:	d101      	bne.n	800538c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005388:	2301      	movs	r3, #1
 800538a:	e01b      	b.n	80053c4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	685a      	ldr	r2, [r3, #4]
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800539a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	689a      	ldr	r2, [r3, #8]
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80053aa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	681a      	ldr	r2, [r3, #0]
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f042 0201 	orr.w	r2, r2, #1
 80053ba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80053bc:	6878      	ldr	r0, [r7, #4]
 80053be:	f000 ff55 	bl	800626c <UART_CheckIdleState>
 80053c2:	4603      	mov	r3, r0
}
 80053c4:	4618      	mov	r0, r3
 80053c6:	3708      	adds	r7, #8
 80053c8:	46bd      	mov	sp, r7
 80053ca:	bd80      	pop	{r7, pc}

080053cc <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b08a      	sub	sp, #40	@ 0x28
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	60f8      	str	r0, [r7, #12]
 80053d4:	60b9      	str	r1, [r7, #8]
 80053d6:	4613      	mov	r3, r2
 80053d8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80053de:	2b20      	cmp	r3, #32
 80053e0:	d165      	bne.n	80054ae <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 80053e2:	68bb      	ldr	r3, [r7, #8]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d002      	beq.n	80053ee <HAL_UART_Transmit_DMA+0x22>
 80053e8:	88fb      	ldrh	r3, [r7, #6]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d101      	bne.n	80053f2 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 80053ee:	2301      	movs	r3, #1
 80053f0:	e05e      	b.n	80054b0 <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	68ba      	ldr	r2, [r7, #8]
 80053f6:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	88fa      	ldrh	r2, [r7, #6]
 80053fc:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	88fa      	ldrh	r2, [r7, #6]
 8005404:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	2200      	movs	r2, #0
 800540c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	2221      	movs	r2, #33	@ 0x21
 8005414:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800541a:	2b00      	cmp	r3, #0
 800541c:	d027      	beq.n	800546e <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005422:	4a25      	ldr	r2, [pc, #148]	@ (80054b8 <HAL_UART_Transmit_DMA+0xec>)
 8005424:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800542a:	4a24      	ldr	r2, [pc, #144]	@ (80054bc <HAL_UART_Transmit_DMA+0xf0>)
 800542c:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005432:	4a23      	ldr	r2, [pc, #140]	@ (80054c0 <HAL_UART_Transmit_DMA+0xf4>)
 8005434:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800543a:	2200      	movs	r2, #0
 800543c:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005446:	4619      	mov	r1, r3
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	3328      	adds	r3, #40	@ 0x28
 800544e:	461a      	mov	r2, r3
 8005450:	88fb      	ldrh	r3, [r7, #6]
 8005452:	f7fc fffd 	bl	8002450 <HAL_DMA_Start_IT>
 8005456:	4603      	mov	r3, r0
 8005458:	2b00      	cmp	r3, #0
 800545a:	d008      	beq.n	800546e <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	2210      	movs	r2, #16
 8005460:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	2220      	movs	r2, #32
 8005468:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 800546a:	2301      	movs	r3, #1
 800546c:	e020      	b.n	80054b0 <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	2240      	movs	r2, #64	@ 0x40
 8005474:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	3308      	adds	r3, #8
 800547c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800547e:	697b      	ldr	r3, [r7, #20]
 8005480:	e853 3f00 	ldrex	r3, [r3]
 8005484:	613b      	str	r3, [r7, #16]
   return(result);
 8005486:	693b      	ldr	r3, [r7, #16]
 8005488:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800548c:	627b      	str	r3, [r7, #36]	@ 0x24
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	3308      	adds	r3, #8
 8005494:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005496:	623a      	str	r2, [r7, #32]
 8005498:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800549a:	69f9      	ldr	r1, [r7, #28]
 800549c:	6a3a      	ldr	r2, [r7, #32]
 800549e:	e841 2300 	strex	r3, r2, [r1]
 80054a2:	61bb      	str	r3, [r7, #24]
   return(result);
 80054a4:	69bb      	ldr	r3, [r7, #24]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d1e5      	bne.n	8005476 <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 80054aa:	2300      	movs	r3, #0
 80054ac:	e000      	b.n	80054b0 <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 80054ae:	2302      	movs	r3, #2
  }
}
 80054b0:	4618      	mov	r0, r3
 80054b2:	3728      	adds	r7, #40	@ 0x28
 80054b4:	46bd      	mov	sp, r7
 80054b6:	bd80      	pop	{r7, pc}
 80054b8:	080066e1 	.word	0x080066e1
 80054bc:	0800677b 	.word	0x0800677b
 80054c0:	08006901 	.word	0x08006901

080054c4 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b08a      	sub	sp, #40	@ 0x28
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	60f8      	str	r0, [r7, #12]
 80054cc:	60b9      	str	r1, [r7, #8]
 80054ce:	4613      	mov	r3, r2
 80054d0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80054d8:	2b20      	cmp	r3, #32
 80054da:	d137      	bne.n	800554c <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80054dc:	68bb      	ldr	r3, [r7, #8]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d002      	beq.n	80054e8 <HAL_UART_Receive_DMA+0x24>
 80054e2:	88fb      	ldrh	r3, [r7, #6]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d101      	bne.n	80054ec <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 80054e8:	2301      	movs	r3, #1
 80054ea:	e030      	b.n	800554e <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	2200      	movs	r2, #0
 80054f0:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	4a18      	ldr	r2, [pc, #96]	@ (8005558 <HAL_UART_Receive_DMA+0x94>)
 80054f8:	4293      	cmp	r3, r2
 80054fa:	d01f      	beq.n	800553c <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	685b      	ldr	r3, [r3, #4]
 8005502:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005506:	2b00      	cmp	r3, #0
 8005508:	d018      	beq.n	800553c <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005510:	697b      	ldr	r3, [r7, #20]
 8005512:	e853 3f00 	ldrex	r3, [r3]
 8005516:	613b      	str	r3, [r7, #16]
   return(result);
 8005518:	693b      	ldr	r3, [r7, #16]
 800551a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800551e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	461a      	mov	r2, r3
 8005526:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005528:	623b      	str	r3, [r7, #32]
 800552a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800552c:	69f9      	ldr	r1, [r7, #28]
 800552e:	6a3a      	ldr	r2, [r7, #32]
 8005530:	e841 2300 	strex	r3, r2, [r1]
 8005534:	61bb      	str	r3, [r7, #24]
   return(result);
 8005536:	69bb      	ldr	r3, [r7, #24]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d1e6      	bne.n	800550a <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800553c:	88fb      	ldrh	r3, [r7, #6]
 800553e:	461a      	mov	r2, r3
 8005540:	68b9      	ldr	r1, [r7, #8]
 8005542:	68f8      	ldr	r0, [r7, #12]
 8005544:	f000 ffa2 	bl	800648c <UART_Start_Receive_DMA>
 8005548:	4603      	mov	r3, r0
 800554a:	e000      	b.n	800554e <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800554c:	2302      	movs	r3, #2
  }
}
 800554e:	4618      	mov	r0, r3
 8005550:	3728      	adds	r7, #40	@ 0x28
 8005552:	46bd      	mov	sp, r7
 8005554:	bd80      	pop	{r7, pc}
 8005556:	bf00      	nop
 8005558:	40008000 	.word	0x40008000

0800555c <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 800555c:	b580      	push	{r7, lr}
 800555e:	b090      	sub	sp, #64	@ 0x40
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005568:	63fb      	str	r3, [r7, #60]	@ 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005570:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	689b      	ldr	r3, [r3, #8]
 8005578:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800557c:	2b80      	cmp	r3, #128	@ 0x80
 800557e:	d139      	bne.n	80055f4 <HAL_UART_DMAStop+0x98>
 8005580:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005582:	2b21      	cmp	r3, #33	@ 0x21
 8005584:	d136      	bne.n	80055f4 <HAL_UART_DMAStop+0x98>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	3308      	adds	r3, #8
 800558c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800558e:	6a3b      	ldr	r3, [r7, #32]
 8005590:	e853 3f00 	ldrex	r3, [r3]
 8005594:	61fb      	str	r3, [r7, #28]
   return(result);
 8005596:	69fb      	ldr	r3, [r7, #28]
 8005598:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800559c:	637b      	str	r3, [r7, #52]	@ 0x34
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	3308      	adds	r3, #8
 80055a4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80055a6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80055a8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055aa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80055ac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80055ae:	e841 2300 	strex	r3, r2, [r1]
 80055b2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80055b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d1e5      	bne.n	8005586 <HAL_UART_DMAStop+0x2a>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d015      	beq.n	80055ee <HAL_UART_DMAStop+0x92>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055c6:	4618      	mov	r0, r3
 80055c8:	f7fc ffa2 	bl	8002510 <HAL_DMA_Abort>
 80055cc:	4603      	mov	r3, r0
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d00d      	beq.n	80055ee <HAL_UART_DMAStop+0x92>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055d6:	4618      	mov	r0, r3
 80055d8:	f7fd f8c8 	bl	800276c <HAL_DMA_GetError>
 80055dc:	4603      	mov	r3, r0
 80055de:	2b20      	cmp	r3, #32
 80055e0:	d105      	bne.n	80055ee <HAL_UART_DMAStop+0x92>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2210      	movs	r2, #16
 80055e6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80055ea:	2303      	movs	r3, #3
 80055ec:	e044      	b.n	8005678 <HAL_UART_DMAStop+0x11c>
        }
      }
    }

    UART_EndTxTransfer(huart);
 80055ee:	6878      	ldr	r0, [r7, #4]
 80055f0:	f000 ffec 	bl	80065cc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	689b      	ldr	r3, [r3, #8]
 80055fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055fe:	2b40      	cmp	r3, #64	@ 0x40
 8005600:	d139      	bne.n	8005676 <HAL_UART_DMAStop+0x11a>
 8005602:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005604:	2b22      	cmp	r3, #34	@ 0x22
 8005606:	d136      	bne.n	8005676 <HAL_UART_DMAStop+0x11a>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	3308      	adds	r3, #8
 800560e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	e853 3f00 	ldrex	r3, [r3]
 8005616:	60bb      	str	r3, [r7, #8]
   return(result);
 8005618:	68bb      	ldr	r3, [r7, #8]
 800561a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800561e:	633b      	str	r3, [r7, #48]	@ 0x30
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	3308      	adds	r3, #8
 8005626:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005628:	61ba      	str	r2, [r7, #24]
 800562a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800562c:	6979      	ldr	r1, [r7, #20]
 800562e:	69ba      	ldr	r2, [r7, #24]
 8005630:	e841 2300 	strex	r3, r2, [r1]
 8005634:	613b      	str	r3, [r7, #16]
   return(result);
 8005636:	693b      	ldr	r3, [r7, #16]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d1e5      	bne.n	8005608 <HAL_UART_DMAStop+0xac>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005640:	2b00      	cmp	r3, #0
 8005642:	d015      	beq.n	8005670 <HAL_UART_DMAStop+0x114>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005648:	4618      	mov	r0, r3
 800564a:	f7fc ff61 	bl	8002510 <HAL_DMA_Abort>
 800564e:	4603      	mov	r3, r0
 8005650:	2b00      	cmp	r3, #0
 8005652:	d00d      	beq.n	8005670 <HAL_UART_DMAStop+0x114>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005658:	4618      	mov	r0, r3
 800565a:	f7fd f887 	bl	800276c <HAL_DMA_GetError>
 800565e:	4603      	mov	r3, r0
 8005660:	2b20      	cmp	r3, #32
 8005662:	d105      	bne.n	8005670 <HAL_UART_DMAStop+0x114>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2210      	movs	r2, #16
 8005668:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800566c:	2303      	movs	r3, #3
 800566e:	e003      	b.n	8005678 <HAL_UART_DMAStop+0x11c>
        }
      }
    }

    UART_EndRxTransfer(huart);
 8005670:	6878      	ldr	r0, [r7, #4]
 8005672:	f000 ffd1 	bl	8006618 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8005676:	2300      	movs	r3, #0
}
 8005678:	4618      	mov	r0, r3
 800567a:	3740      	adds	r7, #64	@ 0x40
 800567c:	46bd      	mov	sp, r7
 800567e:	bd80      	pop	{r7, pc}

08005680 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b0ba      	sub	sp, #232	@ 0xe8
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	69db      	ldr	r3, [r3, #28]
 800568e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	689b      	ldr	r3, [r3, #8]
 80056a2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80056a6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80056aa:	f640 030f 	movw	r3, #2063	@ 0x80f
 80056ae:	4013      	ands	r3, r2
 80056b0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80056b4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d115      	bne.n	80056e8 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80056bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80056c0:	f003 0320 	and.w	r3, r3, #32
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d00f      	beq.n	80056e8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80056c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80056cc:	f003 0320 	and.w	r3, r3, #32
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d009      	beq.n	80056e8 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80056d8:	2b00      	cmp	r3, #0
 80056da:	f000 82ae 	beq.w	8005c3a <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80056e2:	6878      	ldr	r0, [r7, #4]
 80056e4:	4798      	blx	r3
      }
      return;
 80056e6:	e2a8      	b.n	8005c3a <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80056e8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	f000 8117 	beq.w	8005920 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80056f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80056f6:	f003 0301 	and.w	r3, r3, #1
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d106      	bne.n	800570c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80056fe:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8005702:	4b85      	ldr	r3, [pc, #532]	@ (8005918 <HAL_UART_IRQHandler+0x298>)
 8005704:	4013      	ands	r3, r2
 8005706:	2b00      	cmp	r3, #0
 8005708:	f000 810a 	beq.w	8005920 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800570c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005710:	f003 0301 	and.w	r3, r3, #1
 8005714:	2b00      	cmp	r3, #0
 8005716:	d011      	beq.n	800573c <HAL_UART_IRQHandler+0xbc>
 8005718:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800571c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005720:	2b00      	cmp	r3, #0
 8005722:	d00b      	beq.n	800573c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	2201      	movs	r2, #1
 800572a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005732:	f043 0201 	orr.w	r2, r3, #1
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800573c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005740:	f003 0302 	and.w	r3, r3, #2
 8005744:	2b00      	cmp	r3, #0
 8005746:	d011      	beq.n	800576c <HAL_UART_IRQHandler+0xec>
 8005748:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800574c:	f003 0301 	and.w	r3, r3, #1
 8005750:	2b00      	cmp	r3, #0
 8005752:	d00b      	beq.n	800576c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	2202      	movs	r2, #2
 800575a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005762:	f043 0204 	orr.w	r2, r3, #4
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800576c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005770:	f003 0304 	and.w	r3, r3, #4
 8005774:	2b00      	cmp	r3, #0
 8005776:	d011      	beq.n	800579c <HAL_UART_IRQHandler+0x11c>
 8005778:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800577c:	f003 0301 	and.w	r3, r3, #1
 8005780:	2b00      	cmp	r3, #0
 8005782:	d00b      	beq.n	800579c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	2204      	movs	r2, #4
 800578a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005792:	f043 0202 	orr.w	r2, r3, #2
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800579c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80057a0:	f003 0308 	and.w	r3, r3, #8
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d017      	beq.n	80057d8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80057a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80057ac:	f003 0320 	and.w	r3, r3, #32
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d105      	bne.n	80057c0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80057b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80057b8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d00b      	beq.n	80057d8 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	2208      	movs	r2, #8
 80057c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80057ce:	f043 0208 	orr.w	r2, r3, #8
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80057d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80057dc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d012      	beq.n	800580a <HAL_UART_IRQHandler+0x18a>
 80057e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80057e8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d00c      	beq.n	800580a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80057f8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005800:	f043 0220 	orr.w	r2, r3, #32
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005810:	2b00      	cmp	r3, #0
 8005812:	f000 8214 	beq.w	8005c3e <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005816:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800581a:	f003 0320 	and.w	r3, r3, #32
 800581e:	2b00      	cmp	r3, #0
 8005820:	d00d      	beq.n	800583e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005822:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005826:	f003 0320 	and.w	r3, r3, #32
 800582a:	2b00      	cmp	r3, #0
 800582c:	d007      	beq.n	800583e <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005832:	2b00      	cmp	r3, #0
 8005834:	d003      	beq.n	800583e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800583a:	6878      	ldr	r0, [r7, #4]
 800583c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005844:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	689b      	ldr	r3, [r3, #8]
 800584e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005852:	2b40      	cmp	r3, #64	@ 0x40
 8005854:	d005      	beq.n	8005862 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005856:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800585a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800585e:	2b00      	cmp	r3, #0
 8005860:	d04f      	beq.n	8005902 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005862:	6878      	ldr	r0, [r7, #4]
 8005864:	f000 fed8 	bl	8006618 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	689b      	ldr	r3, [r3, #8]
 800586e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005872:	2b40      	cmp	r3, #64	@ 0x40
 8005874:	d141      	bne.n	80058fa <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	3308      	adds	r3, #8
 800587c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005880:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005884:	e853 3f00 	ldrex	r3, [r3]
 8005888:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800588c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005890:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005894:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	3308      	adds	r3, #8
 800589e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80058a2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80058a6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058aa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80058ae:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80058b2:	e841 2300 	strex	r3, r2, [r1]
 80058b6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80058ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d1d9      	bne.n	8005876 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d013      	beq.n	80058f2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80058ce:	4a13      	ldr	r2, [pc, #76]	@ (800591c <HAL_UART_IRQHandler+0x29c>)
 80058d0:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80058d6:	4618      	mov	r0, r3
 80058d8:	f7fc fe58 	bl	800258c <HAL_DMA_Abort_IT>
 80058dc:	4603      	mov	r3, r0
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d017      	beq.n	8005912 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80058e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058e8:	687a      	ldr	r2, [r7, #4]
 80058ea:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80058ec:	4610      	mov	r0, r2
 80058ee:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058f0:	e00f      	b.n	8005912 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80058f2:	6878      	ldr	r0, [r7, #4]
 80058f4:	f000 f9d6 	bl	8005ca4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058f8:	e00b      	b.n	8005912 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80058fa:	6878      	ldr	r0, [r7, #4]
 80058fc:	f000 f9d2 	bl	8005ca4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005900:	e007      	b.n	8005912 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005902:	6878      	ldr	r0, [r7, #4]
 8005904:	f000 f9ce 	bl	8005ca4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2200      	movs	r2, #0
 800590c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8005910:	e195      	b.n	8005c3e <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005912:	bf00      	nop
    return;
 8005914:	e193      	b.n	8005c3e <HAL_UART_IRQHandler+0x5be>
 8005916:	bf00      	nop
 8005918:	04000120 	.word	0x04000120
 800591c:	0800697f 	.word	0x0800697f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005924:	2b01      	cmp	r3, #1
 8005926:	f040 814e 	bne.w	8005bc6 <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800592a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800592e:	f003 0310 	and.w	r3, r3, #16
 8005932:	2b00      	cmp	r3, #0
 8005934:	f000 8147 	beq.w	8005bc6 <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005938:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800593c:	f003 0310 	and.w	r3, r3, #16
 8005940:	2b00      	cmp	r3, #0
 8005942:	f000 8140 	beq.w	8005bc6 <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	2210      	movs	r2, #16
 800594c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	689b      	ldr	r3, [r3, #8]
 8005954:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005958:	2b40      	cmp	r3, #64	@ 0x40
 800595a:	f040 80b8 	bne.w	8005ace <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	685b      	ldr	r3, [r3, #4]
 8005966:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800596a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800596e:	2b00      	cmp	r3, #0
 8005970:	f000 8167 	beq.w	8005c42 <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800597a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800597e:	429a      	cmp	r2, r3
 8005980:	f080 815f 	bcs.w	8005c42 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800598a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f003 0320 	and.w	r3, r3, #32
 800599a:	2b00      	cmp	r3, #0
 800599c:	f040 8086 	bne.w	8005aac <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059a8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80059ac:	e853 3f00 	ldrex	r3, [r3]
 80059b0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80059b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80059b8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80059bc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	461a      	mov	r2, r3
 80059c6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80059ca:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80059ce:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059d2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80059d6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80059da:	e841 2300 	strex	r3, r2, [r1]
 80059de:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80059e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d1da      	bne.n	80059a0 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	3308      	adds	r3, #8
 80059f0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059f2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80059f4:	e853 3f00 	ldrex	r3, [r3]
 80059f8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80059fa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80059fc:	f023 0301 	bic.w	r3, r3, #1
 8005a00:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	3308      	adds	r3, #8
 8005a0a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005a0e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005a12:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a14:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005a16:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005a1a:	e841 2300 	strex	r3, r2, [r1]
 8005a1e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005a20:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d1e1      	bne.n	80059ea <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	3308      	adds	r3, #8
 8005a2c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a2e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005a30:	e853 3f00 	ldrex	r3, [r3]
 8005a34:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005a36:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005a38:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005a3c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	3308      	adds	r3, #8
 8005a46:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005a4a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005a4c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a4e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005a50:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005a52:	e841 2300 	strex	r3, r2, [r1]
 8005a56:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005a58:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d1e3      	bne.n	8005a26 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	2220      	movs	r2, #32
 8005a62:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2200      	movs	r2, #0
 8005a6a:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a72:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005a74:	e853 3f00 	ldrex	r3, [r3]
 8005a78:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005a7a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005a7c:	f023 0310 	bic.w	r3, r3, #16
 8005a80:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	461a      	mov	r2, r3
 8005a8a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005a8e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005a90:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a92:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005a94:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005a96:	e841 2300 	strex	r3, r2, [r1]
 8005a9a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005a9c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d1e4      	bne.n	8005a6c <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	f7fc fd32 	bl	8002510 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2202      	movs	r2, #2
 8005ab0:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005abe:	b29b      	uxth	r3, r3
 8005ac0:	1ad3      	subs	r3, r2, r3
 8005ac2:	b29b      	uxth	r3, r3
 8005ac4:	4619      	mov	r1, r3
 8005ac6:	6878      	ldr	r0, [r7, #4]
 8005ac8:	f000 f8f6 	bl	8005cb8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005acc:	e0b9      	b.n	8005c42 <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005ada:	b29b      	uxth	r3, r3
 8005adc:	1ad3      	subs	r3, r2, r3
 8005ade:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005ae8:	b29b      	uxth	r3, r3
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	f000 80ab 	beq.w	8005c46 <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 8005af0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	f000 80a6 	beq.w	8005c46 <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b02:	e853 3f00 	ldrex	r3, [r3]
 8005b06:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005b08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b0a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005b0e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	461a      	mov	r2, r3
 8005b18:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005b1c:	647b      	str	r3, [r7, #68]	@ 0x44
 8005b1e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b20:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005b22:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005b24:	e841 2300 	strex	r3, r2, [r1]
 8005b28:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005b2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d1e4      	bne.n	8005afa <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	3308      	adds	r3, #8
 8005b36:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b3a:	e853 3f00 	ldrex	r3, [r3]
 8005b3e:	623b      	str	r3, [r7, #32]
   return(result);
 8005b40:	6a3b      	ldr	r3, [r7, #32]
 8005b42:	f023 0301 	bic.w	r3, r3, #1
 8005b46:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	3308      	adds	r3, #8
 8005b50:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005b54:	633a      	str	r2, [r7, #48]	@ 0x30
 8005b56:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b58:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005b5a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005b5c:	e841 2300 	strex	r3, r2, [r1]
 8005b60:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005b62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d1e3      	bne.n	8005b30 <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2220      	movs	r2, #32
 8005b6c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2200      	movs	r2, #0
 8005b74:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	2200      	movs	r2, #0
 8005b7a:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b82:	693b      	ldr	r3, [r7, #16]
 8005b84:	e853 3f00 	ldrex	r3, [r3]
 8005b88:	60fb      	str	r3, [r7, #12]
   return(result);
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	f023 0310 	bic.w	r3, r3, #16
 8005b90:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	461a      	mov	r2, r3
 8005b9a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005b9e:	61fb      	str	r3, [r7, #28]
 8005ba0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ba2:	69b9      	ldr	r1, [r7, #24]
 8005ba4:	69fa      	ldr	r2, [r7, #28]
 8005ba6:	e841 2300 	strex	r3, r2, [r1]
 8005baa:	617b      	str	r3, [r7, #20]
   return(result);
 8005bac:	697b      	ldr	r3, [r7, #20]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d1e4      	bne.n	8005b7c <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2202      	movs	r2, #2
 8005bb6:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005bb8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005bbc:	4619      	mov	r1, r3
 8005bbe:	6878      	ldr	r0, [r7, #4]
 8005bc0:	f000 f87a 	bl	8005cb8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005bc4:	e03f      	b.n	8005c46 <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005bc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005bca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d00e      	beq.n	8005bf0 <HAL_UART_IRQHandler+0x570>
 8005bd2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005bd6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d008      	beq.n	8005bf0 <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8005be6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005be8:	6878      	ldr	r0, [r7, #4]
 8005bea:	f000 ff08 	bl	80069fe <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005bee:	e02d      	b.n	8005c4c <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005bf0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005bf4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d00e      	beq.n	8005c1a <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005bfc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005c00:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d008      	beq.n	8005c1a <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d01c      	beq.n	8005c4a <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005c14:	6878      	ldr	r0, [r7, #4]
 8005c16:	4798      	blx	r3
    }
    return;
 8005c18:	e017      	b.n	8005c4a <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005c1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d012      	beq.n	8005c4c <HAL_UART_IRQHandler+0x5cc>
 8005c26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005c2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d00c      	beq.n	8005c4c <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 8005c32:	6878      	ldr	r0, [r7, #4]
 8005c34:	f000 feb9 	bl	80069aa <UART_EndTransmit_IT>
    return;
 8005c38:	e008      	b.n	8005c4c <HAL_UART_IRQHandler+0x5cc>
      return;
 8005c3a:	bf00      	nop
 8005c3c:	e006      	b.n	8005c4c <HAL_UART_IRQHandler+0x5cc>
    return;
 8005c3e:	bf00      	nop
 8005c40:	e004      	b.n	8005c4c <HAL_UART_IRQHandler+0x5cc>
      return;
 8005c42:	bf00      	nop
 8005c44:	e002      	b.n	8005c4c <HAL_UART_IRQHandler+0x5cc>
      return;
 8005c46:	bf00      	nop
 8005c48:	e000      	b.n	8005c4c <HAL_UART_IRQHandler+0x5cc>
    return;
 8005c4a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8005c4c:	37e8      	adds	r7, #232	@ 0xe8
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	bd80      	pop	{r7, pc}
 8005c52:	bf00      	nop

08005c54 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005c54:	b480      	push	{r7}
 8005c56:	b083      	sub	sp, #12
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005c5c:	bf00      	nop
 8005c5e:	370c      	adds	r7, #12
 8005c60:	46bd      	mov	sp, r7
 8005c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c66:	4770      	bx	lr

08005c68 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005c68:	b480      	push	{r7}
 8005c6a:	b083      	sub	sp, #12
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8005c70:	bf00      	nop
 8005c72:	370c      	adds	r7, #12
 8005c74:	46bd      	mov	sp, r7
 8005c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7a:	4770      	bx	lr

08005c7c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005c7c:	b480      	push	{r7}
 8005c7e:	b083      	sub	sp, #12
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8005c84:	bf00      	nop
 8005c86:	370c      	adds	r7, #12
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8e:	4770      	bx	lr

08005c90 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005c90:	b480      	push	{r7}
 8005c92:	b083      	sub	sp, #12
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8005c98:	bf00      	nop
 8005c9a:	370c      	adds	r7, #12
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca2:	4770      	bx	lr

08005ca4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005ca4:	b480      	push	{r7}
 8005ca6:	b083      	sub	sp, #12
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005cac:	bf00      	nop
 8005cae:	370c      	adds	r7, #12
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb6:	4770      	bx	lr

08005cb8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005cb8:	b480      	push	{r7}
 8005cba:	b083      	sub	sp, #12
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
 8005cc0:	460b      	mov	r3, r1
 8005cc2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005cc4:	bf00      	nop
 8005cc6:	370c      	adds	r7, #12
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cce:	4770      	bx	lr

08005cd0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005cd0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005cd4:	b08a      	sub	sp, #40	@ 0x28
 8005cd6:	af00      	add	r7, sp, #0
 8005cd8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005cda:	2300      	movs	r3, #0
 8005cdc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	689a      	ldr	r2, [r3, #8]
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	691b      	ldr	r3, [r3, #16]
 8005ce8:	431a      	orrs	r2, r3
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	695b      	ldr	r3, [r3, #20]
 8005cee:	431a      	orrs	r2, r3
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	69db      	ldr	r3, [r3, #28]
 8005cf4:	4313      	orrs	r3, r2
 8005cf6:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	681a      	ldr	r2, [r3, #0]
 8005cfe:	4bb4      	ldr	r3, [pc, #720]	@ (8005fd0 <UART_SetConfig+0x300>)
 8005d00:	4013      	ands	r3, r2
 8005d02:	68fa      	ldr	r2, [r7, #12]
 8005d04:	6812      	ldr	r2, [r2, #0]
 8005d06:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005d08:	430b      	orrs	r3, r1
 8005d0a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	685b      	ldr	r3, [r3, #4]
 8005d12:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	68da      	ldr	r2, [r3, #12]
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	430a      	orrs	r2, r1
 8005d20:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	699b      	ldr	r3, [r3, #24]
 8005d26:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	4aa9      	ldr	r2, [pc, #676]	@ (8005fd4 <UART_SetConfig+0x304>)
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d004      	beq.n	8005d3c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	6a1b      	ldr	r3, [r3, #32]
 8005d36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d38:	4313      	orrs	r3, r2
 8005d3a:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	689b      	ldr	r3, [r3, #8]
 8005d42:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d4c:	430a      	orrs	r2, r1
 8005d4e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	4aa0      	ldr	r2, [pc, #640]	@ (8005fd8 <UART_SetConfig+0x308>)
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d126      	bne.n	8005da8 <UART_SetConfig+0xd8>
 8005d5a:	4ba0      	ldr	r3, [pc, #640]	@ (8005fdc <UART_SetConfig+0x30c>)
 8005d5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d60:	f003 0303 	and.w	r3, r3, #3
 8005d64:	2b03      	cmp	r3, #3
 8005d66:	d81b      	bhi.n	8005da0 <UART_SetConfig+0xd0>
 8005d68:	a201      	add	r2, pc, #4	@ (adr r2, 8005d70 <UART_SetConfig+0xa0>)
 8005d6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d6e:	bf00      	nop
 8005d70:	08005d81 	.word	0x08005d81
 8005d74:	08005d91 	.word	0x08005d91
 8005d78:	08005d89 	.word	0x08005d89
 8005d7c:	08005d99 	.word	0x08005d99
 8005d80:	2301      	movs	r3, #1
 8005d82:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d86:	e080      	b.n	8005e8a <UART_SetConfig+0x1ba>
 8005d88:	2302      	movs	r3, #2
 8005d8a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d8e:	e07c      	b.n	8005e8a <UART_SetConfig+0x1ba>
 8005d90:	2304      	movs	r3, #4
 8005d92:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d96:	e078      	b.n	8005e8a <UART_SetConfig+0x1ba>
 8005d98:	2308      	movs	r3, #8
 8005d9a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d9e:	e074      	b.n	8005e8a <UART_SetConfig+0x1ba>
 8005da0:	2310      	movs	r3, #16
 8005da2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005da6:	e070      	b.n	8005e8a <UART_SetConfig+0x1ba>
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	4a8c      	ldr	r2, [pc, #560]	@ (8005fe0 <UART_SetConfig+0x310>)
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d138      	bne.n	8005e24 <UART_SetConfig+0x154>
 8005db2:	4b8a      	ldr	r3, [pc, #552]	@ (8005fdc <UART_SetConfig+0x30c>)
 8005db4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005db8:	f003 030c 	and.w	r3, r3, #12
 8005dbc:	2b0c      	cmp	r3, #12
 8005dbe:	d82d      	bhi.n	8005e1c <UART_SetConfig+0x14c>
 8005dc0:	a201      	add	r2, pc, #4	@ (adr r2, 8005dc8 <UART_SetConfig+0xf8>)
 8005dc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dc6:	bf00      	nop
 8005dc8:	08005dfd 	.word	0x08005dfd
 8005dcc:	08005e1d 	.word	0x08005e1d
 8005dd0:	08005e1d 	.word	0x08005e1d
 8005dd4:	08005e1d 	.word	0x08005e1d
 8005dd8:	08005e0d 	.word	0x08005e0d
 8005ddc:	08005e1d 	.word	0x08005e1d
 8005de0:	08005e1d 	.word	0x08005e1d
 8005de4:	08005e1d 	.word	0x08005e1d
 8005de8:	08005e05 	.word	0x08005e05
 8005dec:	08005e1d 	.word	0x08005e1d
 8005df0:	08005e1d 	.word	0x08005e1d
 8005df4:	08005e1d 	.word	0x08005e1d
 8005df8:	08005e15 	.word	0x08005e15
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e02:	e042      	b.n	8005e8a <UART_SetConfig+0x1ba>
 8005e04:	2302      	movs	r3, #2
 8005e06:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e0a:	e03e      	b.n	8005e8a <UART_SetConfig+0x1ba>
 8005e0c:	2304      	movs	r3, #4
 8005e0e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e12:	e03a      	b.n	8005e8a <UART_SetConfig+0x1ba>
 8005e14:	2308      	movs	r3, #8
 8005e16:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e1a:	e036      	b.n	8005e8a <UART_SetConfig+0x1ba>
 8005e1c:	2310      	movs	r3, #16
 8005e1e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e22:	e032      	b.n	8005e8a <UART_SetConfig+0x1ba>
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	4a6a      	ldr	r2, [pc, #424]	@ (8005fd4 <UART_SetConfig+0x304>)
 8005e2a:	4293      	cmp	r3, r2
 8005e2c:	d12a      	bne.n	8005e84 <UART_SetConfig+0x1b4>
 8005e2e:	4b6b      	ldr	r3, [pc, #428]	@ (8005fdc <UART_SetConfig+0x30c>)
 8005e30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e34:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005e38:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005e3c:	d01a      	beq.n	8005e74 <UART_SetConfig+0x1a4>
 8005e3e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005e42:	d81b      	bhi.n	8005e7c <UART_SetConfig+0x1ac>
 8005e44:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005e48:	d00c      	beq.n	8005e64 <UART_SetConfig+0x194>
 8005e4a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005e4e:	d815      	bhi.n	8005e7c <UART_SetConfig+0x1ac>
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d003      	beq.n	8005e5c <UART_SetConfig+0x18c>
 8005e54:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005e58:	d008      	beq.n	8005e6c <UART_SetConfig+0x19c>
 8005e5a:	e00f      	b.n	8005e7c <UART_SetConfig+0x1ac>
 8005e5c:	2300      	movs	r3, #0
 8005e5e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e62:	e012      	b.n	8005e8a <UART_SetConfig+0x1ba>
 8005e64:	2302      	movs	r3, #2
 8005e66:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e6a:	e00e      	b.n	8005e8a <UART_SetConfig+0x1ba>
 8005e6c:	2304      	movs	r3, #4
 8005e6e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e72:	e00a      	b.n	8005e8a <UART_SetConfig+0x1ba>
 8005e74:	2308      	movs	r3, #8
 8005e76:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e7a:	e006      	b.n	8005e8a <UART_SetConfig+0x1ba>
 8005e7c:	2310      	movs	r3, #16
 8005e7e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e82:	e002      	b.n	8005e8a <UART_SetConfig+0x1ba>
 8005e84:	2310      	movs	r3, #16
 8005e86:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	4a51      	ldr	r2, [pc, #324]	@ (8005fd4 <UART_SetConfig+0x304>)
 8005e90:	4293      	cmp	r3, r2
 8005e92:	d17a      	bne.n	8005f8a <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005e94:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005e98:	2b08      	cmp	r3, #8
 8005e9a:	d824      	bhi.n	8005ee6 <UART_SetConfig+0x216>
 8005e9c:	a201      	add	r2, pc, #4	@ (adr r2, 8005ea4 <UART_SetConfig+0x1d4>)
 8005e9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ea2:	bf00      	nop
 8005ea4:	08005ec9 	.word	0x08005ec9
 8005ea8:	08005ee7 	.word	0x08005ee7
 8005eac:	08005ed1 	.word	0x08005ed1
 8005eb0:	08005ee7 	.word	0x08005ee7
 8005eb4:	08005ed7 	.word	0x08005ed7
 8005eb8:	08005ee7 	.word	0x08005ee7
 8005ebc:	08005ee7 	.word	0x08005ee7
 8005ec0:	08005ee7 	.word	0x08005ee7
 8005ec4:	08005edf 	.word	0x08005edf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ec8:	f7fd fd48 	bl	800395c <HAL_RCC_GetPCLK1Freq>
 8005ecc:	61f8      	str	r0, [r7, #28]
        break;
 8005ece:	e010      	b.n	8005ef2 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005ed0:	4b44      	ldr	r3, [pc, #272]	@ (8005fe4 <UART_SetConfig+0x314>)
 8005ed2:	61fb      	str	r3, [r7, #28]
        break;
 8005ed4:	e00d      	b.n	8005ef2 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005ed6:	f7fd fca9 	bl	800382c <HAL_RCC_GetSysClockFreq>
 8005eda:	61f8      	str	r0, [r7, #28]
        break;
 8005edc:	e009      	b.n	8005ef2 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005ede:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005ee2:	61fb      	str	r3, [r7, #28]
        break;
 8005ee4:	e005      	b.n	8005ef2 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005eea:	2301      	movs	r3, #1
 8005eec:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005ef0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005ef2:	69fb      	ldr	r3, [r7, #28]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	f000 8107 	beq.w	8006108 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	685a      	ldr	r2, [r3, #4]
 8005efe:	4613      	mov	r3, r2
 8005f00:	005b      	lsls	r3, r3, #1
 8005f02:	4413      	add	r3, r2
 8005f04:	69fa      	ldr	r2, [r7, #28]
 8005f06:	429a      	cmp	r2, r3
 8005f08:	d305      	bcc.n	8005f16 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	685b      	ldr	r3, [r3, #4]
 8005f0e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005f10:	69fa      	ldr	r2, [r7, #28]
 8005f12:	429a      	cmp	r2, r3
 8005f14:	d903      	bls.n	8005f1e <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8005f16:	2301      	movs	r3, #1
 8005f18:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005f1c:	e0f4      	b.n	8006108 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005f1e:	69fb      	ldr	r3, [r7, #28]
 8005f20:	2200      	movs	r2, #0
 8005f22:	461c      	mov	r4, r3
 8005f24:	4615      	mov	r5, r2
 8005f26:	f04f 0200 	mov.w	r2, #0
 8005f2a:	f04f 0300 	mov.w	r3, #0
 8005f2e:	022b      	lsls	r3, r5, #8
 8005f30:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005f34:	0222      	lsls	r2, r4, #8
 8005f36:	68f9      	ldr	r1, [r7, #12]
 8005f38:	6849      	ldr	r1, [r1, #4]
 8005f3a:	0849      	lsrs	r1, r1, #1
 8005f3c:	2000      	movs	r0, #0
 8005f3e:	4688      	mov	r8, r1
 8005f40:	4681      	mov	r9, r0
 8005f42:	eb12 0a08 	adds.w	sl, r2, r8
 8005f46:	eb43 0b09 	adc.w	fp, r3, r9
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	685b      	ldr	r3, [r3, #4]
 8005f4e:	2200      	movs	r2, #0
 8005f50:	603b      	str	r3, [r7, #0]
 8005f52:	607a      	str	r2, [r7, #4]
 8005f54:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005f58:	4650      	mov	r0, sl
 8005f5a:	4659      	mov	r1, fp
 8005f5c:	f7fa f9f0 	bl	8000340 <__aeabi_uldivmod>
 8005f60:	4602      	mov	r2, r0
 8005f62:	460b      	mov	r3, r1
 8005f64:	4613      	mov	r3, r2
 8005f66:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005f68:	69bb      	ldr	r3, [r7, #24]
 8005f6a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005f6e:	d308      	bcc.n	8005f82 <UART_SetConfig+0x2b2>
 8005f70:	69bb      	ldr	r3, [r7, #24]
 8005f72:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005f76:	d204      	bcs.n	8005f82 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	69ba      	ldr	r2, [r7, #24]
 8005f7e:	60da      	str	r2, [r3, #12]
 8005f80:	e0c2      	b.n	8006108 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8005f82:	2301      	movs	r3, #1
 8005f84:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005f88:	e0be      	b.n	8006108 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	69db      	ldr	r3, [r3, #28]
 8005f8e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005f92:	d16a      	bne.n	800606a <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8005f94:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005f98:	2b08      	cmp	r3, #8
 8005f9a:	d834      	bhi.n	8006006 <UART_SetConfig+0x336>
 8005f9c:	a201      	add	r2, pc, #4	@ (adr r2, 8005fa4 <UART_SetConfig+0x2d4>)
 8005f9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fa2:	bf00      	nop
 8005fa4:	08005fc9 	.word	0x08005fc9
 8005fa8:	08005fe9 	.word	0x08005fe9
 8005fac:	08005ff1 	.word	0x08005ff1
 8005fb0:	08006007 	.word	0x08006007
 8005fb4:	08005ff7 	.word	0x08005ff7
 8005fb8:	08006007 	.word	0x08006007
 8005fbc:	08006007 	.word	0x08006007
 8005fc0:	08006007 	.word	0x08006007
 8005fc4:	08005fff 	.word	0x08005fff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005fc8:	f7fd fcc8 	bl	800395c <HAL_RCC_GetPCLK1Freq>
 8005fcc:	61f8      	str	r0, [r7, #28]
        break;
 8005fce:	e020      	b.n	8006012 <UART_SetConfig+0x342>
 8005fd0:	efff69f3 	.word	0xefff69f3
 8005fd4:	40008000 	.word	0x40008000
 8005fd8:	40013800 	.word	0x40013800
 8005fdc:	40021000 	.word	0x40021000
 8005fe0:	40004400 	.word	0x40004400
 8005fe4:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005fe8:	f7fd fcce 	bl	8003988 <HAL_RCC_GetPCLK2Freq>
 8005fec:	61f8      	str	r0, [r7, #28]
        break;
 8005fee:	e010      	b.n	8006012 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005ff0:	4b4c      	ldr	r3, [pc, #304]	@ (8006124 <UART_SetConfig+0x454>)
 8005ff2:	61fb      	str	r3, [r7, #28]
        break;
 8005ff4:	e00d      	b.n	8006012 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005ff6:	f7fd fc19 	bl	800382c <HAL_RCC_GetSysClockFreq>
 8005ffa:	61f8      	str	r0, [r7, #28]
        break;
 8005ffc:	e009      	b.n	8006012 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005ffe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006002:	61fb      	str	r3, [r7, #28]
        break;
 8006004:	e005      	b.n	8006012 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8006006:	2300      	movs	r3, #0
 8006008:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800600a:	2301      	movs	r3, #1
 800600c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006010:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006012:	69fb      	ldr	r3, [r7, #28]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d077      	beq.n	8006108 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006018:	69fb      	ldr	r3, [r7, #28]
 800601a:	005a      	lsls	r2, r3, #1
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	685b      	ldr	r3, [r3, #4]
 8006020:	085b      	lsrs	r3, r3, #1
 8006022:	441a      	add	r2, r3
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	685b      	ldr	r3, [r3, #4]
 8006028:	fbb2 f3f3 	udiv	r3, r2, r3
 800602c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800602e:	69bb      	ldr	r3, [r7, #24]
 8006030:	2b0f      	cmp	r3, #15
 8006032:	d916      	bls.n	8006062 <UART_SetConfig+0x392>
 8006034:	69bb      	ldr	r3, [r7, #24]
 8006036:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800603a:	d212      	bcs.n	8006062 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800603c:	69bb      	ldr	r3, [r7, #24]
 800603e:	b29b      	uxth	r3, r3
 8006040:	f023 030f 	bic.w	r3, r3, #15
 8006044:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006046:	69bb      	ldr	r3, [r7, #24]
 8006048:	085b      	lsrs	r3, r3, #1
 800604a:	b29b      	uxth	r3, r3
 800604c:	f003 0307 	and.w	r3, r3, #7
 8006050:	b29a      	uxth	r2, r3
 8006052:	8afb      	ldrh	r3, [r7, #22]
 8006054:	4313      	orrs	r3, r2
 8006056:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	8afa      	ldrh	r2, [r7, #22]
 800605e:	60da      	str	r2, [r3, #12]
 8006060:	e052      	b.n	8006108 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8006062:	2301      	movs	r3, #1
 8006064:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006068:	e04e      	b.n	8006108 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 800606a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800606e:	2b08      	cmp	r3, #8
 8006070:	d827      	bhi.n	80060c2 <UART_SetConfig+0x3f2>
 8006072:	a201      	add	r2, pc, #4	@ (adr r2, 8006078 <UART_SetConfig+0x3a8>)
 8006074:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006078:	0800609d 	.word	0x0800609d
 800607c:	080060a5 	.word	0x080060a5
 8006080:	080060ad 	.word	0x080060ad
 8006084:	080060c3 	.word	0x080060c3
 8006088:	080060b3 	.word	0x080060b3
 800608c:	080060c3 	.word	0x080060c3
 8006090:	080060c3 	.word	0x080060c3
 8006094:	080060c3 	.word	0x080060c3
 8006098:	080060bb 	.word	0x080060bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800609c:	f7fd fc5e 	bl	800395c <HAL_RCC_GetPCLK1Freq>
 80060a0:	61f8      	str	r0, [r7, #28]
        break;
 80060a2:	e014      	b.n	80060ce <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80060a4:	f7fd fc70 	bl	8003988 <HAL_RCC_GetPCLK2Freq>
 80060a8:	61f8      	str	r0, [r7, #28]
        break;
 80060aa:	e010      	b.n	80060ce <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80060ac:	4b1d      	ldr	r3, [pc, #116]	@ (8006124 <UART_SetConfig+0x454>)
 80060ae:	61fb      	str	r3, [r7, #28]
        break;
 80060b0:	e00d      	b.n	80060ce <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80060b2:	f7fd fbbb 	bl	800382c <HAL_RCC_GetSysClockFreq>
 80060b6:	61f8      	str	r0, [r7, #28]
        break;
 80060b8:	e009      	b.n	80060ce <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80060ba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80060be:	61fb      	str	r3, [r7, #28]
        break;
 80060c0:	e005      	b.n	80060ce <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 80060c2:	2300      	movs	r3, #0
 80060c4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80060c6:	2301      	movs	r3, #1
 80060c8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80060cc:	bf00      	nop
    }

    if (pclk != 0U)
 80060ce:	69fb      	ldr	r3, [r7, #28]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d019      	beq.n	8006108 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	685b      	ldr	r3, [r3, #4]
 80060d8:	085a      	lsrs	r2, r3, #1
 80060da:	69fb      	ldr	r3, [r7, #28]
 80060dc:	441a      	add	r2, r3
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	685b      	ldr	r3, [r3, #4]
 80060e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80060e6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80060e8:	69bb      	ldr	r3, [r7, #24]
 80060ea:	2b0f      	cmp	r3, #15
 80060ec:	d909      	bls.n	8006102 <UART_SetConfig+0x432>
 80060ee:	69bb      	ldr	r3, [r7, #24]
 80060f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80060f4:	d205      	bcs.n	8006102 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80060f6:	69bb      	ldr	r3, [r7, #24]
 80060f8:	b29a      	uxth	r2, r3
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	60da      	str	r2, [r3, #12]
 8006100:	e002      	b.n	8006108 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8006102:	2301      	movs	r3, #1
 8006104:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	2200      	movs	r2, #0
 800610c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	2200      	movs	r2, #0
 8006112:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8006114:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8006118:	4618      	mov	r0, r3
 800611a:	3728      	adds	r7, #40	@ 0x28
 800611c:	46bd      	mov	sp, r7
 800611e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006122:	bf00      	nop
 8006124:	00f42400 	.word	0x00f42400

08006128 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006128:	b480      	push	{r7}
 800612a:	b083      	sub	sp, #12
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006134:	f003 0308 	and.w	r3, r3, #8
 8006138:	2b00      	cmp	r3, #0
 800613a:	d00a      	beq.n	8006152 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	685b      	ldr	r3, [r3, #4]
 8006142:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	430a      	orrs	r2, r1
 8006150:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006156:	f003 0301 	and.w	r3, r3, #1
 800615a:	2b00      	cmp	r3, #0
 800615c:	d00a      	beq.n	8006174 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	685b      	ldr	r3, [r3, #4]
 8006164:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	430a      	orrs	r2, r1
 8006172:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006178:	f003 0302 	and.w	r3, r3, #2
 800617c:	2b00      	cmp	r3, #0
 800617e:	d00a      	beq.n	8006196 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	685b      	ldr	r3, [r3, #4]
 8006186:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	430a      	orrs	r2, r1
 8006194:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800619a:	f003 0304 	and.w	r3, r3, #4
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d00a      	beq.n	80061b8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	685b      	ldr	r3, [r3, #4]
 80061a8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	430a      	orrs	r2, r1
 80061b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061bc:	f003 0310 	and.w	r3, r3, #16
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d00a      	beq.n	80061da <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	689b      	ldr	r3, [r3, #8]
 80061ca:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	430a      	orrs	r2, r1
 80061d8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061de:	f003 0320 	and.w	r3, r3, #32
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d00a      	beq.n	80061fc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	689b      	ldr	r3, [r3, #8]
 80061ec:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	430a      	orrs	r2, r1
 80061fa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006200:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006204:	2b00      	cmp	r3, #0
 8006206:	d01a      	beq.n	800623e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	685b      	ldr	r3, [r3, #4]
 800620e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	430a      	orrs	r2, r1
 800621c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006222:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006226:	d10a      	bne.n	800623e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	685b      	ldr	r3, [r3, #4]
 800622e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	430a      	orrs	r2, r1
 800623c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006242:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006246:	2b00      	cmp	r3, #0
 8006248:	d00a      	beq.n	8006260 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	685b      	ldr	r3, [r3, #4]
 8006250:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	430a      	orrs	r2, r1
 800625e:	605a      	str	r2, [r3, #4]
  }
}
 8006260:	bf00      	nop
 8006262:	370c      	adds	r7, #12
 8006264:	46bd      	mov	sp, r7
 8006266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626a:	4770      	bx	lr

0800626c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b098      	sub	sp, #96	@ 0x60
 8006270:	af02      	add	r7, sp, #8
 8006272:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2200      	movs	r2, #0
 8006278:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800627c:	f7fb ff42 	bl	8002104 <HAL_GetTick>
 8006280:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f003 0308 	and.w	r3, r3, #8
 800628c:	2b08      	cmp	r3, #8
 800628e:	d12e      	bne.n	80062ee <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006290:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006294:	9300      	str	r3, [sp, #0]
 8006296:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006298:	2200      	movs	r2, #0
 800629a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800629e:	6878      	ldr	r0, [r7, #4]
 80062a0:	f000 f88c 	bl	80063bc <UART_WaitOnFlagUntilTimeout>
 80062a4:	4603      	mov	r3, r0
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d021      	beq.n	80062ee <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062b2:	e853 3f00 	ldrex	r3, [r3]
 80062b6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80062b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062ba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80062be:	653b      	str	r3, [r7, #80]	@ 0x50
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	461a      	mov	r2, r3
 80062c6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80062c8:	647b      	str	r3, [r7, #68]	@ 0x44
 80062ca:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062cc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80062ce:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80062d0:	e841 2300 	strex	r3, r2, [r1]
 80062d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80062d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d1e6      	bne.n	80062aa <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2220      	movs	r2, #32
 80062e0:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	2200      	movs	r2, #0
 80062e6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80062ea:	2303      	movs	r3, #3
 80062ec:	e062      	b.n	80063b4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	f003 0304 	and.w	r3, r3, #4
 80062f8:	2b04      	cmp	r3, #4
 80062fa:	d149      	bne.n	8006390 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80062fc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006300:	9300      	str	r3, [sp, #0]
 8006302:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006304:	2200      	movs	r2, #0
 8006306:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800630a:	6878      	ldr	r0, [r7, #4]
 800630c:	f000 f856 	bl	80063bc <UART_WaitOnFlagUntilTimeout>
 8006310:	4603      	mov	r3, r0
 8006312:	2b00      	cmp	r3, #0
 8006314:	d03c      	beq.n	8006390 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800631c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800631e:	e853 3f00 	ldrex	r3, [r3]
 8006322:	623b      	str	r3, [r7, #32]
   return(result);
 8006324:	6a3b      	ldr	r3, [r7, #32]
 8006326:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800632a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	461a      	mov	r2, r3
 8006332:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006334:	633b      	str	r3, [r7, #48]	@ 0x30
 8006336:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006338:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800633a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800633c:	e841 2300 	strex	r3, r2, [r1]
 8006340:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006342:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006344:	2b00      	cmp	r3, #0
 8006346:	d1e6      	bne.n	8006316 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	3308      	adds	r3, #8
 800634e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006350:	693b      	ldr	r3, [r7, #16]
 8006352:	e853 3f00 	ldrex	r3, [r3]
 8006356:	60fb      	str	r3, [r7, #12]
   return(result);
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	f023 0301 	bic.w	r3, r3, #1
 800635e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	3308      	adds	r3, #8
 8006366:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006368:	61fa      	str	r2, [r7, #28]
 800636a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800636c:	69b9      	ldr	r1, [r7, #24]
 800636e:	69fa      	ldr	r2, [r7, #28]
 8006370:	e841 2300 	strex	r3, r2, [r1]
 8006374:	617b      	str	r3, [r7, #20]
   return(result);
 8006376:	697b      	ldr	r3, [r7, #20]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d1e5      	bne.n	8006348 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2220      	movs	r2, #32
 8006380:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2200      	movs	r2, #0
 8006388:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800638c:	2303      	movs	r3, #3
 800638e:	e011      	b.n	80063b4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2220      	movs	r2, #32
 8006394:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	2220      	movs	r2, #32
 800639a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	2200      	movs	r2, #0
 80063a2:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2200      	movs	r2, #0
 80063a8:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	2200      	movs	r2, #0
 80063ae:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80063b2:	2300      	movs	r3, #0
}
 80063b4:	4618      	mov	r0, r3
 80063b6:	3758      	adds	r7, #88	@ 0x58
 80063b8:	46bd      	mov	sp, r7
 80063ba:	bd80      	pop	{r7, pc}

080063bc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80063bc:	b580      	push	{r7, lr}
 80063be:	b084      	sub	sp, #16
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	60f8      	str	r0, [r7, #12]
 80063c4:	60b9      	str	r1, [r7, #8]
 80063c6:	603b      	str	r3, [r7, #0]
 80063c8:	4613      	mov	r3, r2
 80063ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80063cc:	e049      	b.n	8006462 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80063ce:	69bb      	ldr	r3, [r7, #24]
 80063d0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80063d4:	d045      	beq.n	8006462 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80063d6:	f7fb fe95 	bl	8002104 <HAL_GetTick>
 80063da:	4602      	mov	r2, r0
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	1ad3      	subs	r3, r2, r3
 80063e0:	69ba      	ldr	r2, [r7, #24]
 80063e2:	429a      	cmp	r2, r3
 80063e4:	d302      	bcc.n	80063ec <UART_WaitOnFlagUntilTimeout+0x30>
 80063e6:	69bb      	ldr	r3, [r7, #24]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d101      	bne.n	80063f0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80063ec:	2303      	movs	r3, #3
 80063ee:	e048      	b.n	8006482 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f003 0304 	and.w	r3, r3, #4
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d031      	beq.n	8006462 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	69db      	ldr	r3, [r3, #28]
 8006404:	f003 0308 	and.w	r3, r3, #8
 8006408:	2b08      	cmp	r3, #8
 800640a:	d110      	bne.n	800642e <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	2208      	movs	r2, #8
 8006412:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006414:	68f8      	ldr	r0, [r7, #12]
 8006416:	f000 f8ff 	bl	8006618 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	2208      	movs	r2, #8
 800641e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	2200      	movs	r2, #0
 8006426:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800642a:	2301      	movs	r3, #1
 800642c:	e029      	b.n	8006482 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	69db      	ldr	r3, [r3, #28]
 8006434:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006438:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800643c:	d111      	bne.n	8006462 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006446:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006448:	68f8      	ldr	r0, [r7, #12]
 800644a:	f000 f8e5 	bl	8006618 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	2220      	movs	r2, #32
 8006452:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	2200      	movs	r2, #0
 800645a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800645e:	2303      	movs	r3, #3
 8006460:	e00f      	b.n	8006482 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	69da      	ldr	r2, [r3, #28]
 8006468:	68bb      	ldr	r3, [r7, #8]
 800646a:	4013      	ands	r3, r2
 800646c:	68ba      	ldr	r2, [r7, #8]
 800646e:	429a      	cmp	r2, r3
 8006470:	bf0c      	ite	eq
 8006472:	2301      	moveq	r3, #1
 8006474:	2300      	movne	r3, #0
 8006476:	b2db      	uxtb	r3, r3
 8006478:	461a      	mov	r2, r3
 800647a:	79fb      	ldrb	r3, [r7, #7]
 800647c:	429a      	cmp	r2, r3
 800647e:	d0a6      	beq.n	80063ce <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006480:	2300      	movs	r3, #0
}
 8006482:	4618      	mov	r0, r3
 8006484:	3710      	adds	r7, #16
 8006486:	46bd      	mov	sp, r7
 8006488:	bd80      	pop	{r7, pc}
	...

0800648c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800648c:	b580      	push	{r7, lr}
 800648e:	b096      	sub	sp, #88	@ 0x58
 8006490:	af00      	add	r7, sp, #0
 8006492:	60f8      	str	r0, [r7, #12]
 8006494:	60b9      	str	r1, [r7, #8]
 8006496:	4613      	mov	r3, r2
 8006498:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	68ba      	ldr	r2, [r7, #8]
 800649e:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	88fa      	ldrh	r2, [r7, #6]
 80064a4:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	2200      	movs	r2, #0
 80064ac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	2222      	movs	r2, #34	@ 0x22
 80064b4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d028      	beq.n	8006512 <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80064c4:	4a3e      	ldr	r2, [pc, #248]	@ (80065c0 <UART_Start_Receive_DMA+0x134>)
 80064c6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80064cc:	4a3d      	ldr	r2, [pc, #244]	@ (80065c4 <UART_Start_Receive_DMA+0x138>)
 80064ce:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80064d4:	4a3c      	ldr	r2, [pc, #240]	@ (80065c8 <UART_Start_Receive_DMA+0x13c>)
 80064d6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80064dc:	2200      	movs	r2, #0
 80064de:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	3324      	adds	r3, #36	@ 0x24
 80064ea:	4619      	mov	r1, r3
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064f0:	461a      	mov	r2, r3
 80064f2:	88fb      	ldrh	r3, [r7, #6]
 80064f4:	f7fb ffac 	bl	8002450 <HAL_DMA_Start_IT>
 80064f8:	4603      	mov	r3, r0
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d009      	beq.n	8006512 <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	2210      	movs	r2, #16
 8006502:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	2220      	movs	r2, #32
 800650a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 800650e:	2301      	movs	r3, #1
 8006510:	e051      	b.n	80065b6 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	691b      	ldr	r3, [r3, #16]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d018      	beq.n	800654c <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006520:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006522:	e853 3f00 	ldrex	r3, [r3]
 8006526:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006528:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800652a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800652e:	657b      	str	r3, [r7, #84]	@ 0x54
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	461a      	mov	r2, r3
 8006536:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006538:	64bb      	str	r3, [r7, #72]	@ 0x48
 800653a:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800653c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800653e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006540:	e841 2300 	strex	r3, r2, [r1]
 8006544:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8006546:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006548:	2b00      	cmp	r3, #0
 800654a:	d1e6      	bne.n	800651a <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	3308      	adds	r3, #8
 8006552:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006554:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006556:	e853 3f00 	ldrex	r3, [r3]
 800655a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800655c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800655e:	f043 0301 	orr.w	r3, r3, #1
 8006562:	653b      	str	r3, [r7, #80]	@ 0x50
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	3308      	adds	r3, #8
 800656a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800656c:	637a      	str	r2, [r7, #52]	@ 0x34
 800656e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006570:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006572:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006574:	e841 2300 	strex	r3, r2, [r1]
 8006578:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800657a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800657c:	2b00      	cmp	r3, #0
 800657e:	d1e5      	bne.n	800654c <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	3308      	adds	r3, #8
 8006586:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006588:	697b      	ldr	r3, [r7, #20]
 800658a:	e853 3f00 	ldrex	r3, [r3]
 800658e:	613b      	str	r3, [r7, #16]
   return(result);
 8006590:	693b      	ldr	r3, [r7, #16]
 8006592:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006596:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	3308      	adds	r3, #8
 800659e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80065a0:	623a      	str	r2, [r7, #32]
 80065a2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065a4:	69f9      	ldr	r1, [r7, #28]
 80065a6:	6a3a      	ldr	r2, [r7, #32]
 80065a8:	e841 2300 	strex	r3, r2, [r1]
 80065ac:	61bb      	str	r3, [r7, #24]
   return(result);
 80065ae:	69bb      	ldr	r3, [r7, #24]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d1e5      	bne.n	8006580 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 80065b4:	2300      	movs	r3, #0
}
 80065b6:	4618      	mov	r0, r3
 80065b8:	3758      	adds	r7, #88	@ 0x58
 80065ba:	46bd      	mov	sp, r7
 80065bc:	bd80      	pop	{r7, pc}
 80065be:	bf00      	nop
 80065c0:	08006797 	.word	0x08006797
 80065c4:	080068c3 	.word	0x080068c3
 80065c8:	08006901 	.word	0x08006901

080065cc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80065cc:	b480      	push	{r7}
 80065ce:	b089      	sub	sp, #36	@ 0x24
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	e853 3f00 	ldrex	r3, [r3]
 80065e0:	60bb      	str	r3, [r7, #8]
   return(result);
 80065e2:	68bb      	ldr	r3, [r7, #8]
 80065e4:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80065e8:	61fb      	str	r3, [r7, #28]
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	461a      	mov	r2, r3
 80065f0:	69fb      	ldr	r3, [r7, #28]
 80065f2:	61bb      	str	r3, [r7, #24]
 80065f4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065f6:	6979      	ldr	r1, [r7, #20]
 80065f8:	69ba      	ldr	r2, [r7, #24]
 80065fa:	e841 2300 	strex	r3, r2, [r1]
 80065fe:	613b      	str	r3, [r7, #16]
   return(result);
 8006600:	693b      	ldr	r3, [r7, #16]
 8006602:	2b00      	cmp	r3, #0
 8006604:	d1e6      	bne.n	80065d4 <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	2220      	movs	r2, #32
 800660a:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 800660c:	bf00      	nop
 800660e:	3724      	adds	r7, #36	@ 0x24
 8006610:	46bd      	mov	sp, r7
 8006612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006616:	4770      	bx	lr

08006618 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006618:	b480      	push	{r7}
 800661a:	b095      	sub	sp, #84	@ 0x54
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006626:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006628:	e853 3f00 	ldrex	r3, [r3]
 800662c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800662e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006630:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006634:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	461a      	mov	r2, r3
 800663c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800663e:	643b      	str	r3, [r7, #64]	@ 0x40
 8006640:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006642:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006644:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006646:	e841 2300 	strex	r3, r2, [r1]
 800664a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800664c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800664e:	2b00      	cmp	r3, #0
 8006650:	d1e6      	bne.n	8006620 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	3308      	adds	r3, #8
 8006658:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800665a:	6a3b      	ldr	r3, [r7, #32]
 800665c:	e853 3f00 	ldrex	r3, [r3]
 8006660:	61fb      	str	r3, [r7, #28]
   return(result);
 8006662:	69fb      	ldr	r3, [r7, #28]
 8006664:	f023 0301 	bic.w	r3, r3, #1
 8006668:	64bb      	str	r3, [r7, #72]	@ 0x48
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	3308      	adds	r3, #8
 8006670:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006672:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006674:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006676:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006678:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800667a:	e841 2300 	strex	r3, r2, [r1]
 800667e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006680:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006682:	2b00      	cmp	r3, #0
 8006684:	d1e5      	bne.n	8006652 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800668a:	2b01      	cmp	r3, #1
 800668c:	d118      	bne.n	80066c0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	e853 3f00 	ldrex	r3, [r3]
 800669a:	60bb      	str	r3, [r7, #8]
   return(result);
 800669c:	68bb      	ldr	r3, [r7, #8]
 800669e:	f023 0310 	bic.w	r3, r3, #16
 80066a2:	647b      	str	r3, [r7, #68]	@ 0x44
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	461a      	mov	r2, r3
 80066aa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80066ac:	61bb      	str	r3, [r7, #24]
 80066ae:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066b0:	6979      	ldr	r1, [r7, #20]
 80066b2:	69ba      	ldr	r2, [r7, #24]
 80066b4:	e841 2300 	strex	r3, r2, [r1]
 80066b8:	613b      	str	r3, [r7, #16]
   return(result);
 80066ba:	693b      	ldr	r3, [r7, #16]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d1e6      	bne.n	800668e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2220      	movs	r2, #32
 80066c4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2200      	movs	r2, #0
 80066cc:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	2200      	movs	r2, #0
 80066d2:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80066d4:	bf00      	nop
 80066d6:	3754      	adds	r7, #84	@ 0x54
 80066d8:	46bd      	mov	sp, r7
 80066da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066de:	4770      	bx	lr

080066e0 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80066e0:	b580      	push	{r7, lr}
 80066e2:	b090      	sub	sp, #64	@ 0x40
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066ec:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f003 0320 	and.w	r3, r3, #32
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d137      	bne.n	800676c <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 80066fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80066fe:	2200      	movs	r2, #0
 8006700:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006704:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	3308      	adds	r3, #8
 800670a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800670c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800670e:	e853 3f00 	ldrex	r3, [r3]
 8006712:	623b      	str	r3, [r7, #32]
   return(result);
 8006714:	6a3b      	ldr	r3, [r7, #32]
 8006716:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800671a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800671c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	3308      	adds	r3, #8
 8006722:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006724:	633a      	str	r2, [r7, #48]	@ 0x30
 8006726:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006728:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800672a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800672c:	e841 2300 	strex	r3, r2, [r1]
 8006730:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006732:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006734:	2b00      	cmp	r3, #0
 8006736:	d1e5      	bne.n	8006704 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006738:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800673e:	693b      	ldr	r3, [r7, #16]
 8006740:	e853 3f00 	ldrex	r3, [r3]
 8006744:	60fb      	str	r3, [r7, #12]
   return(result);
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800674c:	637b      	str	r3, [r7, #52]	@ 0x34
 800674e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	461a      	mov	r2, r3
 8006754:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006756:	61fb      	str	r3, [r7, #28]
 8006758:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800675a:	69b9      	ldr	r1, [r7, #24]
 800675c:	69fa      	ldr	r2, [r7, #28]
 800675e:	e841 2300 	strex	r3, r2, [r1]
 8006762:	617b      	str	r3, [r7, #20]
   return(result);
 8006764:	697b      	ldr	r3, [r7, #20]
 8006766:	2b00      	cmp	r3, #0
 8006768:	d1e6      	bne.n	8006738 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800676a:	e002      	b.n	8006772 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800676c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800676e:	f7ff fa71 	bl	8005c54 <HAL_UART_TxCpltCallback>
}
 8006772:	bf00      	nop
 8006774:	3740      	adds	r7, #64	@ 0x40
 8006776:	46bd      	mov	sp, r7
 8006778:	bd80      	pop	{r7, pc}

0800677a <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800677a:	b580      	push	{r7, lr}
 800677c:	b084      	sub	sp, #16
 800677e:	af00      	add	r7, sp, #0
 8006780:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006786:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8006788:	68f8      	ldr	r0, [r7, #12]
 800678a:	f7ff fa6d 	bl	8005c68 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800678e:	bf00      	nop
 8006790:	3710      	adds	r7, #16
 8006792:	46bd      	mov	sp, r7
 8006794:	bd80      	pop	{r7, pc}

08006796 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006796:	b580      	push	{r7, lr}
 8006798:	b09c      	sub	sp, #112	@ 0x70
 800679a:	af00      	add	r7, sp, #0
 800679c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067a2:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	f003 0320 	and.w	r3, r3, #32
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d171      	bne.n	8006896 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 80067b2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80067b4:	2200      	movs	r2, #0
 80067b6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80067ba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80067c2:	e853 3f00 	ldrex	r3, [r3]
 80067c6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80067c8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80067ca:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80067ce:	66bb      	str	r3, [r7, #104]	@ 0x68
 80067d0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	461a      	mov	r2, r3
 80067d6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80067d8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80067da:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067dc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80067de:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80067e0:	e841 2300 	strex	r3, r2, [r1]
 80067e4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80067e6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d1e6      	bne.n	80067ba <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067ec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	3308      	adds	r3, #8
 80067f2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067f6:	e853 3f00 	ldrex	r3, [r3]
 80067fa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80067fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067fe:	f023 0301 	bic.w	r3, r3, #1
 8006802:	667b      	str	r3, [r7, #100]	@ 0x64
 8006804:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	3308      	adds	r3, #8
 800680a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800680c:	647a      	str	r2, [r7, #68]	@ 0x44
 800680e:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006810:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006812:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006814:	e841 2300 	strex	r3, r2, [r1]
 8006818:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800681a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800681c:	2b00      	cmp	r3, #0
 800681e:	d1e5      	bne.n	80067ec <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006820:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	3308      	adds	r3, #8
 8006826:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006828:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800682a:	e853 3f00 	ldrex	r3, [r3]
 800682e:	623b      	str	r3, [r7, #32]
   return(result);
 8006830:	6a3b      	ldr	r3, [r7, #32]
 8006832:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006836:	663b      	str	r3, [r7, #96]	@ 0x60
 8006838:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	3308      	adds	r3, #8
 800683e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006840:	633a      	str	r2, [r7, #48]	@ 0x30
 8006842:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006844:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006846:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006848:	e841 2300 	strex	r3, r2, [r1]
 800684c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800684e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006850:	2b00      	cmp	r3, #0
 8006852:	d1e5      	bne.n	8006820 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006854:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006856:	2220      	movs	r2, #32
 8006858:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800685c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800685e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006860:	2b01      	cmp	r3, #1
 8006862:	d118      	bne.n	8006896 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006864:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800686a:	693b      	ldr	r3, [r7, #16]
 800686c:	e853 3f00 	ldrex	r3, [r3]
 8006870:	60fb      	str	r3, [r7, #12]
   return(result);
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	f023 0310 	bic.w	r3, r3, #16
 8006878:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800687a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	461a      	mov	r2, r3
 8006880:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006882:	61fb      	str	r3, [r7, #28]
 8006884:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006886:	69b9      	ldr	r1, [r7, #24]
 8006888:	69fa      	ldr	r2, [r7, #28]
 800688a:	e841 2300 	strex	r3, r2, [r1]
 800688e:	617b      	str	r3, [r7, #20]
   return(result);
 8006890:	697b      	ldr	r3, [r7, #20]
 8006892:	2b00      	cmp	r3, #0
 8006894:	d1e6      	bne.n	8006864 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006896:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006898:	2200      	movs	r2, #0
 800689a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800689c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800689e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80068a0:	2b01      	cmp	r3, #1
 80068a2:	d107      	bne.n	80068b4 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80068a4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80068a6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80068aa:	4619      	mov	r1, r3
 80068ac:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80068ae:	f7ff fa03 	bl	8005cb8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80068b2:	e002      	b.n	80068ba <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80068b4:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80068b6:	f7ff f9e1 	bl	8005c7c <HAL_UART_RxCpltCallback>
}
 80068ba:	bf00      	nop
 80068bc:	3770      	adds	r7, #112	@ 0x70
 80068be:	46bd      	mov	sp, r7
 80068c0:	bd80      	pop	{r7, pc}

080068c2 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80068c2:	b580      	push	{r7, lr}
 80068c4:	b084      	sub	sp, #16
 80068c6:	af00      	add	r7, sp, #0
 80068c8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068ce:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	2201      	movs	r2, #1
 80068d4:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80068da:	2b01      	cmp	r3, #1
 80068dc:	d109      	bne.n	80068f2 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80068e4:	085b      	lsrs	r3, r3, #1
 80068e6:	b29b      	uxth	r3, r3
 80068e8:	4619      	mov	r1, r3
 80068ea:	68f8      	ldr	r0, [r7, #12]
 80068ec:	f7ff f9e4 	bl	8005cb8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80068f0:	e002      	b.n	80068f8 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 80068f2:	68f8      	ldr	r0, [r7, #12]
 80068f4:	f7ff f9cc 	bl	8005c90 <HAL_UART_RxHalfCpltCallback>
}
 80068f8:	bf00      	nop
 80068fa:	3710      	adds	r7, #16
 80068fc:	46bd      	mov	sp, r7
 80068fe:	bd80      	pop	{r7, pc}

08006900 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006900:	b580      	push	{r7, lr}
 8006902:	b086      	sub	sp, #24
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800690c:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800690e:	697b      	ldr	r3, [r7, #20]
 8006910:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006912:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8006914:	697b      	ldr	r3, [r7, #20]
 8006916:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800691a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800691c:	697b      	ldr	r3, [r7, #20]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	689b      	ldr	r3, [r3, #8]
 8006922:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006926:	2b80      	cmp	r3, #128	@ 0x80
 8006928:	d109      	bne.n	800693e <UART_DMAError+0x3e>
 800692a:	693b      	ldr	r3, [r7, #16]
 800692c:	2b21      	cmp	r3, #33	@ 0x21
 800692e:	d106      	bne.n	800693e <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8006930:	697b      	ldr	r3, [r7, #20]
 8006932:	2200      	movs	r2, #0
 8006934:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 8006938:	6978      	ldr	r0, [r7, #20]
 800693a:	f7ff fe47 	bl	80065cc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800693e:	697b      	ldr	r3, [r7, #20]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	689b      	ldr	r3, [r3, #8]
 8006944:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006948:	2b40      	cmp	r3, #64	@ 0x40
 800694a:	d109      	bne.n	8006960 <UART_DMAError+0x60>
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	2b22      	cmp	r3, #34	@ 0x22
 8006950:	d106      	bne.n	8006960 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8006952:	697b      	ldr	r3, [r7, #20]
 8006954:	2200      	movs	r2, #0
 8006956:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 800695a:	6978      	ldr	r0, [r7, #20]
 800695c:	f7ff fe5c 	bl	8006618 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006960:	697b      	ldr	r3, [r7, #20]
 8006962:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006966:	f043 0210 	orr.w	r2, r3, #16
 800696a:	697b      	ldr	r3, [r7, #20]
 800696c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006970:	6978      	ldr	r0, [r7, #20]
 8006972:	f7ff f997 	bl	8005ca4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006976:	bf00      	nop
 8006978:	3718      	adds	r7, #24
 800697a:	46bd      	mov	sp, r7
 800697c:	bd80      	pop	{r7, pc}

0800697e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800697e:	b580      	push	{r7, lr}
 8006980:	b084      	sub	sp, #16
 8006982:	af00      	add	r7, sp, #0
 8006984:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800698a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	2200      	movs	r2, #0
 8006990:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	2200      	movs	r2, #0
 8006998:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800699c:	68f8      	ldr	r0, [r7, #12]
 800699e:	f7ff f981 	bl	8005ca4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80069a2:	bf00      	nop
 80069a4:	3710      	adds	r7, #16
 80069a6:	46bd      	mov	sp, r7
 80069a8:	bd80      	pop	{r7, pc}

080069aa <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80069aa:	b580      	push	{r7, lr}
 80069ac:	b088      	sub	sp, #32
 80069ae:	af00      	add	r7, sp, #0
 80069b0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	e853 3f00 	ldrex	r3, [r3]
 80069be:	60bb      	str	r3, [r7, #8]
   return(result);
 80069c0:	68bb      	ldr	r3, [r7, #8]
 80069c2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80069c6:	61fb      	str	r3, [r7, #28]
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	461a      	mov	r2, r3
 80069ce:	69fb      	ldr	r3, [r7, #28]
 80069d0:	61bb      	str	r3, [r7, #24]
 80069d2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069d4:	6979      	ldr	r1, [r7, #20]
 80069d6:	69ba      	ldr	r2, [r7, #24]
 80069d8:	e841 2300 	strex	r3, r2, [r1]
 80069dc:	613b      	str	r3, [r7, #16]
   return(result);
 80069de:	693b      	ldr	r3, [r7, #16]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d1e6      	bne.n	80069b2 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2220      	movs	r2, #32
 80069e8:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	2200      	movs	r2, #0
 80069ee:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80069f0:	6878      	ldr	r0, [r7, #4]
 80069f2:	f7ff f92f 	bl	8005c54 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80069f6:	bf00      	nop
 80069f8:	3720      	adds	r7, #32
 80069fa:	46bd      	mov	sp, r7
 80069fc:	bd80      	pop	{r7, pc}

080069fe <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80069fe:	b480      	push	{r7}
 8006a00:	b083      	sub	sp, #12
 8006a02:	af00      	add	r7, sp, #0
 8006a04:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006a06:	bf00      	nop
 8006a08:	370c      	adds	r7, #12
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a10:	4770      	bx	lr
	...

08006a14 <__NVIC_SetPriority>:
{
 8006a14:	b480      	push	{r7}
 8006a16:	b083      	sub	sp, #12
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	4603      	mov	r3, r0
 8006a1c:	6039      	str	r1, [r7, #0]
 8006a1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006a20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	db0a      	blt.n	8006a3e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006a28:	683b      	ldr	r3, [r7, #0]
 8006a2a:	b2da      	uxtb	r2, r3
 8006a2c:	490c      	ldr	r1, [pc, #48]	@ (8006a60 <__NVIC_SetPriority+0x4c>)
 8006a2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a32:	0112      	lsls	r2, r2, #4
 8006a34:	b2d2      	uxtb	r2, r2
 8006a36:	440b      	add	r3, r1
 8006a38:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8006a3c:	e00a      	b.n	8006a54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006a3e:	683b      	ldr	r3, [r7, #0]
 8006a40:	b2da      	uxtb	r2, r3
 8006a42:	4908      	ldr	r1, [pc, #32]	@ (8006a64 <__NVIC_SetPriority+0x50>)
 8006a44:	79fb      	ldrb	r3, [r7, #7]
 8006a46:	f003 030f 	and.w	r3, r3, #15
 8006a4a:	3b04      	subs	r3, #4
 8006a4c:	0112      	lsls	r2, r2, #4
 8006a4e:	b2d2      	uxtb	r2, r2
 8006a50:	440b      	add	r3, r1
 8006a52:	761a      	strb	r2, [r3, #24]
}
 8006a54:	bf00      	nop
 8006a56:	370c      	adds	r7, #12
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5e:	4770      	bx	lr
 8006a60:	e000e100 	.word	0xe000e100
 8006a64:	e000ed00 	.word	0xe000ed00

08006a68 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8006a6c:	4b05      	ldr	r3, [pc, #20]	@ (8006a84 <SysTick_Handler+0x1c>)
 8006a6e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8006a70:	f001 fd6e 	bl	8008550 <xTaskGetSchedulerState>
 8006a74:	4603      	mov	r3, r0
 8006a76:	2b01      	cmp	r3, #1
 8006a78:	d001      	beq.n	8006a7e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8006a7a:	f002 fb65 	bl	8009148 <xPortSysTickHandler>
  }
}
 8006a7e:	bf00      	nop
 8006a80:	bd80      	pop	{r7, pc}
 8006a82:	bf00      	nop
 8006a84:	e000e010 	.word	0xe000e010

08006a88 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006a88:	b580      	push	{r7, lr}
 8006a8a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8006a8c:	2100      	movs	r1, #0
 8006a8e:	f06f 0004 	mvn.w	r0, #4
 8006a92:	f7ff ffbf 	bl	8006a14 <__NVIC_SetPriority>
#endif
}
 8006a96:	bf00      	nop
 8006a98:	bd80      	pop	{r7, pc}
	...

08006a9c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006a9c:	b480      	push	{r7}
 8006a9e:	b083      	sub	sp, #12
 8006aa0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006aa2:	f3ef 8305 	mrs	r3, IPSR
 8006aa6:	603b      	str	r3, [r7, #0]
  return(result);
 8006aa8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d003      	beq.n	8006ab6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8006aae:	f06f 0305 	mvn.w	r3, #5
 8006ab2:	607b      	str	r3, [r7, #4]
 8006ab4:	e00c      	b.n	8006ad0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006ab6:	4b0a      	ldr	r3, [pc, #40]	@ (8006ae0 <osKernelInitialize+0x44>)
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d105      	bne.n	8006aca <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006abe:	4b08      	ldr	r3, [pc, #32]	@ (8006ae0 <osKernelInitialize+0x44>)
 8006ac0:	2201      	movs	r2, #1
 8006ac2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006ac4:	2300      	movs	r3, #0
 8006ac6:	607b      	str	r3, [r7, #4]
 8006ac8:	e002      	b.n	8006ad0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8006aca:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006ace:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006ad0:	687b      	ldr	r3, [r7, #4]
}
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	370c      	adds	r7, #12
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006adc:	4770      	bx	lr
 8006ade:	bf00      	nop
 8006ae0:	20005bc4 	.word	0x20005bc4

08006ae4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	b082      	sub	sp, #8
 8006ae8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006aea:	f3ef 8305 	mrs	r3, IPSR
 8006aee:	603b      	str	r3, [r7, #0]
  return(result);
 8006af0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d003      	beq.n	8006afe <osKernelStart+0x1a>
    stat = osErrorISR;
 8006af6:	f06f 0305 	mvn.w	r3, #5
 8006afa:	607b      	str	r3, [r7, #4]
 8006afc:	e010      	b.n	8006b20 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8006afe:	4b0b      	ldr	r3, [pc, #44]	@ (8006b2c <osKernelStart+0x48>)
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	2b01      	cmp	r3, #1
 8006b04:	d109      	bne.n	8006b1a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006b06:	f7ff ffbf 	bl	8006a88 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006b0a:	4b08      	ldr	r3, [pc, #32]	@ (8006b2c <osKernelStart+0x48>)
 8006b0c:	2202      	movs	r2, #2
 8006b0e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006b10:	f001 f892 	bl	8007c38 <vTaskStartScheduler>
      stat = osOK;
 8006b14:	2300      	movs	r3, #0
 8006b16:	607b      	str	r3, [r7, #4]
 8006b18:	e002      	b.n	8006b20 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8006b1a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006b1e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006b20:	687b      	ldr	r3, [r7, #4]
}
 8006b22:	4618      	mov	r0, r3
 8006b24:	3708      	adds	r7, #8
 8006b26:	46bd      	mov	sp, r7
 8006b28:	bd80      	pop	{r7, pc}
 8006b2a:	bf00      	nop
 8006b2c:	20005bc4 	.word	0x20005bc4

08006b30 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006b30:	b580      	push	{r7, lr}
 8006b32:	b08e      	sub	sp, #56	@ 0x38
 8006b34:	af04      	add	r7, sp, #16
 8006b36:	60f8      	str	r0, [r7, #12]
 8006b38:	60b9      	str	r1, [r7, #8]
 8006b3a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006b40:	f3ef 8305 	mrs	r3, IPSR
 8006b44:	617b      	str	r3, [r7, #20]
  return(result);
 8006b46:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d17e      	bne.n	8006c4a <osThreadNew+0x11a>
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d07b      	beq.n	8006c4a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8006b52:	2380      	movs	r3, #128	@ 0x80
 8006b54:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8006b56:	2318      	movs	r3, #24
 8006b58:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8006b5e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006b62:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d045      	beq.n	8006bf6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d002      	beq.n	8006b78 <osThreadNew+0x48>
        name = attr->name;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	699b      	ldr	r3, [r3, #24]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d002      	beq.n	8006b86 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	699b      	ldr	r3, [r3, #24]
 8006b84:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006b86:	69fb      	ldr	r3, [r7, #28]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d008      	beq.n	8006b9e <osThreadNew+0x6e>
 8006b8c:	69fb      	ldr	r3, [r7, #28]
 8006b8e:	2b38      	cmp	r3, #56	@ 0x38
 8006b90:	d805      	bhi.n	8006b9e <osThreadNew+0x6e>
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	685b      	ldr	r3, [r3, #4]
 8006b96:	f003 0301 	and.w	r3, r3, #1
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d001      	beq.n	8006ba2 <osThreadNew+0x72>
        return (NULL);
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	e054      	b.n	8006c4c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	695b      	ldr	r3, [r3, #20]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d003      	beq.n	8006bb2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	695b      	ldr	r3, [r3, #20]
 8006bae:	089b      	lsrs	r3, r3, #2
 8006bb0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	689b      	ldr	r3, [r3, #8]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d00e      	beq.n	8006bd8 <osThreadNew+0xa8>
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	68db      	ldr	r3, [r3, #12]
 8006bbe:	2ba7      	cmp	r3, #167	@ 0xa7
 8006bc0:	d90a      	bls.n	8006bd8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d006      	beq.n	8006bd8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	695b      	ldr	r3, [r3, #20]
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d002      	beq.n	8006bd8 <osThreadNew+0xa8>
        mem = 1;
 8006bd2:	2301      	movs	r3, #1
 8006bd4:	61bb      	str	r3, [r7, #24]
 8006bd6:	e010      	b.n	8006bfa <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	689b      	ldr	r3, [r3, #8]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d10c      	bne.n	8006bfa <osThreadNew+0xca>
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	68db      	ldr	r3, [r3, #12]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d108      	bne.n	8006bfa <osThreadNew+0xca>
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	691b      	ldr	r3, [r3, #16]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d104      	bne.n	8006bfa <osThreadNew+0xca>
          mem = 0;
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	61bb      	str	r3, [r7, #24]
 8006bf4:	e001      	b.n	8006bfa <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8006bf6:	2300      	movs	r3, #0
 8006bf8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006bfa:	69bb      	ldr	r3, [r7, #24]
 8006bfc:	2b01      	cmp	r3, #1
 8006bfe:	d110      	bne.n	8006c22 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8006c04:	687a      	ldr	r2, [r7, #4]
 8006c06:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006c08:	9202      	str	r2, [sp, #8]
 8006c0a:	9301      	str	r3, [sp, #4]
 8006c0c:	69fb      	ldr	r3, [r7, #28]
 8006c0e:	9300      	str	r3, [sp, #0]
 8006c10:	68bb      	ldr	r3, [r7, #8]
 8006c12:	6a3a      	ldr	r2, [r7, #32]
 8006c14:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006c16:	68f8      	ldr	r0, [r7, #12]
 8006c18:	f000 fe1a 	bl	8007850 <xTaskCreateStatic>
 8006c1c:	4603      	mov	r3, r0
 8006c1e:	613b      	str	r3, [r7, #16]
 8006c20:	e013      	b.n	8006c4a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8006c22:	69bb      	ldr	r3, [r7, #24]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d110      	bne.n	8006c4a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006c28:	6a3b      	ldr	r3, [r7, #32]
 8006c2a:	b29a      	uxth	r2, r3
 8006c2c:	f107 0310 	add.w	r3, r7, #16
 8006c30:	9301      	str	r3, [sp, #4]
 8006c32:	69fb      	ldr	r3, [r7, #28]
 8006c34:	9300      	str	r3, [sp, #0]
 8006c36:	68bb      	ldr	r3, [r7, #8]
 8006c38:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006c3a:	68f8      	ldr	r0, [r7, #12]
 8006c3c:	f000 fe68 	bl	8007910 <xTaskCreate>
 8006c40:	4603      	mov	r3, r0
 8006c42:	2b01      	cmp	r3, #1
 8006c44:	d001      	beq.n	8006c4a <osThreadNew+0x11a>
            hTask = NULL;
 8006c46:	2300      	movs	r3, #0
 8006c48:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006c4a:	693b      	ldr	r3, [r7, #16]
}
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	3728      	adds	r7, #40	@ 0x28
 8006c50:	46bd      	mov	sp, r7
 8006c52:	bd80      	pop	{r7, pc}

08006c54 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8006c54:	b580      	push	{r7, lr}
 8006c56:	b084      	sub	sp, #16
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006c5c:	f3ef 8305 	mrs	r3, IPSR
 8006c60:	60bb      	str	r3, [r7, #8]
  return(result);
 8006c62:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d003      	beq.n	8006c70 <osDelay+0x1c>
    stat = osErrorISR;
 8006c68:	f06f 0305 	mvn.w	r3, #5
 8006c6c:	60fb      	str	r3, [r7, #12]
 8006c6e:	e007      	b.n	8006c80 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8006c70:	2300      	movs	r3, #0
 8006c72:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d002      	beq.n	8006c80 <osDelay+0x2c>
      vTaskDelay(ticks);
 8006c7a:	6878      	ldr	r0, [r7, #4]
 8006c7c:	f000 ffa6 	bl	8007bcc <vTaskDelay>
    }
  }

  return (stat);
 8006c80:	68fb      	ldr	r3, [r7, #12]
}
 8006c82:	4618      	mov	r0, r3
 8006c84:	3710      	adds	r7, #16
 8006c86:	46bd      	mov	sp, r7
 8006c88:	bd80      	pop	{r7, pc}
	...

08006c8c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006c8c:	b480      	push	{r7}
 8006c8e:	b085      	sub	sp, #20
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	60f8      	str	r0, [r7, #12]
 8006c94:	60b9      	str	r1, [r7, #8]
 8006c96:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	4a07      	ldr	r2, [pc, #28]	@ (8006cb8 <vApplicationGetIdleTaskMemory+0x2c>)
 8006c9c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006c9e:	68bb      	ldr	r3, [r7, #8]
 8006ca0:	4a06      	ldr	r2, [pc, #24]	@ (8006cbc <vApplicationGetIdleTaskMemory+0x30>)
 8006ca2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2280      	movs	r2, #128	@ 0x80
 8006ca8:	601a      	str	r2, [r3, #0]
}
 8006caa:	bf00      	nop
 8006cac:	3714      	adds	r7, #20
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb4:	4770      	bx	lr
 8006cb6:	bf00      	nop
 8006cb8:	20005bc8 	.word	0x20005bc8
 8006cbc:	20005c70 	.word	0x20005c70

08006cc0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006cc0:	b480      	push	{r7}
 8006cc2:	b085      	sub	sp, #20
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	60f8      	str	r0, [r7, #12]
 8006cc8:	60b9      	str	r1, [r7, #8]
 8006cca:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	4a07      	ldr	r2, [pc, #28]	@ (8006cec <vApplicationGetTimerTaskMemory+0x2c>)
 8006cd0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006cd2:	68bb      	ldr	r3, [r7, #8]
 8006cd4:	4a06      	ldr	r2, [pc, #24]	@ (8006cf0 <vApplicationGetTimerTaskMemory+0x30>)
 8006cd6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006cde:	601a      	str	r2, [r3, #0]
}
 8006ce0:	bf00      	nop
 8006ce2:	3714      	adds	r7, #20
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cea:	4770      	bx	lr
 8006cec:	20005e70 	.word	0x20005e70
 8006cf0:	20005f18 	.word	0x20005f18

08006cf4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006cf4:	b480      	push	{r7}
 8006cf6:	b083      	sub	sp, #12
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	f103 0208 	add.w	r2, r3, #8
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006d0c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	f103 0208 	add.w	r2, r3, #8
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	f103 0208 	add.w	r2, r3, #8
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	2200      	movs	r2, #0
 8006d26:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006d28:	bf00      	nop
 8006d2a:	370c      	adds	r7, #12
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d32:	4770      	bx	lr

08006d34 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006d34:	b480      	push	{r7}
 8006d36:	b083      	sub	sp, #12
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	2200      	movs	r2, #0
 8006d40:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006d42:	bf00      	nop
 8006d44:	370c      	adds	r7, #12
 8006d46:	46bd      	mov	sp, r7
 8006d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4c:	4770      	bx	lr

08006d4e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006d4e:	b480      	push	{r7}
 8006d50:	b085      	sub	sp, #20
 8006d52:	af00      	add	r7, sp, #0
 8006d54:	6078      	str	r0, [r7, #4]
 8006d56:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	685b      	ldr	r3, [r3, #4]
 8006d5c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006d5e:	683b      	ldr	r3, [r7, #0]
 8006d60:	68fa      	ldr	r2, [r7, #12]
 8006d62:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	689a      	ldr	r2, [r3, #8]
 8006d68:	683b      	ldr	r3, [r7, #0]
 8006d6a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	689b      	ldr	r3, [r3, #8]
 8006d70:	683a      	ldr	r2, [r7, #0]
 8006d72:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	683a      	ldr	r2, [r7, #0]
 8006d78:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006d7a:	683b      	ldr	r3, [r7, #0]
 8006d7c:	687a      	ldr	r2, [r7, #4]
 8006d7e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	1c5a      	adds	r2, r3, #1
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	601a      	str	r2, [r3, #0]
}
 8006d8a:	bf00      	nop
 8006d8c:	3714      	adds	r7, #20
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d94:	4770      	bx	lr

08006d96 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006d96:	b480      	push	{r7}
 8006d98:	b085      	sub	sp, #20
 8006d9a:	af00      	add	r7, sp, #0
 8006d9c:	6078      	str	r0, [r7, #4]
 8006d9e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006da0:	683b      	ldr	r3, [r7, #0]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006da6:	68bb      	ldr	r3, [r7, #8]
 8006da8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006dac:	d103      	bne.n	8006db6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	691b      	ldr	r3, [r3, #16]
 8006db2:	60fb      	str	r3, [r7, #12]
 8006db4:	e00c      	b.n	8006dd0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	3308      	adds	r3, #8
 8006dba:	60fb      	str	r3, [r7, #12]
 8006dbc:	e002      	b.n	8006dc4 <vListInsert+0x2e>
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	685b      	ldr	r3, [r3, #4]
 8006dc2:	60fb      	str	r3, [r7, #12]
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	685b      	ldr	r3, [r3, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	68ba      	ldr	r2, [r7, #8]
 8006dcc:	429a      	cmp	r2, r3
 8006dce:	d2f6      	bcs.n	8006dbe <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	685a      	ldr	r2, [r3, #4]
 8006dd4:	683b      	ldr	r3, [r7, #0]
 8006dd6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	685b      	ldr	r3, [r3, #4]
 8006ddc:	683a      	ldr	r2, [r7, #0]
 8006dde:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006de0:	683b      	ldr	r3, [r7, #0]
 8006de2:	68fa      	ldr	r2, [r7, #12]
 8006de4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	683a      	ldr	r2, [r7, #0]
 8006dea:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	687a      	ldr	r2, [r7, #4]
 8006df0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	1c5a      	adds	r2, r3, #1
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	601a      	str	r2, [r3, #0]
}
 8006dfc:	bf00      	nop
 8006dfe:	3714      	adds	r7, #20
 8006e00:	46bd      	mov	sp, r7
 8006e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e06:	4770      	bx	lr

08006e08 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006e08:	b480      	push	{r7}
 8006e0a:	b085      	sub	sp, #20
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	691b      	ldr	r3, [r3, #16]
 8006e14:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	685b      	ldr	r3, [r3, #4]
 8006e1a:	687a      	ldr	r2, [r7, #4]
 8006e1c:	6892      	ldr	r2, [r2, #8]
 8006e1e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	689b      	ldr	r3, [r3, #8]
 8006e24:	687a      	ldr	r2, [r7, #4]
 8006e26:	6852      	ldr	r2, [r2, #4]
 8006e28:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	685b      	ldr	r3, [r3, #4]
 8006e2e:	687a      	ldr	r2, [r7, #4]
 8006e30:	429a      	cmp	r2, r3
 8006e32:	d103      	bne.n	8006e3c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	689a      	ldr	r2, [r3, #8]
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2200      	movs	r2, #0
 8006e40:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	1e5a      	subs	r2, r3, #1
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	681b      	ldr	r3, [r3, #0]
}
 8006e50:	4618      	mov	r0, r3
 8006e52:	3714      	adds	r7, #20
 8006e54:	46bd      	mov	sp, r7
 8006e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5a:	4770      	bx	lr

08006e5c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	b084      	sub	sp, #16
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
 8006e64:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d10b      	bne.n	8006e88 <xQueueGenericReset+0x2c>
	__asm volatile
 8006e70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e74:	f383 8811 	msr	BASEPRI, r3
 8006e78:	f3bf 8f6f 	isb	sy
 8006e7c:	f3bf 8f4f 	dsb	sy
 8006e80:	60bb      	str	r3, [r7, #8]
}
 8006e82:	bf00      	nop
 8006e84:	bf00      	nop
 8006e86:	e7fd      	b.n	8006e84 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006e88:	f002 f8ce 	bl	8009028 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	681a      	ldr	r2, [r3, #0]
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e94:	68f9      	ldr	r1, [r7, #12]
 8006e96:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006e98:	fb01 f303 	mul.w	r3, r1, r3
 8006e9c:	441a      	add	r2, r3
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	681a      	ldr	r2, [r3, #0]
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	681a      	ldr	r2, [r3, #0]
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006eb8:	3b01      	subs	r3, #1
 8006eba:	68f9      	ldr	r1, [r7, #12]
 8006ebc:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006ebe:	fb01 f303 	mul.w	r3, r1, r3
 8006ec2:	441a      	add	r2, r3
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	22ff      	movs	r2, #255	@ 0xff
 8006ecc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	22ff      	movs	r2, #255	@ 0xff
 8006ed4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8006ed8:	683b      	ldr	r3, [r7, #0]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d114      	bne.n	8006f08 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	691b      	ldr	r3, [r3, #16]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d01a      	beq.n	8006f1c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	3310      	adds	r3, #16
 8006eea:	4618      	mov	r0, r3
 8006eec:	f001 f942 	bl	8008174 <xTaskRemoveFromEventList>
 8006ef0:	4603      	mov	r3, r0
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d012      	beq.n	8006f1c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006ef6:	4b0d      	ldr	r3, [pc, #52]	@ (8006f2c <xQueueGenericReset+0xd0>)
 8006ef8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006efc:	601a      	str	r2, [r3, #0]
 8006efe:	f3bf 8f4f 	dsb	sy
 8006f02:	f3bf 8f6f 	isb	sy
 8006f06:	e009      	b.n	8006f1c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	3310      	adds	r3, #16
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	f7ff fef1 	bl	8006cf4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	3324      	adds	r3, #36	@ 0x24
 8006f16:	4618      	mov	r0, r3
 8006f18:	f7ff feec 	bl	8006cf4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006f1c:	f002 f8b6 	bl	800908c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006f20:	2301      	movs	r3, #1
}
 8006f22:	4618      	mov	r0, r3
 8006f24:	3710      	adds	r7, #16
 8006f26:	46bd      	mov	sp, r7
 8006f28:	bd80      	pop	{r7, pc}
 8006f2a:	bf00      	nop
 8006f2c:	e000ed04 	.word	0xe000ed04

08006f30 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006f30:	b580      	push	{r7, lr}
 8006f32:	b08e      	sub	sp, #56	@ 0x38
 8006f34:	af02      	add	r7, sp, #8
 8006f36:	60f8      	str	r0, [r7, #12]
 8006f38:	60b9      	str	r1, [r7, #8]
 8006f3a:	607a      	str	r2, [r7, #4]
 8006f3c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d10b      	bne.n	8006f5c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8006f44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f48:	f383 8811 	msr	BASEPRI, r3
 8006f4c:	f3bf 8f6f 	isb	sy
 8006f50:	f3bf 8f4f 	dsb	sy
 8006f54:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006f56:	bf00      	nop
 8006f58:	bf00      	nop
 8006f5a:	e7fd      	b.n	8006f58 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006f5c:	683b      	ldr	r3, [r7, #0]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d10b      	bne.n	8006f7a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8006f62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f66:	f383 8811 	msr	BASEPRI, r3
 8006f6a:	f3bf 8f6f 	isb	sy
 8006f6e:	f3bf 8f4f 	dsb	sy
 8006f72:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006f74:	bf00      	nop
 8006f76:	bf00      	nop
 8006f78:	e7fd      	b.n	8006f76 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d002      	beq.n	8006f86 <xQueueGenericCreateStatic+0x56>
 8006f80:	68bb      	ldr	r3, [r7, #8]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d001      	beq.n	8006f8a <xQueueGenericCreateStatic+0x5a>
 8006f86:	2301      	movs	r3, #1
 8006f88:	e000      	b.n	8006f8c <xQueueGenericCreateStatic+0x5c>
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d10b      	bne.n	8006fa8 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8006f90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f94:	f383 8811 	msr	BASEPRI, r3
 8006f98:	f3bf 8f6f 	isb	sy
 8006f9c:	f3bf 8f4f 	dsb	sy
 8006fa0:	623b      	str	r3, [r7, #32]
}
 8006fa2:	bf00      	nop
 8006fa4:	bf00      	nop
 8006fa6:	e7fd      	b.n	8006fa4 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d102      	bne.n	8006fb4 <xQueueGenericCreateStatic+0x84>
 8006fae:	68bb      	ldr	r3, [r7, #8]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d101      	bne.n	8006fb8 <xQueueGenericCreateStatic+0x88>
 8006fb4:	2301      	movs	r3, #1
 8006fb6:	e000      	b.n	8006fba <xQueueGenericCreateStatic+0x8a>
 8006fb8:	2300      	movs	r3, #0
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d10b      	bne.n	8006fd6 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8006fbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fc2:	f383 8811 	msr	BASEPRI, r3
 8006fc6:	f3bf 8f6f 	isb	sy
 8006fca:	f3bf 8f4f 	dsb	sy
 8006fce:	61fb      	str	r3, [r7, #28]
}
 8006fd0:	bf00      	nop
 8006fd2:	bf00      	nop
 8006fd4:	e7fd      	b.n	8006fd2 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006fd6:	2350      	movs	r3, #80	@ 0x50
 8006fd8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006fda:	697b      	ldr	r3, [r7, #20]
 8006fdc:	2b50      	cmp	r3, #80	@ 0x50
 8006fde:	d00b      	beq.n	8006ff8 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8006fe0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fe4:	f383 8811 	msr	BASEPRI, r3
 8006fe8:	f3bf 8f6f 	isb	sy
 8006fec:	f3bf 8f4f 	dsb	sy
 8006ff0:	61bb      	str	r3, [r7, #24]
}
 8006ff2:	bf00      	nop
 8006ff4:	bf00      	nop
 8006ff6:	e7fd      	b.n	8006ff4 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006ff8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8006ffe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007000:	2b00      	cmp	r3, #0
 8007002:	d00d      	beq.n	8007020 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007004:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007006:	2201      	movs	r2, #1
 8007008:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800700c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8007010:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007012:	9300      	str	r3, [sp, #0]
 8007014:	4613      	mov	r3, r2
 8007016:	687a      	ldr	r2, [r7, #4]
 8007018:	68b9      	ldr	r1, [r7, #8]
 800701a:	68f8      	ldr	r0, [r7, #12]
 800701c:	f000 f805 	bl	800702a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007020:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8007022:	4618      	mov	r0, r3
 8007024:	3730      	adds	r7, #48	@ 0x30
 8007026:	46bd      	mov	sp, r7
 8007028:	bd80      	pop	{r7, pc}

0800702a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800702a:	b580      	push	{r7, lr}
 800702c:	b084      	sub	sp, #16
 800702e:	af00      	add	r7, sp, #0
 8007030:	60f8      	str	r0, [r7, #12]
 8007032:	60b9      	str	r1, [r7, #8]
 8007034:	607a      	str	r2, [r7, #4]
 8007036:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007038:	68bb      	ldr	r3, [r7, #8]
 800703a:	2b00      	cmp	r3, #0
 800703c:	d103      	bne.n	8007046 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800703e:	69bb      	ldr	r3, [r7, #24]
 8007040:	69ba      	ldr	r2, [r7, #24]
 8007042:	601a      	str	r2, [r3, #0]
 8007044:	e002      	b.n	800704c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007046:	69bb      	ldr	r3, [r7, #24]
 8007048:	687a      	ldr	r2, [r7, #4]
 800704a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800704c:	69bb      	ldr	r3, [r7, #24]
 800704e:	68fa      	ldr	r2, [r7, #12]
 8007050:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007052:	69bb      	ldr	r3, [r7, #24]
 8007054:	68ba      	ldr	r2, [r7, #8]
 8007056:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007058:	2101      	movs	r1, #1
 800705a:	69b8      	ldr	r0, [r7, #24]
 800705c:	f7ff fefe 	bl	8006e5c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007060:	69bb      	ldr	r3, [r7, #24]
 8007062:	78fa      	ldrb	r2, [r7, #3]
 8007064:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007068:	bf00      	nop
 800706a:	3710      	adds	r7, #16
 800706c:	46bd      	mov	sp, r7
 800706e:	bd80      	pop	{r7, pc}

08007070 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007070:	b580      	push	{r7, lr}
 8007072:	b08e      	sub	sp, #56	@ 0x38
 8007074:	af00      	add	r7, sp, #0
 8007076:	60f8      	str	r0, [r7, #12]
 8007078:	60b9      	str	r1, [r7, #8]
 800707a:	607a      	str	r2, [r7, #4]
 800707c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800707e:	2300      	movs	r3, #0
 8007080:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8007086:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007088:	2b00      	cmp	r3, #0
 800708a:	d10b      	bne.n	80070a4 <xQueueGenericSend+0x34>
	__asm volatile
 800708c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007090:	f383 8811 	msr	BASEPRI, r3
 8007094:	f3bf 8f6f 	isb	sy
 8007098:	f3bf 8f4f 	dsb	sy
 800709c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800709e:	bf00      	nop
 80070a0:	bf00      	nop
 80070a2:	e7fd      	b.n	80070a0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80070a4:	68bb      	ldr	r3, [r7, #8]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d103      	bne.n	80070b2 <xQueueGenericSend+0x42>
 80070aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d101      	bne.n	80070b6 <xQueueGenericSend+0x46>
 80070b2:	2301      	movs	r3, #1
 80070b4:	e000      	b.n	80070b8 <xQueueGenericSend+0x48>
 80070b6:	2300      	movs	r3, #0
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d10b      	bne.n	80070d4 <xQueueGenericSend+0x64>
	__asm volatile
 80070bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070c0:	f383 8811 	msr	BASEPRI, r3
 80070c4:	f3bf 8f6f 	isb	sy
 80070c8:	f3bf 8f4f 	dsb	sy
 80070cc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80070ce:	bf00      	nop
 80070d0:	bf00      	nop
 80070d2:	e7fd      	b.n	80070d0 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80070d4:	683b      	ldr	r3, [r7, #0]
 80070d6:	2b02      	cmp	r3, #2
 80070d8:	d103      	bne.n	80070e2 <xQueueGenericSend+0x72>
 80070da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80070de:	2b01      	cmp	r3, #1
 80070e0:	d101      	bne.n	80070e6 <xQueueGenericSend+0x76>
 80070e2:	2301      	movs	r3, #1
 80070e4:	e000      	b.n	80070e8 <xQueueGenericSend+0x78>
 80070e6:	2300      	movs	r3, #0
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d10b      	bne.n	8007104 <xQueueGenericSend+0x94>
	__asm volatile
 80070ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070f0:	f383 8811 	msr	BASEPRI, r3
 80070f4:	f3bf 8f6f 	isb	sy
 80070f8:	f3bf 8f4f 	dsb	sy
 80070fc:	623b      	str	r3, [r7, #32]
}
 80070fe:	bf00      	nop
 8007100:	bf00      	nop
 8007102:	e7fd      	b.n	8007100 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007104:	f001 fa24 	bl	8008550 <xTaskGetSchedulerState>
 8007108:	4603      	mov	r3, r0
 800710a:	2b00      	cmp	r3, #0
 800710c:	d102      	bne.n	8007114 <xQueueGenericSend+0xa4>
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	2b00      	cmp	r3, #0
 8007112:	d101      	bne.n	8007118 <xQueueGenericSend+0xa8>
 8007114:	2301      	movs	r3, #1
 8007116:	e000      	b.n	800711a <xQueueGenericSend+0xaa>
 8007118:	2300      	movs	r3, #0
 800711a:	2b00      	cmp	r3, #0
 800711c:	d10b      	bne.n	8007136 <xQueueGenericSend+0xc6>
	__asm volatile
 800711e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007122:	f383 8811 	msr	BASEPRI, r3
 8007126:	f3bf 8f6f 	isb	sy
 800712a:	f3bf 8f4f 	dsb	sy
 800712e:	61fb      	str	r3, [r7, #28]
}
 8007130:	bf00      	nop
 8007132:	bf00      	nop
 8007134:	e7fd      	b.n	8007132 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007136:	f001 ff77 	bl	8009028 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800713a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800713c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800713e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007140:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007142:	429a      	cmp	r2, r3
 8007144:	d302      	bcc.n	800714c <xQueueGenericSend+0xdc>
 8007146:	683b      	ldr	r3, [r7, #0]
 8007148:	2b02      	cmp	r3, #2
 800714a:	d129      	bne.n	80071a0 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800714c:	683a      	ldr	r2, [r7, #0]
 800714e:	68b9      	ldr	r1, [r7, #8]
 8007150:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007152:	f000 fa0f 	bl	8007574 <prvCopyDataToQueue>
 8007156:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007158:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800715a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800715c:	2b00      	cmp	r3, #0
 800715e:	d010      	beq.n	8007182 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007160:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007162:	3324      	adds	r3, #36	@ 0x24
 8007164:	4618      	mov	r0, r3
 8007166:	f001 f805 	bl	8008174 <xTaskRemoveFromEventList>
 800716a:	4603      	mov	r3, r0
 800716c:	2b00      	cmp	r3, #0
 800716e:	d013      	beq.n	8007198 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007170:	4b3f      	ldr	r3, [pc, #252]	@ (8007270 <xQueueGenericSend+0x200>)
 8007172:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007176:	601a      	str	r2, [r3, #0]
 8007178:	f3bf 8f4f 	dsb	sy
 800717c:	f3bf 8f6f 	isb	sy
 8007180:	e00a      	b.n	8007198 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007182:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007184:	2b00      	cmp	r3, #0
 8007186:	d007      	beq.n	8007198 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007188:	4b39      	ldr	r3, [pc, #228]	@ (8007270 <xQueueGenericSend+0x200>)
 800718a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800718e:	601a      	str	r2, [r3, #0]
 8007190:	f3bf 8f4f 	dsb	sy
 8007194:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007198:	f001 ff78 	bl	800908c <vPortExitCritical>
				return pdPASS;
 800719c:	2301      	movs	r3, #1
 800719e:	e063      	b.n	8007268 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d103      	bne.n	80071ae <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80071a6:	f001 ff71 	bl	800908c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80071aa:	2300      	movs	r3, #0
 80071ac:	e05c      	b.n	8007268 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80071ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d106      	bne.n	80071c2 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80071b4:	f107 0314 	add.w	r3, r7, #20
 80071b8:	4618      	mov	r0, r3
 80071ba:	f001 f867 	bl	800828c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80071be:	2301      	movs	r3, #1
 80071c0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80071c2:	f001 ff63 	bl	800908c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80071c6:	f000 fda7 	bl	8007d18 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80071ca:	f001 ff2d 	bl	8009028 <vPortEnterCritical>
 80071ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071d0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80071d4:	b25b      	sxtb	r3, r3
 80071d6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80071da:	d103      	bne.n	80071e4 <xQueueGenericSend+0x174>
 80071dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071de:	2200      	movs	r2, #0
 80071e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80071e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071e6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80071ea:	b25b      	sxtb	r3, r3
 80071ec:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80071f0:	d103      	bne.n	80071fa <xQueueGenericSend+0x18a>
 80071f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071f4:	2200      	movs	r2, #0
 80071f6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80071fa:	f001 ff47 	bl	800908c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80071fe:	1d3a      	adds	r2, r7, #4
 8007200:	f107 0314 	add.w	r3, r7, #20
 8007204:	4611      	mov	r1, r2
 8007206:	4618      	mov	r0, r3
 8007208:	f001 f856 	bl	80082b8 <xTaskCheckForTimeOut>
 800720c:	4603      	mov	r3, r0
 800720e:	2b00      	cmp	r3, #0
 8007210:	d124      	bne.n	800725c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007212:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007214:	f000 faa6 	bl	8007764 <prvIsQueueFull>
 8007218:	4603      	mov	r3, r0
 800721a:	2b00      	cmp	r3, #0
 800721c:	d018      	beq.n	8007250 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800721e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007220:	3310      	adds	r3, #16
 8007222:	687a      	ldr	r2, [r7, #4]
 8007224:	4611      	mov	r1, r2
 8007226:	4618      	mov	r0, r3
 8007228:	f000 ff52 	bl	80080d0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800722c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800722e:	f000 fa31 	bl	8007694 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007232:	f000 fd7f 	bl	8007d34 <xTaskResumeAll>
 8007236:	4603      	mov	r3, r0
 8007238:	2b00      	cmp	r3, #0
 800723a:	f47f af7c 	bne.w	8007136 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800723e:	4b0c      	ldr	r3, [pc, #48]	@ (8007270 <xQueueGenericSend+0x200>)
 8007240:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007244:	601a      	str	r2, [r3, #0]
 8007246:	f3bf 8f4f 	dsb	sy
 800724a:	f3bf 8f6f 	isb	sy
 800724e:	e772      	b.n	8007136 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007250:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007252:	f000 fa1f 	bl	8007694 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007256:	f000 fd6d 	bl	8007d34 <xTaskResumeAll>
 800725a:	e76c      	b.n	8007136 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800725c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800725e:	f000 fa19 	bl	8007694 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007262:	f000 fd67 	bl	8007d34 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007266:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007268:	4618      	mov	r0, r3
 800726a:	3738      	adds	r7, #56	@ 0x38
 800726c:	46bd      	mov	sp, r7
 800726e:	bd80      	pop	{r7, pc}
 8007270:	e000ed04 	.word	0xe000ed04

08007274 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007274:	b580      	push	{r7, lr}
 8007276:	b090      	sub	sp, #64	@ 0x40
 8007278:	af00      	add	r7, sp, #0
 800727a:	60f8      	str	r0, [r7, #12]
 800727c:	60b9      	str	r1, [r7, #8]
 800727e:	607a      	str	r2, [r7, #4]
 8007280:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8007286:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007288:	2b00      	cmp	r3, #0
 800728a:	d10b      	bne.n	80072a4 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800728c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007290:	f383 8811 	msr	BASEPRI, r3
 8007294:	f3bf 8f6f 	isb	sy
 8007298:	f3bf 8f4f 	dsb	sy
 800729c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800729e:	bf00      	nop
 80072a0:	bf00      	nop
 80072a2:	e7fd      	b.n	80072a0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80072a4:	68bb      	ldr	r3, [r7, #8]
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d103      	bne.n	80072b2 <xQueueGenericSendFromISR+0x3e>
 80072aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d101      	bne.n	80072b6 <xQueueGenericSendFromISR+0x42>
 80072b2:	2301      	movs	r3, #1
 80072b4:	e000      	b.n	80072b8 <xQueueGenericSendFromISR+0x44>
 80072b6:	2300      	movs	r3, #0
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d10b      	bne.n	80072d4 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80072bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072c0:	f383 8811 	msr	BASEPRI, r3
 80072c4:	f3bf 8f6f 	isb	sy
 80072c8:	f3bf 8f4f 	dsb	sy
 80072cc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80072ce:	bf00      	nop
 80072d0:	bf00      	nop
 80072d2:	e7fd      	b.n	80072d0 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80072d4:	683b      	ldr	r3, [r7, #0]
 80072d6:	2b02      	cmp	r3, #2
 80072d8:	d103      	bne.n	80072e2 <xQueueGenericSendFromISR+0x6e>
 80072da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80072de:	2b01      	cmp	r3, #1
 80072e0:	d101      	bne.n	80072e6 <xQueueGenericSendFromISR+0x72>
 80072e2:	2301      	movs	r3, #1
 80072e4:	e000      	b.n	80072e8 <xQueueGenericSendFromISR+0x74>
 80072e6:	2300      	movs	r3, #0
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d10b      	bne.n	8007304 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80072ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072f0:	f383 8811 	msr	BASEPRI, r3
 80072f4:	f3bf 8f6f 	isb	sy
 80072f8:	f3bf 8f4f 	dsb	sy
 80072fc:	623b      	str	r3, [r7, #32]
}
 80072fe:	bf00      	nop
 8007300:	bf00      	nop
 8007302:	e7fd      	b.n	8007300 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007304:	f001 ff70 	bl	80091e8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007308:	f3ef 8211 	mrs	r2, BASEPRI
 800730c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007310:	f383 8811 	msr	BASEPRI, r3
 8007314:	f3bf 8f6f 	isb	sy
 8007318:	f3bf 8f4f 	dsb	sy
 800731c:	61fa      	str	r2, [r7, #28]
 800731e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007320:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007322:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007324:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007326:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007328:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800732a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800732c:	429a      	cmp	r2, r3
 800732e:	d302      	bcc.n	8007336 <xQueueGenericSendFromISR+0xc2>
 8007330:	683b      	ldr	r3, [r7, #0]
 8007332:	2b02      	cmp	r3, #2
 8007334:	d12f      	bne.n	8007396 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007336:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007338:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800733c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007340:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007342:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007344:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007346:	683a      	ldr	r2, [r7, #0]
 8007348:	68b9      	ldr	r1, [r7, #8]
 800734a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800734c:	f000 f912 	bl	8007574 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007350:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8007354:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007358:	d112      	bne.n	8007380 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800735a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800735c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800735e:	2b00      	cmp	r3, #0
 8007360:	d016      	beq.n	8007390 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007362:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007364:	3324      	adds	r3, #36	@ 0x24
 8007366:	4618      	mov	r0, r3
 8007368:	f000 ff04 	bl	8008174 <xTaskRemoveFromEventList>
 800736c:	4603      	mov	r3, r0
 800736e:	2b00      	cmp	r3, #0
 8007370:	d00e      	beq.n	8007390 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	2b00      	cmp	r3, #0
 8007376:	d00b      	beq.n	8007390 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	2201      	movs	r2, #1
 800737c:	601a      	str	r2, [r3, #0]
 800737e:	e007      	b.n	8007390 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007380:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8007384:	3301      	adds	r3, #1
 8007386:	b2db      	uxtb	r3, r3
 8007388:	b25a      	sxtb	r2, r3
 800738a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800738c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8007390:	2301      	movs	r3, #1
 8007392:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8007394:	e001      	b.n	800739a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007396:	2300      	movs	r3, #0
 8007398:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800739a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800739c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800739e:	697b      	ldr	r3, [r7, #20]
 80073a0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80073a4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80073a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80073a8:	4618      	mov	r0, r3
 80073aa:	3740      	adds	r7, #64	@ 0x40
 80073ac:	46bd      	mov	sp, r7
 80073ae:	bd80      	pop	{r7, pc}

080073b0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80073b0:	b580      	push	{r7, lr}
 80073b2:	b08c      	sub	sp, #48	@ 0x30
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	60f8      	str	r0, [r7, #12]
 80073b8:	60b9      	str	r1, [r7, #8]
 80073ba:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80073bc:	2300      	movs	r3, #0
 80073be:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80073c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d10b      	bne.n	80073e2 <xQueueReceive+0x32>
	__asm volatile
 80073ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073ce:	f383 8811 	msr	BASEPRI, r3
 80073d2:	f3bf 8f6f 	isb	sy
 80073d6:	f3bf 8f4f 	dsb	sy
 80073da:	623b      	str	r3, [r7, #32]
}
 80073dc:	bf00      	nop
 80073de:	bf00      	nop
 80073e0:	e7fd      	b.n	80073de <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80073e2:	68bb      	ldr	r3, [r7, #8]
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d103      	bne.n	80073f0 <xQueueReceive+0x40>
 80073e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d101      	bne.n	80073f4 <xQueueReceive+0x44>
 80073f0:	2301      	movs	r3, #1
 80073f2:	e000      	b.n	80073f6 <xQueueReceive+0x46>
 80073f4:	2300      	movs	r3, #0
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d10b      	bne.n	8007412 <xQueueReceive+0x62>
	__asm volatile
 80073fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073fe:	f383 8811 	msr	BASEPRI, r3
 8007402:	f3bf 8f6f 	isb	sy
 8007406:	f3bf 8f4f 	dsb	sy
 800740a:	61fb      	str	r3, [r7, #28]
}
 800740c:	bf00      	nop
 800740e:	bf00      	nop
 8007410:	e7fd      	b.n	800740e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007412:	f001 f89d 	bl	8008550 <xTaskGetSchedulerState>
 8007416:	4603      	mov	r3, r0
 8007418:	2b00      	cmp	r3, #0
 800741a:	d102      	bne.n	8007422 <xQueueReceive+0x72>
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	2b00      	cmp	r3, #0
 8007420:	d101      	bne.n	8007426 <xQueueReceive+0x76>
 8007422:	2301      	movs	r3, #1
 8007424:	e000      	b.n	8007428 <xQueueReceive+0x78>
 8007426:	2300      	movs	r3, #0
 8007428:	2b00      	cmp	r3, #0
 800742a:	d10b      	bne.n	8007444 <xQueueReceive+0x94>
	__asm volatile
 800742c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007430:	f383 8811 	msr	BASEPRI, r3
 8007434:	f3bf 8f6f 	isb	sy
 8007438:	f3bf 8f4f 	dsb	sy
 800743c:	61bb      	str	r3, [r7, #24]
}
 800743e:	bf00      	nop
 8007440:	bf00      	nop
 8007442:	e7fd      	b.n	8007440 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007444:	f001 fdf0 	bl	8009028 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007448:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800744a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800744c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800744e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007450:	2b00      	cmp	r3, #0
 8007452:	d01f      	beq.n	8007494 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007454:	68b9      	ldr	r1, [r7, #8]
 8007456:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007458:	f000 f8f6 	bl	8007648 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800745c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800745e:	1e5a      	subs	r2, r3, #1
 8007460:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007462:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007464:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007466:	691b      	ldr	r3, [r3, #16]
 8007468:	2b00      	cmp	r3, #0
 800746a:	d00f      	beq.n	800748c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800746c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800746e:	3310      	adds	r3, #16
 8007470:	4618      	mov	r0, r3
 8007472:	f000 fe7f 	bl	8008174 <xTaskRemoveFromEventList>
 8007476:	4603      	mov	r3, r0
 8007478:	2b00      	cmp	r3, #0
 800747a:	d007      	beq.n	800748c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800747c:	4b3c      	ldr	r3, [pc, #240]	@ (8007570 <xQueueReceive+0x1c0>)
 800747e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007482:	601a      	str	r2, [r3, #0]
 8007484:	f3bf 8f4f 	dsb	sy
 8007488:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800748c:	f001 fdfe 	bl	800908c <vPortExitCritical>
				return pdPASS;
 8007490:	2301      	movs	r3, #1
 8007492:	e069      	b.n	8007568 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	2b00      	cmp	r3, #0
 8007498:	d103      	bne.n	80074a2 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800749a:	f001 fdf7 	bl	800908c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800749e:	2300      	movs	r3, #0
 80074a0:	e062      	b.n	8007568 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80074a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d106      	bne.n	80074b6 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80074a8:	f107 0310 	add.w	r3, r7, #16
 80074ac:	4618      	mov	r0, r3
 80074ae:	f000 feed 	bl	800828c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80074b2:	2301      	movs	r3, #1
 80074b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80074b6:	f001 fde9 	bl	800908c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80074ba:	f000 fc2d 	bl	8007d18 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80074be:	f001 fdb3 	bl	8009028 <vPortEnterCritical>
 80074c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074c4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80074c8:	b25b      	sxtb	r3, r3
 80074ca:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80074ce:	d103      	bne.n	80074d8 <xQueueReceive+0x128>
 80074d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074d2:	2200      	movs	r2, #0
 80074d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80074d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074da:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80074de:	b25b      	sxtb	r3, r3
 80074e0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80074e4:	d103      	bne.n	80074ee <xQueueReceive+0x13e>
 80074e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074e8:	2200      	movs	r2, #0
 80074ea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80074ee:	f001 fdcd 	bl	800908c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80074f2:	1d3a      	adds	r2, r7, #4
 80074f4:	f107 0310 	add.w	r3, r7, #16
 80074f8:	4611      	mov	r1, r2
 80074fa:	4618      	mov	r0, r3
 80074fc:	f000 fedc 	bl	80082b8 <xTaskCheckForTimeOut>
 8007500:	4603      	mov	r3, r0
 8007502:	2b00      	cmp	r3, #0
 8007504:	d123      	bne.n	800754e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007506:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007508:	f000 f916 	bl	8007738 <prvIsQueueEmpty>
 800750c:	4603      	mov	r3, r0
 800750e:	2b00      	cmp	r3, #0
 8007510:	d017      	beq.n	8007542 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007512:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007514:	3324      	adds	r3, #36	@ 0x24
 8007516:	687a      	ldr	r2, [r7, #4]
 8007518:	4611      	mov	r1, r2
 800751a:	4618      	mov	r0, r3
 800751c:	f000 fdd8 	bl	80080d0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007520:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007522:	f000 f8b7 	bl	8007694 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007526:	f000 fc05 	bl	8007d34 <xTaskResumeAll>
 800752a:	4603      	mov	r3, r0
 800752c:	2b00      	cmp	r3, #0
 800752e:	d189      	bne.n	8007444 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8007530:	4b0f      	ldr	r3, [pc, #60]	@ (8007570 <xQueueReceive+0x1c0>)
 8007532:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007536:	601a      	str	r2, [r3, #0]
 8007538:	f3bf 8f4f 	dsb	sy
 800753c:	f3bf 8f6f 	isb	sy
 8007540:	e780      	b.n	8007444 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007542:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007544:	f000 f8a6 	bl	8007694 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007548:	f000 fbf4 	bl	8007d34 <xTaskResumeAll>
 800754c:	e77a      	b.n	8007444 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800754e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007550:	f000 f8a0 	bl	8007694 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007554:	f000 fbee 	bl	8007d34 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007558:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800755a:	f000 f8ed 	bl	8007738 <prvIsQueueEmpty>
 800755e:	4603      	mov	r3, r0
 8007560:	2b00      	cmp	r3, #0
 8007562:	f43f af6f 	beq.w	8007444 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007566:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007568:	4618      	mov	r0, r3
 800756a:	3730      	adds	r7, #48	@ 0x30
 800756c:	46bd      	mov	sp, r7
 800756e:	bd80      	pop	{r7, pc}
 8007570:	e000ed04 	.word	0xe000ed04

08007574 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007574:	b580      	push	{r7, lr}
 8007576:	b086      	sub	sp, #24
 8007578:	af00      	add	r7, sp, #0
 800757a:	60f8      	str	r0, [r7, #12]
 800757c:	60b9      	str	r1, [r7, #8]
 800757e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007580:	2300      	movs	r3, #0
 8007582:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007588:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800758e:	2b00      	cmp	r3, #0
 8007590:	d10d      	bne.n	80075ae <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	2b00      	cmp	r3, #0
 8007598:	d14d      	bne.n	8007636 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	689b      	ldr	r3, [r3, #8]
 800759e:	4618      	mov	r0, r3
 80075a0:	f000 fff4 	bl	800858c <xTaskPriorityDisinherit>
 80075a4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	2200      	movs	r2, #0
 80075aa:	609a      	str	r2, [r3, #8]
 80075ac:	e043      	b.n	8007636 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d119      	bne.n	80075e8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	6858      	ldr	r0, [r3, #4]
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075bc:	461a      	mov	r2, r3
 80075be:	68b9      	ldr	r1, [r7, #8]
 80075c0:	f010 fabb 	bl	8017b3a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	685a      	ldr	r2, [r3, #4]
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075cc:	441a      	add	r2, r3
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	685a      	ldr	r2, [r3, #4]
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	689b      	ldr	r3, [r3, #8]
 80075da:	429a      	cmp	r2, r3
 80075dc:	d32b      	bcc.n	8007636 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	681a      	ldr	r2, [r3, #0]
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	605a      	str	r2, [r3, #4]
 80075e6:	e026      	b.n	8007636 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	68d8      	ldr	r0, [r3, #12]
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075f0:	461a      	mov	r2, r3
 80075f2:	68b9      	ldr	r1, [r7, #8]
 80075f4:	f010 faa1 	bl	8017b3a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	68da      	ldr	r2, [r3, #12]
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007600:	425b      	negs	r3, r3
 8007602:	441a      	add	r2, r3
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	68da      	ldr	r2, [r3, #12]
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	429a      	cmp	r2, r3
 8007612:	d207      	bcs.n	8007624 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	689a      	ldr	r2, [r3, #8]
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800761c:	425b      	negs	r3, r3
 800761e:	441a      	add	r2, r3
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	2b02      	cmp	r3, #2
 8007628:	d105      	bne.n	8007636 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800762a:	693b      	ldr	r3, [r7, #16]
 800762c:	2b00      	cmp	r3, #0
 800762e:	d002      	beq.n	8007636 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007630:	693b      	ldr	r3, [r7, #16]
 8007632:	3b01      	subs	r3, #1
 8007634:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007636:	693b      	ldr	r3, [r7, #16]
 8007638:	1c5a      	adds	r2, r3, #1
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800763e:	697b      	ldr	r3, [r7, #20]
}
 8007640:	4618      	mov	r0, r3
 8007642:	3718      	adds	r7, #24
 8007644:	46bd      	mov	sp, r7
 8007646:	bd80      	pop	{r7, pc}

08007648 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007648:	b580      	push	{r7, lr}
 800764a:	b082      	sub	sp, #8
 800764c:	af00      	add	r7, sp, #0
 800764e:	6078      	str	r0, [r7, #4]
 8007650:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007656:	2b00      	cmp	r3, #0
 8007658:	d018      	beq.n	800768c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	68da      	ldr	r2, [r3, #12]
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007662:	441a      	add	r2, r3
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	68da      	ldr	r2, [r3, #12]
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	689b      	ldr	r3, [r3, #8]
 8007670:	429a      	cmp	r2, r3
 8007672:	d303      	bcc.n	800767c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681a      	ldr	r2, [r3, #0]
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	68d9      	ldr	r1, [r3, #12]
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007684:	461a      	mov	r2, r3
 8007686:	6838      	ldr	r0, [r7, #0]
 8007688:	f010 fa57 	bl	8017b3a <memcpy>
	}
}
 800768c:	bf00      	nop
 800768e:	3708      	adds	r7, #8
 8007690:	46bd      	mov	sp, r7
 8007692:	bd80      	pop	{r7, pc}

08007694 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007694:	b580      	push	{r7, lr}
 8007696:	b084      	sub	sp, #16
 8007698:	af00      	add	r7, sp, #0
 800769a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800769c:	f001 fcc4 	bl	8009028 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80076a6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80076a8:	e011      	b.n	80076ce <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d012      	beq.n	80076d8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	3324      	adds	r3, #36	@ 0x24
 80076b6:	4618      	mov	r0, r3
 80076b8:	f000 fd5c 	bl	8008174 <xTaskRemoveFromEventList>
 80076bc:	4603      	mov	r3, r0
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d001      	beq.n	80076c6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80076c2:	f000 fe5d 	bl	8008380 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80076c6:	7bfb      	ldrb	r3, [r7, #15]
 80076c8:	3b01      	subs	r3, #1
 80076ca:	b2db      	uxtb	r3, r3
 80076cc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80076ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	dce9      	bgt.n	80076aa <prvUnlockQueue+0x16>
 80076d6:	e000      	b.n	80076da <prvUnlockQueue+0x46>
					break;
 80076d8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	22ff      	movs	r2, #255	@ 0xff
 80076de:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80076e2:	f001 fcd3 	bl	800908c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80076e6:	f001 fc9f 	bl	8009028 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80076f0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80076f2:	e011      	b.n	8007718 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	691b      	ldr	r3, [r3, #16]
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d012      	beq.n	8007722 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	3310      	adds	r3, #16
 8007700:	4618      	mov	r0, r3
 8007702:	f000 fd37 	bl	8008174 <xTaskRemoveFromEventList>
 8007706:	4603      	mov	r3, r0
 8007708:	2b00      	cmp	r3, #0
 800770a:	d001      	beq.n	8007710 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800770c:	f000 fe38 	bl	8008380 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007710:	7bbb      	ldrb	r3, [r7, #14]
 8007712:	3b01      	subs	r3, #1
 8007714:	b2db      	uxtb	r3, r3
 8007716:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007718:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800771c:	2b00      	cmp	r3, #0
 800771e:	dce9      	bgt.n	80076f4 <prvUnlockQueue+0x60>
 8007720:	e000      	b.n	8007724 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007722:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	22ff      	movs	r2, #255	@ 0xff
 8007728:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800772c:	f001 fcae 	bl	800908c <vPortExitCritical>
}
 8007730:	bf00      	nop
 8007732:	3710      	adds	r7, #16
 8007734:	46bd      	mov	sp, r7
 8007736:	bd80      	pop	{r7, pc}

08007738 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007738:	b580      	push	{r7, lr}
 800773a:	b084      	sub	sp, #16
 800773c:	af00      	add	r7, sp, #0
 800773e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007740:	f001 fc72 	bl	8009028 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007748:	2b00      	cmp	r3, #0
 800774a:	d102      	bne.n	8007752 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800774c:	2301      	movs	r3, #1
 800774e:	60fb      	str	r3, [r7, #12]
 8007750:	e001      	b.n	8007756 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007752:	2300      	movs	r3, #0
 8007754:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007756:	f001 fc99 	bl	800908c <vPortExitCritical>

	return xReturn;
 800775a:	68fb      	ldr	r3, [r7, #12]
}
 800775c:	4618      	mov	r0, r3
 800775e:	3710      	adds	r7, #16
 8007760:	46bd      	mov	sp, r7
 8007762:	bd80      	pop	{r7, pc}

08007764 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007764:	b580      	push	{r7, lr}
 8007766:	b084      	sub	sp, #16
 8007768:	af00      	add	r7, sp, #0
 800776a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800776c:	f001 fc5c 	bl	8009028 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007778:	429a      	cmp	r2, r3
 800777a:	d102      	bne.n	8007782 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800777c:	2301      	movs	r3, #1
 800777e:	60fb      	str	r3, [r7, #12]
 8007780:	e001      	b.n	8007786 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007782:	2300      	movs	r3, #0
 8007784:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007786:	f001 fc81 	bl	800908c <vPortExitCritical>

	return xReturn;
 800778a:	68fb      	ldr	r3, [r7, #12]
}
 800778c:	4618      	mov	r0, r3
 800778e:	3710      	adds	r7, #16
 8007790:	46bd      	mov	sp, r7
 8007792:	bd80      	pop	{r7, pc}

08007794 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007794:	b480      	push	{r7}
 8007796:	b085      	sub	sp, #20
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
 800779c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800779e:	2300      	movs	r3, #0
 80077a0:	60fb      	str	r3, [r7, #12]
 80077a2:	e014      	b.n	80077ce <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80077a4:	4a0f      	ldr	r2, [pc, #60]	@ (80077e4 <vQueueAddToRegistry+0x50>)
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d10b      	bne.n	80077c8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80077b0:	490c      	ldr	r1, [pc, #48]	@ (80077e4 <vQueueAddToRegistry+0x50>)
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	683a      	ldr	r2, [r7, #0]
 80077b6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80077ba:	4a0a      	ldr	r2, [pc, #40]	@ (80077e4 <vQueueAddToRegistry+0x50>)
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	00db      	lsls	r3, r3, #3
 80077c0:	4413      	add	r3, r2
 80077c2:	687a      	ldr	r2, [r7, #4]
 80077c4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80077c6:	e006      	b.n	80077d6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	3301      	adds	r3, #1
 80077cc:	60fb      	str	r3, [r7, #12]
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	2b07      	cmp	r3, #7
 80077d2:	d9e7      	bls.n	80077a4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80077d4:	bf00      	nop
 80077d6:	bf00      	nop
 80077d8:	3714      	adds	r7, #20
 80077da:	46bd      	mov	sp, r7
 80077dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e0:	4770      	bx	lr
 80077e2:	bf00      	nop
 80077e4:	20006318 	.word	0x20006318

080077e8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80077e8:	b580      	push	{r7, lr}
 80077ea:	b086      	sub	sp, #24
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	60f8      	str	r0, [r7, #12]
 80077f0:	60b9      	str	r1, [r7, #8]
 80077f2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80077f8:	f001 fc16 	bl	8009028 <vPortEnterCritical>
 80077fc:	697b      	ldr	r3, [r7, #20]
 80077fe:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007802:	b25b      	sxtb	r3, r3
 8007804:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007808:	d103      	bne.n	8007812 <vQueueWaitForMessageRestricted+0x2a>
 800780a:	697b      	ldr	r3, [r7, #20]
 800780c:	2200      	movs	r2, #0
 800780e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007812:	697b      	ldr	r3, [r7, #20]
 8007814:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007818:	b25b      	sxtb	r3, r3
 800781a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800781e:	d103      	bne.n	8007828 <vQueueWaitForMessageRestricted+0x40>
 8007820:	697b      	ldr	r3, [r7, #20]
 8007822:	2200      	movs	r2, #0
 8007824:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007828:	f001 fc30 	bl	800908c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800782c:	697b      	ldr	r3, [r7, #20]
 800782e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007830:	2b00      	cmp	r3, #0
 8007832:	d106      	bne.n	8007842 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007834:	697b      	ldr	r3, [r7, #20]
 8007836:	3324      	adds	r3, #36	@ 0x24
 8007838:	687a      	ldr	r2, [r7, #4]
 800783a:	68b9      	ldr	r1, [r7, #8]
 800783c:	4618      	mov	r0, r3
 800783e:	f000 fc6d 	bl	800811c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007842:	6978      	ldr	r0, [r7, #20]
 8007844:	f7ff ff26 	bl	8007694 <prvUnlockQueue>
	}
 8007848:	bf00      	nop
 800784a:	3718      	adds	r7, #24
 800784c:	46bd      	mov	sp, r7
 800784e:	bd80      	pop	{r7, pc}

08007850 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007850:	b580      	push	{r7, lr}
 8007852:	b08e      	sub	sp, #56	@ 0x38
 8007854:	af04      	add	r7, sp, #16
 8007856:	60f8      	str	r0, [r7, #12]
 8007858:	60b9      	str	r1, [r7, #8]
 800785a:	607a      	str	r2, [r7, #4]
 800785c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800785e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007860:	2b00      	cmp	r3, #0
 8007862:	d10b      	bne.n	800787c <xTaskCreateStatic+0x2c>
	__asm volatile
 8007864:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007868:	f383 8811 	msr	BASEPRI, r3
 800786c:	f3bf 8f6f 	isb	sy
 8007870:	f3bf 8f4f 	dsb	sy
 8007874:	623b      	str	r3, [r7, #32]
}
 8007876:	bf00      	nop
 8007878:	bf00      	nop
 800787a:	e7fd      	b.n	8007878 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800787c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800787e:	2b00      	cmp	r3, #0
 8007880:	d10b      	bne.n	800789a <xTaskCreateStatic+0x4a>
	__asm volatile
 8007882:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007886:	f383 8811 	msr	BASEPRI, r3
 800788a:	f3bf 8f6f 	isb	sy
 800788e:	f3bf 8f4f 	dsb	sy
 8007892:	61fb      	str	r3, [r7, #28]
}
 8007894:	bf00      	nop
 8007896:	bf00      	nop
 8007898:	e7fd      	b.n	8007896 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800789a:	23a8      	movs	r3, #168	@ 0xa8
 800789c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800789e:	693b      	ldr	r3, [r7, #16]
 80078a0:	2ba8      	cmp	r3, #168	@ 0xa8
 80078a2:	d00b      	beq.n	80078bc <xTaskCreateStatic+0x6c>
	__asm volatile
 80078a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078a8:	f383 8811 	msr	BASEPRI, r3
 80078ac:	f3bf 8f6f 	isb	sy
 80078b0:	f3bf 8f4f 	dsb	sy
 80078b4:	61bb      	str	r3, [r7, #24]
}
 80078b6:	bf00      	nop
 80078b8:	bf00      	nop
 80078ba:	e7fd      	b.n	80078b8 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80078bc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80078be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d01e      	beq.n	8007902 <xTaskCreateStatic+0xb2>
 80078c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d01b      	beq.n	8007902 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80078ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078cc:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80078ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078d0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80078d2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80078d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078d6:	2202      	movs	r2, #2
 80078d8:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80078dc:	2300      	movs	r3, #0
 80078de:	9303      	str	r3, [sp, #12]
 80078e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078e2:	9302      	str	r3, [sp, #8]
 80078e4:	f107 0314 	add.w	r3, r7, #20
 80078e8:	9301      	str	r3, [sp, #4]
 80078ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078ec:	9300      	str	r3, [sp, #0]
 80078ee:	683b      	ldr	r3, [r7, #0]
 80078f0:	687a      	ldr	r2, [r7, #4]
 80078f2:	68b9      	ldr	r1, [r7, #8]
 80078f4:	68f8      	ldr	r0, [r7, #12]
 80078f6:	f000 f851 	bl	800799c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80078fa:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80078fc:	f000 f8f6 	bl	8007aec <prvAddNewTaskToReadyList>
 8007900:	e001      	b.n	8007906 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8007902:	2300      	movs	r3, #0
 8007904:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007906:	697b      	ldr	r3, [r7, #20]
	}
 8007908:	4618      	mov	r0, r3
 800790a:	3728      	adds	r7, #40	@ 0x28
 800790c:	46bd      	mov	sp, r7
 800790e:	bd80      	pop	{r7, pc}

08007910 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007910:	b580      	push	{r7, lr}
 8007912:	b08c      	sub	sp, #48	@ 0x30
 8007914:	af04      	add	r7, sp, #16
 8007916:	60f8      	str	r0, [r7, #12]
 8007918:	60b9      	str	r1, [r7, #8]
 800791a:	603b      	str	r3, [r7, #0]
 800791c:	4613      	mov	r3, r2
 800791e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007920:	88fb      	ldrh	r3, [r7, #6]
 8007922:	009b      	lsls	r3, r3, #2
 8007924:	4618      	mov	r0, r3
 8007926:	f001 fca1 	bl	800926c <pvPortMalloc>
 800792a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800792c:	697b      	ldr	r3, [r7, #20]
 800792e:	2b00      	cmp	r3, #0
 8007930:	d00e      	beq.n	8007950 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007932:	20a8      	movs	r0, #168	@ 0xa8
 8007934:	f001 fc9a 	bl	800926c <pvPortMalloc>
 8007938:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800793a:	69fb      	ldr	r3, [r7, #28]
 800793c:	2b00      	cmp	r3, #0
 800793e:	d003      	beq.n	8007948 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007940:	69fb      	ldr	r3, [r7, #28]
 8007942:	697a      	ldr	r2, [r7, #20]
 8007944:	631a      	str	r2, [r3, #48]	@ 0x30
 8007946:	e005      	b.n	8007954 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007948:	6978      	ldr	r0, [r7, #20]
 800794a:	f001 fd5d 	bl	8009408 <vPortFree>
 800794e:	e001      	b.n	8007954 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007950:	2300      	movs	r3, #0
 8007952:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007954:	69fb      	ldr	r3, [r7, #28]
 8007956:	2b00      	cmp	r3, #0
 8007958:	d017      	beq.n	800798a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800795a:	69fb      	ldr	r3, [r7, #28]
 800795c:	2200      	movs	r2, #0
 800795e:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007962:	88fa      	ldrh	r2, [r7, #6]
 8007964:	2300      	movs	r3, #0
 8007966:	9303      	str	r3, [sp, #12]
 8007968:	69fb      	ldr	r3, [r7, #28]
 800796a:	9302      	str	r3, [sp, #8]
 800796c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800796e:	9301      	str	r3, [sp, #4]
 8007970:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007972:	9300      	str	r3, [sp, #0]
 8007974:	683b      	ldr	r3, [r7, #0]
 8007976:	68b9      	ldr	r1, [r7, #8]
 8007978:	68f8      	ldr	r0, [r7, #12]
 800797a:	f000 f80f 	bl	800799c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800797e:	69f8      	ldr	r0, [r7, #28]
 8007980:	f000 f8b4 	bl	8007aec <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007984:	2301      	movs	r3, #1
 8007986:	61bb      	str	r3, [r7, #24]
 8007988:	e002      	b.n	8007990 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800798a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800798e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007990:	69bb      	ldr	r3, [r7, #24]
	}
 8007992:	4618      	mov	r0, r3
 8007994:	3720      	adds	r7, #32
 8007996:	46bd      	mov	sp, r7
 8007998:	bd80      	pop	{r7, pc}
	...

0800799c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800799c:	b580      	push	{r7, lr}
 800799e:	b088      	sub	sp, #32
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	60f8      	str	r0, [r7, #12]
 80079a4:	60b9      	str	r1, [r7, #8]
 80079a6:	607a      	str	r2, [r7, #4]
 80079a8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80079aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079ac:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	009b      	lsls	r3, r3, #2
 80079b2:	461a      	mov	r2, r3
 80079b4:	21a5      	movs	r1, #165	@ 0xa5
 80079b6:	f00f ffa1 	bl	80178fc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80079ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079bc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80079c4:	3b01      	subs	r3, #1
 80079c6:	009b      	lsls	r3, r3, #2
 80079c8:	4413      	add	r3, r2
 80079ca:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80079cc:	69bb      	ldr	r3, [r7, #24]
 80079ce:	f023 0307 	bic.w	r3, r3, #7
 80079d2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80079d4:	69bb      	ldr	r3, [r7, #24]
 80079d6:	f003 0307 	and.w	r3, r3, #7
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d00b      	beq.n	80079f6 <prvInitialiseNewTask+0x5a>
	__asm volatile
 80079de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079e2:	f383 8811 	msr	BASEPRI, r3
 80079e6:	f3bf 8f6f 	isb	sy
 80079ea:	f3bf 8f4f 	dsb	sy
 80079ee:	617b      	str	r3, [r7, #20]
}
 80079f0:	bf00      	nop
 80079f2:	bf00      	nop
 80079f4:	e7fd      	b.n	80079f2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80079f6:	68bb      	ldr	r3, [r7, #8]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d01f      	beq.n	8007a3c <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80079fc:	2300      	movs	r3, #0
 80079fe:	61fb      	str	r3, [r7, #28]
 8007a00:	e012      	b.n	8007a28 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007a02:	68ba      	ldr	r2, [r7, #8]
 8007a04:	69fb      	ldr	r3, [r7, #28]
 8007a06:	4413      	add	r3, r2
 8007a08:	7819      	ldrb	r1, [r3, #0]
 8007a0a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007a0c:	69fb      	ldr	r3, [r7, #28]
 8007a0e:	4413      	add	r3, r2
 8007a10:	3334      	adds	r3, #52	@ 0x34
 8007a12:	460a      	mov	r2, r1
 8007a14:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007a16:	68ba      	ldr	r2, [r7, #8]
 8007a18:	69fb      	ldr	r3, [r7, #28]
 8007a1a:	4413      	add	r3, r2
 8007a1c:	781b      	ldrb	r3, [r3, #0]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d006      	beq.n	8007a30 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007a22:	69fb      	ldr	r3, [r7, #28]
 8007a24:	3301      	adds	r3, #1
 8007a26:	61fb      	str	r3, [r7, #28]
 8007a28:	69fb      	ldr	r3, [r7, #28]
 8007a2a:	2b0f      	cmp	r3, #15
 8007a2c:	d9e9      	bls.n	8007a02 <prvInitialiseNewTask+0x66>
 8007a2e:	e000      	b.n	8007a32 <prvInitialiseNewTask+0x96>
			{
				break;
 8007a30:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007a32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a34:	2200      	movs	r2, #0
 8007a36:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007a3a:	e003      	b.n	8007a44 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007a3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a3e:	2200      	movs	r2, #0
 8007a40:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007a44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a46:	2b37      	cmp	r3, #55	@ 0x37
 8007a48:	d901      	bls.n	8007a4e <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007a4a:	2337      	movs	r3, #55	@ 0x37
 8007a4c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007a4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a50:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007a52:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007a54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a56:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007a58:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007a5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a5c:	2200      	movs	r2, #0
 8007a5e:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007a60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a62:	3304      	adds	r3, #4
 8007a64:	4618      	mov	r0, r3
 8007a66:	f7ff f965 	bl	8006d34 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007a6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a6c:	3318      	adds	r3, #24
 8007a6e:	4618      	mov	r0, r3
 8007a70:	f7ff f960 	bl	8006d34 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007a74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a76:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007a78:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007a7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a7c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007a80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a82:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007a84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a86:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007a88:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007a8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007a92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a94:	2200      	movs	r2, #0
 8007a96:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007a9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a9c:	3354      	adds	r3, #84	@ 0x54
 8007a9e:	224c      	movs	r2, #76	@ 0x4c
 8007aa0:	2100      	movs	r1, #0
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	f00f ff2a 	bl	80178fc <memset>
 8007aa8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007aaa:	4a0d      	ldr	r2, [pc, #52]	@ (8007ae0 <prvInitialiseNewTask+0x144>)
 8007aac:	659a      	str	r2, [r3, #88]	@ 0x58
 8007aae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ab0:	4a0c      	ldr	r2, [pc, #48]	@ (8007ae4 <prvInitialiseNewTask+0x148>)
 8007ab2:	65da      	str	r2, [r3, #92]	@ 0x5c
 8007ab4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ab6:	4a0c      	ldr	r2, [pc, #48]	@ (8007ae8 <prvInitialiseNewTask+0x14c>)
 8007ab8:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007aba:	683a      	ldr	r2, [r7, #0]
 8007abc:	68f9      	ldr	r1, [r7, #12]
 8007abe:	69b8      	ldr	r0, [r7, #24]
 8007ac0:	f001 f982 	bl	8008dc8 <pxPortInitialiseStack>
 8007ac4:	4602      	mov	r2, r0
 8007ac6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ac8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007aca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d002      	beq.n	8007ad6 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007ad0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ad2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007ad4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007ad6:	bf00      	nop
 8007ad8:	3720      	adds	r7, #32
 8007ada:	46bd      	mov	sp, r7
 8007adc:	bd80      	pop	{r7, pc}
 8007ade:	bf00      	nop
 8007ae0:	2000c0e8 	.word	0x2000c0e8
 8007ae4:	2000c150 	.word	0x2000c150
 8007ae8:	2000c1b8 	.word	0x2000c1b8

08007aec <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007aec:	b580      	push	{r7, lr}
 8007aee:	b082      	sub	sp, #8
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007af4:	f001 fa98 	bl	8009028 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007af8:	4b2d      	ldr	r3, [pc, #180]	@ (8007bb0 <prvAddNewTaskToReadyList+0xc4>)
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	3301      	adds	r3, #1
 8007afe:	4a2c      	ldr	r2, [pc, #176]	@ (8007bb0 <prvAddNewTaskToReadyList+0xc4>)
 8007b00:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007b02:	4b2c      	ldr	r3, [pc, #176]	@ (8007bb4 <prvAddNewTaskToReadyList+0xc8>)
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d109      	bne.n	8007b1e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007b0a:	4a2a      	ldr	r2, [pc, #168]	@ (8007bb4 <prvAddNewTaskToReadyList+0xc8>)
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007b10:	4b27      	ldr	r3, [pc, #156]	@ (8007bb0 <prvAddNewTaskToReadyList+0xc4>)
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	2b01      	cmp	r3, #1
 8007b16:	d110      	bne.n	8007b3a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007b18:	f000 fc56 	bl	80083c8 <prvInitialiseTaskLists>
 8007b1c:	e00d      	b.n	8007b3a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007b1e:	4b26      	ldr	r3, [pc, #152]	@ (8007bb8 <prvAddNewTaskToReadyList+0xcc>)
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d109      	bne.n	8007b3a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007b26:	4b23      	ldr	r3, [pc, #140]	@ (8007bb4 <prvAddNewTaskToReadyList+0xc8>)
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b30:	429a      	cmp	r2, r3
 8007b32:	d802      	bhi.n	8007b3a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007b34:	4a1f      	ldr	r2, [pc, #124]	@ (8007bb4 <prvAddNewTaskToReadyList+0xc8>)
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007b3a:	4b20      	ldr	r3, [pc, #128]	@ (8007bbc <prvAddNewTaskToReadyList+0xd0>)
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	3301      	adds	r3, #1
 8007b40:	4a1e      	ldr	r2, [pc, #120]	@ (8007bbc <prvAddNewTaskToReadyList+0xd0>)
 8007b42:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007b44:	4b1d      	ldr	r3, [pc, #116]	@ (8007bbc <prvAddNewTaskToReadyList+0xd0>)
 8007b46:	681a      	ldr	r2, [r3, #0]
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b50:	4b1b      	ldr	r3, [pc, #108]	@ (8007bc0 <prvAddNewTaskToReadyList+0xd4>)
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	429a      	cmp	r2, r3
 8007b56:	d903      	bls.n	8007b60 <prvAddNewTaskToReadyList+0x74>
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b5c:	4a18      	ldr	r2, [pc, #96]	@ (8007bc0 <prvAddNewTaskToReadyList+0xd4>)
 8007b5e:	6013      	str	r3, [r2, #0]
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b64:	4613      	mov	r3, r2
 8007b66:	009b      	lsls	r3, r3, #2
 8007b68:	4413      	add	r3, r2
 8007b6a:	009b      	lsls	r3, r3, #2
 8007b6c:	4a15      	ldr	r2, [pc, #84]	@ (8007bc4 <prvAddNewTaskToReadyList+0xd8>)
 8007b6e:	441a      	add	r2, r3
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	3304      	adds	r3, #4
 8007b74:	4619      	mov	r1, r3
 8007b76:	4610      	mov	r0, r2
 8007b78:	f7ff f8e9 	bl	8006d4e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007b7c:	f001 fa86 	bl	800908c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007b80:	4b0d      	ldr	r3, [pc, #52]	@ (8007bb8 <prvAddNewTaskToReadyList+0xcc>)
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d00e      	beq.n	8007ba6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007b88:	4b0a      	ldr	r3, [pc, #40]	@ (8007bb4 <prvAddNewTaskToReadyList+0xc8>)
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b92:	429a      	cmp	r2, r3
 8007b94:	d207      	bcs.n	8007ba6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007b96:	4b0c      	ldr	r3, [pc, #48]	@ (8007bc8 <prvAddNewTaskToReadyList+0xdc>)
 8007b98:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007b9c:	601a      	str	r2, [r3, #0]
 8007b9e:	f3bf 8f4f 	dsb	sy
 8007ba2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007ba6:	bf00      	nop
 8007ba8:	3708      	adds	r7, #8
 8007baa:	46bd      	mov	sp, r7
 8007bac:	bd80      	pop	{r7, pc}
 8007bae:	bf00      	nop
 8007bb0:	2000682c 	.word	0x2000682c
 8007bb4:	20006358 	.word	0x20006358
 8007bb8:	20006838 	.word	0x20006838
 8007bbc:	20006848 	.word	0x20006848
 8007bc0:	20006834 	.word	0x20006834
 8007bc4:	2000635c 	.word	0x2000635c
 8007bc8:	e000ed04 	.word	0xe000ed04

08007bcc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007bcc:	b580      	push	{r7, lr}
 8007bce:	b084      	sub	sp, #16
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007bd4:	2300      	movs	r3, #0
 8007bd6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d018      	beq.n	8007c10 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007bde:	4b14      	ldr	r3, [pc, #80]	@ (8007c30 <vTaskDelay+0x64>)
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d00b      	beq.n	8007bfe <vTaskDelay+0x32>
	__asm volatile
 8007be6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bea:	f383 8811 	msr	BASEPRI, r3
 8007bee:	f3bf 8f6f 	isb	sy
 8007bf2:	f3bf 8f4f 	dsb	sy
 8007bf6:	60bb      	str	r3, [r7, #8]
}
 8007bf8:	bf00      	nop
 8007bfa:	bf00      	nop
 8007bfc:	e7fd      	b.n	8007bfa <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007bfe:	f000 f88b 	bl	8007d18 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007c02:	2100      	movs	r1, #0
 8007c04:	6878      	ldr	r0, [r7, #4]
 8007c06:	f000 fd31 	bl	800866c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007c0a:	f000 f893 	bl	8007d34 <xTaskResumeAll>
 8007c0e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d107      	bne.n	8007c26 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8007c16:	4b07      	ldr	r3, [pc, #28]	@ (8007c34 <vTaskDelay+0x68>)
 8007c18:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007c1c:	601a      	str	r2, [r3, #0]
 8007c1e:	f3bf 8f4f 	dsb	sy
 8007c22:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007c26:	bf00      	nop
 8007c28:	3710      	adds	r7, #16
 8007c2a:	46bd      	mov	sp, r7
 8007c2c:	bd80      	pop	{r7, pc}
 8007c2e:	bf00      	nop
 8007c30:	20006854 	.word	0x20006854
 8007c34:	e000ed04 	.word	0xe000ed04

08007c38 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007c38:	b580      	push	{r7, lr}
 8007c3a:	b08a      	sub	sp, #40	@ 0x28
 8007c3c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007c3e:	2300      	movs	r3, #0
 8007c40:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007c42:	2300      	movs	r3, #0
 8007c44:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007c46:	463a      	mov	r2, r7
 8007c48:	1d39      	adds	r1, r7, #4
 8007c4a:	f107 0308 	add.w	r3, r7, #8
 8007c4e:	4618      	mov	r0, r3
 8007c50:	f7ff f81c 	bl	8006c8c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007c54:	6839      	ldr	r1, [r7, #0]
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	68ba      	ldr	r2, [r7, #8]
 8007c5a:	9202      	str	r2, [sp, #8]
 8007c5c:	9301      	str	r3, [sp, #4]
 8007c5e:	2300      	movs	r3, #0
 8007c60:	9300      	str	r3, [sp, #0]
 8007c62:	2300      	movs	r3, #0
 8007c64:	460a      	mov	r2, r1
 8007c66:	4924      	ldr	r1, [pc, #144]	@ (8007cf8 <vTaskStartScheduler+0xc0>)
 8007c68:	4824      	ldr	r0, [pc, #144]	@ (8007cfc <vTaskStartScheduler+0xc4>)
 8007c6a:	f7ff fdf1 	bl	8007850 <xTaskCreateStatic>
 8007c6e:	4603      	mov	r3, r0
 8007c70:	4a23      	ldr	r2, [pc, #140]	@ (8007d00 <vTaskStartScheduler+0xc8>)
 8007c72:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007c74:	4b22      	ldr	r3, [pc, #136]	@ (8007d00 <vTaskStartScheduler+0xc8>)
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d002      	beq.n	8007c82 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007c7c:	2301      	movs	r3, #1
 8007c7e:	617b      	str	r3, [r7, #20]
 8007c80:	e001      	b.n	8007c86 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007c82:	2300      	movs	r3, #0
 8007c84:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007c86:	697b      	ldr	r3, [r7, #20]
 8007c88:	2b01      	cmp	r3, #1
 8007c8a:	d102      	bne.n	8007c92 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007c8c:	f000 fd42 	bl	8008714 <xTimerCreateTimerTask>
 8007c90:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007c92:	697b      	ldr	r3, [r7, #20]
 8007c94:	2b01      	cmp	r3, #1
 8007c96:	d11b      	bne.n	8007cd0 <vTaskStartScheduler+0x98>
	__asm volatile
 8007c98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c9c:	f383 8811 	msr	BASEPRI, r3
 8007ca0:	f3bf 8f6f 	isb	sy
 8007ca4:	f3bf 8f4f 	dsb	sy
 8007ca8:	613b      	str	r3, [r7, #16]
}
 8007caa:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007cac:	4b15      	ldr	r3, [pc, #84]	@ (8007d04 <vTaskStartScheduler+0xcc>)
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	3354      	adds	r3, #84	@ 0x54
 8007cb2:	4a15      	ldr	r2, [pc, #84]	@ (8007d08 <vTaskStartScheduler+0xd0>)
 8007cb4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007cb6:	4b15      	ldr	r3, [pc, #84]	@ (8007d0c <vTaskStartScheduler+0xd4>)
 8007cb8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007cbc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007cbe:	4b14      	ldr	r3, [pc, #80]	@ (8007d10 <vTaskStartScheduler+0xd8>)
 8007cc0:	2201      	movs	r2, #1
 8007cc2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007cc4:	4b13      	ldr	r3, [pc, #76]	@ (8007d14 <vTaskStartScheduler+0xdc>)
 8007cc6:	2200      	movs	r2, #0
 8007cc8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007cca:	f001 f909 	bl	8008ee0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007cce:	e00f      	b.n	8007cf0 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007cd0:	697b      	ldr	r3, [r7, #20]
 8007cd2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007cd6:	d10b      	bne.n	8007cf0 <vTaskStartScheduler+0xb8>
	__asm volatile
 8007cd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cdc:	f383 8811 	msr	BASEPRI, r3
 8007ce0:	f3bf 8f6f 	isb	sy
 8007ce4:	f3bf 8f4f 	dsb	sy
 8007ce8:	60fb      	str	r3, [r7, #12]
}
 8007cea:	bf00      	nop
 8007cec:	bf00      	nop
 8007cee:	e7fd      	b.n	8007cec <vTaskStartScheduler+0xb4>
}
 8007cf0:	bf00      	nop
 8007cf2:	3718      	adds	r7, #24
 8007cf4:	46bd      	mov	sp, r7
 8007cf6:	bd80      	pop	{r7, pc}
 8007cf8:	08018850 	.word	0x08018850
 8007cfc:	08008399 	.word	0x08008399
 8007d00:	20006850 	.word	0x20006850
 8007d04:	20006358 	.word	0x20006358
 8007d08:	20000290 	.word	0x20000290
 8007d0c:	2000684c 	.word	0x2000684c
 8007d10:	20006838 	.word	0x20006838
 8007d14:	20006830 	.word	0x20006830

08007d18 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007d18:	b480      	push	{r7}
 8007d1a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007d1c:	4b04      	ldr	r3, [pc, #16]	@ (8007d30 <vTaskSuspendAll+0x18>)
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	3301      	adds	r3, #1
 8007d22:	4a03      	ldr	r2, [pc, #12]	@ (8007d30 <vTaskSuspendAll+0x18>)
 8007d24:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007d26:	bf00      	nop
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2e:	4770      	bx	lr
 8007d30:	20006854 	.word	0x20006854

08007d34 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007d34:	b580      	push	{r7, lr}
 8007d36:	b084      	sub	sp, #16
 8007d38:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007d3a:	2300      	movs	r3, #0
 8007d3c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007d3e:	2300      	movs	r3, #0
 8007d40:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007d42:	4b42      	ldr	r3, [pc, #264]	@ (8007e4c <xTaskResumeAll+0x118>)
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d10b      	bne.n	8007d62 <xTaskResumeAll+0x2e>
	__asm volatile
 8007d4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d4e:	f383 8811 	msr	BASEPRI, r3
 8007d52:	f3bf 8f6f 	isb	sy
 8007d56:	f3bf 8f4f 	dsb	sy
 8007d5a:	603b      	str	r3, [r7, #0]
}
 8007d5c:	bf00      	nop
 8007d5e:	bf00      	nop
 8007d60:	e7fd      	b.n	8007d5e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007d62:	f001 f961 	bl	8009028 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007d66:	4b39      	ldr	r3, [pc, #228]	@ (8007e4c <xTaskResumeAll+0x118>)
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	3b01      	subs	r3, #1
 8007d6c:	4a37      	ldr	r2, [pc, #220]	@ (8007e4c <xTaskResumeAll+0x118>)
 8007d6e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007d70:	4b36      	ldr	r3, [pc, #216]	@ (8007e4c <xTaskResumeAll+0x118>)
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d162      	bne.n	8007e3e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007d78:	4b35      	ldr	r3, [pc, #212]	@ (8007e50 <xTaskResumeAll+0x11c>)
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d05e      	beq.n	8007e3e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007d80:	e02f      	b.n	8007de2 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d82:	4b34      	ldr	r3, [pc, #208]	@ (8007e54 <xTaskResumeAll+0x120>)
 8007d84:	68db      	ldr	r3, [r3, #12]
 8007d86:	68db      	ldr	r3, [r3, #12]
 8007d88:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	3318      	adds	r3, #24
 8007d8e:	4618      	mov	r0, r3
 8007d90:	f7ff f83a 	bl	8006e08 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	3304      	adds	r3, #4
 8007d98:	4618      	mov	r0, r3
 8007d9a:	f7ff f835 	bl	8006e08 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007da2:	4b2d      	ldr	r3, [pc, #180]	@ (8007e58 <xTaskResumeAll+0x124>)
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	429a      	cmp	r2, r3
 8007da8:	d903      	bls.n	8007db2 <xTaskResumeAll+0x7e>
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007dae:	4a2a      	ldr	r2, [pc, #168]	@ (8007e58 <xTaskResumeAll+0x124>)
 8007db0:	6013      	str	r3, [r2, #0]
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007db6:	4613      	mov	r3, r2
 8007db8:	009b      	lsls	r3, r3, #2
 8007dba:	4413      	add	r3, r2
 8007dbc:	009b      	lsls	r3, r3, #2
 8007dbe:	4a27      	ldr	r2, [pc, #156]	@ (8007e5c <xTaskResumeAll+0x128>)
 8007dc0:	441a      	add	r2, r3
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	3304      	adds	r3, #4
 8007dc6:	4619      	mov	r1, r3
 8007dc8:	4610      	mov	r0, r2
 8007dca:	f7fe ffc0 	bl	8006d4e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007dd2:	4b23      	ldr	r3, [pc, #140]	@ (8007e60 <xTaskResumeAll+0x12c>)
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007dd8:	429a      	cmp	r2, r3
 8007dda:	d302      	bcc.n	8007de2 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8007ddc:	4b21      	ldr	r3, [pc, #132]	@ (8007e64 <xTaskResumeAll+0x130>)
 8007dde:	2201      	movs	r2, #1
 8007de0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007de2:	4b1c      	ldr	r3, [pc, #112]	@ (8007e54 <xTaskResumeAll+0x120>)
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d1cb      	bne.n	8007d82 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d001      	beq.n	8007df4 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007df0:	f000 fb8e 	bl	8008510 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007df4:	4b1c      	ldr	r3, [pc, #112]	@ (8007e68 <xTaskResumeAll+0x134>)
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d010      	beq.n	8007e22 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007e00:	f000 f846 	bl	8007e90 <xTaskIncrementTick>
 8007e04:	4603      	mov	r3, r0
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d002      	beq.n	8007e10 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8007e0a:	4b16      	ldr	r3, [pc, #88]	@ (8007e64 <xTaskResumeAll+0x130>)
 8007e0c:	2201      	movs	r2, #1
 8007e0e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	3b01      	subs	r3, #1
 8007e14:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d1f1      	bne.n	8007e00 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8007e1c:	4b12      	ldr	r3, [pc, #72]	@ (8007e68 <xTaskResumeAll+0x134>)
 8007e1e:	2200      	movs	r2, #0
 8007e20:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007e22:	4b10      	ldr	r3, [pc, #64]	@ (8007e64 <xTaskResumeAll+0x130>)
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d009      	beq.n	8007e3e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007e2a:	2301      	movs	r3, #1
 8007e2c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007e2e:	4b0f      	ldr	r3, [pc, #60]	@ (8007e6c <xTaskResumeAll+0x138>)
 8007e30:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007e34:	601a      	str	r2, [r3, #0]
 8007e36:	f3bf 8f4f 	dsb	sy
 8007e3a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007e3e:	f001 f925 	bl	800908c <vPortExitCritical>

	return xAlreadyYielded;
 8007e42:	68bb      	ldr	r3, [r7, #8]
}
 8007e44:	4618      	mov	r0, r3
 8007e46:	3710      	adds	r7, #16
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	bd80      	pop	{r7, pc}
 8007e4c:	20006854 	.word	0x20006854
 8007e50:	2000682c 	.word	0x2000682c
 8007e54:	200067ec 	.word	0x200067ec
 8007e58:	20006834 	.word	0x20006834
 8007e5c:	2000635c 	.word	0x2000635c
 8007e60:	20006358 	.word	0x20006358
 8007e64:	20006840 	.word	0x20006840
 8007e68:	2000683c 	.word	0x2000683c
 8007e6c:	e000ed04 	.word	0xe000ed04

08007e70 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007e70:	b480      	push	{r7}
 8007e72:	b083      	sub	sp, #12
 8007e74:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007e76:	4b05      	ldr	r3, [pc, #20]	@ (8007e8c <xTaskGetTickCount+0x1c>)
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007e7c:	687b      	ldr	r3, [r7, #4]
}
 8007e7e:	4618      	mov	r0, r3
 8007e80:	370c      	adds	r7, #12
 8007e82:	46bd      	mov	sp, r7
 8007e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e88:	4770      	bx	lr
 8007e8a:	bf00      	nop
 8007e8c:	20006830 	.word	0x20006830

08007e90 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007e90:	b580      	push	{r7, lr}
 8007e92:	b086      	sub	sp, #24
 8007e94:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007e96:	2300      	movs	r3, #0
 8007e98:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007e9a:	4b4f      	ldr	r3, [pc, #316]	@ (8007fd8 <xTaskIncrementTick+0x148>)
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	f040 8090 	bne.w	8007fc4 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007ea4:	4b4d      	ldr	r3, [pc, #308]	@ (8007fdc <xTaskIncrementTick+0x14c>)
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	3301      	adds	r3, #1
 8007eaa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007eac:	4a4b      	ldr	r2, [pc, #300]	@ (8007fdc <xTaskIncrementTick+0x14c>)
 8007eae:	693b      	ldr	r3, [r7, #16]
 8007eb0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007eb2:	693b      	ldr	r3, [r7, #16]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d121      	bne.n	8007efc <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8007eb8:	4b49      	ldr	r3, [pc, #292]	@ (8007fe0 <xTaskIncrementTick+0x150>)
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d00b      	beq.n	8007eda <xTaskIncrementTick+0x4a>
	__asm volatile
 8007ec2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ec6:	f383 8811 	msr	BASEPRI, r3
 8007eca:	f3bf 8f6f 	isb	sy
 8007ece:	f3bf 8f4f 	dsb	sy
 8007ed2:	603b      	str	r3, [r7, #0]
}
 8007ed4:	bf00      	nop
 8007ed6:	bf00      	nop
 8007ed8:	e7fd      	b.n	8007ed6 <xTaskIncrementTick+0x46>
 8007eda:	4b41      	ldr	r3, [pc, #260]	@ (8007fe0 <xTaskIncrementTick+0x150>)
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	60fb      	str	r3, [r7, #12]
 8007ee0:	4b40      	ldr	r3, [pc, #256]	@ (8007fe4 <xTaskIncrementTick+0x154>)
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	4a3e      	ldr	r2, [pc, #248]	@ (8007fe0 <xTaskIncrementTick+0x150>)
 8007ee6:	6013      	str	r3, [r2, #0]
 8007ee8:	4a3e      	ldr	r2, [pc, #248]	@ (8007fe4 <xTaskIncrementTick+0x154>)
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	6013      	str	r3, [r2, #0]
 8007eee:	4b3e      	ldr	r3, [pc, #248]	@ (8007fe8 <xTaskIncrementTick+0x158>)
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	3301      	adds	r3, #1
 8007ef4:	4a3c      	ldr	r2, [pc, #240]	@ (8007fe8 <xTaskIncrementTick+0x158>)
 8007ef6:	6013      	str	r3, [r2, #0]
 8007ef8:	f000 fb0a 	bl	8008510 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007efc:	4b3b      	ldr	r3, [pc, #236]	@ (8007fec <xTaskIncrementTick+0x15c>)
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	693a      	ldr	r2, [r7, #16]
 8007f02:	429a      	cmp	r2, r3
 8007f04:	d349      	bcc.n	8007f9a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007f06:	4b36      	ldr	r3, [pc, #216]	@ (8007fe0 <xTaskIncrementTick+0x150>)
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d104      	bne.n	8007f1a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007f10:	4b36      	ldr	r3, [pc, #216]	@ (8007fec <xTaskIncrementTick+0x15c>)
 8007f12:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007f16:	601a      	str	r2, [r3, #0]
					break;
 8007f18:	e03f      	b.n	8007f9a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007f1a:	4b31      	ldr	r3, [pc, #196]	@ (8007fe0 <xTaskIncrementTick+0x150>)
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	68db      	ldr	r3, [r3, #12]
 8007f20:	68db      	ldr	r3, [r3, #12]
 8007f22:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007f24:	68bb      	ldr	r3, [r7, #8]
 8007f26:	685b      	ldr	r3, [r3, #4]
 8007f28:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007f2a:	693a      	ldr	r2, [r7, #16]
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	429a      	cmp	r2, r3
 8007f30:	d203      	bcs.n	8007f3a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007f32:	4a2e      	ldr	r2, [pc, #184]	@ (8007fec <xTaskIncrementTick+0x15c>)
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007f38:	e02f      	b.n	8007f9a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007f3a:	68bb      	ldr	r3, [r7, #8]
 8007f3c:	3304      	adds	r3, #4
 8007f3e:	4618      	mov	r0, r3
 8007f40:	f7fe ff62 	bl	8006e08 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007f44:	68bb      	ldr	r3, [r7, #8]
 8007f46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d004      	beq.n	8007f56 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007f4c:	68bb      	ldr	r3, [r7, #8]
 8007f4e:	3318      	adds	r3, #24
 8007f50:	4618      	mov	r0, r3
 8007f52:	f7fe ff59 	bl	8006e08 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007f56:	68bb      	ldr	r3, [r7, #8]
 8007f58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f5a:	4b25      	ldr	r3, [pc, #148]	@ (8007ff0 <xTaskIncrementTick+0x160>)
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	429a      	cmp	r2, r3
 8007f60:	d903      	bls.n	8007f6a <xTaskIncrementTick+0xda>
 8007f62:	68bb      	ldr	r3, [r7, #8]
 8007f64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f66:	4a22      	ldr	r2, [pc, #136]	@ (8007ff0 <xTaskIncrementTick+0x160>)
 8007f68:	6013      	str	r3, [r2, #0]
 8007f6a:	68bb      	ldr	r3, [r7, #8]
 8007f6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f6e:	4613      	mov	r3, r2
 8007f70:	009b      	lsls	r3, r3, #2
 8007f72:	4413      	add	r3, r2
 8007f74:	009b      	lsls	r3, r3, #2
 8007f76:	4a1f      	ldr	r2, [pc, #124]	@ (8007ff4 <xTaskIncrementTick+0x164>)
 8007f78:	441a      	add	r2, r3
 8007f7a:	68bb      	ldr	r3, [r7, #8]
 8007f7c:	3304      	adds	r3, #4
 8007f7e:	4619      	mov	r1, r3
 8007f80:	4610      	mov	r0, r2
 8007f82:	f7fe fee4 	bl	8006d4e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007f86:	68bb      	ldr	r3, [r7, #8]
 8007f88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f8a:	4b1b      	ldr	r3, [pc, #108]	@ (8007ff8 <xTaskIncrementTick+0x168>)
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f90:	429a      	cmp	r2, r3
 8007f92:	d3b8      	bcc.n	8007f06 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8007f94:	2301      	movs	r3, #1
 8007f96:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007f98:	e7b5      	b.n	8007f06 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007f9a:	4b17      	ldr	r3, [pc, #92]	@ (8007ff8 <xTaskIncrementTick+0x168>)
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007fa0:	4914      	ldr	r1, [pc, #80]	@ (8007ff4 <xTaskIncrementTick+0x164>)
 8007fa2:	4613      	mov	r3, r2
 8007fa4:	009b      	lsls	r3, r3, #2
 8007fa6:	4413      	add	r3, r2
 8007fa8:	009b      	lsls	r3, r3, #2
 8007faa:	440b      	add	r3, r1
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	2b01      	cmp	r3, #1
 8007fb0:	d901      	bls.n	8007fb6 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8007fb2:	2301      	movs	r3, #1
 8007fb4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007fb6:	4b11      	ldr	r3, [pc, #68]	@ (8007ffc <xTaskIncrementTick+0x16c>)
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d007      	beq.n	8007fce <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8007fbe:	2301      	movs	r3, #1
 8007fc0:	617b      	str	r3, [r7, #20]
 8007fc2:	e004      	b.n	8007fce <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007fc4:	4b0e      	ldr	r3, [pc, #56]	@ (8008000 <xTaskIncrementTick+0x170>)
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	3301      	adds	r3, #1
 8007fca:	4a0d      	ldr	r2, [pc, #52]	@ (8008000 <xTaskIncrementTick+0x170>)
 8007fcc:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007fce:	697b      	ldr	r3, [r7, #20]
}
 8007fd0:	4618      	mov	r0, r3
 8007fd2:	3718      	adds	r7, #24
 8007fd4:	46bd      	mov	sp, r7
 8007fd6:	bd80      	pop	{r7, pc}
 8007fd8:	20006854 	.word	0x20006854
 8007fdc:	20006830 	.word	0x20006830
 8007fe0:	200067e4 	.word	0x200067e4
 8007fe4:	200067e8 	.word	0x200067e8
 8007fe8:	20006844 	.word	0x20006844
 8007fec:	2000684c 	.word	0x2000684c
 8007ff0:	20006834 	.word	0x20006834
 8007ff4:	2000635c 	.word	0x2000635c
 8007ff8:	20006358 	.word	0x20006358
 8007ffc:	20006840 	.word	0x20006840
 8008000:	2000683c 	.word	0x2000683c

08008004 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008004:	b480      	push	{r7}
 8008006:	b085      	sub	sp, #20
 8008008:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800800a:	4b2b      	ldr	r3, [pc, #172]	@ (80080b8 <vTaskSwitchContext+0xb4>)
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	2b00      	cmp	r3, #0
 8008010:	d003      	beq.n	800801a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008012:	4b2a      	ldr	r3, [pc, #168]	@ (80080bc <vTaskSwitchContext+0xb8>)
 8008014:	2201      	movs	r2, #1
 8008016:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008018:	e047      	b.n	80080aa <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800801a:	4b28      	ldr	r3, [pc, #160]	@ (80080bc <vTaskSwitchContext+0xb8>)
 800801c:	2200      	movs	r2, #0
 800801e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008020:	4b27      	ldr	r3, [pc, #156]	@ (80080c0 <vTaskSwitchContext+0xbc>)
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	60fb      	str	r3, [r7, #12]
 8008026:	e011      	b.n	800804c <vTaskSwitchContext+0x48>
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	2b00      	cmp	r3, #0
 800802c:	d10b      	bne.n	8008046 <vTaskSwitchContext+0x42>
	__asm volatile
 800802e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008032:	f383 8811 	msr	BASEPRI, r3
 8008036:	f3bf 8f6f 	isb	sy
 800803a:	f3bf 8f4f 	dsb	sy
 800803e:	607b      	str	r3, [r7, #4]
}
 8008040:	bf00      	nop
 8008042:	bf00      	nop
 8008044:	e7fd      	b.n	8008042 <vTaskSwitchContext+0x3e>
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	3b01      	subs	r3, #1
 800804a:	60fb      	str	r3, [r7, #12]
 800804c:	491d      	ldr	r1, [pc, #116]	@ (80080c4 <vTaskSwitchContext+0xc0>)
 800804e:	68fa      	ldr	r2, [r7, #12]
 8008050:	4613      	mov	r3, r2
 8008052:	009b      	lsls	r3, r3, #2
 8008054:	4413      	add	r3, r2
 8008056:	009b      	lsls	r3, r3, #2
 8008058:	440b      	add	r3, r1
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	2b00      	cmp	r3, #0
 800805e:	d0e3      	beq.n	8008028 <vTaskSwitchContext+0x24>
 8008060:	68fa      	ldr	r2, [r7, #12]
 8008062:	4613      	mov	r3, r2
 8008064:	009b      	lsls	r3, r3, #2
 8008066:	4413      	add	r3, r2
 8008068:	009b      	lsls	r3, r3, #2
 800806a:	4a16      	ldr	r2, [pc, #88]	@ (80080c4 <vTaskSwitchContext+0xc0>)
 800806c:	4413      	add	r3, r2
 800806e:	60bb      	str	r3, [r7, #8]
 8008070:	68bb      	ldr	r3, [r7, #8]
 8008072:	685b      	ldr	r3, [r3, #4]
 8008074:	685a      	ldr	r2, [r3, #4]
 8008076:	68bb      	ldr	r3, [r7, #8]
 8008078:	605a      	str	r2, [r3, #4]
 800807a:	68bb      	ldr	r3, [r7, #8]
 800807c:	685a      	ldr	r2, [r3, #4]
 800807e:	68bb      	ldr	r3, [r7, #8]
 8008080:	3308      	adds	r3, #8
 8008082:	429a      	cmp	r2, r3
 8008084:	d104      	bne.n	8008090 <vTaskSwitchContext+0x8c>
 8008086:	68bb      	ldr	r3, [r7, #8]
 8008088:	685b      	ldr	r3, [r3, #4]
 800808a:	685a      	ldr	r2, [r3, #4]
 800808c:	68bb      	ldr	r3, [r7, #8]
 800808e:	605a      	str	r2, [r3, #4]
 8008090:	68bb      	ldr	r3, [r7, #8]
 8008092:	685b      	ldr	r3, [r3, #4]
 8008094:	68db      	ldr	r3, [r3, #12]
 8008096:	4a0c      	ldr	r2, [pc, #48]	@ (80080c8 <vTaskSwitchContext+0xc4>)
 8008098:	6013      	str	r3, [r2, #0]
 800809a:	4a09      	ldr	r2, [pc, #36]	@ (80080c0 <vTaskSwitchContext+0xbc>)
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80080a0:	4b09      	ldr	r3, [pc, #36]	@ (80080c8 <vTaskSwitchContext+0xc4>)
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	3354      	adds	r3, #84	@ 0x54
 80080a6:	4a09      	ldr	r2, [pc, #36]	@ (80080cc <vTaskSwitchContext+0xc8>)
 80080a8:	6013      	str	r3, [r2, #0]
}
 80080aa:	bf00      	nop
 80080ac:	3714      	adds	r7, #20
 80080ae:	46bd      	mov	sp, r7
 80080b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b4:	4770      	bx	lr
 80080b6:	bf00      	nop
 80080b8:	20006854 	.word	0x20006854
 80080bc:	20006840 	.word	0x20006840
 80080c0:	20006834 	.word	0x20006834
 80080c4:	2000635c 	.word	0x2000635c
 80080c8:	20006358 	.word	0x20006358
 80080cc:	20000290 	.word	0x20000290

080080d0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80080d0:	b580      	push	{r7, lr}
 80080d2:	b084      	sub	sp, #16
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	6078      	str	r0, [r7, #4]
 80080d8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d10b      	bne.n	80080f8 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80080e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080e4:	f383 8811 	msr	BASEPRI, r3
 80080e8:	f3bf 8f6f 	isb	sy
 80080ec:	f3bf 8f4f 	dsb	sy
 80080f0:	60fb      	str	r3, [r7, #12]
}
 80080f2:	bf00      	nop
 80080f4:	bf00      	nop
 80080f6:	e7fd      	b.n	80080f4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80080f8:	4b07      	ldr	r3, [pc, #28]	@ (8008118 <vTaskPlaceOnEventList+0x48>)
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	3318      	adds	r3, #24
 80080fe:	4619      	mov	r1, r3
 8008100:	6878      	ldr	r0, [r7, #4]
 8008102:	f7fe fe48 	bl	8006d96 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008106:	2101      	movs	r1, #1
 8008108:	6838      	ldr	r0, [r7, #0]
 800810a:	f000 faaf 	bl	800866c <prvAddCurrentTaskToDelayedList>
}
 800810e:	bf00      	nop
 8008110:	3710      	adds	r7, #16
 8008112:	46bd      	mov	sp, r7
 8008114:	bd80      	pop	{r7, pc}
 8008116:	bf00      	nop
 8008118:	20006358 	.word	0x20006358

0800811c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800811c:	b580      	push	{r7, lr}
 800811e:	b086      	sub	sp, #24
 8008120:	af00      	add	r7, sp, #0
 8008122:	60f8      	str	r0, [r7, #12]
 8008124:	60b9      	str	r1, [r7, #8]
 8008126:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	2b00      	cmp	r3, #0
 800812c:	d10b      	bne.n	8008146 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800812e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008132:	f383 8811 	msr	BASEPRI, r3
 8008136:	f3bf 8f6f 	isb	sy
 800813a:	f3bf 8f4f 	dsb	sy
 800813e:	617b      	str	r3, [r7, #20]
}
 8008140:	bf00      	nop
 8008142:	bf00      	nop
 8008144:	e7fd      	b.n	8008142 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008146:	4b0a      	ldr	r3, [pc, #40]	@ (8008170 <vTaskPlaceOnEventListRestricted+0x54>)
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	3318      	adds	r3, #24
 800814c:	4619      	mov	r1, r3
 800814e:	68f8      	ldr	r0, [r7, #12]
 8008150:	f7fe fdfd 	bl	8006d4e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	2b00      	cmp	r3, #0
 8008158:	d002      	beq.n	8008160 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800815a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800815e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008160:	6879      	ldr	r1, [r7, #4]
 8008162:	68b8      	ldr	r0, [r7, #8]
 8008164:	f000 fa82 	bl	800866c <prvAddCurrentTaskToDelayedList>
	}
 8008168:	bf00      	nop
 800816a:	3718      	adds	r7, #24
 800816c:	46bd      	mov	sp, r7
 800816e:	bd80      	pop	{r7, pc}
 8008170:	20006358 	.word	0x20006358

08008174 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008174:	b580      	push	{r7, lr}
 8008176:	b086      	sub	sp, #24
 8008178:	af00      	add	r7, sp, #0
 800817a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	68db      	ldr	r3, [r3, #12]
 8008180:	68db      	ldr	r3, [r3, #12]
 8008182:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008184:	693b      	ldr	r3, [r7, #16]
 8008186:	2b00      	cmp	r3, #0
 8008188:	d10b      	bne.n	80081a2 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800818a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800818e:	f383 8811 	msr	BASEPRI, r3
 8008192:	f3bf 8f6f 	isb	sy
 8008196:	f3bf 8f4f 	dsb	sy
 800819a:	60fb      	str	r3, [r7, #12]
}
 800819c:	bf00      	nop
 800819e:	bf00      	nop
 80081a0:	e7fd      	b.n	800819e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80081a2:	693b      	ldr	r3, [r7, #16]
 80081a4:	3318      	adds	r3, #24
 80081a6:	4618      	mov	r0, r3
 80081a8:	f7fe fe2e 	bl	8006e08 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80081ac:	4b1d      	ldr	r3, [pc, #116]	@ (8008224 <xTaskRemoveFromEventList+0xb0>)
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d11d      	bne.n	80081f0 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80081b4:	693b      	ldr	r3, [r7, #16]
 80081b6:	3304      	adds	r3, #4
 80081b8:	4618      	mov	r0, r3
 80081ba:	f7fe fe25 	bl	8006e08 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80081be:	693b      	ldr	r3, [r7, #16]
 80081c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80081c2:	4b19      	ldr	r3, [pc, #100]	@ (8008228 <xTaskRemoveFromEventList+0xb4>)
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	429a      	cmp	r2, r3
 80081c8:	d903      	bls.n	80081d2 <xTaskRemoveFromEventList+0x5e>
 80081ca:	693b      	ldr	r3, [r7, #16]
 80081cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081ce:	4a16      	ldr	r2, [pc, #88]	@ (8008228 <xTaskRemoveFromEventList+0xb4>)
 80081d0:	6013      	str	r3, [r2, #0]
 80081d2:	693b      	ldr	r3, [r7, #16]
 80081d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80081d6:	4613      	mov	r3, r2
 80081d8:	009b      	lsls	r3, r3, #2
 80081da:	4413      	add	r3, r2
 80081dc:	009b      	lsls	r3, r3, #2
 80081de:	4a13      	ldr	r2, [pc, #76]	@ (800822c <xTaskRemoveFromEventList+0xb8>)
 80081e0:	441a      	add	r2, r3
 80081e2:	693b      	ldr	r3, [r7, #16]
 80081e4:	3304      	adds	r3, #4
 80081e6:	4619      	mov	r1, r3
 80081e8:	4610      	mov	r0, r2
 80081ea:	f7fe fdb0 	bl	8006d4e <vListInsertEnd>
 80081ee:	e005      	b.n	80081fc <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80081f0:	693b      	ldr	r3, [r7, #16]
 80081f2:	3318      	adds	r3, #24
 80081f4:	4619      	mov	r1, r3
 80081f6:	480e      	ldr	r0, [pc, #56]	@ (8008230 <xTaskRemoveFromEventList+0xbc>)
 80081f8:	f7fe fda9 	bl	8006d4e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80081fc:	693b      	ldr	r3, [r7, #16]
 80081fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008200:	4b0c      	ldr	r3, [pc, #48]	@ (8008234 <xTaskRemoveFromEventList+0xc0>)
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008206:	429a      	cmp	r2, r3
 8008208:	d905      	bls.n	8008216 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800820a:	2301      	movs	r3, #1
 800820c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800820e:	4b0a      	ldr	r3, [pc, #40]	@ (8008238 <xTaskRemoveFromEventList+0xc4>)
 8008210:	2201      	movs	r2, #1
 8008212:	601a      	str	r2, [r3, #0]
 8008214:	e001      	b.n	800821a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8008216:	2300      	movs	r3, #0
 8008218:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800821a:	697b      	ldr	r3, [r7, #20]
}
 800821c:	4618      	mov	r0, r3
 800821e:	3718      	adds	r7, #24
 8008220:	46bd      	mov	sp, r7
 8008222:	bd80      	pop	{r7, pc}
 8008224:	20006854 	.word	0x20006854
 8008228:	20006834 	.word	0x20006834
 800822c:	2000635c 	.word	0x2000635c
 8008230:	200067ec 	.word	0x200067ec
 8008234:	20006358 	.word	0x20006358
 8008238:	20006840 	.word	0x20006840

0800823c <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800823c:	b580      	push	{r7, lr}
 800823e:	b084      	sub	sp, #16
 8008240:	af00      	add	r7, sp, #0
 8008242:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	2b00      	cmp	r3, #0
 8008248:	d10b      	bne.n	8008262 <vTaskSetTimeOutState+0x26>
	__asm volatile
 800824a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800824e:	f383 8811 	msr	BASEPRI, r3
 8008252:	f3bf 8f6f 	isb	sy
 8008256:	f3bf 8f4f 	dsb	sy
 800825a:	60fb      	str	r3, [r7, #12]
}
 800825c:	bf00      	nop
 800825e:	bf00      	nop
 8008260:	e7fd      	b.n	800825e <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 8008262:	f000 fee1 	bl	8009028 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008266:	4b07      	ldr	r3, [pc, #28]	@ (8008284 <vTaskSetTimeOutState+0x48>)
 8008268:	681a      	ldr	r2, [r3, #0]
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 800826e:	4b06      	ldr	r3, [pc, #24]	@ (8008288 <vTaskSetTimeOutState+0x4c>)
 8008270:	681a      	ldr	r2, [r3, #0]
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 8008276:	f000 ff09 	bl	800908c <vPortExitCritical>
}
 800827a:	bf00      	nop
 800827c:	3710      	adds	r7, #16
 800827e:	46bd      	mov	sp, r7
 8008280:	bd80      	pop	{r7, pc}
 8008282:	bf00      	nop
 8008284:	20006844 	.word	0x20006844
 8008288:	20006830 	.word	0x20006830

0800828c <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800828c:	b480      	push	{r7}
 800828e:	b083      	sub	sp, #12
 8008290:	af00      	add	r7, sp, #0
 8008292:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008294:	4b06      	ldr	r3, [pc, #24]	@ (80082b0 <vTaskInternalSetTimeOutState+0x24>)
 8008296:	681a      	ldr	r2, [r3, #0]
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800829c:	4b05      	ldr	r3, [pc, #20]	@ (80082b4 <vTaskInternalSetTimeOutState+0x28>)
 800829e:	681a      	ldr	r2, [r3, #0]
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	605a      	str	r2, [r3, #4]
}
 80082a4:	bf00      	nop
 80082a6:	370c      	adds	r7, #12
 80082a8:	46bd      	mov	sp, r7
 80082aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ae:	4770      	bx	lr
 80082b0:	20006844 	.word	0x20006844
 80082b4:	20006830 	.word	0x20006830

080082b8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80082b8:	b580      	push	{r7, lr}
 80082ba:	b088      	sub	sp, #32
 80082bc:	af00      	add	r7, sp, #0
 80082be:	6078      	str	r0, [r7, #4]
 80082c0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d10b      	bne.n	80082e0 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80082c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082cc:	f383 8811 	msr	BASEPRI, r3
 80082d0:	f3bf 8f6f 	isb	sy
 80082d4:	f3bf 8f4f 	dsb	sy
 80082d8:	613b      	str	r3, [r7, #16]
}
 80082da:	bf00      	nop
 80082dc:	bf00      	nop
 80082de:	e7fd      	b.n	80082dc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80082e0:	683b      	ldr	r3, [r7, #0]
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d10b      	bne.n	80082fe <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80082e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082ea:	f383 8811 	msr	BASEPRI, r3
 80082ee:	f3bf 8f6f 	isb	sy
 80082f2:	f3bf 8f4f 	dsb	sy
 80082f6:	60fb      	str	r3, [r7, #12]
}
 80082f8:	bf00      	nop
 80082fa:	bf00      	nop
 80082fc:	e7fd      	b.n	80082fa <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80082fe:	f000 fe93 	bl	8009028 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008302:	4b1d      	ldr	r3, [pc, #116]	@ (8008378 <xTaskCheckForTimeOut+0xc0>)
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	685b      	ldr	r3, [r3, #4]
 800830c:	69ba      	ldr	r2, [r7, #24]
 800830e:	1ad3      	subs	r3, r2, r3
 8008310:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008312:	683b      	ldr	r3, [r7, #0]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800831a:	d102      	bne.n	8008322 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800831c:	2300      	movs	r3, #0
 800831e:	61fb      	str	r3, [r7, #28]
 8008320:	e023      	b.n	800836a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681a      	ldr	r2, [r3, #0]
 8008326:	4b15      	ldr	r3, [pc, #84]	@ (800837c <xTaskCheckForTimeOut+0xc4>)
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	429a      	cmp	r2, r3
 800832c:	d007      	beq.n	800833e <xTaskCheckForTimeOut+0x86>
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	685b      	ldr	r3, [r3, #4]
 8008332:	69ba      	ldr	r2, [r7, #24]
 8008334:	429a      	cmp	r2, r3
 8008336:	d302      	bcc.n	800833e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008338:	2301      	movs	r3, #1
 800833a:	61fb      	str	r3, [r7, #28]
 800833c:	e015      	b.n	800836a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800833e:	683b      	ldr	r3, [r7, #0]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	697a      	ldr	r2, [r7, #20]
 8008344:	429a      	cmp	r2, r3
 8008346:	d20b      	bcs.n	8008360 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008348:	683b      	ldr	r3, [r7, #0]
 800834a:	681a      	ldr	r2, [r3, #0]
 800834c:	697b      	ldr	r3, [r7, #20]
 800834e:	1ad2      	subs	r2, r2, r3
 8008350:	683b      	ldr	r3, [r7, #0]
 8008352:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008354:	6878      	ldr	r0, [r7, #4]
 8008356:	f7ff ff99 	bl	800828c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800835a:	2300      	movs	r3, #0
 800835c:	61fb      	str	r3, [r7, #28]
 800835e:	e004      	b.n	800836a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8008360:	683b      	ldr	r3, [r7, #0]
 8008362:	2200      	movs	r2, #0
 8008364:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008366:	2301      	movs	r3, #1
 8008368:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800836a:	f000 fe8f 	bl	800908c <vPortExitCritical>

	return xReturn;
 800836e:	69fb      	ldr	r3, [r7, #28]
}
 8008370:	4618      	mov	r0, r3
 8008372:	3720      	adds	r7, #32
 8008374:	46bd      	mov	sp, r7
 8008376:	bd80      	pop	{r7, pc}
 8008378:	20006830 	.word	0x20006830
 800837c:	20006844 	.word	0x20006844

08008380 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008380:	b480      	push	{r7}
 8008382:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008384:	4b03      	ldr	r3, [pc, #12]	@ (8008394 <vTaskMissedYield+0x14>)
 8008386:	2201      	movs	r2, #1
 8008388:	601a      	str	r2, [r3, #0]
}
 800838a:	bf00      	nop
 800838c:	46bd      	mov	sp, r7
 800838e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008392:	4770      	bx	lr
 8008394:	20006840 	.word	0x20006840

08008398 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008398:	b580      	push	{r7, lr}
 800839a:	b082      	sub	sp, #8
 800839c:	af00      	add	r7, sp, #0
 800839e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80083a0:	f000 f852 	bl	8008448 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80083a4:	4b06      	ldr	r3, [pc, #24]	@ (80083c0 <prvIdleTask+0x28>)
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	2b01      	cmp	r3, #1
 80083aa:	d9f9      	bls.n	80083a0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80083ac:	4b05      	ldr	r3, [pc, #20]	@ (80083c4 <prvIdleTask+0x2c>)
 80083ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80083b2:	601a      	str	r2, [r3, #0]
 80083b4:	f3bf 8f4f 	dsb	sy
 80083b8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80083bc:	e7f0      	b.n	80083a0 <prvIdleTask+0x8>
 80083be:	bf00      	nop
 80083c0:	2000635c 	.word	0x2000635c
 80083c4:	e000ed04 	.word	0xe000ed04

080083c8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80083c8:	b580      	push	{r7, lr}
 80083ca:	b082      	sub	sp, #8
 80083cc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80083ce:	2300      	movs	r3, #0
 80083d0:	607b      	str	r3, [r7, #4]
 80083d2:	e00c      	b.n	80083ee <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80083d4:	687a      	ldr	r2, [r7, #4]
 80083d6:	4613      	mov	r3, r2
 80083d8:	009b      	lsls	r3, r3, #2
 80083da:	4413      	add	r3, r2
 80083dc:	009b      	lsls	r3, r3, #2
 80083de:	4a12      	ldr	r2, [pc, #72]	@ (8008428 <prvInitialiseTaskLists+0x60>)
 80083e0:	4413      	add	r3, r2
 80083e2:	4618      	mov	r0, r3
 80083e4:	f7fe fc86 	bl	8006cf4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	3301      	adds	r3, #1
 80083ec:	607b      	str	r3, [r7, #4]
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	2b37      	cmp	r3, #55	@ 0x37
 80083f2:	d9ef      	bls.n	80083d4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80083f4:	480d      	ldr	r0, [pc, #52]	@ (800842c <prvInitialiseTaskLists+0x64>)
 80083f6:	f7fe fc7d 	bl	8006cf4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80083fa:	480d      	ldr	r0, [pc, #52]	@ (8008430 <prvInitialiseTaskLists+0x68>)
 80083fc:	f7fe fc7a 	bl	8006cf4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008400:	480c      	ldr	r0, [pc, #48]	@ (8008434 <prvInitialiseTaskLists+0x6c>)
 8008402:	f7fe fc77 	bl	8006cf4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008406:	480c      	ldr	r0, [pc, #48]	@ (8008438 <prvInitialiseTaskLists+0x70>)
 8008408:	f7fe fc74 	bl	8006cf4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800840c:	480b      	ldr	r0, [pc, #44]	@ (800843c <prvInitialiseTaskLists+0x74>)
 800840e:	f7fe fc71 	bl	8006cf4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008412:	4b0b      	ldr	r3, [pc, #44]	@ (8008440 <prvInitialiseTaskLists+0x78>)
 8008414:	4a05      	ldr	r2, [pc, #20]	@ (800842c <prvInitialiseTaskLists+0x64>)
 8008416:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008418:	4b0a      	ldr	r3, [pc, #40]	@ (8008444 <prvInitialiseTaskLists+0x7c>)
 800841a:	4a05      	ldr	r2, [pc, #20]	@ (8008430 <prvInitialiseTaskLists+0x68>)
 800841c:	601a      	str	r2, [r3, #0]
}
 800841e:	bf00      	nop
 8008420:	3708      	adds	r7, #8
 8008422:	46bd      	mov	sp, r7
 8008424:	bd80      	pop	{r7, pc}
 8008426:	bf00      	nop
 8008428:	2000635c 	.word	0x2000635c
 800842c:	200067bc 	.word	0x200067bc
 8008430:	200067d0 	.word	0x200067d0
 8008434:	200067ec 	.word	0x200067ec
 8008438:	20006800 	.word	0x20006800
 800843c:	20006818 	.word	0x20006818
 8008440:	200067e4 	.word	0x200067e4
 8008444:	200067e8 	.word	0x200067e8

08008448 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008448:	b580      	push	{r7, lr}
 800844a:	b082      	sub	sp, #8
 800844c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800844e:	e019      	b.n	8008484 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008450:	f000 fdea 	bl	8009028 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008454:	4b10      	ldr	r3, [pc, #64]	@ (8008498 <prvCheckTasksWaitingTermination+0x50>)
 8008456:	68db      	ldr	r3, [r3, #12]
 8008458:	68db      	ldr	r3, [r3, #12]
 800845a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	3304      	adds	r3, #4
 8008460:	4618      	mov	r0, r3
 8008462:	f7fe fcd1 	bl	8006e08 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008466:	4b0d      	ldr	r3, [pc, #52]	@ (800849c <prvCheckTasksWaitingTermination+0x54>)
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	3b01      	subs	r3, #1
 800846c:	4a0b      	ldr	r2, [pc, #44]	@ (800849c <prvCheckTasksWaitingTermination+0x54>)
 800846e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008470:	4b0b      	ldr	r3, [pc, #44]	@ (80084a0 <prvCheckTasksWaitingTermination+0x58>)
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	3b01      	subs	r3, #1
 8008476:	4a0a      	ldr	r2, [pc, #40]	@ (80084a0 <prvCheckTasksWaitingTermination+0x58>)
 8008478:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800847a:	f000 fe07 	bl	800908c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800847e:	6878      	ldr	r0, [r7, #4]
 8008480:	f000 f810 	bl	80084a4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008484:	4b06      	ldr	r3, [pc, #24]	@ (80084a0 <prvCheckTasksWaitingTermination+0x58>)
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	2b00      	cmp	r3, #0
 800848a:	d1e1      	bne.n	8008450 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800848c:	bf00      	nop
 800848e:	bf00      	nop
 8008490:	3708      	adds	r7, #8
 8008492:	46bd      	mov	sp, r7
 8008494:	bd80      	pop	{r7, pc}
 8008496:	bf00      	nop
 8008498:	20006800 	.word	0x20006800
 800849c:	2000682c 	.word	0x2000682c
 80084a0:	20006814 	.word	0x20006814

080084a4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80084a4:	b580      	push	{r7, lr}
 80084a6:	b084      	sub	sp, #16
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	3354      	adds	r3, #84	@ 0x54
 80084b0:	4618      	mov	r0, r3
 80084b2:	f00f fa71 	bl	8017998 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d108      	bne.n	80084d2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80084c4:	4618      	mov	r0, r3
 80084c6:	f000 ff9f 	bl	8009408 <vPortFree>
				vPortFree( pxTCB );
 80084ca:	6878      	ldr	r0, [r7, #4]
 80084cc:	f000 ff9c 	bl	8009408 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80084d0:	e019      	b.n	8008506 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80084d8:	2b01      	cmp	r3, #1
 80084da:	d103      	bne.n	80084e4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80084dc:	6878      	ldr	r0, [r7, #4]
 80084de:	f000 ff93 	bl	8009408 <vPortFree>
	}
 80084e2:	e010      	b.n	8008506 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80084ea:	2b02      	cmp	r3, #2
 80084ec:	d00b      	beq.n	8008506 <prvDeleteTCB+0x62>
	__asm volatile
 80084ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084f2:	f383 8811 	msr	BASEPRI, r3
 80084f6:	f3bf 8f6f 	isb	sy
 80084fa:	f3bf 8f4f 	dsb	sy
 80084fe:	60fb      	str	r3, [r7, #12]
}
 8008500:	bf00      	nop
 8008502:	bf00      	nop
 8008504:	e7fd      	b.n	8008502 <prvDeleteTCB+0x5e>
	}
 8008506:	bf00      	nop
 8008508:	3710      	adds	r7, #16
 800850a:	46bd      	mov	sp, r7
 800850c:	bd80      	pop	{r7, pc}
	...

08008510 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008510:	b480      	push	{r7}
 8008512:	b083      	sub	sp, #12
 8008514:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008516:	4b0c      	ldr	r3, [pc, #48]	@ (8008548 <prvResetNextTaskUnblockTime+0x38>)
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	2b00      	cmp	r3, #0
 800851e:	d104      	bne.n	800852a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008520:	4b0a      	ldr	r3, [pc, #40]	@ (800854c <prvResetNextTaskUnblockTime+0x3c>)
 8008522:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008526:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008528:	e008      	b.n	800853c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800852a:	4b07      	ldr	r3, [pc, #28]	@ (8008548 <prvResetNextTaskUnblockTime+0x38>)
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	68db      	ldr	r3, [r3, #12]
 8008530:	68db      	ldr	r3, [r3, #12]
 8008532:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	685b      	ldr	r3, [r3, #4]
 8008538:	4a04      	ldr	r2, [pc, #16]	@ (800854c <prvResetNextTaskUnblockTime+0x3c>)
 800853a:	6013      	str	r3, [r2, #0]
}
 800853c:	bf00      	nop
 800853e:	370c      	adds	r7, #12
 8008540:	46bd      	mov	sp, r7
 8008542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008546:	4770      	bx	lr
 8008548:	200067e4 	.word	0x200067e4
 800854c:	2000684c 	.word	0x2000684c

08008550 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008550:	b480      	push	{r7}
 8008552:	b083      	sub	sp, #12
 8008554:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008556:	4b0b      	ldr	r3, [pc, #44]	@ (8008584 <xTaskGetSchedulerState+0x34>)
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	2b00      	cmp	r3, #0
 800855c:	d102      	bne.n	8008564 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800855e:	2301      	movs	r3, #1
 8008560:	607b      	str	r3, [r7, #4]
 8008562:	e008      	b.n	8008576 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008564:	4b08      	ldr	r3, [pc, #32]	@ (8008588 <xTaskGetSchedulerState+0x38>)
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	2b00      	cmp	r3, #0
 800856a:	d102      	bne.n	8008572 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800856c:	2302      	movs	r3, #2
 800856e:	607b      	str	r3, [r7, #4]
 8008570:	e001      	b.n	8008576 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008572:	2300      	movs	r3, #0
 8008574:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008576:	687b      	ldr	r3, [r7, #4]
	}
 8008578:	4618      	mov	r0, r3
 800857a:	370c      	adds	r7, #12
 800857c:	46bd      	mov	sp, r7
 800857e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008582:	4770      	bx	lr
 8008584:	20006838 	.word	0x20006838
 8008588:	20006854 	.word	0x20006854

0800858c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800858c:	b580      	push	{r7, lr}
 800858e:	b086      	sub	sp, #24
 8008590:	af00      	add	r7, sp, #0
 8008592:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008598:	2300      	movs	r3, #0
 800859a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d058      	beq.n	8008654 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80085a2:	4b2f      	ldr	r3, [pc, #188]	@ (8008660 <xTaskPriorityDisinherit+0xd4>)
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	693a      	ldr	r2, [r7, #16]
 80085a8:	429a      	cmp	r2, r3
 80085aa:	d00b      	beq.n	80085c4 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80085ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085b0:	f383 8811 	msr	BASEPRI, r3
 80085b4:	f3bf 8f6f 	isb	sy
 80085b8:	f3bf 8f4f 	dsb	sy
 80085bc:	60fb      	str	r3, [r7, #12]
}
 80085be:	bf00      	nop
 80085c0:	bf00      	nop
 80085c2:	e7fd      	b.n	80085c0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80085c4:	693b      	ldr	r3, [r7, #16]
 80085c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d10b      	bne.n	80085e4 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80085cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085d0:	f383 8811 	msr	BASEPRI, r3
 80085d4:	f3bf 8f6f 	isb	sy
 80085d8:	f3bf 8f4f 	dsb	sy
 80085dc:	60bb      	str	r3, [r7, #8]
}
 80085de:	bf00      	nop
 80085e0:	bf00      	nop
 80085e2:	e7fd      	b.n	80085e0 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80085e4:	693b      	ldr	r3, [r7, #16]
 80085e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80085e8:	1e5a      	subs	r2, r3, #1
 80085ea:	693b      	ldr	r3, [r7, #16]
 80085ec:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80085ee:	693b      	ldr	r3, [r7, #16]
 80085f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80085f2:	693b      	ldr	r3, [r7, #16]
 80085f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80085f6:	429a      	cmp	r2, r3
 80085f8:	d02c      	beq.n	8008654 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80085fa:	693b      	ldr	r3, [r7, #16]
 80085fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d128      	bne.n	8008654 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008602:	693b      	ldr	r3, [r7, #16]
 8008604:	3304      	adds	r3, #4
 8008606:	4618      	mov	r0, r3
 8008608:	f7fe fbfe 	bl	8006e08 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800860c:	693b      	ldr	r3, [r7, #16]
 800860e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008610:	693b      	ldr	r3, [r7, #16]
 8008612:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008614:	693b      	ldr	r3, [r7, #16]
 8008616:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008618:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800861c:	693b      	ldr	r3, [r7, #16]
 800861e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008620:	693b      	ldr	r3, [r7, #16]
 8008622:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008624:	4b0f      	ldr	r3, [pc, #60]	@ (8008664 <xTaskPriorityDisinherit+0xd8>)
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	429a      	cmp	r2, r3
 800862a:	d903      	bls.n	8008634 <xTaskPriorityDisinherit+0xa8>
 800862c:	693b      	ldr	r3, [r7, #16]
 800862e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008630:	4a0c      	ldr	r2, [pc, #48]	@ (8008664 <xTaskPriorityDisinherit+0xd8>)
 8008632:	6013      	str	r3, [r2, #0]
 8008634:	693b      	ldr	r3, [r7, #16]
 8008636:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008638:	4613      	mov	r3, r2
 800863a:	009b      	lsls	r3, r3, #2
 800863c:	4413      	add	r3, r2
 800863e:	009b      	lsls	r3, r3, #2
 8008640:	4a09      	ldr	r2, [pc, #36]	@ (8008668 <xTaskPriorityDisinherit+0xdc>)
 8008642:	441a      	add	r2, r3
 8008644:	693b      	ldr	r3, [r7, #16]
 8008646:	3304      	adds	r3, #4
 8008648:	4619      	mov	r1, r3
 800864a:	4610      	mov	r0, r2
 800864c:	f7fe fb7f 	bl	8006d4e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008650:	2301      	movs	r3, #1
 8008652:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008654:	697b      	ldr	r3, [r7, #20]
	}
 8008656:	4618      	mov	r0, r3
 8008658:	3718      	adds	r7, #24
 800865a:	46bd      	mov	sp, r7
 800865c:	bd80      	pop	{r7, pc}
 800865e:	bf00      	nop
 8008660:	20006358 	.word	0x20006358
 8008664:	20006834 	.word	0x20006834
 8008668:	2000635c 	.word	0x2000635c

0800866c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800866c:	b580      	push	{r7, lr}
 800866e:	b084      	sub	sp, #16
 8008670:	af00      	add	r7, sp, #0
 8008672:	6078      	str	r0, [r7, #4]
 8008674:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008676:	4b21      	ldr	r3, [pc, #132]	@ (80086fc <prvAddCurrentTaskToDelayedList+0x90>)
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800867c:	4b20      	ldr	r3, [pc, #128]	@ (8008700 <prvAddCurrentTaskToDelayedList+0x94>)
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	3304      	adds	r3, #4
 8008682:	4618      	mov	r0, r3
 8008684:	f7fe fbc0 	bl	8006e08 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800868e:	d10a      	bne.n	80086a6 <prvAddCurrentTaskToDelayedList+0x3a>
 8008690:	683b      	ldr	r3, [r7, #0]
 8008692:	2b00      	cmp	r3, #0
 8008694:	d007      	beq.n	80086a6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008696:	4b1a      	ldr	r3, [pc, #104]	@ (8008700 <prvAddCurrentTaskToDelayedList+0x94>)
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	3304      	adds	r3, #4
 800869c:	4619      	mov	r1, r3
 800869e:	4819      	ldr	r0, [pc, #100]	@ (8008704 <prvAddCurrentTaskToDelayedList+0x98>)
 80086a0:	f7fe fb55 	bl	8006d4e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80086a4:	e026      	b.n	80086f4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80086a6:	68fa      	ldr	r2, [r7, #12]
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	4413      	add	r3, r2
 80086ac:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80086ae:	4b14      	ldr	r3, [pc, #80]	@ (8008700 <prvAddCurrentTaskToDelayedList+0x94>)
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	68ba      	ldr	r2, [r7, #8]
 80086b4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80086b6:	68ba      	ldr	r2, [r7, #8]
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	429a      	cmp	r2, r3
 80086bc:	d209      	bcs.n	80086d2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80086be:	4b12      	ldr	r3, [pc, #72]	@ (8008708 <prvAddCurrentTaskToDelayedList+0x9c>)
 80086c0:	681a      	ldr	r2, [r3, #0]
 80086c2:	4b0f      	ldr	r3, [pc, #60]	@ (8008700 <prvAddCurrentTaskToDelayedList+0x94>)
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	3304      	adds	r3, #4
 80086c8:	4619      	mov	r1, r3
 80086ca:	4610      	mov	r0, r2
 80086cc:	f7fe fb63 	bl	8006d96 <vListInsert>
}
 80086d0:	e010      	b.n	80086f4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80086d2:	4b0e      	ldr	r3, [pc, #56]	@ (800870c <prvAddCurrentTaskToDelayedList+0xa0>)
 80086d4:	681a      	ldr	r2, [r3, #0]
 80086d6:	4b0a      	ldr	r3, [pc, #40]	@ (8008700 <prvAddCurrentTaskToDelayedList+0x94>)
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	3304      	adds	r3, #4
 80086dc:	4619      	mov	r1, r3
 80086de:	4610      	mov	r0, r2
 80086e0:	f7fe fb59 	bl	8006d96 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80086e4:	4b0a      	ldr	r3, [pc, #40]	@ (8008710 <prvAddCurrentTaskToDelayedList+0xa4>)
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	68ba      	ldr	r2, [r7, #8]
 80086ea:	429a      	cmp	r2, r3
 80086ec:	d202      	bcs.n	80086f4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80086ee:	4a08      	ldr	r2, [pc, #32]	@ (8008710 <prvAddCurrentTaskToDelayedList+0xa4>)
 80086f0:	68bb      	ldr	r3, [r7, #8]
 80086f2:	6013      	str	r3, [r2, #0]
}
 80086f4:	bf00      	nop
 80086f6:	3710      	adds	r7, #16
 80086f8:	46bd      	mov	sp, r7
 80086fa:	bd80      	pop	{r7, pc}
 80086fc:	20006830 	.word	0x20006830
 8008700:	20006358 	.word	0x20006358
 8008704:	20006818 	.word	0x20006818
 8008708:	200067e8 	.word	0x200067e8
 800870c:	200067e4 	.word	0x200067e4
 8008710:	2000684c 	.word	0x2000684c

08008714 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008714:	b580      	push	{r7, lr}
 8008716:	b08a      	sub	sp, #40	@ 0x28
 8008718:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800871a:	2300      	movs	r3, #0
 800871c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800871e:	f000 fb13 	bl	8008d48 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008722:	4b1d      	ldr	r3, [pc, #116]	@ (8008798 <xTimerCreateTimerTask+0x84>)
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	2b00      	cmp	r3, #0
 8008728:	d021      	beq.n	800876e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800872a:	2300      	movs	r3, #0
 800872c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800872e:	2300      	movs	r3, #0
 8008730:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008732:	1d3a      	adds	r2, r7, #4
 8008734:	f107 0108 	add.w	r1, r7, #8
 8008738:	f107 030c 	add.w	r3, r7, #12
 800873c:	4618      	mov	r0, r3
 800873e:	f7fe fabf 	bl	8006cc0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008742:	6879      	ldr	r1, [r7, #4]
 8008744:	68bb      	ldr	r3, [r7, #8]
 8008746:	68fa      	ldr	r2, [r7, #12]
 8008748:	9202      	str	r2, [sp, #8]
 800874a:	9301      	str	r3, [sp, #4]
 800874c:	2302      	movs	r3, #2
 800874e:	9300      	str	r3, [sp, #0]
 8008750:	2300      	movs	r3, #0
 8008752:	460a      	mov	r2, r1
 8008754:	4911      	ldr	r1, [pc, #68]	@ (800879c <xTimerCreateTimerTask+0x88>)
 8008756:	4812      	ldr	r0, [pc, #72]	@ (80087a0 <xTimerCreateTimerTask+0x8c>)
 8008758:	f7ff f87a 	bl	8007850 <xTaskCreateStatic>
 800875c:	4603      	mov	r3, r0
 800875e:	4a11      	ldr	r2, [pc, #68]	@ (80087a4 <xTimerCreateTimerTask+0x90>)
 8008760:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008762:	4b10      	ldr	r3, [pc, #64]	@ (80087a4 <xTimerCreateTimerTask+0x90>)
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	2b00      	cmp	r3, #0
 8008768:	d001      	beq.n	800876e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800876a:	2301      	movs	r3, #1
 800876c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800876e:	697b      	ldr	r3, [r7, #20]
 8008770:	2b00      	cmp	r3, #0
 8008772:	d10b      	bne.n	800878c <xTimerCreateTimerTask+0x78>
	__asm volatile
 8008774:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008778:	f383 8811 	msr	BASEPRI, r3
 800877c:	f3bf 8f6f 	isb	sy
 8008780:	f3bf 8f4f 	dsb	sy
 8008784:	613b      	str	r3, [r7, #16]
}
 8008786:	bf00      	nop
 8008788:	bf00      	nop
 800878a:	e7fd      	b.n	8008788 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800878c:	697b      	ldr	r3, [r7, #20]
}
 800878e:	4618      	mov	r0, r3
 8008790:	3718      	adds	r7, #24
 8008792:	46bd      	mov	sp, r7
 8008794:	bd80      	pop	{r7, pc}
 8008796:	bf00      	nop
 8008798:	20006888 	.word	0x20006888
 800879c:	08018858 	.word	0x08018858
 80087a0:	080088e1 	.word	0x080088e1
 80087a4:	2000688c 	.word	0x2000688c

080087a8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80087a8:	b580      	push	{r7, lr}
 80087aa:	b08a      	sub	sp, #40	@ 0x28
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	60f8      	str	r0, [r7, #12]
 80087b0:	60b9      	str	r1, [r7, #8]
 80087b2:	607a      	str	r2, [r7, #4]
 80087b4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80087b6:	2300      	movs	r3, #0
 80087b8:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d10b      	bne.n	80087d8 <xTimerGenericCommand+0x30>
	__asm volatile
 80087c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087c4:	f383 8811 	msr	BASEPRI, r3
 80087c8:	f3bf 8f6f 	isb	sy
 80087cc:	f3bf 8f4f 	dsb	sy
 80087d0:	623b      	str	r3, [r7, #32]
}
 80087d2:	bf00      	nop
 80087d4:	bf00      	nop
 80087d6:	e7fd      	b.n	80087d4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80087d8:	4b19      	ldr	r3, [pc, #100]	@ (8008840 <xTimerGenericCommand+0x98>)
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d02a      	beq.n	8008836 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80087e0:	68bb      	ldr	r3, [r7, #8]
 80087e2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80087ec:	68bb      	ldr	r3, [r7, #8]
 80087ee:	2b05      	cmp	r3, #5
 80087f0:	dc18      	bgt.n	8008824 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80087f2:	f7ff fead 	bl	8008550 <xTaskGetSchedulerState>
 80087f6:	4603      	mov	r3, r0
 80087f8:	2b02      	cmp	r3, #2
 80087fa:	d109      	bne.n	8008810 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80087fc:	4b10      	ldr	r3, [pc, #64]	@ (8008840 <xTimerGenericCommand+0x98>)
 80087fe:	6818      	ldr	r0, [r3, #0]
 8008800:	f107 0110 	add.w	r1, r7, #16
 8008804:	2300      	movs	r3, #0
 8008806:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008808:	f7fe fc32 	bl	8007070 <xQueueGenericSend>
 800880c:	6278      	str	r0, [r7, #36]	@ 0x24
 800880e:	e012      	b.n	8008836 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008810:	4b0b      	ldr	r3, [pc, #44]	@ (8008840 <xTimerGenericCommand+0x98>)
 8008812:	6818      	ldr	r0, [r3, #0]
 8008814:	f107 0110 	add.w	r1, r7, #16
 8008818:	2300      	movs	r3, #0
 800881a:	2200      	movs	r2, #0
 800881c:	f7fe fc28 	bl	8007070 <xQueueGenericSend>
 8008820:	6278      	str	r0, [r7, #36]	@ 0x24
 8008822:	e008      	b.n	8008836 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008824:	4b06      	ldr	r3, [pc, #24]	@ (8008840 <xTimerGenericCommand+0x98>)
 8008826:	6818      	ldr	r0, [r3, #0]
 8008828:	f107 0110 	add.w	r1, r7, #16
 800882c:	2300      	movs	r3, #0
 800882e:	683a      	ldr	r2, [r7, #0]
 8008830:	f7fe fd20 	bl	8007274 <xQueueGenericSendFromISR>
 8008834:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008836:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008838:	4618      	mov	r0, r3
 800883a:	3728      	adds	r7, #40	@ 0x28
 800883c:	46bd      	mov	sp, r7
 800883e:	bd80      	pop	{r7, pc}
 8008840:	20006888 	.word	0x20006888

08008844 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008844:	b580      	push	{r7, lr}
 8008846:	b088      	sub	sp, #32
 8008848:	af02      	add	r7, sp, #8
 800884a:	6078      	str	r0, [r7, #4]
 800884c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800884e:	4b23      	ldr	r3, [pc, #140]	@ (80088dc <prvProcessExpiredTimer+0x98>)
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	68db      	ldr	r3, [r3, #12]
 8008854:	68db      	ldr	r3, [r3, #12]
 8008856:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008858:	697b      	ldr	r3, [r7, #20]
 800885a:	3304      	adds	r3, #4
 800885c:	4618      	mov	r0, r3
 800885e:	f7fe fad3 	bl	8006e08 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008862:	697b      	ldr	r3, [r7, #20]
 8008864:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008868:	f003 0304 	and.w	r3, r3, #4
 800886c:	2b00      	cmp	r3, #0
 800886e:	d023      	beq.n	80088b8 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008870:	697b      	ldr	r3, [r7, #20]
 8008872:	699a      	ldr	r2, [r3, #24]
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	18d1      	adds	r1, r2, r3
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	683a      	ldr	r2, [r7, #0]
 800887c:	6978      	ldr	r0, [r7, #20]
 800887e:	f000 f8d5 	bl	8008a2c <prvInsertTimerInActiveList>
 8008882:	4603      	mov	r3, r0
 8008884:	2b00      	cmp	r3, #0
 8008886:	d020      	beq.n	80088ca <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008888:	2300      	movs	r3, #0
 800888a:	9300      	str	r3, [sp, #0]
 800888c:	2300      	movs	r3, #0
 800888e:	687a      	ldr	r2, [r7, #4]
 8008890:	2100      	movs	r1, #0
 8008892:	6978      	ldr	r0, [r7, #20]
 8008894:	f7ff ff88 	bl	80087a8 <xTimerGenericCommand>
 8008898:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800889a:	693b      	ldr	r3, [r7, #16]
 800889c:	2b00      	cmp	r3, #0
 800889e:	d114      	bne.n	80088ca <prvProcessExpiredTimer+0x86>
	__asm volatile
 80088a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088a4:	f383 8811 	msr	BASEPRI, r3
 80088a8:	f3bf 8f6f 	isb	sy
 80088ac:	f3bf 8f4f 	dsb	sy
 80088b0:	60fb      	str	r3, [r7, #12]
}
 80088b2:	bf00      	nop
 80088b4:	bf00      	nop
 80088b6:	e7fd      	b.n	80088b4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80088b8:	697b      	ldr	r3, [r7, #20]
 80088ba:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80088be:	f023 0301 	bic.w	r3, r3, #1
 80088c2:	b2da      	uxtb	r2, r3
 80088c4:	697b      	ldr	r3, [r7, #20]
 80088c6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80088ca:	697b      	ldr	r3, [r7, #20]
 80088cc:	6a1b      	ldr	r3, [r3, #32]
 80088ce:	6978      	ldr	r0, [r7, #20]
 80088d0:	4798      	blx	r3
}
 80088d2:	bf00      	nop
 80088d4:	3718      	adds	r7, #24
 80088d6:	46bd      	mov	sp, r7
 80088d8:	bd80      	pop	{r7, pc}
 80088da:	bf00      	nop
 80088dc:	20006880 	.word	0x20006880

080088e0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80088e0:	b580      	push	{r7, lr}
 80088e2:	b084      	sub	sp, #16
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80088e8:	f107 0308 	add.w	r3, r7, #8
 80088ec:	4618      	mov	r0, r3
 80088ee:	f000 f859 	bl	80089a4 <prvGetNextExpireTime>
 80088f2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80088f4:	68bb      	ldr	r3, [r7, #8]
 80088f6:	4619      	mov	r1, r3
 80088f8:	68f8      	ldr	r0, [r7, #12]
 80088fa:	f000 f805 	bl	8008908 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80088fe:	f000 f8d7 	bl	8008ab0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008902:	bf00      	nop
 8008904:	e7f0      	b.n	80088e8 <prvTimerTask+0x8>
	...

08008908 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008908:	b580      	push	{r7, lr}
 800890a:	b084      	sub	sp, #16
 800890c:	af00      	add	r7, sp, #0
 800890e:	6078      	str	r0, [r7, #4]
 8008910:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008912:	f7ff fa01 	bl	8007d18 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008916:	f107 0308 	add.w	r3, r7, #8
 800891a:	4618      	mov	r0, r3
 800891c:	f000 f866 	bl	80089ec <prvSampleTimeNow>
 8008920:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008922:	68bb      	ldr	r3, [r7, #8]
 8008924:	2b00      	cmp	r3, #0
 8008926:	d130      	bne.n	800898a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008928:	683b      	ldr	r3, [r7, #0]
 800892a:	2b00      	cmp	r3, #0
 800892c:	d10a      	bne.n	8008944 <prvProcessTimerOrBlockTask+0x3c>
 800892e:	687a      	ldr	r2, [r7, #4]
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	429a      	cmp	r2, r3
 8008934:	d806      	bhi.n	8008944 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008936:	f7ff f9fd 	bl	8007d34 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800893a:	68f9      	ldr	r1, [r7, #12]
 800893c:	6878      	ldr	r0, [r7, #4]
 800893e:	f7ff ff81 	bl	8008844 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008942:	e024      	b.n	800898e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008944:	683b      	ldr	r3, [r7, #0]
 8008946:	2b00      	cmp	r3, #0
 8008948:	d008      	beq.n	800895c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800894a:	4b13      	ldr	r3, [pc, #76]	@ (8008998 <prvProcessTimerOrBlockTask+0x90>)
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	2b00      	cmp	r3, #0
 8008952:	d101      	bne.n	8008958 <prvProcessTimerOrBlockTask+0x50>
 8008954:	2301      	movs	r3, #1
 8008956:	e000      	b.n	800895a <prvProcessTimerOrBlockTask+0x52>
 8008958:	2300      	movs	r3, #0
 800895a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800895c:	4b0f      	ldr	r3, [pc, #60]	@ (800899c <prvProcessTimerOrBlockTask+0x94>)
 800895e:	6818      	ldr	r0, [r3, #0]
 8008960:	687a      	ldr	r2, [r7, #4]
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	1ad3      	subs	r3, r2, r3
 8008966:	683a      	ldr	r2, [r7, #0]
 8008968:	4619      	mov	r1, r3
 800896a:	f7fe ff3d 	bl	80077e8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800896e:	f7ff f9e1 	bl	8007d34 <xTaskResumeAll>
 8008972:	4603      	mov	r3, r0
 8008974:	2b00      	cmp	r3, #0
 8008976:	d10a      	bne.n	800898e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008978:	4b09      	ldr	r3, [pc, #36]	@ (80089a0 <prvProcessTimerOrBlockTask+0x98>)
 800897a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800897e:	601a      	str	r2, [r3, #0]
 8008980:	f3bf 8f4f 	dsb	sy
 8008984:	f3bf 8f6f 	isb	sy
}
 8008988:	e001      	b.n	800898e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800898a:	f7ff f9d3 	bl	8007d34 <xTaskResumeAll>
}
 800898e:	bf00      	nop
 8008990:	3710      	adds	r7, #16
 8008992:	46bd      	mov	sp, r7
 8008994:	bd80      	pop	{r7, pc}
 8008996:	bf00      	nop
 8008998:	20006884 	.word	0x20006884
 800899c:	20006888 	.word	0x20006888
 80089a0:	e000ed04 	.word	0xe000ed04

080089a4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80089a4:	b480      	push	{r7}
 80089a6:	b085      	sub	sp, #20
 80089a8:	af00      	add	r7, sp, #0
 80089aa:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80089ac:	4b0e      	ldr	r3, [pc, #56]	@ (80089e8 <prvGetNextExpireTime+0x44>)
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d101      	bne.n	80089ba <prvGetNextExpireTime+0x16>
 80089b6:	2201      	movs	r2, #1
 80089b8:	e000      	b.n	80089bc <prvGetNextExpireTime+0x18>
 80089ba:	2200      	movs	r2, #0
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d105      	bne.n	80089d4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80089c8:	4b07      	ldr	r3, [pc, #28]	@ (80089e8 <prvGetNextExpireTime+0x44>)
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	68db      	ldr	r3, [r3, #12]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	60fb      	str	r3, [r7, #12]
 80089d2:	e001      	b.n	80089d8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80089d4:	2300      	movs	r3, #0
 80089d6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80089d8:	68fb      	ldr	r3, [r7, #12]
}
 80089da:	4618      	mov	r0, r3
 80089dc:	3714      	adds	r7, #20
 80089de:	46bd      	mov	sp, r7
 80089e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e4:	4770      	bx	lr
 80089e6:	bf00      	nop
 80089e8:	20006880 	.word	0x20006880

080089ec <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80089ec:	b580      	push	{r7, lr}
 80089ee:	b084      	sub	sp, #16
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80089f4:	f7ff fa3c 	bl	8007e70 <xTaskGetTickCount>
 80089f8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80089fa:	4b0b      	ldr	r3, [pc, #44]	@ (8008a28 <prvSampleTimeNow+0x3c>)
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	68fa      	ldr	r2, [r7, #12]
 8008a00:	429a      	cmp	r2, r3
 8008a02:	d205      	bcs.n	8008a10 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008a04:	f000 f93a 	bl	8008c7c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	2201      	movs	r2, #1
 8008a0c:	601a      	str	r2, [r3, #0]
 8008a0e:	e002      	b.n	8008a16 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	2200      	movs	r2, #0
 8008a14:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008a16:	4a04      	ldr	r2, [pc, #16]	@ (8008a28 <prvSampleTimeNow+0x3c>)
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008a1c:	68fb      	ldr	r3, [r7, #12]
}
 8008a1e:	4618      	mov	r0, r3
 8008a20:	3710      	adds	r7, #16
 8008a22:	46bd      	mov	sp, r7
 8008a24:	bd80      	pop	{r7, pc}
 8008a26:	bf00      	nop
 8008a28:	20006890 	.word	0x20006890

08008a2c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008a2c:	b580      	push	{r7, lr}
 8008a2e:	b086      	sub	sp, #24
 8008a30:	af00      	add	r7, sp, #0
 8008a32:	60f8      	str	r0, [r7, #12]
 8008a34:	60b9      	str	r1, [r7, #8]
 8008a36:	607a      	str	r2, [r7, #4]
 8008a38:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008a3a:	2300      	movs	r3, #0
 8008a3c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	68ba      	ldr	r2, [r7, #8]
 8008a42:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	68fa      	ldr	r2, [r7, #12]
 8008a48:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008a4a:	68ba      	ldr	r2, [r7, #8]
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	429a      	cmp	r2, r3
 8008a50:	d812      	bhi.n	8008a78 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008a52:	687a      	ldr	r2, [r7, #4]
 8008a54:	683b      	ldr	r3, [r7, #0]
 8008a56:	1ad2      	subs	r2, r2, r3
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	699b      	ldr	r3, [r3, #24]
 8008a5c:	429a      	cmp	r2, r3
 8008a5e:	d302      	bcc.n	8008a66 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008a60:	2301      	movs	r3, #1
 8008a62:	617b      	str	r3, [r7, #20]
 8008a64:	e01b      	b.n	8008a9e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008a66:	4b10      	ldr	r3, [pc, #64]	@ (8008aa8 <prvInsertTimerInActiveList+0x7c>)
 8008a68:	681a      	ldr	r2, [r3, #0]
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	3304      	adds	r3, #4
 8008a6e:	4619      	mov	r1, r3
 8008a70:	4610      	mov	r0, r2
 8008a72:	f7fe f990 	bl	8006d96 <vListInsert>
 8008a76:	e012      	b.n	8008a9e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008a78:	687a      	ldr	r2, [r7, #4]
 8008a7a:	683b      	ldr	r3, [r7, #0]
 8008a7c:	429a      	cmp	r2, r3
 8008a7e:	d206      	bcs.n	8008a8e <prvInsertTimerInActiveList+0x62>
 8008a80:	68ba      	ldr	r2, [r7, #8]
 8008a82:	683b      	ldr	r3, [r7, #0]
 8008a84:	429a      	cmp	r2, r3
 8008a86:	d302      	bcc.n	8008a8e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008a88:	2301      	movs	r3, #1
 8008a8a:	617b      	str	r3, [r7, #20]
 8008a8c:	e007      	b.n	8008a9e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008a8e:	4b07      	ldr	r3, [pc, #28]	@ (8008aac <prvInsertTimerInActiveList+0x80>)
 8008a90:	681a      	ldr	r2, [r3, #0]
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	3304      	adds	r3, #4
 8008a96:	4619      	mov	r1, r3
 8008a98:	4610      	mov	r0, r2
 8008a9a:	f7fe f97c 	bl	8006d96 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008a9e:	697b      	ldr	r3, [r7, #20]
}
 8008aa0:	4618      	mov	r0, r3
 8008aa2:	3718      	adds	r7, #24
 8008aa4:	46bd      	mov	sp, r7
 8008aa6:	bd80      	pop	{r7, pc}
 8008aa8:	20006884 	.word	0x20006884
 8008aac:	20006880 	.word	0x20006880

08008ab0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008ab0:	b580      	push	{r7, lr}
 8008ab2:	b08e      	sub	sp, #56	@ 0x38
 8008ab4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008ab6:	e0ce      	b.n	8008c56 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	da19      	bge.n	8008af2 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008abe:	1d3b      	adds	r3, r7, #4
 8008ac0:	3304      	adds	r3, #4
 8008ac2:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008ac4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d10b      	bne.n	8008ae2 <prvProcessReceivedCommands+0x32>
	__asm volatile
 8008aca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ace:	f383 8811 	msr	BASEPRI, r3
 8008ad2:	f3bf 8f6f 	isb	sy
 8008ad6:	f3bf 8f4f 	dsb	sy
 8008ada:	61fb      	str	r3, [r7, #28]
}
 8008adc:	bf00      	nop
 8008ade:	bf00      	nop
 8008ae0:	e7fd      	b.n	8008ade <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008ae2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008ae8:	6850      	ldr	r0, [r2, #4]
 8008aea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008aec:	6892      	ldr	r2, [r2, #8]
 8008aee:	4611      	mov	r1, r2
 8008af0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	f2c0 80ae 	blt.w	8008c56 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008afe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b00:	695b      	ldr	r3, [r3, #20]
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d004      	beq.n	8008b10 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008b06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b08:	3304      	adds	r3, #4
 8008b0a:	4618      	mov	r0, r3
 8008b0c:	f7fe f97c 	bl	8006e08 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008b10:	463b      	mov	r3, r7
 8008b12:	4618      	mov	r0, r3
 8008b14:	f7ff ff6a 	bl	80089ec <prvSampleTimeNow>
 8008b18:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	2b09      	cmp	r3, #9
 8008b1e:	f200 8097 	bhi.w	8008c50 <prvProcessReceivedCommands+0x1a0>
 8008b22:	a201      	add	r2, pc, #4	@ (adr r2, 8008b28 <prvProcessReceivedCommands+0x78>)
 8008b24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b28:	08008b51 	.word	0x08008b51
 8008b2c:	08008b51 	.word	0x08008b51
 8008b30:	08008b51 	.word	0x08008b51
 8008b34:	08008bc7 	.word	0x08008bc7
 8008b38:	08008bdb 	.word	0x08008bdb
 8008b3c:	08008c27 	.word	0x08008c27
 8008b40:	08008b51 	.word	0x08008b51
 8008b44:	08008b51 	.word	0x08008b51
 8008b48:	08008bc7 	.word	0x08008bc7
 8008b4c:	08008bdb 	.word	0x08008bdb
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008b50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b52:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008b56:	f043 0301 	orr.w	r3, r3, #1
 8008b5a:	b2da      	uxtb	r2, r3
 8008b5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b5e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008b62:	68ba      	ldr	r2, [r7, #8]
 8008b64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b66:	699b      	ldr	r3, [r3, #24]
 8008b68:	18d1      	adds	r1, r2, r3
 8008b6a:	68bb      	ldr	r3, [r7, #8]
 8008b6c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008b6e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008b70:	f7ff ff5c 	bl	8008a2c <prvInsertTimerInActiveList>
 8008b74:	4603      	mov	r3, r0
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d06c      	beq.n	8008c54 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008b7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b7c:	6a1b      	ldr	r3, [r3, #32]
 8008b7e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008b80:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008b82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b84:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008b88:	f003 0304 	and.w	r3, r3, #4
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d061      	beq.n	8008c54 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008b90:	68ba      	ldr	r2, [r7, #8]
 8008b92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b94:	699b      	ldr	r3, [r3, #24]
 8008b96:	441a      	add	r2, r3
 8008b98:	2300      	movs	r3, #0
 8008b9a:	9300      	str	r3, [sp, #0]
 8008b9c:	2300      	movs	r3, #0
 8008b9e:	2100      	movs	r1, #0
 8008ba0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008ba2:	f7ff fe01 	bl	80087a8 <xTimerGenericCommand>
 8008ba6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008ba8:	6a3b      	ldr	r3, [r7, #32]
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d152      	bne.n	8008c54 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8008bae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bb2:	f383 8811 	msr	BASEPRI, r3
 8008bb6:	f3bf 8f6f 	isb	sy
 8008bba:	f3bf 8f4f 	dsb	sy
 8008bbe:	61bb      	str	r3, [r7, #24]
}
 8008bc0:	bf00      	nop
 8008bc2:	bf00      	nop
 8008bc4:	e7fd      	b.n	8008bc2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008bc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bc8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008bcc:	f023 0301 	bic.w	r3, r3, #1
 8008bd0:	b2da      	uxtb	r2, r3
 8008bd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bd4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8008bd8:	e03d      	b.n	8008c56 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008bda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bdc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008be0:	f043 0301 	orr.w	r3, r3, #1
 8008be4:	b2da      	uxtb	r2, r3
 8008be6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008be8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008bec:	68ba      	ldr	r2, [r7, #8]
 8008bee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bf0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008bf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bf4:	699b      	ldr	r3, [r3, #24]
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d10b      	bne.n	8008c12 <prvProcessReceivedCommands+0x162>
	__asm volatile
 8008bfa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bfe:	f383 8811 	msr	BASEPRI, r3
 8008c02:	f3bf 8f6f 	isb	sy
 8008c06:	f3bf 8f4f 	dsb	sy
 8008c0a:	617b      	str	r3, [r7, #20]
}
 8008c0c:	bf00      	nop
 8008c0e:	bf00      	nop
 8008c10:	e7fd      	b.n	8008c0e <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008c12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c14:	699a      	ldr	r2, [r3, #24]
 8008c16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c18:	18d1      	adds	r1, r2, r3
 8008c1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c1c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008c1e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008c20:	f7ff ff04 	bl	8008a2c <prvInsertTimerInActiveList>
					break;
 8008c24:	e017      	b.n	8008c56 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008c26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c28:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008c2c:	f003 0302 	and.w	r3, r3, #2
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d103      	bne.n	8008c3c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8008c34:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008c36:	f000 fbe7 	bl	8009408 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008c3a:	e00c      	b.n	8008c56 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008c3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c3e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008c42:	f023 0301 	bic.w	r3, r3, #1
 8008c46:	b2da      	uxtb	r2, r3
 8008c48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c4a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8008c4e:	e002      	b.n	8008c56 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8008c50:	bf00      	nop
 8008c52:	e000      	b.n	8008c56 <prvProcessReceivedCommands+0x1a6>
					break;
 8008c54:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008c56:	4b08      	ldr	r3, [pc, #32]	@ (8008c78 <prvProcessReceivedCommands+0x1c8>)
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	1d39      	adds	r1, r7, #4
 8008c5c:	2200      	movs	r2, #0
 8008c5e:	4618      	mov	r0, r3
 8008c60:	f7fe fba6 	bl	80073b0 <xQueueReceive>
 8008c64:	4603      	mov	r3, r0
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	f47f af26 	bne.w	8008ab8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8008c6c:	bf00      	nop
 8008c6e:	bf00      	nop
 8008c70:	3730      	adds	r7, #48	@ 0x30
 8008c72:	46bd      	mov	sp, r7
 8008c74:	bd80      	pop	{r7, pc}
 8008c76:	bf00      	nop
 8008c78:	20006888 	.word	0x20006888

08008c7c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008c7c:	b580      	push	{r7, lr}
 8008c7e:	b088      	sub	sp, #32
 8008c80:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008c82:	e049      	b.n	8008d18 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008c84:	4b2e      	ldr	r3, [pc, #184]	@ (8008d40 <prvSwitchTimerLists+0xc4>)
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	68db      	ldr	r3, [r3, #12]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008c8e:	4b2c      	ldr	r3, [pc, #176]	@ (8008d40 <prvSwitchTimerLists+0xc4>)
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	68db      	ldr	r3, [r3, #12]
 8008c94:	68db      	ldr	r3, [r3, #12]
 8008c96:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	3304      	adds	r3, #4
 8008c9c:	4618      	mov	r0, r3
 8008c9e:	f7fe f8b3 	bl	8006e08 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	6a1b      	ldr	r3, [r3, #32]
 8008ca6:	68f8      	ldr	r0, [r7, #12]
 8008ca8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008cb0:	f003 0304 	and.w	r3, r3, #4
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d02f      	beq.n	8008d18 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	699b      	ldr	r3, [r3, #24]
 8008cbc:	693a      	ldr	r2, [r7, #16]
 8008cbe:	4413      	add	r3, r2
 8008cc0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008cc2:	68ba      	ldr	r2, [r7, #8]
 8008cc4:	693b      	ldr	r3, [r7, #16]
 8008cc6:	429a      	cmp	r2, r3
 8008cc8:	d90e      	bls.n	8008ce8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	68ba      	ldr	r2, [r7, #8]
 8008cce:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	68fa      	ldr	r2, [r7, #12]
 8008cd4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008cd6:	4b1a      	ldr	r3, [pc, #104]	@ (8008d40 <prvSwitchTimerLists+0xc4>)
 8008cd8:	681a      	ldr	r2, [r3, #0]
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	3304      	adds	r3, #4
 8008cde:	4619      	mov	r1, r3
 8008ce0:	4610      	mov	r0, r2
 8008ce2:	f7fe f858 	bl	8006d96 <vListInsert>
 8008ce6:	e017      	b.n	8008d18 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008ce8:	2300      	movs	r3, #0
 8008cea:	9300      	str	r3, [sp, #0]
 8008cec:	2300      	movs	r3, #0
 8008cee:	693a      	ldr	r2, [r7, #16]
 8008cf0:	2100      	movs	r1, #0
 8008cf2:	68f8      	ldr	r0, [r7, #12]
 8008cf4:	f7ff fd58 	bl	80087a8 <xTimerGenericCommand>
 8008cf8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d10b      	bne.n	8008d18 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8008d00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d04:	f383 8811 	msr	BASEPRI, r3
 8008d08:	f3bf 8f6f 	isb	sy
 8008d0c:	f3bf 8f4f 	dsb	sy
 8008d10:	603b      	str	r3, [r7, #0]
}
 8008d12:	bf00      	nop
 8008d14:	bf00      	nop
 8008d16:	e7fd      	b.n	8008d14 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008d18:	4b09      	ldr	r3, [pc, #36]	@ (8008d40 <prvSwitchTimerLists+0xc4>)
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d1b0      	bne.n	8008c84 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008d22:	4b07      	ldr	r3, [pc, #28]	@ (8008d40 <prvSwitchTimerLists+0xc4>)
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008d28:	4b06      	ldr	r3, [pc, #24]	@ (8008d44 <prvSwitchTimerLists+0xc8>)
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	4a04      	ldr	r2, [pc, #16]	@ (8008d40 <prvSwitchTimerLists+0xc4>)
 8008d2e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008d30:	4a04      	ldr	r2, [pc, #16]	@ (8008d44 <prvSwitchTimerLists+0xc8>)
 8008d32:	697b      	ldr	r3, [r7, #20]
 8008d34:	6013      	str	r3, [r2, #0]
}
 8008d36:	bf00      	nop
 8008d38:	3718      	adds	r7, #24
 8008d3a:	46bd      	mov	sp, r7
 8008d3c:	bd80      	pop	{r7, pc}
 8008d3e:	bf00      	nop
 8008d40:	20006880 	.word	0x20006880
 8008d44:	20006884 	.word	0x20006884

08008d48 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008d48:	b580      	push	{r7, lr}
 8008d4a:	b082      	sub	sp, #8
 8008d4c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008d4e:	f000 f96b 	bl	8009028 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008d52:	4b15      	ldr	r3, [pc, #84]	@ (8008da8 <prvCheckForValidListAndQueue+0x60>)
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d120      	bne.n	8008d9c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008d5a:	4814      	ldr	r0, [pc, #80]	@ (8008dac <prvCheckForValidListAndQueue+0x64>)
 8008d5c:	f7fd ffca 	bl	8006cf4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008d60:	4813      	ldr	r0, [pc, #76]	@ (8008db0 <prvCheckForValidListAndQueue+0x68>)
 8008d62:	f7fd ffc7 	bl	8006cf4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008d66:	4b13      	ldr	r3, [pc, #76]	@ (8008db4 <prvCheckForValidListAndQueue+0x6c>)
 8008d68:	4a10      	ldr	r2, [pc, #64]	@ (8008dac <prvCheckForValidListAndQueue+0x64>)
 8008d6a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008d6c:	4b12      	ldr	r3, [pc, #72]	@ (8008db8 <prvCheckForValidListAndQueue+0x70>)
 8008d6e:	4a10      	ldr	r2, [pc, #64]	@ (8008db0 <prvCheckForValidListAndQueue+0x68>)
 8008d70:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008d72:	2300      	movs	r3, #0
 8008d74:	9300      	str	r3, [sp, #0]
 8008d76:	4b11      	ldr	r3, [pc, #68]	@ (8008dbc <prvCheckForValidListAndQueue+0x74>)
 8008d78:	4a11      	ldr	r2, [pc, #68]	@ (8008dc0 <prvCheckForValidListAndQueue+0x78>)
 8008d7a:	2110      	movs	r1, #16
 8008d7c:	200a      	movs	r0, #10
 8008d7e:	f7fe f8d7 	bl	8006f30 <xQueueGenericCreateStatic>
 8008d82:	4603      	mov	r3, r0
 8008d84:	4a08      	ldr	r2, [pc, #32]	@ (8008da8 <prvCheckForValidListAndQueue+0x60>)
 8008d86:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008d88:	4b07      	ldr	r3, [pc, #28]	@ (8008da8 <prvCheckForValidListAndQueue+0x60>)
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d005      	beq.n	8008d9c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008d90:	4b05      	ldr	r3, [pc, #20]	@ (8008da8 <prvCheckForValidListAndQueue+0x60>)
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	490b      	ldr	r1, [pc, #44]	@ (8008dc4 <prvCheckForValidListAndQueue+0x7c>)
 8008d96:	4618      	mov	r0, r3
 8008d98:	f7fe fcfc 	bl	8007794 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008d9c:	f000 f976 	bl	800908c <vPortExitCritical>
}
 8008da0:	bf00      	nop
 8008da2:	46bd      	mov	sp, r7
 8008da4:	bd80      	pop	{r7, pc}
 8008da6:	bf00      	nop
 8008da8:	20006888 	.word	0x20006888
 8008dac:	20006858 	.word	0x20006858
 8008db0:	2000686c 	.word	0x2000686c
 8008db4:	20006880 	.word	0x20006880
 8008db8:	20006884 	.word	0x20006884
 8008dbc:	20006934 	.word	0x20006934
 8008dc0:	20006894 	.word	0x20006894
 8008dc4:	08018860 	.word	0x08018860

08008dc8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008dc8:	b480      	push	{r7}
 8008dca:	b085      	sub	sp, #20
 8008dcc:	af00      	add	r7, sp, #0
 8008dce:	60f8      	str	r0, [r7, #12]
 8008dd0:	60b9      	str	r1, [r7, #8]
 8008dd2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	3b04      	subs	r3, #4
 8008dd8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8008de0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	3b04      	subs	r3, #4
 8008de6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008de8:	68bb      	ldr	r3, [r7, #8]
 8008dea:	f023 0201 	bic.w	r2, r3, #1
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	3b04      	subs	r3, #4
 8008df6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008df8:	4a0c      	ldr	r2, [pc, #48]	@ (8008e2c <pxPortInitialiseStack+0x64>)
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	3b14      	subs	r3, #20
 8008e02:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008e04:	687a      	ldr	r2, [r7, #4]
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	3b04      	subs	r3, #4
 8008e0e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	f06f 0202 	mvn.w	r2, #2
 8008e16:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	3b20      	subs	r3, #32
 8008e1c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008e1e:	68fb      	ldr	r3, [r7, #12]
}
 8008e20:	4618      	mov	r0, r3
 8008e22:	3714      	adds	r7, #20
 8008e24:	46bd      	mov	sp, r7
 8008e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e2a:	4770      	bx	lr
 8008e2c:	08008e31 	.word	0x08008e31

08008e30 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008e30:	b480      	push	{r7}
 8008e32:	b085      	sub	sp, #20
 8008e34:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008e36:	2300      	movs	r3, #0
 8008e38:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008e3a:	4b13      	ldr	r3, [pc, #76]	@ (8008e88 <prvTaskExitError+0x58>)
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008e42:	d00b      	beq.n	8008e5c <prvTaskExitError+0x2c>
	__asm volatile
 8008e44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e48:	f383 8811 	msr	BASEPRI, r3
 8008e4c:	f3bf 8f6f 	isb	sy
 8008e50:	f3bf 8f4f 	dsb	sy
 8008e54:	60fb      	str	r3, [r7, #12]
}
 8008e56:	bf00      	nop
 8008e58:	bf00      	nop
 8008e5a:	e7fd      	b.n	8008e58 <prvTaskExitError+0x28>
	__asm volatile
 8008e5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e60:	f383 8811 	msr	BASEPRI, r3
 8008e64:	f3bf 8f6f 	isb	sy
 8008e68:	f3bf 8f4f 	dsb	sy
 8008e6c:	60bb      	str	r3, [r7, #8]
}
 8008e6e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008e70:	bf00      	nop
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d0fc      	beq.n	8008e72 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008e78:	bf00      	nop
 8008e7a:	bf00      	nop
 8008e7c:	3714      	adds	r7, #20
 8008e7e:	46bd      	mov	sp, r7
 8008e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e84:	4770      	bx	lr
 8008e86:	bf00      	nop
 8008e88:	20000010 	.word	0x20000010
 8008e8c:	00000000 	.word	0x00000000

08008e90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008e90:	4b07      	ldr	r3, [pc, #28]	@ (8008eb0 <pxCurrentTCBConst2>)
 8008e92:	6819      	ldr	r1, [r3, #0]
 8008e94:	6808      	ldr	r0, [r1, #0]
 8008e96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e9a:	f380 8809 	msr	PSP, r0
 8008e9e:	f3bf 8f6f 	isb	sy
 8008ea2:	f04f 0000 	mov.w	r0, #0
 8008ea6:	f380 8811 	msr	BASEPRI, r0
 8008eaa:	4770      	bx	lr
 8008eac:	f3af 8000 	nop.w

08008eb0 <pxCurrentTCBConst2>:
 8008eb0:	20006358 	.word	0x20006358
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008eb4:	bf00      	nop
 8008eb6:	bf00      	nop

08008eb8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008eb8:	4808      	ldr	r0, [pc, #32]	@ (8008edc <prvPortStartFirstTask+0x24>)
 8008eba:	6800      	ldr	r0, [r0, #0]
 8008ebc:	6800      	ldr	r0, [r0, #0]
 8008ebe:	f380 8808 	msr	MSP, r0
 8008ec2:	f04f 0000 	mov.w	r0, #0
 8008ec6:	f380 8814 	msr	CONTROL, r0
 8008eca:	b662      	cpsie	i
 8008ecc:	b661      	cpsie	f
 8008ece:	f3bf 8f4f 	dsb	sy
 8008ed2:	f3bf 8f6f 	isb	sy
 8008ed6:	df00      	svc	0
 8008ed8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008eda:	bf00      	nop
 8008edc:	e000ed08 	.word	0xe000ed08

08008ee0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008ee0:	b580      	push	{r7, lr}
 8008ee2:	b086      	sub	sp, #24
 8008ee4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008ee6:	4b47      	ldr	r3, [pc, #284]	@ (8009004 <xPortStartScheduler+0x124>)
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	4a47      	ldr	r2, [pc, #284]	@ (8009008 <xPortStartScheduler+0x128>)
 8008eec:	4293      	cmp	r3, r2
 8008eee:	d10b      	bne.n	8008f08 <xPortStartScheduler+0x28>
	__asm volatile
 8008ef0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ef4:	f383 8811 	msr	BASEPRI, r3
 8008ef8:	f3bf 8f6f 	isb	sy
 8008efc:	f3bf 8f4f 	dsb	sy
 8008f00:	613b      	str	r3, [r7, #16]
}
 8008f02:	bf00      	nop
 8008f04:	bf00      	nop
 8008f06:	e7fd      	b.n	8008f04 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008f08:	4b3e      	ldr	r3, [pc, #248]	@ (8009004 <xPortStartScheduler+0x124>)
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	4a3f      	ldr	r2, [pc, #252]	@ (800900c <xPortStartScheduler+0x12c>)
 8008f0e:	4293      	cmp	r3, r2
 8008f10:	d10b      	bne.n	8008f2a <xPortStartScheduler+0x4a>
	__asm volatile
 8008f12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f16:	f383 8811 	msr	BASEPRI, r3
 8008f1a:	f3bf 8f6f 	isb	sy
 8008f1e:	f3bf 8f4f 	dsb	sy
 8008f22:	60fb      	str	r3, [r7, #12]
}
 8008f24:	bf00      	nop
 8008f26:	bf00      	nop
 8008f28:	e7fd      	b.n	8008f26 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008f2a:	4b39      	ldr	r3, [pc, #228]	@ (8009010 <xPortStartScheduler+0x130>)
 8008f2c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008f2e:	697b      	ldr	r3, [r7, #20]
 8008f30:	781b      	ldrb	r3, [r3, #0]
 8008f32:	b2db      	uxtb	r3, r3
 8008f34:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008f36:	697b      	ldr	r3, [r7, #20]
 8008f38:	22ff      	movs	r2, #255	@ 0xff
 8008f3a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008f3c:	697b      	ldr	r3, [r7, #20]
 8008f3e:	781b      	ldrb	r3, [r3, #0]
 8008f40:	b2db      	uxtb	r3, r3
 8008f42:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008f44:	78fb      	ldrb	r3, [r7, #3]
 8008f46:	b2db      	uxtb	r3, r3
 8008f48:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8008f4c:	b2da      	uxtb	r2, r3
 8008f4e:	4b31      	ldr	r3, [pc, #196]	@ (8009014 <xPortStartScheduler+0x134>)
 8008f50:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008f52:	4b31      	ldr	r3, [pc, #196]	@ (8009018 <xPortStartScheduler+0x138>)
 8008f54:	2207      	movs	r2, #7
 8008f56:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008f58:	e009      	b.n	8008f6e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8008f5a:	4b2f      	ldr	r3, [pc, #188]	@ (8009018 <xPortStartScheduler+0x138>)
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	3b01      	subs	r3, #1
 8008f60:	4a2d      	ldr	r2, [pc, #180]	@ (8009018 <xPortStartScheduler+0x138>)
 8008f62:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008f64:	78fb      	ldrb	r3, [r7, #3]
 8008f66:	b2db      	uxtb	r3, r3
 8008f68:	005b      	lsls	r3, r3, #1
 8008f6a:	b2db      	uxtb	r3, r3
 8008f6c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008f6e:	78fb      	ldrb	r3, [r7, #3]
 8008f70:	b2db      	uxtb	r3, r3
 8008f72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008f76:	2b80      	cmp	r3, #128	@ 0x80
 8008f78:	d0ef      	beq.n	8008f5a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008f7a:	4b27      	ldr	r3, [pc, #156]	@ (8009018 <xPortStartScheduler+0x138>)
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	f1c3 0307 	rsb	r3, r3, #7
 8008f82:	2b04      	cmp	r3, #4
 8008f84:	d00b      	beq.n	8008f9e <xPortStartScheduler+0xbe>
	__asm volatile
 8008f86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f8a:	f383 8811 	msr	BASEPRI, r3
 8008f8e:	f3bf 8f6f 	isb	sy
 8008f92:	f3bf 8f4f 	dsb	sy
 8008f96:	60bb      	str	r3, [r7, #8]
}
 8008f98:	bf00      	nop
 8008f9a:	bf00      	nop
 8008f9c:	e7fd      	b.n	8008f9a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008f9e:	4b1e      	ldr	r3, [pc, #120]	@ (8009018 <xPortStartScheduler+0x138>)
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	021b      	lsls	r3, r3, #8
 8008fa4:	4a1c      	ldr	r2, [pc, #112]	@ (8009018 <xPortStartScheduler+0x138>)
 8008fa6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008fa8:	4b1b      	ldr	r3, [pc, #108]	@ (8009018 <xPortStartScheduler+0x138>)
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008fb0:	4a19      	ldr	r2, [pc, #100]	@ (8009018 <xPortStartScheduler+0x138>)
 8008fb2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	b2da      	uxtb	r2, r3
 8008fb8:	697b      	ldr	r3, [r7, #20]
 8008fba:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008fbc:	4b17      	ldr	r3, [pc, #92]	@ (800901c <xPortStartScheduler+0x13c>)
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	4a16      	ldr	r2, [pc, #88]	@ (800901c <xPortStartScheduler+0x13c>)
 8008fc2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008fc6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008fc8:	4b14      	ldr	r3, [pc, #80]	@ (800901c <xPortStartScheduler+0x13c>)
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	4a13      	ldr	r2, [pc, #76]	@ (800901c <xPortStartScheduler+0x13c>)
 8008fce:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8008fd2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008fd4:	f000 f8da 	bl	800918c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008fd8:	4b11      	ldr	r3, [pc, #68]	@ (8009020 <xPortStartScheduler+0x140>)
 8008fda:	2200      	movs	r2, #0
 8008fdc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008fde:	f000 f8f9 	bl	80091d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008fe2:	4b10      	ldr	r3, [pc, #64]	@ (8009024 <xPortStartScheduler+0x144>)
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	4a0f      	ldr	r2, [pc, #60]	@ (8009024 <xPortStartScheduler+0x144>)
 8008fe8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8008fec:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008fee:	f7ff ff63 	bl	8008eb8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008ff2:	f7ff f807 	bl	8008004 <vTaskSwitchContext>
	prvTaskExitError();
 8008ff6:	f7ff ff1b 	bl	8008e30 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008ffa:	2300      	movs	r3, #0
}
 8008ffc:	4618      	mov	r0, r3
 8008ffe:	3718      	adds	r7, #24
 8009000:	46bd      	mov	sp, r7
 8009002:	bd80      	pop	{r7, pc}
 8009004:	e000ed00 	.word	0xe000ed00
 8009008:	410fc271 	.word	0x410fc271
 800900c:	410fc270 	.word	0x410fc270
 8009010:	e000e400 	.word	0xe000e400
 8009014:	20006984 	.word	0x20006984
 8009018:	20006988 	.word	0x20006988
 800901c:	e000ed20 	.word	0xe000ed20
 8009020:	20000010 	.word	0x20000010
 8009024:	e000ef34 	.word	0xe000ef34

08009028 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009028:	b480      	push	{r7}
 800902a:	b083      	sub	sp, #12
 800902c:	af00      	add	r7, sp, #0
	__asm volatile
 800902e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009032:	f383 8811 	msr	BASEPRI, r3
 8009036:	f3bf 8f6f 	isb	sy
 800903a:	f3bf 8f4f 	dsb	sy
 800903e:	607b      	str	r3, [r7, #4]
}
 8009040:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009042:	4b10      	ldr	r3, [pc, #64]	@ (8009084 <vPortEnterCritical+0x5c>)
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	3301      	adds	r3, #1
 8009048:	4a0e      	ldr	r2, [pc, #56]	@ (8009084 <vPortEnterCritical+0x5c>)
 800904a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800904c:	4b0d      	ldr	r3, [pc, #52]	@ (8009084 <vPortEnterCritical+0x5c>)
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	2b01      	cmp	r3, #1
 8009052:	d110      	bne.n	8009076 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009054:	4b0c      	ldr	r3, [pc, #48]	@ (8009088 <vPortEnterCritical+0x60>)
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	b2db      	uxtb	r3, r3
 800905a:	2b00      	cmp	r3, #0
 800905c:	d00b      	beq.n	8009076 <vPortEnterCritical+0x4e>
	__asm volatile
 800905e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009062:	f383 8811 	msr	BASEPRI, r3
 8009066:	f3bf 8f6f 	isb	sy
 800906a:	f3bf 8f4f 	dsb	sy
 800906e:	603b      	str	r3, [r7, #0]
}
 8009070:	bf00      	nop
 8009072:	bf00      	nop
 8009074:	e7fd      	b.n	8009072 <vPortEnterCritical+0x4a>
	}
}
 8009076:	bf00      	nop
 8009078:	370c      	adds	r7, #12
 800907a:	46bd      	mov	sp, r7
 800907c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009080:	4770      	bx	lr
 8009082:	bf00      	nop
 8009084:	20000010 	.word	0x20000010
 8009088:	e000ed04 	.word	0xe000ed04

0800908c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800908c:	b480      	push	{r7}
 800908e:	b083      	sub	sp, #12
 8009090:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009092:	4b12      	ldr	r3, [pc, #72]	@ (80090dc <vPortExitCritical+0x50>)
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	2b00      	cmp	r3, #0
 8009098:	d10b      	bne.n	80090b2 <vPortExitCritical+0x26>
	__asm volatile
 800909a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800909e:	f383 8811 	msr	BASEPRI, r3
 80090a2:	f3bf 8f6f 	isb	sy
 80090a6:	f3bf 8f4f 	dsb	sy
 80090aa:	607b      	str	r3, [r7, #4]
}
 80090ac:	bf00      	nop
 80090ae:	bf00      	nop
 80090b0:	e7fd      	b.n	80090ae <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80090b2:	4b0a      	ldr	r3, [pc, #40]	@ (80090dc <vPortExitCritical+0x50>)
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	3b01      	subs	r3, #1
 80090b8:	4a08      	ldr	r2, [pc, #32]	@ (80090dc <vPortExitCritical+0x50>)
 80090ba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80090bc:	4b07      	ldr	r3, [pc, #28]	@ (80090dc <vPortExitCritical+0x50>)
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d105      	bne.n	80090d0 <vPortExitCritical+0x44>
 80090c4:	2300      	movs	r3, #0
 80090c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80090c8:	683b      	ldr	r3, [r7, #0]
 80090ca:	f383 8811 	msr	BASEPRI, r3
}
 80090ce:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80090d0:	bf00      	nop
 80090d2:	370c      	adds	r7, #12
 80090d4:	46bd      	mov	sp, r7
 80090d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090da:	4770      	bx	lr
 80090dc:	20000010 	.word	0x20000010

080090e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80090e0:	f3ef 8009 	mrs	r0, PSP
 80090e4:	f3bf 8f6f 	isb	sy
 80090e8:	4b15      	ldr	r3, [pc, #84]	@ (8009140 <pxCurrentTCBConst>)
 80090ea:	681a      	ldr	r2, [r3, #0]
 80090ec:	f01e 0f10 	tst.w	lr, #16
 80090f0:	bf08      	it	eq
 80090f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80090f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090fa:	6010      	str	r0, [r2, #0]
 80090fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009100:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8009104:	f380 8811 	msr	BASEPRI, r0
 8009108:	f3bf 8f4f 	dsb	sy
 800910c:	f3bf 8f6f 	isb	sy
 8009110:	f7fe ff78 	bl	8008004 <vTaskSwitchContext>
 8009114:	f04f 0000 	mov.w	r0, #0
 8009118:	f380 8811 	msr	BASEPRI, r0
 800911c:	bc09      	pop	{r0, r3}
 800911e:	6819      	ldr	r1, [r3, #0]
 8009120:	6808      	ldr	r0, [r1, #0]
 8009122:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009126:	f01e 0f10 	tst.w	lr, #16
 800912a:	bf08      	it	eq
 800912c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009130:	f380 8809 	msr	PSP, r0
 8009134:	f3bf 8f6f 	isb	sy
 8009138:	4770      	bx	lr
 800913a:	bf00      	nop
 800913c:	f3af 8000 	nop.w

08009140 <pxCurrentTCBConst>:
 8009140:	20006358 	.word	0x20006358
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009144:	bf00      	nop
 8009146:	bf00      	nop

08009148 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009148:	b580      	push	{r7, lr}
 800914a:	b082      	sub	sp, #8
 800914c:	af00      	add	r7, sp, #0
	__asm volatile
 800914e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009152:	f383 8811 	msr	BASEPRI, r3
 8009156:	f3bf 8f6f 	isb	sy
 800915a:	f3bf 8f4f 	dsb	sy
 800915e:	607b      	str	r3, [r7, #4]
}
 8009160:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009162:	f7fe fe95 	bl	8007e90 <xTaskIncrementTick>
 8009166:	4603      	mov	r3, r0
 8009168:	2b00      	cmp	r3, #0
 800916a:	d003      	beq.n	8009174 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800916c:	4b06      	ldr	r3, [pc, #24]	@ (8009188 <xPortSysTickHandler+0x40>)
 800916e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009172:	601a      	str	r2, [r3, #0]
 8009174:	2300      	movs	r3, #0
 8009176:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009178:	683b      	ldr	r3, [r7, #0]
 800917a:	f383 8811 	msr	BASEPRI, r3
}
 800917e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009180:	bf00      	nop
 8009182:	3708      	adds	r7, #8
 8009184:	46bd      	mov	sp, r7
 8009186:	bd80      	pop	{r7, pc}
 8009188:	e000ed04 	.word	0xe000ed04

0800918c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800918c:	b480      	push	{r7}
 800918e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009190:	4b0b      	ldr	r3, [pc, #44]	@ (80091c0 <vPortSetupTimerInterrupt+0x34>)
 8009192:	2200      	movs	r2, #0
 8009194:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009196:	4b0b      	ldr	r3, [pc, #44]	@ (80091c4 <vPortSetupTimerInterrupt+0x38>)
 8009198:	2200      	movs	r2, #0
 800919a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800919c:	4b0a      	ldr	r3, [pc, #40]	@ (80091c8 <vPortSetupTimerInterrupt+0x3c>)
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	4a0a      	ldr	r2, [pc, #40]	@ (80091cc <vPortSetupTimerInterrupt+0x40>)
 80091a2:	fba2 2303 	umull	r2, r3, r2, r3
 80091a6:	099b      	lsrs	r3, r3, #6
 80091a8:	4a09      	ldr	r2, [pc, #36]	@ (80091d0 <vPortSetupTimerInterrupt+0x44>)
 80091aa:	3b01      	subs	r3, #1
 80091ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80091ae:	4b04      	ldr	r3, [pc, #16]	@ (80091c0 <vPortSetupTimerInterrupt+0x34>)
 80091b0:	2207      	movs	r2, #7
 80091b2:	601a      	str	r2, [r3, #0]
}
 80091b4:	bf00      	nop
 80091b6:	46bd      	mov	sp, r7
 80091b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091bc:	4770      	bx	lr
 80091be:	bf00      	nop
 80091c0:	e000e010 	.word	0xe000e010
 80091c4:	e000e018 	.word	0xe000e018
 80091c8:	20000004 	.word	0x20000004
 80091cc:	10624dd3 	.word	0x10624dd3
 80091d0:	e000e014 	.word	0xe000e014

080091d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80091d4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80091e4 <vPortEnableVFP+0x10>
 80091d8:	6801      	ldr	r1, [r0, #0]
 80091da:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80091de:	6001      	str	r1, [r0, #0]
 80091e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80091e2:	bf00      	nop
 80091e4:	e000ed88 	.word	0xe000ed88

080091e8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80091e8:	b480      	push	{r7}
 80091ea:	b085      	sub	sp, #20
 80091ec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80091ee:	f3ef 8305 	mrs	r3, IPSR
 80091f2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	2b0f      	cmp	r3, #15
 80091f8:	d915      	bls.n	8009226 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80091fa:	4a18      	ldr	r2, [pc, #96]	@ (800925c <vPortValidateInterruptPriority+0x74>)
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	4413      	add	r3, r2
 8009200:	781b      	ldrb	r3, [r3, #0]
 8009202:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009204:	4b16      	ldr	r3, [pc, #88]	@ (8009260 <vPortValidateInterruptPriority+0x78>)
 8009206:	781b      	ldrb	r3, [r3, #0]
 8009208:	7afa      	ldrb	r2, [r7, #11]
 800920a:	429a      	cmp	r2, r3
 800920c:	d20b      	bcs.n	8009226 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800920e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009212:	f383 8811 	msr	BASEPRI, r3
 8009216:	f3bf 8f6f 	isb	sy
 800921a:	f3bf 8f4f 	dsb	sy
 800921e:	607b      	str	r3, [r7, #4]
}
 8009220:	bf00      	nop
 8009222:	bf00      	nop
 8009224:	e7fd      	b.n	8009222 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009226:	4b0f      	ldr	r3, [pc, #60]	@ (8009264 <vPortValidateInterruptPriority+0x7c>)
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800922e:	4b0e      	ldr	r3, [pc, #56]	@ (8009268 <vPortValidateInterruptPriority+0x80>)
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	429a      	cmp	r2, r3
 8009234:	d90b      	bls.n	800924e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8009236:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800923a:	f383 8811 	msr	BASEPRI, r3
 800923e:	f3bf 8f6f 	isb	sy
 8009242:	f3bf 8f4f 	dsb	sy
 8009246:	603b      	str	r3, [r7, #0]
}
 8009248:	bf00      	nop
 800924a:	bf00      	nop
 800924c:	e7fd      	b.n	800924a <vPortValidateInterruptPriority+0x62>
	}
 800924e:	bf00      	nop
 8009250:	3714      	adds	r7, #20
 8009252:	46bd      	mov	sp, r7
 8009254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009258:	4770      	bx	lr
 800925a:	bf00      	nop
 800925c:	e000e3f0 	.word	0xe000e3f0
 8009260:	20006984 	.word	0x20006984
 8009264:	e000ed0c 	.word	0xe000ed0c
 8009268:	20006988 	.word	0x20006988

0800926c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800926c:	b580      	push	{r7, lr}
 800926e:	b08a      	sub	sp, #40	@ 0x28
 8009270:	af00      	add	r7, sp, #0
 8009272:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009274:	2300      	movs	r3, #0
 8009276:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009278:	f7fe fd4e 	bl	8007d18 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800927c:	4b5c      	ldr	r3, [pc, #368]	@ (80093f0 <pvPortMalloc+0x184>)
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	2b00      	cmp	r3, #0
 8009282:	d101      	bne.n	8009288 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009284:	f000 f924 	bl	80094d0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009288:	4b5a      	ldr	r3, [pc, #360]	@ (80093f4 <pvPortMalloc+0x188>)
 800928a:	681a      	ldr	r2, [r3, #0]
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	4013      	ands	r3, r2
 8009290:	2b00      	cmp	r3, #0
 8009292:	f040 8095 	bne.w	80093c0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	2b00      	cmp	r3, #0
 800929a:	d01e      	beq.n	80092da <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800929c:	2208      	movs	r2, #8
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	4413      	add	r3, r2
 80092a2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	f003 0307 	and.w	r3, r3, #7
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d015      	beq.n	80092da <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	f023 0307 	bic.w	r3, r3, #7
 80092b4:	3308      	adds	r3, #8
 80092b6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	f003 0307 	and.w	r3, r3, #7
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d00b      	beq.n	80092da <pvPortMalloc+0x6e>
	__asm volatile
 80092c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092c6:	f383 8811 	msr	BASEPRI, r3
 80092ca:	f3bf 8f6f 	isb	sy
 80092ce:	f3bf 8f4f 	dsb	sy
 80092d2:	617b      	str	r3, [r7, #20]
}
 80092d4:	bf00      	nop
 80092d6:	bf00      	nop
 80092d8:	e7fd      	b.n	80092d6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d06f      	beq.n	80093c0 <pvPortMalloc+0x154>
 80092e0:	4b45      	ldr	r3, [pc, #276]	@ (80093f8 <pvPortMalloc+0x18c>)
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	687a      	ldr	r2, [r7, #4]
 80092e6:	429a      	cmp	r2, r3
 80092e8:	d86a      	bhi.n	80093c0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80092ea:	4b44      	ldr	r3, [pc, #272]	@ (80093fc <pvPortMalloc+0x190>)
 80092ec:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80092ee:	4b43      	ldr	r3, [pc, #268]	@ (80093fc <pvPortMalloc+0x190>)
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80092f4:	e004      	b.n	8009300 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80092f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092f8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80092fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009300:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009302:	685b      	ldr	r3, [r3, #4]
 8009304:	687a      	ldr	r2, [r7, #4]
 8009306:	429a      	cmp	r2, r3
 8009308:	d903      	bls.n	8009312 <pvPortMalloc+0xa6>
 800930a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	2b00      	cmp	r3, #0
 8009310:	d1f1      	bne.n	80092f6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009312:	4b37      	ldr	r3, [pc, #220]	@ (80093f0 <pvPortMalloc+0x184>)
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009318:	429a      	cmp	r2, r3
 800931a:	d051      	beq.n	80093c0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800931c:	6a3b      	ldr	r3, [r7, #32]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	2208      	movs	r2, #8
 8009322:	4413      	add	r3, r2
 8009324:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009326:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009328:	681a      	ldr	r2, [r3, #0]
 800932a:	6a3b      	ldr	r3, [r7, #32]
 800932c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800932e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009330:	685a      	ldr	r2, [r3, #4]
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	1ad2      	subs	r2, r2, r3
 8009336:	2308      	movs	r3, #8
 8009338:	005b      	lsls	r3, r3, #1
 800933a:	429a      	cmp	r2, r3
 800933c:	d920      	bls.n	8009380 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800933e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	4413      	add	r3, r2
 8009344:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009346:	69bb      	ldr	r3, [r7, #24]
 8009348:	f003 0307 	and.w	r3, r3, #7
 800934c:	2b00      	cmp	r3, #0
 800934e:	d00b      	beq.n	8009368 <pvPortMalloc+0xfc>
	__asm volatile
 8009350:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009354:	f383 8811 	msr	BASEPRI, r3
 8009358:	f3bf 8f6f 	isb	sy
 800935c:	f3bf 8f4f 	dsb	sy
 8009360:	613b      	str	r3, [r7, #16]
}
 8009362:	bf00      	nop
 8009364:	bf00      	nop
 8009366:	e7fd      	b.n	8009364 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009368:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800936a:	685a      	ldr	r2, [r3, #4]
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	1ad2      	subs	r2, r2, r3
 8009370:	69bb      	ldr	r3, [r7, #24]
 8009372:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009374:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009376:	687a      	ldr	r2, [r7, #4]
 8009378:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800937a:	69b8      	ldr	r0, [r7, #24]
 800937c:	f000 f90a 	bl	8009594 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009380:	4b1d      	ldr	r3, [pc, #116]	@ (80093f8 <pvPortMalloc+0x18c>)
 8009382:	681a      	ldr	r2, [r3, #0]
 8009384:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009386:	685b      	ldr	r3, [r3, #4]
 8009388:	1ad3      	subs	r3, r2, r3
 800938a:	4a1b      	ldr	r2, [pc, #108]	@ (80093f8 <pvPortMalloc+0x18c>)
 800938c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800938e:	4b1a      	ldr	r3, [pc, #104]	@ (80093f8 <pvPortMalloc+0x18c>)
 8009390:	681a      	ldr	r2, [r3, #0]
 8009392:	4b1b      	ldr	r3, [pc, #108]	@ (8009400 <pvPortMalloc+0x194>)
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	429a      	cmp	r2, r3
 8009398:	d203      	bcs.n	80093a2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800939a:	4b17      	ldr	r3, [pc, #92]	@ (80093f8 <pvPortMalloc+0x18c>)
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	4a18      	ldr	r2, [pc, #96]	@ (8009400 <pvPortMalloc+0x194>)
 80093a0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80093a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093a4:	685a      	ldr	r2, [r3, #4]
 80093a6:	4b13      	ldr	r3, [pc, #76]	@ (80093f4 <pvPortMalloc+0x188>)
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	431a      	orrs	r2, r3
 80093ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093ae:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80093b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093b2:	2200      	movs	r2, #0
 80093b4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80093b6:	4b13      	ldr	r3, [pc, #76]	@ (8009404 <pvPortMalloc+0x198>)
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	3301      	adds	r3, #1
 80093bc:	4a11      	ldr	r2, [pc, #68]	@ (8009404 <pvPortMalloc+0x198>)
 80093be:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80093c0:	f7fe fcb8 	bl	8007d34 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80093c4:	69fb      	ldr	r3, [r7, #28]
 80093c6:	f003 0307 	and.w	r3, r3, #7
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d00b      	beq.n	80093e6 <pvPortMalloc+0x17a>
	__asm volatile
 80093ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093d2:	f383 8811 	msr	BASEPRI, r3
 80093d6:	f3bf 8f6f 	isb	sy
 80093da:	f3bf 8f4f 	dsb	sy
 80093de:	60fb      	str	r3, [r7, #12]
}
 80093e0:	bf00      	nop
 80093e2:	bf00      	nop
 80093e4:	e7fd      	b.n	80093e2 <pvPortMalloc+0x176>
	return pvReturn;
 80093e6:	69fb      	ldr	r3, [r7, #28]
}
 80093e8:	4618      	mov	r0, r3
 80093ea:	3728      	adds	r7, #40	@ 0x28
 80093ec:	46bd      	mov	sp, r7
 80093ee:	bd80      	pop	{r7, pc}
 80093f0:	2000754c 	.word	0x2000754c
 80093f4:	20007560 	.word	0x20007560
 80093f8:	20007550 	.word	0x20007550
 80093fc:	20007544 	.word	0x20007544
 8009400:	20007554 	.word	0x20007554
 8009404:	20007558 	.word	0x20007558

08009408 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009408:	b580      	push	{r7, lr}
 800940a:	b086      	sub	sp, #24
 800940c:	af00      	add	r7, sp, #0
 800940e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	2b00      	cmp	r3, #0
 8009418:	d04f      	beq.n	80094ba <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800941a:	2308      	movs	r3, #8
 800941c:	425b      	negs	r3, r3
 800941e:	697a      	ldr	r2, [r7, #20]
 8009420:	4413      	add	r3, r2
 8009422:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009424:	697b      	ldr	r3, [r7, #20]
 8009426:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009428:	693b      	ldr	r3, [r7, #16]
 800942a:	685a      	ldr	r2, [r3, #4]
 800942c:	4b25      	ldr	r3, [pc, #148]	@ (80094c4 <vPortFree+0xbc>)
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	4013      	ands	r3, r2
 8009432:	2b00      	cmp	r3, #0
 8009434:	d10b      	bne.n	800944e <vPortFree+0x46>
	__asm volatile
 8009436:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800943a:	f383 8811 	msr	BASEPRI, r3
 800943e:	f3bf 8f6f 	isb	sy
 8009442:	f3bf 8f4f 	dsb	sy
 8009446:	60fb      	str	r3, [r7, #12]
}
 8009448:	bf00      	nop
 800944a:	bf00      	nop
 800944c:	e7fd      	b.n	800944a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800944e:	693b      	ldr	r3, [r7, #16]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	2b00      	cmp	r3, #0
 8009454:	d00b      	beq.n	800946e <vPortFree+0x66>
	__asm volatile
 8009456:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800945a:	f383 8811 	msr	BASEPRI, r3
 800945e:	f3bf 8f6f 	isb	sy
 8009462:	f3bf 8f4f 	dsb	sy
 8009466:	60bb      	str	r3, [r7, #8]
}
 8009468:	bf00      	nop
 800946a:	bf00      	nop
 800946c:	e7fd      	b.n	800946a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800946e:	693b      	ldr	r3, [r7, #16]
 8009470:	685a      	ldr	r2, [r3, #4]
 8009472:	4b14      	ldr	r3, [pc, #80]	@ (80094c4 <vPortFree+0xbc>)
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	4013      	ands	r3, r2
 8009478:	2b00      	cmp	r3, #0
 800947a:	d01e      	beq.n	80094ba <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800947c:	693b      	ldr	r3, [r7, #16]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	2b00      	cmp	r3, #0
 8009482:	d11a      	bne.n	80094ba <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009484:	693b      	ldr	r3, [r7, #16]
 8009486:	685a      	ldr	r2, [r3, #4]
 8009488:	4b0e      	ldr	r3, [pc, #56]	@ (80094c4 <vPortFree+0xbc>)
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	43db      	mvns	r3, r3
 800948e:	401a      	ands	r2, r3
 8009490:	693b      	ldr	r3, [r7, #16]
 8009492:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009494:	f7fe fc40 	bl	8007d18 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009498:	693b      	ldr	r3, [r7, #16]
 800949a:	685a      	ldr	r2, [r3, #4]
 800949c:	4b0a      	ldr	r3, [pc, #40]	@ (80094c8 <vPortFree+0xc0>)
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	4413      	add	r3, r2
 80094a2:	4a09      	ldr	r2, [pc, #36]	@ (80094c8 <vPortFree+0xc0>)
 80094a4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80094a6:	6938      	ldr	r0, [r7, #16]
 80094a8:	f000 f874 	bl	8009594 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80094ac:	4b07      	ldr	r3, [pc, #28]	@ (80094cc <vPortFree+0xc4>)
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	3301      	adds	r3, #1
 80094b2:	4a06      	ldr	r2, [pc, #24]	@ (80094cc <vPortFree+0xc4>)
 80094b4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80094b6:	f7fe fc3d 	bl	8007d34 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80094ba:	bf00      	nop
 80094bc:	3718      	adds	r7, #24
 80094be:	46bd      	mov	sp, r7
 80094c0:	bd80      	pop	{r7, pc}
 80094c2:	bf00      	nop
 80094c4:	20007560 	.word	0x20007560
 80094c8:	20007550 	.word	0x20007550
 80094cc:	2000755c 	.word	0x2000755c

080094d0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80094d0:	b480      	push	{r7}
 80094d2:	b085      	sub	sp, #20
 80094d4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80094d6:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 80094da:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80094dc:	4b27      	ldr	r3, [pc, #156]	@ (800957c <prvHeapInit+0xac>)
 80094de:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	f003 0307 	and.w	r3, r3, #7
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d00c      	beq.n	8009504 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	3307      	adds	r3, #7
 80094ee:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	f023 0307 	bic.w	r3, r3, #7
 80094f6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80094f8:	68ba      	ldr	r2, [r7, #8]
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	1ad3      	subs	r3, r2, r3
 80094fe:	4a1f      	ldr	r2, [pc, #124]	@ (800957c <prvHeapInit+0xac>)
 8009500:	4413      	add	r3, r2
 8009502:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009508:	4a1d      	ldr	r2, [pc, #116]	@ (8009580 <prvHeapInit+0xb0>)
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800950e:	4b1c      	ldr	r3, [pc, #112]	@ (8009580 <prvHeapInit+0xb0>)
 8009510:	2200      	movs	r2, #0
 8009512:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	68ba      	ldr	r2, [r7, #8]
 8009518:	4413      	add	r3, r2
 800951a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800951c:	2208      	movs	r2, #8
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	1a9b      	subs	r3, r3, r2
 8009522:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	f023 0307 	bic.w	r3, r3, #7
 800952a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	4a15      	ldr	r2, [pc, #84]	@ (8009584 <prvHeapInit+0xb4>)
 8009530:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009532:	4b14      	ldr	r3, [pc, #80]	@ (8009584 <prvHeapInit+0xb4>)
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	2200      	movs	r2, #0
 8009538:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800953a:	4b12      	ldr	r3, [pc, #72]	@ (8009584 <prvHeapInit+0xb4>)
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	2200      	movs	r2, #0
 8009540:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009546:	683b      	ldr	r3, [r7, #0]
 8009548:	68fa      	ldr	r2, [r7, #12]
 800954a:	1ad2      	subs	r2, r2, r3
 800954c:	683b      	ldr	r3, [r7, #0]
 800954e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009550:	4b0c      	ldr	r3, [pc, #48]	@ (8009584 <prvHeapInit+0xb4>)
 8009552:	681a      	ldr	r2, [r3, #0]
 8009554:	683b      	ldr	r3, [r7, #0]
 8009556:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009558:	683b      	ldr	r3, [r7, #0]
 800955a:	685b      	ldr	r3, [r3, #4]
 800955c:	4a0a      	ldr	r2, [pc, #40]	@ (8009588 <prvHeapInit+0xb8>)
 800955e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009560:	683b      	ldr	r3, [r7, #0]
 8009562:	685b      	ldr	r3, [r3, #4]
 8009564:	4a09      	ldr	r2, [pc, #36]	@ (800958c <prvHeapInit+0xbc>)
 8009566:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009568:	4b09      	ldr	r3, [pc, #36]	@ (8009590 <prvHeapInit+0xc0>)
 800956a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800956e:	601a      	str	r2, [r3, #0]
}
 8009570:	bf00      	nop
 8009572:	3714      	adds	r7, #20
 8009574:	46bd      	mov	sp, r7
 8009576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800957a:	4770      	bx	lr
 800957c:	2000698c 	.word	0x2000698c
 8009580:	20007544 	.word	0x20007544
 8009584:	2000754c 	.word	0x2000754c
 8009588:	20007554 	.word	0x20007554
 800958c:	20007550 	.word	0x20007550
 8009590:	20007560 	.word	0x20007560

08009594 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009594:	b480      	push	{r7}
 8009596:	b085      	sub	sp, #20
 8009598:	af00      	add	r7, sp, #0
 800959a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800959c:	4b28      	ldr	r3, [pc, #160]	@ (8009640 <prvInsertBlockIntoFreeList+0xac>)
 800959e:	60fb      	str	r3, [r7, #12]
 80095a0:	e002      	b.n	80095a8 <prvInsertBlockIntoFreeList+0x14>
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	60fb      	str	r3, [r7, #12]
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	687a      	ldr	r2, [r7, #4]
 80095ae:	429a      	cmp	r2, r3
 80095b0:	d8f7      	bhi.n	80095a2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	685b      	ldr	r3, [r3, #4]
 80095ba:	68ba      	ldr	r2, [r7, #8]
 80095bc:	4413      	add	r3, r2
 80095be:	687a      	ldr	r2, [r7, #4]
 80095c0:	429a      	cmp	r2, r3
 80095c2:	d108      	bne.n	80095d6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	685a      	ldr	r2, [r3, #4]
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	685b      	ldr	r3, [r3, #4]
 80095cc:	441a      	add	r2, r3
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	685b      	ldr	r3, [r3, #4]
 80095de:	68ba      	ldr	r2, [r7, #8]
 80095e0:	441a      	add	r2, r3
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	429a      	cmp	r2, r3
 80095e8:	d118      	bne.n	800961c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	681a      	ldr	r2, [r3, #0]
 80095ee:	4b15      	ldr	r3, [pc, #84]	@ (8009644 <prvInsertBlockIntoFreeList+0xb0>)
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	429a      	cmp	r2, r3
 80095f4:	d00d      	beq.n	8009612 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	685a      	ldr	r2, [r3, #4]
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	685b      	ldr	r3, [r3, #4]
 8009600:	441a      	add	r2, r3
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	681a      	ldr	r2, [r3, #0]
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	601a      	str	r2, [r3, #0]
 8009610:	e008      	b.n	8009624 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009612:	4b0c      	ldr	r3, [pc, #48]	@ (8009644 <prvInsertBlockIntoFreeList+0xb0>)
 8009614:	681a      	ldr	r2, [r3, #0]
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	601a      	str	r2, [r3, #0]
 800961a:	e003      	b.n	8009624 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	681a      	ldr	r2, [r3, #0]
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009624:	68fa      	ldr	r2, [r7, #12]
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	429a      	cmp	r2, r3
 800962a:	d002      	beq.n	8009632 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	687a      	ldr	r2, [r7, #4]
 8009630:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009632:	bf00      	nop
 8009634:	3714      	adds	r7, #20
 8009636:	46bd      	mov	sp, r7
 8009638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800963c:	4770      	bx	lr
 800963e:	bf00      	nop
 8009640:	20007544 	.word	0x20007544
 8009644:	2000754c 	.word	0x2000754c

08009648 <rcl_get_zero_initialized_publisher>:
 8009648:	4b01      	ldr	r3, [pc, #4]	@ (8009650 <rcl_get_zero_initialized_publisher+0x8>)
 800964a:	6818      	ldr	r0, [r3, #0]
 800964c:	4770      	bx	lr
 800964e:	bf00      	nop
 8009650:	080188f4 	.word	0x080188f4

08009654 <rcl_publisher_init>:
 8009654:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009658:	b088      	sub	sp, #32
 800965a:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 800965c:	2d00      	cmp	r5, #0
 800965e:	d069      	beq.n	8009734 <rcl_publisher_init+0xe0>
 8009660:	f105 0950 	add.w	r9, r5, #80	@ 0x50
 8009664:	4604      	mov	r4, r0
 8009666:	4648      	mov	r0, r9
 8009668:	460e      	mov	r6, r1
 800966a:	4690      	mov	r8, r2
 800966c:	461f      	mov	r7, r3
 800966e:	f001 f8b3 	bl	800a7d8 <rcutils_allocator_is_valid>
 8009672:	2800      	cmp	r0, #0
 8009674:	d05e      	beq.n	8009734 <rcl_publisher_init+0xe0>
 8009676:	2c00      	cmp	r4, #0
 8009678:	d05c      	beq.n	8009734 <rcl_publisher_init+0xe0>
 800967a:	f8d4 a000 	ldr.w	sl, [r4]
 800967e:	f1ba 0f00 	cmp.w	sl, #0
 8009682:	d004      	beq.n	800968e <rcl_publisher_init+0x3a>
 8009684:	2764      	movs	r7, #100	@ 0x64
 8009686:	4638      	mov	r0, r7
 8009688:	b008      	add	sp, #32
 800968a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800968e:	4630      	mov	r0, r6
 8009690:	f006 fdc4 	bl	801021c <rcl_node_is_valid>
 8009694:	2800      	cmp	r0, #0
 8009696:	d052      	beq.n	800973e <rcl_publisher_init+0xea>
 8009698:	f1b8 0f00 	cmp.w	r8, #0
 800969c:	d04a      	beq.n	8009734 <rcl_publisher_init+0xe0>
 800969e:	2f00      	cmp	r7, #0
 80096a0:	d048      	beq.n	8009734 <rcl_publisher_init+0xe0>
 80096a2:	e9cd aa03 	strd	sl, sl, [sp, #12]
 80096a6:	aa07      	add	r2, sp, #28
 80096a8:	9205      	str	r2, [sp, #20]
 80096aa:	f105 0358 	add.w	r3, r5, #88	@ 0x58
 80096ae:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80096b2:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80096b6:	f8cd a01c 	str.w	sl, [sp, #28]
 80096ba:	4639      	mov	r1, r7
 80096bc:	e899 000c 	ldmia.w	r9, {r2, r3}
 80096c0:	4630      	mov	r0, r6
 80096c2:	f006 fdff 	bl	80102c4 <rcl_node_resolve_name>
 80096c6:	4607      	mov	r7, r0
 80096c8:	2800      	cmp	r0, #0
 80096ca:	d14f      	bne.n	800976c <rcl_publisher_init+0x118>
 80096cc:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 80096ce:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 80096d0:	20c8      	movs	r0, #200	@ 0xc8
 80096d2:	4798      	blx	r3
 80096d4:	6020      	str	r0, [r4, #0]
 80096d6:	2800      	cmp	r0, #0
 80096d8:	d04e      	beq.n	8009778 <rcl_publisher_init+0x124>
 80096da:	4630      	mov	r0, r6
 80096dc:	f006 fdc0 	bl	8010260 <rcl_node_get_rmw_handle>
 80096e0:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 80096e4:	9300      	str	r3, [sp, #0]
 80096e6:	9a07      	ldr	r2, [sp, #28]
 80096e8:	6827      	ldr	r7, [r4, #0]
 80096ea:	462b      	mov	r3, r5
 80096ec:	4641      	mov	r1, r8
 80096ee:	f001 f981 	bl	800a9f4 <rmw_create_publisher>
 80096f2:	6823      	ldr	r3, [r4, #0]
 80096f4:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
 80096f8:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 80096fc:	b370      	cbz	r0, 800975c <rcl_publisher_init+0x108>
 80096fe:	f103 0170 	add.w	r1, r3, #112	@ 0x70
 8009702:	f001 fa55 	bl	800abb0 <rmw_publisher_get_actual_qos>
 8009706:	6823      	ldr	r3, [r4, #0]
 8009708:	4607      	mov	r7, r0
 800970a:	b9d0      	cbnz	r0, 8009742 <rcl_publisher_init+0xee>
 800970c:	f895 2048 	ldrb.w	r2, [r5, #72]	@ 0x48
 8009710:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
 8009714:	4629      	mov	r1, r5
 8009716:	2270      	movs	r2, #112	@ 0x70
 8009718:	4618      	mov	r0, r3
 800971a:	f00e fa0e 	bl	8017b3a <memcpy>
 800971e:	6832      	ldr	r2, [r6, #0]
 8009720:	f8c0 20c0 	str.w	r2, [r0, #192]	@ 0xc0
 8009724:	9807      	ldr	r0, [sp, #28]
 8009726:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 8009728:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800972a:	4798      	blx	r3
 800972c:	4638      	mov	r0, r7
 800972e:	b008      	add	sp, #32
 8009730:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009734:	270b      	movs	r7, #11
 8009736:	4638      	mov	r0, r7
 8009738:	b008      	add	sp, #32
 800973a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800973e:	27c8      	movs	r7, #200	@ 0xc8
 8009740:	e7a1      	b.n	8009686 <rcl_publisher_init+0x32>
 8009742:	b18b      	cbz	r3, 8009768 <rcl_publisher_init+0x114>
 8009744:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 8009748:	b142      	cbz	r2, 800975c <rcl_publisher_init+0x108>
 800974a:	4630      	mov	r0, r6
 800974c:	f006 fd88 	bl	8010260 <rcl_node_get_rmw_handle>
 8009750:	6823      	ldr	r3, [r4, #0]
 8009752:	f8d3 10c4 	ldr.w	r1, [r3, #196]	@ 0xc4
 8009756:	f001 fa3b 	bl	800abd0 <rmw_destroy_publisher>
 800975a:	6823      	ldr	r3, [r4, #0]
 800975c:	6d6a      	ldr	r2, [r5, #84]	@ 0x54
 800975e:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 8009760:	4618      	mov	r0, r3
 8009762:	4790      	blx	r2
 8009764:	2300      	movs	r3, #0
 8009766:	6023      	str	r3, [r4, #0]
 8009768:	2701      	movs	r7, #1
 800976a:	e7db      	b.n	8009724 <rcl_publisher_init+0xd0>
 800976c:	2867      	cmp	r0, #103	@ 0x67
 800976e:	d0d9      	beq.n	8009724 <rcl_publisher_init+0xd0>
 8009770:	2869      	cmp	r0, #105	@ 0x69
 8009772:	d003      	beq.n	800977c <rcl_publisher_init+0x128>
 8009774:	280a      	cmp	r0, #10
 8009776:	d1f7      	bne.n	8009768 <rcl_publisher_init+0x114>
 8009778:	270a      	movs	r7, #10
 800977a:	e7d3      	b.n	8009724 <rcl_publisher_init+0xd0>
 800977c:	2767      	movs	r7, #103	@ 0x67
 800977e:	e7d1      	b.n	8009724 <rcl_publisher_init+0xd0>

08009780 <rcl_publisher_get_default_options>:
 8009780:	b570      	push	{r4, r5, r6, lr}
 8009782:	4d14      	ldr	r5, [pc, #80]	@ (80097d4 <rcl_publisher_get_default_options+0x54>)
 8009784:	4914      	ldr	r1, [pc, #80]	@ (80097d8 <rcl_publisher_get_default_options+0x58>)
 8009786:	b088      	sub	sp, #32
 8009788:	4604      	mov	r4, r0
 800978a:	2250      	movs	r2, #80	@ 0x50
 800978c:	4628      	mov	r0, r5
 800978e:	f00e f9d4 	bl	8017b3a <memcpy>
 8009792:	a802      	add	r0, sp, #8
 8009794:	f001 f812 	bl	800a7bc <rcutils_get_default_allocator>
 8009798:	f10d 0c08 	add.w	ip, sp, #8
 800979c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80097a0:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 80097a4:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80097a8:	466e      	mov	r6, sp
 80097aa:	f8dc 3000 	ldr.w	r3, [ip]
 80097ae:	f8ce 3000 	str.w	r3, [lr]
 80097b2:	4630      	mov	r0, r6
 80097b4:	f001 f8a0 	bl	800a8f8 <rmw_get_default_publisher_options>
 80097b8:	e896 0003 	ldmia.w	r6, {r0, r1}
 80097bc:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 80097c0:	e883 0003 	stmia.w	r3, {r0, r1}
 80097c4:	2270      	movs	r2, #112	@ 0x70
 80097c6:	4629      	mov	r1, r5
 80097c8:	4620      	mov	r0, r4
 80097ca:	f00e f9b6 	bl	8017b3a <memcpy>
 80097ce:	4620      	mov	r0, r4
 80097d0:	b008      	add	sp, #32
 80097d2:	bd70      	pop	{r4, r5, r6, pc}
 80097d4:	20007568 	.word	0x20007568
 80097d8:	080188f8 	.word	0x080188f8

080097dc <rcl_publish>:
 80097dc:	b1f8      	cbz	r0, 800981e <rcl_publish+0x42>
 80097de:	6803      	ldr	r3, [r0, #0]
 80097e0:	b570      	push	{r4, r5, r6, lr}
 80097e2:	4604      	mov	r4, r0
 80097e4:	b1b3      	cbz	r3, 8009814 <rcl_publish+0x38>
 80097e6:	4616      	mov	r6, r2
 80097e8:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 80097ec:	b192      	cbz	r2, 8009814 <rcl_publish+0x38>
 80097ee:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 80097f2:	460d      	mov	r5, r1
 80097f4:	f006 f938 	bl	800fa68 <rcl_context_is_valid>
 80097f8:	b160      	cbz	r0, 8009814 <rcl_publish+0x38>
 80097fa:	6823      	ldr	r3, [r4, #0]
 80097fc:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 8009800:	b140      	cbz	r0, 8009814 <rcl_publish+0x38>
 8009802:	b155      	cbz	r5, 800981a <rcl_publish+0x3e>
 8009804:	4632      	mov	r2, r6
 8009806:	4629      	mov	r1, r5
 8009808:	f001 f894 	bl	800a934 <rmw_publish>
 800980c:	3800      	subs	r0, #0
 800980e:	bf18      	it	ne
 8009810:	2001      	movne	r0, #1
 8009812:	bd70      	pop	{r4, r5, r6, pc}
 8009814:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8009818:	bd70      	pop	{r4, r5, r6, pc}
 800981a:	200b      	movs	r0, #11
 800981c:	bd70      	pop	{r4, r5, r6, pc}
 800981e:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8009822:	4770      	bx	lr

08009824 <rcl_publisher_is_valid>:
 8009824:	b1a0      	cbz	r0, 8009850 <rcl_publisher_is_valid+0x2c>
 8009826:	6803      	ldr	r3, [r0, #0]
 8009828:	b510      	push	{r4, lr}
 800982a:	4604      	mov	r4, r0
 800982c:	b173      	cbz	r3, 800984c <rcl_publisher_is_valid+0x28>
 800982e:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 8009832:	b15a      	cbz	r2, 800984c <rcl_publisher_is_valid+0x28>
 8009834:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 8009838:	f006 f916 	bl	800fa68 <rcl_context_is_valid>
 800983c:	b130      	cbz	r0, 800984c <rcl_publisher_is_valid+0x28>
 800983e:	6823      	ldr	r3, [r4, #0]
 8009840:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 8009844:	3800      	subs	r0, #0
 8009846:	bf18      	it	ne
 8009848:	2001      	movne	r0, #1
 800984a:	bd10      	pop	{r4, pc}
 800984c:	2000      	movs	r0, #0
 800984e:	bd10      	pop	{r4, pc}
 8009850:	2000      	movs	r0, #0
 8009852:	4770      	bx	lr

08009854 <rcl_publisher_is_valid_except_context>:
 8009854:	b130      	cbz	r0, 8009864 <rcl_publisher_is_valid_except_context+0x10>
 8009856:	6800      	ldr	r0, [r0, #0]
 8009858:	b120      	cbz	r0, 8009864 <rcl_publisher_is_valid_except_context+0x10>
 800985a:	f8d0 00c4 	ldr.w	r0, [r0, #196]	@ 0xc4
 800985e:	3800      	subs	r0, #0
 8009860:	bf18      	it	ne
 8009862:	2001      	movne	r0, #1
 8009864:	4770      	bx	lr
 8009866:	bf00      	nop

08009868 <_rclc_check_for_new_data>:
 8009868:	2800      	cmp	r0, #0
 800986a:	d046      	beq.n	80098fa <_rclc_check_for_new_data+0x92>
 800986c:	b510      	push	{r4, lr}
 800986e:	7802      	ldrb	r2, [r0, #0]
 8009870:	b084      	sub	sp, #16
 8009872:	4603      	mov	r3, r0
 8009874:	2a0a      	cmp	r2, #10
 8009876:	d842      	bhi.n	80098fe <_rclc_check_for_new_data+0x96>
 8009878:	e8df f002 	tbb	[pc, r2]
 800987c:	14181212 	.word	0x14181212
 8009880:	06060614 	.word	0x06060614
 8009884:	2e1a      	.short	0x2e1a
 8009886:	16          	.byte	0x16
 8009887:	00          	.byte	0x00
 8009888:	6a0a      	ldr	r2, [r1, #32]
 800988a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800988c:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8009890:	2000      	movs	r0, #0
 8009892:	1a12      	subs	r2, r2, r0
 8009894:	bf18      	it	ne
 8009896:	2201      	movne	r2, #1
 8009898:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 800989c:	b004      	add	sp, #16
 800989e:	bd10      	pop	{r4, pc}
 80098a0:	680a      	ldr	r2, [r1, #0]
 80098a2:	e7f2      	b.n	800988a <_rclc_check_for_new_data+0x22>
 80098a4:	698a      	ldr	r2, [r1, #24]
 80098a6:	e7f0      	b.n	800988a <_rclc_check_for_new_data+0x22>
 80098a8:	688a      	ldr	r2, [r1, #8]
 80098aa:	e7ee      	b.n	800988a <_rclc_check_for_new_data+0x22>
 80098ac:	690a      	ldr	r2, [r1, #16]
 80098ae:	e7ec      	b.n	800988a <_rclc_check_for_new_data+0x22>
 80098b0:	685c      	ldr	r4, [r3, #4]
 80098b2:	4608      	mov	r0, r1
 80098b4:	f104 0244 	add.w	r2, r4, #68	@ 0x44
 80098b8:	f104 0143 	add.w	r1, r4, #67	@ 0x43
 80098bc:	f104 0342 	add.w	r3, r4, #66	@ 0x42
 80098c0:	e9cd 2101 	strd	r2, r1, [sp, #4]
 80098c4:	9300      	str	r3, [sp, #0]
 80098c6:	f104 0240 	add.w	r2, r4, #64	@ 0x40
 80098ca:	f104 0341 	add.w	r3, r4, #65	@ 0x41
 80098ce:	f104 0110 	add.w	r1, r4, #16
 80098d2:	f008 fbd1 	bl	8012078 <rcl_action_client_wait_set_get_entities_ready>
 80098d6:	e7e1      	b.n	800989c <_rclc_check_for_new_data+0x34>
 80098d8:	685c      	ldr	r4, [r3, #4]
 80098da:	f104 0223 	add.w	r2, r4, #35	@ 0x23
 80098de:	f104 0322 	add.w	r3, r4, #34	@ 0x22
 80098e2:	e9cd 3200 	strd	r3, r2, [sp]
 80098e6:	4608      	mov	r0, r1
 80098e8:	f104 0321 	add.w	r3, r4, #33	@ 0x21
 80098ec:	f104 0220 	add.w	r2, r4, #32
 80098f0:	f104 0110 	add.w	r1, r4, #16
 80098f4:	f008 fdd8 	bl	80124a8 <rcl_action_server_wait_set_get_entities_ready>
 80098f8:	e7d0      	b.n	800989c <_rclc_check_for_new_data+0x34>
 80098fa:	200b      	movs	r0, #11
 80098fc:	4770      	bx	lr
 80098fe:	2001      	movs	r0, #1
 8009900:	e7cc      	b.n	800989c <_rclc_check_for_new_data+0x34>
 8009902:	bf00      	nop

08009904 <_rclc_take_new_data>:
 8009904:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009906:	b09b      	sub	sp, #108	@ 0x6c
 8009908:	2800      	cmp	r0, #0
 800990a:	f000 8088 	beq.w	8009a1e <_rclc_take_new_data+0x11a>
 800990e:	7803      	ldrb	r3, [r0, #0]
 8009910:	4604      	mov	r4, r0
 8009912:	2b0a      	cmp	r3, #10
 8009914:	f200 8167 	bhi.w	8009be6 <_rclc_take_new_data+0x2e2>
 8009918:	e8df f003 	tbb	[pc, r3]
 800991c:	44152d2d 	.word	0x44152d2d
 8009920:	19191944 	.word	0x19191944
 8009924:	065a      	.short	0x065a
 8009926:	15          	.byte	0x15
 8009927:	00          	.byte	0x00
 8009928:	6840      	ldr	r0, [r0, #4]
 800992a:	f890 3020 	ldrb.w	r3, [r0, #32]
 800992e:	2b00      	cmp	r3, #0
 8009930:	f040 80b2 	bne.w	8009a98 <_rclc_take_new_data+0x194>
 8009934:	f890 3022 	ldrb.w	r3, [r0, #34]	@ 0x22
 8009938:	2b00      	cmp	r3, #0
 800993a:	f040 80e4 	bne.w	8009b06 <_rclc_take_new_data+0x202>
 800993e:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 8009942:	2b00      	cmp	r3, #0
 8009944:	d16f      	bne.n	8009a26 <_rclc_take_new_data+0x122>
 8009946:	2500      	movs	r5, #0
 8009948:	4628      	mov	r0, r5
 800994a:	b01b      	add	sp, #108	@ 0x6c
 800994c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800994e:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 8009950:	6a0b      	ldr	r3, [r1, #32]
 8009952:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009956:	2b00      	cmp	r3, #0
 8009958:	d0f5      	beq.n	8009946 <_rclc_take_new_data+0x42>
 800995a:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800995e:	f104 0110 	add.w	r1, r4, #16
 8009962:	f006 fe59 	bl	8010618 <rcl_take_request>
 8009966:	4605      	mov	r5, r0
 8009968:	2800      	cmp	r0, #0
 800996a:	d0ec      	beq.n	8009946 <_rclc_take_new_data+0x42>
 800996c:	f240 2359 	movw	r3, #601	@ 0x259
 8009970:	4298      	cmp	r0, r3
 8009972:	d013      	beq.n	800999c <_rclc_take_new_data+0x98>
 8009974:	e029      	b.n	80099ca <_rclc_take_new_data+0xc6>
 8009976:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 8009978:	680b      	ldr	r3, [r1, #0]
 800997a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800997e:	2b00      	cmp	r3, #0
 8009980:	d0e1      	beq.n	8009946 <_rclc_take_new_data+0x42>
 8009982:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
 8009986:	2300      	movs	r3, #0
 8009988:	aa0a      	add	r2, sp, #40	@ 0x28
 800998a:	f006 ff83 	bl	8010894 <rcl_take>
 800998e:	4605      	mov	r5, r0
 8009990:	2800      	cmp	r0, #0
 8009992:	d0d9      	beq.n	8009948 <_rclc_take_new_data+0x44>
 8009994:	f240 1391 	movw	r3, #401	@ 0x191
 8009998:	4298      	cmp	r0, r3
 800999a:	d116      	bne.n	80099ca <_rclc_take_new_data+0xc6>
 800999c:	2300      	movs	r3, #0
 800999e:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
 80099a2:	e7d1      	b.n	8009948 <_rclc_take_new_data+0x44>
 80099a4:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 80099a6:	698b      	ldr	r3, [r1, #24]
 80099a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d0ca      	beq.n	8009946 <_rclc_take_new_data+0x42>
 80099b0:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 80099b4:	f104 0110 	add.w	r1, r4, #16
 80099b8:	f005 ffe6 	bl	800f988 <rcl_take_response>
 80099bc:	4605      	mov	r5, r0
 80099be:	2800      	cmp	r0, #0
 80099c0:	d0c1      	beq.n	8009946 <_rclc_take_new_data+0x42>
 80099c2:	f240 13f5 	movw	r3, #501	@ 0x1f5
 80099c6:	4298      	cmp	r0, r3
 80099c8:	d0be      	beq.n	8009948 <_rclc_take_new_data+0x44>
 80099ca:	f000 ff29 	bl	800a820 <rcutils_reset_error>
 80099ce:	e7bb      	b.n	8009948 <_rclc_take_new_data+0x44>
 80099d0:	6840      	ldr	r0, [r0, #4]
 80099d2:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d17d      	bne.n	8009ad6 <_rclc_take_new_data+0x1d2>
 80099da:	69c3      	ldr	r3, [r0, #28]
 80099dc:	b11b      	cbz	r3, 80099e6 <_rclc_take_new_data+0xe2>
 80099de:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d144      	bne.n	8009a70 <_rclc_take_new_data+0x16c>
 80099e6:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	f040 80ac 	bne.w	8009b48 <_rclc_take_new_data+0x244>
 80099f0:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d0a6      	beq.n	8009946 <_rclc_take_new_data+0x42>
 80099f8:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 80099fa:	a90a      	add	r1, sp, #40	@ 0x28
 80099fc:	3010      	adds	r0, #16
 80099fe:	f008 fa13 	bl	8011e28 <rcl_action_take_result_response>
 8009a02:	4605      	mov	r5, r0
 8009a04:	2800      	cmp	r0, #0
 8009a06:	d1e0      	bne.n	80099ca <_rclc_take_new_data+0xc6>
 8009a08:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8009a0c:	6860      	ldr	r0, [r4, #4]
 8009a0e:	f008 fe6f 	bl	80126f0 <rclc_action_find_handle_by_result_request_sequence_number>
 8009a12:	2800      	cmp	r0, #0
 8009a14:	d098      	beq.n	8009948 <_rclc_take_new_data+0x44>
 8009a16:	2301      	movs	r3, #1
 8009a18:	f880 3023 	strb.w	r3, [r0, #35]	@ 0x23
 8009a1c:	e794      	b.n	8009948 <_rclc_take_new_data+0x44>
 8009a1e:	250b      	movs	r5, #11
 8009a20:	4628      	mov	r0, r5
 8009a22:	b01b      	add	sp, #108	@ 0x6c
 8009a24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009a26:	ae04      	add	r6, sp, #16
 8009a28:	aa0a      	add	r2, sp, #40	@ 0x28
 8009a2a:	3010      	adds	r0, #16
 8009a2c:	4631      	mov	r1, r6
 8009a2e:	f008 fc6f 	bl	8012310 <rcl_action_take_cancel_request>
 8009a32:	4605      	mov	r5, r0
 8009a34:	2800      	cmp	r0, #0
 8009a36:	d1c8      	bne.n	80099ca <_rclc_take_new_data+0xc6>
 8009a38:	6860      	ldr	r0, [r4, #4]
 8009a3a:	a90a      	add	r1, sp, #40	@ 0x28
 8009a3c:	f008 fe16 	bl	801266c <rclc_action_find_goal_handle_by_uuid>
 8009a40:	4607      	mov	r7, r0
 8009a42:	2800      	cmp	r0, #0
 8009a44:	f000 80bb 	beq.w	8009bbe <_rclc_take_new_data+0x2ba>
 8009a48:	f990 0008 	ldrsb.w	r0, [r0, #8]
 8009a4c:	2101      	movs	r1, #1
 8009a4e:	f008 fd97 	bl	8012580 <rcl_action_transition_goal_state>
 8009a52:	2803      	cmp	r0, #3
 8009a54:	4684      	mov	ip, r0
 8009a56:	f040 80a7 	bne.w	8009ba8 <_rclc_take_new_data+0x2a4>
 8009a5a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8009a5c:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 8009a60:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009a62:	e896 0003 	ldmia.w	r6, {r0, r1}
 8009a66:	e884 0003 	stmia.w	r4, {r0, r1}
 8009a6a:	f887 c008 	strb.w	ip, [r7, #8]
 8009a6e:	e76b      	b.n	8009948 <_rclc_take_new_data+0x44>
 8009a70:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 8009a72:	3010      	adds	r0, #16
 8009a74:	f008 fa58 	bl	8011f28 <rcl_action_take_feedback>
 8009a78:	4605      	mov	r5, r0
 8009a7a:	2800      	cmp	r0, #0
 8009a7c:	d1a5      	bne.n	80099ca <_rclc_take_new_data+0xc6>
 8009a7e:	6860      	ldr	r0, [r4, #4]
 8009a80:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 8009a82:	f008 fdf3 	bl	801266c <rclc_action_find_goal_handle_by_uuid>
 8009a86:	4603      	mov	r3, r0
 8009a88:	2800      	cmp	r0, #0
 8009a8a:	f000 80a3 	beq.w	8009bd4 <_rclc_take_new_data+0x2d0>
 8009a8e:	2201      	movs	r2, #1
 8009a90:	6860      	ldr	r0, [r4, #4]
 8009a92:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 8009a96:	e7a6      	b.n	80099e6 <_rclc_take_new_data+0xe2>
 8009a98:	f008 fdc2 	bl	8012620 <rclc_action_take_goal_handle>
 8009a9c:	4606      	mov	r6, r0
 8009a9e:	6860      	ldr	r0, [r4, #4]
 8009aa0:	2e00      	cmp	r6, #0
 8009aa2:	f43f af47 	beq.w	8009934 <_rclc_take_new_data+0x30>
 8009aa6:	6070      	str	r0, [r6, #4]
 8009aa8:	69f2      	ldr	r2, [r6, #28]
 8009aaa:	f106 0128 	add.w	r1, r6, #40	@ 0x28
 8009aae:	3010      	adds	r0, #16
 8009ab0:	f008 fb76 	bl	80121a0 <rcl_action_take_goal_request>
 8009ab4:	4605      	mov	r5, r0
 8009ab6:	2800      	cmp	r0, #0
 8009ab8:	f040 808e 	bne.w	8009bd8 <_rclc_take_new_data+0x2d4>
 8009abc:	69f7      	ldr	r7, [r6, #28]
 8009abe:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8009ac0:	7235      	strb	r5, [r6, #8]
 8009ac2:	f8c6 0009 	str.w	r0, [r6, #9]
 8009ac6:	f8c6 100d 	str.w	r1, [r6, #13]
 8009aca:	6860      	ldr	r0, [r4, #4]
 8009acc:	f8c6 2011 	str.w	r2, [r6, #17]
 8009ad0:	f8c6 3015 	str.w	r3, [r6, #21]
 8009ad4:	e72e      	b.n	8009934 <_rclc_take_new_data+0x30>
 8009ad6:	aa04      	add	r2, sp, #16
 8009ad8:	a90a      	add	r1, sp, #40	@ 0x28
 8009ada:	3010      	adds	r0, #16
 8009adc:	f008 f92c 	bl	8011d38 <rcl_action_take_goal_response>
 8009ae0:	4605      	mov	r5, r0
 8009ae2:	2800      	cmp	r0, #0
 8009ae4:	f47f af71 	bne.w	80099ca <_rclc_take_new_data+0xc6>
 8009ae8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8009aec:	6860      	ldr	r0, [r4, #4]
 8009aee:	f008 fded 	bl	80126cc <rclc_action_find_handle_by_goal_request_sequence_number>
 8009af2:	b130      	cbz	r0, 8009b02 <_rclc_take_new_data+0x1fe>
 8009af4:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8009af8:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 8009afc:	2201      	movs	r2, #1
 8009afe:	f880 2020 	strb.w	r2, [r0, #32]
 8009b02:	6860      	ldr	r0, [r4, #4]
 8009b04:	e769      	b.n	80099da <_rclc_take_new_data+0xd6>
 8009b06:	aa04      	add	r2, sp, #16
 8009b08:	3010      	adds	r0, #16
 8009b0a:	a90a      	add	r1, sp, #40	@ 0x28
 8009b0c:	f008 fbc0 	bl	8012290 <rcl_action_take_result_request>
 8009b10:	4605      	mov	r5, r0
 8009b12:	2800      	cmp	r0, #0
 8009b14:	f47f af59 	bne.w	80099ca <_rclc_take_new_data+0xc6>
 8009b18:	6860      	ldr	r0, [r4, #4]
 8009b1a:	a904      	add	r1, sp, #16
 8009b1c:	f008 fda6 	bl	801266c <rclc_action_find_goal_handle_by_uuid>
 8009b20:	4607      	mov	r7, r0
 8009b22:	b160      	cbz	r0, 8009b3e <_rclc_take_new_data+0x23a>
 8009b24:	ad0a      	add	r5, sp, #40	@ 0x28
 8009b26:	f100 0640 	add.w	r6, r0, #64	@ 0x40
 8009b2a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009b2c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8009b2e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8009b32:	f04f 0c02 	mov.w	ip, #2
 8009b36:	e886 0003 	stmia.w	r6, {r0, r1}
 8009b3a:	f887 c008 	strb.w	ip, [r7, #8]
 8009b3e:	6860      	ldr	r0, [r4, #4]
 8009b40:	2300      	movs	r3, #0
 8009b42:	f880 3022 	strb.w	r3, [r0, #34]	@ 0x22
 8009b46:	e6fa      	b.n	800993e <_rclc_take_new_data+0x3a>
 8009b48:	f100 0230 	add.w	r2, r0, #48	@ 0x30
 8009b4c:	a90a      	add	r1, sp, #40	@ 0x28
 8009b4e:	3010      	adds	r0, #16
 8009b50:	f008 f9aa 	bl	8011ea8 <rcl_action_take_cancel_response>
 8009b54:	4605      	mov	r5, r0
 8009b56:	2800      	cmp	r0, #0
 8009b58:	f47f af37 	bne.w	80099ca <_rclc_take_new_data+0xc6>
 8009b5c:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8009b60:	6860      	ldr	r0, [r4, #4]
 8009b62:	f008 fdd7 	bl	8012714 <rclc_action_find_handle_by_cancel_request_sequence_number>
 8009b66:	4606      	mov	r6, r0
 8009b68:	6860      	ldr	r0, [r4, #4]
 8009b6a:	2e00      	cmp	r6, #0
 8009b6c:	f43f af40 	beq.w	80099f0 <_rclc_take_new_data+0xec>
 8009b70:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8009b72:	2701      	movs	r7, #1
 8009b74:	84b7      	strh	r7, [r6, #36]	@ 0x24
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	f43f af3a 	beq.w	80099f0 <_rclc_take_new_data+0xec>
 8009b7c:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8009b7e:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 8009b82:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8009b86:	f008 fd71 	bl	801266c <rclc_action_find_goal_handle_by_uuid>
 8009b8a:	b138      	cbz	r0, 8009b9c <_rclc_take_new_data+0x298>
 8009b8c:	6860      	ldr	r0, [r4, #4]
 8009b8e:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8009b90:	f886 7025 	strb.w	r7, [r6, #37]	@ 0x25
 8009b94:	3501      	adds	r5, #1
 8009b96:	42ab      	cmp	r3, r5
 8009b98:	d8f0      	bhi.n	8009b7c <_rclc_take_new_data+0x278>
 8009b9a:	e729      	b.n	80099f0 <_rclc_take_new_data+0xec>
 8009b9c:	6860      	ldr	r0, [r4, #4]
 8009b9e:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8009ba0:	3501      	adds	r5, #1
 8009ba2:	42ab      	cmp	r3, r5
 8009ba4:	d8ea      	bhi.n	8009b7c <_rclc_take_new_data+0x278>
 8009ba6:	e723      	b.n	80099f0 <_rclc_take_new_data+0xec>
 8009ba8:	ab06      	add	r3, sp, #24
 8009baa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8009bac:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8009bb0:	2103      	movs	r1, #3
 8009bb2:	e896 000c 	ldmia.w	r6, {r2, r3}
 8009bb6:	6860      	ldr	r0, [r4, #4]
 8009bb8:	f008 fe22 	bl	8012800 <rclc_action_server_goal_cancel_reject>
 8009bbc:	e6c4      	b.n	8009948 <_rclc_take_new_data+0x44>
 8009bbe:	ab06      	add	r3, sp, #24
 8009bc0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8009bc2:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8009bc6:	2102      	movs	r1, #2
 8009bc8:	e896 000c 	ldmia.w	r6, {r2, r3}
 8009bcc:	6860      	ldr	r0, [r4, #4]
 8009bce:	f008 fe17 	bl	8012800 <rclc_action_server_goal_cancel_reject>
 8009bd2:	e6b9      	b.n	8009948 <_rclc_take_new_data+0x44>
 8009bd4:	6860      	ldr	r0, [r4, #4]
 8009bd6:	e706      	b.n	80099e6 <_rclc_take_new_data+0xe2>
 8009bd8:	6860      	ldr	r0, [r4, #4]
 8009bda:	4631      	mov	r1, r6
 8009bdc:	f008 fd30 	bl	8012640 <rclc_action_remove_used_goal_handle>
 8009be0:	f000 fe1e 	bl	800a820 <rcutils_reset_error>
 8009be4:	e6b0      	b.n	8009948 <_rclc_take_new_data+0x44>
 8009be6:	2501      	movs	r5, #1
 8009be8:	e6ae      	b.n	8009948 <_rclc_take_new_data+0x44>
 8009bea:	bf00      	nop

08009bec <_rclc_execute.part.0>:
 8009bec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009bee:	7803      	ldrb	r3, [r0, #0]
 8009bf0:	b087      	sub	sp, #28
 8009bf2:	4604      	mov	r4, r0
 8009bf4:	2b0a      	cmp	r3, #10
 8009bf6:	f200 8136 	bhi.w	8009e66 <_rclc_execute.part.0+0x27a>
 8009bfa:	e8df f003 	tbb	[pc, r3]
 8009bfe:	435e      	.short	0x435e
 8009c00:	06a1664f 	.word	0x06a1664f
 8009c04:	6c1e0606 	.word	0x6c1e0606
 8009c08:	59          	.byte	0x59
 8009c09:	00          	.byte	0x00
 8009c0a:	2b06      	cmp	r3, #6
 8009c0c:	f000 8122 	beq.w	8009e54 <_rclc_execute.part.0+0x268>
 8009c10:	2b07      	cmp	r3, #7
 8009c12:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8009c14:	f040 8118 	bne.w	8009e48 <_rclc_execute.part.0+0x25c>
 8009c18:	e9d0 120a 	ldrd	r1, r2, [r0, #40]	@ 0x28
 8009c1c:	6880      	ldr	r0, [r0, #8]
 8009c1e:	4798      	blx	r3
 8009c20:	f104 0110 	add.w	r1, r4, #16
 8009c24:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8009c26:	6860      	ldr	r0, [r4, #4]
 8009c28:	f006 fd36 	bl	8010698 <rcl_send_response>
 8009c2c:	2800      	cmp	r0, #0
 8009c2e:	d033      	beq.n	8009c98 <_rclc_execute.part.0+0xac>
 8009c30:	9005      	str	r0, [sp, #20]
 8009c32:	f000 fdf5 	bl	800a820 <rcutils_reset_error>
 8009c36:	9805      	ldr	r0, [sp, #20]
 8009c38:	e02e      	b.n	8009c98 <_rclc_execute.part.0+0xac>
 8009c3a:	6840      	ldr	r0, [r0, #4]
 8009c3c:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	f000 8086 	beq.w	8009d52 <_rclc_execute.part.0+0x166>
 8009c46:	2600      	movs	r6, #0
 8009c48:	2701      	movs	r7, #1
 8009c4a:	e004      	b.n	8009c56 <_rclc_execute.part.0+0x6a>
 8009c4c:	f008 fcc2 	bl	80125d4 <rclc_action_send_result_request>
 8009c50:	b998      	cbnz	r0, 8009c7a <_rclc_execute.part.0+0x8e>
 8009c52:	722f      	strb	r7, [r5, #8]
 8009c54:	6860      	ldr	r0, [r4, #4]
 8009c56:	f008 fd6f 	bl	8012738 <rclc_action_find_first_handle_with_goal_response>
 8009c5a:	4605      	mov	r5, r0
 8009c5c:	2800      	cmp	r0, #0
 8009c5e:	d077      	beq.n	8009d50 <_rclc_execute.part.0+0x164>
 8009c60:	6863      	ldr	r3, [r4, #4]
 8009c62:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8009c64:	699b      	ldr	r3, [r3, #24]
 8009c66:	f895 1021 	ldrb.w	r1, [r5, #33]	@ 0x21
 8009c6a:	f885 6020 	strb.w	r6, [r5, #32]
 8009c6e:	4798      	blx	r3
 8009c70:	f895 3021 	ldrb.w	r3, [r5, #33]	@ 0x21
 8009c74:	4628      	mov	r0, r5
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d1e8      	bne.n	8009c4c <_rclc_execute.part.0+0x60>
 8009c7a:	6860      	ldr	r0, [r4, #4]
 8009c7c:	4629      	mov	r1, r5
 8009c7e:	f008 fcdf 	bl	8012640 <rclc_action_remove_used_goal_handle>
 8009c82:	e7e7      	b.n	8009c54 <_rclc_execute.part.0+0x68>
 8009c84:	f890 5039 	ldrb.w	r5, [r0, #57]	@ 0x39
 8009c88:	e9d0 130b 	ldrd	r1, r3, [r0, #44]	@ 0x2c
 8009c8c:	2d00      	cmp	r5, #0
 8009c8e:	f000 80c9 	beq.w	8009e24 <_rclc_execute.part.0+0x238>
 8009c92:	6880      	ldr	r0, [r0, #8]
 8009c94:	4798      	blx	r3
 8009c96:	2000      	movs	r0, #0
 8009c98:	b007      	add	sp, #28
 8009c9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009c9c:	6840      	ldr	r0, [r0, #4]
 8009c9e:	f007 f909 	bl	8010eb4 <rcl_timer_call>
 8009ca2:	f240 3321 	movw	r3, #801	@ 0x321
 8009ca6:	4298      	cmp	r0, r3
 8009ca8:	d004      	beq.n	8009cb4 <_rclc_execute.part.0+0xc8>
 8009caa:	2800      	cmp	r0, #0
 8009cac:	d0f4      	beq.n	8009c98 <_rclc_execute.part.0+0xac>
 8009cae:	e7bf      	b.n	8009c30 <_rclc_execute.part.0+0x44>
 8009cb0:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8009cb2:	4798      	blx	r3
 8009cb4:	2000      	movs	r0, #0
 8009cb6:	b007      	add	sp, #28
 8009cb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009cba:	f890 5039 	ldrb.w	r5, [r0, #57]	@ 0x39
 8009cbe:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8009cc0:	b925      	cbnz	r5, 8009ccc <_rclc_execute.part.0+0xe0>
 8009cc2:	4628      	mov	r0, r5
 8009cc4:	4798      	blx	r3
 8009cc6:	4628      	mov	r0, r5
 8009cc8:	e7e6      	b.n	8009c98 <_rclc_execute.part.0+0xac>
 8009cca:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8009ccc:	68a0      	ldr	r0, [r4, #8]
 8009cce:	4798      	blx	r3
 8009cd0:	2000      	movs	r0, #0
 8009cd2:	b007      	add	sp, #28
 8009cd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009cd6:	6840      	ldr	r0, [r0, #4]
 8009cd8:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 8009cdc:	bb3b      	cbnz	r3, 8009d2e <_rclc_execute.part.0+0x142>
 8009cde:	f890 3020 	ldrb.w	r3, [r0, #32]
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d07b      	beq.n	8009dde <_rclc_execute.part.0+0x1f2>
 8009ce6:	f640 0634 	movw	r6, #2100	@ 0x834
 8009cea:	2701      	movs	r7, #1
 8009cec:	e007      	b.n	8009cfe <_rclc_execute.part.0+0x112>
 8009cee:	4628      	mov	r0, r5
 8009cf0:	f008 fd3a 	bl	8012768 <rclc_action_server_response_goal_request>
 8009cf4:	6860      	ldr	r0, [r4, #4]
 8009cf6:	4629      	mov	r1, r5
 8009cf8:	f008 fca2 	bl	8012640 <rclc_action_remove_used_goal_handle>
 8009cfc:	6860      	ldr	r0, [r4, #4]
 8009cfe:	2100      	movs	r1, #0
 8009d00:	f008 fccc 	bl	801269c <rclc_action_find_first_handle_by_status>
 8009d04:	4605      	mov	r5, r0
 8009d06:	2800      	cmp	r0, #0
 8009d08:	d066      	beq.n	8009dd8 <_rclc_execute.part.0+0x1ec>
 8009d0a:	6863      	ldr	r3, [r4, #4]
 8009d0c:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8009d0e:	699b      	ldr	r3, [r3, #24]
 8009d10:	4798      	blx	r3
 8009d12:	42b0      	cmp	r0, r6
 8009d14:	f04f 0100 	mov.w	r1, #0
 8009d18:	d1e9      	bne.n	8009cee <_rclc_execute.part.0+0x102>
 8009d1a:	2101      	movs	r1, #1
 8009d1c:	4628      	mov	r0, r5
 8009d1e:	f008 fd23 	bl	8012768 <rclc_action_server_response_goal_request>
 8009d22:	722f      	strb	r7, [r5, #8]
 8009d24:	e7ea      	b.n	8009cfc <_rclc_execute.part.0+0x110>
 8009d26:	6848      	ldr	r0, [r1, #4]
 8009d28:	f008 fc8a 	bl	8012640 <rclc_action_remove_used_goal_handle>
 8009d2c:	6860      	ldr	r0, [r4, #4]
 8009d2e:	f008 fcc1 	bl	80126b4 <rclc_action_find_first_terminated_handle>
 8009d32:	4601      	mov	r1, r0
 8009d34:	2800      	cmp	r0, #0
 8009d36:	d1f6      	bne.n	8009d26 <_rclc_execute.part.0+0x13a>
 8009d38:	6860      	ldr	r0, [r4, #4]
 8009d3a:	f880 1024 	strb.w	r1, [r0, #36]	@ 0x24
 8009d3e:	e7ce      	b.n	8009cde <_rclc_execute.part.0+0xf2>
 8009d40:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8009d42:	6880      	ldr	r0, [r0, #8]
 8009d44:	f104 0110 	add.w	r1, r4, #16
 8009d48:	4798      	blx	r3
 8009d4a:	2000      	movs	r0, #0
 8009d4c:	b007      	add	sp, #28
 8009d4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009d50:	6860      	ldr	r0, [r4, #4]
 8009d52:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8009d56:	b18b      	cbz	r3, 8009d7c <_rclc_execute.part.0+0x190>
 8009d58:	68c5      	ldr	r5, [r0, #12]
 8009d5a:	b32d      	cbz	r5, 8009da8 <_rclc_execute.part.0+0x1bc>
 8009d5c:	2600      	movs	r6, #0
 8009d5e:	f895 3022 	ldrb.w	r3, [r5, #34]	@ 0x22
 8009d62:	b143      	cbz	r3, 8009d76 <_rclc_execute.part.0+0x18a>
 8009d64:	69c3      	ldr	r3, [r0, #28]
 8009d66:	f885 6022 	strb.w	r6, [r5, #34]	@ 0x22
 8009d6a:	b123      	cbz	r3, 8009d76 <_rclc_execute.part.0+0x18a>
 8009d6c:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 8009d6e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8009d70:	4628      	mov	r0, r5
 8009d72:	4798      	blx	r3
 8009d74:	6860      	ldr	r0, [r4, #4]
 8009d76:	682d      	ldr	r5, [r5, #0]
 8009d78:	2d00      	cmp	r5, #0
 8009d7a:	d1f0      	bne.n	8009d5e <_rclc_execute.part.0+0x172>
 8009d7c:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 8009d80:	b193      	cbz	r3, 8009da8 <_rclc_execute.part.0+0x1bc>
 8009d82:	68c5      	ldr	r5, [r0, #12]
 8009d84:	b185      	cbz	r5, 8009da8 <_rclc_execute.part.0+0x1bc>
 8009d86:	2600      	movs	r6, #0
 8009d88:	f895 3024 	ldrb.w	r3, [r5, #36]	@ 0x24
 8009d8c:	b14b      	cbz	r3, 8009da2 <_rclc_execute.part.0+0x1b6>
 8009d8e:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8009d90:	f885 6024 	strb.w	r6, [r5, #36]	@ 0x24
 8009d94:	b12b      	cbz	r3, 8009da2 <_rclc_execute.part.0+0x1b6>
 8009d96:	4628      	mov	r0, r5
 8009d98:	f895 1025 	ldrb.w	r1, [r5, #37]	@ 0x25
 8009d9c:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8009d9e:	4798      	blx	r3
 8009da0:	6860      	ldr	r0, [r4, #4]
 8009da2:	682d      	ldr	r5, [r5, #0]
 8009da4:	2d00      	cmp	r5, #0
 8009da6:	d1ef      	bne.n	8009d88 <_rclc_execute.part.0+0x19c>
 8009da8:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d081      	beq.n	8009cb4 <_rclc_execute.part.0+0xc8>
 8009db0:	2700      	movs	r7, #0
 8009db2:	e00b      	b.n	8009dcc <_rclc_execute.part.0+0x1e0>
 8009db4:	6863      	ldr	r3, [r4, #4]
 8009db6:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8009db8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8009dba:	6a1e      	ldr	r6, [r3, #32]
 8009dbc:	f885 7023 	strb.w	r7, [r5, #35]	@ 0x23
 8009dc0:	47b0      	blx	r6
 8009dc2:	6860      	ldr	r0, [r4, #4]
 8009dc4:	4629      	mov	r1, r5
 8009dc6:	f008 fc3b 	bl	8012640 <rclc_action_remove_used_goal_handle>
 8009dca:	6860      	ldr	r0, [r4, #4]
 8009dcc:	f008 fcc0 	bl	8012750 <rclc_action_find_first_handle_with_result_response>
 8009dd0:	4605      	mov	r5, r0
 8009dd2:	2800      	cmp	r0, #0
 8009dd4:	d1ee      	bne.n	8009db4 <_rclc_execute.part.0+0x1c8>
 8009dd6:	e76d      	b.n	8009cb4 <_rclc_execute.part.0+0xc8>
 8009dd8:	6860      	ldr	r0, [r4, #4]
 8009dda:	f880 5020 	strb.w	r5, [r0, #32]
 8009dde:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	f43f af66 	beq.w	8009cb4 <_rclc_execute.part.0+0xc8>
 8009de8:	68c5      	ldr	r5, [r0, #12]
 8009dea:	b1b5      	cbz	r5, 8009e1a <_rclc_execute.part.0+0x22e>
 8009dec:	2602      	movs	r6, #2
 8009dee:	e001      	b.n	8009df4 <_rclc_execute.part.0+0x208>
 8009df0:	682d      	ldr	r5, [r5, #0]
 8009df2:	b195      	cbz	r5, 8009e1a <_rclc_execute.part.0+0x22e>
 8009df4:	f995 3008 	ldrsb.w	r3, [r5, #8]
 8009df8:	2b03      	cmp	r3, #3
 8009dfa:	d1f9      	bne.n	8009df0 <_rclc_execute.part.0+0x204>
 8009dfc:	69c3      	ldr	r3, [r0, #28]
 8009dfe:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8009e00:	4628      	mov	r0, r5
 8009e02:	4798      	blx	r3
 8009e04:	4603      	mov	r3, r0
 8009e06:	f105 0260 	add.w	r2, r5, #96	@ 0x60
 8009e0a:	4628      	mov	r0, r5
 8009e0c:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
 8009e10:	b163      	cbz	r3, 8009e2c <_rclc_execute.part.0+0x240>
 8009e12:	f008 fcc9 	bl	80127a8 <rclc_action_server_goal_cancel_accept>
 8009e16:	6860      	ldr	r0, [r4, #4]
 8009e18:	e7ea      	b.n	8009df0 <_rclc_execute.part.0+0x204>
 8009e1a:	2300      	movs	r3, #0
 8009e1c:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 8009e20:	4618      	mov	r0, r3
 8009e22:	e739      	b.n	8009c98 <_rclc_execute.part.0+0xac>
 8009e24:	4628      	mov	r0, r5
 8009e26:	4798      	blx	r3
 8009e28:	4628      	mov	r0, r5
 8009e2a:	e735      	b.n	8009c98 <_rclc_execute.part.0+0xac>
 8009e2c:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 8009e2e:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8009e32:	f105 0758 	add.w	r7, r5, #88	@ 0x58
 8009e36:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009e3a:	6860      	ldr	r0, [r4, #4]
 8009e3c:	2101      	movs	r1, #1
 8009e3e:	f008 fcdf 	bl	8012800 <rclc_action_server_goal_cancel_reject>
 8009e42:	722e      	strb	r6, [r5, #8]
 8009e44:	6860      	ldr	r0, [r4, #4]
 8009e46:	e7d3      	b.n	8009df0 <_rclc_execute.part.0+0x204>
 8009e48:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 8009e4a:	6880      	ldr	r0, [r0, #8]
 8009e4c:	4798      	blx	r3
 8009e4e:	f104 0110 	add.w	r1, r4, #16
 8009e52:	e6e7      	b.n	8009c24 <_rclc_execute.part.0+0x38>
 8009e54:	f100 0110 	add.w	r1, r0, #16
 8009e58:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8009e5a:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 8009e5c:	6880      	ldr	r0, [r0, #8]
 8009e5e:	9105      	str	r1, [sp, #20]
 8009e60:	4798      	blx	r3
 8009e62:	9905      	ldr	r1, [sp, #20]
 8009e64:	e6de      	b.n	8009c24 <_rclc_execute.part.0+0x38>
 8009e66:	2001      	movs	r0, #1
 8009e68:	e716      	b.n	8009c98 <_rclc_execute.part.0+0xac>
 8009e6a:	bf00      	nop

08009e6c <rclc_executor_trigger_any>:
 8009e6c:	2800      	cmp	r0, #0
 8009e6e:	d03f      	beq.n	8009ef0 <rclc_executor_trigger_any+0x84>
 8009e70:	2900      	cmp	r1, #0
 8009e72:	d03e      	beq.n	8009ef2 <rclc_executor_trigger_any+0x86>
 8009e74:	4603      	mov	r3, r0
 8009e76:	f890 0038 	ldrb.w	r0, [r0, #56]	@ 0x38
 8009e7a:	2200      	movs	r2, #0
 8009e7c:	2800      	cmp	r0, #0
 8009e7e:	d037      	beq.n	8009ef0 <rclc_executor_trigger_any+0x84>
 8009e80:	b430      	push	{r4, r5}
 8009e82:	f893 c000 	ldrb.w	ip, [r3]
 8009e86:	f1bc 0f08 	cmp.w	ip, #8
 8009e8a:	d11e      	bne.n	8009eca <rclc_executor_trigger_any+0x5e>
 8009e8c:	685c      	ldr	r4, [r3, #4]
 8009e8e:	6c25      	ldr	r5, [r4, #64]	@ 0x40
 8009e90:	f035 457f 	bics.w	r5, r5, #4278190080	@ 0xff000000
 8009e94:	d105      	bne.n	8009ea2 <rclc_executor_trigger_any+0x36>
 8009e96:	f894 0044 	ldrb.w	r0, [r4, #68]	@ 0x44
 8009e9a:	b910      	cbnz	r0, 8009ea2 <rclc_executor_trigger_any+0x36>
 8009e9c:	f894 0043 	ldrb.w	r0, [r4, #67]	@ 0x43
 8009ea0:	b128      	cbz	r0, 8009eae <rclc_executor_trigger_any+0x42>
 8009ea2:	bc30      	pop	{r4, r5}
 8009ea4:	4770      	bx	lr
 8009ea6:	f893 0039 	ldrb.w	r0, [r3, #57]	@ 0x39
 8009eaa:	2800      	cmp	r0, #0
 8009eac:	d1f9      	bne.n	8009ea2 <rclc_executor_trigger_any+0x36>
 8009eae:	3201      	adds	r2, #1
 8009eb0:	4291      	cmp	r1, r2
 8009eb2:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 8009eb6:	d018      	beq.n	8009eea <rclc_executor_trigger_any+0x7e>
 8009eb8:	f893 0038 	ldrb.w	r0, [r3, #56]	@ 0x38
 8009ebc:	2800      	cmp	r0, #0
 8009ebe:	d0f0      	beq.n	8009ea2 <rclc_executor_trigger_any+0x36>
 8009ec0:	f893 c000 	ldrb.w	ip, [r3]
 8009ec4:	f1bc 0f08 	cmp.w	ip, #8
 8009ec8:	d0e0      	beq.n	8009e8c <rclc_executor_trigger_any+0x20>
 8009eca:	f1bc 0f09 	cmp.w	ip, #9
 8009ece:	d1ea      	bne.n	8009ea6 <rclc_executor_trigger_any+0x3a>
 8009ed0:	685c      	ldr	r4, [r3, #4]
 8009ed2:	6a25      	ldr	r5, [r4, #32]
 8009ed4:	2d00      	cmp	r5, #0
 8009ed6:	d1e4      	bne.n	8009ea2 <rclc_executor_trigger_any+0x36>
 8009ed8:	f894 0024 	ldrb.w	r0, [r4, #36]	@ 0x24
 8009edc:	2800      	cmp	r0, #0
 8009ede:	d1e0      	bne.n	8009ea2 <rclc_executor_trigger_any+0x36>
 8009ee0:	3201      	adds	r2, #1
 8009ee2:	4291      	cmp	r1, r2
 8009ee4:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 8009ee8:	d1e6      	bne.n	8009eb8 <rclc_executor_trigger_any+0x4c>
 8009eea:	2000      	movs	r0, #0
 8009eec:	bc30      	pop	{r4, r5}
 8009eee:	4770      	bx	lr
 8009ef0:	4770      	bx	lr
 8009ef2:	4608      	mov	r0, r1
 8009ef4:	4770      	bx	lr
 8009ef6:	bf00      	nop

08009ef8 <rclc_executor_init>:
 8009ef8:	2800      	cmp	r0, #0
 8009efa:	d05f      	beq.n	8009fbc <rclc_executor_init+0xc4>
 8009efc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f00:	460c      	mov	r4, r1
 8009f02:	b0b0      	sub	sp, #192	@ 0xc0
 8009f04:	2900      	cmp	r1, #0
 8009f06:	d051      	beq.n	8009fac <rclc_executor_init+0xb4>
 8009f08:	4605      	mov	r5, r0
 8009f0a:	4618      	mov	r0, r3
 8009f0c:	4616      	mov	r6, r2
 8009f0e:	461f      	mov	r7, r3
 8009f10:	f000 fc62 	bl	800a7d8 <rcutils_allocator_is_valid>
 8009f14:	2800      	cmp	r0, #0
 8009f16:	d049      	beq.n	8009fac <rclc_executor_init+0xb4>
 8009f18:	2e00      	cmp	r6, #0
 8009f1a:	d047      	beq.n	8009fac <rclc_executor_init+0xb4>
 8009f1c:	492c      	ldr	r1, [pc, #176]	@ (8009fd0 <rclc_executor_init+0xd8>)
 8009f1e:	2288      	movs	r2, #136	@ 0x88
 8009f20:	a80e      	add	r0, sp, #56	@ 0x38
 8009f22:	f00d fe0a 	bl	8017b3a <memcpy>
 8009f26:	a90e      	add	r1, sp, #56	@ 0x38
 8009f28:	2288      	movs	r2, #136	@ 0x88
 8009f2a:	4628      	mov	r0, r5
 8009f2c:	f00d fe05 	bl	8017b3a <memcpy>
 8009f30:	602c      	str	r4, [r5, #0]
 8009f32:	4668      	mov	r0, sp
 8009f34:	60ae      	str	r6, [r5, #8]
 8009f36:	466c      	mov	r4, sp
 8009f38:	f007 f92e 	bl	8011198 <rcl_get_zero_initialized_wait_set>
 8009f3c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009f3e:	f105 0c14 	add.w	ip, r5, #20
 8009f42:	f8d7 8000 	ldr.w	r8, [r7]
 8009f46:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8009f4a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009f4c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8009f50:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009f52:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8009f56:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 8009fc8 <rclc_executor_init+0xd0>
 8009f5a:	6823      	ldr	r3, [r4, #0]
 8009f5c:	f8cc 3000 	str.w	r3, [ip]
 8009f60:	6939      	ldr	r1, [r7, #16]
 8009f62:	612f      	str	r7, [r5, #16]
 8009f64:	ed85 7b1a 	vstr	d7, [r5, #104]	@ 0x68
 8009f68:	01b0      	lsls	r0, r6, #6
 8009f6a:	47c0      	blx	r8
 8009f6c:	6068      	str	r0, [r5, #4]
 8009f6e:	b338      	cbz	r0, 8009fc0 <rclc_executor_init+0xc8>
 8009f70:	2400      	movs	r4, #0
 8009f72:	e000      	b.n	8009f76 <rclc_executor_init+0x7e>
 8009f74:	6868      	ldr	r0, [r5, #4]
 8009f76:	eb00 1084 	add.w	r0, r0, r4, lsl #6
 8009f7a:	4631      	mov	r1, r6
 8009f7c:	3401      	adds	r4, #1
 8009f7e:	f000 fab3 	bl	800a4e8 <rclc_executor_handle_init>
 8009f82:	42a6      	cmp	r6, r4
 8009f84:	d1f6      	bne.n	8009f74 <rclc_executor_init+0x7c>
 8009f86:	f105 0048 	add.w	r0, r5, #72	@ 0x48
 8009f8a:	f000 faa3 	bl	800a4d4 <rclc_executor_handle_counters_zero_init>
 8009f8e:	4a11      	ldr	r2, [pc, #68]	@ (8009fd4 <rclc_executor_init+0xdc>)
 8009f90:	686b      	ldr	r3, [r5, #4]
 8009f92:	2000      	movs	r0, #0
 8009f94:	e9c5 201e 	strd	r2, r0, [r5, #120]	@ 0x78
 8009f98:	b163      	cbz	r3, 8009fb4 <rclc_executor_init+0xbc>
 8009f9a:	692b      	ldr	r3, [r5, #16]
 8009f9c:	b153      	cbz	r3, 8009fb4 <rclc_executor_init+0xbc>
 8009f9e:	68ab      	ldr	r3, [r5, #8]
 8009fa0:	b143      	cbz	r3, 8009fb4 <rclc_executor_init+0xbc>
 8009fa2:	f885 0080 	strb.w	r0, [r5, #128]	@ 0x80
 8009fa6:	b030      	add	sp, #192	@ 0xc0
 8009fa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009fac:	200b      	movs	r0, #11
 8009fae:	b030      	add	sp, #192	@ 0xc0
 8009fb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009fb4:	4618      	mov	r0, r3
 8009fb6:	b030      	add	sp, #192	@ 0xc0
 8009fb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009fbc:	200b      	movs	r0, #11
 8009fbe:	4770      	bx	lr
 8009fc0:	200a      	movs	r0, #10
 8009fc2:	e7f4      	b.n	8009fae <rclc_executor_init+0xb6>
 8009fc4:	f3af 8000 	nop.w
 8009fc8:	3b9aca00 	.word	0x3b9aca00
 8009fcc:	00000000 	.word	0x00000000
 8009fd0:	08018948 	.word	0x08018948
 8009fd4:	08009e6d 	.word	0x08009e6d

08009fd8 <rclc_executor_add_subscription>:
 8009fd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fda:	f89d e018 	ldrb.w	lr, [sp, #24]
 8009fde:	b338      	cbz	r0, 800a030 <rclc_executor_add_subscription+0x58>
 8009fe0:	b331      	cbz	r1, 800a030 <rclc_executor_add_subscription+0x58>
 8009fe2:	b32a      	cbz	r2, 800a030 <rclc_executor_add_subscription+0x58>
 8009fe4:	b323      	cbz	r3, 800a030 <rclc_executor_add_subscription+0x58>
 8009fe6:	4604      	mov	r4, r0
 8009fe8:	e9d0 5002 	ldrd	r5, r0, [r0, #8]
 8009fec:	42a8      	cmp	r0, r5
 8009fee:	d301      	bcc.n	8009ff4 <rclc_executor_add_subscription+0x1c>
 8009ff0:	2001      	movs	r0, #1
 8009ff2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009ff4:	6866      	ldr	r6, [r4, #4]
 8009ff6:	0187      	lsls	r7, r0, #6
 8009ff8:	eb06 1c80 	add.w	ip, r6, r0, lsl #6
 8009ffc:	2500      	movs	r5, #0
 8009ffe:	55f5      	strb	r5, [r6, r7]
 800a000:	3001      	adds	r0, #1
 800a002:	f8cc 3030 	str.w	r3, [ip, #48]	@ 0x30
 800a006:	f8cc 502c 	str.w	r5, [ip, #44]	@ 0x2c
 800a00a:	2301      	movs	r3, #1
 800a00c:	f104 0514 	add.w	r5, r4, #20
 800a010:	e9cc 1201 	strd	r1, r2, [ip, #4]
 800a014:	f88c e001 	strb.w	lr, [ip, #1]
 800a018:	f8ac 3038 	strh.w	r3, [ip, #56]	@ 0x38
 800a01c:	60e0      	str	r0, [r4, #12]
 800a01e:	4628      	mov	r0, r5
 800a020:	f007 f8ce 	bl	80111c0 <rcl_wait_set_is_valid>
 800a024:	b930      	cbnz	r0, 800a034 <rclc_executor_add_subscription+0x5c>
 800a026:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 800a028:	3301      	adds	r3, #1
 800a02a:	2000      	movs	r0, #0
 800a02c:	64a3      	str	r3, [r4, #72]	@ 0x48
 800a02e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a030:	200b      	movs	r0, #11
 800a032:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a034:	4628      	mov	r0, r5
 800a036:	f007 f8c9 	bl	80111cc <rcl_wait_set_fini>
 800a03a:	2800      	cmp	r0, #0
 800a03c:	d0f3      	beq.n	800a026 <rclc_executor_add_subscription+0x4e>
 800a03e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a040 <rclc_executor_add_timer>:
 800a040:	b300      	cbz	r0, 800a084 <rclc_executor_add_timer+0x44>
 800a042:	b1f9      	cbz	r1, 800a084 <rclc_executor_add_timer+0x44>
 800a044:	b538      	push	{r3, r4, r5, lr}
 800a046:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
 800a04a:	4293      	cmp	r3, r2
 800a04c:	4604      	mov	r4, r0
 800a04e:	d301      	bcc.n	800a054 <rclc_executor_add_timer+0x14>
 800a050:	2001      	movs	r0, #1
 800a052:	bd38      	pop	{r3, r4, r5, pc}
 800a054:	6840      	ldr	r0, [r0, #4]
 800a056:	eb00 1283 	add.w	r2, r0, r3, lsl #6
 800a05a:	019d      	lsls	r5, r3, #6
 800a05c:	6051      	str	r1, [r2, #4]
 800a05e:	2102      	movs	r1, #2
 800a060:	5341      	strh	r1, [r0, r5]
 800a062:	3301      	adds	r3, #1
 800a064:	2000      	movs	r0, #0
 800a066:	2101      	movs	r1, #1
 800a068:	f104 0514 	add.w	r5, r4, #20
 800a06c:	62d0      	str	r0, [r2, #44]	@ 0x2c
 800a06e:	8711      	strh	r1, [r2, #56]	@ 0x38
 800a070:	4628      	mov	r0, r5
 800a072:	60e3      	str	r3, [r4, #12]
 800a074:	f007 f8a4 	bl	80111c0 <rcl_wait_set_is_valid>
 800a078:	b930      	cbnz	r0, 800a088 <rclc_executor_add_timer+0x48>
 800a07a:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800a07c:	3301      	adds	r3, #1
 800a07e:	2000      	movs	r0, #0
 800a080:	64e3      	str	r3, [r4, #76]	@ 0x4c
 800a082:	bd38      	pop	{r3, r4, r5, pc}
 800a084:	200b      	movs	r0, #11
 800a086:	4770      	bx	lr
 800a088:	4628      	mov	r0, r5
 800a08a:	f007 f89f 	bl	80111cc <rcl_wait_set_fini>
 800a08e:	2800      	cmp	r0, #0
 800a090:	d0f3      	beq.n	800a07a <rclc_executor_add_timer+0x3a>
 800a092:	bd38      	pop	{r3, r4, r5, pc}

0800a094 <rclc_executor_prepare>:
 800a094:	2800      	cmp	r0, #0
 800a096:	d044      	beq.n	800a122 <rclc_executor_prepare+0x8e>
 800a098:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a09a:	f100 0514 	add.w	r5, r0, #20
 800a09e:	b09b      	sub	sp, #108	@ 0x6c
 800a0a0:	4604      	mov	r4, r0
 800a0a2:	4628      	mov	r0, r5
 800a0a4:	f007 f88c 	bl	80111c0 <rcl_wait_set_is_valid>
 800a0a8:	b110      	cbz	r0, 800a0b0 <rclc_executor_prepare+0x1c>
 800a0aa:	2000      	movs	r0, #0
 800a0ac:	b01b      	add	sp, #108	@ 0x6c
 800a0ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a0b0:	4628      	mov	r0, r5
 800a0b2:	f007 f88b 	bl	80111cc <rcl_wait_set_fini>
 800a0b6:	2800      	cmp	r0, #0
 800a0b8:	d130      	bne.n	800a11c <rclc_executor_prepare+0x88>
 800a0ba:	a80c      	add	r0, sp, #48	@ 0x30
 800a0bc:	f007 f86c 	bl	8011198 <rcl_get_zero_initialized_wait_set>
 800a0c0:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 800a0c4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800a0c8:	46ae      	mov	lr, r5
 800a0ca:	6927      	ldr	r7, [r4, #16]
 800a0cc:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800a0d0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800a0d4:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800a0d8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800a0dc:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800a0e0:	f8dc 3000 	ldr.w	r3, [ip]
 800a0e4:	f8ce 3000 	str.w	r3, [lr]
 800a0e8:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800a0ea:	ae04      	add	r6, sp, #16
 800a0ec:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800a0ee:	683b      	ldr	r3, [r7, #0]
 800a0f0:	6822      	ldr	r2, [r4, #0]
 800a0f2:	6033      	str	r3, [r6, #0]
 800a0f4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a0f6:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 800a0f8:	e9cd 3202 	strd	r3, r2, [sp, #8]
 800a0fc:	e9d4 3213 	ldrd	r3, r2, [r4, #76]	@ 0x4c
 800a100:	e9cd 2100 	strd	r2, r1, [sp]
 800a104:	4628      	mov	r0, r5
 800a106:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 800a108:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800a10a:	f007 fb5d 	bl	80117c8 <rcl_wait_set_init>
 800a10e:	2800      	cmp	r0, #0
 800a110:	d0cc      	beq.n	800a0ac <rclc_executor_prepare+0x18>
 800a112:	900b      	str	r0, [sp, #44]	@ 0x2c
 800a114:	f000 fb84 	bl	800a820 <rcutils_reset_error>
 800a118:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800a11a:	e7c7      	b.n	800a0ac <rclc_executor_prepare+0x18>
 800a11c:	f000 fb80 	bl	800a820 <rcutils_reset_error>
 800a120:	e7cb      	b.n	800a0ba <rclc_executor_prepare+0x26>
 800a122:	200b      	movs	r0, #11
 800a124:	4770      	bx	lr
 800a126:	bf00      	nop

0800a128 <rclc_executor_spin_some.part.0>:
 800a128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a12c:	f100 0614 	add.w	r6, r0, #20
 800a130:	b083      	sub	sp, #12
 800a132:	4691      	mov	r9, r2
 800a134:	4698      	mov	r8, r3
 800a136:	4605      	mov	r5, r0
 800a138:	f7ff ffac 	bl	800a094 <rclc_executor_prepare>
 800a13c:	4630      	mov	r0, r6
 800a13e:	f007 f911 	bl	8011364 <rcl_wait_set_clear>
 800a142:	4607      	mov	r7, r0
 800a144:	2800      	cmp	r0, #0
 800a146:	f040 80ed 	bne.w	800a324 <rclc_executor_spin_some.part.0+0x1fc>
 800a14a:	68ab      	ldr	r3, [r5, #8]
 800a14c:	4604      	mov	r4, r0
 800a14e:	b303      	cbz	r3, 800a192 <rclc_executor_spin_some.part.0+0x6a>
 800a150:	6869      	ldr	r1, [r5, #4]
 800a152:	eb01 1c84 	add.w	ip, r1, r4, lsl #6
 800a156:	01a2      	lsls	r2, r4, #6
 800a158:	f89c 3038 	ldrb.w	r3, [ip, #56]	@ 0x38
 800a15c:	b1cb      	cbz	r3, 800a192 <rclc_executor_spin_some.part.0+0x6a>
 800a15e:	5c8b      	ldrb	r3, [r1, r2]
 800a160:	2b0a      	cmp	r3, #10
 800a162:	f200 80d8 	bhi.w	800a316 <rclc_executor_spin_some.part.0+0x1ee>
 800a166:	e8df f003 	tbb	[pc, r3]
 800a16a:	9c9c      	.short	0x9c9c
 800a16c:	068c8ca7 	.word	0x068c8ca7
 800a170:	bdc90606 	.word	0xbdc90606
 800a174:	b2          	.byte	0xb2
 800a175:	00          	.byte	0x00
 800a176:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800a17a:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800a17e:	4630      	mov	r0, r6
 800a180:	f007 fc38 	bl	80119f4 <rcl_wait_set_add_service>
 800a184:	2800      	cmp	r0, #0
 800a186:	f040 8086 	bne.w	800a296 <rclc_executor_spin_some.part.0+0x16e>
 800a18a:	68ab      	ldr	r3, [r5, #8]
 800a18c:	3401      	adds	r4, #1
 800a18e:	429c      	cmp	r4, r3
 800a190:	d3de      	bcc.n	800a150 <rclc_executor_spin_some.part.0+0x28>
 800a192:	4643      	mov	r3, r8
 800a194:	464a      	mov	r2, r9
 800a196:	4630      	mov	r0, r6
 800a198:	f007 fc5a 	bl	8011a50 <rcl_wait>
 800a19c:	f895 3080 	ldrb.w	r3, [r5, #128]	@ 0x80
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	f000 80c7 	beq.w	800a334 <rclc_executor_spin_some.part.0+0x20c>
 800a1a6:	2b01      	cmp	r3, #1
 800a1a8:	f040 80b5 	bne.w	800a316 <rclc_executor_spin_some.part.0+0x1ee>
 800a1ac:	68ab      	ldr	r3, [r5, #8]
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	f000 8159 	beq.w	800a466 <rclc_executor_spin_some.part.0+0x33e>
 800a1b4:	2400      	movs	r4, #0
 800a1b6:	46a0      	mov	r8, r4
 800a1b8:	f240 1991 	movw	r9, #401	@ 0x191
 800a1bc:	e00a      	b.n	800a1d4 <rclc_executor_spin_some.part.0+0xac>
 800a1be:	f7ff fb53 	bl	8009868 <_rclc_check_for_new_data>
 800a1c2:	4604      	mov	r4, r0
 800a1c4:	b110      	cbz	r0, 800a1cc <rclc_executor_spin_some.part.0+0xa4>
 800a1c6:	4548      	cmp	r0, r9
 800a1c8:	f040 80b2 	bne.w	800a330 <rclc_executor_spin_some.part.0+0x208>
 800a1cc:	68ab      	ldr	r3, [r5, #8]
 800a1ce:	4598      	cmp	r8, r3
 800a1d0:	f080 8126 	bcs.w	800a420 <rclc_executor_spin_some.part.0+0x2f8>
 800a1d4:	686a      	ldr	r2, [r5, #4]
 800a1d6:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 800a1da:	4631      	mov	r1, r6
 800a1dc:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 800a1e0:	f108 0801 	add.w	r8, r8, #1
 800a1e4:	f1bc 0f00 	cmp.w	ip, #0
 800a1e8:	d1e9      	bne.n	800a1be <rclc_executor_spin_some.part.0+0x96>
 800a1ea:	4619      	mov	r1, r3
 800a1ec:	4610      	mov	r0, r2
 800a1ee:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 800a1f2:	4798      	blx	r3
 800a1f4:	2800      	cmp	r0, #0
 800a1f6:	f000 809b 	beq.w	800a330 <rclc_executor_spin_some.part.0+0x208>
 800a1fa:	68ab      	ldr	r3, [r5, #8]
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	f000 8097 	beq.w	800a330 <rclc_executor_spin_some.part.0+0x208>
 800a202:	f04f 0800 	mov.w	r8, #0
 800a206:	f240 1991 	movw	r9, #401	@ 0x191
 800a20a:	e009      	b.n	800a220 <rclc_executor_spin_some.part.0+0xf8>
 800a20c:	f7ff fb7a 	bl	8009904 <_rclc_take_new_data>
 800a210:	4604      	mov	r4, r0
 800a212:	b110      	cbz	r0, 800a21a <rclc_executor_spin_some.part.0+0xf2>
 800a214:	4548      	cmp	r0, r9
 800a216:	f040 808b 	bne.w	800a330 <rclc_executor_spin_some.part.0+0x208>
 800a21a:	68ab      	ldr	r3, [r5, #8]
 800a21c:	4598      	cmp	r8, r3
 800a21e:	d209      	bcs.n	800a234 <rclc_executor_spin_some.part.0+0x10c>
 800a220:	6868      	ldr	r0, [r5, #4]
 800a222:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 800a226:	4631      	mov	r1, r6
 800a228:	f890 2038 	ldrb.w	r2, [r0, #56]	@ 0x38
 800a22c:	f108 0801 	add.w	r8, r8, #1
 800a230:	2a00      	cmp	r2, #0
 800a232:	d1eb      	bne.n	800a20c <rclc_executor_spin_some.part.0+0xe4>
 800a234:	2600      	movs	r6, #0
 800a236:	b97b      	cbnz	r3, 800a258 <rclc_executor_spin_some.part.0+0x130>
 800a238:	e07a      	b.n	800a330 <rclc_executor_spin_some.part.0+0x208>
 800a23a:	f812 200c 	ldrb.w	r2, [r2, ip]
 800a23e:	2a08      	cmp	r2, #8
 800a240:	f000 80fd 	beq.w	800a43e <rclc_executor_spin_some.part.0+0x316>
 800a244:	2a09      	cmp	r2, #9
 800a246:	f000 80ef 	beq.w	800a428 <rclc_executor_spin_some.part.0+0x300>
 800a24a:	f890 2039 	ldrb.w	r2, [r0, #57]	@ 0x39
 800a24e:	b98a      	cbnz	r2, 800a274 <rclc_executor_spin_some.part.0+0x14c>
 800a250:	3601      	adds	r6, #1
 800a252:	429e      	cmp	r6, r3
 800a254:	d262      	bcs.n	800a31c <rclc_executor_spin_some.part.0+0x1f4>
 800a256:	2400      	movs	r4, #0
 800a258:	686a      	ldr	r2, [r5, #4]
 800a25a:	eb02 1086 	add.w	r0, r2, r6, lsl #6
 800a25e:	ea4f 1c86 	mov.w	ip, r6, lsl #6
 800a262:	f890 1038 	ldrb.w	r1, [r0, #56]	@ 0x38
 800a266:	2900      	cmp	r1, #0
 800a268:	d062      	beq.n	800a330 <rclc_executor_spin_some.part.0+0x208>
 800a26a:	7841      	ldrb	r1, [r0, #1]
 800a26c:	2900      	cmp	r1, #0
 800a26e:	d0e4      	beq.n	800a23a <rclc_executor_spin_some.part.0+0x112>
 800a270:	2901      	cmp	r1, #1
 800a272:	d1ed      	bne.n	800a250 <rclc_executor_spin_some.part.0+0x128>
 800a274:	f7ff fcba 	bl	8009bec <_rclc_execute.part.0>
 800a278:	2800      	cmp	r0, #0
 800a27a:	f040 80b6 	bne.w	800a3ea <rclc_executor_spin_some.part.0+0x2c2>
 800a27e:	68ab      	ldr	r3, [r5, #8]
 800a280:	e7e6      	b.n	800a250 <rclc_executor_spin_some.part.0+0x128>
 800a282:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800a286:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800a28a:	4630      	mov	r0, r6
 800a28c:	f007 fb86 	bl	801199c <rcl_wait_set_add_client>
 800a290:	2800      	cmp	r0, #0
 800a292:	f43f af7a 	beq.w	800a18a <rclc_executor_spin_some.part.0+0x62>
 800a296:	9001      	str	r0, [sp, #4]
 800a298:	f000 fac2 	bl	800a820 <rcutils_reset_error>
 800a29c:	9801      	ldr	r0, [sp, #4]
 800a29e:	4607      	mov	r7, r0
 800a2a0:	e03c      	b.n	800a31c <rclc_executor_spin_some.part.0+0x1f4>
 800a2a2:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800a2a6:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800a2aa:	4630      	mov	r0, r6
 800a2ac:	f007 f82e 	bl	801130c <rcl_wait_set_add_subscription>
 800a2b0:	2800      	cmp	r0, #0
 800a2b2:	f43f af6a 	beq.w	800a18a <rclc_executor_spin_some.part.0+0x62>
 800a2b6:	e7ee      	b.n	800a296 <rclc_executor_spin_some.part.0+0x16e>
 800a2b8:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800a2bc:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800a2c0:	4630      	mov	r0, r6
 800a2c2:	f007 fb3b 	bl	801193c <rcl_wait_set_add_timer>
 800a2c6:	2800      	cmp	r0, #0
 800a2c8:	f43f af5f 	beq.w	800a18a <rclc_executor_spin_some.part.0+0x62>
 800a2cc:	e7e3      	b.n	800a296 <rclc_executor_spin_some.part.0+0x16e>
 800a2ce:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800a2d2:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800a2d6:	4630      	mov	r0, r6
 800a2d8:	f007 fb04 	bl	80118e4 <rcl_wait_set_add_guard_condition>
 800a2dc:	2800      	cmp	r0, #0
 800a2de:	f43f af54 	beq.w	800a18a <rclc_executor_spin_some.part.0+0x62>
 800a2e2:	e7d8      	b.n	800a296 <rclc_executor_spin_some.part.0+0x16e>
 800a2e4:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800a2e8:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800a2ec:	3110      	adds	r1, #16
 800a2ee:	4630      	mov	r0, r6
 800a2f0:	f008 f886 	bl	8012400 <rcl_action_wait_set_add_action_server>
 800a2f4:	2800      	cmp	r0, #0
 800a2f6:	f43f af48 	beq.w	800a18a <rclc_executor_spin_some.part.0+0x62>
 800a2fa:	e7cc      	b.n	800a296 <rclc_executor_spin_some.part.0+0x16e>
 800a2fc:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800a300:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800a304:	3110      	adds	r1, #16
 800a306:	2300      	movs	r3, #0
 800a308:	4630      	mov	r0, r6
 800a30a:	f007 fe51 	bl	8011fb0 <rcl_action_wait_set_add_action_client>
 800a30e:	2800      	cmp	r0, #0
 800a310:	f43f af3b 	beq.w	800a18a <rclc_executor_spin_some.part.0+0x62>
 800a314:	e7bf      	b.n	800a296 <rclc_executor_spin_some.part.0+0x16e>
 800a316:	f000 fa83 	bl	800a820 <rcutils_reset_error>
 800a31a:	2701      	movs	r7, #1
 800a31c:	4638      	mov	r0, r7
 800a31e:	b003      	add	sp, #12
 800a320:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a324:	f000 fa7c 	bl	800a820 <rcutils_reset_error>
 800a328:	4638      	mov	r0, r7
 800a32a:	b003      	add	sp, #12
 800a32c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a330:	4627      	mov	r7, r4
 800a332:	e7f3      	b.n	800a31c <rclc_executor_spin_some.part.0+0x1f4>
 800a334:	68ab      	ldr	r3, [r5, #8]
 800a336:	2b00      	cmp	r3, #0
 800a338:	f000 8092 	beq.w	800a460 <rclc_executor_spin_some.part.0+0x338>
 800a33c:	2400      	movs	r4, #0
 800a33e:	46a0      	mov	r8, r4
 800a340:	f240 1991 	movw	r9, #401	@ 0x191
 800a344:	e008      	b.n	800a358 <rclc_executor_spin_some.part.0+0x230>
 800a346:	f7ff fa8f 	bl	8009868 <_rclc_check_for_new_data>
 800a34a:	4604      	mov	r4, r0
 800a34c:	b108      	cbz	r0, 800a352 <rclc_executor_spin_some.part.0+0x22a>
 800a34e:	4548      	cmp	r0, r9
 800a350:	d1ee      	bne.n	800a330 <rclc_executor_spin_some.part.0+0x208>
 800a352:	68ab      	ldr	r3, [r5, #8]
 800a354:	4598      	cmp	r8, r3
 800a356:	d265      	bcs.n	800a424 <rclc_executor_spin_some.part.0+0x2fc>
 800a358:	686a      	ldr	r2, [r5, #4]
 800a35a:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 800a35e:	4631      	mov	r1, r6
 800a360:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 800a364:	f108 0801 	add.w	r8, r8, #1
 800a368:	f1bc 0f00 	cmp.w	ip, #0
 800a36c:	d1eb      	bne.n	800a346 <rclc_executor_spin_some.part.0+0x21e>
 800a36e:	4619      	mov	r1, r3
 800a370:	4610      	mov	r0, r2
 800a372:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 800a376:	4798      	blx	r3
 800a378:	2800      	cmp	r0, #0
 800a37a:	d0d9      	beq.n	800a330 <rclc_executor_spin_some.part.0+0x208>
 800a37c:	68ab      	ldr	r3, [r5, #8]
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d0d6      	beq.n	800a330 <rclc_executor_spin_some.part.0+0x208>
 800a382:	f04f 0800 	mov.w	r8, #0
 800a386:	f240 1991 	movw	r9, #401	@ 0x191
 800a38a:	f240 2a59 	movw	sl, #601	@ 0x259
 800a38e:	e00e      	b.n	800a3ae <rclc_executor_spin_some.part.0+0x286>
 800a390:	f813 300b 	ldrb.w	r3, [r3, fp]
 800a394:	2b08      	cmp	r3, #8
 800a396:	d033      	beq.n	800a400 <rclc_executor_spin_some.part.0+0x2d8>
 800a398:	2b09      	cmp	r3, #9
 800a39a:	d028      	beq.n	800a3ee <rclc_executor_spin_some.part.0+0x2c6>
 800a39c:	f890 3039 	ldrb.w	r3, [r0, #57]	@ 0x39
 800a3a0:	b9fb      	cbnz	r3, 800a3e2 <rclc_executor_spin_some.part.0+0x2ba>
 800a3a2:	68ab      	ldr	r3, [r5, #8]
 800a3a4:	f108 0801 	add.w	r8, r8, #1
 800a3a8:	4598      	cmp	r8, r3
 800a3aa:	d2b7      	bcs.n	800a31c <rclc_executor_spin_some.part.0+0x1f4>
 800a3ac:	2400      	movs	r4, #0
 800a3ae:	6868      	ldr	r0, [r5, #4]
 800a3b0:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 800a3b4:	ea4f 1b88 	mov.w	fp, r8, lsl #6
 800a3b8:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d0b7      	beq.n	800a330 <rclc_executor_spin_some.part.0+0x208>
 800a3c0:	4631      	mov	r1, r6
 800a3c2:	f7ff fa9f 	bl	8009904 <_rclc_take_new_data>
 800a3c6:	b118      	cbz	r0, 800a3d0 <rclc_executor_spin_some.part.0+0x2a8>
 800a3c8:	4548      	cmp	r0, r9
 800a3ca:	d001      	beq.n	800a3d0 <rclc_executor_spin_some.part.0+0x2a8>
 800a3cc:	4550      	cmp	r0, sl
 800a3ce:	d10c      	bne.n	800a3ea <rclc_executor_spin_some.part.0+0x2c2>
 800a3d0:	686b      	ldr	r3, [r5, #4]
 800a3d2:	eb13 000b 	adds.w	r0, r3, fp
 800a3d6:	d021      	beq.n	800a41c <rclc_executor_spin_some.part.0+0x2f4>
 800a3d8:	7842      	ldrb	r2, [r0, #1]
 800a3da:	2a00      	cmp	r2, #0
 800a3dc:	d0d8      	beq.n	800a390 <rclc_executor_spin_some.part.0+0x268>
 800a3de:	2a01      	cmp	r2, #1
 800a3e0:	d1df      	bne.n	800a3a2 <rclc_executor_spin_some.part.0+0x27a>
 800a3e2:	f7ff fc03 	bl	8009bec <_rclc_execute.part.0>
 800a3e6:	2800      	cmp	r0, #0
 800a3e8:	d0db      	beq.n	800a3a2 <rclc_executor_spin_some.part.0+0x27a>
 800a3ea:	4607      	mov	r7, r0
 800a3ec:	e796      	b.n	800a31c <rclc_executor_spin_some.part.0+0x1f4>
 800a3ee:	6843      	ldr	r3, [r0, #4]
 800a3f0:	6a1a      	ldr	r2, [r3, #32]
 800a3f2:	2a00      	cmp	r2, #0
 800a3f4:	d1f5      	bne.n	800a3e2 <rclc_executor_spin_some.part.0+0x2ba>
 800a3f6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d0d1      	beq.n	800a3a2 <rclc_executor_spin_some.part.0+0x27a>
 800a3fe:	e7f0      	b.n	800a3e2 <rclc_executor_spin_some.part.0+0x2ba>
 800a400:	6843      	ldr	r3, [r0, #4]
 800a402:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a404:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800a408:	d1eb      	bne.n	800a3e2 <rclc_executor_spin_some.part.0+0x2ba>
 800a40a:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800a40e:	2a00      	cmp	r2, #0
 800a410:	d1e7      	bne.n	800a3e2 <rclc_executor_spin_some.part.0+0x2ba>
 800a412:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800a416:	2b00      	cmp	r3, #0
 800a418:	d0c3      	beq.n	800a3a2 <rclc_executor_spin_some.part.0+0x27a>
 800a41a:	e7e2      	b.n	800a3e2 <rclc_executor_spin_some.part.0+0x2ba>
 800a41c:	270b      	movs	r7, #11
 800a41e:	e77d      	b.n	800a31c <rclc_executor_spin_some.part.0+0x1f4>
 800a420:	686a      	ldr	r2, [r5, #4]
 800a422:	e6e2      	b.n	800a1ea <rclc_executor_spin_some.part.0+0xc2>
 800a424:	686a      	ldr	r2, [r5, #4]
 800a426:	e7a2      	b.n	800a36e <rclc_executor_spin_some.part.0+0x246>
 800a428:	6842      	ldr	r2, [r0, #4]
 800a42a:	6a11      	ldr	r1, [r2, #32]
 800a42c:	2900      	cmp	r1, #0
 800a42e:	f47f af21 	bne.w	800a274 <rclc_executor_spin_some.part.0+0x14c>
 800a432:	f892 2024 	ldrb.w	r2, [r2, #36]	@ 0x24
 800a436:	2a00      	cmp	r2, #0
 800a438:	f43f af0a 	beq.w	800a250 <rclc_executor_spin_some.part.0+0x128>
 800a43c:	e71a      	b.n	800a274 <rclc_executor_spin_some.part.0+0x14c>
 800a43e:	6842      	ldr	r2, [r0, #4]
 800a440:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 800a442:	f031 417f 	bics.w	r1, r1, #4278190080	@ 0xff000000
 800a446:	f47f af15 	bne.w	800a274 <rclc_executor_spin_some.part.0+0x14c>
 800a44a:	f892 1044 	ldrb.w	r1, [r2, #68]	@ 0x44
 800a44e:	2900      	cmp	r1, #0
 800a450:	f47f af10 	bne.w	800a274 <rclc_executor_spin_some.part.0+0x14c>
 800a454:	f892 2043 	ldrb.w	r2, [r2, #67]	@ 0x43
 800a458:	2a00      	cmp	r2, #0
 800a45a:	f43f aef9 	beq.w	800a250 <rclc_executor_spin_some.part.0+0x128>
 800a45e:	e709      	b.n	800a274 <rclc_executor_spin_some.part.0+0x14c>
 800a460:	686a      	ldr	r2, [r5, #4]
 800a462:	461c      	mov	r4, r3
 800a464:	e783      	b.n	800a36e <rclc_executor_spin_some.part.0+0x246>
 800a466:	686a      	ldr	r2, [r5, #4]
 800a468:	461c      	mov	r4, r3
 800a46a:	e6be      	b.n	800a1ea <rclc_executor_spin_some.part.0+0xc2>

0800a46c <rclc_executor_spin_some>:
 800a46c:	b190      	cbz	r0, 800a494 <rclc_executor_spin_some+0x28>
 800a46e:	b570      	push	{r4, r5, r6, lr}
 800a470:	4604      	mov	r4, r0
 800a472:	6800      	ldr	r0, [r0, #0]
 800a474:	4616      	mov	r6, r2
 800a476:	461d      	mov	r5, r3
 800a478:	f005 faf6 	bl	800fa68 <rcl_context_is_valid>
 800a47c:	b130      	cbz	r0, 800a48c <rclc_executor_spin_some+0x20>
 800a47e:	4632      	mov	r2, r6
 800a480:	462b      	mov	r3, r5
 800a482:	4620      	mov	r0, r4
 800a484:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a488:	f7ff be4e 	b.w	800a128 <rclc_executor_spin_some.part.0>
 800a48c:	f000 f9c8 	bl	800a820 <rcutils_reset_error>
 800a490:	2001      	movs	r0, #1
 800a492:	bd70      	pop	{r4, r5, r6, pc}
 800a494:	200b      	movs	r0, #11
 800a496:	4770      	bx	lr

0800a498 <rclc_executor_spin>:
 800a498:	b1d0      	cbz	r0, 800a4d0 <rclc_executor_spin+0x38>
 800a49a:	b510      	push	{r4, lr}
 800a49c:	4604      	mov	r4, r0
 800a49e:	b082      	sub	sp, #8
 800a4a0:	e9d4 231a 	ldrd	r2, r3, [r4, #104]	@ 0x68
 800a4a4:	6820      	ldr	r0, [r4, #0]
 800a4a6:	e9cd 2300 	strd	r2, r3, [sp]
 800a4aa:	f005 fadd 	bl	800fa68 <rcl_context_is_valid>
 800a4ae:	4601      	mov	r1, r0
 800a4b0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a4b4:	4620      	mov	r0, r4
 800a4b6:	b131      	cbz	r1, 800a4c6 <rclc_executor_spin+0x2e>
 800a4b8:	f7ff fe36 	bl	800a128 <rclc_executor_spin_some.part.0>
 800a4bc:	f030 0302 	bics.w	r3, r0, #2
 800a4c0:	d0ee      	beq.n	800a4a0 <rclc_executor_spin+0x8>
 800a4c2:	b002      	add	sp, #8
 800a4c4:	bd10      	pop	{r4, pc}
 800a4c6:	f000 f9ab 	bl	800a820 <rcutils_reset_error>
 800a4ca:	2001      	movs	r0, #1
 800a4cc:	b002      	add	sp, #8
 800a4ce:	bd10      	pop	{r4, pc}
 800a4d0:	200b      	movs	r0, #11
 800a4d2:	4770      	bx	lr

0800a4d4 <rclc_executor_handle_counters_zero_init>:
 800a4d4:	b130      	cbz	r0, 800a4e4 <rclc_executor_handle_counters_zero_init+0x10>
 800a4d6:	b508      	push	{r3, lr}
 800a4d8:	2220      	movs	r2, #32
 800a4da:	2100      	movs	r1, #0
 800a4dc:	f00d fa0e 	bl	80178fc <memset>
 800a4e0:	2000      	movs	r0, #0
 800a4e2:	bd08      	pop	{r3, pc}
 800a4e4:	200b      	movs	r0, #11
 800a4e6:	4770      	bx	lr

0800a4e8 <rclc_executor_handle_init>:
 800a4e8:	b168      	cbz	r0, 800a506 <rclc_executor_handle_init+0x1e>
 800a4ea:	ed9f 7b09 	vldr	d7, [pc, #36]	@ 800a510 <rclc_executor_handle_init+0x28>
 800a4ee:	2300      	movs	r3, #0
 800a4f0:	220b      	movs	r2, #11
 800a4f2:	ed80 7b0a 	vstr	d7, [r0, #40]	@ 0x28
 800a4f6:	e9c0 3301 	strd	r3, r3, [r0, #4]
 800a4fa:	e9c0 310c 	strd	r3, r1, [r0, #48]	@ 0x30
 800a4fe:	8002      	strh	r2, [r0, #0]
 800a500:	8703      	strh	r3, [r0, #56]	@ 0x38
 800a502:	4618      	mov	r0, r3
 800a504:	4770      	bx	lr
 800a506:	200b      	movs	r0, #11
 800a508:	4770      	bx	lr
 800a50a:	bf00      	nop
 800a50c:	f3af 8000 	nop.w
	...

0800a518 <rclc_support_init>:
 800a518:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a51c:	b086      	sub	sp, #24
 800a51e:	b3b8      	cbz	r0, 800a590 <rclc_support_init+0x78>
 800a520:	461c      	mov	r4, r3
 800a522:	b3ab      	cbz	r3, 800a590 <rclc_support_init+0x78>
 800a524:	460f      	mov	r7, r1
 800a526:	4690      	mov	r8, r2
 800a528:	4606      	mov	r6, r0
 800a52a:	f005 fc07 	bl	800fd3c <rcl_get_zero_initialized_init_options>
 800a52e:	f104 030c 	add.w	r3, r4, #12
 800a532:	9005      	str	r0, [sp, #20]
 800a534:	e893 0003 	ldmia.w	r3, {r0, r1}
 800a538:	e88d 0003 	stmia.w	sp, {r0, r1}
 800a53c:	a805      	add	r0, sp, #20
 800a53e:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800a542:	f005 fbfd 	bl	800fd40 <rcl_init_options_init>
 800a546:	4605      	mov	r5, r0
 800a548:	b9e0      	cbnz	r0, 800a584 <rclc_support_init+0x6c>
 800a54a:	ad02      	add	r5, sp, #8
 800a54c:	4628      	mov	r0, r5
 800a54e:	f005 fa81 	bl	800fa54 <rcl_get_zero_initialized_context>
 800a552:	e895 0003 	ldmia.w	r5, {r0, r1}
 800a556:	4633      	mov	r3, r6
 800a558:	e886 0003 	stmia.w	r6, {r0, r1}
 800a55c:	aa05      	add	r2, sp, #20
 800a55e:	4641      	mov	r1, r8
 800a560:	4638      	mov	r0, r7
 800a562:	f005 fae7 	bl	800fb34 <rcl_init>
 800a566:	4605      	mov	r5, r0
 800a568:	b9b8      	cbnz	r0, 800a59a <rclc_support_init+0x82>
 800a56a:	60b4      	str	r4, [r6, #8]
 800a56c:	4622      	mov	r2, r4
 800a56e:	f106 010c 	add.w	r1, r6, #12
 800a572:	2003      	movs	r0, #3
 800a574:	f006 fa0e 	bl	8010994 <rcl_clock_init>
 800a578:	4605      	mov	r5, r0
 800a57a:	b970      	cbnz	r0, 800a59a <rclc_support_init+0x82>
 800a57c:	a805      	add	r0, sp, #20
 800a57e:	f005 fc45 	bl	800fe0c <rcl_init_options_fini>
 800a582:	b108      	cbz	r0, 800a588 <rclc_support_init+0x70>
 800a584:	f000 f94c 	bl	800a820 <rcutils_reset_error>
 800a588:	4628      	mov	r0, r5
 800a58a:	b006      	add	sp, #24
 800a58c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a590:	250b      	movs	r5, #11
 800a592:	4628      	mov	r0, r5
 800a594:	b006      	add	sp, #24
 800a596:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a59a:	f000 f941 	bl	800a820 <rcutils_reset_error>
 800a59e:	a805      	add	r0, sp, #20
 800a5a0:	f005 fc34 	bl	800fe0c <rcl_init_options_fini>
 800a5a4:	2800      	cmp	r0, #0
 800a5a6:	d0ef      	beq.n	800a588 <rclc_support_init+0x70>
 800a5a8:	e7ec      	b.n	800a584 <rclc_support_init+0x6c>
 800a5aa:	bf00      	nop

0800a5ac <rclc_node_init_default>:
 800a5ac:	b3b8      	cbz	r0, 800a61e <rclc_node_init_default+0x72>
 800a5ae:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a5b2:	460d      	mov	r5, r1
 800a5b4:	b0a1      	sub	sp, #132	@ 0x84
 800a5b6:	b329      	cbz	r1, 800a604 <rclc_node_init_default+0x58>
 800a5b8:	4616      	mov	r6, r2
 800a5ba:	b31a      	cbz	r2, 800a604 <rclc_node_init_default+0x58>
 800a5bc:	461f      	mov	r7, r3
 800a5be:	b30b      	cbz	r3, 800a604 <rclc_node_init_default+0x58>
 800a5c0:	f10d 0810 	add.w	r8, sp, #16
 800a5c4:	4604      	mov	r4, r0
 800a5c6:	4640      	mov	r0, r8
 800a5c8:	f005 fcd8 	bl	800ff7c <rcl_get_zero_initialized_node>
 800a5cc:	e898 0003 	ldmia.w	r8, {r0, r1}
 800a5d0:	f10d 0918 	add.w	r9, sp, #24
 800a5d4:	e884 0003 	stmia.w	r4, {r0, r1}
 800a5d8:	4648      	mov	r0, r9
 800a5da:	f005 fe47 	bl	801026c <rcl_node_get_default_options>
 800a5de:	4640      	mov	r0, r8
 800a5e0:	f005 fccc 	bl	800ff7c <rcl_get_zero_initialized_node>
 800a5e4:	f8cd 9000 	str.w	r9, [sp]
 800a5e8:	e898 0003 	ldmia.w	r8, {r0, r1}
 800a5ec:	463b      	mov	r3, r7
 800a5ee:	e884 0003 	stmia.w	r4, {r0, r1}
 800a5f2:	4632      	mov	r2, r6
 800a5f4:	4629      	mov	r1, r5
 800a5f6:	4620      	mov	r0, r4
 800a5f8:	f005 fcca 	bl	800ff90 <rcl_node_init>
 800a5fc:	b930      	cbnz	r0, 800a60c <rclc_node_init_default+0x60>
 800a5fe:	b021      	add	sp, #132	@ 0x84
 800a600:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a604:	200b      	movs	r0, #11
 800a606:	b021      	add	sp, #132	@ 0x84
 800a608:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a60c:	9003      	str	r0, [sp, #12]
 800a60e:	f000 f907 	bl	800a820 <rcutils_reset_error>
 800a612:	f000 f905 	bl	800a820 <rcutils_reset_error>
 800a616:	9803      	ldr	r0, [sp, #12]
 800a618:	b021      	add	sp, #132	@ 0x84
 800a61a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a61e:	200b      	movs	r0, #11
 800a620:	4770      	bx	lr
 800a622:	bf00      	nop

0800a624 <rclc_publisher_init_default>:
 800a624:	b368      	cbz	r0, 800a682 <rclc_publisher_init_default+0x5e>
 800a626:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a62a:	460d      	mov	r5, r1
 800a62c:	b0a0      	sub	sp, #128	@ 0x80
 800a62e:	b321      	cbz	r1, 800a67a <rclc_publisher_init_default+0x56>
 800a630:	4616      	mov	r6, r2
 800a632:	b312      	cbz	r2, 800a67a <rclc_publisher_init_default+0x56>
 800a634:	461f      	mov	r7, r3
 800a636:	b303      	cbz	r3, 800a67a <rclc_publisher_init_default+0x56>
 800a638:	4604      	mov	r4, r0
 800a63a:	f7ff f805 	bl	8009648 <rcl_get_zero_initialized_publisher>
 800a63e:	f10d 0810 	add.w	r8, sp, #16
 800a642:	6020      	str	r0, [r4, #0]
 800a644:	4640      	mov	r0, r8
 800a646:	f7ff f89b 	bl	8009780 <rcl_publisher_get_default_options>
 800a64a:	490f      	ldr	r1, [pc, #60]	@ (800a688 <rclc_publisher_init_default+0x64>)
 800a64c:	2250      	movs	r2, #80	@ 0x50
 800a64e:	4640      	mov	r0, r8
 800a650:	f00d fa73 	bl	8017b3a <memcpy>
 800a654:	f8cd 8000 	str.w	r8, [sp]
 800a658:	463b      	mov	r3, r7
 800a65a:	4632      	mov	r2, r6
 800a65c:	4629      	mov	r1, r5
 800a65e:	4620      	mov	r0, r4
 800a660:	f7fe fff8 	bl	8009654 <rcl_publisher_init>
 800a664:	b910      	cbnz	r0, 800a66c <rclc_publisher_init_default+0x48>
 800a666:	b020      	add	sp, #128	@ 0x80
 800a668:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a66c:	9003      	str	r0, [sp, #12]
 800a66e:	f000 f8d7 	bl	800a820 <rcutils_reset_error>
 800a672:	9803      	ldr	r0, [sp, #12]
 800a674:	b020      	add	sp, #128	@ 0x80
 800a676:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a67a:	200b      	movs	r0, #11
 800a67c:	b020      	add	sp, #128	@ 0x80
 800a67e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a682:	200b      	movs	r0, #11
 800a684:	4770      	bx	lr
 800a686:	bf00      	nop
 800a688:	080189d0 	.word	0x080189d0

0800a68c <rclc_subscription_init_default>:
 800a68c:	b368      	cbz	r0, 800a6ea <rclc_subscription_init_default+0x5e>
 800a68e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a692:	460d      	mov	r5, r1
 800a694:	b0a0      	sub	sp, #128	@ 0x80
 800a696:	b321      	cbz	r1, 800a6e2 <rclc_subscription_init_default+0x56>
 800a698:	4616      	mov	r6, r2
 800a69a:	b312      	cbz	r2, 800a6e2 <rclc_subscription_init_default+0x56>
 800a69c:	461f      	mov	r7, r3
 800a69e:	b303      	cbz	r3, 800a6e2 <rclc_subscription_init_default+0x56>
 800a6a0:	4604      	mov	r4, r0
 800a6a2:	f006 f81b 	bl	80106dc <rcl_get_zero_initialized_subscription>
 800a6a6:	f10d 0810 	add.w	r8, sp, #16
 800a6aa:	6020      	str	r0, [r4, #0]
 800a6ac:	4640      	mov	r0, r8
 800a6ae:	f006 f8c3 	bl	8010838 <rcl_subscription_get_default_options>
 800a6b2:	490f      	ldr	r1, [pc, #60]	@ (800a6f0 <rclc_subscription_init_default+0x64>)
 800a6b4:	2250      	movs	r2, #80	@ 0x50
 800a6b6:	4640      	mov	r0, r8
 800a6b8:	f00d fa3f 	bl	8017b3a <memcpy>
 800a6bc:	f8cd 8000 	str.w	r8, [sp]
 800a6c0:	463b      	mov	r3, r7
 800a6c2:	4632      	mov	r2, r6
 800a6c4:	4629      	mov	r1, r5
 800a6c6:	4620      	mov	r0, r4
 800a6c8:	f006 f80e 	bl	80106e8 <rcl_subscription_init>
 800a6cc:	b910      	cbnz	r0, 800a6d4 <rclc_subscription_init_default+0x48>
 800a6ce:	b020      	add	sp, #128	@ 0x80
 800a6d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a6d4:	9003      	str	r0, [sp, #12]
 800a6d6:	f000 f8a3 	bl	800a820 <rcutils_reset_error>
 800a6da:	9803      	ldr	r0, [sp, #12]
 800a6dc:	b020      	add	sp, #128	@ 0x80
 800a6de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a6e2:	200b      	movs	r0, #11
 800a6e4:	b020      	add	sp, #128	@ 0x80
 800a6e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a6ea:	200b      	movs	r0, #11
 800a6ec:	4770      	bx	lr
 800a6ee:	bf00      	nop
 800a6f0:	08018a20 	.word	0x08018a20

0800a6f4 <rclc_timer_init_default>:
 800a6f4:	b360      	cbz	r0, 800a750 <rclc_timer_init_default+0x5c>
 800a6f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a6fa:	460e      	mov	r6, r1
 800a6fc:	b08a      	sub	sp, #40	@ 0x28
 800a6fe:	b319      	cbz	r1, 800a748 <rclc_timer_init_default+0x54>
 800a700:	4690      	mov	r8, r2
 800a702:	461f      	mov	r7, r3
 800a704:	4605      	mov	r5, r0
 800a706:	f006 fb23 	bl	8010d50 <rcl_get_zero_initialized_timer>
 800a70a:	68b4      	ldr	r4, [r6, #8]
 800a70c:	6028      	str	r0, [r5, #0]
 800a70e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a710:	f10d 0c0c 	add.w	ip, sp, #12
 800a714:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800a718:	6823      	ldr	r3, [r4, #0]
 800a71a:	f8cc 3000 	str.w	r3, [ip]
 800a71e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a720:	9302      	str	r3, [sp, #8]
 800a722:	e9cd 8700 	strd	r8, r7, [sp]
 800a726:	4628      	mov	r0, r5
 800a728:	4632      	mov	r2, r6
 800a72a:	f106 010c 	add.w	r1, r6, #12
 800a72e:	f006 fb17 	bl	8010d60 <rcl_timer_init>
 800a732:	b910      	cbnz	r0, 800a73a <rclc_timer_init_default+0x46>
 800a734:	b00a      	add	sp, #40	@ 0x28
 800a736:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a73a:	9009      	str	r0, [sp, #36]	@ 0x24
 800a73c:	f000 f870 	bl	800a820 <rcutils_reset_error>
 800a740:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a742:	b00a      	add	sp, #40	@ 0x28
 800a744:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a748:	200b      	movs	r0, #11
 800a74a:	b00a      	add	sp, #40	@ 0x28
 800a74c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a750:	200b      	movs	r0, #11
 800a752:	4770      	bx	lr

0800a754 <__default_zero_allocate>:
 800a754:	f00c bbe8 	b.w	8016f28 <calloc>

0800a758 <__default_reallocate>:
 800a758:	f00c bd86 	b.w	8017268 <realloc>

0800a75c <__default_deallocate>:
 800a75c:	f00c bc62 	b.w	8017024 <free>

0800a760 <__default_allocate>:
 800a760:	f00c bc58 	b.w	8017014 <malloc>

0800a764 <rcutils_get_zero_initialized_allocator>:
 800a764:	b510      	push	{r4, lr}
 800a766:	4c05      	ldr	r4, [pc, #20]	@ (800a77c <rcutils_get_zero_initialized_allocator+0x18>)
 800a768:	4686      	mov	lr, r0
 800a76a:	4684      	mov	ip, r0
 800a76c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a76e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800a772:	6823      	ldr	r3, [r4, #0]
 800a774:	f8cc 3000 	str.w	r3, [ip]
 800a778:	4670      	mov	r0, lr
 800a77a:	bd10      	pop	{r4, pc}
 800a77c:	08018a70 	.word	0x08018a70

0800a780 <rcutils_set_default_allocator>:
 800a780:	b1a8      	cbz	r0, 800a7ae <rcutils_set_default_allocator+0x2e>
 800a782:	6802      	ldr	r2, [r0, #0]
 800a784:	b1a2      	cbz	r2, 800a7b0 <rcutils_set_default_allocator+0x30>
 800a786:	6841      	ldr	r1, [r0, #4]
 800a788:	b1a1      	cbz	r1, 800a7b4 <rcutils_set_default_allocator+0x34>
 800a78a:	b410      	push	{r4}
 800a78c:	68c4      	ldr	r4, [r0, #12]
 800a78e:	b164      	cbz	r4, 800a7aa <rcutils_set_default_allocator+0x2a>
 800a790:	6880      	ldr	r0, [r0, #8]
 800a792:	b138      	cbz	r0, 800a7a4 <rcutils_set_default_allocator+0x24>
 800a794:	4b08      	ldr	r3, [pc, #32]	@ (800a7b8 <rcutils_set_default_allocator+0x38>)
 800a796:	601a      	str	r2, [r3, #0]
 800a798:	2200      	movs	r2, #0
 800a79a:	e9c3 4203 	strd	r4, r2, [r3, #12]
 800a79e:	e9c3 1001 	strd	r1, r0, [r3, #4]
 800a7a2:	2001      	movs	r0, #1
 800a7a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a7a8:	4770      	bx	lr
 800a7aa:	4620      	mov	r0, r4
 800a7ac:	e7fa      	b.n	800a7a4 <rcutils_set_default_allocator+0x24>
 800a7ae:	4770      	bx	lr
 800a7b0:	4610      	mov	r0, r2
 800a7b2:	4770      	bx	lr
 800a7b4:	4608      	mov	r0, r1
 800a7b6:	4770      	bx	lr
 800a7b8:	20000014 	.word	0x20000014

0800a7bc <rcutils_get_default_allocator>:
 800a7bc:	b510      	push	{r4, lr}
 800a7be:	4c05      	ldr	r4, [pc, #20]	@ (800a7d4 <rcutils_get_default_allocator+0x18>)
 800a7c0:	4686      	mov	lr, r0
 800a7c2:	4684      	mov	ip, r0
 800a7c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a7c6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800a7ca:	6823      	ldr	r3, [r4, #0]
 800a7cc:	f8cc 3000 	str.w	r3, [ip]
 800a7d0:	4670      	mov	r0, lr
 800a7d2:	bd10      	pop	{r4, pc}
 800a7d4:	20000014 	.word	0x20000014

0800a7d8 <rcutils_allocator_is_valid>:
 800a7d8:	b158      	cbz	r0, 800a7f2 <rcutils_allocator_is_valid+0x1a>
 800a7da:	6803      	ldr	r3, [r0, #0]
 800a7dc:	b143      	cbz	r3, 800a7f0 <rcutils_allocator_is_valid+0x18>
 800a7de:	6843      	ldr	r3, [r0, #4]
 800a7e0:	b133      	cbz	r3, 800a7f0 <rcutils_allocator_is_valid+0x18>
 800a7e2:	68c3      	ldr	r3, [r0, #12]
 800a7e4:	b123      	cbz	r3, 800a7f0 <rcutils_allocator_is_valid+0x18>
 800a7e6:	6880      	ldr	r0, [r0, #8]
 800a7e8:	3800      	subs	r0, #0
 800a7ea:	bf18      	it	ne
 800a7ec:	2001      	movne	r0, #1
 800a7ee:	4770      	bx	lr
 800a7f0:	4618      	mov	r0, r3
 800a7f2:	4770      	bx	lr

0800a7f4 <rcutils_get_error_string>:
 800a7f4:	4b06      	ldr	r3, [pc, #24]	@ (800a810 <rcutils_get_error_string+0x1c>)
 800a7f6:	781b      	ldrb	r3, [r3, #0]
 800a7f8:	b13b      	cbz	r3, 800a80a <rcutils_get_error_string+0x16>
 800a7fa:	4b06      	ldr	r3, [pc, #24]	@ (800a814 <rcutils_get_error_string+0x20>)
 800a7fc:	781a      	ldrb	r2, [r3, #0]
 800a7fe:	b90a      	cbnz	r2, 800a804 <rcutils_get_error_string+0x10>
 800a800:	2201      	movs	r2, #1
 800a802:	701a      	strb	r2, [r3, #0]
 800a804:	4b04      	ldr	r3, [pc, #16]	@ (800a818 <rcutils_get_error_string+0x24>)
 800a806:	7818      	ldrb	r0, [r3, #0]
 800a808:	4770      	bx	lr
 800a80a:	4b04      	ldr	r3, [pc, #16]	@ (800a81c <rcutils_get_error_string+0x28>)
 800a80c:	7818      	ldrb	r0, [r3, #0]
 800a80e:	4770      	bx	lr
 800a810:	200075d8 	.word	0x200075d8
 800a814:	200075f1 	.word	0x200075f1
 800a818:	200075f0 	.word	0x200075f0
 800a81c:	08018a84 	.word	0x08018a84

0800a820 <rcutils_reset_error>:
 800a820:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 800a840 <rcutils_reset_error+0x20>
 800a824:	4a08      	ldr	r2, [pc, #32]	@ (800a848 <rcutils_reset_error+0x28>)
 800a826:	4809      	ldr	r0, [pc, #36]	@ (800a84c <rcutils_reset_error+0x2c>)
 800a828:	4909      	ldr	r1, [pc, #36]	@ (800a850 <rcutils_reset_error+0x30>)
 800a82a:	2300      	movs	r3, #0
 800a82c:	8013      	strh	r3, [r2, #0]
 800a82e:	ed82 7b02 	vstr	d7, [r2, #8]
 800a832:	4a08      	ldr	r2, [pc, #32]	@ (800a854 <rcutils_reset_error+0x34>)
 800a834:	7003      	strb	r3, [r0, #0]
 800a836:	700b      	strb	r3, [r1, #0]
 800a838:	7013      	strb	r3, [r2, #0]
 800a83a:	4770      	bx	lr
 800a83c:	f3af 8000 	nop.w
	...
 800a848:	200075e0 	.word	0x200075e0
 800a84c:	200075f1 	.word	0x200075f1
 800a850:	200075f0 	.word	0x200075f0
 800a854:	200075d8 	.word	0x200075d8

0800a858 <rcutils_system_time_now>:
 800a858:	b308      	cbz	r0, 800a89e <rcutils_system_time_now+0x46>
 800a85a:	b570      	push	{r4, r5, r6, lr}
 800a85c:	b084      	sub	sp, #16
 800a85e:	4604      	mov	r4, r0
 800a860:	4669      	mov	r1, sp
 800a862:	2001      	movs	r0, #1
 800a864:	f7f6 ff34 	bl	80016d0 <clock_gettime>
 800a868:	e9dd 3500 	ldrd	r3, r5, [sp]
 800a86c:	2d00      	cmp	r5, #0
 800a86e:	db13      	blt.n	800a898 <rcutils_system_time_now+0x40>
 800a870:	9902      	ldr	r1, [sp, #8]
 800a872:	2900      	cmp	r1, #0
 800a874:	db0d      	blt.n	800a892 <rcutils_system_time_now+0x3a>
 800a876:	4e0b      	ldr	r6, [pc, #44]	@ (800a8a4 <rcutils_system_time_now+0x4c>)
 800a878:	fba3 3206 	umull	r3, r2, r3, r6
 800a87c:	185b      	adds	r3, r3, r1
 800a87e:	fb06 2205 	mla	r2, r6, r5, r2
 800a882:	f04f 0000 	mov.w	r0, #0
 800a886:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 800a88a:	e9c4 3200 	strd	r3, r2, [r4]
 800a88e:	b004      	add	sp, #16
 800a890:	bd70      	pop	{r4, r5, r6, pc}
 800a892:	ea53 0205 	orrs.w	r2, r3, r5
 800a896:	d1ee      	bne.n	800a876 <rcutils_system_time_now+0x1e>
 800a898:	2002      	movs	r0, #2
 800a89a:	b004      	add	sp, #16
 800a89c:	bd70      	pop	{r4, r5, r6, pc}
 800a89e:	200b      	movs	r0, #11
 800a8a0:	4770      	bx	lr
 800a8a2:	bf00      	nop
 800a8a4:	3b9aca00 	.word	0x3b9aca00

0800a8a8 <rcutils_steady_time_now>:
 800a8a8:	b308      	cbz	r0, 800a8ee <rcutils_steady_time_now+0x46>
 800a8aa:	b570      	push	{r4, r5, r6, lr}
 800a8ac:	b084      	sub	sp, #16
 800a8ae:	4604      	mov	r4, r0
 800a8b0:	4669      	mov	r1, sp
 800a8b2:	2000      	movs	r0, #0
 800a8b4:	f7f6 ff0c 	bl	80016d0 <clock_gettime>
 800a8b8:	e9dd 3500 	ldrd	r3, r5, [sp]
 800a8bc:	2d00      	cmp	r5, #0
 800a8be:	db13      	blt.n	800a8e8 <rcutils_steady_time_now+0x40>
 800a8c0:	9902      	ldr	r1, [sp, #8]
 800a8c2:	2900      	cmp	r1, #0
 800a8c4:	db0d      	blt.n	800a8e2 <rcutils_steady_time_now+0x3a>
 800a8c6:	4e0b      	ldr	r6, [pc, #44]	@ (800a8f4 <rcutils_steady_time_now+0x4c>)
 800a8c8:	fba3 3206 	umull	r3, r2, r3, r6
 800a8cc:	185b      	adds	r3, r3, r1
 800a8ce:	fb06 2205 	mla	r2, r6, r5, r2
 800a8d2:	f04f 0000 	mov.w	r0, #0
 800a8d6:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 800a8da:	e9c4 3200 	strd	r3, r2, [r4]
 800a8de:	b004      	add	sp, #16
 800a8e0:	bd70      	pop	{r4, r5, r6, pc}
 800a8e2:	ea53 0205 	orrs.w	r2, r3, r5
 800a8e6:	d1ee      	bne.n	800a8c6 <rcutils_steady_time_now+0x1e>
 800a8e8:	2002      	movs	r0, #2
 800a8ea:	b004      	add	sp, #16
 800a8ec:	bd70      	pop	{r4, r5, r6, pc}
 800a8ee:	200b      	movs	r0, #11
 800a8f0:	4770      	bx	lr
 800a8f2:	bf00      	nop
 800a8f4:	3b9aca00 	.word	0x3b9aca00

0800a8f8 <rmw_get_default_publisher_options>:
 800a8f8:	2200      	movs	r2, #0
 800a8fa:	6002      	str	r2, [r0, #0]
 800a8fc:	7102      	strb	r2, [r0, #4]
 800a8fe:	4770      	bx	lr

0800a900 <rmw_uros_set_custom_transport>:
 800a900:	b470      	push	{r4, r5, r6}
 800a902:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 800a906:	b162      	cbz	r2, 800a922 <rmw_uros_set_custom_transport+0x22>
 800a908:	b15b      	cbz	r3, 800a922 <rmw_uros_set_custom_transport+0x22>
 800a90a:	b155      	cbz	r5, 800a922 <rmw_uros_set_custom_transport+0x22>
 800a90c:	b14e      	cbz	r6, 800a922 <rmw_uros_set_custom_transport+0x22>
 800a90e:	4c06      	ldr	r4, [pc, #24]	@ (800a928 <rmw_uros_set_custom_transport+0x28>)
 800a910:	7020      	strb	r0, [r4, #0]
 800a912:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800a916:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800a91a:	6166      	str	r6, [r4, #20]
 800a91c:	2000      	movs	r0, #0
 800a91e:	bc70      	pop	{r4, r5, r6}
 800a920:	4770      	bx	lr
 800a922:	200b      	movs	r0, #11
 800a924:	bc70      	pop	{r4, r5, r6}
 800a926:	4770      	bx	lr
 800a928:	200075f4 	.word	0x200075f4

0800a92c <flush_session>:
 800a92c:	6fc9      	ldr	r1, [r1, #124]	@ 0x7c
 800a92e:	f003 b87b 	b.w	800da28 <uxr_run_session_until_confirm_delivery>
 800a932:	bf00      	nop

0800a934 <rmw_publish>:
 800a934:	2800      	cmp	r0, #0
 800a936:	d053      	beq.n	800a9e0 <rmw_publish+0xac>
 800a938:	b570      	push	{r4, r5, r6, lr}
 800a93a:	460d      	mov	r5, r1
 800a93c:	b08e      	sub	sp, #56	@ 0x38
 800a93e:	2900      	cmp	r1, #0
 800a940:	d04b      	beq.n	800a9da <rmw_publish+0xa6>
 800a942:	4604      	mov	r4, r0
 800a944:	6800      	ldr	r0, [r0, #0]
 800a946:	f000 fced 	bl	800b324 <is_uxrce_rmw_identifier_valid>
 800a94a:	2800      	cmp	r0, #0
 800a94c:	d045      	beq.n	800a9da <rmw_publish+0xa6>
 800a94e:	6866      	ldr	r6, [r4, #4]
 800a950:	2e00      	cmp	r6, #0
 800a952:	d042      	beq.n	800a9da <rmw_publish+0xa6>
 800a954:	69b4      	ldr	r4, [r6, #24]
 800a956:	4628      	mov	r0, r5
 800a958:	6923      	ldr	r3, [r4, #16]
 800a95a:	4798      	blx	r3
 800a95c:	69f3      	ldr	r3, [r6, #28]
 800a95e:	9005      	str	r0, [sp, #20]
 800a960:	b113      	cbz	r3, 800a968 <rmw_publish+0x34>
 800a962:	a805      	add	r0, sp, #20
 800a964:	4798      	blx	r3
 800a966:	9805      	ldr	r0, [sp, #20]
 800a968:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800a96c:	691b      	ldr	r3, [r3, #16]
 800a96e:	9000      	str	r0, [sp, #0]
 800a970:	6972      	ldr	r2, [r6, #20]
 800a972:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 800a974:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800a978:	ab06      	add	r3, sp, #24
 800a97a:	f003 fe41 	bl	800e600 <uxr_prepare_output_stream>
 800a97e:	b1d8      	cbz	r0, 800a9b8 <rmw_publish+0x84>
 800a980:	68a3      	ldr	r3, [r4, #8]
 800a982:	a906      	add	r1, sp, #24
 800a984:	4628      	mov	r0, r5
 800a986:	4798      	blx	r3
 800a988:	6a33      	ldr	r3, [r6, #32]
 800a98a:	4604      	mov	r4, r0
 800a98c:	b10b      	cbz	r3, 800a992 <rmw_publish+0x5e>
 800a98e:	a806      	add	r0, sp, #24
 800a990:	4798      	blx	r3
 800a992:	f896 307a 	ldrb.w	r3, [r6, #122]	@ 0x7a
 800a996:	2b01      	cmp	r3, #1
 800a998:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800a99c:	d022      	beq.n	800a9e4 <rmw_publish+0xb0>
 800a99e:	6918      	ldr	r0, [r3, #16]
 800a9a0:	6ff1      	ldr	r1, [r6, #124]	@ 0x7c
 800a9a2:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800a9a6:	f003 f83f 	bl	800da28 <uxr_run_session_until_confirm_delivery>
 800a9aa:	4020      	ands	r0, r4
 800a9ac:	b2c4      	uxtb	r4, r0
 800a9ae:	f084 0001 	eor.w	r0, r4, #1
 800a9b2:	b2c0      	uxtb	r0, r0
 800a9b4:	b00e      	add	sp, #56	@ 0x38
 800a9b6:	bd70      	pop	{r4, r5, r6, pc}
 800a9b8:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800a9bc:	6918      	ldr	r0, [r3, #16]
 800a9be:	9b05      	ldr	r3, [sp, #20]
 800a9c0:	9300      	str	r3, [sp, #0]
 800a9c2:	4b0b      	ldr	r3, [pc, #44]	@ (800a9f0 <rmw_publish+0xbc>)
 800a9c4:	9301      	str	r3, [sp, #4]
 800a9c6:	9602      	str	r6, [sp, #8]
 800a9c8:	6972      	ldr	r2, [r6, #20]
 800a9ca:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 800a9cc:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800a9d0:	ab06      	add	r3, sp, #24
 800a9d2:	f003 fe45 	bl	800e660 <uxr_prepare_output_stream_fragmented>
 800a9d6:	2800      	cmp	r0, #0
 800a9d8:	d1d2      	bne.n	800a980 <rmw_publish+0x4c>
 800a9da:	2001      	movs	r0, #1
 800a9dc:	b00e      	add	sp, #56	@ 0x38
 800a9de:	bd70      	pop	{r4, r5, r6, pc}
 800a9e0:	2001      	movs	r0, #1
 800a9e2:	4770      	bx	lr
 800a9e4:	6918      	ldr	r0, [r3, #16]
 800a9e6:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800a9ea:	f002 fc5d 	bl	800d2a8 <uxr_flash_output_streams>
 800a9ee:	e7de      	b.n	800a9ae <rmw_publish+0x7a>
 800a9f0:	0800a92d 	.word	0x0800a92d

0800a9f4 <rmw_create_publisher>:
 800a9f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9f8:	b087      	sub	sp, #28
 800a9fa:	2800      	cmp	r0, #0
 800a9fc:	f000 80cc 	beq.w	800ab98 <rmw_create_publisher+0x1a4>
 800aa00:	460e      	mov	r6, r1
 800aa02:	2900      	cmp	r1, #0
 800aa04:	f000 80c8 	beq.w	800ab98 <rmw_create_publisher+0x1a4>
 800aa08:	4604      	mov	r4, r0
 800aa0a:	6800      	ldr	r0, [r0, #0]
 800aa0c:	4615      	mov	r5, r2
 800aa0e:	4698      	mov	r8, r3
 800aa10:	f000 fc88 	bl	800b324 <is_uxrce_rmw_identifier_valid>
 800aa14:	2800      	cmp	r0, #0
 800aa16:	f000 80bf 	beq.w	800ab98 <rmw_create_publisher+0x1a4>
 800aa1a:	2d00      	cmp	r5, #0
 800aa1c:	f000 80bc 	beq.w	800ab98 <rmw_create_publisher+0x1a4>
 800aa20:	782b      	ldrb	r3, [r5, #0]
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	f000 80b8 	beq.w	800ab98 <rmw_create_publisher+0x1a4>
 800aa28:	f1b8 0f00 	cmp.w	r8, #0
 800aa2c:	f000 80b4 	beq.w	800ab98 <rmw_create_publisher+0x1a4>
 800aa30:	485c      	ldr	r0, [pc, #368]	@ (800aba4 <rmw_create_publisher+0x1b0>)
 800aa32:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800aa36:	f008 fc63 	bl	8013300 <get_memory>
 800aa3a:	2800      	cmp	r0, #0
 800aa3c:	f000 80ac 	beq.w	800ab98 <rmw_create_publisher+0x1a4>
 800aa40:	6884      	ldr	r4, [r0, #8]
 800aa42:	f8c4 4088 	str.w	r4, [r4, #136]	@ 0x88
 800aa46:	f008 fcc3 	bl	80133d0 <rmw_get_implementation_identifier>
 800aa4a:	f104 0a9c 	add.w	sl, r4, #156	@ 0x9c
 800aa4e:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
 800aa52:	f8c4 a08c 	str.w	sl, [r4, #140]	@ 0x8c
 800aa56:	4628      	mov	r0, r5
 800aa58:	f7f5 fbc4 	bl	80001e4 <strlen>
 800aa5c:	3001      	adds	r0, #1
 800aa5e:	283c      	cmp	r0, #60	@ 0x3c
 800aa60:	f104 0784 	add.w	r7, r4, #132	@ 0x84
 800aa64:	f200 8091 	bhi.w	800ab8a <rmw_create_publisher+0x196>
 800aa68:	4a4f      	ldr	r2, [pc, #316]	@ (800aba8 <rmw_create_publisher+0x1b4>)
 800aa6a:	462b      	mov	r3, r5
 800aa6c:	213c      	movs	r1, #60	@ 0x3c
 800aa6e:	4650      	mov	r0, sl
 800aa70:	f00c fdd6 	bl	8017620 <sniprintf>
 800aa74:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800aa78:	67e3      	str	r3, [r4, #124]	@ 0x7c
 800aa7a:	4641      	mov	r1, r8
 800aa7c:	f8c4 9080 	str.w	r9, [r4, #128]	@ 0x80
 800aa80:	2250      	movs	r2, #80	@ 0x50
 800aa82:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800aa86:	f00d f858 	bl	8017b3a <memcpy>
 800aa8a:	f898 3008 	ldrb.w	r3, [r8, #8]
 800aa8e:	4947      	ldr	r1, [pc, #284]	@ (800abac <rmw_create_publisher+0x1b8>)
 800aa90:	2b02      	cmp	r3, #2
 800aa92:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800aa96:	bf0c      	ite	eq
 800aa98:	f8d3 337c 	ldreq.w	r3, [r3, #892]	@ 0x37c
 800aa9c:	f8d3 3378 	ldrne.w	r3, [r3, #888]	@ 0x378
 800aaa0:	67a3      	str	r3, [r4, #120]	@ 0x78
 800aaa2:	2300      	movs	r3, #0
 800aaa4:	e9c4 3307 	strd	r3, r3, [r4, #28]
 800aaa8:	4630      	mov	r0, r6
 800aaaa:	f000 fc49 	bl	800b340 <get_message_typesupport_handle>
 800aaae:	2800      	cmp	r0, #0
 800aab0:	d06b      	beq.n	800ab8a <rmw_create_publisher+0x196>
 800aab2:	6842      	ldr	r2, [r0, #4]
 800aab4:	61a2      	str	r2, [r4, #24]
 800aab6:	2a00      	cmp	r2, #0
 800aab8:	d067      	beq.n	800ab8a <rmw_create_publisher+0x196>
 800aaba:	4629      	mov	r1, r5
 800aabc:	4643      	mov	r3, r8
 800aabe:	4648      	mov	r0, r9
 800aac0:	f008 feec 	bl	801389c <create_topic>
 800aac4:	6260      	str	r0, [r4, #36]	@ 0x24
 800aac6:	2800      	cmp	r0, #0
 800aac8:	d063      	beq.n	800ab92 <rmw_create_publisher+0x19e>
 800aaca:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800aace:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800aad2:	2103      	movs	r1, #3
 800aad4:	f8b3 0598 	ldrh.w	r0, [r3, #1432]	@ 0x598
 800aad8:	1c42      	adds	r2, r0, #1
 800aada:	f8a3 2598 	strh.w	r2, [r3, #1432]	@ 0x598
 800aade:	f002 fa93 	bl	800d008 <uxr_object_id>
 800aae2:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 800aae6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800aaea:	6120      	str	r0, [r4, #16]
 800aaec:	f8d3 3384 	ldr.w	r3, [r3, #900]	@ 0x384
 800aaf0:	6910      	ldr	r0, [r2, #16]
 800aaf2:	2506      	movs	r5, #6
 800aaf4:	9500      	str	r5, [sp, #0]
 800aaf6:	6819      	ldr	r1, [r3, #0]
 800aaf8:	6922      	ldr	r2, [r4, #16]
 800aafa:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800aafe:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800ab02:	f002 f933 	bl	800cd6c <uxr_buffer_create_publisher_bin>
 800ab06:	4602      	mov	r2, r0
 800ab08:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800ab0c:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800ab10:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800ab14:	f000 fb86 	bl	800b224 <run_xrce_session>
 800ab18:	b3b8      	cbz	r0, 800ab8a <rmw_create_publisher+0x196>
 800ab1a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ab1e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ab22:	2105      	movs	r1, #5
 800ab24:	f8b3 059a 	ldrh.w	r0, [r3, #1434]	@ 0x59a
 800ab28:	1c42      	adds	r2, r0, #1
 800ab2a:	f8a3 259a 	strh.w	r2, [r3, #1434]	@ 0x59a
 800ab2e:	f002 fa6b 	bl	800d008 <uxr_object_id>
 800ab32:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800ab36:	6160      	str	r0, [r4, #20]
 800ab38:	691e      	ldr	r6, [r3, #16]
 800ab3a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ab3e:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
 800ab42:	f10d 0a10 	add.w	sl, sp, #16
 800ab46:	4641      	mov	r1, r8
 800ab48:	4650      	mov	r0, sl
 800ab4a:	f8d3 8384 	ldr.w	r8, [r3, #900]	@ 0x384
 800ab4e:	f000 fb85 	bl	800b25c <convert_qos_profile>
 800ab52:	9503      	str	r5, [sp, #12]
 800ab54:	e89a 0003 	ldmia.w	sl, {r0, r1}
 800ab58:	9001      	str	r0, [sp, #4]
 800ab5a:	f8ad 1008 	strh.w	r1, [sp, #8]
 800ab5e:	f8db 3010 	ldr.w	r3, [fp, #16]
 800ab62:	9300      	str	r3, [sp, #0]
 800ab64:	f506 7628 	add.w	r6, r6, #672	@ 0x2a0
 800ab68:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 800ab6c:	f8d8 1000 	ldr.w	r1, [r8]
 800ab70:	4630      	mov	r0, r6
 800ab72:	f002 f95b 	bl	800ce2c <uxr_buffer_create_datawriter_bin>
 800ab76:	4602      	mov	r2, r0
 800ab78:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800ab7c:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800ab80:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800ab84:	f000 fb4e 	bl	800b224 <run_xrce_session>
 800ab88:	b938      	cbnz	r0, 800ab9a <rmw_create_publisher+0x1a6>
 800ab8a:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800ab8c:	b108      	cbz	r0, 800ab92 <rmw_create_publisher+0x19e>
 800ab8e:	f000 fa47 	bl	800b020 <rmw_uxrce_fini_topic_memory>
 800ab92:	4638      	mov	r0, r7
 800ab94:	f000 f9ec 	bl	800af70 <rmw_uxrce_fini_publisher_memory>
 800ab98:	2700      	movs	r7, #0
 800ab9a:	4638      	mov	r0, r7
 800ab9c:	b007      	add	sp, #28
 800ab9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aba2:	bf00      	nop
 800aba4:	2000beec 	.word	0x2000beec
 800aba8:	08018abc 	.word	0x08018abc
 800abac:	08018a88 	.word	0x08018a88

0800abb0 <rmw_publisher_get_actual_qos>:
 800abb0:	b150      	cbz	r0, 800abc8 <rmw_publisher_get_actual_qos+0x18>
 800abb2:	b508      	push	{r3, lr}
 800abb4:	460b      	mov	r3, r1
 800abb6:	b149      	cbz	r1, 800abcc <rmw_publisher_get_actual_qos+0x1c>
 800abb8:	6841      	ldr	r1, [r0, #4]
 800abba:	2250      	movs	r2, #80	@ 0x50
 800abbc:	3128      	adds	r1, #40	@ 0x28
 800abbe:	4618      	mov	r0, r3
 800abc0:	f00c ffbb 	bl	8017b3a <memcpy>
 800abc4:	2000      	movs	r0, #0
 800abc6:	bd08      	pop	{r3, pc}
 800abc8:	200b      	movs	r0, #11
 800abca:	4770      	bx	lr
 800abcc:	200b      	movs	r0, #11
 800abce:	bd08      	pop	{r3, pc}

0800abd0 <rmw_destroy_publisher>:
 800abd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abd2:	b128      	cbz	r0, 800abe0 <rmw_destroy_publisher+0x10>
 800abd4:	4604      	mov	r4, r0
 800abd6:	6800      	ldr	r0, [r0, #0]
 800abd8:	460d      	mov	r5, r1
 800abda:	f000 fba3 	bl	800b324 <is_uxrce_rmw_identifier_valid>
 800abde:	b910      	cbnz	r0, 800abe6 <rmw_destroy_publisher+0x16>
 800abe0:	2401      	movs	r4, #1
 800abe2:	4620      	mov	r0, r4
 800abe4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800abe6:	6863      	ldr	r3, [r4, #4]
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d0f9      	beq.n	800abe0 <rmw_destroy_publisher+0x10>
 800abec:	2d00      	cmp	r5, #0
 800abee:	d0f7      	beq.n	800abe0 <rmw_destroy_publisher+0x10>
 800abf0:	6828      	ldr	r0, [r5, #0]
 800abf2:	f000 fb97 	bl	800b324 <is_uxrce_rmw_identifier_valid>
 800abf6:	2800      	cmp	r0, #0
 800abf8:	d0f2      	beq.n	800abe0 <rmw_destroy_publisher+0x10>
 800abfa:	686c      	ldr	r4, [r5, #4]
 800abfc:	2c00      	cmp	r4, #0
 800abfe:	d0ef      	beq.n	800abe0 <rmw_destroy_publisher+0x10>
 800ac00:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800ac02:	f8d4 7080 	ldr.w	r7, [r4, #128]	@ 0x80
 800ac06:	f008 fe99 	bl	801393c <destroy_topic>
 800ac0a:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800ac0e:	6962      	ldr	r2, [r4, #20]
 800ac10:	6918      	ldr	r0, [r3, #16]
 800ac12:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800ac16:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800ac1a:	6819      	ldr	r1, [r3, #0]
 800ac1c:	f001 fff2 	bl	800cc04 <uxr_buffer_delete_entity>
 800ac20:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800ac24:	6922      	ldr	r2, [r4, #16]
 800ac26:	691b      	ldr	r3, [r3, #16]
 800ac28:	f8d3 1388 	ldr.w	r1, [r3, #904]	@ 0x388
 800ac2c:	4604      	mov	r4, r0
 800ac2e:	6809      	ldr	r1, [r1, #0]
 800ac30:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800ac34:	f001 ffe6 	bl	800cc04 <uxr_buffer_delete_entity>
 800ac38:	693e      	ldr	r6, [r7, #16]
 800ac3a:	4622      	mov	r2, r4
 800ac3c:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 800ac40:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 800ac44:	4604      	mov	r4, r0
 800ac46:	4630      	mov	r0, r6
 800ac48:	f000 faec 	bl	800b224 <run_xrce_session>
 800ac4c:	693e      	ldr	r6, [r7, #16]
 800ac4e:	4622      	mov	r2, r4
 800ac50:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 800ac54:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 800ac58:	4604      	mov	r4, r0
 800ac5a:	4630      	mov	r0, r6
 800ac5c:	f000 fae2 	bl	800b224 <run_xrce_session>
 800ac60:	b12c      	cbz	r4, 800ac6e <rmw_destroy_publisher+0x9e>
 800ac62:	b120      	cbz	r0, 800ac6e <rmw_destroy_publisher+0x9e>
 800ac64:	2400      	movs	r4, #0
 800ac66:	4628      	mov	r0, r5
 800ac68:	f000 f982 	bl	800af70 <rmw_uxrce_fini_publisher_memory>
 800ac6c:	e7b9      	b.n	800abe2 <rmw_destroy_publisher+0x12>
 800ac6e:	2402      	movs	r4, #2
 800ac70:	e7f9      	b.n	800ac66 <rmw_destroy_publisher+0x96>
 800ac72:	bf00      	nop

0800ac74 <rmw_uxrce_init_service_memory>:
 800ac74:	b1e2      	cbz	r2, 800acb0 <rmw_uxrce_init_service_memory+0x3c>
 800ac76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac7a:	7b05      	ldrb	r5, [r0, #12]
 800ac7c:	4606      	mov	r6, r0
 800ac7e:	b9ad      	cbnz	r5, 800acac <rmw_uxrce_init_service_memory+0x38>
 800ac80:	23c8      	movs	r3, #200	@ 0xc8
 800ac82:	e9c0 5500 	strd	r5, r5, [r0]
 800ac86:	6083      	str	r3, [r0, #8]
 800ac88:	f240 1301 	movw	r3, #257	@ 0x101
 800ac8c:	4617      	mov	r7, r2
 800ac8e:	8183      	strh	r3, [r0, #12]
 800ac90:	460c      	mov	r4, r1
 800ac92:	46a8      	mov	r8, r5
 800ac94:	4621      	mov	r1, r4
 800ac96:	4630      	mov	r0, r6
 800ac98:	3501      	adds	r5, #1
 800ac9a:	f008 fb41 	bl	8013320 <put_memory>
 800ac9e:	42af      	cmp	r7, r5
 800aca0:	60a4      	str	r4, [r4, #8]
 800aca2:	f884 800c 	strb.w	r8, [r4, #12]
 800aca6:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 800acaa:	d1f3      	bne.n	800ac94 <rmw_uxrce_init_service_memory+0x20>
 800acac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800acb0:	4770      	bx	lr
 800acb2:	bf00      	nop

0800acb4 <rmw_uxrce_init_client_memory>:
 800acb4:	b1e2      	cbz	r2, 800acf0 <rmw_uxrce_init_client_memory+0x3c>
 800acb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800acba:	7b05      	ldrb	r5, [r0, #12]
 800acbc:	4606      	mov	r6, r0
 800acbe:	b9ad      	cbnz	r5, 800acec <rmw_uxrce_init_client_memory+0x38>
 800acc0:	23c8      	movs	r3, #200	@ 0xc8
 800acc2:	e9c0 5500 	strd	r5, r5, [r0]
 800acc6:	6083      	str	r3, [r0, #8]
 800acc8:	f240 1301 	movw	r3, #257	@ 0x101
 800accc:	4617      	mov	r7, r2
 800acce:	8183      	strh	r3, [r0, #12]
 800acd0:	460c      	mov	r4, r1
 800acd2:	46a8      	mov	r8, r5
 800acd4:	4621      	mov	r1, r4
 800acd6:	4630      	mov	r0, r6
 800acd8:	3501      	adds	r5, #1
 800acda:	f008 fb21 	bl	8013320 <put_memory>
 800acde:	42af      	cmp	r7, r5
 800ace0:	60a4      	str	r4, [r4, #8]
 800ace2:	f884 800c 	strb.w	r8, [r4, #12]
 800ace6:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 800acea:	d1f3      	bne.n	800acd4 <rmw_uxrce_init_client_memory+0x20>
 800acec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800acf0:	4770      	bx	lr
 800acf2:	bf00      	nop

0800acf4 <rmw_uxrce_init_publisher_memory>:
 800acf4:	b1e2      	cbz	r2, 800ad30 <rmw_uxrce_init_publisher_memory+0x3c>
 800acf6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800acfa:	7b05      	ldrb	r5, [r0, #12]
 800acfc:	4606      	mov	r6, r0
 800acfe:	b9ad      	cbnz	r5, 800ad2c <rmw_uxrce_init_publisher_memory+0x38>
 800ad00:	23d8      	movs	r3, #216	@ 0xd8
 800ad02:	e9c0 5500 	strd	r5, r5, [r0]
 800ad06:	6083      	str	r3, [r0, #8]
 800ad08:	f240 1301 	movw	r3, #257	@ 0x101
 800ad0c:	4617      	mov	r7, r2
 800ad0e:	8183      	strh	r3, [r0, #12]
 800ad10:	460c      	mov	r4, r1
 800ad12:	46a8      	mov	r8, r5
 800ad14:	4621      	mov	r1, r4
 800ad16:	4630      	mov	r0, r6
 800ad18:	3501      	adds	r5, #1
 800ad1a:	f008 fb01 	bl	8013320 <put_memory>
 800ad1e:	42af      	cmp	r7, r5
 800ad20:	60a4      	str	r4, [r4, #8]
 800ad22:	f884 800c 	strb.w	r8, [r4, #12]
 800ad26:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 800ad2a:	d1f3      	bne.n	800ad14 <rmw_uxrce_init_publisher_memory+0x20>
 800ad2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad30:	4770      	bx	lr
 800ad32:	bf00      	nop

0800ad34 <rmw_uxrce_init_subscription_memory>:
 800ad34:	b1e2      	cbz	r2, 800ad70 <rmw_uxrce_init_subscription_memory+0x3c>
 800ad36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad3a:	7b05      	ldrb	r5, [r0, #12]
 800ad3c:	4606      	mov	r6, r0
 800ad3e:	b9ad      	cbnz	r5, 800ad6c <rmw_uxrce_init_subscription_memory+0x38>
 800ad40:	23d8      	movs	r3, #216	@ 0xd8
 800ad42:	e9c0 5500 	strd	r5, r5, [r0]
 800ad46:	6083      	str	r3, [r0, #8]
 800ad48:	f240 1301 	movw	r3, #257	@ 0x101
 800ad4c:	4617      	mov	r7, r2
 800ad4e:	8183      	strh	r3, [r0, #12]
 800ad50:	460c      	mov	r4, r1
 800ad52:	46a8      	mov	r8, r5
 800ad54:	4621      	mov	r1, r4
 800ad56:	4630      	mov	r0, r6
 800ad58:	3501      	adds	r5, #1
 800ad5a:	f008 fae1 	bl	8013320 <put_memory>
 800ad5e:	42af      	cmp	r7, r5
 800ad60:	60a4      	str	r4, [r4, #8]
 800ad62:	f884 800c 	strb.w	r8, [r4, #12]
 800ad66:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 800ad6a:	d1f3      	bne.n	800ad54 <rmw_uxrce_init_subscription_memory+0x20>
 800ad6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad70:	4770      	bx	lr
 800ad72:	bf00      	nop

0800ad74 <rmw_uxrce_init_node_memory>:
 800ad74:	b1e2      	cbz	r2, 800adb0 <rmw_uxrce_init_node_memory+0x3c>
 800ad76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad7a:	7b05      	ldrb	r5, [r0, #12]
 800ad7c:	4606      	mov	r6, r0
 800ad7e:	b9ad      	cbnz	r5, 800adac <rmw_uxrce_init_node_memory+0x38>
 800ad80:	23a4      	movs	r3, #164	@ 0xa4
 800ad82:	e9c0 5500 	strd	r5, r5, [r0]
 800ad86:	6083      	str	r3, [r0, #8]
 800ad88:	f240 1301 	movw	r3, #257	@ 0x101
 800ad8c:	4617      	mov	r7, r2
 800ad8e:	8183      	strh	r3, [r0, #12]
 800ad90:	460c      	mov	r4, r1
 800ad92:	46a8      	mov	r8, r5
 800ad94:	4621      	mov	r1, r4
 800ad96:	4630      	mov	r0, r6
 800ad98:	3501      	adds	r5, #1
 800ad9a:	f008 fac1 	bl	8013320 <put_memory>
 800ad9e:	42af      	cmp	r7, r5
 800ada0:	60a4      	str	r4, [r4, #8]
 800ada2:	f884 800c 	strb.w	r8, [r4, #12]
 800ada6:	f104 04a4 	add.w	r4, r4, #164	@ 0xa4
 800adaa:	d1f3      	bne.n	800ad94 <rmw_uxrce_init_node_memory+0x20>
 800adac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800adb0:	4770      	bx	lr
 800adb2:	bf00      	nop

0800adb4 <rmw_uxrce_init_session_memory>:
 800adb4:	b1ea      	cbz	r2, 800adf2 <rmw_uxrce_init_session_memory+0x3e>
 800adb6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800adba:	7b05      	ldrb	r5, [r0, #12]
 800adbc:	4606      	mov	r6, r0
 800adbe:	b9b5      	cbnz	r5, 800adee <rmw_uxrce_init_session_memory+0x3a>
 800adc0:	e9c0 5500 	strd	r5, r5, [r0]
 800adc4:	f241 58a8 	movw	r8, #5544	@ 0x15a8
 800adc8:	f240 1301 	movw	r3, #257	@ 0x101
 800adcc:	4617      	mov	r7, r2
 800adce:	f8c0 8008 	str.w	r8, [r0, #8]
 800add2:	460c      	mov	r4, r1
 800add4:	8183      	strh	r3, [r0, #12]
 800add6:	46a9      	mov	r9, r5
 800add8:	4621      	mov	r1, r4
 800adda:	4630      	mov	r0, r6
 800addc:	3501      	adds	r5, #1
 800adde:	f008 fa9f 	bl	8013320 <put_memory>
 800ade2:	42af      	cmp	r7, r5
 800ade4:	60a4      	str	r4, [r4, #8]
 800ade6:	f884 900c 	strb.w	r9, [r4, #12]
 800adea:	4444      	add	r4, r8
 800adec:	d1f4      	bne.n	800add8 <rmw_uxrce_init_session_memory+0x24>
 800adee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800adf2:	4770      	bx	lr

0800adf4 <rmw_uxrce_init_topic_memory>:
 800adf4:	b1e2      	cbz	r2, 800ae30 <rmw_uxrce_init_topic_memory+0x3c>
 800adf6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800adfa:	7b05      	ldrb	r5, [r0, #12]
 800adfc:	4606      	mov	r6, r0
 800adfe:	b9ad      	cbnz	r5, 800ae2c <rmw_uxrce_init_topic_memory+0x38>
 800ae00:	231c      	movs	r3, #28
 800ae02:	e9c0 5500 	strd	r5, r5, [r0]
 800ae06:	6083      	str	r3, [r0, #8]
 800ae08:	f240 1301 	movw	r3, #257	@ 0x101
 800ae0c:	4617      	mov	r7, r2
 800ae0e:	8183      	strh	r3, [r0, #12]
 800ae10:	460c      	mov	r4, r1
 800ae12:	46a8      	mov	r8, r5
 800ae14:	4621      	mov	r1, r4
 800ae16:	4630      	mov	r0, r6
 800ae18:	3501      	adds	r5, #1
 800ae1a:	f008 fa81 	bl	8013320 <put_memory>
 800ae1e:	42af      	cmp	r7, r5
 800ae20:	60a4      	str	r4, [r4, #8]
 800ae22:	f884 800c 	strb.w	r8, [r4, #12]
 800ae26:	f104 041c 	add.w	r4, r4, #28
 800ae2a:	d1f3      	bne.n	800ae14 <rmw_uxrce_init_topic_memory+0x20>
 800ae2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae30:	4770      	bx	lr
 800ae32:	bf00      	nop

0800ae34 <rmw_uxrce_init_static_input_buffer_memory>:
 800ae34:	b1ea      	cbz	r2, 800ae72 <rmw_uxrce_init_static_input_buffer_memory+0x3e>
 800ae36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae3a:	7b05      	ldrb	r5, [r0, #12]
 800ae3c:	4606      	mov	r6, r0
 800ae3e:	b9b5      	cbnz	r5, 800ae6e <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 800ae40:	f44f 6304 	mov.w	r3, #2112	@ 0x840
 800ae44:	e9c0 5500 	strd	r5, r5, [r0]
 800ae48:	6083      	str	r3, [r0, #8]
 800ae4a:	f240 1301 	movw	r3, #257	@ 0x101
 800ae4e:	4617      	mov	r7, r2
 800ae50:	8183      	strh	r3, [r0, #12]
 800ae52:	460c      	mov	r4, r1
 800ae54:	46a8      	mov	r8, r5
 800ae56:	4621      	mov	r1, r4
 800ae58:	4630      	mov	r0, r6
 800ae5a:	3501      	adds	r5, #1
 800ae5c:	f008 fa60 	bl	8013320 <put_memory>
 800ae60:	42af      	cmp	r7, r5
 800ae62:	60a4      	str	r4, [r4, #8]
 800ae64:	f884 800c 	strb.w	r8, [r4, #12]
 800ae68:	f504 6404 	add.w	r4, r4, #2112	@ 0x840
 800ae6c:	d1f3      	bne.n	800ae56 <rmw_uxrce_init_static_input_buffer_memory+0x22>
 800ae6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae72:	4770      	bx	lr

0800ae74 <rmw_uxrce_init_init_options_impl_memory>:
 800ae74:	b1e2      	cbz	r2, 800aeb0 <rmw_uxrce_init_init_options_impl_memory+0x3c>
 800ae76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae7a:	7b05      	ldrb	r5, [r0, #12]
 800ae7c:	4606      	mov	r6, r0
 800ae7e:	b9ad      	cbnz	r5, 800aeac <rmw_uxrce_init_init_options_impl_memory+0x38>
 800ae80:	232c      	movs	r3, #44	@ 0x2c
 800ae82:	e9c0 5500 	strd	r5, r5, [r0]
 800ae86:	6083      	str	r3, [r0, #8]
 800ae88:	f240 1301 	movw	r3, #257	@ 0x101
 800ae8c:	4617      	mov	r7, r2
 800ae8e:	8183      	strh	r3, [r0, #12]
 800ae90:	460c      	mov	r4, r1
 800ae92:	46a8      	mov	r8, r5
 800ae94:	4621      	mov	r1, r4
 800ae96:	4630      	mov	r0, r6
 800ae98:	3501      	adds	r5, #1
 800ae9a:	f008 fa41 	bl	8013320 <put_memory>
 800ae9e:	42af      	cmp	r7, r5
 800aea0:	60a4      	str	r4, [r4, #8]
 800aea2:	f884 800c 	strb.w	r8, [r4, #12]
 800aea6:	f104 042c 	add.w	r4, r4, #44	@ 0x2c
 800aeaa:	d1f3      	bne.n	800ae94 <rmw_uxrce_init_init_options_impl_memory+0x20>
 800aeac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aeb0:	4770      	bx	lr
 800aeb2:	bf00      	nop

0800aeb4 <rmw_uxrce_init_wait_set_memory>:
 800aeb4:	b1e2      	cbz	r2, 800aef0 <rmw_uxrce_init_wait_set_memory+0x3c>
 800aeb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aeba:	7b05      	ldrb	r5, [r0, #12]
 800aebc:	4606      	mov	r6, r0
 800aebe:	b9ad      	cbnz	r5, 800aeec <rmw_uxrce_init_wait_set_memory+0x38>
 800aec0:	231c      	movs	r3, #28
 800aec2:	e9c0 5500 	strd	r5, r5, [r0]
 800aec6:	6083      	str	r3, [r0, #8]
 800aec8:	f240 1301 	movw	r3, #257	@ 0x101
 800aecc:	4617      	mov	r7, r2
 800aece:	8183      	strh	r3, [r0, #12]
 800aed0:	460c      	mov	r4, r1
 800aed2:	46a8      	mov	r8, r5
 800aed4:	4621      	mov	r1, r4
 800aed6:	4630      	mov	r0, r6
 800aed8:	3501      	adds	r5, #1
 800aeda:	f008 fa21 	bl	8013320 <put_memory>
 800aede:	42af      	cmp	r7, r5
 800aee0:	60a4      	str	r4, [r4, #8]
 800aee2:	f884 800c 	strb.w	r8, [r4, #12]
 800aee6:	f104 041c 	add.w	r4, r4, #28
 800aeea:	d1f3      	bne.n	800aed4 <rmw_uxrce_init_wait_set_memory+0x20>
 800aeec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aef0:	4770      	bx	lr
 800aef2:	bf00      	nop

0800aef4 <rmw_uxrce_init_guard_condition_memory>:
 800aef4:	b1e2      	cbz	r2, 800af30 <rmw_uxrce_init_guard_condition_memory+0x3c>
 800aef6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aefa:	7b05      	ldrb	r5, [r0, #12]
 800aefc:	4606      	mov	r6, r0
 800aefe:	b9ad      	cbnz	r5, 800af2c <rmw_uxrce_init_guard_condition_memory+0x38>
 800af00:	2320      	movs	r3, #32
 800af02:	e9c0 5500 	strd	r5, r5, [r0]
 800af06:	6083      	str	r3, [r0, #8]
 800af08:	f240 1301 	movw	r3, #257	@ 0x101
 800af0c:	4617      	mov	r7, r2
 800af0e:	8183      	strh	r3, [r0, #12]
 800af10:	460c      	mov	r4, r1
 800af12:	46a8      	mov	r8, r5
 800af14:	4621      	mov	r1, r4
 800af16:	4630      	mov	r0, r6
 800af18:	3501      	adds	r5, #1
 800af1a:	f008 fa01 	bl	8013320 <put_memory>
 800af1e:	42af      	cmp	r7, r5
 800af20:	60a4      	str	r4, [r4, #8]
 800af22:	f884 800c 	strb.w	r8, [r4, #12]
 800af26:	f104 0420 	add.w	r4, r4, #32
 800af2a:	d1f3      	bne.n	800af14 <rmw_uxrce_init_guard_condition_memory+0x20>
 800af2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af30:	4770      	bx	lr
 800af32:	bf00      	nop

0800af34 <rmw_uxrce_fini_session_memory>:
 800af34:	4601      	mov	r1, r0
 800af36:	4801      	ldr	r0, [pc, #4]	@ (800af3c <rmw_uxrce_fini_session_memory+0x8>)
 800af38:	f008 b9f2 	b.w	8013320 <put_memory>
 800af3c:	2000bf0c 	.word	0x2000bf0c

0800af40 <rmw_uxrce_fini_node_memory>:
 800af40:	b538      	push	{r3, r4, r5, lr}
 800af42:	4604      	mov	r4, r0
 800af44:	6800      	ldr	r0, [r0, #0]
 800af46:	b128      	cbz	r0, 800af54 <rmw_uxrce_fini_node_memory+0x14>
 800af48:	4b07      	ldr	r3, [pc, #28]	@ (800af68 <rmw_uxrce_fini_node_memory+0x28>)
 800af4a:	6819      	ldr	r1, [r3, #0]
 800af4c:	f7f5 f940 	bl	80001d0 <strcmp>
 800af50:	b940      	cbnz	r0, 800af64 <rmw_uxrce_fini_node_memory+0x24>
 800af52:	6020      	str	r0, [r4, #0]
 800af54:	6861      	ldr	r1, [r4, #4]
 800af56:	b129      	cbz	r1, 800af64 <rmw_uxrce_fini_node_memory+0x24>
 800af58:	2500      	movs	r5, #0
 800af5a:	4804      	ldr	r0, [pc, #16]	@ (800af6c <rmw_uxrce_fini_node_memory+0x2c>)
 800af5c:	610d      	str	r5, [r1, #16]
 800af5e:	f008 f9df 	bl	8013320 <put_memory>
 800af62:	6065      	str	r5, [r4, #4]
 800af64:	bd38      	pop	{r3, r4, r5, pc}
 800af66:	bf00      	nop
 800af68:	08019240 	.word	0x08019240
 800af6c:	2000bedc 	.word	0x2000bedc

0800af70 <rmw_uxrce_fini_publisher_memory>:
 800af70:	b510      	push	{r4, lr}
 800af72:	4604      	mov	r4, r0
 800af74:	6800      	ldr	r0, [r0, #0]
 800af76:	b128      	cbz	r0, 800af84 <rmw_uxrce_fini_publisher_memory+0x14>
 800af78:	4b06      	ldr	r3, [pc, #24]	@ (800af94 <rmw_uxrce_fini_publisher_memory+0x24>)
 800af7a:	6819      	ldr	r1, [r3, #0]
 800af7c:	f7f5 f928 	bl	80001d0 <strcmp>
 800af80:	b938      	cbnz	r0, 800af92 <rmw_uxrce_fini_publisher_memory+0x22>
 800af82:	6020      	str	r0, [r4, #0]
 800af84:	6861      	ldr	r1, [r4, #4]
 800af86:	b121      	cbz	r1, 800af92 <rmw_uxrce_fini_publisher_memory+0x22>
 800af88:	4803      	ldr	r0, [pc, #12]	@ (800af98 <rmw_uxrce_fini_publisher_memory+0x28>)
 800af8a:	f008 f9c9 	bl	8013320 <put_memory>
 800af8e:	2300      	movs	r3, #0
 800af90:	6063      	str	r3, [r4, #4]
 800af92:	bd10      	pop	{r4, pc}
 800af94:	08019240 	.word	0x08019240
 800af98:	2000beec 	.word	0x2000beec

0800af9c <rmw_uxrce_fini_subscription_memory>:
 800af9c:	b510      	push	{r4, lr}
 800af9e:	4604      	mov	r4, r0
 800afa0:	6800      	ldr	r0, [r0, #0]
 800afa2:	b128      	cbz	r0, 800afb0 <rmw_uxrce_fini_subscription_memory+0x14>
 800afa4:	4b06      	ldr	r3, [pc, #24]	@ (800afc0 <rmw_uxrce_fini_subscription_memory+0x24>)
 800afa6:	6819      	ldr	r1, [r3, #0]
 800afa8:	f7f5 f912 	bl	80001d0 <strcmp>
 800afac:	b938      	cbnz	r0, 800afbe <rmw_uxrce_fini_subscription_memory+0x22>
 800afae:	6020      	str	r0, [r4, #0]
 800afb0:	6861      	ldr	r1, [r4, #4]
 800afb2:	b121      	cbz	r1, 800afbe <rmw_uxrce_fini_subscription_memory+0x22>
 800afb4:	4803      	ldr	r0, [pc, #12]	@ (800afc4 <rmw_uxrce_fini_subscription_memory+0x28>)
 800afb6:	f008 f9b3 	bl	8013320 <put_memory>
 800afba:	2300      	movs	r3, #0
 800afbc:	6063      	str	r3, [r4, #4]
 800afbe:	bd10      	pop	{r4, pc}
 800afc0:	08019240 	.word	0x08019240
 800afc4:	2000bf2c 	.word	0x2000bf2c

0800afc8 <rmw_uxrce_fini_service_memory>:
 800afc8:	b510      	push	{r4, lr}
 800afca:	4604      	mov	r4, r0
 800afcc:	6800      	ldr	r0, [r0, #0]
 800afce:	b128      	cbz	r0, 800afdc <rmw_uxrce_fini_service_memory+0x14>
 800afd0:	4b06      	ldr	r3, [pc, #24]	@ (800afec <rmw_uxrce_fini_service_memory+0x24>)
 800afd2:	6819      	ldr	r1, [r3, #0]
 800afd4:	f7f5 f8fc 	bl	80001d0 <strcmp>
 800afd8:	b938      	cbnz	r0, 800afea <rmw_uxrce_fini_service_memory+0x22>
 800afda:	6020      	str	r0, [r4, #0]
 800afdc:	6861      	ldr	r1, [r4, #4]
 800afde:	b121      	cbz	r1, 800afea <rmw_uxrce_fini_service_memory+0x22>
 800afe0:	4803      	ldr	r0, [pc, #12]	@ (800aff0 <rmw_uxrce_fini_service_memory+0x28>)
 800afe2:	f008 f99d 	bl	8013320 <put_memory>
 800afe6:	2300      	movs	r3, #0
 800afe8:	6063      	str	r3, [r4, #4]
 800afea:	bd10      	pop	{r4, pc}
 800afec:	08019240 	.word	0x08019240
 800aff0:	2000befc 	.word	0x2000befc

0800aff4 <rmw_uxrce_fini_client_memory>:
 800aff4:	b510      	push	{r4, lr}
 800aff6:	4604      	mov	r4, r0
 800aff8:	6800      	ldr	r0, [r0, #0]
 800affa:	b128      	cbz	r0, 800b008 <rmw_uxrce_fini_client_memory+0x14>
 800affc:	4b06      	ldr	r3, [pc, #24]	@ (800b018 <rmw_uxrce_fini_client_memory+0x24>)
 800affe:	6819      	ldr	r1, [r3, #0]
 800b000:	f7f5 f8e6 	bl	80001d0 <strcmp>
 800b004:	b938      	cbnz	r0, 800b016 <rmw_uxrce_fini_client_memory+0x22>
 800b006:	6020      	str	r0, [r4, #0]
 800b008:	6861      	ldr	r1, [r4, #4]
 800b00a:	b121      	cbz	r1, 800b016 <rmw_uxrce_fini_client_memory+0x22>
 800b00c:	4803      	ldr	r0, [pc, #12]	@ (800b01c <rmw_uxrce_fini_client_memory+0x28>)
 800b00e:	f008 f987 	bl	8013320 <put_memory>
 800b012:	2300      	movs	r3, #0
 800b014:	6063      	str	r3, [r4, #4]
 800b016:	bd10      	pop	{r4, pc}
 800b018:	08019240 	.word	0x08019240
 800b01c:	20007610 	.word	0x20007610

0800b020 <rmw_uxrce_fini_topic_memory>:
 800b020:	b510      	push	{r4, lr}
 800b022:	4604      	mov	r4, r0
 800b024:	4621      	mov	r1, r4
 800b026:	4803      	ldr	r0, [pc, #12]	@ (800b034 <rmw_uxrce_fini_topic_memory+0x14>)
 800b028:	f008 f97a 	bl	8013320 <put_memory>
 800b02c:	2300      	movs	r3, #0
 800b02e:	61a3      	str	r3, [r4, #24]
 800b030:	bd10      	pop	{r4, pc}
 800b032:	bf00      	nop
 800b034:	2000bf3c 	.word	0x2000bf3c

0800b038 <rmw_uxrce_get_static_input_buffer_for_entity>:
 800b038:	b082      	sub	sp, #8
 800b03a:	b530      	push	{r4, r5, lr}
 800b03c:	4925      	ldr	r1, [pc, #148]	@ (800b0d4 <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 800b03e:	680d      	ldr	r5, [r1, #0]
 800b040:	ac03      	add	r4, sp, #12
 800b042:	e884 000c 	stmia.w	r4, {r2, r3}
 800b046:	461c      	mov	r4, r3
 800b048:	2d00      	cmp	r5, #0
 800b04a:	d041      	beq.n	800b0d0 <rmw_uxrce_get_static_input_buffer_for_entity+0x98>
 800b04c:	462b      	mov	r3, r5
 800b04e:	2100      	movs	r1, #0
 800b050:	689a      	ldr	r2, [r3, #8]
 800b052:	685b      	ldr	r3, [r3, #4]
 800b054:	f8d2 2814 	ldr.w	r2, [r2, #2068]	@ 0x814
 800b058:	4290      	cmp	r0, r2
 800b05a:	bf08      	it	eq
 800b05c:	3101      	addeq	r1, #1
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d1f6      	bne.n	800b050 <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 800b062:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800b066:	2b02      	cmp	r3, #2
 800b068:	d029      	beq.n	800b0be <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800b06a:	d907      	bls.n	800b07c <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 800b06c:	2b03      	cmp	r3, #3
 800b06e:	d005      	beq.n	800b07c <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 800b070:	2100      	movs	r1, #0
 800b072:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b076:	4608      	mov	r0, r1
 800b078:	b002      	add	sp, #8
 800b07a:	4770      	bx	lr
 800b07c:	b314      	cbz	r4, 800b0c4 <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800b07e:	428c      	cmp	r4, r1
 800b080:	d820      	bhi.n	800b0c4 <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800b082:	2d00      	cmp	r5, #0
 800b084:	d0f4      	beq.n	800b070 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800b086:	2100      	movs	r1, #0
 800b088:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 800b08c:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 800b090:	e002      	b.n	800b098 <rmw_uxrce_get_static_input_buffer_for_entity+0x60>
 800b092:	686d      	ldr	r5, [r5, #4]
 800b094:	2d00      	cmp	r5, #0
 800b096:	d0ec      	beq.n	800b072 <rmw_uxrce_get_static_input_buffer_for_entity+0x3a>
 800b098:	68ab      	ldr	r3, [r5, #8]
 800b09a:	f8d3 2814 	ldr.w	r2, [r3, #2068]	@ 0x814
 800b09e:	4290      	cmp	r0, r2
 800b0a0:	d1f7      	bne.n	800b092 <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800b0a2:	f8d3 2818 	ldr.w	r2, [r3, #2072]	@ 0x818
 800b0a6:	f503 6302 	add.w	r3, r3, #2080	@ 0x820
 800b0aa:	4562      	cmp	r2, ip
 800b0ac:	f853 3c04 	ldr.w	r3, [r3, #-4]
 800b0b0:	eb73 0e04 	sbcs.w	lr, r3, r4
 800b0b4:	daed      	bge.n	800b092 <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800b0b6:	4694      	mov	ip, r2
 800b0b8:	461c      	mov	r4, r3
 800b0ba:	4629      	mov	r1, r5
 800b0bc:	e7e9      	b.n	800b092 <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800b0be:	b10c      	cbz	r4, 800b0c4 <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800b0c0:	428c      	cmp	r4, r1
 800b0c2:	d9d5      	bls.n	800b070 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800b0c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b0c8:	4802      	ldr	r0, [pc, #8]	@ (800b0d4 <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 800b0ca:	b002      	add	sp, #8
 800b0cc:	f008 b918 	b.w	8013300 <get_memory>
 800b0d0:	4629      	mov	r1, r5
 800b0d2:	e7c6      	b.n	800b062 <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 800b0d4:	2000bf1c 	.word	0x2000bf1c

0800b0d8 <rmw_uxrce_find_static_input_buffer_by_owner>:
 800b0d8:	4b11      	ldr	r3, [pc, #68]	@ (800b120 <rmw_uxrce_find_static_input_buffer_by_owner+0x48>)
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	b530      	push	{r4, r5, lr}
 800b0de:	b1e3      	cbz	r3, 800b11a <rmw_uxrce_find_static_input_buffer_by_owner+0x42>
 800b0e0:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
 800b0e4:	f06f 4c00 	mvn.w	ip, #2147483648	@ 0x80000000
 800b0e8:	2400      	movs	r4, #0
 800b0ea:	e001      	b.n	800b0f0 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 800b0ec:	685b      	ldr	r3, [r3, #4]
 800b0ee:	b193      	cbz	r3, 800b116 <rmw_uxrce_find_static_input_buffer_by_owner+0x3e>
 800b0f0:	689a      	ldr	r2, [r3, #8]
 800b0f2:	f8d2 1814 	ldr.w	r1, [r2, #2068]	@ 0x814
 800b0f6:	4288      	cmp	r0, r1
 800b0f8:	d1f8      	bne.n	800b0ec <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 800b0fa:	f8d2 1818 	ldr.w	r1, [r2, #2072]	@ 0x818
 800b0fe:	f8d2 281c 	ldr.w	r2, [r2, #2076]	@ 0x81c
 800b102:	4571      	cmp	r1, lr
 800b104:	eb72 050c 	sbcs.w	r5, r2, ip
 800b108:	daf0      	bge.n	800b0ec <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 800b10a:	461c      	mov	r4, r3
 800b10c:	685b      	ldr	r3, [r3, #4]
 800b10e:	468e      	mov	lr, r1
 800b110:	4694      	mov	ip, r2
 800b112:	2b00      	cmp	r3, #0
 800b114:	d1ec      	bne.n	800b0f0 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 800b116:	4620      	mov	r0, r4
 800b118:	bd30      	pop	{r4, r5, pc}
 800b11a:	461c      	mov	r4, r3
 800b11c:	4620      	mov	r0, r4
 800b11e:	bd30      	pop	{r4, r5, pc}
 800b120:	2000bf1c 	.word	0x2000bf1c
 800b124:	00000000 	.word	0x00000000

0800b128 <rmw_uxrce_clean_expired_static_input_buffer>:
 800b128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b12c:	4b3c      	ldr	r3, [pc, #240]	@ (800b220 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 800b12e:	ed2d 8b06 	vpush	{d8-d10}
 800b132:	681f      	ldr	r7, [r3, #0]
 800b134:	b08d      	sub	sp, #52	@ 0x34
 800b136:	f009 fa21 	bl	801457c <rmw_uros_epoch_nanos>
 800b13a:	2f00      	cmp	r7, #0
 800b13c:	d05d      	beq.n	800b1fa <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 800b13e:	46b8      	mov	r8, r7
 800b140:	ed9f 8b31 	vldr	d8, [pc, #196]	@ 800b208 <rmw_uxrce_clean_expired_static_input_buffer+0xe0>
 800b144:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800b148:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 800b14c:	2b04      	cmp	r3, #4
 800b14e:	ed9f ab30 	vldr	d10, [pc, #192]	@ 800b210 <rmw_uxrce_clean_expired_static_input_buffer+0xe8>
 800b152:	ed9f 9b31 	vldr	d9, [pc, #196]	@ 800b218 <rmw_uxrce_clean_expired_static_input_buffer+0xf0>
 800b156:	4681      	mov	r9, r0
 800b158:	468a      	mov	sl, r1
 800b15a:	ac04      	add	r4, sp, #16
 800b15c:	d03f      	beq.n	800b1de <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 800b15e:	2b05      	cmp	r3, #5
 800b160:	d044      	beq.n	800b1ec <rmw_uxrce_clean_expired_static_input_buffer+0xc4>
 800b162:	2b03      	cmp	r3, #3
 800b164:	d03b      	beq.n	800b1de <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 800b166:	ed8d 8b04 	vstr	d8, [sp, #16]
 800b16a:	ed8d ab06 	vstr	d10, [sp, #24]
 800b16e:	ed8d 8b08 	vstr	d8, [sp, #32]
 800b172:	ed8d 8b0a 	vstr	d8, [sp, #40]	@ 0x28
 800b176:	ab08      	add	r3, sp, #32
 800b178:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800b17a:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800b17e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800b182:	f007 fef1 	bl	8012f68 <rmw_time_equal>
 800b186:	b118      	cbz	r0, 800b190 <rmw_uxrce_clean_expired_static_input_buffer+0x68>
 800b188:	ed8d 9b04 	vstr	d9, [sp, #16]
 800b18c:	ed8d 8b06 	vstr	d8, [sp, #24]
 800b190:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800b194:	f8d5 6818 	ldr.w	r6, [r5, #2072]	@ 0x818
 800b198:	f8d5 781c 	ldr.w	r7, [r5, #2076]	@ 0x81c
 800b19c:	f8d8 b004 	ldr.w	fp, [r8, #4]
 800b1a0:	f007 ff36 	bl	8013010 <rmw_time_total_nsec>
 800b1a4:	1830      	adds	r0, r6, r0
 800b1a6:	eb47 0101 	adc.w	r1, r7, r1
 800b1aa:	4548      	cmp	r0, r9
 800b1ac:	eb71 030a 	sbcs.w	r3, r1, sl
 800b1b0:	f505 6502 	add.w	r5, r5, #2080	@ 0x820
 800b1b4:	db05      	blt.n	800b1c2 <rmw_uxrce_clean_expired_static_input_buffer+0x9a>
 800b1b6:	e955 2302 	ldrd	r2, r3, [r5, #-8]
 800b1ba:	4591      	cmp	r9, r2
 800b1bc:	eb7a 0303 	sbcs.w	r3, sl, r3
 800b1c0:	da03      	bge.n	800b1ca <rmw_uxrce_clean_expired_static_input_buffer+0xa2>
 800b1c2:	4817      	ldr	r0, [pc, #92]	@ (800b220 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 800b1c4:	4641      	mov	r1, r8
 800b1c6:	f008 f8ab 	bl	8013320 <put_memory>
 800b1ca:	f1bb 0f00 	cmp.w	fp, #0
 800b1ce:	d014      	beq.n	800b1fa <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 800b1d0:	46d8      	mov	r8, fp
 800b1d2:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800b1d6:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 800b1da:	2b04      	cmp	r3, #4
 800b1dc:	d1bf      	bne.n	800b15e <rmw_uxrce_clean_expired_static_input_buffer+0x36>
 800b1de:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 800b1e2:	3340      	adds	r3, #64	@ 0x40
 800b1e4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800b1e6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800b1ea:	e7c0      	b.n	800b16e <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 800b1ec:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 800b1f0:	3348      	adds	r3, #72	@ 0x48
 800b1f2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800b1f4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800b1f8:	e7b9      	b.n	800b16e <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 800b1fa:	b00d      	add	sp, #52	@ 0x34
 800b1fc:	ecbd 8b06 	vpop	{d8-d10}
 800b200:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b204:	f3af 8000 	nop.w
	...
 800b210:	00000001 	.word	0x00000001
 800b214:	00000000 	.word	0x00000000
 800b218:	0000001e 	.word	0x0000001e
 800b21c:	00000000 	.word	0x00000000
 800b220:	2000bf1c 	.word	0x2000bf1c

0800b224 <run_xrce_session>:
 800b224:	b510      	push	{r4, lr}
 800b226:	788c      	ldrb	r4, [r1, #2]
 800b228:	b086      	sub	sp, #24
 800b22a:	2c01      	cmp	r4, #1
 800b22c:	f8ad 200e 	strh.w	r2, [sp, #14]
 800b230:	d00c      	beq.n	800b24c <run_xrce_session+0x28>
 800b232:	4619      	mov	r1, r3
 800b234:	2301      	movs	r3, #1
 800b236:	9300      	str	r3, [sp, #0]
 800b238:	f10d 020e 	add.w	r2, sp, #14
 800b23c:	f10d 0317 	add.w	r3, sp, #23
 800b240:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800b244:	f002 fc16 	bl	800da74 <uxr_run_session_until_all_status>
 800b248:	b006      	add	sp, #24
 800b24a:	bd10      	pop	{r4, pc}
 800b24c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800b250:	f002 f82a 	bl	800d2a8 <uxr_flash_output_streams>
 800b254:	4620      	mov	r0, r4
 800b256:	b006      	add	sp, #24
 800b258:	bd10      	pop	{r4, pc}
 800b25a:	bf00      	nop

0800b25c <convert_qos_profile>:
 800b25c:	7a4a      	ldrb	r2, [r1, #9]
 800b25e:	f891 c008 	ldrb.w	ip, [r1, #8]
 800b262:	2a02      	cmp	r2, #2
 800b264:	bf18      	it	ne
 800b266:	2200      	movne	r2, #0
 800b268:	7002      	strb	r2, [r0, #0]
 800b26a:	780a      	ldrb	r2, [r1, #0]
 800b26c:	8889      	ldrh	r1, [r1, #4]
 800b26e:	8081      	strh	r1, [r0, #4]
 800b270:	f1ac 0c02 	sub.w	ip, ip, #2
 800b274:	f1a2 0202 	sub.w	r2, r2, #2
 800b278:	fabc fc8c 	clz	ip, ip
 800b27c:	fab2 f282 	clz	r2, r2
 800b280:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 800b284:	0952      	lsrs	r2, r2, #5
 800b286:	f880 c001 	strb.w	ip, [r0, #1]
 800b28a:	7082      	strb	r2, [r0, #2]
 800b28c:	4770      	bx	lr
 800b28e:	bf00      	nop

0800b290 <generate_type_name>:
 800b290:	b530      	push	{r4, r5, lr}
 800b292:	2300      	movs	r3, #0
 800b294:	700b      	strb	r3, [r1, #0]
 800b296:	6803      	ldr	r3, [r0, #0]
 800b298:	b087      	sub	sp, #28
 800b29a:	4614      	mov	r4, r2
 800b29c:	b1d3      	cbz	r3, 800b2d4 <generate_type_name+0x44>
 800b29e:	4a0f      	ldr	r2, [pc, #60]	@ (800b2dc <generate_type_name+0x4c>)
 800b2a0:	4615      	mov	r5, r2
 800b2a2:	9203      	str	r2, [sp, #12]
 800b2a4:	9500      	str	r5, [sp, #0]
 800b2a6:	6842      	ldr	r2, [r0, #4]
 800b2a8:	480d      	ldr	r0, [pc, #52]	@ (800b2e0 <generate_type_name+0x50>)
 800b2aa:	9001      	str	r0, [sp, #4]
 800b2ac:	4608      	mov	r0, r1
 800b2ae:	490d      	ldr	r1, [pc, #52]	@ (800b2e4 <generate_type_name+0x54>)
 800b2b0:	9204      	str	r2, [sp, #16]
 800b2b2:	9105      	str	r1, [sp, #20]
 800b2b4:	9102      	str	r1, [sp, #8]
 800b2b6:	4a0c      	ldr	r2, [pc, #48]	@ (800b2e8 <generate_type_name+0x58>)
 800b2b8:	4621      	mov	r1, r4
 800b2ba:	f00c f9b1 	bl	8017620 <sniprintf>
 800b2be:	2800      	cmp	r0, #0
 800b2c0:	db05      	blt.n	800b2ce <generate_type_name+0x3e>
 800b2c2:	4284      	cmp	r4, r0
 800b2c4:	bfd4      	ite	le
 800b2c6:	2000      	movle	r0, #0
 800b2c8:	2001      	movgt	r0, #1
 800b2ca:	b007      	add	sp, #28
 800b2cc:	bd30      	pop	{r4, r5, pc}
 800b2ce:	2000      	movs	r0, #0
 800b2d0:	b007      	add	sp, #28
 800b2d2:	bd30      	pop	{r4, r5, pc}
 800b2d4:	4b05      	ldr	r3, [pc, #20]	@ (800b2ec <generate_type_name+0x5c>)
 800b2d6:	4a01      	ldr	r2, [pc, #4]	@ (800b2dc <generate_type_name+0x4c>)
 800b2d8:	461d      	mov	r5, r3
 800b2da:	e7e2      	b.n	800b2a2 <generate_type_name+0x12>
 800b2dc:	08018aac 	.word	0x08018aac
 800b2e0:	08018ac4 	.word	0x08018ac4
 800b2e4:	08018ac0 	.word	0x08018ac0
 800b2e8:	08018ab0 	.word	0x08018ab0
 800b2ec:	0801952c 	.word	0x0801952c

0800b2f0 <generate_topic_name>:
 800b2f0:	b510      	push	{r4, lr}
 800b2f2:	b082      	sub	sp, #8
 800b2f4:	4614      	mov	r4, r2
 800b2f6:	9000      	str	r0, [sp, #0]
 800b2f8:	4b08      	ldr	r3, [pc, #32]	@ (800b31c <generate_topic_name+0x2c>)
 800b2fa:	4a09      	ldr	r2, [pc, #36]	@ (800b320 <generate_topic_name+0x30>)
 800b2fc:	4608      	mov	r0, r1
 800b2fe:	4621      	mov	r1, r4
 800b300:	f00c f98e 	bl	8017620 <sniprintf>
 800b304:	2800      	cmp	r0, #0
 800b306:	db05      	blt.n	800b314 <generate_topic_name+0x24>
 800b308:	4284      	cmp	r4, r0
 800b30a:	bfd4      	ite	le
 800b30c:	2000      	movle	r0, #0
 800b30e:	2001      	movgt	r0, #1
 800b310:	b002      	add	sp, #8
 800b312:	bd10      	pop	{r4, pc}
 800b314:	2000      	movs	r0, #0
 800b316:	b002      	add	sp, #8
 800b318:	bd10      	pop	{r4, pc}
 800b31a:	bf00      	nop
 800b31c:	08018ad0 	.word	0x08018ad0
 800b320:	08018ac8 	.word	0x08018ac8

0800b324 <is_uxrce_rmw_identifier_valid>:
 800b324:	b510      	push	{r4, lr}
 800b326:	4604      	mov	r4, r0
 800b328:	b140      	cbz	r0, 800b33c <is_uxrce_rmw_identifier_valid+0x18>
 800b32a:	f008 f851 	bl	80133d0 <rmw_get_implementation_identifier>
 800b32e:	4601      	mov	r1, r0
 800b330:	4620      	mov	r0, r4
 800b332:	f7f4 ff4d 	bl	80001d0 <strcmp>
 800b336:	fab0 f080 	clz	r0, r0
 800b33a:	0940      	lsrs	r0, r0, #5
 800b33c:	bd10      	pop	{r4, pc}
 800b33e:	bf00      	nop

0800b340 <get_message_typesupport_handle>:
 800b340:	6883      	ldr	r3, [r0, #8]
 800b342:	4718      	bx	r3

0800b344 <get_message_typesupport_handle_function>:
 800b344:	b510      	push	{r4, lr}
 800b346:	4604      	mov	r4, r0
 800b348:	6800      	ldr	r0, [r0, #0]
 800b34a:	f7f4 ff41 	bl	80001d0 <strcmp>
 800b34e:	2800      	cmp	r0, #0
 800b350:	bf0c      	ite	eq
 800b352:	4620      	moveq	r0, r4
 800b354:	2000      	movne	r0, #0
 800b356:	bd10      	pop	{r4, pc}

0800b358 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray>:
 800b358:	4b04      	ldr	r3, [pc, #16]	@ (800b36c <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray+0x14>)
 800b35a:	681a      	ldr	r2, [r3, #0]
 800b35c:	b10a      	cbz	r2, 800b362 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray+0xa>
 800b35e:	4803      	ldr	r0, [pc, #12]	@ (800b36c <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray+0x14>)
 800b360:	4770      	bx	lr
 800b362:	4a03      	ldr	r2, [pc, #12]	@ (800b370 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray+0x18>)
 800b364:	4801      	ldr	r0, [pc, #4]	@ (800b36c <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray+0x14>)
 800b366:	6812      	ldr	r2, [r2, #0]
 800b368:	601a      	str	r2, [r3, #0]
 800b36a:	4770      	bx	lr
 800b36c:	20000030 	.word	0x20000030
 800b370:	20000194 	.word	0x20000194

0800b374 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray>:
 800b374:	4a02      	ldr	r2, [pc, #8]	@ (800b380 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray+0xc>)
 800b376:	4b03      	ldr	r3, [pc, #12]	@ (800b384 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray+0x10>)
 800b378:	6812      	ldr	r2, [r2, #0]
 800b37a:	601a      	str	r2, [r3, #0]
 800b37c:	4770      	bx	lr
 800b37e:	bf00      	nop
 800b380:	20000194 	.word	0x20000194
 800b384:	20000030 	.word	0x20000030

0800b388 <std_msgs__msg__Float64MultiArray__rosidl_typesupport_introspection_c__size_function__Float64MultiArray__data>:
 800b388:	6840      	ldr	r0, [r0, #4]
 800b38a:	4770      	bx	lr

0800b38c <std_msgs__msg__Float64MultiArray__rosidl_typesupport_introspection_c__get_const_function__Float64MultiArray__data>:
 800b38c:	6800      	ldr	r0, [r0, #0]
 800b38e:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800b392:	4770      	bx	lr

0800b394 <std_msgs__msg__Float64MultiArray__rosidl_typesupport_introspection_c__fetch_function__Float64MultiArray__data>:
 800b394:	6803      	ldr	r3, [r0, #0]
 800b396:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800b39a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b39e:	e9c2 0100 	strd	r0, r1, [r2]
 800b3a2:	4770      	bx	lr

0800b3a4 <std_msgs__msg__Float64MultiArray__rosidl_typesupport_introspection_c__assign_function__Float64MultiArray__data>:
 800b3a4:	6803      	ldr	r3, [r0, #0]
 800b3a6:	ed92 7b00 	vldr	d7, [r2]
 800b3aa:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800b3ae:	ed81 7b00 	vstr	d7, [r1]
 800b3b2:	4770      	bx	lr

0800b3b4 <std_msgs__msg__Float64MultiArray__rosidl_typesupport_introspection_c__Float64MultiArray_init_function>:
 800b3b4:	f009 b94a 	b.w	801464c <std_msgs__msg__Float64MultiArray__init>

0800b3b8 <std_msgs__msg__Float64MultiArray__rosidl_typesupport_introspection_c__Float64MultiArray_fini_function>:
 800b3b8:	f009 b96c 	b.w	8014694 <std_msgs__msg__Float64MultiArray__fini>

0800b3bc <std_msgs__msg__Float64MultiArray__rosidl_typesupport_introspection_c__resize_function__Float64MultiArray__data>:
 800b3bc:	b510      	push	{r4, lr}
 800b3be:	b082      	sub	sp, #8
 800b3c0:	4604      	mov	r4, r0
 800b3c2:	9101      	str	r1, [sp, #4]
 800b3c4:	f009 f900 	bl	80145c8 <rosidl_runtime_c__double__Sequence__fini>
 800b3c8:	9901      	ldr	r1, [sp, #4]
 800b3ca:	4620      	mov	r0, r4
 800b3cc:	b002      	add	sp, #8
 800b3ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b3d2:	f009 b8e1 	b.w	8014598 <rosidl_runtime_c__double__Sequence__init>
 800b3d6:	bf00      	nop

0800b3d8 <std_msgs__msg__Float64MultiArray__rosidl_typesupport_introspection_c__get_function__Float64MultiArray__data>:
 800b3d8:	6800      	ldr	r0, [r0, #0]
 800b3da:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800b3de:	4770      	bx	lr

0800b3e0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray>:
 800b3e0:	b508      	push	{r3, lr}
 800b3e2:	f000 f857 	bl	800b494 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout>
 800b3e6:	4b06      	ldr	r3, [pc, #24]	@ (800b400 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray+0x20>)
 800b3e8:	4906      	ldr	r1, [pc, #24]	@ (800b404 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray+0x24>)
 800b3ea:	681a      	ldr	r2, [r3, #0]
 800b3ec:	60c8      	str	r0, [r1, #12]
 800b3ee:	b10a      	cbz	r2, 800b3f4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray+0x14>
 800b3f0:	4803      	ldr	r0, [pc, #12]	@ (800b400 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray+0x20>)
 800b3f2:	bd08      	pop	{r3, pc}
 800b3f4:	4a04      	ldr	r2, [pc, #16]	@ (800b408 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray+0x28>)
 800b3f6:	4802      	ldr	r0, [pc, #8]	@ (800b400 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray+0x20>)
 800b3f8:	6812      	ldr	r2, [r2, #0]
 800b3fa:	601a      	str	r2, [r3, #0]
 800b3fc:	bd08      	pop	{r3, pc}
 800b3fe:	bf00      	nop
 800b400:	200000b4 	.word	0x200000b4
 800b404:	2000003c 	.word	0x2000003c
 800b408:	20000198 	.word	0x20000198

0800b40c <std_msgs__msg__MultiArrayLayout__rosidl_typesupport_introspection_c__size_function__MultiArrayLayout__dim>:
 800b40c:	6840      	ldr	r0, [r0, #4]
 800b40e:	4770      	bx	lr

0800b410 <std_msgs__msg__MultiArrayLayout__rosidl_typesupport_introspection_c__get_const_function__MultiArrayLayout__dim>:
 800b410:	6800      	ldr	r0, [r0, #0]
 800b412:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800b416:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 800b41a:	4770      	bx	lr

0800b41c <std_msgs__msg__MultiArrayLayout__rosidl_typesupport_introspection_c__fetch_function__MultiArrayLayout__dim>:
 800b41c:	6803      	ldr	r3, [r0, #0]
 800b41e:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800b422:	b500      	push	{lr}
 800b424:	eb03 0e81 	add.w	lr, r3, r1, lsl #2
 800b428:	4694      	mov	ip, r2
 800b42a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800b42e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800b432:	f8de 3000 	ldr.w	r3, [lr]
 800b436:	f8cc 3000 	str.w	r3, [ip]
 800b43a:	f85d fb04 	ldr.w	pc, [sp], #4
 800b43e:	bf00      	nop

0800b440 <std_msgs__msg__MultiArrayLayout__rosidl_typesupport_introspection_c__assign_function__MultiArrayLayout__dim>:
 800b440:	6803      	ldr	r3, [r0, #0]
 800b442:	b500      	push	{lr}
 800b444:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800b448:	4696      	mov	lr, r2
 800b44a:	eb03 0c81 	add.w	ip, r3, r1, lsl #2
 800b44e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800b452:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800b456:	f8de 3000 	ldr.w	r3, [lr]
 800b45a:	f8cc 3000 	str.w	r3, [ip]
 800b45e:	f85d fb04 	ldr.w	pc, [sp], #4
 800b462:	bf00      	nop

0800b464 <std_msgs__msg__MultiArrayLayout__rosidl_typesupport_introspection_c__MultiArrayLayout_init_function>:
 800b464:	f009 b9ac 	b.w	80147c0 <std_msgs__msg__MultiArrayLayout__init>

0800b468 <std_msgs__msg__MultiArrayLayout__rosidl_typesupport_introspection_c__MultiArrayLayout_fini_function>:
 800b468:	f009 b9bc 	b.w	80147e4 <std_msgs__msg__MultiArrayLayout__fini>

0800b46c <std_msgs__msg__MultiArrayLayout__rosidl_typesupport_introspection_c__resize_function__MultiArrayLayout__dim>:
 800b46c:	b510      	push	{r4, lr}
 800b46e:	b082      	sub	sp, #8
 800b470:	4604      	mov	r4, r0
 800b472:	9101      	str	r1, [sp, #4]
 800b474:	f009 f97c 	bl	8014770 <std_msgs__msg__MultiArrayDimension__Sequence__fini>
 800b478:	9901      	ldr	r1, [sp, #4]
 800b47a:	4620      	mov	r0, r4
 800b47c:	b002      	add	sp, #8
 800b47e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b482:	f009 b971 	b.w	8014768 <std_msgs__msg__MultiArrayDimension__Sequence__init>
 800b486:	bf00      	nop

0800b488 <std_msgs__msg__MultiArrayLayout__rosidl_typesupport_introspection_c__get_function__MultiArrayLayout__dim>:
 800b488:	6800      	ldr	r0, [r0, #0]
 800b48a:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800b48e:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 800b492:	4770      	bx	lr

0800b494 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout>:
 800b494:	b508      	push	{r3, lr}
 800b496:	f009 f9ad 	bl	80147f4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension>
 800b49a:	4b06      	ldr	r3, [pc, #24]	@ (800b4b4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout+0x20>)
 800b49c:	4906      	ldr	r1, [pc, #24]	@ (800b4b8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout+0x24>)
 800b49e:	681a      	ldr	r2, [r3, #0]
 800b4a0:	60c8      	str	r0, [r1, #12]
 800b4a2:	b10a      	cbz	r2, 800b4a8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout+0x14>
 800b4a4:	4803      	ldr	r0, [pc, #12]	@ (800b4b4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout+0x20>)
 800b4a6:	bd08      	pop	{r3, pc}
 800b4a8:	4a04      	ldr	r2, [pc, #16]	@ (800b4bc <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout+0x28>)
 800b4aa:	4802      	ldr	r0, [pc, #8]	@ (800b4b4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout+0x20>)
 800b4ac:	6812      	ldr	r2, [r2, #0]
 800b4ae:	601a      	str	r2, [r3, #0]
 800b4b0:	bd08      	pop	{r3, pc}
 800b4b2:	bf00      	nop
 800b4b4:	20000138 	.word	0x20000138
 800b4b8:	200000c0 	.word	0x200000c0
 800b4bc:	20000198 	.word	0x20000198

0800b4c0 <_Float64MultiArray__max_serialized_size>:
 800b4c0:	b500      	push	{lr}
 800b4c2:	b083      	sub	sp, #12
 800b4c4:	2301      	movs	r3, #1
 800b4c6:	2100      	movs	r1, #0
 800b4c8:	f10d 0007 	add.w	r0, sp, #7
 800b4cc:	f88d 3007 	strb.w	r3, [sp, #7]
 800b4d0:	f000 f91c 	bl	800b70c <max_serialized_size_std_msgs__msg__MultiArrayLayout>
 800b4d4:	b003      	add	sp, #12
 800b4d6:	f85d fb04 	ldr.w	pc, [sp], #4
 800b4da:	bf00      	nop

0800b4dc <get_serialized_size_std_msgs__msg__Float64MultiArray>:
 800b4dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4de:	4604      	mov	r4, r0
 800b4e0:	b160      	cbz	r0, 800b4fc <get_serialized_size_std_msgs__msg__Float64MultiArray+0x20>
 800b4e2:	460d      	mov	r5, r1
 800b4e4:	f000 f8b6 	bl	800b654 <get_serialized_size_std_msgs__msg__MultiArrayLayout>
 800b4e8:	182e      	adds	r6, r5, r0
 800b4ea:	4630      	mov	r0, r6
 800b4ec:	2104      	movs	r1, #4
 800b4ee:	6967      	ldr	r7, [r4, #20]
 800b4f0:	f001 fa98 	bl	800ca24 <ucdr_alignment>
 800b4f4:	1d03      	adds	r3, r0, #4
 800b4f6:	441e      	add	r6, r3
 800b4f8:	b90f      	cbnz	r7, 800b4fe <get_serialized_size_std_msgs__msg__Float64MultiArray+0x22>
 800b4fa:	1b70      	subs	r0, r6, r5
 800b4fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b4fe:	4630      	mov	r0, r6
 800b500:	2108      	movs	r1, #8
 800b502:	f001 fa8f 	bl	800ca24 <ucdr_alignment>
 800b506:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 800b50a:	181e      	adds	r6, r3, r0
 800b50c:	1b70      	subs	r0, r6, r5
 800b50e:	e7f5      	b.n	800b4fc <get_serialized_size_std_msgs__msg__Float64MultiArray+0x20>

0800b510 <_Float64MultiArray__cdr_deserialize>:
 800b510:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b512:	460c      	mov	r4, r1
 800b514:	b083      	sub	sp, #12
 800b516:	b1d1      	cbz	r1, 800b54e <_Float64MultiArray__cdr_deserialize+0x3e>
 800b518:	4606      	mov	r6, r0
 800b51a:	f000 f901 	bl	800b720 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout>
 800b51e:	6843      	ldr	r3, [r0, #4]
 800b520:	4621      	mov	r1, r4
 800b522:	68db      	ldr	r3, [r3, #12]
 800b524:	4630      	mov	r0, r6
 800b526:	4798      	blx	r3
 800b528:	69a7      	ldr	r7, [r4, #24]
 800b52a:	6921      	ldr	r1, [r4, #16]
 800b52c:	ab01      	add	r3, sp, #4
 800b52e:	463a      	mov	r2, r7
 800b530:	4630      	mov	r0, r6
 800b532:	f001 fb4d 	bl	800cbd0 <ucdr_deserialize_sequence_double>
 800b536:	9b01      	ldr	r3, [sp, #4]
 800b538:	4605      	mov	r5, r0
 800b53a:	b920      	cbnz	r0, 800b546 <_Float64MultiArray__cdr_deserialize+0x36>
 800b53c:	429f      	cmp	r7, r3
 800b53e:	d30a      	bcc.n	800b556 <_Float64MultiArray__cdr_deserialize+0x46>
 800b540:	4628      	mov	r0, r5
 800b542:	b003      	add	sp, #12
 800b544:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b546:	4628      	mov	r0, r5
 800b548:	6163      	str	r3, [r4, #20]
 800b54a:	b003      	add	sp, #12
 800b54c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b54e:	460d      	mov	r5, r1
 800b550:	4628      	mov	r0, r5
 800b552:	b003      	add	sp, #12
 800b554:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b556:	2301      	movs	r3, #1
 800b558:	75b0      	strb	r0, [r6, #22]
 800b55a:	7573      	strb	r3, [r6, #21]
 800b55c:	4630      	mov	r0, r6
 800b55e:	6165      	str	r5, [r4, #20]
 800b560:	2108      	movs	r1, #8
 800b562:	f001 fa75 	bl	800ca50 <ucdr_align_to>
 800b566:	9901      	ldr	r1, [sp, #4]
 800b568:	4630      	mov	r0, r6
 800b56a:	00c9      	lsls	r1, r1, #3
 800b56c:	f001 faa6 	bl	800cabc <ucdr_advance_buffer>
 800b570:	4628      	mov	r0, r5
 800b572:	b003      	add	sp, #12
 800b574:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b576:	bf00      	nop

0800b578 <_Float64MultiArray__cdr_serialize>:
 800b578:	b180      	cbz	r0, 800b59c <_Float64MultiArray__cdr_serialize+0x24>
 800b57a:	b538      	push	{r3, r4, r5, lr}
 800b57c:	460d      	mov	r5, r1
 800b57e:	4604      	mov	r4, r0
 800b580:	f000 f8ce 	bl	800b720 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout>
 800b584:	6843      	ldr	r3, [r0, #4]
 800b586:	4629      	mov	r1, r5
 800b588:	689b      	ldr	r3, [r3, #8]
 800b58a:	4620      	mov	r0, r4
 800b58c:	4798      	blx	r3
 800b58e:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
 800b592:	4628      	mov	r0, r5
 800b594:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b598:	f001 bb08 	b.w	800cbac <ucdr_serialize_sequence_double>
 800b59c:	4770      	bx	lr
 800b59e:	bf00      	nop

0800b5a0 <_Float64MultiArray__get_serialized_size>:
 800b5a0:	b570      	push	{r4, r5, r6, lr}
 800b5a2:	4604      	mov	r4, r0
 800b5a4:	b150      	cbz	r0, 800b5bc <_Float64MultiArray__get_serialized_size+0x1c>
 800b5a6:	2100      	movs	r1, #0
 800b5a8:	f000 f854 	bl	800b654 <get_serialized_size_std_msgs__msg__MultiArrayLayout>
 800b5ac:	2104      	movs	r1, #4
 800b5ae:	6966      	ldr	r6, [r4, #20]
 800b5b0:	4605      	mov	r5, r0
 800b5b2:	f001 fa37 	bl	800ca24 <ucdr_alignment>
 800b5b6:	4428      	add	r0, r5
 800b5b8:	1d04      	adds	r4, r0, #4
 800b5ba:	b90e      	cbnz	r6, 800b5c0 <_Float64MultiArray__get_serialized_size+0x20>
 800b5bc:	4620      	mov	r0, r4
 800b5be:	bd70      	pop	{r4, r5, r6, pc}
 800b5c0:	4620      	mov	r0, r4
 800b5c2:	2108      	movs	r1, #8
 800b5c4:	f001 fa2e 	bl	800ca24 <ucdr_alignment>
 800b5c8:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800b5cc:	4404      	add	r4, r0
 800b5ce:	4620      	mov	r0, r4
 800b5d0:	bd70      	pop	{r4, r5, r6, pc}
 800b5d2:	bf00      	nop

0800b5d4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray>:
 800b5d4:	4800      	ldr	r0, [pc, #0]	@ (800b5d8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray+0x4>)
 800b5d6:	4770      	bx	lr
 800b5d8:	20000144 	.word	0x20000144

0800b5dc <_MultiArrayLayout__max_serialized_size>:
 800b5dc:	b508      	push	{r3, lr}
 800b5de:	2104      	movs	r1, #4
 800b5e0:	2000      	movs	r0, #0
 800b5e2:	f001 fa1f 	bl	800ca24 <ucdr_alignment>
 800b5e6:	3004      	adds	r0, #4
 800b5e8:	bd08      	pop	{r3, pc}
 800b5ea:	bf00      	nop

0800b5ec <get_serialized_size_std_msgs__msg__MultiArrayLayout.part.0>:
 800b5ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b5f0:	4689      	mov	r9, r1
 800b5f2:	f8d0 8004 	ldr.w	r8, [r0, #4]
 800b5f6:	4607      	mov	r7, r0
 800b5f8:	2104      	movs	r1, #4
 800b5fa:	4648      	mov	r0, r9
 800b5fc:	f001 fa12 	bl	800ca24 <ucdr_alignment>
 800b600:	f109 0304 	add.w	r3, r9, #4
 800b604:	18c6      	adds	r6, r0, r3
 800b606:	f1b8 0f00 	cmp.w	r8, #0
 800b60a:	d018      	beq.n	800b63e <get_serialized_size_std_msgs__msg__MultiArrayLayout.part.0+0x52>
 800b60c:	2500      	movs	r5, #0
 800b60e:	f009 f98f 	bl	8014930 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension>
 800b612:	683a      	ldr	r2, [r7, #0]
 800b614:	6843      	ldr	r3, [r0, #4]
 800b616:	eb05 0085 	add.w	r0, r5, r5, lsl #2
 800b61a:	4631      	mov	r1, r6
 800b61c:	695b      	ldr	r3, [r3, #20]
 800b61e:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 800b622:	4798      	blx	r3
 800b624:	4604      	mov	r4, r0
 800b626:	2c04      	cmp	r4, #4
 800b628:	4621      	mov	r1, r4
 800b62a:	4630      	mov	r0, r6
 800b62c:	bf28      	it	cs
 800b62e:	2104      	movcs	r1, #4
 800b630:	f001 f9f8 	bl	800ca24 <ucdr_alignment>
 800b634:	3501      	adds	r5, #1
 800b636:	4404      	add	r4, r0
 800b638:	45a8      	cmp	r8, r5
 800b63a:	4426      	add	r6, r4
 800b63c:	d1e7      	bne.n	800b60e <get_serialized_size_std_msgs__msg__MultiArrayLayout.part.0+0x22>
 800b63e:	2104      	movs	r1, #4
 800b640:	4630      	mov	r0, r6
 800b642:	f001 f9ef 	bl	800ca24 <ucdr_alignment>
 800b646:	f1c9 0904 	rsb	r9, r9, #4
 800b64a:	444e      	add	r6, r9
 800b64c:	4430      	add	r0, r6
 800b64e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b652:	bf00      	nop

0800b654 <get_serialized_size_std_msgs__msg__MultiArrayLayout>:
 800b654:	b108      	cbz	r0, 800b65a <get_serialized_size_std_msgs__msg__MultiArrayLayout+0x6>
 800b656:	f7ff bfc9 	b.w	800b5ec <get_serialized_size_std_msgs__msg__MultiArrayLayout.part.0>
 800b65a:	4770      	bx	lr

0800b65c <_MultiArrayLayout__get_serialized_size>:
 800b65c:	b110      	cbz	r0, 800b664 <_MultiArrayLayout__get_serialized_size+0x8>
 800b65e:	2100      	movs	r1, #0
 800b660:	f7ff bfc4 	b.w	800b5ec <get_serialized_size_std_msgs__msg__MultiArrayLayout.part.0>
 800b664:	4770      	bx	lr
 800b666:	bf00      	nop

0800b668 <_MultiArrayLayout__cdr_deserialize>:
 800b668:	b349      	cbz	r1, 800b6be <_MultiArrayLayout__cdr_deserialize+0x56>
 800b66a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b66c:	460e      	mov	r6, r1
 800b66e:	b083      	sub	sp, #12
 800b670:	a901      	add	r1, sp, #4
 800b672:	4607      	mov	r7, r0
 800b674:	f000 fbcc 	bl	800be10 <ucdr_deserialize_uint32_t>
 800b678:	9b01      	ldr	r3, [sp, #4]
 800b67a:	68b2      	ldr	r2, [r6, #8]
 800b67c:	429a      	cmp	r2, r3
 800b67e:	d31b      	bcc.n	800b6b8 <_MultiArrayLayout__cdr_deserialize+0x50>
 800b680:	6073      	str	r3, [r6, #4]
 800b682:	b18b      	cbz	r3, 800b6a8 <_MultiArrayLayout__cdr_deserialize+0x40>
 800b684:	2400      	movs	r4, #0
 800b686:	4625      	mov	r5, r4
 800b688:	e002      	b.n	800b690 <_MultiArrayLayout__cdr_deserialize+0x28>
 800b68a:	9b01      	ldr	r3, [sp, #4]
 800b68c:	429d      	cmp	r5, r3
 800b68e:	d20b      	bcs.n	800b6a8 <_MultiArrayLayout__cdr_deserialize+0x40>
 800b690:	f009 f94e 	bl	8014930 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension>
 800b694:	6831      	ldr	r1, [r6, #0]
 800b696:	6843      	ldr	r3, [r0, #4]
 800b698:	4421      	add	r1, r4
 800b69a:	68db      	ldr	r3, [r3, #12]
 800b69c:	4638      	mov	r0, r7
 800b69e:	4798      	blx	r3
 800b6a0:	3501      	adds	r5, #1
 800b6a2:	3414      	adds	r4, #20
 800b6a4:	2800      	cmp	r0, #0
 800b6a6:	d1f0      	bne.n	800b68a <_MultiArrayLayout__cdr_deserialize+0x22>
 800b6a8:	f106 010c 	add.w	r1, r6, #12
 800b6ac:	4638      	mov	r0, r7
 800b6ae:	b003      	add	sp, #12
 800b6b0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800b6b4:	f000 bbac 	b.w	800be10 <ucdr_deserialize_uint32_t>
 800b6b8:	2000      	movs	r0, #0
 800b6ba:	b003      	add	sp, #12
 800b6bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b6be:	2000      	movs	r0, #0
 800b6c0:	4770      	bx	lr
 800b6c2:	bf00      	nop

0800b6c4 <_MultiArrayLayout__cdr_serialize>:
 800b6c4:	b308      	cbz	r0, 800b70a <_MultiArrayLayout__cdr_serialize+0x46>
 800b6c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6c8:	6847      	ldr	r7, [r0, #4]
 800b6ca:	460e      	mov	r6, r1
 800b6cc:	4605      	mov	r5, r0
 800b6ce:	4608      	mov	r0, r1
 800b6d0:	4639      	mov	r1, r7
 800b6d2:	f000 fa6d 	bl	800bbb0 <ucdr_serialize_uint32_t>
 800b6d6:	b190      	cbz	r0, 800b6fe <_MultiArrayLayout__cdr_serialize+0x3a>
 800b6d8:	b18f      	cbz	r7, 800b6fe <_MultiArrayLayout__cdr_serialize+0x3a>
 800b6da:	2400      	movs	r4, #0
 800b6dc:	e001      	b.n	800b6e2 <_MultiArrayLayout__cdr_serialize+0x1e>
 800b6de:	42a7      	cmp	r7, r4
 800b6e0:	d00d      	beq.n	800b6fe <_MultiArrayLayout__cdr_serialize+0x3a>
 800b6e2:	f009 f925 	bl	8014930 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension>
 800b6e6:	682a      	ldr	r2, [r5, #0]
 800b6e8:	6843      	ldr	r3, [r0, #4]
 800b6ea:	eb04 0084 	add.w	r0, r4, r4, lsl #2
 800b6ee:	689b      	ldr	r3, [r3, #8]
 800b6f0:	4631      	mov	r1, r6
 800b6f2:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 800b6f6:	3401      	adds	r4, #1
 800b6f8:	4798      	blx	r3
 800b6fa:	2800      	cmp	r0, #0
 800b6fc:	d1ef      	bne.n	800b6de <_MultiArrayLayout__cdr_serialize+0x1a>
 800b6fe:	68e9      	ldr	r1, [r5, #12]
 800b700:	4630      	mov	r0, r6
 800b702:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b706:	f000 ba53 	b.w	800bbb0 <ucdr_serialize_uint32_t>
 800b70a:	4770      	bx	lr

0800b70c <max_serialized_size_std_msgs__msg__MultiArrayLayout>:
 800b70c:	b508      	push	{r3, lr}
 800b70e:	4603      	mov	r3, r0
 800b710:	2200      	movs	r2, #0
 800b712:	4608      	mov	r0, r1
 800b714:	701a      	strb	r2, [r3, #0]
 800b716:	2104      	movs	r1, #4
 800b718:	f001 f984 	bl	800ca24 <ucdr_alignment>
 800b71c:	3004      	adds	r0, #4
 800b71e:	bd08      	pop	{r3, pc}

0800b720 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout>:
 800b720:	4800      	ldr	r0, [pc, #0]	@ (800b724 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout+0x4>)
 800b722:	4770      	bx	lr
 800b724:	2000016c 	.word	0x2000016c

0800b728 <ucdr_serialize_bool>:
 800b728:	b538      	push	{r3, r4, r5, lr}
 800b72a:	460d      	mov	r5, r1
 800b72c:	2101      	movs	r1, #1
 800b72e:	4604      	mov	r4, r0
 800b730:	f001 f92c 	bl	800c98c <ucdr_check_final_buffer_behavior>
 800b734:	b148      	cbz	r0, 800b74a <ucdr_serialize_bool+0x22>
 800b736:	68a3      	ldr	r3, [r4, #8]
 800b738:	701d      	strb	r5, [r3, #0]
 800b73a:	68a2      	ldr	r2, [r4, #8]
 800b73c:	6923      	ldr	r3, [r4, #16]
 800b73e:	2101      	movs	r1, #1
 800b740:	440a      	add	r2, r1
 800b742:	440b      	add	r3, r1
 800b744:	60a2      	str	r2, [r4, #8]
 800b746:	6123      	str	r3, [r4, #16]
 800b748:	7561      	strb	r1, [r4, #21]
 800b74a:	7da0      	ldrb	r0, [r4, #22]
 800b74c:	f080 0001 	eor.w	r0, r0, #1
 800b750:	bd38      	pop	{r3, r4, r5, pc}
 800b752:	bf00      	nop

0800b754 <ucdr_deserialize_bool>:
 800b754:	b538      	push	{r3, r4, r5, lr}
 800b756:	460d      	mov	r5, r1
 800b758:	2101      	movs	r1, #1
 800b75a:	4604      	mov	r4, r0
 800b75c:	f001 f916 	bl	800c98c <ucdr_check_final_buffer_behavior>
 800b760:	b160      	cbz	r0, 800b77c <ucdr_deserialize_bool+0x28>
 800b762:	68a2      	ldr	r2, [r4, #8]
 800b764:	6923      	ldr	r3, [r4, #16]
 800b766:	f812 1b01 	ldrb.w	r1, [r2], #1
 800b76a:	3900      	subs	r1, #0
 800b76c:	bf18      	it	ne
 800b76e:	2101      	movne	r1, #1
 800b770:	7029      	strb	r1, [r5, #0]
 800b772:	3301      	adds	r3, #1
 800b774:	2101      	movs	r1, #1
 800b776:	60a2      	str	r2, [r4, #8]
 800b778:	6123      	str	r3, [r4, #16]
 800b77a:	7561      	strb	r1, [r4, #21]
 800b77c:	7da0      	ldrb	r0, [r4, #22]
 800b77e:	f080 0001 	eor.w	r0, r0, #1
 800b782:	bd38      	pop	{r3, r4, r5, pc}

0800b784 <ucdr_serialize_uint8_t>:
 800b784:	b538      	push	{r3, r4, r5, lr}
 800b786:	460d      	mov	r5, r1
 800b788:	2101      	movs	r1, #1
 800b78a:	4604      	mov	r4, r0
 800b78c:	f001 f8fe 	bl	800c98c <ucdr_check_final_buffer_behavior>
 800b790:	b148      	cbz	r0, 800b7a6 <ucdr_serialize_uint8_t+0x22>
 800b792:	68a3      	ldr	r3, [r4, #8]
 800b794:	701d      	strb	r5, [r3, #0]
 800b796:	68a2      	ldr	r2, [r4, #8]
 800b798:	6923      	ldr	r3, [r4, #16]
 800b79a:	2101      	movs	r1, #1
 800b79c:	440a      	add	r2, r1
 800b79e:	440b      	add	r3, r1
 800b7a0:	60a2      	str	r2, [r4, #8]
 800b7a2:	6123      	str	r3, [r4, #16]
 800b7a4:	7561      	strb	r1, [r4, #21]
 800b7a6:	7da0      	ldrb	r0, [r4, #22]
 800b7a8:	f080 0001 	eor.w	r0, r0, #1
 800b7ac:	bd38      	pop	{r3, r4, r5, pc}
 800b7ae:	bf00      	nop

0800b7b0 <ucdr_deserialize_uint8_t>:
 800b7b0:	b538      	push	{r3, r4, r5, lr}
 800b7b2:	460d      	mov	r5, r1
 800b7b4:	2101      	movs	r1, #1
 800b7b6:	4604      	mov	r4, r0
 800b7b8:	f001 f8e8 	bl	800c98c <ucdr_check_final_buffer_behavior>
 800b7bc:	b150      	cbz	r0, 800b7d4 <ucdr_deserialize_uint8_t+0x24>
 800b7be:	68a3      	ldr	r3, [r4, #8]
 800b7c0:	781b      	ldrb	r3, [r3, #0]
 800b7c2:	702b      	strb	r3, [r5, #0]
 800b7c4:	68a2      	ldr	r2, [r4, #8]
 800b7c6:	6923      	ldr	r3, [r4, #16]
 800b7c8:	2101      	movs	r1, #1
 800b7ca:	440a      	add	r2, r1
 800b7cc:	440b      	add	r3, r1
 800b7ce:	60a2      	str	r2, [r4, #8]
 800b7d0:	6123      	str	r3, [r4, #16]
 800b7d2:	7561      	strb	r1, [r4, #21]
 800b7d4:	7da0      	ldrb	r0, [r4, #22]
 800b7d6:	f080 0001 	eor.w	r0, r0, #1
 800b7da:	bd38      	pop	{r3, r4, r5, pc}

0800b7dc <ucdr_serialize_uint16_t>:
 800b7dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b7e0:	b082      	sub	sp, #8
 800b7e2:	460b      	mov	r3, r1
 800b7e4:	2102      	movs	r1, #2
 800b7e6:	4604      	mov	r4, r0
 800b7e8:	f8ad 3006 	strh.w	r3, [sp, #6]
 800b7ec:	f001 f922 	bl	800ca34 <ucdr_buffer_alignment>
 800b7f0:	4601      	mov	r1, r0
 800b7f2:	4620      	mov	r0, r4
 800b7f4:	7d67      	ldrb	r7, [r4, #21]
 800b7f6:	f001 f961 	bl	800cabc <ucdr_advance_buffer>
 800b7fa:	2102      	movs	r1, #2
 800b7fc:	4620      	mov	r0, r4
 800b7fe:	f001 f8b9 	bl	800c974 <ucdr_check_buffer_available_for>
 800b802:	bb78      	cbnz	r0, 800b864 <ucdr_serialize_uint16_t+0x88>
 800b804:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800b808:	42ab      	cmp	r3, r5
 800b80a:	d926      	bls.n	800b85a <ucdr_serialize_uint16_t+0x7e>
 800b80c:	1b5e      	subs	r6, r3, r5
 800b80e:	60a3      	str	r3, [r4, #8]
 800b810:	6923      	ldr	r3, [r4, #16]
 800b812:	f1c6 0802 	rsb	r8, r6, #2
 800b816:	4433      	add	r3, r6
 800b818:	6123      	str	r3, [r4, #16]
 800b81a:	4641      	mov	r1, r8
 800b81c:	4620      	mov	r0, r4
 800b81e:	f001 f8b5 	bl	800c98c <ucdr_check_final_buffer_behavior>
 800b822:	2800      	cmp	r0, #0
 800b824:	d03b      	beq.n	800b89e <ucdr_serialize_uint16_t+0xc2>
 800b826:	7d23      	ldrb	r3, [r4, #20]
 800b828:	2b01      	cmp	r3, #1
 800b82a:	d04a      	beq.n	800b8c2 <ucdr_serialize_uint16_t+0xe6>
 800b82c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b830:	702b      	strb	r3, [r5, #0]
 800b832:	2e00      	cmp	r6, #0
 800b834:	d040      	beq.n	800b8b8 <ucdr_serialize_uint16_t+0xdc>
 800b836:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800b83a:	706b      	strb	r3, [r5, #1]
 800b83c:	6923      	ldr	r3, [r4, #16]
 800b83e:	68a2      	ldr	r2, [r4, #8]
 800b840:	7da0      	ldrb	r0, [r4, #22]
 800b842:	3302      	adds	r3, #2
 800b844:	1b9e      	subs	r6, r3, r6
 800b846:	4442      	add	r2, r8
 800b848:	2302      	movs	r3, #2
 800b84a:	f080 0001 	eor.w	r0, r0, #1
 800b84e:	60a2      	str	r2, [r4, #8]
 800b850:	6126      	str	r6, [r4, #16]
 800b852:	7563      	strb	r3, [r4, #21]
 800b854:	b002      	add	sp, #8
 800b856:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b85a:	2102      	movs	r1, #2
 800b85c:	4620      	mov	r0, r4
 800b85e:	f001 f895 	bl	800c98c <ucdr_check_final_buffer_behavior>
 800b862:	b190      	cbz	r0, 800b88a <ucdr_serialize_uint16_t+0xae>
 800b864:	7d23      	ldrb	r3, [r4, #20]
 800b866:	2b01      	cmp	r3, #1
 800b868:	68a3      	ldr	r3, [r4, #8]
 800b86a:	d014      	beq.n	800b896 <ucdr_serialize_uint16_t+0xba>
 800b86c:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800b870:	701a      	strb	r2, [r3, #0]
 800b872:	68a3      	ldr	r3, [r4, #8]
 800b874:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b878:	705a      	strb	r2, [r3, #1]
 800b87a:	68a2      	ldr	r2, [r4, #8]
 800b87c:	6923      	ldr	r3, [r4, #16]
 800b87e:	3202      	adds	r2, #2
 800b880:	3302      	adds	r3, #2
 800b882:	2102      	movs	r1, #2
 800b884:	60a2      	str	r2, [r4, #8]
 800b886:	6123      	str	r3, [r4, #16]
 800b888:	7561      	strb	r1, [r4, #21]
 800b88a:	7da0      	ldrb	r0, [r4, #22]
 800b88c:	f080 0001 	eor.w	r0, r0, #1
 800b890:	b002      	add	sp, #8
 800b892:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b896:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800b89a:	801a      	strh	r2, [r3, #0]
 800b89c:	e7ed      	b.n	800b87a <ucdr_serialize_uint16_t+0x9e>
 800b89e:	68a2      	ldr	r2, [r4, #8]
 800b8a0:	6923      	ldr	r3, [r4, #16]
 800b8a2:	7da0      	ldrb	r0, [r4, #22]
 800b8a4:	7567      	strb	r7, [r4, #21]
 800b8a6:	1b92      	subs	r2, r2, r6
 800b8a8:	1b9b      	subs	r3, r3, r6
 800b8aa:	f080 0001 	eor.w	r0, r0, #1
 800b8ae:	60a2      	str	r2, [r4, #8]
 800b8b0:	6123      	str	r3, [r4, #16]
 800b8b2:	b002      	add	sp, #8
 800b8b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b8b8:	68a3      	ldr	r3, [r4, #8]
 800b8ba:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b8be:	701a      	strb	r2, [r3, #0]
 800b8c0:	e7bc      	b.n	800b83c <ucdr_serialize_uint16_t+0x60>
 800b8c2:	4628      	mov	r0, r5
 800b8c4:	f10d 0506 	add.w	r5, sp, #6
 800b8c8:	4629      	mov	r1, r5
 800b8ca:	4632      	mov	r2, r6
 800b8cc:	f00c f935 	bl	8017b3a <memcpy>
 800b8d0:	68a0      	ldr	r0, [r4, #8]
 800b8d2:	4642      	mov	r2, r8
 800b8d4:	19a9      	adds	r1, r5, r6
 800b8d6:	f00c f930 	bl	8017b3a <memcpy>
 800b8da:	e7af      	b.n	800b83c <ucdr_serialize_uint16_t+0x60>

0800b8dc <ucdr_serialize_endian_uint16_t>:
 800b8dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b8e0:	b083      	sub	sp, #12
 800b8e2:	460d      	mov	r5, r1
 800b8e4:	2102      	movs	r1, #2
 800b8e6:	4604      	mov	r4, r0
 800b8e8:	f8ad 2006 	strh.w	r2, [sp, #6]
 800b8ec:	f001 f8a2 	bl	800ca34 <ucdr_buffer_alignment>
 800b8f0:	4601      	mov	r1, r0
 800b8f2:	4620      	mov	r0, r4
 800b8f4:	f894 8015 	ldrb.w	r8, [r4, #21]
 800b8f8:	f001 f8e0 	bl	800cabc <ucdr_advance_buffer>
 800b8fc:	2102      	movs	r1, #2
 800b8fe:	4620      	mov	r0, r4
 800b900:	f001 f838 	bl	800c974 <ucdr_check_buffer_available_for>
 800b904:	bb70      	cbnz	r0, 800b964 <ucdr_serialize_endian_uint16_t+0x88>
 800b906:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800b90a:	42be      	cmp	r6, r7
 800b90c:	d925      	bls.n	800b95a <ucdr_serialize_endian_uint16_t+0x7e>
 800b90e:	6923      	ldr	r3, [r4, #16]
 800b910:	60a6      	str	r6, [r4, #8]
 800b912:	1bf6      	subs	r6, r6, r7
 800b914:	4433      	add	r3, r6
 800b916:	f1c6 0902 	rsb	r9, r6, #2
 800b91a:	6123      	str	r3, [r4, #16]
 800b91c:	4649      	mov	r1, r9
 800b91e:	4620      	mov	r0, r4
 800b920:	f001 f834 	bl	800c98c <ucdr_check_final_buffer_behavior>
 800b924:	2800      	cmp	r0, #0
 800b926:	d039      	beq.n	800b99c <ucdr_serialize_endian_uint16_t+0xc0>
 800b928:	2d01      	cmp	r5, #1
 800b92a:	d04a      	beq.n	800b9c2 <ucdr_serialize_endian_uint16_t+0xe6>
 800b92c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b930:	703b      	strb	r3, [r7, #0]
 800b932:	2e00      	cmp	r6, #0
 800b934:	d040      	beq.n	800b9b8 <ucdr_serialize_endian_uint16_t+0xdc>
 800b936:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800b93a:	707b      	strb	r3, [r7, #1]
 800b93c:	6923      	ldr	r3, [r4, #16]
 800b93e:	68a2      	ldr	r2, [r4, #8]
 800b940:	7da0      	ldrb	r0, [r4, #22]
 800b942:	3302      	adds	r3, #2
 800b944:	444a      	add	r2, r9
 800b946:	1b9b      	subs	r3, r3, r6
 800b948:	2102      	movs	r1, #2
 800b94a:	f080 0001 	eor.w	r0, r0, #1
 800b94e:	60a2      	str	r2, [r4, #8]
 800b950:	6123      	str	r3, [r4, #16]
 800b952:	7561      	strb	r1, [r4, #21]
 800b954:	b003      	add	sp, #12
 800b956:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b95a:	2102      	movs	r1, #2
 800b95c:	4620      	mov	r0, r4
 800b95e:	f001 f815 	bl	800c98c <ucdr_check_final_buffer_behavior>
 800b962:	b188      	cbz	r0, 800b988 <ucdr_serialize_endian_uint16_t+0xac>
 800b964:	2d01      	cmp	r5, #1
 800b966:	68a3      	ldr	r3, [r4, #8]
 800b968:	d014      	beq.n	800b994 <ucdr_serialize_endian_uint16_t+0xb8>
 800b96a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800b96e:	701a      	strb	r2, [r3, #0]
 800b970:	68a3      	ldr	r3, [r4, #8]
 800b972:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b976:	705a      	strb	r2, [r3, #1]
 800b978:	68a2      	ldr	r2, [r4, #8]
 800b97a:	6923      	ldr	r3, [r4, #16]
 800b97c:	3202      	adds	r2, #2
 800b97e:	3302      	adds	r3, #2
 800b980:	2102      	movs	r1, #2
 800b982:	60a2      	str	r2, [r4, #8]
 800b984:	6123      	str	r3, [r4, #16]
 800b986:	7561      	strb	r1, [r4, #21]
 800b988:	7da0      	ldrb	r0, [r4, #22]
 800b98a:	f080 0001 	eor.w	r0, r0, #1
 800b98e:	b003      	add	sp, #12
 800b990:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b994:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800b998:	801a      	strh	r2, [r3, #0]
 800b99a:	e7ed      	b.n	800b978 <ucdr_serialize_endian_uint16_t+0x9c>
 800b99c:	68a2      	ldr	r2, [r4, #8]
 800b99e:	6923      	ldr	r3, [r4, #16]
 800b9a0:	7da0      	ldrb	r0, [r4, #22]
 800b9a2:	f884 8015 	strb.w	r8, [r4, #21]
 800b9a6:	1b92      	subs	r2, r2, r6
 800b9a8:	1b9b      	subs	r3, r3, r6
 800b9aa:	f080 0001 	eor.w	r0, r0, #1
 800b9ae:	60a2      	str	r2, [r4, #8]
 800b9b0:	6123      	str	r3, [r4, #16]
 800b9b2:	b003      	add	sp, #12
 800b9b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b9b8:	68a3      	ldr	r3, [r4, #8]
 800b9ba:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b9be:	701a      	strb	r2, [r3, #0]
 800b9c0:	e7bc      	b.n	800b93c <ucdr_serialize_endian_uint16_t+0x60>
 800b9c2:	f10d 0506 	add.w	r5, sp, #6
 800b9c6:	4629      	mov	r1, r5
 800b9c8:	4632      	mov	r2, r6
 800b9ca:	4638      	mov	r0, r7
 800b9cc:	f00c f8b5 	bl	8017b3a <memcpy>
 800b9d0:	68a0      	ldr	r0, [r4, #8]
 800b9d2:	464a      	mov	r2, r9
 800b9d4:	19a9      	adds	r1, r5, r6
 800b9d6:	f00c f8b0 	bl	8017b3a <memcpy>
 800b9da:	e7af      	b.n	800b93c <ucdr_serialize_endian_uint16_t+0x60>

0800b9dc <ucdr_deserialize_uint16_t>:
 800b9dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b9e0:	460d      	mov	r5, r1
 800b9e2:	2102      	movs	r1, #2
 800b9e4:	4604      	mov	r4, r0
 800b9e6:	f001 f825 	bl	800ca34 <ucdr_buffer_alignment>
 800b9ea:	4601      	mov	r1, r0
 800b9ec:	4620      	mov	r0, r4
 800b9ee:	f894 8015 	ldrb.w	r8, [r4, #21]
 800b9f2:	f001 f863 	bl	800cabc <ucdr_advance_buffer>
 800b9f6:	2102      	movs	r1, #2
 800b9f8:	4620      	mov	r0, r4
 800b9fa:	f000 ffbb 	bl	800c974 <ucdr_check_buffer_available_for>
 800b9fe:	bb60      	cbnz	r0, 800ba5a <ucdr_deserialize_uint16_t+0x7e>
 800ba00:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800ba04:	42be      	cmp	r6, r7
 800ba06:	d923      	bls.n	800ba50 <ucdr_deserialize_uint16_t+0x74>
 800ba08:	6923      	ldr	r3, [r4, #16]
 800ba0a:	60a6      	str	r6, [r4, #8]
 800ba0c:	1bf6      	subs	r6, r6, r7
 800ba0e:	4433      	add	r3, r6
 800ba10:	f1c6 0902 	rsb	r9, r6, #2
 800ba14:	6123      	str	r3, [r4, #16]
 800ba16:	4649      	mov	r1, r9
 800ba18:	4620      	mov	r0, r4
 800ba1a:	f000 ffb7 	bl	800c98c <ucdr_check_final_buffer_behavior>
 800ba1e:	2800      	cmp	r0, #0
 800ba20:	d034      	beq.n	800ba8c <ucdr_deserialize_uint16_t+0xb0>
 800ba22:	7d23      	ldrb	r3, [r4, #20]
 800ba24:	2b01      	cmp	r3, #1
 800ba26:	d042      	beq.n	800baae <ucdr_deserialize_uint16_t+0xd2>
 800ba28:	787b      	ldrb	r3, [r7, #1]
 800ba2a:	702b      	strb	r3, [r5, #0]
 800ba2c:	2e00      	cmp	r6, #0
 800ba2e:	d03a      	beq.n	800baa6 <ucdr_deserialize_uint16_t+0xca>
 800ba30:	783b      	ldrb	r3, [r7, #0]
 800ba32:	706b      	strb	r3, [r5, #1]
 800ba34:	6923      	ldr	r3, [r4, #16]
 800ba36:	68a2      	ldr	r2, [r4, #8]
 800ba38:	7da0      	ldrb	r0, [r4, #22]
 800ba3a:	2102      	movs	r1, #2
 800ba3c:	3302      	adds	r3, #2
 800ba3e:	444a      	add	r2, r9
 800ba40:	1b9b      	subs	r3, r3, r6
 800ba42:	7561      	strb	r1, [r4, #21]
 800ba44:	60a2      	str	r2, [r4, #8]
 800ba46:	6123      	str	r3, [r4, #16]
 800ba48:	f080 0001 	eor.w	r0, r0, #1
 800ba4c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ba50:	2102      	movs	r1, #2
 800ba52:	4620      	mov	r0, r4
 800ba54:	f000 ff9a 	bl	800c98c <ucdr_check_final_buffer_behavior>
 800ba58:	b180      	cbz	r0, 800ba7c <ucdr_deserialize_uint16_t+0xa0>
 800ba5a:	7d23      	ldrb	r3, [r4, #20]
 800ba5c:	2b01      	cmp	r3, #1
 800ba5e:	68a3      	ldr	r3, [r4, #8]
 800ba60:	d011      	beq.n	800ba86 <ucdr_deserialize_uint16_t+0xaa>
 800ba62:	785b      	ldrb	r3, [r3, #1]
 800ba64:	702b      	strb	r3, [r5, #0]
 800ba66:	68a3      	ldr	r3, [r4, #8]
 800ba68:	781b      	ldrb	r3, [r3, #0]
 800ba6a:	706b      	strb	r3, [r5, #1]
 800ba6c:	68a2      	ldr	r2, [r4, #8]
 800ba6e:	6923      	ldr	r3, [r4, #16]
 800ba70:	3202      	adds	r2, #2
 800ba72:	3302      	adds	r3, #2
 800ba74:	2102      	movs	r1, #2
 800ba76:	60a2      	str	r2, [r4, #8]
 800ba78:	6123      	str	r3, [r4, #16]
 800ba7a:	7561      	strb	r1, [r4, #21]
 800ba7c:	7da0      	ldrb	r0, [r4, #22]
 800ba7e:	f080 0001 	eor.w	r0, r0, #1
 800ba82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ba86:	881b      	ldrh	r3, [r3, #0]
 800ba88:	802b      	strh	r3, [r5, #0]
 800ba8a:	e7ef      	b.n	800ba6c <ucdr_deserialize_uint16_t+0x90>
 800ba8c:	68a2      	ldr	r2, [r4, #8]
 800ba8e:	6923      	ldr	r3, [r4, #16]
 800ba90:	7da0      	ldrb	r0, [r4, #22]
 800ba92:	f884 8015 	strb.w	r8, [r4, #21]
 800ba96:	1b92      	subs	r2, r2, r6
 800ba98:	1b9b      	subs	r3, r3, r6
 800ba9a:	60a2      	str	r2, [r4, #8]
 800ba9c:	6123      	str	r3, [r4, #16]
 800ba9e:	f080 0001 	eor.w	r0, r0, #1
 800baa2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800baa6:	68a3      	ldr	r3, [r4, #8]
 800baa8:	781b      	ldrb	r3, [r3, #0]
 800baaa:	706b      	strb	r3, [r5, #1]
 800baac:	e7c2      	b.n	800ba34 <ucdr_deserialize_uint16_t+0x58>
 800baae:	4639      	mov	r1, r7
 800bab0:	4632      	mov	r2, r6
 800bab2:	4628      	mov	r0, r5
 800bab4:	f00c f841 	bl	8017b3a <memcpy>
 800bab8:	68a1      	ldr	r1, [r4, #8]
 800baba:	464a      	mov	r2, r9
 800babc:	19a8      	adds	r0, r5, r6
 800babe:	f00c f83c 	bl	8017b3a <memcpy>
 800bac2:	e7b7      	b.n	800ba34 <ucdr_deserialize_uint16_t+0x58>

0800bac4 <ucdr_deserialize_endian_uint16_t>:
 800bac4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bac8:	460e      	mov	r6, r1
 800baca:	2102      	movs	r1, #2
 800bacc:	4604      	mov	r4, r0
 800bace:	4615      	mov	r5, r2
 800bad0:	f000 ffb0 	bl	800ca34 <ucdr_buffer_alignment>
 800bad4:	4601      	mov	r1, r0
 800bad6:	4620      	mov	r0, r4
 800bad8:	f894 9015 	ldrb.w	r9, [r4, #21]
 800badc:	f000 ffee 	bl	800cabc <ucdr_advance_buffer>
 800bae0:	2102      	movs	r1, #2
 800bae2:	4620      	mov	r0, r4
 800bae4:	f000 ff46 	bl	800c974 <ucdr_check_buffer_available_for>
 800bae8:	bb70      	cbnz	r0, 800bb48 <ucdr_deserialize_endian_uint16_t+0x84>
 800baea:	e9d4 7801 	ldrd	r7, r8, [r4, #4]
 800baee:	4547      	cmp	r7, r8
 800baf0:	d925      	bls.n	800bb3e <ucdr_deserialize_endian_uint16_t+0x7a>
 800baf2:	6923      	ldr	r3, [r4, #16]
 800baf4:	60a7      	str	r7, [r4, #8]
 800baf6:	eba7 0708 	sub.w	r7, r7, r8
 800bafa:	443b      	add	r3, r7
 800bafc:	f1c7 0a02 	rsb	sl, r7, #2
 800bb00:	6123      	str	r3, [r4, #16]
 800bb02:	4651      	mov	r1, sl
 800bb04:	4620      	mov	r0, r4
 800bb06:	f000 ff41 	bl	800c98c <ucdr_check_final_buffer_behavior>
 800bb0a:	2800      	cmp	r0, #0
 800bb0c:	d034      	beq.n	800bb78 <ucdr_deserialize_endian_uint16_t+0xb4>
 800bb0e:	2e01      	cmp	r6, #1
 800bb10:	d043      	beq.n	800bb9a <ucdr_deserialize_endian_uint16_t+0xd6>
 800bb12:	f898 3001 	ldrb.w	r3, [r8, #1]
 800bb16:	702b      	strb	r3, [r5, #0]
 800bb18:	2f00      	cmp	r7, #0
 800bb1a:	d03a      	beq.n	800bb92 <ucdr_deserialize_endian_uint16_t+0xce>
 800bb1c:	f898 3000 	ldrb.w	r3, [r8]
 800bb20:	706b      	strb	r3, [r5, #1]
 800bb22:	6923      	ldr	r3, [r4, #16]
 800bb24:	68a2      	ldr	r2, [r4, #8]
 800bb26:	7da0      	ldrb	r0, [r4, #22]
 800bb28:	2102      	movs	r1, #2
 800bb2a:	3302      	adds	r3, #2
 800bb2c:	4452      	add	r2, sl
 800bb2e:	1bdb      	subs	r3, r3, r7
 800bb30:	7561      	strb	r1, [r4, #21]
 800bb32:	60a2      	str	r2, [r4, #8]
 800bb34:	6123      	str	r3, [r4, #16]
 800bb36:	f080 0001 	eor.w	r0, r0, #1
 800bb3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb3e:	2102      	movs	r1, #2
 800bb40:	4620      	mov	r0, r4
 800bb42:	f000 ff23 	bl	800c98c <ucdr_check_final_buffer_behavior>
 800bb46:	b178      	cbz	r0, 800bb68 <ucdr_deserialize_endian_uint16_t+0xa4>
 800bb48:	2e01      	cmp	r6, #1
 800bb4a:	68a3      	ldr	r3, [r4, #8]
 800bb4c:	d011      	beq.n	800bb72 <ucdr_deserialize_endian_uint16_t+0xae>
 800bb4e:	785b      	ldrb	r3, [r3, #1]
 800bb50:	702b      	strb	r3, [r5, #0]
 800bb52:	68a3      	ldr	r3, [r4, #8]
 800bb54:	781b      	ldrb	r3, [r3, #0]
 800bb56:	706b      	strb	r3, [r5, #1]
 800bb58:	68a2      	ldr	r2, [r4, #8]
 800bb5a:	6923      	ldr	r3, [r4, #16]
 800bb5c:	3202      	adds	r2, #2
 800bb5e:	3302      	adds	r3, #2
 800bb60:	2102      	movs	r1, #2
 800bb62:	60a2      	str	r2, [r4, #8]
 800bb64:	6123      	str	r3, [r4, #16]
 800bb66:	7561      	strb	r1, [r4, #21]
 800bb68:	7da0      	ldrb	r0, [r4, #22]
 800bb6a:	f080 0001 	eor.w	r0, r0, #1
 800bb6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb72:	881b      	ldrh	r3, [r3, #0]
 800bb74:	802b      	strh	r3, [r5, #0]
 800bb76:	e7ef      	b.n	800bb58 <ucdr_deserialize_endian_uint16_t+0x94>
 800bb78:	68a2      	ldr	r2, [r4, #8]
 800bb7a:	6923      	ldr	r3, [r4, #16]
 800bb7c:	7da0      	ldrb	r0, [r4, #22]
 800bb7e:	f884 9015 	strb.w	r9, [r4, #21]
 800bb82:	1bd2      	subs	r2, r2, r7
 800bb84:	1bdb      	subs	r3, r3, r7
 800bb86:	60a2      	str	r2, [r4, #8]
 800bb88:	6123      	str	r3, [r4, #16]
 800bb8a:	f080 0001 	eor.w	r0, r0, #1
 800bb8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb92:	68a3      	ldr	r3, [r4, #8]
 800bb94:	781b      	ldrb	r3, [r3, #0]
 800bb96:	706b      	strb	r3, [r5, #1]
 800bb98:	e7c3      	b.n	800bb22 <ucdr_deserialize_endian_uint16_t+0x5e>
 800bb9a:	4641      	mov	r1, r8
 800bb9c:	463a      	mov	r2, r7
 800bb9e:	4628      	mov	r0, r5
 800bba0:	f00b ffcb 	bl	8017b3a <memcpy>
 800bba4:	68a1      	ldr	r1, [r4, #8]
 800bba6:	4652      	mov	r2, sl
 800bba8:	19e8      	adds	r0, r5, r7
 800bbaa:	f00b ffc6 	bl	8017b3a <memcpy>
 800bbae:	e7b8      	b.n	800bb22 <ucdr_deserialize_endian_uint16_t+0x5e>

0800bbb0 <ucdr_serialize_uint32_t>:
 800bbb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bbb4:	b082      	sub	sp, #8
 800bbb6:	4604      	mov	r4, r0
 800bbb8:	9101      	str	r1, [sp, #4]
 800bbba:	2104      	movs	r1, #4
 800bbbc:	f000 ff3a 	bl	800ca34 <ucdr_buffer_alignment>
 800bbc0:	4601      	mov	r1, r0
 800bbc2:	4620      	mov	r0, r4
 800bbc4:	7d67      	ldrb	r7, [r4, #21]
 800bbc6:	f000 ff79 	bl	800cabc <ucdr_advance_buffer>
 800bbca:	2104      	movs	r1, #4
 800bbcc:	4620      	mov	r0, r4
 800bbce:	f000 fed1 	bl	800c974 <ucdr_check_buffer_available_for>
 800bbd2:	2800      	cmp	r0, #0
 800bbd4:	d139      	bne.n	800bc4a <ucdr_serialize_uint32_t+0x9a>
 800bbd6:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800bbda:	42ab      	cmp	r3, r5
 800bbdc:	d930      	bls.n	800bc40 <ucdr_serialize_uint32_t+0x90>
 800bbde:	1b5e      	subs	r6, r3, r5
 800bbe0:	60a3      	str	r3, [r4, #8]
 800bbe2:	6923      	ldr	r3, [r4, #16]
 800bbe4:	f1c6 0804 	rsb	r8, r6, #4
 800bbe8:	4433      	add	r3, r6
 800bbea:	6123      	str	r3, [r4, #16]
 800bbec:	4641      	mov	r1, r8
 800bbee:	4620      	mov	r0, r4
 800bbf0:	f000 fecc 	bl	800c98c <ucdr_check_final_buffer_behavior>
 800bbf4:	2800      	cmp	r0, #0
 800bbf6:	d04c      	beq.n	800bc92 <ucdr_serialize_uint32_t+0xe2>
 800bbf8:	7d23      	ldrb	r3, [r4, #20]
 800bbfa:	2b01      	cmp	r3, #1
 800bbfc:	d063      	beq.n	800bcc6 <ucdr_serialize_uint32_t+0x116>
 800bbfe:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800bc02:	702b      	strb	r3, [r5, #0]
 800bc04:	2e00      	cmp	r6, #0
 800bc06:	d051      	beq.n	800bcac <ucdr_serialize_uint32_t+0xfc>
 800bc08:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800bc0c:	706b      	strb	r3, [r5, #1]
 800bc0e:	2e01      	cmp	r6, #1
 800bc10:	d050      	beq.n	800bcb4 <ucdr_serialize_uint32_t+0x104>
 800bc12:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800bc16:	70ab      	strb	r3, [r5, #2]
 800bc18:	2e02      	cmp	r6, #2
 800bc1a:	d04f      	beq.n	800bcbc <ucdr_serialize_uint32_t+0x10c>
 800bc1c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800bc20:	70eb      	strb	r3, [r5, #3]
 800bc22:	6923      	ldr	r3, [r4, #16]
 800bc24:	68a2      	ldr	r2, [r4, #8]
 800bc26:	7da0      	ldrb	r0, [r4, #22]
 800bc28:	3304      	adds	r3, #4
 800bc2a:	1b9e      	subs	r6, r3, r6
 800bc2c:	4442      	add	r2, r8
 800bc2e:	2304      	movs	r3, #4
 800bc30:	f080 0001 	eor.w	r0, r0, #1
 800bc34:	60a2      	str	r2, [r4, #8]
 800bc36:	6126      	str	r6, [r4, #16]
 800bc38:	7563      	strb	r3, [r4, #21]
 800bc3a:	b002      	add	sp, #8
 800bc3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc40:	2104      	movs	r1, #4
 800bc42:	4620      	mov	r0, r4
 800bc44:	f000 fea2 	bl	800c98c <ucdr_check_final_buffer_behavior>
 800bc48:	b1d0      	cbz	r0, 800bc80 <ucdr_serialize_uint32_t+0xd0>
 800bc4a:	7d23      	ldrb	r3, [r4, #20]
 800bc4c:	2b01      	cmp	r3, #1
 800bc4e:	68a3      	ldr	r3, [r4, #8]
 800bc50:	d01c      	beq.n	800bc8c <ucdr_serialize_uint32_t+0xdc>
 800bc52:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800bc56:	701a      	strb	r2, [r3, #0]
 800bc58:	68a3      	ldr	r3, [r4, #8]
 800bc5a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800bc5e:	705a      	strb	r2, [r3, #1]
 800bc60:	68a3      	ldr	r3, [r4, #8]
 800bc62:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800bc66:	709a      	strb	r2, [r3, #2]
 800bc68:	68a3      	ldr	r3, [r4, #8]
 800bc6a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800bc6e:	70da      	strb	r2, [r3, #3]
 800bc70:	68a2      	ldr	r2, [r4, #8]
 800bc72:	6923      	ldr	r3, [r4, #16]
 800bc74:	3204      	adds	r2, #4
 800bc76:	3304      	adds	r3, #4
 800bc78:	2104      	movs	r1, #4
 800bc7a:	60a2      	str	r2, [r4, #8]
 800bc7c:	6123      	str	r3, [r4, #16]
 800bc7e:	7561      	strb	r1, [r4, #21]
 800bc80:	7da0      	ldrb	r0, [r4, #22]
 800bc82:	f080 0001 	eor.w	r0, r0, #1
 800bc86:	b002      	add	sp, #8
 800bc88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc8c:	9a01      	ldr	r2, [sp, #4]
 800bc8e:	601a      	str	r2, [r3, #0]
 800bc90:	e7ee      	b.n	800bc70 <ucdr_serialize_uint32_t+0xc0>
 800bc92:	68a2      	ldr	r2, [r4, #8]
 800bc94:	6923      	ldr	r3, [r4, #16]
 800bc96:	7da0      	ldrb	r0, [r4, #22]
 800bc98:	7567      	strb	r7, [r4, #21]
 800bc9a:	1b92      	subs	r2, r2, r6
 800bc9c:	1b9b      	subs	r3, r3, r6
 800bc9e:	f080 0001 	eor.w	r0, r0, #1
 800bca2:	60a2      	str	r2, [r4, #8]
 800bca4:	6123      	str	r3, [r4, #16]
 800bca6:	b002      	add	sp, #8
 800bca8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bcac:	68a3      	ldr	r3, [r4, #8]
 800bcae:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800bcb2:	701a      	strb	r2, [r3, #0]
 800bcb4:	68a3      	ldr	r3, [r4, #8]
 800bcb6:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800bcba:	701a      	strb	r2, [r3, #0]
 800bcbc:	68a3      	ldr	r3, [r4, #8]
 800bcbe:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800bcc2:	701a      	strb	r2, [r3, #0]
 800bcc4:	e7ad      	b.n	800bc22 <ucdr_serialize_uint32_t+0x72>
 800bcc6:	4628      	mov	r0, r5
 800bcc8:	ad01      	add	r5, sp, #4
 800bcca:	4629      	mov	r1, r5
 800bccc:	4632      	mov	r2, r6
 800bcce:	f00b ff34 	bl	8017b3a <memcpy>
 800bcd2:	68a0      	ldr	r0, [r4, #8]
 800bcd4:	4642      	mov	r2, r8
 800bcd6:	19a9      	adds	r1, r5, r6
 800bcd8:	f00b ff2f 	bl	8017b3a <memcpy>
 800bcdc:	e7a1      	b.n	800bc22 <ucdr_serialize_uint32_t+0x72>
 800bcde:	bf00      	nop

0800bce0 <ucdr_serialize_endian_uint32_t>:
 800bce0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bce4:	b083      	sub	sp, #12
 800bce6:	460d      	mov	r5, r1
 800bce8:	2104      	movs	r1, #4
 800bcea:	4604      	mov	r4, r0
 800bcec:	9201      	str	r2, [sp, #4]
 800bcee:	f000 fea1 	bl	800ca34 <ucdr_buffer_alignment>
 800bcf2:	4601      	mov	r1, r0
 800bcf4:	4620      	mov	r0, r4
 800bcf6:	f894 8015 	ldrb.w	r8, [r4, #21]
 800bcfa:	f000 fedf 	bl	800cabc <ucdr_advance_buffer>
 800bcfe:	2104      	movs	r1, #4
 800bd00:	4620      	mov	r0, r4
 800bd02:	f000 fe37 	bl	800c974 <ucdr_check_buffer_available_for>
 800bd06:	2800      	cmp	r0, #0
 800bd08:	d138      	bne.n	800bd7c <ucdr_serialize_endian_uint32_t+0x9c>
 800bd0a:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800bd0e:	42b7      	cmp	r7, r6
 800bd10:	d92f      	bls.n	800bd72 <ucdr_serialize_endian_uint32_t+0x92>
 800bd12:	6923      	ldr	r3, [r4, #16]
 800bd14:	60a7      	str	r7, [r4, #8]
 800bd16:	1bbf      	subs	r7, r7, r6
 800bd18:	443b      	add	r3, r7
 800bd1a:	f1c7 0904 	rsb	r9, r7, #4
 800bd1e:	6123      	str	r3, [r4, #16]
 800bd20:	4649      	mov	r1, r9
 800bd22:	4620      	mov	r0, r4
 800bd24:	f000 fe32 	bl	800c98c <ucdr_check_final_buffer_behavior>
 800bd28:	2800      	cmp	r0, #0
 800bd2a:	d04a      	beq.n	800bdc2 <ucdr_serialize_endian_uint32_t+0xe2>
 800bd2c:	2d01      	cmp	r5, #1
 800bd2e:	d063      	beq.n	800bdf8 <ucdr_serialize_endian_uint32_t+0x118>
 800bd30:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800bd34:	7033      	strb	r3, [r6, #0]
 800bd36:	2f00      	cmp	r7, #0
 800bd38:	d051      	beq.n	800bdde <ucdr_serialize_endian_uint32_t+0xfe>
 800bd3a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800bd3e:	7073      	strb	r3, [r6, #1]
 800bd40:	2f01      	cmp	r7, #1
 800bd42:	d050      	beq.n	800bde6 <ucdr_serialize_endian_uint32_t+0x106>
 800bd44:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800bd48:	70b3      	strb	r3, [r6, #2]
 800bd4a:	2f02      	cmp	r7, #2
 800bd4c:	d04f      	beq.n	800bdee <ucdr_serialize_endian_uint32_t+0x10e>
 800bd4e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800bd52:	70f3      	strb	r3, [r6, #3]
 800bd54:	6923      	ldr	r3, [r4, #16]
 800bd56:	68a2      	ldr	r2, [r4, #8]
 800bd58:	7da0      	ldrb	r0, [r4, #22]
 800bd5a:	3304      	adds	r3, #4
 800bd5c:	444a      	add	r2, r9
 800bd5e:	1bdb      	subs	r3, r3, r7
 800bd60:	2104      	movs	r1, #4
 800bd62:	f080 0001 	eor.w	r0, r0, #1
 800bd66:	60a2      	str	r2, [r4, #8]
 800bd68:	6123      	str	r3, [r4, #16]
 800bd6a:	7561      	strb	r1, [r4, #21]
 800bd6c:	b003      	add	sp, #12
 800bd6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bd72:	2104      	movs	r1, #4
 800bd74:	4620      	mov	r0, r4
 800bd76:	f000 fe09 	bl	800c98c <ucdr_check_final_buffer_behavior>
 800bd7a:	b1c8      	cbz	r0, 800bdb0 <ucdr_serialize_endian_uint32_t+0xd0>
 800bd7c:	2d01      	cmp	r5, #1
 800bd7e:	68a3      	ldr	r3, [r4, #8]
 800bd80:	d01c      	beq.n	800bdbc <ucdr_serialize_endian_uint32_t+0xdc>
 800bd82:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800bd86:	701a      	strb	r2, [r3, #0]
 800bd88:	68a3      	ldr	r3, [r4, #8]
 800bd8a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800bd8e:	705a      	strb	r2, [r3, #1]
 800bd90:	68a3      	ldr	r3, [r4, #8]
 800bd92:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800bd96:	709a      	strb	r2, [r3, #2]
 800bd98:	68a3      	ldr	r3, [r4, #8]
 800bd9a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800bd9e:	70da      	strb	r2, [r3, #3]
 800bda0:	68a2      	ldr	r2, [r4, #8]
 800bda2:	6923      	ldr	r3, [r4, #16]
 800bda4:	3204      	adds	r2, #4
 800bda6:	3304      	adds	r3, #4
 800bda8:	2104      	movs	r1, #4
 800bdaa:	60a2      	str	r2, [r4, #8]
 800bdac:	6123      	str	r3, [r4, #16]
 800bdae:	7561      	strb	r1, [r4, #21]
 800bdb0:	7da0      	ldrb	r0, [r4, #22]
 800bdb2:	f080 0001 	eor.w	r0, r0, #1
 800bdb6:	b003      	add	sp, #12
 800bdb8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bdbc:	9a01      	ldr	r2, [sp, #4]
 800bdbe:	601a      	str	r2, [r3, #0]
 800bdc0:	e7ee      	b.n	800bda0 <ucdr_serialize_endian_uint32_t+0xc0>
 800bdc2:	68a2      	ldr	r2, [r4, #8]
 800bdc4:	6923      	ldr	r3, [r4, #16]
 800bdc6:	7da0      	ldrb	r0, [r4, #22]
 800bdc8:	f884 8015 	strb.w	r8, [r4, #21]
 800bdcc:	1bd2      	subs	r2, r2, r7
 800bdce:	1bdb      	subs	r3, r3, r7
 800bdd0:	f080 0001 	eor.w	r0, r0, #1
 800bdd4:	60a2      	str	r2, [r4, #8]
 800bdd6:	6123      	str	r3, [r4, #16]
 800bdd8:	b003      	add	sp, #12
 800bdda:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bdde:	68a3      	ldr	r3, [r4, #8]
 800bde0:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800bde4:	701a      	strb	r2, [r3, #0]
 800bde6:	68a3      	ldr	r3, [r4, #8]
 800bde8:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800bdec:	701a      	strb	r2, [r3, #0]
 800bdee:	68a3      	ldr	r3, [r4, #8]
 800bdf0:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800bdf4:	701a      	strb	r2, [r3, #0]
 800bdf6:	e7ad      	b.n	800bd54 <ucdr_serialize_endian_uint32_t+0x74>
 800bdf8:	ad01      	add	r5, sp, #4
 800bdfa:	4629      	mov	r1, r5
 800bdfc:	463a      	mov	r2, r7
 800bdfe:	4630      	mov	r0, r6
 800be00:	f00b fe9b 	bl	8017b3a <memcpy>
 800be04:	68a0      	ldr	r0, [r4, #8]
 800be06:	464a      	mov	r2, r9
 800be08:	19e9      	adds	r1, r5, r7
 800be0a:	f00b fe96 	bl	8017b3a <memcpy>
 800be0e:	e7a1      	b.n	800bd54 <ucdr_serialize_endian_uint32_t+0x74>

0800be10 <ucdr_deserialize_uint32_t>:
 800be10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800be14:	460d      	mov	r5, r1
 800be16:	2104      	movs	r1, #4
 800be18:	4604      	mov	r4, r0
 800be1a:	f000 fe0b 	bl	800ca34 <ucdr_buffer_alignment>
 800be1e:	4601      	mov	r1, r0
 800be20:	4620      	mov	r0, r4
 800be22:	f894 8015 	ldrb.w	r8, [r4, #21]
 800be26:	f000 fe49 	bl	800cabc <ucdr_advance_buffer>
 800be2a:	2104      	movs	r1, #4
 800be2c:	4620      	mov	r0, r4
 800be2e:	f000 fda1 	bl	800c974 <ucdr_check_buffer_available_for>
 800be32:	2800      	cmp	r0, #0
 800be34:	d138      	bne.n	800bea8 <ucdr_deserialize_uint32_t+0x98>
 800be36:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800be3a:	42b7      	cmp	r7, r6
 800be3c:	d92f      	bls.n	800be9e <ucdr_deserialize_uint32_t+0x8e>
 800be3e:	6923      	ldr	r3, [r4, #16]
 800be40:	60a7      	str	r7, [r4, #8]
 800be42:	1bbf      	subs	r7, r7, r6
 800be44:	443b      	add	r3, r7
 800be46:	f1c7 0904 	rsb	r9, r7, #4
 800be4a:	6123      	str	r3, [r4, #16]
 800be4c:	4649      	mov	r1, r9
 800be4e:	4620      	mov	r0, r4
 800be50:	f000 fd9c 	bl	800c98c <ucdr_check_final_buffer_behavior>
 800be54:	2800      	cmp	r0, #0
 800be56:	d046      	beq.n	800bee6 <ucdr_deserialize_uint32_t+0xd6>
 800be58:	7d23      	ldrb	r3, [r4, #20]
 800be5a:	2b01      	cmp	r3, #1
 800be5c:	d05c      	beq.n	800bf18 <ucdr_deserialize_uint32_t+0x108>
 800be5e:	78f3      	ldrb	r3, [r6, #3]
 800be60:	702b      	strb	r3, [r5, #0]
 800be62:	2f00      	cmp	r7, #0
 800be64:	d04c      	beq.n	800bf00 <ucdr_deserialize_uint32_t+0xf0>
 800be66:	78b3      	ldrb	r3, [r6, #2]
 800be68:	706b      	strb	r3, [r5, #1]
 800be6a:	2f01      	cmp	r7, #1
 800be6c:	f105 0302 	add.w	r3, r5, #2
 800be70:	d04a      	beq.n	800bf08 <ucdr_deserialize_uint32_t+0xf8>
 800be72:	7873      	ldrb	r3, [r6, #1]
 800be74:	70ab      	strb	r3, [r5, #2]
 800be76:	2f02      	cmp	r7, #2
 800be78:	f105 0303 	add.w	r3, r5, #3
 800be7c:	d048      	beq.n	800bf10 <ucdr_deserialize_uint32_t+0x100>
 800be7e:	7833      	ldrb	r3, [r6, #0]
 800be80:	70eb      	strb	r3, [r5, #3]
 800be82:	6923      	ldr	r3, [r4, #16]
 800be84:	68a2      	ldr	r2, [r4, #8]
 800be86:	7da0      	ldrb	r0, [r4, #22]
 800be88:	2104      	movs	r1, #4
 800be8a:	3304      	adds	r3, #4
 800be8c:	444a      	add	r2, r9
 800be8e:	1bdb      	subs	r3, r3, r7
 800be90:	7561      	strb	r1, [r4, #21]
 800be92:	60a2      	str	r2, [r4, #8]
 800be94:	6123      	str	r3, [r4, #16]
 800be96:	f080 0001 	eor.w	r0, r0, #1
 800be9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800be9e:	2104      	movs	r1, #4
 800bea0:	4620      	mov	r0, r4
 800bea2:	f000 fd73 	bl	800c98c <ucdr_check_final_buffer_behavior>
 800bea6:	b1b0      	cbz	r0, 800bed6 <ucdr_deserialize_uint32_t+0xc6>
 800bea8:	7d23      	ldrb	r3, [r4, #20]
 800beaa:	2b01      	cmp	r3, #1
 800beac:	68a3      	ldr	r3, [r4, #8]
 800beae:	d017      	beq.n	800bee0 <ucdr_deserialize_uint32_t+0xd0>
 800beb0:	78db      	ldrb	r3, [r3, #3]
 800beb2:	702b      	strb	r3, [r5, #0]
 800beb4:	68a3      	ldr	r3, [r4, #8]
 800beb6:	789b      	ldrb	r3, [r3, #2]
 800beb8:	706b      	strb	r3, [r5, #1]
 800beba:	68a3      	ldr	r3, [r4, #8]
 800bebc:	785b      	ldrb	r3, [r3, #1]
 800bebe:	70ab      	strb	r3, [r5, #2]
 800bec0:	68a3      	ldr	r3, [r4, #8]
 800bec2:	781b      	ldrb	r3, [r3, #0]
 800bec4:	70eb      	strb	r3, [r5, #3]
 800bec6:	68a2      	ldr	r2, [r4, #8]
 800bec8:	6923      	ldr	r3, [r4, #16]
 800beca:	3204      	adds	r2, #4
 800becc:	3304      	adds	r3, #4
 800bece:	2104      	movs	r1, #4
 800bed0:	60a2      	str	r2, [r4, #8]
 800bed2:	6123      	str	r3, [r4, #16]
 800bed4:	7561      	strb	r1, [r4, #21]
 800bed6:	7da0      	ldrb	r0, [r4, #22]
 800bed8:	f080 0001 	eor.w	r0, r0, #1
 800bedc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bee0:	681b      	ldr	r3, [r3, #0]
 800bee2:	602b      	str	r3, [r5, #0]
 800bee4:	e7ef      	b.n	800bec6 <ucdr_deserialize_uint32_t+0xb6>
 800bee6:	68a2      	ldr	r2, [r4, #8]
 800bee8:	6923      	ldr	r3, [r4, #16]
 800beea:	7da0      	ldrb	r0, [r4, #22]
 800beec:	f884 8015 	strb.w	r8, [r4, #21]
 800bef0:	1bd2      	subs	r2, r2, r7
 800bef2:	1bdb      	subs	r3, r3, r7
 800bef4:	60a2      	str	r2, [r4, #8]
 800bef6:	6123      	str	r3, [r4, #16]
 800bef8:	f080 0001 	eor.w	r0, r0, #1
 800befc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bf00:	68a3      	ldr	r3, [r4, #8]
 800bf02:	789b      	ldrb	r3, [r3, #2]
 800bf04:	706b      	strb	r3, [r5, #1]
 800bf06:	1cab      	adds	r3, r5, #2
 800bf08:	68a2      	ldr	r2, [r4, #8]
 800bf0a:	7852      	ldrb	r2, [r2, #1]
 800bf0c:	f803 2b01 	strb.w	r2, [r3], #1
 800bf10:	68a2      	ldr	r2, [r4, #8]
 800bf12:	7812      	ldrb	r2, [r2, #0]
 800bf14:	701a      	strb	r2, [r3, #0]
 800bf16:	e7b4      	b.n	800be82 <ucdr_deserialize_uint32_t+0x72>
 800bf18:	4631      	mov	r1, r6
 800bf1a:	463a      	mov	r2, r7
 800bf1c:	4628      	mov	r0, r5
 800bf1e:	f00b fe0c 	bl	8017b3a <memcpy>
 800bf22:	68a1      	ldr	r1, [r4, #8]
 800bf24:	464a      	mov	r2, r9
 800bf26:	19e8      	adds	r0, r5, r7
 800bf28:	f00b fe07 	bl	8017b3a <memcpy>
 800bf2c:	e7a9      	b.n	800be82 <ucdr_deserialize_uint32_t+0x72>
 800bf2e:	bf00      	nop

0800bf30 <ucdr_deserialize_endian_uint32_t>:
 800bf30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bf34:	460e      	mov	r6, r1
 800bf36:	2104      	movs	r1, #4
 800bf38:	4604      	mov	r4, r0
 800bf3a:	4615      	mov	r5, r2
 800bf3c:	f000 fd7a 	bl	800ca34 <ucdr_buffer_alignment>
 800bf40:	4601      	mov	r1, r0
 800bf42:	4620      	mov	r0, r4
 800bf44:	f894 9015 	ldrb.w	r9, [r4, #21]
 800bf48:	f000 fdb8 	bl	800cabc <ucdr_advance_buffer>
 800bf4c:	2104      	movs	r1, #4
 800bf4e:	4620      	mov	r0, r4
 800bf50:	f000 fd10 	bl	800c974 <ucdr_check_buffer_available_for>
 800bf54:	2800      	cmp	r0, #0
 800bf56:	d13c      	bne.n	800bfd2 <ucdr_deserialize_endian_uint32_t+0xa2>
 800bf58:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 800bf5c:	42bb      	cmp	r3, r7
 800bf5e:	d933      	bls.n	800bfc8 <ucdr_deserialize_endian_uint32_t+0x98>
 800bf60:	eba3 0807 	sub.w	r8, r3, r7
 800bf64:	60a3      	str	r3, [r4, #8]
 800bf66:	6923      	ldr	r3, [r4, #16]
 800bf68:	f1c8 0a04 	rsb	sl, r8, #4
 800bf6c:	4443      	add	r3, r8
 800bf6e:	6123      	str	r3, [r4, #16]
 800bf70:	4651      	mov	r1, sl
 800bf72:	4620      	mov	r0, r4
 800bf74:	f000 fd0a 	bl	800c98c <ucdr_check_final_buffer_behavior>
 800bf78:	2800      	cmp	r0, #0
 800bf7a:	d048      	beq.n	800c00e <ucdr_deserialize_endian_uint32_t+0xde>
 800bf7c:	2e01      	cmp	r6, #1
 800bf7e:	d061      	beq.n	800c044 <ucdr_deserialize_endian_uint32_t+0x114>
 800bf80:	78fb      	ldrb	r3, [r7, #3]
 800bf82:	702b      	strb	r3, [r5, #0]
 800bf84:	f1b8 0f00 	cmp.w	r8, #0
 800bf88:	d050      	beq.n	800c02c <ucdr_deserialize_endian_uint32_t+0xfc>
 800bf8a:	78bb      	ldrb	r3, [r7, #2]
 800bf8c:	706b      	strb	r3, [r5, #1]
 800bf8e:	f1b8 0f01 	cmp.w	r8, #1
 800bf92:	f105 0302 	add.w	r3, r5, #2
 800bf96:	d04d      	beq.n	800c034 <ucdr_deserialize_endian_uint32_t+0x104>
 800bf98:	787b      	ldrb	r3, [r7, #1]
 800bf9a:	70ab      	strb	r3, [r5, #2]
 800bf9c:	f1b8 0f02 	cmp.w	r8, #2
 800bfa0:	f105 0303 	add.w	r3, r5, #3
 800bfa4:	d04a      	beq.n	800c03c <ucdr_deserialize_endian_uint32_t+0x10c>
 800bfa6:	783b      	ldrb	r3, [r7, #0]
 800bfa8:	70eb      	strb	r3, [r5, #3]
 800bfaa:	6923      	ldr	r3, [r4, #16]
 800bfac:	68a2      	ldr	r2, [r4, #8]
 800bfae:	7da0      	ldrb	r0, [r4, #22]
 800bfb0:	2104      	movs	r1, #4
 800bfb2:	3304      	adds	r3, #4
 800bfb4:	4452      	add	r2, sl
 800bfb6:	eba3 0308 	sub.w	r3, r3, r8
 800bfba:	7561      	strb	r1, [r4, #21]
 800bfbc:	60a2      	str	r2, [r4, #8]
 800bfbe:	6123      	str	r3, [r4, #16]
 800bfc0:	f080 0001 	eor.w	r0, r0, #1
 800bfc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bfc8:	2104      	movs	r1, #4
 800bfca:	4620      	mov	r0, r4
 800bfcc:	f000 fcde 	bl	800c98c <ucdr_check_final_buffer_behavior>
 800bfd0:	b1a8      	cbz	r0, 800bffe <ucdr_deserialize_endian_uint32_t+0xce>
 800bfd2:	2e01      	cmp	r6, #1
 800bfd4:	68a3      	ldr	r3, [r4, #8]
 800bfd6:	d017      	beq.n	800c008 <ucdr_deserialize_endian_uint32_t+0xd8>
 800bfd8:	78db      	ldrb	r3, [r3, #3]
 800bfda:	702b      	strb	r3, [r5, #0]
 800bfdc:	68a3      	ldr	r3, [r4, #8]
 800bfde:	789b      	ldrb	r3, [r3, #2]
 800bfe0:	706b      	strb	r3, [r5, #1]
 800bfe2:	68a3      	ldr	r3, [r4, #8]
 800bfe4:	785b      	ldrb	r3, [r3, #1]
 800bfe6:	70ab      	strb	r3, [r5, #2]
 800bfe8:	68a3      	ldr	r3, [r4, #8]
 800bfea:	781b      	ldrb	r3, [r3, #0]
 800bfec:	70eb      	strb	r3, [r5, #3]
 800bfee:	68a2      	ldr	r2, [r4, #8]
 800bff0:	6923      	ldr	r3, [r4, #16]
 800bff2:	3204      	adds	r2, #4
 800bff4:	3304      	adds	r3, #4
 800bff6:	2104      	movs	r1, #4
 800bff8:	60a2      	str	r2, [r4, #8]
 800bffa:	6123      	str	r3, [r4, #16]
 800bffc:	7561      	strb	r1, [r4, #21]
 800bffe:	7da0      	ldrb	r0, [r4, #22]
 800c000:	f080 0001 	eor.w	r0, r0, #1
 800c004:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	602b      	str	r3, [r5, #0]
 800c00c:	e7ef      	b.n	800bfee <ucdr_deserialize_endian_uint32_t+0xbe>
 800c00e:	68a2      	ldr	r2, [r4, #8]
 800c010:	6923      	ldr	r3, [r4, #16]
 800c012:	7da0      	ldrb	r0, [r4, #22]
 800c014:	f884 9015 	strb.w	r9, [r4, #21]
 800c018:	eba2 0208 	sub.w	r2, r2, r8
 800c01c:	eba3 0308 	sub.w	r3, r3, r8
 800c020:	60a2      	str	r2, [r4, #8]
 800c022:	6123      	str	r3, [r4, #16]
 800c024:	f080 0001 	eor.w	r0, r0, #1
 800c028:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c02c:	68a3      	ldr	r3, [r4, #8]
 800c02e:	789b      	ldrb	r3, [r3, #2]
 800c030:	706b      	strb	r3, [r5, #1]
 800c032:	1cab      	adds	r3, r5, #2
 800c034:	68a2      	ldr	r2, [r4, #8]
 800c036:	7852      	ldrb	r2, [r2, #1]
 800c038:	f803 2b01 	strb.w	r2, [r3], #1
 800c03c:	68a2      	ldr	r2, [r4, #8]
 800c03e:	7812      	ldrb	r2, [r2, #0]
 800c040:	701a      	strb	r2, [r3, #0]
 800c042:	e7b2      	b.n	800bfaa <ucdr_deserialize_endian_uint32_t+0x7a>
 800c044:	4639      	mov	r1, r7
 800c046:	4642      	mov	r2, r8
 800c048:	4628      	mov	r0, r5
 800c04a:	f00b fd76 	bl	8017b3a <memcpy>
 800c04e:	68a1      	ldr	r1, [r4, #8]
 800c050:	4652      	mov	r2, sl
 800c052:	eb05 0008 	add.w	r0, r5, r8
 800c056:	f00b fd70 	bl	8017b3a <memcpy>
 800c05a:	e7a6      	b.n	800bfaa <ucdr_deserialize_endian_uint32_t+0x7a>

0800c05c <ucdr_serialize_uint64_t>:
 800c05c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c060:	2108      	movs	r1, #8
 800c062:	b082      	sub	sp, #8
 800c064:	4604      	mov	r4, r0
 800c066:	e9cd 2300 	strd	r2, r3, [sp]
 800c06a:	f000 fce3 	bl	800ca34 <ucdr_buffer_alignment>
 800c06e:	4601      	mov	r1, r0
 800c070:	4620      	mov	r0, r4
 800c072:	7d67      	ldrb	r7, [r4, #21]
 800c074:	f000 fd22 	bl	800cabc <ucdr_advance_buffer>
 800c078:	2108      	movs	r1, #8
 800c07a:	4620      	mov	r0, r4
 800c07c:	f000 fc7a 	bl	800c974 <ucdr_check_buffer_available_for>
 800c080:	2800      	cmp	r0, #0
 800c082:	d14e      	bne.n	800c122 <ucdr_serialize_uint64_t+0xc6>
 800c084:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800c088:	42ab      	cmp	r3, r5
 800c08a:	d945      	bls.n	800c118 <ucdr_serialize_uint64_t+0xbc>
 800c08c:	1b5e      	subs	r6, r3, r5
 800c08e:	60a3      	str	r3, [r4, #8]
 800c090:	6923      	ldr	r3, [r4, #16]
 800c092:	f1c6 0808 	rsb	r8, r6, #8
 800c096:	4433      	add	r3, r6
 800c098:	6123      	str	r3, [r4, #16]
 800c09a:	4641      	mov	r1, r8
 800c09c:	4620      	mov	r0, r4
 800c09e:	f000 fc75 	bl	800c98c <ucdr_check_final_buffer_behavior>
 800c0a2:	2800      	cmp	r0, #0
 800c0a4:	d074      	beq.n	800c190 <ucdr_serialize_uint64_t+0x134>
 800c0a6:	7d23      	ldrb	r3, [r4, #20]
 800c0a8:	2b01      	cmp	r3, #1
 800c0aa:	f000 809b 	beq.w	800c1e4 <ucdr_serialize_uint64_t+0x188>
 800c0ae:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800c0b2:	702b      	strb	r3, [r5, #0]
 800c0b4:	2e00      	cmp	r6, #0
 800c0b6:	d078      	beq.n	800c1aa <ucdr_serialize_uint64_t+0x14e>
 800c0b8:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800c0bc:	706b      	strb	r3, [r5, #1]
 800c0be:	2e01      	cmp	r6, #1
 800c0c0:	d077      	beq.n	800c1b2 <ucdr_serialize_uint64_t+0x156>
 800c0c2:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800c0c6:	70ab      	strb	r3, [r5, #2]
 800c0c8:	2e02      	cmp	r6, #2
 800c0ca:	d076      	beq.n	800c1ba <ucdr_serialize_uint64_t+0x15e>
 800c0cc:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800c0d0:	70eb      	strb	r3, [r5, #3]
 800c0d2:	2e03      	cmp	r6, #3
 800c0d4:	d075      	beq.n	800c1c2 <ucdr_serialize_uint64_t+0x166>
 800c0d6:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800c0da:	712b      	strb	r3, [r5, #4]
 800c0dc:	2e04      	cmp	r6, #4
 800c0de:	d074      	beq.n	800c1ca <ucdr_serialize_uint64_t+0x16e>
 800c0e0:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800c0e4:	716b      	strb	r3, [r5, #5]
 800c0e6:	2e05      	cmp	r6, #5
 800c0e8:	d073      	beq.n	800c1d2 <ucdr_serialize_uint64_t+0x176>
 800c0ea:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800c0ee:	71ab      	strb	r3, [r5, #6]
 800c0f0:	2e06      	cmp	r6, #6
 800c0f2:	d072      	beq.n	800c1da <ucdr_serialize_uint64_t+0x17e>
 800c0f4:	f89d 3000 	ldrb.w	r3, [sp]
 800c0f8:	71eb      	strb	r3, [r5, #7]
 800c0fa:	6923      	ldr	r3, [r4, #16]
 800c0fc:	68a2      	ldr	r2, [r4, #8]
 800c0fe:	7da0      	ldrb	r0, [r4, #22]
 800c100:	3308      	adds	r3, #8
 800c102:	1b9e      	subs	r6, r3, r6
 800c104:	4442      	add	r2, r8
 800c106:	2308      	movs	r3, #8
 800c108:	f080 0001 	eor.w	r0, r0, #1
 800c10c:	60a2      	str	r2, [r4, #8]
 800c10e:	6126      	str	r6, [r4, #16]
 800c110:	7563      	strb	r3, [r4, #21]
 800c112:	b002      	add	sp, #8
 800c114:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c118:	2108      	movs	r1, #8
 800c11a:	4620      	mov	r0, r4
 800c11c:	f000 fc36 	bl	800c98c <ucdr_check_final_buffer_behavior>
 800c120:	b350      	cbz	r0, 800c178 <ucdr_serialize_uint64_t+0x11c>
 800c122:	7d23      	ldrb	r3, [r4, #20]
 800c124:	2b01      	cmp	r3, #1
 800c126:	d02d      	beq.n	800c184 <ucdr_serialize_uint64_t+0x128>
 800c128:	68a3      	ldr	r3, [r4, #8]
 800c12a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800c12e:	701a      	strb	r2, [r3, #0]
 800c130:	68a3      	ldr	r3, [r4, #8]
 800c132:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800c136:	705a      	strb	r2, [r3, #1]
 800c138:	68a3      	ldr	r3, [r4, #8]
 800c13a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800c13e:	709a      	strb	r2, [r3, #2]
 800c140:	68a3      	ldr	r3, [r4, #8]
 800c142:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800c146:	70da      	strb	r2, [r3, #3]
 800c148:	68a3      	ldr	r3, [r4, #8]
 800c14a:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800c14e:	711a      	strb	r2, [r3, #4]
 800c150:	68a3      	ldr	r3, [r4, #8]
 800c152:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800c156:	715a      	strb	r2, [r3, #5]
 800c158:	68a3      	ldr	r3, [r4, #8]
 800c15a:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800c15e:	719a      	strb	r2, [r3, #6]
 800c160:	68a3      	ldr	r3, [r4, #8]
 800c162:	f89d 2000 	ldrb.w	r2, [sp]
 800c166:	71da      	strb	r2, [r3, #7]
 800c168:	68a2      	ldr	r2, [r4, #8]
 800c16a:	6923      	ldr	r3, [r4, #16]
 800c16c:	3208      	adds	r2, #8
 800c16e:	3308      	adds	r3, #8
 800c170:	2108      	movs	r1, #8
 800c172:	60a2      	str	r2, [r4, #8]
 800c174:	6123      	str	r3, [r4, #16]
 800c176:	7561      	strb	r1, [r4, #21]
 800c178:	7da0      	ldrb	r0, [r4, #22]
 800c17a:	f080 0001 	eor.w	r0, r0, #1
 800c17e:	b002      	add	sp, #8
 800c180:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c184:	466b      	mov	r3, sp
 800c186:	cb03      	ldmia	r3!, {r0, r1}
 800c188:	68a3      	ldr	r3, [r4, #8]
 800c18a:	6018      	str	r0, [r3, #0]
 800c18c:	6059      	str	r1, [r3, #4]
 800c18e:	e7eb      	b.n	800c168 <ucdr_serialize_uint64_t+0x10c>
 800c190:	68a2      	ldr	r2, [r4, #8]
 800c192:	6923      	ldr	r3, [r4, #16]
 800c194:	7da0      	ldrb	r0, [r4, #22]
 800c196:	7567      	strb	r7, [r4, #21]
 800c198:	1b92      	subs	r2, r2, r6
 800c19a:	1b9b      	subs	r3, r3, r6
 800c19c:	f080 0001 	eor.w	r0, r0, #1
 800c1a0:	60a2      	str	r2, [r4, #8]
 800c1a2:	6123      	str	r3, [r4, #16]
 800c1a4:	b002      	add	sp, #8
 800c1a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c1aa:	68a3      	ldr	r3, [r4, #8]
 800c1ac:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800c1b0:	701a      	strb	r2, [r3, #0]
 800c1b2:	68a3      	ldr	r3, [r4, #8]
 800c1b4:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800c1b8:	701a      	strb	r2, [r3, #0]
 800c1ba:	68a3      	ldr	r3, [r4, #8]
 800c1bc:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800c1c0:	701a      	strb	r2, [r3, #0]
 800c1c2:	68a3      	ldr	r3, [r4, #8]
 800c1c4:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800c1c8:	701a      	strb	r2, [r3, #0]
 800c1ca:	68a3      	ldr	r3, [r4, #8]
 800c1cc:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800c1d0:	701a      	strb	r2, [r3, #0]
 800c1d2:	68a3      	ldr	r3, [r4, #8]
 800c1d4:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800c1d8:	701a      	strb	r2, [r3, #0]
 800c1da:	68a3      	ldr	r3, [r4, #8]
 800c1dc:	f89d 2000 	ldrb.w	r2, [sp]
 800c1e0:	701a      	strb	r2, [r3, #0]
 800c1e2:	e78a      	b.n	800c0fa <ucdr_serialize_uint64_t+0x9e>
 800c1e4:	4628      	mov	r0, r5
 800c1e6:	466d      	mov	r5, sp
 800c1e8:	4629      	mov	r1, r5
 800c1ea:	4632      	mov	r2, r6
 800c1ec:	f00b fca5 	bl	8017b3a <memcpy>
 800c1f0:	68a0      	ldr	r0, [r4, #8]
 800c1f2:	4642      	mov	r2, r8
 800c1f4:	19a9      	adds	r1, r5, r6
 800c1f6:	f00b fca0 	bl	8017b3a <memcpy>
 800c1fa:	e77e      	b.n	800c0fa <ucdr_serialize_uint64_t+0x9e>

0800c1fc <ucdr_serialize_int16_t>:
 800c1fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c200:	b082      	sub	sp, #8
 800c202:	460b      	mov	r3, r1
 800c204:	2102      	movs	r1, #2
 800c206:	4604      	mov	r4, r0
 800c208:	f8ad 3006 	strh.w	r3, [sp, #6]
 800c20c:	f000 fc12 	bl	800ca34 <ucdr_buffer_alignment>
 800c210:	4601      	mov	r1, r0
 800c212:	4620      	mov	r0, r4
 800c214:	7d67      	ldrb	r7, [r4, #21]
 800c216:	f000 fc51 	bl	800cabc <ucdr_advance_buffer>
 800c21a:	2102      	movs	r1, #2
 800c21c:	4620      	mov	r0, r4
 800c21e:	f000 fba9 	bl	800c974 <ucdr_check_buffer_available_for>
 800c222:	bb78      	cbnz	r0, 800c284 <ucdr_serialize_int16_t+0x88>
 800c224:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800c228:	42ab      	cmp	r3, r5
 800c22a:	d926      	bls.n	800c27a <ucdr_serialize_int16_t+0x7e>
 800c22c:	1b5e      	subs	r6, r3, r5
 800c22e:	60a3      	str	r3, [r4, #8]
 800c230:	6923      	ldr	r3, [r4, #16]
 800c232:	f1c6 0802 	rsb	r8, r6, #2
 800c236:	4433      	add	r3, r6
 800c238:	6123      	str	r3, [r4, #16]
 800c23a:	4641      	mov	r1, r8
 800c23c:	4620      	mov	r0, r4
 800c23e:	f000 fba5 	bl	800c98c <ucdr_check_final_buffer_behavior>
 800c242:	2800      	cmp	r0, #0
 800c244:	d03b      	beq.n	800c2be <ucdr_serialize_int16_t+0xc2>
 800c246:	7d23      	ldrb	r3, [r4, #20]
 800c248:	2b01      	cmp	r3, #1
 800c24a:	d04a      	beq.n	800c2e2 <ucdr_serialize_int16_t+0xe6>
 800c24c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800c250:	702b      	strb	r3, [r5, #0]
 800c252:	2e00      	cmp	r6, #0
 800c254:	d040      	beq.n	800c2d8 <ucdr_serialize_int16_t+0xdc>
 800c256:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800c25a:	706b      	strb	r3, [r5, #1]
 800c25c:	6923      	ldr	r3, [r4, #16]
 800c25e:	68a2      	ldr	r2, [r4, #8]
 800c260:	7da0      	ldrb	r0, [r4, #22]
 800c262:	3302      	adds	r3, #2
 800c264:	1b9e      	subs	r6, r3, r6
 800c266:	4442      	add	r2, r8
 800c268:	2302      	movs	r3, #2
 800c26a:	f080 0001 	eor.w	r0, r0, #1
 800c26e:	60a2      	str	r2, [r4, #8]
 800c270:	6126      	str	r6, [r4, #16]
 800c272:	7563      	strb	r3, [r4, #21]
 800c274:	b002      	add	sp, #8
 800c276:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c27a:	2102      	movs	r1, #2
 800c27c:	4620      	mov	r0, r4
 800c27e:	f000 fb85 	bl	800c98c <ucdr_check_final_buffer_behavior>
 800c282:	b190      	cbz	r0, 800c2aa <ucdr_serialize_int16_t+0xae>
 800c284:	7d23      	ldrb	r3, [r4, #20]
 800c286:	2b01      	cmp	r3, #1
 800c288:	68a3      	ldr	r3, [r4, #8]
 800c28a:	d014      	beq.n	800c2b6 <ucdr_serialize_int16_t+0xba>
 800c28c:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800c290:	701a      	strb	r2, [r3, #0]
 800c292:	68a3      	ldr	r3, [r4, #8]
 800c294:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800c298:	705a      	strb	r2, [r3, #1]
 800c29a:	68a2      	ldr	r2, [r4, #8]
 800c29c:	6923      	ldr	r3, [r4, #16]
 800c29e:	3202      	adds	r2, #2
 800c2a0:	3302      	adds	r3, #2
 800c2a2:	2102      	movs	r1, #2
 800c2a4:	60a2      	str	r2, [r4, #8]
 800c2a6:	6123      	str	r3, [r4, #16]
 800c2a8:	7561      	strb	r1, [r4, #21]
 800c2aa:	7da0      	ldrb	r0, [r4, #22]
 800c2ac:	f080 0001 	eor.w	r0, r0, #1
 800c2b0:	b002      	add	sp, #8
 800c2b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c2b6:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800c2ba:	801a      	strh	r2, [r3, #0]
 800c2bc:	e7ed      	b.n	800c29a <ucdr_serialize_int16_t+0x9e>
 800c2be:	68a2      	ldr	r2, [r4, #8]
 800c2c0:	6923      	ldr	r3, [r4, #16]
 800c2c2:	7da0      	ldrb	r0, [r4, #22]
 800c2c4:	7567      	strb	r7, [r4, #21]
 800c2c6:	1b92      	subs	r2, r2, r6
 800c2c8:	1b9b      	subs	r3, r3, r6
 800c2ca:	f080 0001 	eor.w	r0, r0, #1
 800c2ce:	60a2      	str	r2, [r4, #8]
 800c2d0:	6123      	str	r3, [r4, #16]
 800c2d2:	b002      	add	sp, #8
 800c2d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c2d8:	68a3      	ldr	r3, [r4, #8]
 800c2da:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800c2de:	701a      	strb	r2, [r3, #0]
 800c2e0:	e7bc      	b.n	800c25c <ucdr_serialize_int16_t+0x60>
 800c2e2:	4628      	mov	r0, r5
 800c2e4:	f10d 0506 	add.w	r5, sp, #6
 800c2e8:	4629      	mov	r1, r5
 800c2ea:	4632      	mov	r2, r6
 800c2ec:	f00b fc25 	bl	8017b3a <memcpy>
 800c2f0:	68a0      	ldr	r0, [r4, #8]
 800c2f2:	4642      	mov	r2, r8
 800c2f4:	19a9      	adds	r1, r5, r6
 800c2f6:	f00b fc20 	bl	8017b3a <memcpy>
 800c2fa:	e7af      	b.n	800c25c <ucdr_serialize_int16_t+0x60>

0800c2fc <ucdr_deserialize_int16_t>:
 800c2fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c300:	460d      	mov	r5, r1
 800c302:	2102      	movs	r1, #2
 800c304:	4604      	mov	r4, r0
 800c306:	f000 fb95 	bl	800ca34 <ucdr_buffer_alignment>
 800c30a:	4601      	mov	r1, r0
 800c30c:	4620      	mov	r0, r4
 800c30e:	f894 8015 	ldrb.w	r8, [r4, #21]
 800c312:	f000 fbd3 	bl	800cabc <ucdr_advance_buffer>
 800c316:	2102      	movs	r1, #2
 800c318:	4620      	mov	r0, r4
 800c31a:	f000 fb2b 	bl	800c974 <ucdr_check_buffer_available_for>
 800c31e:	bb60      	cbnz	r0, 800c37a <ucdr_deserialize_int16_t+0x7e>
 800c320:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800c324:	42be      	cmp	r6, r7
 800c326:	d923      	bls.n	800c370 <ucdr_deserialize_int16_t+0x74>
 800c328:	6923      	ldr	r3, [r4, #16]
 800c32a:	60a6      	str	r6, [r4, #8]
 800c32c:	1bf6      	subs	r6, r6, r7
 800c32e:	4433      	add	r3, r6
 800c330:	f1c6 0902 	rsb	r9, r6, #2
 800c334:	6123      	str	r3, [r4, #16]
 800c336:	4649      	mov	r1, r9
 800c338:	4620      	mov	r0, r4
 800c33a:	f000 fb27 	bl	800c98c <ucdr_check_final_buffer_behavior>
 800c33e:	2800      	cmp	r0, #0
 800c340:	d034      	beq.n	800c3ac <ucdr_deserialize_int16_t+0xb0>
 800c342:	7d23      	ldrb	r3, [r4, #20]
 800c344:	2b01      	cmp	r3, #1
 800c346:	d042      	beq.n	800c3ce <ucdr_deserialize_int16_t+0xd2>
 800c348:	787b      	ldrb	r3, [r7, #1]
 800c34a:	702b      	strb	r3, [r5, #0]
 800c34c:	2e00      	cmp	r6, #0
 800c34e:	d03a      	beq.n	800c3c6 <ucdr_deserialize_int16_t+0xca>
 800c350:	783b      	ldrb	r3, [r7, #0]
 800c352:	706b      	strb	r3, [r5, #1]
 800c354:	6923      	ldr	r3, [r4, #16]
 800c356:	68a2      	ldr	r2, [r4, #8]
 800c358:	7da0      	ldrb	r0, [r4, #22]
 800c35a:	2102      	movs	r1, #2
 800c35c:	3302      	adds	r3, #2
 800c35e:	444a      	add	r2, r9
 800c360:	1b9b      	subs	r3, r3, r6
 800c362:	7561      	strb	r1, [r4, #21]
 800c364:	60a2      	str	r2, [r4, #8]
 800c366:	6123      	str	r3, [r4, #16]
 800c368:	f080 0001 	eor.w	r0, r0, #1
 800c36c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c370:	2102      	movs	r1, #2
 800c372:	4620      	mov	r0, r4
 800c374:	f000 fb0a 	bl	800c98c <ucdr_check_final_buffer_behavior>
 800c378:	b180      	cbz	r0, 800c39c <ucdr_deserialize_int16_t+0xa0>
 800c37a:	7d23      	ldrb	r3, [r4, #20]
 800c37c:	2b01      	cmp	r3, #1
 800c37e:	68a3      	ldr	r3, [r4, #8]
 800c380:	d011      	beq.n	800c3a6 <ucdr_deserialize_int16_t+0xaa>
 800c382:	785b      	ldrb	r3, [r3, #1]
 800c384:	702b      	strb	r3, [r5, #0]
 800c386:	68a3      	ldr	r3, [r4, #8]
 800c388:	781b      	ldrb	r3, [r3, #0]
 800c38a:	706b      	strb	r3, [r5, #1]
 800c38c:	68a2      	ldr	r2, [r4, #8]
 800c38e:	6923      	ldr	r3, [r4, #16]
 800c390:	3202      	adds	r2, #2
 800c392:	3302      	adds	r3, #2
 800c394:	2102      	movs	r1, #2
 800c396:	60a2      	str	r2, [r4, #8]
 800c398:	6123      	str	r3, [r4, #16]
 800c39a:	7561      	strb	r1, [r4, #21]
 800c39c:	7da0      	ldrb	r0, [r4, #22]
 800c39e:	f080 0001 	eor.w	r0, r0, #1
 800c3a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c3a6:	881b      	ldrh	r3, [r3, #0]
 800c3a8:	802b      	strh	r3, [r5, #0]
 800c3aa:	e7ef      	b.n	800c38c <ucdr_deserialize_int16_t+0x90>
 800c3ac:	68a2      	ldr	r2, [r4, #8]
 800c3ae:	6923      	ldr	r3, [r4, #16]
 800c3b0:	7da0      	ldrb	r0, [r4, #22]
 800c3b2:	f884 8015 	strb.w	r8, [r4, #21]
 800c3b6:	1b92      	subs	r2, r2, r6
 800c3b8:	1b9b      	subs	r3, r3, r6
 800c3ba:	60a2      	str	r2, [r4, #8]
 800c3bc:	6123      	str	r3, [r4, #16]
 800c3be:	f080 0001 	eor.w	r0, r0, #1
 800c3c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c3c6:	68a3      	ldr	r3, [r4, #8]
 800c3c8:	781b      	ldrb	r3, [r3, #0]
 800c3ca:	706b      	strb	r3, [r5, #1]
 800c3cc:	e7c2      	b.n	800c354 <ucdr_deserialize_int16_t+0x58>
 800c3ce:	4639      	mov	r1, r7
 800c3d0:	4632      	mov	r2, r6
 800c3d2:	4628      	mov	r0, r5
 800c3d4:	f00b fbb1 	bl	8017b3a <memcpy>
 800c3d8:	68a1      	ldr	r1, [r4, #8]
 800c3da:	464a      	mov	r2, r9
 800c3dc:	19a8      	adds	r0, r5, r6
 800c3de:	f00b fbac 	bl	8017b3a <memcpy>
 800c3e2:	e7b7      	b.n	800c354 <ucdr_deserialize_int16_t+0x58>

0800c3e4 <ucdr_serialize_int32_t>:
 800c3e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c3e8:	b082      	sub	sp, #8
 800c3ea:	4604      	mov	r4, r0
 800c3ec:	9101      	str	r1, [sp, #4]
 800c3ee:	2104      	movs	r1, #4
 800c3f0:	f000 fb20 	bl	800ca34 <ucdr_buffer_alignment>
 800c3f4:	4601      	mov	r1, r0
 800c3f6:	4620      	mov	r0, r4
 800c3f8:	7d67      	ldrb	r7, [r4, #21]
 800c3fa:	f000 fb5f 	bl	800cabc <ucdr_advance_buffer>
 800c3fe:	2104      	movs	r1, #4
 800c400:	4620      	mov	r0, r4
 800c402:	f000 fab7 	bl	800c974 <ucdr_check_buffer_available_for>
 800c406:	2800      	cmp	r0, #0
 800c408:	d139      	bne.n	800c47e <ucdr_serialize_int32_t+0x9a>
 800c40a:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800c40e:	42ab      	cmp	r3, r5
 800c410:	d930      	bls.n	800c474 <ucdr_serialize_int32_t+0x90>
 800c412:	1b5e      	subs	r6, r3, r5
 800c414:	60a3      	str	r3, [r4, #8]
 800c416:	6923      	ldr	r3, [r4, #16]
 800c418:	f1c6 0804 	rsb	r8, r6, #4
 800c41c:	4433      	add	r3, r6
 800c41e:	6123      	str	r3, [r4, #16]
 800c420:	4641      	mov	r1, r8
 800c422:	4620      	mov	r0, r4
 800c424:	f000 fab2 	bl	800c98c <ucdr_check_final_buffer_behavior>
 800c428:	2800      	cmp	r0, #0
 800c42a:	d04c      	beq.n	800c4c6 <ucdr_serialize_int32_t+0xe2>
 800c42c:	7d23      	ldrb	r3, [r4, #20]
 800c42e:	2b01      	cmp	r3, #1
 800c430:	d063      	beq.n	800c4fa <ucdr_serialize_int32_t+0x116>
 800c432:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800c436:	702b      	strb	r3, [r5, #0]
 800c438:	2e00      	cmp	r6, #0
 800c43a:	d051      	beq.n	800c4e0 <ucdr_serialize_int32_t+0xfc>
 800c43c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800c440:	706b      	strb	r3, [r5, #1]
 800c442:	2e01      	cmp	r6, #1
 800c444:	d050      	beq.n	800c4e8 <ucdr_serialize_int32_t+0x104>
 800c446:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800c44a:	70ab      	strb	r3, [r5, #2]
 800c44c:	2e02      	cmp	r6, #2
 800c44e:	d04f      	beq.n	800c4f0 <ucdr_serialize_int32_t+0x10c>
 800c450:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800c454:	70eb      	strb	r3, [r5, #3]
 800c456:	6923      	ldr	r3, [r4, #16]
 800c458:	68a2      	ldr	r2, [r4, #8]
 800c45a:	7da0      	ldrb	r0, [r4, #22]
 800c45c:	3304      	adds	r3, #4
 800c45e:	1b9e      	subs	r6, r3, r6
 800c460:	4442      	add	r2, r8
 800c462:	2304      	movs	r3, #4
 800c464:	f080 0001 	eor.w	r0, r0, #1
 800c468:	60a2      	str	r2, [r4, #8]
 800c46a:	6126      	str	r6, [r4, #16]
 800c46c:	7563      	strb	r3, [r4, #21]
 800c46e:	b002      	add	sp, #8
 800c470:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c474:	2104      	movs	r1, #4
 800c476:	4620      	mov	r0, r4
 800c478:	f000 fa88 	bl	800c98c <ucdr_check_final_buffer_behavior>
 800c47c:	b1d0      	cbz	r0, 800c4b4 <ucdr_serialize_int32_t+0xd0>
 800c47e:	7d23      	ldrb	r3, [r4, #20]
 800c480:	2b01      	cmp	r3, #1
 800c482:	68a3      	ldr	r3, [r4, #8]
 800c484:	d01c      	beq.n	800c4c0 <ucdr_serialize_int32_t+0xdc>
 800c486:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800c48a:	701a      	strb	r2, [r3, #0]
 800c48c:	68a3      	ldr	r3, [r4, #8]
 800c48e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800c492:	705a      	strb	r2, [r3, #1]
 800c494:	68a3      	ldr	r3, [r4, #8]
 800c496:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800c49a:	709a      	strb	r2, [r3, #2]
 800c49c:	68a3      	ldr	r3, [r4, #8]
 800c49e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800c4a2:	70da      	strb	r2, [r3, #3]
 800c4a4:	68a2      	ldr	r2, [r4, #8]
 800c4a6:	6923      	ldr	r3, [r4, #16]
 800c4a8:	3204      	adds	r2, #4
 800c4aa:	3304      	adds	r3, #4
 800c4ac:	2104      	movs	r1, #4
 800c4ae:	60a2      	str	r2, [r4, #8]
 800c4b0:	6123      	str	r3, [r4, #16]
 800c4b2:	7561      	strb	r1, [r4, #21]
 800c4b4:	7da0      	ldrb	r0, [r4, #22]
 800c4b6:	f080 0001 	eor.w	r0, r0, #1
 800c4ba:	b002      	add	sp, #8
 800c4bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c4c0:	9a01      	ldr	r2, [sp, #4]
 800c4c2:	601a      	str	r2, [r3, #0]
 800c4c4:	e7ee      	b.n	800c4a4 <ucdr_serialize_int32_t+0xc0>
 800c4c6:	68a2      	ldr	r2, [r4, #8]
 800c4c8:	6923      	ldr	r3, [r4, #16]
 800c4ca:	7da0      	ldrb	r0, [r4, #22]
 800c4cc:	7567      	strb	r7, [r4, #21]
 800c4ce:	1b92      	subs	r2, r2, r6
 800c4d0:	1b9b      	subs	r3, r3, r6
 800c4d2:	f080 0001 	eor.w	r0, r0, #1
 800c4d6:	60a2      	str	r2, [r4, #8]
 800c4d8:	6123      	str	r3, [r4, #16]
 800c4da:	b002      	add	sp, #8
 800c4dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c4e0:	68a3      	ldr	r3, [r4, #8]
 800c4e2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800c4e6:	701a      	strb	r2, [r3, #0]
 800c4e8:	68a3      	ldr	r3, [r4, #8]
 800c4ea:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800c4ee:	701a      	strb	r2, [r3, #0]
 800c4f0:	68a3      	ldr	r3, [r4, #8]
 800c4f2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800c4f6:	701a      	strb	r2, [r3, #0]
 800c4f8:	e7ad      	b.n	800c456 <ucdr_serialize_int32_t+0x72>
 800c4fa:	4628      	mov	r0, r5
 800c4fc:	ad01      	add	r5, sp, #4
 800c4fe:	4629      	mov	r1, r5
 800c500:	4632      	mov	r2, r6
 800c502:	f00b fb1a 	bl	8017b3a <memcpy>
 800c506:	68a0      	ldr	r0, [r4, #8]
 800c508:	4642      	mov	r2, r8
 800c50a:	19a9      	adds	r1, r5, r6
 800c50c:	f00b fb15 	bl	8017b3a <memcpy>
 800c510:	e7a1      	b.n	800c456 <ucdr_serialize_int32_t+0x72>
 800c512:	bf00      	nop

0800c514 <ucdr_deserialize_int32_t>:
 800c514:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c518:	460d      	mov	r5, r1
 800c51a:	2104      	movs	r1, #4
 800c51c:	4604      	mov	r4, r0
 800c51e:	f000 fa89 	bl	800ca34 <ucdr_buffer_alignment>
 800c522:	4601      	mov	r1, r0
 800c524:	4620      	mov	r0, r4
 800c526:	f894 8015 	ldrb.w	r8, [r4, #21]
 800c52a:	f000 fac7 	bl	800cabc <ucdr_advance_buffer>
 800c52e:	2104      	movs	r1, #4
 800c530:	4620      	mov	r0, r4
 800c532:	f000 fa1f 	bl	800c974 <ucdr_check_buffer_available_for>
 800c536:	2800      	cmp	r0, #0
 800c538:	d138      	bne.n	800c5ac <ucdr_deserialize_int32_t+0x98>
 800c53a:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800c53e:	42b7      	cmp	r7, r6
 800c540:	d92f      	bls.n	800c5a2 <ucdr_deserialize_int32_t+0x8e>
 800c542:	6923      	ldr	r3, [r4, #16]
 800c544:	60a7      	str	r7, [r4, #8]
 800c546:	1bbf      	subs	r7, r7, r6
 800c548:	443b      	add	r3, r7
 800c54a:	f1c7 0904 	rsb	r9, r7, #4
 800c54e:	6123      	str	r3, [r4, #16]
 800c550:	4649      	mov	r1, r9
 800c552:	4620      	mov	r0, r4
 800c554:	f000 fa1a 	bl	800c98c <ucdr_check_final_buffer_behavior>
 800c558:	2800      	cmp	r0, #0
 800c55a:	d046      	beq.n	800c5ea <ucdr_deserialize_int32_t+0xd6>
 800c55c:	7d23      	ldrb	r3, [r4, #20]
 800c55e:	2b01      	cmp	r3, #1
 800c560:	d05c      	beq.n	800c61c <ucdr_deserialize_int32_t+0x108>
 800c562:	78f3      	ldrb	r3, [r6, #3]
 800c564:	702b      	strb	r3, [r5, #0]
 800c566:	2f00      	cmp	r7, #0
 800c568:	d04c      	beq.n	800c604 <ucdr_deserialize_int32_t+0xf0>
 800c56a:	78b3      	ldrb	r3, [r6, #2]
 800c56c:	706b      	strb	r3, [r5, #1]
 800c56e:	2f01      	cmp	r7, #1
 800c570:	f105 0302 	add.w	r3, r5, #2
 800c574:	d04a      	beq.n	800c60c <ucdr_deserialize_int32_t+0xf8>
 800c576:	7873      	ldrb	r3, [r6, #1]
 800c578:	70ab      	strb	r3, [r5, #2]
 800c57a:	2f02      	cmp	r7, #2
 800c57c:	f105 0303 	add.w	r3, r5, #3
 800c580:	d048      	beq.n	800c614 <ucdr_deserialize_int32_t+0x100>
 800c582:	7833      	ldrb	r3, [r6, #0]
 800c584:	70eb      	strb	r3, [r5, #3]
 800c586:	6923      	ldr	r3, [r4, #16]
 800c588:	68a2      	ldr	r2, [r4, #8]
 800c58a:	7da0      	ldrb	r0, [r4, #22]
 800c58c:	2104      	movs	r1, #4
 800c58e:	3304      	adds	r3, #4
 800c590:	444a      	add	r2, r9
 800c592:	1bdb      	subs	r3, r3, r7
 800c594:	7561      	strb	r1, [r4, #21]
 800c596:	60a2      	str	r2, [r4, #8]
 800c598:	6123      	str	r3, [r4, #16]
 800c59a:	f080 0001 	eor.w	r0, r0, #1
 800c59e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c5a2:	2104      	movs	r1, #4
 800c5a4:	4620      	mov	r0, r4
 800c5a6:	f000 f9f1 	bl	800c98c <ucdr_check_final_buffer_behavior>
 800c5aa:	b1b0      	cbz	r0, 800c5da <ucdr_deserialize_int32_t+0xc6>
 800c5ac:	7d23      	ldrb	r3, [r4, #20]
 800c5ae:	2b01      	cmp	r3, #1
 800c5b0:	68a3      	ldr	r3, [r4, #8]
 800c5b2:	d017      	beq.n	800c5e4 <ucdr_deserialize_int32_t+0xd0>
 800c5b4:	78db      	ldrb	r3, [r3, #3]
 800c5b6:	702b      	strb	r3, [r5, #0]
 800c5b8:	68a3      	ldr	r3, [r4, #8]
 800c5ba:	789b      	ldrb	r3, [r3, #2]
 800c5bc:	706b      	strb	r3, [r5, #1]
 800c5be:	68a3      	ldr	r3, [r4, #8]
 800c5c0:	785b      	ldrb	r3, [r3, #1]
 800c5c2:	70ab      	strb	r3, [r5, #2]
 800c5c4:	68a3      	ldr	r3, [r4, #8]
 800c5c6:	781b      	ldrb	r3, [r3, #0]
 800c5c8:	70eb      	strb	r3, [r5, #3]
 800c5ca:	68a2      	ldr	r2, [r4, #8]
 800c5cc:	6923      	ldr	r3, [r4, #16]
 800c5ce:	3204      	adds	r2, #4
 800c5d0:	3304      	adds	r3, #4
 800c5d2:	2104      	movs	r1, #4
 800c5d4:	60a2      	str	r2, [r4, #8]
 800c5d6:	6123      	str	r3, [r4, #16]
 800c5d8:	7561      	strb	r1, [r4, #21]
 800c5da:	7da0      	ldrb	r0, [r4, #22]
 800c5dc:	f080 0001 	eor.w	r0, r0, #1
 800c5e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c5e4:	681b      	ldr	r3, [r3, #0]
 800c5e6:	602b      	str	r3, [r5, #0]
 800c5e8:	e7ef      	b.n	800c5ca <ucdr_deserialize_int32_t+0xb6>
 800c5ea:	68a2      	ldr	r2, [r4, #8]
 800c5ec:	6923      	ldr	r3, [r4, #16]
 800c5ee:	7da0      	ldrb	r0, [r4, #22]
 800c5f0:	f884 8015 	strb.w	r8, [r4, #21]
 800c5f4:	1bd2      	subs	r2, r2, r7
 800c5f6:	1bdb      	subs	r3, r3, r7
 800c5f8:	60a2      	str	r2, [r4, #8]
 800c5fa:	6123      	str	r3, [r4, #16]
 800c5fc:	f080 0001 	eor.w	r0, r0, #1
 800c600:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c604:	68a3      	ldr	r3, [r4, #8]
 800c606:	789b      	ldrb	r3, [r3, #2]
 800c608:	706b      	strb	r3, [r5, #1]
 800c60a:	1cab      	adds	r3, r5, #2
 800c60c:	68a2      	ldr	r2, [r4, #8]
 800c60e:	7852      	ldrb	r2, [r2, #1]
 800c610:	f803 2b01 	strb.w	r2, [r3], #1
 800c614:	68a2      	ldr	r2, [r4, #8]
 800c616:	7812      	ldrb	r2, [r2, #0]
 800c618:	701a      	strb	r2, [r3, #0]
 800c61a:	e7b4      	b.n	800c586 <ucdr_deserialize_int32_t+0x72>
 800c61c:	4631      	mov	r1, r6
 800c61e:	463a      	mov	r2, r7
 800c620:	4628      	mov	r0, r5
 800c622:	f00b fa8a 	bl	8017b3a <memcpy>
 800c626:	68a1      	ldr	r1, [r4, #8]
 800c628:	464a      	mov	r2, r9
 800c62a:	19e8      	adds	r0, r5, r7
 800c62c:	f00b fa85 	bl	8017b3a <memcpy>
 800c630:	e7a9      	b.n	800c586 <ucdr_deserialize_int32_t+0x72>
 800c632:	bf00      	nop

0800c634 <ucdr_serialize_endian_double>:
 800c634:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c638:	460e      	mov	r6, r1
 800c63a:	b083      	sub	sp, #12
 800c63c:	2108      	movs	r1, #8
 800c63e:	4604      	mov	r4, r0
 800c640:	ed8d 0b00 	vstr	d0, [sp]
 800c644:	f000 f9f6 	bl	800ca34 <ucdr_buffer_alignment>
 800c648:	4601      	mov	r1, r0
 800c64a:	4620      	mov	r0, r4
 800c64c:	f894 8015 	ldrb.w	r8, [r4, #21]
 800c650:	f000 fa34 	bl	800cabc <ucdr_advance_buffer>
 800c654:	2108      	movs	r1, #8
 800c656:	4620      	mov	r0, r4
 800c658:	f000 f98c 	bl	800c974 <ucdr_check_buffer_available_for>
 800c65c:	2800      	cmp	r0, #0
 800c65e:	d14d      	bne.n	800c6fc <ucdr_serialize_endian_double+0xc8>
 800c660:	e9d4 5701 	ldrd	r5, r7, [r4, #4]
 800c664:	42bd      	cmp	r5, r7
 800c666:	d944      	bls.n	800c6f2 <ucdr_serialize_endian_double+0xbe>
 800c668:	6923      	ldr	r3, [r4, #16]
 800c66a:	60a5      	str	r5, [r4, #8]
 800c66c:	1bed      	subs	r5, r5, r7
 800c66e:	442b      	add	r3, r5
 800c670:	f1c5 0908 	rsb	r9, r5, #8
 800c674:	6123      	str	r3, [r4, #16]
 800c676:	4649      	mov	r1, r9
 800c678:	4620      	mov	r0, r4
 800c67a:	f000 f987 	bl	800c98c <ucdr_check_final_buffer_behavior>
 800c67e:	2800      	cmp	r0, #0
 800c680:	d072      	beq.n	800c768 <ucdr_serialize_endian_double+0x134>
 800c682:	2e01      	cmp	r6, #1
 800c684:	f000 809b 	beq.w	800c7be <ucdr_serialize_endian_double+0x18a>
 800c688:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800c68c:	703b      	strb	r3, [r7, #0]
 800c68e:	2d00      	cmp	r5, #0
 800c690:	d078      	beq.n	800c784 <ucdr_serialize_endian_double+0x150>
 800c692:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800c696:	707b      	strb	r3, [r7, #1]
 800c698:	2d01      	cmp	r5, #1
 800c69a:	d077      	beq.n	800c78c <ucdr_serialize_endian_double+0x158>
 800c69c:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800c6a0:	70bb      	strb	r3, [r7, #2]
 800c6a2:	2d02      	cmp	r5, #2
 800c6a4:	d076      	beq.n	800c794 <ucdr_serialize_endian_double+0x160>
 800c6a6:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800c6aa:	70fb      	strb	r3, [r7, #3]
 800c6ac:	2d03      	cmp	r5, #3
 800c6ae:	d075      	beq.n	800c79c <ucdr_serialize_endian_double+0x168>
 800c6b0:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800c6b4:	713b      	strb	r3, [r7, #4]
 800c6b6:	2d04      	cmp	r5, #4
 800c6b8:	d074      	beq.n	800c7a4 <ucdr_serialize_endian_double+0x170>
 800c6ba:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800c6be:	717b      	strb	r3, [r7, #5]
 800c6c0:	2d05      	cmp	r5, #5
 800c6c2:	d073      	beq.n	800c7ac <ucdr_serialize_endian_double+0x178>
 800c6c4:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800c6c8:	71bb      	strb	r3, [r7, #6]
 800c6ca:	2d06      	cmp	r5, #6
 800c6cc:	d072      	beq.n	800c7b4 <ucdr_serialize_endian_double+0x180>
 800c6ce:	f89d 3000 	ldrb.w	r3, [sp]
 800c6d2:	71fb      	strb	r3, [r7, #7]
 800c6d4:	6923      	ldr	r3, [r4, #16]
 800c6d6:	68a2      	ldr	r2, [r4, #8]
 800c6d8:	7da0      	ldrb	r0, [r4, #22]
 800c6da:	3308      	adds	r3, #8
 800c6dc:	1b5d      	subs	r5, r3, r5
 800c6de:	444a      	add	r2, r9
 800c6e0:	2308      	movs	r3, #8
 800c6e2:	f080 0001 	eor.w	r0, r0, #1
 800c6e6:	60a2      	str	r2, [r4, #8]
 800c6e8:	6125      	str	r5, [r4, #16]
 800c6ea:	7563      	strb	r3, [r4, #21]
 800c6ec:	b003      	add	sp, #12
 800c6ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c6f2:	2108      	movs	r1, #8
 800c6f4:	4620      	mov	r0, r4
 800c6f6:	f000 f949 	bl	800c98c <ucdr_check_final_buffer_behavior>
 800c6fa:	b348      	cbz	r0, 800c750 <ucdr_serialize_endian_double+0x11c>
 800c6fc:	2e01      	cmp	r6, #1
 800c6fe:	d02d      	beq.n	800c75c <ucdr_serialize_endian_double+0x128>
 800c700:	68a3      	ldr	r3, [r4, #8]
 800c702:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800c706:	701a      	strb	r2, [r3, #0]
 800c708:	68a3      	ldr	r3, [r4, #8]
 800c70a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800c70e:	705a      	strb	r2, [r3, #1]
 800c710:	68a3      	ldr	r3, [r4, #8]
 800c712:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800c716:	709a      	strb	r2, [r3, #2]
 800c718:	68a3      	ldr	r3, [r4, #8]
 800c71a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800c71e:	70da      	strb	r2, [r3, #3]
 800c720:	68a3      	ldr	r3, [r4, #8]
 800c722:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800c726:	711a      	strb	r2, [r3, #4]
 800c728:	68a3      	ldr	r3, [r4, #8]
 800c72a:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800c72e:	715a      	strb	r2, [r3, #5]
 800c730:	68a3      	ldr	r3, [r4, #8]
 800c732:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800c736:	719a      	strb	r2, [r3, #6]
 800c738:	68a3      	ldr	r3, [r4, #8]
 800c73a:	f89d 2000 	ldrb.w	r2, [sp]
 800c73e:	71da      	strb	r2, [r3, #7]
 800c740:	68a2      	ldr	r2, [r4, #8]
 800c742:	6923      	ldr	r3, [r4, #16]
 800c744:	3208      	adds	r2, #8
 800c746:	3308      	adds	r3, #8
 800c748:	2108      	movs	r1, #8
 800c74a:	60a2      	str	r2, [r4, #8]
 800c74c:	6123      	str	r3, [r4, #16]
 800c74e:	7561      	strb	r1, [r4, #21]
 800c750:	7da0      	ldrb	r0, [r4, #22]
 800c752:	f080 0001 	eor.w	r0, r0, #1
 800c756:	b003      	add	sp, #12
 800c758:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c75c:	466b      	mov	r3, sp
 800c75e:	cb03      	ldmia	r3!, {r0, r1}
 800c760:	68a3      	ldr	r3, [r4, #8]
 800c762:	6018      	str	r0, [r3, #0]
 800c764:	6059      	str	r1, [r3, #4]
 800c766:	e7eb      	b.n	800c740 <ucdr_serialize_endian_double+0x10c>
 800c768:	68a2      	ldr	r2, [r4, #8]
 800c76a:	6923      	ldr	r3, [r4, #16]
 800c76c:	7da0      	ldrb	r0, [r4, #22]
 800c76e:	f884 8015 	strb.w	r8, [r4, #21]
 800c772:	1b52      	subs	r2, r2, r5
 800c774:	1b5b      	subs	r3, r3, r5
 800c776:	f080 0001 	eor.w	r0, r0, #1
 800c77a:	60a2      	str	r2, [r4, #8]
 800c77c:	6123      	str	r3, [r4, #16]
 800c77e:	b003      	add	sp, #12
 800c780:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c784:	68a3      	ldr	r3, [r4, #8]
 800c786:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800c78a:	701a      	strb	r2, [r3, #0]
 800c78c:	68a3      	ldr	r3, [r4, #8]
 800c78e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800c792:	701a      	strb	r2, [r3, #0]
 800c794:	68a3      	ldr	r3, [r4, #8]
 800c796:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800c79a:	701a      	strb	r2, [r3, #0]
 800c79c:	68a3      	ldr	r3, [r4, #8]
 800c79e:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800c7a2:	701a      	strb	r2, [r3, #0]
 800c7a4:	68a3      	ldr	r3, [r4, #8]
 800c7a6:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800c7aa:	701a      	strb	r2, [r3, #0]
 800c7ac:	68a3      	ldr	r3, [r4, #8]
 800c7ae:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800c7b2:	701a      	strb	r2, [r3, #0]
 800c7b4:	68a3      	ldr	r3, [r4, #8]
 800c7b6:	f89d 2000 	ldrb.w	r2, [sp]
 800c7ba:	701a      	strb	r2, [r3, #0]
 800c7bc:	e78a      	b.n	800c6d4 <ucdr_serialize_endian_double+0xa0>
 800c7be:	466e      	mov	r6, sp
 800c7c0:	4631      	mov	r1, r6
 800c7c2:	462a      	mov	r2, r5
 800c7c4:	4638      	mov	r0, r7
 800c7c6:	f00b f9b8 	bl	8017b3a <memcpy>
 800c7ca:	68a0      	ldr	r0, [r4, #8]
 800c7cc:	464a      	mov	r2, r9
 800c7ce:	1971      	adds	r1, r6, r5
 800c7d0:	f00b f9b3 	bl	8017b3a <memcpy>
 800c7d4:	e77e      	b.n	800c6d4 <ucdr_serialize_endian_double+0xa0>
 800c7d6:	bf00      	nop

0800c7d8 <ucdr_deserialize_endian_double>:
 800c7d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c7dc:	460f      	mov	r7, r1
 800c7de:	2108      	movs	r1, #8
 800c7e0:	4604      	mov	r4, r0
 800c7e2:	4615      	mov	r5, r2
 800c7e4:	f000 f926 	bl	800ca34 <ucdr_buffer_alignment>
 800c7e8:	4601      	mov	r1, r0
 800c7ea:	4620      	mov	r0, r4
 800c7ec:	f894 9015 	ldrb.w	r9, [r4, #21]
 800c7f0:	f000 f964 	bl	800cabc <ucdr_advance_buffer>
 800c7f4:	2108      	movs	r1, #8
 800c7f6:	4620      	mov	r0, r4
 800c7f8:	f000 f8bc 	bl	800c974 <ucdr_check_buffer_available_for>
 800c7fc:	2800      	cmp	r0, #0
 800c7fe:	d159      	bne.n	800c8b4 <ucdr_deserialize_endian_double+0xdc>
 800c800:	e9d4 6801 	ldrd	r6, r8, [r4, #4]
 800c804:	4546      	cmp	r6, r8
 800c806:	d950      	bls.n	800c8aa <ucdr_deserialize_endian_double+0xd2>
 800c808:	6923      	ldr	r3, [r4, #16]
 800c80a:	60a6      	str	r6, [r4, #8]
 800c80c:	eba6 0608 	sub.w	r6, r6, r8
 800c810:	4433      	add	r3, r6
 800c812:	f1c6 0a08 	rsb	sl, r6, #8
 800c816:	6123      	str	r3, [r4, #16]
 800c818:	4651      	mov	r1, sl
 800c81a:	4620      	mov	r0, r4
 800c81c:	f000 f8b6 	bl	800c98c <ucdr_check_final_buffer_behavior>
 800c820:	2800      	cmp	r0, #0
 800c822:	d073      	beq.n	800c90c <ucdr_deserialize_endian_double+0x134>
 800c824:	2f01      	cmp	r7, #1
 800c826:	f000 809a 	beq.w	800c95e <ucdr_deserialize_endian_double+0x186>
 800c82a:	f898 3007 	ldrb.w	r3, [r8, #7]
 800c82e:	702b      	strb	r3, [r5, #0]
 800c830:	2e00      	cmp	r6, #0
 800c832:	d078      	beq.n	800c926 <ucdr_deserialize_endian_double+0x14e>
 800c834:	f898 3006 	ldrb.w	r3, [r8, #6]
 800c838:	706b      	strb	r3, [r5, #1]
 800c83a:	2e01      	cmp	r6, #1
 800c83c:	f105 0302 	add.w	r3, r5, #2
 800c840:	d075      	beq.n	800c92e <ucdr_deserialize_endian_double+0x156>
 800c842:	f898 3005 	ldrb.w	r3, [r8, #5]
 800c846:	70ab      	strb	r3, [r5, #2]
 800c848:	2e02      	cmp	r6, #2
 800c84a:	f105 0303 	add.w	r3, r5, #3
 800c84e:	d072      	beq.n	800c936 <ucdr_deserialize_endian_double+0x15e>
 800c850:	f898 3004 	ldrb.w	r3, [r8, #4]
 800c854:	70eb      	strb	r3, [r5, #3]
 800c856:	2e03      	cmp	r6, #3
 800c858:	f105 0304 	add.w	r3, r5, #4
 800c85c:	d06f      	beq.n	800c93e <ucdr_deserialize_endian_double+0x166>
 800c85e:	f898 3003 	ldrb.w	r3, [r8, #3]
 800c862:	712b      	strb	r3, [r5, #4]
 800c864:	2e04      	cmp	r6, #4
 800c866:	f105 0305 	add.w	r3, r5, #5
 800c86a:	d06c      	beq.n	800c946 <ucdr_deserialize_endian_double+0x16e>
 800c86c:	f898 3002 	ldrb.w	r3, [r8, #2]
 800c870:	716b      	strb	r3, [r5, #5]
 800c872:	2e05      	cmp	r6, #5
 800c874:	f105 0306 	add.w	r3, r5, #6
 800c878:	d069      	beq.n	800c94e <ucdr_deserialize_endian_double+0x176>
 800c87a:	f898 3001 	ldrb.w	r3, [r8, #1]
 800c87e:	71ab      	strb	r3, [r5, #6]
 800c880:	2e06      	cmp	r6, #6
 800c882:	f105 0307 	add.w	r3, r5, #7
 800c886:	d066      	beq.n	800c956 <ucdr_deserialize_endian_double+0x17e>
 800c888:	f898 3000 	ldrb.w	r3, [r8]
 800c88c:	71eb      	strb	r3, [r5, #7]
 800c88e:	6923      	ldr	r3, [r4, #16]
 800c890:	68a2      	ldr	r2, [r4, #8]
 800c892:	7da0      	ldrb	r0, [r4, #22]
 800c894:	3308      	adds	r3, #8
 800c896:	1b9e      	subs	r6, r3, r6
 800c898:	2308      	movs	r3, #8
 800c89a:	4452      	add	r2, sl
 800c89c:	7563      	strb	r3, [r4, #21]
 800c89e:	60a2      	str	r2, [r4, #8]
 800c8a0:	6126      	str	r6, [r4, #16]
 800c8a2:	f080 0001 	eor.w	r0, r0, #1
 800c8a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c8aa:	2108      	movs	r1, #8
 800c8ac:	4620      	mov	r0, r4
 800c8ae:	f000 f86d 	bl	800c98c <ucdr_check_final_buffer_behavior>
 800c8b2:	b308      	cbz	r0, 800c8f8 <ucdr_deserialize_endian_double+0x120>
 800c8b4:	2f01      	cmp	r7, #1
 800c8b6:	68a3      	ldr	r3, [r4, #8]
 800c8b8:	d023      	beq.n	800c902 <ucdr_deserialize_endian_double+0x12a>
 800c8ba:	79db      	ldrb	r3, [r3, #7]
 800c8bc:	702b      	strb	r3, [r5, #0]
 800c8be:	68a3      	ldr	r3, [r4, #8]
 800c8c0:	799b      	ldrb	r3, [r3, #6]
 800c8c2:	706b      	strb	r3, [r5, #1]
 800c8c4:	68a3      	ldr	r3, [r4, #8]
 800c8c6:	795b      	ldrb	r3, [r3, #5]
 800c8c8:	70ab      	strb	r3, [r5, #2]
 800c8ca:	68a3      	ldr	r3, [r4, #8]
 800c8cc:	791b      	ldrb	r3, [r3, #4]
 800c8ce:	70eb      	strb	r3, [r5, #3]
 800c8d0:	68a3      	ldr	r3, [r4, #8]
 800c8d2:	78db      	ldrb	r3, [r3, #3]
 800c8d4:	712b      	strb	r3, [r5, #4]
 800c8d6:	68a3      	ldr	r3, [r4, #8]
 800c8d8:	789b      	ldrb	r3, [r3, #2]
 800c8da:	716b      	strb	r3, [r5, #5]
 800c8dc:	68a3      	ldr	r3, [r4, #8]
 800c8de:	785b      	ldrb	r3, [r3, #1]
 800c8e0:	71ab      	strb	r3, [r5, #6]
 800c8e2:	68a3      	ldr	r3, [r4, #8]
 800c8e4:	781b      	ldrb	r3, [r3, #0]
 800c8e6:	71eb      	strb	r3, [r5, #7]
 800c8e8:	68a2      	ldr	r2, [r4, #8]
 800c8ea:	6923      	ldr	r3, [r4, #16]
 800c8ec:	3208      	adds	r2, #8
 800c8ee:	3308      	adds	r3, #8
 800c8f0:	2108      	movs	r1, #8
 800c8f2:	60a2      	str	r2, [r4, #8]
 800c8f4:	6123      	str	r3, [r4, #16]
 800c8f6:	7561      	strb	r1, [r4, #21]
 800c8f8:	7da0      	ldrb	r0, [r4, #22]
 800c8fa:	f080 0001 	eor.w	r0, r0, #1
 800c8fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c902:	681a      	ldr	r2, [r3, #0]
 800c904:	685b      	ldr	r3, [r3, #4]
 800c906:	606b      	str	r3, [r5, #4]
 800c908:	602a      	str	r2, [r5, #0]
 800c90a:	e7ed      	b.n	800c8e8 <ucdr_deserialize_endian_double+0x110>
 800c90c:	68a2      	ldr	r2, [r4, #8]
 800c90e:	6923      	ldr	r3, [r4, #16]
 800c910:	7da0      	ldrb	r0, [r4, #22]
 800c912:	f884 9015 	strb.w	r9, [r4, #21]
 800c916:	1b92      	subs	r2, r2, r6
 800c918:	1b9b      	subs	r3, r3, r6
 800c91a:	60a2      	str	r2, [r4, #8]
 800c91c:	6123      	str	r3, [r4, #16]
 800c91e:	f080 0001 	eor.w	r0, r0, #1
 800c922:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c926:	68a3      	ldr	r3, [r4, #8]
 800c928:	799b      	ldrb	r3, [r3, #6]
 800c92a:	706b      	strb	r3, [r5, #1]
 800c92c:	1cab      	adds	r3, r5, #2
 800c92e:	68a2      	ldr	r2, [r4, #8]
 800c930:	7952      	ldrb	r2, [r2, #5]
 800c932:	f803 2b01 	strb.w	r2, [r3], #1
 800c936:	68a2      	ldr	r2, [r4, #8]
 800c938:	7912      	ldrb	r2, [r2, #4]
 800c93a:	f803 2b01 	strb.w	r2, [r3], #1
 800c93e:	68a2      	ldr	r2, [r4, #8]
 800c940:	78d2      	ldrb	r2, [r2, #3]
 800c942:	f803 2b01 	strb.w	r2, [r3], #1
 800c946:	68a2      	ldr	r2, [r4, #8]
 800c948:	7892      	ldrb	r2, [r2, #2]
 800c94a:	f803 2b01 	strb.w	r2, [r3], #1
 800c94e:	68a2      	ldr	r2, [r4, #8]
 800c950:	7852      	ldrb	r2, [r2, #1]
 800c952:	f803 2b01 	strb.w	r2, [r3], #1
 800c956:	68a2      	ldr	r2, [r4, #8]
 800c958:	7812      	ldrb	r2, [r2, #0]
 800c95a:	701a      	strb	r2, [r3, #0]
 800c95c:	e797      	b.n	800c88e <ucdr_deserialize_endian_double+0xb6>
 800c95e:	4641      	mov	r1, r8
 800c960:	4632      	mov	r2, r6
 800c962:	4628      	mov	r0, r5
 800c964:	f00b f8e9 	bl	8017b3a <memcpy>
 800c968:	68a1      	ldr	r1, [r4, #8]
 800c96a:	4652      	mov	r2, sl
 800c96c:	19a8      	adds	r0, r5, r6
 800c96e:	f00b f8e4 	bl	8017b3a <memcpy>
 800c972:	e78c      	b.n	800c88e <ucdr_deserialize_endian_double+0xb6>

0800c974 <ucdr_check_buffer_available_for>:
 800c974:	7d83      	ldrb	r3, [r0, #22]
 800c976:	b93b      	cbnz	r3, 800c988 <ucdr_check_buffer_available_for+0x14>
 800c978:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 800c97c:	4419      	add	r1, r3
 800c97e:	4288      	cmp	r0, r1
 800c980:	bf34      	ite	cc
 800c982:	2000      	movcc	r0, #0
 800c984:	2001      	movcs	r0, #1
 800c986:	4770      	bx	lr
 800c988:	2000      	movs	r0, #0
 800c98a:	4770      	bx	lr

0800c98c <ucdr_check_final_buffer_behavior>:
 800c98c:	7d83      	ldrb	r3, [r0, #22]
 800c98e:	b943      	cbnz	r3, 800c9a2 <ucdr_check_final_buffer_behavior+0x16>
 800c990:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 800c994:	4291      	cmp	r1, r2
 800c996:	b510      	push	{r4, lr}
 800c998:	4604      	mov	r4, r0
 800c99a:	d205      	bcs.n	800c9a8 <ucdr_check_final_buffer_behavior+0x1c>
 800c99c:	2301      	movs	r3, #1
 800c99e:	4618      	mov	r0, r3
 800c9a0:	bd10      	pop	{r4, pc}
 800c9a2:	2300      	movs	r3, #0
 800c9a4:	4618      	mov	r0, r3
 800c9a6:	4770      	bx	lr
 800c9a8:	6982      	ldr	r2, [r0, #24]
 800c9aa:	b13a      	cbz	r2, 800c9bc <ucdr_check_final_buffer_behavior+0x30>
 800c9ac:	69c1      	ldr	r1, [r0, #28]
 800c9ae:	4790      	blx	r2
 800c9b0:	f080 0301 	eor.w	r3, r0, #1
 800c9b4:	b2db      	uxtb	r3, r3
 800c9b6:	75a0      	strb	r0, [r4, #22]
 800c9b8:	4618      	mov	r0, r3
 800c9ba:	bd10      	pop	{r4, pc}
 800c9bc:	2001      	movs	r0, #1
 800c9be:	75a0      	strb	r0, [r4, #22]
 800c9c0:	e7fa      	b.n	800c9b8 <ucdr_check_final_buffer_behavior+0x2c>
 800c9c2:	bf00      	nop

0800c9c4 <ucdr_set_on_full_buffer_callback>:
 800c9c4:	e9c0 1206 	strd	r1, r2, [r0, #24]
 800c9c8:	4770      	bx	lr
 800c9ca:	bf00      	nop

0800c9cc <ucdr_init_buffer_origin_offset_endian>:
 800c9cc:	b410      	push	{r4}
 800c9ce:	9c01      	ldr	r4, [sp, #4]
 800c9d0:	6001      	str	r1, [r0, #0]
 800c9d2:	440a      	add	r2, r1
 800c9d4:	6042      	str	r2, [r0, #4]
 800c9d6:	190a      	adds	r2, r1, r4
 800c9d8:	441c      	add	r4, r3
 800c9da:	e9c0 3403 	strd	r3, r4, [r0, #12]
 800c9de:	6082      	str	r2, [r0, #8]
 800c9e0:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800c9e4:	7503      	strb	r3, [r0, #20]
 800c9e6:	2200      	movs	r2, #0
 800c9e8:	e9c0 2206 	strd	r2, r2, [r0, #24]
 800c9ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c9f0:	7542      	strb	r2, [r0, #21]
 800c9f2:	7582      	strb	r2, [r0, #22]
 800c9f4:	4770      	bx	lr
 800c9f6:	bf00      	nop

0800c9f8 <ucdr_init_buffer_origin_offset>:
 800c9f8:	b510      	push	{r4, lr}
 800c9fa:	b082      	sub	sp, #8
 800c9fc:	9c04      	ldr	r4, [sp, #16]
 800c9fe:	9400      	str	r4, [sp, #0]
 800ca00:	2401      	movs	r4, #1
 800ca02:	9401      	str	r4, [sp, #4]
 800ca04:	f7ff ffe2 	bl	800c9cc <ucdr_init_buffer_origin_offset_endian>
 800ca08:	b002      	add	sp, #8
 800ca0a:	bd10      	pop	{r4, pc}

0800ca0c <ucdr_init_buffer_origin>:
 800ca0c:	b510      	push	{r4, lr}
 800ca0e:	b082      	sub	sp, #8
 800ca10:	2400      	movs	r4, #0
 800ca12:	9400      	str	r4, [sp, #0]
 800ca14:	f7ff fff0 	bl	800c9f8 <ucdr_init_buffer_origin_offset>
 800ca18:	b002      	add	sp, #8
 800ca1a:	bd10      	pop	{r4, pc}

0800ca1c <ucdr_init_buffer>:
 800ca1c:	2300      	movs	r3, #0
 800ca1e:	f7ff bff5 	b.w	800ca0c <ucdr_init_buffer_origin>
 800ca22:	bf00      	nop

0800ca24 <ucdr_alignment>:
 800ca24:	fbb0 f3f1 	udiv	r3, r0, r1
 800ca28:	fb03 0011 	mls	r0, r3, r1, r0
 800ca2c:	1a08      	subs	r0, r1, r0
 800ca2e:	3901      	subs	r1, #1
 800ca30:	4008      	ands	r0, r1
 800ca32:	4770      	bx	lr

0800ca34 <ucdr_buffer_alignment>:
 800ca34:	7d43      	ldrb	r3, [r0, #21]
 800ca36:	428b      	cmp	r3, r1
 800ca38:	d208      	bcs.n	800ca4c <ucdr_buffer_alignment+0x18>
 800ca3a:	6900      	ldr	r0, [r0, #16]
 800ca3c:	fbb0 f3f1 	udiv	r3, r0, r1
 800ca40:	fb01 0013 	mls	r0, r1, r3, r0
 800ca44:	1a08      	subs	r0, r1, r0
 800ca46:	3901      	subs	r1, #1
 800ca48:	4008      	ands	r0, r1
 800ca4a:	4770      	bx	lr
 800ca4c:	2000      	movs	r0, #0
 800ca4e:	4770      	bx	lr

0800ca50 <ucdr_align_to>:
 800ca50:	b538      	push	{r3, r4, r5, lr}
 800ca52:	4604      	mov	r4, r0
 800ca54:	460d      	mov	r5, r1
 800ca56:	f7ff ffed 	bl	800ca34 <ucdr_buffer_alignment>
 800ca5a:	68a3      	ldr	r3, [r4, #8]
 800ca5c:	6921      	ldr	r1, [r4, #16]
 800ca5e:	7565      	strb	r5, [r4, #21]
 800ca60:	181a      	adds	r2, r3, r0
 800ca62:	6863      	ldr	r3, [r4, #4]
 800ca64:	4293      	cmp	r3, r2
 800ca66:	4408      	add	r0, r1
 800ca68:	bf28      	it	cs
 800ca6a:	4613      	movcs	r3, r2
 800ca6c:	6120      	str	r0, [r4, #16]
 800ca6e:	60a3      	str	r3, [r4, #8]
 800ca70:	bd38      	pop	{r3, r4, r5, pc}
 800ca72:	bf00      	nop

0800ca74 <ucdr_buffer_length>:
 800ca74:	6882      	ldr	r2, [r0, #8]
 800ca76:	6800      	ldr	r0, [r0, #0]
 800ca78:	1a10      	subs	r0, r2, r0
 800ca7a:	4770      	bx	lr

0800ca7c <ucdr_buffer_remaining>:
 800ca7c:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 800ca80:	1a10      	subs	r0, r2, r0
 800ca82:	4770      	bx	lr

0800ca84 <ucdr_check_final_buffer_behavior_array>:
 800ca84:	b538      	push	{r3, r4, r5, lr}
 800ca86:	7d83      	ldrb	r3, [r0, #22]
 800ca88:	b963      	cbnz	r3, 800caa4 <ucdr_check_final_buffer_behavior_array+0x20>
 800ca8a:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 800ca8e:	429a      	cmp	r2, r3
 800ca90:	4604      	mov	r4, r0
 800ca92:	460d      	mov	r5, r1
 800ca94:	d308      	bcc.n	800caa8 <ucdr_check_final_buffer_behavior_array+0x24>
 800ca96:	b139      	cbz	r1, 800caa8 <ucdr_check_final_buffer_behavior_array+0x24>
 800ca98:	6983      	ldr	r3, [r0, #24]
 800ca9a:	b163      	cbz	r3, 800cab6 <ucdr_check_final_buffer_behavior_array+0x32>
 800ca9c:	69c1      	ldr	r1, [r0, #28]
 800ca9e:	4798      	blx	r3
 800caa0:	75a0      	strb	r0, [r4, #22]
 800caa2:	b108      	cbz	r0, 800caa8 <ucdr_check_final_buffer_behavior_array+0x24>
 800caa4:	2000      	movs	r0, #0
 800caa6:	bd38      	pop	{r3, r4, r5, pc}
 800caa8:	4620      	mov	r0, r4
 800caaa:	f7ff ffe7 	bl	800ca7c <ucdr_buffer_remaining>
 800caae:	42a8      	cmp	r0, r5
 800cab0:	bf28      	it	cs
 800cab2:	4628      	movcs	r0, r5
 800cab4:	bd38      	pop	{r3, r4, r5, pc}
 800cab6:	2301      	movs	r3, #1
 800cab8:	7583      	strb	r3, [r0, #22]
 800caba:	e7f3      	b.n	800caa4 <ucdr_check_final_buffer_behavior_array+0x20>

0800cabc <ucdr_advance_buffer>:
 800cabc:	b538      	push	{r3, r4, r5, lr}
 800cabe:	4604      	mov	r4, r0
 800cac0:	460d      	mov	r5, r1
 800cac2:	f7ff ff57 	bl	800c974 <ucdr_check_buffer_available_for>
 800cac6:	b178      	cbz	r0, 800cae8 <ucdr_advance_buffer+0x2c>
 800cac8:	6923      	ldr	r3, [r4, #16]
 800caca:	68a2      	ldr	r2, [r4, #8]
 800cacc:	442b      	add	r3, r5
 800cace:	6123      	str	r3, [r4, #16]
 800cad0:	2301      	movs	r3, #1
 800cad2:	442a      	add	r2, r5
 800cad4:	7563      	strb	r3, [r4, #21]
 800cad6:	60a2      	str	r2, [r4, #8]
 800cad8:	bd38      	pop	{r3, r4, r5, pc}
 800cada:	68a2      	ldr	r2, [r4, #8]
 800cadc:	6923      	ldr	r3, [r4, #16]
 800cade:	4402      	add	r2, r0
 800cae0:	4403      	add	r3, r0
 800cae2:	1a2d      	subs	r5, r5, r0
 800cae4:	60a2      	str	r2, [r4, #8]
 800cae6:	6123      	str	r3, [r4, #16]
 800cae8:	4629      	mov	r1, r5
 800caea:	2201      	movs	r2, #1
 800caec:	4620      	mov	r0, r4
 800caee:	f7ff ffc9 	bl	800ca84 <ucdr_check_final_buffer_behavior_array>
 800caf2:	2800      	cmp	r0, #0
 800caf4:	d1f1      	bne.n	800cada <ucdr_advance_buffer+0x1e>
 800caf6:	2301      	movs	r3, #1
 800caf8:	7563      	strb	r3, [r4, #21]
 800cafa:	bd38      	pop	{r3, r4, r5, pc}

0800cafc <ucdr_serialize_sequence_char>:
 800cafc:	b570      	push	{r4, r5, r6, lr}
 800cafe:	4615      	mov	r5, r2
 800cb00:	460e      	mov	r6, r1
 800cb02:	7d01      	ldrb	r1, [r0, #20]
 800cb04:	4604      	mov	r4, r0
 800cb06:	f7ff f8eb 	bl	800bce0 <ucdr_serialize_endian_uint32_t>
 800cb0a:	b90d      	cbnz	r5, 800cb10 <ucdr_serialize_sequence_char+0x14>
 800cb0c:	2001      	movs	r0, #1
 800cb0e:	bd70      	pop	{r4, r5, r6, pc}
 800cb10:	7d21      	ldrb	r1, [r4, #20]
 800cb12:	462b      	mov	r3, r5
 800cb14:	4632      	mov	r2, r6
 800cb16:	4620      	mov	r0, r4
 800cb18:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800cb1c:	f007 bf0c 	b.w	8014938 <ucdr_serialize_endian_array_char>

0800cb20 <ucdr_deserialize_sequence_char>:
 800cb20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb24:	461d      	mov	r5, r3
 800cb26:	4616      	mov	r6, r2
 800cb28:	460f      	mov	r7, r1
 800cb2a:	461a      	mov	r2, r3
 800cb2c:	7d01      	ldrb	r1, [r0, #20]
 800cb2e:	4604      	mov	r4, r0
 800cb30:	f7ff f9fe 	bl	800bf30 <ucdr_deserialize_endian_uint32_t>
 800cb34:	682b      	ldr	r3, [r5, #0]
 800cb36:	429e      	cmp	r6, r3
 800cb38:	bf3c      	itt	cc
 800cb3a:	2201      	movcc	r2, #1
 800cb3c:	75a2      	strbcc	r2, [r4, #22]
 800cb3e:	b913      	cbnz	r3, 800cb46 <ucdr_deserialize_sequence_char+0x26>
 800cb40:	2001      	movs	r0, #1
 800cb42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb46:	7d21      	ldrb	r1, [r4, #20]
 800cb48:	463a      	mov	r2, r7
 800cb4a:	4620      	mov	r0, r4
 800cb4c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cb50:	f007 bf24 	b.w	801499c <ucdr_deserialize_endian_array_char>

0800cb54 <ucdr_serialize_sequence_uint8_t>:
 800cb54:	b570      	push	{r4, r5, r6, lr}
 800cb56:	4615      	mov	r5, r2
 800cb58:	460e      	mov	r6, r1
 800cb5a:	7d01      	ldrb	r1, [r0, #20]
 800cb5c:	4604      	mov	r4, r0
 800cb5e:	f7ff f8bf 	bl	800bce0 <ucdr_serialize_endian_uint32_t>
 800cb62:	b90d      	cbnz	r5, 800cb68 <ucdr_serialize_sequence_uint8_t+0x14>
 800cb64:	2001      	movs	r0, #1
 800cb66:	bd70      	pop	{r4, r5, r6, pc}
 800cb68:	7d21      	ldrb	r1, [r4, #20]
 800cb6a:	462b      	mov	r3, r5
 800cb6c:	4632      	mov	r2, r6
 800cb6e:	4620      	mov	r0, r4
 800cb70:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800cb74:	f007 bf76 	b.w	8014a64 <ucdr_serialize_endian_array_uint8_t>

0800cb78 <ucdr_deserialize_sequence_uint8_t>:
 800cb78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb7c:	461d      	mov	r5, r3
 800cb7e:	4616      	mov	r6, r2
 800cb80:	460f      	mov	r7, r1
 800cb82:	461a      	mov	r2, r3
 800cb84:	7d01      	ldrb	r1, [r0, #20]
 800cb86:	4604      	mov	r4, r0
 800cb88:	f7ff f9d2 	bl	800bf30 <ucdr_deserialize_endian_uint32_t>
 800cb8c:	682b      	ldr	r3, [r5, #0]
 800cb8e:	429e      	cmp	r6, r3
 800cb90:	bf3c      	itt	cc
 800cb92:	2201      	movcc	r2, #1
 800cb94:	75a2      	strbcc	r2, [r4, #22]
 800cb96:	b913      	cbnz	r3, 800cb9e <ucdr_deserialize_sequence_uint8_t+0x26>
 800cb98:	2001      	movs	r0, #1
 800cb9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb9e:	7d21      	ldrb	r1, [r4, #20]
 800cba0:	463a      	mov	r2, r7
 800cba2:	4620      	mov	r0, r4
 800cba4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cba8:	f007 bfc0 	b.w	8014b2c <ucdr_deserialize_endian_array_uint8_t>

0800cbac <ucdr_serialize_sequence_double>:
 800cbac:	b570      	push	{r4, r5, r6, lr}
 800cbae:	4615      	mov	r5, r2
 800cbb0:	460e      	mov	r6, r1
 800cbb2:	7d01      	ldrb	r1, [r0, #20]
 800cbb4:	4604      	mov	r4, r0
 800cbb6:	f7ff f893 	bl	800bce0 <ucdr_serialize_endian_uint32_t>
 800cbba:	b90d      	cbnz	r5, 800cbc0 <ucdr_serialize_sequence_double+0x14>
 800cbbc:	2001      	movs	r0, #1
 800cbbe:	bd70      	pop	{r4, r5, r6, pc}
 800cbc0:	7d21      	ldrb	r1, [r4, #20]
 800cbc2:	462b      	mov	r3, r5
 800cbc4:	4632      	mov	r2, r6
 800cbc6:	4620      	mov	r0, r4
 800cbc8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800cbcc:	f007 bfe0 	b.w	8014b90 <ucdr_serialize_endian_array_double>

0800cbd0 <ucdr_deserialize_sequence_double>:
 800cbd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cbd4:	461d      	mov	r5, r3
 800cbd6:	4616      	mov	r6, r2
 800cbd8:	460f      	mov	r7, r1
 800cbda:	461a      	mov	r2, r3
 800cbdc:	7d01      	ldrb	r1, [r0, #20]
 800cbde:	4604      	mov	r4, r0
 800cbe0:	f7ff f9a6 	bl	800bf30 <ucdr_deserialize_endian_uint32_t>
 800cbe4:	682b      	ldr	r3, [r5, #0]
 800cbe6:	429e      	cmp	r6, r3
 800cbe8:	bf3c      	itt	cc
 800cbea:	2201      	movcc	r2, #1
 800cbec:	75a2      	strbcc	r2, [r4, #22]
 800cbee:	b913      	cbnz	r3, 800cbf6 <ucdr_deserialize_sequence_double+0x26>
 800cbf0:	2001      	movs	r0, #1
 800cbf2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cbf6:	7d21      	ldrb	r1, [r4, #20]
 800cbf8:	463a      	mov	r2, r7
 800cbfa:	4620      	mov	r0, r4
 800cbfc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cc00:	f008 b81a 	b.w	8014c38 <ucdr_deserialize_endian_array_double>

0800cc04 <uxr_buffer_delete_entity>:
 800cc04:	b510      	push	{r4, lr}
 800cc06:	2300      	movs	r3, #0
 800cc08:	b08e      	sub	sp, #56	@ 0x38
 800cc0a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800cc0e:	2303      	movs	r3, #3
 800cc10:	9300      	str	r3, [sp, #0]
 800cc12:	2204      	movs	r2, #4
 800cc14:	ab06      	add	r3, sp, #24
 800cc16:	4604      	mov	r4, r0
 800cc18:	9103      	str	r1, [sp, #12]
 800cc1a:	f001 f953 	bl	800dec4 <uxr_prepare_stream_to_write_submessage>
 800cc1e:	b918      	cbnz	r0, 800cc28 <uxr_buffer_delete_entity+0x24>
 800cc20:	4604      	mov	r4, r0
 800cc22:	4620      	mov	r0, r4
 800cc24:	b00e      	add	sp, #56	@ 0x38
 800cc26:	bd10      	pop	{r4, pc}
 800cc28:	9902      	ldr	r1, [sp, #8]
 800cc2a:	aa05      	add	r2, sp, #20
 800cc2c:	4620      	mov	r0, r4
 800cc2e:	f001 fa7f 	bl	800e130 <uxr_init_base_object_request>
 800cc32:	a905      	add	r1, sp, #20
 800cc34:	4604      	mov	r4, r0
 800cc36:	a806      	add	r0, sp, #24
 800cc38:	f002 fcd0 	bl	800f5dc <uxr_serialize_DELETE_Payload>
 800cc3c:	4620      	mov	r0, r4
 800cc3e:	b00e      	add	sp, #56	@ 0x38
 800cc40:	bd10      	pop	{r4, pc}
 800cc42:	bf00      	nop

0800cc44 <uxr_common_create_entity>:
 800cc44:	b510      	push	{r4, lr}
 800cc46:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 800cc4a:	b08c      	sub	sp, #48	@ 0x30
 800cc4c:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800cc50:	f1bc 0f01 	cmp.w	ip, #1
 800cc54:	bf0c      	ite	eq
 800cc56:	f003 0201 	andeq.w	r2, r3, #1
 800cc5a:	2200      	movne	r2, #0
 800cc5c:	330e      	adds	r3, #14
 800cc5e:	f89d 1038 	ldrb.w	r1, [sp, #56]	@ 0x38
 800cc62:	9101      	str	r1, [sp, #4]
 800cc64:	441a      	add	r2, r3
 800cc66:	2301      	movs	r3, #1
 800cc68:	9300      	str	r3, [sp, #0]
 800cc6a:	9903      	ldr	r1, [sp, #12]
 800cc6c:	ab04      	add	r3, sp, #16
 800cc6e:	b292      	uxth	r2, r2
 800cc70:	4604      	mov	r4, r0
 800cc72:	f001 f927 	bl	800dec4 <uxr_prepare_stream_to_write_submessage>
 800cc76:	b918      	cbnz	r0, 800cc80 <uxr_common_create_entity+0x3c>
 800cc78:	4604      	mov	r4, r0
 800cc7a:	4620      	mov	r0, r4
 800cc7c:	b00c      	add	sp, #48	@ 0x30
 800cc7e:	bd10      	pop	{r4, pc}
 800cc80:	9902      	ldr	r1, [sp, #8]
 800cc82:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800cc84:	4620      	mov	r0, r4
 800cc86:	f001 fa53 	bl	800e130 <uxr_init_base_object_request>
 800cc8a:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800cc8c:	4604      	mov	r4, r0
 800cc8e:	a804      	add	r0, sp, #16
 800cc90:	f002 fc00 	bl	800f494 <uxr_serialize_CREATE_Payload>
 800cc94:	4620      	mov	r0, r4
 800cc96:	b00c      	add	sp, #48	@ 0x30
 800cc98:	bd10      	pop	{r4, pc}
 800cc9a:	bf00      	nop

0800cc9c <uxr_buffer_create_participant_bin>:
 800cc9c:	b570      	push	{r4, r5, r6, lr}
 800cc9e:	f5ad 7d16 	sub.w	sp, sp, #600	@ 0x258
 800cca2:	ac11      	add	r4, sp, #68	@ 0x44
 800cca4:	f8ad 3254 	strh.w	r3, [sp, #596]	@ 0x254
 800cca8:	2303      	movs	r3, #3
 800ccaa:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800ccae:	7223      	strb	r3, [r4, #8]
 800ccb0:	9b9a      	ldr	r3, [sp, #616]	@ 0x268
 800ccb2:	f89d 626c 	ldrb.w	r6, [sp, #620]	@ 0x26c
 800ccb6:	2201      	movs	r2, #1
 800ccb8:	2100      	movs	r1, #0
 800ccba:	4605      	mov	r5, r0
 800ccbc:	7122      	strb	r2, [r4, #4]
 800ccbe:	f88d 1014 	strb.w	r1, [sp, #20]
 800ccc2:	b1cb      	cbz	r3, 800ccf8 <uxr_buffer_create_participant_bin+0x5c>
 800ccc4:	f88d 201c 	strb.w	r2, [sp, #28]
 800ccc8:	9308      	str	r3, [sp, #32]
 800ccca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ccce:	a915      	add	r1, sp, #84	@ 0x54
 800ccd0:	a809      	add	r0, sp, #36	@ 0x24
 800ccd2:	f7ff fea3 	bl	800ca1c <ucdr_init_buffer>
 800ccd6:	a905      	add	r1, sp, #20
 800ccd8:	a809      	add	r0, sp, #36	@ 0x24
 800ccda:	f001 ffbd 	bl	800ec58 <uxr_serialize_OBJK_DomainParticipant_Binary>
 800ccde:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800cce0:	9600      	str	r6, [sp, #0]
 800cce2:	9401      	str	r4, [sp, #4]
 800cce4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800cce8:	60e3      	str	r3, [r4, #12]
 800ccea:	4628      	mov	r0, r5
 800ccec:	b29b      	uxth	r3, r3
 800ccee:	f7ff ffa9 	bl	800cc44 <uxr_common_create_entity>
 800ccf2:	f50d 7d16 	add.w	sp, sp, #600	@ 0x258
 800ccf6:	bd70      	pop	{r4, r5, r6, pc}
 800ccf8:	f88d 301c 	strb.w	r3, [sp, #28]
 800ccfc:	e7e5      	b.n	800ccca <uxr_buffer_create_participant_bin+0x2e>
 800ccfe:	bf00      	nop

0800cd00 <uxr_buffer_create_topic_bin>:
 800cd00:	b570      	push	{r4, r5, r6, lr}
 800cd02:	f5ad 7d18 	sub.w	sp, sp, #608	@ 0x260
 800cd06:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800cd0a:	9105      	str	r1, [sp, #20]
 800cd0c:	4605      	mov	r5, r0
 800cd0e:	a997      	add	r1, sp, #604	@ 0x25c
 800cd10:	4618      	mov	r0, r3
 800cd12:	2302      	movs	r3, #2
 800cd14:	f89d 6278 	ldrb.w	r6, [sp, #632]	@ 0x278
 800cd18:	f88d 3050 	strb.w	r3, [sp, #80]	@ 0x50
 800cd1c:	f000 f996 	bl	800d04c <uxr_object_id_to_raw>
 800cd20:	9b9c      	ldr	r3, [sp, #624]	@ 0x270
 800cd22:	9306      	str	r3, [sp, #24]
 800cd24:	9b9d      	ldr	r3, [sp, #628]	@ 0x274
 800cd26:	930a      	str	r3, [sp, #40]	@ 0x28
 800cd28:	2303      	movs	r3, #3
 800cd2a:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 800cd2e:	2301      	movs	r3, #1
 800cd30:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800cd34:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 800cd38:	a917      	add	r1, sp, #92	@ 0x5c
 800cd3a:	2300      	movs	r3, #0
 800cd3c:	a80b      	add	r0, sp, #44	@ 0x2c
 800cd3e:	f88d 301c 	strb.w	r3, [sp, #28]
 800cd42:	f7ff fe6b 	bl	800ca1c <ucdr_init_buffer>
 800cd46:	a906      	add	r1, sp, #24
 800cd48:	a80b      	add	r0, sp, #44	@ 0x2c
 800cd4a:	f001 ffa7 	bl	800ec9c <uxr_serialize_OBJK_Topic_Binary>
 800cd4e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cd50:	9316      	str	r3, [sp, #88]	@ 0x58
 800cd52:	ac13      	add	r4, sp, #76	@ 0x4c
 800cd54:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800cd58:	9600      	str	r6, [sp, #0]
 800cd5a:	9401      	str	r4, [sp, #4]
 800cd5c:	b29b      	uxth	r3, r3
 800cd5e:	4628      	mov	r0, r5
 800cd60:	f7ff ff70 	bl	800cc44 <uxr_common_create_entity>
 800cd64:	f50d 7d18 	add.w	sp, sp, #608	@ 0x260
 800cd68:	bd70      	pop	{r4, r5, r6, pc}
 800cd6a:	bf00      	nop

0800cd6c <uxr_buffer_create_publisher_bin>:
 800cd6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cd6e:	f2ad 4d8c 	subw	sp, sp, #1164	@ 0x48c
 800cd72:	4605      	mov	r5, r0
 800cd74:	9105      	str	r1, [sp, #20]
 800cd76:	4618      	mov	r0, r3
 800cd78:	2603      	movs	r6, #3
 800cd7a:	a992      	add	r1, sp, #584	@ 0x248
 800cd7c:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800cd80:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	@ 0x4a0
 800cd84:	f88d 603c 	strb.w	r6, [sp, #60]	@ 0x3c
 800cd88:	f000 f960 	bl	800d04c <uxr_object_id_to_raw>
 800cd8c:	2300      	movs	r3, #0
 800cd8e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800cd92:	a912      	add	r1, sp, #72	@ 0x48
 800cd94:	a806      	add	r0, sp, #24
 800cd96:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 800cd9a:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 800cd9e:	f88d 6040 	strb.w	r6, [sp, #64]	@ 0x40
 800cda2:	f7ff fe3b 	bl	800ca1c <ucdr_init_buffer>
 800cda6:	a993      	add	r1, sp, #588	@ 0x24c
 800cda8:	a806      	add	r0, sp, #24
 800cdaa:	f002 f82b 	bl	800ee04 <uxr_serialize_OBJK_Publisher_Binary>
 800cdae:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cdb0:	9311      	str	r3, [sp, #68]	@ 0x44
 800cdb2:	ac0e      	add	r4, sp, #56	@ 0x38
 800cdb4:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800cdb8:	9700      	str	r7, [sp, #0]
 800cdba:	9401      	str	r4, [sp, #4]
 800cdbc:	b29b      	uxth	r3, r3
 800cdbe:	4628      	mov	r0, r5
 800cdc0:	f7ff ff40 	bl	800cc44 <uxr_common_create_entity>
 800cdc4:	f20d 4d8c 	addw	sp, sp, #1164	@ 0x48c
 800cdc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cdca:	bf00      	nop

0800cdcc <uxr_buffer_create_subscriber_bin>:
 800cdcc:	b570      	push	{r4, r5, r6, lr}
 800cdce:	f5ad 6d91 	sub.w	sp, sp, #1160	@ 0x488
 800cdd2:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800cdd6:	9105      	str	r1, [sp, #20]
 800cdd8:	4605      	mov	r5, r0
 800cdda:	a992      	add	r1, sp, #584	@ 0x248
 800cddc:	4618      	mov	r0, r3
 800cdde:	2304      	movs	r3, #4
 800cde0:	f89d 6498 	ldrb.w	r6, [sp, #1176]	@ 0x498
 800cde4:	f88d 303c 	strb.w	r3, [sp, #60]	@ 0x3c
 800cde8:	f000 f930 	bl	800d04c <uxr_object_id_to_raw>
 800cdec:	2300      	movs	r3, #0
 800cdee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800cdf2:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 800cdf6:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 800cdfa:	a912      	add	r1, sp, #72	@ 0x48
 800cdfc:	2303      	movs	r3, #3
 800cdfe:	a806      	add	r0, sp, #24
 800ce00:	f88d 3040 	strb.w	r3, [sp, #64]	@ 0x40
 800ce04:	f7ff fe0a 	bl	800ca1c <ucdr_init_buffer>
 800ce08:	a993      	add	r1, sp, #588	@ 0x24c
 800ce0a:	a806      	add	r0, sp, #24
 800ce0c:	f002 f8aa 	bl	800ef64 <uxr_serialize_OBJK_Subscriber_Binary>
 800ce10:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ce12:	9311      	str	r3, [sp, #68]	@ 0x44
 800ce14:	ac0e      	add	r4, sp, #56	@ 0x38
 800ce16:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800ce1a:	9600      	str	r6, [sp, #0]
 800ce1c:	9401      	str	r4, [sp, #4]
 800ce1e:	b29b      	uxth	r3, r3
 800ce20:	4628      	mov	r0, r5
 800ce22:	f7ff ff0f 	bl	800cc44 <uxr_common_create_entity>
 800ce26:	f50d 6d91 	add.w	sp, sp, #1160	@ 0x488
 800ce2a:	bd70      	pop	{r4, r5, r6, pc}

0800ce2c <uxr_buffer_create_datawriter_bin>:
 800ce2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce30:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 800ce34:	ac1d      	add	r4, sp, #116	@ 0x74
 800ce36:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800ce3a:	f8bd 52a8 	ldrh.w	r5, [sp, #680]	@ 0x2a8
 800ce3e:	9105      	str	r1, [sp, #20]
 800ce40:	4606      	mov	r6, r0
 800ce42:	a9a1      	add	r1, sp, #644	@ 0x284
 800ce44:	4618      	mov	r0, r3
 800ce46:	2305      	movs	r3, #5
 800ce48:	7123      	strb	r3, [r4, #4]
 800ce4a:	f89d 82ac 	ldrb.w	r8, [sp, #684]	@ 0x2ac
 800ce4e:	2703      	movs	r7, #3
 800ce50:	f000 f8fc 	bl	800d04c <uxr_object_id_to_raw>
 800ce54:	98a8      	ldr	r0, [sp, #672]	@ 0x2a0
 800ce56:	7227      	strb	r7, [r4, #8]
 800ce58:	a90e      	add	r1, sp, #56	@ 0x38
 800ce5a:	f000 f8f7 	bl	800d04c <uxr_object_id_to_raw>
 800ce5e:	2300      	movs	r3, #0
 800ce60:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 800ce64:	f89d 22a5 	ldrb.w	r2, [sp, #677]	@ 0x2a5
 800ce68:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 800ce6c:	3d00      	subs	r5, #0
 800ce6e:	bf18      	it	ne
 800ce70:	2501      	movne	r5, #1
 800ce72:	f88d 3046 	strb.w	r3, [sp, #70]	@ 0x46
 800ce76:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
 800ce7a:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 800ce7e:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800ce82:	2301      	movs	r3, #1
 800ce84:	f88d 5042 	strb.w	r5, [sp, #66]	@ 0x42
 800ce88:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 800ce8c:	bb8a      	cbnz	r2, 800cef2 <uxr_buffer_create_datawriter_bin+0xc6>
 800ce8e:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800ce92:	f04f 0e23 	mov.w	lr, #35	@ 0x23
 800ce96:	f04f 0c13 	mov.w	ip, #19
 800ce9a:	250b      	movs	r5, #11
 800ce9c:	2221      	movs	r2, #33	@ 0x21
 800ce9e:	2111      	movs	r1, #17
 800cea0:	2009      	movs	r0, #9
 800cea2:	f89d 32a6 	ldrb.w	r3, [sp, #678]	@ 0x2a6
 800cea6:	b923      	cbnz	r3, 800ceb2 <uxr_buffer_create_datawriter_bin+0x86>
 800cea8:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 800ceac:	4672      	mov	r2, lr
 800ceae:	4661      	mov	r1, ip
 800ceb0:	4628      	mov	r0, r5
 800ceb2:	f89d 32a4 	ldrb.w	r3, [sp, #676]	@ 0x2a4
 800ceb6:	2b01      	cmp	r3, #1
 800ceb8:	d025      	beq.n	800cf06 <uxr_buffer_create_datawriter_bin+0xda>
 800ceba:	2b03      	cmp	r3, #3
 800cebc:	d029      	beq.n	800cf12 <uxr_buffer_create_datawriter_bin+0xe6>
 800cebe:	b32b      	cbz	r3, 800cf0c <uxr_buffer_create_datawriter_bin+0xe0>
 800cec0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800cec4:	a921      	add	r1, sp, #132	@ 0x84
 800cec6:	a806      	add	r0, sp, #24
 800cec8:	f7ff fda8 	bl	800ca1c <ucdr_init_buffer>
 800cecc:	a90e      	add	r1, sp, #56	@ 0x38
 800cece:	a806      	add	r0, sp, #24
 800ced0:	f002 f8fa 	bl	800f0c8 <uxr_serialize_OBJK_DataWriter_Binary>
 800ced4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ced6:	f8cd 8000 	str.w	r8, [sp]
 800ceda:	9401      	str	r4, [sp, #4]
 800cedc:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800cee0:	60e3      	str	r3, [r4, #12]
 800cee2:	4630      	mov	r0, r6
 800cee4:	b29b      	uxth	r3, r3
 800cee6:	f7ff fead 	bl	800cc44 <uxr_common_create_entity>
 800ceea:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 800ceee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cef2:	f04f 0e22 	mov.w	lr, #34	@ 0x22
 800cef6:	f04f 0c12 	mov.w	ip, #18
 800cefa:	250a      	movs	r5, #10
 800cefc:	2220      	movs	r2, #32
 800cefe:	2110      	movs	r1, #16
 800cf00:	2008      	movs	r0, #8
 800cf02:	2702      	movs	r7, #2
 800cf04:	e7cd      	b.n	800cea2 <uxr_buffer_create_datawriter_bin+0x76>
 800cf06:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 800cf0a:	e7d9      	b.n	800cec0 <uxr_buffer_create_datawriter_bin+0x94>
 800cf0c:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 800cf10:	e7d6      	b.n	800cec0 <uxr_buffer_create_datawriter_bin+0x94>
 800cf12:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 800cf16:	e7d3      	b.n	800cec0 <uxr_buffer_create_datawriter_bin+0x94>

0800cf18 <uxr_buffer_create_datareader_bin>:
 800cf18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf1c:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 800cf20:	ac1f      	add	r4, sp, #124	@ 0x7c
 800cf22:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800cf26:	f8bd 52b0 	ldrh.w	r5, [sp, #688]	@ 0x2b0
 800cf2a:	9105      	str	r1, [sp, #20]
 800cf2c:	4606      	mov	r6, r0
 800cf2e:	a9a3      	add	r1, sp, #652	@ 0x28c
 800cf30:	4618      	mov	r0, r3
 800cf32:	2306      	movs	r3, #6
 800cf34:	7123      	strb	r3, [r4, #4]
 800cf36:	f89d 82b4 	ldrb.w	r8, [sp, #692]	@ 0x2b4
 800cf3a:	2703      	movs	r7, #3
 800cf3c:	f000 f886 	bl	800d04c <uxr_object_id_to_raw>
 800cf40:	98aa      	ldr	r0, [sp, #680]	@ 0x2a8
 800cf42:	7227      	strb	r7, [r4, #8]
 800cf44:	a90e      	add	r1, sp, #56	@ 0x38
 800cf46:	f000 f881 	bl	800d04c <uxr_object_id_to_raw>
 800cf4a:	2300      	movs	r3, #0
 800cf4c:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 800cf50:	f89d 22ad 	ldrb.w	r2, [sp, #685]	@ 0x2ad
 800cf54:	f88d 3070 	strb.w	r3, [sp, #112]	@ 0x70
 800cf58:	3d00      	subs	r5, #0
 800cf5a:	bf18      	it	ne
 800cf5c:	2501      	movne	r5, #1
 800cf5e:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 800cf62:	f88d 3046 	strb.w	r3, [sp, #70]	@ 0x46
 800cf66:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
 800cf6a:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 800cf6e:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800cf72:	2301      	movs	r3, #1
 800cf74:	f88d 5042 	strb.w	r5, [sp, #66]	@ 0x42
 800cf78:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 800cf7c:	bb8a      	cbnz	r2, 800cfe2 <uxr_buffer_create_datareader_bin+0xca>
 800cf7e:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800cf82:	f04f 0e23 	mov.w	lr, #35	@ 0x23
 800cf86:	f04f 0c13 	mov.w	ip, #19
 800cf8a:	250b      	movs	r5, #11
 800cf8c:	2221      	movs	r2, #33	@ 0x21
 800cf8e:	2111      	movs	r1, #17
 800cf90:	2009      	movs	r0, #9
 800cf92:	f89d 32ae 	ldrb.w	r3, [sp, #686]	@ 0x2ae
 800cf96:	b923      	cbnz	r3, 800cfa2 <uxr_buffer_create_datareader_bin+0x8a>
 800cf98:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 800cf9c:	4672      	mov	r2, lr
 800cf9e:	4661      	mov	r1, ip
 800cfa0:	4628      	mov	r0, r5
 800cfa2:	f89d 32ac 	ldrb.w	r3, [sp, #684]	@ 0x2ac
 800cfa6:	2b01      	cmp	r3, #1
 800cfa8:	d025      	beq.n	800cff6 <uxr_buffer_create_datareader_bin+0xde>
 800cfaa:	2b03      	cmp	r3, #3
 800cfac:	d029      	beq.n	800d002 <uxr_buffer_create_datareader_bin+0xea>
 800cfae:	b32b      	cbz	r3, 800cffc <uxr_buffer_create_datareader_bin+0xe4>
 800cfb0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800cfb4:	a923      	add	r1, sp, #140	@ 0x8c
 800cfb6:	a806      	add	r0, sp, #24
 800cfb8:	f7ff fd30 	bl	800ca1c <ucdr_init_buffer>
 800cfbc:	a90e      	add	r1, sp, #56	@ 0x38
 800cfbe:	a806      	add	r0, sp, #24
 800cfc0:	f002 f846 	bl	800f050 <uxr_serialize_OBJK_DataReader_Binary>
 800cfc4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cfc6:	f8cd 8000 	str.w	r8, [sp]
 800cfca:	9401      	str	r4, [sp, #4]
 800cfcc:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800cfd0:	60e3      	str	r3, [r4, #12]
 800cfd2:	4630      	mov	r0, r6
 800cfd4:	b29b      	uxth	r3, r3
 800cfd6:	f7ff fe35 	bl	800cc44 <uxr_common_create_entity>
 800cfda:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 800cfde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cfe2:	f04f 0e22 	mov.w	lr, #34	@ 0x22
 800cfe6:	f04f 0c12 	mov.w	ip, #18
 800cfea:	250a      	movs	r5, #10
 800cfec:	2220      	movs	r2, #32
 800cfee:	2110      	movs	r1, #16
 800cff0:	2008      	movs	r0, #8
 800cff2:	2702      	movs	r7, #2
 800cff4:	e7cd      	b.n	800cf92 <uxr_buffer_create_datareader_bin+0x7a>
 800cff6:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 800cffa:	e7d9      	b.n	800cfb0 <uxr_buffer_create_datareader_bin+0x98>
 800cffc:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 800d000:	e7d6      	b.n	800cfb0 <uxr_buffer_create_datareader_bin+0x98>
 800d002:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 800d006:	e7d3      	b.n	800cfb0 <uxr_buffer_create_datareader_bin+0x98>

0800d008 <uxr_object_id>:
 800d008:	b082      	sub	sp, #8
 800d00a:	2300      	movs	r3, #0
 800d00c:	f88d 1006 	strb.w	r1, [sp, #6]
 800d010:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800d014:	f360 030f 	bfi	r3, r0, #0, #16
 800d018:	f362 431f 	bfi	r3, r2, #16, #16
 800d01c:	4618      	mov	r0, r3
 800d01e:	b002      	add	sp, #8
 800d020:	4770      	bx	lr
 800d022:	bf00      	nop

0800d024 <uxr_object_id_from_raw>:
 800d024:	7843      	ldrb	r3, [r0, #1]
 800d026:	7801      	ldrb	r1, [r0, #0]
 800d028:	b082      	sub	sp, #8
 800d02a:	f003 020f 	and.w	r2, r3, #15
 800d02e:	f88d 2006 	strb.w	r2, [sp, #6]
 800d032:	091b      	lsrs	r3, r3, #4
 800d034:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800d038:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 800d03c:	2000      	movs	r0, #0
 800d03e:	f363 000f 	bfi	r0, r3, #0, #16
 800d042:	f362 401f 	bfi	r0, r2, #16, #16
 800d046:	b002      	add	sp, #8
 800d048:	4770      	bx	lr
 800d04a:	bf00      	nop

0800d04c <uxr_object_id_to_raw>:
 800d04c:	4602      	mov	r2, r0
 800d04e:	f3c0 4303 	ubfx	r3, r0, #16, #4
 800d052:	b082      	sub	sp, #8
 800d054:	f3c2 1c0b 	ubfx	ip, r2, #4, #12
 800d058:	eb03 1002 	add.w	r0, r3, r2, lsl #4
 800d05c:	f881 c000 	strb.w	ip, [r1]
 800d060:	7048      	strb	r0, [r1, #1]
 800d062:	b002      	add	sp, #8
 800d064:	4770      	bx	lr
 800d066:	bf00      	nop

0800d068 <on_get_fragmentation_info>:
 800d068:	b500      	push	{lr}
 800d06a:	b08b      	sub	sp, #44	@ 0x2c
 800d06c:	4601      	mov	r1, r0
 800d06e:	2204      	movs	r2, #4
 800d070:	a802      	add	r0, sp, #8
 800d072:	f7ff fcd3 	bl	800ca1c <ucdr_init_buffer>
 800d076:	f10d 0305 	add.w	r3, sp, #5
 800d07a:	f10d 0206 	add.w	r2, sp, #6
 800d07e:	a901      	add	r1, sp, #4
 800d080:	a802      	add	r0, sp, #8
 800d082:	f001 f9d7 	bl	800e434 <uxr_read_submessage_header>
 800d086:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800d08a:	2b0d      	cmp	r3, #13
 800d08c:	d003      	beq.n	800d096 <on_get_fragmentation_info+0x2e>
 800d08e:	2000      	movs	r0, #0
 800d090:	b00b      	add	sp, #44	@ 0x2c
 800d092:	f85d fb04 	ldr.w	pc, [sp], #4
 800d096:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800d09a:	f013 0f02 	tst.w	r3, #2
 800d09e:	bf14      	ite	ne
 800d0a0:	2002      	movne	r0, #2
 800d0a2:	2001      	moveq	r0, #1
 800d0a4:	b00b      	add	sp, #44	@ 0x2c
 800d0a6:	f85d fb04 	ldr.w	pc, [sp], #4
 800d0aa:	bf00      	nop

0800d0ac <read_submessage_get_info>:
 800d0ac:	b570      	push	{r4, r5, r6, lr}
 800d0ae:	2500      	movs	r5, #0
 800d0b0:	f5ad 7d34 	sub.w	sp, sp, #720	@ 0x2d0
 800d0b4:	4604      	mov	r4, r0
 800d0b6:	f44f 7224 	mov.w	r2, #656	@ 0x290
 800d0ba:	460e      	mov	r6, r1
 800d0bc:	a810      	add	r0, sp, #64	@ 0x40
 800d0be:	4629      	mov	r1, r5
 800d0c0:	e9cd 5503 	strd	r5, r5, [sp, #12]
 800d0c4:	f00a fc1a 	bl	80178fc <memset>
 800d0c8:	a903      	add	r1, sp, #12
 800d0ca:	4630      	mov	r0, r6
 800d0cc:	f002 fa72 	bl	800f5b4 <uxr_deserialize_GET_INFO_Payload>
 800d0d0:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800d0d4:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800d0d8:	4620      	mov	r0, r4
 800d0da:	f001 f821 	bl	800e120 <uxr_session_header_offset>
 800d0de:	462b      	mov	r3, r5
 800d0e0:	9000      	str	r0, [sp, #0]
 800d0e2:	220c      	movs	r2, #12
 800d0e4:	a905      	add	r1, sp, #20
 800d0e6:	a808      	add	r0, sp, #32
 800d0e8:	f7ff fc86 	bl	800c9f8 <ucdr_init_buffer_origin_offset>
 800d0ec:	a910      	add	r1, sp, #64	@ 0x40
 800d0ee:	a808      	add	r0, sp, #32
 800d0f0:	f002 fad2 	bl	800f698 <uxr_serialize_INFO_Payload>
 800d0f4:	9b08      	ldr	r3, [sp, #32]
 800d0f6:	462a      	mov	r2, r5
 800d0f8:	4629      	mov	r1, r5
 800d0fa:	4620      	mov	r0, r4
 800d0fc:	f000 ffba 	bl	800e074 <uxr_stamp_session_header>
 800d100:	a808      	add	r0, sp, #32
 800d102:	f7ff fcb7 	bl	800ca74 <ucdr_buffer_length>
 800d106:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800d108:	4602      	mov	r2, r0
 800d10a:	a905      	add	r1, sp, #20
 800d10c:	e9d3 0400 	ldrd	r0, r4, [r3]
 800d110:	47a0      	blx	r4
 800d112:	f50d 7d34 	add.w	sp, sp, #720	@ 0x2d0
 800d116:	bd70      	pop	{r4, r5, r6, pc}

0800d118 <write_submessage_acknack.isra.0>:
 800d118:	b570      	push	{r4, r5, r6, lr}
 800d11a:	b092      	sub	sp, #72	@ 0x48
 800d11c:	4605      	mov	r5, r0
 800d11e:	460e      	mov	r6, r1
 800d120:	4614      	mov	r4, r2
 800d122:	f000 fffd 	bl	800e120 <uxr_session_header_offset>
 800d126:	a905      	add	r1, sp, #20
 800d128:	9000      	str	r0, [sp, #0]
 800d12a:	2300      	movs	r3, #0
 800d12c:	a80a      	add	r0, sp, #40	@ 0x28
 800d12e:	2211      	movs	r2, #17
 800d130:	f7ff fc62 	bl	800c9f8 <ucdr_init_buffer_origin_offset>
 800d134:	2218      	movs	r2, #24
 800d136:	fb02 5404 	mla	r4, r2, r4, r5
 800d13a:	2300      	movs	r3, #0
 800d13c:	2205      	movs	r2, #5
 800d13e:	3450      	adds	r4, #80	@ 0x50
 800d140:	210a      	movs	r1, #10
 800d142:	a80a      	add	r0, sp, #40	@ 0x28
 800d144:	f001 f95c 	bl	800e400 <uxr_buffer_submessage_header>
 800d148:	a903      	add	r1, sp, #12
 800d14a:	4620      	mov	r0, r4
 800d14c:	f008 f846 	bl	80151dc <uxr_compute_acknack>
 800d150:	ba40      	rev16	r0, r0
 800d152:	f8ad 000e 	strh.w	r0, [sp, #14]
 800d156:	a903      	add	r1, sp, #12
 800d158:	a80a      	add	r0, sp, #40	@ 0x28
 800d15a:	f88d 6010 	strb.w	r6, [sp, #16]
 800d15e:	f002 fb0b 	bl	800f778 <uxr_serialize_ACKNACK_Payload>
 800d162:	2200      	movs	r2, #0
 800d164:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d166:	4611      	mov	r1, r2
 800d168:	4628      	mov	r0, r5
 800d16a:	f000 ff83 	bl	800e074 <uxr_stamp_session_header>
 800d16e:	a80a      	add	r0, sp, #40	@ 0x28
 800d170:	f7ff fc80 	bl	800ca74 <ucdr_buffer_length>
 800d174:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800d176:	4602      	mov	r2, r0
 800d178:	a905      	add	r1, sp, #20
 800d17a:	e9d3 0400 	ldrd	r0, r4, [r3]
 800d17e:	47a0      	blx	r4
 800d180:	b012      	add	sp, #72	@ 0x48
 800d182:	bd70      	pop	{r4, r5, r6, pc}
 800d184:	0000      	movs	r0, r0
	...

0800d188 <uxr_init_session>:
 800d188:	b510      	push	{r4, lr}
 800d18a:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 800d1c0 <uxr_init_session+0x38>
 800d18e:	2300      	movs	r3, #0
 800d190:	e9c0 131c 	strd	r1, r3, [r0, #112]	@ 0x70
 800d194:	4604      	mov	r4, r0
 800d196:	e9c0 331e 	strd	r3, r3, [r0, #120]	@ 0x78
 800d19a:	e9c0 3320 	strd	r3, r3, [r0, #128]	@ 0x80
 800d19e:	e9c0 3322 	strd	r3, r3, [r0, #136]	@ 0x88
 800d1a2:	e9c0 3324 	strd	r3, r3, [r0, #144]	@ 0x90
 800d1a6:	ed80 7b26 	vstr	d7, [r0, #152]	@ 0x98
 800d1aa:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
 800d1ae:	2181      	movs	r1, #129	@ 0x81
 800d1b0:	f000 fecc 	bl	800df4c <uxr_init_session_info>
 800d1b4:	f104 0008 	add.w	r0, r4, #8
 800d1b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d1bc:	f001 b83c 	b.w	800e238 <uxr_init_stream_storage>
	...

0800d1c8 <uxr_set_status_callback>:
 800d1c8:	e9c0 1220 	strd	r1, r2, [r0, #128]	@ 0x80
 800d1cc:	4770      	bx	lr
 800d1ce:	bf00      	nop

0800d1d0 <uxr_set_topic_callback>:
 800d1d0:	e9c0 1222 	strd	r1, r2, [r0, #136]	@ 0x88
 800d1d4:	4770      	bx	lr
 800d1d6:	bf00      	nop

0800d1d8 <uxr_set_request_callback>:
 800d1d8:	e9c0 1229 	strd	r1, r2, [r0, #164]	@ 0xa4
 800d1dc:	4770      	bx	lr
 800d1de:	bf00      	nop

0800d1e0 <uxr_set_reply_callback>:
 800d1e0:	e9c0 122b 	strd	r1, r2, [r0, #172]	@ 0xac
 800d1e4:	4770      	bx	lr
 800d1e6:	bf00      	nop

0800d1e8 <uxr_create_output_best_effort_stream>:
 800d1e8:	b510      	push	{r4, lr}
 800d1ea:	b084      	sub	sp, #16
 800d1ec:	e9cd 2100 	strd	r2, r1, [sp]
 800d1f0:	4604      	mov	r4, r0
 800d1f2:	f000 ff95 	bl	800e120 <uxr_session_header_offset>
 800d1f6:	e9dd 2100 	ldrd	r2, r1, [sp]
 800d1fa:	4603      	mov	r3, r0
 800d1fc:	f104 0008 	add.w	r0, r4, #8
 800d200:	b004      	add	sp, #16
 800d202:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d206:	f001 b861 	b.w	800e2cc <uxr_add_output_best_effort_buffer>
 800d20a:	bf00      	nop

0800d20c <uxr_create_output_reliable_stream>:
 800d20c:	b510      	push	{r4, lr}
 800d20e:	b088      	sub	sp, #32
 800d210:	e9cd 2104 	strd	r2, r1, [sp, #16]
 800d214:	4604      	mov	r4, r0
 800d216:	9303      	str	r3, [sp, #12]
 800d218:	f000 ff82 	bl	800e120 <uxr_session_header_offset>
 800d21c:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 800d220:	9000      	str	r0, [sp, #0]
 800d222:	9905      	ldr	r1, [sp, #20]
 800d224:	f104 0008 	add.w	r0, r4, #8
 800d228:	f001 f864 	bl	800e2f4 <uxr_add_output_reliable_buffer>
 800d22c:	2200      	movs	r2, #0
 800d22e:	b2c3      	uxtb	r3, r0
 800d230:	f363 0207 	bfi	r2, r3, #0, #8
 800d234:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800d238:	f363 220f 	bfi	r2, r3, #8, #8
 800d23c:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800d240:	f363 4217 	bfi	r2, r3, #16, #8
 800d244:	0e03      	lsrs	r3, r0, #24
 800d246:	f363 621f 	bfi	r2, r3, #24, #8
 800d24a:	4610      	mov	r0, r2
 800d24c:	b008      	add	sp, #32
 800d24e:	bd10      	pop	{r4, pc}

0800d250 <uxr_create_input_best_effort_stream>:
 800d250:	b082      	sub	sp, #8
 800d252:	3008      	adds	r0, #8
 800d254:	b002      	add	sp, #8
 800d256:	f001 b867 	b.w	800e328 <uxr_add_input_best_effort_buffer>
 800d25a:	bf00      	nop

0800d25c <uxr_create_input_reliable_stream>:
 800d25c:	b510      	push	{r4, lr}
 800d25e:	b084      	sub	sp, #16
 800d260:	4c0b      	ldr	r4, [pc, #44]	@ (800d290 <uxr_create_input_reliable_stream+0x34>)
 800d262:	9400      	str	r4, [sp, #0]
 800d264:	3008      	adds	r0, #8
 800d266:	f001 f875 	bl	800e354 <uxr_add_input_reliable_buffer>
 800d26a:	2200      	movs	r2, #0
 800d26c:	b2c3      	uxtb	r3, r0
 800d26e:	f363 0207 	bfi	r2, r3, #0, #8
 800d272:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800d276:	f363 220f 	bfi	r2, r3, #8, #8
 800d27a:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800d27e:	f363 4217 	bfi	r2, r3, #16, #8
 800d282:	0e03      	lsrs	r3, r0, #24
 800d284:	f363 621f 	bfi	r2, r3, #24, #8
 800d288:	4610      	mov	r0, r2
 800d28a:	b004      	add	sp, #16
 800d28c:	bd10      	pop	{r4, pc}
 800d28e:	bf00      	nop
 800d290:	0800d069 	.word	0x0800d069

0800d294 <uxr_epoch_nanos>:
 800d294:	b510      	push	{r4, lr}
 800d296:	4604      	mov	r4, r0
 800d298:	f001 f912 	bl	800e4c0 <uxr_nanos>
 800d29c:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	@ 0x98
 800d2a0:	1ac0      	subs	r0, r0, r3
 800d2a2:	eb61 0102 	sbc.w	r1, r1, r2
 800d2a6:	bd10      	pop	{r4, pc}

0800d2a8 <uxr_flash_output_streams>:
 800d2a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d2ac:	7e03      	ldrb	r3, [r0, #24]
 800d2ae:	b084      	sub	sp, #16
 800d2b0:	4604      	mov	r4, r0
 800d2b2:	2b00      	cmp	r3, #0
 800d2b4:	d035      	beq.n	800d322 <uxr_flash_output_streams+0x7a>
 800d2b6:	f04f 0900 	mov.w	r9, #0
 800d2ba:	4648      	mov	r0, r9
 800d2bc:	f10d 0802 	add.w	r8, sp, #2
 800d2c0:	af03      	add	r7, sp, #12
 800d2c2:	ae02      	add	r6, sp, #8
 800d2c4:	e006      	b.n	800d2d4 <uxr_flash_output_streams+0x2c>
 800d2c6:	7e23      	ldrb	r3, [r4, #24]
 800d2c8:	f109 0901 	add.w	r9, r9, #1
 800d2cc:	fa5f f089 	uxtb.w	r0, r9
 800d2d0:	4283      	cmp	r3, r0
 800d2d2:	d926      	bls.n	800d322 <uxr_flash_output_streams+0x7a>
 800d2d4:	2201      	movs	r2, #1
 800d2d6:	4611      	mov	r1, r2
 800d2d8:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 800d2dc:	f000 ff58 	bl	800e190 <uxr_stream_id>
 800d2e0:	3508      	adds	r5, #8
 800d2e2:	4684      	mov	ip, r0
 800d2e4:	4643      	mov	r3, r8
 800d2e6:	463a      	mov	r2, r7
 800d2e8:	4631      	mov	r1, r6
 800d2ea:	4628      	mov	r0, r5
 800d2ec:	f8cd c004 	str.w	ip, [sp, #4]
 800d2f0:	f007 fffa 	bl	80152e8 <uxr_prepare_best_effort_buffer_to_send>
 800d2f4:	2800      	cmp	r0, #0
 800d2f6:	d0e6      	beq.n	800d2c6 <uxr_flash_output_streams+0x1e>
 800d2f8:	9b02      	ldr	r3, [sp, #8]
 800d2fa:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800d2fe:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800d302:	4620      	mov	r0, r4
 800d304:	f000 feb6 	bl	800e074 <uxr_stamp_session_header>
 800d308:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800d30a:	9a03      	ldr	r2, [sp, #12]
 800d30c:	685d      	ldr	r5, [r3, #4]
 800d30e:	6818      	ldr	r0, [r3, #0]
 800d310:	9902      	ldr	r1, [sp, #8]
 800d312:	47a8      	blx	r5
 800d314:	f109 0901 	add.w	r9, r9, #1
 800d318:	7e23      	ldrb	r3, [r4, #24]
 800d31a:	fa5f f089 	uxtb.w	r0, r9
 800d31e:	4283      	cmp	r3, r0
 800d320:	d8d8      	bhi.n	800d2d4 <uxr_flash_output_streams+0x2c>
 800d322:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 800d326:	b38b      	cbz	r3, 800d38c <uxr_flash_output_streams+0xe4>
 800d328:	f04f 0900 	mov.w	r9, #0
 800d32c:	f10d 0802 	add.w	r8, sp, #2
 800d330:	af03      	add	r7, sp, #12
 800d332:	ae02      	add	r6, sp, #8
 800d334:	4648      	mov	r0, r9
 800d336:	2201      	movs	r2, #1
 800d338:	2102      	movs	r1, #2
 800d33a:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 800d33e:	f000 ff27 	bl	800e190 <uxr_stream_id>
 800d342:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 800d346:	3520      	adds	r5, #32
 800d348:	9001      	str	r0, [sp, #4]
 800d34a:	e00d      	b.n	800d368 <uxr_flash_output_streams+0xc0>
 800d34c:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800d350:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800d354:	9b02      	ldr	r3, [sp, #8]
 800d356:	f000 fe8d 	bl	800e074 <uxr_stamp_session_header>
 800d35a:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800d35c:	9a03      	ldr	r2, [sp, #12]
 800d35e:	f8d3 a004 	ldr.w	sl, [r3, #4]
 800d362:	9902      	ldr	r1, [sp, #8]
 800d364:	6818      	ldr	r0, [r3, #0]
 800d366:	47d0      	blx	sl
 800d368:	4643      	mov	r3, r8
 800d36a:	463a      	mov	r2, r7
 800d36c:	4631      	mov	r1, r6
 800d36e:	4628      	mov	r0, r5
 800d370:	f008 f9d8 	bl	8015724 <uxr_prepare_next_reliable_buffer_to_send>
 800d374:	4603      	mov	r3, r0
 800d376:	4620      	mov	r0, r4
 800d378:	2b00      	cmp	r3, #0
 800d37a:	d1e7      	bne.n	800d34c <uxr_flash_output_streams+0xa4>
 800d37c:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 800d380:	f109 0901 	add.w	r9, r9, #1
 800d384:	fa5f f089 	uxtb.w	r0, r9
 800d388:	4283      	cmp	r3, r0
 800d38a:	d8d4      	bhi.n	800d336 <uxr_flash_output_streams+0x8e>
 800d38c:	b004      	add	sp, #16
 800d38e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d392:	bf00      	nop

0800d394 <read_submessage_info>:
 800d394:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d398:	460d      	mov	r5, r1
 800d39a:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 800d39e:	4669      	mov	r1, sp
 800d3a0:	4607      	mov	r7, r0
 800d3a2:	4628      	mov	r0, r5
 800d3a4:	f002 f814 	bl	800f3d0 <uxr_deserialize_BaseObjectReply>
 800d3a8:	a902      	add	r1, sp, #8
 800d3aa:	4604      	mov	r4, r0
 800d3ac:	4628      	mov	r0, r5
 800d3ae:	f89d 8005 	ldrb.w	r8, [sp, #5]
 800d3b2:	f7fe f9cf 	bl	800b754 <ucdr_deserialize_bool>
 800d3b6:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800d3ba:	4004      	ands	r4, r0
 800d3bc:	b2e4      	uxtb	r4, r4
 800d3be:	b95b      	cbnz	r3, 800d3d8 <read_submessage_info+0x44>
 800d3c0:	a987      	add	r1, sp, #540	@ 0x21c
 800d3c2:	4628      	mov	r0, r5
 800d3c4:	f7fe f9c6 	bl	800b754 <ucdr_deserialize_bool>
 800d3c8:	f89d 321c 	ldrb.w	r3, [sp, #540]	@ 0x21c
 800d3cc:	4606      	mov	r6, r0
 800d3ce:	b94b      	cbnz	r3, 800d3e4 <read_submessage_info+0x50>
 800d3d0:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 800d3d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d3d8:	a903      	add	r1, sp, #12
 800d3da:	4628      	mov	r0, r5
 800d3dc:	f001 fea0 	bl	800f120 <uxr_deserialize_ObjectVariant>
 800d3e0:	4004      	ands	r4, r0
 800d3e2:	e7ed      	b.n	800d3c0 <read_submessage_info+0x2c>
 800d3e4:	a988      	add	r1, sp, #544	@ 0x220
 800d3e6:	4628      	mov	r0, r5
 800d3e8:	f7fe f9e2 	bl	800b7b0 <ucdr_deserialize_uint8_t>
 800d3ec:	4234      	tst	r4, r6
 800d3ee:	d0ef      	beq.n	800d3d0 <read_submessage_info+0x3c>
 800d3f0:	2800      	cmp	r0, #0
 800d3f2:	d0ed      	beq.n	800d3d0 <read_submessage_info+0x3c>
 800d3f4:	f89d 3220 	ldrb.w	r3, [sp, #544]	@ 0x220
 800d3f8:	2b0d      	cmp	r3, #13
 800d3fa:	d1e9      	bne.n	800d3d0 <read_submessage_info+0x3c>
 800d3fc:	a98a      	add	r1, sp, #552	@ 0x228
 800d3fe:	4628      	mov	r0, r5
 800d400:	f7fe ff7c 	bl	800c2fc <ucdr_deserialize_int16_t>
 800d404:	b140      	cbz	r0, 800d418 <read_submessage_info+0x84>
 800d406:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	@ 0x228
 800d40a:	2b00      	cmp	r3, #0
 800d40c:	dd07      	ble.n	800d41e <read_submessage_info+0x8a>
 800d40e:	f1b8 0f00 	cmp.w	r8, #0
 800d412:	bf14      	ite	ne
 800d414:	2001      	movne	r0, #1
 800d416:	2002      	moveq	r0, #2
 800d418:	f887 00b5 	strb.w	r0, [r7, #181]	@ 0xb5
 800d41c:	e7d8      	b.n	800d3d0 <read_submessage_info+0x3c>
 800d41e:	2000      	movs	r0, #0
 800d420:	e7fa      	b.n	800d418 <read_submessage_info+0x84>
 800d422:	bf00      	nop

0800d424 <read_submessage_list>:
 800d424:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d428:	b097      	sub	sp, #92	@ 0x5c
 800d42a:	4ec1      	ldr	r6, [pc, #772]	@ (800d730 <read_submessage_list+0x30c>)
 800d42c:	9209      	str	r2, [sp, #36]	@ 0x24
 800d42e:	4604      	mov	r4, r0
 800d430:	460d      	mov	r5, r1
 800d432:	f04f 0801 	mov.w	r8, #1
 800d436:	f10d 032f 	add.w	r3, sp, #47	@ 0x2f
 800d43a:	aa0c      	add	r2, sp, #48	@ 0x30
 800d43c:	f10d 012e 	add.w	r1, sp, #46	@ 0x2e
 800d440:	4628      	mov	r0, r5
 800d442:	f000 fff7 	bl	800e434 <uxr_read_submessage_header>
 800d446:	2800      	cmp	r0, #0
 800d448:	f000 813e 	beq.w	800d6c8 <read_submessage_list+0x2a4>
 800d44c:	f89d 302e 	ldrb.w	r3, [sp, #46]	@ 0x2e
 800d450:	f89d 2026 	ldrb.w	r2, [sp, #38]	@ 0x26
 800d454:	3b02      	subs	r3, #2
 800d456:	2b0d      	cmp	r3, #13
 800d458:	d8ed      	bhi.n	800d436 <read_submessage_list+0x12>
 800d45a:	a101      	add	r1, pc, #4	@ (adr r1, 800d460 <read_submessage_list+0x3c>)
 800d45c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d460:	0800d6bf 	.word	0x0800d6bf
 800d464:	0800d437 	.word	0x0800d437
 800d468:	0800d6af 	.word	0x0800d6af
 800d46c:	0800d64d 	.word	0x0800d64d
 800d470:	0800d643 	.word	0x0800d643
 800d474:	0800d437 	.word	0x0800d437
 800d478:	0800d437 	.word	0x0800d437
 800d47c:	0800d5a3 	.word	0x0800d5a3
 800d480:	0800d533 	.word	0x0800d533
 800d484:	0800d4f3 	.word	0x0800d4f3
 800d488:	0800d437 	.word	0x0800d437
 800d48c:	0800d437 	.word	0x0800d437
 800d490:	0800d437 	.word	0x0800d437
 800d494:	0800d499 	.word	0x0800d499
 800d498:	a910      	add	r1, sp, #64	@ 0x40
 800d49a:	4628      	mov	r0, r5
 800d49c:	f002 f9bc 	bl	800f818 <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 800d4a0:	f8d4 9090 	ldr.w	r9, [r4, #144]	@ 0x90
 800d4a4:	f1b9 0f00 	cmp.w	r9, #0
 800d4a8:	f000 8116 	beq.w	800d6d8 <read_submessage_list+0x2b4>
 800d4ac:	f001 f808 	bl	800e4c0 <uxr_nanos>
 800d4b0:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 800d4b2:	4602      	mov	r2, r0
 800d4b4:	460b      	mov	r3, r1
 800d4b6:	9814      	ldr	r0, [sp, #80]	@ 0x50
 800d4b8:	2100      	movs	r1, #0
 800d4ba:	468c      	mov	ip, r1
 800d4bc:	fbc0 7c06 	smlal	r7, ip, r0, r6
 800d4c0:	e9cd 7c04 	strd	r7, ip, [sp, #16]
 800d4c4:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800d4c6:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 800d4c8:	468c      	mov	ip, r1
 800d4ca:	fbc0 7c06 	smlal	r7, ip, r0, r6
 800d4ce:	46e2      	mov	sl, ip
 800d4d0:	46bc      	mov	ip, r7
 800d4d2:	e9dd 0712 	ldrd	r0, r7, [sp, #72]	@ 0x48
 800d4d6:	fbc0 7106 	smlal	r7, r1, r0, r6
 800d4da:	e9cd ca02 	strd	ip, sl, [sp, #8]
 800d4de:	e9cd 7100 	strd	r7, r1, [sp]
 800d4e2:	f8d4 1094 	ldr.w	r1, [r4, #148]	@ 0x94
 800d4e6:	9106      	str	r1, [sp, #24]
 800d4e8:	4620      	mov	r0, r4
 800d4ea:	47c8      	blx	r9
 800d4ec:	f884 80a0 	strb.w	r8, [r4, #160]	@ 0xa0
 800d4f0:	e7a1      	b.n	800d436 <read_submessage_list+0x12>
 800d4f2:	a910      	add	r1, sp, #64	@ 0x40
 800d4f4:	4628      	mov	r0, r5
 800d4f6:	f002 f97d 	bl	800f7f4 <uxr_deserialize_HEARTBEAT_Payload>
 800d4fa:	2100      	movs	r1, #0
 800d4fc:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 800d500:	f000 fe70 	bl	800e1e4 <uxr_stream_id_from_raw>
 800d504:	f3c0 2707 	ubfx	r7, r0, #8, #8
 800d508:	900f      	str	r0, [sp, #60]	@ 0x3c
 800d50a:	4639      	mov	r1, r7
 800d50c:	f104 0008 	add.w	r0, r4, #8
 800d510:	f000 ff56 	bl	800e3c0 <uxr_get_input_reliable_stream>
 800d514:	2800      	cmp	r0, #0
 800d516:	d08e      	beq.n	800d436 <read_submessage_list+0x12>
 800d518:	f8bd 1040 	ldrh.w	r1, [sp, #64]	@ 0x40
 800d51c:	f8bd 2042 	ldrh.w	r2, [sp, #66]	@ 0x42
 800d520:	f007 fe50 	bl	80151c4 <uxr_process_heartbeat>
 800d524:	f89d 103c 	ldrb.w	r1, [sp, #60]	@ 0x3c
 800d528:	463a      	mov	r2, r7
 800d52a:	4620      	mov	r0, r4
 800d52c:	f7ff fdf4 	bl	800d118 <write_submessage_acknack.isra.0>
 800d530:	e781      	b.n	800d436 <read_submessage_list+0x12>
 800d532:	a910      	add	r1, sp, #64	@ 0x40
 800d534:	4628      	mov	r0, r5
 800d536:	f002 f935 	bl	800f7a4 <uxr_deserialize_ACKNACK_Payload>
 800d53a:	2100      	movs	r1, #0
 800d53c:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 800d540:	f000 fe50 	bl	800e1e4 <uxr_stream_id_from_raw>
 800d544:	900d      	str	r0, [sp, #52]	@ 0x34
 800d546:	f3c0 2107 	ubfx	r1, r0, #8, #8
 800d54a:	f104 0008 	add.w	r0, r4, #8
 800d54e:	f000 ff23 	bl	800e398 <uxr_get_output_reliable_stream>
 800d552:	4607      	mov	r7, r0
 800d554:	2800      	cmp	r0, #0
 800d556:	f43f af6e 	beq.w	800d436 <read_submessage_list+0x12>
 800d55a:	f89d 3042 	ldrb.w	r3, [sp, #66]	@ 0x42
 800d55e:	f89d 1043 	ldrb.w	r1, [sp, #67]	@ 0x43
 800d562:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 800d566:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 800d56a:	b289      	uxth	r1, r1
 800d56c:	f008 f984 	bl	8015878 <uxr_process_acknack>
 800d570:	4638      	mov	r0, r7
 800d572:	f008 f941 	bl	80157f8 <uxr_begin_output_nack_buffer_it>
 800d576:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 800d57a:	f8ad 0032 	strh.w	r0, [sp, #50]	@ 0x32
 800d57e:	e006      	b.n	800d58e <read_submessage_list+0x16a>
 800d580:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800d582:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800d584:	f8d3 9004 	ldr.w	r9, [r3, #4]
 800d588:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800d58a:	6818      	ldr	r0, [r3, #0]
 800d58c:	47c8      	blx	r9
 800d58e:	f10d 0332 	add.w	r3, sp, #50	@ 0x32
 800d592:	aa0f      	add	r2, sp, #60	@ 0x3c
 800d594:	4651      	mov	r1, sl
 800d596:	4638      	mov	r0, r7
 800d598:	f008 f930 	bl	80157fc <uxr_next_reliable_nack_buffer_to_send>
 800d59c:	2800      	cmp	r0, #0
 800d59e:	d1ef      	bne.n	800d580 <read_submessage_list+0x15c>
 800d5a0:	e749      	b.n	800d436 <read_submessage_list+0x12>
 800d5a2:	f89d 3025 	ldrb.w	r3, [sp, #37]	@ 0x25
 800d5a6:	f88d 3035 	strb.w	r3, [sp, #53]	@ 0x35
 800d5aa:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 800d5ae:	f89d 3027 	ldrb.w	r3, [sp, #39]	@ 0x27
 800d5b2:	f88d 3037 	strb.w	r3, [sp, #55]	@ 0x37
 800d5b6:	4651      	mov	r1, sl
 800d5b8:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 800d5bc:	f8bd 7030 	ldrh.w	r7, [sp, #48]	@ 0x30
 800d5c0:	f89d 902f 	ldrb.w	r9, [sp, #47]	@ 0x2f
 800d5c4:	f88d 2036 	strb.w	r2, [sp, #54]	@ 0x36
 800d5c8:	4628      	mov	r0, r5
 800d5ca:	f88d 3034 	strb.w	r3, [sp, #52]	@ 0x34
 800d5ce:	f001 fe49 	bl	800f264 <uxr_deserialize_BaseObjectRequest>
 800d5d2:	4650      	mov	r0, sl
 800d5d4:	a90f      	add	r1, sp, #60	@ 0x3c
 800d5d6:	f10d 0232 	add.w	r2, sp, #50	@ 0x32
 800d5da:	f000 fdc7 	bl	800e16c <uxr_parse_base_object_request>
 800d5de:	f8d4 b080 	ldr.w	fp, [r4, #128]	@ 0x80
 800d5e2:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800d5e4:	f8bd a032 	ldrh.w	sl, [sp, #50]	@ 0x32
 800d5e8:	9110      	str	r1, [sp, #64]	@ 0x40
 800d5ea:	3f04      	subs	r7, #4
 800d5ec:	f009 090e 	and.w	r9, r9, #14
 800d5f0:	b2bf      	uxth	r7, r7
 800d5f2:	f1bb 0f00 	cmp.w	fp, #0
 800d5f6:	d006      	beq.n	800d606 <read_submessage_list+0x1e2>
 800d5f8:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 800d5fc:	9300      	str	r3, [sp, #0]
 800d5fe:	4652      	mov	r2, sl
 800d600:	2300      	movs	r3, #0
 800d602:	4620      	mov	r0, r4
 800d604:	47d8      	blx	fp
 800d606:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 800d608:	b16a      	cbz	r2, 800d626 <read_submessage_list+0x202>
 800d60a:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 800d60c:	2100      	movs	r1, #0
 800d60e:	3802      	subs	r0, #2
 800d610:	e002      	b.n	800d618 <read_submessage_list+0x1f4>
 800d612:	3101      	adds	r1, #1
 800d614:	4291      	cmp	r1, r2
 800d616:	d006      	beq.n	800d626 <read_submessage_list+0x202>
 800d618:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 800d61c:	4553      	cmp	r3, sl
 800d61e:	d1f8      	bne.n	800d612 <read_submessage_list+0x1ee>
 800d620:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 800d622:	2200      	movs	r2, #0
 800d624:	545a      	strb	r2, [r3, r1]
 800d626:	f8bd 1032 	ldrh.w	r1, [sp, #50]	@ 0x32
 800d62a:	9102      	str	r1, [sp, #8]
 800d62c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800d62e:	9101      	str	r1, [sp, #4]
 800d630:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800d632:	9100      	str	r1, [sp, #0]
 800d634:	464b      	mov	r3, r9
 800d636:	463a      	mov	r2, r7
 800d638:	4629      	mov	r1, r5
 800d63a:	4620      	mov	r0, r4
 800d63c:	f008 f9da 	bl	80159f4 <read_submessage_format>
 800d640:	e6f9      	b.n	800d436 <read_submessage_list+0x12>
 800d642:	4629      	mov	r1, r5
 800d644:	4620      	mov	r0, r4
 800d646:	f7ff fea5 	bl	800d394 <read_submessage_info>
 800d64a:	e6f4      	b.n	800d436 <read_submessage_list+0x12>
 800d64c:	2a00      	cmp	r2, #0
 800d64e:	d03e      	beq.n	800d6ce <read_submessage_list+0x2aa>
 800d650:	a910      	add	r1, sp, #64	@ 0x40
 800d652:	4628      	mov	r0, r5
 800d654:	f002 f802 	bl	800f65c <uxr_deserialize_STATUS_Payload>
 800d658:	a90e      	add	r1, sp, #56	@ 0x38
 800d65a:	aa0d      	add	r2, sp, #52	@ 0x34
 800d65c:	a810      	add	r0, sp, #64	@ 0x40
 800d65e:	f000 fd85 	bl	800e16c <uxr_parse_base_object_request>
 800d662:	f8d4 a080 	ldr.w	sl, [r4, #128]	@ 0x80
 800d666:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800d668:	f89d 9044 	ldrb.w	r9, [sp, #68]	@ 0x44
 800d66c:	f8bd 7034 	ldrh.w	r7, [sp, #52]	@ 0x34
 800d670:	910f      	str	r1, [sp, #60]	@ 0x3c
 800d672:	f1ba 0f00 	cmp.w	sl, #0
 800d676:	d006      	beq.n	800d686 <read_submessage_list+0x262>
 800d678:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 800d67c:	9300      	str	r3, [sp, #0]
 800d67e:	463a      	mov	r2, r7
 800d680:	464b      	mov	r3, r9
 800d682:	4620      	mov	r0, r4
 800d684:	47d0      	blx	sl
 800d686:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 800d688:	2a00      	cmp	r2, #0
 800d68a:	f43f aed4 	beq.w	800d436 <read_submessage_list+0x12>
 800d68e:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 800d690:	2100      	movs	r1, #0
 800d692:	3802      	subs	r0, #2
 800d694:	e003      	b.n	800d69e <read_submessage_list+0x27a>
 800d696:	3101      	adds	r1, #1
 800d698:	4291      	cmp	r1, r2
 800d69a:	f43f aecc 	beq.w	800d436 <read_submessage_list+0x12>
 800d69e:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 800d6a2:	42bb      	cmp	r3, r7
 800d6a4:	d1f7      	bne.n	800d696 <read_submessage_list+0x272>
 800d6a6:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 800d6a8:	f803 9001 	strb.w	r9, [r3, r1]
 800d6ac:	e6c3      	b.n	800d436 <read_submessage_list+0x12>
 800d6ae:	2a00      	cmp	r2, #0
 800d6b0:	f47f aec1 	bne.w	800d436 <read_submessage_list+0x12>
 800d6b4:	4629      	mov	r1, r5
 800d6b6:	4620      	mov	r0, r4
 800d6b8:	f000 fc9e 	bl	800dff8 <uxr_read_create_session_status>
 800d6bc:	e6bb      	b.n	800d436 <read_submessage_list+0x12>
 800d6be:	4629      	mov	r1, r5
 800d6c0:	4620      	mov	r0, r4
 800d6c2:	f7ff fcf3 	bl	800d0ac <read_submessage_get_info>
 800d6c6:	e6b6      	b.n	800d436 <read_submessage_list+0x12>
 800d6c8:	b017      	add	sp, #92	@ 0x5c
 800d6ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d6ce:	4629      	mov	r1, r5
 800d6d0:	4620      	mov	r0, r4
 800d6d2:	f000 fc9d 	bl	800e010 <uxr_read_delete_session_status>
 800d6d6:	e6ae      	b.n	800d436 <read_submessage_list+0x12>
 800d6d8:	f000 fef2 	bl	800e4c0 <uxr_nanos>
 800d6dc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800d6de:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800d6e0:	464f      	mov	r7, r9
 800d6e2:	fbc3 2706 	smlal	r2, r7, r3, r6
 800d6e6:	1812      	adds	r2, r2, r0
 800d6e8:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d6ea:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 800d6ec:	eb47 0101 	adc.w	r1, r7, r1
 800d6f0:	464f      	mov	r7, r9
 800d6f2:	fbc3 0706 	smlal	r0, r7, r3, r6
 800d6f6:	463b      	mov	r3, r7
 800d6f8:	4684      	mov	ip, r0
 800d6fa:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	@ 0x40
 800d6fe:	fbc7 0906 	smlal	r0, r9, r7, r6
 800d702:	eb1c 0c00 	adds.w	ip, ip, r0
 800d706:	464f      	mov	r7, r9
 800d708:	eb43 0307 	adc.w	r3, r3, r7
 800d70c:	ebb2 0c0c 	subs.w	ip, r2, ip
 800d710:	eb61 0303 	sbc.w	r3, r1, r3
 800d714:	0fda      	lsrs	r2, r3, #31
 800d716:	eb12 020c 	adds.w	r2, r2, ip
 800d71a:	f143 0300 	adc.w	r3, r3, #0
 800d71e:	0852      	lsrs	r2, r2, #1
 800d720:	ea42 72c3 	orr.w	r2, r2, r3, lsl #31
 800d724:	105b      	asrs	r3, r3, #1
 800d726:	f8c4 2098 	str.w	r2, [r4, #152]	@ 0x98
 800d72a:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
 800d72e:	e6dd      	b.n	800d4ec <read_submessage_list+0xc8>
 800d730:	3b9aca00 	.word	0x3b9aca00

0800d734 <listen_message_reliably>:
 800d734:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d738:	1e0b      	subs	r3, r1, #0
 800d73a:	b09d      	sub	sp, #116	@ 0x74
 800d73c:	bfb8      	it	lt
 800d73e:	f06f 4300 	mvnlt.w	r3, #2147483648	@ 0x80000000
 800d742:	4680      	mov	r8, r0
 800d744:	9305      	str	r3, [sp, #20]
 800d746:	f000 fea1 	bl	800e48c <uxr_millis>
 800d74a:	f898 2048 	ldrb.w	r2, [r8, #72]	@ 0x48
 800d74e:	4681      	mov	r9, r0
 800d750:	2a00      	cmp	r2, #0
 800d752:	f000 80a1 	beq.w	800d898 <listen_message_reliably+0x164>
 800d756:	2600      	movs	r6, #0
 800d758:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800d75c:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 800d760:	9303      	str	r3, [sp, #12]
 800d762:	4630      	mov	r0, r6
 800d764:	460f      	mov	r7, r1
 800d766:	e00f      	b.n	800d788 <listen_message_reliably+0x54>
 800d768:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800d76c:	9903      	ldr	r1, [sp, #12]
 800d76e:	455a      	cmp	r2, fp
 800d770:	f106 0601 	add.w	r6, r6, #1
 800d774:	eb73 0101 	sbcs.w	r1, r3, r1
 800d778:	b2f0      	uxtb	r0, r6
 800d77a:	da01      	bge.n	800d780 <listen_message_reliably+0x4c>
 800d77c:	4693      	mov	fp, r2
 800d77e:	9303      	str	r3, [sp, #12]
 800d780:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 800d784:	4283      	cmp	r3, r0
 800d786:	d960      	bls.n	800d84a <listen_message_reliably+0x116>
 800d788:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 800d78c:	2102      	movs	r1, #2
 800d78e:	2201      	movs	r2, #1
 800d790:	f000 fcfe 	bl	800e190 <uxr_stream_id>
 800d794:	00e4      	lsls	r4, r4, #3
 800d796:	f104 0520 	add.w	r5, r4, #32
 800d79a:	4445      	add	r5, r8
 800d79c:	4601      	mov	r1, r0
 800d79e:	463b      	mov	r3, r7
 800d7a0:	464a      	mov	r2, r9
 800d7a2:	4628      	mov	r0, r5
 800d7a4:	9109      	str	r1, [sp, #36]	@ 0x24
 800d7a6:	f007 fffd 	bl	80157a4 <uxr_update_output_stream_heartbeat_timestamp>
 800d7aa:	eb08 0304 	add.w	r3, r8, r4
 800d7ae:	2800      	cmp	r0, #0
 800d7b0:	d0da      	beq.n	800d768 <listen_message_reliably+0x34>
 800d7b2:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 800d7b6:	f89d 5025 	ldrb.w	r5, [sp, #37]	@ 0x25
 800d7ba:	9304      	str	r3, [sp, #16]
 800d7bc:	4640      	mov	r0, r8
 800d7be:	f000 fcaf 	bl	800e120 <uxr_session_header_offset>
 800d7c2:	3501      	adds	r5, #1
 800d7c4:	f10d 0a50 	add.w	sl, sp, #80	@ 0x50
 800d7c8:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 800d7cc:	eb08 05c5 	add.w	r5, r8, r5, lsl #3
 800d7d0:	2300      	movs	r3, #0
 800d7d2:	2211      	movs	r2, #17
 800d7d4:	9000      	str	r0, [sp, #0]
 800d7d6:	a90c      	add	r1, sp, #48	@ 0x30
 800d7d8:	4650      	mov	r0, sl
 800d7da:	f7ff f90d 	bl	800c9f8 <ucdr_init_buffer_origin_offset>
 800d7de:	2300      	movs	r3, #0
 800d7e0:	2205      	movs	r2, #5
 800d7e2:	210b      	movs	r1, #11
 800d7e4:	4650      	mov	r0, sl
 800d7e6:	f000 fe0b 	bl	800e400 <uxr_buffer_submessage_header>
 800d7ea:	8968      	ldrh	r0, [r5, #10]
 800d7ec:	2101      	movs	r1, #1
 800d7ee:	f008 f9cb 	bl	8015b88 <uxr_seq_num_add>
 800d7f2:	892b      	ldrh	r3, [r5, #8]
 800d7f4:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 800d7f8:	4602      	mov	r2, r0
 800d7fa:	9b04      	ldr	r3, [sp, #16]
 800d7fc:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 800d800:	a90a      	add	r1, sp, #40	@ 0x28
 800d802:	4650      	mov	r0, sl
 800d804:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 800d808:	f001 ffe0 	bl	800f7cc <uxr_serialize_HEARTBEAT_Payload>
 800d80c:	2200      	movs	r2, #0
 800d80e:	4611      	mov	r1, r2
 800d810:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800d812:	4640      	mov	r0, r8
 800d814:	f000 fc2e 	bl	800e074 <uxr_stamp_session_header>
 800d818:	4650      	mov	r0, sl
 800d81a:	f7ff f92b 	bl	800ca74 <ucdr_buffer_length>
 800d81e:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 800d822:	4602      	mov	r2, r0
 800d824:	a90c      	add	r1, sp, #48	@ 0x30
 800d826:	e9d3 0500 	ldrd	r0, r5, [r3]
 800d82a:	4444      	add	r4, r8
 800d82c:	47a8      	blx	r5
 800d82e:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	@ 0x38
 800d832:	9903      	ldr	r1, [sp, #12]
 800d834:	455a      	cmp	r2, fp
 800d836:	f106 0601 	add.w	r6, r6, #1
 800d83a:	eb73 0101 	sbcs.w	r1, r3, r1
 800d83e:	b2f0      	uxtb	r0, r6
 800d840:	db9c      	blt.n	800d77c <listen_message_reliably+0x48>
 800d842:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 800d846:	4283      	cmp	r3, r0
 800d848:	d89e      	bhi.n	800d788 <listen_message_reliably+0x54>
 800d84a:	9a03      	ldr	r2, [sp, #12]
 800d84c:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800d850:	429a      	cmp	r2, r3
 800d852:	bf08      	it	eq
 800d854:	f1bb 3fff 	cmpeq.w	fp, #4294967295	@ 0xffffffff
 800d858:	d01e      	beq.n	800d898 <listen_message_reliably+0x164>
 800d85a:	ebab 0309 	sub.w	r3, fp, r9
 800d85e:	9905      	ldr	r1, [sp, #20]
 800d860:	f8d8 2070 	ldr.w	r2, [r8, #112]	@ 0x70
 800d864:	2b00      	cmp	r3, #0
 800d866:	bf08      	it	eq
 800d868:	2301      	moveq	r3, #1
 800d86a:	4299      	cmp	r1, r3
 800d86c:	bfa8      	it	ge
 800d86e:	4619      	movge	r1, r3
 800d870:	6894      	ldr	r4, [r2, #8]
 800d872:	6810      	ldr	r0, [r2, #0]
 800d874:	4689      	mov	r9, r1
 800d876:	460b      	mov	r3, r1
 800d878:	aa08      	add	r2, sp, #32
 800d87a:	a907      	add	r1, sp, #28
 800d87c:	47a0      	blx	r4
 800d87e:	b968      	cbnz	r0, 800d89c <listen_message_reliably+0x168>
 800d880:	9b05      	ldr	r3, [sp, #20]
 800d882:	eba3 0309 	sub.w	r3, r3, r9
 800d886:	2b00      	cmp	r3, #0
 800d888:	9305      	str	r3, [sp, #20]
 800d88a:	f73f af5c 	bgt.w	800d746 <listen_message_reliably+0x12>
 800d88e:	4604      	mov	r4, r0
 800d890:	4620      	mov	r0, r4
 800d892:	b01d      	add	sp, #116	@ 0x74
 800d894:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d898:	9b05      	ldr	r3, [sp, #20]
 800d89a:	e7e0      	b.n	800d85e <listen_message_reliably+0x12a>
 800d89c:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 800d8a0:	4604      	mov	r4, r0
 800d8a2:	a80c      	add	r0, sp, #48	@ 0x30
 800d8a4:	f7ff f8ba 	bl	800ca1c <ucdr_init_buffer>
 800d8a8:	2500      	movs	r5, #0
 800d8aa:	f10d 031a 	add.w	r3, sp, #26
 800d8ae:	aa06      	add	r2, sp, #24
 800d8b0:	a90c      	add	r1, sp, #48	@ 0x30
 800d8b2:	4640      	mov	r0, r8
 800d8b4:	f88d 5018 	strb.w	r5, [sp, #24]
 800d8b8:	f000 fbf0 	bl	800e09c <uxr_read_session_header>
 800d8bc:	b918      	cbnz	r0, 800d8c6 <listen_message_reliably+0x192>
 800d8be:	4620      	mov	r0, r4
 800d8c0:	b01d      	add	sp, #116	@ 0x74
 800d8c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d8c6:	4629      	mov	r1, r5
 800d8c8:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800d8cc:	f000 fc8a 	bl	800e1e4 <uxr_stream_id_from_raw>
 800d8d0:	f3c0 4507 	ubfx	r5, r0, #16, #8
 800d8d4:	2d01      	cmp	r5, #1
 800d8d6:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 800d8da:	f8bd a01a 	ldrh.w	sl, [sp, #26]
 800d8de:	f3c0 2607 	ubfx	r6, r0, #8, #8
 800d8e2:	d04b      	beq.n	800d97c <listen_message_reliably+0x248>
 800d8e4:	2d02      	cmp	r5, #2
 800d8e6:	d00f      	beq.n	800d908 <listen_message_reliably+0x1d4>
 800d8e8:	2d00      	cmp	r5, #0
 800d8ea:	d1e8      	bne.n	800d8be <listen_message_reliably+0x18a>
 800d8ec:	4629      	mov	r1, r5
 800d8ee:	4628      	mov	r0, r5
 800d8f0:	f000 fc78 	bl	800e1e4 <uxr_stream_id_from_raw>
 800d8f4:	a90c      	add	r1, sp, #48	@ 0x30
 800d8f6:	4602      	mov	r2, r0
 800d8f8:	4640      	mov	r0, r8
 800d8fa:	920a      	str	r2, [sp, #40]	@ 0x28
 800d8fc:	f7ff fd92 	bl	800d424 <read_submessage_list>
 800d900:	4620      	mov	r0, r4
 800d902:	b01d      	add	sp, #116	@ 0x74
 800d904:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d908:	4631      	mov	r1, r6
 800d90a:	f108 0008 	add.w	r0, r8, #8
 800d90e:	f89d 9024 	ldrb.w	r9, [sp, #36]	@ 0x24
 800d912:	f000 fd55 	bl	800e3c0 <uxr_get_input_reliable_stream>
 800d916:	4607      	mov	r7, r0
 800d918:	b338      	cbz	r0, 800d96a <listen_message_reliably+0x236>
 800d91a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d91c:	9203      	str	r2, [sp, #12]
 800d91e:	a80c      	add	r0, sp, #48	@ 0x30
 800d920:	f7ff f8ac 	bl	800ca7c <ucdr_buffer_remaining>
 800d924:	4603      	mov	r3, r0
 800d926:	f10d 0019 	add.w	r0, sp, #25
 800d92a:	9000      	str	r0, [sp, #0]
 800d92c:	9a03      	ldr	r2, [sp, #12]
 800d92e:	4651      	mov	r1, sl
 800d930:	4638      	mov	r0, r7
 800d932:	f007 fb4d 	bl	8014fd0 <uxr_receive_reliable_message>
 800d936:	b1c0      	cbz	r0, 800d96a <listen_message_reliably+0x236>
 800d938:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800d93c:	b393      	cbz	r3, 800d9a4 <listen_message_reliably+0x270>
 800d93e:	ad14      	add	r5, sp, #80	@ 0x50
 800d940:	f04f 0a02 	mov.w	sl, #2
 800d944:	e00a      	b.n	800d95c <listen_message_reliably+0x228>
 800d946:	f88d 9028 	strb.w	r9, [sp, #40]	@ 0x28
 800d94a:	f88d 6029 	strb.w	r6, [sp, #41]	@ 0x29
 800d94e:	f88d a02a 	strb.w	sl, [sp, #42]	@ 0x2a
 800d952:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d954:	4629      	mov	r1, r5
 800d956:	4640      	mov	r0, r8
 800d958:	f7ff fd64 	bl	800d424 <read_submessage_list>
 800d95c:	2204      	movs	r2, #4
 800d95e:	4629      	mov	r1, r5
 800d960:	4638      	mov	r0, r7
 800d962:	f007 fbb5 	bl	80150d0 <uxr_next_input_reliable_buffer_available>
 800d966:	2800      	cmp	r0, #0
 800d968:	d1ed      	bne.n	800d946 <listen_message_reliably+0x212>
 800d96a:	4640      	mov	r0, r8
 800d96c:	4632      	mov	r2, r6
 800d96e:	4649      	mov	r1, r9
 800d970:	f7ff fbd2 	bl	800d118 <write_submessage_acknack.isra.0>
 800d974:	4620      	mov	r0, r4
 800d976:	b01d      	add	sp, #116	@ 0x74
 800d978:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d97c:	4631      	mov	r1, r6
 800d97e:	f108 0008 	add.w	r0, r8, #8
 800d982:	f000 fd13 	bl	800e3ac <uxr_get_input_best_effort_stream>
 800d986:	2800      	cmp	r0, #0
 800d988:	d099      	beq.n	800d8be <listen_message_reliably+0x18a>
 800d98a:	4651      	mov	r1, sl
 800d98c:	f007 fa8c 	bl	8014ea8 <uxr_receive_best_effort_message>
 800d990:	2800      	cmp	r0, #0
 800d992:	d094      	beq.n	800d8be <listen_message_reliably+0x18a>
 800d994:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 800d998:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d99a:	a90c      	add	r1, sp, #48	@ 0x30
 800d99c:	4640      	mov	r0, r8
 800d99e:	f7ff fd41 	bl	800d424 <read_submessage_list>
 800d9a2:	e78c      	b.n	800d8be <listen_message_reliably+0x18a>
 800d9a4:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 800d9a8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d9aa:	a90c      	add	r1, sp, #48	@ 0x30
 800d9ac:	4640      	mov	r0, r8
 800d9ae:	f7ff fd39 	bl	800d424 <read_submessage_list>
 800d9b2:	e7c4      	b.n	800d93e <listen_message_reliably+0x20a>

0800d9b4 <uxr_run_session_timeout>:
 800d9b4:	b570      	push	{r4, r5, r6, lr}
 800d9b6:	4604      	mov	r4, r0
 800d9b8:	460d      	mov	r5, r1
 800d9ba:	f000 fd67 	bl	800e48c <uxr_millis>
 800d9be:	4606      	mov	r6, r0
 800d9c0:	4620      	mov	r0, r4
 800d9c2:	f7ff fc71 	bl	800d2a8 <uxr_flash_output_streams>
 800d9c6:	4629      	mov	r1, r5
 800d9c8:	4620      	mov	r0, r4
 800d9ca:	f7ff feb3 	bl	800d734 <listen_message_reliably>
 800d9ce:	f000 fd5d 	bl	800e48c <uxr_millis>
 800d9d2:	1b83      	subs	r3, r0, r6
 800d9d4:	1ae9      	subs	r1, r5, r3
 800d9d6:	2900      	cmp	r1, #0
 800d9d8:	dcf6      	bgt.n	800d9c8 <uxr_run_session_timeout+0x14>
 800d9da:	f104 0008 	add.w	r0, r4, #8
 800d9de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d9e2:	f000 bcf7 	b.w	800e3d4 <uxr_output_streams_confirmed>
 800d9e6:	bf00      	nop

0800d9e8 <uxr_run_session_until_data>:
 800d9e8:	b570      	push	{r4, r5, r6, lr}
 800d9ea:	4604      	mov	r4, r0
 800d9ec:	460d      	mov	r5, r1
 800d9ee:	f000 fd4d 	bl	800e48c <uxr_millis>
 800d9f2:	4606      	mov	r6, r0
 800d9f4:	4620      	mov	r0, r4
 800d9f6:	f7ff fc57 	bl	800d2a8 <uxr_flash_output_streams>
 800d9fa:	2300      	movs	r3, #0
 800d9fc:	f884 30b4 	strb.w	r3, [r4, #180]	@ 0xb4
 800da00:	4629      	mov	r1, r5
 800da02:	e005      	b.n	800da10 <uxr_run_session_until_data+0x28>
 800da04:	f000 fd42 	bl	800e48c <uxr_millis>
 800da08:	1b83      	subs	r3, r0, r6
 800da0a:	1ae9      	subs	r1, r5, r3
 800da0c:	2900      	cmp	r1, #0
 800da0e:	dd07      	ble.n	800da20 <uxr_run_session_until_data+0x38>
 800da10:	4620      	mov	r0, r4
 800da12:	f7ff fe8f 	bl	800d734 <listen_message_reliably>
 800da16:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 800da1a:	2800      	cmp	r0, #0
 800da1c:	d0f2      	beq.n	800da04 <uxr_run_session_until_data+0x1c>
 800da1e:	bd70      	pop	{r4, r5, r6, pc}
 800da20:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 800da24:	bd70      	pop	{r4, r5, r6, pc}
 800da26:	bf00      	nop

0800da28 <uxr_run_session_until_confirm_delivery>:
 800da28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800da2c:	4606      	mov	r6, r0
 800da2e:	460d      	mov	r5, r1
 800da30:	f000 fd2c 	bl	800e48c <uxr_millis>
 800da34:	4607      	mov	r7, r0
 800da36:	4630      	mov	r0, r6
 800da38:	f7ff fc36 	bl	800d2a8 <uxr_flash_output_streams>
 800da3c:	2d00      	cmp	r5, #0
 800da3e:	f106 0808 	add.w	r8, r6, #8
 800da42:	bfa8      	it	ge
 800da44:	462c      	movge	r4, r5
 800da46:	da07      	bge.n	800da58 <uxr_run_session_until_confirm_delivery+0x30>
 800da48:	e00e      	b.n	800da68 <uxr_run_session_until_confirm_delivery+0x40>
 800da4a:	f7ff fe73 	bl	800d734 <listen_message_reliably>
 800da4e:	f000 fd1d 	bl	800e48c <uxr_millis>
 800da52:	1bc3      	subs	r3, r0, r7
 800da54:	1aec      	subs	r4, r5, r3
 800da56:	d407      	bmi.n	800da68 <uxr_run_session_until_confirm_delivery+0x40>
 800da58:	4640      	mov	r0, r8
 800da5a:	f000 fcbb 	bl	800e3d4 <uxr_output_streams_confirmed>
 800da5e:	4603      	mov	r3, r0
 800da60:	4621      	mov	r1, r4
 800da62:	4630      	mov	r0, r6
 800da64:	2b00      	cmp	r3, #0
 800da66:	d0f0      	beq.n	800da4a <uxr_run_session_until_confirm_delivery+0x22>
 800da68:	4640      	mov	r0, r8
 800da6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800da6e:	f000 bcb1 	b.w	800e3d4 <uxr_output_streams_confirmed>
 800da72:	bf00      	nop

0800da74 <uxr_run_session_until_all_status>:
 800da74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800da78:	9c08      	ldr	r4, [sp, #32]
 800da7a:	4606      	mov	r6, r0
 800da7c:	460f      	mov	r7, r1
 800da7e:	4691      	mov	r9, r2
 800da80:	461d      	mov	r5, r3
 800da82:	f7ff fc11 	bl	800d2a8 <uxr_flash_output_streams>
 800da86:	b124      	cbz	r4, 800da92 <uxr_run_session_until_all_status+0x1e>
 800da88:	4622      	mov	r2, r4
 800da8a:	21ff      	movs	r1, #255	@ 0xff
 800da8c:	4628      	mov	r0, r5
 800da8e:	f009 ff35 	bl	80178fc <memset>
 800da92:	e9c6 951d 	strd	r9, r5, [r6, #116]	@ 0x74
 800da96:	67f4      	str	r4, [r6, #124]	@ 0x7c
 800da98:	f000 fcf8 	bl	800e48c <uxr_millis>
 800da9c:	3d01      	subs	r5, #1
 800da9e:	f1a9 0902 	sub.w	r9, r9, #2
 800daa2:	4680      	mov	r8, r0
 800daa4:	4639      	mov	r1, r7
 800daa6:	4630      	mov	r0, r6
 800daa8:	f7ff fe44 	bl	800d734 <listen_message_reliably>
 800daac:	f000 fcee 	bl	800e48c <uxr_millis>
 800dab0:	eba0 0008 	sub.w	r0, r0, r8
 800dab4:	1a39      	subs	r1, r7, r0
 800dab6:	b344      	cbz	r4, 800db0a <uxr_run_session_until_all_status+0x96>
 800dab8:	4628      	mov	r0, r5
 800daba:	46ac      	mov	ip, r5
 800dabc:	2301      	movs	r3, #1
 800dabe:	e002      	b.n	800dac6 <uxr_run_session_until_all_status+0x52>
 800dac0:	42a3      	cmp	r3, r4
 800dac2:	d20d      	bcs.n	800dae0 <uxr_run_session_until_all_status+0x6c>
 800dac4:	3301      	adds	r3, #1
 800dac6:	f81c ef01 	ldrb.w	lr, [ip, #1]!
 800daca:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 800dace:	d1f7      	bne.n	800dac0 <uxr_run_session_until_all_status+0x4c>
 800dad0:	42a3      	cmp	r3, r4
 800dad2:	f839 2013 	ldrh.w	r2, [r9, r3, lsl #1]
 800dad6:	d213      	bcs.n	800db00 <uxr_run_session_until_all_status+0x8c>
 800dad8:	2a00      	cmp	r2, #0
 800dada:	d0f3      	beq.n	800dac4 <uxr_run_session_until_all_status+0x50>
 800dadc:	2900      	cmp	r1, #0
 800dade:	dce2      	bgt.n	800daa6 <uxr_run_session_until_all_status+0x32>
 800dae0:	2300      	movs	r3, #0
 800dae2:	67f3      	str	r3, [r6, #124]	@ 0x7c
 800dae4:	442c      	add	r4, r5
 800dae6:	e001      	b.n	800daec <uxr_run_session_until_all_status+0x78>
 800dae8:	2b01      	cmp	r3, #1
 800daea:	d812      	bhi.n	800db12 <uxr_run_session_until_all_status+0x9e>
 800daec:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 800daf0:	4284      	cmp	r4, r0
 800daf2:	d1f9      	bne.n	800dae8 <uxr_run_session_until_all_status+0x74>
 800daf4:	2b01      	cmp	r3, #1
 800daf6:	bf8c      	ite	hi
 800daf8:	2000      	movhi	r0, #0
 800dafa:	2001      	movls	r0, #1
 800dafc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800db00:	2900      	cmp	r1, #0
 800db02:	dded      	ble.n	800dae0 <uxr_run_session_until_all_status+0x6c>
 800db04:	2a00      	cmp	r2, #0
 800db06:	d1ce      	bne.n	800daa6 <uxr_run_session_until_all_status+0x32>
 800db08:	e7ea      	b.n	800dae0 <uxr_run_session_until_all_status+0x6c>
 800db0a:	67f4      	str	r4, [r6, #124]	@ 0x7c
 800db0c:	2001      	movs	r0, #1
 800db0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800db12:	2000      	movs	r0, #0
 800db14:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800db18 <wait_session_status>:
 800db18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db1c:	4604      	mov	r4, r0
 800db1e:	b09d      	sub	sp, #116	@ 0x74
 800db20:	20ff      	movs	r0, #255	@ 0xff
 800db22:	7160      	strb	r0, [r4, #5]
 800db24:	9303      	str	r3, [sp, #12]
 800db26:	2b00      	cmp	r3, #0
 800db28:	f000 80b6 	beq.w	800dc98 <wait_session_status+0x180>
 800db2c:	468a      	mov	sl, r1
 800db2e:	4691      	mov	r9, r2
 800db30:	f04f 0b00 	mov.w	fp, #0
 800db34:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800db36:	464a      	mov	r2, r9
 800db38:	e9d3 0500 	ldrd	r0, r5, [r3]
 800db3c:	4651      	mov	r1, sl
 800db3e:	47a8      	blx	r5
 800db40:	f000 fca4 	bl	800e48c <uxr_millis>
 800db44:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800db48:	4605      	mov	r5, r0
 800db4a:	e009      	b.n	800db60 <wait_session_status+0x48>
 800db4c:	f000 fc9e 	bl	800e48c <uxr_millis>
 800db50:	1b40      	subs	r0, r0, r5
 800db52:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 800db56:	2b00      	cmp	r3, #0
 800db58:	dd40      	ble.n	800dbdc <wait_session_status+0xc4>
 800db5a:	7960      	ldrb	r0, [r4, #5]
 800db5c:	28ff      	cmp	r0, #255	@ 0xff
 800db5e:	d145      	bne.n	800dbec <wait_session_status+0xd4>
 800db60:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 800db62:	a908      	add	r1, sp, #32
 800db64:	6896      	ldr	r6, [r2, #8]
 800db66:	6810      	ldr	r0, [r2, #0]
 800db68:	aa09      	add	r2, sp, #36	@ 0x24
 800db6a:	47b0      	blx	r6
 800db6c:	2800      	cmp	r0, #0
 800db6e:	d0ed      	beq.n	800db4c <wait_session_status+0x34>
 800db70:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 800db74:	a80c      	add	r0, sp, #48	@ 0x30
 800db76:	f7fe ff51 	bl	800ca1c <ucdr_init_buffer>
 800db7a:	2600      	movs	r6, #0
 800db7c:	f10d 031e 	add.w	r3, sp, #30
 800db80:	aa07      	add	r2, sp, #28
 800db82:	a90c      	add	r1, sp, #48	@ 0x30
 800db84:	4620      	mov	r0, r4
 800db86:	f88d 601c 	strb.w	r6, [sp, #28]
 800db8a:	f000 fa87 	bl	800e09c <uxr_read_session_header>
 800db8e:	2800      	cmp	r0, #0
 800db90:	d0dc      	beq.n	800db4c <wait_session_status+0x34>
 800db92:	4631      	mov	r1, r6
 800db94:	f89d 001c 	ldrb.w	r0, [sp, #28]
 800db98:	f000 fb24 	bl	800e1e4 <uxr_stream_id_from_raw>
 800db9c:	f3c0 4707 	ubfx	r7, r0, #16, #8
 800dba0:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 800dba4:	9302      	str	r3, [sp, #8]
 800dba6:	2f01      	cmp	r7, #1
 800dba8:	e9cd 000a 	strd	r0, r0, [sp, #40]	@ 0x28
 800dbac:	f3c0 2607 	ubfx	r6, r0, #8, #8
 800dbb0:	d05c      	beq.n	800dc6c <wait_session_status+0x154>
 800dbb2:	2f02      	cmp	r7, #2
 800dbb4:	d020      	beq.n	800dbf8 <wait_session_status+0xe0>
 800dbb6:	2f00      	cmp	r7, #0
 800dbb8:	d1c8      	bne.n	800db4c <wait_session_status+0x34>
 800dbba:	4639      	mov	r1, r7
 800dbbc:	4638      	mov	r0, r7
 800dbbe:	f000 fb11 	bl	800e1e4 <uxr_stream_id_from_raw>
 800dbc2:	a90c      	add	r1, sp, #48	@ 0x30
 800dbc4:	4602      	mov	r2, r0
 800dbc6:	900b      	str	r0, [sp, #44]	@ 0x2c
 800dbc8:	4620      	mov	r0, r4
 800dbca:	f7ff fc2b 	bl	800d424 <read_submessage_list>
 800dbce:	f000 fc5d 	bl	800e48c <uxr_millis>
 800dbd2:	1b40      	subs	r0, r0, r5
 800dbd4:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 800dbd8:	2b00      	cmp	r3, #0
 800dbda:	dcbe      	bgt.n	800db5a <wait_session_status+0x42>
 800dbdc:	9b03      	ldr	r3, [sp, #12]
 800dbde:	7960      	ldrb	r0, [r4, #5]
 800dbe0:	f10b 0b01 	add.w	fp, fp, #1
 800dbe4:	455b      	cmp	r3, fp
 800dbe6:	d001      	beq.n	800dbec <wait_session_status+0xd4>
 800dbe8:	28ff      	cmp	r0, #255	@ 0xff
 800dbea:	d0a3      	beq.n	800db34 <wait_session_status+0x1c>
 800dbec:	38ff      	subs	r0, #255	@ 0xff
 800dbee:	bf18      	it	ne
 800dbf0:	2001      	movne	r0, #1
 800dbf2:	b01d      	add	sp, #116	@ 0x74
 800dbf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dbf8:	f89d 3028 	ldrb.w	r3, [sp, #40]	@ 0x28
 800dbfc:	9304      	str	r3, [sp, #16]
 800dbfe:	4631      	mov	r1, r6
 800dc00:	f104 0008 	add.w	r0, r4, #8
 800dc04:	f000 fbdc 	bl	800e3c0 <uxr_get_input_reliable_stream>
 800dc08:	4680      	mov	r8, r0
 800dc0a:	b348      	cbz	r0, 800dc60 <wait_session_status+0x148>
 800dc0c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800dc0e:	9205      	str	r2, [sp, #20]
 800dc10:	a80c      	add	r0, sp, #48	@ 0x30
 800dc12:	f7fe ff33 	bl	800ca7c <ucdr_buffer_remaining>
 800dc16:	4603      	mov	r3, r0
 800dc18:	f10d 001d 	add.w	r0, sp, #29
 800dc1c:	9000      	str	r0, [sp, #0]
 800dc1e:	9a05      	ldr	r2, [sp, #20]
 800dc20:	9902      	ldr	r1, [sp, #8]
 800dc22:	4640      	mov	r0, r8
 800dc24:	f007 f9d4 	bl	8014fd0 <uxr_receive_reliable_message>
 800dc28:	b1d0      	cbz	r0, 800dc60 <wait_session_status+0x148>
 800dc2a:	f89d 301d 	ldrb.w	r3, [sp, #29]
 800dc2e:	2b00      	cmp	r3, #0
 800dc30:	d03a      	beq.n	800dca8 <wait_session_status+0x190>
 800dc32:	9f04      	ldr	r7, [sp, #16]
 800dc34:	e00a      	b.n	800dc4c <wait_session_status+0x134>
 800dc36:	f04f 0302 	mov.w	r3, #2
 800dc3a:	f88d 702c 	strb.w	r7, [sp, #44]	@ 0x2c
 800dc3e:	f88d 602d 	strb.w	r6, [sp, #45]	@ 0x2d
 800dc42:	f88d 302e 	strb.w	r3, [sp, #46]	@ 0x2e
 800dc46:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800dc48:	f7ff fbec 	bl	800d424 <read_submessage_list>
 800dc4c:	a914      	add	r1, sp, #80	@ 0x50
 800dc4e:	2204      	movs	r2, #4
 800dc50:	4640      	mov	r0, r8
 800dc52:	f007 fa3d 	bl	80150d0 <uxr_next_input_reliable_buffer_available>
 800dc56:	4603      	mov	r3, r0
 800dc58:	a914      	add	r1, sp, #80	@ 0x50
 800dc5a:	4620      	mov	r0, r4
 800dc5c:	2b00      	cmp	r3, #0
 800dc5e:	d1ea      	bne.n	800dc36 <wait_session_status+0x11e>
 800dc60:	9904      	ldr	r1, [sp, #16]
 800dc62:	4632      	mov	r2, r6
 800dc64:	4620      	mov	r0, r4
 800dc66:	f7ff fa57 	bl	800d118 <write_submessage_acknack.isra.0>
 800dc6a:	e76f      	b.n	800db4c <wait_session_status+0x34>
 800dc6c:	4631      	mov	r1, r6
 800dc6e:	f104 0008 	add.w	r0, r4, #8
 800dc72:	f000 fb9b 	bl	800e3ac <uxr_get_input_best_effort_stream>
 800dc76:	2800      	cmp	r0, #0
 800dc78:	f43f af68 	beq.w	800db4c <wait_session_status+0x34>
 800dc7c:	9902      	ldr	r1, [sp, #8]
 800dc7e:	f007 f913 	bl	8014ea8 <uxr_receive_best_effort_message>
 800dc82:	2800      	cmp	r0, #0
 800dc84:	f43f af62 	beq.w	800db4c <wait_session_status+0x34>
 800dc88:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 800dc8c:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800dc8e:	a90c      	add	r1, sp, #48	@ 0x30
 800dc90:	4620      	mov	r0, r4
 800dc92:	f7ff fbc7 	bl	800d424 <read_submessage_list>
 800dc96:	e759      	b.n	800db4c <wait_session_status+0x34>
 800dc98:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800dc9a:	e9d3 0400 	ldrd	r0, r4, [r3]
 800dc9e:	47a0      	blx	r4
 800dca0:	2001      	movs	r0, #1
 800dca2:	b01d      	add	sp, #116	@ 0x74
 800dca4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dca8:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 800dcac:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800dcae:	a90c      	add	r1, sp, #48	@ 0x30
 800dcb0:	4620      	mov	r0, r4
 800dcb2:	f7ff fbb7 	bl	800d424 <read_submessage_list>
 800dcb6:	e7bc      	b.n	800dc32 <wait_session_status+0x11a>

0800dcb8 <uxr_delete_session_retries>:
 800dcb8:	b530      	push	{r4, r5, lr}
 800dcba:	b08f      	sub	sp, #60	@ 0x3c
 800dcbc:	4604      	mov	r4, r0
 800dcbe:	460d      	mov	r5, r1
 800dcc0:	f000 fa2e 	bl	800e120 <uxr_session_header_offset>
 800dcc4:	2300      	movs	r3, #0
 800dcc6:	2210      	movs	r2, #16
 800dcc8:	9000      	str	r0, [sp, #0]
 800dcca:	a902      	add	r1, sp, #8
 800dccc:	a806      	add	r0, sp, #24
 800dcce:	f7fe fe93 	bl	800c9f8 <ucdr_init_buffer_origin_offset>
 800dcd2:	a906      	add	r1, sp, #24
 800dcd4:	4620      	mov	r0, r4
 800dcd6:	f000 f973 	bl	800dfc0 <uxr_buffer_delete_session>
 800dcda:	2200      	movs	r2, #0
 800dcdc:	4611      	mov	r1, r2
 800dcde:	9b06      	ldr	r3, [sp, #24]
 800dce0:	4620      	mov	r0, r4
 800dce2:	f000 f9c7 	bl	800e074 <uxr_stamp_session_header>
 800dce6:	a806      	add	r0, sp, #24
 800dce8:	f7fe fec4 	bl	800ca74 <ucdr_buffer_length>
 800dcec:	462b      	mov	r3, r5
 800dcee:	4602      	mov	r2, r0
 800dcf0:	a902      	add	r1, sp, #8
 800dcf2:	4620      	mov	r0, r4
 800dcf4:	f7ff ff10 	bl	800db18 <wait_session_status>
 800dcf8:	b118      	cbz	r0, 800dd02 <uxr_delete_session_retries+0x4a>
 800dcfa:	7960      	ldrb	r0, [r4, #5]
 800dcfc:	fab0 f080 	clz	r0, r0
 800dd00:	0940      	lsrs	r0, r0, #5
 800dd02:	b00f      	add	sp, #60	@ 0x3c
 800dd04:	bd30      	pop	{r4, r5, pc}
 800dd06:	bf00      	nop

0800dd08 <uxr_create_session>:
 800dd08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd0c:	f100 0b08 	add.w	fp, r0, #8
 800dd10:	b0ab      	sub	sp, #172	@ 0xac
 800dd12:	4604      	mov	r4, r0
 800dd14:	4658      	mov	r0, fp
 800dd16:	f000 fa99 	bl	800e24c <uxr_reset_stream_storage>
 800dd1a:	4620      	mov	r0, r4
 800dd1c:	f000 fa00 	bl	800e120 <uxr_session_header_offset>
 800dd20:	2300      	movs	r3, #0
 800dd22:	9000      	str	r0, [sp, #0]
 800dd24:	221c      	movs	r2, #28
 800dd26:	a90b      	add	r1, sp, #44	@ 0x2c
 800dd28:	a812      	add	r0, sp, #72	@ 0x48
 800dd2a:	f7fe fe65 	bl	800c9f8 <ucdr_init_buffer_origin_offset>
 800dd2e:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800dd30:	8a1a      	ldrh	r2, [r3, #16]
 800dd32:	3a04      	subs	r2, #4
 800dd34:	b292      	uxth	r2, r2
 800dd36:	a912      	add	r1, sp, #72	@ 0x48
 800dd38:	4620      	mov	r0, r4
 800dd3a:	f000 f917 	bl	800df6c <uxr_buffer_create_session>
 800dd3e:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800dd40:	4620      	mov	r0, r4
 800dd42:	f000 f983 	bl	800e04c <uxr_stamp_create_session_header>
 800dd46:	a812      	add	r0, sp, #72	@ 0x48
 800dd48:	f7fe fe94 	bl	800ca74 <ucdr_buffer_length>
 800dd4c:	23ff      	movs	r3, #255	@ 0xff
 800dd4e:	7163      	strb	r3, [r4, #5]
 800dd50:	230a      	movs	r3, #10
 800dd52:	46da      	mov	sl, fp
 800dd54:	9303      	str	r3, [sp, #12]
 800dd56:	4683      	mov	fp, r0
 800dd58:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800dd5a:	465a      	mov	r2, fp
 800dd5c:	e9d3 0500 	ldrd	r0, r5, [r3]
 800dd60:	a90b      	add	r1, sp, #44	@ 0x2c
 800dd62:	47a8      	blx	r5
 800dd64:	f000 fb92 	bl	800e48c <uxr_millis>
 800dd68:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800dd6c:	4605      	mov	r5, r0
 800dd6e:	e009      	b.n	800dd84 <uxr_create_session+0x7c>
 800dd70:	f000 fb8c 	bl	800e48c <uxr_millis>
 800dd74:	1b40      	subs	r0, r0, r5
 800dd76:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 800dd7a:	2b00      	cmp	r3, #0
 800dd7c:	7962      	ldrb	r2, [r4, #5]
 800dd7e:	dd38      	ble.n	800ddf2 <uxr_create_session+0xea>
 800dd80:	2aff      	cmp	r2, #255	@ 0xff
 800dd82:	d13c      	bne.n	800ddfe <uxr_create_session+0xf6>
 800dd84:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 800dd86:	a907      	add	r1, sp, #28
 800dd88:	6896      	ldr	r6, [r2, #8]
 800dd8a:	6810      	ldr	r0, [r2, #0]
 800dd8c:	aa08      	add	r2, sp, #32
 800dd8e:	47b0      	blx	r6
 800dd90:	2800      	cmp	r0, #0
 800dd92:	d0ed      	beq.n	800dd70 <uxr_create_session+0x68>
 800dd94:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 800dd98:	a81a      	add	r0, sp, #104	@ 0x68
 800dd9a:	f7fe fe3f 	bl	800ca1c <ucdr_init_buffer>
 800dd9e:	2600      	movs	r6, #0
 800dda0:	f10d 031a 	add.w	r3, sp, #26
 800dda4:	aa06      	add	r2, sp, #24
 800dda6:	a91a      	add	r1, sp, #104	@ 0x68
 800dda8:	4620      	mov	r0, r4
 800ddaa:	f88d 6018 	strb.w	r6, [sp, #24]
 800ddae:	f000 f975 	bl	800e09c <uxr_read_session_header>
 800ddb2:	2800      	cmp	r0, #0
 800ddb4:	d0dc      	beq.n	800dd70 <uxr_create_session+0x68>
 800ddb6:	4631      	mov	r1, r6
 800ddb8:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800ddbc:	f000 fa12 	bl	800e1e4 <uxr_stream_id_from_raw>
 800ddc0:	f3c0 4607 	ubfx	r6, r0, #16, #8
 800ddc4:	2e01      	cmp	r6, #1
 800ddc6:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 800ddca:	f8bd 901a 	ldrh.w	r9, [sp, #26]
 800ddce:	f3c0 2707 	ubfx	r7, r0, #8, #8
 800ddd2:	d053      	beq.n	800de7c <uxr_create_session+0x174>
 800ddd4:	2e02      	cmp	r6, #2
 800ddd6:	d018      	beq.n	800de0a <uxr_create_session+0x102>
 800ddd8:	2e00      	cmp	r6, #0
 800ddda:	d1c9      	bne.n	800dd70 <uxr_create_session+0x68>
 800dddc:	4631      	mov	r1, r6
 800ddde:	4630      	mov	r0, r6
 800dde0:	f000 fa00 	bl	800e1e4 <uxr_stream_id_from_raw>
 800dde4:	a91a      	add	r1, sp, #104	@ 0x68
 800dde6:	4602      	mov	r2, r0
 800dde8:	900a      	str	r0, [sp, #40]	@ 0x28
 800ddea:	4620      	mov	r0, r4
 800ddec:	f7ff fb1a 	bl	800d424 <read_submessage_list>
 800ddf0:	e7be      	b.n	800dd70 <uxr_create_session+0x68>
 800ddf2:	9b03      	ldr	r3, [sp, #12]
 800ddf4:	3b01      	subs	r3, #1
 800ddf6:	9303      	str	r3, [sp, #12]
 800ddf8:	d001      	beq.n	800ddfe <uxr_create_session+0xf6>
 800ddfa:	2aff      	cmp	r2, #255	@ 0xff
 800ddfc:	d0ac      	beq.n	800dd58 <uxr_create_session+0x50>
 800ddfe:	2a00      	cmp	r2, #0
 800de00:	d051      	beq.n	800dea6 <uxr_create_session+0x19e>
 800de02:	2000      	movs	r0, #0
 800de04:	b02b      	add	sp, #172	@ 0xac
 800de06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de0a:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 800de0e:	9304      	str	r3, [sp, #16]
 800de10:	4639      	mov	r1, r7
 800de12:	4650      	mov	r0, sl
 800de14:	f000 fad4 	bl	800e3c0 <uxr_get_input_reliable_stream>
 800de18:	4680      	mov	r8, r0
 800de1a:	b348      	cbz	r0, 800de70 <uxr_create_session+0x168>
 800de1c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800de1e:	9205      	str	r2, [sp, #20]
 800de20:	a81a      	add	r0, sp, #104	@ 0x68
 800de22:	f7fe fe2b 	bl	800ca7c <ucdr_buffer_remaining>
 800de26:	4603      	mov	r3, r0
 800de28:	f10d 0019 	add.w	r0, sp, #25
 800de2c:	9000      	str	r0, [sp, #0]
 800de2e:	9a05      	ldr	r2, [sp, #20]
 800de30:	4649      	mov	r1, r9
 800de32:	4640      	mov	r0, r8
 800de34:	f007 f8cc 	bl	8014fd0 <uxr_receive_reliable_message>
 800de38:	b1d0      	cbz	r0, 800de70 <uxr_create_session+0x168>
 800de3a:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800de3e:	2b00      	cmp	r3, #0
 800de40:	d038      	beq.n	800deb4 <uxr_create_session+0x1ac>
 800de42:	9e04      	ldr	r6, [sp, #16]
 800de44:	e00a      	b.n	800de5c <uxr_create_session+0x154>
 800de46:	f04f 0302 	mov.w	r3, #2
 800de4a:	f88d 6028 	strb.w	r6, [sp, #40]	@ 0x28
 800de4e:	f88d 7029 	strb.w	r7, [sp, #41]	@ 0x29
 800de52:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800de56:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800de58:	f7ff fae4 	bl	800d424 <read_submessage_list>
 800de5c:	a922      	add	r1, sp, #136	@ 0x88
 800de5e:	2204      	movs	r2, #4
 800de60:	4640      	mov	r0, r8
 800de62:	f007 f935 	bl	80150d0 <uxr_next_input_reliable_buffer_available>
 800de66:	4603      	mov	r3, r0
 800de68:	a922      	add	r1, sp, #136	@ 0x88
 800de6a:	4620      	mov	r0, r4
 800de6c:	2b00      	cmp	r3, #0
 800de6e:	d1ea      	bne.n	800de46 <uxr_create_session+0x13e>
 800de70:	9904      	ldr	r1, [sp, #16]
 800de72:	463a      	mov	r2, r7
 800de74:	4620      	mov	r0, r4
 800de76:	f7ff f94f 	bl	800d118 <write_submessage_acknack.isra.0>
 800de7a:	e779      	b.n	800dd70 <uxr_create_session+0x68>
 800de7c:	4639      	mov	r1, r7
 800de7e:	4650      	mov	r0, sl
 800de80:	f000 fa94 	bl	800e3ac <uxr_get_input_best_effort_stream>
 800de84:	2800      	cmp	r0, #0
 800de86:	f43f af73 	beq.w	800dd70 <uxr_create_session+0x68>
 800de8a:	4649      	mov	r1, r9
 800de8c:	f007 f80c 	bl	8014ea8 <uxr_receive_best_effort_message>
 800de90:	2800      	cmp	r0, #0
 800de92:	f43f af6d 	beq.w	800dd70 <uxr_create_session+0x68>
 800de96:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 800de9a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800de9c:	a91a      	add	r1, sp, #104	@ 0x68
 800de9e:	4620      	mov	r0, r4
 800dea0:	f7ff fac0 	bl	800d424 <read_submessage_list>
 800dea4:	e764      	b.n	800dd70 <uxr_create_session+0x68>
 800dea6:	4650      	mov	r0, sl
 800dea8:	f000 f9d0 	bl	800e24c <uxr_reset_stream_storage>
 800deac:	2001      	movs	r0, #1
 800deae:	b02b      	add	sp, #172	@ 0xac
 800deb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800deb4:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 800deb8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800deba:	a91a      	add	r1, sp, #104	@ 0x68
 800debc:	4620      	mov	r0, r4
 800debe:	f7ff fab1 	bl	800d424 <read_submessage_list>
 800dec2:	e7be      	b.n	800de42 <uxr_create_session+0x13a>

0800dec4 <uxr_prepare_stream_to_write_submessage>:
 800dec4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dec8:	b082      	sub	sp, #8
 800deca:	4682      	mov	sl, r0
 800decc:	4610      	mov	r0, r2
 800dece:	4615      	mov	r5, r2
 800ded0:	461e      	mov	r6, r3
 800ded2:	f89d 7028 	ldrb.w	r7, [sp, #40]	@ 0x28
 800ded6:	f89d 802c 	ldrb.w	r8, [sp, #44]	@ 0x2c
 800deda:	9101      	str	r1, [sp, #4]
 800dedc:	f3c1 2407 	ubfx	r4, r1, #8, #8
 800dee0:	f000 face 	bl	800e480 <uxr_submessage_padding>
 800dee4:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800dee8:	f105 0904 	add.w	r9, r5, #4
 800deec:	2b01      	cmp	r3, #1
 800deee:	4481      	add	r9, r0
 800def0:	d01d      	beq.n	800df2e <uxr_prepare_stream_to_write_submessage+0x6a>
 800def2:	2b02      	cmp	r3, #2
 800def4:	d116      	bne.n	800df24 <uxr_prepare_stream_to_write_submessage+0x60>
 800def6:	4621      	mov	r1, r4
 800def8:	f10a 0008 	add.w	r0, sl, #8
 800defc:	f000 fa4c 	bl	800e398 <uxr_get_output_reliable_stream>
 800df00:	4604      	mov	r4, r0
 800df02:	b158      	cbz	r0, 800df1c <uxr_prepare_stream_to_write_submessage+0x58>
 800df04:	4649      	mov	r1, r9
 800df06:	4632      	mov	r2, r6
 800df08:	f007 fa9e 	bl	8015448 <uxr_prepare_reliable_buffer_to_write>
 800df0c:	4604      	mov	r4, r0
 800df0e:	b12c      	cbz	r4, 800df1c <uxr_prepare_stream_to_write_submessage+0x58>
 800df10:	4643      	mov	r3, r8
 800df12:	b2aa      	uxth	r2, r5
 800df14:	4639      	mov	r1, r7
 800df16:	4630      	mov	r0, r6
 800df18:	f000 fa72 	bl	800e400 <uxr_buffer_submessage_header>
 800df1c:	4620      	mov	r0, r4
 800df1e:	b002      	add	sp, #8
 800df20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800df24:	2400      	movs	r4, #0
 800df26:	4620      	mov	r0, r4
 800df28:	b002      	add	sp, #8
 800df2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800df2e:	4621      	mov	r1, r4
 800df30:	f10a 0008 	add.w	r0, sl, #8
 800df34:	f000 fa28 	bl	800e388 <uxr_get_output_best_effort_stream>
 800df38:	4604      	mov	r4, r0
 800df3a:	2800      	cmp	r0, #0
 800df3c:	d0ee      	beq.n	800df1c <uxr_prepare_stream_to_write_submessage+0x58>
 800df3e:	4649      	mov	r1, r9
 800df40:	4632      	mov	r2, r6
 800df42:	f007 f9b1 	bl	80152a8 <uxr_prepare_best_effort_buffer_to_write>
 800df46:	4604      	mov	r4, r0
 800df48:	e7e1      	b.n	800df0e <uxr_prepare_stream_to_write_submessage+0x4a>
 800df4a:	bf00      	nop

0800df4c <uxr_init_session_info>:
 800df4c:	0e13      	lsrs	r3, r2, #24
 800df4e:	7043      	strb	r3, [r0, #1]
 800df50:	f3c2 2307 	ubfx	r3, r2, #8, #8
 800df54:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 800df58:	7001      	strb	r1, [r0, #0]
 800df5a:	70c3      	strb	r3, [r0, #3]
 800df5c:	2109      	movs	r1, #9
 800df5e:	23ff      	movs	r3, #255	@ 0xff
 800df60:	f880 c002 	strb.w	ip, [r0, #2]
 800df64:	7102      	strb	r2, [r0, #4]
 800df66:	80c1      	strh	r1, [r0, #6]
 800df68:	7143      	strb	r3, [r0, #5]
 800df6a:	4770      	bx	lr

0800df6c <uxr_buffer_create_session>:
 800df6c:	b530      	push	{r4, r5, lr}
 800df6e:	b089      	sub	sp, #36	@ 0x24
 800df70:	2300      	movs	r3, #0
 800df72:	4d12      	ldr	r5, [pc, #72]	@ (800dfbc <uxr_buffer_create_session+0x50>)
 800df74:	9307      	str	r3, [sp, #28]
 800df76:	f8ad 201c 	strh.w	r2, [sp, #28]
 800df7a:	2201      	movs	r2, #1
 800df7c:	9301      	str	r3, [sp, #4]
 800df7e:	80c2      	strh	r2, [r0, #6]
 800df80:	f88d 2004 	strb.w	r2, [sp, #4]
 800df84:	682a      	ldr	r2, [r5, #0]
 800df86:	9200      	str	r2, [sp, #0]
 800df88:	88aa      	ldrh	r2, [r5, #4]
 800df8a:	f8ad 2006 	strh.w	r2, [sp, #6]
 800df8e:	f8d0 2001 	ldr.w	r2, [r0, #1]
 800df92:	9202      	str	r2, [sp, #8]
 800df94:	460c      	mov	r4, r1
 800df96:	7802      	ldrb	r2, [r0, #0]
 800df98:	9303      	str	r3, [sp, #12]
 800df9a:	4619      	mov	r1, r3
 800df9c:	f88d 200c 	strb.w	r2, [sp, #12]
 800dfa0:	4620      	mov	r0, r4
 800dfa2:	2210      	movs	r2, #16
 800dfa4:	e9cd 3304 	strd	r3, r3, [sp, #16]
 800dfa8:	9306      	str	r3, [sp, #24]
 800dfaa:	f000 fa29 	bl	800e400 <uxr_buffer_submessage_header>
 800dfae:	4669      	mov	r1, sp
 800dfb0:	4620      	mov	r0, r4
 800dfb2:	f001 fa6d 	bl	800f490 <uxr_serialize_CREATE_CLIENT_Payload>
 800dfb6:	b009      	add	sp, #36	@ 0x24
 800dfb8:	bd30      	pop	{r4, r5, pc}
 800dfba:	bf00      	nop
 800dfbc:	08018868 	.word	0x08018868

0800dfc0 <uxr_buffer_delete_session>:
 800dfc0:	b510      	push	{r4, lr}
 800dfc2:	4b0c      	ldr	r3, [pc, #48]	@ (800dff4 <uxr_buffer_delete_session+0x34>)
 800dfc4:	b082      	sub	sp, #8
 800dfc6:	f8b3 c008 	ldrh.w	ip, [r3, #8]
 800dfca:	f8ad c006 	strh.w	ip, [sp, #6]
 800dfce:	460c      	mov	r4, r1
 800dfd0:	2202      	movs	r2, #2
 800dfd2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800dfd6:	80c2      	strh	r2, [r0, #6]
 800dfd8:	f8ad 3004 	strh.w	r3, [sp, #4]
 800dfdc:	2204      	movs	r2, #4
 800dfde:	2300      	movs	r3, #0
 800dfe0:	2103      	movs	r1, #3
 800dfe2:	4620      	mov	r0, r4
 800dfe4:	f000 fa0c 	bl	800e400 <uxr_buffer_submessage_header>
 800dfe8:	a901      	add	r1, sp, #4
 800dfea:	4620      	mov	r0, r4
 800dfec:	f001 faf6 	bl	800f5dc <uxr_serialize_DELETE_Payload>
 800dff0:	b002      	add	sp, #8
 800dff2:	bd10      	pop	{r4, pc}
 800dff4:	08018868 	.word	0x08018868

0800dff8 <uxr_read_create_session_status>:
 800dff8:	b510      	push	{r4, lr}
 800dffa:	b088      	sub	sp, #32
 800dffc:	4604      	mov	r4, r0
 800dffe:	4608      	mov	r0, r1
 800e000:	a901      	add	r1, sp, #4
 800e002:	f001 fafb 	bl	800f5fc <uxr_deserialize_STATUS_AGENT_Payload>
 800e006:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800e00a:	7163      	strb	r3, [r4, #5]
 800e00c:	b008      	add	sp, #32
 800e00e:	bd10      	pop	{r4, pc}

0800e010 <uxr_read_delete_session_status>:
 800e010:	b510      	push	{r4, lr}
 800e012:	4604      	mov	r4, r0
 800e014:	b084      	sub	sp, #16
 800e016:	4608      	mov	r0, r1
 800e018:	a902      	add	r1, sp, #8
 800e01a:	f001 fb1f 	bl	800f65c <uxr_deserialize_STATUS_Payload>
 800e01e:	88e3      	ldrh	r3, [r4, #6]
 800e020:	2b02      	cmp	r3, #2
 800e022:	d001      	beq.n	800e028 <uxr_read_delete_session_status+0x18>
 800e024:	b004      	add	sp, #16
 800e026:	bd10      	pop	{r4, pc}
 800e028:	f10d 000a 	add.w	r0, sp, #10
 800e02c:	f7fe fffa 	bl	800d024 <uxr_object_id_from_raw>
 800e030:	f89d 2008 	ldrb.w	r2, [sp, #8]
 800e034:	f89d 3009 	ldrb.w	r3, [sp, #9]
 800e038:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800e03c:	b29b      	uxth	r3, r3
 800e03e:	2b02      	cmp	r3, #2
 800e040:	bf04      	itt	eq
 800e042:	f89d 300c 	ldrbeq.w	r3, [sp, #12]
 800e046:	7163      	strbeq	r3, [r4, #5]
 800e048:	b004      	add	sp, #16
 800e04a:	bd10      	pop	{r4, pc}

0800e04c <uxr_stamp_create_session_header>:
 800e04c:	b510      	push	{r4, lr}
 800e04e:	2208      	movs	r2, #8
 800e050:	b08a      	sub	sp, #40	@ 0x28
 800e052:	4604      	mov	r4, r0
 800e054:	eb0d 0002 	add.w	r0, sp, r2
 800e058:	f7fe fce0 	bl	800ca1c <ucdr_init_buffer>
 800e05c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e060:	9400      	str	r4, [sp, #0]
 800e062:	2300      	movs	r3, #0
 800e064:	461a      	mov	r2, r3
 800e066:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 800e06a:	a802      	add	r0, sp, #8
 800e06c:	f000 fbc2 	bl	800e7f4 <uxr_serialize_message_header>
 800e070:	b00a      	add	sp, #40	@ 0x28
 800e072:	bd10      	pop	{r4, pc}

0800e074 <uxr_stamp_session_header>:
 800e074:	b530      	push	{r4, r5, lr}
 800e076:	b08d      	sub	sp, #52	@ 0x34
 800e078:	4604      	mov	r4, r0
 800e07a:	460d      	mov	r5, r1
 800e07c:	9203      	str	r2, [sp, #12]
 800e07e:	4619      	mov	r1, r3
 800e080:	a804      	add	r0, sp, #16
 800e082:	2208      	movs	r2, #8
 800e084:	f7fe fcca 	bl	800ca1c <ucdr_init_buffer>
 800e088:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e08c:	9b03      	ldr	r3, [sp, #12]
 800e08e:	9400      	str	r4, [sp, #0]
 800e090:	462a      	mov	r2, r5
 800e092:	a804      	add	r0, sp, #16
 800e094:	f000 fbae 	bl	800e7f4 <uxr_serialize_message_header>
 800e098:	b00d      	add	sp, #52	@ 0x34
 800e09a:	bd30      	pop	{r4, r5, pc}

0800e09c <uxr_read_session_header>:
 800e09c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e0a0:	4607      	mov	r7, r0
 800e0a2:	b084      	sub	sp, #16
 800e0a4:	4608      	mov	r0, r1
 800e0a6:	460c      	mov	r4, r1
 800e0a8:	4615      	mov	r5, r2
 800e0aa:	461e      	mov	r6, r3
 800e0ac:	f7fe fce6 	bl	800ca7c <ucdr_buffer_remaining>
 800e0b0:	2808      	cmp	r0, #8
 800e0b2:	d803      	bhi.n	800e0bc <uxr_read_session_header+0x20>
 800e0b4:	2000      	movs	r0, #0
 800e0b6:	b004      	add	sp, #16
 800e0b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e0bc:	f10d 080c 	add.w	r8, sp, #12
 800e0c0:	4633      	mov	r3, r6
 800e0c2:	462a      	mov	r2, r5
 800e0c4:	f8cd 8000 	str.w	r8, [sp]
 800e0c8:	4620      	mov	r0, r4
 800e0ca:	f10d 010b 	add.w	r1, sp, #11
 800e0ce:	f000 fbaf 	bl	800e830 <uxr_deserialize_message_header>
 800e0d2:	783a      	ldrb	r2, [r7, #0]
 800e0d4:	f89d 300b 	ldrb.w	r3, [sp, #11]
 800e0d8:	4293      	cmp	r3, r2
 800e0da:	d1eb      	bne.n	800e0b4 <uxr_read_session_header+0x18>
 800e0dc:	061b      	lsls	r3, r3, #24
 800e0de:	d41c      	bmi.n	800e11a <uxr_read_session_header+0x7e>
 800e0e0:	f89d 200c 	ldrb.w	r2, [sp, #12]
 800e0e4:	787b      	ldrb	r3, [r7, #1]
 800e0e6:	429a      	cmp	r2, r3
 800e0e8:	d003      	beq.n	800e0f2 <uxr_read_session_header+0x56>
 800e0ea:	2001      	movs	r0, #1
 800e0ec:	f080 0001 	eor.w	r0, r0, #1
 800e0f0:	e7e1      	b.n	800e0b6 <uxr_read_session_header+0x1a>
 800e0f2:	f89d 200d 	ldrb.w	r2, [sp, #13]
 800e0f6:	78bb      	ldrb	r3, [r7, #2]
 800e0f8:	429a      	cmp	r2, r3
 800e0fa:	f107 0102 	add.w	r1, r7, #2
 800e0fe:	d1f4      	bne.n	800e0ea <uxr_read_session_header+0x4e>
 800e100:	f89d 200e 	ldrb.w	r2, [sp, #14]
 800e104:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800e108:	429a      	cmp	r2, r3
 800e10a:	d1ee      	bne.n	800e0ea <uxr_read_session_header+0x4e>
 800e10c:	f89d 200f 	ldrb.w	r2, [sp, #15]
 800e110:	784b      	ldrb	r3, [r1, #1]
 800e112:	429a      	cmp	r2, r3
 800e114:	d1e9      	bne.n	800e0ea <uxr_read_session_header+0x4e>
 800e116:	2000      	movs	r0, #0
 800e118:	e7e8      	b.n	800e0ec <uxr_read_session_header+0x50>
 800e11a:	2001      	movs	r0, #1
 800e11c:	e7cb      	b.n	800e0b6 <uxr_read_session_header+0x1a>
 800e11e:	bf00      	nop

0800e120 <uxr_session_header_offset>:
 800e120:	f990 3000 	ldrsb.w	r3, [r0]
 800e124:	2b00      	cmp	r3, #0
 800e126:	bfac      	ite	ge
 800e128:	2008      	movge	r0, #8
 800e12a:	2004      	movlt	r0, #4
 800e12c:	4770      	bx	lr
 800e12e:	bf00      	nop

0800e130 <uxr_init_base_object_request>:
 800e130:	b510      	push	{r4, lr}
 800e132:	88c3      	ldrh	r3, [r0, #6]
 800e134:	b082      	sub	sp, #8
 800e136:	f64f 74f4 	movw	r4, #65524	@ 0xfff4
 800e13a:	9101      	str	r1, [sp, #4]
 800e13c:	f1a3 010a 	sub.w	r1, r3, #10
 800e140:	b289      	uxth	r1, r1
 800e142:	42a1      	cmp	r1, r4
 800e144:	d80e      	bhi.n	800e164 <uxr_init_base_object_request+0x34>
 800e146:	3301      	adds	r3, #1
 800e148:	b29c      	uxth	r4, r3
 800e14a:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800e14e:	b2db      	uxtb	r3, r3
 800e150:	80c4      	strh	r4, [r0, #6]
 800e152:	9801      	ldr	r0, [sp, #4]
 800e154:	7011      	strb	r1, [r2, #0]
 800e156:	7053      	strb	r3, [r2, #1]
 800e158:	1c91      	adds	r1, r2, #2
 800e15a:	f7fe ff77 	bl	800d04c <uxr_object_id_to_raw>
 800e15e:	4620      	mov	r0, r4
 800e160:	b002      	add	sp, #8
 800e162:	bd10      	pop	{r4, pc}
 800e164:	230a      	movs	r3, #10
 800e166:	2100      	movs	r1, #0
 800e168:	461c      	mov	r4, r3
 800e16a:	e7f1      	b.n	800e150 <uxr_init_base_object_request+0x20>

0800e16c <uxr_parse_base_object_request>:
 800e16c:	b570      	push	{r4, r5, r6, lr}
 800e16e:	4604      	mov	r4, r0
 800e170:	3002      	adds	r0, #2
 800e172:	460d      	mov	r5, r1
 800e174:	4616      	mov	r6, r2
 800e176:	f7fe ff55 	bl	800d024 <uxr_object_id_from_raw>
 800e17a:	f3c0 430f 	ubfx	r3, r0, #16, #16
 800e17e:	8028      	strh	r0, [r5, #0]
 800e180:	806b      	strh	r3, [r5, #2]
 800e182:	7822      	ldrb	r2, [r4, #0]
 800e184:	7863      	ldrb	r3, [r4, #1]
 800e186:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800e18a:	8033      	strh	r3, [r6, #0]
 800e18c:	bd70      	pop	{r4, r5, r6, pc}
 800e18e:	bf00      	nop

0800e190 <uxr_stream_id>:
 800e190:	2901      	cmp	r1, #1
 800e192:	b082      	sub	sp, #8
 800e194:	d01d      	beq.n	800e1d2 <uxr_stream_id+0x42>
 800e196:	2902      	cmp	r1, #2
 800e198:	f04f 0c00 	mov.w	ip, #0
 800e19c:	d01e      	beq.n	800e1dc <uxr_stream_id+0x4c>
 800e19e:	2300      	movs	r3, #0
 800e1a0:	f36c 0307 	bfi	r3, ip, #0, #8
 800e1a4:	f360 230f 	bfi	r3, r0, #8, #8
 800e1a8:	f361 4317 	bfi	r3, r1, #16, #8
 800e1ac:	f362 631f 	bfi	r3, r2, #24, #8
 800e1b0:	b2da      	uxtb	r2, r3
 800e1b2:	2000      	movs	r0, #0
 800e1b4:	f362 0007 	bfi	r0, r2, #0, #8
 800e1b8:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800e1bc:	f362 200f 	bfi	r0, r2, #8, #8
 800e1c0:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800e1c4:	f362 4017 	bfi	r0, r2, #16, #8
 800e1c8:	0e1b      	lsrs	r3, r3, #24
 800e1ca:	f363 601f 	bfi	r0, r3, #24, #8
 800e1ce:	b002      	add	sp, #8
 800e1d0:	4770      	bx	lr
 800e1d2:	f100 0c01 	add.w	ip, r0, #1
 800e1d6:	fa5f fc8c 	uxtb.w	ip, ip
 800e1da:	e7e0      	b.n	800e19e <uxr_stream_id+0xe>
 800e1dc:	f080 0c80 	eor.w	ip, r0, #128	@ 0x80
 800e1e0:	e7dd      	b.n	800e19e <uxr_stream_id+0xe>
 800e1e2:	bf00      	nop

0800e1e4 <uxr_stream_id_from_raw>:
 800e1e4:	b082      	sub	sp, #8
 800e1e6:	b130      	cbz	r0, 800e1f6 <uxr_stream_id_from_raw+0x12>
 800e1e8:	0603      	lsls	r3, r0, #24
 800e1ea:	d420      	bmi.n	800e22e <uxr_stream_id_from_raw+0x4a>
 800e1ec:	1e42      	subs	r2, r0, #1
 800e1ee:	b2d2      	uxtb	r2, r2
 800e1f0:	f04f 0c01 	mov.w	ip, #1
 800e1f4:	e001      	b.n	800e1fa <uxr_stream_id_from_raw+0x16>
 800e1f6:	4684      	mov	ip, r0
 800e1f8:	4602      	mov	r2, r0
 800e1fa:	2300      	movs	r3, #0
 800e1fc:	f360 0307 	bfi	r3, r0, #0, #8
 800e200:	f362 230f 	bfi	r3, r2, #8, #8
 800e204:	f36c 4317 	bfi	r3, ip, #16, #8
 800e208:	f361 631f 	bfi	r3, r1, #24, #8
 800e20c:	b2da      	uxtb	r2, r3
 800e20e:	2000      	movs	r0, #0
 800e210:	f362 0007 	bfi	r0, r2, #0, #8
 800e214:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800e218:	f362 200f 	bfi	r0, r2, #8, #8
 800e21c:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800e220:	f362 4017 	bfi	r0, r2, #16, #8
 800e224:	0e1b      	lsrs	r3, r3, #24
 800e226:	f363 601f 	bfi	r0, r3, #24, #8
 800e22a:	b002      	add	sp, #8
 800e22c:	4770      	bx	lr
 800e22e:	f080 0280 	eor.w	r2, r0, #128	@ 0x80
 800e232:	f04f 0c02 	mov.w	ip, #2
 800e236:	e7e0      	b.n	800e1fa <uxr_stream_id_from_raw+0x16>

0800e238 <uxr_init_stream_storage>:
 800e238:	2300      	movs	r3, #0
 800e23a:	7403      	strb	r3, [r0, #16]
 800e23c:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 800e240:	f880 3044 	strb.w	r3, [r0, #68]	@ 0x44
 800e244:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
 800e248:	4770      	bx	lr
 800e24a:	bf00      	nop

0800e24c <uxr_reset_stream_storage>:
 800e24c:	b570      	push	{r4, r5, r6, lr}
 800e24e:	7c03      	ldrb	r3, [r0, #16]
 800e250:	4604      	mov	r4, r0
 800e252:	b153      	cbz	r3, 800e26a <uxr_reset_stream_storage+0x1e>
 800e254:	4606      	mov	r6, r0
 800e256:	2500      	movs	r5, #0
 800e258:	4630      	mov	r0, r6
 800e25a:	f007 f81f 	bl	801529c <uxr_reset_output_best_effort_stream>
 800e25e:	7c23      	ldrb	r3, [r4, #16]
 800e260:	3501      	adds	r5, #1
 800e262:	42ab      	cmp	r3, r5
 800e264:	f106 0610 	add.w	r6, r6, #16
 800e268:	d8f6      	bhi.n	800e258 <uxr_reset_stream_storage+0xc>
 800e26a:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800e26e:	b163      	cbz	r3, 800e28a <uxr_reset_stream_storage+0x3e>
 800e270:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e274:	2500      	movs	r5, #0
 800e276:	4630      	mov	r0, r6
 800e278:	f006 fe12 	bl	8014ea0 <uxr_reset_input_best_effort_stream>
 800e27c:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800e280:	3501      	adds	r5, #1
 800e282:	42ab      	cmp	r3, r5
 800e284:	f106 0602 	add.w	r6, r6, #2
 800e288:	d8f5      	bhi.n	800e276 <uxr_reset_stream_storage+0x2a>
 800e28a:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 800e28e:	b163      	cbz	r3, 800e2aa <uxr_reset_stream_storage+0x5e>
 800e290:	f104 0618 	add.w	r6, r4, #24
 800e294:	2500      	movs	r5, #0
 800e296:	4630      	mov	r0, r6
 800e298:	f007 f8ac 	bl	80153f4 <uxr_reset_output_reliable_stream>
 800e29c:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 800e2a0:	3501      	adds	r5, #1
 800e2a2:	42ab      	cmp	r3, r5
 800e2a4:	f106 0628 	add.w	r6, r6, #40	@ 0x28
 800e2a8:	d8f5      	bhi.n	800e296 <uxr_reset_stream_storage+0x4a>
 800e2aa:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 800e2ae:	b163      	cbz	r3, 800e2ca <uxr_reset_stream_storage+0x7e>
 800e2b0:	f104 0648 	add.w	r6, r4, #72	@ 0x48
 800e2b4:	2500      	movs	r5, #0
 800e2b6:	4630      	mov	r0, r6
 800e2b8:	f006 fe66 	bl	8014f88 <uxr_reset_input_reliable_stream>
 800e2bc:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 800e2c0:	3501      	adds	r5, #1
 800e2c2:	42ab      	cmp	r3, r5
 800e2c4:	f106 0618 	add.w	r6, r6, #24
 800e2c8:	d8f5      	bhi.n	800e2b6 <uxr_reset_stream_storage+0x6a>
 800e2ca:	bd70      	pop	{r4, r5, r6, pc}

0800e2cc <uxr_add_output_best_effort_buffer>:
 800e2cc:	b510      	push	{r4, lr}
 800e2ce:	7c04      	ldrb	r4, [r0, #16]
 800e2d0:	f104 0c01 	add.w	ip, r4, #1
 800e2d4:	b082      	sub	sp, #8
 800e2d6:	f880 c010 	strb.w	ip, [r0, #16]
 800e2da:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 800e2de:	f006 ffd3 	bl	8015288 <uxr_init_output_best_effort_stream>
 800e2e2:	2201      	movs	r2, #1
 800e2e4:	4611      	mov	r1, r2
 800e2e6:	4620      	mov	r0, r4
 800e2e8:	b002      	add	sp, #8
 800e2ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e2ee:	f7ff bf4f 	b.w	800e190 <uxr_stream_id>
 800e2f2:	bf00      	nop

0800e2f4 <uxr_add_output_reliable_buffer>:
 800e2f4:	b510      	push	{r4, lr}
 800e2f6:	b084      	sub	sp, #16
 800e2f8:	4684      	mov	ip, r0
 800e2fa:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800e2fe:	9000      	str	r0, [sp, #0]
 800e300:	f89c 4040 	ldrb.w	r4, [ip, #64]	@ 0x40
 800e304:	2028      	movs	r0, #40	@ 0x28
 800e306:	fb00 c004 	mla	r0, r0, r4, ip
 800e30a:	f104 0e01 	add.w	lr, r4, #1
 800e30e:	3018      	adds	r0, #24
 800e310:	f88c e040 	strb.w	lr, [ip, #64]	@ 0x40
 800e314:	f007 f836 	bl	8015384 <uxr_init_output_reliable_stream>
 800e318:	2201      	movs	r2, #1
 800e31a:	2102      	movs	r1, #2
 800e31c:	4620      	mov	r0, r4
 800e31e:	b004      	add	sp, #16
 800e320:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e324:	f7ff bf34 	b.w	800e190 <uxr_stream_id>

0800e328 <uxr_add_input_best_effort_buffer>:
 800e328:	b510      	push	{r4, lr}
 800e32a:	f890 4044 	ldrb.w	r4, [r0, #68]	@ 0x44
 800e32e:	4603      	mov	r3, r0
 800e330:	1c62      	adds	r2, r4, #1
 800e332:	f104 0021 	add.w	r0, r4, #33	@ 0x21
 800e336:	b082      	sub	sp, #8
 800e338:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 800e33c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e340:	f006 fdaa 	bl	8014e98 <uxr_init_input_best_effort_stream>
 800e344:	2200      	movs	r2, #0
 800e346:	2101      	movs	r1, #1
 800e348:	4620      	mov	r0, r4
 800e34a:	b002      	add	sp, #8
 800e34c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e350:	f7ff bf1e 	b.w	800e190 <uxr_stream_id>

0800e354 <uxr_add_input_reliable_buffer>:
 800e354:	b510      	push	{r4, lr}
 800e356:	b084      	sub	sp, #16
 800e358:	4684      	mov	ip, r0
 800e35a:	9806      	ldr	r0, [sp, #24]
 800e35c:	9000      	str	r0, [sp, #0]
 800e35e:	f89c 4060 	ldrb.w	r4, [ip, #96]	@ 0x60
 800e362:	2018      	movs	r0, #24
 800e364:	fb00 c004 	mla	r0, r0, r4, ip
 800e368:	f104 0e01 	add.w	lr, r4, #1
 800e36c:	3048      	adds	r0, #72	@ 0x48
 800e36e:	f88c e060 	strb.w	lr, [ip, #96]	@ 0x60
 800e372:	f006 fddd 	bl	8014f30 <uxr_init_input_reliable_stream>
 800e376:	2200      	movs	r2, #0
 800e378:	2102      	movs	r1, #2
 800e37a:	4620      	mov	r0, r4
 800e37c:	b004      	add	sp, #16
 800e37e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e382:	f7ff bf05 	b.w	800e190 <uxr_stream_id>
 800e386:	bf00      	nop

0800e388 <uxr_get_output_best_effort_stream>:
 800e388:	7c03      	ldrb	r3, [r0, #16]
 800e38a:	428b      	cmp	r3, r1
 800e38c:	bf8c      	ite	hi
 800e38e:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 800e392:	2000      	movls	r0, #0
 800e394:	4770      	bx	lr
 800e396:	bf00      	nop

0800e398 <uxr_get_output_reliable_stream>:
 800e398:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800e39c:	428b      	cmp	r3, r1
 800e39e:	bf83      	ittte	hi
 800e3a0:	2328      	movhi	r3, #40	@ 0x28
 800e3a2:	fb03 0001 	mlahi	r0, r3, r1, r0
 800e3a6:	3018      	addhi	r0, #24
 800e3a8:	2000      	movls	r0, #0
 800e3aa:	4770      	bx	lr

0800e3ac <uxr_get_input_best_effort_stream>:
 800e3ac:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800e3b0:	428b      	cmp	r3, r1
 800e3b2:	bf86      	itte	hi
 800e3b4:	3121      	addhi	r1, #33	@ 0x21
 800e3b6:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
 800e3ba:	2000      	movls	r0, #0
 800e3bc:	4770      	bx	lr
 800e3be:	bf00      	nop

0800e3c0 <uxr_get_input_reliable_stream>:
 800e3c0:	f890 3060 	ldrb.w	r3, [r0, #96]	@ 0x60
 800e3c4:	428b      	cmp	r3, r1
 800e3c6:	bf83      	ittte	hi
 800e3c8:	2318      	movhi	r3, #24
 800e3ca:	fb03 0001 	mlahi	r0, r3, r1, r0
 800e3ce:	3048      	addhi	r0, #72	@ 0x48
 800e3d0:	2000      	movls	r0, #0
 800e3d2:	4770      	bx	lr

0800e3d4 <uxr_output_streams_confirmed>:
 800e3d4:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800e3d8:	b183      	cbz	r3, 800e3fc <uxr_output_streams_confirmed+0x28>
 800e3da:	b570      	push	{r4, r5, r6, lr}
 800e3dc:	4606      	mov	r6, r0
 800e3de:	f100 0518 	add.w	r5, r0, #24
 800e3e2:	2400      	movs	r4, #0
 800e3e4:	e001      	b.n	800e3ea <uxr_output_streams_confirmed+0x16>
 800e3e6:	3528      	adds	r5, #40	@ 0x28
 800e3e8:	b138      	cbz	r0, 800e3fa <uxr_output_streams_confirmed+0x26>
 800e3ea:	4628      	mov	r0, r5
 800e3ec:	f007 fa72 	bl	80158d4 <uxr_is_output_up_to_date>
 800e3f0:	f896 3040 	ldrb.w	r3, [r6, #64]	@ 0x40
 800e3f4:	3401      	adds	r4, #1
 800e3f6:	42a3      	cmp	r3, r4
 800e3f8:	d8f5      	bhi.n	800e3e6 <uxr_output_streams_confirmed+0x12>
 800e3fa:	bd70      	pop	{r4, r5, r6, pc}
 800e3fc:	2001      	movs	r0, #1
 800e3fe:	4770      	bx	lr

0800e400 <uxr_buffer_submessage_header>:
 800e400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e402:	4604      	mov	r4, r0
 800e404:	460e      	mov	r6, r1
 800e406:	2104      	movs	r1, #4
 800e408:	4615      	mov	r5, r2
 800e40a:	461f      	mov	r7, r3
 800e40c:	f7fe fb20 	bl	800ca50 <ucdr_align_to>
 800e410:	2301      	movs	r3, #1
 800e412:	ea47 0203 	orr.w	r2, r7, r3
 800e416:	4631      	mov	r1, r6
 800e418:	7523      	strb	r3, [r4, #20]
 800e41a:	4620      	mov	r0, r4
 800e41c:	462b      	mov	r3, r5
 800e41e:	f000 fa27 	bl	800e870 <uxr_serialize_submessage_header>
 800e422:	4620      	mov	r0, r4
 800e424:	f7fe fb2a 	bl	800ca7c <ucdr_buffer_remaining>
 800e428:	42a8      	cmp	r0, r5
 800e42a:	bf34      	ite	cc
 800e42c:	2000      	movcc	r0, #0
 800e42e:	2001      	movcs	r0, #1
 800e430:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e432:	bf00      	nop

0800e434 <uxr_read_submessage_header>:
 800e434:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e438:	4604      	mov	r4, r0
 800e43a:	460d      	mov	r5, r1
 800e43c:	2104      	movs	r1, #4
 800e43e:	4616      	mov	r6, r2
 800e440:	4698      	mov	r8, r3
 800e442:	f7fe fb05 	bl	800ca50 <ucdr_align_to>
 800e446:	4620      	mov	r0, r4
 800e448:	f7fe fb18 	bl	800ca7c <ucdr_buffer_remaining>
 800e44c:	2803      	cmp	r0, #3
 800e44e:	bf8c      	ite	hi
 800e450:	2701      	movhi	r7, #1
 800e452:	2700      	movls	r7, #0
 800e454:	d802      	bhi.n	800e45c <uxr_read_submessage_header+0x28>
 800e456:	4638      	mov	r0, r7
 800e458:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e45c:	4633      	mov	r3, r6
 800e45e:	4642      	mov	r2, r8
 800e460:	4620      	mov	r0, r4
 800e462:	4629      	mov	r1, r5
 800e464:	f000 fa18 	bl	800e898 <uxr_deserialize_submessage_header>
 800e468:	f898 3000 	ldrb.w	r3, [r8]
 800e46c:	f003 0201 	and.w	r2, r3, #1
 800e470:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800e474:	f888 3000 	strb.w	r3, [r8]
 800e478:	7522      	strb	r2, [r4, #20]
 800e47a:	4638      	mov	r0, r7
 800e47c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800e480 <uxr_submessage_padding>:
 800e480:	f010 0003 	ands.w	r0, r0, #3
 800e484:	bf18      	it	ne
 800e486:	f1c0 0004 	rsbne	r0, r0, #4
 800e48a:	4770      	bx	lr

0800e48c <uxr_millis>:
 800e48c:	b510      	push	{r4, lr}
 800e48e:	b084      	sub	sp, #16
 800e490:	4669      	mov	r1, sp
 800e492:	2001      	movs	r0, #1
 800e494:	f7f3 f91c 	bl	80016d0 <clock_gettime>
 800e498:	e89d 0015 	ldmia.w	sp, {r0, r2, r4}
 800e49c:	4906      	ldr	r1, [pc, #24]	@ (800e4b8 <uxr_millis+0x2c>)
 800e49e:	fba0 0301 	umull	r0, r3, r0, r1
 800e4a2:	1900      	adds	r0, r0, r4
 800e4a4:	fb01 3102 	mla	r1, r1, r2, r3
 800e4a8:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 800e4ac:	4a03      	ldr	r2, [pc, #12]	@ (800e4bc <uxr_millis+0x30>)
 800e4ae:	2300      	movs	r3, #0
 800e4b0:	f7f1 fef6 	bl	80002a0 <__aeabi_ldivmod>
 800e4b4:	b004      	add	sp, #16
 800e4b6:	bd10      	pop	{r4, pc}
 800e4b8:	3b9aca00 	.word	0x3b9aca00
 800e4bc:	000f4240 	.word	0x000f4240

0800e4c0 <uxr_nanos>:
 800e4c0:	b510      	push	{r4, lr}
 800e4c2:	b084      	sub	sp, #16
 800e4c4:	4669      	mov	r1, sp
 800e4c6:	2001      	movs	r0, #1
 800e4c8:	f7f3 f902 	bl	80016d0 <clock_gettime>
 800e4cc:	4a06      	ldr	r2, [pc, #24]	@ (800e4e8 <uxr_nanos+0x28>)
 800e4ce:	9800      	ldr	r0, [sp, #0]
 800e4d0:	9902      	ldr	r1, [sp, #8]
 800e4d2:	9c01      	ldr	r4, [sp, #4]
 800e4d4:	fba0 0302 	umull	r0, r3, r0, r2
 800e4d8:	1840      	adds	r0, r0, r1
 800e4da:	fb02 3304 	mla	r3, r2, r4, r3
 800e4de:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
 800e4e2:	b004      	add	sp, #16
 800e4e4:	bd10      	pop	{r4, pc}
 800e4e6:	bf00      	nop
 800e4e8:	3b9aca00 	.word	0x3b9aca00

0800e4ec <on_full_output_buffer_fragmented>:
 800e4ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e4f0:	460c      	mov	r4, r1
 800e4f2:	b08a      	sub	sp, #40	@ 0x28
 800e4f4:	f891 10c1 	ldrb.w	r1, [r1, #193]	@ 0xc1
 800e4f8:	4606      	mov	r6, r0
 800e4fa:	f104 0008 	add.w	r0, r4, #8
 800e4fe:	f7ff ff4b 	bl	800e398 <uxr_get_output_reliable_stream>
 800e502:	4605      	mov	r5, r0
 800e504:	f007 f9f0 	bl	80158e8 <get_available_free_slots>
 800e508:	b968      	cbnz	r0, 800e526 <on_full_output_buffer_fragmented+0x3a>
 800e50a:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	@ 0xb8
 800e50e:	4620      	mov	r0, r4
 800e510:	4798      	blx	r3
 800e512:	b918      	cbnz	r0, 800e51c <on_full_output_buffer_fragmented+0x30>
 800e514:	2001      	movs	r0, #1
 800e516:	b00a      	add	sp, #40	@ 0x28
 800e518:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e51c:	4628      	mov	r0, r5
 800e51e:	f007 f9e3 	bl	80158e8 <get_available_free_slots>
 800e522:	2800      	cmp	r0, #0
 800e524:	d0f6      	beq.n	800e514 <on_full_output_buffer_fragmented+0x28>
 800e526:	8929      	ldrh	r1, [r5, #8]
 800e528:	89eb      	ldrh	r3, [r5, #14]
 800e52a:	7b28      	ldrb	r0, [r5, #12]
 800e52c:	686a      	ldr	r2, [r5, #4]
 800e52e:	fbb2 f8f1 	udiv	r8, r2, r1
 800e532:	fbb3 f2f1 	udiv	r2, r3, r1
 800e536:	fb01 3112 	mls	r1, r1, r2, r3
 800e53a:	f5c0 407f 	rsb	r0, r0, #65280	@ 0xff00
 800e53e:	b289      	uxth	r1, r1
 800e540:	fb08 f101 	mul.w	r1, r8, r1
 800e544:	30fc      	adds	r0, #252	@ 0xfc
 800e546:	f1a8 0804 	sub.w	r8, r8, #4
 800e54a:	f8d4 30c4 	ldr.w	r3, [r4, #196]	@ 0xc4
 800e54e:	4440      	add	r0, r8
 800e550:	b287      	uxth	r7, r0
 800e552:	1bdb      	subs	r3, r3, r7
 800e554:	f8c4 30c4 	str.w	r3, [r4, #196]	@ 0xc4
 800e558:	682b      	ldr	r3, [r5, #0]
 800e55a:	3104      	adds	r1, #4
 800e55c:	4419      	add	r1, r3
 800e55e:	4642      	mov	r2, r8
 800e560:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e564:	9300      	str	r3, [sp, #0]
 800e566:	a802      	add	r0, sp, #8
 800e568:	2300      	movs	r3, #0
 800e56a:	f7fe fa45 	bl	800c9f8 <ucdr_init_buffer_origin_offset>
 800e56e:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 800e572:	f102 0308 	add.w	r3, r2, #8
 800e576:	4543      	cmp	r3, r8
 800e578:	d928      	bls.n	800e5cc <on_full_output_buffer_fragmented+0xe0>
 800e57a:	463a      	mov	r2, r7
 800e57c:	2300      	movs	r3, #0
 800e57e:	210d      	movs	r1, #13
 800e580:	a802      	add	r0, sp, #8
 800e582:	f7ff ff3d 	bl	800e400 <uxr_buffer_submessage_header>
 800e586:	8929      	ldrh	r1, [r5, #8]
 800e588:	89eb      	ldrh	r3, [r5, #14]
 800e58a:	fbb3 f2f1 	udiv	r2, r3, r1
 800e58e:	fb01 3312 	mls	r3, r1, r2, r3
 800e592:	b29b      	uxth	r3, r3
 800e594:	686a      	ldr	r2, [r5, #4]
 800e596:	fbb2 f2f1 	udiv	r2, r2, r1
 800e59a:	fb02 f303 	mul.w	r3, r2, r3
 800e59e:	682a      	ldr	r2, [r5, #0]
 800e5a0:	f842 8003 	str.w	r8, [r2, r3]
 800e5a4:	89e8      	ldrh	r0, [r5, #14]
 800e5a6:	2101      	movs	r1, #1
 800e5a8:	f007 faee 	bl	8015b88 <uxr_seq_num_add>
 800e5ac:	9904      	ldr	r1, [sp, #16]
 800e5ae:	9a03      	ldr	r2, [sp, #12]
 800e5b0:	81e8      	strh	r0, [r5, #14]
 800e5b2:	1a52      	subs	r2, r2, r1
 800e5b4:	4630      	mov	r0, r6
 800e5b6:	f7fe fa31 	bl	800ca1c <ucdr_init_buffer>
 800e5ba:	4630      	mov	r0, r6
 800e5bc:	490f      	ldr	r1, [pc, #60]	@ (800e5fc <on_full_output_buffer_fragmented+0x110>)
 800e5be:	4622      	mov	r2, r4
 800e5c0:	f7fe fa00 	bl	800c9c4 <ucdr_set_on_full_buffer_callback>
 800e5c4:	2000      	movs	r0, #0
 800e5c6:	b00a      	add	sp, #40	@ 0x28
 800e5c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e5cc:	b292      	uxth	r2, r2
 800e5ce:	2302      	movs	r3, #2
 800e5d0:	210d      	movs	r1, #13
 800e5d2:	a802      	add	r0, sp, #8
 800e5d4:	f7ff ff14 	bl	800e400 <uxr_buffer_submessage_header>
 800e5d8:	8928      	ldrh	r0, [r5, #8]
 800e5da:	89eb      	ldrh	r3, [r5, #14]
 800e5dc:	fbb3 f1f0 	udiv	r1, r3, r0
 800e5e0:	fb00 3311 	mls	r3, r0, r1, r3
 800e5e4:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 800e5e8:	6869      	ldr	r1, [r5, #4]
 800e5ea:	fbb1 f1f0 	udiv	r1, r1, r0
 800e5ee:	b29b      	uxth	r3, r3
 800e5f0:	fb01 f303 	mul.w	r3, r1, r3
 800e5f4:	6829      	ldr	r1, [r5, #0]
 800e5f6:	3208      	adds	r2, #8
 800e5f8:	50ca      	str	r2, [r1, r3]
 800e5fa:	e7d3      	b.n	800e5a4 <on_full_output_buffer_fragmented+0xb8>
 800e5fc:	0800e4ed 	.word	0x0800e4ed

0800e600 <uxr_prepare_output_stream>:
 800e600:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e602:	b087      	sub	sp, #28
 800e604:	2707      	movs	r7, #7
 800e606:	9202      	str	r2, [sp, #8]
 800e608:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800e60a:	9103      	str	r1, [sp, #12]
 800e60c:	2500      	movs	r5, #0
 800e60e:	3204      	adds	r2, #4
 800e610:	e9cd 7500 	strd	r7, r5, [sp]
 800e614:	461c      	mov	r4, r3
 800e616:	4606      	mov	r6, r0
 800e618:	f7ff fc54 	bl	800dec4 <uxr_prepare_stream_to_write_submessage>
 800e61c:	f080 0201 	eor.w	r2, r0, #1
 800e620:	b2d2      	uxtb	r2, r2
 800e622:	75a2      	strb	r2, [r4, #22]
 800e624:	b112      	cbz	r2, 800e62c <uxr_prepare_output_stream+0x2c>
 800e626:	4628      	mov	r0, r5
 800e628:	b007      	add	sp, #28
 800e62a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e62c:	aa05      	add	r2, sp, #20
 800e62e:	9902      	ldr	r1, [sp, #8]
 800e630:	4630      	mov	r0, r6
 800e632:	f7ff fd7d 	bl	800e130 <uxr_init_base_object_request>
 800e636:	a905      	add	r1, sp, #20
 800e638:	4605      	mov	r5, r0
 800e63a:	4620      	mov	r0, r4
 800e63c:	f001 f88c 	bl	800f758 <uxr_serialize_WRITE_DATA_Payload_Data>
 800e640:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 800e644:	69a6      	ldr	r6, [r4, #24]
 800e646:	69e7      	ldr	r7, [r4, #28]
 800e648:	1a52      	subs	r2, r2, r1
 800e64a:	4620      	mov	r0, r4
 800e64c:	f7fe f9e6 	bl	800ca1c <ucdr_init_buffer>
 800e650:	4620      	mov	r0, r4
 800e652:	463a      	mov	r2, r7
 800e654:	4631      	mov	r1, r6
 800e656:	f7fe f9b5 	bl	800c9c4 <ucdr_set_on_full_buffer_callback>
 800e65a:	4628      	mov	r0, r5
 800e65c:	b007      	add	sp, #28
 800e65e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e660 <uxr_prepare_output_stream_fragmented>:
 800e660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e664:	b091      	sub	sp, #68	@ 0x44
 800e666:	4605      	mov	r5, r0
 800e668:	9105      	str	r1, [sp, #20]
 800e66a:	3008      	adds	r0, #8
 800e66c:	f3c1 2107 	ubfx	r1, r1, #8, #8
 800e670:	461e      	mov	r6, r3
 800e672:	9204      	str	r2, [sp, #16]
 800e674:	f7ff fe90 	bl	800e398 <uxr_get_output_reliable_stream>
 800e678:	f89d 3016 	ldrb.w	r3, [sp, #22]
 800e67c:	2b01      	cmp	r3, #1
 800e67e:	f000 8091 	beq.w	800e7a4 <uxr_prepare_output_stream_fragmented+0x144>
 800e682:	4604      	mov	r4, r0
 800e684:	2800      	cmp	r0, #0
 800e686:	f000 808d 	beq.w	800e7a4 <uxr_prepare_output_stream_fragmented+0x144>
 800e68a:	f007 f92d 	bl	80158e8 <get_available_free_slots>
 800e68e:	2800      	cmp	r0, #0
 800e690:	f000 8083 	beq.w	800e79a <uxr_prepare_output_stream_fragmented+0x13a>
 800e694:	8922      	ldrh	r2, [r4, #8]
 800e696:	89e7      	ldrh	r7, [r4, #14]
 800e698:	fbb7 f9f2 	udiv	r9, r7, r2
 800e69c:	fb02 7919 	mls	r9, r2, r9, r7
 800e6a0:	fa1f f989 	uxth.w	r9, r9
 800e6a4:	6863      	ldr	r3, [r4, #4]
 800e6a6:	fbb3 f2f2 	udiv	r2, r3, r2
 800e6aa:	6823      	ldr	r3, [r4, #0]
 800e6ac:	9203      	str	r2, [sp, #12]
 800e6ae:	fb02 f909 	mul.w	r9, r2, r9
 800e6b2:	f109 0904 	add.w	r9, r9, #4
 800e6b6:	4499      	add	r9, r3
 800e6b8:	7b23      	ldrb	r3, [r4, #12]
 800e6ba:	f859 8c04 	ldr.w	r8, [r9, #-4]
 800e6be:	4543      	cmp	r3, r8
 800e6c0:	f1a2 0b04 	sub.w	fp, r2, #4
 800e6c4:	d37a      	bcc.n	800e7bc <uxr_prepare_output_stream_fragmented+0x15c>
 800e6c6:	f1ab 0a04 	sub.w	sl, fp, #4
 800e6ca:	ebaa 0a03 	sub.w	sl, sl, r3
 800e6ce:	465a      	mov	r2, fp
 800e6d0:	2300      	movs	r3, #0
 800e6d2:	4649      	mov	r1, r9
 800e6d4:	a808      	add	r0, sp, #32
 800e6d6:	f8cd 8000 	str.w	r8, [sp]
 800e6da:	f7fe f98d 	bl	800c9f8 <ucdr_init_buffer_origin_offset>
 800e6de:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 800e6e0:	fa1f fa8a 	uxth.w	sl, sl
 800e6e4:	4652      	mov	r2, sl
 800e6e6:	f103 0a08 	add.w	sl, r3, #8
 800e6ea:	45da      	cmp	sl, fp
 800e6ec:	bf34      	ite	cc
 800e6ee:	2302      	movcc	r3, #2
 800e6f0:	2300      	movcs	r3, #0
 800e6f2:	210d      	movs	r1, #13
 800e6f4:	a808      	add	r0, sp, #32
 800e6f6:	f7ff fe83 	bl	800e400 <uxr_buffer_submessage_header>
 800e6fa:	8921      	ldrh	r1, [r4, #8]
 800e6fc:	fbb7 f2f1 	udiv	r2, r7, r1
 800e700:	fb01 7212 	mls	r2, r1, r2, r7
 800e704:	b292      	uxth	r2, r2
 800e706:	6863      	ldr	r3, [r4, #4]
 800e708:	fbb3 f3f1 	udiv	r3, r3, r1
 800e70c:	fb02 f303 	mul.w	r3, r2, r3
 800e710:	6822      	ldr	r2, [r4, #0]
 800e712:	4638      	mov	r0, r7
 800e714:	f842 b003 	str.w	fp, [r2, r3]
 800e718:	2101      	movs	r1, #1
 800e71a:	f007 fa35 	bl	8015b88 <uxr_seq_num_add>
 800e71e:	9b03      	ldr	r3, [sp, #12]
 800e720:	f108 0104 	add.w	r1, r8, #4
 800e724:	f1a3 0208 	sub.w	r2, r3, #8
 800e728:	eba2 0208 	sub.w	r2, r2, r8
 800e72c:	4449      	add	r1, r9
 800e72e:	4607      	mov	r7, r0
 800e730:	4630      	mov	r0, r6
 800e732:	f7fe f973 	bl	800ca1c <ucdr_init_buffer>
 800e736:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 800e738:	81e7      	strh	r7, [r4, #14]
 800e73a:	1d1a      	adds	r2, r3, #4
 800e73c:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 800e740:	bf28      	it	cs
 800e742:	2200      	movcs	r2, #0
 800e744:	2300      	movs	r3, #0
 800e746:	b292      	uxth	r2, r2
 800e748:	2107      	movs	r1, #7
 800e74a:	4630      	mov	r0, r6
 800e74c:	f7ff fe58 	bl	800e400 <uxr_buffer_submessage_header>
 800e750:	9904      	ldr	r1, [sp, #16]
 800e752:	aa07      	add	r2, sp, #28
 800e754:	4628      	mov	r0, r5
 800e756:	f7ff fceb 	bl	800e130 <uxr_init_base_object_request>
 800e75a:	4604      	mov	r4, r0
 800e75c:	b318      	cbz	r0, 800e7a6 <uxr_prepare_output_stream_fragmented+0x146>
 800e75e:	a907      	add	r1, sp, #28
 800e760:	4630      	mov	r0, r6
 800e762:	f000 fff9 	bl	800f758 <uxr_serialize_WRITE_DATA_Payload_Data>
 800e766:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 800e76a:	4630      	mov	r0, r6
 800e76c:	1a52      	subs	r2, r2, r1
 800e76e:	f7fe f955 	bl	800ca1c <ucdr_init_buffer>
 800e772:	9b05      	ldr	r3, [sp, #20]
 800e774:	f8c5 30c0 	str.w	r3, [r5, #192]	@ 0xc0
 800e778:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800e77a:	f8c5 30b8 	str.w	r3, [r5, #184]	@ 0xb8
 800e77e:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 800e780:	491b      	ldr	r1, [pc, #108]	@ (800e7f0 <uxr_prepare_output_stream_fragmented+0x190>)
 800e782:	f8c5 a0c4 	str.w	sl, [r5, #196]	@ 0xc4
 800e786:	4630      	mov	r0, r6
 800e788:	f8c5 30bc 	str.w	r3, [r5, #188]	@ 0xbc
 800e78c:	462a      	mov	r2, r5
 800e78e:	f7fe f919 	bl	800c9c4 <ucdr_set_on_full_buffer_callback>
 800e792:	4620      	mov	r0, r4
 800e794:	b011      	add	sp, #68	@ 0x44
 800e796:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e79a:	991c      	ldr	r1, [sp, #112]	@ 0x70
 800e79c:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800e79e:	4628      	mov	r0, r5
 800e7a0:	4798      	blx	r3
 800e7a2:	b920      	cbnz	r0, 800e7ae <uxr_prepare_output_stream_fragmented+0x14e>
 800e7a4:	2400      	movs	r4, #0
 800e7a6:	4620      	mov	r0, r4
 800e7a8:	b011      	add	sp, #68	@ 0x44
 800e7aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e7ae:	4620      	mov	r0, r4
 800e7b0:	f007 f89a 	bl	80158e8 <get_available_free_slots>
 800e7b4:	2800      	cmp	r0, #0
 800e7b6:	f47f af6d 	bne.w	800e694 <uxr_prepare_output_stream_fragmented+0x34>
 800e7ba:	e7f3      	b.n	800e7a4 <uxr_prepare_output_stream_fragmented+0x144>
 800e7bc:	4638      	mov	r0, r7
 800e7be:	2101      	movs	r1, #1
 800e7c0:	f007 f9e2 	bl	8015b88 <uxr_seq_num_add>
 800e7c4:	8921      	ldrh	r1, [r4, #8]
 800e7c6:	fbb0 f2f1 	udiv	r2, r0, r1
 800e7ca:	fb01 0912 	mls	r9, r1, r2, r0
 800e7ce:	fa1f f289 	uxth.w	r2, r9
 800e7d2:	6863      	ldr	r3, [r4, #4]
 800e7d4:	fbb3 f9f1 	udiv	r9, r3, r1
 800e7d8:	6823      	ldr	r3, [r4, #0]
 800e7da:	fb02 f909 	mul.w	r9, r2, r9
 800e7de:	f109 0904 	add.w	r9, r9, #4
 800e7e2:	4499      	add	r9, r3
 800e7e4:	4607      	mov	r7, r0
 800e7e6:	7b23      	ldrb	r3, [r4, #12]
 800e7e8:	f859 8c04 	ldr.w	r8, [r9, #-4]
 800e7ec:	e76b      	b.n	800e6c6 <uxr_prepare_output_stream_fragmented+0x66>
 800e7ee:	bf00      	nop
 800e7f0:	0800e4ed 	.word	0x0800e4ed

0800e7f4 <uxr_serialize_message_header>:
 800e7f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e7f6:	b083      	sub	sp, #12
 800e7f8:	4616      	mov	r6, r2
 800e7fa:	4604      	mov	r4, r0
 800e7fc:	9301      	str	r3, [sp, #4]
 800e7fe:	460d      	mov	r5, r1
 800e800:	9f08      	ldr	r7, [sp, #32]
 800e802:	f7fc ffbf 	bl	800b784 <ucdr_serialize_uint8_t>
 800e806:	4631      	mov	r1, r6
 800e808:	4620      	mov	r0, r4
 800e80a:	f7fc ffbb 	bl	800b784 <ucdr_serialize_uint8_t>
 800e80e:	9a01      	ldr	r2, [sp, #4]
 800e810:	2101      	movs	r1, #1
 800e812:	4620      	mov	r0, r4
 800e814:	f7fd f862 	bl	800b8dc <ucdr_serialize_endian_uint16_t>
 800e818:	062b      	lsls	r3, r5, #24
 800e81a:	d501      	bpl.n	800e820 <uxr_serialize_message_header+0x2c>
 800e81c:	b003      	add	sp, #12
 800e81e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e820:	2204      	movs	r2, #4
 800e822:	4639      	mov	r1, r7
 800e824:	4620      	mov	r0, r4
 800e826:	b003      	add	sp, #12
 800e828:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800e82c:	f006 b8e8 	b.w	8014a00 <ucdr_serialize_array_uint8_t>

0800e830 <uxr_deserialize_message_header>:
 800e830:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e832:	b083      	sub	sp, #12
 800e834:	4616      	mov	r6, r2
 800e836:	4604      	mov	r4, r0
 800e838:	9301      	str	r3, [sp, #4]
 800e83a:	460d      	mov	r5, r1
 800e83c:	9f08      	ldr	r7, [sp, #32]
 800e83e:	f7fc ffb7 	bl	800b7b0 <ucdr_deserialize_uint8_t>
 800e842:	4631      	mov	r1, r6
 800e844:	4620      	mov	r0, r4
 800e846:	f7fc ffb3 	bl	800b7b0 <ucdr_deserialize_uint8_t>
 800e84a:	9a01      	ldr	r2, [sp, #4]
 800e84c:	2101      	movs	r1, #1
 800e84e:	4620      	mov	r0, r4
 800e850:	f7fd f938 	bl	800bac4 <ucdr_deserialize_endian_uint16_t>
 800e854:	f995 3000 	ldrsb.w	r3, [r5]
 800e858:	2b00      	cmp	r3, #0
 800e85a:	da01      	bge.n	800e860 <uxr_deserialize_message_header+0x30>
 800e85c:	b003      	add	sp, #12
 800e85e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e860:	2204      	movs	r2, #4
 800e862:	4639      	mov	r1, r7
 800e864:	4620      	mov	r0, r4
 800e866:	b003      	add	sp, #12
 800e868:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800e86c:	f006 b92c 	b.w	8014ac8 <ucdr_deserialize_array_uint8_t>

0800e870 <uxr_serialize_submessage_header>:
 800e870:	b530      	push	{r4, r5, lr}
 800e872:	b083      	sub	sp, #12
 800e874:	4615      	mov	r5, r2
 800e876:	4604      	mov	r4, r0
 800e878:	9301      	str	r3, [sp, #4]
 800e87a:	f7fc ff83 	bl	800b784 <ucdr_serialize_uint8_t>
 800e87e:	4629      	mov	r1, r5
 800e880:	4620      	mov	r0, r4
 800e882:	f7fc ff7f 	bl	800b784 <ucdr_serialize_uint8_t>
 800e886:	9a01      	ldr	r2, [sp, #4]
 800e888:	2101      	movs	r1, #1
 800e88a:	4620      	mov	r0, r4
 800e88c:	b003      	add	sp, #12
 800e88e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e892:	f7fd b823 	b.w	800b8dc <ucdr_serialize_endian_uint16_t>
 800e896:	bf00      	nop

0800e898 <uxr_deserialize_submessage_header>:
 800e898:	b530      	push	{r4, r5, lr}
 800e89a:	b083      	sub	sp, #12
 800e89c:	4615      	mov	r5, r2
 800e89e:	4604      	mov	r4, r0
 800e8a0:	9301      	str	r3, [sp, #4]
 800e8a2:	f7fc ff85 	bl	800b7b0 <ucdr_deserialize_uint8_t>
 800e8a6:	4629      	mov	r1, r5
 800e8a8:	4620      	mov	r0, r4
 800e8aa:	f7fc ff81 	bl	800b7b0 <ucdr_deserialize_uint8_t>
 800e8ae:	9a01      	ldr	r2, [sp, #4]
 800e8b0:	2101      	movs	r1, #1
 800e8b2:	4620      	mov	r0, r4
 800e8b4:	b003      	add	sp, #12
 800e8b6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e8ba:	f7fd b903 	b.w	800bac4 <ucdr_deserialize_endian_uint16_t>
 800e8be:	bf00      	nop

0800e8c0 <uxr_serialize_CLIENT_Representation>:
 800e8c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e8c4:	2204      	movs	r2, #4
 800e8c6:	460e      	mov	r6, r1
 800e8c8:	4605      	mov	r5, r0
 800e8ca:	f006 f899 	bl	8014a00 <ucdr_serialize_array_uint8_t>
 800e8ce:	2202      	movs	r2, #2
 800e8d0:	4607      	mov	r7, r0
 800e8d2:	1d31      	adds	r1, r6, #4
 800e8d4:	4628      	mov	r0, r5
 800e8d6:	f006 f893 	bl	8014a00 <ucdr_serialize_array_uint8_t>
 800e8da:	4038      	ands	r0, r7
 800e8dc:	2202      	movs	r2, #2
 800e8de:	1db1      	adds	r1, r6, #6
 800e8e0:	b2c7      	uxtb	r7, r0
 800e8e2:	4628      	mov	r0, r5
 800e8e4:	f006 f88c 	bl	8014a00 <ucdr_serialize_array_uint8_t>
 800e8e8:	2204      	movs	r2, #4
 800e8ea:	4007      	ands	r7, r0
 800e8ec:	f106 0108 	add.w	r1, r6, #8
 800e8f0:	4628      	mov	r0, r5
 800e8f2:	f006 f885 	bl	8014a00 <ucdr_serialize_array_uint8_t>
 800e8f6:	7b31      	ldrb	r1, [r6, #12]
 800e8f8:	4007      	ands	r7, r0
 800e8fa:	4628      	mov	r0, r5
 800e8fc:	f7fc ff42 	bl	800b784 <ucdr_serialize_uint8_t>
 800e900:	7b71      	ldrb	r1, [r6, #13]
 800e902:	4007      	ands	r7, r0
 800e904:	4628      	mov	r0, r5
 800e906:	f7fc ff0f 	bl	800b728 <ucdr_serialize_bool>
 800e90a:	7b73      	ldrb	r3, [r6, #13]
 800e90c:	ea07 0800 	and.w	r8, r7, r0
 800e910:	b93b      	cbnz	r3, 800e922 <uxr_serialize_CLIENT_Representation+0x62>
 800e912:	8bb1      	ldrh	r1, [r6, #28]
 800e914:	4628      	mov	r0, r5
 800e916:	f7fc ff61 	bl	800b7dc <ucdr_serialize_uint16_t>
 800e91a:	ea08 0000 	and.w	r0, r8, r0
 800e91e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e922:	6931      	ldr	r1, [r6, #16]
 800e924:	4628      	mov	r0, r5
 800e926:	f7fd f943 	bl	800bbb0 <ucdr_serialize_uint32_t>
 800e92a:	6933      	ldr	r3, [r6, #16]
 800e92c:	b1e3      	cbz	r3, 800e968 <uxr_serialize_CLIENT_Representation+0xa8>
 800e92e:	b1c0      	cbz	r0, 800e962 <uxr_serialize_CLIENT_Representation+0xa2>
 800e930:	4637      	mov	r7, r6
 800e932:	f04f 0900 	mov.w	r9, #0
 800e936:	e001      	b.n	800e93c <uxr_serialize_CLIENT_Representation+0x7c>
 800e938:	3708      	adds	r7, #8
 800e93a:	b194      	cbz	r4, 800e962 <uxr_serialize_CLIENT_Representation+0xa2>
 800e93c:	6979      	ldr	r1, [r7, #20]
 800e93e:	4628      	mov	r0, r5
 800e940:	f006 f9d0 	bl	8014ce4 <ucdr_serialize_string>
 800e944:	69b9      	ldr	r1, [r7, #24]
 800e946:	4604      	mov	r4, r0
 800e948:	4628      	mov	r0, r5
 800e94a:	f006 f9cb 	bl	8014ce4 <ucdr_serialize_string>
 800e94e:	6933      	ldr	r3, [r6, #16]
 800e950:	f109 0901 	add.w	r9, r9, #1
 800e954:	4004      	ands	r4, r0
 800e956:	4599      	cmp	r9, r3
 800e958:	b2e4      	uxtb	r4, r4
 800e95a:	d3ed      	bcc.n	800e938 <uxr_serialize_CLIENT_Representation+0x78>
 800e95c:	ea08 0804 	and.w	r8, r8, r4
 800e960:	e7d7      	b.n	800e912 <uxr_serialize_CLIENT_Representation+0x52>
 800e962:	f04f 0800 	mov.w	r8, #0
 800e966:	e7d4      	b.n	800e912 <uxr_serialize_CLIENT_Representation+0x52>
 800e968:	ea08 0800 	and.w	r8, r8, r0
 800e96c:	e7d1      	b.n	800e912 <uxr_serialize_CLIENT_Representation+0x52>
 800e96e:	bf00      	nop

0800e970 <uxr_deserialize_CLIENT_Representation>:
 800e970:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e974:	2204      	movs	r2, #4
 800e976:	460c      	mov	r4, r1
 800e978:	4605      	mov	r5, r0
 800e97a:	f006 f8a5 	bl	8014ac8 <ucdr_deserialize_array_uint8_t>
 800e97e:	2202      	movs	r2, #2
 800e980:	4607      	mov	r7, r0
 800e982:	1d21      	adds	r1, r4, #4
 800e984:	4628      	mov	r0, r5
 800e986:	f006 f89f 	bl	8014ac8 <ucdr_deserialize_array_uint8_t>
 800e98a:	4038      	ands	r0, r7
 800e98c:	2202      	movs	r2, #2
 800e98e:	1da1      	adds	r1, r4, #6
 800e990:	b2c6      	uxtb	r6, r0
 800e992:	4628      	mov	r0, r5
 800e994:	f006 f898 	bl	8014ac8 <ucdr_deserialize_array_uint8_t>
 800e998:	2204      	movs	r2, #4
 800e99a:	4006      	ands	r6, r0
 800e99c:	f104 0108 	add.w	r1, r4, #8
 800e9a0:	4628      	mov	r0, r5
 800e9a2:	f006 f891 	bl	8014ac8 <ucdr_deserialize_array_uint8_t>
 800e9a6:	f104 010c 	add.w	r1, r4, #12
 800e9aa:	4006      	ands	r6, r0
 800e9ac:	4628      	mov	r0, r5
 800e9ae:	f7fc feff 	bl	800b7b0 <ucdr_deserialize_uint8_t>
 800e9b2:	f104 010d 	add.w	r1, r4, #13
 800e9b6:	ea06 0700 	and.w	r7, r6, r0
 800e9ba:	4628      	mov	r0, r5
 800e9bc:	f7fc feca 	bl	800b754 <ucdr_deserialize_bool>
 800e9c0:	7b63      	ldrb	r3, [r4, #13]
 800e9c2:	4007      	ands	r7, r0
 800e9c4:	b93b      	cbnz	r3, 800e9d6 <uxr_deserialize_CLIENT_Representation+0x66>
 800e9c6:	f104 011c 	add.w	r1, r4, #28
 800e9ca:	4628      	mov	r0, r5
 800e9cc:	f7fd f806 	bl	800b9dc <ucdr_deserialize_uint16_t>
 800e9d0:	4038      	ands	r0, r7
 800e9d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e9d6:	f104 0110 	add.w	r1, r4, #16
 800e9da:	4628      	mov	r0, r5
 800e9dc:	f7fd fa18 	bl	800be10 <ucdr_deserialize_uint32_t>
 800e9e0:	6923      	ldr	r3, [r4, #16]
 800e9e2:	2b01      	cmp	r3, #1
 800e9e4:	d903      	bls.n	800e9ee <uxr_deserialize_CLIENT_Representation+0x7e>
 800e9e6:	2301      	movs	r3, #1
 800e9e8:	75ab      	strb	r3, [r5, #22]
 800e9ea:	2700      	movs	r7, #0
 800e9ec:	e7eb      	b.n	800e9c6 <uxr_deserialize_CLIENT_Representation+0x56>
 800e9ee:	b30b      	cbz	r3, 800ea34 <uxr_deserialize_CLIENT_Representation+0xc4>
 800e9f0:	2800      	cmp	r0, #0
 800e9f2:	d0fa      	beq.n	800e9ea <uxr_deserialize_CLIENT_Representation+0x7a>
 800e9f4:	46a0      	mov	r8, r4
 800e9f6:	f04f 0900 	mov.w	r9, #0
 800e9fa:	e001      	b.n	800ea00 <uxr_deserialize_CLIENT_Representation+0x90>
 800e9fc:	2e00      	cmp	r6, #0
 800e9fe:	d0f4      	beq.n	800e9ea <uxr_deserialize_CLIENT_Representation+0x7a>
 800ea00:	f8d8 1014 	ldr.w	r1, [r8, #20]
 800ea04:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ea08:	4628      	mov	r0, r5
 800ea0a:	f006 f97b 	bl	8014d04 <ucdr_deserialize_string>
 800ea0e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ea12:	4606      	mov	r6, r0
 800ea14:	f8d8 1018 	ldr.w	r1, [r8, #24]
 800ea18:	4628      	mov	r0, r5
 800ea1a:	f006 f973 	bl	8014d04 <ucdr_deserialize_string>
 800ea1e:	6923      	ldr	r3, [r4, #16]
 800ea20:	f109 0901 	add.w	r9, r9, #1
 800ea24:	4006      	ands	r6, r0
 800ea26:	4599      	cmp	r9, r3
 800ea28:	f108 0808 	add.w	r8, r8, #8
 800ea2c:	b2f6      	uxtb	r6, r6
 800ea2e:	d3e5      	bcc.n	800e9fc <uxr_deserialize_CLIENT_Representation+0x8c>
 800ea30:	4037      	ands	r7, r6
 800ea32:	e7c8      	b.n	800e9c6 <uxr_deserialize_CLIENT_Representation+0x56>
 800ea34:	4007      	ands	r7, r0
 800ea36:	e7c6      	b.n	800e9c6 <uxr_deserialize_CLIENT_Representation+0x56>

0800ea38 <uxr_serialize_AGENT_Representation>:
 800ea38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ea3c:	2204      	movs	r2, #4
 800ea3e:	460f      	mov	r7, r1
 800ea40:	4605      	mov	r5, r0
 800ea42:	f005 ffdd 	bl	8014a00 <ucdr_serialize_array_uint8_t>
 800ea46:	2202      	movs	r2, #2
 800ea48:	4604      	mov	r4, r0
 800ea4a:	1d39      	adds	r1, r7, #4
 800ea4c:	4628      	mov	r0, r5
 800ea4e:	f005 ffd7 	bl	8014a00 <ucdr_serialize_array_uint8_t>
 800ea52:	4020      	ands	r0, r4
 800ea54:	2202      	movs	r2, #2
 800ea56:	1db9      	adds	r1, r7, #6
 800ea58:	b2c4      	uxtb	r4, r0
 800ea5a:	4628      	mov	r0, r5
 800ea5c:	f005 ffd0 	bl	8014a00 <ucdr_serialize_array_uint8_t>
 800ea60:	7a39      	ldrb	r1, [r7, #8]
 800ea62:	4004      	ands	r4, r0
 800ea64:	4628      	mov	r0, r5
 800ea66:	f7fc fe5f 	bl	800b728 <ucdr_serialize_bool>
 800ea6a:	7a3b      	ldrb	r3, [r7, #8]
 800ea6c:	ea00 0804 	and.w	r8, r0, r4
 800ea70:	b913      	cbnz	r3, 800ea78 <uxr_serialize_AGENT_Representation+0x40>
 800ea72:	4640      	mov	r0, r8
 800ea74:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ea78:	68f9      	ldr	r1, [r7, #12]
 800ea7a:	4628      	mov	r0, r5
 800ea7c:	f7fd f898 	bl	800bbb0 <ucdr_serialize_uint32_t>
 800ea80:	68fb      	ldr	r3, [r7, #12]
 800ea82:	b303      	cbz	r3, 800eac6 <uxr_serialize_AGENT_Representation+0x8e>
 800ea84:	b1d0      	cbz	r0, 800eabc <uxr_serialize_AGENT_Representation+0x84>
 800ea86:	463e      	mov	r6, r7
 800ea88:	f04f 0900 	mov.w	r9, #0
 800ea8c:	e001      	b.n	800ea92 <uxr_serialize_AGENT_Representation+0x5a>
 800ea8e:	3608      	adds	r6, #8
 800ea90:	b1a4      	cbz	r4, 800eabc <uxr_serialize_AGENT_Representation+0x84>
 800ea92:	6931      	ldr	r1, [r6, #16]
 800ea94:	4628      	mov	r0, r5
 800ea96:	f006 f925 	bl	8014ce4 <ucdr_serialize_string>
 800ea9a:	6971      	ldr	r1, [r6, #20]
 800ea9c:	4604      	mov	r4, r0
 800ea9e:	4628      	mov	r0, r5
 800eaa0:	f006 f920 	bl	8014ce4 <ucdr_serialize_string>
 800eaa4:	68fb      	ldr	r3, [r7, #12]
 800eaa6:	f109 0901 	add.w	r9, r9, #1
 800eaaa:	4004      	ands	r4, r0
 800eaac:	4599      	cmp	r9, r3
 800eaae:	b2e4      	uxtb	r4, r4
 800eab0:	d3ed      	bcc.n	800ea8e <uxr_serialize_AGENT_Representation+0x56>
 800eab2:	ea08 0804 	and.w	r8, r8, r4
 800eab6:	4640      	mov	r0, r8
 800eab8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800eabc:	f04f 0800 	mov.w	r8, #0
 800eac0:	4640      	mov	r0, r8
 800eac2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800eac6:	ea08 0800 	and.w	r8, r8, r0
 800eaca:	e7d2      	b.n	800ea72 <uxr_serialize_AGENT_Representation+0x3a>

0800eacc <uxr_serialize_DATAWRITER_Representation>:
 800eacc:	b570      	push	{r4, r5, r6, lr}
 800eace:	460d      	mov	r5, r1
 800ead0:	7809      	ldrb	r1, [r1, #0]
 800ead2:	4606      	mov	r6, r0
 800ead4:	f7fc fe56 	bl	800b784 <ucdr_serialize_uint8_t>
 800ead8:	4604      	mov	r4, r0
 800eada:	b130      	cbz	r0, 800eaea <uxr_serialize_DATAWRITER_Representation+0x1e>
 800eadc:	782b      	ldrb	r3, [r5, #0]
 800eade:	2b02      	cmp	r3, #2
 800eae0:	d00c      	beq.n	800eafc <uxr_serialize_DATAWRITER_Representation+0x30>
 800eae2:	2b03      	cmp	r3, #3
 800eae4:	d010      	beq.n	800eb08 <uxr_serialize_DATAWRITER_Representation+0x3c>
 800eae6:	2b01      	cmp	r3, #1
 800eae8:	d008      	beq.n	800eafc <uxr_serialize_DATAWRITER_Representation+0x30>
 800eaea:	2202      	movs	r2, #2
 800eaec:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 800eaf0:	4630      	mov	r0, r6
 800eaf2:	f005 ff85 	bl	8014a00 <ucdr_serialize_array_uint8_t>
 800eaf6:	4020      	ands	r0, r4
 800eaf8:	b2c0      	uxtb	r0, r0
 800eafa:	bd70      	pop	{r4, r5, r6, pc}
 800eafc:	6869      	ldr	r1, [r5, #4]
 800eafe:	4630      	mov	r0, r6
 800eb00:	f006 f8f0 	bl	8014ce4 <ucdr_serialize_string>
 800eb04:	4604      	mov	r4, r0
 800eb06:	e7f0      	b.n	800eaea <uxr_serialize_DATAWRITER_Representation+0x1e>
 800eb08:	4629      	mov	r1, r5
 800eb0a:	4630      	mov	r0, r6
 800eb0c:	f851 2f04 	ldr.w	r2, [r1, #4]!
 800eb10:	3104      	adds	r1, #4
 800eb12:	f7fe f81f 	bl	800cb54 <ucdr_serialize_sequence_uint8_t>
 800eb16:	4604      	mov	r4, r0
 800eb18:	e7e7      	b.n	800eaea <uxr_serialize_DATAWRITER_Representation+0x1e>
 800eb1a:	bf00      	nop

0800eb1c <uxr_serialize_ObjectVariant.part.0>:
 800eb1c:	b570      	push	{r4, r5, r6, lr}
 800eb1e:	780b      	ldrb	r3, [r1, #0]
 800eb20:	3b01      	subs	r3, #1
 800eb22:	460c      	mov	r4, r1
 800eb24:	4605      	mov	r5, r0
 800eb26:	2b0d      	cmp	r3, #13
 800eb28:	d854      	bhi.n	800ebd4 <uxr_serialize_ObjectVariant.part.0+0xb8>
 800eb2a:	e8df f003 	tbb	[pc, r3]
 800eb2e:	0730      	.short	0x0730
 800eb30:	07071b1b 	.word	0x07071b1b
 800eb34:	0c530707 	.word	0x0c530707
 800eb38:	494e0c0c 	.word	0x494e0c0c
 800eb3c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800eb40:	3104      	adds	r1, #4
 800eb42:	f7ff bfc3 	b.w	800eacc <uxr_serialize_DATAWRITER_Representation>
 800eb46:	7909      	ldrb	r1, [r1, #4]
 800eb48:	f7fc fe1c 	bl	800b784 <ucdr_serialize_uint8_t>
 800eb4c:	b1e8      	cbz	r0, 800eb8a <uxr_serialize_ObjectVariant.part.0+0x6e>
 800eb4e:	7923      	ldrb	r3, [r4, #4]
 800eb50:	2b01      	cmp	r3, #1
 800eb52:	d001      	beq.n	800eb58 <uxr_serialize_ObjectVariant.part.0+0x3c>
 800eb54:	2b02      	cmp	r3, #2
 800eb56:	d13d      	bne.n	800ebd4 <uxr_serialize_ObjectVariant.part.0+0xb8>
 800eb58:	68a1      	ldr	r1, [r4, #8]
 800eb5a:	4628      	mov	r0, r5
 800eb5c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800eb60:	f006 b8c0 	b.w	8014ce4 <ucdr_serialize_string>
 800eb64:	7909      	ldrb	r1, [r1, #4]
 800eb66:	f7fc fe0d 	bl	800b784 <ucdr_serialize_uint8_t>
 800eb6a:	4606      	mov	r6, r0
 800eb6c:	b120      	cbz	r0, 800eb78 <uxr_serialize_ObjectVariant.part.0+0x5c>
 800eb6e:	7923      	ldrb	r3, [r4, #4]
 800eb70:	2b02      	cmp	r3, #2
 800eb72:	d039      	beq.n	800ebe8 <uxr_serialize_ObjectVariant.part.0+0xcc>
 800eb74:	2b03      	cmp	r3, #3
 800eb76:	d02f      	beq.n	800ebd8 <uxr_serialize_ObjectVariant.part.0+0xbc>
 800eb78:	2202      	movs	r2, #2
 800eb7a:	f504 7103 	add.w	r1, r4, #524	@ 0x20c
 800eb7e:	4628      	mov	r0, r5
 800eb80:	f005 ff3e 	bl	8014a00 <ucdr_serialize_array_uint8_t>
 800eb84:	4030      	ands	r0, r6
 800eb86:	b2c0      	uxtb	r0, r0
 800eb88:	bd70      	pop	{r4, r5, r6, pc}
 800eb8a:	2000      	movs	r0, #0
 800eb8c:	bd70      	pop	{r4, r5, r6, pc}
 800eb8e:	7909      	ldrb	r1, [r1, #4]
 800eb90:	f7fc fdf8 	bl	800b784 <ucdr_serialize_uint8_t>
 800eb94:	4606      	mov	r6, r0
 800eb96:	b158      	cbz	r0, 800ebb0 <uxr_serialize_ObjectVariant.part.0+0x94>
 800eb98:	7923      	ldrb	r3, [r4, #4]
 800eb9a:	2b02      	cmp	r3, #2
 800eb9c:	d003      	beq.n	800eba6 <uxr_serialize_ObjectVariant.part.0+0x8a>
 800eb9e:	2b03      	cmp	r3, #3
 800eba0:	d028      	beq.n	800ebf4 <uxr_serialize_ObjectVariant.part.0+0xd8>
 800eba2:	2b01      	cmp	r3, #1
 800eba4:	d104      	bne.n	800ebb0 <uxr_serialize_ObjectVariant.part.0+0x94>
 800eba6:	68a1      	ldr	r1, [r4, #8]
 800eba8:	4628      	mov	r0, r5
 800ebaa:	f006 f89b 	bl	8014ce4 <ucdr_serialize_string>
 800ebae:	4606      	mov	r6, r0
 800ebb0:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	@ 0x20c
 800ebb4:	4628      	mov	r0, r5
 800ebb6:	f7fd fb21 	bl	800c1fc <ucdr_serialize_int16_t>
 800ebba:	4030      	ands	r0, r6
 800ebbc:	b2c0      	uxtb	r0, r0
 800ebbe:	bd70      	pop	{r4, r5, r6, pc}
 800ebc0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ebc4:	3104      	adds	r1, #4
 800ebc6:	f7ff be7b 	b.w	800e8c0 <uxr_serialize_CLIENT_Representation>
 800ebca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ebce:	3104      	adds	r1, #4
 800ebd0:	f7ff bf32 	b.w	800ea38 <uxr_serialize_AGENT_Representation>
 800ebd4:	2001      	movs	r0, #1
 800ebd6:	bd70      	pop	{r4, r5, r6, pc}
 800ebd8:	68a2      	ldr	r2, [r4, #8]
 800ebda:	f104 010c 	add.w	r1, r4, #12
 800ebde:	4628      	mov	r0, r5
 800ebe0:	f7fd ffb8 	bl	800cb54 <ucdr_serialize_sequence_uint8_t>
 800ebe4:	4606      	mov	r6, r0
 800ebe6:	e7c7      	b.n	800eb78 <uxr_serialize_ObjectVariant.part.0+0x5c>
 800ebe8:	68a1      	ldr	r1, [r4, #8]
 800ebea:	4628      	mov	r0, r5
 800ebec:	f006 f87a 	bl	8014ce4 <ucdr_serialize_string>
 800ebf0:	4606      	mov	r6, r0
 800ebf2:	e7c1      	b.n	800eb78 <uxr_serialize_ObjectVariant.part.0+0x5c>
 800ebf4:	68a2      	ldr	r2, [r4, #8]
 800ebf6:	f104 010c 	add.w	r1, r4, #12
 800ebfa:	4628      	mov	r0, r5
 800ebfc:	f7fd ffaa 	bl	800cb54 <ucdr_serialize_sequence_uint8_t>
 800ec00:	4606      	mov	r6, r0
 800ec02:	e7d5      	b.n	800ebb0 <uxr_serialize_ObjectVariant.part.0+0x94>

0800ec04 <uxr_deserialize_DATAWRITER_Representation>:
 800ec04:	b570      	push	{r4, r5, r6, lr}
 800ec06:	4606      	mov	r6, r0
 800ec08:	460d      	mov	r5, r1
 800ec0a:	f7fc fdd1 	bl	800b7b0 <ucdr_deserialize_uint8_t>
 800ec0e:	4604      	mov	r4, r0
 800ec10:	b130      	cbz	r0, 800ec20 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 800ec12:	782b      	ldrb	r3, [r5, #0]
 800ec14:	2b02      	cmp	r3, #2
 800ec16:	d00c      	beq.n	800ec32 <uxr_deserialize_DATAWRITER_Representation+0x2e>
 800ec18:	2b03      	cmp	r3, #3
 800ec1a:	d012      	beq.n	800ec42 <uxr_deserialize_DATAWRITER_Representation+0x3e>
 800ec1c:	2b01      	cmp	r3, #1
 800ec1e:	d008      	beq.n	800ec32 <uxr_deserialize_DATAWRITER_Representation+0x2e>
 800ec20:	2202      	movs	r2, #2
 800ec22:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 800ec26:	4630      	mov	r0, r6
 800ec28:	f005 ff4e 	bl	8014ac8 <ucdr_deserialize_array_uint8_t>
 800ec2c:	4020      	ands	r0, r4
 800ec2e:	b2c0      	uxtb	r0, r0
 800ec30:	bd70      	pop	{r4, r5, r6, pc}
 800ec32:	6869      	ldr	r1, [r5, #4]
 800ec34:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ec38:	4630      	mov	r0, r6
 800ec3a:	f006 f863 	bl	8014d04 <ucdr_deserialize_string>
 800ec3e:	4604      	mov	r4, r0
 800ec40:	e7ee      	b.n	800ec20 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 800ec42:	1d2b      	adds	r3, r5, #4
 800ec44:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ec48:	f105 0108 	add.w	r1, r5, #8
 800ec4c:	4630      	mov	r0, r6
 800ec4e:	f7fd ff93 	bl	800cb78 <ucdr_deserialize_sequence_uint8_t>
 800ec52:	4604      	mov	r4, r0
 800ec54:	e7e4      	b.n	800ec20 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 800ec56:	bf00      	nop

0800ec58 <uxr_serialize_OBJK_DomainParticipant_Binary>:
 800ec58:	b570      	push	{r4, r5, r6, lr}
 800ec5a:	460d      	mov	r5, r1
 800ec5c:	7809      	ldrb	r1, [r1, #0]
 800ec5e:	4606      	mov	r6, r0
 800ec60:	f7fc fd62 	bl	800b728 <ucdr_serialize_bool>
 800ec64:	782b      	ldrb	r3, [r5, #0]
 800ec66:	4604      	mov	r4, r0
 800ec68:	b94b      	cbnz	r3, 800ec7e <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 800ec6a:	7a29      	ldrb	r1, [r5, #8]
 800ec6c:	4630      	mov	r0, r6
 800ec6e:	f7fc fd5b 	bl	800b728 <ucdr_serialize_bool>
 800ec72:	7a2b      	ldrb	r3, [r5, #8]
 800ec74:	4004      	ands	r4, r0
 800ec76:	b2e4      	uxtb	r4, r4
 800ec78:	b943      	cbnz	r3, 800ec8c <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 800ec7a:	4620      	mov	r0, r4
 800ec7c:	bd70      	pop	{r4, r5, r6, pc}
 800ec7e:	6869      	ldr	r1, [r5, #4]
 800ec80:	4630      	mov	r0, r6
 800ec82:	f006 f82f 	bl	8014ce4 <ucdr_serialize_string>
 800ec86:	4004      	ands	r4, r0
 800ec88:	b2e4      	uxtb	r4, r4
 800ec8a:	e7ee      	b.n	800ec6a <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 800ec8c:	68e9      	ldr	r1, [r5, #12]
 800ec8e:	4630      	mov	r0, r6
 800ec90:	f006 f828 	bl	8014ce4 <ucdr_serialize_string>
 800ec94:	4004      	ands	r4, r0
 800ec96:	4620      	mov	r0, r4
 800ec98:	bd70      	pop	{r4, r5, r6, pc}
 800ec9a:	bf00      	nop

0800ec9c <uxr_serialize_OBJK_Topic_Binary>:
 800ec9c:	b570      	push	{r4, r5, r6, lr}
 800ec9e:	460d      	mov	r5, r1
 800eca0:	6809      	ldr	r1, [r1, #0]
 800eca2:	4606      	mov	r6, r0
 800eca4:	f006 f81e 	bl	8014ce4 <ucdr_serialize_string>
 800eca8:	7929      	ldrb	r1, [r5, #4]
 800ecaa:	4604      	mov	r4, r0
 800ecac:	4630      	mov	r0, r6
 800ecae:	f7fc fd3b 	bl	800b728 <ucdr_serialize_bool>
 800ecb2:	792b      	ldrb	r3, [r5, #4]
 800ecb4:	4004      	ands	r4, r0
 800ecb6:	b2e4      	uxtb	r4, r4
 800ecb8:	b943      	cbnz	r3, 800eccc <uxr_serialize_OBJK_Topic_Binary+0x30>
 800ecba:	7b29      	ldrb	r1, [r5, #12]
 800ecbc:	4630      	mov	r0, r6
 800ecbe:	f7fc fd33 	bl	800b728 <ucdr_serialize_bool>
 800ecc2:	7b2b      	ldrb	r3, [r5, #12]
 800ecc4:	4004      	ands	r4, r0
 800ecc6:	b93b      	cbnz	r3, 800ecd8 <uxr_serialize_OBJK_Topic_Binary+0x3c>
 800ecc8:	4620      	mov	r0, r4
 800ecca:	bd70      	pop	{r4, r5, r6, pc}
 800eccc:	68a9      	ldr	r1, [r5, #8]
 800ecce:	4630      	mov	r0, r6
 800ecd0:	f006 f808 	bl	8014ce4 <ucdr_serialize_string>
 800ecd4:	4004      	ands	r4, r0
 800ecd6:	e7f0      	b.n	800ecba <uxr_serialize_OBJK_Topic_Binary+0x1e>
 800ecd8:	6929      	ldr	r1, [r5, #16]
 800ecda:	4630      	mov	r0, r6
 800ecdc:	f006 f802 	bl	8014ce4 <ucdr_serialize_string>
 800ece0:	4004      	ands	r4, r0
 800ece2:	b2e4      	uxtb	r4, r4
 800ece4:	4620      	mov	r0, r4
 800ece6:	bd70      	pop	{r4, r5, r6, pc}

0800ece8 <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 800ece8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ecec:	460c      	mov	r4, r1
 800ecee:	7809      	ldrb	r1, [r1, #0]
 800ecf0:	4606      	mov	r6, r0
 800ecf2:	f7fc fd19 	bl	800b728 <ucdr_serialize_bool>
 800ecf6:	7823      	ldrb	r3, [r4, #0]
 800ecf8:	4605      	mov	r5, r0
 800ecfa:	b96b      	cbnz	r3, 800ed18 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 800ecfc:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 800ed00:	4630      	mov	r0, r6
 800ed02:	f7fc fd11 	bl	800b728 <ucdr_serialize_bool>
 800ed06:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800ed0a:	4005      	ands	r5, r0
 800ed0c:	b2ed      	uxtb	r5, r5
 800ed0e:	2b00      	cmp	r3, #0
 800ed10:	d169      	bne.n	800ede6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xfe>
 800ed12:	4628      	mov	r0, r5
 800ed14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ed18:	6861      	ldr	r1, [r4, #4]
 800ed1a:	4630      	mov	r0, r6
 800ed1c:	f7fc ff48 	bl	800bbb0 <ucdr_serialize_uint32_t>
 800ed20:	6863      	ldr	r3, [r4, #4]
 800ed22:	2b00      	cmp	r3, #0
 800ed24:	d06b      	beq.n	800edfe <uxr_serialize_OBJK_Publisher_Binary_Qos+0x116>
 800ed26:	2800      	cmp	r0, #0
 800ed28:	d067      	beq.n	800edfa <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800ed2a:	68a1      	ldr	r1, [r4, #8]
 800ed2c:	4630      	mov	r0, r6
 800ed2e:	f005 ffd9 	bl	8014ce4 <ucdr_serialize_string>
 800ed32:	6863      	ldr	r3, [r4, #4]
 800ed34:	2b01      	cmp	r3, #1
 800ed36:	d953      	bls.n	800ede0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800ed38:	2800      	cmp	r0, #0
 800ed3a:	d05e      	beq.n	800edfa <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800ed3c:	68e1      	ldr	r1, [r4, #12]
 800ed3e:	4630      	mov	r0, r6
 800ed40:	f005 ffd0 	bl	8014ce4 <ucdr_serialize_string>
 800ed44:	6863      	ldr	r3, [r4, #4]
 800ed46:	2b02      	cmp	r3, #2
 800ed48:	d94a      	bls.n	800ede0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800ed4a:	2800      	cmp	r0, #0
 800ed4c:	d055      	beq.n	800edfa <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800ed4e:	6921      	ldr	r1, [r4, #16]
 800ed50:	4630      	mov	r0, r6
 800ed52:	f005 ffc7 	bl	8014ce4 <ucdr_serialize_string>
 800ed56:	6863      	ldr	r3, [r4, #4]
 800ed58:	2b03      	cmp	r3, #3
 800ed5a:	d941      	bls.n	800ede0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800ed5c:	2800      	cmp	r0, #0
 800ed5e:	d04c      	beq.n	800edfa <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800ed60:	6961      	ldr	r1, [r4, #20]
 800ed62:	4630      	mov	r0, r6
 800ed64:	f005 ffbe 	bl	8014ce4 <ucdr_serialize_string>
 800ed68:	6863      	ldr	r3, [r4, #4]
 800ed6a:	2b04      	cmp	r3, #4
 800ed6c:	d938      	bls.n	800ede0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800ed6e:	2800      	cmp	r0, #0
 800ed70:	d043      	beq.n	800edfa <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800ed72:	69a1      	ldr	r1, [r4, #24]
 800ed74:	4630      	mov	r0, r6
 800ed76:	f005 ffb5 	bl	8014ce4 <ucdr_serialize_string>
 800ed7a:	6863      	ldr	r3, [r4, #4]
 800ed7c:	2b05      	cmp	r3, #5
 800ed7e:	d92f      	bls.n	800ede0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800ed80:	2800      	cmp	r0, #0
 800ed82:	d03a      	beq.n	800edfa <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800ed84:	69e1      	ldr	r1, [r4, #28]
 800ed86:	4630      	mov	r0, r6
 800ed88:	f005 ffac 	bl	8014ce4 <ucdr_serialize_string>
 800ed8c:	6863      	ldr	r3, [r4, #4]
 800ed8e:	2b06      	cmp	r3, #6
 800ed90:	d926      	bls.n	800ede0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800ed92:	b390      	cbz	r0, 800edfa <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800ed94:	6a21      	ldr	r1, [r4, #32]
 800ed96:	4630      	mov	r0, r6
 800ed98:	f005 ffa4 	bl	8014ce4 <ucdr_serialize_string>
 800ed9c:	6863      	ldr	r3, [r4, #4]
 800ed9e:	2b07      	cmp	r3, #7
 800eda0:	d91e      	bls.n	800ede0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800eda2:	b350      	cbz	r0, 800edfa <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800eda4:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800eda6:	4630      	mov	r0, r6
 800eda8:	f005 ff9c 	bl	8014ce4 <ucdr_serialize_string>
 800edac:	6863      	ldr	r3, [r4, #4]
 800edae:	2b08      	cmp	r3, #8
 800edb0:	d916      	bls.n	800ede0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800edb2:	b310      	cbz	r0, 800edfa <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800edb4:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 800edb6:	4630      	mov	r0, r6
 800edb8:	f005 ff94 	bl	8014ce4 <ucdr_serialize_string>
 800edbc:	6863      	ldr	r3, [r4, #4]
 800edbe:	2b09      	cmp	r3, #9
 800edc0:	d90e      	bls.n	800ede0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800edc2:	b1d0      	cbz	r0, 800edfa <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800edc4:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 800edc8:	2709      	movs	r7, #9
 800edca:	e000      	b.n	800edce <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 800edcc:	b1a8      	cbz	r0, 800edfa <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800edce:	f858 1b04 	ldr.w	r1, [r8], #4
 800edd2:	4630      	mov	r0, r6
 800edd4:	f005 ff86 	bl	8014ce4 <ucdr_serialize_string>
 800edd8:	6862      	ldr	r2, [r4, #4]
 800edda:	3701      	adds	r7, #1
 800eddc:	4297      	cmp	r7, r2
 800edde:	d3f5      	bcc.n	800edcc <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 800ede0:	4005      	ands	r5, r0
 800ede2:	b2ed      	uxtb	r5, r5
 800ede4:	e78a      	b.n	800ecfc <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 800ede6:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800ede8:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 800edec:	4630      	mov	r0, r6
 800edee:	f7fd feb1 	bl	800cb54 <ucdr_serialize_sequence_uint8_t>
 800edf2:	4005      	ands	r5, r0
 800edf4:	4628      	mov	r0, r5
 800edf6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800edfa:	2500      	movs	r5, #0
 800edfc:	e77e      	b.n	800ecfc <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 800edfe:	4028      	ands	r0, r5
 800ee00:	b2c5      	uxtb	r5, r0
 800ee02:	e77b      	b.n	800ecfc <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>

0800ee04 <uxr_serialize_OBJK_Publisher_Binary>:
 800ee04:	b570      	push	{r4, r5, r6, lr}
 800ee06:	460d      	mov	r5, r1
 800ee08:	7809      	ldrb	r1, [r1, #0]
 800ee0a:	4606      	mov	r6, r0
 800ee0c:	f7fc fc8c 	bl	800b728 <ucdr_serialize_bool>
 800ee10:	782b      	ldrb	r3, [r5, #0]
 800ee12:	4604      	mov	r4, r0
 800ee14:	b94b      	cbnz	r3, 800ee2a <uxr_serialize_OBJK_Publisher_Binary+0x26>
 800ee16:	7a29      	ldrb	r1, [r5, #8]
 800ee18:	4630      	mov	r0, r6
 800ee1a:	f7fc fc85 	bl	800b728 <ucdr_serialize_bool>
 800ee1e:	7a2b      	ldrb	r3, [r5, #8]
 800ee20:	4004      	ands	r4, r0
 800ee22:	b2e4      	uxtb	r4, r4
 800ee24:	b943      	cbnz	r3, 800ee38 <uxr_serialize_OBJK_Publisher_Binary+0x34>
 800ee26:	4620      	mov	r0, r4
 800ee28:	bd70      	pop	{r4, r5, r6, pc}
 800ee2a:	6869      	ldr	r1, [r5, #4]
 800ee2c:	4630      	mov	r0, r6
 800ee2e:	f005 ff59 	bl	8014ce4 <ucdr_serialize_string>
 800ee32:	4004      	ands	r4, r0
 800ee34:	b2e4      	uxtb	r4, r4
 800ee36:	e7ee      	b.n	800ee16 <uxr_serialize_OBJK_Publisher_Binary+0x12>
 800ee38:	f105 010c 	add.w	r1, r5, #12
 800ee3c:	4630      	mov	r0, r6
 800ee3e:	f7ff ff53 	bl	800ece8 <uxr_serialize_OBJK_Publisher_Binary_Qos>
 800ee42:	4004      	ands	r4, r0
 800ee44:	4620      	mov	r0, r4
 800ee46:	bd70      	pop	{r4, r5, r6, pc}

0800ee48 <uxr_serialize_OBJK_Subscriber_Binary_Qos>:
 800ee48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ee4c:	460c      	mov	r4, r1
 800ee4e:	7809      	ldrb	r1, [r1, #0]
 800ee50:	4606      	mov	r6, r0
 800ee52:	f7fc fc69 	bl	800b728 <ucdr_serialize_bool>
 800ee56:	7823      	ldrb	r3, [r4, #0]
 800ee58:	4605      	mov	r5, r0
 800ee5a:	b96b      	cbnz	r3, 800ee78 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x30>
 800ee5c:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 800ee60:	4630      	mov	r0, r6
 800ee62:	f7fc fc61 	bl	800b728 <ucdr_serialize_bool>
 800ee66:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800ee6a:	4005      	ands	r5, r0
 800ee6c:	b2ed      	uxtb	r5, r5
 800ee6e:	2b00      	cmp	r3, #0
 800ee70:	d169      	bne.n	800ef46 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xfe>
 800ee72:	4628      	mov	r0, r5
 800ee74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ee78:	6861      	ldr	r1, [r4, #4]
 800ee7a:	4630      	mov	r0, r6
 800ee7c:	f7fc fe98 	bl	800bbb0 <ucdr_serialize_uint32_t>
 800ee80:	6863      	ldr	r3, [r4, #4]
 800ee82:	2b00      	cmp	r3, #0
 800ee84:	d06b      	beq.n	800ef5e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x116>
 800ee86:	2800      	cmp	r0, #0
 800ee88:	d067      	beq.n	800ef5a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800ee8a:	68a1      	ldr	r1, [r4, #8]
 800ee8c:	4630      	mov	r0, r6
 800ee8e:	f005 ff29 	bl	8014ce4 <ucdr_serialize_string>
 800ee92:	6863      	ldr	r3, [r4, #4]
 800ee94:	2b01      	cmp	r3, #1
 800ee96:	d953      	bls.n	800ef40 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800ee98:	2800      	cmp	r0, #0
 800ee9a:	d05e      	beq.n	800ef5a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800ee9c:	68e1      	ldr	r1, [r4, #12]
 800ee9e:	4630      	mov	r0, r6
 800eea0:	f005 ff20 	bl	8014ce4 <ucdr_serialize_string>
 800eea4:	6863      	ldr	r3, [r4, #4]
 800eea6:	2b02      	cmp	r3, #2
 800eea8:	d94a      	bls.n	800ef40 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800eeaa:	2800      	cmp	r0, #0
 800eeac:	d055      	beq.n	800ef5a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800eeae:	6921      	ldr	r1, [r4, #16]
 800eeb0:	4630      	mov	r0, r6
 800eeb2:	f005 ff17 	bl	8014ce4 <ucdr_serialize_string>
 800eeb6:	6863      	ldr	r3, [r4, #4]
 800eeb8:	2b03      	cmp	r3, #3
 800eeba:	d941      	bls.n	800ef40 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800eebc:	2800      	cmp	r0, #0
 800eebe:	d04c      	beq.n	800ef5a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800eec0:	6961      	ldr	r1, [r4, #20]
 800eec2:	4630      	mov	r0, r6
 800eec4:	f005 ff0e 	bl	8014ce4 <ucdr_serialize_string>
 800eec8:	6863      	ldr	r3, [r4, #4]
 800eeca:	2b04      	cmp	r3, #4
 800eecc:	d938      	bls.n	800ef40 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800eece:	2800      	cmp	r0, #0
 800eed0:	d043      	beq.n	800ef5a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800eed2:	69a1      	ldr	r1, [r4, #24]
 800eed4:	4630      	mov	r0, r6
 800eed6:	f005 ff05 	bl	8014ce4 <ucdr_serialize_string>
 800eeda:	6863      	ldr	r3, [r4, #4]
 800eedc:	2b05      	cmp	r3, #5
 800eede:	d92f      	bls.n	800ef40 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800eee0:	2800      	cmp	r0, #0
 800eee2:	d03a      	beq.n	800ef5a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800eee4:	69e1      	ldr	r1, [r4, #28]
 800eee6:	4630      	mov	r0, r6
 800eee8:	f005 fefc 	bl	8014ce4 <ucdr_serialize_string>
 800eeec:	6863      	ldr	r3, [r4, #4]
 800eeee:	2b06      	cmp	r3, #6
 800eef0:	d926      	bls.n	800ef40 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800eef2:	b390      	cbz	r0, 800ef5a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800eef4:	6a21      	ldr	r1, [r4, #32]
 800eef6:	4630      	mov	r0, r6
 800eef8:	f005 fef4 	bl	8014ce4 <ucdr_serialize_string>
 800eefc:	6863      	ldr	r3, [r4, #4]
 800eefe:	2b07      	cmp	r3, #7
 800ef00:	d91e      	bls.n	800ef40 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800ef02:	b350      	cbz	r0, 800ef5a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800ef04:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800ef06:	4630      	mov	r0, r6
 800ef08:	f005 feec 	bl	8014ce4 <ucdr_serialize_string>
 800ef0c:	6863      	ldr	r3, [r4, #4]
 800ef0e:	2b08      	cmp	r3, #8
 800ef10:	d916      	bls.n	800ef40 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800ef12:	b310      	cbz	r0, 800ef5a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800ef14:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 800ef16:	4630      	mov	r0, r6
 800ef18:	f005 fee4 	bl	8014ce4 <ucdr_serialize_string>
 800ef1c:	6863      	ldr	r3, [r4, #4]
 800ef1e:	2b09      	cmp	r3, #9
 800ef20:	d90e      	bls.n	800ef40 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800ef22:	b1d0      	cbz	r0, 800ef5a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800ef24:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 800ef28:	2709      	movs	r7, #9
 800ef2a:	e000      	b.n	800ef2e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe6>
 800ef2c:	b1a8      	cbz	r0, 800ef5a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800ef2e:	f858 1b04 	ldr.w	r1, [r8], #4
 800ef32:	4630      	mov	r0, r6
 800ef34:	f005 fed6 	bl	8014ce4 <ucdr_serialize_string>
 800ef38:	6862      	ldr	r2, [r4, #4]
 800ef3a:	3701      	adds	r7, #1
 800ef3c:	4297      	cmp	r7, r2
 800ef3e:	d3f5      	bcc.n	800ef2c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe4>
 800ef40:	4005      	ands	r5, r0
 800ef42:	b2ed      	uxtb	r5, r5
 800ef44:	e78a      	b.n	800ee5c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 800ef46:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800ef48:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 800ef4c:	4630      	mov	r0, r6
 800ef4e:	f7fd fe01 	bl	800cb54 <ucdr_serialize_sequence_uint8_t>
 800ef52:	4005      	ands	r5, r0
 800ef54:	4628      	mov	r0, r5
 800ef56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ef5a:	2500      	movs	r5, #0
 800ef5c:	e77e      	b.n	800ee5c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 800ef5e:	4028      	ands	r0, r5
 800ef60:	b2c5      	uxtb	r5, r0
 800ef62:	e77b      	b.n	800ee5c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>

0800ef64 <uxr_serialize_OBJK_Subscriber_Binary>:
 800ef64:	b570      	push	{r4, r5, r6, lr}
 800ef66:	460d      	mov	r5, r1
 800ef68:	7809      	ldrb	r1, [r1, #0]
 800ef6a:	4606      	mov	r6, r0
 800ef6c:	f7fc fbdc 	bl	800b728 <ucdr_serialize_bool>
 800ef70:	782b      	ldrb	r3, [r5, #0]
 800ef72:	4604      	mov	r4, r0
 800ef74:	b94b      	cbnz	r3, 800ef8a <uxr_serialize_OBJK_Subscriber_Binary+0x26>
 800ef76:	7a29      	ldrb	r1, [r5, #8]
 800ef78:	4630      	mov	r0, r6
 800ef7a:	f7fc fbd5 	bl	800b728 <ucdr_serialize_bool>
 800ef7e:	7a2b      	ldrb	r3, [r5, #8]
 800ef80:	4004      	ands	r4, r0
 800ef82:	b2e4      	uxtb	r4, r4
 800ef84:	b943      	cbnz	r3, 800ef98 <uxr_serialize_OBJK_Subscriber_Binary+0x34>
 800ef86:	4620      	mov	r0, r4
 800ef88:	bd70      	pop	{r4, r5, r6, pc}
 800ef8a:	6869      	ldr	r1, [r5, #4]
 800ef8c:	4630      	mov	r0, r6
 800ef8e:	f005 fea9 	bl	8014ce4 <ucdr_serialize_string>
 800ef92:	4004      	ands	r4, r0
 800ef94:	b2e4      	uxtb	r4, r4
 800ef96:	e7ee      	b.n	800ef76 <uxr_serialize_OBJK_Subscriber_Binary+0x12>
 800ef98:	f105 010c 	add.w	r1, r5, #12
 800ef9c:	4630      	mov	r0, r6
 800ef9e:	f7ff ff53 	bl	800ee48 <uxr_serialize_OBJK_Subscriber_Binary_Qos>
 800efa2:	4004      	ands	r4, r0
 800efa4:	4620      	mov	r0, r4
 800efa6:	bd70      	pop	{r4, r5, r6, pc}

0800efa8 <uxr_serialize_OBJK_Endpoint_QosBinary>:
 800efa8:	e92d 4368 	stmdb	sp!, {r3, r5, r6, r8, r9, lr}
 800efac:	4688      	mov	r8, r1
 800efae:	8809      	ldrh	r1, [r1, #0]
 800efb0:	4681      	mov	r9, r0
 800efb2:	f7fc fc13 	bl	800b7dc <ucdr_serialize_uint16_t>
 800efb6:	f898 1002 	ldrb.w	r1, [r8, #2]
 800efba:	4606      	mov	r6, r0
 800efbc:	4648      	mov	r0, r9
 800efbe:	f7fc fbb3 	bl	800b728 <ucdr_serialize_bool>
 800efc2:	f898 3002 	ldrb.w	r3, [r8, #2]
 800efc6:	4006      	ands	r6, r0
 800efc8:	b2f5      	uxtb	r5, r6
 800efca:	b9eb      	cbnz	r3, 800f008 <uxr_serialize_OBJK_Endpoint_QosBinary+0x60>
 800efcc:	f898 1006 	ldrb.w	r1, [r8, #6]
 800efd0:	4648      	mov	r0, r9
 800efd2:	f7fc fba9 	bl	800b728 <ucdr_serialize_bool>
 800efd6:	f898 3006 	ldrb.w	r3, [r8, #6]
 800efda:	4005      	ands	r5, r0
 800efdc:	bb7b      	cbnz	r3, 800f03e <uxr_serialize_OBJK_Endpoint_QosBinary+0x96>
 800efde:	f898 100c 	ldrb.w	r1, [r8, #12]
 800efe2:	4648      	mov	r0, r9
 800efe4:	f7fc fba0 	bl	800b728 <ucdr_serialize_bool>
 800efe8:	f898 300c 	ldrb.w	r3, [r8, #12]
 800efec:	4005      	ands	r5, r0
 800efee:	b9f3      	cbnz	r3, 800f02e <uxr_serialize_OBJK_Endpoint_QosBinary+0x86>
 800eff0:	f898 1014 	ldrb.w	r1, [r8, #20]
 800eff4:	4648      	mov	r0, r9
 800eff6:	f7fc fb97 	bl	800b728 <ucdr_serialize_bool>
 800effa:	f898 3014 	ldrb.w	r3, [r8, #20]
 800effe:	4005      	ands	r5, r0
 800f000:	b94b      	cbnz	r3, 800f016 <uxr_serialize_OBJK_Endpoint_QosBinary+0x6e>
 800f002:	4628      	mov	r0, r5
 800f004:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 800f008:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 800f00c:	4648      	mov	r0, r9
 800f00e:	f7fc fbe5 	bl	800b7dc <ucdr_serialize_uint16_t>
 800f012:	4005      	ands	r5, r0
 800f014:	e7da      	b.n	800efcc <uxr_serialize_OBJK_Endpoint_QosBinary+0x24>
 800f016:	f8d8 2018 	ldr.w	r2, [r8, #24]
 800f01a:	f108 011c 	add.w	r1, r8, #28
 800f01e:	4648      	mov	r0, r9
 800f020:	f7fd fd98 	bl	800cb54 <ucdr_serialize_sequence_uint8_t>
 800f024:	4028      	ands	r0, r5
 800f026:	b2c5      	uxtb	r5, r0
 800f028:	4628      	mov	r0, r5
 800f02a:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 800f02e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800f032:	4648      	mov	r0, r9
 800f034:	f7fc fdbc 	bl	800bbb0 <ucdr_serialize_uint32_t>
 800f038:	4028      	ands	r0, r5
 800f03a:	b2c5      	uxtb	r5, r0
 800f03c:	e7d8      	b.n	800eff0 <uxr_serialize_OBJK_Endpoint_QosBinary+0x48>
 800f03e:	f8d8 1008 	ldr.w	r1, [r8, #8]
 800f042:	4648      	mov	r0, r9
 800f044:	f7fc fdb4 	bl	800bbb0 <ucdr_serialize_uint32_t>
 800f048:	4028      	ands	r0, r5
 800f04a:	b2c5      	uxtb	r5, r0
 800f04c:	e7c7      	b.n	800efde <uxr_serialize_OBJK_Endpoint_QosBinary+0x36>
 800f04e:	bf00      	nop

0800f050 <uxr_serialize_OBJK_DataReader_Binary>:
 800f050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f052:	2202      	movs	r2, #2
 800f054:	460c      	mov	r4, r1
 800f056:	4606      	mov	r6, r0
 800f058:	f005 fcd2 	bl	8014a00 <ucdr_serialize_array_uint8_t>
 800f05c:	78a1      	ldrb	r1, [r4, #2]
 800f05e:	4605      	mov	r5, r0
 800f060:	4630      	mov	r0, r6
 800f062:	f7fc fb61 	bl	800b728 <ucdr_serialize_bool>
 800f066:	78a3      	ldrb	r3, [r4, #2]
 800f068:	4005      	ands	r5, r0
 800f06a:	b2ed      	uxtb	r5, r5
 800f06c:	b90b      	cbnz	r3, 800f072 <uxr_serialize_OBJK_DataReader_Binary+0x22>
 800f06e:	4628      	mov	r0, r5
 800f070:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f072:	f104 0108 	add.w	r1, r4, #8
 800f076:	4630      	mov	r0, r6
 800f078:	f7ff ff96 	bl	800efa8 <uxr_serialize_OBJK_Endpoint_QosBinary>
 800f07c:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 800f080:	4607      	mov	r7, r0
 800f082:	4630      	mov	r0, r6
 800f084:	f7fc fb50 	bl	800b728 <ucdr_serialize_bool>
 800f088:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 800f08c:	4038      	ands	r0, r7
 800f08e:	b2c7      	uxtb	r7, r0
 800f090:	b95b      	cbnz	r3, 800f0aa <uxr_serialize_OBJK_DataReader_Binary+0x5a>
 800f092:	f894 1038 	ldrb.w	r1, [r4, #56]	@ 0x38
 800f096:	4630      	mov	r0, r6
 800f098:	f7fc fb46 	bl	800b728 <ucdr_serialize_bool>
 800f09c:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 800f0a0:	4007      	ands	r7, r0
 800f0a2:	b94b      	cbnz	r3, 800f0b8 <uxr_serialize_OBJK_DataReader_Binary+0x68>
 800f0a4:	403d      	ands	r5, r7
 800f0a6:	4628      	mov	r0, r5
 800f0a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f0aa:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	@ 0x30
 800f0ae:	4630      	mov	r0, r6
 800f0b0:	f7fc ffd4 	bl	800c05c <ucdr_serialize_uint64_t>
 800f0b4:	4007      	ands	r7, r0
 800f0b6:	e7ec      	b.n	800f092 <uxr_serialize_OBJK_DataReader_Binary+0x42>
 800f0b8:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 800f0ba:	4630      	mov	r0, r6
 800f0bc:	f005 fe12 	bl	8014ce4 <ucdr_serialize_string>
 800f0c0:	4007      	ands	r7, r0
 800f0c2:	b2ff      	uxtb	r7, r7
 800f0c4:	e7ee      	b.n	800f0a4 <uxr_serialize_OBJK_DataReader_Binary+0x54>
 800f0c6:	bf00      	nop

0800f0c8 <uxr_serialize_OBJK_DataWriter_Binary>:
 800f0c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f0ca:	2202      	movs	r2, #2
 800f0cc:	460d      	mov	r5, r1
 800f0ce:	4606      	mov	r6, r0
 800f0d0:	f005 fc96 	bl	8014a00 <ucdr_serialize_array_uint8_t>
 800f0d4:	78a9      	ldrb	r1, [r5, #2]
 800f0d6:	4604      	mov	r4, r0
 800f0d8:	4630      	mov	r0, r6
 800f0da:	f7fc fb25 	bl	800b728 <ucdr_serialize_bool>
 800f0de:	78ab      	ldrb	r3, [r5, #2]
 800f0e0:	4004      	ands	r4, r0
 800f0e2:	b2e4      	uxtb	r4, r4
 800f0e4:	b90b      	cbnz	r3, 800f0ea <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 800f0e6:	4620      	mov	r0, r4
 800f0e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f0ea:	f105 0108 	add.w	r1, r5, #8
 800f0ee:	4630      	mov	r0, r6
 800f0f0:	f7ff ff5a 	bl	800efa8 <uxr_serialize_OBJK_Endpoint_QosBinary>
 800f0f4:	f895 102c 	ldrb.w	r1, [r5, #44]	@ 0x2c
 800f0f8:	4607      	mov	r7, r0
 800f0fa:	4630      	mov	r0, r6
 800f0fc:	f7fc fb14 	bl	800b728 <ucdr_serialize_bool>
 800f100:	f895 302c 	ldrb.w	r3, [r5, #44]	@ 0x2c
 800f104:	4038      	ands	r0, r7
 800f106:	b2c7      	uxtb	r7, r0
 800f108:	b913      	cbnz	r3, 800f110 <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 800f10a:	403c      	ands	r4, r7
 800f10c:	4620      	mov	r0, r4
 800f10e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f110:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	@ 0x30
 800f114:	4630      	mov	r0, r6
 800f116:	f7fc ffa1 	bl	800c05c <ucdr_serialize_uint64_t>
 800f11a:	4007      	ands	r7, r0
 800f11c:	e7f5      	b.n	800f10a <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 800f11e:	bf00      	nop

0800f120 <uxr_deserialize_ObjectVariant>:
 800f120:	b570      	push	{r4, r5, r6, lr}
 800f122:	4605      	mov	r5, r0
 800f124:	460e      	mov	r6, r1
 800f126:	f7fc fb43 	bl	800b7b0 <ucdr_deserialize_uint8_t>
 800f12a:	b168      	cbz	r0, 800f148 <uxr_deserialize_ObjectVariant+0x28>
 800f12c:	7833      	ldrb	r3, [r6, #0]
 800f12e:	3b01      	subs	r3, #1
 800f130:	4604      	mov	r4, r0
 800f132:	2b0d      	cmp	r3, #13
 800f134:	d809      	bhi.n	800f14a <uxr_deserialize_ObjectVariant+0x2a>
 800f136:	e8df f003 	tbb	[pc, r3]
 800f13a:	0a41      	.short	0x0a41
 800f13c:	0a0a2323 	.word	0x0a0a2323
 800f140:	10080a0a 	.word	0x10080a0a
 800f144:	565c1010 	.word	0x565c1010
 800f148:	2400      	movs	r4, #0
 800f14a:	4620      	mov	r0, r4
 800f14c:	bd70      	pop	{r4, r5, r6, pc}
 800f14e:	1d31      	adds	r1, r6, #4
 800f150:	4628      	mov	r0, r5
 800f152:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f156:	f7ff bd55 	b.w	800ec04 <uxr_deserialize_DATAWRITER_Representation>
 800f15a:	1d31      	adds	r1, r6, #4
 800f15c:	4628      	mov	r0, r5
 800f15e:	f7fc fb27 	bl	800b7b0 <ucdr_deserialize_uint8_t>
 800f162:	2800      	cmp	r0, #0
 800f164:	d0f0      	beq.n	800f148 <uxr_deserialize_ObjectVariant+0x28>
 800f166:	7933      	ldrb	r3, [r6, #4]
 800f168:	2b01      	cmp	r3, #1
 800f16a:	d001      	beq.n	800f170 <uxr_deserialize_ObjectVariant+0x50>
 800f16c:	2b02      	cmp	r3, #2
 800f16e:	d1ec      	bne.n	800f14a <uxr_deserialize_ObjectVariant+0x2a>
 800f170:	68b1      	ldr	r1, [r6, #8]
 800f172:	4628      	mov	r0, r5
 800f174:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f178:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f17c:	f005 bdc2 	b.w	8014d04 <ucdr_deserialize_string>
 800f180:	1d31      	adds	r1, r6, #4
 800f182:	4628      	mov	r0, r5
 800f184:	f7fc fb14 	bl	800b7b0 <ucdr_deserialize_uint8_t>
 800f188:	4604      	mov	r4, r0
 800f18a:	b170      	cbz	r0, 800f1aa <uxr_deserialize_ObjectVariant+0x8a>
 800f18c:	7933      	ldrb	r3, [r6, #4]
 800f18e:	2b02      	cmp	r3, #2
 800f190:	d04c      	beq.n	800f22c <uxr_deserialize_ObjectVariant+0x10c>
 800f192:	2b03      	cmp	r3, #3
 800f194:	d109      	bne.n	800f1aa <uxr_deserialize_ObjectVariant+0x8a>
 800f196:	f106 0308 	add.w	r3, r6, #8
 800f19a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f19e:	f106 010c 	add.w	r1, r6, #12
 800f1a2:	4628      	mov	r0, r5
 800f1a4:	f7fd fce8 	bl	800cb78 <ucdr_deserialize_sequence_uint8_t>
 800f1a8:	4604      	mov	r4, r0
 800f1aa:	2202      	movs	r2, #2
 800f1ac:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 800f1b0:	4628      	mov	r0, r5
 800f1b2:	f005 fc89 	bl	8014ac8 <ucdr_deserialize_array_uint8_t>
 800f1b6:	4020      	ands	r0, r4
 800f1b8:	b2c4      	uxtb	r4, r0
 800f1ba:	e7c6      	b.n	800f14a <uxr_deserialize_ObjectVariant+0x2a>
 800f1bc:	1d31      	adds	r1, r6, #4
 800f1be:	4628      	mov	r0, r5
 800f1c0:	f7fc faf6 	bl	800b7b0 <ucdr_deserialize_uint8_t>
 800f1c4:	4604      	mov	r4, r0
 800f1c6:	b130      	cbz	r0, 800f1d6 <uxr_deserialize_ObjectVariant+0xb6>
 800f1c8:	7933      	ldrb	r3, [r6, #4]
 800f1ca:	2b02      	cmp	r3, #2
 800f1cc:	d036      	beq.n	800f23c <uxr_deserialize_ObjectVariant+0x11c>
 800f1ce:	2b03      	cmp	r3, #3
 800f1d0:	d03c      	beq.n	800f24c <uxr_deserialize_ObjectVariant+0x12c>
 800f1d2:	2b01      	cmp	r3, #1
 800f1d4:	d032      	beq.n	800f23c <uxr_deserialize_ObjectVariant+0x11c>
 800f1d6:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 800f1da:	4628      	mov	r0, r5
 800f1dc:	f7fd f88e 	bl	800c2fc <ucdr_deserialize_int16_t>
 800f1e0:	4020      	ands	r0, r4
 800f1e2:	b2c4      	uxtb	r4, r0
 800f1e4:	e7b1      	b.n	800f14a <uxr_deserialize_ObjectVariant+0x2a>
 800f1e6:	1d31      	adds	r1, r6, #4
 800f1e8:	4628      	mov	r0, r5
 800f1ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f1ee:	f7ff bbbf 	b.w	800e970 <uxr_deserialize_CLIENT_Representation>
 800f1f2:	2204      	movs	r2, #4
 800f1f4:	18b1      	adds	r1, r6, r2
 800f1f6:	4628      	mov	r0, r5
 800f1f8:	f005 fc66 	bl	8014ac8 <ucdr_deserialize_array_uint8_t>
 800f1fc:	2202      	movs	r2, #2
 800f1fe:	f106 0108 	add.w	r1, r6, #8
 800f202:	4604      	mov	r4, r0
 800f204:	4628      	mov	r0, r5
 800f206:	f005 fc5f 	bl	8014ac8 <ucdr_deserialize_array_uint8_t>
 800f20a:	2202      	movs	r2, #2
 800f20c:	4004      	ands	r4, r0
 800f20e:	f106 010a 	add.w	r1, r6, #10
 800f212:	4628      	mov	r0, r5
 800f214:	f005 fc58 	bl	8014ac8 <ucdr_deserialize_array_uint8_t>
 800f218:	b2e4      	uxtb	r4, r4
 800f21a:	4603      	mov	r3, r0
 800f21c:	f106 010c 	add.w	r1, r6, #12
 800f220:	4628      	mov	r0, r5
 800f222:	401c      	ands	r4, r3
 800f224:	f7fc fa96 	bl	800b754 <ucdr_deserialize_bool>
 800f228:	4004      	ands	r4, r0
 800f22a:	e78e      	b.n	800f14a <uxr_deserialize_ObjectVariant+0x2a>
 800f22c:	68b1      	ldr	r1, [r6, #8]
 800f22e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f232:	4628      	mov	r0, r5
 800f234:	f005 fd66 	bl	8014d04 <ucdr_deserialize_string>
 800f238:	4604      	mov	r4, r0
 800f23a:	e7b6      	b.n	800f1aa <uxr_deserialize_ObjectVariant+0x8a>
 800f23c:	68b1      	ldr	r1, [r6, #8]
 800f23e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f242:	4628      	mov	r0, r5
 800f244:	f005 fd5e 	bl	8014d04 <ucdr_deserialize_string>
 800f248:	4604      	mov	r4, r0
 800f24a:	e7c4      	b.n	800f1d6 <uxr_deserialize_ObjectVariant+0xb6>
 800f24c:	f106 0308 	add.w	r3, r6, #8
 800f250:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f254:	f106 010c 	add.w	r1, r6, #12
 800f258:	4628      	mov	r0, r5
 800f25a:	f7fd fc8d 	bl	800cb78 <ucdr_deserialize_sequence_uint8_t>
 800f25e:	4604      	mov	r4, r0
 800f260:	e7b9      	b.n	800f1d6 <uxr_deserialize_ObjectVariant+0xb6>
 800f262:	bf00      	nop

0800f264 <uxr_deserialize_BaseObjectRequest>:
 800f264:	b570      	push	{r4, r5, r6, lr}
 800f266:	2202      	movs	r2, #2
 800f268:	4605      	mov	r5, r0
 800f26a:	460e      	mov	r6, r1
 800f26c:	f005 fc2c 	bl	8014ac8 <ucdr_deserialize_array_uint8_t>
 800f270:	2202      	movs	r2, #2
 800f272:	4604      	mov	r4, r0
 800f274:	18b1      	adds	r1, r6, r2
 800f276:	4628      	mov	r0, r5
 800f278:	f005 fc26 	bl	8014ac8 <ucdr_deserialize_array_uint8_t>
 800f27c:	4020      	ands	r0, r4
 800f27e:	b2c0      	uxtb	r0, r0
 800f280:	bd70      	pop	{r4, r5, r6, pc}
 800f282:	bf00      	nop

0800f284 <uxr_serialize_ActivityInfoVariant>:
 800f284:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f288:	460d      	mov	r5, r1
 800f28a:	7809      	ldrb	r1, [r1, #0]
 800f28c:	4607      	mov	r7, r0
 800f28e:	f7fc fa79 	bl	800b784 <ucdr_serialize_uint8_t>
 800f292:	4681      	mov	r9, r0
 800f294:	b138      	cbz	r0, 800f2a6 <uxr_serialize_ActivityInfoVariant+0x22>
 800f296:	782b      	ldrb	r3, [r5, #0]
 800f298:	2b06      	cmp	r3, #6
 800f29a:	f000 8082 	beq.w	800f3a2 <uxr_serialize_ActivityInfoVariant+0x11e>
 800f29e:	2b0d      	cmp	r3, #13
 800f2a0:	d016      	beq.n	800f2d0 <uxr_serialize_ActivityInfoVariant+0x4c>
 800f2a2:	2b05      	cmp	r3, #5
 800f2a4:	d002      	beq.n	800f2ac <uxr_serialize_ActivityInfoVariant+0x28>
 800f2a6:	4648      	mov	r0, r9
 800f2a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f2ac:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 800f2b0:	4638      	mov	r0, r7
 800f2b2:	f7fc ffa3 	bl	800c1fc <ucdr_serialize_int16_t>
 800f2b6:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
 800f2ba:	4681      	mov	r9, r0
 800f2bc:	4638      	mov	r0, r7
 800f2be:	f7fc fecd 	bl	800c05c <ucdr_serialize_uint64_t>
 800f2c2:	ea09 0000 	and.w	r0, r9, r0
 800f2c6:	fa5f f980 	uxtb.w	r9, r0
 800f2ca:	4648      	mov	r0, r9
 800f2cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f2d0:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 800f2d4:	4638      	mov	r0, r7
 800f2d6:	f7fc ff91 	bl	800c1fc <ucdr_serialize_int16_t>
 800f2da:	68e9      	ldr	r1, [r5, #12]
 800f2dc:	4681      	mov	r9, r0
 800f2de:	4638      	mov	r0, r7
 800f2e0:	f7fc fc66 	bl	800bbb0 <ucdr_serialize_uint32_t>
 800f2e4:	68eb      	ldr	r3, [r5, #12]
 800f2e6:	2b00      	cmp	r3, #0
 800f2e8:	d0eb      	beq.n	800f2c2 <uxr_serialize_ActivityInfoVariant+0x3e>
 800f2ea:	b320      	cbz	r0, 800f336 <uxr_serialize_ActivityInfoVariant+0xb2>
 800f2ec:	f105 080c 	add.w	r8, r5, #12
 800f2f0:	2600      	movs	r6, #0
 800f2f2:	eb06 0a46 	add.w	sl, r6, r6, lsl #1
 800f2f6:	eb05 0aca 	add.w	sl, r5, sl, lsl #3
 800f2fa:	f89a 1010 	ldrb.w	r1, [sl, #16]
 800f2fe:	4638      	mov	r0, r7
 800f300:	f7fc fa40 	bl	800b784 <ucdr_serialize_uint8_t>
 800f304:	2800      	cmp	r0, #0
 800f306:	d053      	beq.n	800f3b0 <uxr_serialize_ActivityInfoVariant+0x12c>
 800f308:	f89a 3010 	ldrb.w	r3, [sl, #16]
 800f30c:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 800f310:	0074      	lsls	r4, r6, #1
 800f312:	00c9      	lsls	r1, r1, #3
 800f314:	2b03      	cmp	r3, #3
 800f316:	d854      	bhi.n	800f3c2 <uxr_serialize_ActivityInfoVariant+0x13e>
 800f318:	e8df f003 	tbb	[pc, r3]
 800f31c:	02102132 	.word	0x02102132
 800f320:	4441      	add	r1, r8
 800f322:	4638      	mov	r0, r7
 800f324:	6889      	ldr	r1, [r1, #8]
 800f326:	f005 fcdd 	bl	8014ce4 <ucdr_serialize_string>
 800f32a:	68ea      	ldr	r2, [r5, #12]
 800f32c:	3601      	adds	r6, #1
 800f32e:	4296      	cmp	r6, r2
 800f330:	d242      	bcs.n	800f3b8 <uxr_serialize_ActivityInfoVariant+0x134>
 800f332:	2800      	cmp	r0, #0
 800f334:	d1dd      	bne.n	800f2f2 <uxr_serialize_ActivityInfoVariant+0x6e>
 800f336:	f04f 0900 	mov.w	r9, #0
 800f33a:	e7b4      	b.n	800f2a6 <uxr_serialize_ActivityInfoVariant+0x22>
 800f33c:	3108      	adds	r1, #8
 800f33e:	4441      	add	r1, r8
 800f340:	2210      	movs	r2, #16
 800f342:	4638      	mov	r0, r7
 800f344:	f005 fb5c 	bl	8014a00 <ucdr_serialize_array_uint8_t>
 800f348:	4434      	add	r4, r6
 800f34a:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 800f34e:	4604      	mov	r4, r0
 800f350:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800f352:	4638      	mov	r0, r7
 800f354:	f7fc fc2c 	bl	800bbb0 <ucdr_serialize_uint32_t>
 800f358:	4020      	ands	r0, r4
 800f35a:	b2c0      	uxtb	r0, r0
 800f35c:	e7e5      	b.n	800f32a <uxr_serialize_ActivityInfoVariant+0xa6>
 800f35e:	3108      	adds	r1, #8
 800f360:	4441      	add	r1, r8
 800f362:	2204      	movs	r2, #4
 800f364:	4638      	mov	r0, r7
 800f366:	f005 fb4b 	bl	8014a00 <ucdr_serialize_array_uint8_t>
 800f36a:	4434      	add	r4, r6
 800f36c:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 800f370:	4604      	mov	r4, r0
 800f372:	8b19      	ldrh	r1, [r3, #24]
 800f374:	4638      	mov	r0, r7
 800f376:	f7fc fa31 	bl	800b7dc <ucdr_serialize_uint16_t>
 800f37a:	4020      	ands	r0, r4
 800f37c:	b2c0      	uxtb	r0, r0
 800f37e:	e7d4      	b.n	800f32a <uxr_serialize_ActivityInfoVariant+0xa6>
 800f380:	3108      	adds	r1, #8
 800f382:	4441      	add	r1, r8
 800f384:	2202      	movs	r2, #2
 800f386:	4638      	mov	r0, r7
 800f388:	f005 fb3a 	bl	8014a00 <ucdr_serialize_array_uint8_t>
 800f38c:	4434      	add	r4, r6
 800f38e:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 800f392:	4604      	mov	r4, r0
 800f394:	7d99      	ldrb	r1, [r3, #22]
 800f396:	4638      	mov	r0, r7
 800f398:	f7fc f9f4 	bl	800b784 <ucdr_serialize_uint8_t>
 800f39c:	4020      	ands	r0, r4
 800f39e:	b2c0      	uxtb	r0, r0
 800f3a0:	e7c3      	b.n	800f32a <uxr_serialize_ActivityInfoVariant+0xa6>
 800f3a2:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 800f3a6:	4638      	mov	r0, r7
 800f3a8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f3ac:	f7fc bf26 	b.w	800c1fc <ucdr_serialize_int16_t>
 800f3b0:	68ea      	ldr	r2, [r5, #12]
 800f3b2:	3601      	adds	r6, #1
 800f3b4:	42b2      	cmp	r2, r6
 800f3b6:	d8be      	bhi.n	800f336 <uxr_serialize_ActivityInfoVariant+0xb2>
 800f3b8:	ea09 0900 	and.w	r9, r9, r0
 800f3bc:	fa5f f989 	uxtb.w	r9, r9
 800f3c0:	e771      	b.n	800f2a6 <uxr_serialize_ActivityInfoVariant+0x22>
 800f3c2:	68eb      	ldr	r3, [r5, #12]
 800f3c4:	3601      	adds	r6, #1
 800f3c6:	429e      	cmp	r6, r3
 800f3c8:	f10a 0a18 	add.w	sl, sl, #24
 800f3cc:	d395      	bcc.n	800f2fa <uxr_serialize_ActivityInfoVariant+0x76>
 800f3ce:	e76a      	b.n	800f2a6 <uxr_serialize_ActivityInfoVariant+0x22>

0800f3d0 <uxr_deserialize_BaseObjectReply>:
 800f3d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f3d4:	2202      	movs	r2, #2
 800f3d6:	4606      	mov	r6, r0
 800f3d8:	460f      	mov	r7, r1
 800f3da:	f005 fb75 	bl	8014ac8 <ucdr_deserialize_array_uint8_t>
 800f3de:	2202      	movs	r2, #2
 800f3e0:	18b9      	adds	r1, r7, r2
 800f3e2:	4605      	mov	r5, r0
 800f3e4:	4630      	mov	r0, r6
 800f3e6:	f005 fb6f 	bl	8014ac8 <ucdr_deserialize_array_uint8_t>
 800f3ea:	1d39      	adds	r1, r7, #4
 800f3ec:	4680      	mov	r8, r0
 800f3ee:	4630      	mov	r0, r6
 800f3f0:	f7fc f9de 	bl	800b7b0 <ucdr_deserialize_uint8_t>
 800f3f4:	1d79      	adds	r1, r7, #5
 800f3f6:	4604      	mov	r4, r0
 800f3f8:	4630      	mov	r0, r6
 800f3fa:	f7fc f9d9 	bl	800b7b0 <ucdr_deserialize_uint8_t>
 800f3fe:	ea05 0508 	and.w	r5, r5, r8
 800f402:	402c      	ands	r4, r5
 800f404:	4020      	ands	r0, r4
 800f406:	b2c0      	uxtb	r0, r0
 800f408:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f40c <uxr_serialize_ReadSpecification>:
 800f40c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f410:	460e      	mov	r6, r1
 800f412:	7809      	ldrb	r1, [r1, #0]
 800f414:	4607      	mov	r7, r0
 800f416:	f7fc f9b5 	bl	800b784 <ucdr_serialize_uint8_t>
 800f41a:	7871      	ldrb	r1, [r6, #1]
 800f41c:	4604      	mov	r4, r0
 800f41e:	4638      	mov	r0, r7
 800f420:	f7fc f9b0 	bl	800b784 <ucdr_serialize_uint8_t>
 800f424:	78b1      	ldrb	r1, [r6, #2]
 800f426:	4004      	ands	r4, r0
 800f428:	4638      	mov	r0, r7
 800f42a:	f7fc f97d 	bl	800b728 <ucdr_serialize_bool>
 800f42e:	78b3      	ldrb	r3, [r6, #2]
 800f430:	b2e4      	uxtb	r4, r4
 800f432:	4004      	ands	r4, r0
 800f434:	b94b      	cbnz	r3, 800f44a <uxr_serialize_ReadSpecification+0x3e>
 800f436:	7a31      	ldrb	r1, [r6, #8]
 800f438:	4638      	mov	r0, r7
 800f43a:	f7fc f975 	bl	800b728 <ucdr_serialize_bool>
 800f43e:	7a33      	ldrb	r3, [r6, #8]
 800f440:	4004      	ands	r4, r0
 800f442:	b943      	cbnz	r3, 800f456 <uxr_serialize_ReadSpecification+0x4a>
 800f444:	4620      	mov	r0, r4
 800f446:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f44a:	6871      	ldr	r1, [r6, #4]
 800f44c:	4638      	mov	r0, r7
 800f44e:	f005 fc49 	bl	8014ce4 <ucdr_serialize_string>
 800f452:	4004      	ands	r4, r0
 800f454:	e7ef      	b.n	800f436 <uxr_serialize_ReadSpecification+0x2a>
 800f456:	8971      	ldrh	r1, [r6, #10]
 800f458:	4638      	mov	r0, r7
 800f45a:	f7fc f9bf 	bl	800b7dc <ucdr_serialize_uint16_t>
 800f45e:	89b1      	ldrh	r1, [r6, #12]
 800f460:	4605      	mov	r5, r0
 800f462:	4638      	mov	r0, r7
 800f464:	f7fc f9ba 	bl	800b7dc <ucdr_serialize_uint16_t>
 800f468:	89f1      	ldrh	r1, [r6, #14]
 800f46a:	4005      	ands	r5, r0
 800f46c:	4638      	mov	r0, r7
 800f46e:	f7fc f9b5 	bl	800b7dc <ucdr_serialize_uint16_t>
 800f472:	8a31      	ldrh	r1, [r6, #16]
 800f474:	4680      	mov	r8, r0
 800f476:	4638      	mov	r0, r7
 800f478:	f7fc f9b0 	bl	800b7dc <ucdr_serialize_uint16_t>
 800f47c:	b2ed      	uxtb	r5, r5
 800f47e:	4025      	ands	r5, r4
 800f480:	ea08 0505 	and.w	r5, r8, r5
 800f484:	ea00 0405 	and.w	r4, r0, r5
 800f488:	4620      	mov	r0, r4
 800f48a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f48e:	bf00      	nop

0800f490 <uxr_serialize_CREATE_CLIENT_Payload>:
 800f490:	f7ff ba16 	b.w	800e8c0 <uxr_serialize_CLIENT_Representation>

0800f494 <uxr_serialize_CREATE_Payload>:
 800f494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f496:	2202      	movs	r2, #2
 800f498:	4607      	mov	r7, r0
 800f49a:	460e      	mov	r6, r1
 800f49c:	f005 fab0 	bl	8014a00 <ucdr_serialize_array_uint8_t>
 800f4a0:	2202      	movs	r2, #2
 800f4a2:	18b1      	adds	r1, r6, r2
 800f4a4:	4605      	mov	r5, r0
 800f4a6:	4638      	mov	r0, r7
 800f4a8:	f005 faaa 	bl	8014a00 <ucdr_serialize_array_uint8_t>
 800f4ac:	7931      	ldrb	r1, [r6, #4]
 800f4ae:	4604      	mov	r4, r0
 800f4b0:	4638      	mov	r0, r7
 800f4b2:	f7fc f967 	bl	800b784 <ucdr_serialize_uint8_t>
 800f4b6:	b170      	cbz	r0, 800f4d6 <uxr_serialize_CREATE_Payload+0x42>
 800f4b8:	7933      	ldrb	r3, [r6, #4]
 800f4ba:	402c      	ands	r4, r5
 800f4bc:	3b01      	subs	r3, #1
 800f4be:	b2e4      	uxtb	r4, r4
 800f4c0:	2b0d      	cmp	r3, #13
 800f4c2:	d809      	bhi.n	800f4d8 <uxr_serialize_CREATE_Payload+0x44>
 800f4c4:	e8df f003 	tbb	[pc, r3]
 800f4c8:	23230a4c 	.word	0x23230a4c
 800f4cc:	0a0a0a0a 	.word	0x0a0a0a0a
 800f4d0:	12121208 	.word	0x12121208
 800f4d4:	3e45      	.short	0x3e45
 800f4d6:	2400      	movs	r4, #0
 800f4d8:	4620      	mov	r0, r4
 800f4da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f4dc:	f106 0108 	add.w	r1, r6, #8
 800f4e0:	4638      	mov	r0, r7
 800f4e2:	f7ff faf3 	bl	800eacc <uxr_serialize_DATAWRITER_Representation>
 800f4e6:	4004      	ands	r4, r0
 800f4e8:	4620      	mov	r0, r4
 800f4ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f4ec:	7a31      	ldrb	r1, [r6, #8]
 800f4ee:	4638      	mov	r0, r7
 800f4f0:	f7fc f948 	bl	800b784 <ucdr_serialize_uint8_t>
 800f4f4:	2800      	cmp	r0, #0
 800f4f6:	d0ee      	beq.n	800f4d6 <uxr_serialize_CREATE_Payload+0x42>
 800f4f8:	7a33      	ldrb	r3, [r6, #8]
 800f4fa:	2b01      	cmp	r3, #1
 800f4fc:	d001      	beq.n	800f502 <uxr_serialize_CREATE_Payload+0x6e>
 800f4fe:	2b02      	cmp	r3, #2
 800f500:	d1ea      	bne.n	800f4d8 <uxr_serialize_CREATE_Payload+0x44>
 800f502:	68f1      	ldr	r1, [r6, #12]
 800f504:	4638      	mov	r0, r7
 800f506:	f005 fbed 	bl	8014ce4 <ucdr_serialize_string>
 800f50a:	4004      	ands	r4, r0
 800f50c:	e7e4      	b.n	800f4d8 <uxr_serialize_CREATE_Payload+0x44>
 800f50e:	7a31      	ldrb	r1, [r6, #8]
 800f510:	4638      	mov	r0, r7
 800f512:	f7fc f937 	bl	800b784 <ucdr_serialize_uint8_t>
 800f516:	4605      	mov	r5, r0
 800f518:	b158      	cbz	r0, 800f532 <uxr_serialize_CREATE_Payload+0x9e>
 800f51a:	7a33      	ldrb	r3, [r6, #8]
 800f51c:	2b02      	cmp	r3, #2
 800f51e:	d034      	beq.n	800f58a <uxr_serialize_CREATE_Payload+0xf6>
 800f520:	2b03      	cmp	r3, #3
 800f522:	d106      	bne.n	800f532 <uxr_serialize_CREATE_Payload+0x9e>
 800f524:	68f2      	ldr	r2, [r6, #12]
 800f526:	f106 0110 	add.w	r1, r6, #16
 800f52a:	4638      	mov	r0, r7
 800f52c:	f7fd fb12 	bl	800cb54 <ucdr_serialize_sequence_uint8_t>
 800f530:	4605      	mov	r5, r0
 800f532:	2202      	movs	r2, #2
 800f534:	f506 7104 	add.w	r1, r6, #528	@ 0x210
 800f538:	4638      	mov	r0, r7
 800f53a:	f005 fa61 	bl	8014a00 <ucdr_serialize_array_uint8_t>
 800f53e:	4028      	ands	r0, r5
 800f540:	4004      	ands	r4, r0
 800f542:	e7c9      	b.n	800f4d8 <uxr_serialize_CREATE_Payload+0x44>
 800f544:	f106 0108 	add.w	r1, r6, #8
 800f548:	4638      	mov	r0, r7
 800f54a:	f7ff f9b9 	bl	800e8c0 <uxr_serialize_CLIENT_Representation>
 800f54e:	4004      	ands	r4, r0
 800f550:	e7c2      	b.n	800f4d8 <uxr_serialize_CREATE_Payload+0x44>
 800f552:	f106 0108 	add.w	r1, r6, #8
 800f556:	4638      	mov	r0, r7
 800f558:	f7ff fa6e 	bl	800ea38 <uxr_serialize_AGENT_Representation>
 800f55c:	4004      	ands	r4, r0
 800f55e:	e7bb      	b.n	800f4d8 <uxr_serialize_CREATE_Payload+0x44>
 800f560:	7a31      	ldrb	r1, [r6, #8]
 800f562:	4638      	mov	r0, r7
 800f564:	f7fc f90e 	bl	800b784 <ucdr_serialize_uint8_t>
 800f568:	4605      	mov	r5, r0
 800f56a:	b130      	cbz	r0, 800f57a <uxr_serialize_CREATE_Payload+0xe6>
 800f56c:	7a33      	ldrb	r3, [r6, #8]
 800f56e:	2b02      	cmp	r3, #2
 800f570:	d011      	beq.n	800f596 <uxr_serialize_CREATE_Payload+0x102>
 800f572:	2b03      	cmp	r3, #3
 800f574:	d015      	beq.n	800f5a2 <uxr_serialize_CREATE_Payload+0x10e>
 800f576:	2b01      	cmp	r3, #1
 800f578:	d00d      	beq.n	800f596 <uxr_serialize_CREATE_Payload+0x102>
 800f57a:	f9b6 1210 	ldrsh.w	r1, [r6, #528]	@ 0x210
 800f57e:	4638      	mov	r0, r7
 800f580:	f7fc fe3c 	bl	800c1fc <ucdr_serialize_int16_t>
 800f584:	4028      	ands	r0, r5
 800f586:	4004      	ands	r4, r0
 800f588:	e7a6      	b.n	800f4d8 <uxr_serialize_CREATE_Payload+0x44>
 800f58a:	68f1      	ldr	r1, [r6, #12]
 800f58c:	4638      	mov	r0, r7
 800f58e:	f005 fba9 	bl	8014ce4 <ucdr_serialize_string>
 800f592:	4605      	mov	r5, r0
 800f594:	e7cd      	b.n	800f532 <uxr_serialize_CREATE_Payload+0x9e>
 800f596:	68f1      	ldr	r1, [r6, #12]
 800f598:	4638      	mov	r0, r7
 800f59a:	f005 fba3 	bl	8014ce4 <ucdr_serialize_string>
 800f59e:	4605      	mov	r5, r0
 800f5a0:	e7eb      	b.n	800f57a <uxr_serialize_CREATE_Payload+0xe6>
 800f5a2:	68f2      	ldr	r2, [r6, #12]
 800f5a4:	f106 0110 	add.w	r1, r6, #16
 800f5a8:	4638      	mov	r0, r7
 800f5aa:	f7fd fad3 	bl	800cb54 <ucdr_serialize_sequence_uint8_t>
 800f5ae:	4605      	mov	r5, r0
 800f5b0:	e7e3      	b.n	800f57a <uxr_serialize_CREATE_Payload+0xe6>
 800f5b2:	bf00      	nop

0800f5b4 <uxr_deserialize_GET_INFO_Payload>:
 800f5b4:	b570      	push	{r4, r5, r6, lr}
 800f5b6:	2202      	movs	r2, #2
 800f5b8:	4605      	mov	r5, r0
 800f5ba:	460e      	mov	r6, r1
 800f5bc:	f005 fa84 	bl	8014ac8 <ucdr_deserialize_array_uint8_t>
 800f5c0:	2202      	movs	r2, #2
 800f5c2:	18b1      	adds	r1, r6, r2
 800f5c4:	4604      	mov	r4, r0
 800f5c6:	4628      	mov	r0, r5
 800f5c8:	f005 fa7e 	bl	8014ac8 <ucdr_deserialize_array_uint8_t>
 800f5cc:	1d31      	adds	r1, r6, #4
 800f5ce:	4004      	ands	r4, r0
 800f5d0:	4628      	mov	r0, r5
 800f5d2:	f7fc fc1d 	bl	800be10 <ucdr_deserialize_uint32_t>
 800f5d6:	b2e4      	uxtb	r4, r4
 800f5d8:	4020      	ands	r0, r4
 800f5da:	bd70      	pop	{r4, r5, r6, pc}

0800f5dc <uxr_serialize_DELETE_Payload>:
 800f5dc:	b570      	push	{r4, r5, r6, lr}
 800f5de:	2202      	movs	r2, #2
 800f5e0:	4605      	mov	r5, r0
 800f5e2:	460e      	mov	r6, r1
 800f5e4:	f005 fa0c 	bl	8014a00 <ucdr_serialize_array_uint8_t>
 800f5e8:	2202      	movs	r2, #2
 800f5ea:	4604      	mov	r4, r0
 800f5ec:	18b1      	adds	r1, r6, r2
 800f5ee:	4628      	mov	r0, r5
 800f5f0:	f005 fa06 	bl	8014a00 <ucdr_serialize_array_uint8_t>
 800f5f4:	4020      	ands	r0, r4
 800f5f6:	b2c0      	uxtb	r0, r0
 800f5f8:	bd70      	pop	{r4, r5, r6, pc}
 800f5fa:	bf00      	nop

0800f5fc <uxr_deserialize_STATUS_AGENT_Payload>:
 800f5fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f600:	4605      	mov	r5, r0
 800f602:	460e      	mov	r6, r1
 800f604:	f7fc f8d4 	bl	800b7b0 <ucdr_deserialize_uint8_t>
 800f608:	1c71      	adds	r1, r6, #1
 800f60a:	4604      	mov	r4, r0
 800f60c:	4628      	mov	r0, r5
 800f60e:	f7fc f8cf 	bl	800b7b0 <ucdr_deserialize_uint8_t>
 800f612:	2204      	movs	r2, #4
 800f614:	18b1      	adds	r1, r6, r2
 800f616:	4680      	mov	r8, r0
 800f618:	4628      	mov	r0, r5
 800f61a:	f005 fa55 	bl	8014ac8 <ucdr_deserialize_array_uint8_t>
 800f61e:	f106 0108 	add.w	r1, r6, #8
 800f622:	4607      	mov	r7, r0
 800f624:	2202      	movs	r2, #2
 800f626:	4628      	mov	r0, r5
 800f628:	f005 fa4e 	bl	8014ac8 <ucdr_deserialize_array_uint8_t>
 800f62c:	ea04 0308 	and.w	r3, r4, r8
 800f630:	b2db      	uxtb	r3, r3
 800f632:	ea03 0407 	and.w	r4, r3, r7
 800f636:	2202      	movs	r2, #2
 800f638:	4607      	mov	r7, r0
 800f63a:	f106 010a 	add.w	r1, r6, #10
 800f63e:	4628      	mov	r0, r5
 800f640:	f005 fa42 	bl	8014ac8 <ucdr_deserialize_array_uint8_t>
 800f644:	f106 010c 	add.w	r1, r6, #12
 800f648:	4603      	mov	r3, r0
 800f64a:	4628      	mov	r0, r5
 800f64c:	461d      	mov	r5, r3
 800f64e:	f7fc f881 	bl	800b754 <ucdr_deserialize_bool>
 800f652:	403c      	ands	r4, r7
 800f654:	4025      	ands	r5, r4
 800f656:	4028      	ands	r0, r5
 800f658:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f65c <uxr_deserialize_STATUS_Payload>:
 800f65c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f660:	2202      	movs	r2, #2
 800f662:	4606      	mov	r6, r0
 800f664:	460f      	mov	r7, r1
 800f666:	f005 fa2f 	bl	8014ac8 <ucdr_deserialize_array_uint8_t>
 800f66a:	2202      	movs	r2, #2
 800f66c:	18b9      	adds	r1, r7, r2
 800f66e:	4605      	mov	r5, r0
 800f670:	4630      	mov	r0, r6
 800f672:	f005 fa29 	bl	8014ac8 <ucdr_deserialize_array_uint8_t>
 800f676:	1d39      	adds	r1, r7, #4
 800f678:	4680      	mov	r8, r0
 800f67a:	4630      	mov	r0, r6
 800f67c:	f7fc f898 	bl	800b7b0 <ucdr_deserialize_uint8_t>
 800f680:	1d79      	adds	r1, r7, #5
 800f682:	4604      	mov	r4, r0
 800f684:	4630      	mov	r0, r6
 800f686:	f7fc f893 	bl	800b7b0 <ucdr_deserialize_uint8_t>
 800f68a:	ea05 0508 	and.w	r5, r5, r8
 800f68e:	402c      	ands	r4, r5
 800f690:	4020      	ands	r0, r4
 800f692:	b2c0      	uxtb	r0, r0
 800f694:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f698 <uxr_serialize_INFO_Payload>:
 800f698:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f69c:	2202      	movs	r2, #2
 800f69e:	460c      	mov	r4, r1
 800f6a0:	4605      	mov	r5, r0
 800f6a2:	f005 f9ad 	bl	8014a00 <ucdr_serialize_array_uint8_t>
 800f6a6:	2202      	movs	r2, #2
 800f6a8:	18a1      	adds	r1, r4, r2
 800f6aa:	4680      	mov	r8, r0
 800f6ac:	4628      	mov	r0, r5
 800f6ae:	f005 f9a7 	bl	8014a00 <ucdr_serialize_array_uint8_t>
 800f6b2:	7921      	ldrb	r1, [r4, #4]
 800f6b4:	4607      	mov	r7, r0
 800f6b6:	4628      	mov	r0, r5
 800f6b8:	f7fc f864 	bl	800b784 <ucdr_serialize_uint8_t>
 800f6bc:	7961      	ldrb	r1, [r4, #5]
 800f6be:	4606      	mov	r6, r0
 800f6c0:	4628      	mov	r0, r5
 800f6c2:	f7fc f85f 	bl	800b784 <ucdr_serialize_uint8_t>
 800f6c6:	ea08 0807 	and.w	r8, r8, r7
 800f6ca:	ea06 0608 	and.w	r6, r6, r8
 800f6ce:	4006      	ands	r6, r0
 800f6d0:	7a21      	ldrb	r1, [r4, #8]
 800f6d2:	4628      	mov	r0, r5
 800f6d4:	f7fc f828 	bl	800b728 <ucdr_serialize_bool>
 800f6d8:	7a23      	ldrb	r3, [r4, #8]
 800f6da:	b2f7      	uxtb	r7, r6
 800f6dc:	4606      	mov	r6, r0
 800f6de:	b96b      	cbnz	r3, 800f6fc <uxr_serialize_INFO_Payload+0x64>
 800f6e0:	f894 121c 	ldrb.w	r1, [r4, #540]	@ 0x21c
 800f6e4:	4628      	mov	r0, r5
 800f6e6:	f7fc f81f 	bl	800b728 <ucdr_serialize_bool>
 800f6ea:	f894 321c 	ldrb.w	r3, [r4, #540]	@ 0x21c
 800f6ee:	4030      	ands	r0, r6
 800f6f0:	b2c6      	uxtb	r6, r0
 800f6f2:	b983      	cbnz	r3, 800f716 <uxr_serialize_INFO_Payload+0x7e>
 800f6f4:	ea06 0007 	and.w	r0, r6, r7
 800f6f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f6fc:	7b21      	ldrb	r1, [r4, #12]
 800f6fe:	4628      	mov	r0, r5
 800f700:	f7fc f840 	bl	800b784 <ucdr_serialize_uint8_t>
 800f704:	b188      	cbz	r0, 800f72a <uxr_serialize_INFO_Payload+0x92>
 800f706:	f104 010c 	add.w	r1, r4, #12
 800f70a:	4628      	mov	r0, r5
 800f70c:	f7ff fa06 	bl	800eb1c <uxr_serialize_ObjectVariant.part.0>
 800f710:	4030      	ands	r0, r6
 800f712:	b2c6      	uxtb	r6, r0
 800f714:	e7e4      	b.n	800f6e0 <uxr_serialize_INFO_Payload+0x48>
 800f716:	f504 7108 	add.w	r1, r4, #544	@ 0x220
 800f71a:	4628      	mov	r0, r5
 800f71c:	f7ff fdb2 	bl	800f284 <uxr_serialize_ActivityInfoVariant>
 800f720:	4006      	ands	r6, r0
 800f722:	ea06 0007 	and.w	r0, r6, r7
 800f726:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f72a:	4606      	mov	r6, r0
 800f72c:	e7d8      	b.n	800f6e0 <uxr_serialize_INFO_Payload+0x48>
 800f72e:	bf00      	nop

0800f730 <uxr_serialize_READ_DATA_Payload>:
 800f730:	b570      	push	{r4, r5, r6, lr}
 800f732:	2202      	movs	r2, #2
 800f734:	4605      	mov	r5, r0
 800f736:	460e      	mov	r6, r1
 800f738:	f005 f962 	bl	8014a00 <ucdr_serialize_array_uint8_t>
 800f73c:	2202      	movs	r2, #2
 800f73e:	18b1      	adds	r1, r6, r2
 800f740:	4604      	mov	r4, r0
 800f742:	4628      	mov	r0, r5
 800f744:	f005 f95c 	bl	8014a00 <ucdr_serialize_array_uint8_t>
 800f748:	1d31      	adds	r1, r6, #4
 800f74a:	4004      	ands	r4, r0
 800f74c:	4628      	mov	r0, r5
 800f74e:	f7ff fe5d 	bl	800f40c <uxr_serialize_ReadSpecification>
 800f752:	b2e4      	uxtb	r4, r4
 800f754:	4020      	ands	r0, r4
 800f756:	bd70      	pop	{r4, r5, r6, pc}

0800f758 <uxr_serialize_WRITE_DATA_Payload_Data>:
 800f758:	b570      	push	{r4, r5, r6, lr}
 800f75a:	2202      	movs	r2, #2
 800f75c:	4605      	mov	r5, r0
 800f75e:	460e      	mov	r6, r1
 800f760:	f005 f94e 	bl	8014a00 <ucdr_serialize_array_uint8_t>
 800f764:	2202      	movs	r2, #2
 800f766:	4604      	mov	r4, r0
 800f768:	18b1      	adds	r1, r6, r2
 800f76a:	4628      	mov	r0, r5
 800f76c:	f005 f948 	bl	8014a00 <ucdr_serialize_array_uint8_t>
 800f770:	4020      	ands	r0, r4
 800f772:	b2c0      	uxtb	r0, r0
 800f774:	bd70      	pop	{r4, r5, r6, pc}
 800f776:	bf00      	nop

0800f778 <uxr_serialize_ACKNACK_Payload>:
 800f778:	b570      	push	{r4, r5, r6, lr}
 800f77a:	460c      	mov	r4, r1
 800f77c:	460e      	mov	r6, r1
 800f77e:	f834 1b02 	ldrh.w	r1, [r4], #2
 800f782:	4605      	mov	r5, r0
 800f784:	f7fc f82a 	bl	800b7dc <ucdr_serialize_uint16_t>
 800f788:	2202      	movs	r2, #2
 800f78a:	4621      	mov	r1, r4
 800f78c:	4604      	mov	r4, r0
 800f78e:	4628      	mov	r0, r5
 800f790:	f005 f936 	bl	8014a00 <ucdr_serialize_array_uint8_t>
 800f794:	7931      	ldrb	r1, [r6, #4]
 800f796:	4004      	ands	r4, r0
 800f798:	4628      	mov	r0, r5
 800f79a:	f7fb fff3 	bl	800b784 <ucdr_serialize_uint8_t>
 800f79e:	b2e4      	uxtb	r4, r4
 800f7a0:	4020      	ands	r0, r4
 800f7a2:	bd70      	pop	{r4, r5, r6, pc}

0800f7a4 <uxr_deserialize_ACKNACK_Payload>:
 800f7a4:	b570      	push	{r4, r5, r6, lr}
 800f7a6:	4605      	mov	r5, r0
 800f7a8:	460e      	mov	r6, r1
 800f7aa:	f7fc f917 	bl	800b9dc <ucdr_deserialize_uint16_t>
 800f7ae:	2202      	movs	r2, #2
 800f7b0:	18b1      	adds	r1, r6, r2
 800f7b2:	4604      	mov	r4, r0
 800f7b4:	4628      	mov	r0, r5
 800f7b6:	f005 f987 	bl	8014ac8 <ucdr_deserialize_array_uint8_t>
 800f7ba:	1d31      	adds	r1, r6, #4
 800f7bc:	4004      	ands	r4, r0
 800f7be:	4628      	mov	r0, r5
 800f7c0:	f7fb fff6 	bl	800b7b0 <ucdr_deserialize_uint8_t>
 800f7c4:	b2e4      	uxtb	r4, r4
 800f7c6:	4020      	ands	r0, r4
 800f7c8:	bd70      	pop	{r4, r5, r6, pc}
 800f7ca:	bf00      	nop

0800f7cc <uxr_serialize_HEARTBEAT_Payload>:
 800f7cc:	b570      	push	{r4, r5, r6, lr}
 800f7ce:	460d      	mov	r5, r1
 800f7d0:	8809      	ldrh	r1, [r1, #0]
 800f7d2:	4606      	mov	r6, r0
 800f7d4:	f7fc f802 	bl	800b7dc <ucdr_serialize_uint16_t>
 800f7d8:	8869      	ldrh	r1, [r5, #2]
 800f7da:	4604      	mov	r4, r0
 800f7dc:	4630      	mov	r0, r6
 800f7de:	f7fb fffd 	bl	800b7dc <ucdr_serialize_uint16_t>
 800f7e2:	7929      	ldrb	r1, [r5, #4]
 800f7e4:	4004      	ands	r4, r0
 800f7e6:	4630      	mov	r0, r6
 800f7e8:	f7fb ffcc 	bl	800b784 <ucdr_serialize_uint8_t>
 800f7ec:	b2e4      	uxtb	r4, r4
 800f7ee:	4020      	ands	r0, r4
 800f7f0:	bd70      	pop	{r4, r5, r6, pc}
 800f7f2:	bf00      	nop

0800f7f4 <uxr_deserialize_HEARTBEAT_Payload>:
 800f7f4:	b570      	push	{r4, r5, r6, lr}
 800f7f6:	4605      	mov	r5, r0
 800f7f8:	460e      	mov	r6, r1
 800f7fa:	f7fc f8ef 	bl	800b9dc <ucdr_deserialize_uint16_t>
 800f7fe:	1cb1      	adds	r1, r6, #2
 800f800:	4604      	mov	r4, r0
 800f802:	4628      	mov	r0, r5
 800f804:	f7fc f8ea 	bl	800b9dc <ucdr_deserialize_uint16_t>
 800f808:	1d31      	adds	r1, r6, #4
 800f80a:	4004      	ands	r4, r0
 800f80c:	4628      	mov	r0, r5
 800f80e:	f7fb ffcf 	bl	800b7b0 <ucdr_deserialize_uint8_t>
 800f812:	b2e4      	uxtb	r4, r4
 800f814:	4020      	ands	r0, r4
 800f816:	bd70      	pop	{r4, r5, r6, pc}

0800f818 <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 800f818:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f81c:	4605      	mov	r5, r0
 800f81e:	460e      	mov	r6, r1
 800f820:	f7fc fe78 	bl	800c514 <ucdr_deserialize_int32_t>
 800f824:	1d31      	adds	r1, r6, #4
 800f826:	4607      	mov	r7, r0
 800f828:	4628      	mov	r0, r5
 800f82a:	f7fc faf1 	bl	800be10 <ucdr_deserialize_uint32_t>
 800f82e:	f106 0108 	add.w	r1, r6, #8
 800f832:	4680      	mov	r8, r0
 800f834:	4628      	mov	r0, r5
 800f836:	f7fc fe6d 	bl	800c514 <ucdr_deserialize_int32_t>
 800f83a:	f106 010c 	add.w	r1, r6, #12
 800f83e:	4604      	mov	r4, r0
 800f840:	4628      	mov	r0, r5
 800f842:	f7fc fae5 	bl	800be10 <ucdr_deserialize_uint32_t>
 800f846:	ea07 0708 	and.w	r7, r7, r8
 800f84a:	403c      	ands	r4, r7
 800f84c:	f106 0110 	add.w	r1, r6, #16
 800f850:	4004      	ands	r4, r0
 800f852:	4628      	mov	r0, r5
 800f854:	f7fc fe5e 	bl	800c514 <ucdr_deserialize_int32_t>
 800f858:	f106 0114 	add.w	r1, r6, #20
 800f85c:	4607      	mov	r7, r0
 800f85e:	4628      	mov	r0, r5
 800f860:	f7fc fad6 	bl	800be10 <ucdr_deserialize_uint32_t>
 800f864:	b2e4      	uxtb	r4, r4
 800f866:	403c      	ands	r4, r7
 800f868:	4020      	ands	r0, r4
 800f86a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f86e:	bf00      	nop

0800f870 <uxr_serialize_SampleIdentity>:
 800f870:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f874:	220c      	movs	r2, #12
 800f876:	4604      	mov	r4, r0
 800f878:	460d      	mov	r5, r1
 800f87a:	f005 f8c1 	bl	8014a00 <ucdr_serialize_array_uint8_t>
 800f87e:	2203      	movs	r2, #3
 800f880:	f105 010c 	add.w	r1, r5, #12
 800f884:	4607      	mov	r7, r0
 800f886:	4620      	mov	r0, r4
 800f888:	f005 f8ba 	bl	8014a00 <ucdr_serialize_array_uint8_t>
 800f88c:	7be9      	ldrb	r1, [r5, #15]
 800f88e:	4680      	mov	r8, r0
 800f890:	4620      	mov	r0, r4
 800f892:	f7fb ff77 	bl	800b784 <ucdr_serialize_uint8_t>
 800f896:	6929      	ldr	r1, [r5, #16]
 800f898:	4606      	mov	r6, r0
 800f89a:	4620      	mov	r0, r4
 800f89c:	f7fc fda2 	bl	800c3e4 <ucdr_serialize_int32_t>
 800f8a0:	6969      	ldr	r1, [r5, #20]
 800f8a2:	4603      	mov	r3, r0
 800f8a4:	4620      	mov	r0, r4
 800f8a6:	ea07 0708 	and.w	r7, r7, r8
 800f8aa:	461c      	mov	r4, r3
 800f8ac:	f7fc f980 	bl	800bbb0 <ucdr_serialize_uint32_t>
 800f8b0:	403e      	ands	r6, r7
 800f8b2:	4034      	ands	r4, r6
 800f8b4:	4020      	ands	r0, r4
 800f8b6:	b2c0      	uxtb	r0, r0
 800f8b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f8bc <uxr_deserialize_SampleIdentity>:
 800f8bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f8c0:	220c      	movs	r2, #12
 800f8c2:	4604      	mov	r4, r0
 800f8c4:	460d      	mov	r5, r1
 800f8c6:	f005 f8ff 	bl	8014ac8 <ucdr_deserialize_array_uint8_t>
 800f8ca:	2203      	movs	r2, #3
 800f8cc:	f105 010c 	add.w	r1, r5, #12
 800f8d0:	4607      	mov	r7, r0
 800f8d2:	4620      	mov	r0, r4
 800f8d4:	f005 f8f8 	bl	8014ac8 <ucdr_deserialize_array_uint8_t>
 800f8d8:	f105 010f 	add.w	r1, r5, #15
 800f8dc:	4680      	mov	r8, r0
 800f8de:	4620      	mov	r0, r4
 800f8e0:	f7fb ff66 	bl	800b7b0 <ucdr_deserialize_uint8_t>
 800f8e4:	f105 0110 	add.w	r1, r5, #16
 800f8e8:	4606      	mov	r6, r0
 800f8ea:	4620      	mov	r0, r4
 800f8ec:	f7fc fe12 	bl	800c514 <ucdr_deserialize_int32_t>
 800f8f0:	f105 0114 	add.w	r1, r5, #20
 800f8f4:	4603      	mov	r3, r0
 800f8f6:	4620      	mov	r0, r4
 800f8f8:	ea07 0708 	and.w	r7, r7, r8
 800f8fc:	461c      	mov	r4, r3
 800f8fe:	f7fc fa87 	bl	800be10 <ucdr_deserialize_uint32_t>
 800f902:	403e      	ands	r6, r7
 800f904:	4034      	ands	r4, r6
 800f906:	4020      	ands	r0, r4
 800f908:	b2c0      	uxtb	r0, r0
 800f90a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f90e:	bf00      	nop

0800f910 <rcl_client_get_rmw_handle>:
 800f910:	b118      	cbz	r0, 800f91a <rcl_client_get_rmw_handle+0xa>
 800f912:	6800      	ldr	r0, [r0, #0]
 800f914:	b108      	cbz	r0, 800f91a <rcl_client_get_rmw_handle+0xa>
 800f916:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 800f91a:	4770      	bx	lr

0800f91c <rcl_send_request>:
 800f91c:	b570      	push	{r4, r5, r6, lr}
 800f91e:	b082      	sub	sp, #8
 800f920:	b1e8      	cbz	r0, 800f95e <rcl_send_request+0x42>
 800f922:	4604      	mov	r4, r0
 800f924:	6800      	ldr	r0, [r0, #0]
 800f926:	b1d0      	cbz	r0, 800f95e <rcl_send_request+0x42>
 800f928:	f8d0 3108 	ldr.w	r3, [r0, #264]	@ 0x108
 800f92c:	b1bb      	cbz	r3, 800f95e <rcl_send_request+0x42>
 800f92e:	460e      	mov	r6, r1
 800f930:	b1d1      	cbz	r1, 800f968 <rcl_send_request+0x4c>
 800f932:	4615      	mov	r5, r2
 800f934:	b1c2      	cbz	r2, 800f968 <rcl_send_request+0x4c>
 800f936:	2105      	movs	r1, #5
 800f938:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 800f93c:	f002 ff80 	bl	8012840 <__atomic_load_8>
 800f940:	6823      	ldr	r3, [r4, #0]
 800f942:	e9c5 0100 	strd	r0, r1, [r5]
 800f946:	462a      	mov	r2, r5
 800f948:	4631      	mov	r1, r6
 800f94a:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 800f94e:	f004 f92b 	bl	8013ba8 <rmw_send_request>
 800f952:	4606      	mov	r6, r0
 800f954:	b160      	cbz	r0, 800f970 <rcl_send_request+0x54>
 800f956:	2601      	movs	r6, #1
 800f958:	4630      	mov	r0, r6
 800f95a:	b002      	add	sp, #8
 800f95c:	bd70      	pop	{r4, r5, r6, pc}
 800f95e:	f44f 76fa 	mov.w	r6, #500	@ 0x1f4
 800f962:	4630      	mov	r0, r6
 800f964:	b002      	add	sp, #8
 800f966:	bd70      	pop	{r4, r5, r6, pc}
 800f968:	260b      	movs	r6, #11
 800f96a:	4630      	mov	r0, r6
 800f96c:	b002      	add	sp, #8
 800f96e:	bd70      	pop	{r4, r5, r6, pc}
 800f970:	6820      	ldr	r0, [r4, #0]
 800f972:	2105      	movs	r1, #5
 800f974:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f978:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 800f97c:	9100      	str	r1, [sp, #0]
 800f97e:	f002 ffcb 	bl	8012918 <__atomic_exchange_8>
 800f982:	4630      	mov	r0, r6
 800f984:	b002      	add	sp, #8
 800f986:	bd70      	pop	{r4, r5, r6, pc}

0800f988 <rcl_take_response>:
 800f988:	b570      	push	{r4, r5, r6, lr}
 800f98a:	468e      	mov	lr, r1
 800f98c:	460c      	mov	r4, r1
 800f98e:	4616      	mov	r6, r2
 800f990:	4605      	mov	r5, r0
 800f992:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800f996:	b08c      	sub	sp, #48	@ 0x30
 800f998:	f10d 0c18 	add.w	ip, sp, #24
 800f99c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f9a0:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800f9a4:	e88c 0003 	stmia.w	ip, {r0, r1}
 800f9a8:	b35d      	cbz	r5, 800fa02 <rcl_take_response+0x7a>
 800f9aa:	682b      	ldr	r3, [r5, #0]
 800f9ac:	b34b      	cbz	r3, 800fa02 <rcl_take_response+0x7a>
 800f9ae:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 800f9b2:	b330      	cbz	r0, 800fa02 <rcl_take_response+0x7a>
 800f9b4:	b346      	cbz	r6, 800fa08 <rcl_take_response+0x80>
 800f9b6:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 800fa10 <rcl_take_response+0x88>
 800f9ba:	2300      	movs	r3, #0
 800f9bc:	f88d 3007 	strb.w	r3, [sp, #7]
 800f9c0:	4632      	mov	r2, r6
 800f9c2:	f10d 0307 	add.w	r3, sp, #7
 800f9c6:	a902      	add	r1, sp, #8
 800f9c8:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f9cc:	ed8d 7b04 	vstr	d7, [sp, #16]
 800f9d0:	f004 f9f2 	bl	8013db8 <rmw_take_response>
 800f9d4:	4605      	mov	r5, r0
 800f9d6:	b9c8      	cbnz	r0, 800fa0c <rcl_take_response+0x84>
 800f9d8:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800f9dc:	f240 13f5 	movw	r3, #501	@ 0x1f5
 800f9e0:	2a00      	cmp	r2, #0
 800f9e2:	bf08      	it	eq
 800f9e4:	461d      	moveq	r5, r3
 800f9e6:	f10d 0e18 	add.w	lr, sp, #24
 800f9ea:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800f9ee:	46a4      	mov	ip, r4
 800f9f0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f9f4:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800f9f8:	e88c 0003 	stmia.w	ip, {r0, r1}
 800f9fc:	4628      	mov	r0, r5
 800f9fe:	b00c      	add	sp, #48	@ 0x30
 800fa00:	bd70      	pop	{r4, r5, r6, pc}
 800fa02:	f44f 75fa 	mov.w	r5, #500	@ 0x1f4
 800fa06:	e7ee      	b.n	800f9e6 <rcl_take_response+0x5e>
 800fa08:	250b      	movs	r5, #11
 800fa0a:	e7ec      	b.n	800f9e6 <rcl_take_response+0x5e>
 800fa0c:	2501      	movs	r5, #1
 800fa0e:	e7ea      	b.n	800f9e6 <rcl_take_response+0x5e>
	...

0800fa18 <rcl_client_is_valid>:
 800fa18:	b130      	cbz	r0, 800fa28 <rcl_client_is_valid+0x10>
 800fa1a:	6800      	ldr	r0, [r0, #0]
 800fa1c:	b120      	cbz	r0, 800fa28 <rcl_client_is_valid+0x10>
 800fa1e:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 800fa22:	3800      	subs	r0, #0
 800fa24:	bf18      	it	ne
 800fa26:	2001      	movne	r0, #1
 800fa28:	4770      	bx	lr
 800fa2a:	bf00      	nop

0800fa2c <rcl_convert_rmw_ret_to_rcl_ret>:
 800fa2c:	280b      	cmp	r0, #11
 800fa2e:	dc0d      	bgt.n	800fa4c <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 800fa30:	2800      	cmp	r0, #0
 800fa32:	db09      	blt.n	800fa48 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 800fa34:	280b      	cmp	r0, #11
 800fa36:	d807      	bhi.n	800fa48 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 800fa38:	e8df f000 	tbb	[pc, r0]
 800fa3c:	07060607 	.word	0x07060607
 800fa40:	06060606 	.word	0x06060606
 800fa44:	07070606 	.word	0x07070606
 800fa48:	2001      	movs	r0, #1
 800fa4a:	4770      	bx	lr
 800fa4c:	28cb      	cmp	r0, #203	@ 0xcb
 800fa4e:	bf18      	it	ne
 800fa50:	2001      	movne	r0, #1
 800fa52:	4770      	bx	lr

0800fa54 <rcl_get_zero_initialized_context>:
 800fa54:	4a03      	ldr	r2, [pc, #12]	@ (800fa64 <rcl_get_zero_initialized_context+0x10>)
 800fa56:	4603      	mov	r3, r0
 800fa58:	e892 0003 	ldmia.w	r2, {r0, r1}
 800fa5c:	e883 0003 	stmia.w	r3, {r0, r1}
 800fa60:	4618      	mov	r0, r3
 800fa62:	4770      	bx	lr
 800fa64:	08018c84 	.word	0x08018c84

0800fa68 <rcl_context_is_valid>:
 800fa68:	b118      	cbz	r0, 800fa72 <rcl_context_is_valid+0xa>
 800fa6a:	6840      	ldr	r0, [r0, #4]
 800fa6c:	3800      	subs	r0, #0
 800fa6e:	bf18      	it	ne
 800fa70:	2001      	movne	r0, #1
 800fa72:	4770      	bx	lr

0800fa74 <__cleanup_context>:
 800fa74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fa78:	4606      	mov	r6, r0
 800fa7a:	6800      	ldr	r0, [r0, #0]
 800fa7c:	2300      	movs	r3, #0
 800fa7e:	6073      	str	r3, [r6, #4]
 800fa80:	2800      	cmp	r0, #0
 800fa82:	d049      	beq.n	800fb18 <__cleanup_context+0xa4>
 800fa84:	6947      	ldr	r7, [r0, #20]
 800fa86:	f8d0 8004 	ldr.w	r8, [r0, #4]
 800fa8a:	f8d0 9010 	ldr.w	r9, [r0, #16]
 800fa8e:	b137      	cbz	r7, 800fa9e <__cleanup_context+0x2a>
 800fa90:	3014      	adds	r0, #20
 800fa92:	f000 f9bb 	bl	800fe0c <rcl_init_options_fini>
 800fa96:	4607      	mov	r7, r0
 800fa98:	2800      	cmp	r0, #0
 800fa9a:	d144      	bne.n	800fb26 <__cleanup_context+0xb2>
 800fa9c:	6830      	ldr	r0, [r6, #0]
 800fa9e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800faa0:	b143      	cbz	r3, 800fab4 <__cleanup_context+0x40>
 800faa2:	3028      	adds	r0, #40	@ 0x28
 800faa4:	f003 fec8 	bl	8013838 <rmw_context_fini>
 800faa8:	b118      	cbz	r0, 800fab2 <__cleanup_context+0x3e>
 800faaa:	2f00      	cmp	r7, #0
 800faac:	d03e      	beq.n	800fb2c <__cleanup_context+0xb8>
 800faae:	f7fa feb7 	bl	800a820 <rcutils_reset_error>
 800fab2:	6830      	ldr	r0, [r6, #0]
 800fab4:	6a03      	ldr	r3, [r0, #32]
 800fab6:	b1db      	cbz	r3, 800faf0 <__cleanup_context+0x7c>
 800fab8:	e9d0 2c06 	ldrd	r2, ip, [r0, #24]
 800fabc:	2a01      	cmp	r2, #1
 800fabe:	f17c 0100 	sbcs.w	r1, ip, #0
 800fac2:	db11      	blt.n	800fae8 <__cleanup_context+0x74>
 800fac4:	2400      	movs	r4, #0
 800fac6:	4625      	mov	r5, r4
 800fac8:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800facc:	4649      	mov	r1, r9
 800face:	b1b8      	cbz	r0, 800fb00 <__cleanup_context+0x8c>
 800fad0:	47c0      	blx	r8
 800fad2:	6833      	ldr	r3, [r6, #0]
 800fad4:	e9d3 2c06 	ldrd	r2, ip, [r3, #24]
 800fad8:	3401      	adds	r4, #1
 800fada:	f145 0500 	adc.w	r5, r5, #0
 800fade:	4294      	cmp	r4, r2
 800fae0:	eb75 010c 	sbcs.w	r1, r5, ip
 800fae4:	6a1b      	ldr	r3, [r3, #32]
 800fae6:	dbef      	blt.n	800fac8 <__cleanup_context+0x54>
 800fae8:	4618      	mov	r0, r3
 800faea:	4649      	mov	r1, r9
 800faec:	47c0      	blx	r8
 800faee:	6830      	ldr	r0, [r6, #0]
 800faf0:	4649      	mov	r1, r9
 800faf2:	47c0      	blx	r8
 800faf4:	2300      	movs	r3, #0
 800faf6:	e9c6 3300 	strd	r3, r3, [r6]
 800fafa:	4638      	mov	r0, r7
 800fafc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fb00:	3401      	adds	r4, #1
 800fb02:	f145 0500 	adc.w	r5, r5, #0
 800fb06:	4294      	cmp	r4, r2
 800fb08:	eb75 010c 	sbcs.w	r1, r5, ip
 800fb0c:	dbdc      	blt.n	800fac8 <__cleanup_context+0x54>
 800fb0e:	4618      	mov	r0, r3
 800fb10:	4649      	mov	r1, r9
 800fb12:	47c0      	blx	r8
 800fb14:	6830      	ldr	r0, [r6, #0]
 800fb16:	e7eb      	b.n	800faf0 <__cleanup_context+0x7c>
 800fb18:	4607      	mov	r7, r0
 800fb1a:	2300      	movs	r3, #0
 800fb1c:	e9c6 3300 	strd	r3, r3, [r6]
 800fb20:	4638      	mov	r0, r7
 800fb22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fb26:	f7fa fe7b 	bl	800a820 <rcutils_reset_error>
 800fb2a:	e7b7      	b.n	800fa9c <__cleanup_context+0x28>
 800fb2c:	f7ff ff7e 	bl	800fa2c <rcl_convert_rmw_ret_to_rcl_ret>
 800fb30:	4607      	mov	r7, r0
 800fb32:	e7bc      	b.n	800faae <__cleanup_context+0x3a>

0800fb34 <rcl_init>:
 800fb34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fb38:	1e05      	subs	r5, r0, #0
 800fb3a:	b09e      	sub	sp, #120	@ 0x78
 800fb3c:	460e      	mov	r6, r1
 800fb3e:	4690      	mov	r8, r2
 800fb40:	461f      	mov	r7, r3
 800fb42:	f340 809c 	ble.w	800fc7e <rcl_init+0x14a>
 800fb46:	2900      	cmp	r1, #0
 800fb48:	f000 809c 	beq.w	800fc84 <rcl_init+0x150>
 800fb4c:	f1a1 0e04 	sub.w	lr, r1, #4
 800fb50:	f04f 0c00 	mov.w	ip, #0
 800fb54:	f85e 4f04 	ldr.w	r4, [lr, #4]!
 800fb58:	f10c 0c01 	add.w	ip, ip, #1
 800fb5c:	2c00      	cmp	r4, #0
 800fb5e:	f000 8091 	beq.w	800fc84 <rcl_init+0x150>
 800fb62:	4565      	cmp	r5, ip
 800fb64:	d1f6      	bne.n	800fb54 <rcl_init+0x20>
 800fb66:	f1b8 0f00 	cmp.w	r8, #0
 800fb6a:	f000 808b 	beq.w	800fc84 <rcl_init+0x150>
 800fb6e:	f8d8 4000 	ldr.w	r4, [r8]
 800fb72:	2c00      	cmp	r4, #0
 800fb74:	f000 8086 	beq.w	800fc84 <rcl_init+0x150>
 800fb78:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800fb7a:	f10d 0c64 	add.w	ip, sp, #100	@ 0x64
 800fb7e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800fb82:	6823      	ldr	r3, [r4, #0]
 800fb84:	f8cc 3000 	str.w	r3, [ip]
 800fb88:	a819      	add	r0, sp, #100	@ 0x64
 800fb8a:	f7fa fe25 	bl	800a7d8 <rcutils_allocator_is_valid>
 800fb8e:	2800      	cmp	r0, #0
 800fb90:	d078      	beq.n	800fc84 <rcl_init+0x150>
 800fb92:	2f00      	cmp	r7, #0
 800fb94:	d076      	beq.n	800fc84 <rcl_init+0x150>
 800fb96:	683b      	ldr	r3, [r7, #0]
 800fb98:	2b00      	cmp	r3, #0
 800fb9a:	d178      	bne.n	800fc8e <rcl_init+0x15a>
 800fb9c:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	@ 0x70
 800fba0:	2178      	movs	r1, #120	@ 0x78
 800fba2:	2001      	movs	r0, #1
 800fba4:	4798      	blx	r3
 800fba6:	4604      	mov	r4, r0
 800fba8:	6038      	str	r0, [r7, #0]
 800fbaa:	2800      	cmp	r0, #0
 800fbac:	f000 80b6 	beq.w	800fd1c <rcl_init+0x1e8>
 800fbb0:	a802      	add	r0, sp, #8
 800fbb2:	f003 f995 	bl	8012ee0 <rmw_get_zero_initialized_context>
 800fbb6:	a902      	add	r1, sp, #8
 800fbb8:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800fbbc:	2250      	movs	r2, #80	@ 0x50
 800fbbe:	ac19      	add	r4, sp, #100	@ 0x64
 800fbc0:	f007 ffbb 	bl	8017b3a <memcpy>
 800fbc4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800fbc6:	f8d7 e000 	ldr.w	lr, [r7]
 800fbca:	46f4      	mov	ip, lr
 800fbcc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800fbd0:	6823      	ldr	r3, [r4, #0]
 800fbd2:	f8cc 3000 	str.w	r3, [ip]
 800fbd6:	f10e 0114 	add.w	r1, lr, #20
 800fbda:	4640      	mov	r0, r8
 800fbdc:	f000 f940 	bl	800fe60 <rcl_init_options_copy>
 800fbe0:	4604      	mov	r4, r0
 800fbe2:	2800      	cmp	r0, #0
 800fbe4:	d144      	bne.n	800fc70 <rcl_init+0x13c>
 800fbe6:	f8d7 9000 	ldr.w	r9, [r7]
 800fbea:	ea4f 78e5 	mov.w	r8, r5, asr #31
 800fbee:	f8c9 0020 	str.w	r0, [r9, #32]
 800fbf2:	f8c9 5018 	str.w	r5, [r9, #24]
 800fbf6:	f8c9 801c 	str.w	r8, [r9, #28]
 800fbfa:	2d00      	cmp	r5, #0
 800fbfc:	d04e      	beq.n	800fc9c <rcl_init+0x168>
 800fbfe:	2e00      	cmp	r6, #0
 800fc00:	d04c      	beq.n	800fc9c <rcl_init+0x168>
 800fc02:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	@ 0x70
 800fc06:	2104      	movs	r1, #4
 800fc08:	4628      	mov	r0, r5
 800fc0a:	4798      	blx	r3
 800fc0c:	f8c9 0020 	str.w	r0, [r9, #32]
 800fc10:	f8d7 9000 	ldr.w	r9, [r7]
 800fc14:	f8d9 3020 	ldr.w	r3, [r9, #32]
 800fc18:	46ca      	mov	sl, r9
 800fc1a:	b343      	cbz	r3, 800fc6e <rcl_init+0x13a>
 800fc1c:	2d01      	cmp	r5, #1
 800fc1e:	f178 0300 	sbcs.w	r3, r8, #0
 800fc22:	db3b      	blt.n	800fc9c <rcl_init+0x168>
 800fc24:	2400      	movs	r4, #0
 800fc26:	3e04      	subs	r6, #4
 800fc28:	46a1      	mov	r9, r4
 800fc2a:	e00b      	b.n	800fc44 <rcl_init+0x110>
 800fc2c:	6831      	ldr	r1, [r6, #0]
 800fc2e:	f007 ff84 	bl	8017b3a <memcpy>
 800fc32:	3401      	adds	r4, #1
 800fc34:	f149 0900 	adc.w	r9, r9, #0
 800fc38:	45c8      	cmp	r8, r9
 800fc3a:	bf08      	it	eq
 800fc3c:	42a5      	cmpeq	r5, r4
 800fc3e:	d02b      	beq.n	800fc98 <rcl_init+0x164>
 800fc40:	f8d7 a000 	ldr.w	sl, [r7]
 800fc44:	f856 0f04 	ldr.w	r0, [r6, #4]!
 800fc48:	f7f0 facc 	bl	80001e4 <strlen>
 800fc4c:	1c42      	adds	r2, r0, #1
 800fc4e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800fc50:	991d      	ldr	r1, [sp, #116]	@ 0x74
 800fc52:	f8da a020 	ldr.w	sl, [sl, #32]
 800fc56:	9201      	str	r2, [sp, #4]
 800fc58:	4610      	mov	r0, r2
 800fc5a:	4798      	blx	r3
 800fc5c:	683b      	ldr	r3, [r7, #0]
 800fc5e:	f84a 0024 	str.w	r0, [sl, r4, lsl #2]
 800fc62:	6a1b      	ldr	r3, [r3, #32]
 800fc64:	9a01      	ldr	r2, [sp, #4]
 800fc66:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800fc6a:	2800      	cmp	r0, #0
 800fc6c:	d1de      	bne.n	800fc2c <rcl_init+0xf8>
 800fc6e:	240a      	movs	r4, #10
 800fc70:	4638      	mov	r0, r7
 800fc72:	f7ff feff 	bl	800fa74 <__cleanup_context>
 800fc76:	4620      	mov	r0, r4
 800fc78:	b01e      	add	sp, #120	@ 0x78
 800fc7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fc7e:	2900      	cmp	r1, #0
 800fc80:	f43f af71 	beq.w	800fb66 <rcl_init+0x32>
 800fc84:	240b      	movs	r4, #11
 800fc86:	4620      	mov	r0, r4
 800fc88:	b01e      	add	sp, #120	@ 0x78
 800fc8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fc8e:	2464      	movs	r4, #100	@ 0x64
 800fc90:	4620      	mov	r0, r4
 800fc92:	b01e      	add	sp, #120	@ 0x78
 800fc94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fc98:	f8d7 9000 	ldr.w	r9, [r7]
 800fc9c:	4926      	ldr	r1, [pc, #152]	@ (800fd38 <rcl_init+0x204>)
 800fc9e:	680b      	ldr	r3, [r1, #0]
 800fca0:	3301      	adds	r3, #1
 800fca2:	d036      	beq.n	800fd12 <rcl_init+0x1de>
 800fca4:	600b      	str	r3, [r1, #0]
 800fca6:	461a      	mov	r2, r3
 800fca8:	2400      	movs	r4, #0
 800fcaa:	f8d9 0014 	ldr.w	r0, [r9, #20]
 800fcae:	607b      	str	r3, [r7, #4]
 800fcb0:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800fcb2:	3301      	adds	r3, #1
 800fcb4:	e9c0 2406 	strd	r2, r4, [r0, #24]
 800fcb8:	d034      	beq.n	800fd24 <rcl_init+0x1f0>
 800fcba:	f890 3030 	ldrb.w	r3, [r0, #48]	@ 0x30
 800fcbe:	b93b      	cbnz	r3, 800fcd0 <rcl_init+0x19c>
 800fcc0:	3030      	adds	r0, #48	@ 0x30
 800fcc2:	f000 f939 	bl	800ff38 <rcl_get_localhost_only>
 800fcc6:	4604      	mov	r4, r0
 800fcc8:	2800      	cmp	r0, #0
 800fcca:	d1d1      	bne.n	800fc70 <rcl_init+0x13c>
 800fccc:	683b      	ldr	r3, [r7, #0]
 800fcce:	6958      	ldr	r0, [r3, #20]
 800fcd0:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 800fcd2:	aa18      	add	r2, sp, #96	@ 0x60
 800fcd4:	a917      	add	r1, sp, #92	@ 0x5c
 800fcd6:	f001 fa4d 	bl	8011174 <rcl_validate_enclave_name>
 800fcda:	4604      	mov	r4, r0
 800fcdc:	2800      	cmp	r0, #0
 800fcde:	d1c7      	bne.n	800fc70 <rcl_init+0x13c>
 800fce0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800fce2:	b9eb      	cbnz	r3, 800fd20 <rcl_init+0x1ec>
 800fce4:	6839      	ldr	r1, [r7, #0]
 800fce6:	694b      	ldr	r3, [r1, #20]
 800fce8:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 800fcea:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 800fcee:	f000 fc3d 	bl	801056c <rcl_get_security_options_from_environment>
 800fcf2:	4604      	mov	r4, r0
 800fcf4:	2800      	cmp	r0, #0
 800fcf6:	d1bb      	bne.n	800fc70 <rcl_init+0x13c>
 800fcf8:	6839      	ldr	r1, [r7, #0]
 800fcfa:	6948      	ldr	r0, [r1, #20]
 800fcfc:	3128      	adds	r1, #40	@ 0x28
 800fcfe:	3018      	adds	r0, #24
 800fd00:	f003 fc64 	bl	80135cc <rmw_init>
 800fd04:	4604      	mov	r4, r0
 800fd06:	2800      	cmp	r0, #0
 800fd08:	d0bd      	beq.n	800fc86 <rcl_init+0x152>
 800fd0a:	f7ff fe8f 	bl	800fa2c <rcl_convert_rmw_ret_to_rcl_ret>
 800fd0e:	4604      	mov	r4, r0
 800fd10:	e7ae      	b.n	800fc70 <rcl_init+0x13c>
 800fd12:	2201      	movs	r2, #1
 800fd14:	461c      	mov	r4, r3
 800fd16:	600a      	str	r2, [r1, #0]
 800fd18:	4613      	mov	r3, r2
 800fd1a:	e7c6      	b.n	800fcaa <rcl_init+0x176>
 800fd1c:	240a      	movs	r4, #10
 800fd1e:	e7b2      	b.n	800fc86 <rcl_init+0x152>
 800fd20:	2401      	movs	r4, #1
 800fd22:	e7a5      	b.n	800fc70 <rcl_init+0x13c>
 800fd24:	3024      	adds	r0, #36	@ 0x24
 800fd26:	f006 fbe1 	bl	80164ec <rcl_get_default_domain_id>
 800fd2a:	4604      	mov	r4, r0
 800fd2c:	2800      	cmp	r0, #0
 800fd2e:	d19f      	bne.n	800fc70 <rcl_init+0x13c>
 800fd30:	683b      	ldr	r3, [r7, #0]
 800fd32:	6958      	ldr	r0, [r3, #20]
 800fd34:	e7c1      	b.n	800fcba <rcl_init+0x186>
 800fd36:	bf00      	nop
 800fd38:	2000bf5c 	.word	0x2000bf5c

0800fd3c <rcl_get_zero_initialized_init_options>:
 800fd3c:	2000      	movs	r0, #0
 800fd3e:	4770      	bx	lr

0800fd40 <rcl_init_options_init>:
 800fd40:	b084      	sub	sp, #16
 800fd42:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fd44:	b097      	sub	sp, #92	@ 0x5c
 800fd46:	ae1d      	add	r6, sp, #116	@ 0x74
 800fd48:	e886 000e 	stmia.w	r6, {r1, r2, r3}
 800fd4c:	2800      	cmp	r0, #0
 800fd4e:	d058      	beq.n	800fe02 <rcl_init_options_init+0xc2>
 800fd50:	6803      	ldr	r3, [r0, #0]
 800fd52:	4605      	mov	r5, r0
 800fd54:	b133      	cbz	r3, 800fd64 <rcl_init_options_init+0x24>
 800fd56:	2464      	movs	r4, #100	@ 0x64
 800fd58:	4620      	mov	r0, r4
 800fd5a:	b017      	add	sp, #92	@ 0x5c
 800fd5c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800fd60:	b004      	add	sp, #16
 800fd62:	4770      	bx	lr
 800fd64:	4630      	mov	r0, r6
 800fd66:	f7fa fd37 	bl	800a7d8 <rcutils_allocator_is_valid>
 800fd6a:	2800      	cmp	r0, #0
 800fd6c:	d049      	beq.n	800fe02 <rcl_init_options_init+0xc2>
 800fd6e:	46b4      	mov	ip, r6
 800fd70:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800fd74:	ac11      	add	r4, sp, #68	@ 0x44
 800fd76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fd78:	f8dc 3000 	ldr.w	r3, [ip]
 800fd7c:	6023      	str	r3, [r4, #0]
 800fd7e:	9921      	ldr	r1, [sp, #132]	@ 0x84
 800fd80:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800fd82:	2050      	movs	r0, #80	@ 0x50
 800fd84:	4798      	blx	r3
 800fd86:	4604      	mov	r4, r0
 800fd88:	6028      	str	r0, [r5, #0]
 800fd8a:	2800      	cmp	r0, #0
 800fd8c:	d03b      	beq.n	800fe06 <rcl_init_options_init+0xc6>
 800fd8e:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 800fd92:	4686      	mov	lr, r0
 800fd94:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800fd98:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800fd9c:	f8dc 3000 	ldr.w	r3, [ip]
 800fda0:	f8ce 3000 	str.w	r3, [lr]
 800fda4:	a802      	add	r0, sp, #8
 800fda6:	f003 f8ab 	bl	8012f00 <rmw_get_zero_initialized_init_options>
 800fdaa:	f10d 0e08 	add.w	lr, sp, #8
 800fdae:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800fdb2:	f104 0c18 	add.w	ip, r4, #24
 800fdb6:	682f      	ldr	r7, [r5, #0]
 800fdb8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800fdbc:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800fdc0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800fdc4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800fdc8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800fdcc:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800fdd0:	ac20      	add	r4, sp, #128	@ 0x80
 800fdd2:	e88c 0003 	stmia.w	ip, {r0, r1}
 800fdd6:	e894 0003 	ldmia.w	r4, {r0, r1}
 800fdda:	e88d 0003 	stmia.w	sp, {r0, r1}
 800fdde:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800fde2:	f107 0018 	add.w	r0, r7, #24
 800fde6:	f003 faf9 	bl	80133dc <rmw_init_options_init>
 800fdea:	4604      	mov	r4, r0
 800fdec:	2800      	cmp	r0, #0
 800fdee:	d0b3      	beq.n	800fd58 <rcl_init_options_init+0x18>
 800fdf0:	9921      	ldr	r1, [sp, #132]	@ 0x84
 800fdf2:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800fdf4:	6828      	ldr	r0, [r5, #0]
 800fdf6:	4798      	blx	r3
 800fdf8:	4620      	mov	r0, r4
 800fdfa:	f7ff fe17 	bl	800fa2c <rcl_convert_rmw_ret_to_rcl_ret>
 800fdfe:	4604      	mov	r4, r0
 800fe00:	e7aa      	b.n	800fd58 <rcl_init_options_init+0x18>
 800fe02:	240b      	movs	r4, #11
 800fe04:	e7a8      	b.n	800fd58 <rcl_init_options_init+0x18>
 800fe06:	240a      	movs	r4, #10
 800fe08:	e7a6      	b.n	800fd58 <rcl_init_options_init+0x18>
 800fe0a:	bf00      	nop

0800fe0c <rcl_init_options_fini>:
 800fe0c:	b530      	push	{r4, r5, lr}
 800fe0e:	b087      	sub	sp, #28
 800fe10:	b1f0      	cbz	r0, 800fe50 <rcl_init_options_fini+0x44>
 800fe12:	6803      	ldr	r3, [r0, #0]
 800fe14:	4604      	mov	r4, r0
 800fe16:	b1db      	cbz	r3, 800fe50 <rcl_init_options_fini+0x44>
 800fe18:	469c      	mov	ip, r3
 800fe1a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800fe1e:	f10d 0e04 	add.w	lr, sp, #4
 800fe22:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800fe26:	f8dc 3000 	ldr.w	r3, [ip]
 800fe2a:	f8ce 3000 	str.w	r3, [lr]
 800fe2e:	a801      	add	r0, sp, #4
 800fe30:	f7fa fcd2 	bl	800a7d8 <rcutils_allocator_is_valid>
 800fe34:	b160      	cbz	r0, 800fe50 <rcl_init_options_fini+0x44>
 800fe36:	6820      	ldr	r0, [r4, #0]
 800fe38:	3018      	adds	r0, #24
 800fe3a:	f003 fb7f 	bl	801353c <rmw_init_options_fini>
 800fe3e:	4605      	mov	r5, r0
 800fe40:	b950      	cbnz	r0, 800fe58 <rcl_init_options_fini+0x4c>
 800fe42:	6820      	ldr	r0, [r4, #0]
 800fe44:	9b02      	ldr	r3, [sp, #8]
 800fe46:	9905      	ldr	r1, [sp, #20]
 800fe48:	4798      	blx	r3
 800fe4a:	4628      	mov	r0, r5
 800fe4c:	b007      	add	sp, #28
 800fe4e:	bd30      	pop	{r4, r5, pc}
 800fe50:	250b      	movs	r5, #11
 800fe52:	4628      	mov	r0, r5
 800fe54:	b007      	add	sp, #28
 800fe56:	bd30      	pop	{r4, r5, pc}
 800fe58:	f7ff fde8 	bl	800fa2c <rcl_convert_rmw_ret_to_rcl_ret>
 800fe5c:	4605      	mov	r5, r0
 800fe5e:	e7f8      	b.n	800fe52 <rcl_init_options_fini+0x46>

0800fe60 <rcl_init_options_copy>:
 800fe60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fe64:	b094      	sub	sp, #80	@ 0x50
 800fe66:	2800      	cmp	r0, #0
 800fe68:	d058      	beq.n	800ff1c <rcl_init_options_copy+0xbc>
 800fe6a:	4604      	mov	r4, r0
 800fe6c:	6800      	ldr	r0, [r0, #0]
 800fe6e:	2800      	cmp	r0, #0
 800fe70:	d054      	beq.n	800ff1c <rcl_init_options_copy+0xbc>
 800fe72:	460e      	mov	r6, r1
 800fe74:	f7fa fcb0 	bl	800a7d8 <rcutils_allocator_is_valid>
 800fe78:	2800      	cmp	r0, #0
 800fe7a:	d04f      	beq.n	800ff1c <rcl_init_options_copy+0xbc>
 800fe7c:	2e00      	cmp	r6, #0
 800fe7e:	d04d      	beq.n	800ff1c <rcl_init_options_copy+0xbc>
 800fe80:	6833      	ldr	r3, [r6, #0]
 800fe82:	b123      	cbz	r3, 800fe8e <rcl_init_options_copy+0x2e>
 800fe84:	2464      	movs	r4, #100	@ 0x64
 800fe86:	4620      	mov	r0, r4
 800fe88:	b014      	add	sp, #80	@ 0x50
 800fe8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fe8e:	6827      	ldr	r7, [r4, #0]
 800fe90:	46bc      	mov	ip, r7
 800fe92:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800fe96:	ad0f      	add	r5, sp, #60	@ 0x3c
 800fe98:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800fe9a:	f8dc 3000 	ldr.w	r3, [ip]
 800fe9e:	f8d7 8000 	ldr.w	r8, [r7]
 800fea2:	602b      	str	r3, [r5, #0]
 800fea4:	4619      	mov	r1, r3
 800fea6:	2050      	movs	r0, #80	@ 0x50
 800fea8:	47c0      	blx	r8
 800feaa:	4605      	mov	r5, r0
 800feac:	6030      	str	r0, [r6, #0]
 800feae:	b3d0      	cbz	r0, 800ff26 <rcl_init_options_copy+0xc6>
 800feb0:	f10d 0c3c 	add.w	ip, sp, #60	@ 0x3c
 800feb4:	4686      	mov	lr, r0
 800feb6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800feba:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800febe:	f8dc 3000 	ldr.w	r3, [ip]
 800fec2:	f8ce 3000 	str.w	r3, [lr]
 800fec6:	4668      	mov	r0, sp
 800fec8:	f003 f81a 	bl	8012f00 <rmw_get_zero_initialized_init_options>
 800fecc:	46ee      	mov	lr, sp
 800fece:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800fed2:	f105 0c18 	add.w	ip, r5, #24
 800fed6:	6824      	ldr	r4, [r4, #0]
 800fed8:	6835      	ldr	r5, [r6, #0]
 800feda:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800fede:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800fee2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800fee6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800feea:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800feee:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800fef2:	e88c 0003 	stmia.w	ip, {r0, r1}
 800fef6:	f104 0018 	add.w	r0, r4, #24
 800fefa:	f105 0118 	add.w	r1, r5, #24
 800fefe:	f003 fad5 	bl	80134ac <rmw_init_options_copy>
 800ff02:	4604      	mov	r4, r0
 800ff04:	2800      	cmp	r0, #0
 800ff06:	d0be      	beq.n	800fe86 <rcl_init_options_copy+0x26>
 800ff08:	f7fa fc74 	bl	800a7f4 <rcutils_get_error_string>
 800ff0c:	f7fa fc88 	bl	800a820 <rcutils_reset_error>
 800ff10:	4630      	mov	r0, r6
 800ff12:	f7ff ff7b 	bl	800fe0c <rcl_init_options_fini>
 800ff16:	b140      	cbz	r0, 800ff2a <rcl_init_options_copy+0xca>
 800ff18:	4604      	mov	r4, r0
 800ff1a:	e7b4      	b.n	800fe86 <rcl_init_options_copy+0x26>
 800ff1c:	240b      	movs	r4, #11
 800ff1e:	4620      	mov	r0, r4
 800ff20:	b014      	add	sp, #80	@ 0x50
 800ff22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ff26:	240a      	movs	r4, #10
 800ff28:	e7ad      	b.n	800fe86 <rcl_init_options_copy+0x26>
 800ff2a:	4620      	mov	r0, r4
 800ff2c:	b014      	add	sp, #80	@ 0x50
 800ff2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ff32:	f7ff bd7b 	b.w	800fa2c <rcl_convert_rmw_ret_to_rcl_ret>
 800ff36:	bf00      	nop

0800ff38 <rcl_get_localhost_only>:
 800ff38:	b510      	push	{r4, lr}
 800ff3a:	b082      	sub	sp, #8
 800ff3c:	2300      	movs	r3, #0
 800ff3e:	9301      	str	r3, [sp, #4]
 800ff40:	b1b8      	cbz	r0, 800ff72 <rcl_get_localhost_only+0x3a>
 800ff42:	4604      	mov	r4, r0
 800ff44:	a901      	add	r1, sp, #4
 800ff46:	480c      	ldr	r0, [pc, #48]	@ (800ff78 <rcl_get_localhost_only+0x40>)
 800ff48:	f002 fd1e 	bl	8012988 <rcutils_get_env>
 800ff4c:	b110      	cbz	r0, 800ff54 <rcl_get_localhost_only+0x1c>
 800ff4e:	2001      	movs	r0, #1
 800ff50:	b002      	add	sp, #8
 800ff52:	bd10      	pop	{r4, pc}
 800ff54:	9b01      	ldr	r3, [sp, #4]
 800ff56:	b113      	cbz	r3, 800ff5e <rcl_get_localhost_only+0x26>
 800ff58:	781a      	ldrb	r2, [r3, #0]
 800ff5a:	2a31      	cmp	r2, #49	@ 0x31
 800ff5c:	d004      	beq.n	800ff68 <rcl_get_localhost_only+0x30>
 800ff5e:	2302      	movs	r3, #2
 800ff60:	2000      	movs	r0, #0
 800ff62:	7023      	strb	r3, [r4, #0]
 800ff64:	b002      	add	sp, #8
 800ff66:	bd10      	pop	{r4, pc}
 800ff68:	785b      	ldrb	r3, [r3, #1]
 800ff6a:	2b00      	cmp	r3, #0
 800ff6c:	d1f7      	bne.n	800ff5e <rcl_get_localhost_only+0x26>
 800ff6e:	2301      	movs	r3, #1
 800ff70:	e7f6      	b.n	800ff60 <rcl_get_localhost_only+0x28>
 800ff72:	200b      	movs	r0, #11
 800ff74:	b002      	add	sp, #8
 800ff76:	bd10      	pop	{r4, pc}
 800ff78:	08018c8c 	.word	0x08018c8c

0800ff7c <rcl_get_zero_initialized_node>:
 800ff7c:	4a03      	ldr	r2, [pc, #12]	@ (800ff8c <rcl_get_zero_initialized_node+0x10>)
 800ff7e:	4603      	mov	r3, r0
 800ff80:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ff84:	e883 0003 	stmia.w	r3, {r0, r1}
 800ff88:	4618      	mov	r0, r3
 800ff8a:	4770      	bx	lr
 800ff8c:	08018cb4 	.word	0x08018cb4

0800ff90 <rcl_node_init>:
 800ff90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff94:	b0a9      	sub	sp, #164	@ 0xa4
 800ff96:	4604      	mov	r4, r0
 800ff98:	f8dd 80c8 	ldr.w	r8, [sp, #200]	@ 0xc8
 800ff9c:	a823      	add	r0, sp, #140	@ 0x8c
 800ff9e:	460e      	mov	r6, r1
 800ffa0:	4615      	mov	r5, r2
 800ffa2:	461f      	mov	r7, r3
 800ffa4:	f006 fd16 	bl	80169d4 <rcl_guard_condition_get_default_options>
 800ffa8:	f1b8 0f00 	cmp.w	r8, #0
 800ffac:	f000 80e6 	beq.w	801017c <rcl_node_init+0x1ec>
 800ffb0:	4640      	mov	r0, r8
 800ffb2:	f7fa fc11 	bl	800a7d8 <rcutils_allocator_is_valid>
 800ffb6:	2800      	cmp	r0, #0
 800ffb8:	f000 80e0 	beq.w	801017c <rcl_node_init+0x1ec>
 800ffbc:	2e00      	cmp	r6, #0
 800ffbe:	f000 80dd 	beq.w	801017c <rcl_node_init+0x1ec>
 800ffc2:	2d00      	cmp	r5, #0
 800ffc4:	f000 80da 	beq.w	801017c <rcl_node_init+0x1ec>
 800ffc8:	2c00      	cmp	r4, #0
 800ffca:	f000 80d7 	beq.w	801017c <rcl_node_init+0x1ec>
 800ffce:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800ffd2:	f1b9 0f00 	cmp.w	r9, #0
 800ffd6:	f040 80fd 	bne.w	80101d4 <rcl_node_init+0x244>
 800ffda:	2f00      	cmp	r7, #0
 800ffdc:	f000 80ce 	beq.w	801017c <rcl_node_init+0x1ec>
 800ffe0:	4638      	mov	r0, r7
 800ffe2:	f7ff fd41 	bl	800fa68 <rcl_context_is_valid>
 800ffe6:	4682      	mov	sl, r0
 800ffe8:	2800      	cmp	r0, #0
 800ffea:	f000 80cd 	beq.w	8010188 <rcl_node_init+0x1f8>
 800ffee:	464a      	mov	r2, r9
 800fff0:	a922      	add	r1, sp, #136	@ 0x88
 800fff2:	4630      	mov	r0, r6
 800fff4:	f8cd 9088 	str.w	r9, [sp, #136]	@ 0x88
 800fff8:	f003 f924 	bl	8013244 <rmw_validate_node_name>
 800fffc:	4681      	mov	r9, r0
 800fffe:	2800      	cmp	r0, #0
 8010000:	f040 80be 	bne.w	8010180 <rcl_node_init+0x1f0>
 8010004:	9822      	ldr	r0, [sp, #136]	@ 0x88
 8010006:	2800      	cmp	r0, #0
 8010008:	f040 80f0 	bne.w	80101ec <rcl_node_init+0x25c>
 801000c:	4628      	mov	r0, r5
 801000e:	f7f0 f8e9 	bl	80001e4 <strlen>
 8010012:	2800      	cmp	r0, #0
 8010014:	f040 80bb 	bne.w	801018e <rcl_node_init+0x1fe>
 8010018:	4d7c      	ldr	r5, [pc, #496]	@ (801020c <rcl_node_init+0x27c>)
 801001a:	a922      	add	r1, sp, #136	@ 0x88
 801001c:	2200      	movs	r2, #0
 801001e:	4628      	mov	r0, r5
 8010020:	f003 f8f2 	bl	8013208 <rmw_validate_namespace>
 8010024:	4681      	mov	r9, r0
 8010026:	2800      	cmp	r0, #0
 8010028:	f040 80aa 	bne.w	8010180 <rcl_node_init+0x1f0>
 801002c:	4682      	mov	sl, r0
 801002e:	9822      	ldr	r0, [sp, #136]	@ 0x88
 8010030:	2800      	cmp	r0, #0
 8010032:	f040 80e0 	bne.w	80101f6 <rcl_node_init+0x266>
 8010036:	f8d8 3000 	ldr.w	r3, [r8]
 801003a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801003e:	2078      	movs	r0, #120	@ 0x78
 8010040:	4798      	blx	r3
 8010042:	4681      	mov	r9, r0
 8010044:	6060      	str	r0, [r4, #4]
 8010046:	2800      	cmp	r0, #0
 8010048:	f000 80ca 	beq.w	80101e0 <rcl_node_init+0x250>
 801004c:	2200      	movs	r2, #0
 801004e:	2300      	movs	r3, #0
 8010050:	e9c9 231a 	strd	r2, r3, [r9, #104]	@ 0x68
 8010054:	e9c9 231c 	strd	r2, r3, [r9, #112]	@ 0x70
 8010058:	a808      	add	r0, sp, #32
 801005a:	f000 f907 	bl	801026c <rcl_node_get_default_options>
 801005e:	a908      	add	r1, sp, #32
 8010060:	4648      	mov	r0, r9
 8010062:	2268      	movs	r2, #104	@ 0x68
 8010064:	f007 fd69 	bl	8017b3a <memcpy>
 8010068:	6861      	ldr	r1, [r4, #4]
 801006a:	6027      	str	r7, [r4, #0]
 801006c:	4640      	mov	r0, r8
 801006e:	f000 f90b 	bl	8010288 <rcl_node_options_copy>
 8010072:	2800      	cmp	r0, #0
 8010074:	d158      	bne.n	8010128 <rcl_node_init+0x198>
 8010076:	4628      	mov	r0, r5
 8010078:	f7f0 f8b4 	bl	80001e4 <strlen>
 801007c:	4428      	add	r0, r5
 801007e:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 8010082:	e9cd 5603 	strd	r5, r6, [sp, #12]
 8010086:	2b2f      	cmp	r3, #47	@ 0x2f
 8010088:	f8d8 3010 	ldr.w	r3, [r8, #16]
 801008c:	9300      	str	r3, [sp, #0]
 801008e:	bf0c      	ite	eq
 8010090:	4b5f      	ldreq	r3, [pc, #380]	@ (8010210 <rcl_node_init+0x280>)
 8010092:	4b60      	ldrne	r3, [pc, #384]	@ (8010214 <rcl_node_init+0x284>)
 8010094:	9302      	str	r3, [sp, #8]
 8010096:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801009a:	9301      	str	r3, [sp, #4]
 801009c:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 80100a0:	f8d4 9004 	ldr.w	r9, [r4, #4]
 80100a4:	f002 fc98 	bl	80129d8 <rcutils_format_string_limit>
 80100a8:	6823      	ldr	r3, [r4, #0]
 80100aa:	f8c9 0074 	str.w	r0, [r9, #116]	@ 0x74
 80100ae:	6818      	ldr	r0, [r3, #0]
 80100b0:	4631      	mov	r1, r6
 80100b2:	3028      	adds	r0, #40	@ 0x28
 80100b4:	462a      	mov	r2, r5
 80100b6:	6866      	ldr	r6, [r4, #4]
 80100b8:	f003 fcdc 	bl	8013a74 <rmw_create_node>
 80100bc:	6863      	ldr	r3, [r4, #4]
 80100be:	66b0      	str	r0, [r6, #104]	@ 0x68
 80100c0:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 80100c2:	2800      	cmp	r0, #0
 80100c4:	d032      	beq.n	801012c <rcl_node_init+0x19c>
 80100c6:	f003 fd69 	bl	8013b9c <rmw_node_get_graph_guard_condition>
 80100ca:	4681      	mov	r9, r0
 80100cc:	b360      	cbz	r0, 8010128 <rcl_node_init+0x198>
 80100ce:	f8d8 3000 	ldr.w	r3, [r8]
 80100d2:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80100d6:	6866      	ldr	r6, [r4, #4]
 80100d8:	2008      	movs	r0, #8
 80100da:	4798      	blx	r3
 80100dc:	6863      	ldr	r3, [r4, #4]
 80100de:	66f0      	str	r0, [r6, #108]	@ 0x6c
 80100e0:	f8d3 b06c 	ldr.w	fp, [r3, #108]	@ 0x6c
 80100e4:	f1bb 0f00 	cmp.w	fp, #0
 80100e8:	d020      	beq.n	801012c <rcl_node_init+0x19c>
 80100ea:	a806      	add	r0, sp, #24
 80100ec:	f006 fb96 	bl	801681c <rcl_get_zero_initialized_guard_condition>
 80100f0:	a806      	add	r0, sp, #24
 80100f2:	c803      	ldmia	r0, {r0, r1}
 80100f4:	6863      	ldr	r3, [r4, #4]
 80100f6:	46c4      	mov	ip, r8
 80100f8:	f8d3 e06c 	ldr.w	lr, [r3, #108]	@ 0x6c
 80100fc:	e88b 0003 	stmia.w	fp, {r0, r1}
 8010100:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010104:	ae23      	add	r6, sp, #140	@ 0x8c
 8010106:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8010108:	f8dc 3000 	ldr.w	r3, [ip]
 801010c:	6033      	str	r3, [r6, #0]
 801010e:	ab28      	add	r3, sp, #160	@ 0xa0
 8010110:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 8010114:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8010118:	4649      	mov	r1, r9
 801011a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801011c:	463a      	mov	r2, r7
 801011e:	4670      	mov	r0, lr
 8010120:	f006 fbd2 	bl	80168c8 <rcl_guard_condition_init_from_rmw>
 8010124:	4681      	mov	r9, r0
 8010126:	b328      	cbz	r0, 8010174 <rcl_node_init+0x1e4>
 8010128:	6863      	ldr	r3, [r4, #4]
 801012a:	b1f3      	cbz	r3, 801016a <rcl_node_init+0x1da>
 801012c:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 801012e:	b128      	cbz	r0, 801013c <rcl_node_init+0x1ac>
 8010130:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8010134:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8010138:	4798      	blx	r3
 801013a:	6863      	ldr	r3, [r4, #4]
 801013c:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 801013e:	b110      	cbz	r0, 8010146 <rcl_node_init+0x1b6>
 8010140:	f003 fcb0 	bl	8013aa4 <rmw_destroy_node>
 8010144:	6863      	ldr	r3, [r4, #4]
 8010146:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 8010148:	b148      	cbz	r0, 801015e <rcl_node_init+0x1ce>
 801014a:	f006 fc1d 	bl	8016988 <rcl_guard_condition_fini>
 801014e:	6863      	ldr	r3, [r4, #4]
 8010150:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8010154:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 8010156:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801015a:	4798      	blx	r3
 801015c:	6863      	ldr	r3, [r4, #4]
 801015e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8010162:	4618      	mov	r0, r3
 8010164:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8010168:	4798      	blx	r3
 801016a:	2300      	movs	r3, #0
 801016c:	e9c4 3300 	strd	r3, r3, [r4]
 8010170:	f04f 0901 	mov.w	r9, #1
 8010174:	f1ba 0f00 	cmp.w	sl, #0
 8010178:	d125      	bne.n	80101c6 <rcl_node_init+0x236>
 801017a:	e001      	b.n	8010180 <rcl_node_init+0x1f0>
 801017c:	f04f 090b 	mov.w	r9, #11
 8010180:	4648      	mov	r0, r9
 8010182:	b029      	add	sp, #164	@ 0xa4
 8010184:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010188:	f04f 0965 	mov.w	r9, #101	@ 0x65
 801018c:	e7f8      	b.n	8010180 <rcl_node_init+0x1f0>
 801018e:	782b      	ldrb	r3, [r5, #0]
 8010190:	2b2f      	cmp	r3, #47	@ 0x2f
 8010192:	f43f af42 	beq.w	801001a <rcl_node_init+0x8a>
 8010196:	9503      	str	r5, [sp, #12]
 8010198:	f8d8 3010 	ldr.w	r3, [r8, #16]
 801019c:	9300      	str	r3, [sp, #0]
 801019e:	4b1e      	ldr	r3, [pc, #120]	@ (8010218 <rcl_node_init+0x288>)
 80101a0:	9302      	str	r3, [sp, #8]
 80101a2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80101a6:	9301      	str	r3, [sp, #4]
 80101a8:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 80101ac:	f002 fc14 	bl	80129d8 <rcutils_format_string_limit>
 80101b0:	4605      	mov	r5, r0
 80101b2:	b340      	cbz	r0, 8010206 <rcl_node_init+0x276>
 80101b4:	2200      	movs	r2, #0
 80101b6:	a922      	add	r1, sp, #136	@ 0x88
 80101b8:	9222      	str	r2, [sp, #136]	@ 0x88
 80101ba:	f003 f825 	bl	8013208 <rmw_validate_namespace>
 80101be:	4681      	mov	r9, r0
 80101c0:	2800      	cmp	r0, #0
 80101c2:	f43f af34 	beq.w	801002e <rcl_node_init+0x9e>
 80101c6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80101ca:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80101ce:	4628      	mov	r0, r5
 80101d0:	4798      	blx	r3
 80101d2:	e7d5      	b.n	8010180 <rcl_node_init+0x1f0>
 80101d4:	f04f 0964 	mov.w	r9, #100	@ 0x64
 80101d8:	4648      	mov	r0, r9
 80101da:	b029      	add	sp, #164	@ 0xa4
 80101dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80101e0:	f04f 090a 	mov.w	r9, #10
 80101e4:	f1ba 0f00 	cmp.w	sl, #0
 80101e8:	d1ed      	bne.n	80101c6 <rcl_node_init+0x236>
 80101ea:	e7c9      	b.n	8010180 <rcl_node_init+0x1f0>
 80101ec:	f003 f87c 	bl	80132e8 <rmw_node_name_validation_result_string>
 80101f0:	f04f 09c9 	mov.w	r9, #201	@ 0xc9
 80101f4:	e7c4      	b.n	8010180 <rcl_node_init+0x1f0>
 80101f6:	f003 f819 	bl	801322c <rmw_namespace_validation_result_string>
 80101fa:	f04f 09ca 	mov.w	r9, #202	@ 0xca
 80101fe:	f1ba 0f00 	cmp.w	sl, #0
 8010202:	d1e0      	bne.n	80101c6 <rcl_node_init+0x236>
 8010204:	e7bc      	b.n	8010180 <rcl_node_init+0x1f0>
 8010206:	f04f 090a 	mov.w	r9, #10
 801020a:	e7b9      	b.n	8010180 <rcl_node_init+0x1f0>
 801020c:	08018ca4 	.word	0x08018ca4
 8010210:	08018ac8 	.word	0x08018ac8
 8010214:	08018cac 	.word	0x08018cac
 8010218:	08018ca8 	.word	0x08018ca8

0801021c <rcl_node_is_valid>:
 801021c:	b130      	cbz	r0, 801022c <rcl_node_is_valid+0x10>
 801021e:	6843      	ldr	r3, [r0, #4]
 8010220:	b123      	cbz	r3, 801022c <rcl_node_is_valid+0x10>
 8010222:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8010224:	b113      	cbz	r3, 801022c <rcl_node_is_valid+0x10>
 8010226:	6800      	ldr	r0, [r0, #0]
 8010228:	f7ff bc1e 	b.w	800fa68 <rcl_context_is_valid>
 801022c:	2000      	movs	r0, #0
 801022e:	4770      	bx	lr

08010230 <rcl_node_get_name>:
 8010230:	b120      	cbz	r0, 801023c <rcl_node_get_name+0xc>
 8010232:	6840      	ldr	r0, [r0, #4]
 8010234:	b110      	cbz	r0, 801023c <rcl_node_get_name+0xc>
 8010236:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8010238:	b100      	cbz	r0, 801023c <rcl_node_get_name+0xc>
 801023a:	6880      	ldr	r0, [r0, #8]
 801023c:	4770      	bx	lr
 801023e:	bf00      	nop

08010240 <rcl_node_get_namespace>:
 8010240:	b120      	cbz	r0, 801024c <rcl_node_get_namespace+0xc>
 8010242:	6840      	ldr	r0, [r0, #4]
 8010244:	b110      	cbz	r0, 801024c <rcl_node_get_namespace+0xc>
 8010246:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8010248:	b100      	cbz	r0, 801024c <rcl_node_get_namespace+0xc>
 801024a:	68c0      	ldr	r0, [r0, #12]
 801024c:	4770      	bx	lr
 801024e:	bf00      	nop

08010250 <rcl_node_get_options>:
 8010250:	b128      	cbz	r0, 801025e <rcl_node_get_options+0xe>
 8010252:	6840      	ldr	r0, [r0, #4]
 8010254:	b118      	cbz	r0, 801025e <rcl_node_get_options+0xe>
 8010256:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 8010258:	2b00      	cmp	r3, #0
 801025a:	bf08      	it	eq
 801025c:	2000      	moveq	r0, #0
 801025e:	4770      	bx	lr

08010260 <rcl_node_get_rmw_handle>:
 8010260:	b110      	cbz	r0, 8010268 <rcl_node_get_rmw_handle+0x8>
 8010262:	6840      	ldr	r0, [r0, #4]
 8010264:	b100      	cbz	r0, 8010268 <rcl_node_get_rmw_handle+0x8>
 8010266:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8010268:	4770      	bx	lr
 801026a:	bf00      	nop

0801026c <rcl_node_get_default_options>:
 801026c:	b510      	push	{r4, lr}
 801026e:	2268      	movs	r2, #104	@ 0x68
 8010270:	4604      	mov	r4, r0
 8010272:	2100      	movs	r1, #0
 8010274:	f007 fb42 	bl	80178fc <memset>
 8010278:	4620      	mov	r0, r4
 801027a:	f7fa fa9f 	bl	800a7bc <rcutils_get_default_allocator>
 801027e:	2301      	movs	r3, #1
 8010280:	7523      	strb	r3, [r4, #20]
 8010282:	4620      	mov	r0, r4
 8010284:	bd10      	pop	{r4, pc}
 8010286:	bf00      	nop

08010288 <rcl_node_options_copy>:
 8010288:	b1d0      	cbz	r0, 80102c0 <rcl_node_options_copy+0x38>
 801028a:	b570      	push	{r4, r5, r6, lr}
 801028c:	460c      	mov	r4, r1
 801028e:	b1a9      	cbz	r1, 80102bc <rcl_node_options_copy+0x34>
 8010290:	4288      	cmp	r0, r1
 8010292:	4684      	mov	ip, r0
 8010294:	d012      	beq.n	80102bc <rcl_node_options_copy+0x34>
 8010296:	4605      	mov	r5, r0
 8010298:	8a86      	ldrh	r6, [r0, #20]
 801029a:	468e      	mov	lr, r1
 801029c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801029e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80102a2:	682b      	ldr	r3, [r5, #0]
 80102a4:	f8ce 3000 	str.w	r3, [lr]
 80102a8:	f10c 0118 	add.w	r1, ip, #24
 80102ac:	2250      	movs	r2, #80	@ 0x50
 80102ae:	82a6      	strh	r6, [r4, #20]
 80102b0:	f104 0018 	add.w	r0, r4, #24
 80102b4:	f007 fc41 	bl	8017b3a <memcpy>
 80102b8:	2000      	movs	r0, #0
 80102ba:	bd70      	pop	{r4, r5, r6, pc}
 80102bc:	200b      	movs	r0, #11
 80102be:	bd70      	pop	{r4, r5, r6, pc}
 80102c0:	200b      	movs	r0, #11
 80102c2:	4770      	bx	lr

080102c4 <rcl_node_resolve_name>:
 80102c4:	b082      	sub	sp, #8
 80102c6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80102ca:	b091      	sub	sp, #68	@ 0x44
 80102cc:	ac1a      	add	r4, sp, #104	@ 0x68
 80102ce:	e884 000c 	stmia.w	r4, {r2, r3}
 80102d2:	f89d 807c 	ldrb.w	r8, [sp, #124]	@ 0x7c
 80102d6:	2800      	cmp	r0, #0
 80102d8:	d03b      	beq.n	8010352 <rcl_node_resolve_name+0x8e>
 80102da:	460c      	mov	r4, r1
 80102dc:	4605      	mov	r5, r0
 80102de:	f7ff ffb7 	bl	8010250 <rcl_node_get_options>
 80102e2:	2800      	cmp	r0, #0
 80102e4:	d037      	beq.n	8010356 <rcl_node_resolve_name+0x92>
 80102e6:	4628      	mov	r0, r5
 80102e8:	f7ff ffa2 	bl	8010230 <rcl_node_get_name>
 80102ec:	4606      	mov	r6, r0
 80102ee:	4628      	mov	r0, r5
 80102f0:	f7ff ffa6 	bl	8010240 <rcl_node_get_namespace>
 80102f4:	f10d 0e68 	add.w	lr, sp, #104	@ 0x68
 80102f8:	4681      	mov	r9, r0
 80102fa:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80102fe:	ad0b      	add	r5, sp, #44	@ 0x2c
 8010300:	46ac      	mov	ip, r5
 8010302:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010306:	f8de 3000 	ldr.w	r3, [lr]
 801030a:	f8cc 3000 	str.w	r3, [ip]
 801030e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8010310:	b1fb      	cbz	r3, 8010352 <rcl_node_resolve_name+0x8e>
 8010312:	468a      	mov	sl, r1
 8010314:	f8dd b078 	ldr.w	fp, [sp, #120]	@ 0x78
 8010318:	f002 fcb6 	bl	8012c88 <rcutils_get_zero_initialized_string_map>
 801031c:	ab10      	add	r3, sp, #64	@ 0x40
 801031e:	9008      	str	r0, [sp, #32]
 8010320:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8010324:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8010328:	2100      	movs	r1, #0
 801032a:	e895 000c 	ldmia.w	r5, {r2, r3}
 801032e:	a808      	add	r0, sp, #32
 8010330:	f002 fd22 	bl	8012d78 <rcutils_string_map_init>
 8010334:	4607      	mov	r7, r0
 8010336:	b180      	cbz	r0, 801035a <rcl_node_resolve_name+0x96>
 8010338:	f7fa fa5c 	bl	800a7f4 <rcutils_get_error_string>
 801033c:	f7fa fa70 	bl	800a820 <rcutils_reset_error>
 8010340:	2f0a      	cmp	r7, #10
 8010342:	bf18      	it	ne
 8010344:	2701      	movne	r7, #1
 8010346:	4638      	mov	r0, r7
 8010348:	b011      	add	sp, #68	@ 0x44
 801034a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801034e:	b002      	add	sp, #8
 8010350:	4770      	bx	lr
 8010352:	270b      	movs	r7, #11
 8010354:	e7f7      	b.n	8010346 <rcl_node_resolve_name+0x82>
 8010356:	2701      	movs	r7, #1
 8010358:	e7f5      	b.n	8010346 <rcl_node_resolve_name+0x82>
 801035a:	9009      	str	r0, [sp, #36]	@ 0x24
 801035c:	9007      	str	r0, [sp, #28]
 801035e:	a808      	add	r0, sp, #32
 8010360:	f006 fa56 	bl	8016810 <rcl_get_default_topic_name_substitutions>
 8010364:	4607      	mov	r7, r0
 8010366:	b1a8      	cbz	r0, 8010394 <rcl_node_resolve_name+0xd0>
 8010368:	280a      	cmp	r0, #10
 801036a:	9c07      	ldr	r4, [sp, #28]
 801036c:	d000      	beq.n	8010370 <rcl_node_resolve_name+0xac>
 801036e:	2701      	movs	r7, #1
 8010370:	a808      	add	r0, sp, #32
 8010372:	f002 fd41 	bl	8012df8 <rcutils_string_map_fini>
 8010376:	2800      	cmp	r0, #0
 8010378:	d13d      	bne.n	80103f6 <rcl_node_resolve_name+0x132>
 801037a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801037c:	4659      	mov	r1, fp
 801037e:	47d0      	blx	sl
 8010380:	4659      	mov	r1, fp
 8010382:	4620      	mov	r0, r4
 8010384:	47d0      	blx	sl
 8010386:	f1b8 0f00 	cmp.w	r8, #0
 801038a:	d0dc      	beq.n	8010346 <rcl_node_resolve_name+0x82>
 801038c:	2f67      	cmp	r7, #103	@ 0x67
 801038e:	bf08      	it	eq
 8010390:	2768      	moveq	r7, #104	@ 0x68
 8010392:	e7d8      	b.n	8010346 <rcl_node_resolve_name+0x82>
 8010394:	ab09      	add	r3, sp, #36	@ 0x24
 8010396:	9305      	str	r3, [sp, #20]
 8010398:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801039a:	46ec      	mov	ip, sp
 801039c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80103a0:	682b      	ldr	r3, [r5, #0]
 80103a2:	f8cc 3000 	str.w	r3, [ip]
 80103a6:	464a      	mov	r2, r9
 80103a8:	4631      	mov	r1, r6
 80103aa:	4620      	mov	r0, r4
 80103ac:	ab08      	add	r3, sp, #32
 80103ae:	f006 f8d1 	bl	8016554 <rcl_expand_topic_name>
 80103b2:	4607      	mov	r7, r0
 80103b4:	b9b8      	cbnz	r0, 80103e6 <rcl_node_resolve_name+0x122>
 80103b6:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 80103b8:	9009      	str	r0, [sp, #36]	@ 0x24
 80103ba:	4602      	mov	r2, r0
 80103bc:	a90a      	add	r1, sp, #40	@ 0x28
 80103be:	4620      	mov	r0, r4
 80103c0:	f002 fe5e 	bl	8013080 <rmw_validate_full_topic_name>
 80103c4:	b988      	cbnz	r0, 80103ea <rcl_node_resolve_name+0x126>
 80103c6:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 80103c8:	b9d5      	cbnz	r5, 8010400 <rcl_node_resolve_name+0x13c>
 80103ca:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80103cc:	a808      	add	r0, sp, #32
 80103ce:	601c      	str	r4, [r3, #0]
 80103d0:	f002 fd12 	bl	8012df8 <rcutils_string_map_fini>
 80103d4:	4607      	mov	r7, r0
 80103d6:	b1a8      	cbz	r0, 8010404 <rcl_node_resolve_name+0x140>
 80103d8:	f7fa fa0c 	bl	800a7f4 <rcutils_get_error_string>
 80103dc:	462c      	mov	r4, r5
 80103de:	f7fa fa1f 	bl	800a820 <rcutils_reset_error>
 80103e2:	2701      	movs	r7, #1
 80103e4:	e7c9      	b.n	801037a <rcl_node_resolve_name+0xb6>
 80103e6:	9c07      	ldr	r4, [sp, #28]
 80103e8:	e7c2      	b.n	8010370 <rcl_node_resolve_name+0xac>
 80103ea:	f7fa fa03 	bl	800a7f4 <rcutils_get_error_string>
 80103ee:	2701      	movs	r7, #1
 80103f0:	f7fa fa16 	bl	800a820 <rcutils_reset_error>
 80103f4:	e7bc      	b.n	8010370 <rcl_node_resolve_name+0xac>
 80103f6:	f7fa f9fd 	bl	800a7f4 <rcutils_get_error_string>
 80103fa:	f7fa fa11 	bl	800a820 <rcutils_reset_error>
 80103fe:	e7bc      	b.n	801037a <rcl_node_resolve_name+0xb6>
 8010400:	2767      	movs	r7, #103	@ 0x67
 8010402:	e7b5      	b.n	8010370 <rcl_node_resolve_name+0xac>
 8010404:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010406:	4659      	mov	r1, fp
 8010408:	47d0      	blx	sl
 801040a:	4659      	mov	r1, fp
 801040c:	4638      	mov	r0, r7
 801040e:	47d0      	blx	sl
 8010410:	e799      	b.n	8010346 <rcl_node_resolve_name+0x82>
 8010412:	bf00      	nop

08010414 <exact_match_lookup>:
 8010414:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010416:	f102 0708 	add.w	r7, r2, #8
 801041a:	460b      	mov	r3, r1
 801041c:	4614      	mov	r4, r2
 801041e:	4606      	mov	r6, r0
 8010420:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8010424:	b085      	sub	sp, #20
 8010426:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801042a:	4618      	mov	r0, r3
 801042c:	4919      	ldr	r1, [pc, #100]	@ (8010494 <exact_match_lookup+0x80>)
 801042e:	e894 000c 	ldmia.w	r4, {r2, r3}
 8010432:	f002 fac3 	bl	80129bc <rcutils_join_path>
 8010436:	7833      	ldrb	r3, [r6, #0]
 8010438:	2b2f      	cmp	r3, #47	@ 0x2f
 801043a:	4605      	mov	r5, r0
 801043c:	d023      	beq.n	8010486 <exact_match_lookup+0x72>
 801043e:	f104 030c 	add.w	r3, r4, #12
 8010442:	e893 0003 	ldmia.w	r3, {r0, r1}
 8010446:	e88d 0003 	stmia.w	sp, {r0, r1}
 801044a:	1c70      	adds	r0, r6, #1
 801044c:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8010450:	f002 faba 	bl	80129c8 <rcutils_to_native_path>
 8010454:	4606      	mov	r6, r0
 8010456:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 801045a:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801045e:	4631      	mov	r1, r6
 8010460:	e894 000c 	ldmia.w	r4, {r2, r3}
 8010464:	4628      	mov	r0, r5
 8010466:	f002 faa9 	bl	80129bc <rcutils_join_path>
 801046a:	6862      	ldr	r2, [r4, #4]
 801046c:	6921      	ldr	r1, [r4, #16]
 801046e:	4603      	mov	r3, r0
 8010470:	4630      	mov	r0, r6
 8010472:	461e      	mov	r6, r3
 8010474:	4790      	blx	r2
 8010476:	4628      	mov	r0, r5
 8010478:	6863      	ldr	r3, [r4, #4]
 801047a:	6921      	ldr	r1, [r4, #16]
 801047c:	4798      	blx	r3
 801047e:	4635      	mov	r5, r6
 8010480:	4628      	mov	r0, r5
 8010482:	b005      	add	sp, #20
 8010484:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010486:	7873      	ldrb	r3, [r6, #1]
 8010488:	2b00      	cmp	r3, #0
 801048a:	d1d8      	bne.n	801043e <exact_match_lookup+0x2a>
 801048c:	4628      	mov	r0, r5
 801048e:	b005      	add	sp, #20
 8010490:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010492:	bf00      	nop
 8010494:	08018cf8 	.word	0x08018cf8

08010498 <rcl_get_secure_root>:
 8010498:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801049c:	b085      	sub	sp, #20
 801049e:	b168      	cbz	r0, 80104bc <rcl_get_secure_root+0x24>
 80104a0:	4607      	mov	r7, r0
 80104a2:	4608      	mov	r0, r1
 80104a4:	460c      	mov	r4, r1
 80104a6:	f7fa f997 	bl	800a7d8 <rcutils_allocator_is_valid>
 80104aa:	b138      	cbz	r0, 80104bc <rcl_get_secure_root+0x24>
 80104ac:	2300      	movs	r3, #0
 80104ae:	482d      	ldr	r0, [pc, #180]	@ (8010564 <rcl_get_secure_root+0xcc>)
 80104b0:	9303      	str	r3, [sp, #12]
 80104b2:	a903      	add	r1, sp, #12
 80104b4:	f002 fa68 	bl	8012988 <rcutils_get_env>
 80104b8:	4605      	mov	r5, r0
 80104ba:	b120      	cbz	r0, 80104c6 <rcl_get_secure_root+0x2e>
 80104bc:	2500      	movs	r5, #0
 80104be:	4628      	mov	r0, r5
 80104c0:	b005      	add	sp, #20
 80104c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80104c6:	9b03      	ldr	r3, [sp, #12]
 80104c8:	781a      	ldrb	r2, [r3, #0]
 80104ca:	2a00      	cmp	r2, #0
 80104cc:	d0f6      	beq.n	80104bc <rcl_get_secure_root+0x24>
 80104ce:	f104 090c 	add.w	r9, r4, #12
 80104d2:	e899 0003 	ldmia.w	r9, {r0, r1}
 80104d6:	e88d 0003 	stmia.w	sp, {r0, r1}
 80104da:	4618      	mov	r0, r3
 80104dc:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80104e0:	f002 fb94 	bl	8012c0c <rcutils_strdup>
 80104e4:	4680      	mov	r8, r0
 80104e6:	2800      	cmp	r0, #0
 80104e8:	d0e8      	beq.n	80104bc <rcl_get_secure_root+0x24>
 80104ea:	481f      	ldr	r0, [pc, #124]	@ (8010568 <rcl_get_secure_root+0xd0>)
 80104ec:	9503      	str	r5, [sp, #12]
 80104ee:	a903      	add	r1, sp, #12
 80104f0:	f002 fa4a 	bl	8012988 <rcutils_get_env>
 80104f4:	b160      	cbz	r0, 8010510 <rcl_get_secure_root+0x78>
 80104f6:	2600      	movs	r6, #0
 80104f8:	6863      	ldr	r3, [r4, #4]
 80104fa:	6921      	ldr	r1, [r4, #16]
 80104fc:	4630      	mov	r0, r6
 80104fe:	4798      	blx	r3
 8010500:	4640      	mov	r0, r8
 8010502:	6863      	ldr	r3, [r4, #4]
 8010504:	6921      	ldr	r1, [r4, #16]
 8010506:	4798      	blx	r3
 8010508:	4628      	mov	r0, r5
 801050a:	b005      	add	sp, #20
 801050c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010510:	9b03      	ldr	r3, [sp, #12]
 8010512:	781e      	ldrb	r6, [r3, #0]
 8010514:	b1f6      	cbz	r6, 8010554 <rcl_get_secure_root+0xbc>
 8010516:	e899 0003 	ldmia.w	r9, {r0, r1}
 801051a:	e88d 0003 	stmia.w	sp, {r0, r1}
 801051e:	4618      	mov	r0, r3
 8010520:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8010524:	f002 fb72 	bl	8012c0c <rcutils_strdup>
 8010528:	4606      	mov	r6, r0
 801052a:	2800      	cmp	r0, #0
 801052c:	d0e3      	beq.n	80104f6 <rcl_get_secure_root+0x5e>
 801052e:	4622      	mov	r2, r4
 8010530:	4641      	mov	r1, r8
 8010532:	f7ff ff6f 	bl	8010414 <exact_match_lookup>
 8010536:	4605      	mov	r5, r0
 8010538:	2d00      	cmp	r5, #0
 801053a:	d0dd      	beq.n	80104f8 <rcl_get_secure_root+0x60>
 801053c:	4628      	mov	r0, r5
 801053e:	f002 fa3b 	bl	80129b8 <rcutils_is_directory>
 8010542:	4603      	mov	r3, r0
 8010544:	2800      	cmp	r0, #0
 8010546:	d1d7      	bne.n	80104f8 <rcl_get_secure_root+0x60>
 8010548:	4628      	mov	r0, r5
 801054a:	6921      	ldr	r1, [r4, #16]
 801054c:	461d      	mov	r5, r3
 801054e:	6863      	ldr	r3, [r4, #4]
 8010550:	4798      	blx	r3
 8010552:	e7d1      	b.n	80104f8 <rcl_get_secure_root+0x60>
 8010554:	4622      	mov	r2, r4
 8010556:	4638      	mov	r0, r7
 8010558:	4641      	mov	r1, r8
 801055a:	f7ff ff5b 	bl	8010414 <exact_match_lookup>
 801055e:	4605      	mov	r5, r0
 8010560:	e7ea      	b.n	8010538 <rcl_get_secure_root+0xa0>
 8010562:	bf00      	nop
 8010564:	08018d04 	.word	0x08018d04
 8010568:	08018d1c 	.word	0x08018d1c

0801056c <rcl_get_security_options_from_environment>:
 801056c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010570:	b082      	sub	sp, #8
 8010572:	2300      	movs	r3, #0
 8010574:	4606      	mov	r6, r0
 8010576:	460f      	mov	r7, r1
 8010578:	4820      	ldr	r0, [pc, #128]	@ (80105fc <rcl_get_security_options_from_environment+0x90>)
 801057a:	9301      	str	r3, [sp, #4]
 801057c:	a901      	add	r1, sp, #4
 801057e:	4690      	mov	r8, r2
 8010580:	f002 fa02 	bl	8012988 <rcutils_get_env>
 8010584:	b120      	cbz	r0, 8010590 <rcl_get_security_options_from_environment+0x24>
 8010586:	2501      	movs	r5, #1
 8010588:	4628      	mov	r0, r5
 801058a:	b002      	add	sp, #8
 801058c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010590:	491b      	ldr	r1, [pc, #108]	@ (8010600 <rcl_get_security_options_from_environment+0x94>)
 8010592:	4604      	mov	r4, r0
 8010594:	9801      	ldr	r0, [sp, #4]
 8010596:	f7ef fe1b 	bl	80001d0 <strcmp>
 801059a:	4605      	mov	r5, r0
 801059c:	b9e8      	cbnz	r0, 80105da <rcl_get_security_options_from_environment+0x6e>
 801059e:	9001      	str	r0, [sp, #4]
 80105a0:	f1b8 0f00 	cmp.w	r8, #0
 80105a4:	d020      	beq.n	80105e8 <rcl_get_security_options_from_environment+0x7c>
 80105a6:	4817      	ldr	r0, [pc, #92]	@ (8010604 <rcl_get_security_options_from_environment+0x98>)
 80105a8:	a901      	add	r1, sp, #4
 80105aa:	f002 f9ed 	bl	8012988 <rcutils_get_env>
 80105ae:	2800      	cmp	r0, #0
 80105b0:	d1e9      	bne.n	8010586 <rcl_get_security_options_from_environment+0x1a>
 80105b2:	4915      	ldr	r1, [pc, #84]	@ (8010608 <rcl_get_security_options_from_environment+0x9c>)
 80105b4:	9801      	ldr	r0, [sp, #4]
 80105b6:	f7ef fe0b 	bl	80001d0 <strcmp>
 80105ba:	fab0 f080 	clz	r0, r0
 80105be:	0940      	lsrs	r0, r0, #5
 80105c0:	f888 0000 	strb.w	r0, [r8]
 80105c4:	4639      	mov	r1, r7
 80105c6:	4630      	mov	r0, r6
 80105c8:	f7ff ff66 	bl	8010498 <rcl_get_secure_root>
 80105cc:	b170      	cbz	r0, 80105ec <rcl_get_security_options_from_environment+0x80>
 80105ce:	f8c8 0004 	str.w	r0, [r8, #4]
 80105d2:	4628      	mov	r0, r5
 80105d4:	b002      	add	sp, #8
 80105d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80105da:	4625      	mov	r5, r4
 80105dc:	4628      	mov	r0, r5
 80105de:	f888 4000 	strb.w	r4, [r8]
 80105e2:	b002      	add	sp, #8
 80105e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80105e8:	250b      	movs	r5, #11
 80105ea:	e7cd      	b.n	8010588 <rcl_get_security_options_from_environment+0x1c>
 80105ec:	f898 5000 	ldrb.w	r5, [r8]
 80105f0:	f1a5 0501 	sub.w	r5, r5, #1
 80105f4:	fab5 f585 	clz	r5, r5
 80105f8:	096d      	lsrs	r5, r5, #5
 80105fa:	e7c5      	b.n	8010588 <rcl_get_security_options_from_environment+0x1c>
 80105fc:	08018cbc 	.word	0x08018cbc
 8010600:	08018cd0 	.word	0x08018cd0
 8010604:	08018cd8 	.word	0x08018cd8
 8010608:	08018cf0 	.word	0x08018cf0

0801060c <rcl_service_get_rmw_handle>:
 801060c:	b118      	cbz	r0, 8010616 <rcl_service_get_rmw_handle+0xa>
 801060e:	6800      	ldr	r0, [r0, #0]
 8010610:	b108      	cbz	r0, 8010616 <rcl_service_get_rmw_handle+0xa>
 8010612:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8010616:	4770      	bx	lr

08010618 <rcl_take_request>:
 8010618:	b570      	push	{r4, r5, r6, lr}
 801061a:	468e      	mov	lr, r1
 801061c:	460c      	mov	r4, r1
 801061e:	4616      	mov	r6, r2
 8010620:	4605      	mov	r5, r0
 8010622:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8010626:	b08c      	sub	sp, #48	@ 0x30
 8010628:	f10d 0c18 	add.w	ip, sp, #24
 801062c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010630:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8010634:	e88c 0003 	stmia.w	ip, {r0, r1}
 8010638:	b30d      	cbz	r5, 801067e <rcl_take_request+0x66>
 801063a:	682b      	ldr	r3, [r5, #0]
 801063c:	b1fb      	cbz	r3, 801067e <rcl_take_request+0x66>
 801063e:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8010642:	b1e0      	cbz	r0, 801067e <rcl_take_request+0x66>
 8010644:	b336      	cbz	r6, 8010694 <rcl_take_request+0x7c>
 8010646:	2300      	movs	r3, #0
 8010648:	f88d 3007 	strb.w	r3, [sp, #7]
 801064c:	4632      	mov	r2, r6
 801064e:	f10d 0307 	add.w	r3, sp, #7
 8010652:	a902      	add	r1, sp, #8
 8010654:	f003 faf6 	bl	8013c44 <rmw_take_request>
 8010658:	4605      	mov	r5, r0
 801065a:	b198      	cbz	r0, 8010684 <rcl_take_request+0x6c>
 801065c:	280a      	cmp	r0, #10
 801065e:	bf18      	it	ne
 8010660:	2501      	movne	r5, #1
 8010662:	f10d 0e18 	add.w	lr, sp, #24
 8010666:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801066a:	46a4      	mov	ip, r4
 801066c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010670:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8010674:	e88c 0003 	stmia.w	ip, {r0, r1}
 8010678:	4628      	mov	r0, r5
 801067a:	b00c      	add	sp, #48	@ 0x30
 801067c:	bd70      	pop	{r4, r5, r6, pc}
 801067e:	f44f 7516 	mov.w	r5, #600	@ 0x258
 8010682:	e7ee      	b.n	8010662 <rcl_take_request+0x4a>
 8010684:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8010688:	f240 2359 	movw	r3, #601	@ 0x259
 801068c:	2a00      	cmp	r2, #0
 801068e:	bf08      	it	eq
 8010690:	461d      	moveq	r5, r3
 8010692:	e7e6      	b.n	8010662 <rcl_take_request+0x4a>
 8010694:	250b      	movs	r5, #11
 8010696:	e7e4      	b.n	8010662 <rcl_take_request+0x4a>

08010698 <rcl_send_response>:
 8010698:	b170      	cbz	r0, 80106b8 <rcl_send_response+0x20>
 801069a:	6800      	ldr	r0, [r0, #0]
 801069c:	b160      	cbz	r0, 80106b8 <rcl_send_response+0x20>
 801069e:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 80106a2:	b148      	cbz	r0, 80106b8 <rcl_send_response+0x20>
 80106a4:	b159      	cbz	r1, 80106be <rcl_send_response+0x26>
 80106a6:	b510      	push	{r4, lr}
 80106a8:	b15a      	cbz	r2, 80106c2 <rcl_send_response+0x2a>
 80106aa:	f003 fb29 	bl	8013d00 <rmw_send_response>
 80106ae:	b110      	cbz	r0, 80106b6 <rcl_send_response+0x1e>
 80106b0:	2802      	cmp	r0, #2
 80106b2:	bf18      	it	ne
 80106b4:	2001      	movne	r0, #1
 80106b6:	bd10      	pop	{r4, pc}
 80106b8:	f44f 7016 	mov.w	r0, #600	@ 0x258
 80106bc:	4770      	bx	lr
 80106be:	200b      	movs	r0, #11
 80106c0:	4770      	bx	lr
 80106c2:	200b      	movs	r0, #11
 80106c4:	bd10      	pop	{r4, pc}
 80106c6:	bf00      	nop

080106c8 <rcl_service_is_valid>:
 80106c8:	b130      	cbz	r0, 80106d8 <rcl_service_is_valid+0x10>
 80106ca:	6800      	ldr	r0, [r0, #0]
 80106cc:	b120      	cbz	r0, 80106d8 <rcl_service_is_valid+0x10>
 80106ce:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 80106d2:	3800      	subs	r0, #0
 80106d4:	bf18      	it	ne
 80106d6:	2001      	movne	r0, #1
 80106d8:	4770      	bx	lr
 80106da:	bf00      	nop

080106dc <rcl_get_zero_initialized_subscription>:
 80106dc:	4b01      	ldr	r3, [pc, #4]	@ (80106e4 <rcl_get_zero_initialized_subscription+0x8>)
 80106de:	6818      	ldr	r0, [r3, #0]
 80106e0:	4770      	bx	lr
 80106e2:	bf00      	nop
 80106e4:	08018d3c 	.word	0x08018d3c

080106e8 <rcl_subscription_init>:
 80106e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80106ec:	b089      	sub	sp, #36	@ 0x24
 80106ee:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 80106f0:	b1d6      	cbz	r6, 8010728 <rcl_subscription_init+0x40>
 80106f2:	f106 0950 	add.w	r9, r6, #80	@ 0x50
 80106f6:	4604      	mov	r4, r0
 80106f8:	4648      	mov	r0, r9
 80106fa:	460d      	mov	r5, r1
 80106fc:	4690      	mov	r8, r2
 80106fe:	461f      	mov	r7, r3
 8010700:	f7fa f86a 	bl	800a7d8 <rcutils_allocator_is_valid>
 8010704:	b180      	cbz	r0, 8010728 <rcl_subscription_init+0x40>
 8010706:	b17c      	cbz	r4, 8010728 <rcl_subscription_init+0x40>
 8010708:	4628      	mov	r0, r5
 801070a:	f7ff fd87 	bl	801021c <rcl_node_is_valid>
 801070e:	2800      	cmp	r0, #0
 8010710:	d054      	beq.n	80107bc <rcl_subscription_init+0xd4>
 8010712:	f1b8 0f00 	cmp.w	r8, #0
 8010716:	d007      	beq.n	8010728 <rcl_subscription_init+0x40>
 8010718:	b137      	cbz	r7, 8010728 <rcl_subscription_init+0x40>
 801071a:	6823      	ldr	r3, [r4, #0]
 801071c:	b14b      	cbz	r3, 8010732 <rcl_subscription_init+0x4a>
 801071e:	2764      	movs	r7, #100	@ 0x64
 8010720:	4638      	mov	r0, r7
 8010722:	b009      	add	sp, #36	@ 0x24
 8010724:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010728:	270b      	movs	r7, #11
 801072a:	4638      	mov	r0, r7
 801072c:	b009      	add	sp, #36	@ 0x24
 801072e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010732:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8010736:	aa07      	add	r2, sp, #28
 8010738:	9205      	str	r2, [sp, #20]
 801073a:	9307      	str	r3, [sp, #28]
 801073c:	f106 0358 	add.w	r3, r6, #88	@ 0x58
 8010740:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8010744:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8010748:	4639      	mov	r1, r7
 801074a:	e899 000c 	ldmia.w	r9, {r2, r3}
 801074e:	4628      	mov	r0, r5
 8010750:	f7ff fdb8 	bl	80102c4 <rcl_node_resolve_name>
 8010754:	4607      	mov	r7, r0
 8010756:	2800      	cmp	r0, #0
 8010758:	d15f      	bne.n	801081a <rcl_subscription_init+0x132>
 801075a:	e9d6 3217 	ldrd	r3, r2, [r6, #92]	@ 0x5c
 801075e:	21c8      	movs	r1, #200	@ 0xc8
 8010760:	2001      	movs	r0, #1
 8010762:	4798      	blx	r3
 8010764:	6020      	str	r0, [r4, #0]
 8010766:	2800      	cmp	r0, #0
 8010768:	d05d      	beq.n	8010826 <rcl_subscription_init+0x13e>
 801076a:	4628      	mov	r0, r5
 801076c:	f7ff fd78 	bl	8010260 <rcl_node_get_rmw_handle>
 8010770:	f106 0364 	add.w	r3, r6, #100	@ 0x64
 8010774:	9300      	str	r3, [sp, #0]
 8010776:	9a07      	ldr	r2, [sp, #28]
 8010778:	6827      	ldr	r7, [r4, #0]
 801077a:	4641      	mov	r1, r8
 801077c:	4633      	mov	r3, r6
 801077e:	f003 fba9 	bl	8013ed4 <rmw_create_subscription>
 8010782:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0
 8010786:	6827      	ldr	r7, [r4, #0]
 8010788:	f8d7 00c0 	ldr.w	r0, [r7, #192]	@ 0xc0
 801078c:	b348      	cbz	r0, 80107e2 <rcl_subscription_init+0xfa>
 801078e:	f107 0170 	add.w	r1, r7, #112	@ 0x70
 8010792:	f003 fc81 	bl	8014098 <rmw_subscription_get_actual_qos>
 8010796:	4607      	mov	r7, r0
 8010798:	b9a8      	cbnz	r0, 80107c6 <rcl_subscription_init+0xde>
 801079a:	6820      	ldr	r0, [r4, #0]
 801079c:	f896 3048 	ldrb.w	r3, [r6, #72]	@ 0x48
 80107a0:	f880 30b8 	strb.w	r3, [r0, #184]	@ 0xb8
 80107a4:	2270      	movs	r2, #112	@ 0x70
 80107a6:	4631      	mov	r1, r6
 80107a8:	f007 f9c7 	bl	8017b3a <memcpy>
 80107ac:	9807      	ldr	r0, [sp, #28]
 80107ae:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 80107b0:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 80107b2:	4798      	blx	r3
 80107b4:	4638      	mov	r0, r7
 80107b6:	b009      	add	sp, #36	@ 0x24
 80107b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80107bc:	27c8      	movs	r7, #200	@ 0xc8
 80107be:	4638      	mov	r0, r7
 80107c0:	b009      	add	sp, #36	@ 0x24
 80107c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80107c6:	6827      	ldr	r7, [r4, #0]
 80107c8:	b32f      	cbz	r7, 8010816 <rcl_subscription_init+0x12e>
 80107ca:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80107ce:	b14b      	cbz	r3, 80107e4 <rcl_subscription_init+0xfc>
 80107d0:	4628      	mov	r0, r5
 80107d2:	f7ff fd45 	bl	8010260 <rcl_node_get_rmw_handle>
 80107d6:	6823      	ldr	r3, [r4, #0]
 80107d8:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 80107dc:	f003 fc6c 	bl	80140b8 <rmw_destroy_subscription>
 80107e0:	6827      	ldr	r7, [r4, #0]
 80107e2:	b197      	cbz	r7, 801080a <rcl_subscription_init+0x122>
 80107e4:	f107 0550 	add.w	r5, r7, #80	@ 0x50
 80107e8:	4628      	mov	r0, r5
 80107ea:	f7f9 fff5 	bl	800a7d8 <rcutils_allocator_is_valid>
 80107ee:	b158      	cbz	r0, 8010808 <rcl_subscription_init+0x120>
 80107f0:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80107f2:	b148      	cbz	r0, 8010808 <rcl_subscription_init+0x120>
 80107f4:	4629      	mov	r1, r5
 80107f6:	f002 fb97 	bl	8012f28 <rmw_subscription_content_filter_options_fini>
 80107fa:	4605      	mov	r5, r0
 80107fc:	b9b8      	cbnz	r0, 801082e <rcl_subscription_init+0x146>
 80107fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010800:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8010802:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8010804:	4798      	blx	r3
 8010806:	66fd      	str	r5, [r7, #108]	@ 0x6c
 8010808:	6827      	ldr	r7, [r4, #0]
 801080a:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 801080c:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 801080e:	4638      	mov	r0, r7
 8010810:	4798      	blx	r3
 8010812:	2300      	movs	r3, #0
 8010814:	6023      	str	r3, [r4, #0]
 8010816:	2701      	movs	r7, #1
 8010818:	e7c8      	b.n	80107ac <rcl_subscription_init+0xc4>
 801081a:	2867      	cmp	r0, #103	@ 0x67
 801081c:	d0c6      	beq.n	80107ac <rcl_subscription_init+0xc4>
 801081e:	2869      	cmp	r0, #105	@ 0x69
 8010820:	d003      	beq.n	801082a <rcl_subscription_init+0x142>
 8010822:	280a      	cmp	r0, #10
 8010824:	d1f7      	bne.n	8010816 <rcl_subscription_init+0x12e>
 8010826:	270a      	movs	r7, #10
 8010828:	e7c0      	b.n	80107ac <rcl_subscription_init+0xc4>
 801082a:	2767      	movs	r7, #103	@ 0x67
 801082c:	e7be      	b.n	80107ac <rcl_subscription_init+0xc4>
 801082e:	f7ff f8fd 	bl	800fa2c <rcl_convert_rmw_ret_to_rcl_ret>
 8010832:	6827      	ldr	r7, [r4, #0]
 8010834:	e7e9      	b.n	801080a <rcl_subscription_init+0x122>
 8010836:	bf00      	nop

08010838 <rcl_subscription_get_default_options>:
 8010838:	b570      	push	{r4, r5, r6, lr}
 801083a:	4d14      	ldr	r5, [pc, #80]	@ (801088c <rcl_subscription_get_default_options+0x54>)
 801083c:	4914      	ldr	r1, [pc, #80]	@ (8010890 <rcl_subscription_get_default_options+0x58>)
 801083e:	b08a      	sub	sp, #40	@ 0x28
 8010840:	4604      	mov	r4, r0
 8010842:	2250      	movs	r2, #80	@ 0x50
 8010844:	4628      	mov	r0, r5
 8010846:	f007 f978 	bl	8017b3a <memcpy>
 801084a:	a804      	add	r0, sp, #16
 801084c:	f7f9 ffb6 	bl	800a7bc <rcutils_get_default_allocator>
 8010850:	f10d 0c10 	add.w	ip, sp, #16
 8010854:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010858:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 801085c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8010860:	466e      	mov	r6, sp
 8010862:	f8dc 3000 	ldr.w	r3, [ip]
 8010866:	f8ce 3000 	str.w	r3, [lr]
 801086a:	4630      	mov	r0, r6
 801086c:	f002 fb76 	bl	8012f5c <rmw_get_default_subscription_options>
 8010870:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8010874:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 8010878:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801087c:	2270      	movs	r2, #112	@ 0x70
 801087e:	4629      	mov	r1, r5
 8010880:	4620      	mov	r0, r4
 8010882:	f007 f95a 	bl	8017b3a <memcpy>
 8010886:	4620      	mov	r0, r4
 8010888:	b00a      	add	sp, #40	@ 0x28
 801088a:	bd70      	pop	{r4, r5, r6, pc}
 801088c:	2000bf60 	.word	0x2000bf60
 8010890:	08018d40 	.word	0x08018d40

08010894 <rcl_take>:
 8010894:	2800      	cmp	r0, #0
 8010896:	d04a      	beq.n	801092e <rcl_take+0x9a>
 8010898:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801089c:	4604      	mov	r4, r0
 801089e:	6800      	ldr	r0, [r0, #0]
 80108a0:	b0a4      	sub	sp, #144	@ 0x90
 80108a2:	2800      	cmp	r0, #0
 80108a4:	d03b      	beq.n	801091e <rcl_take+0x8a>
 80108a6:	461f      	mov	r7, r3
 80108a8:	f8d0 30c0 	ldr.w	r3, [r0, #192]	@ 0xc0
 80108ac:	2b00      	cmp	r3, #0
 80108ae:	d036      	beq.n	801091e <rcl_take+0x8a>
 80108b0:	460e      	mov	r6, r1
 80108b2:	2900      	cmp	r1, #0
 80108b4:	d039      	beq.n	801092a <rcl_take+0x96>
 80108b6:	4615      	mov	r5, r2
 80108b8:	2a00      	cmp	r2, #0
 80108ba:	d03c      	beq.n	8010936 <rcl_take+0xa2>
 80108bc:	a802      	add	r0, sp, #8
 80108be:	f002 fbd7 	bl	8013070 <rmw_get_zero_initialized_message_info>
 80108c2:	f10d 0c08 	add.w	ip, sp, #8
 80108c6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80108ca:	46ae      	mov	lr, r5
 80108cc:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80108d0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80108d4:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80108d8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80108dc:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80108e0:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 80108e4:	f04f 0800 	mov.w	r8, #0
 80108e8:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 80108ec:	f88d 804f 	strb.w	r8, [sp, #79]	@ 0x4f
 80108f0:	6822      	ldr	r2, [r4, #0]
 80108f2:	462b      	mov	r3, r5
 80108f4:	f8d2 00c0 	ldr.w	r0, [r2, #192]	@ 0xc0
 80108f8:	9700      	str	r7, [sp, #0]
 80108fa:	f10d 024f 	add.w	r2, sp, #79	@ 0x4f
 80108fe:	4631      	mov	r1, r6
 8010900:	f003 fc3a 	bl	8014178 <rmw_take_with_info>
 8010904:	4603      	mov	r3, r0
 8010906:	b9c0      	cbnz	r0, 801093a <rcl_take+0xa6>
 8010908:	f89d 104f 	ldrb.w	r1, [sp, #79]	@ 0x4f
 801090c:	f240 1291 	movw	r2, #401	@ 0x191
 8010910:	2900      	cmp	r1, #0
 8010912:	bf08      	it	eq
 8010914:	4613      	moveq	r3, r2
 8010916:	4618      	mov	r0, r3
 8010918:	b024      	add	sp, #144	@ 0x90
 801091a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801091e:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8010922:	4618      	mov	r0, r3
 8010924:	b024      	add	sp, #144	@ 0x90
 8010926:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801092a:	230b      	movs	r3, #11
 801092c:	e7f3      	b.n	8010916 <rcl_take+0x82>
 801092e:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8010932:	4618      	mov	r0, r3
 8010934:	4770      	bx	lr
 8010936:	ad14      	add	r5, sp, #80	@ 0x50
 8010938:	e7c0      	b.n	80108bc <rcl_take+0x28>
 801093a:	f7ff f877 	bl	800fa2c <rcl_convert_rmw_ret_to_rcl_ret>
 801093e:	4603      	mov	r3, r0
 8010940:	e7e9      	b.n	8010916 <rcl_take+0x82>
 8010942:	bf00      	nop

08010944 <rcl_subscription_get_rmw_handle>:
 8010944:	b118      	cbz	r0, 801094e <rcl_subscription_get_rmw_handle+0xa>
 8010946:	6800      	ldr	r0, [r0, #0]
 8010948:	b108      	cbz	r0, 801094e <rcl_subscription_get_rmw_handle+0xa>
 801094a:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 801094e:	4770      	bx	lr

08010950 <rcl_subscription_is_valid>:
 8010950:	b130      	cbz	r0, 8010960 <rcl_subscription_is_valid+0x10>
 8010952:	6800      	ldr	r0, [r0, #0]
 8010954:	b120      	cbz	r0, 8010960 <rcl_subscription_is_valid+0x10>
 8010956:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 801095a:	3800      	subs	r0, #0
 801095c:	bf18      	it	ne
 801095e:	2001      	movne	r0, #1
 8010960:	4770      	bx	lr
 8010962:	bf00      	nop

08010964 <rcl_get_system_time>:
 8010964:	4608      	mov	r0, r1
 8010966:	f7f9 bf77 	b.w	800a858 <rcutils_system_time_now>
 801096a:	bf00      	nop

0801096c <rcl_get_steady_time>:
 801096c:	4608      	mov	r0, r1
 801096e:	f7f9 bf9b 	b.w	800a8a8 <rcutils_steady_time_now>
 8010972:	bf00      	nop

08010974 <rcl_get_ros_time>:
 8010974:	7a03      	ldrb	r3, [r0, #8]
 8010976:	b510      	push	{r4, lr}
 8010978:	460c      	mov	r4, r1
 801097a:	b133      	cbz	r3, 801098a <rcl_get_ros_time+0x16>
 801097c:	2105      	movs	r1, #5
 801097e:	f001 ff5f 	bl	8012840 <__atomic_load_8>
 8010982:	e9c4 0100 	strd	r0, r1, [r4]
 8010986:	2000      	movs	r0, #0
 8010988:	bd10      	pop	{r4, pc}
 801098a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801098e:	4608      	mov	r0, r1
 8010990:	f7f9 bf62 	b.w	800a858 <rcutils_system_time_now>

08010994 <rcl_clock_init>:
 8010994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010996:	4605      	mov	r5, r0
 8010998:	4610      	mov	r0, r2
 801099a:	4614      	mov	r4, r2
 801099c:	460e      	mov	r6, r1
 801099e:	f7f9 ff1b 	bl	800a7d8 <rcutils_allocator_is_valid>
 80109a2:	b128      	cbz	r0, 80109b0 <rcl_clock_init+0x1c>
 80109a4:	2d03      	cmp	r5, #3
 80109a6:	d803      	bhi.n	80109b0 <rcl_clock_init+0x1c>
 80109a8:	e8df f005 	tbb	[pc, r5]
 80109ac:	06532e1d 	.word	0x06532e1d
 80109b0:	f04f 0c0b 	mov.w	ip, #11
 80109b4:	4660      	mov	r0, ip
 80109b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80109b8:	2e00      	cmp	r6, #0
 80109ba:	d0f9      	beq.n	80109b0 <rcl_clock_init+0x1c>
 80109bc:	2c00      	cmp	r4, #0
 80109be:	d0f7      	beq.n	80109b0 <rcl_clock_init+0x1c>
 80109c0:	2300      	movs	r3, #0
 80109c2:	e9c6 3301 	strd	r3, r3, [r6, #4]
 80109c6:	f8df e0b4 	ldr.w	lr, [pc, #180]	@ 8010a7c <rcl_clock_init+0xe8>
 80109ca:	6133      	str	r3, [r6, #16]
 80109cc:	f106 0514 	add.w	r5, r6, #20
 80109d0:	469c      	mov	ip, r3
 80109d2:	2703      	movs	r7, #3
 80109d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80109d6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80109d8:	6823      	ldr	r3, [r4, #0]
 80109da:	602b      	str	r3, [r5, #0]
 80109dc:	7037      	strb	r7, [r6, #0]
 80109de:	f8c6 e00c 	str.w	lr, [r6, #12]
 80109e2:	4660      	mov	r0, ip
 80109e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80109e6:	2e00      	cmp	r6, #0
 80109e8:	d0e2      	beq.n	80109b0 <rcl_clock_init+0x1c>
 80109ea:	2300      	movs	r3, #0
 80109ec:	7033      	strb	r3, [r6, #0]
 80109ee:	e9c6 3301 	strd	r3, r3, [r6, #4]
 80109f2:	e9c6 3303 	strd	r3, r3, [r6, #12]
 80109f6:	469c      	mov	ip, r3
 80109f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80109fa:	f106 0514 	add.w	r5, r6, #20
 80109fe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8010a00:	6823      	ldr	r3, [r4, #0]
 8010a02:	602b      	str	r3, [r5, #0]
 8010a04:	4660      	mov	r0, ip
 8010a06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010a08:	2e00      	cmp	r6, #0
 8010a0a:	d0d1      	beq.n	80109b0 <rcl_clock_init+0x1c>
 8010a0c:	2c00      	cmp	r4, #0
 8010a0e:	d0cf      	beq.n	80109b0 <rcl_clock_init+0x1c>
 8010a10:	2700      	movs	r7, #0
 8010a12:	7037      	strb	r7, [r6, #0]
 8010a14:	46a4      	mov	ip, r4
 8010a16:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010a1a:	f106 0514 	add.w	r5, r6, #20
 8010a1e:	e9c6 7701 	strd	r7, r7, [r6, #4]
 8010a22:	e9c6 7703 	strd	r7, r7, [r6, #12]
 8010a26:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8010a28:	f8dc 3000 	ldr.w	r3, [ip]
 8010a2c:	602b      	str	r3, [r5, #0]
 8010a2e:	6921      	ldr	r1, [r4, #16]
 8010a30:	6823      	ldr	r3, [r4, #0]
 8010a32:	2010      	movs	r0, #16
 8010a34:	4798      	blx	r3
 8010a36:	6130      	str	r0, [r6, #16]
 8010a38:	b1d0      	cbz	r0, 8010a70 <rcl_clock_init+0xdc>
 8010a3a:	2200      	movs	r2, #0
 8010a3c:	2300      	movs	r3, #0
 8010a3e:	e9c0 2300 	strd	r2, r3, [r0]
 8010a42:	2301      	movs	r3, #1
 8010a44:	7207      	strb	r7, [r0, #8]
 8010a46:	4a0c      	ldr	r2, [pc, #48]	@ (8010a78 <rcl_clock_init+0xe4>)
 8010a48:	7033      	strb	r3, [r6, #0]
 8010a4a:	46bc      	mov	ip, r7
 8010a4c:	60f2      	str	r2, [r6, #12]
 8010a4e:	4660      	mov	r0, ip
 8010a50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010a52:	2e00      	cmp	r6, #0
 8010a54:	d0ac      	beq.n	80109b0 <rcl_clock_init+0x1c>
 8010a56:	2c00      	cmp	r4, #0
 8010a58:	d0aa      	beq.n	80109b0 <rcl_clock_init+0x1c>
 8010a5a:	2300      	movs	r3, #0
 8010a5c:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8010a60:	f8df e01c 	ldr.w	lr, [pc, #28]	@ 8010a80 <rcl_clock_init+0xec>
 8010a64:	6133      	str	r3, [r6, #16]
 8010a66:	f106 0514 	add.w	r5, r6, #20
 8010a6a:	469c      	mov	ip, r3
 8010a6c:	2702      	movs	r7, #2
 8010a6e:	e7b1      	b.n	80109d4 <rcl_clock_init+0x40>
 8010a70:	f04f 0c0a 	mov.w	ip, #10
 8010a74:	e79e      	b.n	80109b4 <rcl_clock_init+0x20>
 8010a76:	bf00      	nop
 8010a78:	08010975 	.word	0x08010975
 8010a7c:	0801096d 	.word	0x0801096d
 8010a80:	08010965 	.word	0x08010965

08010a84 <rcl_clock_get_now>:
 8010a84:	b140      	cbz	r0, 8010a98 <rcl_clock_get_now+0x14>
 8010a86:	b139      	cbz	r1, 8010a98 <rcl_clock_get_now+0x14>
 8010a88:	7803      	ldrb	r3, [r0, #0]
 8010a8a:	b11b      	cbz	r3, 8010a94 <rcl_clock_get_now+0x10>
 8010a8c:	68c3      	ldr	r3, [r0, #12]
 8010a8e:	b10b      	cbz	r3, 8010a94 <rcl_clock_get_now+0x10>
 8010a90:	6900      	ldr	r0, [r0, #16]
 8010a92:	4718      	bx	r3
 8010a94:	2001      	movs	r0, #1
 8010a96:	4770      	bx	lr
 8010a98:	200b      	movs	r0, #11
 8010a9a:	4770      	bx	lr

08010a9c <rcl_clock_add_jump_callback>:
 8010a9c:	b082      	sub	sp, #8
 8010a9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010aa2:	a906      	add	r1, sp, #24
 8010aa4:	e881 000c 	stmia.w	r1, {r2, r3}
 8010aa8:	e9dd 650c 	ldrd	r6, r5, [sp, #48]	@ 0x30
 8010aac:	b320      	cbz	r0, 8010af8 <rcl_clock_add_jump_callback+0x5c>
 8010aae:	4604      	mov	r4, r0
 8010ab0:	3014      	adds	r0, #20
 8010ab2:	f7f9 fe91 	bl	800a7d8 <rcutils_allocator_is_valid>
 8010ab6:	b1f8      	cbz	r0, 8010af8 <rcl_clock_add_jump_callback+0x5c>
 8010ab8:	b1f6      	cbz	r6, 8010af8 <rcl_clock_add_jump_callback+0x5c>
 8010aba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010abc:	2b00      	cmp	r3, #0
 8010abe:	db1b      	blt.n	8010af8 <rcl_clock_add_jump_callback+0x5c>
 8010ac0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 8010ac4:	2a01      	cmp	r2, #1
 8010ac6:	f173 0300 	sbcs.w	r3, r3, #0
 8010aca:	da15      	bge.n	8010af8 <rcl_clock_add_jump_callback+0x5c>
 8010acc:	e9d4 0701 	ldrd	r0, r7, [r4, #4]
 8010ad0:	2f00      	cmp	r7, #0
 8010ad2:	d042      	beq.n	8010b5a <rcl_clock_add_jump_callback+0xbe>
 8010ad4:	2300      	movs	r3, #0
 8010ad6:	4602      	mov	r2, r0
 8010ad8:	e003      	b.n	8010ae2 <rcl_clock_add_jump_callback+0x46>
 8010ada:	42bb      	cmp	r3, r7
 8010adc:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 8010ae0:	d011      	beq.n	8010b06 <rcl_clock_add_jump_callback+0x6a>
 8010ae2:	6811      	ldr	r1, [r2, #0]
 8010ae4:	42b1      	cmp	r1, r6
 8010ae6:	f103 0301 	add.w	r3, r3, #1
 8010aea:	d1f6      	bne.n	8010ada <rcl_clock_add_jump_callback+0x3e>
 8010aec:	6a11      	ldr	r1, [r2, #32]
 8010aee:	42a9      	cmp	r1, r5
 8010af0:	d1f3      	bne.n	8010ada <rcl_clock_add_jump_callback+0x3e>
 8010af2:	f04f 0e01 	mov.w	lr, #1
 8010af6:	e001      	b.n	8010afc <rcl_clock_add_jump_callback+0x60>
 8010af8:	f04f 0e0b 	mov.w	lr, #11
 8010afc:	4670      	mov	r0, lr
 8010afe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010b02:	b002      	add	sp, #8
 8010b04:	4770      	bx	lr
 8010b06:	3301      	adds	r3, #1
 8010b08:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8010b0c:	00d9      	lsls	r1, r3, #3
 8010b0e:	69e3      	ldr	r3, [r4, #28]
 8010b10:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8010b12:	4798      	blx	r3
 8010b14:	b1f0      	cbz	r0, 8010b54 <rcl_clock_add_jump_callback+0xb8>
 8010b16:	68a3      	ldr	r3, [r4, #8]
 8010b18:	6060      	str	r0, [r4, #4]
 8010b1a:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8010b1e:	f10d 0c18 	add.w	ip, sp, #24
 8010b22:	f840 6032 	str.w	r6, [r0, r2, lsl #3]
 8010b26:	f103 0801 	add.w	r8, r3, #1
 8010b2a:	eb00 06c2 	add.w	r6, r0, r2, lsl #3
 8010b2e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010b32:	f106 0708 	add.w	r7, r6, #8
 8010b36:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8010b38:	e89c 0003 	ldmia.w	ip, {r0, r1}
 8010b3c:	f04f 0e00 	mov.w	lr, #0
 8010b40:	e887 0003 	stmia.w	r7, {r0, r1}
 8010b44:	6235      	str	r5, [r6, #32]
 8010b46:	4670      	mov	r0, lr
 8010b48:	f8c4 8008 	str.w	r8, [r4, #8]
 8010b4c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010b50:	b002      	add	sp, #8
 8010b52:	4770      	bx	lr
 8010b54:	f04f 0e0a 	mov.w	lr, #10
 8010b58:	e7d0      	b.n	8010afc <rcl_clock_add_jump_callback+0x60>
 8010b5a:	2128      	movs	r1, #40	@ 0x28
 8010b5c:	e7d7      	b.n	8010b0e <rcl_clock_add_jump_callback+0x72>
 8010b5e:	bf00      	nop

08010b60 <rcl_clock_remove_jump_callback>:
 8010b60:	2800      	cmp	r0, #0
 8010b62:	d057      	beq.n	8010c14 <rcl_clock_remove_jump_callback+0xb4>
 8010b64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010b68:	4605      	mov	r5, r0
 8010b6a:	3014      	adds	r0, #20
 8010b6c:	4688      	mov	r8, r1
 8010b6e:	4692      	mov	sl, r2
 8010b70:	f7f9 fe32 	bl	800a7d8 <rcutils_allocator_is_valid>
 8010b74:	2800      	cmp	r0, #0
 8010b76:	d03b      	beq.n	8010bf0 <rcl_clock_remove_jump_callback+0x90>
 8010b78:	f1b8 0f00 	cmp.w	r8, #0
 8010b7c:	d038      	beq.n	8010bf0 <rcl_clock_remove_jump_callback+0x90>
 8010b7e:	68ae      	ldr	r6, [r5, #8]
 8010b80:	b166      	cbz	r6, 8010b9c <rcl_clock_remove_jump_callback+0x3c>
 8010b82:	f8d5 9004 	ldr.w	r9, [r5, #4]
 8010b86:	eb06 0786 	add.w	r7, r6, r6, lsl #2
 8010b8a:	eb09 07c7 	add.w	r7, r9, r7, lsl #3
 8010b8e:	464c      	mov	r4, r9
 8010b90:	6823      	ldr	r3, [r4, #0]
 8010b92:	4543      	cmp	r3, r8
 8010b94:	d005      	beq.n	8010ba2 <rcl_clock_remove_jump_callback+0x42>
 8010b96:	3428      	adds	r4, #40	@ 0x28
 8010b98:	42a7      	cmp	r7, r4
 8010b9a:	d1f9      	bne.n	8010b90 <rcl_clock_remove_jump_callback+0x30>
 8010b9c:	2001      	movs	r0, #1
 8010b9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010ba2:	6a23      	ldr	r3, [r4, #32]
 8010ba4:	3428      	adds	r4, #40	@ 0x28
 8010ba6:	42bc      	cmp	r4, r7
 8010ba8:	d02d      	beq.n	8010c06 <rcl_clock_remove_jump_callback+0xa6>
 8010baa:	4553      	cmp	r3, sl
 8010bac:	d1f0      	bne.n	8010b90 <rcl_clock_remove_jump_callback+0x30>
 8010bae:	46a6      	mov	lr, r4
 8010bb0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8010bb4:	f1a4 0c28 	sub.w	ip, r4, #40	@ 0x28
 8010bb8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010bbc:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8010bc0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010bc4:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8010bc8:	3428      	adds	r4, #40	@ 0x28
 8010bca:	42a7      	cmp	r7, r4
 8010bcc:	e88c 0003 	stmia.w	ip, {r0, r1}
 8010bd0:	d1ed      	bne.n	8010bae <rcl_clock_remove_jump_callback+0x4e>
 8010bd2:	3e01      	subs	r6, #1
 8010bd4:	60ae      	str	r6, [r5, #8]
 8010bd6:	b176      	cbz	r6, 8010bf6 <rcl_clock_remove_jump_callback+0x96>
 8010bd8:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 8010bdc:	69eb      	ldr	r3, [r5, #28]
 8010bde:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
 8010be0:	00f1      	lsls	r1, r6, #3
 8010be2:	4648      	mov	r0, r9
 8010be4:	4798      	blx	r3
 8010be6:	b1b8      	cbz	r0, 8010c18 <rcl_clock_remove_jump_callback+0xb8>
 8010be8:	6068      	str	r0, [r5, #4]
 8010bea:	2000      	movs	r0, #0
 8010bec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010bf0:	200b      	movs	r0, #11
 8010bf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010bf6:	4648      	mov	r0, r9
 8010bf8:	69ab      	ldr	r3, [r5, #24]
 8010bfa:	6a69      	ldr	r1, [r5, #36]	@ 0x24
 8010bfc:	4798      	blx	r3
 8010bfe:	606e      	str	r6, [r5, #4]
 8010c00:	4630      	mov	r0, r6
 8010c02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010c06:	4553      	cmp	r3, sl
 8010c08:	d1c8      	bne.n	8010b9c <rcl_clock_remove_jump_callback+0x3c>
 8010c0a:	3e01      	subs	r6, #1
 8010c0c:	60ae      	str	r6, [r5, #8]
 8010c0e:	2e00      	cmp	r6, #0
 8010c10:	d1e2      	bne.n	8010bd8 <rcl_clock_remove_jump_callback+0x78>
 8010c12:	e7f0      	b.n	8010bf6 <rcl_clock_remove_jump_callback+0x96>
 8010c14:	200b      	movs	r0, #11
 8010c16:	4770      	bx	lr
 8010c18:	200a      	movs	r0, #10
 8010c1a:	e7ea      	b.n	8010bf2 <rcl_clock_remove_jump_callback+0x92>

08010c1c <_rcl_timer_time_jump>:
 8010c1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010c20:	4605      	mov	r5, r0
 8010c22:	b084      	sub	sp, #16
 8010c24:	4614      	mov	r4, r2
 8010c26:	b131      	cbz	r1, 8010c36 <_rcl_timer_time_jump+0x1a>
 8010c28:	7803      	ldrb	r3, [r0, #0]
 8010c2a:	3b02      	subs	r3, #2
 8010c2c:	2b01      	cmp	r3, #1
 8010c2e:	d93f      	bls.n	8010cb0 <_rcl_timer_time_jump+0x94>
 8010c30:	b004      	add	sp, #16
 8010c32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010c36:	6813      	ldr	r3, [r2, #0]
 8010c38:	a902      	add	r1, sp, #8
 8010c3a:	6818      	ldr	r0, [r3, #0]
 8010c3c:	f7ff ff22 	bl	8010a84 <rcl_clock_get_now>
 8010c40:	2800      	cmp	r0, #0
 8010c42:	d1f5      	bne.n	8010c30 <_rcl_timer_time_jump+0x14>
 8010c44:	6820      	ldr	r0, [r4, #0]
 8010c46:	2105      	movs	r1, #5
 8010c48:	3020      	adds	r0, #32
 8010c4a:	f001 fdf9 	bl	8012840 <__atomic_load_8>
 8010c4e:	6823      	ldr	r3, [r4, #0]
 8010c50:	4681      	mov	r9, r0
 8010c52:	4688      	mov	r8, r1
 8010c54:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 8010c58:	2105      	movs	r1, #5
 8010c5a:	f001 fdf1 	bl	8012840 <__atomic_load_8>
 8010c5e:	4607      	mov	r7, r0
 8010c60:	6820      	ldr	r0, [r4, #0]
 8010c62:	460e      	mov	r6, r1
 8010c64:	3018      	adds	r0, #24
 8010c66:	2105      	movs	r1, #5
 8010c68:	f001 fdea 	bl	8012840 <__atomic_load_8>
 8010c6c:	782b      	ldrb	r3, [r5, #0]
 8010c6e:	9a02      	ldr	r2, [sp, #8]
 8010c70:	3b02      	subs	r3, #2
 8010c72:	2b01      	cmp	r3, #1
 8010c74:	460d      	mov	r5, r1
 8010c76:	9b03      	ldr	r3, [sp, #12]
 8010c78:	4682      	mov	sl, r0
 8010c7a:	d937      	bls.n	8010cec <_rcl_timer_time_jump+0xd0>
 8010c7c:	42ba      	cmp	r2, r7
 8010c7e:	eb73 0106 	sbcs.w	r1, r3, r6
 8010c82:	da5f      	bge.n	8010d44 <_rcl_timer_time_jump+0x128>
 8010c84:	454a      	cmp	r2, r9
 8010c86:	eb73 0108 	sbcs.w	r1, r3, r8
 8010c8a:	dad1      	bge.n	8010c30 <_rcl_timer_time_jump+0x14>
 8010c8c:	6820      	ldr	r0, [r4, #0]
 8010c8e:	eb1a 0202 	adds.w	r2, sl, r2
 8010c92:	eb43 0305 	adc.w	r3, r3, r5
 8010c96:	2505      	movs	r5, #5
 8010c98:	3028      	adds	r0, #40	@ 0x28
 8010c9a:	9500      	str	r5, [sp, #0]
 8010c9c:	f001 fe06 	bl	80128ac <__atomic_store_8>
 8010ca0:	6820      	ldr	r0, [r4, #0]
 8010ca2:	9500      	str	r5, [sp, #0]
 8010ca4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010ca8:	3020      	adds	r0, #32
 8010caa:	f001 fdff 	bl	80128ac <__atomic_store_8>
 8010cae:	e7bf      	b.n	8010c30 <_rcl_timer_time_jump+0x14>
 8010cb0:	6813      	ldr	r3, [r2, #0]
 8010cb2:	a902      	add	r1, sp, #8
 8010cb4:	6818      	ldr	r0, [r3, #0]
 8010cb6:	f7ff fee5 	bl	8010a84 <rcl_clock_get_now>
 8010cba:	2800      	cmp	r0, #0
 8010cbc:	d1b8      	bne.n	8010c30 <_rcl_timer_time_jump+0x14>
 8010cbe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010cc2:	4313      	orrs	r3, r2
 8010cc4:	d0b4      	beq.n	8010c30 <_rcl_timer_time_jump+0x14>
 8010cc6:	6820      	ldr	r0, [r4, #0]
 8010cc8:	2105      	movs	r1, #5
 8010cca:	3028      	adds	r0, #40	@ 0x28
 8010ccc:	f001 fdb8 	bl	8012840 <__atomic_load_8>
 8010cd0:	9d02      	ldr	r5, [sp, #8]
 8010cd2:	9b03      	ldr	r3, [sp, #12]
 8010cd4:	4602      	mov	r2, r0
 8010cd6:	6820      	ldr	r0, [r4, #0]
 8010cd8:	1b52      	subs	r2, r2, r5
 8010cda:	f04f 0405 	mov.w	r4, #5
 8010cde:	9400      	str	r4, [sp, #0]
 8010ce0:	eb61 0303 	sbc.w	r3, r1, r3
 8010ce4:	3030      	adds	r0, #48	@ 0x30
 8010ce6:	f001 fde1 	bl	80128ac <__atomic_store_8>
 8010cea:	e7a1      	b.n	8010c30 <_rcl_timer_time_jump+0x14>
 8010cec:	4313      	orrs	r3, r2
 8010cee:	d09f      	beq.n	8010c30 <_rcl_timer_time_jump+0x14>
 8010cf0:	6820      	ldr	r0, [r4, #0]
 8010cf2:	f04f 0805 	mov.w	r8, #5
 8010cf6:	2300      	movs	r3, #0
 8010cf8:	f8cd 8000 	str.w	r8, [sp]
 8010cfc:	3030      	adds	r0, #48	@ 0x30
 8010cfe:	2200      	movs	r2, #0
 8010d00:	f001 fe0a 	bl	8012918 <__atomic_exchange_8>
 8010d04:	ea51 0300 	orrs.w	r3, r1, r0
 8010d08:	4606      	mov	r6, r0
 8010d0a:	460f      	mov	r7, r1
 8010d0c:	d090      	beq.n	8010c30 <_rcl_timer_time_jump+0x14>
 8010d0e:	9a02      	ldr	r2, [sp, #8]
 8010d10:	9b03      	ldr	r3, [sp, #12]
 8010d12:	f8cd 8000 	str.w	r8, [sp]
 8010d16:	1a12      	subs	r2, r2, r0
 8010d18:	6820      	ldr	r0, [r4, #0]
 8010d1a:	eb63 0301 	sbc.w	r3, r3, r1
 8010d1e:	eb12 020a 	adds.w	r2, r2, sl
 8010d22:	eb43 0305 	adc.w	r3, r3, r5
 8010d26:	3028      	adds	r0, #40	@ 0x28
 8010d28:	f001 fdc0 	bl	80128ac <__atomic_store_8>
 8010d2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010d30:	f8cd 8000 	str.w	r8, [sp]
 8010d34:	6820      	ldr	r0, [r4, #0]
 8010d36:	1b92      	subs	r2, r2, r6
 8010d38:	eb63 0307 	sbc.w	r3, r3, r7
 8010d3c:	3020      	adds	r0, #32
 8010d3e:	f001 fdb5 	bl	80128ac <__atomic_store_8>
 8010d42:	e775      	b.n	8010c30 <_rcl_timer_time_jump+0x14>
 8010d44:	6820      	ldr	r0, [r4, #0]
 8010d46:	3008      	adds	r0, #8
 8010d48:	f005 fe60 	bl	8016a0c <rcl_trigger_guard_condition>
 8010d4c:	e770      	b.n	8010c30 <_rcl_timer_time_jump+0x14>
 8010d4e:	bf00      	nop

08010d50 <rcl_get_zero_initialized_timer>:
 8010d50:	4b01      	ldr	r3, [pc, #4]	@ (8010d58 <rcl_get_zero_initialized_timer+0x8>)
 8010d52:	6818      	ldr	r0, [r3, #0]
 8010d54:	4770      	bx	lr
 8010d56:	bf00      	nop
 8010d58:	08018d90 	.word	0x08018d90
 8010d5c:	00000000 	.word	0x00000000

08010d60 <rcl_timer_init>:
 8010d60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010d64:	b0aa      	sub	sp, #168	@ 0xa8
 8010d66:	4604      	mov	r4, r0
 8010d68:	a835      	add	r0, sp, #212	@ 0xd4
 8010d6a:	e9dd 8732 	ldrd	r8, r7, [sp, #200]	@ 0xc8
 8010d6e:	460d      	mov	r5, r1
 8010d70:	4692      	mov	sl, r2
 8010d72:	f7f9 fd31 	bl	800a7d8 <rcutils_allocator_is_valid>
 8010d76:	2800      	cmp	r0, #0
 8010d78:	d064      	beq.n	8010e44 <rcl_timer_init+0xe4>
 8010d7a:	2c00      	cmp	r4, #0
 8010d7c:	d062      	beq.n	8010e44 <rcl_timer_init+0xe4>
 8010d7e:	2d00      	cmp	r5, #0
 8010d80:	d060      	beq.n	8010e44 <rcl_timer_init+0xe4>
 8010d82:	2f00      	cmp	r7, #0
 8010d84:	db5e      	blt.n	8010e44 <rcl_timer_init+0xe4>
 8010d86:	6823      	ldr	r3, [r4, #0]
 8010d88:	b123      	cbz	r3, 8010d94 <rcl_timer_init+0x34>
 8010d8a:	2664      	movs	r6, #100	@ 0x64
 8010d8c:	4630      	mov	r0, r6
 8010d8e:	b02a      	add	sp, #168	@ 0xa8
 8010d90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010d94:	a908      	add	r1, sp, #32
 8010d96:	4628      	mov	r0, r5
 8010d98:	f7ff fe74 	bl	8010a84 <rcl_clock_get_now>
 8010d9c:	4606      	mov	r6, r0
 8010d9e:	2800      	cmp	r0, #0
 8010da0:	d1f4      	bne.n	8010d8c <rcl_timer_init+0x2c>
 8010da2:	ae06      	add	r6, sp, #24
 8010da4:	4630      	mov	r0, r6
 8010da6:	e9cd 5a16 	strd	r5, sl, [sp, #88]	@ 0x58
 8010daa:	f005 fd37 	bl	801681c <rcl_get_zero_initialized_guard_condition>
 8010dae:	e896 0003 	ldmia.w	r6, {r0, r1}
 8010db2:	f10d 0960 	add.w	r9, sp, #96	@ 0x60
 8010db6:	ae0b      	add	r6, sp, #44	@ 0x2c
 8010db8:	e889 0003 	stmia.w	r9, {r0, r1}
 8010dbc:	4630      	mov	r0, r6
 8010dbe:	f005 fe09 	bl	80169d4 <rcl_guard_condition_get_default_options>
 8010dc2:	ab0d      	add	r3, sp, #52	@ 0x34
 8010dc4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8010dc8:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8010dcc:	4651      	mov	r1, sl
 8010dce:	e896 000c 	ldmia.w	r6, {r2, r3}
 8010dd2:	4648      	mov	r0, r9
 8010dd4:	f005 fd2c 	bl	8016830 <rcl_guard_condition_init>
 8010dd8:	4606      	mov	r6, r0
 8010dda:	2800      	cmp	r0, #0
 8010ddc:	d1d6      	bne.n	8010d8c <rcl_timer_init+0x2c>
 8010dde:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8010de0:	781b      	ldrb	r3, [r3, #0]
 8010de2:	2b01      	cmp	r3, #1
 8010de4:	d033      	beq.n	8010e4e <rcl_timer_init+0xee>
 8010de6:	9934      	ldr	r1, [sp, #208]	@ 0xd0
 8010de8:	911a      	str	r1, [sp, #104]	@ 0x68
 8010dea:	4642      	mov	r2, r8
 8010dec:	463b      	mov	r3, r7
 8010dee:	e9cd 231c 	strd	r2, r3, [sp, #112]	@ 0x70
 8010df2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8010df6:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 8010ea8 <rcl_timer_init+0x148>
 8010dfa:	eb12 0008 	adds.w	r0, r2, r8
 8010dfe:	eb47 0103 	adc.w	r1, r7, r3
 8010e02:	f10d 0ed4 	add.w	lr, sp, #212	@ 0xd4
 8010e06:	ed8d 7b22 	vstr	d7, [sp, #136]	@ 0x88
 8010e0a:	e9cd 231e 	strd	r2, r3, [sp, #120]	@ 0x78
 8010e0e:	e9cd 0120 	strd	r0, r1, [sp, #128]	@ 0x80
 8010e12:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8010e16:	f10d 0c94 	add.w	ip, sp, #148	@ 0x94
 8010e1a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010e1e:	f8de 3000 	ldr.w	r3, [lr]
 8010e22:	f8cc 3000 	str.w	r3, [ip]
 8010e26:	f04f 0a00 	mov.w	sl, #0
 8010e2a:	4619      	mov	r1, r3
 8010e2c:	f88d a090 	strb.w	sl, [sp, #144]	@ 0x90
 8010e30:	9b35      	ldr	r3, [sp, #212]	@ 0xd4
 8010e32:	2050      	movs	r0, #80	@ 0x50
 8010e34:	4798      	blx	r3
 8010e36:	6020      	str	r0, [r4, #0]
 8010e38:	b358      	cbz	r0, 8010e92 <rcl_timer_init+0x132>
 8010e3a:	2250      	movs	r2, #80	@ 0x50
 8010e3c:	a916      	add	r1, sp, #88	@ 0x58
 8010e3e:	f006 fe7c 	bl	8017b3a <memcpy>
 8010e42:	e7a3      	b.n	8010d8c <rcl_timer_init+0x2c>
 8010e44:	260b      	movs	r6, #11
 8010e46:	4630      	mov	r0, r6
 8010e48:	b02a      	add	sp, #168	@ 0xa8
 8010e4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010e4e:	2001      	movs	r0, #1
 8010e50:	2100      	movs	r1, #0
 8010e52:	e9cd 0112 	strd	r0, r1, [sp, #72]	@ 0x48
 8010e56:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010e5a:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8010e5e:	e9cd 0114 	strd	r0, r1, [sp, #80]	@ 0x50
 8010e62:	4a13      	ldr	r2, [pc, #76]	@ (8010eb0 <rcl_timer_init+0x150>)
 8010e64:	f88d 3040 	strb.w	r3, [sp, #64]	@ 0x40
 8010e68:	9405      	str	r4, [sp, #20]
 8010e6a:	9204      	str	r2, [sp, #16]
 8010e6c:	ab12      	add	r3, sp, #72	@ 0x48
 8010e6e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8010e70:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8010e74:	f10d 0c40 	add.w	ip, sp, #64	@ 0x40
 8010e78:	e89c 000c 	ldmia.w	ip, {r2, r3}
 8010e7c:	4628      	mov	r0, r5
 8010e7e:	f7ff fe0d 	bl	8010a9c <rcl_clock_add_jump_callback>
 8010e82:	4682      	mov	sl, r0
 8010e84:	2800      	cmp	r0, #0
 8010e86:	d0ae      	beq.n	8010de6 <rcl_timer_init+0x86>
 8010e88:	4648      	mov	r0, r9
 8010e8a:	f005 fd7d 	bl	8016988 <rcl_guard_condition_fini>
 8010e8e:	4656      	mov	r6, sl
 8010e90:	e77c      	b.n	8010d8c <rcl_timer_init+0x2c>
 8010e92:	4648      	mov	r0, r9
 8010e94:	f005 fd78 	bl	8016988 <rcl_guard_condition_fini>
 8010e98:	4905      	ldr	r1, [pc, #20]	@ (8010eb0 <rcl_timer_init+0x150>)
 8010e9a:	4622      	mov	r2, r4
 8010e9c:	4628      	mov	r0, r5
 8010e9e:	f7ff fe5f 	bl	8010b60 <rcl_clock_remove_jump_callback>
 8010ea2:	260a      	movs	r6, #10
 8010ea4:	e772      	b.n	8010d8c <rcl_timer_init+0x2c>
 8010ea6:	bf00      	nop
	...
 8010eb0:	08010c1d 	.word	0x08010c1d

08010eb4 <rcl_timer_call>:
 8010eb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010eb8:	b087      	sub	sp, #28
 8010eba:	2800      	cmp	r0, #0
 8010ebc:	d06d      	beq.n	8010f9a <rcl_timer_call+0xe6>
 8010ebe:	6803      	ldr	r3, [r0, #0]
 8010ec0:	4604      	mov	r4, r0
 8010ec2:	2b00      	cmp	r3, #0
 8010ec4:	d063      	beq.n	8010f8e <rcl_timer_call+0xda>
 8010ec6:	f3bf 8f5b 	dmb	ish
 8010eca:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8010ece:	f3bf 8f5b 	dmb	ish
 8010ed2:	2b00      	cmp	r3, #0
 8010ed4:	d150      	bne.n	8010f78 <rcl_timer_call+0xc4>
 8010ed6:	6803      	ldr	r3, [r0, #0]
 8010ed8:	a904      	add	r1, sp, #16
 8010eda:	6818      	ldr	r0, [r3, #0]
 8010edc:	f7ff fdd2 	bl	8010a84 <rcl_clock_get_now>
 8010ee0:	4605      	mov	r5, r0
 8010ee2:	2800      	cmp	r0, #0
 8010ee4:	d14a      	bne.n	8010f7c <rcl_timer_call+0xc8>
 8010ee6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010eea:	2b00      	cmp	r3, #0
 8010eec:	db4a      	blt.n	8010f84 <rcl_timer_call+0xd0>
 8010eee:	6820      	ldr	r0, [r4, #0]
 8010ef0:	f04f 0a05 	mov.w	sl, #5
 8010ef4:	f8cd a000 	str.w	sl, [sp]
 8010ef8:	3020      	adds	r0, #32
 8010efa:	f001 fd0d 	bl	8012918 <__atomic_exchange_8>
 8010efe:	6823      	ldr	r3, [r4, #0]
 8010f00:	f3bf 8f5b 	dmb	ish
 8010f04:	4680      	mov	r8, r0
 8010f06:	f8d3 b010 	ldr.w	fp, [r3, #16]
 8010f0a:	f3bf 8f5b 	dmb	ish
 8010f0e:	6820      	ldr	r0, [r4, #0]
 8010f10:	4689      	mov	r9, r1
 8010f12:	3028      	adds	r0, #40	@ 0x28
 8010f14:	4651      	mov	r1, sl
 8010f16:	f001 fc93 	bl	8012840 <__atomic_load_8>
 8010f1a:	4606      	mov	r6, r0
 8010f1c:	6820      	ldr	r0, [r4, #0]
 8010f1e:	460f      	mov	r7, r1
 8010f20:	3018      	adds	r0, #24
 8010f22:	4651      	mov	r1, sl
 8010f24:	f001 fc8c 	bl	8012840 <__atomic_load_8>
 8010f28:	1836      	adds	r6, r6, r0
 8010f2a:	4602      	mov	r2, r0
 8010f2c:	4682      	mov	sl, r0
 8010f2e:	e9dd 0c04 	ldrd	r0, ip, [sp, #16]
 8010f32:	eb47 0701 	adc.w	r7, r7, r1
 8010f36:	4286      	cmp	r6, r0
 8010f38:	460b      	mov	r3, r1
 8010f3a:	eb77 010c 	sbcs.w	r1, r7, ip
 8010f3e:	da04      	bge.n	8010f4a <rcl_timer_call+0x96>
 8010f40:	ea53 0102 	orrs.w	r1, r3, r2
 8010f44:	d12e      	bne.n	8010fa4 <rcl_timer_call+0xf0>
 8010f46:	4606      	mov	r6, r0
 8010f48:	4667      	mov	r7, ip
 8010f4a:	6820      	ldr	r0, [r4, #0]
 8010f4c:	2105      	movs	r1, #5
 8010f4e:	4632      	mov	r2, r6
 8010f50:	463b      	mov	r3, r7
 8010f52:	3028      	adds	r0, #40	@ 0x28
 8010f54:	9100      	str	r1, [sp, #0]
 8010f56:	f001 fca9 	bl	80128ac <__atomic_store_8>
 8010f5a:	f1bb 0f00 	cmp.w	fp, #0
 8010f5e:	d00d      	beq.n	8010f7c <rcl_timer_call+0xc8>
 8010f60:	9a04      	ldr	r2, [sp, #16]
 8010f62:	9b05      	ldr	r3, [sp, #20]
 8010f64:	ebb2 0208 	subs.w	r2, r2, r8
 8010f68:	4620      	mov	r0, r4
 8010f6a:	eb63 0309 	sbc.w	r3, r3, r9
 8010f6e:	47d8      	blx	fp
 8010f70:	4628      	mov	r0, r5
 8010f72:	b007      	add	sp, #28
 8010f74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010f78:	f240 3521 	movw	r5, #801	@ 0x321
 8010f7c:	4628      	mov	r0, r5
 8010f7e:	b007      	add	sp, #28
 8010f80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010f84:	2501      	movs	r5, #1
 8010f86:	4628      	mov	r0, r5
 8010f88:	b007      	add	sp, #28
 8010f8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010f8e:	f44f 7548 	mov.w	r5, #800	@ 0x320
 8010f92:	4628      	mov	r0, r5
 8010f94:	b007      	add	sp, #28
 8010f96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010f9a:	250b      	movs	r5, #11
 8010f9c:	4628      	mov	r0, r5
 8010f9e:	b007      	add	sp, #28
 8010fa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010fa4:	1b80      	subs	r0, r0, r6
 8010fa6:	eb6c 0107 	sbc.w	r1, ip, r7
 8010faa:	3801      	subs	r0, #1
 8010fac:	f161 0100 	sbc.w	r1, r1, #0
 8010fb0:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8010fb4:	f7ef f974 	bl	80002a0 <__aeabi_ldivmod>
 8010fb8:	9b02      	ldr	r3, [sp, #8]
 8010fba:	3001      	adds	r0, #1
 8010fbc:	f141 0100 	adc.w	r1, r1, #0
 8010fc0:	fb00 f303 	mul.w	r3, r0, r3
 8010fc4:	fb01 330a 	mla	r3, r1, sl, r3
 8010fc8:	fba0 0a0a 	umull	r0, sl, r0, sl
 8010fcc:	1986      	adds	r6, r0, r6
 8010fce:	4453      	add	r3, sl
 8010fd0:	eb43 0707 	adc.w	r7, r3, r7
 8010fd4:	e7b9      	b.n	8010f4a <rcl_timer_call+0x96>
 8010fd6:	bf00      	nop

08010fd8 <rcl_timer_is_ready>:
 8010fd8:	b570      	push	{r4, r5, r6, lr}
 8010fda:	b082      	sub	sp, #8
 8010fdc:	b378      	cbz	r0, 801103e <rcl_timer_is_ready+0x66>
 8010fde:	6803      	ldr	r3, [r0, #0]
 8010fe0:	4604      	mov	r4, r0
 8010fe2:	b383      	cbz	r3, 8011046 <rcl_timer_is_ready+0x6e>
 8010fe4:	460d      	mov	r5, r1
 8010fe6:	b351      	cbz	r1, 801103e <rcl_timer_is_ready+0x66>
 8010fe8:	f3bf 8f5b 	dmb	ish
 8010fec:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8010ff0:	f3bf 8f5b 	dmb	ish
 8010ff4:	b953      	cbnz	r3, 801100c <rcl_timer_is_ready+0x34>
 8010ff6:	6803      	ldr	r3, [r0, #0]
 8010ff8:	4669      	mov	r1, sp
 8010ffa:	6818      	ldr	r0, [r3, #0]
 8010ffc:	f7ff fd42 	bl	8010a84 <rcl_clock_get_now>
 8011000:	4606      	mov	r6, r0
 8011002:	b140      	cbz	r0, 8011016 <rcl_timer_is_ready+0x3e>
 8011004:	f240 3321 	movw	r3, #801	@ 0x321
 8011008:	4298      	cmp	r0, r3
 801100a:	d101      	bne.n	8011010 <rcl_timer_is_ready+0x38>
 801100c:	2600      	movs	r6, #0
 801100e:	702e      	strb	r6, [r5, #0]
 8011010:	4630      	mov	r0, r6
 8011012:	b002      	add	sp, #8
 8011014:	bd70      	pop	{r4, r5, r6, pc}
 8011016:	6820      	ldr	r0, [r4, #0]
 8011018:	2105      	movs	r1, #5
 801101a:	3028      	adds	r0, #40	@ 0x28
 801101c:	f001 fc10 	bl	8012840 <__atomic_load_8>
 8011020:	9b00      	ldr	r3, [sp, #0]
 8011022:	1ac0      	subs	r0, r0, r3
 8011024:	9b01      	ldr	r3, [sp, #4]
 8011026:	eb61 0103 	sbc.w	r1, r1, r3
 801102a:	2801      	cmp	r0, #1
 801102c:	f171 0300 	sbcs.w	r3, r1, #0
 8011030:	bfb4      	ite	lt
 8011032:	2301      	movlt	r3, #1
 8011034:	2300      	movge	r3, #0
 8011036:	4630      	mov	r0, r6
 8011038:	702b      	strb	r3, [r5, #0]
 801103a:	b002      	add	sp, #8
 801103c:	bd70      	pop	{r4, r5, r6, pc}
 801103e:	260b      	movs	r6, #11
 8011040:	4630      	mov	r0, r6
 8011042:	b002      	add	sp, #8
 8011044:	bd70      	pop	{r4, r5, r6, pc}
 8011046:	f44f 7648 	mov.w	r6, #800	@ 0x320
 801104a:	e7e1      	b.n	8011010 <rcl_timer_is_ready+0x38>

0801104c <rcl_timer_get_time_until_next_call>:
 801104c:	b570      	push	{r4, r5, r6, lr}
 801104e:	b082      	sub	sp, #8
 8011050:	b330      	cbz	r0, 80110a0 <rcl_timer_get_time_until_next_call+0x54>
 8011052:	6803      	ldr	r3, [r0, #0]
 8011054:	4604      	mov	r4, r0
 8011056:	b33b      	cbz	r3, 80110a8 <rcl_timer_get_time_until_next_call+0x5c>
 8011058:	460d      	mov	r5, r1
 801105a:	b309      	cbz	r1, 80110a0 <rcl_timer_get_time_until_next_call+0x54>
 801105c:	f3bf 8f5b 	dmb	ish
 8011060:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8011064:	f3bf 8f5b 	dmb	ish
 8011068:	b9ab      	cbnz	r3, 8011096 <rcl_timer_get_time_until_next_call+0x4a>
 801106a:	6803      	ldr	r3, [r0, #0]
 801106c:	4669      	mov	r1, sp
 801106e:	6818      	ldr	r0, [r3, #0]
 8011070:	f7ff fd08 	bl	8010a84 <rcl_clock_get_now>
 8011074:	4606      	mov	r6, r0
 8011076:	b958      	cbnz	r0, 8011090 <rcl_timer_get_time_until_next_call+0x44>
 8011078:	6820      	ldr	r0, [r4, #0]
 801107a:	2105      	movs	r1, #5
 801107c:	3028      	adds	r0, #40	@ 0x28
 801107e:	f001 fbdf 	bl	8012840 <__atomic_load_8>
 8011082:	9b00      	ldr	r3, [sp, #0]
 8011084:	1ac0      	subs	r0, r0, r3
 8011086:	9b01      	ldr	r3, [sp, #4]
 8011088:	6028      	str	r0, [r5, #0]
 801108a:	eb61 0103 	sbc.w	r1, r1, r3
 801108e:	6069      	str	r1, [r5, #4]
 8011090:	4630      	mov	r0, r6
 8011092:	b002      	add	sp, #8
 8011094:	bd70      	pop	{r4, r5, r6, pc}
 8011096:	f240 3621 	movw	r6, #801	@ 0x321
 801109a:	4630      	mov	r0, r6
 801109c:	b002      	add	sp, #8
 801109e:	bd70      	pop	{r4, r5, r6, pc}
 80110a0:	260b      	movs	r6, #11
 80110a2:	4630      	mov	r0, r6
 80110a4:	b002      	add	sp, #8
 80110a6:	bd70      	pop	{r4, r5, r6, pc}
 80110a8:	f44f 7648 	mov.w	r6, #800	@ 0x320
 80110ac:	e7f0      	b.n	8011090 <rcl_timer_get_time_until_next_call+0x44>
 80110ae:	bf00      	nop

080110b0 <rcl_timer_get_guard_condition>:
 80110b0:	b130      	cbz	r0, 80110c0 <rcl_timer_get_guard_condition+0x10>
 80110b2:	6800      	ldr	r0, [r0, #0]
 80110b4:	b120      	cbz	r0, 80110c0 <rcl_timer_get_guard_condition+0x10>
 80110b6:	68c3      	ldr	r3, [r0, #12]
 80110b8:	b10b      	cbz	r3, 80110be <rcl_timer_get_guard_condition+0xe>
 80110ba:	3008      	adds	r0, #8
 80110bc:	4770      	bx	lr
 80110be:	4618      	mov	r0, r3
 80110c0:	4770      	bx	lr
 80110c2:	bf00      	nop

080110c4 <rcl_validate_enclave_name_with_size>:
 80110c4:	b378      	cbz	r0, 8011126 <rcl_validate_enclave_name_with_size+0x62>
 80110c6:	b570      	push	{r4, r5, r6, lr}
 80110c8:	4615      	mov	r5, r2
 80110ca:	b0c2      	sub	sp, #264	@ 0x108
 80110cc:	b302      	cbz	r2, 8011110 <rcl_validate_enclave_name_with_size+0x4c>
 80110ce:	461e      	mov	r6, r3
 80110d0:	466a      	mov	r2, sp
 80110d2:	ab01      	add	r3, sp, #4
 80110d4:	460c      	mov	r4, r1
 80110d6:	f002 f849 	bl	801316c <rmw_validate_namespace_with_size>
 80110da:	4684      	mov	ip, r0
 80110dc:	b9e8      	cbnz	r0, 801111a <rcl_validate_enclave_name_with_size+0x56>
 80110de:	9b00      	ldr	r3, [sp, #0]
 80110e0:	b923      	cbnz	r3, 80110ec <rcl_validate_enclave_name_with_size+0x28>
 80110e2:	2300      	movs	r3, #0
 80110e4:	602b      	str	r3, [r5, #0]
 80110e6:	4660      	mov	r0, ip
 80110e8:	b042      	add	sp, #264	@ 0x108
 80110ea:	bd70      	pop	{r4, r5, r6, pc}
 80110ec:	2b07      	cmp	r3, #7
 80110ee:	d007      	beq.n	8011100 <rcl_validate_enclave_name_with_size+0x3c>
 80110f0:	1e5a      	subs	r2, r3, #1
 80110f2:	2a05      	cmp	r2, #5
 80110f4:	d833      	bhi.n	801115e <rcl_validate_enclave_name_with_size+0x9a>
 80110f6:	e8df f002 	tbb	[pc, r2]
 80110fa:	2c2f      	.short	0x2c2f
 80110fc:	1a232629 	.word	0x1a232629
 8011100:	2cff      	cmp	r4, #255	@ 0xff
 8011102:	d9ee      	bls.n	80110e2 <rcl_validate_enclave_name_with_size+0x1e>
 8011104:	602b      	str	r3, [r5, #0]
 8011106:	2e00      	cmp	r6, #0
 8011108:	d0ed      	beq.n	80110e6 <rcl_validate_enclave_name_with_size+0x22>
 801110a:	23fe      	movs	r3, #254	@ 0xfe
 801110c:	6033      	str	r3, [r6, #0]
 801110e:	e7ea      	b.n	80110e6 <rcl_validate_enclave_name_with_size+0x22>
 8011110:	f04f 0c0b 	mov.w	ip, #11
 8011114:	4660      	mov	r0, ip
 8011116:	b042      	add	sp, #264	@ 0x108
 8011118:	bd70      	pop	{r4, r5, r6, pc}
 801111a:	f7fe fc87 	bl	800fa2c <rcl_convert_rmw_ret_to_rcl_ret>
 801111e:	4684      	mov	ip, r0
 8011120:	4660      	mov	r0, ip
 8011122:	b042      	add	sp, #264	@ 0x108
 8011124:	bd70      	pop	{r4, r5, r6, pc}
 8011126:	f04f 0c0b 	mov.w	ip, #11
 801112a:	4660      	mov	r0, ip
 801112c:	4770      	bx	lr
 801112e:	2306      	movs	r3, #6
 8011130:	602b      	str	r3, [r5, #0]
 8011132:	2e00      	cmp	r6, #0
 8011134:	d0d7      	beq.n	80110e6 <rcl_validate_enclave_name_with_size+0x22>
 8011136:	9b01      	ldr	r3, [sp, #4]
 8011138:	6033      	str	r3, [r6, #0]
 801113a:	4660      	mov	r0, ip
 801113c:	b042      	add	sp, #264	@ 0x108
 801113e:	bd70      	pop	{r4, r5, r6, pc}
 8011140:	2305      	movs	r3, #5
 8011142:	602b      	str	r3, [r5, #0]
 8011144:	e7f5      	b.n	8011132 <rcl_validate_enclave_name_with_size+0x6e>
 8011146:	2304      	movs	r3, #4
 8011148:	602b      	str	r3, [r5, #0]
 801114a:	e7f2      	b.n	8011132 <rcl_validate_enclave_name_with_size+0x6e>
 801114c:	2303      	movs	r3, #3
 801114e:	602b      	str	r3, [r5, #0]
 8011150:	e7ef      	b.n	8011132 <rcl_validate_enclave_name_with_size+0x6e>
 8011152:	2302      	movs	r3, #2
 8011154:	602b      	str	r3, [r5, #0]
 8011156:	e7ec      	b.n	8011132 <rcl_validate_enclave_name_with_size+0x6e>
 8011158:	2301      	movs	r3, #1
 801115a:	602b      	str	r3, [r5, #0]
 801115c:	e7e9      	b.n	8011132 <rcl_validate_enclave_name_with_size+0x6e>
 801115e:	4a04      	ldr	r2, [pc, #16]	@ (8011170 <rcl_validate_enclave_name_with_size+0xac>)
 8011160:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8011164:	a802      	add	r0, sp, #8
 8011166:	f001 fd25 	bl	8012bb4 <rcutils_snprintf>
 801116a:	f04f 0c01 	mov.w	ip, #1
 801116e:	e7ba      	b.n	80110e6 <rcl_validate_enclave_name_with_size+0x22>
 8011170:	08018d94 	.word	0x08018d94

08011174 <rcl_validate_enclave_name>:
 8011174:	b168      	cbz	r0, 8011192 <rcl_validate_enclave_name+0x1e>
 8011176:	b570      	push	{r4, r5, r6, lr}
 8011178:	460d      	mov	r5, r1
 801117a:	4616      	mov	r6, r2
 801117c:	4604      	mov	r4, r0
 801117e:	f7ef f831 	bl	80001e4 <strlen>
 8011182:	4633      	mov	r3, r6
 8011184:	4601      	mov	r1, r0
 8011186:	462a      	mov	r2, r5
 8011188:	4620      	mov	r0, r4
 801118a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801118e:	f7ff bf99 	b.w	80110c4 <rcl_validate_enclave_name_with_size>
 8011192:	200b      	movs	r0, #11
 8011194:	4770      	bx	lr
 8011196:	bf00      	nop

08011198 <rcl_get_zero_initialized_wait_set>:
 8011198:	b510      	push	{r4, lr}
 801119a:	4c08      	ldr	r4, [pc, #32]	@ (80111bc <rcl_get_zero_initialized_wait_set+0x24>)
 801119c:	4686      	mov	lr, r0
 801119e:	4684      	mov	ip, r0
 80111a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80111a2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80111a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80111a8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80111ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80111ae:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80111b2:	6823      	ldr	r3, [r4, #0]
 80111b4:	f8cc 3000 	str.w	r3, [ip]
 80111b8:	4670      	mov	r0, lr
 80111ba:	bd10      	pop	{r4, pc}
 80111bc:	08018df4 	.word	0x08018df4

080111c0 <rcl_wait_set_is_valid>:
 80111c0:	b118      	cbz	r0, 80111ca <rcl_wait_set_is_valid+0xa>
 80111c2:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 80111c4:	3800      	subs	r0, #0
 80111c6:	bf18      	it	ne
 80111c8:	2001      	movne	r0, #1
 80111ca:	4770      	bx	lr

080111cc <rcl_wait_set_fini>:
 80111cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80111d0:	b082      	sub	sp, #8
 80111d2:	2800      	cmp	r0, #0
 80111d4:	f000 8095 	beq.w	8011302 <rcl_wait_set_fini+0x136>
 80111d8:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 80111da:	4604      	mov	r4, r0
 80111dc:	2e00      	cmp	r6, #0
 80111de:	f000 808c 	beq.w	80112fa <rcl_wait_set_fini+0x12e>
 80111e2:	6bf0      	ldr	r0, [r6, #60]	@ 0x3c
 80111e4:	f003 f9b6 	bl	8014554 <rmw_destroy_wait_set>
 80111e8:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80111ea:	1e06      	subs	r6, r0, #0
 80111ec:	bf18      	it	ne
 80111ee:	f44f 7661 	movne.w	r6, #900	@ 0x384
 80111f2:	2d00      	cmp	r5, #0
 80111f4:	f000 8081 	beq.w	80112fa <rcl_wait_set_fini+0x12e>
 80111f8:	6820      	ldr	r0, [r4, #0]
 80111fa:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 80111fe:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8011200:	2700      	movs	r7, #0
 8011202:	6067      	str	r7, [r4, #4]
 8011204:	602f      	str	r7, [r5, #0]
 8011206:	b120      	cbz	r0, 8011212 <rcl_wait_set_fini+0x46>
 8011208:	9101      	str	r1, [sp, #4]
 801120a:	47c0      	blx	r8
 801120c:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801120e:	9901      	ldr	r1, [sp, #4]
 8011210:	6027      	str	r7, [r4, #0]
 8011212:	68a8      	ldr	r0, [r5, #8]
 8011214:	b120      	cbz	r0, 8011220 <rcl_wait_set_fini+0x54>
 8011216:	47c0      	blx	r8
 8011218:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801121a:	2300      	movs	r3, #0
 801121c:	e9c5 3301 	strd	r3, r3, [r5, #4]
 8011220:	68a0      	ldr	r0, [r4, #8]
 8011222:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8011224:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8011226:	f04f 0800 	mov.w	r8, #0
 801122a:	f8c4 800c 	str.w	r8, [r4, #12]
 801122e:	f8c5 800c 	str.w	r8, [r5, #12]
 8011232:	b128      	cbz	r0, 8011240 <rcl_wait_set_fini+0x74>
 8011234:	47b8      	blx	r7
 8011236:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8011238:	f8c4 8008 	str.w	r8, [r4, #8]
 801123c:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 801123e:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8011240:	6968      	ldr	r0, [r5, #20]
 8011242:	f04f 0800 	mov.w	r8, #0
 8011246:	f8c5 8010 	str.w	r8, [r5, #16]
 801124a:	b128      	cbz	r0, 8011258 <rcl_wait_set_fini+0x8c>
 801124c:	47b8      	blx	r7
 801124e:	f8c5 8014 	str.w	r8, [r5, #20]
 8011252:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8011254:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8011256:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8011258:	6920      	ldr	r0, [r4, #16]
 801125a:	f04f 0800 	mov.w	r8, #0
 801125e:	f8c4 8014 	str.w	r8, [r4, #20]
 8011262:	f8c5 8040 	str.w	r8, [r5, #64]	@ 0x40
 8011266:	b128      	cbz	r0, 8011274 <rcl_wait_set_fini+0xa8>
 8011268:	47b8      	blx	r7
 801126a:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801126c:	f8c4 8010 	str.w	r8, [r4, #16]
 8011270:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8011272:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8011274:	69a0      	ldr	r0, [r4, #24]
 8011276:	f04f 0800 	mov.w	r8, #0
 801127a:	f8c4 801c 	str.w	r8, [r4, #28]
 801127e:	f8c5 8018 	str.w	r8, [r5, #24]
 8011282:	b128      	cbz	r0, 8011290 <rcl_wait_set_fini+0xc4>
 8011284:	9101      	str	r1, [sp, #4]
 8011286:	47b8      	blx	r7
 8011288:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801128a:	9901      	ldr	r1, [sp, #4]
 801128c:	f8c4 8018 	str.w	r8, [r4, #24]
 8011290:	6a28      	ldr	r0, [r5, #32]
 8011292:	b120      	cbz	r0, 801129e <rcl_wait_set_fini+0xd2>
 8011294:	47b8      	blx	r7
 8011296:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8011298:	2300      	movs	r3, #0
 801129a:	e9c5 3307 	strd	r3, r3, [r5, #28]
 801129e:	6a20      	ldr	r0, [r4, #32]
 80112a0:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 80112a4:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80112a6:	2700      	movs	r7, #0
 80112a8:	6267      	str	r7, [r4, #36]	@ 0x24
 80112aa:	626f      	str	r7, [r5, #36]	@ 0x24
 80112ac:	b120      	cbz	r0, 80112b8 <rcl_wait_set_fini+0xec>
 80112ae:	9101      	str	r1, [sp, #4]
 80112b0:	47c0      	blx	r8
 80112b2:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80112b4:	9901      	ldr	r1, [sp, #4]
 80112b6:	6227      	str	r7, [r4, #32]
 80112b8:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 80112ba:	b120      	cbz	r0, 80112c6 <rcl_wait_set_fini+0xfa>
 80112bc:	47c0      	blx	r8
 80112be:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80112c0:	2300      	movs	r3, #0
 80112c2:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 80112c6:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 80112c8:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 80112cc:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80112ce:	2700      	movs	r7, #0
 80112d0:	62e7      	str	r7, [r4, #44]	@ 0x2c
 80112d2:	632f      	str	r7, [r5, #48]	@ 0x30
 80112d4:	b120      	cbz	r0, 80112e0 <rcl_wait_set_fini+0x114>
 80112d6:	9101      	str	r1, [sp, #4]
 80112d8:	47c0      	blx	r8
 80112da:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80112dc:	9901      	ldr	r1, [sp, #4]
 80112de:	62a7      	str	r7, [r4, #40]	@ 0x28
 80112e0:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 80112e2:	b120      	cbz	r0, 80112ee <rcl_wait_set_fini+0x122>
 80112e4:	47c0      	blx	r8
 80112e6:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80112e8:	2300      	movs	r3, #0
 80112ea:	e9c5 330d 	strd	r3, r3, [r5, #52]	@ 0x34
 80112ee:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 80112f0:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80112f2:	4628      	mov	r0, r5
 80112f4:	4798      	blx	r3
 80112f6:	2300      	movs	r3, #0
 80112f8:	6323      	str	r3, [r4, #48]	@ 0x30
 80112fa:	4630      	mov	r0, r6
 80112fc:	b002      	add	sp, #8
 80112fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011302:	260b      	movs	r6, #11
 8011304:	4630      	mov	r0, r6
 8011306:	b002      	add	sp, #8
 8011308:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801130c <rcl_wait_set_add_subscription>:
 801130c:	b318      	cbz	r0, 8011356 <rcl_wait_set_add_subscription+0x4a>
 801130e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8011310:	b570      	push	{r4, r5, r6, lr}
 8011312:	4604      	mov	r4, r0
 8011314:	b30b      	cbz	r3, 801135a <rcl_wait_set_add_subscription+0x4e>
 8011316:	b319      	cbz	r1, 8011360 <rcl_wait_set_add_subscription+0x54>
 8011318:	681d      	ldr	r5, [r3, #0]
 801131a:	6840      	ldr	r0, [r0, #4]
 801131c:	4285      	cmp	r5, r0
 801131e:	d217      	bcs.n	8011350 <rcl_wait_set_add_subscription+0x44>
 8011320:	6820      	ldr	r0, [r4, #0]
 8011322:	1c6e      	adds	r6, r5, #1
 8011324:	601e      	str	r6, [r3, #0]
 8011326:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 801132a:	b102      	cbz	r2, 801132e <rcl_wait_set_add_subscription+0x22>
 801132c:	6015      	str	r5, [r2, #0]
 801132e:	4608      	mov	r0, r1
 8011330:	f7ff fb08 	bl	8010944 <rcl_subscription_get_rmw_handle>
 8011334:	b150      	cbz	r0, 801134c <rcl_wait_set_add_subscription+0x40>
 8011336:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8011338:	6842      	ldr	r2, [r0, #4]
 801133a:	689b      	ldr	r3, [r3, #8]
 801133c:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8011340:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8011342:	6853      	ldr	r3, [r2, #4]
 8011344:	3301      	adds	r3, #1
 8011346:	2000      	movs	r0, #0
 8011348:	6053      	str	r3, [r2, #4]
 801134a:	bd70      	pop	{r4, r5, r6, pc}
 801134c:	2001      	movs	r0, #1
 801134e:	bd70      	pop	{r4, r5, r6, pc}
 8011350:	f240 3086 	movw	r0, #902	@ 0x386
 8011354:	bd70      	pop	{r4, r5, r6, pc}
 8011356:	200b      	movs	r0, #11
 8011358:	4770      	bx	lr
 801135a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801135e:	bd70      	pop	{r4, r5, r6, pc}
 8011360:	200b      	movs	r0, #11
 8011362:	bd70      	pop	{r4, r5, r6, pc}

08011364 <rcl_wait_set_clear>:
 8011364:	2800      	cmp	r0, #0
 8011366:	d073      	beq.n	8011450 <rcl_wait_set_clear+0xec>
 8011368:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801136a:	b510      	push	{r4, lr}
 801136c:	4604      	mov	r4, r0
 801136e:	2b00      	cmp	r3, #0
 8011370:	d070      	beq.n	8011454 <rcl_wait_set_clear+0xf0>
 8011372:	6800      	ldr	r0, [r0, #0]
 8011374:	b138      	cbz	r0, 8011386 <rcl_wait_set_clear+0x22>
 8011376:	6862      	ldr	r2, [r4, #4]
 8011378:	2100      	movs	r1, #0
 801137a:	0092      	lsls	r2, r2, #2
 801137c:	f006 fabe 	bl	80178fc <memset>
 8011380:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8011382:	2200      	movs	r2, #0
 8011384:	601a      	str	r2, [r3, #0]
 8011386:	68a0      	ldr	r0, [r4, #8]
 8011388:	b138      	cbz	r0, 801139a <rcl_wait_set_clear+0x36>
 801138a:	68e2      	ldr	r2, [r4, #12]
 801138c:	2100      	movs	r1, #0
 801138e:	0092      	lsls	r2, r2, #2
 8011390:	f006 fab4 	bl	80178fc <memset>
 8011394:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8011396:	2200      	movs	r2, #0
 8011398:	60da      	str	r2, [r3, #12]
 801139a:	69a0      	ldr	r0, [r4, #24]
 801139c:	b138      	cbz	r0, 80113ae <rcl_wait_set_clear+0x4a>
 801139e:	69e2      	ldr	r2, [r4, #28]
 80113a0:	2100      	movs	r1, #0
 80113a2:	0092      	lsls	r2, r2, #2
 80113a4:	f006 faaa 	bl	80178fc <memset>
 80113a8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80113aa:	2200      	movs	r2, #0
 80113ac:	619a      	str	r2, [r3, #24]
 80113ae:	6a20      	ldr	r0, [r4, #32]
 80113b0:	b138      	cbz	r0, 80113c2 <rcl_wait_set_clear+0x5e>
 80113b2:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80113b4:	2100      	movs	r1, #0
 80113b6:	0092      	lsls	r2, r2, #2
 80113b8:	f006 faa0 	bl	80178fc <memset>
 80113bc:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80113be:	2200      	movs	r2, #0
 80113c0:	625a      	str	r2, [r3, #36]	@ 0x24
 80113c2:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 80113c4:	b138      	cbz	r0, 80113d6 <rcl_wait_set_clear+0x72>
 80113c6:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80113c8:	2100      	movs	r1, #0
 80113ca:	0092      	lsls	r2, r2, #2
 80113cc:	f006 fa96 	bl	80178fc <memset>
 80113d0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80113d2:	2200      	movs	r2, #0
 80113d4:	631a      	str	r2, [r3, #48]	@ 0x30
 80113d6:	6920      	ldr	r0, [r4, #16]
 80113d8:	b138      	cbz	r0, 80113ea <rcl_wait_set_clear+0x86>
 80113da:	6962      	ldr	r2, [r4, #20]
 80113dc:	2100      	movs	r1, #0
 80113de:	0092      	lsls	r2, r2, #2
 80113e0:	f006 fa8c 	bl	80178fc <memset>
 80113e4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80113e6:	2200      	movs	r2, #0
 80113e8:	641a      	str	r2, [r3, #64]	@ 0x40
 80113ea:	6898      	ldr	r0, [r3, #8]
 80113ec:	b138      	cbz	r0, 80113fe <rcl_wait_set_clear+0x9a>
 80113ee:	685a      	ldr	r2, [r3, #4]
 80113f0:	2100      	movs	r1, #0
 80113f2:	0092      	lsls	r2, r2, #2
 80113f4:	f006 fa82 	bl	80178fc <memset>
 80113f8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80113fa:	2200      	movs	r2, #0
 80113fc:	605a      	str	r2, [r3, #4]
 80113fe:	6958      	ldr	r0, [r3, #20]
 8011400:	b138      	cbz	r0, 8011412 <rcl_wait_set_clear+0xae>
 8011402:	691a      	ldr	r2, [r3, #16]
 8011404:	2100      	movs	r1, #0
 8011406:	0092      	lsls	r2, r2, #2
 8011408:	f006 fa78 	bl	80178fc <memset>
 801140c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801140e:	2200      	movs	r2, #0
 8011410:	611a      	str	r2, [r3, #16]
 8011412:	6a18      	ldr	r0, [r3, #32]
 8011414:	b138      	cbz	r0, 8011426 <rcl_wait_set_clear+0xc2>
 8011416:	69da      	ldr	r2, [r3, #28]
 8011418:	2100      	movs	r1, #0
 801141a:	0092      	lsls	r2, r2, #2
 801141c:	f006 fa6e 	bl	80178fc <memset>
 8011420:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8011422:	2200      	movs	r2, #0
 8011424:	61da      	str	r2, [r3, #28]
 8011426:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8011428:	b138      	cbz	r0, 801143a <rcl_wait_set_clear+0xd6>
 801142a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801142c:	2100      	movs	r1, #0
 801142e:	0092      	lsls	r2, r2, #2
 8011430:	f006 fa64 	bl	80178fc <memset>
 8011434:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8011436:	2200      	movs	r2, #0
 8011438:	629a      	str	r2, [r3, #40]	@ 0x28
 801143a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 801143c:	b138      	cbz	r0, 801144e <rcl_wait_set_clear+0xea>
 801143e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8011440:	2100      	movs	r1, #0
 8011442:	0092      	lsls	r2, r2, #2
 8011444:	f006 fa5a 	bl	80178fc <memset>
 8011448:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801144a:	2000      	movs	r0, #0
 801144c:	6358      	str	r0, [r3, #52]	@ 0x34
 801144e:	bd10      	pop	{r4, pc}
 8011450:	200b      	movs	r0, #11
 8011452:	4770      	bx	lr
 8011454:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8011458:	bd10      	pop	{r4, pc}
 801145a:	bf00      	nop

0801145c <rcl_wait_set_resize>:
 801145c:	2800      	cmp	r0, #0
 801145e:	f000 8185 	beq.w	801176c <rcl_wait_set_resize+0x310>
 8011462:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011466:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 8011468:	b083      	sub	sp, #12
 801146a:	4605      	mov	r5, r0
 801146c:	2c00      	cmp	r4, #0
 801146e:	f000 817f 	beq.w	8011770 <rcl_wait_set_resize+0x314>
 8011472:	f04f 0900 	mov.w	r9, #0
 8011476:	f8d4 a058 	ldr.w	sl, [r4, #88]	@ 0x58
 801147a:	461f      	mov	r7, r3
 801147c:	4688      	mov	r8, r1
 801147e:	e9d4 b313 	ldrd	fp, r3, [r4, #76]	@ 0x4c
 8011482:	4616      	mov	r6, r2
 8011484:	f8c0 9004 	str.w	r9, [r0, #4]
 8011488:	f8c4 9000 	str.w	r9, [r4]
 801148c:	2900      	cmp	r1, #0
 801148e:	f000 80bd 	beq.w	801160c <rcl_wait_set_resize+0x1b0>
 8011492:	008c      	lsls	r4, r1, #2
 8011494:	6800      	ldr	r0, [r0, #0]
 8011496:	9301      	str	r3, [sp, #4]
 8011498:	4652      	mov	r2, sl
 801149a:	4621      	mov	r1, r4
 801149c:	4798      	blx	r3
 801149e:	9b01      	ldr	r3, [sp, #4]
 80114a0:	6028      	str	r0, [r5, #0]
 80114a2:	2800      	cmp	r0, #0
 80114a4:	f000 80cb 	beq.w	801163e <rcl_wait_set_resize+0x1e2>
 80114a8:	4622      	mov	r2, r4
 80114aa:	4649      	mov	r1, r9
 80114ac:	9301      	str	r3, [sp, #4]
 80114ae:	f006 fa25 	bl	80178fc <memset>
 80114b2:	f8c5 8004 	str.w	r8, [r5, #4]
 80114b6:	f8d5 8030 	ldr.w	r8, [r5, #48]	@ 0x30
 80114ba:	9b01      	ldr	r3, [sp, #4]
 80114bc:	f8d8 0008 	ldr.w	r0, [r8, #8]
 80114c0:	f8c8 9004 	str.w	r9, [r8, #4]
 80114c4:	4652      	mov	r2, sl
 80114c6:	4621      	mov	r1, r4
 80114c8:	4798      	blx	r3
 80114ca:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80114cc:	f8c8 0008 	str.w	r0, [r8, #8]
 80114d0:	689b      	ldr	r3, [r3, #8]
 80114d2:	2b00      	cmp	r3, #0
 80114d4:	f000 80ac 	beq.w	8011630 <rcl_wait_set_resize+0x1d4>
 80114d8:	4622      	mov	r2, r4
 80114da:	4649      	mov	r1, r9
 80114dc:	4618      	mov	r0, r3
 80114de:	f006 fa0d 	bl	80178fc <memset>
 80114e2:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80114e4:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 80114e8:	f04f 0800 	mov.w	r8, #0
 80114ec:	e9d4 2313 	ldrd	r2, r3, [r4, #76]	@ 0x4c
 80114f0:	f8c5 800c 	str.w	r8, [r5, #12]
 80114f4:	f8c4 800c 	str.w	r8, [r4, #12]
 80114f8:	2e00      	cmp	r6, #0
 80114fa:	f040 80a4 	bne.w	8011646 <rcl_wait_set_resize+0x1ea>
 80114fe:	68a8      	ldr	r0, [r5, #8]
 8011500:	b128      	cbz	r0, 801150e <rcl_wait_set_resize+0xb2>
 8011502:	4649      	mov	r1, r9
 8011504:	4790      	blx	r2
 8011506:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8011508:	60ae      	str	r6, [r5, #8]
 801150a:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 801150e:	f04f 0800 	mov.w	r8, #0
 8011512:	19f6      	adds	r6, r6, r7
 8011514:	f8c4 8010 	str.w	r8, [r4, #16]
 8011518:	f040 80ac 	bne.w	8011674 <rcl_wait_set_resize+0x218>
 801151c:	6960      	ldr	r0, [r4, #20]
 801151e:	b130      	cbz	r0, 801152e <rcl_wait_set_resize+0xd2>
 8011520:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8011522:	4649      	mov	r1, r9
 8011524:	4798      	blx	r3
 8011526:	6166      	str	r6, [r4, #20]
 8011528:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801152a:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 801152e:	2600      	movs	r6, #0
 8011530:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 8011534:	616e      	str	r6, [r5, #20]
 8011536:	6426      	str	r6, [r4, #64]	@ 0x40
 8011538:	2f00      	cmp	r7, #0
 801153a:	f040 80ad 	bne.w	8011698 <rcl_wait_set_resize+0x23c>
 801153e:	6928      	ldr	r0, [r5, #16]
 8011540:	b138      	cbz	r0, 8011552 <rcl_wait_set_resize+0xf6>
 8011542:	4649      	mov	r1, r9
 8011544:	47d0      	blx	sl
 8011546:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8011548:	612f      	str	r7, [r5, #16]
 801154a:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 801154e:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8011552:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011554:	2600      	movs	r6, #0
 8011556:	61ee      	str	r6, [r5, #28]
 8011558:	61a6      	str	r6, [r4, #24]
 801155a:	2b00      	cmp	r3, #0
 801155c:	f040 80af 	bne.w	80116be <rcl_wait_set_resize+0x262>
 8011560:	69a8      	ldr	r0, [r5, #24]
 8011562:	b120      	cbz	r0, 801156e <rcl_wait_set_resize+0x112>
 8011564:	4649      	mov	r1, r9
 8011566:	47d0      	blx	sl
 8011568:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801156a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801156c:	61ab      	str	r3, [r5, #24]
 801156e:	6a20      	ldr	r0, [r4, #32]
 8011570:	b128      	cbz	r0, 801157e <rcl_wait_set_resize+0x122>
 8011572:	4649      	mov	r1, r9
 8011574:	47d0      	blx	sl
 8011576:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8011578:	2300      	movs	r3, #0
 801157a:	e9c4 3307 	strd	r3, r3, [r4, #28]
 801157e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8011580:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 8011582:	2600      	movs	r6, #0
 8011584:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 8011588:	626e      	str	r6, [r5, #36]	@ 0x24
 801158a:	6266      	str	r6, [r4, #36]	@ 0x24
 801158c:	2b00      	cmp	r3, #0
 801158e:	f000 80b6 	beq.w	80116fe <rcl_wait_set_resize+0x2a2>
 8011592:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 8011596:	6a28      	ldr	r0, [r5, #32]
 8011598:	463a      	mov	r2, r7
 801159a:	4651      	mov	r1, sl
 801159c:	47c8      	blx	r9
 801159e:	6228      	str	r0, [r5, #32]
 80115a0:	2800      	cmp	r0, #0
 80115a2:	d04c      	beq.n	801163e <rcl_wait_set_resize+0x1e2>
 80115a4:	4652      	mov	r2, sl
 80115a6:	4631      	mov	r1, r6
 80115a8:	f006 f9a8 	bl	80178fc <memset>
 80115ac:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80115ae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80115b0:	626b      	str	r3, [r5, #36]	@ 0x24
 80115b2:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 80115b4:	62a6      	str	r6, [r4, #40]	@ 0x28
 80115b6:	463a      	mov	r2, r7
 80115b8:	4651      	mov	r1, sl
 80115ba:	47c8      	blx	r9
 80115bc:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80115be:	62e0      	str	r0, [r4, #44]	@ 0x2c
 80115c0:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 80115c2:	2c00      	cmp	r4, #0
 80115c4:	f000 80f0 	beq.w	80117a8 <rcl_wait_set_resize+0x34c>
 80115c8:	4620      	mov	r0, r4
 80115ca:	4652      	mov	r2, sl
 80115cc:	4631      	mov	r1, r6
 80115ce:	f006 f995 	bl	80178fc <memset>
 80115d2:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80115d4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80115d6:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 80115d8:	2600      	movs	r6, #0
 80115da:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 80115de:	62ee      	str	r6, [r5, #44]	@ 0x2c
 80115e0:	6326      	str	r6, [r4, #48]	@ 0x30
 80115e2:	2b00      	cmp	r3, #0
 80115e4:	f040 809d 	bne.w	8011722 <rcl_wait_set_resize+0x2c6>
 80115e8:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 80115ea:	b120      	cbz	r0, 80115f6 <rcl_wait_set_resize+0x19a>
 80115ec:	4639      	mov	r1, r7
 80115ee:	47c0      	blx	r8
 80115f0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80115f2:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80115f4:	62ab      	str	r3, [r5, #40]	@ 0x28
 80115f6:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80115f8:	b310      	cbz	r0, 8011640 <rcl_wait_set_resize+0x1e4>
 80115fa:	4639      	mov	r1, r7
 80115fc:	47c0      	blx	r8
 80115fe:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8011600:	2000      	movs	r0, #0
 8011602:	e9c3 000d 	strd	r0, r0, [r3, #52]	@ 0x34
 8011606:	b003      	add	sp, #12
 8011608:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801160c:	6800      	ldr	r0, [r0, #0]
 801160e:	b120      	cbz	r0, 801161a <rcl_wait_set_resize+0x1be>
 8011610:	4651      	mov	r1, sl
 8011612:	47d8      	blx	fp
 8011614:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8011616:	f8c5 8000 	str.w	r8, [r5]
 801161a:	68a0      	ldr	r0, [r4, #8]
 801161c:	2800      	cmp	r0, #0
 801161e:	f43f af61 	beq.w	80114e4 <rcl_wait_set_resize+0x88>
 8011622:	4651      	mov	r1, sl
 8011624:	47d8      	blx	fp
 8011626:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8011628:	2300      	movs	r3, #0
 801162a:	e9c4 3301 	strd	r3, r3, [r4, #4]
 801162e:	e759      	b.n	80114e4 <rcl_wait_set_resize+0x88>
 8011630:	6828      	ldr	r0, [r5, #0]
 8011632:	9301      	str	r3, [sp, #4]
 8011634:	4651      	mov	r1, sl
 8011636:	47d8      	blx	fp
 8011638:	9b01      	ldr	r3, [sp, #4]
 801163a:	e9c5 3300 	strd	r3, r3, [r5]
 801163e:	200a      	movs	r0, #10
 8011640:	b003      	add	sp, #12
 8011642:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011646:	00b4      	lsls	r4, r6, #2
 8011648:	68a8      	ldr	r0, [r5, #8]
 801164a:	464a      	mov	r2, r9
 801164c:	4621      	mov	r1, r4
 801164e:	4798      	blx	r3
 8011650:	60a8      	str	r0, [r5, #8]
 8011652:	2800      	cmp	r0, #0
 8011654:	d0f3      	beq.n	801163e <rcl_wait_set_resize+0x1e2>
 8011656:	4622      	mov	r2, r4
 8011658:	4641      	mov	r1, r8
 801165a:	f006 f94f 	bl	80178fc <memset>
 801165e:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8011660:	60ee      	str	r6, [r5, #12]
 8011662:	f04f 0800 	mov.w	r8, #0
 8011666:	19f6      	adds	r6, r6, r7
 8011668:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 801166c:	f8c4 8010 	str.w	r8, [r4, #16]
 8011670:	f43f af54 	beq.w	801151c <rcl_wait_set_resize+0xc0>
 8011674:	00b6      	lsls	r6, r6, #2
 8011676:	464a      	mov	r2, r9
 8011678:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 801167a:	6960      	ldr	r0, [r4, #20]
 801167c:	4631      	mov	r1, r6
 801167e:	4798      	blx	r3
 8011680:	4681      	mov	r9, r0
 8011682:	6160      	str	r0, [r4, #20]
 8011684:	2800      	cmp	r0, #0
 8011686:	d076      	beq.n	8011776 <rcl_wait_set_resize+0x31a>
 8011688:	4632      	mov	r2, r6
 801168a:	4641      	mov	r1, r8
 801168c:	f006 f936 	bl	80178fc <memset>
 8011690:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8011692:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8011696:	e74a      	b.n	801152e <rcl_wait_set_resize+0xd2>
 8011698:	00bc      	lsls	r4, r7, #2
 801169a:	6928      	ldr	r0, [r5, #16]
 801169c:	464a      	mov	r2, r9
 801169e:	4621      	mov	r1, r4
 80116a0:	47c0      	blx	r8
 80116a2:	6128      	str	r0, [r5, #16]
 80116a4:	2800      	cmp	r0, #0
 80116a6:	d0ca      	beq.n	801163e <rcl_wait_set_resize+0x1e2>
 80116a8:	4622      	mov	r2, r4
 80116aa:	4631      	mov	r1, r6
 80116ac:	f006 f926 	bl	80178fc <memset>
 80116b0:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80116b2:	616f      	str	r7, [r5, #20]
 80116b4:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 80116b8:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 80116bc:	e749      	b.n	8011552 <rcl_wait_set_resize+0xf6>
 80116be:	009c      	lsls	r4, r3, #2
 80116c0:	69a8      	ldr	r0, [r5, #24]
 80116c2:	464a      	mov	r2, r9
 80116c4:	4621      	mov	r1, r4
 80116c6:	47c0      	blx	r8
 80116c8:	61a8      	str	r0, [r5, #24]
 80116ca:	2800      	cmp	r0, #0
 80116cc:	d0b7      	beq.n	801163e <rcl_wait_set_resize+0x1e2>
 80116ce:	4622      	mov	r2, r4
 80116d0:	4631      	mov	r1, r6
 80116d2:	f006 f913 	bl	80178fc <memset>
 80116d6:	6b2f      	ldr	r7, [r5, #48]	@ 0x30
 80116d8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80116da:	61eb      	str	r3, [r5, #28]
 80116dc:	6a38      	ldr	r0, [r7, #32]
 80116de:	61fe      	str	r6, [r7, #28]
 80116e0:	464a      	mov	r2, r9
 80116e2:	4621      	mov	r1, r4
 80116e4:	47c0      	blx	r8
 80116e6:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80116e8:	6238      	str	r0, [r7, #32]
 80116ea:	6a1f      	ldr	r7, [r3, #32]
 80116ec:	2f00      	cmp	r7, #0
 80116ee:	d054      	beq.n	801179a <rcl_wait_set_resize+0x33e>
 80116f0:	4622      	mov	r2, r4
 80116f2:	4631      	mov	r1, r6
 80116f4:	4638      	mov	r0, r7
 80116f6:	f006 f901 	bl	80178fc <memset>
 80116fa:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80116fc:	e73f      	b.n	801157e <rcl_wait_set_resize+0x122>
 80116fe:	6a28      	ldr	r0, [r5, #32]
 8011700:	b120      	cbz	r0, 801170c <rcl_wait_set_resize+0x2b0>
 8011702:	4639      	mov	r1, r7
 8011704:	47c0      	blx	r8
 8011706:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8011708:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801170a:	622b      	str	r3, [r5, #32]
 801170c:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 801170e:	2800      	cmp	r0, #0
 8011710:	f43f af60 	beq.w	80115d4 <rcl_wait_set_resize+0x178>
 8011714:	4639      	mov	r1, r7
 8011716:	47c0      	blx	r8
 8011718:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801171a:	2300      	movs	r3, #0
 801171c:	e9c4 330a 	strd	r3, r3, [r4, #40]	@ 0x28
 8011720:	e758      	b.n	80115d4 <rcl_wait_set_resize+0x178>
 8011722:	009c      	lsls	r4, r3, #2
 8011724:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 8011726:	463a      	mov	r2, r7
 8011728:	4621      	mov	r1, r4
 801172a:	47c8      	blx	r9
 801172c:	62a8      	str	r0, [r5, #40]	@ 0x28
 801172e:	2800      	cmp	r0, #0
 8011730:	d085      	beq.n	801163e <rcl_wait_set_resize+0x1e2>
 8011732:	4622      	mov	r2, r4
 8011734:	4631      	mov	r1, r6
 8011736:	f006 f8e1 	bl	80178fc <memset>
 801173a:	f8d5 a030 	ldr.w	sl, [r5, #48]	@ 0x30
 801173e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011740:	62eb      	str	r3, [r5, #44]	@ 0x2c
 8011742:	f8da 0038 	ldr.w	r0, [sl, #56]	@ 0x38
 8011746:	f8ca 6034 	str.w	r6, [sl, #52]	@ 0x34
 801174a:	463a      	mov	r2, r7
 801174c:	4621      	mov	r1, r4
 801174e:	47c8      	blx	r9
 8011750:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8011752:	f8ca 0038 	str.w	r0, [sl, #56]	@ 0x38
 8011756:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011758:	b36b      	cbz	r3, 80117b6 <rcl_wait_set_resize+0x35a>
 801175a:	4622      	mov	r2, r4
 801175c:	4631      	mov	r1, r6
 801175e:	4618      	mov	r0, r3
 8011760:	f006 f8cc 	bl	80178fc <memset>
 8011764:	4630      	mov	r0, r6
 8011766:	b003      	add	sp, #12
 8011768:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801176c:	200b      	movs	r0, #11
 801176e:	4770      	bx	lr
 8011770:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8011774:	e764      	b.n	8011640 <rcl_wait_set_resize+0x1e4>
 8011776:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8011778:	68a8      	ldr	r0, [r5, #8]
 801177a:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 801177c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801177e:	4798      	blx	r3
 8011780:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8011782:	6928      	ldr	r0, [r5, #16]
 8011784:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8011786:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 8011788:	f8c5 900c 	str.w	r9, [r5, #12]
 801178c:	f8c5 9008 	str.w	r9, [r5, #8]
 8011790:	4790      	blx	r2
 8011792:	e9c5 9904 	strd	r9, r9, [r5, #16]
 8011796:	200a      	movs	r0, #10
 8011798:	e752      	b.n	8011640 <rcl_wait_set_resize+0x1e4>
 801179a:	69a8      	ldr	r0, [r5, #24]
 801179c:	4649      	mov	r1, r9
 801179e:	47d0      	blx	sl
 80117a0:	e9c5 7706 	strd	r7, r7, [r5, #24]
 80117a4:	200a      	movs	r0, #10
 80117a6:	e74b      	b.n	8011640 <rcl_wait_set_resize+0x1e4>
 80117a8:	6a28      	ldr	r0, [r5, #32]
 80117aa:	4639      	mov	r1, r7
 80117ac:	47c0      	blx	r8
 80117ae:	e9c5 4408 	strd	r4, r4, [r5, #32]
 80117b2:	200a      	movs	r0, #10
 80117b4:	e744      	b.n	8011640 <rcl_wait_set_resize+0x1e4>
 80117b6:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 80117b8:	9301      	str	r3, [sp, #4]
 80117ba:	4639      	mov	r1, r7
 80117bc:	47c0      	blx	r8
 80117be:	9b01      	ldr	r3, [sp, #4]
 80117c0:	200a      	movs	r0, #10
 80117c2:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 80117c6:	e73b      	b.n	8011640 <rcl_wait_set_resize+0x1e4>

080117c8 <rcl_wait_set_init>:
 80117c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80117cc:	b084      	sub	sp, #16
 80117ce:	4604      	mov	r4, r0
 80117d0:	a810      	add	r0, sp, #64	@ 0x40
 80117d2:	f8dd a03c 	ldr.w	sl, [sp, #60]	@ 0x3c
 80117d6:	460f      	mov	r7, r1
 80117d8:	4690      	mov	r8, r2
 80117da:	4699      	mov	r9, r3
 80117dc:	f7f8 fffc 	bl	800a7d8 <rcutils_allocator_is_valid>
 80117e0:	2800      	cmp	r0, #0
 80117e2:	d06b      	beq.n	80118bc <rcl_wait_set_init+0xf4>
 80117e4:	2c00      	cmp	r4, #0
 80117e6:	d069      	beq.n	80118bc <rcl_wait_set_init+0xf4>
 80117e8:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80117ea:	b125      	cbz	r5, 80117f6 <rcl_wait_set_init+0x2e>
 80117ec:	2564      	movs	r5, #100	@ 0x64
 80117ee:	4628      	mov	r0, r5
 80117f0:	b004      	add	sp, #16
 80117f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80117f6:	f1ba 0f00 	cmp.w	sl, #0
 80117fa:	d05f      	beq.n	80118bc <rcl_wait_set_init+0xf4>
 80117fc:	4650      	mov	r0, sl
 80117fe:	f7fe f933 	bl	800fa68 <rcl_context_is_valid>
 8011802:	2800      	cmp	r0, #0
 8011804:	d067      	beq.n	80118d6 <rcl_wait_set_init+0x10e>
 8011806:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8011808:	9914      	ldr	r1, [sp, #80]	@ 0x50
 801180a:	205c      	movs	r0, #92	@ 0x5c
 801180c:	4798      	blx	r3
 801180e:	6320      	str	r0, [r4, #48]	@ 0x30
 8011810:	2800      	cmp	r0, #0
 8011812:	d062      	beq.n	80118da <rcl_wait_set_init+0x112>
 8011814:	4629      	mov	r1, r5
 8011816:	225c      	movs	r2, #92	@ 0x5c
 8011818:	f006 f870 	bl	80178fc <memset>
 801181c:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	@ 0x34
 8011820:	eb03 0e02 	add.w	lr, r3, r2
 8011824:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011826:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 8011828:	f10d 0c40 	add.w	ip, sp, #64	@ 0x40
 801182c:	449e      	add	lr, r3
 801182e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8011832:	e9c6 5501 	strd	r5, r5, [r6, #4]
 8011836:	e9c6 5504 	strd	r5, r5, [r6, #16]
 801183a:	e9c6 5507 	strd	r5, r5, [r6, #28]
 801183e:	e9c6 550a 	strd	r5, r5, [r6, #40]	@ 0x28
 8011842:	e9c6 550d 	strd	r5, r5, [r6, #52]	@ 0x34
 8011846:	f106 0548 	add.w	r5, r6, #72	@ 0x48
 801184a:	f8c6 a044 	str.w	sl, [r6, #68]	@ 0x44
 801184e:	f8da a000 	ldr.w	sl, [sl]
 8011852:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8011854:	44c6      	add	lr, r8
 8011856:	f8dc 3000 	ldr.w	r3, [ip]
 801185a:	602b      	str	r3, [r5, #0]
 801185c:	eb0e 0147 	add.w	r1, lr, r7, lsl #1
 8011860:	f10a 0028 	add.w	r0, sl, #40	@ 0x28
 8011864:	f002 fe6c 	bl	8014540 <rmw_create_wait_set>
 8011868:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801186a:	63f0      	str	r0, [r6, #60]	@ 0x3c
 801186c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 801186e:	b350      	cbz	r0, 80118c6 <rcl_wait_set_init+0xfe>
 8011870:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011872:	9302      	str	r3, [sp, #8]
 8011874:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8011876:	9301      	str	r3, [sp, #4]
 8011878:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801187a:	9300      	str	r3, [sp, #0]
 801187c:	4642      	mov	r2, r8
 801187e:	464b      	mov	r3, r9
 8011880:	4639      	mov	r1, r7
 8011882:	4620      	mov	r0, r4
 8011884:	f7ff fdea 	bl	801145c <rcl_wait_set_resize>
 8011888:	4605      	mov	r5, r0
 801188a:	2800      	cmp	r0, #0
 801188c:	d0af      	beq.n	80117ee <rcl_wait_set_init+0x26>
 801188e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8011890:	bb2b      	cbnz	r3, 80118de <rcl_wait_set_init+0x116>
 8011892:	2600      	movs	r6, #0
 8011894:	e9cd 6601 	strd	r6, r6, [sp, #4]
 8011898:	9600      	str	r6, [sp, #0]
 801189a:	4633      	mov	r3, r6
 801189c:	4632      	mov	r2, r6
 801189e:	4631      	mov	r1, r6
 80118a0:	4620      	mov	r0, r4
 80118a2:	f7ff fddb 	bl	801145c <rcl_wait_set_resize>
 80118a6:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 80118a8:	2800      	cmp	r0, #0
 80118aa:	d0a0      	beq.n	80117ee <rcl_wait_set_init+0x26>
 80118ac:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 80118ae:	6d81      	ldr	r1, [r0, #88]	@ 0x58
 80118b0:	4798      	blx	r3
 80118b2:	4628      	mov	r0, r5
 80118b4:	6326      	str	r6, [r4, #48]	@ 0x30
 80118b6:	b004      	add	sp, #16
 80118b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80118bc:	250b      	movs	r5, #11
 80118be:	4628      	mov	r0, r5
 80118c0:	b004      	add	sp, #16
 80118c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80118c6:	2501      	movs	r5, #1
 80118c8:	f002 fe44 	bl	8014554 <rmw_destroy_wait_set>
 80118cc:	2800      	cmp	r0, #0
 80118ce:	bf18      	it	ne
 80118d0:	f44f 7561 	movne.w	r5, #900	@ 0x384
 80118d4:	e7dd      	b.n	8011892 <rcl_wait_set_init+0xca>
 80118d6:	2565      	movs	r5, #101	@ 0x65
 80118d8:	e789      	b.n	80117ee <rcl_wait_set_init+0x26>
 80118da:	250a      	movs	r5, #10
 80118dc:	e787      	b.n	80117ee <rcl_wait_set_init+0x26>
 80118de:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80118e0:	e7f2      	b.n	80118c8 <rcl_wait_set_init+0x100>
 80118e2:	bf00      	nop

080118e4 <rcl_wait_set_add_guard_condition>:
 80118e4:	b318      	cbz	r0, 801192e <rcl_wait_set_add_guard_condition+0x4a>
 80118e6:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80118e8:	b570      	push	{r4, r5, r6, lr}
 80118ea:	4604      	mov	r4, r0
 80118ec:	b30b      	cbz	r3, 8011932 <rcl_wait_set_add_guard_condition+0x4e>
 80118ee:	b319      	cbz	r1, 8011938 <rcl_wait_set_add_guard_condition+0x54>
 80118f0:	68dd      	ldr	r5, [r3, #12]
 80118f2:	68c0      	ldr	r0, [r0, #12]
 80118f4:	4285      	cmp	r5, r0
 80118f6:	d217      	bcs.n	8011928 <rcl_wait_set_add_guard_condition+0x44>
 80118f8:	68a0      	ldr	r0, [r4, #8]
 80118fa:	1c6e      	adds	r6, r5, #1
 80118fc:	60de      	str	r6, [r3, #12]
 80118fe:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8011902:	b102      	cbz	r2, 8011906 <rcl_wait_set_add_guard_condition+0x22>
 8011904:	6015      	str	r5, [r2, #0]
 8011906:	4608      	mov	r0, r1
 8011908:	f005 f890 	bl	8016a2c <rcl_guard_condition_get_rmw_handle>
 801190c:	b150      	cbz	r0, 8011924 <rcl_wait_set_add_guard_condition+0x40>
 801190e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8011910:	6842      	ldr	r2, [r0, #4]
 8011912:	695b      	ldr	r3, [r3, #20]
 8011914:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8011918:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 801191a:	6913      	ldr	r3, [r2, #16]
 801191c:	3301      	adds	r3, #1
 801191e:	2000      	movs	r0, #0
 8011920:	6113      	str	r3, [r2, #16]
 8011922:	bd70      	pop	{r4, r5, r6, pc}
 8011924:	2001      	movs	r0, #1
 8011926:	bd70      	pop	{r4, r5, r6, pc}
 8011928:	f240 3086 	movw	r0, #902	@ 0x386
 801192c:	bd70      	pop	{r4, r5, r6, pc}
 801192e:	200b      	movs	r0, #11
 8011930:	4770      	bx	lr
 8011932:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8011936:	bd70      	pop	{r4, r5, r6, pc}
 8011938:	200b      	movs	r0, #11
 801193a:	bd70      	pop	{r4, r5, r6, pc}

0801193c <rcl_wait_set_add_timer>:
 801193c:	b328      	cbz	r0, 801198a <rcl_wait_set_add_timer+0x4e>
 801193e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8011940:	b570      	push	{r4, r5, r6, lr}
 8011942:	4604      	mov	r4, r0
 8011944:	b31b      	cbz	r3, 801198e <rcl_wait_set_add_timer+0x52>
 8011946:	b329      	cbz	r1, 8011994 <rcl_wait_set_add_timer+0x58>
 8011948:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 801194a:	6965      	ldr	r5, [r4, #20]
 801194c:	42a8      	cmp	r0, r5
 801194e:	d219      	bcs.n	8011984 <rcl_wait_set_add_timer+0x48>
 8011950:	6925      	ldr	r5, [r4, #16]
 8011952:	1c46      	adds	r6, r0, #1
 8011954:	641e      	str	r6, [r3, #64]	@ 0x40
 8011956:	f845 1020 	str.w	r1, [r5, r0, lsl #2]
 801195a:	b102      	cbz	r2, 801195e <rcl_wait_set_add_timer+0x22>
 801195c:	6010      	str	r0, [r2, #0]
 801195e:	4608      	mov	r0, r1
 8011960:	f7ff fba6 	bl	80110b0 <rcl_timer_get_guard_condition>
 8011964:	b168      	cbz	r0, 8011982 <rcl_wait_set_add_timer+0x46>
 8011966:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8011968:	68e3      	ldr	r3, [r4, #12]
 801196a:	6c15      	ldr	r5, [r2, #64]	@ 0x40
 801196c:	3b01      	subs	r3, #1
 801196e:	441d      	add	r5, r3
 8011970:	f005 f85c 	bl	8016a2c <rcl_guard_condition_get_rmw_handle>
 8011974:	b180      	cbz	r0, 8011998 <rcl_wait_set_add_timer+0x5c>
 8011976:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8011978:	6842      	ldr	r2, [r0, #4]
 801197a:	695b      	ldr	r3, [r3, #20]
 801197c:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8011980:	2000      	movs	r0, #0
 8011982:	bd70      	pop	{r4, r5, r6, pc}
 8011984:	f240 3086 	movw	r0, #902	@ 0x386
 8011988:	bd70      	pop	{r4, r5, r6, pc}
 801198a:	200b      	movs	r0, #11
 801198c:	4770      	bx	lr
 801198e:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8011992:	bd70      	pop	{r4, r5, r6, pc}
 8011994:	200b      	movs	r0, #11
 8011996:	bd70      	pop	{r4, r5, r6, pc}
 8011998:	2001      	movs	r0, #1
 801199a:	bd70      	pop	{r4, r5, r6, pc}

0801199c <rcl_wait_set_add_client>:
 801199c:	b318      	cbz	r0, 80119e6 <rcl_wait_set_add_client+0x4a>
 801199e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80119a0:	b570      	push	{r4, r5, r6, lr}
 80119a2:	4604      	mov	r4, r0
 80119a4:	b30b      	cbz	r3, 80119ea <rcl_wait_set_add_client+0x4e>
 80119a6:	b319      	cbz	r1, 80119f0 <rcl_wait_set_add_client+0x54>
 80119a8:	699d      	ldr	r5, [r3, #24]
 80119aa:	69c0      	ldr	r0, [r0, #28]
 80119ac:	4285      	cmp	r5, r0
 80119ae:	d217      	bcs.n	80119e0 <rcl_wait_set_add_client+0x44>
 80119b0:	69a0      	ldr	r0, [r4, #24]
 80119b2:	1c6e      	adds	r6, r5, #1
 80119b4:	619e      	str	r6, [r3, #24]
 80119b6:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 80119ba:	b102      	cbz	r2, 80119be <rcl_wait_set_add_client+0x22>
 80119bc:	6015      	str	r5, [r2, #0]
 80119be:	4608      	mov	r0, r1
 80119c0:	f7fd ffa6 	bl	800f910 <rcl_client_get_rmw_handle>
 80119c4:	b150      	cbz	r0, 80119dc <rcl_wait_set_add_client+0x40>
 80119c6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80119c8:	6842      	ldr	r2, [r0, #4]
 80119ca:	6a1b      	ldr	r3, [r3, #32]
 80119cc:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80119d0:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80119d2:	69d3      	ldr	r3, [r2, #28]
 80119d4:	3301      	adds	r3, #1
 80119d6:	2000      	movs	r0, #0
 80119d8:	61d3      	str	r3, [r2, #28]
 80119da:	bd70      	pop	{r4, r5, r6, pc}
 80119dc:	2001      	movs	r0, #1
 80119de:	bd70      	pop	{r4, r5, r6, pc}
 80119e0:	f240 3086 	movw	r0, #902	@ 0x386
 80119e4:	bd70      	pop	{r4, r5, r6, pc}
 80119e6:	200b      	movs	r0, #11
 80119e8:	4770      	bx	lr
 80119ea:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80119ee:	bd70      	pop	{r4, r5, r6, pc}
 80119f0:	200b      	movs	r0, #11
 80119f2:	bd70      	pop	{r4, r5, r6, pc}

080119f4 <rcl_wait_set_add_service>:
 80119f4:	b318      	cbz	r0, 8011a3e <rcl_wait_set_add_service+0x4a>
 80119f6:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80119f8:	b570      	push	{r4, r5, r6, lr}
 80119fa:	4604      	mov	r4, r0
 80119fc:	b30b      	cbz	r3, 8011a42 <rcl_wait_set_add_service+0x4e>
 80119fe:	b319      	cbz	r1, 8011a48 <rcl_wait_set_add_service+0x54>
 8011a00:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 8011a02:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 8011a04:	4285      	cmp	r5, r0
 8011a06:	d217      	bcs.n	8011a38 <rcl_wait_set_add_service+0x44>
 8011a08:	6a20      	ldr	r0, [r4, #32]
 8011a0a:	1c6e      	adds	r6, r5, #1
 8011a0c:	625e      	str	r6, [r3, #36]	@ 0x24
 8011a0e:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8011a12:	b102      	cbz	r2, 8011a16 <rcl_wait_set_add_service+0x22>
 8011a14:	6015      	str	r5, [r2, #0]
 8011a16:	4608      	mov	r0, r1
 8011a18:	f7fe fdf8 	bl	801060c <rcl_service_get_rmw_handle>
 8011a1c:	b150      	cbz	r0, 8011a34 <rcl_wait_set_add_service+0x40>
 8011a1e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8011a20:	6842      	ldr	r2, [r0, #4]
 8011a22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011a24:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8011a28:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8011a2a:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 8011a2c:	3301      	adds	r3, #1
 8011a2e:	2000      	movs	r0, #0
 8011a30:	6293      	str	r3, [r2, #40]	@ 0x28
 8011a32:	bd70      	pop	{r4, r5, r6, pc}
 8011a34:	2001      	movs	r0, #1
 8011a36:	bd70      	pop	{r4, r5, r6, pc}
 8011a38:	f240 3086 	movw	r0, #902	@ 0x386
 8011a3c:	bd70      	pop	{r4, r5, r6, pc}
 8011a3e:	200b      	movs	r0, #11
 8011a40:	4770      	bx	lr
 8011a42:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8011a46:	bd70      	pop	{r4, r5, r6, pc}
 8011a48:	200b      	movs	r0, #11
 8011a4a:	bd70      	pop	{r4, r5, r6, pc}
 8011a4c:	0000      	movs	r0, r0
	...

08011a50 <rcl_wait>:
 8011a50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011a54:	ed2d 8b02 	vpush	{d8}
 8011a58:	b08d      	sub	sp, #52	@ 0x34
 8011a5a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8011a5e:	2800      	cmp	r0, #0
 8011a60:	f000 8143 	beq.w	8011cea <rcl_wait+0x29a>
 8011a64:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 8011a66:	4605      	mov	r5, r0
 8011a68:	2e00      	cmp	r6, #0
 8011a6a:	f000 8112 	beq.w	8011c92 <rcl_wait+0x242>
 8011a6e:	6843      	ldr	r3, [r0, #4]
 8011a70:	b983      	cbnz	r3, 8011a94 <rcl_wait+0x44>
 8011a72:	68eb      	ldr	r3, [r5, #12]
 8011a74:	b973      	cbnz	r3, 8011a94 <rcl_wait+0x44>
 8011a76:	696b      	ldr	r3, [r5, #20]
 8011a78:	b963      	cbnz	r3, 8011a94 <rcl_wait+0x44>
 8011a7a:	69eb      	ldr	r3, [r5, #28]
 8011a7c:	b953      	cbnz	r3, 8011a94 <rcl_wait+0x44>
 8011a7e:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8011a80:	b943      	cbnz	r3, 8011a94 <rcl_wait+0x44>
 8011a82:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8011a84:	b933      	cbnz	r3, 8011a94 <rcl_wait+0x44>
 8011a86:	f240 3085 	movw	r0, #901	@ 0x385
 8011a8a:	b00d      	add	sp, #52	@ 0x34
 8011a8c:	ecbd 8b02 	vpop	{d8}
 8011a90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011a94:	9b04      	ldr	r3, [sp, #16]
 8011a96:	6c32      	ldr	r2, [r6, #64]	@ 0x40
 8011a98:	2b01      	cmp	r3, #1
 8011a9a:	9b05      	ldr	r3, [sp, #20]
 8011a9c:	f173 0300 	sbcs.w	r3, r3, #0
 8011aa0:	f2c0 80f0 	blt.w	8011c84 <rcl_wait+0x234>
 8011aa4:	e9dd 8704 	ldrd	r8, r7, [sp, #16]
 8011aa8:	4643      	mov	r3, r8
 8011aaa:	2a00      	cmp	r2, #0
 8011aac:	f000 8133 	beq.w	8011d16 <rcl_wait+0x2c6>
 8011ab0:	2400      	movs	r4, #0
 8011ab2:	4613      	mov	r3, r2
 8011ab4:	ed9f 8b9c 	vldr	d8, [pc, #624]	@ 8011d28 <rcl_wait+0x2d8>
 8011ab8:	46a2      	mov	sl, r4
 8011aba:	46a3      	mov	fp, r4
 8011abc:	f240 3921 	movw	r9, #801	@ 0x321
 8011ac0:	4632      	mov	r2, r6
 8011ac2:	e014      	b.n	8011aee <rcl_wait+0x9e>
 8011ac4:	2800      	cmp	r0, #0
 8011ac6:	d1e0      	bne.n	8011a8a <rcl_wait+0x3a>
 8011ac8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8011acc:	4542      	cmp	r2, r8
 8011ace:	eb73 0107 	sbcs.w	r1, r3, r7
 8011ad2:	da03      	bge.n	8011adc <rcl_wait+0x8c>
 8011ad4:	4690      	mov	r8, r2
 8011ad6:	461f      	mov	r7, r3
 8011ad8:	f04f 0b01 	mov.w	fp, #1
 8011adc:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 8011ade:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8011ae0:	3401      	adds	r4, #1
 8011ae2:	f14a 0a00 	adc.w	sl, sl, #0
 8011ae6:	429c      	cmp	r4, r3
 8011ae8:	f17a 0100 	sbcs.w	r1, sl, #0
 8011aec:	d228      	bcs.n	8011b40 <rcl_wait+0xf0>
 8011aee:	6928      	ldr	r0, [r5, #16]
 8011af0:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8011af4:	a908      	add	r1, sp, #32
 8011af6:	00a6      	lsls	r6, r4, #2
 8011af8:	2800      	cmp	r0, #0
 8011afa:	d0f1      	beq.n	8011ae0 <rcl_wait+0x90>
 8011afc:	68eb      	ldr	r3, [r5, #12]
 8011afe:	f8d2 c014 	ldr.w	ip, [r2, #20]
 8011b02:	4423      	add	r3, r4
 8011b04:	f85c e023 	ldr.w	lr, [ip, r3, lsl #2]
 8011b08:	f1be 0f00 	cmp.w	lr, #0
 8011b0c:	d006      	beq.n	8011b1c <rcl_wait+0xcc>
 8011b0e:	6913      	ldr	r3, [r2, #16]
 8011b10:	f84c e023 	str.w	lr, [ip, r3, lsl #2]
 8011b14:	3301      	adds	r3, #1
 8011b16:	6113      	str	r3, [r2, #16]
 8011b18:	692b      	ldr	r3, [r5, #16]
 8011b1a:	5998      	ldr	r0, [r3, r6]
 8011b1c:	ed8d 8b08 	vstr	d8, [sp, #32]
 8011b20:	f7ff fa94 	bl	801104c <rcl_timer_get_time_until_next_call>
 8011b24:	4548      	cmp	r0, r9
 8011b26:	d1cd      	bne.n	8011ac4 <rcl_wait+0x74>
 8011b28:	692b      	ldr	r3, [r5, #16]
 8011b2a:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 8011b2c:	2100      	movs	r1, #0
 8011b2e:	5199      	str	r1, [r3, r6]
 8011b30:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8011b32:	3401      	adds	r4, #1
 8011b34:	f14a 0a00 	adc.w	sl, sl, #0
 8011b38:	429c      	cmp	r4, r3
 8011b3a:	f17a 0100 	sbcs.w	r1, sl, #0
 8011b3e:	d3d6      	bcc.n	8011aee <rcl_wait+0x9e>
 8011b40:	4616      	mov	r6, r2
 8011b42:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8011b46:	4313      	orrs	r3, r2
 8011b48:	46d9      	mov	r9, fp
 8011b4a:	f040 80a9 	bne.w	8011ca0 <rcl_wait+0x250>
 8011b4e:	2300      	movs	r3, #0
 8011b50:	2200      	movs	r2, #0
 8011b52:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8011b56:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 8011b5a:	ab08      	add	r3, sp, #32
 8011b5c:	9302      	str	r3, [sp, #8]
 8011b5e:	6bf2      	ldr	r2, [r6, #60]	@ 0x3c
 8011b60:	f106 0334 	add.w	r3, r6, #52	@ 0x34
 8011b64:	e9cd 3200 	strd	r3, r2, [sp]
 8011b68:	f106 0110 	add.w	r1, r6, #16
 8011b6c:	f106 031c 	add.w	r3, r6, #28
 8011b70:	f106 0228 	add.w	r2, r6, #40	@ 0x28
 8011b74:	1d30      	adds	r0, r6, #4
 8011b76:	f002 fb6b 	bl	8014250 <rmw_wait>
 8011b7a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8011b7c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8011b7e:	4680      	mov	r8, r0
 8011b80:	b1ca      	cbz	r2, 8011bb6 <rcl_wait+0x166>
 8011b82:	2400      	movs	r4, #0
 8011b84:	4627      	mov	r7, r4
 8011b86:	692a      	ldr	r2, [r5, #16]
 8011b88:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
 8011b8c:	f10d 011f 	add.w	r1, sp, #31
 8011b90:	00a6      	lsls	r6, r4, #2
 8011b92:	b160      	cbz	r0, 8011bae <rcl_wait+0x15e>
 8011b94:	f88d 701f 	strb.w	r7, [sp, #31]
 8011b98:	f7ff fa1e 	bl	8010fd8 <rcl_timer_is_ready>
 8011b9c:	2800      	cmp	r0, #0
 8011b9e:	f47f af74 	bne.w	8011a8a <rcl_wait+0x3a>
 8011ba2:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8011ba6:	b90b      	cbnz	r3, 8011bac <rcl_wait+0x15c>
 8011ba8:	692a      	ldr	r2, [r5, #16]
 8011baa:	5193      	str	r3, [r2, r6]
 8011bac:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8011bae:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8011bb0:	3401      	adds	r4, #1
 8011bb2:	42a2      	cmp	r2, r4
 8011bb4:	d8e7      	bhi.n	8011b86 <rcl_wait+0x136>
 8011bb6:	f038 0002 	bics.w	r0, r8, #2
 8011bba:	f040 8090 	bne.w	8011cde <rcl_wait+0x28e>
 8011bbe:	686e      	ldr	r6, [r5, #4]
 8011bc0:	4602      	mov	r2, r0
 8011bc2:	b91e      	cbnz	r6, 8011bcc <rcl_wait+0x17c>
 8011bc4:	e00d      	b.n	8011be2 <rcl_wait+0x192>
 8011bc6:	3201      	adds	r2, #1
 8011bc8:	42b2      	cmp	r2, r6
 8011bca:	d00a      	beq.n	8011be2 <rcl_wait+0x192>
 8011bcc:	6899      	ldr	r1, [r3, #8]
 8011bce:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8011bd2:	2900      	cmp	r1, #0
 8011bd4:	d1f7      	bne.n	8011bc6 <rcl_wait+0x176>
 8011bd6:	682c      	ldr	r4, [r5, #0]
 8011bd8:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8011bdc:	3201      	adds	r2, #1
 8011bde:	42b2      	cmp	r2, r6
 8011be0:	d1f4      	bne.n	8011bcc <rcl_wait+0x17c>
 8011be2:	68ee      	ldr	r6, [r5, #12]
 8011be4:	2200      	movs	r2, #0
 8011be6:	b91e      	cbnz	r6, 8011bf0 <rcl_wait+0x1a0>
 8011be8:	e00d      	b.n	8011c06 <rcl_wait+0x1b6>
 8011bea:	3201      	adds	r2, #1
 8011bec:	42b2      	cmp	r2, r6
 8011bee:	d00a      	beq.n	8011c06 <rcl_wait+0x1b6>
 8011bf0:	6959      	ldr	r1, [r3, #20]
 8011bf2:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8011bf6:	2900      	cmp	r1, #0
 8011bf8:	d1f7      	bne.n	8011bea <rcl_wait+0x19a>
 8011bfa:	68ac      	ldr	r4, [r5, #8]
 8011bfc:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8011c00:	3201      	adds	r2, #1
 8011c02:	42b2      	cmp	r2, r6
 8011c04:	d1f4      	bne.n	8011bf0 <rcl_wait+0x1a0>
 8011c06:	69ee      	ldr	r6, [r5, #28]
 8011c08:	2200      	movs	r2, #0
 8011c0a:	b91e      	cbnz	r6, 8011c14 <rcl_wait+0x1c4>
 8011c0c:	e00d      	b.n	8011c2a <rcl_wait+0x1da>
 8011c0e:	3201      	adds	r2, #1
 8011c10:	42b2      	cmp	r2, r6
 8011c12:	d00a      	beq.n	8011c2a <rcl_wait+0x1da>
 8011c14:	6a19      	ldr	r1, [r3, #32]
 8011c16:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8011c1a:	2900      	cmp	r1, #0
 8011c1c:	d1f7      	bne.n	8011c0e <rcl_wait+0x1be>
 8011c1e:	69ac      	ldr	r4, [r5, #24]
 8011c20:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8011c24:	3201      	adds	r2, #1
 8011c26:	42b2      	cmp	r2, r6
 8011c28:	d1f4      	bne.n	8011c14 <rcl_wait+0x1c4>
 8011c2a:	6a6e      	ldr	r6, [r5, #36]	@ 0x24
 8011c2c:	2200      	movs	r2, #0
 8011c2e:	b91e      	cbnz	r6, 8011c38 <rcl_wait+0x1e8>
 8011c30:	e00d      	b.n	8011c4e <rcl_wait+0x1fe>
 8011c32:	3201      	adds	r2, #1
 8011c34:	4296      	cmp	r6, r2
 8011c36:	d00a      	beq.n	8011c4e <rcl_wait+0x1fe>
 8011c38:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8011c3a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8011c3e:	2900      	cmp	r1, #0
 8011c40:	d1f7      	bne.n	8011c32 <rcl_wait+0x1e2>
 8011c42:	6a2c      	ldr	r4, [r5, #32]
 8011c44:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8011c48:	3201      	adds	r2, #1
 8011c4a:	4296      	cmp	r6, r2
 8011c4c:	d1f4      	bne.n	8011c38 <rcl_wait+0x1e8>
 8011c4e:	6aee      	ldr	r6, [r5, #44]	@ 0x2c
 8011c50:	2200      	movs	r2, #0
 8011c52:	b91e      	cbnz	r6, 8011c5c <rcl_wait+0x20c>
 8011c54:	e00d      	b.n	8011c72 <rcl_wait+0x222>
 8011c56:	3201      	adds	r2, #1
 8011c58:	42b2      	cmp	r2, r6
 8011c5a:	d00a      	beq.n	8011c72 <rcl_wait+0x222>
 8011c5c:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8011c5e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8011c62:	2900      	cmp	r1, #0
 8011c64:	d1f7      	bne.n	8011c56 <rcl_wait+0x206>
 8011c66:	6aac      	ldr	r4, [r5, #40]	@ 0x28
 8011c68:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8011c6c:	3201      	adds	r2, #1
 8011c6e:	42b2      	cmp	r2, r6
 8011c70:	d1f4      	bne.n	8011c5c <rcl_wait+0x20c>
 8011c72:	f1b8 0f02 	cmp.w	r8, #2
 8011c76:	f47f af08 	bne.w	8011a8a <rcl_wait+0x3a>
 8011c7a:	464b      	mov	r3, r9
 8011c7c:	2b00      	cmp	r3, #0
 8011c7e:	bf08      	it	eq
 8011c80:	2002      	moveq	r0, #2
 8011c82:	e702      	b.n	8011a8a <rcl_wait+0x3a>
 8011c84:	2a00      	cmp	r2, #0
 8011c86:	d03a      	beq.n	8011cfe <rcl_wait+0x2ae>
 8011c88:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8011c8c:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 8011c90:	e70e      	b.n	8011ab0 <rcl_wait+0x60>
 8011c92:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8011c96:	b00d      	add	sp, #52	@ 0x34
 8011c98:	ecbd 8b02 	vpop	{d8}
 8011c9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011ca0:	9b04      	ldr	r3, [sp, #16]
 8011ca2:	2b01      	cmp	r3, #1
 8011ca4:	9b05      	ldr	r3, [sp, #20]
 8011ca6:	f173 0300 	sbcs.w	r3, r3, #0
 8011caa:	db24      	blt.n	8011cf6 <rcl_wait+0x2a6>
 8011cac:	2f00      	cmp	r7, #0
 8011cae:	bfbc      	itt	lt
 8011cb0:	f04f 0800 	movlt.w	r8, #0
 8011cb4:	4647      	movlt	r7, r8
 8011cb6:	a31e      	add	r3, pc, #120	@ (adr r3, 8011d30 <rcl_wait+0x2e0>)
 8011cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011cbc:	4640      	mov	r0, r8
 8011cbe:	4639      	mov	r1, r7
 8011cc0:	f7ee faee 	bl	80002a0 <__aeabi_ldivmod>
 8011cc4:	a31a      	add	r3, pc, #104	@ (adr r3, 8011d30 <rcl_wait+0x2e0>)
 8011cc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011cca:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8011cce:	4640      	mov	r0, r8
 8011cd0:	4639      	mov	r1, r7
 8011cd2:	f7ee fae5 	bl	80002a0 <__aeabi_ldivmod>
 8011cd6:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 8011cda:	ab08      	add	r3, sp, #32
 8011cdc:	e73e      	b.n	8011b5c <rcl_wait+0x10c>
 8011cde:	2001      	movs	r0, #1
 8011ce0:	b00d      	add	sp, #52	@ 0x34
 8011ce2:	ecbd 8b02 	vpop	{d8}
 8011ce6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011cea:	200b      	movs	r0, #11
 8011cec:	b00d      	add	sp, #52	@ 0x34
 8011cee:	ecbd 8b02 	vpop	{d8}
 8011cf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011cf6:	465b      	mov	r3, fp
 8011cf8:	2b00      	cmp	r3, #0
 8011cfa:	d1d7      	bne.n	8011cac <rcl_wait+0x25c>
 8011cfc:	e72e      	b.n	8011b5c <rcl_wait+0x10c>
 8011cfe:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 8011d02:	430b      	orrs	r3, r1
 8011d04:	bf08      	it	eq
 8011d06:	4691      	moveq	r9, r2
 8011d08:	f43f af21 	beq.w	8011b4e <rcl_wait+0xfe>
 8011d0c:	9b04      	ldr	r3, [sp, #16]
 8011d0e:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8011d12:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 8011d16:	2b01      	cmp	r3, #1
 8011d18:	9b05      	ldr	r3, [sp, #20]
 8011d1a:	f173 0300 	sbcs.w	r3, r3, #0
 8011d1e:	f04f 0300 	mov.w	r3, #0
 8011d22:	4699      	mov	r9, r3
 8011d24:	dac2      	bge.n	8011cac <rcl_wait+0x25c>
 8011d26:	e719      	b.n	8011b5c <rcl_wait+0x10c>
 8011d28:	ffffffff 	.word	0xffffffff
 8011d2c:	7fffffff 	.word	0x7fffffff
 8011d30:	3b9aca00 	.word	0x3b9aca00
 8011d34:	00000000 	.word	0x00000000

08011d38 <rcl_action_take_goal_response>:
 8011d38:	2800      	cmp	r0, #0
 8011d3a:	d039      	beq.n	8011db0 <rcl_action_take_goal_response+0x78>
 8011d3c:	b570      	push	{r4, r5, r6, lr}
 8011d3e:	4604      	mov	r4, r0
 8011d40:	6800      	ldr	r0, [r0, #0]
 8011d42:	b380      	cbz	r0, 8011da6 <rcl_action_take_goal_response+0x6e>
 8011d44:	460d      	mov	r5, r1
 8011d46:	4616      	mov	r6, r2
 8011d48:	f7fd fe66 	bl	800fa18 <rcl_client_is_valid>
 8011d4c:	b330      	cbz	r0, 8011d9c <rcl_action_take_goal_response+0x64>
 8011d4e:	6820      	ldr	r0, [r4, #0]
 8011d50:	3004      	adds	r0, #4
 8011d52:	f7fd fe61 	bl	800fa18 <rcl_client_is_valid>
 8011d56:	b308      	cbz	r0, 8011d9c <rcl_action_take_goal_response+0x64>
 8011d58:	6820      	ldr	r0, [r4, #0]
 8011d5a:	3008      	adds	r0, #8
 8011d5c:	f7fd fe5c 	bl	800fa18 <rcl_client_is_valid>
 8011d60:	b1e0      	cbz	r0, 8011d9c <rcl_action_take_goal_response+0x64>
 8011d62:	6820      	ldr	r0, [r4, #0]
 8011d64:	300c      	adds	r0, #12
 8011d66:	f7fe fdf3 	bl	8010950 <rcl_subscription_is_valid>
 8011d6a:	b1b8      	cbz	r0, 8011d9c <rcl_action_take_goal_response+0x64>
 8011d6c:	6820      	ldr	r0, [r4, #0]
 8011d6e:	3010      	adds	r0, #16
 8011d70:	f7fe fdee 	bl	8010950 <rcl_subscription_is_valid>
 8011d74:	b190      	cbz	r0, 8011d9c <rcl_action_take_goal_response+0x64>
 8011d76:	b1cd      	cbz	r5, 8011dac <rcl_action_take_goal_response+0x74>
 8011d78:	b1c6      	cbz	r6, 8011dac <rcl_action_take_goal_response+0x74>
 8011d7a:	6820      	ldr	r0, [r4, #0]
 8011d7c:	4632      	mov	r2, r6
 8011d7e:	4629      	mov	r1, r5
 8011d80:	f7fd fe02 	bl	800f988 <rcl_take_response>
 8011d84:	b148      	cbz	r0, 8011d9a <rcl_action_take_goal_response+0x62>
 8011d86:	280a      	cmp	r0, #10
 8011d88:	d007      	beq.n	8011d9a <rcl_action_take_goal_response+0x62>
 8011d8a:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8011d8e:	f640 0337 	movw	r3, #2103	@ 0x837
 8011d92:	4290      	cmp	r0, r2
 8011d94:	bf0c      	ite	eq
 8011d96:	4618      	moveq	r0, r3
 8011d98:	2001      	movne	r0, #1
 8011d9a:	bd70      	pop	{r4, r5, r6, pc}
 8011d9c:	f7f8 fd40 	bl	800a820 <rcutils_reset_error>
 8011da0:	f640 0036 	movw	r0, #2102	@ 0x836
 8011da4:	bd70      	pop	{r4, r5, r6, pc}
 8011da6:	f640 0036 	movw	r0, #2102	@ 0x836
 8011daa:	bd70      	pop	{r4, r5, r6, pc}
 8011dac:	200b      	movs	r0, #11
 8011dae:	bd70      	pop	{r4, r5, r6, pc}
 8011db0:	f640 0036 	movw	r0, #2102	@ 0x836
 8011db4:	4770      	bx	lr
 8011db6:	bf00      	nop

08011db8 <rcl_action_send_result_request>:
 8011db8:	b390      	cbz	r0, 8011e20 <rcl_action_send_result_request+0x68>
 8011dba:	b570      	push	{r4, r5, r6, lr}
 8011dbc:	4604      	mov	r4, r0
 8011dbe:	6800      	ldr	r0, [r0, #0]
 8011dc0:	b348      	cbz	r0, 8011e16 <rcl_action_send_result_request+0x5e>
 8011dc2:	460d      	mov	r5, r1
 8011dc4:	4616      	mov	r6, r2
 8011dc6:	f7fd fe27 	bl	800fa18 <rcl_client_is_valid>
 8011dca:	b1f8      	cbz	r0, 8011e0c <rcl_action_send_result_request+0x54>
 8011dcc:	6820      	ldr	r0, [r4, #0]
 8011dce:	3004      	adds	r0, #4
 8011dd0:	f7fd fe22 	bl	800fa18 <rcl_client_is_valid>
 8011dd4:	b1d0      	cbz	r0, 8011e0c <rcl_action_send_result_request+0x54>
 8011dd6:	6820      	ldr	r0, [r4, #0]
 8011dd8:	3008      	adds	r0, #8
 8011dda:	f7fd fe1d 	bl	800fa18 <rcl_client_is_valid>
 8011dde:	b1a8      	cbz	r0, 8011e0c <rcl_action_send_result_request+0x54>
 8011de0:	6820      	ldr	r0, [r4, #0]
 8011de2:	300c      	adds	r0, #12
 8011de4:	f7fe fdb4 	bl	8010950 <rcl_subscription_is_valid>
 8011de8:	b180      	cbz	r0, 8011e0c <rcl_action_send_result_request+0x54>
 8011dea:	6820      	ldr	r0, [r4, #0]
 8011dec:	3010      	adds	r0, #16
 8011dee:	f7fe fdaf 	bl	8010950 <rcl_subscription_is_valid>
 8011df2:	b158      	cbz	r0, 8011e0c <rcl_action_send_result_request+0x54>
 8011df4:	b195      	cbz	r5, 8011e1c <rcl_action_send_result_request+0x64>
 8011df6:	b18e      	cbz	r6, 8011e1c <rcl_action_send_result_request+0x64>
 8011df8:	6820      	ldr	r0, [r4, #0]
 8011dfa:	4632      	mov	r2, r6
 8011dfc:	4629      	mov	r1, r5
 8011dfe:	3008      	adds	r0, #8
 8011e00:	f7fd fd8c 	bl	800f91c <rcl_send_request>
 8011e04:	3800      	subs	r0, #0
 8011e06:	bf18      	it	ne
 8011e08:	2001      	movne	r0, #1
 8011e0a:	bd70      	pop	{r4, r5, r6, pc}
 8011e0c:	f7f8 fd08 	bl	800a820 <rcutils_reset_error>
 8011e10:	f640 0036 	movw	r0, #2102	@ 0x836
 8011e14:	bd70      	pop	{r4, r5, r6, pc}
 8011e16:	f640 0036 	movw	r0, #2102	@ 0x836
 8011e1a:	bd70      	pop	{r4, r5, r6, pc}
 8011e1c:	200b      	movs	r0, #11
 8011e1e:	bd70      	pop	{r4, r5, r6, pc}
 8011e20:	f640 0036 	movw	r0, #2102	@ 0x836
 8011e24:	4770      	bx	lr
 8011e26:	bf00      	nop

08011e28 <rcl_action_take_result_response>:
 8011e28:	2800      	cmp	r0, #0
 8011e2a:	d03a      	beq.n	8011ea2 <rcl_action_take_result_response+0x7a>
 8011e2c:	b570      	push	{r4, r5, r6, lr}
 8011e2e:	4604      	mov	r4, r0
 8011e30:	6800      	ldr	r0, [r0, #0]
 8011e32:	b388      	cbz	r0, 8011e98 <rcl_action_take_result_response+0x70>
 8011e34:	460d      	mov	r5, r1
 8011e36:	4616      	mov	r6, r2
 8011e38:	f7fd fdee 	bl	800fa18 <rcl_client_is_valid>
 8011e3c:	b338      	cbz	r0, 8011e8e <rcl_action_take_result_response+0x66>
 8011e3e:	6820      	ldr	r0, [r4, #0]
 8011e40:	3004      	adds	r0, #4
 8011e42:	f7fd fde9 	bl	800fa18 <rcl_client_is_valid>
 8011e46:	b310      	cbz	r0, 8011e8e <rcl_action_take_result_response+0x66>
 8011e48:	6820      	ldr	r0, [r4, #0]
 8011e4a:	3008      	adds	r0, #8
 8011e4c:	f7fd fde4 	bl	800fa18 <rcl_client_is_valid>
 8011e50:	b1e8      	cbz	r0, 8011e8e <rcl_action_take_result_response+0x66>
 8011e52:	6820      	ldr	r0, [r4, #0]
 8011e54:	300c      	adds	r0, #12
 8011e56:	f7fe fd7b 	bl	8010950 <rcl_subscription_is_valid>
 8011e5a:	b1c0      	cbz	r0, 8011e8e <rcl_action_take_result_response+0x66>
 8011e5c:	6820      	ldr	r0, [r4, #0]
 8011e5e:	3010      	adds	r0, #16
 8011e60:	f7fe fd76 	bl	8010950 <rcl_subscription_is_valid>
 8011e64:	b198      	cbz	r0, 8011e8e <rcl_action_take_result_response+0x66>
 8011e66:	b1d5      	cbz	r5, 8011e9e <rcl_action_take_result_response+0x76>
 8011e68:	b1ce      	cbz	r6, 8011e9e <rcl_action_take_result_response+0x76>
 8011e6a:	6820      	ldr	r0, [r4, #0]
 8011e6c:	4632      	mov	r2, r6
 8011e6e:	4629      	mov	r1, r5
 8011e70:	3008      	adds	r0, #8
 8011e72:	f7fd fd89 	bl	800f988 <rcl_take_response>
 8011e76:	b148      	cbz	r0, 8011e8c <rcl_action_take_result_response+0x64>
 8011e78:	280a      	cmp	r0, #10
 8011e7a:	d007      	beq.n	8011e8c <rcl_action_take_result_response+0x64>
 8011e7c:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8011e80:	f640 0337 	movw	r3, #2103	@ 0x837
 8011e84:	4290      	cmp	r0, r2
 8011e86:	bf0c      	ite	eq
 8011e88:	4618      	moveq	r0, r3
 8011e8a:	2001      	movne	r0, #1
 8011e8c:	bd70      	pop	{r4, r5, r6, pc}
 8011e8e:	f7f8 fcc7 	bl	800a820 <rcutils_reset_error>
 8011e92:	f640 0036 	movw	r0, #2102	@ 0x836
 8011e96:	bd70      	pop	{r4, r5, r6, pc}
 8011e98:	f640 0036 	movw	r0, #2102	@ 0x836
 8011e9c:	bd70      	pop	{r4, r5, r6, pc}
 8011e9e:	200b      	movs	r0, #11
 8011ea0:	bd70      	pop	{r4, r5, r6, pc}
 8011ea2:	f640 0036 	movw	r0, #2102	@ 0x836
 8011ea6:	4770      	bx	lr

08011ea8 <rcl_action_take_cancel_response>:
 8011ea8:	2800      	cmp	r0, #0
 8011eaa:	d03a      	beq.n	8011f22 <rcl_action_take_cancel_response+0x7a>
 8011eac:	b570      	push	{r4, r5, r6, lr}
 8011eae:	4604      	mov	r4, r0
 8011eb0:	6800      	ldr	r0, [r0, #0]
 8011eb2:	b388      	cbz	r0, 8011f18 <rcl_action_take_cancel_response+0x70>
 8011eb4:	460d      	mov	r5, r1
 8011eb6:	4616      	mov	r6, r2
 8011eb8:	f7fd fdae 	bl	800fa18 <rcl_client_is_valid>
 8011ebc:	b338      	cbz	r0, 8011f0e <rcl_action_take_cancel_response+0x66>
 8011ebe:	6820      	ldr	r0, [r4, #0]
 8011ec0:	3004      	adds	r0, #4
 8011ec2:	f7fd fda9 	bl	800fa18 <rcl_client_is_valid>
 8011ec6:	b310      	cbz	r0, 8011f0e <rcl_action_take_cancel_response+0x66>
 8011ec8:	6820      	ldr	r0, [r4, #0]
 8011eca:	3008      	adds	r0, #8
 8011ecc:	f7fd fda4 	bl	800fa18 <rcl_client_is_valid>
 8011ed0:	b1e8      	cbz	r0, 8011f0e <rcl_action_take_cancel_response+0x66>
 8011ed2:	6820      	ldr	r0, [r4, #0]
 8011ed4:	300c      	adds	r0, #12
 8011ed6:	f7fe fd3b 	bl	8010950 <rcl_subscription_is_valid>
 8011eda:	b1c0      	cbz	r0, 8011f0e <rcl_action_take_cancel_response+0x66>
 8011edc:	6820      	ldr	r0, [r4, #0]
 8011ede:	3010      	adds	r0, #16
 8011ee0:	f7fe fd36 	bl	8010950 <rcl_subscription_is_valid>
 8011ee4:	b198      	cbz	r0, 8011f0e <rcl_action_take_cancel_response+0x66>
 8011ee6:	b1d5      	cbz	r5, 8011f1e <rcl_action_take_cancel_response+0x76>
 8011ee8:	b1ce      	cbz	r6, 8011f1e <rcl_action_take_cancel_response+0x76>
 8011eea:	6820      	ldr	r0, [r4, #0]
 8011eec:	4632      	mov	r2, r6
 8011eee:	4629      	mov	r1, r5
 8011ef0:	3004      	adds	r0, #4
 8011ef2:	f7fd fd49 	bl	800f988 <rcl_take_response>
 8011ef6:	b148      	cbz	r0, 8011f0c <rcl_action_take_cancel_response+0x64>
 8011ef8:	280a      	cmp	r0, #10
 8011efa:	d007      	beq.n	8011f0c <rcl_action_take_cancel_response+0x64>
 8011efc:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8011f00:	f640 0337 	movw	r3, #2103	@ 0x837
 8011f04:	4290      	cmp	r0, r2
 8011f06:	bf0c      	ite	eq
 8011f08:	4618      	moveq	r0, r3
 8011f0a:	2001      	movne	r0, #1
 8011f0c:	bd70      	pop	{r4, r5, r6, pc}
 8011f0e:	f7f8 fc87 	bl	800a820 <rcutils_reset_error>
 8011f12:	f640 0036 	movw	r0, #2102	@ 0x836
 8011f16:	bd70      	pop	{r4, r5, r6, pc}
 8011f18:	f640 0036 	movw	r0, #2102	@ 0x836
 8011f1c:	bd70      	pop	{r4, r5, r6, pc}
 8011f1e:	200b      	movs	r0, #11
 8011f20:	bd70      	pop	{r4, r5, r6, pc}
 8011f22:	f640 0036 	movw	r0, #2102	@ 0x836
 8011f26:	4770      	bx	lr

08011f28 <rcl_action_take_feedback>:
 8011f28:	2800      	cmp	r0, #0
 8011f2a:	d038      	beq.n	8011f9e <rcl_action_take_feedback+0x76>
 8011f2c:	b530      	push	{r4, r5, lr}
 8011f2e:	4604      	mov	r4, r0
 8011f30:	6800      	ldr	r0, [r0, #0]
 8011f32:	b091      	sub	sp, #68	@ 0x44
 8011f34:	b378      	cbz	r0, 8011f96 <rcl_action_take_feedback+0x6e>
 8011f36:	460d      	mov	r5, r1
 8011f38:	f7fd fd6e 	bl	800fa18 <rcl_client_is_valid>
 8011f3c:	b328      	cbz	r0, 8011f8a <rcl_action_take_feedback+0x62>
 8011f3e:	6820      	ldr	r0, [r4, #0]
 8011f40:	3004      	adds	r0, #4
 8011f42:	f7fd fd69 	bl	800fa18 <rcl_client_is_valid>
 8011f46:	b300      	cbz	r0, 8011f8a <rcl_action_take_feedback+0x62>
 8011f48:	6820      	ldr	r0, [r4, #0]
 8011f4a:	3008      	adds	r0, #8
 8011f4c:	f7fd fd64 	bl	800fa18 <rcl_client_is_valid>
 8011f50:	b1d8      	cbz	r0, 8011f8a <rcl_action_take_feedback+0x62>
 8011f52:	6820      	ldr	r0, [r4, #0]
 8011f54:	300c      	adds	r0, #12
 8011f56:	f7fe fcfb 	bl	8010950 <rcl_subscription_is_valid>
 8011f5a:	b1b0      	cbz	r0, 8011f8a <rcl_action_take_feedback+0x62>
 8011f5c:	6820      	ldr	r0, [r4, #0]
 8011f5e:	3010      	adds	r0, #16
 8011f60:	f7fe fcf6 	bl	8010950 <rcl_subscription_is_valid>
 8011f64:	b188      	cbz	r0, 8011f8a <rcl_action_take_feedback+0x62>
 8011f66:	b1ed      	cbz	r5, 8011fa4 <rcl_action_take_feedback+0x7c>
 8011f68:	6820      	ldr	r0, [r4, #0]
 8011f6a:	2300      	movs	r3, #0
 8011f6c:	466a      	mov	r2, sp
 8011f6e:	4629      	mov	r1, r5
 8011f70:	300c      	adds	r0, #12
 8011f72:	f7fe fc8f 	bl	8010894 <rcl_take>
 8011f76:	b160      	cbz	r0, 8011f92 <rcl_action_take_feedback+0x6a>
 8011f78:	f240 1391 	movw	r3, #401	@ 0x191
 8011f7c:	4298      	cmp	r0, r3
 8011f7e:	d014      	beq.n	8011faa <rcl_action_take_feedback+0x82>
 8011f80:	280a      	cmp	r0, #10
 8011f82:	bf18      	it	ne
 8011f84:	2001      	movne	r0, #1
 8011f86:	b011      	add	sp, #68	@ 0x44
 8011f88:	bd30      	pop	{r4, r5, pc}
 8011f8a:	f7f8 fc49 	bl	800a820 <rcutils_reset_error>
 8011f8e:	f640 0036 	movw	r0, #2102	@ 0x836
 8011f92:	b011      	add	sp, #68	@ 0x44
 8011f94:	bd30      	pop	{r4, r5, pc}
 8011f96:	f640 0036 	movw	r0, #2102	@ 0x836
 8011f9a:	b011      	add	sp, #68	@ 0x44
 8011f9c:	bd30      	pop	{r4, r5, pc}
 8011f9e:	f640 0036 	movw	r0, #2102	@ 0x836
 8011fa2:	4770      	bx	lr
 8011fa4:	200b      	movs	r0, #11
 8011fa6:	b011      	add	sp, #68	@ 0x44
 8011fa8:	bd30      	pop	{r4, r5, pc}
 8011faa:	f640 0037 	movw	r0, #2103	@ 0x837
 8011fae:	e7f0      	b.n	8011f92 <rcl_action_take_feedback+0x6a>

08011fb0 <rcl_action_wait_set_add_action_client>:
 8011fb0:	2800      	cmp	r0, #0
 8011fb2:	d048      	beq.n	8012046 <rcl_action_wait_set_add_action_client+0x96>
 8011fb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011fb6:	460c      	mov	r4, r1
 8011fb8:	2900      	cmp	r1, #0
 8011fba:	d03c      	beq.n	8012036 <rcl_action_wait_set_add_action_client+0x86>
 8011fbc:	4605      	mov	r5, r0
 8011fbe:	6808      	ldr	r0, [r1, #0]
 8011fc0:	2800      	cmp	r0, #0
 8011fc2:	d038      	beq.n	8012036 <rcl_action_wait_set_add_action_client+0x86>
 8011fc4:	4617      	mov	r7, r2
 8011fc6:	461e      	mov	r6, r3
 8011fc8:	f7fd fd26 	bl	800fa18 <rcl_client_is_valid>
 8011fcc:	b3b0      	cbz	r0, 801203c <rcl_action_wait_set_add_action_client+0x8c>
 8011fce:	6820      	ldr	r0, [r4, #0]
 8011fd0:	3004      	adds	r0, #4
 8011fd2:	f7fd fd21 	bl	800fa18 <rcl_client_is_valid>
 8011fd6:	b388      	cbz	r0, 801203c <rcl_action_wait_set_add_action_client+0x8c>
 8011fd8:	6820      	ldr	r0, [r4, #0]
 8011fda:	3008      	adds	r0, #8
 8011fdc:	f7fd fd1c 	bl	800fa18 <rcl_client_is_valid>
 8011fe0:	b360      	cbz	r0, 801203c <rcl_action_wait_set_add_action_client+0x8c>
 8011fe2:	6820      	ldr	r0, [r4, #0]
 8011fe4:	300c      	adds	r0, #12
 8011fe6:	f7fe fcb3 	bl	8010950 <rcl_subscription_is_valid>
 8011fea:	b338      	cbz	r0, 801203c <rcl_action_wait_set_add_action_client+0x8c>
 8011fec:	6820      	ldr	r0, [r4, #0]
 8011fee:	3010      	adds	r0, #16
 8011ff0:	f7fe fcae 	bl	8010950 <rcl_subscription_is_valid>
 8011ff4:	b310      	cbz	r0, 801203c <rcl_action_wait_set_add_action_client+0x8c>
 8011ff6:	6821      	ldr	r1, [r4, #0]
 8011ff8:	4628      	mov	r0, r5
 8011ffa:	f501 72e2 	add.w	r2, r1, #452	@ 0x1c4
 8011ffe:	f7ff fccd 	bl	801199c <rcl_wait_set_add_client>
 8012002:	b9b8      	cbnz	r0, 8012034 <rcl_action_wait_set_add_action_client+0x84>
 8012004:	6821      	ldr	r1, [r4, #0]
 8012006:	4628      	mov	r0, r5
 8012008:	f501 72e4 	add.w	r2, r1, #456	@ 0x1c8
 801200c:	3104      	adds	r1, #4
 801200e:	f7ff fcc5 	bl	801199c <rcl_wait_set_add_client>
 8012012:	b978      	cbnz	r0, 8012034 <rcl_action_wait_set_add_action_client+0x84>
 8012014:	6821      	ldr	r1, [r4, #0]
 8012016:	4628      	mov	r0, r5
 8012018:	f501 72e6 	add.w	r2, r1, #460	@ 0x1cc
 801201c:	3108      	adds	r1, #8
 801201e:	f7ff fcbd 	bl	801199c <rcl_wait_set_add_client>
 8012022:	b938      	cbnz	r0, 8012034 <rcl_action_wait_set_add_action_client+0x84>
 8012024:	6821      	ldr	r1, [r4, #0]
 8012026:	4628      	mov	r0, r5
 8012028:	f501 72e8 	add.w	r2, r1, #464	@ 0x1d0
 801202c:	310c      	adds	r1, #12
 801202e:	f7ff f96d 	bl	801130c <rcl_wait_set_add_subscription>
 8012032:	b158      	cbz	r0, 801204c <rcl_action_wait_set_add_action_client+0x9c>
 8012034:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012036:	f640 0036 	movw	r0, #2102	@ 0x836
 801203a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801203c:	f7f8 fbf0 	bl	800a820 <rcutils_reset_error>
 8012040:	f640 0036 	movw	r0, #2102	@ 0x836
 8012044:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012046:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801204a:	4770      	bx	lr
 801204c:	6821      	ldr	r1, [r4, #0]
 801204e:	4628      	mov	r0, r5
 8012050:	f501 72ea 	add.w	r2, r1, #468	@ 0x1d4
 8012054:	3110      	adds	r1, #16
 8012056:	f7ff f959 	bl	801130c <rcl_wait_set_add_subscription>
 801205a:	2800      	cmp	r0, #0
 801205c:	d1ea      	bne.n	8012034 <rcl_action_wait_set_add_action_client+0x84>
 801205e:	b11f      	cbz	r7, 8012068 <rcl_action_wait_set_add_action_client+0xb8>
 8012060:	6823      	ldr	r3, [r4, #0]
 8012062:	f8d3 31c4 	ldr.w	r3, [r3, #452]	@ 0x1c4
 8012066:	603b      	str	r3, [r7, #0]
 8012068:	2e00      	cmp	r6, #0
 801206a:	d0e3      	beq.n	8012034 <rcl_action_wait_set_add_action_client+0x84>
 801206c:	6823      	ldr	r3, [r4, #0]
 801206e:	f8d3 31d0 	ldr.w	r3, [r3, #464]	@ 0x1d0
 8012072:	6033      	str	r3, [r6, #0]
 8012074:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012076:	bf00      	nop

08012078 <rcl_action_client_wait_set_get_entities_ready>:
 8012078:	2800      	cmp	r0, #0
 801207a:	f000 808d 	beq.w	8012198 <rcl_action_client_wait_set_get_entities_ready+0x120>
 801207e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012082:	460c      	mov	r4, r1
 8012084:	2900      	cmp	r1, #0
 8012086:	d077      	beq.n	8012178 <rcl_action_client_wait_set_get_entities_ready+0x100>
 8012088:	4605      	mov	r5, r0
 801208a:	6808      	ldr	r0, [r1, #0]
 801208c:	2800      	cmp	r0, #0
 801208e:	d073      	beq.n	8012178 <rcl_action_client_wait_set_get_entities_ready+0x100>
 8012090:	4616      	mov	r6, r2
 8012092:	461f      	mov	r7, r3
 8012094:	f7fd fcc0 	bl	800fa18 <rcl_client_is_valid>
 8012098:	2800      	cmp	r0, #0
 801209a:	d071      	beq.n	8012180 <rcl_action_client_wait_set_get_entities_ready+0x108>
 801209c:	6820      	ldr	r0, [r4, #0]
 801209e:	3004      	adds	r0, #4
 80120a0:	f7fd fcba 	bl	800fa18 <rcl_client_is_valid>
 80120a4:	2800      	cmp	r0, #0
 80120a6:	d06b      	beq.n	8012180 <rcl_action_client_wait_set_get_entities_ready+0x108>
 80120a8:	6820      	ldr	r0, [r4, #0]
 80120aa:	3008      	adds	r0, #8
 80120ac:	f7fd fcb4 	bl	800fa18 <rcl_client_is_valid>
 80120b0:	2800      	cmp	r0, #0
 80120b2:	d065      	beq.n	8012180 <rcl_action_client_wait_set_get_entities_ready+0x108>
 80120b4:	6820      	ldr	r0, [r4, #0]
 80120b6:	300c      	adds	r0, #12
 80120b8:	f7fe fc4a 	bl	8010950 <rcl_subscription_is_valid>
 80120bc:	2800      	cmp	r0, #0
 80120be:	d05f      	beq.n	8012180 <rcl_action_client_wait_set_get_entities_ready+0x108>
 80120c0:	6820      	ldr	r0, [r4, #0]
 80120c2:	3010      	adds	r0, #16
 80120c4:	f7fe fc44 	bl	8010950 <rcl_subscription_is_valid>
 80120c8:	2800      	cmp	r0, #0
 80120ca:	d059      	beq.n	8012180 <rcl_action_client_wait_set_get_entities_ready+0x108>
 80120cc:	2e00      	cmp	r6, #0
 80120ce:	d060      	beq.n	8012192 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 80120d0:	2f00      	cmp	r7, #0
 80120d2:	d05e      	beq.n	8012192 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 80120d4:	9b06      	ldr	r3, [sp, #24]
 80120d6:	2b00      	cmp	r3, #0
 80120d8:	d05b      	beq.n	8012192 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 80120da:	9b07      	ldr	r3, [sp, #28]
 80120dc:	2b00      	cmp	r3, #0
 80120de:	d058      	beq.n	8012192 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 80120e0:	9b08      	ldr	r3, [sp, #32]
 80120e2:	2b00      	cmp	r3, #0
 80120e4:	d055      	beq.n	8012192 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 80120e6:	6823      	ldr	r3, [r4, #0]
 80120e8:	686a      	ldr	r2, [r5, #4]
 80120ea:	f8d3 11d0 	ldr.w	r1, [r3, #464]	@ 0x1d0
 80120ee:	428a      	cmp	r2, r1
 80120f0:	d94c      	bls.n	801218c <rcl_action_client_wait_set_get_entities_ready+0x114>
 80120f2:	f8d3 01d4 	ldr.w	r0, [r3, #468]	@ 0x1d4
 80120f6:	4282      	cmp	r2, r0
 80120f8:	d948      	bls.n	801218c <rcl_action_client_wait_set_get_entities_ready+0x114>
 80120fa:	f8d3 41c4 	ldr.w	r4, [r3, #452]	@ 0x1c4
 80120fe:	69ea      	ldr	r2, [r5, #28]
 8012100:	42a2      	cmp	r2, r4
 8012102:	d943      	bls.n	801218c <rcl_action_client_wait_set_get_entities_ready+0x114>
 8012104:	f8d3 c1c8 	ldr.w	ip, [r3, #456]	@ 0x1c8
 8012108:	4562      	cmp	r2, ip
 801210a:	d93f      	bls.n	801218c <rcl_action_client_wait_set_get_entities_ready+0x114>
 801210c:	f8d3 e1cc 	ldr.w	lr, [r3, #460]	@ 0x1cc
 8012110:	4572      	cmp	r2, lr
 8012112:	d93b      	bls.n	801218c <rcl_action_client_wait_set_get_entities_ready+0x114>
 8012114:	69aa      	ldr	r2, [r5, #24]
 8012116:	682d      	ldr	r5, [r5, #0]
 8012118:	f852 8024 	ldr.w	r8, [r2, r4, lsl #2]
 801211c:	f855 4020 	ldr.w	r4, [r5, r0, lsl #2]
 8012120:	f855 5021 	ldr.w	r5, [r5, r1, lsl #2]
 8012124:	f852 102c 	ldr.w	r1, [r2, ip, lsl #2]
 8012128:	f852 202e 	ldr.w	r2, [r2, lr, lsl #2]
 801212c:	f103 0c0c 	add.w	ip, r3, #12
 8012130:	eba5 050c 	sub.w	r5, r5, ip
 8012134:	fab5 f585 	clz	r5, r5
 8012138:	096d      	lsrs	r5, r5, #5
 801213a:	7035      	strb	r5, [r6, #0]
 801213c:	f103 0510 	add.w	r5, r3, #16
 8012140:	1b64      	subs	r4, r4, r5
 8012142:	fab4 f484 	clz	r4, r4
 8012146:	0964      	lsrs	r4, r4, #5
 8012148:	703c      	strb	r4, [r7, #0]
 801214a:	eba3 0008 	sub.w	r0, r3, r8
 801214e:	1d1c      	adds	r4, r3, #4
 8012150:	3308      	adds	r3, #8
 8012152:	1ad3      	subs	r3, r2, r3
 8012154:	fab0 f080 	clz	r0, r0
 8012158:	9a06      	ldr	r2, [sp, #24]
 801215a:	0940      	lsrs	r0, r0, #5
 801215c:	1b09      	subs	r1, r1, r4
 801215e:	7010      	strb	r0, [r2, #0]
 8012160:	fab1 f181 	clz	r1, r1
 8012164:	9a07      	ldr	r2, [sp, #28]
 8012166:	0949      	lsrs	r1, r1, #5
 8012168:	7011      	strb	r1, [r2, #0]
 801216a:	fab3 f383 	clz	r3, r3
 801216e:	9a08      	ldr	r2, [sp, #32]
 8012170:	095b      	lsrs	r3, r3, #5
 8012172:	2000      	movs	r0, #0
 8012174:	7013      	strb	r3, [r2, #0]
 8012176:	e001      	b.n	801217c <rcl_action_client_wait_set_get_entities_ready+0x104>
 8012178:	f640 0036 	movw	r0, #2102	@ 0x836
 801217c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012180:	f7f8 fb4e 	bl	800a820 <rcutils_reset_error>
 8012184:	f640 0036 	movw	r0, #2102	@ 0x836
 8012188:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801218c:	2001      	movs	r0, #1
 801218e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012192:	200b      	movs	r0, #11
 8012194:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012198:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801219c:	4770      	bx	lr
 801219e:	bf00      	nop

080121a0 <rcl_action_take_goal_request>:
 80121a0:	2800      	cmp	r0, #0
 80121a2:	d039      	beq.n	8012218 <rcl_action_take_goal_request+0x78>
 80121a4:	b570      	push	{r4, r5, r6, lr}
 80121a6:	4604      	mov	r4, r0
 80121a8:	6800      	ldr	r0, [r0, #0]
 80121aa:	b380      	cbz	r0, 801220e <rcl_action_take_goal_request+0x6e>
 80121ac:	460d      	mov	r5, r1
 80121ae:	4616      	mov	r6, r2
 80121b0:	f7fe fa8a 	bl	80106c8 <rcl_service_is_valid>
 80121b4:	b330      	cbz	r0, 8012204 <rcl_action_take_goal_request+0x64>
 80121b6:	6820      	ldr	r0, [r4, #0]
 80121b8:	3004      	adds	r0, #4
 80121ba:	f7fe fa85 	bl	80106c8 <rcl_service_is_valid>
 80121be:	b308      	cbz	r0, 8012204 <rcl_action_take_goal_request+0x64>
 80121c0:	6820      	ldr	r0, [r4, #0]
 80121c2:	3008      	adds	r0, #8
 80121c4:	f7fe fa80 	bl	80106c8 <rcl_service_is_valid>
 80121c8:	b1e0      	cbz	r0, 8012204 <rcl_action_take_goal_request+0x64>
 80121ca:	6820      	ldr	r0, [r4, #0]
 80121cc:	300c      	adds	r0, #12
 80121ce:	f7f7 fb29 	bl	8009824 <rcl_publisher_is_valid>
 80121d2:	b1b8      	cbz	r0, 8012204 <rcl_action_take_goal_request+0x64>
 80121d4:	6820      	ldr	r0, [r4, #0]
 80121d6:	3010      	adds	r0, #16
 80121d8:	f7f7 fb24 	bl	8009824 <rcl_publisher_is_valid>
 80121dc:	b190      	cbz	r0, 8012204 <rcl_action_take_goal_request+0x64>
 80121de:	b1cd      	cbz	r5, 8012214 <rcl_action_take_goal_request+0x74>
 80121e0:	b1c6      	cbz	r6, 8012214 <rcl_action_take_goal_request+0x74>
 80121e2:	6820      	ldr	r0, [r4, #0]
 80121e4:	4632      	mov	r2, r6
 80121e6:	4629      	mov	r1, r5
 80121e8:	f7fe fa16 	bl	8010618 <rcl_take_request>
 80121ec:	b148      	cbz	r0, 8012202 <rcl_action_take_goal_request+0x62>
 80121ee:	280a      	cmp	r0, #10
 80121f0:	d007      	beq.n	8012202 <rcl_action_take_goal_request+0x62>
 80121f2:	f240 2259 	movw	r2, #601	@ 0x259
 80121f6:	f640 0399 	movw	r3, #2201	@ 0x899
 80121fa:	4290      	cmp	r0, r2
 80121fc:	bf0c      	ite	eq
 80121fe:	4618      	moveq	r0, r3
 8012200:	2001      	movne	r0, #1
 8012202:	bd70      	pop	{r4, r5, r6, pc}
 8012204:	f7f8 fb0c 	bl	800a820 <rcutils_reset_error>
 8012208:	f640 0098 	movw	r0, #2200	@ 0x898
 801220c:	bd70      	pop	{r4, r5, r6, pc}
 801220e:	f640 0098 	movw	r0, #2200	@ 0x898
 8012212:	bd70      	pop	{r4, r5, r6, pc}
 8012214:	200b      	movs	r0, #11
 8012216:	bd70      	pop	{r4, r5, r6, pc}
 8012218:	f640 0098 	movw	r0, #2200	@ 0x898
 801221c:	4770      	bx	lr
 801221e:	bf00      	nop

08012220 <rcl_action_send_goal_response>:
 8012220:	b390      	cbz	r0, 8012288 <rcl_action_send_goal_response+0x68>
 8012222:	b570      	push	{r4, r5, r6, lr}
 8012224:	4604      	mov	r4, r0
 8012226:	6800      	ldr	r0, [r0, #0]
 8012228:	b348      	cbz	r0, 801227e <rcl_action_send_goal_response+0x5e>
 801222a:	460d      	mov	r5, r1
 801222c:	4616      	mov	r6, r2
 801222e:	f7fe fa4b 	bl	80106c8 <rcl_service_is_valid>
 8012232:	b1f8      	cbz	r0, 8012274 <rcl_action_send_goal_response+0x54>
 8012234:	6820      	ldr	r0, [r4, #0]
 8012236:	3004      	adds	r0, #4
 8012238:	f7fe fa46 	bl	80106c8 <rcl_service_is_valid>
 801223c:	b1d0      	cbz	r0, 8012274 <rcl_action_send_goal_response+0x54>
 801223e:	6820      	ldr	r0, [r4, #0]
 8012240:	3008      	adds	r0, #8
 8012242:	f7fe fa41 	bl	80106c8 <rcl_service_is_valid>
 8012246:	b1a8      	cbz	r0, 8012274 <rcl_action_send_goal_response+0x54>
 8012248:	6820      	ldr	r0, [r4, #0]
 801224a:	300c      	adds	r0, #12
 801224c:	f7f7 faea 	bl	8009824 <rcl_publisher_is_valid>
 8012250:	b180      	cbz	r0, 8012274 <rcl_action_send_goal_response+0x54>
 8012252:	6820      	ldr	r0, [r4, #0]
 8012254:	3010      	adds	r0, #16
 8012256:	f7f7 fae5 	bl	8009824 <rcl_publisher_is_valid>
 801225a:	b158      	cbz	r0, 8012274 <rcl_action_send_goal_response+0x54>
 801225c:	b195      	cbz	r5, 8012284 <rcl_action_send_goal_response+0x64>
 801225e:	b18e      	cbz	r6, 8012284 <rcl_action_send_goal_response+0x64>
 8012260:	6820      	ldr	r0, [r4, #0]
 8012262:	4632      	mov	r2, r6
 8012264:	4629      	mov	r1, r5
 8012266:	f7fe fa17 	bl	8010698 <rcl_send_response>
 801226a:	b110      	cbz	r0, 8012272 <rcl_action_send_goal_response+0x52>
 801226c:	2802      	cmp	r0, #2
 801226e:	bf18      	it	ne
 8012270:	2001      	movne	r0, #1
 8012272:	bd70      	pop	{r4, r5, r6, pc}
 8012274:	f7f8 fad4 	bl	800a820 <rcutils_reset_error>
 8012278:	f640 0098 	movw	r0, #2200	@ 0x898
 801227c:	bd70      	pop	{r4, r5, r6, pc}
 801227e:	f640 0098 	movw	r0, #2200	@ 0x898
 8012282:	bd70      	pop	{r4, r5, r6, pc}
 8012284:	200b      	movs	r0, #11
 8012286:	bd70      	pop	{r4, r5, r6, pc}
 8012288:	f640 0098 	movw	r0, #2200	@ 0x898
 801228c:	4770      	bx	lr
 801228e:	bf00      	nop

08012290 <rcl_action_take_result_request>:
 8012290:	2800      	cmp	r0, #0
 8012292:	d03a      	beq.n	801230a <rcl_action_take_result_request+0x7a>
 8012294:	b570      	push	{r4, r5, r6, lr}
 8012296:	4604      	mov	r4, r0
 8012298:	6800      	ldr	r0, [r0, #0]
 801229a:	b388      	cbz	r0, 8012300 <rcl_action_take_result_request+0x70>
 801229c:	460d      	mov	r5, r1
 801229e:	4616      	mov	r6, r2
 80122a0:	f7fe fa12 	bl	80106c8 <rcl_service_is_valid>
 80122a4:	b338      	cbz	r0, 80122f6 <rcl_action_take_result_request+0x66>
 80122a6:	6820      	ldr	r0, [r4, #0]
 80122a8:	3004      	adds	r0, #4
 80122aa:	f7fe fa0d 	bl	80106c8 <rcl_service_is_valid>
 80122ae:	b310      	cbz	r0, 80122f6 <rcl_action_take_result_request+0x66>
 80122b0:	6820      	ldr	r0, [r4, #0]
 80122b2:	3008      	adds	r0, #8
 80122b4:	f7fe fa08 	bl	80106c8 <rcl_service_is_valid>
 80122b8:	b1e8      	cbz	r0, 80122f6 <rcl_action_take_result_request+0x66>
 80122ba:	6820      	ldr	r0, [r4, #0]
 80122bc:	300c      	adds	r0, #12
 80122be:	f7f7 fab1 	bl	8009824 <rcl_publisher_is_valid>
 80122c2:	b1c0      	cbz	r0, 80122f6 <rcl_action_take_result_request+0x66>
 80122c4:	6820      	ldr	r0, [r4, #0]
 80122c6:	3010      	adds	r0, #16
 80122c8:	f7f7 faac 	bl	8009824 <rcl_publisher_is_valid>
 80122cc:	b198      	cbz	r0, 80122f6 <rcl_action_take_result_request+0x66>
 80122ce:	b1d5      	cbz	r5, 8012306 <rcl_action_take_result_request+0x76>
 80122d0:	b1ce      	cbz	r6, 8012306 <rcl_action_take_result_request+0x76>
 80122d2:	6820      	ldr	r0, [r4, #0]
 80122d4:	4632      	mov	r2, r6
 80122d6:	4629      	mov	r1, r5
 80122d8:	3008      	adds	r0, #8
 80122da:	f7fe f99d 	bl	8010618 <rcl_take_request>
 80122de:	b148      	cbz	r0, 80122f4 <rcl_action_take_result_request+0x64>
 80122e0:	280a      	cmp	r0, #10
 80122e2:	d007      	beq.n	80122f4 <rcl_action_take_result_request+0x64>
 80122e4:	f240 2259 	movw	r2, #601	@ 0x259
 80122e8:	f640 0399 	movw	r3, #2201	@ 0x899
 80122ec:	4290      	cmp	r0, r2
 80122ee:	bf0c      	ite	eq
 80122f0:	4618      	moveq	r0, r3
 80122f2:	2001      	movne	r0, #1
 80122f4:	bd70      	pop	{r4, r5, r6, pc}
 80122f6:	f7f8 fa93 	bl	800a820 <rcutils_reset_error>
 80122fa:	f640 0098 	movw	r0, #2200	@ 0x898
 80122fe:	bd70      	pop	{r4, r5, r6, pc}
 8012300:	f640 0098 	movw	r0, #2200	@ 0x898
 8012304:	bd70      	pop	{r4, r5, r6, pc}
 8012306:	200b      	movs	r0, #11
 8012308:	bd70      	pop	{r4, r5, r6, pc}
 801230a:	f640 0098 	movw	r0, #2200	@ 0x898
 801230e:	4770      	bx	lr

08012310 <rcl_action_take_cancel_request>:
 8012310:	2800      	cmp	r0, #0
 8012312:	d03a      	beq.n	801238a <rcl_action_take_cancel_request+0x7a>
 8012314:	b570      	push	{r4, r5, r6, lr}
 8012316:	4604      	mov	r4, r0
 8012318:	6800      	ldr	r0, [r0, #0]
 801231a:	b388      	cbz	r0, 8012380 <rcl_action_take_cancel_request+0x70>
 801231c:	460d      	mov	r5, r1
 801231e:	4616      	mov	r6, r2
 8012320:	f7fe f9d2 	bl	80106c8 <rcl_service_is_valid>
 8012324:	b338      	cbz	r0, 8012376 <rcl_action_take_cancel_request+0x66>
 8012326:	6820      	ldr	r0, [r4, #0]
 8012328:	3004      	adds	r0, #4
 801232a:	f7fe f9cd 	bl	80106c8 <rcl_service_is_valid>
 801232e:	b310      	cbz	r0, 8012376 <rcl_action_take_cancel_request+0x66>
 8012330:	6820      	ldr	r0, [r4, #0]
 8012332:	3008      	adds	r0, #8
 8012334:	f7fe f9c8 	bl	80106c8 <rcl_service_is_valid>
 8012338:	b1e8      	cbz	r0, 8012376 <rcl_action_take_cancel_request+0x66>
 801233a:	6820      	ldr	r0, [r4, #0]
 801233c:	300c      	adds	r0, #12
 801233e:	f7f7 fa71 	bl	8009824 <rcl_publisher_is_valid>
 8012342:	b1c0      	cbz	r0, 8012376 <rcl_action_take_cancel_request+0x66>
 8012344:	6820      	ldr	r0, [r4, #0]
 8012346:	3010      	adds	r0, #16
 8012348:	f7f7 fa6c 	bl	8009824 <rcl_publisher_is_valid>
 801234c:	b198      	cbz	r0, 8012376 <rcl_action_take_cancel_request+0x66>
 801234e:	b1d5      	cbz	r5, 8012386 <rcl_action_take_cancel_request+0x76>
 8012350:	b1ce      	cbz	r6, 8012386 <rcl_action_take_cancel_request+0x76>
 8012352:	6820      	ldr	r0, [r4, #0]
 8012354:	4632      	mov	r2, r6
 8012356:	4629      	mov	r1, r5
 8012358:	3004      	adds	r0, #4
 801235a:	f7fe f95d 	bl	8010618 <rcl_take_request>
 801235e:	b148      	cbz	r0, 8012374 <rcl_action_take_cancel_request+0x64>
 8012360:	280a      	cmp	r0, #10
 8012362:	d007      	beq.n	8012374 <rcl_action_take_cancel_request+0x64>
 8012364:	f240 2259 	movw	r2, #601	@ 0x259
 8012368:	f640 0399 	movw	r3, #2201	@ 0x899
 801236c:	4290      	cmp	r0, r2
 801236e:	bf0c      	ite	eq
 8012370:	4618      	moveq	r0, r3
 8012372:	2001      	movne	r0, #1
 8012374:	bd70      	pop	{r4, r5, r6, pc}
 8012376:	f7f8 fa53 	bl	800a820 <rcutils_reset_error>
 801237a:	f640 0098 	movw	r0, #2200	@ 0x898
 801237e:	bd70      	pop	{r4, r5, r6, pc}
 8012380:	f640 0098 	movw	r0, #2200	@ 0x898
 8012384:	bd70      	pop	{r4, r5, r6, pc}
 8012386:	200b      	movs	r0, #11
 8012388:	bd70      	pop	{r4, r5, r6, pc}
 801238a:	f640 0098 	movw	r0, #2200	@ 0x898
 801238e:	4770      	bx	lr

08012390 <rcl_action_send_cancel_response>:
 8012390:	b398      	cbz	r0, 80123fa <rcl_action_send_cancel_response+0x6a>
 8012392:	b570      	push	{r4, r5, r6, lr}
 8012394:	4604      	mov	r4, r0
 8012396:	6800      	ldr	r0, [r0, #0]
 8012398:	b350      	cbz	r0, 80123f0 <rcl_action_send_cancel_response+0x60>
 801239a:	460d      	mov	r5, r1
 801239c:	4616      	mov	r6, r2
 801239e:	f7fe f993 	bl	80106c8 <rcl_service_is_valid>
 80123a2:	b300      	cbz	r0, 80123e6 <rcl_action_send_cancel_response+0x56>
 80123a4:	6820      	ldr	r0, [r4, #0]
 80123a6:	3004      	adds	r0, #4
 80123a8:	f7fe f98e 	bl	80106c8 <rcl_service_is_valid>
 80123ac:	b1d8      	cbz	r0, 80123e6 <rcl_action_send_cancel_response+0x56>
 80123ae:	6820      	ldr	r0, [r4, #0]
 80123b0:	3008      	adds	r0, #8
 80123b2:	f7fe f989 	bl	80106c8 <rcl_service_is_valid>
 80123b6:	b1b0      	cbz	r0, 80123e6 <rcl_action_send_cancel_response+0x56>
 80123b8:	6820      	ldr	r0, [r4, #0]
 80123ba:	300c      	adds	r0, #12
 80123bc:	f7f7 fa32 	bl	8009824 <rcl_publisher_is_valid>
 80123c0:	b188      	cbz	r0, 80123e6 <rcl_action_send_cancel_response+0x56>
 80123c2:	6820      	ldr	r0, [r4, #0]
 80123c4:	3010      	adds	r0, #16
 80123c6:	f7f7 fa2d 	bl	8009824 <rcl_publisher_is_valid>
 80123ca:	b160      	cbz	r0, 80123e6 <rcl_action_send_cancel_response+0x56>
 80123cc:	b19d      	cbz	r5, 80123f6 <rcl_action_send_cancel_response+0x66>
 80123ce:	b196      	cbz	r6, 80123f6 <rcl_action_send_cancel_response+0x66>
 80123d0:	6820      	ldr	r0, [r4, #0]
 80123d2:	4632      	mov	r2, r6
 80123d4:	4629      	mov	r1, r5
 80123d6:	3004      	adds	r0, #4
 80123d8:	f7fe f95e 	bl	8010698 <rcl_send_response>
 80123dc:	b110      	cbz	r0, 80123e4 <rcl_action_send_cancel_response+0x54>
 80123de:	2802      	cmp	r0, #2
 80123e0:	bf18      	it	ne
 80123e2:	2001      	movne	r0, #1
 80123e4:	bd70      	pop	{r4, r5, r6, pc}
 80123e6:	f7f8 fa1b 	bl	800a820 <rcutils_reset_error>
 80123ea:	f640 0098 	movw	r0, #2200	@ 0x898
 80123ee:	bd70      	pop	{r4, r5, r6, pc}
 80123f0:	f640 0098 	movw	r0, #2200	@ 0x898
 80123f4:	bd70      	pop	{r4, r5, r6, pc}
 80123f6:	200b      	movs	r0, #11
 80123f8:	bd70      	pop	{r4, r5, r6, pc}
 80123fa:	f640 0098 	movw	r0, #2200	@ 0x898
 80123fe:	4770      	bx	lr

08012400 <rcl_action_wait_set_add_action_server>:
 8012400:	2800      	cmp	r0, #0
 8012402:	d04d      	beq.n	80124a0 <rcl_action_wait_set_add_action_server+0xa0>
 8012404:	b570      	push	{r4, r5, r6, lr}
 8012406:	460c      	mov	r4, r1
 8012408:	b159      	cbz	r1, 8012422 <rcl_action_wait_set_add_action_server+0x22>
 801240a:	4605      	mov	r5, r0
 801240c:	6808      	ldr	r0, [r1, #0]
 801240e:	b140      	cbz	r0, 8012422 <rcl_action_wait_set_add_action_server+0x22>
 8012410:	4616      	mov	r6, r2
 8012412:	f7fe f959 	bl	80106c8 <rcl_service_is_valid>
 8012416:	b120      	cbz	r0, 8012422 <rcl_action_wait_set_add_action_server+0x22>
 8012418:	6820      	ldr	r0, [r4, #0]
 801241a:	3004      	adds	r0, #4
 801241c:	f7fe f954 	bl	80106c8 <rcl_service_is_valid>
 8012420:	b910      	cbnz	r0, 8012428 <rcl_action_wait_set_add_action_server+0x28>
 8012422:	f640 0098 	movw	r0, #2200	@ 0x898
 8012426:	bd70      	pop	{r4, r5, r6, pc}
 8012428:	6820      	ldr	r0, [r4, #0]
 801242a:	3008      	adds	r0, #8
 801242c:	f7fe f94c 	bl	80106c8 <rcl_service_is_valid>
 8012430:	2800      	cmp	r0, #0
 8012432:	d0f6      	beq.n	8012422 <rcl_action_wait_set_add_action_server+0x22>
 8012434:	6820      	ldr	r0, [r4, #0]
 8012436:	300c      	adds	r0, #12
 8012438:	f7f7 fa0c 	bl	8009854 <rcl_publisher_is_valid_except_context>
 801243c:	2800      	cmp	r0, #0
 801243e:	d0f0      	beq.n	8012422 <rcl_action_wait_set_add_action_server+0x22>
 8012440:	6820      	ldr	r0, [r4, #0]
 8012442:	3010      	adds	r0, #16
 8012444:	f7f7 fa06 	bl	8009854 <rcl_publisher_is_valid_except_context>
 8012448:	2800      	cmp	r0, #0
 801244a:	d0ea      	beq.n	8012422 <rcl_action_wait_set_add_action_server+0x22>
 801244c:	6821      	ldr	r1, [r4, #0]
 801244e:	4628      	mov	r0, r5
 8012450:	f501 72ee 	add.w	r2, r1, #476	@ 0x1dc
 8012454:	f7ff face 	bl	80119f4 <rcl_wait_set_add_service>
 8012458:	2800      	cmp	r0, #0
 801245a:	d1e4      	bne.n	8012426 <rcl_action_wait_set_add_action_server+0x26>
 801245c:	6821      	ldr	r1, [r4, #0]
 801245e:	4628      	mov	r0, r5
 8012460:	f501 72f0 	add.w	r2, r1, #480	@ 0x1e0
 8012464:	3104      	adds	r1, #4
 8012466:	f7ff fac5 	bl	80119f4 <rcl_wait_set_add_service>
 801246a:	2800      	cmp	r0, #0
 801246c:	d1db      	bne.n	8012426 <rcl_action_wait_set_add_action_server+0x26>
 801246e:	6821      	ldr	r1, [r4, #0]
 8012470:	4628      	mov	r0, r5
 8012472:	f501 72f2 	add.w	r2, r1, #484	@ 0x1e4
 8012476:	3108      	adds	r1, #8
 8012478:	f7ff fabc 	bl	80119f4 <rcl_wait_set_add_service>
 801247c:	2800      	cmp	r0, #0
 801247e:	d1d2      	bne.n	8012426 <rcl_action_wait_set_add_action_server+0x26>
 8012480:	6821      	ldr	r1, [r4, #0]
 8012482:	4628      	mov	r0, r5
 8012484:	f501 72f4 	add.w	r2, r1, #488	@ 0x1e8
 8012488:	3114      	adds	r1, #20
 801248a:	f7ff fa57 	bl	801193c <rcl_wait_set_add_timer>
 801248e:	2800      	cmp	r0, #0
 8012490:	d1c9      	bne.n	8012426 <rcl_action_wait_set_add_action_server+0x26>
 8012492:	2e00      	cmp	r6, #0
 8012494:	d0c7      	beq.n	8012426 <rcl_action_wait_set_add_action_server+0x26>
 8012496:	6823      	ldr	r3, [r4, #0]
 8012498:	f8d3 31dc 	ldr.w	r3, [r3, #476]	@ 0x1dc
 801249c:	6033      	str	r3, [r6, #0]
 801249e:	bd70      	pop	{r4, r5, r6, pc}
 80124a0:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80124a4:	4770      	bx	lr
 80124a6:	bf00      	nop

080124a8 <rcl_action_server_wait_set_get_entities_ready>:
 80124a8:	2800      	cmp	r0, #0
 80124aa:	d05a      	beq.n	8012562 <rcl_action_server_wait_set_get_entities_ready+0xba>
 80124ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80124ae:	460c      	mov	r4, r1
 80124b0:	b161      	cbz	r1, 80124cc <rcl_action_server_wait_set_get_entities_ready+0x24>
 80124b2:	4605      	mov	r5, r0
 80124b4:	6808      	ldr	r0, [r1, #0]
 80124b6:	b148      	cbz	r0, 80124cc <rcl_action_server_wait_set_get_entities_ready+0x24>
 80124b8:	4616      	mov	r6, r2
 80124ba:	461f      	mov	r7, r3
 80124bc:	f7fe f904 	bl	80106c8 <rcl_service_is_valid>
 80124c0:	b120      	cbz	r0, 80124cc <rcl_action_server_wait_set_get_entities_ready+0x24>
 80124c2:	6820      	ldr	r0, [r4, #0]
 80124c4:	3004      	adds	r0, #4
 80124c6:	f7fe f8ff 	bl	80106c8 <rcl_service_is_valid>
 80124ca:	b910      	cbnz	r0, 80124d2 <rcl_action_server_wait_set_get_entities_ready+0x2a>
 80124cc:	f640 0098 	movw	r0, #2200	@ 0x898
 80124d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80124d2:	6820      	ldr	r0, [r4, #0]
 80124d4:	3008      	adds	r0, #8
 80124d6:	f7fe f8f7 	bl	80106c8 <rcl_service_is_valid>
 80124da:	2800      	cmp	r0, #0
 80124dc:	d0f6      	beq.n	80124cc <rcl_action_server_wait_set_get_entities_ready+0x24>
 80124de:	6820      	ldr	r0, [r4, #0]
 80124e0:	300c      	adds	r0, #12
 80124e2:	f7f7 f9b7 	bl	8009854 <rcl_publisher_is_valid_except_context>
 80124e6:	2800      	cmp	r0, #0
 80124e8:	d0f0      	beq.n	80124cc <rcl_action_server_wait_set_get_entities_ready+0x24>
 80124ea:	6820      	ldr	r0, [r4, #0]
 80124ec:	3010      	adds	r0, #16
 80124ee:	f7f7 f9b1 	bl	8009854 <rcl_publisher_is_valid_except_context>
 80124f2:	2800      	cmp	r0, #0
 80124f4:	d0ea      	beq.n	80124cc <rcl_action_server_wait_set_get_entities_ready+0x24>
 80124f6:	b3be      	cbz	r6, 8012568 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 80124f8:	b3b7      	cbz	r7, 8012568 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 80124fa:	9b06      	ldr	r3, [sp, #24]
 80124fc:	b3a3      	cbz	r3, 8012568 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 80124fe:	9b07      	ldr	r3, [sp, #28]
 8012500:	b393      	cbz	r3, 8012568 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8012502:	6821      	ldr	r1, [r4, #0]
 8012504:	692a      	ldr	r2, [r5, #16]
 8012506:	6a2c      	ldr	r4, [r5, #32]
 8012508:	f8d1 51e8 	ldr.w	r5, [r1, #488]	@ 0x1e8
 801250c:	f8d1 31e0 	ldr.w	r3, [r1, #480]	@ 0x1e0
 8012510:	f852 2025 	ldr.w	r2, [r2, r5, lsl #2]
 8012514:	f8d1 01e4 	ldr.w	r0, [r1, #484]	@ 0x1e4
 8012518:	f8d1 51dc 	ldr.w	r5, [r1, #476]	@ 0x1dc
 801251c:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 8012520:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8012524:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
 8012528:	1a64      	subs	r4, r4, r1
 801252a:	fab4 f484 	clz	r4, r4
 801252e:	0964      	lsrs	r4, r4, #5
 8012530:	7034      	strb	r4, [r6, #0]
 8012532:	1d0c      	adds	r4, r1, #4
 8012534:	1b1b      	subs	r3, r3, r4
 8012536:	fab3 f383 	clz	r3, r3
 801253a:	095b      	lsrs	r3, r3, #5
 801253c:	f101 0408 	add.w	r4, r1, #8
 8012540:	703b      	strb	r3, [r7, #0]
 8012542:	f101 0314 	add.w	r3, r1, #20
 8012546:	1b01      	subs	r1, r0, r4
 8012548:	1ad3      	subs	r3, r2, r3
 801254a:	fab1 f181 	clz	r1, r1
 801254e:	9a06      	ldr	r2, [sp, #24]
 8012550:	0949      	lsrs	r1, r1, #5
 8012552:	7011      	strb	r1, [r2, #0]
 8012554:	fab3 f383 	clz	r3, r3
 8012558:	9a07      	ldr	r2, [sp, #28]
 801255a:	095b      	lsrs	r3, r3, #5
 801255c:	2000      	movs	r0, #0
 801255e:	7013      	strb	r3, [r2, #0]
 8012560:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012562:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8012566:	4770      	bx	lr
 8012568:	200b      	movs	r0, #11
 801256a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801256c <_execute_event_handler>:
 801256c:	2002      	movs	r0, #2
 801256e:	4770      	bx	lr

08012570 <_cancel_goal_event_handler>:
 8012570:	2003      	movs	r0, #3
 8012572:	4770      	bx	lr

08012574 <_succeed_event_handler>:
 8012574:	2004      	movs	r0, #4
 8012576:	4770      	bx	lr

08012578 <_abort_event_handler>:
 8012578:	2006      	movs	r0, #6
 801257a:	4770      	bx	lr

0801257c <_canceled_event_handler>:
 801257c:	2005      	movs	r0, #5
 801257e:	4770      	bx	lr

08012580 <rcl_action_transition_goal_state>:
 8012580:	b2c2      	uxtb	r2, r0
 8012582:	2a06      	cmp	r2, #6
 8012584:	d80c      	bhi.n	80125a0 <rcl_action_transition_goal_state+0x20>
 8012586:	2904      	cmp	r1, #4
 8012588:	d80a      	bhi.n	80125a0 <rcl_action_transition_goal_state+0x20>
 801258a:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 801258e:	b410      	push	{r4}
 8012590:	1853      	adds	r3, r2, r1
 8012592:	4c06      	ldr	r4, [pc, #24]	@ (80125ac <rcl_action_transition_goal_state+0x2c>)
 8012594:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8012598:	b123      	cbz	r3, 80125a4 <rcl_action_transition_goal_state+0x24>
 801259a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801259e:	4718      	bx	r3
 80125a0:	2000      	movs	r0, #0
 80125a2:	4770      	bx	lr
 80125a4:	2000      	movs	r0, #0
 80125a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80125aa:	4770      	bx	lr
 80125ac:	08018e28 	.word	0x08018e28

080125b0 <rcl_action_get_zero_initialized_cancel_response>:
 80125b0:	b510      	push	{r4, lr}
 80125b2:	4c07      	ldr	r4, [pc, #28]	@ (80125d0 <rcl_action_get_zero_initialized_cancel_response+0x20>)
 80125b4:	4686      	mov	lr, r0
 80125b6:	4684      	mov	ip, r0
 80125b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80125ba:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80125be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80125c0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80125c4:	6823      	ldr	r3, [r4, #0]
 80125c6:	f8cc 3000 	str.w	r3, [ip]
 80125ca:	4670      	mov	r0, lr
 80125cc:	bd10      	pop	{r4, pc}
 80125ce:	bf00      	nop
 80125d0:	08018eb4 	.word	0x08018eb4

080125d4 <rclc_action_send_result_request>:
 80125d4:	b1d0      	cbz	r0, 801260c <rclc_action_send_result_request+0x38>
 80125d6:	b500      	push	{lr}
 80125d8:	4684      	mov	ip, r0
 80125da:	b087      	sub	sp, #28
 80125dc:	f8d0 0009 	ldr.w	r0, [r0, #9]
 80125e0:	f8dc 100d 	ldr.w	r1, [ip, #13]
 80125e4:	f8dc 2011 	ldr.w	r2, [ip, #17]
 80125e8:	f8dc 3015 	ldr.w	r3, [ip, #21]
 80125ec:	f10d 0e08 	add.w	lr, sp, #8
 80125f0:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80125f4:	f8dc 0004 	ldr.w	r0, [ip, #4]
 80125f8:	f10c 0240 	add.w	r2, ip, #64	@ 0x40
 80125fc:	a902      	add	r1, sp, #8
 80125fe:	3010      	adds	r0, #16
 8012600:	f7ff fbda 	bl	8011db8 <rcl_action_send_result_request>
 8012604:	b920      	cbnz	r0, 8012610 <rclc_action_send_result_request+0x3c>
 8012606:	b007      	add	sp, #28
 8012608:	f85d fb04 	ldr.w	pc, [sp], #4
 801260c:	200b      	movs	r0, #11
 801260e:	4770      	bx	lr
 8012610:	9001      	str	r0, [sp, #4]
 8012612:	f7f8 f905 	bl	800a820 <rcutils_reset_error>
 8012616:	9801      	ldr	r0, [sp, #4]
 8012618:	b007      	add	sp, #28
 801261a:	f85d fb04 	ldr.w	pc, [sp], #4
 801261e:	bf00      	nop

08012620 <rclc_action_take_goal_handle>:
 8012620:	b160      	cbz	r0, 801263c <rclc_action_take_goal_handle+0x1c>
 8012622:	6883      	ldr	r3, [r0, #8]
 8012624:	b143      	cbz	r3, 8012638 <rclc_action_take_goal_handle+0x18>
 8012626:	6819      	ldr	r1, [r3, #0]
 8012628:	6081      	str	r1, [r0, #8]
 801262a:	2200      	movs	r2, #0
 801262c:	721a      	strb	r2, [r3, #8]
 801262e:	68c1      	ldr	r1, [r0, #12]
 8012630:	6019      	str	r1, [r3, #0]
 8012632:	621a      	str	r2, [r3, #32]
 8012634:	849a      	strh	r2, [r3, #36]	@ 0x24
 8012636:	60c3      	str	r3, [r0, #12]
 8012638:	4618      	mov	r0, r3
 801263a:	4770      	bx	lr
 801263c:	4603      	mov	r3, r0
 801263e:	e7fb      	b.n	8012638 <rclc_action_take_goal_handle+0x18>

08012640 <rclc_action_remove_used_goal_handle>:
 8012640:	b180      	cbz	r0, 8012664 <rclc_action_remove_used_goal_handle+0x24>
 8012642:	b179      	cbz	r1, 8012664 <rclc_action_remove_used_goal_handle+0x24>
 8012644:	68c3      	ldr	r3, [r0, #12]
 8012646:	4299      	cmp	r1, r3
 8012648:	d00d      	beq.n	8012666 <rclc_action_remove_used_goal_handle+0x26>
 801264a:	b12b      	cbz	r3, 8012658 <rclc_action_remove_used_goal_handle+0x18>
 801264c:	681a      	ldr	r2, [r3, #0]
 801264e:	4291      	cmp	r1, r2
 8012650:	d003      	beq.n	801265a <rclc_action_remove_used_goal_handle+0x1a>
 8012652:	4613      	mov	r3, r2
 8012654:	2b00      	cmp	r3, #0
 8012656:	d1f9      	bne.n	801264c <rclc_action_remove_used_goal_handle+0xc>
 8012658:	4770      	bx	lr
 801265a:	680a      	ldr	r2, [r1, #0]
 801265c:	601a      	str	r2, [r3, #0]
 801265e:	6883      	ldr	r3, [r0, #8]
 8012660:	600b      	str	r3, [r1, #0]
 8012662:	6081      	str	r1, [r0, #8]
 8012664:	4770      	bx	lr
 8012666:	680b      	ldr	r3, [r1, #0]
 8012668:	60c3      	str	r3, [r0, #12]
 801266a:	e7f8      	b.n	801265e <rclc_action_remove_used_goal_handle+0x1e>

0801266c <rclc_action_find_goal_handle_by_uuid>:
 801266c:	b538      	push	{r3, r4, r5, lr}
 801266e:	b180      	cbz	r0, 8012692 <rclc_action_find_goal_handle_by_uuid+0x26>
 8012670:	460d      	mov	r5, r1
 8012672:	b181      	cbz	r1, 8012696 <rclc_action_find_goal_handle_by_uuid+0x2a>
 8012674:	68c4      	ldr	r4, [r0, #12]
 8012676:	b914      	cbnz	r4, 801267e <rclc_action_find_goal_handle_by_uuid+0x12>
 8012678:	e009      	b.n	801268e <rclc_action_find_goal_handle_by_uuid+0x22>
 801267a:	6824      	ldr	r4, [r4, #0]
 801267c:	b13c      	cbz	r4, 801268e <rclc_action_find_goal_handle_by_uuid+0x22>
 801267e:	f104 0009 	add.w	r0, r4, #9
 8012682:	2210      	movs	r2, #16
 8012684:	4629      	mov	r1, r5
 8012686:	f005 f90f 	bl	80178a8 <memcmp>
 801268a:	2800      	cmp	r0, #0
 801268c:	d1f5      	bne.n	801267a <rclc_action_find_goal_handle_by_uuid+0xe>
 801268e:	4620      	mov	r0, r4
 8012690:	bd38      	pop	{r3, r4, r5, pc}
 8012692:	4604      	mov	r4, r0
 8012694:	e7fb      	b.n	801268e <rclc_action_find_goal_handle_by_uuid+0x22>
 8012696:	460c      	mov	r4, r1
 8012698:	e7f9      	b.n	801268e <rclc_action_find_goal_handle_by_uuid+0x22>
 801269a:	bf00      	nop

0801269c <rclc_action_find_first_handle_by_status>:
 801269c:	b140      	cbz	r0, 80126b0 <rclc_action_find_first_handle_by_status+0x14>
 801269e:	68c0      	ldr	r0, [r0, #12]
 80126a0:	b910      	cbnz	r0, 80126a8 <rclc_action_find_first_handle_by_status+0xc>
 80126a2:	e005      	b.n	80126b0 <rclc_action_find_first_handle_by_status+0x14>
 80126a4:	6800      	ldr	r0, [r0, #0]
 80126a6:	b118      	cbz	r0, 80126b0 <rclc_action_find_first_handle_by_status+0x14>
 80126a8:	f990 3008 	ldrsb.w	r3, [r0, #8]
 80126ac:	428b      	cmp	r3, r1
 80126ae:	d1f9      	bne.n	80126a4 <rclc_action_find_first_handle_by_status+0x8>
 80126b0:	4770      	bx	lr
 80126b2:	bf00      	nop

080126b4 <rclc_action_find_first_terminated_handle>:
 80126b4:	b140      	cbz	r0, 80126c8 <rclc_action_find_first_terminated_handle+0x14>
 80126b6:	68c0      	ldr	r0, [r0, #12]
 80126b8:	b910      	cbnz	r0, 80126c0 <rclc_action_find_first_terminated_handle+0xc>
 80126ba:	e005      	b.n	80126c8 <rclc_action_find_first_terminated_handle+0x14>
 80126bc:	6800      	ldr	r0, [r0, #0]
 80126be:	b118      	cbz	r0, 80126c8 <rclc_action_find_first_terminated_handle+0x14>
 80126c0:	f990 3008 	ldrsb.w	r3, [r0, #8]
 80126c4:	2b03      	cmp	r3, #3
 80126c6:	ddf9      	ble.n	80126bc <rclc_action_find_first_terminated_handle+0x8>
 80126c8:	4770      	bx	lr
 80126ca:	bf00      	nop

080126cc <rclc_action_find_handle_by_goal_request_sequence_number>:
 80126cc:	b170      	cbz	r0, 80126ec <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 80126ce:	68c0      	ldr	r0, [r0, #12]
 80126d0:	b160      	cbz	r0, 80126ec <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 80126d2:	b410      	push	{r4}
 80126d4:	e001      	b.n	80126da <rclc_action_find_handle_by_goal_request_sequence_number+0xe>
 80126d6:	6800      	ldr	r0, [r0, #0]
 80126d8:	b128      	cbz	r0, 80126e6 <rclc_action_find_handle_by_goal_request_sequence_number+0x1a>
 80126da:	e9d0 410a 	ldrd	r4, r1, [r0, #40]	@ 0x28
 80126de:	4299      	cmp	r1, r3
 80126e0:	bf08      	it	eq
 80126e2:	4294      	cmpeq	r4, r2
 80126e4:	d1f7      	bne.n	80126d6 <rclc_action_find_handle_by_goal_request_sequence_number+0xa>
 80126e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80126ea:	4770      	bx	lr
 80126ec:	4770      	bx	lr
 80126ee:	bf00      	nop

080126f0 <rclc_action_find_handle_by_result_request_sequence_number>:
 80126f0:	b170      	cbz	r0, 8012710 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 80126f2:	68c0      	ldr	r0, [r0, #12]
 80126f4:	b160      	cbz	r0, 8012710 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 80126f6:	b410      	push	{r4}
 80126f8:	e001      	b.n	80126fe <rclc_action_find_handle_by_result_request_sequence_number+0xe>
 80126fa:	6800      	ldr	r0, [r0, #0]
 80126fc:	b128      	cbz	r0, 801270a <rclc_action_find_handle_by_result_request_sequence_number+0x1a>
 80126fe:	e9d0 4110 	ldrd	r4, r1, [r0, #64]	@ 0x40
 8012702:	4299      	cmp	r1, r3
 8012704:	bf08      	it	eq
 8012706:	4294      	cmpeq	r4, r2
 8012708:	d1f7      	bne.n	80126fa <rclc_action_find_handle_by_result_request_sequence_number+0xa>
 801270a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801270e:	4770      	bx	lr
 8012710:	4770      	bx	lr
 8012712:	bf00      	nop

08012714 <rclc_action_find_handle_by_cancel_request_sequence_number>:
 8012714:	b170      	cbz	r0, 8012734 <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 8012716:	68c0      	ldr	r0, [r0, #12]
 8012718:	b160      	cbz	r0, 8012734 <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 801271a:	b410      	push	{r4}
 801271c:	e001      	b.n	8012722 <rclc_action_find_handle_by_cancel_request_sequence_number+0xe>
 801271e:	6800      	ldr	r0, [r0, #0]
 8012720:	b128      	cbz	r0, 801272e <rclc_action_find_handle_by_cancel_request_sequence_number+0x1a>
 8012722:	e9d0 4116 	ldrd	r4, r1, [r0, #88]	@ 0x58
 8012726:	4299      	cmp	r1, r3
 8012728:	bf08      	it	eq
 801272a:	4294      	cmpeq	r4, r2
 801272c:	d1f7      	bne.n	801271e <rclc_action_find_handle_by_cancel_request_sequence_number+0xa>
 801272e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012732:	4770      	bx	lr
 8012734:	4770      	bx	lr
 8012736:	bf00      	nop

08012738 <rclc_action_find_first_handle_with_goal_response>:
 8012738:	b140      	cbz	r0, 801274c <rclc_action_find_first_handle_with_goal_response+0x14>
 801273a:	68c0      	ldr	r0, [r0, #12]
 801273c:	b910      	cbnz	r0, 8012744 <rclc_action_find_first_handle_with_goal_response+0xc>
 801273e:	e005      	b.n	801274c <rclc_action_find_first_handle_with_goal_response+0x14>
 8012740:	6800      	ldr	r0, [r0, #0]
 8012742:	b118      	cbz	r0, 801274c <rclc_action_find_first_handle_with_goal_response+0x14>
 8012744:	f890 3020 	ldrb.w	r3, [r0, #32]
 8012748:	2b00      	cmp	r3, #0
 801274a:	d0f9      	beq.n	8012740 <rclc_action_find_first_handle_with_goal_response+0x8>
 801274c:	4770      	bx	lr
 801274e:	bf00      	nop

08012750 <rclc_action_find_first_handle_with_result_response>:
 8012750:	b140      	cbz	r0, 8012764 <rclc_action_find_first_handle_with_result_response+0x14>
 8012752:	68c0      	ldr	r0, [r0, #12]
 8012754:	b910      	cbnz	r0, 801275c <rclc_action_find_first_handle_with_result_response+0xc>
 8012756:	e005      	b.n	8012764 <rclc_action_find_first_handle_with_result_response+0x14>
 8012758:	6800      	ldr	r0, [r0, #0]
 801275a:	b118      	cbz	r0, 8012764 <rclc_action_find_first_handle_with_result_response+0x14>
 801275c:	f890 3023 	ldrb.w	r3, [r0, #35]	@ 0x23
 8012760:	2b00      	cmp	r3, #0
 8012762:	d0f9      	beq.n	8012758 <rclc_action_find_first_handle_with_result_response+0x8>
 8012764:	4770      	bx	lr
 8012766:	bf00      	nop

08012768 <rclc_action_server_response_goal_request>:
 8012768:	b198      	cbz	r0, 8012792 <rclc_action_server_response_goal_request+0x2a>
 801276a:	b510      	push	{r4, lr}
 801276c:	6844      	ldr	r4, [r0, #4]
 801276e:	b086      	sub	sp, #24
 8012770:	2200      	movs	r2, #0
 8012772:	e9cd 2203 	strd	r2, r2, [sp, #12]
 8012776:	460b      	mov	r3, r1
 8012778:	9205      	str	r2, [sp, #20]
 801277a:	f100 0128 	add.w	r1, r0, #40	@ 0x28
 801277e:	aa03      	add	r2, sp, #12
 8012780:	f104 0010 	add.w	r0, r4, #16
 8012784:	f88d 300c 	strb.w	r3, [sp, #12]
 8012788:	f7ff fd4a 	bl	8012220 <rcl_action_send_goal_response>
 801278c:	b918      	cbnz	r0, 8012796 <rclc_action_server_response_goal_request+0x2e>
 801278e:	b006      	add	sp, #24
 8012790:	bd10      	pop	{r4, pc}
 8012792:	200b      	movs	r0, #11
 8012794:	4770      	bx	lr
 8012796:	9001      	str	r0, [sp, #4]
 8012798:	f7f8 f842 	bl	800a820 <rcutils_reset_error>
 801279c:	9801      	ldr	r0, [sp, #4]
 801279e:	b006      	add	sp, #24
 80127a0:	bd10      	pop	{r4, pc}
 80127a2:	bf00      	nop
 80127a4:	0000      	movs	r0, r0
	...

080127a8 <rclc_action_server_goal_cancel_accept>:
 80127a8:	b310      	cbz	r0, 80127f0 <rclc_action_server_goal_cancel_accept+0x48>
 80127aa:	b510      	push	{r4, lr}
 80127ac:	b090      	sub	sp, #64	@ 0x40
 80127ae:	4604      	mov	r4, r0
 80127b0:	a806      	add	r0, sp, #24
 80127b2:	f7ff fefd 	bl	80125b0 <rcl_action_get_zero_initialized_cancel_response>
 80127b6:	2300      	movs	r3, #0
 80127b8:	f8d4 0009 	ldr.w	r0, [r4, #9]
 80127bc:	f8d4 100d 	ldr.w	r1, [r4, #13]
 80127c0:	f8d4 2011 	ldr.w	r2, [r4, #17]
 80127c4:	f88d 3018 	strb.w	r3, [sp, #24]
 80127c8:	f8d4 3015 	ldr.w	r3, [r4, #21]
 80127cc:	f8cd d01c 	str.w	sp, [sp, #28]
 80127d0:	46ec      	mov	ip, sp
 80127d2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80127d6:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 80127f8 <rclc_action_server_goal_cancel_accept+0x50>
 80127da:	6860      	ldr	r0, [r4, #4]
 80127dc:	aa06      	add	r2, sp, #24
 80127de:	f104 0158 	add.w	r1, r4, #88	@ 0x58
 80127e2:	3010      	adds	r0, #16
 80127e4:	ed8d 7b08 	vstr	d7, [sp, #32]
 80127e8:	f7ff fdd2 	bl	8012390 <rcl_action_send_cancel_response>
 80127ec:	b010      	add	sp, #64	@ 0x40
 80127ee:	bd10      	pop	{r4, pc}
 80127f0:	200b      	movs	r0, #11
 80127f2:	4770      	bx	lr
 80127f4:	f3af 8000 	nop.w
 80127f8:	00000001 	.word	0x00000001
 80127fc:	00000001 	.word	0x00000001

08012800 <rclc_action_server_goal_cancel_reject>:
 8012800:	b082      	sub	sp, #8
 8012802:	b530      	push	{r4, r5, lr}
 8012804:	b08b      	sub	sp, #44	@ 0x2c
 8012806:	ac0e      	add	r4, sp, #56	@ 0x38
 8012808:	e884 000c 	stmia.w	r4, {r2, r3}
 801280c:	b188      	cbz	r0, 8012832 <rclc_action_server_goal_cancel_reject+0x32>
 801280e:	4604      	mov	r4, r0
 8012810:	a801      	add	r0, sp, #4
 8012812:	460d      	mov	r5, r1
 8012814:	f7ff fecc 	bl	80125b0 <rcl_action_get_zero_initialized_cancel_response>
 8012818:	aa01      	add	r2, sp, #4
 801281a:	a90e      	add	r1, sp, #56	@ 0x38
 801281c:	f104 0010 	add.w	r0, r4, #16
 8012820:	f88d 5004 	strb.w	r5, [sp, #4]
 8012824:	f7ff fdb4 	bl	8012390 <rcl_action_send_cancel_response>
 8012828:	b00b      	add	sp, #44	@ 0x2c
 801282a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801282e:	b002      	add	sp, #8
 8012830:	4770      	bx	lr
 8012832:	200b      	movs	r0, #11
 8012834:	b00b      	add	sp, #44	@ 0x2c
 8012836:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801283a:	b002      	add	sp, #8
 801283c:	4770      	bx	lr
 801283e:	bf00      	nop

08012840 <__atomic_load_8>:
 8012840:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 8012844:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 8012848:	4a15      	ldr	r2, [pc, #84]	@ (80128a0 <__atomic_load_8+0x60>)
 801284a:	4b16      	ldr	r3, [pc, #88]	@ (80128a4 <__atomic_load_8+0x64>)
 801284c:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8012850:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 8012854:	fb02 f101 	mul.w	r1, r2, r1
 8012858:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 801285c:	fba3 2301 	umull	r2, r3, r3, r1
 8012860:	091b      	lsrs	r3, r3, #4
 8012862:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8012866:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 801286a:	b4d0      	push	{r4, r6, r7}
 801286c:	4c0e      	ldr	r4, [pc, #56]	@ (80128a8 <__atomic_load_8+0x68>)
 801286e:	1ac9      	subs	r1, r1, r3
 8012870:	1862      	adds	r2, r4, r1
 8012872:	f04f 0c01 	mov.w	ip, #1
 8012876:	e8d2 3f4f 	ldrexb	r3, [r2]
 801287a:	e8c2 cf46 	strexb	r6, ip, [r2]
 801287e:	2e00      	cmp	r6, #0
 8012880:	d1f9      	bne.n	8012876 <__atomic_load_8+0x36>
 8012882:	f3bf 8f5b 	dmb	ish
 8012886:	b2db      	uxtb	r3, r3
 8012888:	2b00      	cmp	r3, #0
 801288a:	d1f4      	bne.n	8012876 <__atomic_load_8+0x36>
 801288c:	e9d0 6700 	ldrd	r6, r7, [r0]
 8012890:	f3bf 8f5b 	dmb	ish
 8012894:	5463      	strb	r3, [r4, r1]
 8012896:	4630      	mov	r0, r6
 8012898:	4639      	mov	r1, r7
 801289a:	bcd0      	pop	{r4, r6, r7}
 801289c:	4770      	bx	lr
 801289e:	bf00      	nop
 80128a0:	27d4eb2d 	.word	0x27d4eb2d
 80128a4:	b21642c9 	.word	0xb21642c9
 80128a8:	2000bfd0 	.word	0x2000bfd0

080128ac <__atomic_store_8>:
 80128ac:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 80128b0:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 80128b4:	b570      	push	{r4, r5, r6, lr}
 80128b6:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 80128ba:	4c14      	ldr	r4, [pc, #80]	@ (801290c <__atomic_store_8+0x60>)
 80128bc:	4d14      	ldr	r5, [pc, #80]	@ (8012910 <__atomic_store_8+0x64>)
 80128be:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 80128c2:	fb04 f101 	mul.w	r1, r4, r1
 80128c6:	4c13      	ldr	r4, [pc, #76]	@ (8012914 <__atomic_store_8+0x68>)
 80128c8:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 80128cc:	fba4 4e01 	umull	r4, lr, r4, r1
 80128d0:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
 80128d4:	eb0e 044e 	add.w	r4, lr, lr, lsl #1
 80128d8:	ebce 0ec4 	rsb	lr, lr, r4, lsl #3
 80128dc:	eba1 0e0e 	sub.w	lr, r1, lr
 80128e0:	eb05 0c0e 	add.w	ip, r5, lr
 80128e4:	f04f 0401 	mov.w	r4, #1
 80128e8:	e8dc 1f4f 	ldrexb	r1, [ip]
 80128ec:	e8cc 4f46 	strexb	r6, r4, [ip]
 80128f0:	2e00      	cmp	r6, #0
 80128f2:	d1f9      	bne.n	80128e8 <__atomic_store_8+0x3c>
 80128f4:	f3bf 8f5b 	dmb	ish
 80128f8:	b2c9      	uxtb	r1, r1
 80128fa:	2900      	cmp	r1, #0
 80128fc:	d1f4      	bne.n	80128e8 <__atomic_store_8+0x3c>
 80128fe:	e9c0 2300 	strd	r2, r3, [r0]
 8012902:	f3bf 8f5b 	dmb	ish
 8012906:	f805 100e 	strb.w	r1, [r5, lr]
 801290a:	bd70      	pop	{r4, r5, r6, pc}
 801290c:	27d4eb2d 	.word	0x27d4eb2d
 8012910:	2000bfd0 	.word	0x2000bfd0
 8012914:	b21642c9 	.word	0xb21642c9

08012918 <__atomic_exchange_8>:
 8012918:	ea80 4c10 	eor.w	ip, r0, r0, lsr #16
 801291c:	f08c 0c3d 	eor.w	ip, ip, #61	@ 0x3d
 8012920:	4916      	ldr	r1, [pc, #88]	@ (801297c <__atomic_exchange_8+0x64>)
 8012922:	eb0c 0ccc 	add.w	ip, ip, ip, lsl #3
 8012926:	ea8c 1c1c 	eor.w	ip, ip, ip, lsr #4
 801292a:	fb01 fc0c 	mul.w	ip, r1, ip
 801292e:	4914      	ldr	r1, [pc, #80]	@ (8012980 <__atomic_exchange_8+0x68>)
 8012930:	ea8c 3cdc 	eor.w	ip, ip, ip, lsr #15
 8012934:	b570      	push	{r4, r5, r6, lr}
 8012936:	4605      	mov	r5, r0
 8012938:	fba1 010c 	umull	r0, r1, r1, ip
 801293c:	0909      	lsrs	r1, r1, #4
 801293e:	eb01 0041 	add.w	r0, r1, r1, lsl #1
 8012942:	ebc1 01c0 	rsb	r1, r1, r0, lsl #3
 8012946:	4e0f      	ldr	r6, [pc, #60]	@ (8012984 <__atomic_exchange_8+0x6c>)
 8012948:	ebac 0c01 	sub.w	ip, ip, r1
 801294c:	eb06 010c 	add.w	r1, r6, ip
 8012950:	f04f 0e01 	mov.w	lr, #1
 8012954:	e8d1 4f4f 	ldrexb	r4, [r1]
 8012958:	e8c1 ef40 	strexb	r0, lr, [r1]
 801295c:	2800      	cmp	r0, #0
 801295e:	d1f9      	bne.n	8012954 <__atomic_exchange_8+0x3c>
 8012960:	f3bf 8f5b 	dmb	ish
 8012964:	b2e4      	uxtb	r4, r4
 8012966:	2c00      	cmp	r4, #0
 8012968:	d1f4      	bne.n	8012954 <__atomic_exchange_8+0x3c>
 801296a:	e9d5 0100 	ldrd	r0, r1, [r5]
 801296e:	e9c5 2300 	strd	r2, r3, [r5]
 8012972:	f3bf 8f5b 	dmb	ish
 8012976:	f806 400c 	strb.w	r4, [r6, ip]
 801297a:	bd70      	pop	{r4, r5, r6, pc}
 801297c:	27d4eb2d 	.word	0x27d4eb2d
 8012980:	b21642c9 	.word	0xb21642c9
 8012984:	2000bfd0 	.word	0x2000bfd0

08012988 <rcutils_get_env>:
 8012988:	b168      	cbz	r0, 80129a6 <rcutils_get_env+0x1e>
 801298a:	b510      	push	{r4, lr}
 801298c:	460c      	mov	r4, r1
 801298e:	b129      	cbz	r1, 801299c <rcutils_get_env+0x14>
 8012990:	f004 faf8 	bl	8016f84 <getenv>
 8012994:	b120      	cbz	r0, 80129a0 <rcutils_get_env+0x18>
 8012996:	6020      	str	r0, [r4, #0]
 8012998:	2000      	movs	r0, #0
 801299a:	bd10      	pop	{r4, pc}
 801299c:	4803      	ldr	r0, [pc, #12]	@ (80129ac <rcutils_get_env+0x24>)
 801299e:	bd10      	pop	{r4, pc}
 80129a0:	4b03      	ldr	r3, [pc, #12]	@ (80129b0 <rcutils_get_env+0x28>)
 80129a2:	6023      	str	r3, [r4, #0]
 80129a4:	bd10      	pop	{r4, pc}
 80129a6:	4803      	ldr	r0, [pc, #12]	@ (80129b4 <rcutils_get_env+0x2c>)
 80129a8:	4770      	bx	lr
 80129aa:	bf00      	nop
 80129ac:	08018ef4 	.word	0x08018ef4
 80129b0:	0801952c 	.word	0x0801952c
 80129b4:	08018ed8 	.word	0x08018ed8

080129b8 <rcutils_is_directory>:
 80129b8:	2000      	movs	r0, #0
 80129ba:	4770      	bx	lr

080129bc <rcutils_join_path>:
 80129bc:	b082      	sub	sp, #8
 80129be:	e88d 000c 	stmia.w	sp, {r2, r3}
 80129c2:	2000      	movs	r0, #0
 80129c4:	b002      	add	sp, #8
 80129c6:	4770      	bx	lr

080129c8 <rcutils_to_native_path>:
 80129c8:	b084      	sub	sp, #16
 80129ca:	a801      	add	r0, sp, #4
 80129cc:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 80129d0:	b004      	add	sp, #16
 80129d2:	2000      	movs	r0, #0
 80129d4:	4770      	bx	lr
 80129d6:	bf00      	nop

080129d8 <rcutils_format_string_limit>:
 80129d8:	b40f      	push	{r0, r1, r2, r3}
 80129da:	b5f0      	push	{r4, r5, r6, r7, lr}
 80129dc:	b083      	sub	sp, #12
 80129de:	ac08      	add	r4, sp, #32
 80129e0:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 80129e2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80129e6:	b34e      	cbz	r6, 8012a3c <rcutils_format_string_limit+0x64>
 80129e8:	a808      	add	r0, sp, #32
 80129ea:	f7f7 fef5 	bl	800a7d8 <rcutils_allocator_is_valid>
 80129ee:	b328      	cbz	r0, 8012a3c <rcutils_format_string_limit+0x64>
 80129f0:	2100      	movs	r1, #0
 80129f2:	ab0f      	add	r3, sp, #60	@ 0x3c
 80129f4:	4632      	mov	r2, r6
 80129f6:	4608      	mov	r0, r1
 80129f8:	e9cd 3300 	strd	r3, r3, [sp]
 80129fc:	f000 f8f4 	bl	8012be8 <rcutils_vsnprintf>
 8012a00:	1c43      	adds	r3, r0, #1
 8012a02:	4605      	mov	r5, r0
 8012a04:	d01a      	beq.n	8012a3c <rcutils_format_string_limit+0x64>
 8012a06:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8012a08:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8012a0a:	1c47      	adds	r7, r0, #1
 8012a0c:	429f      	cmp	r7, r3
 8012a0e:	bf84      	itt	hi
 8012a10:	461f      	movhi	r7, r3
 8012a12:	f103 35ff 	addhi.w	r5, r3, #4294967295	@ 0xffffffff
 8012a16:	4638      	mov	r0, r7
 8012a18:	9b08      	ldr	r3, [sp, #32]
 8012a1a:	4798      	blx	r3
 8012a1c:	4604      	mov	r4, r0
 8012a1e:	b168      	cbz	r0, 8012a3c <rcutils_format_string_limit+0x64>
 8012a20:	9b01      	ldr	r3, [sp, #4]
 8012a22:	4632      	mov	r2, r6
 8012a24:	4639      	mov	r1, r7
 8012a26:	f000 f8df 	bl	8012be8 <rcutils_vsnprintf>
 8012a2a:	2800      	cmp	r0, #0
 8012a2c:	db02      	blt.n	8012a34 <rcutils_format_string_limit+0x5c>
 8012a2e:	2300      	movs	r3, #0
 8012a30:	5563      	strb	r3, [r4, r5]
 8012a32:	e004      	b.n	8012a3e <rcutils_format_string_limit+0x66>
 8012a34:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012a36:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8012a38:	4620      	mov	r0, r4
 8012a3a:	4798      	blx	r3
 8012a3c:	2400      	movs	r4, #0
 8012a3e:	4620      	mov	r0, r4
 8012a40:	b003      	add	sp, #12
 8012a42:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8012a46:	b004      	add	sp, #16
 8012a48:	4770      	bx	lr
 8012a4a:	bf00      	nop

08012a4c <rcutils_repl_str>:
 8012a4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012a50:	ed2d 8b02 	vpush	{d8}
 8012a54:	b087      	sub	sp, #28
 8012a56:	4680      	mov	r8, r0
 8012a58:	4608      	mov	r0, r1
 8012a5a:	f8cd 8004 	str.w	r8, [sp, #4]
 8012a5e:	ee08 2a10 	vmov	s16, r2
 8012a62:	468a      	mov	sl, r1
 8012a64:	4699      	mov	r9, r3
 8012a66:	f7ed fbbd 	bl	80001e4 <strlen>
 8012a6a:	2600      	movs	r6, #0
 8012a6c:	4647      	mov	r7, r8
 8012a6e:	9002      	str	r0, [sp, #8]
 8012a70:	46b3      	mov	fp, r6
 8012a72:	2510      	movs	r5, #16
 8012a74:	46b0      	mov	r8, r6
 8012a76:	e01d      	b.n	8012ab4 <rcutils_repl_str+0x68>
 8012a78:	f10b 0b01 	add.w	fp, fp, #1
 8012a7c:	455e      	cmp	r6, fp
 8012a7e:	d211      	bcs.n	8012aa4 <rcutils_repl_str+0x58>
 8012a80:	442e      	add	r6, r5
 8012a82:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8012a86:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8012a8a:	00b1      	lsls	r1, r6, #2
 8012a8c:	4798      	blx	r3
 8012a8e:	2800      	cmp	r0, #0
 8012a90:	f000 8088 	beq.w	8012ba4 <rcutils_repl_str+0x158>
 8012a94:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012a98:	f5b5 1f80 	cmp.w	r5, #1048576	@ 0x100000
 8012a9c:	4680      	mov	r8, r0
 8012a9e:	bf28      	it	cs
 8012aa0:	f44f 1580 	movcs.w	r5, #1048576	@ 0x100000
 8012aa4:	9a01      	ldr	r2, [sp, #4]
 8012aa6:	eb08 038b 	add.w	r3, r8, fp, lsl #2
 8012aaa:	1aa2      	subs	r2, r4, r2
 8012aac:	f843 2c04 	str.w	r2, [r3, #-4]
 8012ab0:	9b02      	ldr	r3, [sp, #8]
 8012ab2:	18e7      	adds	r7, r4, r3
 8012ab4:	4651      	mov	r1, sl
 8012ab6:	4638      	mov	r0, r7
 8012ab8:	f004 ff47 	bl	801794a <strstr>
 8012abc:	4604      	mov	r4, r0
 8012abe:	4640      	mov	r0, r8
 8012ac0:	2c00      	cmp	r4, #0
 8012ac2:	d1d9      	bne.n	8012a78 <rcutils_repl_str+0x2c>
 8012ac4:	46b8      	mov	r8, r7
 8012ac6:	4607      	mov	r7, r0
 8012ac8:	4640      	mov	r0, r8
 8012aca:	f7ed fb8b 	bl	80001e4 <strlen>
 8012ace:	9b01      	ldr	r3, [sp, #4]
 8012ad0:	eba8 0303 	sub.w	r3, r8, r3
 8012ad4:	181c      	adds	r4, r3, r0
 8012ad6:	9404      	str	r4, [sp, #16]
 8012ad8:	f1bb 0f00 	cmp.w	fp, #0
 8012adc:	d04a      	beq.n	8012b74 <rcutils_repl_str+0x128>
 8012ade:	ee18 0a10 	vmov	r0, s16
 8012ae2:	f7ed fb7f 	bl	80001e4 <strlen>
 8012ae6:	9b02      	ldr	r3, [sp, #8]
 8012ae8:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8012aec:	1ac3      	subs	r3, r0, r3
 8012aee:	fb0b 4303 	mla	r3, fp, r3, r4
 8012af2:	461a      	mov	r2, r3
 8012af4:	9305      	str	r3, [sp, #20]
 8012af6:	4606      	mov	r6, r0
 8012af8:	f8d9 3000 	ldr.w	r3, [r9]
 8012afc:	1c50      	adds	r0, r2, #1
 8012afe:	4798      	blx	r3
 8012b00:	9003      	str	r0, [sp, #12]
 8012b02:	2800      	cmp	r0, #0
 8012b04:	d04f      	beq.n	8012ba6 <rcutils_repl_str+0x15a>
 8012b06:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8012b0a:	683a      	ldr	r2, [r7, #0]
 8012b0c:	4641      	mov	r1, r8
 8012b0e:	f005 f814 	bl	8017b3a <memcpy>
 8012b12:	683d      	ldr	r5, [r7, #0]
 8012b14:	9b03      	ldr	r3, [sp, #12]
 8012b16:	9701      	str	r7, [sp, #4]
 8012b18:	46ba      	mov	sl, r7
 8012b1a:	441d      	add	r5, r3
 8012b1c:	9f02      	ldr	r7, [sp, #8]
 8012b1e:	f8cd 9008 	str.w	r9, [sp, #8]
 8012b22:	2401      	movs	r4, #1
 8012b24:	46d1      	mov	r9, sl
 8012b26:	ee18 aa10 	vmov	sl, s16
 8012b2a:	e00a      	b.n	8012b42 <rcutils_repl_str+0xf6>
 8012b2c:	f8d9 5000 	ldr.w	r5, [r9]
 8012b30:	1aaa      	subs	r2, r5, r2
 8012b32:	1885      	adds	r5, r0, r2
 8012b34:	f005 f801 	bl	8017b3a <memcpy>
 8012b38:	45a3      	cmp	fp, r4
 8012b3a:	f104 0201 	add.w	r2, r4, #1
 8012b3e:	d935      	bls.n	8012bac <rcutils_repl_str+0x160>
 8012b40:	4614      	mov	r4, r2
 8012b42:	4632      	mov	r2, r6
 8012b44:	4651      	mov	r1, sl
 8012b46:	4628      	mov	r0, r5
 8012b48:	f004 fff7 	bl	8017b3a <memcpy>
 8012b4c:	f859 2b04 	ldr.w	r2, [r9], #4
 8012b50:	45a3      	cmp	fp, r4
 8012b52:	443a      	add	r2, r7
 8012b54:	eb05 0006 	add.w	r0, r5, r6
 8012b58:	eb08 0102 	add.w	r1, r8, r2
 8012b5c:	d1e6      	bne.n	8012b2c <rcutils_repl_str+0xe0>
 8012b5e:	9b04      	ldr	r3, [sp, #16]
 8012b60:	1a9a      	subs	r2, r3, r2
 8012b62:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 8012b66:	f004 ffe8 	bl	8017b3a <memcpy>
 8012b6a:	9a03      	ldr	r2, [sp, #12]
 8012b6c:	9905      	ldr	r1, [sp, #20]
 8012b6e:	2300      	movs	r3, #0
 8012b70:	5453      	strb	r3, [r2, r1]
 8012b72:	e00b      	b.n	8012b8c <rcutils_repl_str+0x140>
 8012b74:	4620      	mov	r0, r4
 8012b76:	f8d9 3000 	ldr.w	r3, [r9]
 8012b7a:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8012b7e:	3001      	adds	r0, #1
 8012b80:	4798      	blx	r3
 8012b82:	9003      	str	r0, [sp, #12]
 8012b84:	b110      	cbz	r0, 8012b8c <rcutils_repl_str+0x140>
 8012b86:	9901      	ldr	r1, [sp, #4]
 8012b88:	f004 ffcf 	bl	8017b2a <strcpy>
 8012b8c:	4638      	mov	r0, r7
 8012b8e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8012b92:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8012b96:	4798      	blx	r3
 8012b98:	9803      	ldr	r0, [sp, #12]
 8012b9a:	b007      	add	sp, #28
 8012b9c:	ecbd 8b02 	vpop	{d8}
 8012ba0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012ba4:	4647      	mov	r7, r8
 8012ba6:	2300      	movs	r3, #0
 8012ba8:	9303      	str	r3, [sp, #12]
 8012baa:	e7ef      	b.n	8012b8c <rcutils_repl_str+0x140>
 8012bac:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 8012bb0:	e7db      	b.n	8012b6a <rcutils_repl_str+0x11e>
 8012bb2:	bf00      	nop

08012bb4 <rcutils_snprintf>:
 8012bb4:	b40c      	push	{r2, r3}
 8012bb6:	b530      	push	{r4, r5, lr}
 8012bb8:	b083      	sub	sp, #12
 8012bba:	ab06      	add	r3, sp, #24
 8012bbc:	f853 2b04 	ldr.w	r2, [r3], #4
 8012bc0:	9301      	str	r3, [sp, #4]
 8012bc2:	b152      	cbz	r2, 8012bda <rcutils_snprintf+0x26>
 8012bc4:	b138      	cbz	r0, 8012bd6 <rcutils_snprintf+0x22>
 8012bc6:	b141      	cbz	r1, 8012bda <rcutils_snprintf+0x26>
 8012bc8:	f004 fdcc 	bl	8017764 <vsniprintf>
 8012bcc:	b003      	add	sp, #12
 8012bce:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012bd2:	b002      	add	sp, #8
 8012bd4:	4770      	bx	lr
 8012bd6:	2900      	cmp	r1, #0
 8012bd8:	d0f6      	beq.n	8012bc8 <rcutils_snprintf+0x14>
 8012bda:	f004 ff79 	bl	8017ad0 <__errno>
 8012bde:	2316      	movs	r3, #22
 8012be0:	6003      	str	r3, [r0, #0]
 8012be2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012be6:	e7f1      	b.n	8012bcc <rcutils_snprintf+0x18>

08012be8 <rcutils_vsnprintf>:
 8012be8:	b570      	push	{r4, r5, r6, lr}
 8012bea:	b13a      	cbz	r2, 8012bfc <rcutils_vsnprintf+0x14>
 8012bec:	b120      	cbz	r0, 8012bf8 <rcutils_vsnprintf+0x10>
 8012bee:	b129      	cbz	r1, 8012bfc <rcutils_vsnprintf+0x14>
 8012bf0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012bf4:	f004 bdb6 	b.w	8017764 <vsniprintf>
 8012bf8:	2900      	cmp	r1, #0
 8012bfa:	d0f9      	beq.n	8012bf0 <rcutils_vsnprintf+0x8>
 8012bfc:	f004 ff68 	bl	8017ad0 <__errno>
 8012c00:	2316      	movs	r3, #22
 8012c02:	6003      	str	r3, [r0, #0]
 8012c04:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012c08:	bd70      	pop	{r4, r5, r6, pc}
 8012c0a:	bf00      	nop

08012c0c <rcutils_strdup>:
 8012c0c:	b084      	sub	sp, #16
 8012c0e:	b570      	push	{r4, r5, r6, lr}
 8012c10:	b082      	sub	sp, #8
 8012c12:	ac07      	add	r4, sp, #28
 8012c14:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 8012c18:	4605      	mov	r5, r0
 8012c1a:	b1b0      	cbz	r0, 8012c4a <rcutils_strdup+0x3e>
 8012c1c:	f7ed fae2 	bl	80001e4 <strlen>
 8012c20:	1c42      	adds	r2, r0, #1
 8012c22:	9b07      	ldr	r3, [sp, #28]
 8012c24:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8012c26:	9201      	str	r2, [sp, #4]
 8012c28:	4606      	mov	r6, r0
 8012c2a:	4610      	mov	r0, r2
 8012c2c:	4798      	blx	r3
 8012c2e:	4604      	mov	r4, r0
 8012c30:	b128      	cbz	r0, 8012c3e <rcutils_strdup+0x32>
 8012c32:	9a01      	ldr	r2, [sp, #4]
 8012c34:	4629      	mov	r1, r5
 8012c36:	f004 ff80 	bl	8017b3a <memcpy>
 8012c3a:	2300      	movs	r3, #0
 8012c3c:	55a3      	strb	r3, [r4, r6]
 8012c3e:	4620      	mov	r0, r4
 8012c40:	b002      	add	sp, #8
 8012c42:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012c46:	b004      	add	sp, #16
 8012c48:	4770      	bx	lr
 8012c4a:	4604      	mov	r4, r0
 8012c4c:	e7f7      	b.n	8012c3e <rcutils_strdup+0x32>
 8012c4e:	bf00      	nop

08012c50 <rcutils_strndup>:
 8012c50:	b082      	sub	sp, #8
 8012c52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012c54:	ac06      	add	r4, sp, #24
 8012c56:	e884 000c 	stmia.w	r4, {r2, r3}
 8012c5a:	4605      	mov	r5, r0
 8012c5c:	b188      	cbz	r0, 8012c82 <rcutils_strndup+0x32>
 8012c5e:	1c4f      	adds	r7, r1, #1
 8012c60:	460e      	mov	r6, r1
 8012c62:	4638      	mov	r0, r7
 8012c64:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8012c66:	4790      	blx	r2
 8012c68:	4604      	mov	r4, r0
 8012c6a:	b128      	cbz	r0, 8012c78 <rcutils_strndup+0x28>
 8012c6c:	463a      	mov	r2, r7
 8012c6e:	4629      	mov	r1, r5
 8012c70:	f004 ff63 	bl	8017b3a <memcpy>
 8012c74:	2300      	movs	r3, #0
 8012c76:	55a3      	strb	r3, [r4, r6]
 8012c78:	4620      	mov	r0, r4
 8012c7a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8012c7e:	b002      	add	sp, #8
 8012c80:	4770      	bx	lr
 8012c82:	4604      	mov	r4, r0
 8012c84:	e7f8      	b.n	8012c78 <rcutils_strndup+0x28>
 8012c86:	bf00      	nop

08012c88 <rcutils_get_zero_initialized_string_map>:
 8012c88:	4b01      	ldr	r3, [pc, #4]	@ (8012c90 <rcutils_get_zero_initialized_string_map+0x8>)
 8012c8a:	2000      	movs	r0, #0
 8012c8c:	6018      	str	r0, [r3, #0]
 8012c8e:	4770      	bx	lr
 8012c90:	2000bfe8 	.word	0x2000bfe8

08012c94 <rcutils_string_map_reserve>:
 8012c94:	2800      	cmp	r0, #0
 8012c96:	d05f      	beq.n	8012d58 <rcutils_string_map_reserve+0xc4>
 8012c98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012c9c:	460c      	mov	r4, r1
 8012c9e:	6801      	ldr	r1, [r0, #0]
 8012ca0:	b082      	sub	sp, #8
 8012ca2:	4605      	mov	r5, r0
 8012ca4:	b129      	cbz	r1, 8012cb2 <rcutils_string_map_reserve+0x1e>
 8012ca6:	68cb      	ldr	r3, [r1, #12]
 8012ca8:	42a3      	cmp	r3, r4
 8012caa:	d906      	bls.n	8012cba <rcutils_string_map_reserve+0x26>
 8012cac:	461c      	mov	r4, r3
 8012cae:	2900      	cmp	r1, #0
 8012cb0:	d1f9      	bne.n	8012ca6 <rcutils_string_map_reserve+0x12>
 8012cb2:	201f      	movs	r0, #31
 8012cb4:	b002      	add	sp, #8
 8012cb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012cba:	688b      	ldr	r3, [r1, #8]
 8012cbc:	42a3      	cmp	r3, r4
 8012cbe:	d047      	beq.n	8012d50 <rcutils_string_map_reserve+0xbc>
 8012cc0:	6a0e      	ldr	r6, [r1, #32]
 8012cc2:	2c00      	cmp	r4, #0
 8012cc4:	d034      	beq.n	8012d30 <rcutils_string_map_reserve+0x9c>
 8012cc6:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 8012cca:	d243      	bcs.n	8012d54 <rcutils_string_map_reserve+0xc0>
 8012ccc:	00a7      	lsls	r7, r4, #2
 8012cce:	f8d1 8018 	ldr.w	r8, [r1, #24]
 8012cd2:	6808      	ldr	r0, [r1, #0]
 8012cd4:	4632      	mov	r2, r6
 8012cd6:	4639      	mov	r1, r7
 8012cd8:	47c0      	blx	r8
 8012cda:	2800      	cmp	r0, #0
 8012cdc:	d03a      	beq.n	8012d54 <rcutils_string_map_reserve+0xc0>
 8012cde:	682b      	ldr	r3, [r5, #0]
 8012ce0:	4632      	mov	r2, r6
 8012ce2:	6018      	str	r0, [r3, #0]
 8012ce4:	4639      	mov	r1, r7
 8012ce6:	6858      	ldr	r0, [r3, #4]
 8012ce8:	47c0      	blx	r8
 8012cea:	2800      	cmp	r0, #0
 8012cec:	d032      	beq.n	8012d54 <rcutils_string_map_reserve+0xc0>
 8012cee:	682d      	ldr	r5, [r5, #0]
 8012cf0:	68ab      	ldr	r3, [r5, #8]
 8012cf2:	6068      	str	r0, [r5, #4]
 8012cf4:	42a3      	cmp	r3, r4
 8012cf6:	d226      	bcs.n	8012d46 <rcutils_string_map_reserve+0xb2>
 8012cf8:	682a      	ldr	r2, [r5, #0]
 8012cfa:	eb00 0c07 	add.w	ip, r0, r7
 8012cfe:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
 8012d02:	45e6      	cmp	lr, ip
 8012d04:	ea4f 0183 	mov.w	r1, r3, lsl #2
 8012d08:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 8012d0c:	d203      	bcs.n	8012d16 <rcutils_string_map_reserve+0x82>
 8012d0e:	eb02 0c07 	add.w	ip, r2, r7
 8012d12:	4566      	cmp	r6, ip
 8012d14:	d322      	bcc.n	8012d5c <rcutils_string_map_reserve+0xc8>
 8012d16:	1ae3      	subs	r3, r4, r3
 8012d18:	009a      	lsls	r2, r3, #2
 8012d1a:	4670      	mov	r0, lr
 8012d1c:	2100      	movs	r1, #0
 8012d1e:	9201      	str	r2, [sp, #4]
 8012d20:	f004 fdec 	bl	80178fc <memset>
 8012d24:	9a01      	ldr	r2, [sp, #4]
 8012d26:	2100      	movs	r1, #0
 8012d28:	4630      	mov	r0, r6
 8012d2a:	f004 fde7 	bl	80178fc <memset>
 8012d2e:	e00a      	b.n	8012d46 <rcutils_string_map_reserve+0xb2>
 8012d30:	694f      	ldr	r7, [r1, #20]
 8012d32:	6808      	ldr	r0, [r1, #0]
 8012d34:	4631      	mov	r1, r6
 8012d36:	47b8      	blx	r7
 8012d38:	682b      	ldr	r3, [r5, #0]
 8012d3a:	4631      	mov	r1, r6
 8012d3c:	6858      	ldr	r0, [r3, #4]
 8012d3e:	601c      	str	r4, [r3, #0]
 8012d40:	47b8      	blx	r7
 8012d42:	682d      	ldr	r5, [r5, #0]
 8012d44:	606c      	str	r4, [r5, #4]
 8012d46:	2000      	movs	r0, #0
 8012d48:	60ac      	str	r4, [r5, #8]
 8012d4a:	b002      	add	sp, #8
 8012d4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012d50:	2000      	movs	r0, #0
 8012d52:	e7af      	b.n	8012cb4 <rcutils_string_map_reserve+0x20>
 8012d54:	200a      	movs	r0, #10
 8012d56:	e7ad      	b.n	8012cb4 <rcutils_string_map_reserve+0x20>
 8012d58:	200b      	movs	r0, #11
 8012d5a:	4770      	bx	lr
 8012d5c:	1f0b      	subs	r3, r1, #4
 8012d5e:	4418      	add	r0, r3
 8012d60:	4413      	add	r3, r2
 8012d62:	3a04      	subs	r2, #4
 8012d64:	4417      	add	r7, r2
 8012d66:	2200      	movs	r2, #0
 8012d68:	f843 2f04 	str.w	r2, [r3, #4]!
 8012d6c:	42bb      	cmp	r3, r7
 8012d6e:	f840 2f04 	str.w	r2, [r0, #4]!
 8012d72:	d1f9      	bne.n	8012d68 <rcutils_string_map_reserve+0xd4>
 8012d74:	e7e7      	b.n	8012d46 <rcutils_string_map_reserve+0xb2>
 8012d76:	bf00      	nop

08012d78 <rcutils_string_map_init>:
 8012d78:	b082      	sub	sp, #8
 8012d7a:	b570      	push	{r4, r5, r6, lr}
 8012d7c:	ac04      	add	r4, sp, #16
 8012d7e:	e884 000c 	stmia.w	r4, {r2, r3}
 8012d82:	b380      	cbz	r0, 8012de6 <rcutils_string_map_init+0x6e>
 8012d84:	6806      	ldr	r6, [r0, #0]
 8012d86:	4604      	mov	r4, r0
 8012d88:	b12e      	cbz	r6, 8012d96 <rcutils_string_map_init+0x1e>
 8012d8a:	251e      	movs	r5, #30
 8012d8c:	4628      	mov	r0, r5
 8012d8e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012d92:	b002      	add	sp, #8
 8012d94:	4770      	bx	lr
 8012d96:	a804      	add	r0, sp, #16
 8012d98:	460d      	mov	r5, r1
 8012d9a:	f7f7 fd1d 	bl	800a7d8 <rcutils_allocator_is_valid>
 8012d9e:	b310      	cbz	r0, 8012de6 <rcutils_string_map_init+0x6e>
 8012da0:	9b04      	ldr	r3, [sp, #16]
 8012da2:	9908      	ldr	r1, [sp, #32]
 8012da4:	2024      	movs	r0, #36	@ 0x24
 8012da6:	4798      	blx	r3
 8012da8:	6020      	str	r0, [r4, #0]
 8012daa:	b310      	cbz	r0, 8012df2 <rcutils_string_map_init+0x7a>
 8012dac:	f10d 0e10 	add.w	lr, sp, #16
 8012db0:	e9c0 6600 	strd	r6, r6, [r0]
 8012db4:	e9c0 6602 	strd	r6, r6, [r0, #8]
 8012db8:	f100 0c10 	add.w	ip, r0, #16
 8012dbc:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012dc0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012dc4:	f8de 3000 	ldr.w	r3, [lr]
 8012dc8:	f8cc 3000 	str.w	r3, [ip]
 8012dcc:	4629      	mov	r1, r5
 8012dce:	4620      	mov	r0, r4
 8012dd0:	f7ff ff60 	bl	8012c94 <rcutils_string_map_reserve>
 8012dd4:	4605      	mov	r5, r0
 8012dd6:	2800      	cmp	r0, #0
 8012dd8:	d0d8      	beq.n	8012d8c <rcutils_string_map_init+0x14>
 8012dda:	9b05      	ldr	r3, [sp, #20]
 8012ddc:	9908      	ldr	r1, [sp, #32]
 8012dde:	6820      	ldr	r0, [r4, #0]
 8012de0:	4798      	blx	r3
 8012de2:	6026      	str	r6, [r4, #0]
 8012de4:	e7d2      	b.n	8012d8c <rcutils_string_map_init+0x14>
 8012de6:	250b      	movs	r5, #11
 8012de8:	4628      	mov	r0, r5
 8012dea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012dee:	b002      	add	sp, #8
 8012df0:	4770      	bx	lr
 8012df2:	250a      	movs	r5, #10
 8012df4:	e7ca      	b.n	8012d8c <rcutils_string_map_init+0x14>
 8012df6:	bf00      	nop

08012df8 <rcutils_string_map_fini>:
 8012df8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012dfc:	b082      	sub	sp, #8
 8012dfe:	2800      	cmp	r0, #0
 8012e00:	d03a      	beq.n	8012e78 <rcutils_string_map_fini+0x80>
 8012e02:	6804      	ldr	r4, [r0, #0]
 8012e04:	4606      	mov	r6, r0
 8012e06:	2c00      	cmp	r4, #0
 8012e08:	d032      	beq.n	8012e70 <rcutils_string_map_fini+0x78>
 8012e0a:	68a3      	ldr	r3, [r4, #8]
 8012e0c:	b32b      	cbz	r3, 8012e5a <rcutils_string_map_fini+0x62>
 8012e0e:	2500      	movs	r5, #0
 8012e10:	6822      	ldr	r2, [r4, #0]
 8012e12:	462f      	mov	r7, r5
 8012e14:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8012e18:	b1e0      	cbz	r0, 8012e54 <rcutils_string_map_fini+0x5c>
 8012e1a:	6a21      	ldr	r1, [r4, #32]
 8012e1c:	f8d4 8014 	ldr.w	r8, [r4, #20]
 8012e20:	9101      	str	r1, [sp, #4]
 8012e22:	47c0      	blx	r8
 8012e24:	e9d4 2300 	ldrd	r2, r3, [r4]
 8012e28:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 8012e2c:	9901      	ldr	r1, [sp, #4]
 8012e2e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8012e32:	47c0      	blx	r8
 8012e34:	68e3      	ldr	r3, [r4, #12]
 8012e36:	6862      	ldr	r2, [r4, #4]
 8012e38:	3b01      	subs	r3, #1
 8012e3a:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 8012e3e:	60e3      	str	r3, [r4, #12]
 8012e40:	6834      	ldr	r4, [r6, #0]
 8012e42:	68a3      	ldr	r3, [r4, #8]
 8012e44:	3501      	adds	r5, #1
 8012e46:	429d      	cmp	r5, r3
 8012e48:	d207      	bcs.n	8012e5a <rcutils_string_map_fini+0x62>
 8012e4a:	6822      	ldr	r2, [r4, #0]
 8012e4c:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8012e50:	2800      	cmp	r0, #0
 8012e52:	d1e2      	bne.n	8012e1a <rcutils_string_map_fini+0x22>
 8012e54:	3501      	adds	r5, #1
 8012e56:	429d      	cmp	r5, r3
 8012e58:	d3dc      	bcc.n	8012e14 <rcutils_string_map_fini+0x1c>
 8012e5a:	2100      	movs	r1, #0
 8012e5c:	4630      	mov	r0, r6
 8012e5e:	f7ff ff19 	bl	8012c94 <rcutils_string_map_reserve>
 8012e62:	4604      	mov	r4, r0
 8012e64:	b920      	cbnz	r0, 8012e70 <rcutils_string_map_fini+0x78>
 8012e66:	6830      	ldr	r0, [r6, #0]
 8012e68:	6943      	ldr	r3, [r0, #20]
 8012e6a:	6a01      	ldr	r1, [r0, #32]
 8012e6c:	4798      	blx	r3
 8012e6e:	6034      	str	r4, [r6, #0]
 8012e70:	4620      	mov	r0, r4
 8012e72:	b002      	add	sp, #8
 8012e74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012e78:	240b      	movs	r4, #11
 8012e7a:	4620      	mov	r0, r4
 8012e7c:	b002      	add	sp, #8
 8012e7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012e82:	bf00      	nop

08012e84 <rcutils_string_map_getn>:
 8012e84:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012e88:	b300      	cbz	r0, 8012ecc <rcutils_string_map_getn+0x48>
 8012e8a:	6807      	ldr	r7, [r0, #0]
 8012e8c:	b1ff      	cbz	r7, 8012ece <rcutils_string_map_getn+0x4a>
 8012e8e:	4688      	mov	r8, r1
 8012e90:	b1e1      	cbz	r1, 8012ecc <rcutils_string_map_getn+0x48>
 8012e92:	f8d7 a008 	ldr.w	sl, [r7, #8]
 8012e96:	683e      	ldr	r6, [r7, #0]
 8012e98:	f1ba 0f00 	cmp.w	sl, #0
 8012e9c:	d016      	beq.n	8012ecc <rcutils_string_map_getn+0x48>
 8012e9e:	4691      	mov	r9, r2
 8012ea0:	3e04      	subs	r6, #4
 8012ea2:	2400      	movs	r4, #0
 8012ea4:	f856 5f04 	ldr.w	r5, [r6, #4]!
 8012ea8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8012eac:	4628      	mov	r0, r5
 8012eae:	3401      	adds	r4, #1
 8012eb0:	b155      	cbz	r5, 8012ec8 <rcutils_string_map_getn+0x44>
 8012eb2:	f7ed f997 	bl	80001e4 <strlen>
 8012eb6:	4548      	cmp	r0, r9
 8012eb8:	4602      	mov	r2, r0
 8012eba:	4629      	mov	r1, r5
 8012ebc:	bf38      	it	cc
 8012ebe:	464a      	movcc	r2, r9
 8012ec0:	4640      	mov	r0, r8
 8012ec2:	f004 fd30 	bl	8017926 <strncmp>
 8012ec6:	b128      	cbz	r0, 8012ed4 <rcutils_string_map_getn+0x50>
 8012ec8:	45a2      	cmp	sl, r4
 8012eca:	d1eb      	bne.n	8012ea4 <rcutils_string_map_getn+0x20>
 8012ecc:	2700      	movs	r7, #0
 8012ece:	4638      	mov	r0, r7
 8012ed0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012ed4:	687b      	ldr	r3, [r7, #4]
 8012ed6:	f853 700b 	ldr.w	r7, [r3, fp]
 8012eda:	4638      	mov	r0, r7
 8012edc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012ee0 <rmw_get_zero_initialized_context>:
 8012ee0:	b510      	push	{r4, lr}
 8012ee2:	4604      	mov	r4, r0
 8012ee4:	3010      	adds	r0, #16
 8012ee6:	f000 f80b 	bl	8012f00 <rmw_get_zero_initialized_init_options>
 8012eea:	2300      	movs	r3, #0
 8012eec:	2000      	movs	r0, #0
 8012eee:	2100      	movs	r1, #0
 8012ef0:	e9c4 0100 	strd	r0, r1, [r4]
 8012ef4:	e9c4 3312 	strd	r3, r3, [r4, #72]	@ 0x48
 8012ef8:	60a3      	str	r3, [r4, #8]
 8012efa:	4620      	mov	r0, r4
 8012efc:	bd10      	pop	{r4, pc}
 8012efe:	bf00      	nop

08012f00 <rmw_get_zero_initialized_init_options>:
 8012f00:	b510      	push	{r4, lr}
 8012f02:	2238      	movs	r2, #56	@ 0x38
 8012f04:	4604      	mov	r4, r0
 8012f06:	2100      	movs	r1, #0
 8012f08:	f004 fcf8 	bl	80178fc <memset>
 8012f0c:	f104 0010 	add.w	r0, r4, #16
 8012f10:	f000 f806 	bl	8012f20 <rmw_get_default_security_options>
 8012f14:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8012f18:	60e3      	str	r3, [r4, #12]
 8012f1a:	4620      	mov	r0, r4
 8012f1c:	bd10      	pop	{r4, pc}
 8012f1e:	bf00      	nop

08012f20 <rmw_get_default_security_options>:
 8012f20:	2200      	movs	r2, #0
 8012f22:	7002      	strb	r2, [r0, #0]
 8012f24:	6042      	str	r2, [r0, #4]
 8012f26:	4770      	bx	lr

08012f28 <rmw_subscription_content_filter_options_fini>:
 8012f28:	b1b0      	cbz	r0, 8012f58 <rmw_subscription_content_filter_options_fini+0x30>
 8012f2a:	b538      	push	{r3, r4, r5, lr}
 8012f2c:	4604      	mov	r4, r0
 8012f2e:	4608      	mov	r0, r1
 8012f30:	460d      	mov	r5, r1
 8012f32:	f7f7 fc51 	bl	800a7d8 <rcutils_allocator_is_valid>
 8012f36:	b168      	cbz	r0, 8012f54 <rmw_subscription_content_filter_options_fini+0x2c>
 8012f38:	6820      	ldr	r0, [r4, #0]
 8012f3a:	b120      	cbz	r0, 8012f46 <rmw_subscription_content_filter_options_fini+0x1e>
 8012f3c:	686b      	ldr	r3, [r5, #4]
 8012f3e:	6929      	ldr	r1, [r5, #16]
 8012f40:	4798      	blx	r3
 8012f42:	2300      	movs	r3, #0
 8012f44:	6023      	str	r3, [r4, #0]
 8012f46:	1d20      	adds	r0, r4, #4
 8012f48:	f003 fe48 	bl	8016bdc <rcutils_string_array_fini>
 8012f4c:	3800      	subs	r0, #0
 8012f4e:	bf18      	it	ne
 8012f50:	2001      	movne	r0, #1
 8012f52:	bd38      	pop	{r3, r4, r5, pc}
 8012f54:	200b      	movs	r0, #11
 8012f56:	bd38      	pop	{r3, r4, r5, pc}
 8012f58:	200b      	movs	r0, #11
 8012f5a:	4770      	bx	lr

08012f5c <rmw_get_default_subscription_options>:
 8012f5c:	2200      	movs	r2, #0
 8012f5e:	e9c0 2200 	strd	r2, r2, [r0]
 8012f62:	6082      	str	r2, [r0, #8]
 8012f64:	4770      	bx	lr
 8012f66:	bf00      	nop

08012f68 <rmw_time_equal>:
 8012f68:	b4f0      	push	{r4, r5, r6, r7}
 8012f6a:	b084      	sub	sp, #16
 8012f6c:	ac04      	add	r4, sp, #16
 8012f6e:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 8012f72:	4603      	mov	r3, r0
 8012f74:	4924      	ldr	r1, [pc, #144]	@ (8013008 <rmw_time_equal+0xa0>)
 8012f76:	9e03      	ldr	r6, [sp, #12]
 8012f78:	e9dd 5001 	ldrd	r5, r0, [sp, #4]
 8012f7c:	2202      	movs	r2, #2
 8012f7e:	4299      	cmp	r1, r3
 8012f80:	41aa      	sbcs	r2, r5
 8012f82:	d330      	bcc.n	8012fe6 <rmw_time_equal+0x7e>
 8012f84:	4c21      	ldr	r4, [pc, #132]	@ (801300c <rmw_time_equal+0xa4>)
 8012f86:	fba3 3204 	umull	r3, r2, r3, r4
 8012f8a:	fb04 2205 	mla	r2, r4, r5, r2
 8012f8e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8012f92:	43dd      	mvns	r5, r3
 8012f94:	1a8c      	subs	r4, r1, r2
 8012f96:	4285      	cmp	r5, r0
 8012f98:	41b4      	sbcs	r4, r6
 8012f9a:	d332      	bcc.n	8013002 <rmw_time_equal+0x9a>
 8012f9c:	eb10 0c03 	adds.w	ip, r0, r3
 8012fa0:	eb42 0106 	adc.w	r1, r2, r6
 8012fa4:	e9dd 3608 	ldrd	r3, r6, [sp, #32]
 8012fa8:	4817      	ldr	r0, [pc, #92]	@ (8013008 <rmw_time_equal+0xa0>)
 8012faa:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8012fac:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8012fae:	2202      	movs	r2, #2
 8012fb0:	4298      	cmp	r0, r3
 8012fb2:	41b2      	sbcs	r2, r6
 8012fb4:	d31c      	bcc.n	8012ff0 <rmw_time_equal+0x88>
 8012fb6:	4c15      	ldr	r4, [pc, #84]	@ (801300c <rmw_time_equal+0xa4>)
 8012fb8:	fba3 3204 	umull	r3, r2, r3, r4
 8012fbc:	fb04 2206 	mla	r2, r4, r6, r2
 8012fc0:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 8012fc4:	43de      	mvns	r6, r3
 8012fc6:	1a84      	subs	r4, r0, r2
 8012fc8:	42ae      	cmp	r6, r5
 8012fca:	41bc      	sbcs	r4, r7
 8012fcc:	d315      	bcc.n	8012ffa <rmw_time_equal+0x92>
 8012fce:	195b      	adds	r3, r3, r5
 8012fd0:	eb42 0207 	adc.w	r2, r2, r7
 8012fd4:	428a      	cmp	r2, r1
 8012fd6:	bf08      	it	eq
 8012fd8:	4563      	cmpeq	r3, ip
 8012fda:	bf0c      	ite	eq
 8012fdc:	2001      	moveq	r0, #1
 8012fde:	2000      	movne	r0, #0
 8012fe0:	b004      	add	sp, #16
 8012fe2:	bcf0      	pop	{r4, r5, r6, r7}
 8012fe4:	4770      	bx	lr
 8012fe6:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8012fea:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8012fee:	e7d9      	b.n	8012fa4 <rmw_time_equal+0x3c>
 8012ff0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8012ff4:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8012ff8:	e7ec      	b.n	8012fd4 <rmw_time_equal+0x6c>
 8012ffa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8012ffe:	4602      	mov	r2, r0
 8013000:	e7e8      	b.n	8012fd4 <rmw_time_equal+0x6c>
 8013002:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8013006:	e7cd      	b.n	8012fa4 <rmw_time_equal+0x3c>
 8013008:	25c17d04 	.word	0x25c17d04
 801300c:	3b9aca00 	.word	0x3b9aca00

08013010 <rmw_time_total_nsec>:
 8013010:	b470      	push	{r4, r5, r6}
 8013012:	b085      	sub	sp, #20
 8013014:	ac04      	add	r4, sp, #16
 8013016:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 801301a:	4603      	mov	r3, r0
 801301c:	4912      	ldr	r1, [pc, #72]	@ (8013068 <rmw_time_total_nsec+0x58>)
 801301e:	9e03      	ldr	r6, [sp, #12]
 8013020:	e9dd 5001 	ldrd	r5, r0, [sp, #4]
 8013024:	2202      	movs	r2, #2
 8013026:	4299      	cmp	r1, r3
 8013028:	41aa      	sbcs	r2, r5
 801302a:	d311      	bcc.n	8013050 <rmw_time_total_nsec+0x40>
 801302c:	4c0f      	ldr	r4, [pc, #60]	@ (801306c <rmw_time_total_nsec+0x5c>)
 801302e:	fba3 3204 	umull	r3, r2, r3, r4
 8013032:	fb04 2205 	mla	r2, r4, r5, r2
 8013036:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801303a:	43dd      	mvns	r5, r3
 801303c:	1a8c      	subs	r4, r1, r2
 801303e:	4285      	cmp	r5, r0
 8013040:	41b4      	sbcs	r4, r6
 8013042:	d30c      	bcc.n	801305e <rmw_time_total_nsec+0x4e>
 8013044:	1818      	adds	r0, r3, r0
 8013046:	eb42 0106 	adc.w	r1, r2, r6
 801304a:	b005      	add	sp, #20
 801304c:	bc70      	pop	{r4, r5, r6}
 801304e:	4770      	bx	lr
 8013050:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8013054:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8013058:	b005      	add	sp, #20
 801305a:	bc70      	pop	{r4, r5, r6}
 801305c:	4770      	bx	lr
 801305e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8013062:	b005      	add	sp, #20
 8013064:	bc70      	pop	{r4, r5, r6}
 8013066:	4770      	bx	lr
 8013068:	25c17d04 	.word	0x25c17d04
 801306c:	3b9aca00 	.word	0x3b9aca00

08013070 <rmw_get_zero_initialized_message_info>:
 8013070:	b510      	push	{r4, lr}
 8013072:	2240      	movs	r2, #64	@ 0x40
 8013074:	4604      	mov	r4, r0
 8013076:	2100      	movs	r1, #0
 8013078:	f004 fc40 	bl	80178fc <memset>
 801307c:	4620      	mov	r0, r4
 801307e:	bd10      	pop	{r4, pc}

08013080 <rmw_validate_full_topic_name>:
 8013080:	2800      	cmp	r0, #0
 8013082:	d057      	beq.n	8013134 <rmw_validate_full_topic_name+0xb4>
 8013084:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013088:	460d      	mov	r5, r1
 801308a:	2900      	cmp	r1, #0
 801308c:	d054      	beq.n	8013138 <rmw_validate_full_topic_name+0xb8>
 801308e:	4616      	mov	r6, r2
 8013090:	4604      	mov	r4, r0
 8013092:	f7ed f8a7 	bl	80001e4 <strlen>
 8013096:	b148      	cbz	r0, 80130ac <rmw_validate_full_topic_name+0x2c>
 8013098:	7823      	ldrb	r3, [r4, #0]
 801309a:	2b2f      	cmp	r3, #47	@ 0x2f
 801309c:	d00d      	beq.n	80130ba <rmw_validate_full_topic_name+0x3a>
 801309e:	2302      	movs	r3, #2
 80130a0:	602b      	str	r3, [r5, #0]
 80130a2:	b13e      	cbz	r6, 80130b4 <rmw_validate_full_topic_name+0x34>
 80130a4:	2000      	movs	r0, #0
 80130a6:	6030      	str	r0, [r6, #0]
 80130a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80130ac:	2301      	movs	r3, #1
 80130ae:	602b      	str	r3, [r5, #0]
 80130b0:	2e00      	cmp	r6, #0
 80130b2:	d1f7      	bne.n	80130a4 <rmw_validate_full_topic_name+0x24>
 80130b4:	2000      	movs	r0, #0
 80130b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80130ba:	1e43      	subs	r3, r0, #1
 80130bc:	5ce2      	ldrb	r2, [r4, r3]
 80130be:	2a2f      	cmp	r2, #47	@ 0x2f
 80130c0:	d03c      	beq.n	801313c <rmw_validate_full_topic_name+0xbc>
 80130c2:	1e63      	subs	r3, r4, #1
 80130c4:	eb03 0800 	add.w	r8, r3, r0
 80130c8:	f1c4 0e01 	rsb	lr, r4, #1
 80130cc:	eb0e 0703 	add.w	r7, lr, r3
 80130d0:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 80130d4:	f021 0220 	bic.w	r2, r1, #32
 80130d8:	3a41      	subs	r2, #65	@ 0x41
 80130da:	2a19      	cmp	r2, #25
 80130dc:	f1a1 0c2f 	sub.w	ip, r1, #47	@ 0x2f
 80130e0:	d90b      	bls.n	80130fa <rmw_validate_full_topic_name+0x7a>
 80130e2:	295f      	cmp	r1, #95	@ 0x5f
 80130e4:	d009      	beq.n	80130fa <rmw_validate_full_topic_name+0x7a>
 80130e6:	f1bc 0f0a 	cmp.w	ip, #10
 80130ea:	d906      	bls.n	80130fa <rmw_validate_full_topic_name+0x7a>
 80130ec:	2304      	movs	r3, #4
 80130ee:	602b      	str	r3, [r5, #0]
 80130f0:	2e00      	cmp	r6, #0
 80130f2:	d0df      	beq.n	80130b4 <rmw_validate_full_topic_name+0x34>
 80130f4:	6037      	str	r7, [r6, #0]
 80130f6:	2000      	movs	r0, #0
 80130f8:	e7d6      	b.n	80130a8 <rmw_validate_full_topic_name+0x28>
 80130fa:	4543      	cmp	r3, r8
 80130fc:	d1e6      	bne.n	80130cc <rmw_validate_full_topic_name+0x4c>
 80130fe:	4f1a      	ldr	r7, [pc, #104]	@ (8013168 <rmw_validate_full_topic_name+0xe8>)
 8013100:	2301      	movs	r3, #1
 8013102:	e004      	b.n	801310e <rmw_validate_full_topic_name+0x8e>
 8013104:	4298      	cmp	r0, r3
 8013106:	f104 0401 	add.w	r4, r4, #1
 801310a:	d91c      	bls.n	8013146 <rmw_validate_full_topic_name+0xc6>
 801310c:	4613      	mov	r3, r2
 801310e:	4298      	cmp	r0, r3
 8013110:	f103 0201 	add.w	r2, r3, #1
 8013114:	d0f6      	beq.n	8013104 <rmw_validate_full_topic_name+0x84>
 8013116:	7821      	ldrb	r1, [r4, #0]
 8013118:	292f      	cmp	r1, #47	@ 0x2f
 801311a:	d1f3      	bne.n	8013104 <rmw_validate_full_topic_name+0x84>
 801311c:	7861      	ldrb	r1, [r4, #1]
 801311e:	292f      	cmp	r1, #47	@ 0x2f
 8013120:	d01c      	beq.n	801315c <rmw_validate_full_topic_name+0xdc>
 8013122:	5dc9      	ldrb	r1, [r1, r7]
 8013124:	0749      	lsls	r1, r1, #29
 8013126:	d5ed      	bpl.n	8013104 <rmw_validate_full_topic_name+0x84>
 8013128:	2206      	movs	r2, #6
 801312a:	602a      	str	r2, [r5, #0]
 801312c:	2e00      	cmp	r6, #0
 801312e:	d0c1      	beq.n	80130b4 <rmw_validate_full_topic_name+0x34>
 8013130:	6033      	str	r3, [r6, #0]
 8013132:	e7bf      	b.n	80130b4 <rmw_validate_full_topic_name+0x34>
 8013134:	200b      	movs	r0, #11
 8013136:	4770      	bx	lr
 8013138:	200b      	movs	r0, #11
 801313a:	e7b5      	b.n	80130a8 <rmw_validate_full_topic_name+0x28>
 801313c:	2203      	movs	r2, #3
 801313e:	602a      	str	r2, [r5, #0]
 8013140:	2e00      	cmp	r6, #0
 8013142:	d1f5      	bne.n	8013130 <rmw_validate_full_topic_name+0xb0>
 8013144:	e7b6      	b.n	80130b4 <rmw_validate_full_topic_name+0x34>
 8013146:	28f7      	cmp	r0, #247	@ 0xf7
 8013148:	d802      	bhi.n	8013150 <rmw_validate_full_topic_name+0xd0>
 801314a:	2000      	movs	r0, #0
 801314c:	6028      	str	r0, [r5, #0]
 801314e:	e7ab      	b.n	80130a8 <rmw_validate_full_topic_name+0x28>
 8013150:	2307      	movs	r3, #7
 8013152:	602b      	str	r3, [r5, #0]
 8013154:	2e00      	cmp	r6, #0
 8013156:	d0ad      	beq.n	80130b4 <rmw_validate_full_topic_name+0x34>
 8013158:	23f6      	movs	r3, #246	@ 0xf6
 801315a:	e7e9      	b.n	8013130 <rmw_validate_full_topic_name+0xb0>
 801315c:	2205      	movs	r2, #5
 801315e:	602a      	str	r2, [r5, #0]
 8013160:	2e00      	cmp	r6, #0
 8013162:	d1e5      	bne.n	8013130 <rmw_validate_full_topic_name+0xb0>
 8013164:	e7a6      	b.n	80130b4 <rmw_validate_full_topic_name+0x34>
 8013166:	bf00      	nop
 8013168:	08019642 	.word	0x08019642

0801316c <rmw_validate_namespace_with_size>:
 801316c:	b340      	cbz	r0, 80131c0 <rmw_validate_namespace_with_size+0x54>
 801316e:	b570      	push	{r4, r5, r6, lr}
 8013170:	4614      	mov	r4, r2
 8013172:	b0c2      	sub	sp, #264	@ 0x108
 8013174:	b332      	cbz	r2, 80131c4 <rmw_validate_namespace_with_size+0x58>
 8013176:	2901      	cmp	r1, #1
 8013178:	460d      	mov	r5, r1
 801317a:	461e      	mov	r6, r3
 801317c:	d102      	bne.n	8013184 <rmw_validate_namespace_with_size+0x18>
 801317e:	7803      	ldrb	r3, [r0, #0]
 8013180:	2b2f      	cmp	r3, #47	@ 0x2f
 8013182:	d012      	beq.n	80131aa <rmw_validate_namespace_with_size+0x3e>
 8013184:	aa01      	add	r2, sp, #4
 8013186:	4669      	mov	r1, sp
 8013188:	f7ff ff7a 	bl	8013080 <rmw_validate_full_topic_name>
 801318c:	b978      	cbnz	r0, 80131ae <rmw_validate_namespace_with_size+0x42>
 801318e:	9b00      	ldr	r3, [sp, #0]
 8013190:	b14b      	cbz	r3, 80131a6 <rmw_validate_namespace_with_size+0x3a>
 8013192:	2b07      	cmp	r3, #7
 8013194:	d007      	beq.n	80131a6 <rmw_validate_namespace_with_size+0x3a>
 8013196:	1e5a      	subs	r2, r3, #1
 8013198:	2a05      	cmp	r2, #5
 801319a:	d82b      	bhi.n	80131f4 <rmw_validate_namespace_with_size+0x88>
 801319c:	e8df f002 	tbb	[pc, r2]
 80131a0:	1e212427 	.word	0x1e212427
 80131a4:	141b      	.short	0x141b
 80131a6:	2df5      	cmp	r5, #245	@ 0xf5
 80131a8:	d803      	bhi.n	80131b2 <rmw_validate_namespace_with_size+0x46>
 80131aa:	2000      	movs	r0, #0
 80131ac:	6020      	str	r0, [r4, #0]
 80131ae:	b042      	add	sp, #264	@ 0x108
 80131b0:	bd70      	pop	{r4, r5, r6, pc}
 80131b2:	2307      	movs	r3, #7
 80131b4:	6023      	str	r3, [r4, #0]
 80131b6:	2e00      	cmp	r6, #0
 80131b8:	d0f9      	beq.n	80131ae <rmw_validate_namespace_with_size+0x42>
 80131ba:	23f4      	movs	r3, #244	@ 0xf4
 80131bc:	6033      	str	r3, [r6, #0]
 80131be:	e7f6      	b.n	80131ae <rmw_validate_namespace_with_size+0x42>
 80131c0:	200b      	movs	r0, #11
 80131c2:	4770      	bx	lr
 80131c4:	200b      	movs	r0, #11
 80131c6:	e7f2      	b.n	80131ae <rmw_validate_namespace_with_size+0x42>
 80131c8:	2306      	movs	r3, #6
 80131ca:	6023      	str	r3, [r4, #0]
 80131cc:	2e00      	cmp	r6, #0
 80131ce:	d0ee      	beq.n	80131ae <rmw_validate_namespace_with_size+0x42>
 80131d0:	9b01      	ldr	r3, [sp, #4]
 80131d2:	6033      	str	r3, [r6, #0]
 80131d4:	e7eb      	b.n	80131ae <rmw_validate_namespace_with_size+0x42>
 80131d6:	2305      	movs	r3, #5
 80131d8:	6023      	str	r3, [r4, #0]
 80131da:	e7f7      	b.n	80131cc <rmw_validate_namespace_with_size+0x60>
 80131dc:	2304      	movs	r3, #4
 80131de:	6023      	str	r3, [r4, #0]
 80131e0:	e7f4      	b.n	80131cc <rmw_validate_namespace_with_size+0x60>
 80131e2:	2303      	movs	r3, #3
 80131e4:	6023      	str	r3, [r4, #0]
 80131e6:	e7f1      	b.n	80131cc <rmw_validate_namespace_with_size+0x60>
 80131e8:	2302      	movs	r3, #2
 80131ea:	6023      	str	r3, [r4, #0]
 80131ec:	e7ee      	b.n	80131cc <rmw_validate_namespace_with_size+0x60>
 80131ee:	2301      	movs	r3, #1
 80131f0:	6023      	str	r3, [r4, #0]
 80131f2:	e7eb      	b.n	80131cc <rmw_validate_namespace_with_size+0x60>
 80131f4:	4a03      	ldr	r2, [pc, #12]	@ (8013204 <rmw_validate_namespace_with_size+0x98>)
 80131f6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80131fa:	a802      	add	r0, sp, #8
 80131fc:	f7ff fcda 	bl	8012bb4 <rcutils_snprintf>
 8013200:	2001      	movs	r0, #1
 8013202:	e7d4      	b.n	80131ae <rmw_validate_namespace_with_size+0x42>
 8013204:	08018f10 	.word	0x08018f10

08013208 <rmw_validate_namespace>:
 8013208:	b168      	cbz	r0, 8013226 <rmw_validate_namespace+0x1e>
 801320a:	b570      	push	{r4, r5, r6, lr}
 801320c:	460d      	mov	r5, r1
 801320e:	4616      	mov	r6, r2
 8013210:	4604      	mov	r4, r0
 8013212:	f7ec ffe7 	bl	80001e4 <strlen>
 8013216:	4633      	mov	r3, r6
 8013218:	4601      	mov	r1, r0
 801321a:	462a      	mov	r2, r5
 801321c:	4620      	mov	r0, r4
 801321e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013222:	f7ff bfa3 	b.w	801316c <rmw_validate_namespace_with_size>
 8013226:	200b      	movs	r0, #11
 8013228:	4770      	bx	lr
 801322a:	bf00      	nop

0801322c <rmw_namespace_validation_result_string>:
 801322c:	2807      	cmp	r0, #7
 801322e:	bf9a      	itte	ls
 8013230:	4b02      	ldrls	r3, [pc, #8]	@ (801323c <rmw_namespace_validation_result_string+0x10>)
 8013232:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 8013236:	4802      	ldrhi	r0, [pc, #8]	@ (8013240 <rmw_namespace_validation_result_string+0x14>)
 8013238:	4770      	bx	lr
 801323a:	bf00      	nop
 801323c:	08019108 	.word	0x08019108
 8013240:	08018f60 	.word	0x08018f60

08013244 <rmw_validate_node_name>:
 8013244:	2800      	cmp	r0, #0
 8013246:	d03b      	beq.n	80132c0 <rmw_validate_node_name+0x7c>
 8013248:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801324c:	460d      	mov	r5, r1
 801324e:	2900      	cmp	r1, #0
 8013250:	d038      	beq.n	80132c4 <rmw_validate_node_name+0x80>
 8013252:	4616      	mov	r6, r2
 8013254:	4604      	mov	r4, r0
 8013256:	f7ec ffc5 	bl	80001e4 <strlen>
 801325a:	b1e0      	cbz	r0, 8013296 <rmw_validate_node_name+0x52>
 801325c:	1e63      	subs	r3, r4, #1
 801325e:	eb03 0800 	add.w	r8, r3, r0
 8013262:	f1c4 0101 	rsb	r1, r4, #1
 8013266:	18cf      	adds	r7, r1, r3
 8013268:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 801326c:	f1ae 0230 	sub.w	r2, lr, #48	@ 0x30
 8013270:	f02e 0c20 	bic.w	ip, lr, #32
 8013274:	2a09      	cmp	r2, #9
 8013276:	f1ac 0c41 	sub.w	ip, ip, #65	@ 0x41
 801327a:	d914      	bls.n	80132a6 <rmw_validate_node_name+0x62>
 801327c:	f1bc 0f19 	cmp.w	ip, #25
 8013280:	d911      	bls.n	80132a6 <rmw_validate_node_name+0x62>
 8013282:	f1be 0f5f 	cmp.w	lr, #95	@ 0x5f
 8013286:	d00e      	beq.n	80132a6 <rmw_validate_node_name+0x62>
 8013288:	2302      	movs	r3, #2
 801328a:	602b      	str	r3, [r5, #0]
 801328c:	b106      	cbz	r6, 8013290 <rmw_validate_node_name+0x4c>
 801328e:	6037      	str	r7, [r6, #0]
 8013290:	2000      	movs	r0, #0
 8013292:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013296:	2301      	movs	r3, #1
 8013298:	602b      	str	r3, [r5, #0]
 801329a:	2e00      	cmp	r6, #0
 801329c:	d0f8      	beq.n	8013290 <rmw_validate_node_name+0x4c>
 801329e:	2000      	movs	r0, #0
 80132a0:	6030      	str	r0, [r6, #0]
 80132a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80132a6:	4543      	cmp	r3, r8
 80132a8:	d1dd      	bne.n	8013266 <rmw_validate_node_name+0x22>
 80132aa:	7822      	ldrb	r2, [r4, #0]
 80132ac:	4b0d      	ldr	r3, [pc, #52]	@ (80132e4 <rmw_validate_node_name+0xa0>)
 80132ae:	5cd3      	ldrb	r3, [r2, r3]
 80132b0:	f013 0304 	ands.w	r3, r3, #4
 80132b4:	d110      	bne.n	80132d8 <rmw_validate_node_name+0x94>
 80132b6:	28ff      	cmp	r0, #255	@ 0xff
 80132b8:	d806      	bhi.n	80132c8 <rmw_validate_node_name+0x84>
 80132ba:	602b      	str	r3, [r5, #0]
 80132bc:	4618      	mov	r0, r3
 80132be:	e7e8      	b.n	8013292 <rmw_validate_node_name+0x4e>
 80132c0:	200b      	movs	r0, #11
 80132c2:	4770      	bx	lr
 80132c4:	200b      	movs	r0, #11
 80132c6:	e7e4      	b.n	8013292 <rmw_validate_node_name+0x4e>
 80132c8:	2204      	movs	r2, #4
 80132ca:	602a      	str	r2, [r5, #0]
 80132cc:	2e00      	cmp	r6, #0
 80132ce:	d0df      	beq.n	8013290 <rmw_validate_node_name+0x4c>
 80132d0:	22fe      	movs	r2, #254	@ 0xfe
 80132d2:	6032      	str	r2, [r6, #0]
 80132d4:	4618      	mov	r0, r3
 80132d6:	e7dc      	b.n	8013292 <rmw_validate_node_name+0x4e>
 80132d8:	2303      	movs	r3, #3
 80132da:	602b      	str	r3, [r5, #0]
 80132dc:	2e00      	cmp	r6, #0
 80132de:	d1de      	bne.n	801329e <rmw_validate_node_name+0x5a>
 80132e0:	e7d6      	b.n	8013290 <rmw_validate_node_name+0x4c>
 80132e2:	bf00      	nop
 80132e4:	08019642 	.word	0x08019642

080132e8 <rmw_node_name_validation_result_string>:
 80132e8:	2804      	cmp	r0, #4
 80132ea:	bf9a      	itte	ls
 80132ec:	4b02      	ldrls	r3, [pc, #8]	@ (80132f8 <rmw_node_name_validation_result_string+0x10>)
 80132ee:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 80132f2:	4802      	ldrhi	r0, [pc, #8]	@ (80132fc <rmw_node_name_validation_result_string+0x14>)
 80132f4:	4770      	bx	lr
 80132f6:	bf00      	nop
 80132f8:	08019214 	.word	0x08019214
 80132fc:	08019128 	.word	0x08019128

08013300 <get_memory>:
 8013300:	4603      	mov	r3, r0
 8013302:	6840      	ldr	r0, [r0, #4]
 8013304:	b158      	cbz	r0, 801331e <get_memory+0x1e>
 8013306:	6842      	ldr	r2, [r0, #4]
 8013308:	605a      	str	r2, [r3, #4]
 801330a:	b10a      	cbz	r2, 8013310 <get_memory+0x10>
 801330c:	2100      	movs	r1, #0
 801330e:	6011      	str	r1, [r2, #0]
 8013310:	681a      	ldr	r2, [r3, #0]
 8013312:	6042      	str	r2, [r0, #4]
 8013314:	b102      	cbz	r2, 8013318 <get_memory+0x18>
 8013316:	6010      	str	r0, [r2, #0]
 8013318:	2200      	movs	r2, #0
 801331a:	6002      	str	r2, [r0, #0]
 801331c:	6018      	str	r0, [r3, #0]
 801331e:	4770      	bx	lr

08013320 <put_memory>:
 8013320:	680b      	ldr	r3, [r1, #0]
 8013322:	b10b      	cbz	r3, 8013328 <put_memory+0x8>
 8013324:	684a      	ldr	r2, [r1, #4]
 8013326:	605a      	str	r2, [r3, #4]
 8013328:	684a      	ldr	r2, [r1, #4]
 801332a:	b102      	cbz	r2, 801332e <put_memory+0xe>
 801332c:	6013      	str	r3, [r2, #0]
 801332e:	6803      	ldr	r3, [r0, #0]
 8013330:	428b      	cmp	r3, r1
 8013332:	6843      	ldr	r3, [r0, #4]
 8013334:	bf08      	it	eq
 8013336:	6002      	streq	r2, [r0, #0]
 8013338:	604b      	str	r3, [r1, #4]
 801333a:	b103      	cbz	r3, 801333e <put_memory+0x1e>
 801333c:	6019      	str	r1, [r3, #0]
 801333e:	2300      	movs	r3, #0
 8013340:	600b      	str	r3, [r1, #0]
 8013342:	6041      	str	r1, [r0, #4]
 8013344:	4770      	bx	lr
 8013346:	bf00      	nop

08013348 <rmw_destroy_client>:
 8013348:	b570      	push	{r4, r5, r6, lr}
 801334a:	b128      	cbz	r0, 8013358 <rmw_destroy_client+0x10>
 801334c:	4604      	mov	r4, r0
 801334e:	6800      	ldr	r0, [r0, #0]
 8013350:	460d      	mov	r5, r1
 8013352:	f7f7 ffe7 	bl	800b324 <is_uxrce_rmw_identifier_valid>
 8013356:	b910      	cbnz	r0, 801335e <rmw_destroy_client+0x16>
 8013358:	2401      	movs	r4, #1
 801335a:	4620      	mov	r0, r4
 801335c:	bd70      	pop	{r4, r5, r6, pc}
 801335e:	6863      	ldr	r3, [r4, #4]
 8013360:	2b00      	cmp	r3, #0
 8013362:	d0f9      	beq.n	8013358 <rmw_destroy_client+0x10>
 8013364:	2d00      	cmp	r5, #0
 8013366:	d0f7      	beq.n	8013358 <rmw_destroy_client+0x10>
 8013368:	6828      	ldr	r0, [r5, #0]
 801336a:	f7f7 ffdb 	bl	800b324 <is_uxrce_rmw_identifier_valid>
 801336e:	2800      	cmp	r0, #0
 8013370:	d0f2      	beq.n	8013358 <rmw_destroy_client+0x10>
 8013372:	686e      	ldr	r6, [r5, #4]
 8013374:	2e00      	cmp	r6, #0
 8013376:	d0ef      	beq.n	8013358 <rmw_destroy_client+0x10>
 8013378:	6864      	ldr	r4, [r4, #4]
 801337a:	6932      	ldr	r2, [r6, #16]
 801337c:	6920      	ldr	r0, [r4, #16]
 801337e:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8013382:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8013386:	6819      	ldr	r1, [r3, #0]
 8013388:	f002 fb08 	bl	801599c <uxr_buffer_cancel_data>
 801338c:	4602      	mov	r2, r0
 801338e:	6920      	ldr	r0, [r4, #16]
 8013390:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8013394:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8013398:	f7f7 ff44 	bl	800b224 <run_xrce_session>
 801339c:	6920      	ldr	r0, [r4, #16]
 801339e:	6932      	ldr	r2, [r6, #16]
 80133a0:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80133a4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80133a8:	6819      	ldr	r1, [r3, #0]
 80133aa:	f7f9 fc2b 	bl	800cc04 <uxr_buffer_delete_entity>
 80133ae:	4602      	mov	r2, r0
 80133b0:	6920      	ldr	r0, [r4, #16]
 80133b2:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 80133b6:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 80133ba:	f7f7 ff33 	bl	800b224 <run_xrce_session>
 80133be:	2800      	cmp	r0, #0
 80133c0:	4628      	mov	r0, r5
 80133c2:	bf14      	ite	ne
 80133c4:	2400      	movne	r4, #0
 80133c6:	2402      	moveq	r4, #2
 80133c8:	f7f7 fe14 	bl	800aff4 <rmw_uxrce_fini_client_memory>
 80133cc:	e7c5      	b.n	801335a <rmw_destroy_client+0x12>
 80133ce:	bf00      	nop

080133d0 <rmw_get_implementation_identifier>:
 80133d0:	4b01      	ldr	r3, [pc, #4]	@ (80133d8 <rmw_get_implementation_identifier+0x8>)
 80133d2:	6818      	ldr	r0, [r3, #0]
 80133d4:	4770      	bx	lr
 80133d6:	bf00      	nop
 80133d8:	08019240 	.word	0x08019240

080133dc <rmw_init_options_init>:
 80133dc:	b084      	sub	sp, #16
 80133de:	b5f0      	push	{r4, r5, r6, r7, lr}
 80133e0:	b083      	sub	sp, #12
 80133e2:	ad09      	add	r5, sp, #36	@ 0x24
 80133e4:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 80133e8:	b130      	cbz	r0, 80133f8 <rmw_init_options_init+0x1c>
 80133ea:	4604      	mov	r4, r0
 80133ec:	4628      	mov	r0, r5
 80133ee:	f7f7 f9f3 	bl	800a7d8 <rcutils_allocator_is_valid>
 80133f2:	b108      	cbz	r0, 80133f8 <rmw_init_options_init+0x1c>
 80133f4:	68a6      	ldr	r6, [r4, #8]
 80133f6:	b12e      	cbz	r6, 8013404 <rmw_init_options_init+0x28>
 80133f8:	200b      	movs	r0, #11
 80133fa:	b003      	add	sp, #12
 80133fc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8013400:	b004      	add	sp, #16
 8013402:	4770      	bx	lr
 8013404:	2200      	movs	r2, #0
 8013406:	2300      	movs	r3, #0
 8013408:	e9c4 2300 	strd	r2, r3, [r4]
 801340c:	4b22      	ldr	r3, [pc, #136]	@ (8013498 <rmw_init_options_init+0xbc>)
 801340e:	f8df e098 	ldr.w	lr, [pc, #152]	@ 80134a8 <rmw_init_options_init+0xcc>
 8013412:	681b      	ldr	r3, [r3, #0]
 8013414:	60a3      	str	r3, [r4, #8]
 8013416:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013418:	f104 0c20 	add.w	ip, r4, #32
 801341c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013420:	466f      	mov	r7, sp
 8013422:	682b      	ldr	r3, [r5, #0]
 8013424:	f8cc 3000 	str.w	r3, [ip]
 8013428:	4638      	mov	r0, r7
 801342a:	f8c4 e01c 	str.w	lr, [r4, #28]
 801342e:	60e6      	str	r6, [r4, #12]
 8013430:	f7ff fd76 	bl	8012f20 <rmw_get_default_security_options>
 8013434:	e897 0003 	ldmia.w	r7, {r0, r1}
 8013438:	f104 0310 	add.w	r3, r4, #16
 801343c:	e883 0003 	stmia.w	r3, {r0, r1}
 8013440:	2203      	movs	r2, #3
 8013442:	4816      	ldr	r0, [pc, #88]	@ (801349c <rmw_init_options_init+0xc0>)
 8013444:	4916      	ldr	r1, [pc, #88]	@ (80134a0 <rmw_init_options_init+0xc4>)
 8013446:	7626      	strb	r6, [r4, #24]
 8013448:	f7f7 fd14 	bl	800ae74 <rmw_uxrce_init_init_options_impl_memory>
 801344c:	4813      	ldr	r0, [pc, #76]	@ (801349c <rmw_init_options_init+0xc0>)
 801344e:	f7ff ff57 	bl	8013300 <get_memory>
 8013452:	b1f0      	cbz	r0, 8013492 <rmw_init_options_init+0xb6>
 8013454:	4a13      	ldr	r2, [pc, #76]	@ (80134a4 <rmw_init_options_init+0xc8>)
 8013456:	6883      	ldr	r3, [r0, #8]
 8013458:	6851      	ldr	r1, [r2, #4]
 801345a:	7810      	ldrb	r0, [r2, #0]
 801345c:	6363      	str	r3, [r4, #52]	@ 0x34
 801345e:	7418      	strb	r0, [r3, #16]
 8013460:	6159      	str	r1, [r3, #20]
 8013462:	68d1      	ldr	r1, [r2, #12]
 8013464:	61d9      	str	r1, [r3, #28]
 8013466:	6911      	ldr	r1, [r2, #16]
 8013468:	6219      	str	r1, [r3, #32]
 801346a:	6951      	ldr	r1, [r2, #20]
 801346c:	6892      	ldr	r2, [r2, #8]
 801346e:	619a      	str	r2, [r3, #24]
 8013470:	6259      	str	r1, [r3, #36]	@ 0x24
 8013472:	f7fb f825 	bl	800e4c0 <uxr_nanos>
 8013476:	f003 fe8b 	bl	8017190 <srand>
 801347a:	f003 feb7 	bl	80171ec <rand>
 801347e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8013480:	6298      	str	r0, [r3, #40]	@ 0x28
 8013482:	2800      	cmp	r0, #0
 8013484:	d0f9      	beq.n	801347a <rmw_init_options_init+0x9e>
 8013486:	2000      	movs	r0, #0
 8013488:	b003      	add	sp, #12
 801348a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801348e:	b004      	add	sp, #16
 8013490:	4770      	bx	lr
 8013492:	2001      	movs	r0, #1
 8013494:	e7b1      	b.n	80133fa <rmw_init_options_init+0x1e>
 8013496:	bf00      	nop
 8013498:	08019240 	.word	0x08019240
 801349c:	2000becc 	.word	0x2000becc
 80134a0:	20007768 	.word	0x20007768
 80134a4:	200075f4 	.word	0x200075f4
 80134a8:	08018ca4 	.word	0x08018ca4

080134ac <rmw_init_options_copy>:
 80134ac:	b570      	push	{r4, r5, r6, lr}
 80134ae:	b158      	cbz	r0, 80134c8 <rmw_init_options_copy+0x1c>
 80134b0:	460d      	mov	r5, r1
 80134b2:	b149      	cbz	r1, 80134c8 <rmw_init_options_copy+0x1c>
 80134b4:	4604      	mov	r4, r0
 80134b6:	6880      	ldr	r0, [r0, #8]
 80134b8:	b120      	cbz	r0, 80134c4 <rmw_init_options_copy+0x18>
 80134ba:	4b1e      	ldr	r3, [pc, #120]	@ (8013534 <rmw_init_options_copy+0x88>)
 80134bc:	6819      	ldr	r1, [r3, #0]
 80134be:	f7ec fe87 	bl	80001d0 <strcmp>
 80134c2:	bb90      	cbnz	r0, 801352a <rmw_init_options_copy+0x7e>
 80134c4:	68ab      	ldr	r3, [r5, #8]
 80134c6:	b113      	cbz	r3, 80134ce <rmw_init_options_copy+0x22>
 80134c8:	250b      	movs	r5, #11
 80134ca:	4628      	mov	r0, r5
 80134cc:	bd70      	pop	{r4, r5, r6, pc}
 80134ce:	4623      	mov	r3, r4
 80134d0:	462a      	mov	r2, r5
 80134d2:	f104 0630 	add.w	r6, r4, #48	@ 0x30
 80134d6:	f8d3 c000 	ldr.w	ip, [r3]
 80134da:	6858      	ldr	r0, [r3, #4]
 80134dc:	6899      	ldr	r1, [r3, #8]
 80134de:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 80134e2:	f8c2 e00c 	str.w	lr, [r2, #12]
 80134e6:	3310      	adds	r3, #16
 80134e8:	42b3      	cmp	r3, r6
 80134ea:	f8c2 c000 	str.w	ip, [r2]
 80134ee:	6050      	str	r0, [r2, #4]
 80134f0:	6091      	str	r1, [r2, #8]
 80134f2:	f102 0210 	add.w	r2, r2, #16
 80134f6:	d1ee      	bne.n	80134d6 <rmw_init_options_copy+0x2a>
 80134f8:	6819      	ldr	r1, [r3, #0]
 80134fa:	685b      	ldr	r3, [r3, #4]
 80134fc:	480e      	ldr	r0, [pc, #56]	@ (8013538 <rmw_init_options_copy+0x8c>)
 80134fe:	6053      	str	r3, [r2, #4]
 8013500:	6011      	str	r1, [r2, #0]
 8013502:	f7ff fefd 	bl	8013300 <get_memory>
 8013506:	b198      	cbz	r0, 8013530 <rmw_init_options_copy+0x84>
 8013508:	6883      	ldr	r3, [r0, #8]
 801350a:	636b      	str	r3, [r5, #52]	@ 0x34
 801350c:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 801350e:	f102 0c10 	add.w	ip, r2, #16
 8013512:	f103 0410 	add.w	r4, r3, #16
 8013516:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801351a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801351c:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8013520:	2500      	movs	r5, #0
 8013522:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8013526:	4628      	mov	r0, r5
 8013528:	bd70      	pop	{r4, r5, r6, pc}
 801352a:	250c      	movs	r5, #12
 801352c:	4628      	mov	r0, r5
 801352e:	bd70      	pop	{r4, r5, r6, pc}
 8013530:	2501      	movs	r5, #1
 8013532:	e7ca      	b.n	80134ca <rmw_init_options_copy+0x1e>
 8013534:	08019240 	.word	0x08019240
 8013538:	2000becc 	.word	0x2000becc

0801353c <rmw_init_options_fini>:
 801353c:	2800      	cmp	r0, #0
 801353e:	d03d      	beq.n	80135bc <rmw_init_options_fini+0x80>
 8013540:	b510      	push	{r4, lr}
 8013542:	4604      	mov	r4, r0
 8013544:	b08e      	sub	sp, #56	@ 0x38
 8013546:	3020      	adds	r0, #32
 8013548:	f7f7 f946 	bl	800a7d8 <rcutils_allocator_is_valid>
 801354c:	b360      	cbz	r0, 80135a8 <rmw_init_options_fini+0x6c>
 801354e:	68a0      	ldr	r0, [r4, #8]
 8013550:	b120      	cbz	r0, 801355c <rmw_init_options_fini+0x20>
 8013552:	4b1c      	ldr	r3, [pc, #112]	@ (80135c4 <rmw_init_options_fini+0x88>)
 8013554:	6819      	ldr	r1, [r3, #0]
 8013556:	f7ec fe3b 	bl	80001d0 <strcmp>
 801355a:	bb68      	cbnz	r0, 80135b8 <rmw_init_options_fini+0x7c>
 801355c:	4b1a      	ldr	r3, [pc, #104]	@ (80135c8 <rmw_init_options_fini+0x8c>)
 801355e:	6819      	ldr	r1, [r3, #0]
 8013560:	b331      	cbz	r1, 80135b0 <rmw_init_options_fini+0x74>
 8013562:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8013564:	e001      	b.n	801356a <rmw_init_options_fini+0x2e>
 8013566:	6849      	ldr	r1, [r1, #4]
 8013568:	b311      	cbz	r1, 80135b0 <rmw_init_options_fini+0x74>
 801356a:	688b      	ldr	r3, [r1, #8]
 801356c:	429a      	cmp	r2, r3
 801356e:	d1fa      	bne.n	8013566 <rmw_init_options_fini+0x2a>
 8013570:	4815      	ldr	r0, [pc, #84]	@ (80135c8 <rmw_init_options_fini+0x8c>)
 8013572:	f7ff fed5 	bl	8013320 <put_memory>
 8013576:	4668      	mov	r0, sp
 8013578:	f7ff fcc2 	bl	8012f00 <rmw_get_zero_initialized_init_options>
 801357c:	46ee      	mov	lr, sp
 801357e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013582:	46a4      	mov	ip, r4
 8013584:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013588:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801358c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013590:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013594:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013598:	e89e 0003 	ldmia.w	lr, {r0, r1}
 801359c:	e88c 0003 	stmia.w	ip, {r0, r1}
 80135a0:	2300      	movs	r3, #0
 80135a2:	4618      	mov	r0, r3
 80135a4:	b00e      	add	sp, #56	@ 0x38
 80135a6:	bd10      	pop	{r4, pc}
 80135a8:	230b      	movs	r3, #11
 80135aa:	4618      	mov	r0, r3
 80135ac:	b00e      	add	sp, #56	@ 0x38
 80135ae:	bd10      	pop	{r4, pc}
 80135b0:	2301      	movs	r3, #1
 80135b2:	4618      	mov	r0, r3
 80135b4:	b00e      	add	sp, #56	@ 0x38
 80135b6:	bd10      	pop	{r4, pc}
 80135b8:	230c      	movs	r3, #12
 80135ba:	e7f2      	b.n	80135a2 <rmw_init_options_fini+0x66>
 80135bc:	230b      	movs	r3, #11
 80135be:	4618      	mov	r0, r3
 80135c0:	4770      	bx	lr
 80135c2:	bf00      	nop
 80135c4:	08019240 	.word	0x08019240
 80135c8:	2000becc 	.word	0x2000becc

080135cc <rmw_init>:
 80135cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80135d0:	b083      	sub	sp, #12
 80135d2:	2800      	cmp	r0, #0
 80135d4:	f000 80d3 	beq.w	801377e <rmw_init+0x1b2>
 80135d8:	460e      	mov	r6, r1
 80135da:	2900      	cmp	r1, #0
 80135dc:	f000 80cf 	beq.w	801377e <rmw_init+0x1b2>
 80135e0:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 80135e2:	4605      	mov	r5, r0
 80135e4:	2b00      	cmp	r3, #0
 80135e6:	f000 80ca 	beq.w	801377e <rmw_init+0x1b2>
 80135ea:	4b78      	ldr	r3, [pc, #480]	@ (80137cc <rmw_init+0x200>)
 80135ec:	6880      	ldr	r0, [r0, #8]
 80135ee:	681f      	ldr	r7, [r3, #0]
 80135f0:	b128      	cbz	r0, 80135fe <rmw_init+0x32>
 80135f2:	4639      	mov	r1, r7
 80135f4:	f7ec fdec 	bl	80001d0 <strcmp>
 80135f8:	2800      	cmp	r0, #0
 80135fa:	f040 80ca 	bne.w	8013792 <rmw_init+0x1c6>
 80135fe:	e9d5 2300 	ldrd	r2, r3, [r5]
 8013602:	4c73      	ldr	r4, [pc, #460]	@ (80137d0 <rmw_init+0x204>)
 8013604:	4973      	ldr	r1, [pc, #460]	@ (80137d4 <rmw_init+0x208>)
 8013606:	4874      	ldr	r0, [pc, #464]	@ (80137d8 <rmw_init+0x20c>)
 8013608:	60b7      	str	r7, [r6, #8]
 801360a:	e9c6 2300 	strd	r2, r3, [r6]
 801360e:	68eb      	ldr	r3, [r5, #12]
 8013610:	64b3      	str	r3, [r6, #72]	@ 0x48
 8013612:	2201      	movs	r2, #1
 8013614:	f7f7 fbce 	bl	800adb4 <rmw_uxrce_init_session_memory>
 8013618:	4620      	mov	r0, r4
 801361a:	4970      	ldr	r1, [pc, #448]	@ (80137dc <rmw_init+0x210>)
 801361c:	2204      	movs	r2, #4
 801361e:	f7f7 fc09 	bl	800ae34 <rmw_uxrce_init_static_input_buffer_memory>
 8013622:	f04f 0800 	mov.w	r8, #0
 8013626:	486c      	ldr	r0, [pc, #432]	@ (80137d8 <rmw_init+0x20c>)
 8013628:	f884 800d 	strb.w	r8, [r4, #13]
 801362c:	f7ff fe68 	bl	8013300 <get_memory>
 8013630:	2800      	cmp	r0, #0
 8013632:	f000 80a9 	beq.w	8013788 <rmw_init+0x1bc>
 8013636:	6884      	ldr	r4, [r0, #8]
 8013638:	6b68      	ldr	r0, [r5, #52]	@ 0x34
 801363a:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 801363c:	f890 c010 	ldrb.w	ip, [r0, #16]
 8013640:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 8013644:	9101      	str	r1, [sp, #4]
 8013646:	6a00      	ldr	r0, [r0, #32]
 8013648:	9000      	str	r0, [sp, #0]
 801364a:	f104 0910 	add.w	r9, r4, #16
 801364e:	4661      	mov	r1, ip
 8013650:	4648      	mov	r0, r9
 8013652:	f001 fbdb 	bl	8014e0c <uxr_set_custom_transport_callbacks>
 8013656:	f504 5380 	add.w	r3, r4, #4096	@ 0x1000
 801365a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 801365e:	e9c4 22e3 	strd	r2, r2, [r4, #908]	@ 0x38c
 8013662:	f504 725e 	add.w	r2, r4, #888	@ 0x378
 8013666:	e9c4 22e1 	strd	r2, r2, [r4, #900]	@ 0x384
 801366a:	495d      	ldr	r1, [pc, #372]	@ (80137e0 <rmw_init+0x214>)
 801366c:	f8c3 8594 	str.w	r8, [r3, #1428]	@ 0x594
 8013670:	f8c3 8598 	str.w	r8, [r3, #1432]	@ 0x598
 8013674:	f8c3 859c 	str.w	r8, [r3, #1436]	@ 0x59c
 8013678:	f8c3 85a0 	str.w	r8, [r3, #1440]	@ 0x5a0
 801367c:	4859      	ldr	r0, [pc, #356]	@ (80137e4 <rmw_init+0x218>)
 801367e:	e9c4 78da 	strd	r7, r8, [r4, #872]	@ 0x368
 8013682:	2201      	movs	r2, #1
 8013684:	64f4      	str	r4, [r6, #76]	@ 0x4c
 8013686:	f7f7 fb75 	bl	800ad74 <rmw_uxrce_init_node_memory>
 801368a:	4957      	ldr	r1, [pc, #348]	@ (80137e8 <rmw_init+0x21c>)
 801368c:	4857      	ldr	r0, [pc, #348]	@ (80137ec <rmw_init+0x220>)
 801368e:	2205      	movs	r2, #5
 8013690:	f7f7 fb50 	bl	800ad34 <rmw_uxrce_init_subscription_memory>
 8013694:	4956      	ldr	r1, [pc, #344]	@ (80137f0 <rmw_init+0x224>)
 8013696:	4857      	ldr	r0, [pc, #348]	@ (80137f4 <rmw_init+0x228>)
 8013698:	220a      	movs	r2, #10
 801369a:	f7f7 fb2b 	bl	800acf4 <rmw_uxrce_init_publisher_memory>
 801369e:	4956      	ldr	r1, [pc, #344]	@ (80137f8 <rmw_init+0x22c>)
 80136a0:	4856      	ldr	r0, [pc, #344]	@ (80137fc <rmw_init+0x230>)
 80136a2:	2201      	movs	r2, #1
 80136a4:	f7f7 fae6 	bl	800ac74 <rmw_uxrce_init_service_memory>
 80136a8:	4955      	ldr	r1, [pc, #340]	@ (8013800 <rmw_init+0x234>)
 80136aa:	4856      	ldr	r0, [pc, #344]	@ (8013804 <rmw_init+0x238>)
 80136ac:	2201      	movs	r2, #1
 80136ae:	f7f7 fb01 	bl	800acb4 <rmw_uxrce_init_client_memory>
 80136b2:	4955      	ldr	r1, [pc, #340]	@ (8013808 <rmw_init+0x23c>)
 80136b4:	4855      	ldr	r0, [pc, #340]	@ (801380c <rmw_init+0x240>)
 80136b6:	220f      	movs	r2, #15
 80136b8:	f7f7 fb9c 	bl	800adf4 <rmw_uxrce_init_topic_memory>
 80136bc:	4954      	ldr	r1, [pc, #336]	@ (8013810 <rmw_init+0x244>)
 80136be:	4855      	ldr	r0, [pc, #340]	@ (8013814 <rmw_init+0x248>)
 80136c0:	2203      	movs	r2, #3
 80136c2:	f7f7 fbd7 	bl	800ae74 <rmw_uxrce_init_init_options_impl_memory>
 80136c6:	4954      	ldr	r1, [pc, #336]	@ (8013818 <rmw_init+0x24c>)
 80136c8:	4854      	ldr	r0, [pc, #336]	@ (801381c <rmw_init+0x250>)
 80136ca:	2204      	movs	r2, #4
 80136cc:	f7f7 fbf2 	bl	800aeb4 <rmw_uxrce_init_wait_set_memory>
 80136d0:	4953      	ldr	r1, [pc, #332]	@ (8013820 <rmw_init+0x254>)
 80136d2:	4854      	ldr	r0, [pc, #336]	@ (8013824 <rmw_init+0x258>)
 80136d4:	2204      	movs	r2, #4
 80136d6:	f7f7 fc0d 	bl	800aef4 <rmw_uxrce_init_guard_condition_memory>
 80136da:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 80136dc:	6cf0      	ldr	r0, [r6, #76]	@ 0x4c
 80136de:	4642      	mov	r2, r8
 80136e0:	f000 fd9e 	bl	8014220 <rmw_uxrce_transport_init>
 80136e4:	4607      	mov	r7, r0
 80136e6:	2800      	cmp	r0, #0
 80136e8:	d158      	bne.n	801379c <rmw_init+0x1d0>
 80136ea:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 80136ec:	f504 7528 	add.w	r5, r4, #672	@ 0x2a0
 80136f0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80136f2:	f504 7122 	add.w	r1, r4, #648	@ 0x288
 80136f6:	4628      	mov	r0, r5
 80136f8:	f7f9 fd46 	bl	800d188 <uxr_init_session>
 80136fc:	494a      	ldr	r1, [pc, #296]	@ (8013828 <rmw_init+0x25c>)
 80136fe:	4622      	mov	r2, r4
 8013700:	4628      	mov	r0, r5
 8013702:	f7f9 fd65 	bl	800d1d0 <uxr_set_topic_callback>
 8013706:	4949      	ldr	r1, [pc, #292]	@ (801382c <rmw_init+0x260>)
 8013708:	463a      	mov	r2, r7
 801370a:	4628      	mov	r0, r5
 801370c:	f7f9 fd5c 	bl	800d1c8 <uxr_set_status_callback>
 8013710:	4947      	ldr	r1, [pc, #284]	@ (8013830 <rmw_init+0x264>)
 8013712:	463a      	mov	r2, r7
 8013714:	4628      	mov	r0, r5
 8013716:	f7f9 fd5f 	bl	800d1d8 <uxr_set_request_callback>
 801371a:	4946      	ldr	r1, [pc, #280]	@ (8013834 <rmw_init+0x268>)
 801371c:	463a      	mov	r2, r7
 801371e:	4628      	mov	r0, r5
 8013720:	f7f9 fd5e 	bl	800d1e0 <uxr_set_reply_callback>
 8013724:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 8013728:	2304      	movs	r3, #4
 801372a:	0092      	lsls	r2, r2, #2
 801372c:	f504 7165 	add.w	r1, r4, #916	@ 0x394
 8013730:	4628      	mov	r0, r5
 8013732:	f7f9 fd93 	bl	800d25c <uxr_create_input_reliable_stream>
 8013736:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 801373a:	f8c4 0374 	str.w	r0, [r4, #884]	@ 0x374
 801373e:	0092      	lsls	r2, r2, #2
 8013740:	2304      	movs	r3, #4
 8013742:	f604 3194 	addw	r1, r4, #2964	@ 0xb94
 8013746:	4628      	mov	r0, r5
 8013748:	f7f9 fd60 	bl	800d20c <uxr_create_output_reliable_stream>
 801374c:	f8c4 0378 	str.w	r0, [r4, #888]	@ 0x378
 8013750:	4628      	mov	r0, r5
 8013752:	f7f9 fd7d 	bl	800d250 <uxr_create_input_best_effort_stream>
 8013756:	f504 519c 	add.w	r1, r4, #4992	@ 0x1380
 801375a:	f8c4 0380 	str.w	r0, [r4, #896]	@ 0x380
 801375e:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 8013762:	3114      	adds	r1, #20
 8013764:	4628      	mov	r0, r5
 8013766:	f7f9 fd3f 	bl	800d1e8 <uxr_create_output_best_effort_stream>
 801376a:	f8c4 037c 	str.w	r0, [r4, #892]	@ 0x37c
 801376e:	4628      	mov	r0, r5
 8013770:	f7fa faca 	bl	800dd08 <uxr_create_session>
 8013774:	b1f8      	cbz	r0, 80137b6 <rmw_init+0x1ea>
 8013776:	4638      	mov	r0, r7
 8013778:	b003      	add	sp, #12
 801377a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801377e:	270b      	movs	r7, #11
 8013780:	4638      	mov	r0, r7
 8013782:	b003      	add	sp, #12
 8013784:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013788:	2701      	movs	r7, #1
 801378a:	4638      	mov	r0, r7
 801378c:	b003      	add	sp, #12
 801378e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013792:	270c      	movs	r7, #12
 8013794:	4638      	mov	r0, r7
 8013796:	b003      	add	sp, #12
 8013798:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801379c:	4648      	mov	r0, r9
 801379e:	f001 fb77 	bl	8014e90 <uxr_close_custom_transport>
 80137a2:	480d      	ldr	r0, [pc, #52]	@ (80137d8 <rmw_init+0x20c>)
 80137a4:	4621      	mov	r1, r4
 80137a6:	f7ff fdbb 	bl	8013320 <put_memory>
 80137aa:	4638      	mov	r0, r7
 80137ac:	f8c6 804c 	str.w	r8, [r6, #76]	@ 0x4c
 80137b0:	b003      	add	sp, #12
 80137b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80137b6:	4648      	mov	r0, r9
 80137b8:	f001 fb6a 	bl	8014e90 <uxr_close_custom_transport>
 80137bc:	4806      	ldr	r0, [pc, #24]	@ (80137d8 <rmw_init+0x20c>)
 80137be:	4621      	mov	r1, r4
 80137c0:	f7ff fdae 	bl	8013320 <put_memory>
 80137c4:	64f7      	str	r7, [r6, #76]	@ 0x4c
 80137c6:	2701      	movs	r7, #1
 80137c8:	e7d5      	b.n	8013776 <rmw_init+0x1aa>
 80137ca:	bf00      	nop
 80137cc:	08019240 	.word	0x08019240
 80137d0:	2000bf1c 	.word	0x2000bf1c
 80137d4:	200081c8 	.word	0x200081c8
 80137d8:	2000bf0c 	.word	0x2000bf0c
 80137dc:	20009770 	.word	0x20009770
 80137e0:	200077ec 	.word	0x200077ec
 80137e4:	2000bedc 	.word	0x2000bedc
 80137e8:	2000b870 	.word	0x2000b870
 80137ec:	2000bf2c 	.word	0x2000bf2c
 80137f0:	20007890 	.word	0x20007890
 80137f4:	2000beec 	.word	0x2000beec
 80137f8:	20008100 	.word	0x20008100
 80137fc:	2000befc 	.word	0x2000befc
 8013800:	20007620 	.word	0x20007620
 8013804:	20007610 	.word	0x20007610
 8013808:	2000bca8 	.word	0x2000bca8
 801380c:	2000bf3c 	.word	0x2000bf3c
 8013810:	20007768 	.word	0x20007768
 8013814:	2000becc 	.word	0x2000becc
 8013818:	2000be4c 	.word	0x2000be4c
 801381c:	2000bf4c 	.word	0x2000bf4c
 8013820:	200076e8 	.word	0x200076e8
 8013824:	2000bebc 	.word	0x2000bebc
 8013828:	08016c35 	.word	0x08016c35
 801382c:	08016c2d 	.word	0x08016c2d
 8013830:	08016ccd 	.word	0x08016ccd
 8013834:	08016d69 	.word	0x08016d69

08013838 <rmw_context_fini>:
 8013838:	4b17      	ldr	r3, [pc, #92]	@ (8013898 <rmw_context_fini+0x60>)
 801383a:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 801383c:	b570      	push	{r4, r5, r6, lr}
 801383e:	681c      	ldr	r4, [r3, #0]
 8013840:	4605      	mov	r5, r0
 8013842:	b334      	cbz	r4, 8013892 <rmw_context_fini+0x5a>
 8013844:	2600      	movs	r6, #0
 8013846:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 801384a:	6902      	ldr	r2, [r0, #16]
 801384c:	428a      	cmp	r2, r1
 801384e:	d018      	beq.n	8013882 <rmw_context_fini+0x4a>
 8013850:	2c00      	cmp	r4, #0
 8013852:	d1f8      	bne.n	8013846 <rmw_context_fini+0xe>
 8013854:	b189      	cbz	r1, 801387a <rmw_context_fini+0x42>
 8013856:	f8d1 3388 	ldr.w	r3, [r1, #904]	@ 0x388
 801385a:	789b      	ldrb	r3, [r3, #2]
 801385c:	2b01      	cmp	r3, #1
 801385e:	f501 7028 	add.w	r0, r1, #672	@ 0x2a0
 8013862:	bf14      	ite	ne
 8013864:	210a      	movne	r1, #10
 8013866:	2100      	moveq	r1, #0
 8013868:	f7fa fa26 	bl	800dcb8 <uxr_delete_session_retries>
 801386c:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 801386e:	f7f7 fb61 	bl	800af34 <rmw_uxrce_fini_session_memory>
 8013872:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 8013874:	3010      	adds	r0, #16
 8013876:	f001 fb0b 	bl	8014e90 <uxr_close_custom_transport>
 801387a:	2300      	movs	r3, #0
 801387c:	64eb      	str	r3, [r5, #76]	@ 0x4c
 801387e:	4630      	mov	r0, r6
 8013880:	bd70      	pop	{r4, r5, r6, pc}
 8013882:	3018      	adds	r0, #24
 8013884:	f000 f90e 	bl	8013aa4 <rmw_destroy_node>
 8013888:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 801388a:	4606      	mov	r6, r0
 801388c:	2c00      	cmp	r4, #0
 801388e:	d1da      	bne.n	8013846 <rmw_context_fini+0xe>
 8013890:	e7e0      	b.n	8013854 <rmw_context_fini+0x1c>
 8013892:	4626      	mov	r6, r4
 8013894:	e7de      	b.n	8013854 <rmw_context_fini+0x1c>
 8013896:	bf00      	nop
 8013898:	2000bedc 	.word	0x2000bedc

0801389c <create_topic>:
 801389c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80138a0:	4605      	mov	r5, r0
 80138a2:	b084      	sub	sp, #16
 80138a4:	4822      	ldr	r0, [pc, #136]	@ (8013930 <create_topic+0x94>)
 80138a6:	460f      	mov	r7, r1
 80138a8:	4616      	mov	r6, r2
 80138aa:	f7ff fd29 	bl	8013300 <get_memory>
 80138ae:	4604      	mov	r4, r0
 80138b0:	2800      	cmp	r0, #0
 80138b2:	d039      	beq.n	8013928 <create_topic+0x8c>
 80138b4:	692b      	ldr	r3, [r5, #16]
 80138b6:	6884      	ldr	r4, [r0, #8]
 80138b8:	f8df 807c 	ldr.w	r8, [pc, #124]	@ 8013938 <create_topic+0x9c>
 80138bc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80138c0:	e9c4 6505 	strd	r6, r5, [r4, #20]
 80138c4:	f8b3 0596 	ldrh.w	r0, [r3, #1430]	@ 0x596
 80138c8:	1c42      	adds	r2, r0, #1
 80138ca:	2102      	movs	r1, #2
 80138cc:	f8a3 2596 	strh.w	r2, [r3, #1430]	@ 0x596
 80138d0:	f7f9 fb9a 	bl	800d008 <uxr_object_id>
 80138d4:	223c      	movs	r2, #60	@ 0x3c
 80138d6:	6120      	str	r0, [r4, #16]
 80138d8:	4641      	mov	r1, r8
 80138da:	4638      	mov	r0, r7
 80138dc:	f7f7 fd08 	bl	800b2f0 <generate_topic_name>
 80138e0:	b1f0      	cbz	r0, 8013920 <create_topic+0x84>
 80138e2:	4f14      	ldr	r7, [pc, #80]	@ (8013934 <create_topic+0x98>)
 80138e4:	4630      	mov	r0, r6
 80138e6:	2264      	movs	r2, #100	@ 0x64
 80138e8:	4639      	mov	r1, r7
 80138ea:	f7f7 fcd1 	bl	800b290 <generate_type_name>
 80138ee:	b1b8      	cbz	r0, 8013920 <create_topic+0x84>
 80138f0:	6928      	ldr	r0, [r5, #16]
 80138f2:	2306      	movs	r3, #6
 80138f4:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 80138f8:	f8cd 8000 	str.w	r8, [sp]
 80138fc:	e9cd 7301 	strd	r7, r3, [sp, #4]
 8013900:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8013904:	6811      	ldr	r1, [r2, #0]
 8013906:	696b      	ldr	r3, [r5, #20]
 8013908:	6922      	ldr	r2, [r4, #16]
 801390a:	f7f9 f9f9 	bl	800cd00 <uxr_buffer_create_topic_bin>
 801390e:	4602      	mov	r2, r0
 8013910:	6928      	ldr	r0, [r5, #16]
 8013912:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8013916:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 801391a:	f7f7 fc83 	bl	800b224 <run_xrce_session>
 801391e:	b918      	cbnz	r0, 8013928 <create_topic+0x8c>
 8013920:	4620      	mov	r0, r4
 8013922:	f7f7 fb7d 	bl	800b020 <rmw_uxrce_fini_topic_memory>
 8013926:	2400      	movs	r4, #0
 8013928:	4620      	mov	r0, r4
 801392a:	b004      	add	sp, #16
 801392c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013930:	2000bf3c 	.word	0x2000bf3c
 8013934:	2000c028 	.word	0x2000c028
 8013938:	2000bfec 	.word	0x2000bfec

0801393c <destroy_topic>:
 801393c:	b538      	push	{r3, r4, r5, lr}
 801393e:	6985      	ldr	r5, [r0, #24]
 8013940:	b1d5      	cbz	r5, 8013978 <destroy_topic+0x3c>
 8013942:	4604      	mov	r4, r0
 8013944:	6928      	ldr	r0, [r5, #16]
 8013946:	6922      	ldr	r2, [r4, #16]
 8013948:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801394c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8013950:	6819      	ldr	r1, [r3, #0]
 8013952:	f7f9 f957 	bl	800cc04 <uxr_buffer_delete_entity>
 8013956:	4602      	mov	r2, r0
 8013958:	6928      	ldr	r0, [r5, #16]
 801395a:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 801395e:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8013962:	f7f7 fc5f 	bl	800b224 <run_xrce_session>
 8013966:	2800      	cmp	r0, #0
 8013968:	4620      	mov	r0, r4
 801396a:	bf14      	ite	ne
 801396c:	2400      	movne	r4, #0
 801396e:	2402      	moveq	r4, #2
 8013970:	f7f7 fb56 	bl	800b020 <rmw_uxrce_fini_topic_memory>
 8013974:	4620      	mov	r0, r4
 8013976:	bd38      	pop	{r3, r4, r5, pc}
 8013978:	2401      	movs	r4, #1
 801397a:	4620      	mov	r0, r4
 801397c:	bd38      	pop	{r3, r4, r5, pc}
 801397e:	bf00      	nop

08013980 <create_node>:
 8013980:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013984:	b083      	sub	sp, #12
 8013986:	2b00      	cmp	r3, #0
 8013988:	d05f      	beq.n	8013a4a <create_node+0xca>
 801398a:	4606      	mov	r6, r0
 801398c:	4835      	ldr	r0, [pc, #212]	@ (8013a64 <create_node+0xe4>)
 801398e:	460f      	mov	r7, r1
 8013990:	4690      	mov	r8, r2
 8013992:	461d      	mov	r5, r3
 8013994:	f7ff fcb4 	bl	8013300 <get_memory>
 8013998:	2800      	cmp	r0, #0
 801399a:	d056      	beq.n	8013a4a <create_node+0xca>
 801399c:	6884      	ldr	r4, [r0, #8]
 801399e:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 80139a0:	6123      	str	r3, [r4, #16]
 80139a2:	f7ff fd15 	bl	80133d0 <rmw_get_implementation_identifier>
 80139a6:	f104 092c 	add.w	r9, r4, #44	@ 0x2c
 80139aa:	e9c4 0406 	strd	r0, r4, [r4, #24]
 80139ae:	f8c4 9020 	str.w	r9, [r4, #32]
 80139b2:	4630      	mov	r0, r6
 80139b4:	f7ec fc16 	bl	80001e4 <strlen>
 80139b8:	1c42      	adds	r2, r0, #1
 80139ba:	2a3c      	cmp	r2, #60	@ 0x3c
 80139bc:	f104 0518 	add.w	r5, r4, #24
 80139c0:	d840      	bhi.n	8013a44 <create_node+0xc4>
 80139c2:	4648      	mov	r0, r9
 80139c4:	4631      	mov	r1, r6
 80139c6:	f104 0968 	add.w	r9, r4, #104	@ 0x68
 80139ca:	f004 f8b6 	bl	8017b3a <memcpy>
 80139ce:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
 80139d2:	4638      	mov	r0, r7
 80139d4:	f7ec fc06 	bl	80001e4 <strlen>
 80139d8:	1c42      	adds	r2, r0, #1
 80139da:	2a3c      	cmp	r2, #60	@ 0x3c
 80139dc:	d832      	bhi.n	8013a44 <create_node+0xc4>
 80139de:	4639      	mov	r1, r7
 80139e0:	4648      	mov	r0, r9
 80139e2:	f004 f8aa 	bl	8017b3a <memcpy>
 80139e6:	6923      	ldr	r3, [r4, #16]
 80139e8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80139ec:	2101      	movs	r1, #1
 80139ee:	f8b3 0594 	ldrh.w	r0, [r3, #1428]	@ 0x594
 80139f2:	1842      	adds	r2, r0, r1
 80139f4:	f8a3 2594 	strh.w	r2, [r3, #1428]	@ 0x594
 80139f8:	f7f9 fb06 	bl	800d008 <uxr_object_id>
 80139fc:	6160      	str	r0, [r4, #20]
 80139fe:	783b      	ldrb	r3, [r7, #0]
 8013a00:	2b2f      	cmp	r3, #47	@ 0x2f
 8013a02:	d127      	bne.n	8013a54 <create_node+0xd4>
 8013a04:	787b      	ldrb	r3, [r7, #1]
 8013a06:	bb2b      	cbnz	r3, 8013a54 <create_node+0xd4>
 8013a08:	4a17      	ldr	r2, [pc, #92]	@ (8013a68 <create_node+0xe8>)
 8013a0a:	4818      	ldr	r0, [pc, #96]	@ (8013a6c <create_node+0xec>)
 8013a0c:	4633      	mov	r3, r6
 8013a0e:	213c      	movs	r1, #60	@ 0x3c
 8013a10:	f003 fe06 	bl	8017620 <sniprintf>
 8013a14:	6920      	ldr	r0, [r4, #16]
 8013a16:	4915      	ldr	r1, [pc, #84]	@ (8013a6c <create_node+0xec>)
 8013a18:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 8013a1c:	9100      	str	r1, [sp, #0]
 8013a1e:	2106      	movs	r1, #6
 8013a20:	9101      	str	r1, [sp, #4]
 8013a22:	6811      	ldr	r1, [r2, #0]
 8013a24:	6962      	ldr	r2, [r4, #20]
 8013a26:	fa1f f388 	uxth.w	r3, r8
 8013a2a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8013a2e:	f7f9 f935 	bl	800cc9c <uxr_buffer_create_participant_bin>
 8013a32:	4602      	mov	r2, r0
 8013a34:	6920      	ldr	r0, [r4, #16]
 8013a36:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8013a3a:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8013a3e:	f7f7 fbf1 	bl	800b224 <run_xrce_session>
 8013a42:	b918      	cbnz	r0, 8013a4c <create_node+0xcc>
 8013a44:	4628      	mov	r0, r5
 8013a46:	f7f7 fa7b 	bl	800af40 <rmw_uxrce_fini_node_memory>
 8013a4a:	2500      	movs	r5, #0
 8013a4c:	4628      	mov	r0, r5
 8013a4e:	b003      	add	sp, #12
 8013a50:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013a54:	4a06      	ldr	r2, [pc, #24]	@ (8013a70 <create_node+0xf0>)
 8013a56:	9600      	str	r6, [sp, #0]
 8013a58:	463b      	mov	r3, r7
 8013a5a:	213c      	movs	r1, #60	@ 0x3c
 8013a5c:	4803      	ldr	r0, [pc, #12]	@ (8013a6c <create_node+0xec>)
 8013a5e:	f003 fddf 	bl	8017620 <sniprintf>
 8013a62:	e7d7      	b.n	8013a14 <create_node+0x94>
 8013a64:	2000bedc 	.word	0x2000bedc
 8013a68:	08018abc 	.word	0x08018abc
 8013a6c:	2000c08c 	.word	0x2000c08c
 8013a70:	08018cac 	.word	0x08018cac

08013a74 <rmw_create_node>:
 8013a74:	b199      	cbz	r1, 8013a9e <rmw_create_node+0x2a>
 8013a76:	780b      	ldrb	r3, [r1, #0]
 8013a78:	468c      	mov	ip, r1
 8013a7a:	b183      	cbz	r3, 8013a9e <rmw_create_node+0x2a>
 8013a7c:	b410      	push	{r4}
 8013a7e:	4614      	mov	r4, r2
 8013a80:	b14a      	cbz	r2, 8013a96 <rmw_create_node+0x22>
 8013a82:	7813      	ldrb	r3, [r2, #0]
 8013a84:	b13b      	cbz	r3, 8013a96 <rmw_create_node+0x22>
 8013a86:	6c82      	ldr	r2, [r0, #72]	@ 0x48
 8013a88:	4603      	mov	r3, r0
 8013a8a:	4621      	mov	r1, r4
 8013a8c:	4660      	mov	r0, ip
 8013a8e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013a92:	f7ff bf75 	b.w	8013980 <create_node>
 8013a96:	2000      	movs	r0, #0
 8013a98:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013a9c:	4770      	bx	lr
 8013a9e:	2000      	movs	r0, #0
 8013aa0:	4770      	bx	lr
 8013aa2:	bf00      	nop

08013aa4 <rmw_destroy_node>:
 8013aa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013aa6:	b328      	cbz	r0, 8013af4 <rmw_destroy_node+0x50>
 8013aa8:	4607      	mov	r7, r0
 8013aaa:	6800      	ldr	r0, [r0, #0]
 8013aac:	b120      	cbz	r0, 8013ab8 <rmw_destroy_node+0x14>
 8013aae:	4b36      	ldr	r3, [pc, #216]	@ (8013b88 <rmw_destroy_node+0xe4>)
 8013ab0:	6819      	ldr	r1, [r3, #0]
 8013ab2:	f7ec fb8d 	bl	80001d0 <strcmp>
 8013ab6:	b9e8      	cbnz	r0, 8013af4 <rmw_destroy_node+0x50>
 8013ab8:	687d      	ldr	r5, [r7, #4]
 8013aba:	b1dd      	cbz	r5, 8013af4 <rmw_destroy_node+0x50>
 8013abc:	4b33      	ldr	r3, [pc, #204]	@ (8013b8c <rmw_destroy_node+0xe8>)
 8013abe:	681c      	ldr	r4, [r3, #0]
 8013ac0:	2c00      	cmp	r4, #0
 8013ac2:	d05f      	beq.n	8013b84 <rmw_destroy_node+0xe0>
 8013ac4:	2600      	movs	r6, #0
 8013ac6:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8013aca:	f8d1 3080 	ldr.w	r3, [r1, #128]	@ 0x80
 8013ace:	429d      	cmp	r5, r3
 8013ad0:	d013      	beq.n	8013afa <rmw_destroy_node+0x56>
 8013ad2:	2c00      	cmp	r4, #0
 8013ad4:	d1f7      	bne.n	8013ac6 <rmw_destroy_node+0x22>
 8013ad6:	4b2e      	ldr	r3, [pc, #184]	@ (8013b90 <rmw_destroy_node+0xec>)
 8013ad8:	681c      	ldr	r4, [r3, #0]
 8013ada:	b1c4      	cbz	r4, 8013b0e <rmw_destroy_node+0x6a>
 8013adc:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8013ae0:	6a0b      	ldr	r3, [r1, #32]
 8013ae2:	429d      	cmp	r5, r3
 8013ae4:	d1f9      	bne.n	8013ada <rmw_destroy_node+0x36>
 8013ae6:	317c      	adds	r1, #124	@ 0x7c
 8013ae8:	4638      	mov	r0, r7
 8013aea:	f000 fae5 	bl	80140b8 <rmw_destroy_subscription>
 8013aee:	2801      	cmp	r0, #1
 8013af0:	4606      	mov	r6, r0
 8013af2:	d1f2      	bne.n	8013ada <rmw_destroy_node+0x36>
 8013af4:	2601      	movs	r6, #1
 8013af6:	4630      	mov	r0, r6
 8013af8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013afa:	3184      	adds	r1, #132	@ 0x84
 8013afc:	4638      	mov	r0, r7
 8013afe:	f7f7 f867 	bl	800abd0 <rmw_destroy_publisher>
 8013b02:	2801      	cmp	r0, #1
 8013b04:	4606      	mov	r6, r0
 8013b06:	d0f5      	beq.n	8013af4 <rmw_destroy_node+0x50>
 8013b08:	2c00      	cmp	r4, #0
 8013b0a:	d1dc      	bne.n	8013ac6 <rmw_destroy_node+0x22>
 8013b0c:	e7e3      	b.n	8013ad6 <rmw_destroy_node+0x32>
 8013b0e:	4b21      	ldr	r3, [pc, #132]	@ (8013b94 <rmw_destroy_node+0xf0>)
 8013b10:	681c      	ldr	r4, [r3, #0]
 8013b12:	b16c      	cbz	r4, 8013b30 <rmw_destroy_node+0x8c>
 8013b14:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8013b18:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 8013b1a:	429d      	cmp	r5, r3
 8013b1c:	d1f9      	bne.n	8013b12 <rmw_destroy_node+0x6e>
 8013b1e:	317c      	adds	r1, #124	@ 0x7c
 8013b20:	4638      	mov	r0, r7
 8013b22:	f000 f993 	bl	8013e4c <rmw_destroy_service>
 8013b26:	2801      	cmp	r0, #1
 8013b28:	4606      	mov	r6, r0
 8013b2a:	d0e3      	beq.n	8013af4 <rmw_destroy_node+0x50>
 8013b2c:	2c00      	cmp	r4, #0
 8013b2e:	d1f1      	bne.n	8013b14 <rmw_destroy_node+0x70>
 8013b30:	4b19      	ldr	r3, [pc, #100]	@ (8013b98 <rmw_destroy_node+0xf4>)
 8013b32:	681c      	ldr	r4, [r3, #0]
 8013b34:	b16c      	cbz	r4, 8013b52 <rmw_destroy_node+0xae>
 8013b36:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8013b3a:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 8013b3c:	429d      	cmp	r5, r3
 8013b3e:	d1f9      	bne.n	8013b34 <rmw_destroy_node+0x90>
 8013b40:	317c      	adds	r1, #124	@ 0x7c
 8013b42:	4638      	mov	r0, r7
 8013b44:	f7ff fc00 	bl	8013348 <rmw_destroy_client>
 8013b48:	2801      	cmp	r0, #1
 8013b4a:	4606      	mov	r6, r0
 8013b4c:	d0d2      	beq.n	8013af4 <rmw_destroy_node+0x50>
 8013b4e:	2c00      	cmp	r4, #0
 8013b50:	d1f1      	bne.n	8013b36 <rmw_destroy_node+0x92>
 8013b52:	6928      	ldr	r0, [r5, #16]
 8013b54:	696a      	ldr	r2, [r5, #20]
 8013b56:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8013b5a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8013b5e:	6819      	ldr	r1, [r3, #0]
 8013b60:	f7f9 f850 	bl	800cc04 <uxr_buffer_delete_entity>
 8013b64:	4602      	mov	r2, r0
 8013b66:	6928      	ldr	r0, [r5, #16]
 8013b68:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8013b6c:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8013b70:	f7f7 fb58 	bl	800b224 <run_xrce_session>
 8013b74:	2800      	cmp	r0, #0
 8013b76:	bf08      	it	eq
 8013b78:	2602      	moveq	r6, #2
 8013b7a:	4638      	mov	r0, r7
 8013b7c:	f7f7 f9e0 	bl	800af40 <rmw_uxrce_fini_node_memory>
 8013b80:	4630      	mov	r0, r6
 8013b82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013b84:	4626      	mov	r6, r4
 8013b86:	e7a6      	b.n	8013ad6 <rmw_destroy_node+0x32>
 8013b88:	08019240 	.word	0x08019240
 8013b8c:	2000beec 	.word	0x2000beec
 8013b90:	2000bf2c 	.word	0x2000bf2c
 8013b94:	2000befc 	.word	0x2000befc
 8013b98:	20007610 	.word	0x20007610

08013b9c <rmw_node_get_graph_guard_condition>:
 8013b9c:	6843      	ldr	r3, [r0, #4]
 8013b9e:	6918      	ldr	r0, [r3, #16]
 8013ba0:	f500 705a 	add.w	r0, r0, #872	@ 0x368
 8013ba4:	4770      	bx	lr
 8013ba6:	bf00      	nop

08013ba8 <rmw_send_request>:
 8013ba8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013bac:	4604      	mov	r4, r0
 8013bae:	6800      	ldr	r0, [r0, #0]
 8013bb0:	b08b      	sub	sp, #44	@ 0x2c
 8013bb2:	460e      	mov	r6, r1
 8013bb4:	4615      	mov	r5, r2
 8013bb6:	b128      	cbz	r0, 8013bc4 <rmw_send_request+0x1c>
 8013bb8:	4b21      	ldr	r3, [pc, #132]	@ (8013c40 <rmw_send_request+0x98>)
 8013bba:	6819      	ldr	r1, [r3, #0]
 8013bbc:	f7ec fb08 	bl	80001d0 <strcmp>
 8013bc0:	2800      	cmp	r0, #0
 8013bc2:	d139      	bne.n	8013c38 <rmw_send_request+0x90>
 8013bc4:	6864      	ldr	r4, [r4, #4]
 8013bc6:	6963      	ldr	r3, [r4, #20]
 8013bc8:	f8d4 8078 	ldr.w	r8, [r4, #120]	@ 0x78
 8013bcc:	689b      	ldr	r3, [r3, #8]
 8013bce:	4798      	blx	r3
 8013bd0:	f8d0 9004 	ldr.w	r9, [r0, #4]
 8013bd4:	4630      	mov	r0, r6
 8013bd6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8013bda:	4798      	blx	r3
 8013bdc:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8013be0:	9000      	str	r0, [sp, #0]
 8013be2:	6922      	ldr	r2, [r4, #16]
 8013be4:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 8013be6:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 8013bea:	ab02      	add	r3, sp, #8
 8013bec:	f7fa fd08 	bl	800e600 <uxr_prepare_output_stream>
 8013bf0:	2700      	movs	r7, #0
 8013bf2:	6028      	str	r0, [r5, #0]
 8013bf4:	606f      	str	r7, [r5, #4]
 8013bf6:	b198      	cbz	r0, 8013c20 <rmw_send_request+0x78>
 8013bf8:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8013bfc:	a902      	add	r1, sp, #8
 8013bfe:	4630      	mov	r0, r6
 8013c00:	4798      	blx	r3
 8013c02:	f894 3072 	ldrb.w	r3, [r4, #114]	@ 0x72
 8013c06:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8013c0a:	2b01      	cmp	r3, #1
 8013c0c:	d00c      	beq.n	8013c28 <rmw_send_request+0x80>
 8013c0e:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 8013c10:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8013c14:	f7f9 ff08 	bl	800da28 <uxr_run_session_until_confirm_delivery>
 8013c18:	4638      	mov	r0, r7
 8013c1a:	b00b      	add	sp, #44	@ 0x2c
 8013c1c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013c20:	2001      	movs	r0, #1
 8013c22:	b00b      	add	sp, #44	@ 0x2c
 8013c24:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013c28:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8013c2c:	f7f9 fb3c 	bl	800d2a8 <uxr_flash_output_streams>
 8013c30:	4638      	mov	r0, r7
 8013c32:	b00b      	add	sp, #44	@ 0x2c
 8013c34:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013c38:	200c      	movs	r0, #12
 8013c3a:	b00b      	add	sp, #44	@ 0x2c
 8013c3c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013c40:	08019240 	.word	0x08019240

08013c44 <rmw_take_request>:
 8013c44:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013c48:	4605      	mov	r5, r0
 8013c4a:	6800      	ldr	r0, [r0, #0]
 8013c4c:	b089      	sub	sp, #36	@ 0x24
 8013c4e:	460c      	mov	r4, r1
 8013c50:	4690      	mov	r8, r2
 8013c52:	461e      	mov	r6, r3
 8013c54:	b128      	cbz	r0, 8013c62 <rmw_take_request+0x1e>
 8013c56:	4b28      	ldr	r3, [pc, #160]	@ (8013cf8 <rmw_take_request+0xb4>)
 8013c58:	6819      	ldr	r1, [r3, #0]
 8013c5a:	f7ec fab9 	bl	80001d0 <strcmp>
 8013c5e:	2800      	cmp	r0, #0
 8013c60:	d146      	bne.n	8013cf0 <rmw_take_request+0xac>
 8013c62:	b10e      	cbz	r6, 8013c68 <rmw_take_request+0x24>
 8013c64:	2300      	movs	r3, #0
 8013c66:	7033      	strb	r3, [r6, #0]
 8013c68:	f8d5 9004 	ldr.w	r9, [r5, #4]
 8013c6c:	f7f7 fa5c 	bl	800b128 <rmw_uxrce_clean_expired_static_input_buffer>
 8013c70:	4648      	mov	r0, r9
 8013c72:	f7f7 fa31 	bl	800b0d8 <rmw_uxrce_find_static_input_buffer_by_owner>
 8013c76:	4607      	mov	r7, r0
 8013c78:	b3b0      	cbz	r0, 8013ce8 <rmw_take_request+0xa4>
 8013c7a:	6885      	ldr	r5, [r0, #8]
 8013c7c:	f8d5 3838 	ldr.w	r3, [r5, #2104]	@ 0x838
 8013c80:	f8d5 283c 	ldr.w	r2, [r5, #2108]	@ 0x83c
 8013c84:	e9c4 2308 	strd	r2, r3, [r4, #32]
 8013c88:	f895 3837 	ldrb.w	r3, [r5, #2103]	@ 0x837
 8013c8c:	7423      	strb	r3, [r4, #16]
 8013c8e:	f8b5 3834 	ldrh.w	r3, [r5, #2100]	@ 0x834
 8013c92:	f895 2836 	ldrb.w	r2, [r5, #2102]	@ 0x836
 8013c96:	74e2      	strb	r2, [r4, #19]
 8013c98:	f8a4 3011 	strh.w	r3, [r4, #17]
 8013c9c:	f8d5 2828 	ldr.w	r2, [r5, #2088]	@ 0x828
 8013ca0:	f8d5 382c 	ldr.w	r3, [r5, #2092]	@ 0x82c
 8013ca4:	f8d5 1830 	ldr.w	r1, [r5, #2096]	@ 0x830
 8013ca8:	61e1      	str	r1, [r4, #28]
 8013caa:	6162      	str	r2, [r4, #20]
 8013cac:	61a3      	str	r3, [r4, #24]
 8013cae:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8013cb2:	689b      	ldr	r3, [r3, #8]
 8013cb4:	4798      	blx	r3
 8013cb6:	6844      	ldr	r4, [r0, #4]
 8013cb8:	f8d5 2810 	ldr.w	r2, [r5, #2064]	@ 0x810
 8013cbc:	f105 0110 	add.w	r1, r5, #16
 8013cc0:	4668      	mov	r0, sp
 8013cc2:	f7f8 feab 	bl	800ca1c <ucdr_init_buffer>
 8013cc6:	68e3      	ldr	r3, [r4, #12]
 8013cc8:	4641      	mov	r1, r8
 8013cca:	4668      	mov	r0, sp
 8013ccc:	4798      	blx	r3
 8013cce:	4639      	mov	r1, r7
 8013cd0:	4604      	mov	r4, r0
 8013cd2:	480a      	ldr	r0, [pc, #40]	@ (8013cfc <rmw_take_request+0xb8>)
 8013cd4:	f7ff fb24 	bl	8013320 <put_memory>
 8013cd8:	b106      	cbz	r6, 8013cdc <rmw_take_request+0x98>
 8013cda:	7034      	strb	r4, [r6, #0]
 8013cdc:	f084 0001 	eor.w	r0, r4, #1
 8013ce0:	b2c0      	uxtb	r0, r0
 8013ce2:	b009      	add	sp, #36	@ 0x24
 8013ce4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013ce8:	2001      	movs	r0, #1
 8013cea:	b009      	add	sp, #36	@ 0x24
 8013cec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013cf0:	200c      	movs	r0, #12
 8013cf2:	b009      	add	sp, #36	@ 0x24
 8013cf4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013cf8:	08019240 	.word	0x08019240
 8013cfc:	2000bf1c 	.word	0x2000bf1c

08013d00 <rmw_send_response>:
 8013d00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013d02:	4605      	mov	r5, r0
 8013d04:	6800      	ldr	r0, [r0, #0]
 8013d06:	b091      	sub	sp, #68	@ 0x44
 8013d08:	460c      	mov	r4, r1
 8013d0a:	4616      	mov	r6, r2
 8013d0c:	b128      	cbz	r0, 8013d1a <rmw_send_response+0x1a>
 8013d0e:	4b29      	ldr	r3, [pc, #164]	@ (8013db4 <rmw_send_response+0xb4>)
 8013d10:	6819      	ldr	r1, [r3, #0]
 8013d12:	f7ec fa5d 	bl	80001d0 <strcmp>
 8013d16:	2800      	cmp	r0, #0
 8013d18:	d141      	bne.n	8013d9e <rmw_send_response+0x9e>
 8013d1a:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 8013d1e:	9306      	str	r3, [sp, #24]
 8013d20:	4623      	mov	r3, r4
 8013d22:	9207      	str	r2, [sp, #28]
 8013d24:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013d28:	686d      	ldr	r5, [r5, #4]
 8013d2a:	789b      	ldrb	r3, [r3, #2]
 8013d2c:	68a1      	ldr	r1, [r4, #8]
 8013d2e:	f88d 2017 	strb.w	r2, [sp, #23]
 8013d32:	f88d 3016 	strb.w	r3, [sp, #22]
 8013d36:	68e2      	ldr	r2, [r4, #12]
 8013d38:	f8b4 3001 	ldrh.w	r3, [r4, #1]
 8013d3c:	6860      	ldr	r0, [r4, #4]
 8013d3e:	f8ad 3014 	strh.w	r3, [sp, #20]
 8013d42:	ab02      	add	r3, sp, #8
 8013d44:	c307      	stmia	r3!, {r0, r1, r2}
 8013d46:	696b      	ldr	r3, [r5, #20]
 8013d48:	6faf      	ldr	r7, [r5, #120]	@ 0x78
 8013d4a:	68db      	ldr	r3, [r3, #12]
 8013d4c:	4798      	blx	r3
 8013d4e:	6844      	ldr	r4, [r0, #4]
 8013d50:	4630      	mov	r0, r6
 8013d52:	6923      	ldr	r3, [r4, #16]
 8013d54:	4798      	blx	r3
 8013d56:	f100 0318 	add.w	r3, r0, #24
 8013d5a:	6938      	ldr	r0, [r7, #16]
 8013d5c:	9300      	str	r3, [sp, #0]
 8013d5e:	692a      	ldr	r2, [r5, #16]
 8013d60:	6f29      	ldr	r1, [r5, #112]	@ 0x70
 8013d62:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8013d66:	ab08      	add	r3, sp, #32
 8013d68:	f7fa fc4a 	bl	800e600 <uxr_prepare_output_stream>
 8013d6c:	b910      	cbnz	r0, 8013d74 <rmw_send_response+0x74>
 8013d6e:	2001      	movs	r0, #1
 8013d70:	b011      	add	sp, #68	@ 0x44
 8013d72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013d74:	a902      	add	r1, sp, #8
 8013d76:	a808      	add	r0, sp, #32
 8013d78:	f7fb fd7a 	bl	800f870 <uxr_serialize_SampleIdentity>
 8013d7c:	68a3      	ldr	r3, [r4, #8]
 8013d7e:	a908      	add	r1, sp, #32
 8013d80:	4630      	mov	r0, r6
 8013d82:	4798      	blx	r3
 8013d84:	f895 3072 	ldrb.w	r3, [r5, #114]	@ 0x72
 8013d88:	6938      	ldr	r0, [r7, #16]
 8013d8a:	2b01      	cmp	r3, #1
 8013d8c:	d00a      	beq.n	8013da4 <rmw_send_response+0xa4>
 8013d8e:	6f69      	ldr	r1, [r5, #116]	@ 0x74
 8013d90:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8013d94:	f7f9 fe48 	bl	800da28 <uxr_run_session_until_confirm_delivery>
 8013d98:	2000      	movs	r0, #0
 8013d9a:	b011      	add	sp, #68	@ 0x44
 8013d9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013d9e:	200c      	movs	r0, #12
 8013da0:	b011      	add	sp, #68	@ 0x44
 8013da2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013da4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8013da8:	f7f9 fa7e 	bl	800d2a8 <uxr_flash_output_streams>
 8013dac:	2000      	movs	r0, #0
 8013dae:	b011      	add	sp, #68	@ 0x44
 8013db0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013db2:	bf00      	nop
 8013db4:	08019240 	.word	0x08019240

08013db8 <rmw_take_response>:
 8013db8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013dbc:	4604      	mov	r4, r0
 8013dbe:	6800      	ldr	r0, [r0, #0]
 8013dc0:	b088      	sub	sp, #32
 8013dc2:	4688      	mov	r8, r1
 8013dc4:	4617      	mov	r7, r2
 8013dc6:	461d      	mov	r5, r3
 8013dc8:	b120      	cbz	r0, 8013dd4 <rmw_take_response+0x1c>
 8013dca:	4b1e      	ldr	r3, [pc, #120]	@ (8013e44 <rmw_take_response+0x8c>)
 8013dcc:	6819      	ldr	r1, [r3, #0]
 8013dce:	f7ec f9ff 	bl	80001d0 <strcmp>
 8013dd2:	bb78      	cbnz	r0, 8013e34 <rmw_take_response+0x7c>
 8013dd4:	b10d      	cbz	r5, 8013dda <rmw_take_response+0x22>
 8013dd6:	2300      	movs	r3, #0
 8013dd8:	702b      	strb	r3, [r5, #0]
 8013dda:	6864      	ldr	r4, [r4, #4]
 8013ddc:	f7f7 f9a4 	bl	800b128 <rmw_uxrce_clean_expired_static_input_buffer>
 8013de0:	4620      	mov	r0, r4
 8013de2:	f7f7 f979 	bl	800b0d8 <rmw_uxrce_find_static_input_buffer_by_owner>
 8013de6:	4606      	mov	r6, r0
 8013de8:	b340      	cbz	r0, 8013e3c <rmw_take_response+0x84>
 8013dea:	6963      	ldr	r3, [r4, #20]
 8013dec:	6884      	ldr	r4, [r0, #8]
 8013dee:	68db      	ldr	r3, [r3, #12]
 8013df0:	f504 6203 	add.w	r2, r4, #2096	@ 0x830
 8013df4:	e952 0102 	ldrd	r0, r1, [r2, #-8]
 8013df8:	e9c8 0108 	strd	r0, r1, [r8, #32]
 8013dfc:	4798      	blx	r3
 8013dfe:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8013e02:	f8d4 2810 	ldr.w	r2, [r4, #2064]	@ 0x810
 8013e06:	f104 0110 	add.w	r1, r4, #16
 8013e0a:	4668      	mov	r0, sp
 8013e0c:	f7f8 fe06 	bl	800ca1c <ucdr_init_buffer>
 8013e10:	4639      	mov	r1, r7
 8013e12:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8013e16:	4668      	mov	r0, sp
 8013e18:	4798      	blx	r3
 8013e1a:	4631      	mov	r1, r6
 8013e1c:	4604      	mov	r4, r0
 8013e1e:	480a      	ldr	r0, [pc, #40]	@ (8013e48 <rmw_take_response+0x90>)
 8013e20:	f7ff fa7e 	bl	8013320 <put_memory>
 8013e24:	b105      	cbz	r5, 8013e28 <rmw_take_response+0x70>
 8013e26:	702c      	strb	r4, [r5, #0]
 8013e28:	f084 0001 	eor.w	r0, r4, #1
 8013e2c:	b2c0      	uxtb	r0, r0
 8013e2e:	b008      	add	sp, #32
 8013e30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013e34:	200c      	movs	r0, #12
 8013e36:	b008      	add	sp, #32
 8013e38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013e3c:	2001      	movs	r0, #1
 8013e3e:	b008      	add	sp, #32
 8013e40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013e44:	08019240 	.word	0x08019240
 8013e48:	2000bf1c 	.word	0x2000bf1c

08013e4c <rmw_destroy_service>:
 8013e4c:	b570      	push	{r4, r5, r6, lr}
 8013e4e:	b128      	cbz	r0, 8013e5c <rmw_destroy_service+0x10>
 8013e50:	4604      	mov	r4, r0
 8013e52:	6800      	ldr	r0, [r0, #0]
 8013e54:	460d      	mov	r5, r1
 8013e56:	f7f7 fa65 	bl	800b324 <is_uxrce_rmw_identifier_valid>
 8013e5a:	b910      	cbnz	r0, 8013e62 <rmw_destroy_service+0x16>
 8013e5c:	2401      	movs	r4, #1
 8013e5e:	4620      	mov	r0, r4
 8013e60:	bd70      	pop	{r4, r5, r6, pc}
 8013e62:	6863      	ldr	r3, [r4, #4]
 8013e64:	2b00      	cmp	r3, #0
 8013e66:	d0f9      	beq.n	8013e5c <rmw_destroy_service+0x10>
 8013e68:	2d00      	cmp	r5, #0
 8013e6a:	d0f7      	beq.n	8013e5c <rmw_destroy_service+0x10>
 8013e6c:	6828      	ldr	r0, [r5, #0]
 8013e6e:	f7f7 fa59 	bl	800b324 <is_uxrce_rmw_identifier_valid>
 8013e72:	2800      	cmp	r0, #0
 8013e74:	d0f2      	beq.n	8013e5c <rmw_destroy_service+0x10>
 8013e76:	686e      	ldr	r6, [r5, #4]
 8013e78:	2e00      	cmp	r6, #0
 8013e7a:	d0ef      	beq.n	8013e5c <rmw_destroy_service+0x10>
 8013e7c:	6864      	ldr	r4, [r4, #4]
 8013e7e:	6932      	ldr	r2, [r6, #16]
 8013e80:	6920      	ldr	r0, [r4, #16]
 8013e82:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8013e86:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8013e8a:	6819      	ldr	r1, [r3, #0]
 8013e8c:	f001 fd86 	bl	801599c <uxr_buffer_cancel_data>
 8013e90:	4602      	mov	r2, r0
 8013e92:	6920      	ldr	r0, [r4, #16]
 8013e94:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8013e98:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8013e9c:	f7f7 f9c2 	bl	800b224 <run_xrce_session>
 8013ea0:	6920      	ldr	r0, [r4, #16]
 8013ea2:	6932      	ldr	r2, [r6, #16]
 8013ea4:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8013ea8:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8013eac:	6819      	ldr	r1, [r3, #0]
 8013eae:	f7f8 fea9 	bl	800cc04 <uxr_buffer_delete_entity>
 8013eb2:	4602      	mov	r2, r0
 8013eb4:	6920      	ldr	r0, [r4, #16]
 8013eb6:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8013eba:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8013ebe:	f7f7 f9b1 	bl	800b224 <run_xrce_session>
 8013ec2:	2800      	cmp	r0, #0
 8013ec4:	4628      	mov	r0, r5
 8013ec6:	bf14      	ite	ne
 8013ec8:	2400      	movne	r4, #0
 8013eca:	2402      	moveq	r4, #2
 8013ecc:	f7f7 f87c 	bl	800afc8 <rmw_uxrce_fini_service_memory>
 8013ed0:	e7c5      	b.n	8013e5e <rmw_destroy_service+0x12>
 8013ed2:	bf00      	nop

08013ed4 <rmw_create_subscription>:
 8013ed4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013ed8:	b08d      	sub	sp, #52	@ 0x34
 8013eda:	2800      	cmp	r0, #0
 8013edc:	f000 80d1 	beq.w	8014082 <rmw_create_subscription+0x1ae>
 8013ee0:	460e      	mov	r6, r1
 8013ee2:	2900      	cmp	r1, #0
 8013ee4:	f000 80cd 	beq.w	8014082 <rmw_create_subscription+0x1ae>
 8013ee8:	4604      	mov	r4, r0
 8013eea:	6800      	ldr	r0, [r0, #0]
 8013eec:	4615      	mov	r5, r2
 8013eee:	4698      	mov	r8, r3
 8013ef0:	f7f7 fa18 	bl	800b324 <is_uxrce_rmw_identifier_valid>
 8013ef4:	2800      	cmp	r0, #0
 8013ef6:	f000 80c4 	beq.w	8014082 <rmw_create_subscription+0x1ae>
 8013efa:	2d00      	cmp	r5, #0
 8013efc:	f000 80c1 	beq.w	8014082 <rmw_create_subscription+0x1ae>
 8013f00:	782b      	ldrb	r3, [r5, #0]
 8013f02:	2b00      	cmp	r3, #0
 8013f04:	f000 80bd 	beq.w	8014082 <rmw_create_subscription+0x1ae>
 8013f08:	f1b8 0f00 	cmp.w	r8, #0
 8013f0c:	f000 80b9 	beq.w	8014082 <rmw_create_subscription+0x1ae>
 8013f10:	485e      	ldr	r0, [pc, #376]	@ (801408c <rmw_create_subscription+0x1b8>)
 8013f12:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8013f16:	f7ff f9f3 	bl	8013300 <get_memory>
 8013f1a:	4604      	mov	r4, r0
 8013f1c:	2800      	cmp	r0, #0
 8013f1e:	f000 80b1 	beq.w	8014084 <rmw_create_subscription+0x1b0>
 8013f22:	6887      	ldr	r7, [r0, #8]
 8013f24:	f8c7 7080 	str.w	r7, [r7, #128]	@ 0x80
 8013f28:	f7ff fa52 	bl	80133d0 <rmw_get_implementation_identifier>
 8013f2c:	f107 0a98 	add.w	sl, r7, #152	@ 0x98
 8013f30:	67f8      	str	r0, [r7, #124]	@ 0x7c
 8013f32:	f8c7 a084 	str.w	sl, [r7, #132]	@ 0x84
 8013f36:	4628      	mov	r0, r5
 8013f38:	f7ec f954 	bl	80001e4 <strlen>
 8013f3c:	3001      	adds	r0, #1
 8013f3e:	283c      	cmp	r0, #60	@ 0x3c
 8013f40:	f107 047c 	add.w	r4, r7, #124	@ 0x7c
 8013f44:	f200 8096 	bhi.w	8014074 <rmw_create_subscription+0x1a0>
 8013f48:	4a51      	ldr	r2, [pc, #324]	@ (8014090 <rmw_create_subscription+0x1bc>)
 8013f4a:	462b      	mov	r3, r5
 8013f4c:	213c      	movs	r1, #60	@ 0x3c
 8013f4e:	4650      	mov	r0, sl
 8013f50:	f003 fb66 	bl	8017620 <sniprintf>
 8013f54:	4641      	mov	r1, r8
 8013f56:	f8c7 9020 	str.w	r9, [r7, #32]
 8013f5a:	2250      	movs	r2, #80	@ 0x50
 8013f5c:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8013f60:	f003 fdeb 	bl	8017b3a <memcpy>
 8013f64:	494b      	ldr	r1, [pc, #300]	@ (8014094 <rmw_create_subscription+0x1c0>)
 8013f66:	4630      	mov	r0, r6
 8013f68:	f7f7 f9ea 	bl	800b340 <get_message_typesupport_handle>
 8013f6c:	2800      	cmp	r0, #0
 8013f6e:	f000 8081 	beq.w	8014074 <rmw_create_subscription+0x1a0>
 8013f72:	6842      	ldr	r2, [r0, #4]
 8013f74:	61ba      	str	r2, [r7, #24]
 8013f76:	2a00      	cmp	r2, #0
 8013f78:	d07c      	beq.n	8014074 <rmw_create_subscription+0x1a0>
 8013f7a:	4629      	mov	r1, r5
 8013f7c:	4643      	mov	r3, r8
 8013f7e:	4648      	mov	r0, r9
 8013f80:	f7ff fc8c 	bl	801389c <create_topic>
 8013f84:	61f8      	str	r0, [r7, #28]
 8013f86:	2800      	cmp	r0, #0
 8013f88:	d078      	beq.n	801407c <rmw_create_subscription+0x1a8>
 8013f8a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8013f8e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8013f92:	2104      	movs	r1, #4
 8013f94:	f8b3 059c 	ldrh.w	r0, [r3, #1436]	@ 0x59c
 8013f98:	1c42      	adds	r2, r0, #1
 8013f9a:	f8a3 259c 	strh.w	r2, [r3, #1436]	@ 0x59c
 8013f9e:	f7f9 f833 	bl	800d008 <uxr_object_id>
 8013fa2:	6138      	str	r0, [r7, #16]
 8013fa4:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8013fa8:	2506      	movs	r5, #6
 8013faa:	f8d0 3384 	ldr.w	r3, [r0, #900]	@ 0x384
 8013fae:	9500      	str	r5, [sp, #0]
 8013fb0:	6819      	ldr	r1, [r3, #0]
 8013fb2:	693a      	ldr	r2, [r7, #16]
 8013fb4:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8013fb8:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8013fbc:	f7f8 ff06 	bl	800cdcc <uxr_buffer_create_subscriber_bin>
 8013fc0:	4602      	mov	r2, r0
 8013fc2:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8013fc6:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8013fca:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8013fce:	f7f7 f929 	bl	800b224 <run_xrce_session>
 8013fd2:	2800      	cmp	r0, #0
 8013fd4:	d04e      	beq.n	8014074 <rmw_create_subscription+0x1a0>
 8013fd6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8013fda:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8013fde:	4629      	mov	r1, r5
 8013fe0:	f8b3 059e 	ldrh.w	r0, [r3, #1438]	@ 0x59e
 8013fe4:	1c42      	adds	r2, r0, #1
 8013fe6:	f8a3 259e 	strh.w	r2, [r3, #1438]	@ 0x59e
 8013fea:	f7f9 f80d 	bl	800d008 <uxr_object_id>
 8013fee:	ae08      	add	r6, sp, #32
 8013ff0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8013ff4:	69fb      	ldr	r3, [r7, #28]
 8013ff6:	6178      	str	r0, [r7, #20]
 8013ff8:	4641      	mov	r1, r8
 8013ffa:	4630      	mov	r0, r6
 8013ffc:	f8da b384 	ldr.w	fp, [sl, #900]	@ 0x384
 8014000:	9305      	str	r3, [sp, #20]
 8014002:	f7f7 f92b 	bl	800b25c <convert_qos_profile>
 8014006:	9503      	str	r5, [sp, #12]
 8014008:	e896 0003 	ldmia.w	r6, {r0, r1}
 801400c:	9b05      	ldr	r3, [sp, #20]
 801400e:	9001      	str	r0, [sp, #4]
 8014010:	f8ad 1008 	strh.w	r1, [sp, #8]
 8014014:	691b      	ldr	r3, [r3, #16]
 8014016:	9300      	str	r3, [sp, #0]
 8014018:	e9d7 3204 	ldrd	r3, r2, [r7, #16]
 801401c:	f8db 1000 	ldr.w	r1, [fp]
 8014020:	f50a 7028 	add.w	r0, sl, #672	@ 0x2a0
 8014024:	f7f8 ff78 	bl	800cf18 <uxr_buffer_create_datareader_bin>
 8014028:	4602      	mov	r2, r0
 801402a:	f8d9 0010 	ldr.w	r0, [r9, #16]
 801402e:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8014032:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8014036:	f7f7 f8f5 	bl	800b224 <run_xrce_session>
 801403a:	b1d8      	cbz	r0, 8014074 <rmw_create_subscription+0x1a0>
 801403c:	f898 3008 	ldrb.w	r3, [r8, #8]
 8014040:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8014044:	2b02      	cmp	r3, #2
 8014046:	bf0c      	ite	eq
 8014048:	f8d0 3380 	ldreq.w	r3, [r0, #896]	@ 0x380
 801404c:	f8d0 3374 	ldrne.w	r3, [r0, #884]	@ 0x374
 8014050:	9307      	str	r3, [sp, #28]
 8014052:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8014056:	2200      	movs	r2, #0
 8014058:	e9cd 120a 	strd	r1, r2, [sp, #40]	@ 0x28
 801405c:	ab0a      	add	r3, sp, #40	@ 0x28
 801405e:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8014062:	9300      	str	r3, [sp, #0]
 8014064:	697a      	ldr	r2, [r7, #20]
 8014066:	9b07      	ldr	r3, [sp, #28]
 8014068:	6809      	ldr	r1, [r1, #0]
 801406a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801406e:	f001 fc5b 	bl	8015928 <uxr_buffer_request_data>
 8014072:	e007      	b.n	8014084 <rmw_create_subscription+0x1b0>
 8014074:	69f8      	ldr	r0, [r7, #28]
 8014076:	b108      	cbz	r0, 801407c <rmw_create_subscription+0x1a8>
 8014078:	f7f6 ffd2 	bl	800b020 <rmw_uxrce_fini_topic_memory>
 801407c:	4620      	mov	r0, r4
 801407e:	f7f6 ff8d 	bl	800af9c <rmw_uxrce_fini_subscription_memory>
 8014082:	2400      	movs	r4, #0
 8014084:	4620      	mov	r0, r4
 8014086:	b00d      	add	sp, #52	@ 0x34
 8014088:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801408c:	2000bf2c 	.word	0x2000bf2c
 8014090:	08018abc 	.word	0x08018abc
 8014094:	08018a88 	.word	0x08018a88

08014098 <rmw_subscription_get_actual_qos>:
 8014098:	b150      	cbz	r0, 80140b0 <rmw_subscription_get_actual_qos+0x18>
 801409a:	b508      	push	{r3, lr}
 801409c:	460b      	mov	r3, r1
 801409e:	b149      	cbz	r1, 80140b4 <rmw_subscription_get_actual_qos+0x1c>
 80140a0:	6841      	ldr	r1, [r0, #4]
 80140a2:	2250      	movs	r2, #80	@ 0x50
 80140a4:	3128      	adds	r1, #40	@ 0x28
 80140a6:	4618      	mov	r0, r3
 80140a8:	f003 fd47 	bl	8017b3a <memcpy>
 80140ac:	2000      	movs	r0, #0
 80140ae:	bd08      	pop	{r3, pc}
 80140b0:	200b      	movs	r0, #11
 80140b2:	4770      	bx	lr
 80140b4:	200b      	movs	r0, #11
 80140b6:	bd08      	pop	{r3, pc}

080140b8 <rmw_destroy_subscription>:
 80140b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80140ba:	b128      	cbz	r0, 80140c8 <rmw_destroy_subscription+0x10>
 80140bc:	4604      	mov	r4, r0
 80140be:	6800      	ldr	r0, [r0, #0]
 80140c0:	460d      	mov	r5, r1
 80140c2:	f7f7 f92f 	bl	800b324 <is_uxrce_rmw_identifier_valid>
 80140c6:	b910      	cbnz	r0, 80140ce <rmw_destroy_subscription+0x16>
 80140c8:	2401      	movs	r4, #1
 80140ca:	4620      	mov	r0, r4
 80140cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80140ce:	6863      	ldr	r3, [r4, #4]
 80140d0:	2b00      	cmp	r3, #0
 80140d2:	d0f9      	beq.n	80140c8 <rmw_destroy_subscription+0x10>
 80140d4:	2d00      	cmp	r5, #0
 80140d6:	d0f7      	beq.n	80140c8 <rmw_destroy_subscription+0x10>
 80140d8:	6828      	ldr	r0, [r5, #0]
 80140da:	f7f7 f923 	bl	800b324 <is_uxrce_rmw_identifier_valid>
 80140de:	2800      	cmp	r0, #0
 80140e0:	d0f2      	beq.n	80140c8 <rmw_destroy_subscription+0x10>
 80140e2:	686c      	ldr	r4, [r5, #4]
 80140e4:	2c00      	cmp	r4, #0
 80140e6:	d0ef      	beq.n	80140c8 <rmw_destroy_subscription+0x10>
 80140e8:	6a26      	ldr	r6, [r4, #32]
 80140ea:	6962      	ldr	r2, [r4, #20]
 80140ec:	6930      	ldr	r0, [r6, #16]
 80140ee:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80140f2:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80140f6:	6819      	ldr	r1, [r3, #0]
 80140f8:	f001 fc50 	bl	801599c <uxr_buffer_cancel_data>
 80140fc:	4602      	mov	r2, r0
 80140fe:	6930      	ldr	r0, [r6, #16]
 8014100:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8014104:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8014108:	f7f7 f88c 	bl	800b224 <run_xrce_session>
 801410c:	69e0      	ldr	r0, [r4, #28]
 801410e:	f7ff fc15 	bl	801393c <destroy_topic>
 8014112:	6a23      	ldr	r3, [r4, #32]
 8014114:	6962      	ldr	r2, [r4, #20]
 8014116:	6918      	ldr	r0, [r3, #16]
 8014118:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801411c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8014120:	6819      	ldr	r1, [r3, #0]
 8014122:	f7f8 fd6f 	bl	800cc04 <uxr_buffer_delete_entity>
 8014126:	6a23      	ldr	r3, [r4, #32]
 8014128:	6922      	ldr	r2, [r4, #16]
 801412a:	691b      	ldr	r3, [r3, #16]
 801412c:	f8d3 1388 	ldr.w	r1, [r3, #904]	@ 0x388
 8014130:	4604      	mov	r4, r0
 8014132:	6809      	ldr	r1, [r1, #0]
 8014134:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 8014138:	f7f8 fd64 	bl	800cc04 <uxr_buffer_delete_entity>
 801413c:	6937      	ldr	r7, [r6, #16]
 801413e:	4622      	mov	r2, r4
 8014140:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 8014144:	f8d7 1388 	ldr.w	r1, [r7, #904]	@ 0x388
 8014148:	4604      	mov	r4, r0
 801414a:	4638      	mov	r0, r7
 801414c:	f7f7 f86a 	bl	800b224 <run_xrce_session>
 8014150:	6936      	ldr	r6, [r6, #16]
 8014152:	4622      	mov	r2, r4
 8014154:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 8014158:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 801415c:	4604      	mov	r4, r0
 801415e:	4630      	mov	r0, r6
 8014160:	f7f7 f860 	bl	800b224 <run_xrce_session>
 8014164:	b12c      	cbz	r4, 8014172 <rmw_destroy_subscription+0xba>
 8014166:	b120      	cbz	r0, 8014172 <rmw_destroy_subscription+0xba>
 8014168:	2400      	movs	r4, #0
 801416a:	4628      	mov	r0, r5
 801416c:	f7f6 ff16 	bl	800af9c <rmw_uxrce_fini_subscription_memory>
 8014170:	e7ab      	b.n	80140ca <rmw_destroy_subscription+0x12>
 8014172:	2402      	movs	r4, #2
 8014174:	e7f9      	b.n	801416a <rmw_destroy_subscription+0xb2>
 8014176:	bf00      	nop

08014178 <rmw_take_with_info>:
 8014178:	b5f0      	push	{r4, r5, r6, r7, lr}
 801417a:	4604      	mov	r4, r0
 801417c:	6800      	ldr	r0, [r0, #0]
 801417e:	b089      	sub	sp, #36	@ 0x24
 8014180:	460f      	mov	r7, r1
 8014182:	4615      	mov	r5, r2
 8014184:	b128      	cbz	r0, 8014192 <rmw_take_with_info+0x1a>
 8014186:	4b24      	ldr	r3, [pc, #144]	@ (8014218 <rmw_take_with_info+0xa0>)
 8014188:	6819      	ldr	r1, [r3, #0]
 801418a:	f7ec f821 	bl	80001d0 <strcmp>
 801418e:	2800      	cmp	r0, #0
 8014190:	d13e      	bne.n	8014210 <rmw_take_with_info+0x98>
 8014192:	b305      	cbz	r5, 80141d6 <rmw_take_with_info+0x5e>
 8014194:	6864      	ldr	r4, [r4, #4]
 8014196:	2300      	movs	r3, #0
 8014198:	702b      	strb	r3, [r5, #0]
 801419a:	f7f6 ffc5 	bl	800b128 <rmw_uxrce_clean_expired_static_input_buffer>
 801419e:	4620      	mov	r0, r4
 80141a0:	f7f6 ff9a 	bl	800b0d8 <rmw_uxrce_find_static_input_buffer_by_owner>
 80141a4:	4606      	mov	r6, r0
 80141a6:	b1f0      	cbz	r0, 80141e6 <rmw_take_with_info+0x6e>
 80141a8:	6881      	ldr	r1, [r0, #8]
 80141aa:	4668      	mov	r0, sp
 80141ac:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 80141b0:	3110      	adds	r1, #16
 80141b2:	f7f8 fc33 	bl	800ca1c <ucdr_init_buffer>
 80141b6:	69a3      	ldr	r3, [r4, #24]
 80141b8:	4639      	mov	r1, r7
 80141ba:	68db      	ldr	r3, [r3, #12]
 80141bc:	4668      	mov	r0, sp
 80141be:	4798      	blx	r3
 80141c0:	4631      	mov	r1, r6
 80141c2:	4604      	mov	r4, r0
 80141c4:	4815      	ldr	r0, [pc, #84]	@ (801421c <rmw_take_with_info+0xa4>)
 80141c6:	f7ff f8ab 	bl	8013320 <put_memory>
 80141ca:	702c      	strb	r4, [r5, #0]
 80141cc:	f084 0001 	eor.w	r0, r4, #1
 80141d0:	b2c0      	uxtb	r0, r0
 80141d2:	b009      	add	sp, #36	@ 0x24
 80141d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80141d6:	6864      	ldr	r4, [r4, #4]
 80141d8:	f7f6 ffa6 	bl	800b128 <rmw_uxrce_clean_expired_static_input_buffer>
 80141dc:	4620      	mov	r0, r4
 80141de:	f7f6 ff7b 	bl	800b0d8 <rmw_uxrce_find_static_input_buffer_by_owner>
 80141e2:	4605      	mov	r5, r0
 80141e4:	b910      	cbnz	r0, 80141ec <rmw_take_with_info+0x74>
 80141e6:	2001      	movs	r0, #1
 80141e8:	b009      	add	sp, #36	@ 0x24
 80141ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80141ec:	68a9      	ldr	r1, [r5, #8]
 80141ee:	4668      	mov	r0, sp
 80141f0:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 80141f4:	3110      	adds	r1, #16
 80141f6:	f7f8 fc11 	bl	800ca1c <ucdr_init_buffer>
 80141fa:	69a3      	ldr	r3, [r4, #24]
 80141fc:	4639      	mov	r1, r7
 80141fe:	68db      	ldr	r3, [r3, #12]
 8014200:	4668      	mov	r0, sp
 8014202:	4798      	blx	r3
 8014204:	4629      	mov	r1, r5
 8014206:	4604      	mov	r4, r0
 8014208:	4804      	ldr	r0, [pc, #16]	@ (801421c <rmw_take_with_info+0xa4>)
 801420a:	f7ff f889 	bl	8013320 <put_memory>
 801420e:	e7dd      	b.n	80141cc <rmw_take_with_info+0x54>
 8014210:	200c      	movs	r0, #12
 8014212:	b009      	add	sp, #36	@ 0x24
 8014214:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014216:	bf00      	nop
 8014218:	08019240 	.word	0x08019240
 801421c:	2000bf1c 	.word	0x2000bf1c

08014220 <rmw_uxrce_transport_init>:
 8014220:	b508      	push	{r3, lr}
 8014222:	b108      	cbz	r0, 8014228 <rmw_uxrce_transport_init+0x8>
 8014224:	f100 0210 	add.w	r2, r0, #16
 8014228:	b139      	cbz	r1, 801423a <rmw_uxrce_transport_init+0x1a>
 801422a:	6949      	ldr	r1, [r1, #20]
 801422c:	4610      	mov	r0, r2
 801422e:	f000 fdfb 	bl	8014e28 <uxr_init_custom_transport>
 8014232:	f080 0001 	eor.w	r0, r0, #1
 8014236:	b2c0      	uxtb	r0, r0
 8014238:	bd08      	pop	{r3, pc}
 801423a:	4b04      	ldr	r3, [pc, #16]	@ (801424c <rmw_uxrce_transport_init+0x2c>)
 801423c:	4610      	mov	r0, r2
 801423e:	6859      	ldr	r1, [r3, #4]
 8014240:	f000 fdf2 	bl	8014e28 <uxr_init_custom_transport>
 8014244:	f080 0001 	eor.w	r0, r0, #1
 8014248:	b2c0      	uxtb	r0, r0
 801424a:	bd08      	pop	{r3, pc}
 801424c:	200075f4 	.word	0x200075f4

08014250 <rmw_wait>:
 8014250:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014254:	b089      	sub	sp, #36	@ 0x24
 8014256:	4605      	mov	r5, r0
 8014258:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801425a:	460e      	mov	r6, r1
 801425c:	4698      	mov	r8, r3
 801425e:	4691      	mov	r9, r2
 8014260:	2a00      	cmp	r2, #0
 8014262:	f000 810a 	beq.w	801447a <rmw_wait+0x22a>
 8014266:	b16c      	cbz	r4, 8014284 <rmw_wait+0x34>
 8014268:	4bae      	ldr	r3, [pc, #696]	@ (8014524 <rmw_wait+0x2d4>)
 801426a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801426c:	af04      	add	r7, sp, #16
 801426e:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 8014272:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8014276:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801427a:	f7fe fe75 	bl	8012f68 <rmw_time_equal>
 801427e:	2800      	cmp	r0, #0
 8014280:	f000 8127 	beq.w	80144d2 <rmw_wait+0x282>
 8014284:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8014288:	f7f6 ff4e 	bl	800b128 <rmw_uxrce_clean_expired_static_input_buffer>
 801428c:	4ba6      	ldr	r3, [pc, #664]	@ (8014528 <rmw_wait+0x2d8>)
 801428e:	681c      	ldr	r4, [r3, #0]
 8014290:	b14c      	cbz	r4, 80142a6 <rmw_wait+0x56>
 8014292:	4623      	mov	r3, r4
 8014294:	2100      	movs	r1, #0
 8014296:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
 801429a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801429e:	f882 15a4 	strb.w	r1, [r2, #1444]	@ 0x5a4
 80142a2:	2b00      	cmp	r3, #0
 80142a4:	d1f7      	bne.n	8014296 <rmw_wait+0x46>
 80142a6:	f1b9 0f00 	cmp.w	r9, #0
 80142aa:	d011      	beq.n	80142d0 <rmw_wait+0x80>
 80142ac:	f8d9 1000 	ldr.w	r1, [r9]
 80142b0:	b171      	cbz	r1, 80142d0 <rmw_wait+0x80>
 80142b2:	f8d9 c004 	ldr.w	ip, [r9, #4]
 80142b6:	2300      	movs	r3, #0
 80142b8:	2001      	movs	r0, #1
 80142ba:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 80142be:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 80142c0:	6912      	ldr	r2, [r2, #16]
 80142c2:	3301      	adds	r3, #1
 80142c4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80142c8:	4299      	cmp	r1, r3
 80142ca:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 80142ce:	d1f4      	bne.n	80142ba <rmw_wait+0x6a>
 80142d0:	f1b8 0f00 	cmp.w	r8, #0
 80142d4:	d011      	beq.n	80142fa <rmw_wait+0xaa>
 80142d6:	f8d8 1000 	ldr.w	r1, [r8]
 80142da:	b171      	cbz	r1, 80142fa <rmw_wait+0xaa>
 80142dc:	f8d8 c004 	ldr.w	ip, [r8, #4]
 80142e0:	2300      	movs	r3, #0
 80142e2:	2001      	movs	r0, #1
 80142e4:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 80142e8:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 80142ea:	6912      	ldr	r2, [r2, #16]
 80142ec:	3301      	adds	r3, #1
 80142ee:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80142f2:	4299      	cmp	r1, r3
 80142f4:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 80142f8:	d1f4      	bne.n	80142e4 <rmw_wait+0x94>
 80142fa:	b185      	cbz	r5, 801431e <rmw_wait+0xce>
 80142fc:	6829      	ldr	r1, [r5, #0]
 80142fe:	b171      	cbz	r1, 801431e <rmw_wait+0xce>
 8014300:	f8d5 c004 	ldr.w	ip, [r5, #4]
 8014304:	2300      	movs	r3, #0
 8014306:	2001      	movs	r0, #1
 8014308:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801430c:	6a12      	ldr	r2, [r2, #32]
 801430e:	6912      	ldr	r2, [r2, #16]
 8014310:	3301      	adds	r3, #1
 8014312:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8014316:	4299      	cmp	r1, r3
 8014318:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 801431c:	d1f4      	bne.n	8014308 <rmw_wait+0xb8>
 801431e:	b34c      	cbz	r4, 8014374 <rmw_wait+0x124>
 8014320:	4622      	mov	r2, r4
 8014322:	2300      	movs	r3, #0
 8014324:	e9d2 2101 	ldrd	r2, r1, [r2, #4]
 8014328:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 801432c:	f891 15a4 	ldrb.w	r1, [r1, #1444]	@ 0x5a4
 8014330:	440b      	add	r3, r1
 8014332:	b2db      	uxtb	r3, r3
 8014334:	2a00      	cmp	r2, #0
 8014336:	d1f5      	bne.n	8014324 <rmw_wait+0xd4>
 8014338:	2b00      	cmp	r3, #0
 801433a:	f000 8084 	beq.w	8014446 <rmw_wait+0x1f6>
 801433e:	1c7a      	adds	r2, r7, #1
 8014340:	d00d      	beq.n	801435e <rmw_wait+0x10e>
 8014342:	ee07 7a90 	vmov	s15, r7
 8014346:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 801434a:	ee07 3a90 	vmov	s15, r3
 801434e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014352:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8014356:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 801435a:	ee17 7a90 	vmov	r7, s15
 801435e:	68a0      	ldr	r0, [r4, #8]
 8014360:	f500 5380 	add.w	r3, r0, #4096	@ 0x1000
 8014364:	f893 35a4 	ldrb.w	r3, [r3, #1444]	@ 0x5a4
 8014368:	2b00      	cmp	r3, #0
 801436a:	f040 8090 	bne.w	801448e <rmw_wait+0x23e>
 801436e:	6864      	ldr	r4, [r4, #4]
 8014370:	2c00      	cmp	r4, #0
 8014372:	d1f4      	bne.n	801435e <rmw_wait+0x10e>
 8014374:	f1b9 0f00 	cmp.w	r9, #0
 8014378:	f000 80bc 	beq.w	80144f4 <rmw_wait+0x2a4>
 801437c:	f8d9 7000 	ldr.w	r7, [r9]
 8014380:	2f00      	cmp	r7, #0
 8014382:	f000 808e 	beq.w	80144a2 <rmw_wait+0x252>
 8014386:	2400      	movs	r4, #0
 8014388:	4627      	mov	r7, r4
 801438a:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801438e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8014392:	f7f6 fea1 	bl	800b0d8 <rmw_uxrce_find_static_input_buffer_by_owner>
 8014396:	2800      	cmp	r0, #0
 8014398:	d05f      	beq.n	801445a <rmw_wait+0x20a>
 801439a:	f8d9 3000 	ldr.w	r3, [r9]
 801439e:	3401      	adds	r4, #1
 80143a0:	42a3      	cmp	r3, r4
 80143a2:	f04f 0701 	mov.w	r7, #1
 80143a6:	d8f0      	bhi.n	801438a <rmw_wait+0x13a>
 80143a8:	f1b8 0f00 	cmp.w	r8, #0
 80143ac:	d012      	beq.n	80143d4 <rmw_wait+0x184>
 80143ae:	f8d8 3000 	ldr.w	r3, [r8]
 80143b2:	b17b      	cbz	r3, 80143d4 <rmw_wait+0x184>
 80143b4:	2400      	movs	r4, #0
 80143b6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80143ba:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80143be:	f7f6 fe8b 	bl	800b0d8 <rmw_uxrce_find_static_input_buffer_by_owner>
 80143c2:	2800      	cmp	r0, #0
 80143c4:	d051      	beq.n	801446a <rmw_wait+0x21a>
 80143c6:	f8d8 3000 	ldr.w	r3, [r8]
 80143ca:	3401      	adds	r4, #1
 80143cc:	42a3      	cmp	r3, r4
 80143ce:	f04f 0701 	mov.w	r7, #1
 80143d2:	d8f0      	bhi.n	80143b6 <rmw_wait+0x166>
 80143d4:	b1dd      	cbz	r5, 801440e <rmw_wait+0x1be>
 80143d6:	682b      	ldr	r3, [r5, #0]
 80143d8:	b1cb      	cbz	r3, 801440e <rmw_wait+0x1be>
 80143da:	2400      	movs	r4, #0
 80143dc:	686b      	ldr	r3, [r5, #4]
 80143de:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80143e2:	f7f6 fe79 	bl	800b0d8 <rmw_uxrce_find_static_input_buffer_by_owner>
 80143e6:	b158      	cbz	r0, 8014400 <rmw_wait+0x1b0>
 80143e8:	682b      	ldr	r3, [r5, #0]
 80143ea:	3401      	adds	r4, #1
 80143ec:	42a3      	cmp	r3, r4
 80143ee:	d969      	bls.n	80144c4 <rmw_wait+0x274>
 80143f0:	686b      	ldr	r3, [r5, #4]
 80143f2:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80143f6:	2701      	movs	r7, #1
 80143f8:	f7f6 fe6e 	bl	800b0d8 <rmw_uxrce_find_static_input_buffer_by_owner>
 80143fc:	2800      	cmp	r0, #0
 80143fe:	d1f3      	bne.n	80143e8 <rmw_wait+0x198>
 8014400:	e9d5 3200 	ldrd	r3, r2, [r5]
 8014404:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8014408:	3401      	adds	r4, #1
 801440a:	42a3      	cmp	r3, r4
 801440c:	d8e6      	bhi.n	80143dc <rmw_wait+0x18c>
 801440e:	b1a6      	cbz	r6, 801443a <rmw_wait+0x1ea>
 8014410:	6834      	ldr	r4, [r6, #0]
 8014412:	b194      	cbz	r4, 801443a <rmw_wait+0x1ea>
 8014414:	2300      	movs	r3, #0
 8014416:	461d      	mov	r5, r3
 8014418:	e004      	b.n	8014424 <rmw_wait+0x1d4>
 801441a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 801441e:	3301      	adds	r3, #1
 8014420:	42a3      	cmp	r3, r4
 8014422:	d00a      	beq.n	801443a <rmw_wait+0x1ea>
 8014424:	6870      	ldr	r0, [r6, #4]
 8014426:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 801442a:	7c0a      	ldrb	r2, [r1, #16]
 801442c:	2a00      	cmp	r2, #0
 801442e:	d0f4      	beq.n	801441a <rmw_wait+0x1ca>
 8014430:	3301      	adds	r3, #1
 8014432:	42a3      	cmp	r3, r4
 8014434:	740d      	strb	r5, [r1, #16]
 8014436:	4617      	mov	r7, r2
 8014438:	d1f4      	bne.n	8014424 <rmw_wait+0x1d4>
 801443a:	2f00      	cmp	r7, #0
 801443c:	d03e      	beq.n	80144bc <rmw_wait+0x26c>
 801443e:	2000      	movs	r0, #0
 8014440:	b009      	add	sp, #36	@ 0x24
 8014442:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014446:	68a0      	ldr	r0, [r4, #8]
 8014448:	2100      	movs	r1, #0
 801444a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801444e:	f7f9 fab1 	bl	800d9b4 <uxr_run_session_timeout>
 8014452:	6864      	ldr	r4, [r4, #4]
 8014454:	2c00      	cmp	r4, #0
 8014456:	d1f6      	bne.n	8014446 <rmw_wait+0x1f6>
 8014458:	e78c      	b.n	8014374 <rmw_wait+0x124>
 801445a:	e9d9 3200 	ldrd	r3, r2, [r9]
 801445e:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8014462:	3401      	adds	r4, #1
 8014464:	42a3      	cmp	r3, r4
 8014466:	d890      	bhi.n	801438a <rmw_wait+0x13a>
 8014468:	e79e      	b.n	80143a8 <rmw_wait+0x158>
 801446a:	e9d8 3200 	ldrd	r3, r2, [r8]
 801446e:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8014472:	3401      	adds	r4, #1
 8014474:	429c      	cmp	r4, r3
 8014476:	d39e      	bcc.n	80143b6 <rmw_wait+0x166>
 8014478:	e7ac      	b.n	80143d4 <rmw_wait+0x184>
 801447a:	2b00      	cmp	r3, #0
 801447c:	f47f aef3 	bne.w	8014266 <rmw_wait+0x16>
 8014480:	2800      	cmp	r0, #0
 8014482:	f47f aef0 	bne.w	8014266 <rmw_wait+0x16>
 8014486:	2900      	cmp	r1, #0
 8014488:	f47f aeed 	bne.w	8014266 <rmw_wait+0x16>
 801448c:	e7d7      	b.n	801443e <rmw_wait+0x1ee>
 801448e:	4639      	mov	r1, r7
 8014490:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8014494:	f7f9 faa8 	bl	800d9e8 <uxr_run_session_until_data>
 8014498:	6864      	ldr	r4, [r4, #4]
 801449a:	2c00      	cmp	r4, #0
 801449c:	f47f af5f 	bne.w	801435e <rmw_wait+0x10e>
 80144a0:	e768      	b.n	8014374 <rmw_wait+0x124>
 80144a2:	f1b8 0f00 	cmp.w	r8, #0
 80144a6:	d032      	beq.n	801450e <rmw_wait+0x2be>
 80144a8:	f8d8 3000 	ldr.w	r3, [r8]
 80144ac:	2b00      	cmp	r3, #0
 80144ae:	d181      	bne.n	80143b4 <rmw_wait+0x164>
 80144b0:	461f      	mov	r7, r3
 80144b2:	2d00      	cmp	r5, #0
 80144b4:	d18f      	bne.n	80143d6 <rmw_wait+0x186>
 80144b6:	462f      	mov	r7, r5
 80144b8:	2e00      	cmp	r6, #0
 80144ba:	d1a9      	bne.n	8014410 <rmw_wait+0x1c0>
 80144bc:	2002      	movs	r0, #2
 80144be:	b009      	add	sp, #36	@ 0x24
 80144c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80144c4:	2e00      	cmp	r6, #0
 80144c6:	d0ba      	beq.n	801443e <rmw_wait+0x1ee>
 80144c8:	6834      	ldr	r4, [r6, #0]
 80144ca:	2701      	movs	r7, #1
 80144cc:	2c00      	cmp	r4, #0
 80144ce:	d1a1      	bne.n	8014414 <rmw_wait+0x1c4>
 80144d0:	e7b5      	b.n	801443e <rmw_wait+0x1ee>
 80144d2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80144d6:	f7fe fd9b 	bl	8013010 <rmw_time_total_nsec>
 80144da:	2300      	movs	r3, #0
 80144dc:	4a13      	ldr	r2, [pc, #76]	@ (801452c <rmw_wait+0x2dc>)
 80144de:	f7eb ff2f 	bl	8000340 <__aeabi_uldivmod>
 80144e2:	f1b0 4f00 	cmp.w	r0, #2147483648	@ 0x80000000
 80144e6:	f171 0300 	sbcs.w	r3, r1, #0
 80144ea:	4607      	mov	r7, r0
 80144ec:	bfa8      	it	ge
 80144ee:	f06f 4700 	mvnge.w	r7, #2147483648	@ 0x80000000
 80144f2:	e6c9      	b.n	8014288 <rmw_wait+0x38>
 80144f4:	f1b8 0f00 	cmp.w	r8, #0
 80144f8:	d009      	beq.n	801450e <rmw_wait+0x2be>
 80144fa:	f8d8 3000 	ldr.w	r3, [r8]
 80144fe:	464f      	mov	r7, r9
 8014500:	2b00      	cmp	r3, #0
 8014502:	f47f af57 	bne.w	80143b4 <rmw_wait+0x164>
 8014506:	2d00      	cmp	r5, #0
 8014508:	f47f af65 	bne.w	80143d6 <rmw_wait+0x186>
 801450c:	e7d3      	b.n	80144b6 <rmw_wait+0x266>
 801450e:	b17d      	cbz	r5, 8014530 <rmw_wait+0x2e0>
 8014510:	682b      	ldr	r3, [r5, #0]
 8014512:	4647      	mov	r7, r8
 8014514:	2b00      	cmp	r3, #0
 8014516:	f47f af60 	bne.w	80143da <rmw_wait+0x18a>
 801451a:	2e00      	cmp	r6, #0
 801451c:	f47f af78 	bne.w	8014410 <rmw_wait+0x1c0>
 8014520:	e7cc      	b.n	80144bc <rmw_wait+0x26c>
 8014522:	bf00      	nop
 8014524:	08018878 	.word	0x08018878
 8014528:	2000bf0c 	.word	0x2000bf0c
 801452c:	000f4240 	.word	0x000f4240
 8014530:	2e00      	cmp	r6, #0
 8014532:	d0c3      	beq.n	80144bc <rmw_wait+0x26c>
 8014534:	6834      	ldr	r4, [r6, #0]
 8014536:	462f      	mov	r7, r5
 8014538:	2c00      	cmp	r4, #0
 801453a:	f47f af6b 	bne.w	8014414 <rmw_wait+0x1c4>
 801453e:	e7bd      	b.n	80144bc <rmw_wait+0x26c>

08014540 <rmw_create_wait_set>:
 8014540:	b508      	push	{r3, lr}
 8014542:	4803      	ldr	r0, [pc, #12]	@ (8014550 <rmw_create_wait_set+0x10>)
 8014544:	f7fe fedc 	bl	8013300 <get_memory>
 8014548:	b108      	cbz	r0, 801454e <rmw_create_wait_set+0xe>
 801454a:	6880      	ldr	r0, [r0, #8]
 801454c:	3010      	adds	r0, #16
 801454e:	bd08      	pop	{r3, pc}
 8014550:	2000bf4c 	.word	0x2000bf4c

08014554 <rmw_destroy_wait_set>:
 8014554:	b508      	push	{r3, lr}
 8014556:	4b08      	ldr	r3, [pc, #32]	@ (8014578 <rmw_destroy_wait_set+0x24>)
 8014558:	6819      	ldr	r1, [r3, #0]
 801455a:	b911      	cbnz	r1, 8014562 <rmw_destroy_wait_set+0xe>
 801455c:	e00a      	b.n	8014574 <rmw_destroy_wait_set+0x20>
 801455e:	6849      	ldr	r1, [r1, #4]
 8014560:	b141      	cbz	r1, 8014574 <rmw_destroy_wait_set+0x20>
 8014562:	688b      	ldr	r3, [r1, #8]
 8014564:	3310      	adds	r3, #16
 8014566:	4298      	cmp	r0, r3
 8014568:	d1f9      	bne.n	801455e <rmw_destroy_wait_set+0xa>
 801456a:	4803      	ldr	r0, [pc, #12]	@ (8014578 <rmw_destroy_wait_set+0x24>)
 801456c:	f7fe fed8 	bl	8013320 <put_memory>
 8014570:	2000      	movs	r0, #0
 8014572:	bd08      	pop	{r3, pc}
 8014574:	2001      	movs	r0, #1
 8014576:	bd08      	pop	{r3, pc}
 8014578:	2000bf4c 	.word	0x2000bf4c

0801457c <rmw_uros_epoch_nanos>:
 801457c:	4b05      	ldr	r3, [pc, #20]	@ (8014594 <rmw_uros_epoch_nanos+0x18>)
 801457e:	681b      	ldr	r3, [r3, #0]
 8014580:	b123      	cbz	r3, 801458c <rmw_uros_epoch_nanos+0x10>
 8014582:	6898      	ldr	r0, [r3, #8]
 8014584:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8014588:	f7f8 be84 	b.w	800d294 <uxr_epoch_nanos>
 801458c:	2000      	movs	r0, #0
 801458e:	2100      	movs	r1, #0
 8014590:	4770      	bx	lr
 8014592:	bf00      	nop
 8014594:	2000bf0c 	.word	0x2000bf0c

08014598 <rosidl_runtime_c__double__Sequence__init>:
 8014598:	b530      	push	{r4, r5, lr}
 801459a:	4604      	mov	r4, r0
 801459c:	b087      	sub	sp, #28
 801459e:	b130      	cbz	r0, 80145ae <rosidl_runtime_c__double__Sequence__init+0x16>
 80145a0:	460d      	mov	r5, r1
 80145a2:	b931      	cbnz	r1, 80145b2 <rosidl_runtime_c__double__Sequence__init+0x1a>
 80145a4:	4608      	mov	r0, r1
 80145a6:	e9c4 0500 	strd	r0, r5, [r4]
 80145aa:	60a5      	str	r5, [r4, #8]
 80145ac:	2001      	movs	r0, #1
 80145ae:	b007      	add	sp, #28
 80145b0:	bd30      	pop	{r4, r5, pc}
 80145b2:	a801      	add	r0, sp, #4
 80145b4:	f7f6 f902 	bl	800a7bc <rcutils_get_default_allocator>
 80145b8:	9b01      	ldr	r3, [sp, #4]
 80145ba:	9905      	ldr	r1, [sp, #20]
 80145bc:	00e8      	lsls	r0, r5, #3
 80145be:	4798      	blx	r3
 80145c0:	2800      	cmp	r0, #0
 80145c2:	d1f0      	bne.n	80145a6 <rosidl_runtime_c__double__Sequence__init+0xe>
 80145c4:	e7f3      	b.n	80145ae <rosidl_runtime_c__double__Sequence__init+0x16>
 80145c6:	bf00      	nop

080145c8 <rosidl_runtime_c__double__Sequence__fini>:
 80145c8:	b188      	cbz	r0, 80145ee <rosidl_runtime_c__double__Sequence__fini+0x26>
 80145ca:	b510      	push	{r4, lr}
 80145cc:	6803      	ldr	r3, [r0, #0]
 80145ce:	b086      	sub	sp, #24
 80145d0:	4604      	mov	r4, r0
 80145d2:	b153      	cbz	r3, 80145ea <rosidl_runtime_c__double__Sequence__fini+0x22>
 80145d4:	a801      	add	r0, sp, #4
 80145d6:	f7f6 f8f1 	bl	800a7bc <rcutils_get_default_allocator>
 80145da:	9b02      	ldr	r3, [sp, #8]
 80145dc:	9905      	ldr	r1, [sp, #20]
 80145de:	6820      	ldr	r0, [r4, #0]
 80145e0:	4798      	blx	r3
 80145e2:	2300      	movs	r3, #0
 80145e4:	e9c4 3300 	strd	r3, r3, [r4]
 80145e8:	60a3      	str	r3, [r4, #8]
 80145ea:	b006      	add	sp, #24
 80145ec:	bd10      	pop	{r4, pc}
 80145ee:	4770      	bx	lr

080145f0 <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 80145f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80145f4:	6805      	ldr	r5, [r0, #0]
 80145f6:	4604      	mov	r4, r0
 80145f8:	4628      	mov	r0, r5
 80145fa:	460e      	mov	r6, r1
 80145fc:	f7eb fde8 	bl	80001d0 <strcmp>
 8014600:	b1c8      	cbz	r0, 8014636 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x46>
 8014602:	4b11      	ldr	r3, [pc, #68]	@ (8014648 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x58>)
 8014604:	681b      	ldr	r3, [r3, #0]
 8014606:	429d      	cmp	r5, r3
 8014608:	d112      	bne.n	8014630 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 801460a:	f8d4 8004 	ldr.w	r8, [r4, #4]
 801460e:	f8d8 4000 	ldr.w	r4, [r8]
 8014612:	b16c      	cbz	r4, 8014630 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 8014614:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8014618:	2700      	movs	r7, #0
 801461a:	3d04      	subs	r5, #4
 801461c:	f855 0f04 	ldr.w	r0, [r5, #4]!
 8014620:	4631      	mov	r1, r6
 8014622:	f7eb fdd5 	bl	80001d0 <strcmp>
 8014626:	00bb      	lsls	r3, r7, #2
 8014628:	b140      	cbz	r0, 801463c <rosidl_typesupport_c__get_message_typesupport_handle_function+0x4c>
 801462a:	3701      	adds	r7, #1
 801462c:	42bc      	cmp	r4, r7
 801462e:	d1f5      	bne.n	801461c <rosidl_typesupport_c__get_message_typesupport_handle_function+0x2c>
 8014630:	2000      	movs	r0, #0
 8014632:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014636:	4620      	mov	r0, r4
 8014638:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801463c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8014640:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014644:	58d3      	ldr	r3, [r2, r3]
 8014646:	4718      	bx	r3
 8014648:	20000194 	.word	0x20000194

0801464c <std_msgs__msg__Float64MultiArray__init>:
 801464c:	b570      	push	{r4, r5, r6, lr}
 801464e:	4605      	mov	r5, r0
 8014650:	b1b0      	cbz	r0, 8014680 <std_msgs__msg__Float64MultiArray__init+0x34>
 8014652:	f000 f8b5 	bl	80147c0 <std_msgs__msg__MultiArrayLayout__init>
 8014656:	4604      	mov	r4, r0
 8014658:	b148      	cbz	r0, 801466e <std_msgs__msg__Float64MultiArray__init+0x22>
 801465a:	f105 0610 	add.w	r6, r5, #16
 801465e:	2100      	movs	r1, #0
 8014660:	4630      	mov	r0, r6
 8014662:	f7ff ff99 	bl	8014598 <rosidl_runtime_c__double__Sequence__init>
 8014666:	4604      	mov	r4, r0
 8014668:	b168      	cbz	r0, 8014686 <std_msgs__msg__Float64MultiArray__init+0x3a>
 801466a:	4620      	mov	r0, r4
 801466c:	bd70      	pop	{r4, r5, r6, pc}
 801466e:	4628      	mov	r0, r5
 8014670:	f000 f8b8 	bl	80147e4 <std_msgs__msg__MultiArrayLayout__fini>
 8014674:	f105 0010 	add.w	r0, r5, #16
 8014678:	f7ff ffa6 	bl	80145c8 <rosidl_runtime_c__double__Sequence__fini>
 801467c:	4620      	mov	r0, r4
 801467e:	bd70      	pop	{r4, r5, r6, pc}
 8014680:	4604      	mov	r4, r0
 8014682:	4620      	mov	r0, r4
 8014684:	bd70      	pop	{r4, r5, r6, pc}
 8014686:	4628      	mov	r0, r5
 8014688:	f000 f8ac 	bl	80147e4 <std_msgs__msg__MultiArrayLayout__fini>
 801468c:	4630      	mov	r0, r6
 801468e:	f7ff ff9b 	bl	80145c8 <rosidl_runtime_c__double__Sequence__fini>
 8014692:	e7ea      	b.n	801466a <std_msgs__msg__Float64MultiArray__init+0x1e>

08014694 <std_msgs__msg__Float64MultiArray__fini>:
 8014694:	b148      	cbz	r0, 80146aa <std_msgs__msg__Float64MultiArray__fini+0x16>
 8014696:	b510      	push	{r4, lr}
 8014698:	4604      	mov	r4, r0
 801469a:	f000 f8a3 	bl	80147e4 <std_msgs__msg__MultiArrayLayout__fini>
 801469e:	f104 0010 	add.w	r0, r4, #16
 80146a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80146a6:	f7ff bf8f 	b.w	80145c8 <rosidl_runtime_c__double__Sequence__fini>
 80146aa:	4770      	bx	lr

080146ac <std_msgs__msg__MultiArrayDimension__Sequence__init.part.0>:
 80146ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80146b0:	b086      	sub	sp, #24
 80146b2:	4682      	mov	sl, r0
 80146b4:	4689      	mov	r9, r1
 80146b6:	a801      	add	r0, sp, #4
 80146b8:	f7f6 f880 	bl	800a7bc <rcutils_get_default_allocator>
 80146bc:	f1b9 0f00 	cmp.w	r9, #0
 80146c0:	d02f      	beq.n	8014722 <std_msgs__msg__MultiArrayDimension__Sequence__init.part.0+0x76>
 80146c2:	e9dd 3804 	ldrd	r3, r8, [sp, #16]
 80146c6:	2114      	movs	r1, #20
 80146c8:	4642      	mov	r2, r8
 80146ca:	4648      	mov	r0, r9
 80146cc:	4798      	blx	r3
 80146ce:	4607      	mov	r7, r0
 80146d0:	b388      	cbz	r0, 8014736 <std_msgs__msg__MultiArrayDimension__Sequence__init.part.0+0x8a>
 80146d2:	4606      	mov	r6, r0
 80146d4:	2400      	movs	r4, #0
 80146d6:	e004      	b.n	80146e2 <std_msgs__msg__MultiArrayDimension__Sequence__init.part.0+0x36>
 80146d8:	3401      	adds	r4, #1
 80146da:	45a1      	cmp	r9, r4
 80146dc:	f106 0614 	add.w	r6, r6, #20
 80146e0:	d020      	beq.n	8014724 <std_msgs__msg__MultiArrayDimension__Sequence__init.part.0+0x78>
 80146e2:	4630      	mov	r0, r6
 80146e4:	f002 fbc2 	bl	8016e6c <rosidl_runtime_c__String__init>
 80146e8:	4605      	mov	r5, r0
 80146ea:	2800      	cmp	r0, #0
 80146ec:	d1f4      	bne.n	80146d8 <std_msgs__msg__MultiArrayDimension__Sequence__init.part.0+0x2c>
 80146ee:	4630      	mov	r0, r6
 80146f0:	f002 fbd2 	bl	8016e98 <rosidl_runtime_c__String__fini>
 80146f4:	45a1      	cmp	r9, r4
 80146f6:	d915      	bls.n	8014724 <std_msgs__msg__MultiArrayDimension__Sequence__init.part.0+0x78>
 80146f8:	b15c      	cbz	r4, 8014712 <std_msgs__msg__MultiArrayDimension__Sequence__init.part.0+0x66>
 80146fa:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 80146fe:	eb07 0484 	add.w	r4, r7, r4, lsl #2
 8014702:	3c14      	subs	r4, #20
 8014704:	4620      	mov	r0, r4
 8014706:	f002 fbc7 	bl	8016e98 <rosidl_runtime_c__String__fini>
 801470a:	42a7      	cmp	r7, r4
 801470c:	f1a4 0414 	sub.w	r4, r4, #20
 8014710:	d1f8      	bne.n	8014704 <std_msgs__msg__MultiArrayDimension__Sequence__init.part.0+0x58>
 8014712:	4638      	mov	r0, r7
 8014714:	9b02      	ldr	r3, [sp, #8]
 8014716:	4641      	mov	r1, r8
 8014718:	4798      	blx	r3
 801471a:	4628      	mov	r0, r5
 801471c:	b006      	add	sp, #24
 801471e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014722:	464f      	mov	r7, r9
 8014724:	e9ca 7900 	strd	r7, r9, [sl]
 8014728:	f8ca 9008 	str.w	r9, [sl, #8]
 801472c:	2501      	movs	r5, #1
 801472e:	4628      	mov	r0, r5
 8014730:	b006      	add	sp, #24
 8014732:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014736:	4605      	mov	r5, r0
 8014738:	e7f9      	b.n	801472e <std_msgs__msg__MultiArrayDimension__Sequence__init.part.0+0x82>
 801473a:	bf00      	nop

0801473c <std_msgs__msg__MultiArrayDimension__init>:
 801473c:	b538      	push	{r3, r4, r5, lr}
 801473e:	4604      	mov	r4, r0
 8014740:	b128      	cbz	r0, 801474e <std_msgs__msg__MultiArrayDimension__init+0x12>
 8014742:	f002 fb93 	bl	8016e6c <rosidl_runtime_c__String__init>
 8014746:	4605      	mov	r5, r0
 8014748:	b120      	cbz	r0, 8014754 <std_msgs__msg__MultiArrayDimension__init+0x18>
 801474a:	4628      	mov	r0, r5
 801474c:	bd38      	pop	{r3, r4, r5, pc}
 801474e:	4605      	mov	r5, r0
 8014750:	4628      	mov	r0, r5
 8014752:	bd38      	pop	{r3, r4, r5, pc}
 8014754:	4620      	mov	r0, r4
 8014756:	f002 fb9f 	bl	8016e98 <rosidl_runtime_c__String__fini>
 801475a:	4628      	mov	r0, r5
 801475c:	bd38      	pop	{r3, r4, r5, pc}
 801475e:	bf00      	nop

08014760 <std_msgs__msg__MultiArrayDimension__fini>:
 8014760:	b108      	cbz	r0, 8014766 <std_msgs__msg__MultiArrayDimension__fini+0x6>
 8014762:	f002 bb99 	b.w	8016e98 <rosidl_runtime_c__String__fini>
 8014766:	4770      	bx	lr

08014768 <std_msgs__msg__MultiArrayDimension__Sequence__init>:
 8014768:	b108      	cbz	r0, 801476e <std_msgs__msg__MultiArrayDimension__Sequence__init+0x6>
 801476a:	f7ff bf9f 	b.w	80146ac <std_msgs__msg__MultiArrayDimension__Sequence__init.part.0>
 801476e:	4770      	bx	lr

08014770 <std_msgs__msg__MultiArrayDimension__Sequence__fini>:
 8014770:	b320      	cbz	r0, 80147bc <std_msgs__msg__MultiArrayDimension__Sequence__fini+0x4c>
 8014772:	b530      	push	{r4, r5, lr}
 8014774:	4605      	mov	r5, r0
 8014776:	b087      	sub	sp, #28
 8014778:	a801      	add	r0, sp, #4
 801477a:	f7f6 f81f 	bl	800a7bc <rcutils_get_default_allocator>
 801477e:	682a      	ldr	r2, [r5, #0]
 8014780:	b1b2      	cbz	r2, 80147b0 <std_msgs__msg__MultiArrayDimension__Sequence__fini+0x40>
 8014782:	68a9      	ldr	r1, [r5, #8]
 8014784:	b161      	cbz	r1, 80147a0 <std_msgs__msg__MultiArrayDimension__Sequence__fini+0x30>
 8014786:	2400      	movs	r4, #0
 8014788:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 801478c:	eb12 0083 	adds.w	r0, r2, r3, lsl #2
 8014790:	d010      	beq.n	80147b4 <std_msgs__msg__MultiArrayDimension__Sequence__fini+0x44>
 8014792:	f002 fb81 	bl	8016e98 <rosidl_runtime_c__String__fini>
 8014796:	68a9      	ldr	r1, [r5, #8]
 8014798:	682a      	ldr	r2, [r5, #0]
 801479a:	3401      	adds	r4, #1
 801479c:	428c      	cmp	r4, r1
 801479e:	d3f3      	bcc.n	8014788 <std_msgs__msg__MultiArrayDimension__Sequence__fini+0x18>
 80147a0:	9b02      	ldr	r3, [sp, #8]
 80147a2:	9905      	ldr	r1, [sp, #20]
 80147a4:	4610      	mov	r0, r2
 80147a6:	4798      	blx	r3
 80147a8:	2300      	movs	r3, #0
 80147aa:	e9c5 3300 	strd	r3, r3, [r5]
 80147ae:	60ab      	str	r3, [r5, #8]
 80147b0:	b007      	add	sp, #28
 80147b2:	bd30      	pop	{r4, r5, pc}
 80147b4:	3401      	adds	r4, #1
 80147b6:	428c      	cmp	r4, r1
 80147b8:	d3e6      	bcc.n	8014788 <std_msgs__msg__MultiArrayDimension__Sequence__fini+0x18>
 80147ba:	e7f1      	b.n	80147a0 <std_msgs__msg__MultiArrayDimension__Sequence__fini+0x30>
 80147bc:	4770      	bx	lr
 80147be:	bf00      	nop

080147c0 <std_msgs__msg__MultiArrayLayout__init>:
 80147c0:	b538      	push	{r3, r4, r5, lr}
 80147c2:	4604      	mov	r4, r0
 80147c4:	b130      	cbz	r0, 80147d4 <std_msgs__msg__MultiArrayLayout__init+0x14>
 80147c6:	2100      	movs	r1, #0
 80147c8:	f7ff ffce 	bl	8014768 <std_msgs__msg__MultiArrayDimension__Sequence__init>
 80147cc:	4605      	mov	r5, r0
 80147ce:	b120      	cbz	r0, 80147da <std_msgs__msg__MultiArrayLayout__init+0x1a>
 80147d0:	4628      	mov	r0, r5
 80147d2:	bd38      	pop	{r3, r4, r5, pc}
 80147d4:	4605      	mov	r5, r0
 80147d6:	4628      	mov	r0, r5
 80147d8:	bd38      	pop	{r3, r4, r5, pc}
 80147da:	4620      	mov	r0, r4
 80147dc:	f7ff ffc8 	bl	8014770 <std_msgs__msg__MultiArrayDimension__Sequence__fini>
 80147e0:	4628      	mov	r0, r5
 80147e2:	bd38      	pop	{r3, r4, r5, pc}

080147e4 <std_msgs__msg__MultiArrayLayout__fini>:
 80147e4:	b108      	cbz	r0, 80147ea <std_msgs__msg__MultiArrayLayout__fini+0x6>
 80147e6:	f7ff bfc3 	b.w	8014770 <std_msgs__msg__MultiArrayDimension__Sequence__fini>
 80147ea:	4770      	bx	lr

080147ec <std_msgs__msg__MultiArrayDimension__rosidl_typesupport_introspection_c__MultiArrayDimension_init_function>:
 80147ec:	f7ff bfa6 	b.w	801473c <std_msgs__msg__MultiArrayDimension__init>

080147f0 <std_msgs__msg__MultiArrayDimension__rosidl_typesupport_introspection_c__MultiArrayDimension_fini_function>:
 80147f0:	f7ff bfb6 	b.w	8014760 <std_msgs__msg__MultiArrayDimension__fini>

080147f4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension>:
 80147f4:	4b04      	ldr	r3, [pc, #16]	@ (8014808 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension+0x14>)
 80147f6:	681a      	ldr	r2, [r3, #0]
 80147f8:	b10a      	cbz	r2, 80147fe <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension+0xa>
 80147fa:	4803      	ldr	r0, [pc, #12]	@ (8014808 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension+0x14>)
 80147fc:	4770      	bx	lr
 80147fe:	4a03      	ldr	r2, [pc, #12]	@ (801480c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension+0x18>)
 8014800:	4801      	ldr	r0, [pc, #4]	@ (8014808 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension+0x14>)
 8014802:	6812      	ldr	r2, [r2, #0]
 8014804:	601a      	str	r2, [r3, #0]
 8014806:	4770      	bx	lr
 8014808:	20000250 	.word	0x20000250
 801480c:	20000198 	.word	0x20000198

08014810 <_MultiArrayDimension__cdr_serialize>:
 8014810:	b1d0      	cbz	r0, 8014848 <_MultiArrayDimension__cdr_serialize+0x38>
 8014812:	b570      	push	{r4, r5, r6, lr}
 8014814:	6806      	ldr	r6, [r0, #0]
 8014816:	460d      	mov	r5, r1
 8014818:	4604      	mov	r4, r0
 801481a:	b196      	cbz	r6, 8014842 <_MultiArrayDimension__cdr_serialize+0x32>
 801481c:	4630      	mov	r0, r6
 801481e:	f7eb fce1 	bl	80001e4 <strlen>
 8014822:	1c42      	adds	r2, r0, #1
 8014824:	4631      	mov	r1, r6
 8014826:	6060      	str	r0, [r4, #4]
 8014828:	4628      	mov	r0, r5
 801482a:	f7f8 f967 	bl	800cafc <ucdr_serialize_sequence_char>
 801482e:	68e1      	ldr	r1, [r4, #12]
 8014830:	4628      	mov	r0, r5
 8014832:	f7f7 f9bd 	bl	800bbb0 <ucdr_serialize_uint32_t>
 8014836:	6921      	ldr	r1, [r4, #16]
 8014838:	4628      	mov	r0, r5
 801483a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801483e:	f7f7 b9b7 	b.w	800bbb0 <ucdr_serialize_uint32_t>
 8014842:	4632      	mov	r2, r6
 8014844:	4630      	mov	r0, r6
 8014846:	e7ed      	b.n	8014824 <_MultiArrayDimension__cdr_serialize+0x14>
 8014848:	4770      	bx	lr
 801484a:	bf00      	nop

0801484c <get_serialized_size_std_msgs__msg__MultiArrayDimension>:
 801484c:	b570      	push	{r4, r5, r6, lr}
 801484e:	4604      	mov	r4, r0
 8014850:	b1b0      	cbz	r0, 8014880 <get_serialized_size_std_msgs__msg__MultiArrayDimension+0x34>
 8014852:	460d      	mov	r5, r1
 8014854:	4628      	mov	r0, r5
 8014856:	2104      	movs	r1, #4
 8014858:	f7f8 f8e4 	bl	800ca24 <ucdr_alignment>
 801485c:	6866      	ldr	r6, [r4, #4]
 801485e:	1d6b      	adds	r3, r5, #5
 8014860:	4433      	add	r3, r6
 8014862:	181e      	adds	r6, r3, r0
 8014864:	2104      	movs	r1, #4
 8014866:	4630      	mov	r0, r6
 8014868:	f7f8 f8dc 	bl	800ca24 <ucdr_alignment>
 801486c:	1d04      	adds	r4, r0, #4
 801486e:	4434      	add	r4, r6
 8014870:	2104      	movs	r1, #4
 8014872:	4620      	mov	r0, r4
 8014874:	f7f8 f8d6 	bl	800ca24 <ucdr_alignment>
 8014878:	f1c5 0504 	rsb	r5, r5, #4
 801487c:	4428      	add	r0, r5
 801487e:	4420      	add	r0, r4
 8014880:	bd70      	pop	{r4, r5, r6, pc}
 8014882:	bf00      	nop

08014884 <_MultiArrayDimension__cdr_deserialize>:
 8014884:	b570      	push	{r4, r5, r6, lr}
 8014886:	460c      	mov	r4, r1
 8014888:	b082      	sub	sp, #8
 801488a:	b1d9      	cbz	r1, 80148c4 <_MultiArrayDimension__cdr_deserialize+0x40>
 801488c:	688e      	ldr	r6, [r1, #8]
 801488e:	6809      	ldr	r1, [r1, #0]
 8014890:	ab01      	add	r3, sp, #4
 8014892:	4632      	mov	r2, r6
 8014894:	4605      	mov	r5, r0
 8014896:	f7f8 f943 	bl	800cb20 <ucdr_deserialize_sequence_char>
 801489a:	9b01      	ldr	r3, [sp, #4]
 801489c:	b970      	cbnz	r0, 80148bc <_MultiArrayDimension__cdr_deserialize+0x38>
 801489e:	429e      	cmp	r6, r3
 80148a0:	d313      	bcc.n	80148ca <_MultiArrayDimension__cdr_deserialize+0x46>
 80148a2:	f104 010c 	add.w	r1, r4, #12
 80148a6:	4628      	mov	r0, r5
 80148a8:	f7f7 fab2 	bl	800be10 <ucdr_deserialize_uint32_t>
 80148ac:	f104 0110 	add.w	r1, r4, #16
 80148b0:	4628      	mov	r0, r5
 80148b2:	b002      	add	sp, #8
 80148b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80148b8:	f7f7 baaa 	b.w	800be10 <ucdr_deserialize_uint32_t>
 80148bc:	b103      	cbz	r3, 80148c0 <_MultiArrayDimension__cdr_deserialize+0x3c>
 80148be:	3b01      	subs	r3, #1
 80148c0:	6063      	str	r3, [r4, #4]
 80148c2:	e7ee      	b.n	80148a2 <_MultiArrayDimension__cdr_deserialize+0x1e>
 80148c4:	4608      	mov	r0, r1
 80148c6:	b002      	add	sp, #8
 80148c8:	bd70      	pop	{r4, r5, r6, pc}
 80148ca:	2101      	movs	r1, #1
 80148cc:	75a8      	strb	r0, [r5, #22]
 80148ce:	7569      	strb	r1, [r5, #21]
 80148d0:	6060      	str	r0, [r4, #4]
 80148d2:	4628      	mov	r0, r5
 80148d4:	f7f8 f8bc 	bl	800ca50 <ucdr_align_to>
 80148d8:	9901      	ldr	r1, [sp, #4]
 80148da:	4628      	mov	r0, r5
 80148dc:	f7f8 f8ee 	bl	800cabc <ucdr_advance_buffer>
 80148e0:	e7df      	b.n	80148a2 <_MultiArrayDimension__cdr_deserialize+0x1e>
 80148e2:	bf00      	nop

080148e4 <_MultiArrayDimension__max_serialized_size>:
 80148e4:	b510      	push	{r4, lr}
 80148e6:	2104      	movs	r1, #4
 80148e8:	2000      	movs	r0, #0
 80148ea:	f7f8 f89b 	bl	800ca24 <ucdr_alignment>
 80148ee:	1d04      	adds	r4, r0, #4
 80148f0:	2104      	movs	r1, #4
 80148f2:	4620      	mov	r0, r4
 80148f4:	f7f8 f896 	bl	800ca24 <ucdr_alignment>
 80148f8:	3004      	adds	r0, #4
 80148fa:	4420      	add	r0, r4
 80148fc:	bd10      	pop	{r4, pc}
 80148fe:	bf00      	nop

08014900 <_MultiArrayDimension__get_serialized_size>:
 8014900:	b510      	push	{r4, lr}
 8014902:	4604      	mov	r4, r0
 8014904:	b190      	cbz	r0, 801492c <_MultiArrayDimension__get_serialized_size+0x2c>
 8014906:	2104      	movs	r1, #4
 8014908:	2000      	movs	r0, #0
 801490a:	f7f8 f88b 	bl	800ca24 <ucdr_alignment>
 801490e:	6863      	ldr	r3, [r4, #4]
 8014910:	3305      	adds	r3, #5
 8014912:	181c      	adds	r4, r3, r0
 8014914:	2104      	movs	r1, #4
 8014916:	4620      	mov	r0, r4
 8014918:	f7f8 f884 	bl	800ca24 <ucdr_alignment>
 801491c:	3004      	adds	r0, #4
 801491e:	4404      	add	r4, r0
 8014920:	2104      	movs	r1, #4
 8014922:	4620      	mov	r0, r4
 8014924:	f7f8 f87e 	bl	800ca24 <ucdr_alignment>
 8014928:	3004      	adds	r0, #4
 801492a:	4420      	add	r0, r4
 801492c:	bd10      	pop	{r4, pc}
 801492e:	bf00      	nop

08014930 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension>:
 8014930:	4800      	ldr	r0, [pc, #0]	@ (8014934 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension+0x4>)
 8014932:	4770      	bx	lr
 8014934:	2000025c 	.word	0x2000025c

08014938 <ucdr_serialize_endian_array_char>:
 8014938:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801493c:	4619      	mov	r1, r3
 801493e:	461f      	mov	r7, r3
 8014940:	4605      	mov	r5, r0
 8014942:	4690      	mov	r8, r2
 8014944:	f7f8 f816 	bl	800c974 <ucdr_check_buffer_available_for>
 8014948:	b9e0      	cbnz	r0, 8014984 <ucdr_serialize_endian_array_char+0x4c>
 801494a:	463e      	mov	r6, r7
 801494c:	e009      	b.n	8014962 <ucdr_serialize_endian_array_char+0x2a>
 801494e:	68a8      	ldr	r0, [r5, #8]
 8014950:	f003 f8f3 	bl	8017b3a <memcpy>
 8014954:	68ab      	ldr	r3, [r5, #8]
 8014956:	6928      	ldr	r0, [r5, #16]
 8014958:	4423      	add	r3, r4
 801495a:	4420      	add	r0, r4
 801495c:	1b36      	subs	r6, r6, r4
 801495e:	60ab      	str	r3, [r5, #8]
 8014960:	6128      	str	r0, [r5, #16]
 8014962:	4631      	mov	r1, r6
 8014964:	2201      	movs	r2, #1
 8014966:	4628      	mov	r0, r5
 8014968:	f7f8 f88c 	bl	800ca84 <ucdr_check_final_buffer_behavior_array>
 801496c:	1bb9      	subs	r1, r7, r6
 801496e:	4441      	add	r1, r8
 8014970:	4604      	mov	r4, r0
 8014972:	4602      	mov	r2, r0
 8014974:	2800      	cmp	r0, #0
 8014976:	d1ea      	bne.n	801494e <ucdr_serialize_endian_array_char+0x16>
 8014978:	2301      	movs	r3, #1
 801497a:	7da8      	ldrb	r0, [r5, #22]
 801497c:	756b      	strb	r3, [r5, #21]
 801497e:	4058      	eors	r0, r3
 8014980:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014984:	463a      	mov	r2, r7
 8014986:	68a8      	ldr	r0, [r5, #8]
 8014988:	4641      	mov	r1, r8
 801498a:	f003 f8d6 	bl	8017b3a <memcpy>
 801498e:	68aa      	ldr	r2, [r5, #8]
 8014990:	692b      	ldr	r3, [r5, #16]
 8014992:	443a      	add	r2, r7
 8014994:	443b      	add	r3, r7
 8014996:	60aa      	str	r2, [r5, #8]
 8014998:	612b      	str	r3, [r5, #16]
 801499a:	e7ed      	b.n	8014978 <ucdr_serialize_endian_array_char+0x40>

0801499c <ucdr_deserialize_endian_array_char>:
 801499c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80149a0:	4619      	mov	r1, r3
 80149a2:	461f      	mov	r7, r3
 80149a4:	4605      	mov	r5, r0
 80149a6:	4690      	mov	r8, r2
 80149a8:	f7f7 ffe4 	bl	800c974 <ucdr_check_buffer_available_for>
 80149ac:	b9e0      	cbnz	r0, 80149e8 <ucdr_deserialize_endian_array_char+0x4c>
 80149ae:	463e      	mov	r6, r7
 80149b0:	e009      	b.n	80149c6 <ucdr_deserialize_endian_array_char+0x2a>
 80149b2:	68a9      	ldr	r1, [r5, #8]
 80149b4:	f003 f8c1 	bl	8017b3a <memcpy>
 80149b8:	68ab      	ldr	r3, [r5, #8]
 80149ba:	6928      	ldr	r0, [r5, #16]
 80149bc:	4423      	add	r3, r4
 80149be:	4420      	add	r0, r4
 80149c0:	1b36      	subs	r6, r6, r4
 80149c2:	60ab      	str	r3, [r5, #8]
 80149c4:	6128      	str	r0, [r5, #16]
 80149c6:	2201      	movs	r2, #1
 80149c8:	4631      	mov	r1, r6
 80149ca:	4628      	mov	r0, r5
 80149cc:	f7f8 f85a 	bl	800ca84 <ucdr_check_final_buffer_behavior_array>
 80149d0:	4604      	mov	r4, r0
 80149d2:	1bb8      	subs	r0, r7, r6
 80149d4:	4440      	add	r0, r8
 80149d6:	4622      	mov	r2, r4
 80149d8:	2c00      	cmp	r4, #0
 80149da:	d1ea      	bne.n	80149b2 <ucdr_deserialize_endian_array_char+0x16>
 80149dc:	2301      	movs	r3, #1
 80149de:	7da8      	ldrb	r0, [r5, #22]
 80149e0:	756b      	strb	r3, [r5, #21]
 80149e2:	4058      	eors	r0, r3
 80149e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80149e8:	463a      	mov	r2, r7
 80149ea:	68a9      	ldr	r1, [r5, #8]
 80149ec:	4640      	mov	r0, r8
 80149ee:	f003 f8a4 	bl	8017b3a <memcpy>
 80149f2:	68aa      	ldr	r2, [r5, #8]
 80149f4:	692b      	ldr	r3, [r5, #16]
 80149f6:	443a      	add	r2, r7
 80149f8:	443b      	add	r3, r7
 80149fa:	60aa      	str	r2, [r5, #8]
 80149fc:	612b      	str	r3, [r5, #16]
 80149fe:	e7ed      	b.n	80149dc <ucdr_deserialize_endian_array_char+0x40>

08014a00 <ucdr_serialize_array_uint8_t>:
 8014a00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014a04:	4688      	mov	r8, r1
 8014a06:	4611      	mov	r1, r2
 8014a08:	4617      	mov	r7, r2
 8014a0a:	4605      	mov	r5, r0
 8014a0c:	f7f7 ffb2 	bl	800c974 <ucdr_check_buffer_available_for>
 8014a10:	b9e0      	cbnz	r0, 8014a4c <ucdr_serialize_array_uint8_t+0x4c>
 8014a12:	463e      	mov	r6, r7
 8014a14:	e009      	b.n	8014a2a <ucdr_serialize_array_uint8_t+0x2a>
 8014a16:	68a8      	ldr	r0, [r5, #8]
 8014a18:	f003 f88f 	bl	8017b3a <memcpy>
 8014a1c:	68aa      	ldr	r2, [r5, #8]
 8014a1e:	692b      	ldr	r3, [r5, #16]
 8014a20:	4422      	add	r2, r4
 8014a22:	4423      	add	r3, r4
 8014a24:	1b36      	subs	r6, r6, r4
 8014a26:	60aa      	str	r2, [r5, #8]
 8014a28:	612b      	str	r3, [r5, #16]
 8014a2a:	4631      	mov	r1, r6
 8014a2c:	2201      	movs	r2, #1
 8014a2e:	4628      	mov	r0, r5
 8014a30:	f7f8 f828 	bl	800ca84 <ucdr_check_final_buffer_behavior_array>
 8014a34:	1bb9      	subs	r1, r7, r6
 8014a36:	4441      	add	r1, r8
 8014a38:	4604      	mov	r4, r0
 8014a3a:	4602      	mov	r2, r0
 8014a3c:	2800      	cmp	r0, #0
 8014a3e:	d1ea      	bne.n	8014a16 <ucdr_serialize_array_uint8_t+0x16>
 8014a40:	2301      	movs	r3, #1
 8014a42:	7da8      	ldrb	r0, [r5, #22]
 8014a44:	756b      	strb	r3, [r5, #21]
 8014a46:	4058      	eors	r0, r3
 8014a48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014a4c:	463a      	mov	r2, r7
 8014a4e:	68a8      	ldr	r0, [r5, #8]
 8014a50:	4641      	mov	r1, r8
 8014a52:	f003 f872 	bl	8017b3a <memcpy>
 8014a56:	68aa      	ldr	r2, [r5, #8]
 8014a58:	692b      	ldr	r3, [r5, #16]
 8014a5a:	443a      	add	r2, r7
 8014a5c:	443b      	add	r3, r7
 8014a5e:	60aa      	str	r2, [r5, #8]
 8014a60:	612b      	str	r3, [r5, #16]
 8014a62:	e7ed      	b.n	8014a40 <ucdr_serialize_array_uint8_t+0x40>

08014a64 <ucdr_serialize_endian_array_uint8_t>:
 8014a64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014a68:	4619      	mov	r1, r3
 8014a6a:	461f      	mov	r7, r3
 8014a6c:	4605      	mov	r5, r0
 8014a6e:	4690      	mov	r8, r2
 8014a70:	f7f7 ff80 	bl	800c974 <ucdr_check_buffer_available_for>
 8014a74:	b9e0      	cbnz	r0, 8014ab0 <ucdr_serialize_endian_array_uint8_t+0x4c>
 8014a76:	463e      	mov	r6, r7
 8014a78:	e009      	b.n	8014a8e <ucdr_serialize_endian_array_uint8_t+0x2a>
 8014a7a:	68a8      	ldr	r0, [r5, #8]
 8014a7c:	f003 f85d 	bl	8017b3a <memcpy>
 8014a80:	68ab      	ldr	r3, [r5, #8]
 8014a82:	6928      	ldr	r0, [r5, #16]
 8014a84:	4423      	add	r3, r4
 8014a86:	4420      	add	r0, r4
 8014a88:	1b36      	subs	r6, r6, r4
 8014a8a:	60ab      	str	r3, [r5, #8]
 8014a8c:	6128      	str	r0, [r5, #16]
 8014a8e:	4631      	mov	r1, r6
 8014a90:	2201      	movs	r2, #1
 8014a92:	4628      	mov	r0, r5
 8014a94:	f7f7 fff6 	bl	800ca84 <ucdr_check_final_buffer_behavior_array>
 8014a98:	1bb9      	subs	r1, r7, r6
 8014a9a:	4441      	add	r1, r8
 8014a9c:	4604      	mov	r4, r0
 8014a9e:	4602      	mov	r2, r0
 8014aa0:	2800      	cmp	r0, #0
 8014aa2:	d1ea      	bne.n	8014a7a <ucdr_serialize_endian_array_uint8_t+0x16>
 8014aa4:	2301      	movs	r3, #1
 8014aa6:	7da8      	ldrb	r0, [r5, #22]
 8014aa8:	756b      	strb	r3, [r5, #21]
 8014aaa:	4058      	eors	r0, r3
 8014aac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014ab0:	463a      	mov	r2, r7
 8014ab2:	68a8      	ldr	r0, [r5, #8]
 8014ab4:	4641      	mov	r1, r8
 8014ab6:	f003 f840 	bl	8017b3a <memcpy>
 8014aba:	68aa      	ldr	r2, [r5, #8]
 8014abc:	692b      	ldr	r3, [r5, #16]
 8014abe:	443a      	add	r2, r7
 8014ac0:	443b      	add	r3, r7
 8014ac2:	60aa      	str	r2, [r5, #8]
 8014ac4:	612b      	str	r3, [r5, #16]
 8014ac6:	e7ed      	b.n	8014aa4 <ucdr_serialize_endian_array_uint8_t+0x40>

08014ac8 <ucdr_deserialize_array_uint8_t>:
 8014ac8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014acc:	4688      	mov	r8, r1
 8014ace:	4611      	mov	r1, r2
 8014ad0:	4617      	mov	r7, r2
 8014ad2:	4605      	mov	r5, r0
 8014ad4:	f7f7 ff4e 	bl	800c974 <ucdr_check_buffer_available_for>
 8014ad8:	b9e0      	cbnz	r0, 8014b14 <ucdr_deserialize_array_uint8_t+0x4c>
 8014ada:	463e      	mov	r6, r7
 8014adc:	e009      	b.n	8014af2 <ucdr_deserialize_array_uint8_t+0x2a>
 8014ade:	68a9      	ldr	r1, [r5, #8]
 8014ae0:	f003 f82b 	bl	8017b3a <memcpy>
 8014ae4:	68aa      	ldr	r2, [r5, #8]
 8014ae6:	692b      	ldr	r3, [r5, #16]
 8014ae8:	4422      	add	r2, r4
 8014aea:	4423      	add	r3, r4
 8014aec:	1b36      	subs	r6, r6, r4
 8014aee:	60aa      	str	r2, [r5, #8]
 8014af0:	612b      	str	r3, [r5, #16]
 8014af2:	2201      	movs	r2, #1
 8014af4:	4631      	mov	r1, r6
 8014af6:	4628      	mov	r0, r5
 8014af8:	f7f7 ffc4 	bl	800ca84 <ucdr_check_final_buffer_behavior_array>
 8014afc:	4604      	mov	r4, r0
 8014afe:	1bb8      	subs	r0, r7, r6
 8014b00:	4440      	add	r0, r8
 8014b02:	4622      	mov	r2, r4
 8014b04:	2c00      	cmp	r4, #0
 8014b06:	d1ea      	bne.n	8014ade <ucdr_deserialize_array_uint8_t+0x16>
 8014b08:	2301      	movs	r3, #1
 8014b0a:	7da8      	ldrb	r0, [r5, #22]
 8014b0c:	756b      	strb	r3, [r5, #21]
 8014b0e:	4058      	eors	r0, r3
 8014b10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014b14:	463a      	mov	r2, r7
 8014b16:	68a9      	ldr	r1, [r5, #8]
 8014b18:	4640      	mov	r0, r8
 8014b1a:	f003 f80e 	bl	8017b3a <memcpy>
 8014b1e:	68aa      	ldr	r2, [r5, #8]
 8014b20:	692b      	ldr	r3, [r5, #16]
 8014b22:	443a      	add	r2, r7
 8014b24:	443b      	add	r3, r7
 8014b26:	60aa      	str	r2, [r5, #8]
 8014b28:	612b      	str	r3, [r5, #16]
 8014b2a:	e7ed      	b.n	8014b08 <ucdr_deserialize_array_uint8_t+0x40>

08014b2c <ucdr_deserialize_endian_array_uint8_t>:
 8014b2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014b30:	4619      	mov	r1, r3
 8014b32:	461f      	mov	r7, r3
 8014b34:	4605      	mov	r5, r0
 8014b36:	4690      	mov	r8, r2
 8014b38:	f7f7 ff1c 	bl	800c974 <ucdr_check_buffer_available_for>
 8014b3c:	b9e0      	cbnz	r0, 8014b78 <ucdr_deserialize_endian_array_uint8_t+0x4c>
 8014b3e:	463e      	mov	r6, r7
 8014b40:	e009      	b.n	8014b56 <ucdr_deserialize_endian_array_uint8_t+0x2a>
 8014b42:	68a9      	ldr	r1, [r5, #8]
 8014b44:	f002 fff9 	bl	8017b3a <memcpy>
 8014b48:	68ab      	ldr	r3, [r5, #8]
 8014b4a:	6928      	ldr	r0, [r5, #16]
 8014b4c:	4423      	add	r3, r4
 8014b4e:	4420      	add	r0, r4
 8014b50:	1b36      	subs	r6, r6, r4
 8014b52:	60ab      	str	r3, [r5, #8]
 8014b54:	6128      	str	r0, [r5, #16]
 8014b56:	2201      	movs	r2, #1
 8014b58:	4631      	mov	r1, r6
 8014b5a:	4628      	mov	r0, r5
 8014b5c:	f7f7 ff92 	bl	800ca84 <ucdr_check_final_buffer_behavior_array>
 8014b60:	4604      	mov	r4, r0
 8014b62:	1bb8      	subs	r0, r7, r6
 8014b64:	4440      	add	r0, r8
 8014b66:	4622      	mov	r2, r4
 8014b68:	2c00      	cmp	r4, #0
 8014b6a:	d1ea      	bne.n	8014b42 <ucdr_deserialize_endian_array_uint8_t+0x16>
 8014b6c:	2301      	movs	r3, #1
 8014b6e:	7da8      	ldrb	r0, [r5, #22]
 8014b70:	756b      	strb	r3, [r5, #21]
 8014b72:	4058      	eors	r0, r3
 8014b74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014b78:	463a      	mov	r2, r7
 8014b7a:	68a9      	ldr	r1, [r5, #8]
 8014b7c:	4640      	mov	r0, r8
 8014b7e:	f002 ffdc 	bl	8017b3a <memcpy>
 8014b82:	68aa      	ldr	r2, [r5, #8]
 8014b84:	692b      	ldr	r3, [r5, #16]
 8014b86:	443a      	add	r2, r7
 8014b88:	443b      	add	r3, r7
 8014b8a:	60aa      	str	r2, [r5, #8]
 8014b8c:	612b      	str	r3, [r5, #16]
 8014b8e:	e7ed      	b.n	8014b6c <ucdr_deserialize_endian_array_uint8_t+0x40>

08014b90 <ucdr_serialize_endian_array_double>:
 8014b90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014b94:	4688      	mov	r8, r1
 8014b96:	2108      	movs	r1, #8
 8014b98:	4604      	mov	r4, r0
 8014b9a:	4616      	mov	r6, r2
 8014b9c:	461f      	mov	r7, r3
 8014b9e:	f7f7 ff49 	bl	800ca34 <ucdr_buffer_alignment>
 8014ba2:	4601      	mov	r1, r0
 8014ba4:	4620      	mov	r0, r4
 8014ba6:	7d65      	ldrb	r5, [r4, #21]
 8014ba8:	f7f7 ff88 	bl	800cabc <ucdr_advance_buffer>
 8014bac:	f1b8 0f01 	cmp.w	r8, #1
 8014bb0:	7565      	strb	r5, [r4, #21]
 8014bb2:	d00f      	beq.n	8014bd4 <ucdr_serialize_endian_array_double+0x44>
 8014bb4:	2500      	movs	r5, #0
 8014bb6:	b147      	cbz	r7, 8014bca <ucdr_serialize_endian_array_double+0x3a>
 8014bb8:	ecb6 0b02 	vldmia	r6!, {d0}
 8014bbc:	4641      	mov	r1, r8
 8014bbe:	4620      	mov	r0, r4
 8014bc0:	3501      	adds	r5, #1
 8014bc2:	f7f7 fd37 	bl	800c634 <ucdr_serialize_endian_double>
 8014bc6:	42af      	cmp	r7, r5
 8014bc8:	d1f6      	bne.n	8014bb8 <ucdr_serialize_endian_array_double+0x28>
 8014bca:	7da0      	ldrb	r0, [r4, #22]
 8014bcc:	f080 0001 	eor.w	r0, r0, #1
 8014bd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014bd4:	00ff      	lsls	r7, r7, #3
 8014bd6:	4639      	mov	r1, r7
 8014bd8:	4620      	mov	r0, r4
 8014bda:	f7f7 fecb 	bl	800c974 <ucdr_check_buffer_available_for>
 8014bde:	b9f8      	cbnz	r0, 8014c20 <ucdr_serialize_endian_array_double+0x90>
 8014be0:	46b8      	mov	r8, r7
 8014be2:	e00a      	b.n	8014bfa <ucdr_serialize_endian_array_double+0x6a>
 8014be4:	68a0      	ldr	r0, [r4, #8]
 8014be6:	f002 ffa8 	bl	8017b3a <memcpy>
 8014bea:	68a2      	ldr	r2, [r4, #8]
 8014bec:	6923      	ldr	r3, [r4, #16]
 8014bee:	442a      	add	r2, r5
 8014bf0:	442b      	add	r3, r5
 8014bf2:	eba8 0805 	sub.w	r8, r8, r5
 8014bf6:	60a2      	str	r2, [r4, #8]
 8014bf8:	6123      	str	r3, [r4, #16]
 8014bfa:	4641      	mov	r1, r8
 8014bfc:	2208      	movs	r2, #8
 8014bfe:	4620      	mov	r0, r4
 8014c00:	f7f7 ff40 	bl	800ca84 <ucdr_check_final_buffer_behavior_array>
 8014c04:	eba7 0108 	sub.w	r1, r7, r8
 8014c08:	4431      	add	r1, r6
 8014c0a:	4605      	mov	r5, r0
 8014c0c:	4602      	mov	r2, r0
 8014c0e:	2800      	cmp	r0, #0
 8014c10:	d1e8      	bne.n	8014be4 <ucdr_serialize_endian_array_double+0x54>
 8014c12:	7da0      	ldrb	r0, [r4, #22]
 8014c14:	2308      	movs	r3, #8
 8014c16:	7563      	strb	r3, [r4, #21]
 8014c18:	f080 0001 	eor.w	r0, r0, #1
 8014c1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014c20:	463a      	mov	r2, r7
 8014c22:	68a0      	ldr	r0, [r4, #8]
 8014c24:	4631      	mov	r1, r6
 8014c26:	f002 ff88 	bl	8017b3a <memcpy>
 8014c2a:	68a2      	ldr	r2, [r4, #8]
 8014c2c:	6923      	ldr	r3, [r4, #16]
 8014c2e:	443a      	add	r2, r7
 8014c30:	441f      	add	r7, r3
 8014c32:	60a2      	str	r2, [r4, #8]
 8014c34:	6127      	str	r7, [r4, #16]
 8014c36:	e7ec      	b.n	8014c12 <ucdr_serialize_endian_array_double+0x82>

08014c38 <ucdr_deserialize_endian_array_double>:
 8014c38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014c3c:	4688      	mov	r8, r1
 8014c3e:	2108      	movs	r1, #8
 8014c40:	4605      	mov	r5, r0
 8014c42:	4614      	mov	r4, r2
 8014c44:	461f      	mov	r7, r3
 8014c46:	f7f7 fef5 	bl	800ca34 <ucdr_buffer_alignment>
 8014c4a:	4601      	mov	r1, r0
 8014c4c:	4628      	mov	r0, r5
 8014c4e:	7d6e      	ldrb	r6, [r5, #21]
 8014c50:	f7f7 ff34 	bl	800cabc <ucdr_advance_buffer>
 8014c54:	f1b8 0f01 	cmp.w	r8, #1
 8014c58:	756e      	strb	r6, [r5, #21]
 8014c5a:	d010      	beq.n	8014c7e <ucdr_deserialize_endian_array_double+0x46>
 8014c5c:	2600      	movs	r6, #0
 8014c5e:	b14f      	cbz	r7, 8014c74 <ucdr_deserialize_endian_array_double+0x3c>
 8014c60:	4622      	mov	r2, r4
 8014c62:	4641      	mov	r1, r8
 8014c64:	4628      	mov	r0, r5
 8014c66:	3601      	adds	r6, #1
 8014c68:	f7f7 fdb6 	bl	800c7d8 <ucdr_deserialize_endian_double>
 8014c6c:	42b7      	cmp	r7, r6
 8014c6e:	f104 0408 	add.w	r4, r4, #8
 8014c72:	d1f5      	bne.n	8014c60 <ucdr_deserialize_endian_array_double+0x28>
 8014c74:	7da8      	ldrb	r0, [r5, #22]
 8014c76:	f080 0001 	eor.w	r0, r0, #1
 8014c7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014c7e:	00ff      	lsls	r7, r7, #3
 8014c80:	4639      	mov	r1, r7
 8014c82:	4628      	mov	r0, r5
 8014c84:	f7f7 fe76 	bl	800c974 <ucdr_check_buffer_available_for>
 8014c88:	b9f8      	cbnz	r0, 8014cca <ucdr_deserialize_endian_array_double+0x92>
 8014c8a:	46b8      	mov	r8, r7
 8014c8c:	e00a      	b.n	8014ca4 <ucdr_deserialize_endian_array_double+0x6c>
 8014c8e:	68a9      	ldr	r1, [r5, #8]
 8014c90:	f002 ff53 	bl	8017b3a <memcpy>
 8014c94:	68aa      	ldr	r2, [r5, #8]
 8014c96:	692b      	ldr	r3, [r5, #16]
 8014c98:	4432      	add	r2, r6
 8014c9a:	4433      	add	r3, r6
 8014c9c:	eba8 0806 	sub.w	r8, r8, r6
 8014ca0:	60aa      	str	r2, [r5, #8]
 8014ca2:	612b      	str	r3, [r5, #16]
 8014ca4:	2208      	movs	r2, #8
 8014ca6:	4641      	mov	r1, r8
 8014ca8:	4628      	mov	r0, r5
 8014caa:	f7f7 feeb 	bl	800ca84 <ucdr_check_final_buffer_behavior_array>
 8014cae:	4606      	mov	r6, r0
 8014cb0:	eba7 0008 	sub.w	r0, r7, r8
 8014cb4:	4420      	add	r0, r4
 8014cb6:	4632      	mov	r2, r6
 8014cb8:	2e00      	cmp	r6, #0
 8014cba:	d1e8      	bne.n	8014c8e <ucdr_deserialize_endian_array_double+0x56>
 8014cbc:	7da8      	ldrb	r0, [r5, #22]
 8014cbe:	2308      	movs	r3, #8
 8014cc0:	756b      	strb	r3, [r5, #21]
 8014cc2:	f080 0001 	eor.w	r0, r0, #1
 8014cc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014cca:	463a      	mov	r2, r7
 8014ccc:	68a9      	ldr	r1, [r5, #8]
 8014cce:	4620      	mov	r0, r4
 8014cd0:	f002 ff33 	bl	8017b3a <memcpy>
 8014cd4:	68aa      	ldr	r2, [r5, #8]
 8014cd6:	692b      	ldr	r3, [r5, #16]
 8014cd8:	443a      	add	r2, r7
 8014cda:	441f      	add	r7, r3
 8014cdc:	60aa      	str	r2, [r5, #8]
 8014cde:	612f      	str	r7, [r5, #16]
 8014ce0:	e7ec      	b.n	8014cbc <ucdr_deserialize_endian_array_double+0x84>
 8014ce2:	bf00      	nop

08014ce4 <ucdr_serialize_string>:
 8014ce4:	b510      	push	{r4, lr}
 8014ce6:	b082      	sub	sp, #8
 8014ce8:	4604      	mov	r4, r0
 8014cea:	4608      	mov	r0, r1
 8014cec:	9101      	str	r1, [sp, #4]
 8014cee:	f7eb fa79 	bl	80001e4 <strlen>
 8014cf2:	9901      	ldr	r1, [sp, #4]
 8014cf4:	1c42      	adds	r2, r0, #1
 8014cf6:	4620      	mov	r0, r4
 8014cf8:	b002      	add	sp, #8
 8014cfa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014cfe:	f7f7 befd 	b.w	800cafc <ucdr_serialize_sequence_char>
 8014d02:	bf00      	nop

08014d04 <ucdr_deserialize_string>:
 8014d04:	b500      	push	{lr}
 8014d06:	b083      	sub	sp, #12
 8014d08:	ab01      	add	r3, sp, #4
 8014d0a:	f7f7 ff09 	bl	800cb20 <ucdr_deserialize_sequence_char>
 8014d0e:	b003      	add	sp, #12
 8014d10:	f85d fb04 	ldr.w	pc, [sp], #4

08014d14 <get_custom_error>:
 8014d14:	4b01      	ldr	r3, [pc, #4]	@ (8014d1c <get_custom_error+0x8>)
 8014d16:	7818      	ldrb	r0, [r3, #0]
 8014d18:	4770      	bx	lr
 8014d1a:	bf00      	nop
 8014d1c:	2000c0c8 	.word	0x2000c0c8

08014d20 <recv_custom_msg>:
 8014d20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014d24:	4693      	mov	fp, r2
 8014d26:	b089      	sub	sp, #36	@ 0x24
 8014d28:	f890 2200 	ldrb.w	r2, [r0, #512]	@ 0x200
 8014d2c:	9305      	str	r3, [sp, #20]
 8014d2e:	468a      	mov	sl, r1
 8014d30:	2100      	movs	r1, #0
 8014d32:	4604      	mov	r4, r0
 8014d34:	f88d 101e 	strb.w	r1, [sp, #30]
 8014d38:	b322      	cbz	r2, 8014d84 <recv_custom_msg+0x64>
 8014d3a:	f200 2902 	addw	r9, r0, #514	@ 0x202
 8014d3e:	f10d 081f 	add.w	r8, sp, #31
 8014d42:	af05      	add	r7, sp, #20
 8014d44:	f10d 061e 	add.w	r6, sp, #30
 8014d48:	f44f 7500 	mov.w	r5, #512	@ 0x200
 8014d4c:	e002      	b.n	8014d54 <recv_custom_msg+0x34>
 8014d4e:	9b05      	ldr	r3, [sp, #20]
 8014d50:	2b00      	cmp	r3, #0
 8014d52:	dd0f      	ble.n	8014d74 <recv_custom_msg+0x54>
 8014d54:	f8d4 1274 	ldr.w	r1, [r4, #628]	@ 0x274
 8014d58:	4623      	mov	r3, r4
 8014d5a:	e9cd 7802 	strd	r7, r8, [sp, #8]
 8014d5e:	e9cd 5600 	strd	r5, r6, [sp]
 8014d62:	4622      	mov	r2, r4
 8014d64:	4648      	mov	r0, r9
 8014d66:	f001 f92d 	bl	8015fc4 <uxr_read_framed_msg>
 8014d6a:	2800      	cmp	r0, #0
 8014d6c:	d0ef      	beq.n	8014d4e <recv_custom_msg+0x2e>
 8014d6e:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8014d72:	b1b3      	cbz	r3, 8014da2 <recv_custom_msg+0x82>
 8014d74:	4b0f      	ldr	r3, [pc, #60]	@ (8014db4 <recv_custom_msg+0x94>)
 8014d76:	f89d 201f 	ldrb.w	r2, [sp, #31]
 8014d7a:	701a      	strb	r2, [r3, #0]
 8014d7c:	2000      	movs	r0, #0
 8014d7e:	b009      	add	sp, #36	@ 0x24
 8014d80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014d84:	f10d 021f 	add.w	r2, sp, #31
 8014d88:	9200      	str	r2, [sp, #0]
 8014d8a:	f8d0 5274 	ldr.w	r5, [r0, #628]	@ 0x274
 8014d8e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8014d92:	4601      	mov	r1, r0
 8014d94:	47a8      	blx	r5
 8014d96:	2800      	cmp	r0, #0
 8014d98:	d0ec      	beq.n	8014d74 <recv_custom_msg+0x54>
 8014d9a:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8014d9e:	2b00      	cmp	r3, #0
 8014da0:	d1e8      	bne.n	8014d74 <recv_custom_msg+0x54>
 8014da2:	f8cb 0000 	str.w	r0, [fp]
 8014da6:	2001      	movs	r0, #1
 8014da8:	f8ca 4000 	str.w	r4, [sl]
 8014dac:	b009      	add	sp, #36	@ 0x24
 8014dae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014db2:	bf00      	nop
 8014db4:	2000c0c8 	.word	0x2000c0c8

08014db8 <send_custom_msg>:
 8014db8:	b530      	push	{r4, r5, lr}
 8014dba:	f890 4200 	ldrb.w	r4, [r0, #512]	@ 0x200
 8014dbe:	b087      	sub	sp, #28
 8014dc0:	4615      	mov	r5, r2
 8014dc2:	b974      	cbnz	r4, 8014de2 <send_custom_msg+0x2a>
 8014dc4:	f8d0 4270 	ldr.w	r4, [r0, #624]	@ 0x270
 8014dc8:	f10d 0317 	add.w	r3, sp, #23
 8014dcc:	47a0      	blx	r4
 8014dce:	b108      	cbz	r0, 8014dd4 <send_custom_msg+0x1c>
 8014dd0:	42a8      	cmp	r0, r5
 8014dd2:	d015      	beq.n	8014e00 <send_custom_msg+0x48>
 8014dd4:	4b0c      	ldr	r3, [pc, #48]	@ (8014e08 <send_custom_msg+0x50>)
 8014dd6:	f89d 2017 	ldrb.w	r2, [sp, #23]
 8014dda:	701a      	strb	r2, [r3, #0]
 8014ddc:	2000      	movs	r0, #0
 8014dde:	b007      	add	sp, #28
 8014de0:	bd30      	pop	{r4, r5, pc}
 8014de2:	460b      	mov	r3, r1
 8014de4:	2200      	movs	r2, #0
 8014de6:	f10d 0117 	add.w	r1, sp, #23
 8014dea:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8014dee:	4602      	mov	r2, r0
 8014df0:	f8d0 1270 	ldr.w	r1, [r0, #624]	@ 0x270
 8014df4:	9500      	str	r5, [sp, #0]
 8014df6:	f200 2002 	addw	r0, r0, #514	@ 0x202
 8014dfa:	f000 feeb 	bl	8015bd4 <uxr_write_framed_msg>
 8014dfe:	e7e6      	b.n	8014dce <send_custom_msg+0x16>
 8014e00:	2001      	movs	r0, #1
 8014e02:	b007      	add	sp, #28
 8014e04:	bd30      	pop	{r4, r5, pc}
 8014e06:	bf00      	nop
 8014e08:	2000c0c8 	.word	0x2000c0c8

08014e0c <uxr_set_custom_transport_callbacks>:
 8014e0c:	b410      	push	{r4}
 8014e0e:	9c01      	ldr	r4, [sp, #4]
 8014e10:	f8c0 4270 	str.w	r4, [r0, #624]	@ 0x270
 8014e14:	e9c0 239a 	strd	r2, r3, [r0, #616]	@ 0x268
 8014e18:	9b02      	ldr	r3, [sp, #8]
 8014e1a:	f880 1200 	strb.w	r1, [r0, #512]	@ 0x200
 8014e1e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014e22:	f8c0 3274 	str.w	r3, [r0, #628]	@ 0x274
 8014e26:	4770      	bx	lr

08014e28 <uxr_init_custom_transport>:
 8014e28:	b538      	push	{r3, r4, r5, lr}
 8014e2a:	f8d0 3268 	ldr.w	r3, [r0, #616]	@ 0x268
 8014e2e:	b303      	cbz	r3, 8014e72 <uxr_init_custom_transport+0x4a>
 8014e30:	f8d0 226c 	ldr.w	r2, [r0, #620]	@ 0x26c
 8014e34:	4604      	mov	r4, r0
 8014e36:	b1e2      	cbz	r2, 8014e72 <uxr_init_custom_transport+0x4a>
 8014e38:	f8d0 2270 	ldr.w	r2, [r0, #624]	@ 0x270
 8014e3c:	b1ca      	cbz	r2, 8014e72 <uxr_init_custom_transport+0x4a>
 8014e3e:	f8d0 2274 	ldr.w	r2, [r0, #628]	@ 0x274
 8014e42:	b1b2      	cbz	r2, 8014e72 <uxr_init_custom_transport+0x4a>
 8014e44:	f8c0 128c 	str.w	r1, [r0, #652]	@ 0x28c
 8014e48:	4798      	blx	r3
 8014e4a:	4605      	mov	r5, r0
 8014e4c:	b188      	cbz	r0, 8014e72 <uxr_init_custom_transport+0x4a>
 8014e4e:	f894 3200 	ldrb.w	r3, [r4, #512]	@ 0x200
 8014e52:	b98b      	cbnz	r3, 8014e78 <uxr_init_custom_transport+0x50>
 8014e54:	490b      	ldr	r1, [pc, #44]	@ (8014e84 <uxr_init_custom_transport+0x5c>)
 8014e56:	4b0c      	ldr	r3, [pc, #48]	@ (8014e88 <uxr_init_custom_transport+0x60>)
 8014e58:	4a0c      	ldr	r2, [pc, #48]	@ (8014e8c <uxr_init_custom_transport+0x64>)
 8014e5a:	f8c4 3280 	str.w	r3, [r4, #640]	@ 0x280
 8014e5e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8014e62:	e9c4 419e 	strd	r4, r1, [r4, #632]	@ 0x278
 8014e66:	f8c4 2284 	str.w	r2, [r4, #644]	@ 0x284
 8014e6a:	f8a4 3288 	strh.w	r3, [r4, #648]	@ 0x288
 8014e6e:	4628      	mov	r0, r5
 8014e70:	bd38      	pop	{r3, r4, r5, pc}
 8014e72:	2500      	movs	r5, #0
 8014e74:	4628      	mov	r0, r5
 8014e76:	bd38      	pop	{r3, r4, r5, pc}
 8014e78:	2100      	movs	r1, #0
 8014e7a:	f204 2002 	addw	r0, r4, #514	@ 0x202
 8014e7e:	f000 fea3 	bl	8015bc8 <uxr_init_framing_io>
 8014e82:	e7e7      	b.n	8014e54 <uxr_init_custom_transport+0x2c>
 8014e84:	08014db9 	.word	0x08014db9
 8014e88:	08014d21 	.word	0x08014d21
 8014e8c:	08014d15 	.word	0x08014d15

08014e90 <uxr_close_custom_transport>:
 8014e90:	f8d0 326c 	ldr.w	r3, [r0, #620]	@ 0x26c
 8014e94:	4718      	bx	r3
 8014e96:	bf00      	nop

08014e98 <uxr_init_input_best_effort_stream>:
 8014e98:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8014e9c:	8003      	strh	r3, [r0, #0]
 8014e9e:	4770      	bx	lr

08014ea0 <uxr_reset_input_best_effort_stream>:
 8014ea0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8014ea4:	8003      	strh	r3, [r0, #0]
 8014ea6:	4770      	bx	lr

08014ea8 <uxr_receive_best_effort_message>:
 8014ea8:	b538      	push	{r3, r4, r5, lr}
 8014eaa:	4604      	mov	r4, r0
 8014eac:	8800      	ldrh	r0, [r0, #0]
 8014eae:	460d      	mov	r5, r1
 8014eb0:	f000 fe72 	bl	8015b98 <uxr_seq_num_cmp>
 8014eb4:	4603      	mov	r3, r0
 8014eb6:	2b00      	cmp	r3, #0
 8014eb8:	ea4f 70d0 	mov.w	r0, r0, lsr #31
 8014ebc:	bfb8      	it	lt
 8014ebe:	8025      	strhlt	r5, [r4, #0]
 8014ec0:	bd38      	pop	{r3, r4, r5, pc}
 8014ec2:	bf00      	nop

08014ec4 <on_full_input_buffer>:
 8014ec4:	b570      	push	{r4, r5, r6, lr}
 8014ec6:	4605      	mov	r5, r0
 8014ec8:	460c      	mov	r4, r1
 8014eca:	682b      	ldr	r3, [r5, #0]
 8014ecc:	6809      	ldr	r1, [r1, #0]
 8014ece:	8920      	ldrh	r0, [r4, #8]
 8014ed0:	6862      	ldr	r2, [r4, #4]
 8014ed2:	fbb2 f2f0 	udiv	r2, r2, r0
 8014ed6:	eba3 0c01 	sub.w	ip, r3, r1
 8014eda:	fbbc fcf2 	udiv	ip, ip, r2
 8014ede:	f10c 0c01 	add.w	ip, ip, #1
 8014ee2:	fa1f f38c 	uxth.w	r3, ip
 8014ee6:	fbb3 f6f0 	udiv	r6, r3, r0
 8014eea:	fb00 3316 	mls	r3, r0, r6, r3
 8014eee:	b29b      	uxth	r3, r3
 8014ef0:	fb02 f303 	mul.w	r3, r2, r3
 8014ef4:	1d18      	adds	r0, r3, #4
 8014ef6:	4408      	add	r0, r1
 8014ef8:	7d26      	ldrb	r6, [r4, #20]
 8014efa:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8014efe:	b116      	cbz	r6, 8014f06 <on_full_input_buffer+0x42>
 8014f00:	2600      	movs	r6, #0
 8014f02:	f840 6c04 	str.w	r6, [r0, #-4]
 8014f06:	2a03      	cmp	r2, #3
 8014f08:	d801      	bhi.n	8014f0e <on_full_input_buffer+0x4a>
 8014f0a:	2001      	movs	r0, #1
 8014f0c:	bd70      	pop	{r4, r5, r6, pc}
 8014f0e:	3308      	adds	r3, #8
 8014f10:	4419      	add	r1, r3
 8014f12:	4628      	mov	r0, r5
 8014f14:	692b      	ldr	r3, [r5, #16]
 8014f16:	3a04      	subs	r2, #4
 8014f18:	f7f7 fd78 	bl	800ca0c <ucdr_init_buffer_origin>
 8014f1c:	4628      	mov	r0, r5
 8014f1e:	4903      	ldr	r1, [pc, #12]	@ (8014f2c <on_full_input_buffer+0x68>)
 8014f20:	4622      	mov	r2, r4
 8014f22:	f7f7 fd4f 	bl	800c9c4 <ucdr_set_on_full_buffer_callback>
 8014f26:	2000      	movs	r0, #0
 8014f28:	bd70      	pop	{r4, r5, r6, pc}
 8014f2a:	bf00      	nop
 8014f2c:	08014ec5 	.word	0x08014ec5

08014f30 <uxr_init_input_reliable_stream>:
 8014f30:	b500      	push	{lr}
 8014f32:	e9c0 1200 	strd	r1, r2, [r0]
 8014f36:	f04f 0e00 	mov.w	lr, #0
 8014f3a:	9a01      	ldr	r2, [sp, #4]
 8014f3c:	8103      	strh	r3, [r0, #8]
 8014f3e:	6102      	str	r2, [r0, #16]
 8014f40:	f880 e014 	strb.w	lr, [r0, #20]
 8014f44:	b1d3      	cbz	r3, 8014f7c <uxr_init_input_reliable_stream+0x4c>
 8014f46:	f8c1 e000 	str.w	lr, [r1]
 8014f4a:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8014f4e:	f1bc 0f01 	cmp.w	ip, #1
 8014f52:	d913      	bls.n	8014f7c <uxr_init_input_reliable_stream+0x4c>
 8014f54:	2301      	movs	r3, #1
 8014f56:	fbb3 f1fc 	udiv	r1, r3, ip
 8014f5a:	fb0c 3111 	mls	r1, ip, r1, r3
 8014f5e:	b289      	uxth	r1, r1
 8014f60:	6842      	ldr	r2, [r0, #4]
 8014f62:	fbb2 f2fc 	udiv	r2, r2, ip
 8014f66:	fb01 f202 	mul.w	r2, r1, r2
 8014f6a:	6801      	ldr	r1, [r0, #0]
 8014f6c:	f841 e002 	str.w	lr, [r1, r2]
 8014f70:	3301      	adds	r3, #1
 8014f72:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8014f76:	b29b      	uxth	r3, r3
 8014f78:	459c      	cmp	ip, r3
 8014f7a:	d8ec      	bhi.n	8014f56 <uxr_init_input_reliable_stream+0x26>
 8014f7c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8014f80:	60c3      	str	r3, [r0, #12]
 8014f82:	f85d fb04 	ldr.w	pc, [sp], #4
 8014f86:	bf00      	nop

08014f88 <uxr_reset_input_reliable_stream>:
 8014f88:	8901      	ldrh	r1, [r0, #8]
 8014f8a:	b1e9      	cbz	r1, 8014fc8 <uxr_reset_input_reliable_stream+0x40>
 8014f8c:	f04f 0c00 	mov.w	ip, #0
 8014f90:	b500      	push	{lr}
 8014f92:	4663      	mov	r3, ip
 8014f94:	46e6      	mov	lr, ip
 8014f96:	fbb3 f2f1 	udiv	r2, r3, r1
 8014f9a:	fb01 3312 	mls	r3, r1, r2, r3
 8014f9e:	b29b      	uxth	r3, r3
 8014fa0:	6842      	ldr	r2, [r0, #4]
 8014fa2:	fbb2 f2f1 	udiv	r2, r2, r1
 8014fa6:	fb02 f303 	mul.w	r3, r2, r3
 8014faa:	6802      	ldr	r2, [r0, #0]
 8014fac:	f842 e003 	str.w	lr, [r2, r3]
 8014fb0:	f10c 0c01 	add.w	ip, ip, #1
 8014fb4:	8901      	ldrh	r1, [r0, #8]
 8014fb6:	fa1f f38c 	uxth.w	r3, ip
 8014fba:	4299      	cmp	r1, r3
 8014fbc:	d8eb      	bhi.n	8014f96 <uxr_reset_input_reliable_stream+0xe>
 8014fbe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8014fc2:	60c3      	str	r3, [r0, #12]
 8014fc4:	f85d fb04 	ldr.w	pc, [sp], #4
 8014fc8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8014fcc:	60c3      	str	r3, [r0, #12]
 8014fce:	4770      	bx	lr

08014fd0 <uxr_receive_reliable_message>:
 8014fd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014fd4:	4604      	mov	r4, r0
 8014fd6:	460d      	mov	r5, r1
 8014fd8:	8901      	ldrh	r1, [r0, #8]
 8014fda:	8980      	ldrh	r0, [r0, #12]
 8014fdc:	4690      	mov	r8, r2
 8014fde:	461f      	mov	r7, r3
 8014fe0:	f000 fdd2 	bl	8015b88 <uxr_seq_num_add>
 8014fe4:	4629      	mov	r1, r5
 8014fe6:	4606      	mov	r6, r0
 8014fe8:	89a0      	ldrh	r0, [r4, #12]
 8014fea:	f000 fdd5 	bl	8015b98 <uxr_seq_num_cmp>
 8014fee:	2800      	cmp	r0, #0
 8014ff0:	db0a      	blt.n	8015008 <uxr_receive_reliable_message+0x38>
 8014ff2:	2600      	movs	r6, #0
 8014ff4:	89e0      	ldrh	r0, [r4, #14]
 8014ff6:	4629      	mov	r1, r5
 8014ff8:	f000 fdce 	bl	8015b98 <uxr_seq_num_cmp>
 8014ffc:	2800      	cmp	r0, #0
 8014ffe:	da00      	bge.n	8015002 <uxr_receive_reliable_message+0x32>
 8015000:	81e5      	strh	r5, [r4, #14]
 8015002:	4630      	mov	r0, r6
 8015004:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015008:	4630      	mov	r0, r6
 801500a:	4629      	mov	r1, r5
 801500c:	f000 fdc4 	bl	8015b98 <uxr_seq_num_cmp>
 8015010:	2800      	cmp	r0, #0
 8015012:	dbee      	blt.n	8014ff2 <uxr_receive_reliable_message+0x22>
 8015014:	6923      	ldr	r3, [r4, #16]
 8015016:	4640      	mov	r0, r8
 8015018:	4798      	blx	r3
 801501a:	2101      	movs	r1, #1
 801501c:	4681      	mov	r9, r0
 801501e:	89a0      	ldrh	r0, [r4, #12]
 8015020:	f000 fdb2 	bl	8015b88 <uxr_seq_num_add>
 8015024:	f1b9 0f00 	cmp.w	r9, #0
 8015028:	d101      	bne.n	801502e <uxr_receive_reliable_message+0x5e>
 801502a:	4285      	cmp	r5, r0
 801502c:	d047      	beq.n	80150be <uxr_receive_reliable_message+0xee>
 801502e:	8922      	ldrh	r2, [r4, #8]
 8015030:	fbb5 f0f2 	udiv	r0, r5, r2
 8015034:	fb02 5010 	mls	r0, r2, r0, r5
 8015038:	b280      	uxth	r0, r0
 801503a:	6863      	ldr	r3, [r4, #4]
 801503c:	fbb3 f3f2 	udiv	r3, r3, r2
 8015040:	fb00 f303 	mul.w	r3, r0, r3
 8015044:	6820      	ldr	r0, [r4, #0]
 8015046:	3304      	adds	r3, #4
 8015048:	4418      	add	r0, r3
 801504a:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801504e:	2b00      	cmp	r3, #0
 8015050:	d1cf      	bne.n	8014ff2 <uxr_receive_reliable_message+0x22>
 8015052:	4641      	mov	r1, r8
 8015054:	463a      	mov	r2, r7
 8015056:	f002 fd70 	bl	8017b3a <memcpy>
 801505a:	8921      	ldrh	r1, [r4, #8]
 801505c:	fbb5 f2f1 	udiv	r2, r5, r1
 8015060:	fb01 5212 	mls	r2, r1, r2, r5
 8015064:	b292      	uxth	r2, r2
 8015066:	6863      	ldr	r3, [r4, #4]
 8015068:	fbb3 f3f1 	udiv	r3, r3, r1
 801506c:	fb02 f303 	mul.w	r3, r2, r3
 8015070:	6822      	ldr	r2, [r4, #0]
 8015072:	50d7      	str	r7, [r2, r3]
 8015074:	9a08      	ldr	r2, [sp, #32]
 8015076:	2301      	movs	r3, #1
 8015078:	7013      	strb	r3, [r2, #0]
 801507a:	f1b9 0f00 	cmp.w	r9, #0
 801507e:	d0b8      	beq.n	8014ff2 <uxr_receive_reliable_message+0x22>
 8015080:	89a6      	ldrh	r6, [r4, #12]
 8015082:	4630      	mov	r0, r6
 8015084:	2101      	movs	r1, #1
 8015086:	f000 fd7f 	bl	8015b88 <uxr_seq_num_add>
 801508a:	8922      	ldrh	r2, [r4, #8]
 801508c:	6863      	ldr	r3, [r4, #4]
 801508e:	fbb3 f3f2 	udiv	r3, r3, r2
 8015092:	4606      	mov	r6, r0
 8015094:	fbb0 f0f2 	udiv	r0, r0, r2
 8015098:	fb02 6010 	mls	r0, r2, r0, r6
 801509c:	b280      	uxth	r0, r0
 801509e:	fb00 f303 	mul.w	r3, r0, r3
 80150a2:	6820      	ldr	r0, [r4, #0]
 80150a4:	3304      	adds	r3, #4
 80150a6:	4418      	add	r0, r3
 80150a8:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80150ac:	2b00      	cmp	r3, #0
 80150ae:	d0a0      	beq.n	8014ff2 <uxr_receive_reliable_message+0x22>
 80150b0:	6923      	ldr	r3, [r4, #16]
 80150b2:	4798      	blx	r3
 80150b4:	2802      	cmp	r0, #2
 80150b6:	d008      	beq.n	80150ca <uxr_receive_reliable_message+0xfa>
 80150b8:	2801      	cmp	r0, #1
 80150ba:	d0e2      	beq.n	8015082 <uxr_receive_reliable_message+0xb2>
 80150bc:	e799      	b.n	8014ff2 <uxr_receive_reliable_message+0x22>
 80150be:	9b08      	ldr	r3, [sp, #32]
 80150c0:	81a5      	strh	r5, [r4, #12]
 80150c2:	2601      	movs	r6, #1
 80150c4:	f883 9000 	strb.w	r9, [r3]
 80150c8:	e794      	b.n	8014ff4 <uxr_receive_reliable_message+0x24>
 80150ca:	2601      	movs	r6, #1
 80150cc:	e792      	b.n	8014ff4 <uxr_receive_reliable_message+0x24>
 80150ce:	bf00      	nop

080150d0 <uxr_next_input_reliable_buffer_available>:
 80150d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80150d4:	4604      	mov	r4, r0
 80150d6:	460f      	mov	r7, r1
 80150d8:	8980      	ldrh	r0, [r0, #12]
 80150da:	2101      	movs	r1, #1
 80150dc:	4690      	mov	r8, r2
 80150de:	f000 fd53 	bl	8015b88 <uxr_seq_num_add>
 80150e2:	8922      	ldrh	r2, [r4, #8]
 80150e4:	fbb0 f6f2 	udiv	r6, r0, r2
 80150e8:	fb02 0616 	mls	r6, r2, r6, r0
 80150ec:	b2b6      	uxth	r6, r6
 80150ee:	6863      	ldr	r3, [r4, #4]
 80150f0:	fbb3 f3f2 	udiv	r3, r3, r2
 80150f4:	fb06 f303 	mul.w	r3, r6, r3
 80150f8:	6826      	ldr	r6, [r4, #0]
 80150fa:	3304      	adds	r3, #4
 80150fc:	441e      	add	r6, r3
 80150fe:	f856 9c04 	ldr.w	r9, [r6, #-4]
 8015102:	f1b9 0f00 	cmp.w	r9, #0
 8015106:	d023      	beq.n	8015150 <uxr_next_input_reliable_buffer_available+0x80>
 8015108:	6923      	ldr	r3, [r4, #16]
 801510a:	4605      	mov	r5, r0
 801510c:	4630      	mov	r0, r6
 801510e:	4798      	blx	r3
 8015110:	4682      	mov	sl, r0
 8015112:	b300      	cbz	r0, 8015156 <uxr_next_input_reliable_buffer_available+0x86>
 8015114:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 8015118:	2101      	movs	r1, #1
 801511a:	4650      	mov	r0, sl
 801511c:	f000 fd34 	bl	8015b88 <uxr_seq_num_add>
 8015120:	8921      	ldrh	r1, [r4, #8]
 8015122:	fbb0 f2f1 	udiv	r2, r0, r1
 8015126:	4682      	mov	sl, r0
 8015128:	fb01 0212 	mls	r2, r1, r2, r0
 801512c:	e9d4 0300 	ldrd	r0, r3, [r4]
 8015130:	b292      	uxth	r2, r2
 8015132:	fbb3 f3f1 	udiv	r3, r3, r1
 8015136:	fb02 f303 	mul.w	r3, r2, r3
 801513a:	3304      	adds	r3, #4
 801513c:	4418      	add	r0, r3
 801513e:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8015142:	b12b      	cbz	r3, 8015150 <uxr_next_input_reliable_buffer_available+0x80>
 8015144:	6923      	ldr	r3, [r4, #16]
 8015146:	4798      	blx	r3
 8015148:	2802      	cmp	r0, #2
 801514a:	d01b      	beq.n	8015184 <uxr_next_input_reliable_buffer_available+0xb4>
 801514c:	2801      	cmp	r0, #1
 801514e:	d0e3      	beq.n	8015118 <uxr_next_input_reliable_buffer_available+0x48>
 8015150:	2000      	movs	r0, #0
 8015152:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015156:	464a      	mov	r2, r9
 8015158:	4631      	mov	r1, r6
 801515a:	4638      	mov	r0, r7
 801515c:	f7f7 fc5e 	bl	800ca1c <ucdr_init_buffer>
 8015160:	8921      	ldrh	r1, [r4, #8]
 8015162:	fbb5 f2f1 	udiv	r2, r5, r1
 8015166:	fb01 5212 	mls	r2, r1, r2, r5
 801516a:	b292      	uxth	r2, r2
 801516c:	6863      	ldr	r3, [r4, #4]
 801516e:	fbb3 f3f1 	udiv	r3, r3, r1
 8015172:	fb02 f303 	mul.w	r3, r2, r3
 8015176:	6822      	ldr	r2, [r4, #0]
 8015178:	f842 a003 	str.w	sl, [r2, r3]
 801517c:	2001      	movs	r0, #1
 801517e:	81a5      	strh	r5, [r4, #12]
 8015180:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015184:	8920      	ldrh	r0, [r4, #8]
 8015186:	fbb5 f3f0 	udiv	r3, r5, r0
 801518a:	fb00 5513 	mls	r5, r0, r3, r5
 801518e:	b2ad      	uxth	r5, r5
 8015190:	6863      	ldr	r3, [r4, #4]
 8015192:	fbb3 f3f0 	udiv	r3, r3, r0
 8015196:	fb03 f505 	mul.w	r5, r3, r5
 801519a:	6823      	ldr	r3, [r4, #0]
 801519c:	2000      	movs	r0, #0
 801519e:	5158      	str	r0, [r3, r5]
 80151a0:	eb06 0108 	add.w	r1, r6, r8
 80151a4:	eba9 0208 	sub.w	r2, r9, r8
 80151a8:	4638      	mov	r0, r7
 80151aa:	f7f7 fc37 	bl	800ca1c <ucdr_init_buffer>
 80151ae:	4638      	mov	r0, r7
 80151b0:	4903      	ldr	r1, [pc, #12]	@ (80151c0 <uxr_next_input_reliable_buffer_available+0xf0>)
 80151b2:	4622      	mov	r2, r4
 80151b4:	f7f7 fc06 	bl	800c9c4 <ucdr_set_on_full_buffer_callback>
 80151b8:	f8a4 a00c 	strh.w	sl, [r4, #12]
 80151bc:	2001      	movs	r0, #1
 80151be:	e7c8      	b.n	8015152 <uxr_next_input_reliable_buffer_available+0x82>
 80151c0:	08014ec5 	.word	0x08014ec5

080151c4 <uxr_process_heartbeat>:
 80151c4:	b538      	push	{r3, r4, r5, lr}
 80151c6:	4611      	mov	r1, r2
 80151c8:	4604      	mov	r4, r0
 80151ca:	89c0      	ldrh	r0, [r0, #14]
 80151cc:	4615      	mov	r5, r2
 80151ce:	f000 fce3 	bl	8015b98 <uxr_seq_num_cmp>
 80151d2:	2800      	cmp	r0, #0
 80151d4:	bfb8      	it	lt
 80151d6:	81e5      	strhlt	r5, [r4, #14]
 80151d8:	bd38      	pop	{r3, r4, r5, pc}
 80151da:	bf00      	nop

080151dc <uxr_compute_acknack>:
 80151dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80151e0:	8903      	ldrh	r3, [r0, #8]
 80151e2:	8985      	ldrh	r5, [r0, #12]
 80151e4:	4604      	mov	r4, r0
 80151e6:	460e      	mov	r6, r1
 80151e8:	b1d3      	cbz	r3, 8015220 <uxr_compute_acknack+0x44>
 80151ea:	4628      	mov	r0, r5
 80151ec:	2701      	movs	r7, #1
 80151ee:	e003      	b.n	80151f8 <uxr_compute_acknack+0x1c>
 80151f0:	4567      	cmp	r7, ip
 80151f2:	d215      	bcs.n	8015220 <uxr_compute_acknack+0x44>
 80151f4:	89a0      	ldrh	r0, [r4, #12]
 80151f6:	3701      	adds	r7, #1
 80151f8:	b2b9      	uxth	r1, r7
 80151fa:	f000 fcc5 	bl	8015b88 <uxr_seq_num_add>
 80151fe:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8015202:	fbb0 f3fc 	udiv	r3, r0, ip
 8015206:	fb0c 0313 	mls	r3, ip, r3, r0
 801520a:	b29a      	uxth	r2, r3
 801520c:	e9d4 1300 	ldrd	r1, r3, [r4]
 8015210:	fbb3 f3fc 	udiv	r3, r3, ip
 8015214:	fb02 f303 	mul.w	r3, r2, r3
 8015218:	58cb      	ldr	r3, [r1, r3]
 801521a:	2b00      	cmp	r3, #0
 801521c:	d1e8      	bne.n	80151f0 <uxr_compute_acknack+0x14>
 801521e:	4605      	mov	r5, r0
 8015220:	8035      	strh	r5, [r6, #0]
 8015222:	2101      	movs	r1, #1
 8015224:	4628      	mov	r0, r5
 8015226:	89e7      	ldrh	r7, [r4, #14]
 8015228:	f000 fcb2 	bl	8015b90 <uxr_seq_num_sub>
 801522c:	4601      	mov	r1, r0
 801522e:	4638      	mov	r0, r7
 8015230:	f000 fcae 	bl	8015b90 <uxr_seq_num_sub>
 8015234:	4605      	mov	r5, r0
 8015236:	b318      	cbz	r0, 8015280 <uxr_compute_acknack+0xa4>
 8015238:	f04f 0900 	mov.w	r9, #0
 801523c:	464f      	mov	r7, r9
 801523e:	f04f 0801 	mov.w	r8, #1
 8015242:	fa1f f189 	uxth.w	r1, r9
 8015246:	8830      	ldrh	r0, [r6, #0]
 8015248:	f000 fc9e 	bl	8015b88 <uxr_seq_num_add>
 801524c:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8015250:	fbb0 f3fc 	udiv	r3, r0, ip
 8015254:	e9d4 1200 	ldrd	r1, r2, [r4]
 8015258:	fb03 001c 	mls	r0, r3, ip, r0
 801525c:	b283      	uxth	r3, r0
 801525e:	fbb2 f2fc 	udiv	r2, r2, ip
 8015262:	fb02 f303 	mul.w	r3, r2, r3
 8015266:	fa08 f209 	lsl.w	r2, r8, r9
 801526a:	58cb      	ldr	r3, [r1, r3]
 801526c:	f109 0901 	add.w	r9, r9, #1
 8015270:	b90b      	cbnz	r3, 8015276 <uxr_compute_acknack+0x9a>
 8015272:	4317      	orrs	r7, r2
 8015274:	b2bf      	uxth	r7, r7
 8015276:	454d      	cmp	r5, r9
 8015278:	d1e3      	bne.n	8015242 <uxr_compute_acknack+0x66>
 801527a:	4638      	mov	r0, r7
 801527c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015280:	4607      	mov	r7, r0
 8015282:	4638      	mov	r0, r7
 8015284:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08015288 <uxr_init_output_best_effort_stream>:
 8015288:	f64f 7cff 	movw	ip, #65535	@ 0xffff
 801528c:	e9c0 3201 	strd	r3, r2, [r0, #4]
 8015290:	6001      	str	r1, [r0, #0]
 8015292:	7303      	strb	r3, [r0, #12]
 8015294:	f8a0 c00e 	strh.w	ip, [r0, #14]
 8015298:	4770      	bx	lr
 801529a:	bf00      	nop

0801529c <uxr_reset_output_best_effort_stream>:
 801529c:	7b02      	ldrb	r2, [r0, #12]
 801529e:	6042      	str	r2, [r0, #4]
 80152a0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80152a4:	81c3      	strh	r3, [r0, #14]
 80152a6:	4770      	bx	lr

080152a8 <uxr_prepare_best_effort_buffer_to_write>:
 80152a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80152aa:	4604      	mov	r4, r0
 80152ac:	b083      	sub	sp, #12
 80152ae:	6840      	ldr	r0, [r0, #4]
 80152b0:	460d      	mov	r5, r1
 80152b2:	4616      	mov	r6, r2
 80152b4:	f7f9 f8e4 	bl	800e480 <uxr_submessage_padding>
 80152b8:	6863      	ldr	r3, [r4, #4]
 80152ba:	4418      	add	r0, r3
 80152bc:	68a3      	ldr	r3, [r4, #8]
 80152be:	1942      	adds	r2, r0, r5
 80152c0:	4293      	cmp	r3, r2
 80152c2:	bf2c      	ite	cs
 80152c4:	2701      	movcs	r7, #1
 80152c6:	2700      	movcc	r7, #0
 80152c8:	d202      	bcs.n	80152d0 <uxr_prepare_best_effort_buffer_to_write+0x28>
 80152ca:	4638      	mov	r0, r7
 80152cc:	b003      	add	sp, #12
 80152ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80152d0:	9000      	str	r0, [sp, #0]
 80152d2:	6821      	ldr	r1, [r4, #0]
 80152d4:	4630      	mov	r0, r6
 80152d6:	2300      	movs	r3, #0
 80152d8:	f7f7 fb8e 	bl	800c9f8 <ucdr_init_buffer_origin_offset>
 80152dc:	6861      	ldr	r1, [r4, #4]
 80152de:	4638      	mov	r0, r7
 80152e0:	4429      	add	r1, r5
 80152e2:	6061      	str	r1, [r4, #4]
 80152e4:	b003      	add	sp, #12
 80152e6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080152e8 <uxr_prepare_best_effort_buffer_to_send>:
 80152e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80152ec:	4604      	mov	r4, r0
 80152ee:	461d      	mov	r5, r3
 80152f0:	6840      	ldr	r0, [r0, #4]
 80152f2:	7b23      	ldrb	r3, [r4, #12]
 80152f4:	4298      	cmp	r0, r3
 80152f6:	bf8c      	ite	hi
 80152f8:	2601      	movhi	r6, #1
 80152fa:	2600      	movls	r6, #0
 80152fc:	d802      	bhi.n	8015304 <uxr_prepare_best_effort_buffer_to_send+0x1c>
 80152fe:	4630      	mov	r0, r6
 8015300:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015304:	4688      	mov	r8, r1
 8015306:	89e0      	ldrh	r0, [r4, #14]
 8015308:	2101      	movs	r1, #1
 801530a:	4617      	mov	r7, r2
 801530c:	f000 fc3c 	bl	8015b88 <uxr_seq_num_add>
 8015310:	6823      	ldr	r3, [r4, #0]
 8015312:	81e0      	strh	r0, [r4, #14]
 8015314:	8028      	strh	r0, [r5, #0]
 8015316:	f8c8 3000 	str.w	r3, [r8]
 801531a:	6863      	ldr	r3, [r4, #4]
 801531c:	603b      	str	r3, [r7, #0]
 801531e:	7b23      	ldrb	r3, [r4, #12]
 8015320:	6063      	str	r3, [r4, #4]
 8015322:	4630      	mov	r0, r6
 8015324:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015328 <on_full_output_buffer>:
 8015328:	b538      	push	{r3, r4, r5, lr}
 801532a:	6802      	ldr	r2, [r0, #0]
 801532c:	460c      	mov	r4, r1
 801532e:	6809      	ldr	r1, [r1, #0]
 8015330:	8923      	ldrh	r3, [r4, #8]
 8015332:	eba2 0c01 	sub.w	ip, r2, r1
 8015336:	6862      	ldr	r2, [r4, #4]
 8015338:	fbb2 f2f3 	udiv	r2, r2, r3
 801533c:	fbbc fcf2 	udiv	ip, ip, r2
 8015340:	f10c 0c01 	add.w	ip, ip, #1
 8015344:	fa1f fc8c 	uxth.w	ip, ip
 8015348:	fbbc fef3 	udiv	lr, ip, r3
 801534c:	fb03 c31e 	mls	r3, r3, lr, ip
 8015350:	b29b      	uxth	r3, r3
 8015352:	fb02 f303 	mul.w	r3, r2, r3
 8015356:	f894 c00c 	ldrb.w	ip, [r4, #12]
 801535a:	58ca      	ldr	r2, [r1, r3]
 801535c:	4463      	add	r3, ip
 801535e:	eba2 020c 	sub.w	r2, r2, ip
 8015362:	3308      	adds	r3, #8
 8015364:	4605      	mov	r5, r0
 8015366:	4419      	add	r1, r3
 8015368:	3a04      	subs	r2, #4
 801536a:	6903      	ldr	r3, [r0, #16]
 801536c:	f7f7 fb4e 	bl	800ca0c <ucdr_init_buffer_origin>
 8015370:	4628      	mov	r0, r5
 8015372:	4903      	ldr	r1, [pc, #12]	@ (8015380 <on_full_output_buffer+0x58>)
 8015374:	4622      	mov	r2, r4
 8015376:	f7f7 fb25 	bl	800c9c4 <ucdr_set_on_full_buffer_callback>
 801537a:	2000      	movs	r0, #0
 801537c:	bd38      	pop	{r3, r4, r5, pc}
 801537e:	bf00      	nop
 8015380:	08015329 	.word	0x08015329

08015384 <uxr_init_output_reliable_stream>:
 8015384:	b410      	push	{r4}
 8015386:	f89d c004 	ldrb.w	ip, [sp, #4]
 801538a:	8103      	strh	r3, [r0, #8]
 801538c:	e9c0 1200 	strd	r1, r2, [r0]
 8015390:	f880 c00c 	strb.w	ip, [r0, #12]
 8015394:	b1d3      	cbz	r3, 80153cc <uxr_init_output_reliable_stream+0x48>
 8015396:	f8c1 c000 	str.w	ip, [r1]
 801539a:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801539e:	f1bc 0f01 	cmp.w	ip, #1
 80153a2:	d913      	bls.n	80153cc <uxr_init_output_reliable_stream+0x48>
 80153a4:	2301      	movs	r3, #1
 80153a6:	fbb3 f1fc 	udiv	r1, r3, ip
 80153aa:	fb0c 3111 	mls	r1, ip, r1, r3
 80153ae:	b289      	uxth	r1, r1
 80153b0:	6842      	ldr	r2, [r0, #4]
 80153b2:	6804      	ldr	r4, [r0, #0]
 80153b4:	fbb2 f2fc 	udiv	r2, r2, ip
 80153b8:	fb01 f202 	mul.w	r2, r1, r2
 80153bc:	7b01      	ldrb	r1, [r0, #12]
 80153be:	50a1      	str	r1, [r4, r2]
 80153c0:	3301      	adds	r3, #1
 80153c2:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 80153c6:	b29b      	uxth	r3, r3
 80153c8:	459c      	cmp	ip, r3
 80153ca:	d8ec      	bhi.n	80153a6 <uxr_init_output_reliable_stream+0x22>
 80153cc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80153d0:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80153d4:	e9c0 2306 	strd	r2, r3, [r0, #24]
 80153d8:	4905      	ldr	r1, [pc, #20]	@ (80153f0 <uxr_init_output_reliable_stream+0x6c>)
 80153da:	f85d 4b04 	ldr.w	r4, [sp], #4
 80153de:	f8c0 100e 	str.w	r1, [r0, #14]
 80153e2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80153e6:	2300      	movs	r3, #0
 80153e8:	8242      	strh	r2, [r0, #18]
 80153ea:	8403      	strh	r3, [r0, #32]
 80153ec:	4770      	bx	lr
 80153ee:	bf00      	nop
 80153f0:	ffff0000 	.word	0xffff0000

080153f4 <uxr_reset_output_reliable_stream>:
 80153f4:	8901      	ldrh	r1, [r0, #8]
 80153f6:	b1b1      	cbz	r1, 8015426 <uxr_reset_output_reliable_stream+0x32>
 80153f8:	f04f 0c00 	mov.w	ip, #0
 80153fc:	4663      	mov	r3, ip
 80153fe:	fbb3 f2f1 	udiv	r2, r3, r1
 8015402:	fb01 3312 	mls	r3, r1, r2, r3
 8015406:	b29b      	uxth	r3, r3
 8015408:	6842      	ldr	r2, [r0, #4]
 801540a:	fbb2 f2f1 	udiv	r2, r2, r1
 801540e:	6801      	ldr	r1, [r0, #0]
 8015410:	fb02 f303 	mul.w	r3, r2, r3
 8015414:	7b02      	ldrb	r2, [r0, #12]
 8015416:	50ca      	str	r2, [r1, r3]
 8015418:	f10c 0c01 	add.w	ip, ip, #1
 801541c:	8901      	ldrh	r1, [r0, #8]
 801541e:	fa1f f38c 	uxth.w	r3, ip
 8015422:	4299      	cmp	r1, r3
 8015424:	d8eb      	bhi.n	80153fe <uxr_reset_output_reliable_stream+0xa>
 8015426:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801542a:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801542e:	e9c0 2306 	strd	r2, r3, [r0, #24]
 8015432:	4904      	ldr	r1, [pc, #16]	@ (8015444 <uxr_reset_output_reliable_stream+0x50>)
 8015434:	f8c0 100e 	str.w	r1, [r0, #14]
 8015438:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801543c:	2300      	movs	r3, #0
 801543e:	8242      	strh	r2, [r0, #18]
 8015440:	8403      	strh	r3, [r0, #32]
 8015442:	4770      	bx	lr
 8015444:	ffff0000 	.word	0xffff0000

08015448 <uxr_prepare_reliable_buffer_to_write>:
 8015448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801544c:	4604      	mov	r4, r0
 801544e:	b091      	sub	sp, #68	@ 0x44
 8015450:	8900      	ldrh	r0, [r0, #8]
 8015452:	89e6      	ldrh	r6, [r4, #14]
 8015454:	6823      	ldr	r3, [r4, #0]
 8015456:	9204      	str	r2, [sp, #16]
 8015458:	fbb6 f2f0 	udiv	r2, r6, r0
 801545c:	fb00 6212 	mls	r2, r0, r2, r6
 8015460:	b292      	uxth	r2, r2
 8015462:	6865      	ldr	r5, [r4, #4]
 8015464:	fbb5 f5f0 	udiv	r5, r5, r0
 8015468:	fb05 3202 	mla	r2, r5, r2, r3
 801546c:	3204      	adds	r2, #4
 801546e:	f852 8c04 	ldr.w	r8, [r2, #-4]
 8015472:	f894 900c 	ldrb.w	r9, [r4, #12]
 8015476:	9203      	str	r2, [sp, #12]
 8015478:	468b      	mov	fp, r1
 801547a:	1f2f      	subs	r7, r5, #4
 801547c:	2800      	cmp	r0, #0
 801547e:	f000 814c 	beq.w	801571a <uxr_prepare_reliable_buffer_to_write+0x2d2>
 8015482:	f04f 0c00 	mov.w	ip, #0
 8015486:	46e2      	mov	sl, ip
 8015488:	4661      	mov	r1, ip
 801548a:	fbb1 f2f0 	udiv	r2, r1, r0
 801548e:	fb00 1212 	mls	r2, r0, r2, r1
 8015492:	b292      	uxth	r2, r2
 8015494:	fb05 f202 	mul.w	r2, r5, r2
 8015498:	f10c 0c01 	add.w	ip, ip, #1
 801549c:	589a      	ldr	r2, [r3, r2]
 801549e:	454a      	cmp	r2, r9
 80154a0:	bf08      	it	eq
 80154a2:	f10a 0a01 	addeq.w	sl, sl, #1
 80154a6:	fa1f f18c 	uxth.w	r1, ip
 80154aa:	bf08      	it	eq
 80154ac:	fa1f fa8a 	uxtheq.w	sl, sl
 80154b0:	4281      	cmp	r1, r0
 80154b2:	d3ea      	bcc.n	801548a <uxr_prepare_reliable_buffer_to_write+0x42>
 80154b4:	4640      	mov	r0, r8
 80154b6:	2104      	movs	r1, #4
 80154b8:	f8cd a014 	str.w	sl, [sp, #20]
 80154bc:	f7f7 fab2 	bl	800ca24 <ucdr_alignment>
 80154c0:	4480      	add	r8, r0
 80154c2:	eb08 020b 	add.w	r2, r8, fp
 80154c6:	42ba      	cmp	r2, r7
 80154c8:	f240 80cd 	bls.w	8015666 <uxr_prepare_reliable_buffer_to_write+0x21e>
 80154cc:	7b22      	ldrb	r2, [r4, #12]
 80154ce:	445a      	add	r2, fp
 80154d0:	42ba      	cmp	r2, r7
 80154d2:	f240 80b5 	bls.w	8015640 <uxr_prepare_reliable_buffer_to_write+0x1f8>
 80154d6:	f5c9 437f 	rsb	r3, r9, #65280	@ 0xff00
 80154da:	33fc      	adds	r3, #252	@ 0xfc
 80154dc:	b2ba      	uxth	r2, r7
 80154de:	4413      	add	r3, r2
 80154e0:	b29b      	uxth	r3, r3
 80154e2:	fb0a f903 	mul.w	r9, sl, r3
 80154e6:	45d9      	cmp	r9, fp
 80154e8:	9305      	str	r3, [sp, #20]
 80154ea:	9306      	str	r3, [sp, #24]
 80154ec:	f0c0 80b7 	bcc.w	801565e <uxr_prepare_reliable_buffer_to_write+0x216>
 80154f0:	f108 0304 	add.w	r3, r8, #4
 80154f4:	42bb      	cmp	r3, r7
 80154f6:	f080 80db 	bcs.w	80156b0 <uxr_prepare_reliable_buffer_to_write+0x268>
 80154fa:	f1a2 0904 	sub.w	r9, r2, #4
 80154fe:	eba9 0908 	sub.w	r9, r9, r8
 8015502:	9b05      	ldr	r3, [sp, #20]
 8015504:	fa1f f989 	uxth.w	r9, r9
 8015508:	ebab 0b09 	sub.w	fp, fp, r9
 801550c:	fbbb f2f3 	udiv	r2, fp, r3
 8015510:	fb03 b312 	mls	r3, r3, r2, fp
 8015514:	2b00      	cmp	r3, #0
 8015516:	f000 80c8 	beq.w	80156aa <uxr_prepare_reliable_buffer_to_write+0x262>
 801551a:	3201      	adds	r2, #1
 801551c:	b292      	uxth	r2, r2
 801551e:	9306      	str	r3, [sp, #24]
 8015520:	4552      	cmp	r2, sl
 8015522:	f200 809c 	bhi.w	801565e <uxr_prepare_reliable_buffer_to_write+0x216>
 8015526:	f10d 0b20 	add.w	fp, sp, #32
 801552a:	2a00      	cmp	r2, #0
 801552c:	d042      	beq.n	80155b4 <uxr_prepare_reliable_buffer_to_write+0x16c>
 801552e:	f8cd 801c 	str.w	r8, [sp, #28]
 8015532:	f04f 0a00 	mov.w	sl, #0
 8015536:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801553a:	9505      	str	r5, [sp, #20]
 801553c:	f10d 0b20 	add.w	fp, sp, #32
 8015540:	4615      	mov	r5, r2
 8015542:	e000      	b.n	8015546 <uxr_prepare_reliable_buffer_to_write+0xfe>
 8015544:	46c1      	mov	r9, r8
 8015546:	8920      	ldrh	r0, [r4, #8]
 8015548:	fbb6 f2f0 	udiv	r2, r6, r0
 801554c:	fb00 6112 	mls	r1, r0, r2, r6
 8015550:	b28a      	uxth	r2, r1
 8015552:	6863      	ldr	r3, [r4, #4]
 8015554:	fbb3 f1f0 	udiv	r1, r3, r0
 8015558:	6823      	ldr	r3, [r4, #0]
 801555a:	fb02 f101 	mul.w	r1, r2, r1
 801555e:	3104      	adds	r1, #4
 8015560:	4419      	add	r1, r3
 8015562:	4658      	mov	r0, fp
 8015564:	f851 2c04 	ldr.w	r2, [r1, #-4]
 8015568:	9200      	str	r2, [sp, #0]
 801556a:	2300      	movs	r3, #0
 801556c:	463a      	mov	r2, r7
 801556e:	f7f7 fa43 	bl	800c9f8 <ucdr_init_buffer_origin_offset>
 8015572:	464a      	mov	r2, r9
 8015574:	2300      	movs	r3, #0
 8015576:	210d      	movs	r1, #13
 8015578:	4658      	mov	r0, fp
 801557a:	f7f8 ff41 	bl	800e400 <uxr_buffer_submessage_header>
 801557e:	8921      	ldrh	r1, [r4, #8]
 8015580:	fbb6 f2f1 	udiv	r2, r6, r1
 8015584:	fb01 6212 	mls	r2, r1, r2, r6
 8015588:	b292      	uxth	r2, r2
 801558a:	6863      	ldr	r3, [r4, #4]
 801558c:	fbb3 f3f1 	udiv	r3, r3, r1
 8015590:	fb02 f303 	mul.w	r3, r2, r3
 8015594:	6822      	ldr	r2, [r4, #0]
 8015596:	4630      	mov	r0, r6
 8015598:	50d7      	str	r7, [r2, r3]
 801559a:	2101      	movs	r1, #1
 801559c:	f000 faf4 	bl	8015b88 <uxr_seq_num_add>
 80155a0:	f10a 0a01 	add.w	sl, sl, #1
 80155a4:	fa1f f38a 	uxth.w	r3, sl
 80155a8:	429d      	cmp	r5, r3
 80155aa:	4606      	mov	r6, r0
 80155ac:	d8ca      	bhi.n	8015544 <uxr_prepare_reliable_buffer_to_write+0xfc>
 80155ae:	f8dd 801c 	ldr.w	r8, [sp, #28]
 80155b2:	9d05      	ldr	r5, [sp, #20]
 80155b4:	8920      	ldrh	r0, [r4, #8]
 80155b6:	fbb6 f3f0 	udiv	r3, r6, r0
 80155ba:	fb00 6313 	mls	r3, r0, r3, r6
 80155be:	b299      	uxth	r1, r3
 80155c0:	6863      	ldr	r3, [r4, #4]
 80155c2:	fbb3 f3f0 	udiv	r3, r3, r0
 80155c6:	fb01 f303 	mul.w	r3, r1, r3
 80155ca:	6821      	ldr	r1, [r4, #0]
 80155cc:	3304      	adds	r3, #4
 80155ce:	4419      	add	r1, r3
 80155d0:	463a      	mov	r2, r7
 80155d2:	f851 0c04 	ldr.w	r0, [r1, #-4]
 80155d6:	9000      	str	r0, [sp, #0]
 80155d8:	2300      	movs	r3, #0
 80155da:	4658      	mov	r0, fp
 80155dc:	f7f7 fa0c 	bl	800c9f8 <ucdr_init_buffer_origin_offset>
 80155e0:	f8dd 9018 	ldr.w	r9, [sp, #24]
 80155e4:	4658      	mov	r0, fp
 80155e6:	fa1f f289 	uxth.w	r2, r9
 80155ea:	2302      	movs	r3, #2
 80155ec:	210d      	movs	r1, #13
 80155ee:	f7f8 ff07 	bl	800e400 <uxr_buffer_submessage_header>
 80155f2:	9b03      	ldr	r3, [sp, #12]
 80155f4:	8927      	ldrh	r7, [r4, #8]
 80155f6:	7b20      	ldrb	r0, [r4, #12]
 80155f8:	f108 0104 	add.w	r1, r8, #4
 80155fc:	440b      	add	r3, r1
 80155fe:	4619      	mov	r1, r3
 8015600:	fbb6 f3f7 	udiv	r3, r6, r7
 8015604:	fb07 6313 	mls	r3, r7, r3, r6
 8015608:	f1a5 0208 	sub.w	r2, r5, #8
 801560c:	b29d      	uxth	r5, r3
 801560e:	3004      	adds	r0, #4
 8015610:	6863      	ldr	r3, [r4, #4]
 8015612:	fbb3 f3f7 	udiv	r3, r3, r7
 8015616:	fb05 f303 	mul.w	r3, r5, r3
 801561a:	6825      	ldr	r5, [r4, #0]
 801561c:	4448      	add	r0, r9
 801561e:	50e8      	str	r0, [r5, r3]
 8015620:	9d04      	ldr	r5, [sp, #16]
 8015622:	eba2 0208 	sub.w	r2, r2, r8
 8015626:	4628      	mov	r0, r5
 8015628:	f7f7 f9f8 	bl	800ca1c <ucdr_init_buffer>
 801562c:	4628      	mov	r0, r5
 801562e:	493c      	ldr	r1, [pc, #240]	@ (8015720 <uxr_prepare_reliable_buffer_to_write+0x2d8>)
 8015630:	4622      	mov	r2, r4
 8015632:	f7f7 f9c7 	bl	800c9c4 <ucdr_set_on_full_buffer_callback>
 8015636:	2001      	movs	r0, #1
 8015638:	81e6      	strh	r6, [r4, #14]
 801563a:	b011      	add	sp, #68	@ 0x44
 801563c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015640:	2101      	movs	r1, #1
 8015642:	89e0      	ldrh	r0, [r4, #14]
 8015644:	f000 faa0 	bl	8015b88 <uxr_seq_num_add>
 8015648:	8921      	ldrh	r1, [r4, #8]
 801564a:	4605      	mov	r5, r0
 801564c:	8a60      	ldrh	r0, [r4, #18]
 801564e:	f000 fa9b 	bl	8015b88 <uxr_seq_num_add>
 8015652:	4601      	mov	r1, r0
 8015654:	4628      	mov	r0, r5
 8015656:	f000 fa9f 	bl	8015b98 <uxr_seq_num_cmp>
 801565a:	2800      	cmp	r0, #0
 801565c:	dd42      	ble.n	80156e4 <uxr_prepare_reliable_buffer_to_write+0x29c>
 801565e:	2000      	movs	r0, #0
 8015660:	b011      	add	sp, #68	@ 0x44
 8015662:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015666:	8921      	ldrh	r1, [r4, #8]
 8015668:	8a60      	ldrh	r0, [r4, #18]
 801566a:	9205      	str	r2, [sp, #20]
 801566c:	f000 fa8c 	bl	8015b88 <uxr_seq_num_add>
 8015670:	4601      	mov	r1, r0
 8015672:	4630      	mov	r0, r6
 8015674:	f000 fa90 	bl	8015b98 <uxr_seq_num_cmp>
 8015678:	2800      	cmp	r0, #0
 801567a:	9a05      	ldr	r2, [sp, #20]
 801567c:	dcef      	bgt.n	801565e <uxr_prepare_reliable_buffer_to_write+0x216>
 801567e:	8927      	ldrh	r7, [r4, #8]
 8015680:	fbb6 f3f7 	udiv	r3, r6, r7
 8015684:	fb07 6313 	mls	r3, r7, r3, r6
 8015688:	b29d      	uxth	r5, r3
 801568a:	6863      	ldr	r3, [r4, #4]
 801568c:	6824      	ldr	r4, [r4, #0]
 801568e:	fbb3 f3f7 	udiv	r3, r3, r7
 8015692:	fb05 f303 	mul.w	r3, r5, r3
 8015696:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 801569a:	50e2      	str	r2, [r4, r3]
 801569c:	2300      	movs	r3, #0
 801569e:	f8cd 8000 	str.w	r8, [sp]
 80156a2:	f7f7 f9a9 	bl	800c9f8 <ucdr_init_buffer_origin_offset>
 80156a6:	2001      	movs	r0, #1
 80156a8:	e7da      	b.n	8015660 <uxr_prepare_reliable_buffer_to_write+0x218>
 80156aa:	b293      	uxth	r3, r2
 80156ac:	461a      	mov	r2, r3
 80156ae:	e737      	b.n	8015520 <uxr_prepare_reliable_buffer_to_write+0xd8>
 80156b0:	4630      	mov	r0, r6
 80156b2:	2101      	movs	r1, #1
 80156b4:	9207      	str	r2, [sp, #28]
 80156b6:	f000 fa67 	bl	8015b88 <uxr_seq_num_add>
 80156ba:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 80156be:	fbb0 f1fc 	udiv	r1, r0, ip
 80156c2:	fb0c 0111 	mls	r1, ip, r1, r0
 80156c6:	4606      	mov	r6, r0
 80156c8:	b288      	uxth	r0, r1
 80156ca:	6863      	ldr	r3, [r4, #4]
 80156cc:	fbb3 f1fc 	udiv	r1, r3, ip
 80156d0:	6823      	ldr	r3, [r4, #0]
 80156d2:	9a07      	ldr	r2, [sp, #28]
 80156d4:	fb00 f101 	mul.w	r1, r0, r1
 80156d8:	3104      	adds	r1, #4
 80156da:	440b      	add	r3, r1
 80156dc:	9303      	str	r3, [sp, #12]
 80156de:	f853 8c04 	ldr.w	r8, [r3, #-4]
 80156e2:	e70a      	b.n	80154fa <uxr_prepare_reliable_buffer_to_write+0xb2>
 80156e4:	8921      	ldrh	r1, [r4, #8]
 80156e6:	fbb5 f3f1 	udiv	r3, r5, r1
 80156ea:	fb01 5313 	mls	r3, r1, r3, r5
 80156ee:	b29a      	uxth	r2, r3
 80156f0:	6863      	ldr	r3, [r4, #4]
 80156f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80156f6:	6821      	ldr	r1, [r4, #0]
 80156f8:	9804      	ldr	r0, [sp, #16]
 80156fa:	fb02 f303 	mul.w	r3, r2, r3
 80156fe:	3304      	adds	r3, #4
 8015700:	7b22      	ldrb	r2, [r4, #12]
 8015702:	4419      	add	r1, r3
 8015704:	445a      	add	r2, fp
 8015706:	f841 2c04 	str.w	r2, [r1, #-4]
 801570a:	7b23      	ldrb	r3, [r4, #12]
 801570c:	9300      	str	r3, [sp, #0]
 801570e:	2300      	movs	r3, #0
 8015710:	f7f7 f972 	bl	800c9f8 <ucdr_init_buffer_origin_offset>
 8015714:	81e5      	strh	r5, [r4, #14]
 8015716:	2001      	movs	r0, #1
 8015718:	e7a2      	b.n	8015660 <uxr_prepare_reliable_buffer_to_write+0x218>
 801571a:	4682      	mov	sl, r0
 801571c:	e6ca      	b.n	80154b4 <uxr_prepare_reliable_buffer_to_write+0x6c>
 801571e:	bf00      	nop
 8015720:	08015329 	.word	0x08015329

08015724 <uxr_prepare_next_reliable_buffer_to_send>:
 8015724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015726:	4604      	mov	r4, r0
 8015728:	460f      	mov	r7, r1
 801572a:	8a00      	ldrh	r0, [r0, #16]
 801572c:	2101      	movs	r1, #1
 801572e:	4616      	mov	r6, r2
 8015730:	461d      	mov	r5, r3
 8015732:	f000 fa29 	bl	8015b88 <uxr_seq_num_add>
 8015736:	8028      	strh	r0, [r5, #0]
 8015738:	8922      	ldrh	r2, [r4, #8]
 801573a:	fbb0 f3f2 	udiv	r3, r0, r2
 801573e:	fb02 0c13 	mls	ip, r2, r3, r0
 8015742:	fa1f fc8c 	uxth.w	ip, ip
 8015746:	6863      	ldr	r3, [r4, #4]
 8015748:	fbb3 f3f2 	udiv	r3, r3, r2
 801574c:	fb0c fc03 	mul.w	ip, ip, r3
 8015750:	6823      	ldr	r3, [r4, #0]
 8015752:	89e1      	ldrh	r1, [r4, #14]
 8015754:	f10c 0c04 	add.w	ip, ip, #4
 8015758:	4463      	add	r3, ip
 801575a:	603b      	str	r3, [r7, #0]
 801575c:	6823      	ldr	r3, [r4, #0]
 801575e:	449c      	add	ip, r3
 8015760:	f85c 3c04 	ldr.w	r3, [ip, #-4]
 8015764:	6033      	str	r3, [r6, #0]
 8015766:	f000 fa17 	bl	8015b98 <uxr_seq_num_cmp>
 801576a:	2800      	cmp	r0, #0
 801576c:	dd01      	ble.n	8015772 <uxr_prepare_next_reliable_buffer_to_send+0x4e>
 801576e:	2000      	movs	r0, #0
 8015770:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015772:	7b23      	ldrb	r3, [r4, #12]
 8015774:	6832      	ldr	r2, [r6, #0]
 8015776:	429a      	cmp	r2, r3
 8015778:	d9f9      	bls.n	801576e <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 801577a:	8a61      	ldrh	r1, [r4, #18]
 801577c:	8a20      	ldrh	r0, [r4, #16]
 801577e:	f000 fa07 	bl	8015b90 <uxr_seq_num_sub>
 8015782:	8923      	ldrh	r3, [r4, #8]
 8015784:	4283      	cmp	r3, r0
 8015786:	d0f2      	beq.n	801576e <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8015788:	8828      	ldrh	r0, [r5, #0]
 801578a:	89e3      	ldrh	r3, [r4, #14]
 801578c:	8220      	strh	r0, [r4, #16]
 801578e:	4298      	cmp	r0, r3
 8015790:	d001      	beq.n	8015796 <uxr_prepare_next_reliable_buffer_to_send+0x72>
 8015792:	2001      	movs	r0, #1
 8015794:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015796:	2101      	movs	r1, #1
 8015798:	f000 f9f6 	bl	8015b88 <uxr_seq_num_add>
 801579c:	81e0      	strh	r0, [r4, #14]
 801579e:	2001      	movs	r0, #1
 80157a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80157a2:	bf00      	nop

080157a4 <uxr_update_output_stream_heartbeat_timestamp>:
 80157a4:	b570      	push	{r4, r5, r6, lr}
 80157a6:	8a01      	ldrh	r1, [r0, #16]
 80157a8:	4604      	mov	r4, r0
 80157aa:	8a40      	ldrh	r0, [r0, #18]
 80157ac:	4615      	mov	r5, r2
 80157ae:	461e      	mov	r6, r3
 80157b0:	f000 f9f2 	bl	8015b98 <uxr_seq_num_cmp>
 80157b4:	2800      	cmp	r0, #0
 80157b6:	db07      	blt.n	80157c8 <uxr_update_output_stream_heartbeat_timestamp+0x24>
 80157b8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80157bc:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80157c0:	e9c4 2306 	strd	r2, r3, [r4, #24]
 80157c4:	2000      	movs	r0, #0
 80157c6:	bd70      	pop	{r4, r5, r6, pc}
 80157c8:	f894 0020 	ldrb.w	r0, [r4, #32]
 80157cc:	b940      	cbnz	r0, 80157e0 <uxr_update_output_stream_heartbeat_timestamp+0x3c>
 80157ce:	2301      	movs	r3, #1
 80157d0:	f884 3020 	strb.w	r3, [r4, #32]
 80157d4:	3564      	adds	r5, #100	@ 0x64
 80157d6:	f146 0600 	adc.w	r6, r6, #0
 80157da:	e9c4 5606 	strd	r5, r6, [r4, #24]
 80157de:	bd70      	pop	{r4, r5, r6, pc}
 80157e0:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 80157e4:	4295      	cmp	r5, r2
 80157e6:	eb76 0303 	sbcs.w	r3, r6, r3
 80157ea:	bfa5      	ittet	ge
 80157ec:	3001      	addge	r0, #1
 80157ee:	f884 0020 	strbge.w	r0, [r4, #32]
 80157f2:	2000      	movlt	r0, #0
 80157f4:	2001      	movge	r0, #1
 80157f6:	e7ed      	b.n	80157d4 <uxr_update_output_stream_heartbeat_timestamp+0x30>

080157f8 <uxr_begin_output_nack_buffer_it>:
 80157f8:	8a40      	ldrh	r0, [r0, #18]
 80157fa:	4770      	bx	lr

080157fc <uxr_next_reliable_nack_buffer_to_send>:
 80157fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015800:	f890 8021 	ldrb.w	r8, [r0, #33]	@ 0x21
 8015804:	b082      	sub	sp, #8
 8015806:	f1b8 0f00 	cmp.w	r8, #0
 801580a:	d011      	beq.n	8015830 <uxr_next_reliable_nack_buffer_to_send+0x34>
 801580c:	4604      	mov	r4, r0
 801580e:	8818      	ldrh	r0, [r3, #0]
 8015810:	460e      	mov	r6, r1
 8015812:	4617      	mov	r7, r2
 8015814:	461d      	mov	r5, r3
 8015816:	2101      	movs	r1, #1
 8015818:	f000 f9b6 	bl	8015b88 <uxr_seq_num_add>
 801581c:	8028      	strh	r0, [r5, #0]
 801581e:	8a21      	ldrh	r1, [r4, #16]
 8015820:	f000 f9ba 	bl	8015b98 <uxr_seq_num_cmp>
 8015824:	2800      	cmp	r0, #0
 8015826:	dd07      	ble.n	8015838 <uxr_next_reliable_nack_buffer_to_send+0x3c>
 8015828:	f04f 0800 	mov.w	r8, #0
 801582c:	f884 8021 	strb.w	r8, [r4, #33]	@ 0x21
 8015830:	4640      	mov	r0, r8
 8015832:	b002      	add	sp, #8
 8015834:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015838:	8921      	ldrh	r1, [r4, #8]
 801583a:	8828      	ldrh	r0, [r5, #0]
 801583c:	6823      	ldr	r3, [r4, #0]
 801583e:	fbb0 f2f1 	udiv	r2, r0, r1
 8015842:	fb01 0c12 	mls	ip, r1, r2, r0
 8015846:	fa1f f28c 	uxth.w	r2, ip
 801584a:	9301      	str	r3, [sp, #4]
 801584c:	6863      	ldr	r3, [r4, #4]
 801584e:	fbb3 fcf1 	udiv	ip, r3, r1
 8015852:	9b01      	ldr	r3, [sp, #4]
 8015854:	fb02 fc0c 	mul.w	ip, r2, ip
 8015858:	f10c 0c04 	add.w	ip, ip, #4
 801585c:	4463      	add	r3, ip
 801585e:	6033      	str	r3, [r6, #0]
 8015860:	6823      	ldr	r3, [r4, #0]
 8015862:	4463      	add	r3, ip
 8015864:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8015868:	603b      	str	r3, [r7, #0]
 801586a:	7b22      	ldrb	r2, [r4, #12]
 801586c:	429a      	cmp	r2, r3
 801586e:	d0d2      	beq.n	8015816 <uxr_next_reliable_nack_buffer_to_send+0x1a>
 8015870:	4640      	mov	r0, r8
 8015872:	b002      	add	sp, #8
 8015874:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015878 <uxr_process_acknack>:
 8015878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801587a:	4604      	mov	r4, r0
 801587c:	460e      	mov	r6, r1
 801587e:	4610      	mov	r0, r2
 8015880:	2101      	movs	r1, #1
 8015882:	f000 f985 	bl	8015b90 <uxr_seq_num_sub>
 8015886:	8a61      	ldrh	r1, [r4, #18]
 8015888:	f000 f982 	bl	8015b90 <uxr_seq_num_sub>
 801588c:	b1c0      	cbz	r0, 80158c0 <uxr_process_acknack+0x48>
 801588e:	4605      	mov	r5, r0
 8015890:	2700      	movs	r7, #0
 8015892:	2101      	movs	r1, #1
 8015894:	8a60      	ldrh	r0, [r4, #18]
 8015896:	f000 f977 	bl	8015b88 <uxr_seq_num_add>
 801589a:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801589e:	fbb0 f1fc 	udiv	r1, r0, ip
 80158a2:	e9d4 2300 	ldrd	r2, r3, [r4]
 80158a6:	fb0c 0111 	mls	r1, ip, r1, r0
 80158aa:	b289      	uxth	r1, r1
 80158ac:	3701      	adds	r7, #1
 80158ae:	fbb3 f3fc 	udiv	r3, r3, ip
 80158b2:	fb01 f303 	mul.w	r3, r1, r3
 80158b6:	42bd      	cmp	r5, r7
 80158b8:	7b21      	ldrb	r1, [r4, #12]
 80158ba:	8260      	strh	r0, [r4, #18]
 80158bc:	50d1      	str	r1, [r2, r3]
 80158be:	d1e8      	bne.n	8015892 <uxr_process_acknack+0x1a>
 80158c0:	3e00      	subs	r6, #0
 80158c2:	f04f 0300 	mov.w	r3, #0
 80158c6:	bf18      	it	ne
 80158c8:	2601      	movne	r6, #1
 80158ca:	f884 3020 	strb.w	r3, [r4, #32]
 80158ce:	f884 6021 	strb.w	r6, [r4, #33]	@ 0x21
 80158d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080158d4 <uxr_is_output_up_to_date>:
 80158d4:	8a01      	ldrh	r1, [r0, #16]
 80158d6:	8a40      	ldrh	r0, [r0, #18]
 80158d8:	b508      	push	{r3, lr}
 80158da:	f000 f95d 	bl	8015b98 <uxr_seq_num_cmp>
 80158de:	fab0 f080 	clz	r0, r0
 80158e2:	0940      	lsrs	r0, r0, #5
 80158e4:	bd08      	pop	{r3, pc}
 80158e6:	bf00      	nop

080158e8 <get_available_free_slots>:
 80158e8:	8902      	ldrh	r2, [r0, #8]
 80158ea:	b1da      	cbz	r2, 8015924 <get_available_free_slots+0x3c>
 80158ec:	b530      	push	{r4, r5, lr}
 80158ee:	2100      	movs	r1, #0
 80158f0:	6843      	ldr	r3, [r0, #4]
 80158f2:	6805      	ldr	r5, [r0, #0]
 80158f4:	7b04      	ldrb	r4, [r0, #12]
 80158f6:	fbb3 fef2 	udiv	lr, r3, r2
 80158fa:	4608      	mov	r0, r1
 80158fc:	460b      	mov	r3, r1
 80158fe:	fbb3 fcf2 	udiv	ip, r3, r2
 8015902:	fb02 331c 	mls	r3, r2, ip, r3
 8015906:	b29b      	uxth	r3, r3
 8015908:	fb0e f303 	mul.w	r3, lr, r3
 801590c:	3101      	adds	r1, #1
 801590e:	f855 c003 	ldr.w	ip, [r5, r3]
 8015912:	4564      	cmp	r4, ip
 8015914:	bf08      	it	eq
 8015916:	3001      	addeq	r0, #1
 8015918:	b28b      	uxth	r3, r1
 801591a:	bf08      	it	eq
 801591c:	b280      	uxtheq	r0, r0
 801591e:	4293      	cmp	r3, r2
 8015920:	d3ed      	bcc.n	80158fe <get_available_free_slots+0x16>
 8015922:	bd30      	pop	{r4, r5, pc}
 8015924:	4610      	mov	r0, r2
 8015926:	4770      	bx	lr

08015928 <uxr_buffer_request_data>:
 8015928:	b530      	push	{r4, r5, lr}
 801592a:	b095      	sub	sp, #84	@ 0x54
 801592c:	e9cd 2104 	strd	r2, r1, [sp, #16]
 8015930:	9d18      	ldr	r5, [sp, #96]	@ 0x60
 8015932:	9303      	str	r3, [sp, #12]
 8015934:	2200      	movs	r2, #0
 8015936:	2d00      	cmp	r5, #0
 8015938:	bf14      	ite	ne
 801593a:	2101      	movne	r1, #1
 801593c:	4611      	moveq	r1, r2
 801593e:	4604      	mov	r4, r0
 8015940:	f88d 301c 	strb.w	r3, [sp, #28]
 8015944:	f88d 201d 	strb.w	r2, [sp, #29]
 8015948:	f88d 201e 	strb.w	r2, [sp, #30]
 801594c:	f88d 1024 	strb.w	r1, [sp, #36]	@ 0x24
 8015950:	d021      	beq.n	8015996 <uxr_buffer_request_data+0x6e>
 8015952:	682a      	ldr	r2, [r5, #0]
 8015954:	686b      	ldr	r3, [r5, #4]
 8015956:	f8cd 2026 	str.w	r2, [sp, #38]	@ 0x26
 801595a:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 801595e:	2210      	movs	r2, #16
 8015960:	2308      	movs	r3, #8
 8015962:	2100      	movs	r1, #0
 8015964:	e9cd 3100 	strd	r3, r1, [sp]
 8015968:	4620      	mov	r0, r4
 801596a:	9905      	ldr	r1, [sp, #20]
 801596c:	ab0c      	add	r3, sp, #48	@ 0x30
 801596e:	f7f8 faa9 	bl	800dec4 <uxr_prepare_stream_to_write_submessage>
 8015972:	b918      	cbnz	r0, 801597c <uxr_buffer_request_data+0x54>
 8015974:	4604      	mov	r4, r0
 8015976:	4620      	mov	r0, r4
 8015978:	b015      	add	sp, #84	@ 0x54
 801597a:	bd30      	pop	{r4, r5, pc}
 801597c:	9904      	ldr	r1, [sp, #16]
 801597e:	aa06      	add	r2, sp, #24
 8015980:	4620      	mov	r0, r4
 8015982:	f7f8 fbd5 	bl	800e130 <uxr_init_base_object_request>
 8015986:	a906      	add	r1, sp, #24
 8015988:	4604      	mov	r4, r0
 801598a:	a80c      	add	r0, sp, #48	@ 0x30
 801598c:	f7f9 fed0 	bl	800f730 <uxr_serialize_READ_DATA_Payload>
 8015990:	4620      	mov	r0, r4
 8015992:	b015      	add	sp, #84	@ 0x54
 8015994:	bd30      	pop	{r4, r5, pc}
 8015996:	2208      	movs	r2, #8
 8015998:	e7e2      	b.n	8015960 <uxr_buffer_request_data+0x38>
 801599a:	bf00      	nop

0801599c <uxr_buffer_cancel_data>:
 801599c:	b510      	push	{r4, lr}
 801599e:	b094      	sub	sp, #80	@ 0x50
 80159a0:	2300      	movs	r3, #0
 80159a2:	9202      	str	r2, [sp, #8]
 80159a4:	9205      	str	r2, [sp, #20]
 80159a6:	9301      	str	r3, [sp, #4]
 80159a8:	2201      	movs	r2, #1
 80159aa:	f8ad 301c 	strh.w	r3, [sp, #28]
 80159ae:	f88d 301e 	strb.w	r3, [sp, #30]
 80159b2:	f8cd 3026 	str.w	r3, [sp, #38]	@ 0x26
 80159b6:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 80159ba:	2308      	movs	r3, #8
 80159bc:	f88d 2024 	strb.w	r2, [sp, #36]	@ 0x24
 80159c0:	9300      	str	r3, [sp, #0]
 80159c2:	2210      	movs	r2, #16
 80159c4:	ab0c      	add	r3, sp, #48	@ 0x30
 80159c6:	4604      	mov	r4, r0
 80159c8:	9103      	str	r1, [sp, #12]
 80159ca:	f7f8 fa7b 	bl	800dec4 <uxr_prepare_stream_to_write_submessage>
 80159ce:	b918      	cbnz	r0, 80159d8 <uxr_buffer_cancel_data+0x3c>
 80159d0:	4604      	mov	r4, r0
 80159d2:	4620      	mov	r0, r4
 80159d4:	b014      	add	sp, #80	@ 0x50
 80159d6:	bd10      	pop	{r4, pc}
 80159d8:	9905      	ldr	r1, [sp, #20]
 80159da:	aa06      	add	r2, sp, #24
 80159dc:	4620      	mov	r0, r4
 80159de:	f7f8 fba7 	bl	800e130 <uxr_init_base_object_request>
 80159e2:	a906      	add	r1, sp, #24
 80159e4:	4604      	mov	r4, r0
 80159e6:	a80c      	add	r0, sp, #48	@ 0x30
 80159e8:	f7f9 fea2 	bl	800f730 <uxr_serialize_READ_DATA_Payload>
 80159ec:	4620      	mov	r0, r4
 80159ee:	b014      	add	sp, #80	@ 0x50
 80159f0:	bd10      	pop	{r4, pc}
 80159f2:	bf00      	nop

080159f4 <read_submessage_format>:
 80159f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80159f8:	b095      	sub	sp, #84	@ 0x54
 80159fa:	f8bd 6078 	ldrh.w	r6, [sp, #120]	@ 0x78
 80159fe:	b113      	cbz	r3, 8015a06 <read_submessage_format+0x12>
 8015a00:	b015      	add	sp, #84	@ 0x54
 8015a02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015a06:	460c      	mov	r4, r1
 8015a08:	4615      	mov	r5, r2
 8015a0a:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8015a0e:	4607      	mov	r7, r0
 8015a10:	981c      	ldr	r0, [sp, #112]	@ 0x70
 8015a12:	9004      	str	r0, [sp, #16]
 8015a14:	981d      	ldr	r0, [sp, #116]	@ 0x74
 8015a16:	9005      	str	r0, [sp, #20]
 8015a18:	1a52      	subs	r2, r2, r1
 8015a1a:	a80c      	add	r0, sp, #48	@ 0x30
 8015a1c:	4699      	mov	r9, r3
 8015a1e:	f89d 8076 	ldrb.w	r8, [sp, #118]	@ 0x76
 8015a22:	f7f6 fffb 	bl	800ca1c <ucdr_init_buffer>
 8015a26:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8015a2a:	a80c      	add	r0, sp, #48	@ 0x30
 8015a2c:	f7f6 ffca 	bl	800c9c4 <ucdr_set_on_full_buffer_callback>
 8015a30:	69e2      	ldr	r2, [r4, #28]
 8015a32:	b19a      	cbz	r2, 8015a5c <read_submessage_format+0x68>
 8015a34:	f1b8 0f07 	cmp.w	r8, #7
 8015a38:	f882 9014 	strb.w	r9, [r2, #20]
 8015a3c:	d040      	beq.n	8015ac0 <read_submessage_format+0xcc>
 8015a3e:	f1b8 0f08 	cmp.w	r8, #8
 8015a42:	d02e      	beq.n	8015aa2 <read_submessage_format+0xae>
 8015a44:	f1b8 0f06 	cmp.w	r8, #6
 8015a48:	d011      	beq.n	8015a6e <read_submessage_format+0x7a>
 8015a4a:	2301      	movs	r3, #1
 8015a4c:	7513      	strb	r3, [r2, #20]
 8015a4e:	4629      	mov	r1, r5
 8015a50:	4620      	mov	r0, r4
 8015a52:	f7f7 f833 	bl	800cabc <ucdr_advance_buffer>
 8015a56:	b015      	add	sp, #84	@ 0x54
 8015a58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015a5c:	f1b8 0f07 	cmp.w	r8, #7
 8015a60:	d02e      	beq.n	8015ac0 <read_submessage_format+0xcc>
 8015a62:	f1b8 0f08 	cmp.w	r8, #8
 8015a66:	d01c      	beq.n	8015aa2 <read_submessage_format+0xae>
 8015a68:	f1b8 0f06 	cmp.w	r8, #6
 8015a6c:	d1ef      	bne.n	8015a4e <read_submessage_format+0x5a>
 8015a6e:	f8d7 8088 	ldr.w	r8, [r7, #136]	@ 0x88
 8015a72:	f1b8 0f00 	cmp.w	r8, #0
 8015a76:	d011      	beq.n	8015a9c <read_submessage_format+0xa8>
 8015a78:	ab0c      	add	r3, sp, #48	@ 0x30
 8015a7a:	e9cd 3500 	strd	r3, r5, [sp]
 8015a7e:	2306      	movs	r3, #6
 8015a80:	f88d 3016 	strb.w	r3, [sp, #22]
 8015a84:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8015a88:	9302      	str	r3, [sp, #8]
 8015a8a:	4632      	mov	r2, r6
 8015a8c:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 8015a90:	4638      	mov	r0, r7
 8015a92:	47c0      	blx	r8
 8015a94:	2301      	movs	r3, #1
 8015a96:	69e2      	ldr	r2, [r4, #28]
 8015a98:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 8015a9c:	2a00      	cmp	r2, #0
 8015a9e:	d1d4      	bne.n	8015a4a <read_submessage_format+0x56>
 8015aa0:	e7d5      	b.n	8015a4e <read_submessage_format+0x5a>
 8015aa2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8015aa6:	2b00      	cmp	r3, #0
 8015aa8:	d0f8      	beq.n	8015a9c <read_submessage_format+0xa8>
 8015aaa:	a906      	add	r1, sp, #24
 8015aac:	a80c      	add	r0, sp, #48	@ 0x30
 8015aae:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 8015ab2:	f7f9 ff03 	bl	800f8bc <uxr_deserialize_SampleIdentity>
 8015ab6:	b9a0      	cbnz	r0, 8015ae2 <read_submessage_format+0xee>
 8015ab8:	69e2      	ldr	r2, [r4, #28]
 8015aba:	2a00      	cmp	r2, #0
 8015abc:	d1c5      	bne.n	8015a4a <read_submessage_format+0x56>
 8015abe:	e7c6      	b.n	8015a4e <read_submessage_format+0x5a>
 8015ac0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8015ac4:	b13b      	cbz	r3, 8015ad6 <read_submessage_format+0xe2>
 8015ac6:	a906      	add	r1, sp, #24
 8015ac8:	a80c      	add	r0, sp, #48	@ 0x30
 8015aca:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 8015ace:	f7f9 fbc9 	bl	800f264 <uxr_deserialize_BaseObjectRequest>
 8015ad2:	bb60      	cbnz	r0, 8015b2e <read_submessage_format+0x13a>
 8015ad4:	69e2      	ldr	r2, [r4, #28]
 8015ad6:	68a3      	ldr	r3, [r4, #8]
 8015ad8:	442b      	add	r3, r5
 8015ada:	60a3      	str	r3, [r4, #8]
 8015adc:	2a00      	cmp	r2, #0
 8015ade:	d1b4      	bne.n	8015a4a <read_submessage_format+0x56>
 8015ae0:	e7b5      	b.n	8015a4e <read_submessage_format+0x5a>
 8015ae2:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 8015ae6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8015ae8:	1a52      	subs	r2, r2, r1
 8015aea:	eba8 0803 	sub.w	r8, r8, r3
 8015aee:	a80c      	add	r0, sp, #48	@ 0x30
 8015af0:	f7f6 ff94 	bl	800ca1c <ucdr_init_buffer>
 8015af4:	44a8      	add	r8, r5
 8015af6:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8015afa:	a80c      	add	r0, sp, #48	@ 0x30
 8015afc:	f7f6 ff62 	bl	800c9c4 <ucdr_set_on_full_buffer_callback>
 8015b00:	fa1f f888 	uxth.w	r8, r8
 8015b04:	ab0c      	add	r3, sp, #48	@ 0x30
 8015b06:	9300      	str	r3, [sp, #0]
 8015b08:	f8cd 8004 	str.w	r8, [sp, #4]
 8015b0c:	2108      	movs	r1, #8
 8015b0e:	f88d 1016 	strb.w	r1, [sp, #22]
 8015b12:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 8015b16:	9102      	str	r1, [sp, #8]
 8015b18:	ab06      	add	r3, sp, #24
 8015b1a:	4632      	mov	r2, r6
 8015b1c:	9905      	ldr	r1, [sp, #20]
 8015b1e:	f8d7 60a4 	ldr.w	r6, [r7, #164]	@ 0xa4
 8015b22:	4638      	mov	r0, r7
 8015b24:	47b0      	blx	r6
 8015b26:	2301      	movs	r3, #1
 8015b28:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 8015b2c:	e7c4      	b.n	8015ab8 <read_submessage_format+0xc4>
 8015b2e:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 8015b32:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8015b34:	1a52      	subs	r2, r2, r1
 8015b36:	a80c      	add	r0, sp, #48	@ 0x30
 8015b38:	eba8 0803 	sub.w	r8, r8, r3
 8015b3c:	f7f6 ff6e 	bl	800ca1c <ucdr_init_buffer>
 8015b40:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8015b44:	a80c      	add	r0, sp, #48	@ 0x30
 8015b46:	f7f6 ff3d 	bl	800c9c4 <ucdr_set_on_full_buffer_callback>
 8015b4a:	ab0c      	add	r3, sp, #48	@ 0x30
 8015b4c:	9300      	str	r3, [sp, #0]
 8015b4e:	f89d 1018 	ldrb.w	r1, [sp, #24]
 8015b52:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8015b56:	44a8      	add	r8, r5
 8015b58:	fa1f f888 	uxth.w	r8, r8
 8015b5c:	f8cd 8004 	str.w	r8, [sp, #4]
 8015b60:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8015b64:	2107      	movs	r1, #7
 8015b66:	f88d 1016 	strb.w	r1, [sp, #22]
 8015b6a:	f8d7 10b0 	ldr.w	r1, [r7, #176]	@ 0xb0
 8015b6e:	9102      	str	r1, [sp, #8]
 8015b70:	4632      	mov	r2, r6
 8015b72:	b29b      	uxth	r3, r3
 8015b74:	f8d7 60ac 	ldr.w	r6, [r7, #172]	@ 0xac
 8015b78:	9905      	ldr	r1, [sp, #20]
 8015b7a:	4638      	mov	r0, r7
 8015b7c:	47b0      	blx	r6
 8015b7e:	2301      	movs	r3, #1
 8015b80:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 8015b84:	e7a6      	b.n	8015ad4 <read_submessage_format+0xe0>
 8015b86:	bf00      	nop

08015b88 <uxr_seq_num_add>:
 8015b88:	4408      	add	r0, r1
 8015b8a:	b280      	uxth	r0, r0
 8015b8c:	4770      	bx	lr
 8015b8e:	bf00      	nop

08015b90 <uxr_seq_num_sub>:
 8015b90:	1a40      	subs	r0, r0, r1
 8015b92:	b280      	uxth	r0, r0
 8015b94:	4770      	bx	lr
 8015b96:	bf00      	nop

08015b98 <uxr_seq_num_cmp>:
 8015b98:	4288      	cmp	r0, r1
 8015b9a:	d011      	beq.n	8015bc0 <uxr_seq_num_cmp+0x28>
 8015b9c:	d309      	bcc.n	8015bb2 <uxr_seq_num_cmp+0x1a>
 8015b9e:	4288      	cmp	r0, r1
 8015ba0:	d910      	bls.n	8015bc4 <uxr_seq_num_cmp+0x2c>
 8015ba2:	1a40      	subs	r0, r0, r1
 8015ba4:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8015ba8:	bfd4      	ite	le
 8015baa:	2001      	movle	r0, #1
 8015bac:	f04f 30ff 	movgt.w	r0, #4294967295	@ 0xffffffff
 8015bb0:	4770      	bx	lr
 8015bb2:	1a0b      	subs	r3, r1, r0
 8015bb4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8015bb8:	daf1      	bge.n	8015b9e <uxr_seq_num_cmp+0x6>
 8015bba:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8015bbe:	4770      	bx	lr
 8015bc0:	2000      	movs	r0, #0
 8015bc2:	4770      	bx	lr
 8015bc4:	2001      	movs	r0, #1
 8015bc6:	4770      	bx	lr

08015bc8 <uxr_init_framing_io>:
 8015bc8:	2300      	movs	r3, #0
 8015bca:	7041      	strb	r1, [r0, #1]
 8015bcc:	7003      	strb	r3, [r0, #0]
 8015bce:	8583      	strh	r3, [r0, #44]	@ 0x2c
 8015bd0:	4770      	bx	lr
 8015bd2:	bf00      	nop

08015bd4 <uxr_write_framed_msg>:
 8015bd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015bd8:	4617      	mov	r7, r2
 8015bda:	7842      	ldrb	r2, [r0, #1]
 8015bdc:	b083      	sub	sp, #12
 8015bde:	460e      	mov	r6, r1
 8015be0:	f1a2 017d 	sub.w	r1, r2, #125	@ 0x7d
 8015be4:	469a      	mov	sl, r3
 8015be6:	2901      	cmp	r1, #1
 8015be8:	f04f 037e 	mov.w	r3, #126	@ 0x7e
 8015bec:	4604      	mov	r4, r0
 8015bee:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
 8015bf2:	f8dd b038 	ldr.w	fp, [sp, #56]	@ 0x38
 8015bf6:	f89d 0034 	ldrb.w	r0, [sp, #52]	@ 0x34
 8015bfa:	f240 8137 	bls.w	8015e6c <uxr_write_framed_msg+0x298>
 8015bfe:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 8015c02:	f884 2039 	strb.w	r2, [r4, #57]	@ 0x39
 8015c06:	2901      	cmp	r1, #1
 8015c08:	f04f 0202 	mov.w	r2, #2
 8015c0c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8015c10:	f240 808f 	bls.w	8015d32 <uxr_write_framed_msg+0x15e>
 8015c14:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015c16:	f884 003a 	strb.w	r0, [r4, #58]	@ 0x3a
 8015c1a:	b2dd      	uxtb	r5, r3
 8015c1c:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 8015c20:	2203      	movs	r2, #3
 8015c22:	2901      	cmp	r1, #1
 8015c24:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8015c28:	f240 809a 	bls.w	8015d60 <uxr_write_framed_msg+0x18c>
 8015c2c:	18a1      	adds	r1, r4, r2
 8015c2e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015c30:	f881 5038 	strb.w	r5, [r1, #56]	@ 0x38
 8015c34:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8015c38:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 8015c3c:	3201      	adds	r2, #1
 8015c3e:	2801      	cmp	r0, #1
 8015c40:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8015c44:	f240 80a0 	bls.w	8015d88 <uxr_write_framed_msg+0x1b4>
 8015c48:	18a0      	adds	r0, r4, r2
 8015c4a:	3201      	adds	r2, #1
 8015c4c:	b2d2      	uxtb	r2, r2
 8015c4e:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 8015c52:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8015c56:	2b00      	cmp	r3, #0
 8015c58:	f000 80a9 	beq.w	8015dae <uxr_write_framed_msg+0x1da>
 8015c5c:	f04f 0900 	mov.w	r9, #0
 8015c60:	46c8      	mov	r8, r9
 8015c62:	f81a 3008 	ldrb.w	r3, [sl, r8]
 8015c66:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 8015c6a:	2901      	cmp	r1, #1
 8015c6c:	f240 80c3 	bls.w	8015df6 <uxr_write_framed_msg+0x222>
 8015c70:	2a29      	cmp	r2, #41	@ 0x29
 8015c72:	f200 809f 	bhi.w	8015db4 <uxr_write_framed_msg+0x1e0>
 8015c76:	18a1      	adds	r1, r4, r2
 8015c78:	3201      	adds	r2, #1
 8015c7a:	b2d2      	uxtb	r2, r2
 8015c7c:	f881 3038 	strb.w	r3, [r1, #56]	@ 0x38
 8015c80:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8015c84:	ea89 0303 	eor.w	r3, r9, r3
 8015c88:	498c      	ldr	r1, [pc, #560]	@ (8015ebc <uxr_write_framed_msg+0x2e8>)
 8015c8a:	b2db      	uxtb	r3, r3
 8015c8c:	f108 0801 	add.w	r8, r8, #1
 8015c90:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8015c94:	ea83 2919 	eor.w	r9, r3, r9, lsr #8
 8015c98:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015c9a:	4543      	cmp	r3, r8
 8015c9c:	d8e1      	bhi.n	8015c62 <uxr_write_framed_msg+0x8e>
 8015c9e:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8015ca2:	fa5f f889 	uxtb.w	r8, r9
 8015ca6:	9301      	str	r3, [sp, #4]
 8015ca8:	f04f 0900 	mov.w	r9, #0
 8015cac:	f1a8 0a7d 	sub.w	sl, r8, #125	@ 0x7d
 8015cb0:	fa5f f18a 	uxtb.w	r1, sl
 8015cb4:	2901      	cmp	r1, #1
 8015cb6:	d921      	bls.n	8015cfc <uxr_write_framed_msg+0x128>
 8015cb8:	2a29      	cmp	r2, #41	@ 0x29
 8015cba:	f240 80af 	bls.w	8015e1c <uxr_write_framed_msg+0x248>
 8015cbe:	2500      	movs	r5, #0
 8015cc0:	e000      	b.n	8015cc4 <uxr_write_framed_msg+0xf0>
 8015cc2:	b160      	cbz	r0, 8015cde <uxr_write_framed_msg+0x10a>
 8015cc4:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8015cc8:	1b52      	subs	r2, r2, r5
 8015cca:	465b      	mov	r3, fp
 8015ccc:	4421      	add	r1, r4
 8015cce:	4638      	mov	r0, r7
 8015cd0:	47b0      	blx	r6
 8015cd2:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8015cd6:	4405      	add	r5, r0
 8015cd8:	4295      	cmp	r5, r2
 8015cda:	d3f2      	bcc.n	8015cc2 <uxr_write_framed_msg+0xee>
 8015cdc:	d003      	beq.n	8015ce6 <uxr_write_framed_msg+0x112>
 8015cde:	2000      	movs	r0, #0
 8015ce0:	b003      	add	sp, #12
 8015ce2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015ce6:	fa5f f18a 	uxtb.w	r1, sl
 8015cea:	f04f 0300 	mov.w	r3, #0
 8015cee:	2901      	cmp	r1, #1
 8015cf0:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 8015cf4:	f04f 0200 	mov.w	r2, #0
 8015cf8:	f200 8090 	bhi.w	8015e1c <uxr_write_framed_msg+0x248>
 8015cfc:	1c51      	adds	r1, r2, #1
 8015cfe:	b2c9      	uxtb	r1, r1
 8015d00:	2929      	cmp	r1, #41	@ 0x29
 8015d02:	d8dc      	bhi.n	8015cbe <uxr_write_framed_msg+0xea>
 8015d04:	18a5      	adds	r5, r4, r2
 8015d06:	4421      	add	r1, r4
 8015d08:	3202      	adds	r2, #2
 8015d0a:	f088 0820 	eor.w	r8, r8, #32
 8015d0e:	4648      	mov	r0, r9
 8015d10:	f04f 037d 	mov.w	r3, #125	@ 0x7d
 8015d14:	b2d2      	uxtb	r2, r2
 8015d16:	f885 3038 	strb.w	r3, [r5, #56]	@ 0x38
 8015d1a:	f04f 0901 	mov.w	r9, #1
 8015d1e:	f881 8038 	strb.w	r8, [r1, #56]	@ 0x38
 8015d22:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8015d26:	2800      	cmp	r0, #0
 8015d28:	f040 8085 	bne.w	8015e36 <uxr_write_framed_msg+0x262>
 8015d2c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8015d30:	e7bc      	b.n	8015cac <uxr_write_framed_msg+0xd8>
 8015d32:	4611      	mov	r1, r2
 8015d34:	f04f 0c03 	mov.w	ip, #3
 8015d38:	2204      	movs	r2, #4
 8015d3a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015d3c:	4421      	add	r1, r4
 8015d3e:	b2dd      	uxtb	r5, r3
 8015d40:	f04f 0e7d 	mov.w	lr, #125	@ 0x7d
 8015d44:	f881 e038 	strb.w	lr, [r1, #56]	@ 0x38
 8015d48:	44a4      	add	ip, r4
 8015d4a:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 8015d4e:	f080 0020 	eor.w	r0, r0, #32
 8015d52:	2901      	cmp	r1, #1
 8015d54:	f88c 0038 	strb.w	r0, [ip, #56]	@ 0x38
 8015d58:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8015d5c:	f63f af66 	bhi.w	8015c2c <uxr_write_framed_msg+0x58>
 8015d60:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015d62:	18a0      	adds	r0, r4, r2
 8015d64:	f085 0520 	eor.w	r5, r5, #32
 8015d68:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 8015d6c:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8015d70:	f880 c038 	strb.w	ip, [r0, #56]	@ 0x38
 8015d74:	f880 5039 	strb.w	r5, [r0, #57]	@ 0x39
 8015d78:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 8015d7c:	3202      	adds	r2, #2
 8015d7e:	2801      	cmp	r0, #1
 8015d80:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8015d84:	f63f af60 	bhi.w	8015c48 <uxr_write_framed_msg+0x74>
 8015d88:	1c50      	adds	r0, r2, #1
 8015d8a:	18a5      	adds	r5, r4, r2
 8015d8c:	fa54 f080 	uxtab	r0, r4, r0
 8015d90:	3202      	adds	r2, #2
 8015d92:	f081 0120 	eor.w	r1, r1, #32
 8015d96:	b2d2      	uxtb	r2, r2
 8015d98:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 8015d9c:	f885 c038 	strb.w	ip, [r5, #56]	@ 0x38
 8015da0:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 8015da4:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8015da8:	2b00      	cmp	r3, #0
 8015daa:	f47f af57 	bne.w	8015c5c <uxr_write_framed_msg+0x88>
 8015dae:	9301      	str	r3, [sp, #4]
 8015db0:	4698      	mov	r8, r3
 8015db2:	e779      	b.n	8015ca8 <uxr_write_framed_msg+0xd4>
 8015db4:	2500      	movs	r5, #0
 8015db6:	e001      	b.n	8015dbc <uxr_write_framed_msg+0x1e8>
 8015db8:	2800      	cmp	r0, #0
 8015dba:	d090      	beq.n	8015cde <uxr_write_framed_msg+0x10a>
 8015dbc:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8015dc0:	1b52      	subs	r2, r2, r5
 8015dc2:	465b      	mov	r3, fp
 8015dc4:	4421      	add	r1, r4
 8015dc6:	4638      	mov	r0, r7
 8015dc8:	47b0      	blx	r6
 8015dca:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8015dce:	4405      	add	r5, r0
 8015dd0:	4295      	cmp	r5, r2
 8015dd2:	d3f1      	bcc.n	8015db8 <uxr_write_framed_msg+0x1e4>
 8015dd4:	d183      	bne.n	8015cde <uxr_write_framed_msg+0x10a>
 8015dd6:	f04f 0300 	mov.w	r3, #0
 8015dda:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 8015dde:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015de0:	4543      	cmp	r3, r8
 8015de2:	d964      	bls.n	8015eae <uxr_write_framed_msg+0x2da>
 8015de4:	f81a 3008 	ldrb.w	r3, [sl, r8]
 8015de8:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 8015dec:	2901      	cmp	r1, #1
 8015dee:	f04f 0200 	mov.w	r2, #0
 8015df2:	f63f af3d 	bhi.w	8015c70 <uxr_write_framed_msg+0x9c>
 8015df6:	1c51      	adds	r1, r2, #1
 8015df8:	b2c9      	uxtb	r1, r1
 8015dfa:	2929      	cmp	r1, #41	@ 0x29
 8015dfc:	d8da      	bhi.n	8015db4 <uxr_write_framed_msg+0x1e0>
 8015dfe:	18a0      	adds	r0, r4, r2
 8015e00:	4421      	add	r1, r4
 8015e02:	f04f 057d 	mov.w	r5, #125	@ 0x7d
 8015e06:	3202      	adds	r2, #2
 8015e08:	f880 5038 	strb.w	r5, [r0, #56]	@ 0x38
 8015e0c:	b2d2      	uxtb	r2, r2
 8015e0e:	f083 0020 	eor.w	r0, r3, #32
 8015e12:	f881 0038 	strb.w	r0, [r1, #56]	@ 0x38
 8015e16:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8015e1a:	e733      	b.n	8015c84 <uxr_write_framed_msg+0xb0>
 8015e1c:	18a1      	adds	r1, r4, r2
 8015e1e:	3201      	adds	r2, #1
 8015e20:	4648      	mov	r0, r9
 8015e22:	b2d2      	uxtb	r2, r2
 8015e24:	f881 8038 	strb.w	r8, [r1, #56]	@ 0x38
 8015e28:	f04f 0901 	mov.w	r9, #1
 8015e2c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8015e30:	2800      	cmp	r0, #0
 8015e32:	f43f af7b 	beq.w	8015d2c <uxr_write_framed_msg+0x158>
 8015e36:	2500      	movs	r5, #0
 8015e38:	e002      	b.n	8015e40 <uxr_write_framed_msg+0x26c>
 8015e3a:	2800      	cmp	r0, #0
 8015e3c:	f43f af4f 	beq.w	8015cde <uxr_write_framed_msg+0x10a>
 8015e40:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8015e44:	1b52      	subs	r2, r2, r5
 8015e46:	465b      	mov	r3, fp
 8015e48:	4421      	add	r1, r4
 8015e4a:	4638      	mov	r0, r7
 8015e4c:	47b0      	blx	r6
 8015e4e:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8015e52:	4405      	add	r5, r0
 8015e54:	4295      	cmp	r5, r2
 8015e56:	d3f0      	bcc.n	8015e3a <uxr_write_framed_msg+0x266>
 8015e58:	f47f af41 	bne.w	8015cde <uxr_write_framed_msg+0x10a>
 8015e5c:	2300      	movs	r3, #0
 8015e5e:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 8015e62:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015e64:	b298      	uxth	r0, r3
 8015e66:	b003      	add	sp, #12
 8015e68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015e6c:	217d      	movs	r1, #125	@ 0x7d
 8015e6e:	f082 0220 	eor.w	r2, r2, #32
 8015e72:	f884 1039 	strb.w	r1, [r4, #57]	@ 0x39
 8015e76:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 8015e7a:	f884 203a 	strb.w	r2, [r4, #58]	@ 0x3a
 8015e7e:	2901      	cmp	r1, #1
 8015e80:	f04f 0203 	mov.w	r2, #3
 8015e84:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8015e88:	d804      	bhi.n	8015e94 <uxr_write_framed_msg+0x2c0>
 8015e8a:	4611      	mov	r1, r2
 8015e8c:	f04f 0c04 	mov.w	ip, #4
 8015e90:	2205      	movs	r2, #5
 8015e92:	e752      	b.n	8015d3a <uxr_write_framed_msg+0x166>
 8015e94:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015e96:	f884 003b 	strb.w	r0, [r4, #59]	@ 0x3b
 8015e9a:	b2dd      	uxtb	r5, r3
 8015e9c:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 8015ea0:	2204      	movs	r2, #4
 8015ea2:	2901      	cmp	r1, #1
 8015ea4:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8015ea8:	f63f aec0 	bhi.w	8015c2c <uxr_write_framed_msg+0x58>
 8015eac:	e758      	b.n	8015d60 <uxr_write_framed_msg+0x18c>
 8015eae:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8015eb2:	fa5f f889 	uxtb.w	r8, r9
 8015eb6:	9301      	str	r3, [sp, #4]
 8015eb8:	2200      	movs	r2, #0
 8015eba:	e6f5      	b.n	8015ca8 <uxr_write_framed_msg+0xd4>
 8015ebc:	080192a4 	.word	0x080192a4

08015ec0 <uxr_framing_read_transport>:
 8015ec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015ec4:	4604      	mov	r4, r0
 8015ec6:	b083      	sub	sp, #12
 8015ec8:	461f      	mov	r7, r3
 8015eca:	f8dd b034 	ldr.w	fp, [sp, #52]	@ 0x34
 8015ece:	4689      	mov	r9, r1
 8015ed0:	4692      	mov	sl, r2
 8015ed2:	f7f8 fadb 	bl	800e48c <uxr_millis>
 8015ed6:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8015eda:	f894 602d 	ldrb.w	r6, [r4, #45]	@ 0x2d
 8015ede:	42b3      	cmp	r3, r6
 8015ee0:	4680      	mov	r8, r0
 8015ee2:	d061      	beq.n	8015fa8 <uxr_framing_read_transport+0xe8>
 8015ee4:	d81c      	bhi.n	8015f20 <uxr_framing_read_transport+0x60>
 8015ee6:	1e75      	subs	r5, r6, #1
 8015ee8:	1aed      	subs	r5, r5, r3
 8015eea:	b2ed      	uxtb	r5, r5
 8015eec:	2600      	movs	r6, #0
 8015eee:	455d      	cmp	r5, fp
 8015ef0:	d81f      	bhi.n	8015f32 <uxr_framing_read_transport+0x72>
 8015ef2:	19ab      	adds	r3, r5, r6
 8015ef4:	455b      	cmp	r3, fp
 8015ef6:	bf84      	itt	hi
 8015ef8:	ebab 0605 	subhi.w	r6, fp, r5
 8015efc:	b2f6      	uxtbhi	r6, r6
 8015efe:	b9ed      	cbnz	r5, 8015f3c <uxr_framing_read_transport+0x7c>
 8015f00:	f04f 0b00 	mov.w	fp, #0
 8015f04:	f7f8 fac2 	bl	800e48c <uxr_millis>
 8015f08:	683b      	ldr	r3, [r7, #0]
 8015f0a:	eba0 0808 	sub.w	r8, r0, r8
 8015f0e:	eba3 0308 	sub.w	r3, r3, r8
 8015f12:	4658      	mov	r0, fp
 8015f14:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8015f18:	603b      	str	r3, [r7, #0]
 8015f1a:	b003      	add	sp, #12
 8015f1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015f20:	2e00      	cmp	r6, #0
 8015f22:	d049      	beq.n	8015fb8 <uxr_framing_read_transport+0xf8>
 8015f24:	f1c3 052a 	rsb	r5, r3, #42	@ 0x2a
 8015f28:	b2ed      	uxtb	r5, r5
 8015f2a:	3e01      	subs	r6, #1
 8015f2c:	455d      	cmp	r5, fp
 8015f2e:	b2f6      	uxtb	r6, r6
 8015f30:	d9df      	bls.n	8015ef2 <uxr_framing_read_transport+0x32>
 8015f32:	fa5f f58b 	uxtb.w	r5, fp
 8015f36:	2600      	movs	r6, #0
 8015f38:	2d00      	cmp	r5, #0
 8015f3a:	d0e1      	beq.n	8015f00 <uxr_framing_read_transport+0x40>
 8015f3c:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8015f40:	3102      	adds	r1, #2
 8015f42:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015f44:	9300      	str	r3, [sp, #0]
 8015f46:	683b      	ldr	r3, [r7, #0]
 8015f48:	4421      	add	r1, r4
 8015f4a:	462a      	mov	r2, r5
 8015f4c:	4650      	mov	r0, sl
 8015f4e:	47c8      	blx	r9
 8015f50:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8015f54:	4a1a      	ldr	r2, [pc, #104]	@ (8015fc0 <uxr_framing_read_transport+0x100>)
 8015f56:	4403      	add	r3, r0
 8015f58:	0859      	lsrs	r1, r3, #1
 8015f5a:	fba2 2101 	umull	r2, r1, r2, r1
 8015f5e:	0889      	lsrs	r1, r1, #2
 8015f60:	222a      	movs	r2, #42	@ 0x2a
 8015f62:	fb02 3111 	mls	r1, r2, r1, r3
 8015f66:	4683      	mov	fp, r0
 8015f68:	f884 102c 	strb.w	r1, [r4, #44]	@ 0x2c
 8015f6c:	2800      	cmp	r0, #0
 8015f6e:	d0c7      	beq.n	8015f00 <uxr_framing_read_transport+0x40>
 8015f70:	42a8      	cmp	r0, r5
 8015f72:	d1c7      	bne.n	8015f04 <uxr_framing_read_transport+0x44>
 8015f74:	2e00      	cmp	r6, #0
 8015f76:	d0c5      	beq.n	8015f04 <uxr_framing_read_transport+0x44>
 8015f78:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015f7a:	9300      	str	r3, [sp, #0]
 8015f7c:	3102      	adds	r1, #2
 8015f7e:	4632      	mov	r2, r6
 8015f80:	4421      	add	r1, r4
 8015f82:	2300      	movs	r3, #0
 8015f84:	4650      	mov	r0, sl
 8015f86:	47c8      	blx	r9
 8015f88:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8015f8c:	4a0c      	ldr	r2, [pc, #48]	@ (8015fc0 <uxr_framing_read_transport+0x100>)
 8015f8e:	180b      	adds	r3, r1, r0
 8015f90:	0859      	lsrs	r1, r3, #1
 8015f92:	fba2 1201 	umull	r1, r2, r2, r1
 8015f96:	0892      	lsrs	r2, r2, #2
 8015f98:	212a      	movs	r1, #42	@ 0x2a
 8015f9a:	fb01 3312 	mls	r3, r1, r2, r3
 8015f9e:	eb00 0b05 	add.w	fp, r0, r5
 8015fa2:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 8015fa6:	e7ad      	b.n	8015f04 <uxr_framing_read_transport+0x44>
 8015fa8:	2600      	movs	r6, #0
 8015faa:	f1bb 0f28 	cmp.w	fp, #40	@ 0x28
 8015fae:	85a6      	strh	r6, [r4, #44]	@ 0x2c
 8015fb0:	d9bf      	bls.n	8015f32 <uxr_framing_read_transport+0x72>
 8015fb2:	2102      	movs	r1, #2
 8015fb4:	2529      	movs	r5, #41	@ 0x29
 8015fb6:	e7c4      	b.n	8015f42 <uxr_framing_read_transport+0x82>
 8015fb8:	f1c3 0529 	rsb	r5, r3, #41	@ 0x29
 8015fbc:	b2ed      	uxtb	r5, r5
 8015fbe:	e796      	b.n	8015eee <uxr_framing_read_transport+0x2e>
 8015fc0:	30c30c31 	.word	0x30c30c31

08015fc4 <uxr_read_framed_msg>:
 8015fc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015fc8:	461e      	mov	r6, r3
 8015fca:	f890 502c 	ldrb.w	r5, [r0, #44]	@ 0x2c
 8015fce:	f890 302d 	ldrb.w	r3, [r0, #45]	@ 0x2d
 8015fd2:	429d      	cmp	r5, r3
 8015fd4:	b083      	sub	sp, #12
 8015fd6:	4604      	mov	r4, r0
 8015fd8:	4688      	mov	r8, r1
 8015fda:	4691      	mov	r9, r2
 8015fdc:	f000 8188 	beq.w	80162f0 <uxr_read_framed_msg+0x32c>
 8015fe0:	7823      	ldrb	r3, [r4, #0]
 8015fe2:	4dc1      	ldr	r5, [pc, #772]	@ (80162e8 <uxr_read_framed_msg+0x324>)
 8015fe4:	4fc1      	ldr	r7, [pc, #772]	@ (80162ec <uxr_read_framed_msg+0x328>)
 8015fe6:	2b07      	cmp	r3, #7
 8015fe8:	d8fd      	bhi.n	8015fe6 <uxr_read_framed_msg+0x22>
 8015fea:	e8df f013 	tbh	[pc, r3, lsl #1]
 8015fee:	0115      	.short	0x0115
 8015ff0:	00d600f6 	.word	0x00d600f6
 8015ff4:	009000b9 	.word	0x009000b9
 8015ff8:	0030004d 	.word	0x0030004d
 8015ffc:	0008      	.short	0x0008
 8015ffe:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8016002:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8016006:	4299      	cmp	r1, r3
 8016008:	f000 814a 	beq.w	80162a0 <uxr_read_framed_msg+0x2dc>
 801600c:	18e2      	adds	r2, r4, r3
 801600e:	7892      	ldrb	r2, [r2, #2]
 8016010:	2a7d      	cmp	r2, #125	@ 0x7d
 8016012:	f000 8199 	beq.w	8016348 <uxr_read_framed_msg+0x384>
 8016016:	3301      	adds	r3, #1
 8016018:	0858      	lsrs	r0, r3, #1
 801601a:	fba5 1000 	umull	r1, r0, r5, r0
 801601e:	0880      	lsrs	r0, r0, #2
 8016020:	212a      	movs	r1, #42	@ 0x2a
 8016022:	fb01 3310 	mls	r3, r1, r0, r3
 8016026:	2a7e      	cmp	r2, #126	@ 0x7e
 8016028:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801602c:	f000 8252 	beq.w	80164d4 <uxr_read_framed_msg+0x510>
 8016030:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 8016032:	8ee1      	ldrh	r1, [r4, #54]	@ 0x36
 8016034:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8016038:	b29b      	uxth	r3, r3
 801603a:	2200      	movs	r2, #0
 801603c:	4299      	cmp	r1, r3
 801603e:	86a3      	strh	r3, [r4, #52]	@ 0x34
 8016040:	7022      	strb	r2, [r4, #0]
 8016042:	f000 8179 	beq.w	8016338 <uxr_read_framed_msg+0x374>
 8016046:	2000      	movs	r0, #0
 8016048:	b003      	add	sp, #12
 801604a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801604e:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8016052:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8016056:	4299      	cmp	r1, r3
 8016058:	f000 8131 	beq.w	80162be <uxr_read_framed_msg+0x2fa>
 801605c:	18e2      	adds	r2, r4, r3
 801605e:	7890      	ldrb	r0, [r2, #2]
 8016060:	287d      	cmp	r0, #125	@ 0x7d
 8016062:	f000 8190 	beq.w	8016386 <uxr_read_framed_msg+0x3c2>
 8016066:	3301      	adds	r3, #1
 8016068:	085a      	lsrs	r2, r3, #1
 801606a:	fba5 1202 	umull	r1, r2, r5, r2
 801606e:	0892      	lsrs	r2, r2, #2
 8016070:	212a      	movs	r1, #42	@ 0x2a
 8016072:	fb01 3312 	mls	r3, r1, r2, r3
 8016076:	287e      	cmp	r0, #126	@ 0x7e
 8016078:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801607c:	f000 821a 	beq.w	80164b4 <uxr_read_framed_msg+0x4f0>
 8016080:	2307      	movs	r3, #7
 8016082:	86a0      	strh	r0, [r4, #52]	@ 0x34
 8016084:	7023      	strb	r3, [r4, #0]
 8016086:	e7ae      	b.n	8015fe6 <uxr_read_framed_msg+0x22>
 8016088:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 801608a:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 801608e:	459e      	cmp	lr, r3
 8016090:	d938      	bls.n	8016104 <uxr_read_framed_msg+0x140>
 8016092:	ee07 8a90 	vmov	s15, r8
 8016096:	212a      	movs	r1, #42	@ 0x2a
 8016098:	e020      	b.n	80160dc <uxr_read_framed_msg+0x118>
 801609a:	f89b c002 	ldrb.w	ip, [fp, #2]
 801609e:	f1bc 0f7d 	cmp.w	ip, #125	@ 0x7d
 80160a2:	f000 80d4 	beq.w	801624e <uxr_read_framed_msg+0x28a>
 80160a6:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 80160aa:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 80160ae:	f000 8219 	beq.w	80164e4 <uxr_read_framed_msg+0x520>
 80160b2:	f806 c003 	strb.w	ip, [r6, r3]
 80160b6:	f8b4 a036 	ldrh.w	sl, [r4, #54]	@ 0x36
 80160ba:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 80160bc:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 80160c0:	ea8a 000c 	eor.w	r0, sl, ip
 80160c4:	b2c0      	uxtb	r0, r0
 80160c6:	3301      	adds	r3, #1
 80160c8:	f837 2010 	ldrh.w	r2, [r7, r0, lsl #1]
 80160cc:	b29b      	uxth	r3, r3
 80160ce:	ea82 221a 	eor.w	r2, r2, sl, lsr #8
 80160d2:	4573      	cmp	r3, lr
 80160d4:	8663      	strh	r3, [r4, #50]	@ 0x32
 80160d6:	86e2      	strh	r2, [r4, #54]	@ 0x36
 80160d8:	f080 8120 	bcs.w	801631c <uxr_read_framed_msg+0x358>
 80160dc:	f894 002d 	ldrb.w	r0, [r4, #45]	@ 0x2d
 80160e0:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 80160e4:	f100 0c01 	add.w	ip, r0, #1
 80160e8:	ea4f 025c 	mov.w	r2, ip, lsr #1
 80160ec:	fba5 8202 	umull	r8, r2, r5, r2
 80160f0:	0892      	lsrs	r2, r2, #2
 80160f2:	4582      	cmp	sl, r0
 80160f4:	eb04 0b00 	add.w	fp, r4, r0
 80160f8:	fb01 c212 	mls	r2, r1, r2, ip
 80160fc:	d1cd      	bne.n	801609a <uxr_read_framed_msg+0xd6>
 80160fe:	ee17 8a90 	vmov	r8, s15
 8016102:	459e      	cmp	lr, r3
 8016104:	f040 8111 	bne.w	801632a <uxr_read_framed_msg+0x366>
 8016108:	2306      	movs	r3, #6
 801610a:	7023      	strb	r3, [r4, #0]
 801610c:	e76b      	b.n	8015fe6 <uxr_read_framed_msg+0x22>
 801610e:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8016112:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8016116:	4298      	cmp	r0, r3
 8016118:	f000 80c2 	beq.w	80162a0 <uxr_read_framed_msg+0x2dc>
 801611c:	18e2      	adds	r2, r4, r3
 801611e:	7891      	ldrb	r1, [r2, #2]
 8016120:	297d      	cmp	r1, #125	@ 0x7d
 8016122:	f000 814c 	beq.w	80163be <uxr_read_framed_msg+0x3fa>
 8016126:	3301      	adds	r3, #1
 8016128:	085a      	lsrs	r2, r3, #1
 801612a:	fba5 0202 	umull	r0, r2, r5, r2
 801612e:	0892      	lsrs	r2, r2, #2
 8016130:	202a      	movs	r0, #42	@ 0x2a
 8016132:	fb00 3312 	mls	r3, r0, r2, r3
 8016136:	297e      	cmp	r1, #126	@ 0x7e
 8016138:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801613c:	f000 81ca 	beq.w	80164d4 <uxr_read_framed_msg+0x510>
 8016140:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 8016142:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8016146:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8016148:	b29b      	uxth	r3, r3
 801614a:	2000      	movs	r0, #0
 801614c:	428b      	cmp	r3, r1
 801614e:	8623      	strh	r3, [r4, #48]	@ 0x30
 8016150:	8660      	strh	r0, [r4, #50]	@ 0x32
 8016152:	86e0      	strh	r0, [r4, #54]	@ 0x36
 8016154:	f240 80df 	bls.w	8016316 <uxr_read_framed_msg+0x352>
 8016158:	7020      	strb	r0, [r4, #0]
 801615a:	b003      	add	sp, #12
 801615c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016160:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8016164:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8016168:	4299      	cmp	r1, r3
 801616a:	f000 80a8 	beq.w	80162be <uxr_read_framed_msg+0x2fa>
 801616e:	18e2      	adds	r2, r4, r3
 8016170:	7890      	ldrb	r0, [r2, #2]
 8016172:	287d      	cmp	r0, #125	@ 0x7d
 8016174:	f000 8164 	beq.w	8016440 <uxr_read_framed_msg+0x47c>
 8016178:	3301      	adds	r3, #1
 801617a:	085a      	lsrs	r2, r3, #1
 801617c:	fba5 1202 	umull	r1, r2, r5, r2
 8016180:	0892      	lsrs	r2, r2, #2
 8016182:	212a      	movs	r1, #42	@ 0x2a
 8016184:	fb01 3312 	mls	r3, r1, r2, r3
 8016188:	287e      	cmp	r0, #126	@ 0x7e
 801618a:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801618e:	f000 8191 	beq.w	80164b4 <uxr_read_framed_msg+0x4f0>
 8016192:	2304      	movs	r3, #4
 8016194:	8620      	strh	r0, [r4, #48]	@ 0x30
 8016196:	7023      	strb	r3, [r4, #0]
 8016198:	e725      	b.n	8015fe6 <uxr_read_framed_msg+0x22>
 801619a:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 801619e:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 80161a2:	4290      	cmp	r0, r2
 80161a4:	f000 80b3 	beq.w	801630e <uxr_read_framed_msg+0x34a>
 80161a8:	18a3      	adds	r3, r4, r2
 80161aa:	7899      	ldrb	r1, [r3, #2]
 80161ac:	297d      	cmp	r1, #125	@ 0x7d
 80161ae:	f000 8164 	beq.w	801647a <uxr_read_framed_msg+0x4b6>
 80161b2:	3201      	adds	r2, #1
 80161b4:	0850      	lsrs	r0, r2, #1
 80161b6:	fba5 3000 	umull	r3, r0, r5, r0
 80161ba:	0880      	lsrs	r0, r0, #2
 80161bc:	232a      	movs	r3, #42	@ 0x2a
 80161be:	fb03 2210 	mls	r2, r3, r0, r2
 80161c2:	297e      	cmp	r1, #126	@ 0x7e
 80161c4:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 80161c8:	f000 8188 	beq.w	80164dc <uxr_read_framed_msg+0x518>
 80161cc:	7863      	ldrb	r3, [r4, #1]
 80161ce:	428b      	cmp	r3, r1
 80161d0:	bf0c      	ite	eq
 80161d2:	2303      	moveq	r3, #3
 80161d4:	2300      	movne	r3, #0
 80161d6:	7023      	strb	r3, [r4, #0]
 80161d8:	e705      	b.n	8015fe6 <uxr_read_framed_msg+0x22>
 80161da:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 80161de:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 80161e2:	2200      	movs	r2, #0
 80161e4:	4299      	cmp	r1, r3
 80161e6:	f884 202e 	strb.w	r2, [r4, #46]	@ 0x2e
 80161ea:	d06c      	beq.n	80162c6 <uxr_read_framed_msg+0x302>
 80161ec:	18e2      	adds	r2, r4, r3
 80161ee:	7890      	ldrb	r0, [r2, #2]
 80161f0:	287d      	cmp	r0, #125	@ 0x7d
 80161f2:	f000 8101 	beq.w	80163f8 <uxr_read_framed_msg+0x434>
 80161f6:	3301      	adds	r3, #1
 80161f8:	085a      	lsrs	r2, r3, #1
 80161fa:	fba5 1202 	umull	r1, r2, r5, r2
 80161fe:	0892      	lsrs	r2, r2, #2
 8016200:	212a      	movs	r1, #42	@ 0x2a
 8016202:	fb01 3312 	mls	r3, r1, r2, r3
 8016206:	287e      	cmp	r0, #126	@ 0x7e
 8016208:	f884 002e 	strb.w	r0, [r4, #46]	@ 0x2e
 801620c:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8016210:	d059      	beq.n	80162c6 <uxr_read_framed_msg+0x302>
 8016212:	2302      	movs	r3, #2
 8016214:	7023      	strb	r3, [r4, #0]
 8016216:	e6e6      	b.n	8015fe6 <uxr_read_framed_msg+0x22>
 8016218:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 801621c:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8016220:	f04f 0e2a 	mov.w	lr, #42	@ 0x2a
 8016224:	1c51      	adds	r1, r2, #1
 8016226:	084b      	lsrs	r3, r1, #1
 8016228:	fba5 c303 	umull	ip, r3, r5, r3
 801622c:	089b      	lsrs	r3, r3, #2
 801622e:	fb0e 1313 	mls	r3, lr, r3, r1
 8016232:	4592      	cmp	sl, r2
 8016234:	eb04 0002 	add.w	r0, r4, r2
 8016238:	b2da      	uxtb	r2, r3
 801623a:	f43f af04 	beq.w	8016046 <uxr_read_framed_msg+0x82>
 801623e:	7883      	ldrb	r3, [r0, #2]
 8016240:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8016244:	2b7e      	cmp	r3, #126	@ 0x7e
 8016246:	d1ed      	bne.n	8016224 <uxr_read_framed_msg+0x260>
 8016248:	2301      	movs	r3, #1
 801624a:	7023      	strb	r3, [r4, #0]
 801624c:	e6cb      	b.n	8015fe6 <uxr_read_framed_msg+0x22>
 801624e:	f100 0c01 	add.w	ip, r0, #1
 8016252:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8016256:	fba5 8202 	umull	r8, r2, r5, r2
 801625a:	0892      	lsrs	r2, r2, #2
 801625c:	fb01 c212 	mls	r2, r1, r2, ip
 8016260:	eb04 0c02 	add.w	ip, r4, r2
 8016264:	b2d2      	uxtb	r2, r2
 8016266:	4592      	cmp	sl, r2
 8016268:	f100 0002 	add.w	r0, r0, #2
 801626c:	f43f af47 	beq.w	80160fe <uxr_read_framed_msg+0x13a>
 8016270:	0842      	lsrs	r2, r0, #1
 8016272:	f89c a002 	ldrb.w	sl, [ip, #2]
 8016276:	fba5 8202 	umull	r8, r2, r5, r2
 801627a:	0892      	lsrs	r2, r2, #2
 801627c:	fb01 0012 	mls	r0, r1, r2, r0
 8016280:	f1ba 0f7e 	cmp.w	sl, #126	@ 0x7e
 8016284:	f08a 0c20 	eor.w	ip, sl, #32
 8016288:	f884 002d 	strb.w	r0, [r4, #45]	@ 0x2d
 801628c:	f47f af11 	bne.w	80160b2 <uxr_read_framed_msg+0xee>
 8016290:	459e      	cmp	lr, r3
 8016292:	ee17 8a90 	vmov	r8, s15
 8016296:	f43f af37 	beq.w	8016108 <uxr_read_framed_msg+0x144>
 801629a:	2301      	movs	r3, #1
 801629c:	7023      	strb	r3, [r4, #0]
 801629e:	e6a2      	b.n	8015fe6 <uxr_read_framed_msg+0x22>
 80162a0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80162a2:	9300      	str	r3, [sp, #0]
 80162a4:	2301      	movs	r3, #1
 80162a6:	9301      	str	r3, [sp, #4]
 80162a8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80162aa:	464a      	mov	r2, r9
 80162ac:	4641      	mov	r1, r8
 80162ae:	4620      	mov	r0, r4
 80162b0:	f7ff fe06 	bl	8015ec0 <uxr_framing_read_transport>
 80162b4:	2800      	cmp	r0, #0
 80162b6:	f43f aec6 	beq.w	8016046 <uxr_read_framed_msg+0x82>
 80162ba:	7823      	ldrb	r3, [r4, #0]
 80162bc:	e693      	b.n	8015fe6 <uxr_read_framed_msg+0x22>
 80162be:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80162c0:	9300      	str	r3, [sp, #0]
 80162c2:	2302      	movs	r3, #2
 80162c4:	e7ef      	b.n	80162a6 <uxr_read_framed_msg+0x2e2>
 80162c6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80162c8:	9300      	str	r3, [sp, #0]
 80162ca:	2304      	movs	r3, #4
 80162cc:	9301      	str	r3, [sp, #4]
 80162ce:	464a      	mov	r2, r9
 80162d0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80162d2:	4641      	mov	r1, r8
 80162d4:	4620      	mov	r0, r4
 80162d6:	f7ff fdf3 	bl	8015ec0 <uxr_framing_read_transport>
 80162da:	2800      	cmp	r0, #0
 80162dc:	d1ed      	bne.n	80162ba <uxr_read_framed_msg+0x2f6>
 80162de:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 80162e2:	2b7e      	cmp	r3, #126	@ 0x7e
 80162e4:	d0e9      	beq.n	80162ba <uxr_read_framed_msg+0x2f6>
 80162e6:	e6ae      	b.n	8016046 <uxr_read_framed_msg+0x82>
 80162e8:	30c30c31 	.word	0x30c30c31
 80162ec:	080192a4 	.word	0x080192a4
 80162f0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80162f2:	9300      	str	r3, [sp, #0]
 80162f4:	2305      	movs	r3, #5
 80162f6:	9301      	str	r3, [sp, #4]
 80162f8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80162fa:	f7ff fde1 	bl	8015ec0 <uxr_framing_read_transport>
 80162fe:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8016302:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8016306:	429a      	cmp	r2, r3
 8016308:	f43f ae9d 	beq.w	8016046 <uxr_read_framed_msg+0x82>
 801630c:	e668      	b.n	8015fe0 <uxr_read_framed_msg+0x1c>
 801630e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016310:	9300      	str	r3, [sp, #0]
 8016312:	2303      	movs	r3, #3
 8016314:	e7c7      	b.n	80162a6 <uxr_read_framed_msg+0x2e2>
 8016316:	2305      	movs	r3, #5
 8016318:	7023      	strb	r3, [r4, #0]
 801631a:	e664      	b.n	8015fe6 <uxr_read_framed_msg+0x22>
 801631c:	ee17 8a90 	vmov	r8, s15
 8016320:	f43f aef2 	beq.w	8016108 <uxr_read_framed_msg+0x144>
 8016324:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 8016328:	d08e      	beq.n	8016248 <uxr_read_framed_msg+0x284>
 801632a:	ebae 0303 	sub.w	r3, lr, r3
 801632e:	3302      	adds	r3, #2
 8016330:	9301      	str	r3, [sp, #4]
 8016332:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016334:	9300      	str	r3, [sp, #0]
 8016336:	e7b7      	b.n	80162a8 <uxr_read_framed_msg+0x2e4>
 8016338:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801633a:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 801633e:	7013      	strb	r3, [r2, #0]
 8016340:	8e20      	ldrh	r0, [r4, #48]	@ 0x30
 8016342:	b003      	add	sp, #12
 8016344:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016348:	f103 0c01 	add.w	ip, r3, #1
 801634c:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8016350:	fba5 0202 	umull	r0, r2, r5, r2
 8016354:	0892      	lsrs	r2, r2, #2
 8016356:	202a      	movs	r0, #42	@ 0x2a
 8016358:	fb00 c212 	mls	r2, r0, r2, ip
 801635c:	fa5f fc82 	uxtb.w	ip, r2
 8016360:	4561      	cmp	r1, ip
 8016362:	d09d      	beq.n	80162a0 <uxr_read_framed_msg+0x2dc>
 8016364:	3302      	adds	r3, #2
 8016366:	4422      	add	r2, r4
 8016368:	0859      	lsrs	r1, r3, #1
 801636a:	7892      	ldrb	r2, [r2, #2]
 801636c:	fba5 c101 	umull	ip, r1, r5, r1
 8016370:	0889      	lsrs	r1, r1, #2
 8016372:	fb00 3311 	mls	r3, r0, r1, r3
 8016376:	2a7e      	cmp	r2, #126	@ 0x7e
 8016378:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801637c:	f000 80aa 	beq.w	80164d4 <uxr_read_framed_msg+0x510>
 8016380:	f082 0220 	eor.w	r2, r2, #32
 8016384:	e654      	b.n	8016030 <uxr_read_framed_msg+0x6c>
 8016386:	1c58      	adds	r0, r3, #1
 8016388:	0842      	lsrs	r2, r0, #1
 801638a:	fba5 c202 	umull	ip, r2, r5, r2
 801638e:	0892      	lsrs	r2, r2, #2
 8016390:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8016394:	fb0c 0212 	mls	r2, ip, r2, r0
 8016398:	b2d0      	uxtb	r0, r2
 801639a:	4281      	cmp	r1, r0
 801639c:	d08f      	beq.n	80162be <uxr_read_framed_msg+0x2fa>
 801639e:	4422      	add	r2, r4
 80163a0:	3302      	adds	r3, #2
 80163a2:	7890      	ldrb	r0, [r2, #2]
 80163a4:	085a      	lsrs	r2, r3, #1
 80163a6:	fba5 1202 	umull	r1, r2, r5, r2
 80163aa:	0892      	lsrs	r2, r2, #2
 80163ac:	fb0c 3312 	mls	r3, ip, r2, r3
 80163b0:	287e      	cmp	r0, #126	@ 0x7e
 80163b2:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80163b6:	d07d      	beq.n	80164b4 <uxr_read_framed_msg+0x4f0>
 80163b8:	f080 0020 	eor.w	r0, r0, #32
 80163bc:	e660      	b.n	8016080 <uxr_read_framed_msg+0xbc>
 80163be:	1c59      	adds	r1, r3, #1
 80163c0:	084a      	lsrs	r2, r1, #1
 80163c2:	fba5 c202 	umull	ip, r2, r5, r2
 80163c6:	0892      	lsrs	r2, r2, #2
 80163c8:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 80163cc:	fb0c 1212 	mls	r2, ip, r2, r1
 80163d0:	b2d1      	uxtb	r1, r2
 80163d2:	4288      	cmp	r0, r1
 80163d4:	f43f af64 	beq.w	80162a0 <uxr_read_framed_msg+0x2dc>
 80163d8:	4422      	add	r2, r4
 80163da:	3302      	adds	r3, #2
 80163dc:	7891      	ldrb	r1, [r2, #2]
 80163de:	085a      	lsrs	r2, r3, #1
 80163e0:	fba5 0202 	umull	r0, r2, r5, r2
 80163e4:	0892      	lsrs	r2, r2, #2
 80163e6:	fb0c 3312 	mls	r3, ip, r2, r3
 80163ea:	297e      	cmp	r1, #126	@ 0x7e
 80163ec:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80163f0:	d070      	beq.n	80164d4 <uxr_read_framed_msg+0x510>
 80163f2:	f081 0120 	eor.w	r1, r1, #32
 80163f6:	e6a3      	b.n	8016140 <uxr_read_framed_msg+0x17c>
 80163f8:	f103 0c01 	add.w	ip, r3, #1
 80163fc:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8016400:	fba5 0202 	umull	r0, r2, r5, r2
 8016404:	0892      	lsrs	r2, r2, #2
 8016406:	202a      	movs	r0, #42	@ 0x2a
 8016408:	fb00 c212 	mls	r2, r0, r2, ip
 801640c:	fa5f fc82 	uxtb.w	ip, r2
 8016410:	4561      	cmp	r1, ip
 8016412:	f43f af58 	beq.w	80162c6 <uxr_read_framed_msg+0x302>
 8016416:	4422      	add	r2, r4
 8016418:	3302      	adds	r3, #2
 801641a:	7891      	ldrb	r1, [r2, #2]
 801641c:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 8016420:	085a      	lsrs	r2, r3, #1
 8016422:	fba5 c202 	umull	ip, r2, r5, r2
 8016426:	0892      	lsrs	r2, r2, #2
 8016428:	fb00 3312 	mls	r3, r0, r2, r3
 801642c:	297e      	cmp	r1, #126	@ 0x7e
 801642e:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8016432:	f43f af48 	beq.w	80162c6 <uxr_read_framed_msg+0x302>
 8016436:	f081 0120 	eor.w	r1, r1, #32
 801643a:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 801643e:	e6e8      	b.n	8016212 <uxr_read_framed_msg+0x24e>
 8016440:	1c58      	adds	r0, r3, #1
 8016442:	0842      	lsrs	r2, r0, #1
 8016444:	fba5 c202 	umull	ip, r2, r5, r2
 8016448:	0892      	lsrs	r2, r2, #2
 801644a:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 801644e:	fb0c 0212 	mls	r2, ip, r2, r0
 8016452:	b2d0      	uxtb	r0, r2
 8016454:	4281      	cmp	r1, r0
 8016456:	f43f af32 	beq.w	80162be <uxr_read_framed_msg+0x2fa>
 801645a:	4422      	add	r2, r4
 801645c:	3302      	adds	r3, #2
 801645e:	7890      	ldrb	r0, [r2, #2]
 8016460:	085a      	lsrs	r2, r3, #1
 8016462:	fba5 1202 	umull	r1, r2, r5, r2
 8016466:	0892      	lsrs	r2, r2, #2
 8016468:	fb0c 3312 	mls	r3, ip, r2, r3
 801646c:	287e      	cmp	r0, #126	@ 0x7e
 801646e:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8016472:	d01f      	beq.n	80164b4 <uxr_read_framed_msg+0x4f0>
 8016474:	f080 0020 	eor.w	r0, r0, #32
 8016478:	e68b      	b.n	8016192 <uxr_read_framed_msg+0x1ce>
 801647a:	1c51      	adds	r1, r2, #1
 801647c:	084b      	lsrs	r3, r1, #1
 801647e:	fba5 c303 	umull	ip, r3, r5, r3
 8016482:	089b      	lsrs	r3, r3, #2
 8016484:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8016488:	fb0c 1313 	mls	r3, ip, r3, r1
 801648c:	b2d9      	uxtb	r1, r3
 801648e:	4288      	cmp	r0, r1
 8016490:	f43f af3d 	beq.w	801630e <uxr_read_framed_msg+0x34a>
 8016494:	3202      	adds	r2, #2
 8016496:	4423      	add	r3, r4
 8016498:	0850      	lsrs	r0, r2, #1
 801649a:	789b      	ldrb	r3, [r3, #2]
 801649c:	fba5 1000 	umull	r1, r0, r5, r0
 80164a0:	0880      	lsrs	r0, r0, #2
 80164a2:	fb0c 2210 	mls	r2, ip, r0, r2
 80164a6:	2b7e      	cmp	r3, #126	@ 0x7e
 80164a8:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 80164ac:	d016      	beq.n	80164dc <uxr_read_framed_msg+0x518>
 80164ae:	f083 0120 	eor.w	r1, r3, #32
 80164b2:	e68b      	b.n	80161cc <uxr_read_framed_msg+0x208>
 80164b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80164b6:	9300      	str	r3, [sp, #0]
 80164b8:	2302      	movs	r3, #2
 80164ba:	9301      	str	r3, [sp, #4]
 80164bc:	464a      	mov	r2, r9
 80164be:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80164c0:	4641      	mov	r1, r8
 80164c2:	4620      	mov	r0, r4
 80164c4:	f7ff fcfc 	bl	8015ec0 <uxr_framing_read_transport>
 80164c8:	2800      	cmp	r0, #0
 80164ca:	f47f aef6 	bne.w	80162ba <uxr_read_framed_msg+0x2f6>
 80164ce:	2301      	movs	r3, #1
 80164d0:	7023      	strb	r3, [r4, #0]
 80164d2:	e588      	b.n	8015fe6 <uxr_read_framed_msg+0x22>
 80164d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80164d6:	9300      	str	r3, [sp, #0]
 80164d8:	2301      	movs	r3, #1
 80164da:	e7ee      	b.n	80164ba <uxr_read_framed_msg+0x4f6>
 80164dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80164de:	9300      	str	r3, [sp, #0]
 80164e0:	2303      	movs	r3, #3
 80164e2:	e7ea      	b.n	80164ba <uxr_read_framed_msg+0x4f6>
 80164e4:	ee17 8a90 	vmov	r8, s15
 80164e8:	e6ae      	b.n	8016248 <uxr_read_framed_msg+0x284>
 80164ea:	bf00      	nop

080164ec <rcl_get_default_domain_id>:
 80164ec:	b530      	push	{r4, r5, lr}
 80164ee:	b083      	sub	sp, #12
 80164f0:	2300      	movs	r3, #0
 80164f2:	9300      	str	r3, [sp, #0]
 80164f4:	b1d0      	cbz	r0, 801652c <rcl_get_default_domain_id+0x40>
 80164f6:	4604      	mov	r4, r0
 80164f8:	4669      	mov	r1, sp
 80164fa:	4815      	ldr	r0, [pc, #84]	@ (8016550 <rcl_get_default_domain_id+0x64>)
 80164fc:	f7fc fa44 	bl	8012988 <rcutils_get_env>
 8016500:	4602      	mov	r2, r0
 8016502:	b110      	cbz	r0, 801650a <rcl_get_default_domain_id+0x1e>
 8016504:	2001      	movs	r0, #1
 8016506:	b003      	add	sp, #12
 8016508:	bd30      	pop	{r4, r5, pc}
 801650a:	9b00      	ldr	r3, [sp, #0]
 801650c:	b18b      	cbz	r3, 8016532 <rcl_get_default_domain_id+0x46>
 801650e:	7818      	ldrb	r0, [r3, #0]
 8016510:	2800      	cmp	r0, #0
 8016512:	d0f8      	beq.n	8016506 <rcl_get_default_domain_id+0x1a>
 8016514:	a901      	add	r1, sp, #4
 8016516:	4618      	mov	r0, r3
 8016518:	9201      	str	r2, [sp, #4]
 801651a:	f000 ff49 	bl	80173b0 <strtoul>
 801651e:	4605      	mov	r5, r0
 8016520:	b150      	cbz	r0, 8016538 <rcl_get_default_domain_id+0x4c>
 8016522:	1c43      	adds	r3, r0, #1
 8016524:	d00d      	beq.n	8016542 <rcl_get_default_domain_id+0x56>
 8016526:	6025      	str	r5, [r4, #0]
 8016528:	2000      	movs	r0, #0
 801652a:	e7ec      	b.n	8016506 <rcl_get_default_domain_id+0x1a>
 801652c:	200b      	movs	r0, #11
 801652e:	b003      	add	sp, #12
 8016530:	bd30      	pop	{r4, r5, pc}
 8016532:	4618      	mov	r0, r3
 8016534:	b003      	add	sp, #12
 8016536:	bd30      	pop	{r4, r5, pc}
 8016538:	9b01      	ldr	r3, [sp, #4]
 801653a:	781b      	ldrb	r3, [r3, #0]
 801653c:	2b00      	cmp	r3, #0
 801653e:	d0f2      	beq.n	8016526 <rcl_get_default_domain_id+0x3a>
 8016540:	e7e0      	b.n	8016504 <rcl_get_default_domain_id+0x18>
 8016542:	f001 fac5 	bl	8017ad0 <__errno>
 8016546:	6803      	ldr	r3, [r0, #0]
 8016548:	2b22      	cmp	r3, #34	@ 0x22
 801654a:	d1ec      	bne.n	8016526 <rcl_get_default_domain_id+0x3a>
 801654c:	e7da      	b.n	8016504 <rcl_get_default_domain_id+0x18>
 801654e:	bf00      	nop
 8016550:	080194a4 	.word	0x080194a4

08016554 <rcl_expand_topic_name>:
 8016554:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016558:	b08b      	sub	sp, #44	@ 0x2c
 801655a:	9306      	str	r3, [sp, #24]
 801655c:	2800      	cmp	r0, #0
 801655e:	f000 80ad 	beq.w	80166bc <rcl_expand_topic_name+0x168>
 8016562:	460e      	mov	r6, r1
 8016564:	2900      	cmp	r1, #0
 8016566:	f000 80a9 	beq.w	80166bc <rcl_expand_topic_name+0x168>
 801656a:	4617      	mov	r7, r2
 801656c:	2a00      	cmp	r2, #0
 801656e:	f000 80a5 	beq.w	80166bc <rcl_expand_topic_name+0x168>
 8016572:	2b00      	cmp	r3, #0
 8016574:	f000 80a2 	beq.w	80166bc <rcl_expand_topic_name+0x168>
 8016578:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801657a:	2b00      	cmp	r3, #0
 801657c:	f000 809e 	beq.w	80166bc <rcl_expand_topic_name+0x168>
 8016580:	2200      	movs	r2, #0
 8016582:	a909      	add	r1, sp, #36	@ 0x24
 8016584:	4680      	mov	r8, r0
 8016586:	f000 fa57 	bl	8016a38 <rcl_validate_topic_name>
 801658a:	4604      	mov	r4, r0
 801658c:	2800      	cmp	r0, #0
 801658e:	f040 8096 	bne.w	80166be <rcl_expand_topic_name+0x16a>
 8016592:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016594:	2b00      	cmp	r3, #0
 8016596:	f040 809a 	bne.w	80166ce <rcl_expand_topic_name+0x17a>
 801659a:	4602      	mov	r2, r0
 801659c:	a909      	add	r1, sp, #36	@ 0x24
 801659e:	4630      	mov	r0, r6
 80165a0:	f7fc fe50 	bl	8013244 <rmw_validate_node_name>
 80165a4:	2800      	cmp	r0, #0
 80165a6:	f040 808e 	bne.w	80166c6 <rcl_expand_topic_name+0x172>
 80165aa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80165ac:	2a00      	cmp	r2, #0
 80165ae:	f040 8093 	bne.w	80166d8 <rcl_expand_topic_name+0x184>
 80165b2:	a909      	add	r1, sp, #36	@ 0x24
 80165b4:	4638      	mov	r0, r7
 80165b6:	f7fc fe27 	bl	8013208 <rmw_validate_namespace>
 80165ba:	2800      	cmp	r0, #0
 80165bc:	f040 8083 	bne.w	80166c6 <rcl_expand_topic_name+0x172>
 80165c0:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 80165c2:	2c00      	cmp	r4, #0
 80165c4:	f040 80ed 	bne.w	80167a2 <rcl_expand_topic_name+0x24e>
 80165c8:	217b      	movs	r1, #123	@ 0x7b
 80165ca:	4640      	mov	r0, r8
 80165cc:	f001 f99e 	bl	801790c <strchr>
 80165d0:	f898 3000 	ldrb.w	r3, [r8]
 80165d4:	2b2f      	cmp	r3, #47	@ 0x2f
 80165d6:	4605      	mov	r5, r0
 80165d8:	f000 809e 	beq.w	8016718 <rcl_expand_topic_name+0x1c4>
 80165dc:	2b7e      	cmp	r3, #126	@ 0x7e
 80165de:	f040 80a2 	bne.w	8016726 <rcl_expand_topic_name+0x1d2>
 80165e2:	4638      	mov	r0, r7
 80165e4:	f7e9 fdfe 	bl	80001e4 <strlen>
 80165e8:	4a82      	ldr	r2, [pc, #520]	@ (80167f4 <rcl_expand_topic_name+0x2a0>)
 80165ea:	4b83      	ldr	r3, [pc, #524]	@ (80167f8 <rcl_expand_topic_name+0x2a4>)
 80165ec:	2801      	cmp	r0, #1
 80165ee:	bf18      	it	ne
 80165f0:	4613      	movne	r3, r2
 80165f2:	9302      	str	r3, [sp, #8]
 80165f4:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 80165f6:	9300      	str	r3, [sp, #0]
 80165f8:	e9cd 7603 	strd	r7, r6, [sp, #12]
 80165fc:	f108 0301 	add.w	r3, r8, #1
 8016600:	9305      	str	r3, [sp, #20]
 8016602:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8016606:	9301      	str	r3, [sp, #4]
 8016608:	ab14      	add	r3, sp, #80	@ 0x50
 801660a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801660c:	f7fc f9e4 	bl	80129d8 <rcutils_format_string_limit>
 8016610:	4682      	mov	sl, r0
 8016612:	2800      	cmp	r0, #0
 8016614:	f000 80c7 	beq.w	80167a6 <rcl_expand_topic_name+0x252>
 8016618:	2d00      	cmp	r5, #0
 801661a:	f000 80a2 	beq.w	8016762 <rcl_expand_topic_name+0x20e>
 801661e:	217b      	movs	r1, #123	@ 0x7b
 8016620:	f001 f974 	bl	801790c <strchr>
 8016624:	46d1      	mov	r9, sl
 8016626:	4605      	mov	r5, r0
 8016628:	9407      	str	r4, [sp, #28]
 801662a:	46d3      	mov	fp, sl
 801662c:	464c      	mov	r4, r9
 801662e:	2d00      	cmp	r5, #0
 8016630:	f000 80be 	beq.w	80167b0 <rcl_expand_topic_name+0x25c>
 8016634:	217d      	movs	r1, #125	@ 0x7d
 8016636:	4620      	mov	r0, r4
 8016638:	f001 f968 	bl	801790c <strchr>
 801663c:	eba0 0905 	sub.w	r9, r0, r5
 8016640:	f109 0a01 	add.w	sl, r9, #1
 8016644:	486d      	ldr	r0, [pc, #436]	@ (80167fc <rcl_expand_topic_name+0x2a8>)
 8016646:	4652      	mov	r2, sl
 8016648:	4629      	mov	r1, r5
 801664a:	f001 f96c 	bl	8017926 <strncmp>
 801664e:	2800      	cmp	r0, #0
 8016650:	d067      	beq.n	8016722 <rcl_expand_topic_name+0x1ce>
 8016652:	486b      	ldr	r0, [pc, #428]	@ (8016800 <rcl_expand_topic_name+0x2ac>)
 8016654:	4652      	mov	r2, sl
 8016656:	4629      	mov	r1, r5
 8016658:	f001 f965 	bl	8017926 <strncmp>
 801665c:	b130      	cbz	r0, 801666c <rcl_expand_topic_name+0x118>
 801665e:	4869      	ldr	r0, [pc, #420]	@ (8016804 <rcl_expand_topic_name+0x2b0>)
 8016660:	4652      	mov	r2, sl
 8016662:	4629      	mov	r1, r5
 8016664:	f001 f95f 	bl	8017926 <strncmp>
 8016668:	2800      	cmp	r0, #0
 801666a:	d137      	bne.n	80166dc <rcl_expand_topic_name+0x188>
 801666c:	46b9      	mov	r9, r7
 801666e:	ab16      	add	r3, sp, #88	@ 0x58
 8016670:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8016674:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8016678:	ab14      	add	r3, sp, #80	@ 0x50
 801667a:	4628      	mov	r0, r5
 801667c:	cb0c      	ldmia	r3, {r2, r3}
 801667e:	4651      	mov	r1, sl
 8016680:	f7fc fae6 	bl	8012c50 <rcutils_strndup>
 8016684:	4605      	mov	r5, r0
 8016686:	2800      	cmp	r0, #0
 8016688:	f000 809c 	beq.w	80167c4 <rcl_expand_topic_name+0x270>
 801668c:	464a      	mov	r2, r9
 801668e:	4620      	mov	r0, r4
 8016690:	ab14      	add	r3, sp, #80	@ 0x50
 8016692:	4629      	mov	r1, r5
 8016694:	f7fc f9da 	bl	8012a4c <rcutils_repl_str>
 8016698:	9918      	ldr	r1, [sp, #96]	@ 0x60
 801669a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801669c:	4604      	mov	r4, r0
 801669e:	4628      	mov	r0, r5
 80166a0:	4798      	blx	r3
 80166a2:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80166a4:	9918      	ldr	r1, [sp, #96]	@ 0x60
 80166a6:	4658      	mov	r0, fp
 80166a8:	4798      	blx	r3
 80166aa:	2c00      	cmp	r4, #0
 80166ac:	d07b      	beq.n	80167a6 <rcl_expand_topic_name+0x252>
 80166ae:	217b      	movs	r1, #123	@ 0x7b
 80166b0:	4620      	mov	r0, r4
 80166b2:	f001 f92b 	bl	801790c <strchr>
 80166b6:	46a3      	mov	fp, r4
 80166b8:	4605      	mov	r5, r0
 80166ba:	e7b8      	b.n	801662e <rcl_expand_topic_name+0xda>
 80166bc:	240b      	movs	r4, #11
 80166be:	4620      	mov	r0, r4
 80166c0:	b00b      	add	sp, #44	@ 0x2c
 80166c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80166c6:	f7f9 f9b1 	bl	800fa2c <rcl_convert_rmw_ret_to_rcl_ret>
 80166ca:	4604      	mov	r4, r0
 80166cc:	e7f7      	b.n	80166be <rcl_expand_topic_name+0x16a>
 80166ce:	2467      	movs	r4, #103	@ 0x67
 80166d0:	4620      	mov	r0, r4
 80166d2:	b00b      	add	sp, #44	@ 0x2c
 80166d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80166d8:	24c9      	movs	r4, #201	@ 0xc9
 80166da:	e7f0      	b.n	80166be <rcl_expand_topic_name+0x16a>
 80166dc:	f109 32ff 	add.w	r2, r9, #4294967295	@ 0xffffffff
 80166e0:	9806      	ldr	r0, [sp, #24]
 80166e2:	1c69      	adds	r1, r5, #1
 80166e4:	f7fc fbce 	bl	8012e84 <rcutils_string_map_getn>
 80166e8:	4681      	mov	r9, r0
 80166ea:	2800      	cmp	r0, #0
 80166ec:	d1bf      	bne.n	801666e <rcl_expand_topic_name+0x11a>
 80166ee:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80166f0:	aa16      	add	r2, sp, #88	@ 0x58
 80166f2:	6018      	str	r0, [r3, #0]
 80166f4:	ca07      	ldmia	r2, {r0, r1, r2}
 80166f6:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80166fa:	ab14      	add	r3, sp, #80	@ 0x50
 80166fc:	cb0c      	ldmia	r3, {r2, r3}
 80166fe:	4651      	mov	r1, sl
 8016700:	4628      	mov	r0, r5
 8016702:	f7fc faa5 	bl	8012c50 <rcutils_strndup>
 8016706:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8016708:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801670a:	4798      	blx	r3
 801670c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801670e:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8016710:	4658      	mov	r0, fp
 8016712:	2469      	movs	r4, #105	@ 0x69
 8016714:	4798      	blx	r3
 8016716:	e7d2      	b.n	80166be <rcl_expand_topic_name+0x16a>
 8016718:	2800      	cmp	r0, #0
 801671a:	d05b      	beq.n	80167d4 <rcl_expand_topic_name+0x280>
 801671c:	46c1      	mov	r9, r8
 801671e:	46a2      	mov	sl, r4
 8016720:	e782      	b.n	8016628 <rcl_expand_topic_name+0xd4>
 8016722:	46b1      	mov	r9, r6
 8016724:	e7a3      	b.n	801666e <rcl_expand_topic_name+0x11a>
 8016726:	2800      	cmp	r0, #0
 8016728:	d1f8      	bne.n	801671c <rcl_expand_topic_name+0x1c8>
 801672a:	4638      	mov	r0, r7
 801672c:	f7e9 fd5a 	bl	80001e4 <strlen>
 8016730:	4a35      	ldr	r2, [pc, #212]	@ (8016808 <rcl_expand_topic_name+0x2b4>)
 8016732:	4b36      	ldr	r3, [pc, #216]	@ (801680c <rcl_expand_topic_name+0x2b8>)
 8016734:	f8cd 8010 	str.w	r8, [sp, #16]
 8016738:	2801      	cmp	r0, #1
 801673a:	bf18      	it	ne
 801673c:	4613      	movne	r3, r2
 801673e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8016742:	e9cd 1301 	strd	r1, r3, [sp, #4]
 8016746:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8016748:	9703      	str	r7, [sp, #12]
 801674a:	9200      	str	r2, [sp, #0]
 801674c:	ab14      	add	r3, sp, #80	@ 0x50
 801674e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8016750:	f7fc f942 	bl	80129d8 <rcutils_format_string_limit>
 8016754:	4682      	mov	sl, r0
 8016756:	4653      	mov	r3, sl
 8016758:	b32b      	cbz	r3, 80167a6 <rcl_expand_topic_name+0x252>
 801675a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801675c:	f8c3 a000 	str.w	sl, [r3]
 8016760:	e7ad      	b.n	80166be <rcl_expand_topic_name+0x16a>
 8016762:	f89a 3000 	ldrb.w	r3, [sl]
 8016766:	2b2f      	cmp	r3, #47	@ 0x2f
 8016768:	d0f7      	beq.n	801675a <rcl_expand_topic_name+0x206>
 801676a:	4638      	mov	r0, r7
 801676c:	f7e9 fd3a 	bl	80001e4 <strlen>
 8016770:	4a25      	ldr	r2, [pc, #148]	@ (8016808 <rcl_expand_topic_name+0x2b4>)
 8016772:	4b26      	ldr	r3, [pc, #152]	@ (801680c <rcl_expand_topic_name+0x2b8>)
 8016774:	f8cd a010 	str.w	sl, [sp, #16]
 8016778:	2801      	cmp	r0, #1
 801677a:	bf18      	it	ne
 801677c:	4613      	movne	r3, r2
 801677e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8016782:	e9cd 1301 	strd	r1, r3, [sp, #4]
 8016786:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8016788:	9703      	str	r7, [sp, #12]
 801678a:	9200      	str	r2, [sp, #0]
 801678c:	ab14      	add	r3, sp, #80	@ 0x50
 801678e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8016790:	f7fc f922 	bl	80129d8 <rcutils_format_string_limit>
 8016794:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8016796:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8016798:	4605      	mov	r5, r0
 801679a:	4650      	mov	r0, sl
 801679c:	4798      	blx	r3
 801679e:	46aa      	mov	sl, r5
 80167a0:	e7d9      	b.n	8016756 <rcl_expand_topic_name+0x202>
 80167a2:	24ca      	movs	r4, #202	@ 0xca
 80167a4:	e78b      	b.n	80166be <rcl_expand_topic_name+0x16a>
 80167a6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80167a8:	2300      	movs	r3, #0
 80167aa:	6013      	str	r3, [r2, #0]
 80167ac:	240a      	movs	r4, #10
 80167ae:	e786      	b.n	80166be <rcl_expand_topic_name+0x16a>
 80167b0:	465b      	mov	r3, fp
 80167b2:	9c07      	ldr	r4, [sp, #28]
 80167b4:	46da      	mov	sl, fp
 80167b6:	2b00      	cmp	r3, #0
 80167b8:	d1d3      	bne.n	8016762 <rcl_expand_topic_name+0x20e>
 80167ba:	f898 3000 	ldrb.w	r3, [r8]
 80167be:	2b2f      	cmp	r3, #47	@ 0x2f
 80167c0:	d0cb      	beq.n	801675a <rcl_expand_topic_name+0x206>
 80167c2:	e7b2      	b.n	801672a <rcl_expand_topic_name+0x1d6>
 80167c4:	e9dd 1218 	ldrd	r1, r2, [sp, #96]	@ 0x60
 80167c8:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80167ca:	6015      	str	r5, [r2, #0]
 80167cc:	4658      	mov	r0, fp
 80167ce:	4798      	blx	r3
 80167d0:	240a      	movs	r4, #10
 80167d2:	e774      	b.n	80166be <rcl_expand_topic_name+0x16a>
 80167d4:	ab17      	add	r3, sp, #92	@ 0x5c
 80167d6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80167da:	e88d 0003 	stmia.w	sp, {r0, r1}
 80167de:	ab14      	add	r3, sp, #80	@ 0x50
 80167e0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80167e2:	4640      	mov	r0, r8
 80167e4:	f7fc fa12 	bl	8012c0c <rcutils_strdup>
 80167e8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80167ea:	2800      	cmp	r0, #0
 80167ec:	6018      	str	r0, [r3, #0]
 80167ee:	bf08      	it	eq
 80167f0:	240a      	moveq	r4, #10
 80167f2:	e764      	b.n	80166be <rcl_expand_topic_name+0x16a>
 80167f4:	080194b4 	.word	0x080194b4
 80167f8:	08018ab8 	.word	0x08018ab8
 80167fc:	080194bc 	.word	0x080194bc
 8016800:	080194c4 	.word	0x080194c4
 8016804:	080194cc 	.word	0x080194cc
 8016808:	08018cac 	.word	0x08018cac
 801680c:	08018ac8 	.word	0x08018ac8

08016810 <rcl_get_default_topic_name_substitutions>:
 8016810:	2800      	cmp	r0, #0
 8016812:	bf0c      	ite	eq
 8016814:	200b      	moveq	r0, #11
 8016816:	2000      	movne	r0, #0
 8016818:	4770      	bx	lr
 801681a:	bf00      	nop

0801681c <rcl_get_zero_initialized_guard_condition>:
 801681c:	4a03      	ldr	r2, [pc, #12]	@ (801682c <rcl_get_zero_initialized_guard_condition+0x10>)
 801681e:	4603      	mov	r3, r0
 8016820:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016824:	e883 0003 	stmia.w	r3, {r0, r1}
 8016828:	4618      	mov	r0, r3
 801682a:	4770      	bx	lr
 801682c:	080194d8 	.word	0x080194d8

08016830 <rcl_guard_condition_init>:
 8016830:	b082      	sub	sp, #8
 8016832:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016834:	b087      	sub	sp, #28
 8016836:	ac0c      	add	r4, sp, #48	@ 0x30
 8016838:	e884 000c 	stmia.w	r4, {r2, r3}
 801683c:	46a6      	mov	lr, r4
 801683e:	460d      	mov	r5, r1
 8016840:	4604      	mov	r4, r0
 8016842:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8016846:	f10d 0c04 	add.w	ip, sp, #4
 801684a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801684e:	f8de 3000 	ldr.w	r3, [lr]
 8016852:	f8cc 3000 	str.w	r3, [ip]
 8016856:	a801      	add	r0, sp, #4
 8016858:	f7f3 ffbe 	bl	800a7d8 <rcutils_allocator_is_valid>
 801685c:	b338      	cbz	r0, 80168ae <rcl_guard_condition_init+0x7e>
 801685e:	b334      	cbz	r4, 80168ae <rcl_guard_condition_init+0x7e>
 8016860:	6866      	ldr	r6, [r4, #4]
 8016862:	b9ee      	cbnz	r6, 80168a0 <rcl_guard_condition_init+0x70>
 8016864:	b31d      	cbz	r5, 80168ae <rcl_guard_condition_init+0x7e>
 8016866:	4628      	mov	r0, r5
 8016868:	f7f9 f8fe 	bl	800fa68 <rcl_context_is_valid>
 801686c:	b308      	cbz	r0, 80168b2 <rcl_guard_condition_init+0x82>
 801686e:	9b01      	ldr	r3, [sp, #4]
 8016870:	9905      	ldr	r1, [sp, #20]
 8016872:	201c      	movs	r0, #28
 8016874:	4798      	blx	r3
 8016876:	4607      	mov	r7, r0
 8016878:	6060      	str	r0, [r4, #4]
 801687a:	b310      	cbz	r0, 80168c2 <rcl_guard_condition_init+0x92>
 801687c:	6828      	ldr	r0, [r5, #0]
 801687e:	3028      	adds	r0, #40	@ 0x28
 8016880:	f000 fabc 	bl	8016dfc <rmw_create_guard_condition>
 8016884:	6038      	str	r0, [r7, #0]
 8016886:	6860      	ldr	r0, [r4, #4]
 8016888:	6805      	ldr	r5, [r0, #0]
 801688a:	b1a5      	cbz	r5, 80168b6 <rcl_guard_condition_init+0x86>
 801688c:	2301      	movs	r3, #1
 801688e:	ac01      	add	r4, sp, #4
 8016890:	7103      	strb	r3, [r0, #4]
 8016892:	f100 0708 	add.w	r7, r0, #8
 8016896:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016898:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 801689a:	6823      	ldr	r3, [r4, #0]
 801689c:	603b      	str	r3, [r7, #0]
 801689e:	e000      	b.n	80168a2 <rcl_guard_condition_init+0x72>
 80168a0:	2664      	movs	r6, #100	@ 0x64
 80168a2:	4630      	mov	r0, r6
 80168a4:	b007      	add	sp, #28
 80168a6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80168aa:	b002      	add	sp, #8
 80168ac:	4770      	bx	lr
 80168ae:	260b      	movs	r6, #11
 80168b0:	e7f7      	b.n	80168a2 <rcl_guard_condition_init+0x72>
 80168b2:	2665      	movs	r6, #101	@ 0x65
 80168b4:	e7f5      	b.n	80168a2 <rcl_guard_condition_init+0x72>
 80168b6:	9b02      	ldr	r3, [sp, #8]
 80168b8:	9905      	ldr	r1, [sp, #20]
 80168ba:	4798      	blx	r3
 80168bc:	2601      	movs	r6, #1
 80168be:	6065      	str	r5, [r4, #4]
 80168c0:	e7ef      	b.n	80168a2 <rcl_guard_condition_init+0x72>
 80168c2:	260a      	movs	r6, #10
 80168c4:	e7ed      	b.n	80168a2 <rcl_guard_condition_init+0x72>
 80168c6:	bf00      	nop

080168c8 <rcl_guard_condition_init_from_rmw>:
 80168c8:	b082      	sub	sp, #8
 80168ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80168ce:	b086      	sub	sp, #24
 80168d0:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 80168d4:	4604      	mov	r4, r0
 80168d6:	f84c 3f04 	str.w	r3, [ip, #4]!
 80168da:	460e      	mov	r6, r1
 80168dc:	4617      	mov	r7, r2
 80168de:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80168e2:	f10d 0e04 	add.w	lr, sp, #4
 80168e6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80168ea:	f8dc 3000 	ldr.w	r3, [ip]
 80168ee:	f8ce 3000 	str.w	r3, [lr]
 80168f2:	a801      	add	r0, sp, #4
 80168f4:	f7f3 ff70 	bl	800a7d8 <rcutils_allocator_is_valid>
 80168f8:	b350      	cbz	r0, 8016950 <rcl_guard_condition_init_from_rmw+0x88>
 80168fa:	b34c      	cbz	r4, 8016950 <rcl_guard_condition_init_from_rmw+0x88>
 80168fc:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8016900:	f1b8 0f00 	cmp.w	r8, #0
 8016904:	d11e      	bne.n	8016944 <rcl_guard_condition_init_from_rmw+0x7c>
 8016906:	b31f      	cbz	r7, 8016950 <rcl_guard_condition_init_from_rmw+0x88>
 8016908:	4638      	mov	r0, r7
 801690a:	f7f9 f8ad 	bl	800fa68 <rcl_context_is_valid>
 801690e:	b328      	cbz	r0, 801695c <rcl_guard_condition_init_from_rmw+0x94>
 8016910:	9b01      	ldr	r3, [sp, #4]
 8016912:	9905      	ldr	r1, [sp, #20]
 8016914:	201c      	movs	r0, #28
 8016916:	4798      	blx	r3
 8016918:	4605      	mov	r5, r0
 801691a:	6060      	str	r0, [r4, #4]
 801691c:	b358      	cbz	r0, 8016976 <rcl_guard_condition_init_from_rmw+0xae>
 801691e:	b1fe      	cbz	r6, 8016960 <rcl_guard_condition_init_from_rmw+0x98>
 8016920:	6006      	str	r6, [r0, #0]
 8016922:	f880 8004 	strb.w	r8, [r0, #4]
 8016926:	ac01      	add	r4, sp, #4
 8016928:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801692a:	f105 0c08 	add.w	ip, r5, #8
 801692e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016932:	6823      	ldr	r3, [r4, #0]
 8016934:	f8cc 3000 	str.w	r3, [ip]
 8016938:	2000      	movs	r0, #0
 801693a:	b006      	add	sp, #24
 801693c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016940:	b002      	add	sp, #8
 8016942:	4770      	bx	lr
 8016944:	2064      	movs	r0, #100	@ 0x64
 8016946:	b006      	add	sp, #24
 8016948:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801694c:	b002      	add	sp, #8
 801694e:	4770      	bx	lr
 8016950:	200b      	movs	r0, #11
 8016952:	b006      	add	sp, #24
 8016954:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016958:	b002      	add	sp, #8
 801695a:	4770      	bx	lr
 801695c:	2065      	movs	r0, #101	@ 0x65
 801695e:	e7f2      	b.n	8016946 <rcl_guard_condition_init_from_rmw+0x7e>
 8016960:	6838      	ldr	r0, [r7, #0]
 8016962:	3028      	adds	r0, #40	@ 0x28
 8016964:	f000 fa4a 	bl	8016dfc <rmw_create_guard_condition>
 8016968:	6028      	str	r0, [r5, #0]
 801696a:	6865      	ldr	r5, [r4, #4]
 801696c:	682e      	ldr	r6, [r5, #0]
 801696e:	b126      	cbz	r6, 801697a <rcl_guard_condition_init_from_rmw+0xb2>
 8016970:	2301      	movs	r3, #1
 8016972:	712b      	strb	r3, [r5, #4]
 8016974:	e7d7      	b.n	8016926 <rcl_guard_condition_init_from_rmw+0x5e>
 8016976:	200a      	movs	r0, #10
 8016978:	e7e5      	b.n	8016946 <rcl_guard_condition_init_from_rmw+0x7e>
 801697a:	4628      	mov	r0, r5
 801697c:	9b02      	ldr	r3, [sp, #8]
 801697e:	9905      	ldr	r1, [sp, #20]
 8016980:	4798      	blx	r3
 8016982:	6066      	str	r6, [r4, #4]
 8016984:	2001      	movs	r0, #1
 8016986:	e7de      	b.n	8016946 <rcl_guard_condition_init_from_rmw+0x7e>

08016988 <rcl_guard_condition_fini>:
 8016988:	b570      	push	{r4, r5, r6, lr}
 801698a:	b082      	sub	sp, #8
 801698c:	b1f0      	cbz	r0, 80169cc <rcl_guard_condition_fini+0x44>
 801698e:	6843      	ldr	r3, [r0, #4]
 8016990:	4604      	mov	r4, r0
 8016992:	b163      	cbz	r3, 80169ae <rcl_guard_condition_fini+0x26>
 8016994:	6818      	ldr	r0, [r3, #0]
 8016996:	68de      	ldr	r6, [r3, #12]
 8016998:	6999      	ldr	r1, [r3, #24]
 801699a:	b160      	cbz	r0, 80169b6 <rcl_guard_condition_fini+0x2e>
 801699c:	791d      	ldrb	r5, [r3, #4]
 801699e:	b965      	cbnz	r5, 80169ba <rcl_guard_condition_fini+0x32>
 80169a0:	4618      	mov	r0, r3
 80169a2:	47b0      	blx	r6
 80169a4:	2300      	movs	r3, #0
 80169a6:	4628      	mov	r0, r5
 80169a8:	6063      	str	r3, [r4, #4]
 80169aa:	b002      	add	sp, #8
 80169ac:	bd70      	pop	{r4, r5, r6, pc}
 80169ae:	461d      	mov	r5, r3
 80169b0:	4628      	mov	r0, r5
 80169b2:	b002      	add	sp, #8
 80169b4:	bd70      	pop	{r4, r5, r6, pc}
 80169b6:	4605      	mov	r5, r0
 80169b8:	e7f2      	b.n	80169a0 <rcl_guard_condition_fini+0x18>
 80169ba:	9101      	str	r1, [sp, #4]
 80169bc:	f000 fa32 	bl	8016e24 <rmw_destroy_guard_condition>
 80169c0:	1e05      	subs	r5, r0, #0
 80169c2:	6863      	ldr	r3, [r4, #4]
 80169c4:	9901      	ldr	r1, [sp, #4]
 80169c6:	bf18      	it	ne
 80169c8:	2501      	movne	r5, #1
 80169ca:	e7e9      	b.n	80169a0 <rcl_guard_condition_fini+0x18>
 80169cc:	250b      	movs	r5, #11
 80169ce:	4628      	mov	r0, r5
 80169d0:	b002      	add	sp, #8
 80169d2:	bd70      	pop	{r4, r5, r6, pc}

080169d4 <rcl_guard_condition_get_default_options>:
 80169d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80169d6:	b087      	sub	sp, #28
 80169d8:	4606      	mov	r6, r0
 80169da:	4668      	mov	r0, sp
 80169dc:	f7f3 feee 	bl	800a7bc <rcutils_get_default_allocator>
 80169e0:	4b09      	ldr	r3, [pc, #36]	@ (8016a08 <rcl_guard_condition_get_default_options+0x34>)
 80169e2:	46ee      	mov	lr, sp
 80169e4:	469c      	mov	ip, r3
 80169e6:	461d      	mov	r5, r3
 80169e8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80169ec:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80169f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80169f2:	4634      	mov	r4, r6
 80169f4:	f8de 7000 	ldr.w	r7, [lr]
 80169f8:	f8cc 7000 	str.w	r7, [ip]
 80169fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80169fe:	4630      	mov	r0, r6
 8016a00:	6027      	str	r7, [r4, #0]
 8016a02:	b007      	add	sp, #28
 8016a04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016a06:	bf00      	nop
 8016a08:	2000c0cc 	.word	0x2000c0cc

08016a0c <rcl_trigger_guard_condition>:
 8016a0c:	b148      	cbz	r0, 8016a22 <rcl_trigger_guard_condition+0x16>
 8016a0e:	b508      	push	{r3, lr}
 8016a10:	6843      	ldr	r3, [r0, #4]
 8016a12:	b143      	cbz	r3, 8016a26 <rcl_trigger_guard_condition+0x1a>
 8016a14:	6818      	ldr	r0, [r3, #0]
 8016a16:	f000 fa19 	bl	8016e4c <rmw_trigger_guard_condition>
 8016a1a:	3800      	subs	r0, #0
 8016a1c:	bf18      	it	ne
 8016a1e:	2001      	movne	r0, #1
 8016a20:	bd08      	pop	{r3, pc}
 8016a22:	200b      	movs	r0, #11
 8016a24:	4770      	bx	lr
 8016a26:	200b      	movs	r0, #11
 8016a28:	bd08      	pop	{r3, pc}
 8016a2a:	bf00      	nop

08016a2c <rcl_guard_condition_get_rmw_handle>:
 8016a2c:	b110      	cbz	r0, 8016a34 <rcl_guard_condition_get_rmw_handle+0x8>
 8016a2e:	6840      	ldr	r0, [r0, #4]
 8016a30:	b100      	cbz	r0, 8016a34 <rcl_guard_condition_get_rmw_handle+0x8>
 8016a32:	6800      	ldr	r0, [r0, #0]
 8016a34:	4770      	bx	lr
 8016a36:	bf00      	nop

08016a38 <rcl_validate_topic_name>:
 8016a38:	2800      	cmp	r0, #0
 8016a3a:	d07a      	beq.n	8016b32 <rcl_validate_topic_name+0xfa>
 8016a3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016a40:	460e      	mov	r6, r1
 8016a42:	2900      	cmp	r1, #0
 8016a44:	d07c      	beq.n	8016b40 <rcl_validate_topic_name+0x108>
 8016a46:	4617      	mov	r7, r2
 8016a48:	4605      	mov	r5, r0
 8016a4a:	f7e9 fbcb 	bl	80001e4 <strlen>
 8016a4e:	b1b0      	cbz	r0, 8016a7e <rcl_validate_topic_name+0x46>
 8016a50:	f895 9000 	ldrb.w	r9, [r5]
 8016a54:	f8df c180 	ldr.w	ip, [pc, #384]	@ 8016bd8 <rcl_validate_topic_name+0x1a0>
 8016a58:	f81c 3009 	ldrb.w	r3, [ip, r9]
 8016a5c:	f013 0304 	ands.w	r3, r3, #4
 8016a60:	d169      	bne.n	8016b36 <rcl_validate_topic_name+0xfe>
 8016a62:	f100 38ff 	add.w	r8, r0, #4294967295	@ 0xffffffff
 8016a66:	f815 2008 	ldrb.w	r2, [r5, r8]
 8016a6a:	2a2f      	cmp	r2, #47	@ 0x2f
 8016a6c:	d10e      	bne.n	8016a8c <rcl_validate_topic_name+0x54>
 8016a6e:	2202      	movs	r2, #2
 8016a70:	6032      	str	r2, [r6, #0]
 8016a72:	b36f      	cbz	r7, 8016ad0 <rcl_validate_topic_name+0x98>
 8016a74:	f8c7 8000 	str.w	r8, [r7]
 8016a78:	4618      	mov	r0, r3
 8016a7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016a7e:	2301      	movs	r3, #1
 8016a80:	6033      	str	r3, [r6, #0]
 8016a82:	b32f      	cbz	r7, 8016ad0 <rcl_validate_topic_name+0x98>
 8016a84:	2000      	movs	r0, #0
 8016a86:	6038      	str	r0, [r7, #0]
 8016a88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016a8c:	f105 3aff 	add.w	sl, r5, #4294967295	@ 0xffffffff
 8016a90:	461c      	mov	r4, r3
 8016a92:	4619      	mov	r1, r3
 8016a94:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 8016a98:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8016a9c:	f1be 0f09 	cmp.w	lr, #9
 8016aa0:	d919      	bls.n	8016ad6 <rcl_validate_topic_name+0x9e>
 8016aa2:	f022 0e20 	bic.w	lr, r2, #32
 8016aa6:	f1ae 0e41 	sub.w	lr, lr, #65	@ 0x41
 8016aaa:	f1be 0f19 	cmp.w	lr, #25
 8016aae:	d912      	bls.n	8016ad6 <rcl_validate_topic_name+0x9e>
 8016ab0:	2a5f      	cmp	r2, #95	@ 0x5f
 8016ab2:	d019      	beq.n	8016ae8 <rcl_validate_topic_name+0xb0>
 8016ab4:	2a2f      	cmp	r2, #47	@ 0x2f
 8016ab6:	d051      	beq.n	8016b5c <rcl_validate_topic_name+0x124>
 8016ab8:	2a7e      	cmp	r2, #126	@ 0x7e
 8016aba:	d048      	beq.n	8016b4e <rcl_validate_topic_name+0x116>
 8016abc:	2a7b      	cmp	r2, #123	@ 0x7b
 8016abe:	d054      	beq.n	8016b6a <rcl_validate_topic_name+0x132>
 8016ac0:	2a7d      	cmp	r2, #125	@ 0x7d
 8016ac2:	d161      	bne.n	8016b88 <rcl_validate_topic_name+0x150>
 8016ac4:	2c00      	cmp	r4, #0
 8016ac6:	d155      	bne.n	8016b74 <rcl_validate_topic_name+0x13c>
 8016ac8:	2305      	movs	r3, #5
 8016aca:	6033      	str	r3, [r6, #0]
 8016acc:	b107      	cbz	r7, 8016ad0 <rcl_validate_topic_name+0x98>
 8016ace:	6039      	str	r1, [r7, #0]
 8016ad0:	2000      	movs	r0, #0
 8016ad2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016ad6:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8016ada:	0752      	lsls	r2, r2, #29
 8016adc:	d504      	bpl.n	8016ae8 <rcl_validate_topic_name+0xb0>
 8016ade:	b11c      	cbz	r4, 8016ae8 <rcl_validate_topic_name+0xb0>
 8016ae0:	b111      	cbz	r1, 8016ae8 <rcl_validate_topic_name+0xb0>
 8016ae2:	1e4a      	subs	r2, r1, #1
 8016ae4:	429a      	cmp	r2, r3
 8016ae6:	d02d      	beq.n	8016b44 <rcl_validate_topic_name+0x10c>
 8016ae8:	3101      	adds	r1, #1
 8016aea:	4288      	cmp	r0, r1
 8016aec:	d1d2      	bne.n	8016a94 <rcl_validate_topic_name+0x5c>
 8016aee:	2c00      	cmp	r4, #0
 8016af0:	d145      	bne.n	8016b7e <rcl_validate_topic_name+0x146>
 8016af2:	f1b9 0f7e 	cmp.w	r9, #126	@ 0x7e
 8016af6:	d04f      	beq.n	8016b98 <rcl_validate_topic_name+0x160>
 8016af8:	4620      	mov	r0, r4
 8016afa:	2301      	movs	r3, #1
 8016afc:	e006      	b.n	8016b0c <rcl_validate_topic_name+0xd4>
 8016afe:	428b      	cmp	r3, r1
 8016b00:	f105 0501 	add.w	r5, r5, #1
 8016b04:	f103 0201 	add.w	r2, r3, #1
 8016b08:	d236      	bcs.n	8016b78 <rcl_validate_topic_name+0x140>
 8016b0a:	4613      	mov	r3, r2
 8016b0c:	4580      	cmp	r8, r0
 8016b0e:	f100 0001 	add.w	r0, r0, #1
 8016b12:	d0f4      	beq.n	8016afe <rcl_validate_topic_name+0xc6>
 8016b14:	782a      	ldrb	r2, [r5, #0]
 8016b16:	2a2f      	cmp	r2, #47	@ 0x2f
 8016b18:	d1f1      	bne.n	8016afe <rcl_validate_topic_name+0xc6>
 8016b1a:	786a      	ldrb	r2, [r5, #1]
 8016b1c:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8016b20:	0754      	lsls	r4, r2, #29
 8016b22:	d5ec      	bpl.n	8016afe <rcl_validate_topic_name+0xc6>
 8016b24:	2204      	movs	r2, #4
 8016b26:	6032      	str	r2, [r6, #0]
 8016b28:	2f00      	cmp	r7, #0
 8016b2a:	d0d1      	beq.n	8016ad0 <rcl_validate_topic_name+0x98>
 8016b2c:	603b      	str	r3, [r7, #0]
 8016b2e:	2000      	movs	r0, #0
 8016b30:	e7aa      	b.n	8016a88 <rcl_validate_topic_name+0x50>
 8016b32:	200b      	movs	r0, #11
 8016b34:	4770      	bx	lr
 8016b36:	2304      	movs	r3, #4
 8016b38:	6033      	str	r3, [r6, #0]
 8016b3a:	2f00      	cmp	r7, #0
 8016b3c:	d1a2      	bne.n	8016a84 <rcl_validate_topic_name+0x4c>
 8016b3e:	e7c7      	b.n	8016ad0 <rcl_validate_topic_name+0x98>
 8016b40:	200b      	movs	r0, #11
 8016b42:	e7a1      	b.n	8016a88 <rcl_validate_topic_name+0x50>
 8016b44:	2309      	movs	r3, #9
 8016b46:	6033      	str	r3, [r6, #0]
 8016b48:	2f00      	cmp	r7, #0
 8016b4a:	d1c0      	bne.n	8016ace <rcl_validate_topic_name+0x96>
 8016b4c:	e7c0      	b.n	8016ad0 <rcl_validate_topic_name+0x98>
 8016b4e:	2900      	cmp	r1, #0
 8016b50:	d0ca      	beq.n	8016ae8 <rcl_validate_topic_name+0xb0>
 8016b52:	2306      	movs	r3, #6
 8016b54:	6033      	str	r3, [r6, #0]
 8016b56:	2f00      	cmp	r7, #0
 8016b58:	d1b9      	bne.n	8016ace <rcl_validate_topic_name+0x96>
 8016b5a:	e7b9      	b.n	8016ad0 <rcl_validate_topic_name+0x98>
 8016b5c:	2c00      	cmp	r4, #0
 8016b5e:	d0c3      	beq.n	8016ae8 <rcl_validate_topic_name+0xb0>
 8016b60:	2308      	movs	r3, #8
 8016b62:	6033      	str	r3, [r6, #0]
 8016b64:	2f00      	cmp	r7, #0
 8016b66:	d1b2      	bne.n	8016ace <rcl_validate_topic_name+0x96>
 8016b68:	e7b2      	b.n	8016ad0 <rcl_validate_topic_name+0x98>
 8016b6a:	2c00      	cmp	r4, #0
 8016b6c:	d1f8      	bne.n	8016b60 <rcl_validate_topic_name+0x128>
 8016b6e:	460b      	mov	r3, r1
 8016b70:	2401      	movs	r4, #1
 8016b72:	e7b9      	b.n	8016ae8 <rcl_validate_topic_name+0xb0>
 8016b74:	2400      	movs	r4, #0
 8016b76:	e7b7      	b.n	8016ae8 <rcl_validate_topic_name+0xb0>
 8016b78:	2000      	movs	r0, #0
 8016b7a:	6030      	str	r0, [r6, #0]
 8016b7c:	e784      	b.n	8016a88 <rcl_validate_topic_name+0x50>
 8016b7e:	2205      	movs	r2, #5
 8016b80:	6032      	str	r2, [r6, #0]
 8016b82:	2f00      	cmp	r7, #0
 8016b84:	d1d2      	bne.n	8016b2c <rcl_validate_topic_name+0xf4>
 8016b86:	e7a3      	b.n	8016ad0 <rcl_validate_topic_name+0x98>
 8016b88:	2c00      	cmp	r4, #0
 8016b8a:	bf14      	ite	ne
 8016b8c:	2308      	movne	r3, #8
 8016b8e:	2303      	moveq	r3, #3
 8016b90:	6033      	str	r3, [r6, #0]
 8016b92:	2f00      	cmp	r7, #0
 8016b94:	d19b      	bne.n	8016ace <rcl_validate_topic_name+0x96>
 8016b96:	e79b      	b.n	8016ad0 <rcl_validate_topic_name+0x98>
 8016b98:	2301      	movs	r3, #1
 8016b9a:	e00a      	b.n	8016bb2 <rcl_validate_topic_name+0x17a>
 8016b9c:	2c01      	cmp	r4, #1
 8016b9e:	d013      	beq.n	8016bc8 <rcl_validate_topic_name+0x190>
 8016ba0:	4299      	cmp	r1, r3
 8016ba2:	f104 0401 	add.w	r4, r4, #1
 8016ba6:	f105 0501 	add.w	r5, r5, #1
 8016baa:	f103 0201 	add.w	r2, r3, #1
 8016bae:	d9e3      	bls.n	8016b78 <rcl_validate_topic_name+0x140>
 8016bb0:	4613      	mov	r3, r2
 8016bb2:	45a0      	cmp	r8, r4
 8016bb4:	d0f4      	beq.n	8016ba0 <rcl_validate_topic_name+0x168>
 8016bb6:	782a      	ldrb	r2, [r5, #0]
 8016bb8:	2a2f      	cmp	r2, #47	@ 0x2f
 8016bba:	d1ef      	bne.n	8016b9c <rcl_validate_topic_name+0x164>
 8016bbc:	786a      	ldrb	r2, [r5, #1]
 8016bbe:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8016bc2:	0752      	lsls	r2, r2, #29
 8016bc4:	d5ec      	bpl.n	8016ba0 <rcl_validate_topic_name+0x168>
 8016bc6:	e7ad      	b.n	8016b24 <rcl_validate_topic_name+0xec>
 8016bc8:	2307      	movs	r3, #7
 8016bca:	6033      	str	r3, [r6, #0]
 8016bcc:	2f00      	cmp	r7, #0
 8016bce:	f43f af7f 	beq.w	8016ad0 <rcl_validate_topic_name+0x98>
 8016bd2:	603c      	str	r4, [r7, #0]
 8016bd4:	2000      	movs	r0, #0
 8016bd6:	e757      	b.n	8016a88 <rcl_validate_topic_name+0x50>
 8016bd8:	08019642 	.word	0x08019642

08016bdc <rcutils_string_array_fini>:
 8016bdc:	b320      	cbz	r0, 8016c28 <rcutils_string_array_fini+0x4c>
 8016bde:	b570      	push	{r4, r5, r6, lr}
 8016be0:	4604      	mov	r4, r0
 8016be2:	6840      	ldr	r0, [r0, #4]
 8016be4:	b1d8      	cbz	r0, 8016c1e <rcutils_string_array_fini+0x42>
 8016be6:	f104 0008 	add.w	r0, r4, #8
 8016bea:	f7f3 fdf5 	bl	800a7d8 <rcutils_allocator_is_valid>
 8016bee:	b1b8      	cbz	r0, 8016c20 <rcutils_string_array_fini+0x44>
 8016bf0:	6823      	ldr	r3, [r4, #0]
 8016bf2:	b1bb      	cbz	r3, 8016c24 <rcutils_string_array_fini+0x48>
 8016bf4:	2500      	movs	r5, #0
 8016bf6:	6860      	ldr	r0, [r4, #4]
 8016bf8:	462e      	mov	r6, r5
 8016bfa:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 8016bfe:	68e3      	ldr	r3, [r4, #12]
 8016c00:	69a1      	ldr	r1, [r4, #24]
 8016c02:	4798      	blx	r3
 8016c04:	e9d4 3000 	ldrd	r3, r0, [r4]
 8016c08:	f840 6025 	str.w	r6, [r0, r5, lsl #2]
 8016c0c:	3501      	adds	r5, #1
 8016c0e:	429d      	cmp	r5, r3
 8016c10:	d3f3      	bcc.n	8016bfa <rcutils_string_array_fini+0x1e>
 8016c12:	68e3      	ldr	r3, [r4, #12]
 8016c14:	69a1      	ldr	r1, [r4, #24]
 8016c16:	4798      	blx	r3
 8016c18:	2000      	movs	r0, #0
 8016c1a:	e9c4 0000 	strd	r0, r0, [r4]
 8016c1e:	bd70      	pop	{r4, r5, r6, pc}
 8016c20:	200b      	movs	r0, #11
 8016c22:	bd70      	pop	{r4, r5, r6, pc}
 8016c24:	6860      	ldr	r0, [r4, #4]
 8016c26:	e7f4      	b.n	8016c12 <rcutils_string_array_fini+0x36>
 8016c28:	200b      	movs	r0, #11
 8016c2a:	4770      	bx	lr

08016c2c <on_status>:
 8016c2c:	b082      	sub	sp, #8
 8016c2e:	b002      	add	sp, #8
 8016c30:	4770      	bx	lr
 8016c32:	bf00      	nop

08016c34 <on_topic>:
 8016c34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016c38:	4a22      	ldr	r2, [pc, #136]	@ (8016cc4 <on_topic+0x90>)
 8016c3a:	b094      	sub	sp, #80	@ 0x50
 8016c3c:	6812      	ldr	r2, [r2, #0]
 8016c3e:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
 8016c40:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 8016c44:	e9cd 3112 	strd	r3, r1, [sp, #72]	@ 0x48
 8016c48:	b3c2      	cbz	r2, 8016cbc <on_topic+0x88>
 8016c4a:	f8bd 104c 	ldrh.w	r1, [sp, #76]	@ 0x4c
 8016c4e:	f89d 004e 	ldrb.w	r0, [sp, #78]	@ 0x4e
 8016c52:	e001      	b.n	8016c58 <on_topic+0x24>
 8016c54:	6852      	ldr	r2, [r2, #4]
 8016c56:	b38a      	cbz	r2, 8016cbc <on_topic+0x88>
 8016c58:	6894      	ldr	r4, [r2, #8]
 8016c5a:	8aa3      	ldrh	r3, [r4, #20]
 8016c5c:	428b      	cmp	r3, r1
 8016c5e:	d1f9      	bne.n	8016c54 <on_topic+0x20>
 8016c60:	7da3      	ldrb	r3, [r4, #22]
 8016c62:	4283      	cmp	r3, r0
 8016c64:	d1f6      	bne.n	8016c54 <on_topic+0x20>
 8016c66:	2248      	movs	r2, #72	@ 0x48
 8016c68:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8016c6c:	4668      	mov	r0, sp
 8016c6e:	f000 ff64 	bl	8017b3a <memcpy>
 8016c72:	f104 0328 	add.w	r3, r4, #40	@ 0x28
 8016c76:	cb0c      	ldmia	r3, {r2, r3}
 8016c78:	4620      	mov	r0, r4
 8016c7a:	f7f4 f9dd 	bl	800b038 <rmw_uxrce_get_static_input_buffer_for_entity>
 8016c7e:	4607      	mov	r7, r0
 8016c80:	b1e0      	cbz	r0, 8016cbc <on_topic+0x88>
 8016c82:	f8d0 8008 	ldr.w	r8, [r0, #8]
 8016c86:	4632      	mov	r2, r6
 8016c88:	4628      	mov	r0, r5
 8016c8a:	f108 0110 	add.w	r1, r8, #16
 8016c8e:	f7fd ff1b 	bl	8014ac8 <ucdr_deserialize_array_uint8_t>
 8016c92:	b930      	cbnz	r0, 8016ca2 <on_topic+0x6e>
 8016c94:	480c      	ldr	r0, [pc, #48]	@ (8016cc8 <on_topic+0x94>)
 8016c96:	4639      	mov	r1, r7
 8016c98:	b014      	add	sp, #80	@ 0x50
 8016c9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016c9e:	f7fc bb3f 	b.w	8013320 <put_memory>
 8016ca2:	f8c8 4814 	str.w	r4, [r8, #2068]	@ 0x814
 8016ca6:	f8c8 6810 	str.w	r6, [r8, #2064]	@ 0x810
 8016caa:	f7fd fc67 	bl	801457c <rmw_uros_epoch_nanos>
 8016cae:	f508 6202 	add.w	r2, r8, #2080	@ 0x820
 8016cb2:	2305      	movs	r3, #5
 8016cb4:	e942 0102 	strd	r0, r1, [r2, #-8]
 8016cb8:	f888 3820 	strb.w	r3, [r8, #2080]	@ 0x820
 8016cbc:	b014      	add	sp, #80	@ 0x50
 8016cbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016cc2:	bf00      	nop
 8016cc4:	2000bf2c 	.word	0x2000bf2c
 8016cc8:	2000bf1c 	.word	0x2000bf1c

08016ccc <on_request>:
 8016ccc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016cd0:	4823      	ldr	r0, [pc, #140]	@ (8016d60 <on_request+0x94>)
 8016cd2:	b094      	sub	sp, #80	@ 0x50
 8016cd4:	6800      	ldr	r0, [r0, #0]
 8016cd6:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 8016cd8:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 8016cdc:	9113      	str	r1, [sp, #76]	@ 0x4c
 8016cde:	2800      	cmp	r0, #0
 8016ce0:	d03b      	beq.n	8016d5a <on_request+0x8e>
 8016ce2:	461d      	mov	r5, r3
 8016ce4:	e001      	b.n	8016cea <on_request+0x1e>
 8016ce6:	6840      	ldr	r0, [r0, #4]
 8016ce8:	b3b8      	cbz	r0, 8016d5a <on_request+0x8e>
 8016cea:	6884      	ldr	r4, [r0, #8]
 8016cec:	8b21      	ldrh	r1, [r4, #24]
 8016cee:	4291      	cmp	r1, r2
 8016cf0:	d1f9      	bne.n	8016ce6 <on_request+0x1a>
 8016cf2:	2248      	movs	r2, #72	@ 0x48
 8016cf4:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 8016cf8:	4668      	mov	r0, sp
 8016cfa:	f000 ff1e 	bl	8017b3a <memcpy>
 8016cfe:	f104 0320 	add.w	r3, r4, #32
 8016d02:	cb0c      	ldmia	r3, {r2, r3}
 8016d04:	4620      	mov	r0, r4
 8016d06:	f7f4 f997 	bl	800b038 <rmw_uxrce_get_static_input_buffer_for_entity>
 8016d0a:	4680      	mov	r8, r0
 8016d0c:	b328      	cbz	r0, 8016d5a <on_request+0x8e>
 8016d0e:	4638      	mov	r0, r7
 8016d10:	f8d8 7008 	ldr.w	r7, [r8, #8]
 8016d14:	4632      	mov	r2, r6
 8016d16:	f107 0110 	add.w	r1, r7, #16
 8016d1a:	f7fd fed5 	bl	8014ac8 <ucdr_deserialize_array_uint8_t>
 8016d1e:	b930      	cbnz	r0, 8016d2e <on_request+0x62>
 8016d20:	4810      	ldr	r0, [pc, #64]	@ (8016d64 <on_request+0x98>)
 8016d22:	4641      	mov	r1, r8
 8016d24:	b014      	add	sp, #80	@ 0x50
 8016d26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016d2a:	f7fc baf9 	b.w	8013320 <put_memory>
 8016d2e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016d30:	f607 0c28 	addw	ip, r7, #2088	@ 0x828
 8016d34:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 8016d38:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 8016d3c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016d40:	e895 0003 	ldmia.w	r5, {r0, r1}
 8016d44:	e88c 0003 	stmia.w	ip, {r0, r1}
 8016d48:	f7fd fc18 	bl	801457c <rmw_uros_epoch_nanos>
 8016d4c:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 8016d50:	2303      	movs	r3, #3
 8016d52:	e942 0102 	strd	r0, r1, [r2, #-8]
 8016d56:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 8016d5a:	b014      	add	sp, #80	@ 0x50
 8016d5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016d60:	2000befc 	.word	0x2000befc
 8016d64:	2000bf1c 	.word	0x2000bf1c

08016d68 <on_reply>:
 8016d68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016d6c:	4821      	ldr	r0, [pc, #132]	@ (8016df4 <on_reply+0x8c>)
 8016d6e:	b094      	sub	sp, #80	@ 0x50
 8016d70:	6800      	ldr	r0, [r0, #0]
 8016d72:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 8016d74:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 8016d78:	9113      	str	r1, [sp, #76]	@ 0x4c
 8016d7a:	b3b8      	cbz	r0, 8016dec <on_reply+0x84>
 8016d7c:	461d      	mov	r5, r3
 8016d7e:	e001      	b.n	8016d84 <on_reply+0x1c>
 8016d80:	6840      	ldr	r0, [r0, #4]
 8016d82:	b398      	cbz	r0, 8016dec <on_reply+0x84>
 8016d84:	6884      	ldr	r4, [r0, #8]
 8016d86:	8b21      	ldrh	r1, [r4, #24]
 8016d88:	4291      	cmp	r1, r2
 8016d8a:	d1f9      	bne.n	8016d80 <on_reply+0x18>
 8016d8c:	2248      	movs	r2, #72	@ 0x48
 8016d8e:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 8016d92:	4668      	mov	r0, sp
 8016d94:	f000 fed1 	bl	8017b3a <memcpy>
 8016d98:	f104 0320 	add.w	r3, r4, #32
 8016d9c:	cb0c      	ldmia	r3, {r2, r3}
 8016d9e:	4620      	mov	r0, r4
 8016da0:	f7f4 f94a 	bl	800b038 <rmw_uxrce_get_static_input_buffer_for_entity>
 8016da4:	4680      	mov	r8, r0
 8016da6:	b308      	cbz	r0, 8016dec <on_reply+0x84>
 8016da8:	4638      	mov	r0, r7
 8016daa:	f8d8 7008 	ldr.w	r7, [r8, #8]
 8016dae:	4632      	mov	r2, r6
 8016db0:	f107 0110 	add.w	r1, r7, #16
 8016db4:	f7fd fe88 	bl	8014ac8 <ucdr_deserialize_array_uint8_t>
 8016db8:	b930      	cbnz	r0, 8016dc8 <on_reply+0x60>
 8016dba:	480f      	ldr	r0, [pc, #60]	@ (8016df8 <on_reply+0x90>)
 8016dbc:	4641      	mov	r1, r8
 8016dbe:	b014      	add	sp, #80	@ 0x50
 8016dc0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016dc4:	f7fc baac 	b.w	8013320 <put_memory>
 8016dc8:	2200      	movs	r2, #0
 8016dca:	f8c7 282c 	str.w	r2, [r7, #2092]	@ 0x82c
 8016dce:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 8016dd2:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 8016dd6:	f8c7 5828 	str.w	r5, [r7, #2088]	@ 0x828
 8016dda:	f7fd fbcf 	bl	801457c <rmw_uros_epoch_nanos>
 8016dde:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 8016de2:	2304      	movs	r3, #4
 8016de4:	e942 0102 	strd	r0, r1, [r2, #-8]
 8016de8:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 8016dec:	b014      	add	sp, #80	@ 0x50
 8016dee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016df2:	bf00      	nop
 8016df4:	20007610 	.word	0x20007610
 8016df8:	2000bf1c 	.word	0x2000bf1c

08016dfc <rmw_create_guard_condition>:
 8016dfc:	b538      	push	{r3, r4, r5, lr}
 8016dfe:	4605      	mov	r5, r0
 8016e00:	4807      	ldr	r0, [pc, #28]	@ (8016e20 <rmw_create_guard_condition+0x24>)
 8016e02:	f7fc fa7d 	bl	8013300 <get_memory>
 8016e06:	b148      	cbz	r0, 8016e1c <rmw_create_guard_condition+0x20>
 8016e08:	6884      	ldr	r4, [r0, #8]
 8016e0a:	2300      	movs	r3, #0
 8016e0c:	7423      	strb	r3, [r4, #16]
 8016e0e:	61e5      	str	r5, [r4, #28]
 8016e10:	f7fc fade 	bl	80133d0 <rmw_get_implementation_identifier>
 8016e14:	e9c4 0405 	strd	r0, r4, [r4, #20]
 8016e18:	f104 0014 	add.w	r0, r4, #20
 8016e1c:	bd38      	pop	{r3, r4, r5, pc}
 8016e1e:	bf00      	nop
 8016e20:	2000bebc 	.word	0x2000bebc

08016e24 <rmw_destroy_guard_condition>:
 8016e24:	b508      	push	{r3, lr}
 8016e26:	4b08      	ldr	r3, [pc, #32]	@ (8016e48 <rmw_destroy_guard_condition+0x24>)
 8016e28:	6819      	ldr	r1, [r3, #0]
 8016e2a:	b911      	cbnz	r1, 8016e32 <rmw_destroy_guard_condition+0xe>
 8016e2c:	e00a      	b.n	8016e44 <rmw_destroy_guard_condition+0x20>
 8016e2e:	6849      	ldr	r1, [r1, #4]
 8016e30:	b141      	cbz	r1, 8016e44 <rmw_destroy_guard_condition+0x20>
 8016e32:	688b      	ldr	r3, [r1, #8]
 8016e34:	3314      	adds	r3, #20
 8016e36:	4298      	cmp	r0, r3
 8016e38:	d1f9      	bne.n	8016e2e <rmw_destroy_guard_condition+0xa>
 8016e3a:	4803      	ldr	r0, [pc, #12]	@ (8016e48 <rmw_destroy_guard_condition+0x24>)
 8016e3c:	f7fc fa70 	bl	8013320 <put_memory>
 8016e40:	2000      	movs	r0, #0
 8016e42:	bd08      	pop	{r3, pc}
 8016e44:	2001      	movs	r0, #1
 8016e46:	bd08      	pop	{r3, pc}
 8016e48:	2000bebc 	.word	0x2000bebc

08016e4c <rmw_trigger_guard_condition>:
 8016e4c:	b160      	cbz	r0, 8016e68 <rmw_trigger_guard_condition+0x1c>
 8016e4e:	b510      	push	{r4, lr}
 8016e50:	4604      	mov	r4, r0
 8016e52:	6800      	ldr	r0, [r0, #0]
 8016e54:	f7f4 fa66 	bl	800b324 <is_uxrce_rmw_identifier_valid>
 8016e58:	b908      	cbnz	r0, 8016e5e <rmw_trigger_guard_condition+0x12>
 8016e5a:	2001      	movs	r0, #1
 8016e5c:	bd10      	pop	{r4, pc}
 8016e5e:	6863      	ldr	r3, [r4, #4]
 8016e60:	2201      	movs	r2, #1
 8016e62:	741a      	strb	r2, [r3, #16]
 8016e64:	2000      	movs	r0, #0
 8016e66:	bd10      	pop	{r4, pc}
 8016e68:	2001      	movs	r0, #1
 8016e6a:	4770      	bx	lr

08016e6c <rosidl_runtime_c__String__init>:
 8016e6c:	b510      	push	{r4, lr}
 8016e6e:	4604      	mov	r4, r0
 8016e70:	b086      	sub	sp, #24
 8016e72:	b170      	cbz	r0, 8016e92 <rosidl_runtime_c__String__init+0x26>
 8016e74:	a801      	add	r0, sp, #4
 8016e76:	f7f3 fca1 	bl	800a7bc <rcutils_get_default_allocator>
 8016e7a:	9b01      	ldr	r3, [sp, #4]
 8016e7c:	9905      	ldr	r1, [sp, #20]
 8016e7e:	2001      	movs	r0, #1
 8016e80:	4798      	blx	r3
 8016e82:	6020      	str	r0, [r4, #0]
 8016e84:	b128      	cbz	r0, 8016e92 <rosidl_runtime_c__String__init+0x26>
 8016e86:	2100      	movs	r1, #0
 8016e88:	2201      	movs	r2, #1
 8016e8a:	7001      	strb	r1, [r0, #0]
 8016e8c:	e9c4 1201 	strd	r1, r2, [r4, #4]
 8016e90:	4610      	mov	r0, r2
 8016e92:	b006      	add	sp, #24
 8016e94:	bd10      	pop	{r4, pc}
 8016e96:	bf00      	nop

08016e98 <rosidl_runtime_c__String__fini>:
 8016e98:	b320      	cbz	r0, 8016ee4 <rosidl_runtime_c__String__fini+0x4c>
 8016e9a:	b510      	push	{r4, lr}
 8016e9c:	6803      	ldr	r3, [r0, #0]
 8016e9e:	b086      	sub	sp, #24
 8016ea0:	4604      	mov	r4, r0
 8016ea2:	b173      	cbz	r3, 8016ec2 <rosidl_runtime_c__String__fini+0x2a>
 8016ea4:	6883      	ldr	r3, [r0, #8]
 8016ea6:	b1f3      	cbz	r3, 8016ee6 <rosidl_runtime_c__String__fini+0x4e>
 8016ea8:	a801      	add	r0, sp, #4
 8016eaa:	f7f3 fc87 	bl	800a7bc <rcutils_get_default_allocator>
 8016eae:	9b02      	ldr	r3, [sp, #8]
 8016eb0:	9905      	ldr	r1, [sp, #20]
 8016eb2:	6820      	ldr	r0, [r4, #0]
 8016eb4:	4798      	blx	r3
 8016eb6:	2300      	movs	r3, #0
 8016eb8:	e9c4 3300 	strd	r3, r3, [r4]
 8016ebc:	60a3      	str	r3, [r4, #8]
 8016ebe:	b006      	add	sp, #24
 8016ec0:	bd10      	pop	{r4, pc}
 8016ec2:	6843      	ldr	r3, [r0, #4]
 8016ec4:	b9db      	cbnz	r3, 8016efe <rosidl_runtime_c__String__fini+0x66>
 8016ec6:	6883      	ldr	r3, [r0, #8]
 8016ec8:	2b00      	cmp	r3, #0
 8016eca:	d0f8      	beq.n	8016ebe <rosidl_runtime_c__String__fini+0x26>
 8016ecc:	4b12      	ldr	r3, [pc, #72]	@ (8016f18 <rosidl_runtime_c__String__fini+0x80>)
 8016ece:	4813      	ldr	r0, [pc, #76]	@ (8016f1c <rosidl_runtime_c__String__fini+0x84>)
 8016ed0:	681b      	ldr	r3, [r3, #0]
 8016ed2:	2251      	movs	r2, #81	@ 0x51
 8016ed4:	68db      	ldr	r3, [r3, #12]
 8016ed6:	2101      	movs	r1, #1
 8016ed8:	f000 fb82 	bl	80175e0 <fwrite>
 8016edc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8016ee0:	f000 f83e 	bl	8016f60 <exit>
 8016ee4:	4770      	bx	lr
 8016ee6:	4b0c      	ldr	r3, [pc, #48]	@ (8016f18 <rosidl_runtime_c__String__fini+0x80>)
 8016ee8:	480d      	ldr	r0, [pc, #52]	@ (8016f20 <rosidl_runtime_c__String__fini+0x88>)
 8016eea:	681b      	ldr	r3, [r3, #0]
 8016eec:	224c      	movs	r2, #76	@ 0x4c
 8016eee:	68db      	ldr	r3, [r3, #12]
 8016ef0:	2101      	movs	r1, #1
 8016ef2:	f000 fb75 	bl	80175e0 <fwrite>
 8016ef6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8016efa:	f000 f831 	bl	8016f60 <exit>
 8016efe:	4b06      	ldr	r3, [pc, #24]	@ (8016f18 <rosidl_runtime_c__String__fini+0x80>)
 8016f00:	4808      	ldr	r0, [pc, #32]	@ (8016f24 <rosidl_runtime_c__String__fini+0x8c>)
 8016f02:	681b      	ldr	r3, [r3, #0]
 8016f04:	224e      	movs	r2, #78	@ 0x4e
 8016f06:	68db      	ldr	r3, [r3, #12]
 8016f08:	2101      	movs	r1, #1
 8016f0a:	f000 fb69 	bl	80175e0 <fwrite>
 8016f0e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8016f12:	f000 f825 	bl	8016f60 <exit>
 8016f16:	bf00      	nop
 8016f18:	20000290 	.word	0x20000290
 8016f1c:	08019580 	.word	0x08019580
 8016f20:	080194e0 	.word	0x080194e0
 8016f24:	08019530 	.word	0x08019530

08016f28 <calloc>:
 8016f28:	4b02      	ldr	r3, [pc, #8]	@ (8016f34 <calloc+0xc>)
 8016f2a:	460a      	mov	r2, r1
 8016f2c:	4601      	mov	r1, r0
 8016f2e:	6818      	ldr	r0, [r3, #0]
 8016f30:	f000 b802 	b.w	8016f38 <_calloc_r>
 8016f34:	20000290 	.word	0x20000290

08016f38 <_calloc_r>:
 8016f38:	b570      	push	{r4, r5, r6, lr}
 8016f3a:	fba1 5402 	umull	r5, r4, r1, r2
 8016f3e:	b93c      	cbnz	r4, 8016f50 <_calloc_r+0x18>
 8016f40:	4629      	mov	r1, r5
 8016f42:	f000 f899 	bl	8017078 <_malloc_r>
 8016f46:	4606      	mov	r6, r0
 8016f48:	b928      	cbnz	r0, 8016f56 <_calloc_r+0x1e>
 8016f4a:	2600      	movs	r6, #0
 8016f4c:	4630      	mov	r0, r6
 8016f4e:	bd70      	pop	{r4, r5, r6, pc}
 8016f50:	220c      	movs	r2, #12
 8016f52:	6002      	str	r2, [r0, #0]
 8016f54:	e7f9      	b.n	8016f4a <_calloc_r+0x12>
 8016f56:	462a      	mov	r2, r5
 8016f58:	4621      	mov	r1, r4
 8016f5a:	f000 fccf 	bl	80178fc <memset>
 8016f5e:	e7f5      	b.n	8016f4c <_calloc_r+0x14>

08016f60 <exit>:
 8016f60:	b508      	push	{r3, lr}
 8016f62:	4b06      	ldr	r3, [pc, #24]	@ (8016f7c <exit+0x1c>)
 8016f64:	4604      	mov	r4, r0
 8016f66:	b113      	cbz	r3, 8016f6e <exit+0xe>
 8016f68:	2100      	movs	r1, #0
 8016f6a:	f3af 8000 	nop.w
 8016f6e:	4b04      	ldr	r3, [pc, #16]	@ (8016f80 <exit+0x20>)
 8016f70:	681b      	ldr	r3, [r3, #0]
 8016f72:	b103      	cbz	r3, 8016f76 <exit+0x16>
 8016f74:	4798      	blx	r3
 8016f76:	4620      	mov	r0, r4
 8016f78:	f7ea ffae 	bl	8001ed8 <_exit>
 8016f7c:	00000000 	.word	0x00000000
 8016f80:	2000c220 	.word	0x2000c220

08016f84 <getenv>:
 8016f84:	b507      	push	{r0, r1, r2, lr}
 8016f86:	4b04      	ldr	r3, [pc, #16]	@ (8016f98 <getenv+0x14>)
 8016f88:	4601      	mov	r1, r0
 8016f8a:	aa01      	add	r2, sp, #4
 8016f8c:	6818      	ldr	r0, [r3, #0]
 8016f8e:	f000 f805 	bl	8016f9c <_findenv_r>
 8016f92:	b003      	add	sp, #12
 8016f94:	f85d fb04 	ldr.w	pc, [sp], #4
 8016f98:	20000290 	.word	0x20000290

08016f9c <_findenv_r>:
 8016f9c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016fa0:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 8017010 <_findenv_r+0x74>
 8016fa4:	4606      	mov	r6, r0
 8016fa6:	4689      	mov	r9, r1
 8016fa8:	4617      	mov	r7, r2
 8016faa:	f000 fdf3 	bl	8017b94 <__env_lock>
 8016fae:	f8da 4000 	ldr.w	r4, [sl]
 8016fb2:	b134      	cbz	r4, 8016fc2 <_findenv_r+0x26>
 8016fb4:	464b      	mov	r3, r9
 8016fb6:	4698      	mov	r8, r3
 8016fb8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016fbc:	b13a      	cbz	r2, 8016fce <_findenv_r+0x32>
 8016fbe:	2a3d      	cmp	r2, #61	@ 0x3d
 8016fc0:	d1f9      	bne.n	8016fb6 <_findenv_r+0x1a>
 8016fc2:	4630      	mov	r0, r6
 8016fc4:	f000 fdec 	bl	8017ba0 <__env_unlock>
 8016fc8:	2000      	movs	r0, #0
 8016fca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016fce:	eba8 0809 	sub.w	r8, r8, r9
 8016fd2:	46a3      	mov	fp, r4
 8016fd4:	f854 0b04 	ldr.w	r0, [r4], #4
 8016fd8:	2800      	cmp	r0, #0
 8016fda:	d0f2      	beq.n	8016fc2 <_findenv_r+0x26>
 8016fdc:	4642      	mov	r2, r8
 8016fde:	4649      	mov	r1, r9
 8016fe0:	f000 fca1 	bl	8017926 <strncmp>
 8016fe4:	2800      	cmp	r0, #0
 8016fe6:	d1f4      	bne.n	8016fd2 <_findenv_r+0x36>
 8016fe8:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8016fec:	eb03 0508 	add.w	r5, r3, r8
 8016ff0:	f813 3008 	ldrb.w	r3, [r3, r8]
 8016ff4:	2b3d      	cmp	r3, #61	@ 0x3d
 8016ff6:	d1ec      	bne.n	8016fd2 <_findenv_r+0x36>
 8016ff8:	f8da 3000 	ldr.w	r3, [sl]
 8016ffc:	ebab 0303 	sub.w	r3, fp, r3
 8017000:	109b      	asrs	r3, r3, #2
 8017002:	4630      	mov	r0, r6
 8017004:	603b      	str	r3, [r7, #0]
 8017006:	f000 fdcb 	bl	8017ba0 <__env_unlock>
 801700a:	1c68      	adds	r0, r5, #1
 801700c:	e7dd      	b.n	8016fca <_findenv_r+0x2e>
 801700e:	bf00      	nop
 8017010:	20000000 	.word	0x20000000

08017014 <malloc>:
 8017014:	4b02      	ldr	r3, [pc, #8]	@ (8017020 <malloc+0xc>)
 8017016:	4601      	mov	r1, r0
 8017018:	6818      	ldr	r0, [r3, #0]
 801701a:	f000 b82d 	b.w	8017078 <_malloc_r>
 801701e:	bf00      	nop
 8017020:	20000290 	.word	0x20000290

08017024 <free>:
 8017024:	4b02      	ldr	r3, [pc, #8]	@ (8017030 <free+0xc>)
 8017026:	4601      	mov	r1, r0
 8017028:	6818      	ldr	r0, [r3, #0]
 801702a:	f000 bdbf 	b.w	8017bac <_free_r>
 801702e:	bf00      	nop
 8017030:	20000290 	.word	0x20000290

08017034 <sbrk_aligned>:
 8017034:	b570      	push	{r4, r5, r6, lr}
 8017036:	4e0f      	ldr	r6, [pc, #60]	@ (8017074 <sbrk_aligned+0x40>)
 8017038:	460c      	mov	r4, r1
 801703a:	6831      	ldr	r1, [r6, #0]
 801703c:	4605      	mov	r5, r0
 801703e:	b911      	cbnz	r1, 8017046 <sbrk_aligned+0x12>
 8017040:	f000 fd24 	bl	8017a8c <_sbrk_r>
 8017044:	6030      	str	r0, [r6, #0]
 8017046:	4621      	mov	r1, r4
 8017048:	4628      	mov	r0, r5
 801704a:	f000 fd1f 	bl	8017a8c <_sbrk_r>
 801704e:	1c43      	adds	r3, r0, #1
 8017050:	d103      	bne.n	801705a <sbrk_aligned+0x26>
 8017052:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8017056:	4620      	mov	r0, r4
 8017058:	bd70      	pop	{r4, r5, r6, pc}
 801705a:	1cc4      	adds	r4, r0, #3
 801705c:	f024 0403 	bic.w	r4, r4, #3
 8017060:	42a0      	cmp	r0, r4
 8017062:	d0f8      	beq.n	8017056 <sbrk_aligned+0x22>
 8017064:	1a21      	subs	r1, r4, r0
 8017066:	4628      	mov	r0, r5
 8017068:	f000 fd10 	bl	8017a8c <_sbrk_r>
 801706c:	3001      	adds	r0, #1
 801706e:	d1f2      	bne.n	8017056 <sbrk_aligned+0x22>
 8017070:	e7ef      	b.n	8017052 <sbrk_aligned+0x1e>
 8017072:	bf00      	nop
 8017074:	2000c0e0 	.word	0x2000c0e0

08017078 <_malloc_r>:
 8017078:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801707c:	1ccd      	adds	r5, r1, #3
 801707e:	f025 0503 	bic.w	r5, r5, #3
 8017082:	3508      	adds	r5, #8
 8017084:	2d0c      	cmp	r5, #12
 8017086:	bf38      	it	cc
 8017088:	250c      	movcc	r5, #12
 801708a:	2d00      	cmp	r5, #0
 801708c:	4606      	mov	r6, r0
 801708e:	db01      	blt.n	8017094 <_malloc_r+0x1c>
 8017090:	42a9      	cmp	r1, r5
 8017092:	d904      	bls.n	801709e <_malloc_r+0x26>
 8017094:	230c      	movs	r3, #12
 8017096:	6033      	str	r3, [r6, #0]
 8017098:	2000      	movs	r0, #0
 801709a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801709e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8017174 <_malloc_r+0xfc>
 80170a2:	f000 f869 	bl	8017178 <__malloc_lock>
 80170a6:	f8d8 3000 	ldr.w	r3, [r8]
 80170aa:	461c      	mov	r4, r3
 80170ac:	bb44      	cbnz	r4, 8017100 <_malloc_r+0x88>
 80170ae:	4629      	mov	r1, r5
 80170b0:	4630      	mov	r0, r6
 80170b2:	f7ff ffbf 	bl	8017034 <sbrk_aligned>
 80170b6:	1c43      	adds	r3, r0, #1
 80170b8:	4604      	mov	r4, r0
 80170ba:	d158      	bne.n	801716e <_malloc_r+0xf6>
 80170bc:	f8d8 4000 	ldr.w	r4, [r8]
 80170c0:	4627      	mov	r7, r4
 80170c2:	2f00      	cmp	r7, #0
 80170c4:	d143      	bne.n	801714e <_malloc_r+0xd6>
 80170c6:	2c00      	cmp	r4, #0
 80170c8:	d04b      	beq.n	8017162 <_malloc_r+0xea>
 80170ca:	6823      	ldr	r3, [r4, #0]
 80170cc:	4639      	mov	r1, r7
 80170ce:	4630      	mov	r0, r6
 80170d0:	eb04 0903 	add.w	r9, r4, r3
 80170d4:	f000 fcda 	bl	8017a8c <_sbrk_r>
 80170d8:	4581      	cmp	r9, r0
 80170da:	d142      	bne.n	8017162 <_malloc_r+0xea>
 80170dc:	6821      	ldr	r1, [r4, #0]
 80170de:	1a6d      	subs	r5, r5, r1
 80170e0:	4629      	mov	r1, r5
 80170e2:	4630      	mov	r0, r6
 80170e4:	f7ff ffa6 	bl	8017034 <sbrk_aligned>
 80170e8:	3001      	adds	r0, #1
 80170ea:	d03a      	beq.n	8017162 <_malloc_r+0xea>
 80170ec:	6823      	ldr	r3, [r4, #0]
 80170ee:	442b      	add	r3, r5
 80170f0:	6023      	str	r3, [r4, #0]
 80170f2:	f8d8 3000 	ldr.w	r3, [r8]
 80170f6:	685a      	ldr	r2, [r3, #4]
 80170f8:	bb62      	cbnz	r2, 8017154 <_malloc_r+0xdc>
 80170fa:	f8c8 7000 	str.w	r7, [r8]
 80170fe:	e00f      	b.n	8017120 <_malloc_r+0xa8>
 8017100:	6822      	ldr	r2, [r4, #0]
 8017102:	1b52      	subs	r2, r2, r5
 8017104:	d420      	bmi.n	8017148 <_malloc_r+0xd0>
 8017106:	2a0b      	cmp	r2, #11
 8017108:	d917      	bls.n	801713a <_malloc_r+0xc2>
 801710a:	1961      	adds	r1, r4, r5
 801710c:	42a3      	cmp	r3, r4
 801710e:	6025      	str	r5, [r4, #0]
 8017110:	bf18      	it	ne
 8017112:	6059      	strne	r1, [r3, #4]
 8017114:	6863      	ldr	r3, [r4, #4]
 8017116:	bf08      	it	eq
 8017118:	f8c8 1000 	streq.w	r1, [r8]
 801711c:	5162      	str	r2, [r4, r5]
 801711e:	604b      	str	r3, [r1, #4]
 8017120:	4630      	mov	r0, r6
 8017122:	f000 f82f 	bl	8017184 <__malloc_unlock>
 8017126:	f104 000b 	add.w	r0, r4, #11
 801712a:	1d23      	adds	r3, r4, #4
 801712c:	f020 0007 	bic.w	r0, r0, #7
 8017130:	1ac2      	subs	r2, r0, r3
 8017132:	bf1c      	itt	ne
 8017134:	1a1b      	subne	r3, r3, r0
 8017136:	50a3      	strne	r3, [r4, r2]
 8017138:	e7af      	b.n	801709a <_malloc_r+0x22>
 801713a:	6862      	ldr	r2, [r4, #4]
 801713c:	42a3      	cmp	r3, r4
 801713e:	bf0c      	ite	eq
 8017140:	f8c8 2000 	streq.w	r2, [r8]
 8017144:	605a      	strne	r2, [r3, #4]
 8017146:	e7eb      	b.n	8017120 <_malloc_r+0xa8>
 8017148:	4623      	mov	r3, r4
 801714a:	6864      	ldr	r4, [r4, #4]
 801714c:	e7ae      	b.n	80170ac <_malloc_r+0x34>
 801714e:	463c      	mov	r4, r7
 8017150:	687f      	ldr	r7, [r7, #4]
 8017152:	e7b6      	b.n	80170c2 <_malloc_r+0x4a>
 8017154:	461a      	mov	r2, r3
 8017156:	685b      	ldr	r3, [r3, #4]
 8017158:	42a3      	cmp	r3, r4
 801715a:	d1fb      	bne.n	8017154 <_malloc_r+0xdc>
 801715c:	2300      	movs	r3, #0
 801715e:	6053      	str	r3, [r2, #4]
 8017160:	e7de      	b.n	8017120 <_malloc_r+0xa8>
 8017162:	230c      	movs	r3, #12
 8017164:	6033      	str	r3, [r6, #0]
 8017166:	4630      	mov	r0, r6
 8017168:	f000 f80c 	bl	8017184 <__malloc_unlock>
 801716c:	e794      	b.n	8017098 <_malloc_r+0x20>
 801716e:	6005      	str	r5, [r0, #0]
 8017170:	e7d6      	b.n	8017120 <_malloc_r+0xa8>
 8017172:	bf00      	nop
 8017174:	2000c0e4 	.word	0x2000c0e4

08017178 <__malloc_lock>:
 8017178:	4801      	ldr	r0, [pc, #4]	@ (8017180 <__malloc_lock+0x8>)
 801717a:	f000 bcd4 	b.w	8017b26 <__retarget_lock_acquire_recursive>
 801717e:	bf00      	nop
 8017180:	2000c229 	.word	0x2000c229

08017184 <__malloc_unlock>:
 8017184:	4801      	ldr	r0, [pc, #4]	@ (801718c <__malloc_unlock+0x8>)
 8017186:	f000 bccf 	b.w	8017b28 <__retarget_lock_release_recursive>
 801718a:	bf00      	nop
 801718c:	2000c229 	.word	0x2000c229

08017190 <srand>:
 8017190:	b538      	push	{r3, r4, r5, lr}
 8017192:	4b10      	ldr	r3, [pc, #64]	@ (80171d4 <srand+0x44>)
 8017194:	681d      	ldr	r5, [r3, #0]
 8017196:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8017198:	4604      	mov	r4, r0
 801719a:	b9b3      	cbnz	r3, 80171ca <srand+0x3a>
 801719c:	2018      	movs	r0, #24
 801719e:	f7ff ff39 	bl	8017014 <malloc>
 80171a2:	4602      	mov	r2, r0
 80171a4:	6328      	str	r0, [r5, #48]	@ 0x30
 80171a6:	b920      	cbnz	r0, 80171b2 <srand+0x22>
 80171a8:	4b0b      	ldr	r3, [pc, #44]	@ (80171d8 <srand+0x48>)
 80171aa:	480c      	ldr	r0, [pc, #48]	@ (80171dc <srand+0x4c>)
 80171ac:	2146      	movs	r1, #70	@ 0x46
 80171ae:	f000 fcd3 	bl	8017b58 <__assert_func>
 80171b2:	490b      	ldr	r1, [pc, #44]	@ (80171e0 <srand+0x50>)
 80171b4:	4b0b      	ldr	r3, [pc, #44]	@ (80171e4 <srand+0x54>)
 80171b6:	e9c0 1300 	strd	r1, r3, [r0]
 80171ba:	4b0b      	ldr	r3, [pc, #44]	@ (80171e8 <srand+0x58>)
 80171bc:	6083      	str	r3, [r0, #8]
 80171be:	230b      	movs	r3, #11
 80171c0:	8183      	strh	r3, [r0, #12]
 80171c2:	2100      	movs	r1, #0
 80171c4:	2001      	movs	r0, #1
 80171c6:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80171ca:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80171cc:	2200      	movs	r2, #0
 80171ce:	611c      	str	r4, [r3, #16]
 80171d0:	615a      	str	r2, [r3, #20]
 80171d2:	bd38      	pop	{r3, r4, r5, pc}
 80171d4:	20000290 	.word	0x20000290
 80171d8:	080195d2 	.word	0x080195d2
 80171dc:	080195e9 	.word	0x080195e9
 80171e0:	abcd330e 	.word	0xabcd330e
 80171e4:	e66d1234 	.word	0xe66d1234
 80171e8:	0005deec 	.word	0x0005deec

080171ec <rand>:
 80171ec:	4b16      	ldr	r3, [pc, #88]	@ (8017248 <rand+0x5c>)
 80171ee:	b510      	push	{r4, lr}
 80171f0:	681c      	ldr	r4, [r3, #0]
 80171f2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80171f4:	b9b3      	cbnz	r3, 8017224 <rand+0x38>
 80171f6:	2018      	movs	r0, #24
 80171f8:	f7ff ff0c 	bl	8017014 <malloc>
 80171fc:	4602      	mov	r2, r0
 80171fe:	6320      	str	r0, [r4, #48]	@ 0x30
 8017200:	b920      	cbnz	r0, 801720c <rand+0x20>
 8017202:	4b12      	ldr	r3, [pc, #72]	@ (801724c <rand+0x60>)
 8017204:	4812      	ldr	r0, [pc, #72]	@ (8017250 <rand+0x64>)
 8017206:	2152      	movs	r1, #82	@ 0x52
 8017208:	f000 fca6 	bl	8017b58 <__assert_func>
 801720c:	4911      	ldr	r1, [pc, #68]	@ (8017254 <rand+0x68>)
 801720e:	4b12      	ldr	r3, [pc, #72]	@ (8017258 <rand+0x6c>)
 8017210:	e9c0 1300 	strd	r1, r3, [r0]
 8017214:	4b11      	ldr	r3, [pc, #68]	@ (801725c <rand+0x70>)
 8017216:	6083      	str	r3, [r0, #8]
 8017218:	230b      	movs	r3, #11
 801721a:	8183      	strh	r3, [r0, #12]
 801721c:	2100      	movs	r1, #0
 801721e:	2001      	movs	r0, #1
 8017220:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8017224:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8017226:	480e      	ldr	r0, [pc, #56]	@ (8017260 <rand+0x74>)
 8017228:	690b      	ldr	r3, [r1, #16]
 801722a:	694c      	ldr	r4, [r1, #20]
 801722c:	4a0d      	ldr	r2, [pc, #52]	@ (8017264 <rand+0x78>)
 801722e:	4358      	muls	r0, r3
 8017230:	fb02 0004 	mla	r0, r2, r4, r0
 8017234:	fba3 3202 	umull	r3, r2, r3, r2
 8017238:	3301      	adds	r3, #1
 801723a:	eb40 0002 	adc.w	r0, r0, r2
 801723e:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8017242:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8017246:	bd10      	pop	{r4, pc}
 8017248:	20000290 	.word	0x20000290
 801724c:	080195d2 	.word	0x080195d2
 8017250:	080195e9 	.word	0x080195e9
 8017254:	abcd330e 	.word	0xabcd330e
 8017258:	e66d1234 	.word	0xe66d1234
 801725c:	0005deec 	.word	0x0005deec
 8017260:	5851f42d 	.word	0x5851f42d
 8017264:	4c957f2d 	.word	0x4c957f2d

08017268 <realloc>:
 8017268:	4b02      	ldr	r3, [pc, #8]	@ (8017274 <realloc+0xc>)
 801726a:	460a      	mov	r2, r1
 801726c:	4601      	mov	r1, r0
 801726e:	6818      	ldr	r0, [r3, #0]
 8017270:	f000 b802 	b.w	8017278 <_realloc_r>
 8017274:	20000290 	.word	0x20000290

08017278 <_realloc_r>:
 8017278:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801727c:	4680      	mov	r8, r0
 801727e:	4615      	mov	r5, r2
 8017280:	460c      	mov	r4, r1
 8017282:	b921      	cbnz	r1, 801728e <_realloc_r+0x16>
 8017284:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017288:	4611      	mov	r1, r2
 801728a:	f7ff bef5 	b.w	8017078 <_malloc_r>
 801728e:	b92a      	cbnz	r2, 801729c <_realloc_r+0x24>
 8017290:	f000 fc8c 	bl	8017bac <_free_r>
 8017294:	2400      	movs	r4, #0
 8017296:	4620      	mov	r0, r4
 8017298:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801729c:	f000 fcd0 	bl	8017c40 <_malloc_usable_size_r>
 80172a0:	4285      	cmp	r5, r0
 80172a2:	4606      	mov	r6, r0
 80172a4:	d802      	bhi.n	80172ac <_realloc_r+0x34>
 80172a6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80172aa:	d8f4      	bhi.n	8017296 <_realloc_r+0x1e>
 80172ac:	4629      	mov	r1, r5
 80172ae:	4640      	mov	r0, r8
 80172b0:	f7ff fee2 	bl	8017078 <_malloc_r>
 80172b4:	4607      	mov	r7, r0
 80172b6:	2800      	cmp	r0, #0
 80172b8:	d0ec      	beq.n	8017294 <_realloc_r+0x1c>
 80172ba:	42b5      	cmp	r5, r6
 80172bc:	462a      	mov	r2, r5
 80172be:	4621      	mov	r1, r4
 80172c0:	bf28      	it	cs
 80172c2:	4632      	movcs	r2, r6
 80172c4:	f000 fc39 	bl	8017b3a <memcpy>
 80172c8:	4621      	mov	r1, r4
 80172ca:	4640      	mov	r0, r8
 80172cc:	f000 fc6e 	bl	8017bac <_free_r>
 80172d0:	463c      	mov	r4, r7
 80172d2:	e7e0      	b.n	8017296 <_realloc_r+0x1e>

080172d4 <_strtoul_l.constprop.0>:
 80172d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80172d8:	4e34      	ldr	r6, [pc, #208]	@ (80173ac <_strtoul_l.constprop.0+0xd8>)
 80172da:	4686      	mov	lr, r0
 80172dc:	460d      	mov	r5, r1
 80172de:	4628      	mov	r0, r5
 80172e0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80172e4:	5d37      	ldrb	r7, [r6, r4]
 80172e6:	f017 0708 	ands.w	r7, r7, #8
 80172ea:	d1f8      	bne.n	80172de <_strtoul_l.constprop.0+0xa>
 80172ec:	2c2d      	cmp	r4, #45	@ 0x2d
 80172ee:	d12f      	bne.n	8017350 <_strtoul_l.constprop.0+0x7c>
 80172f0:	782c      	ldrb	r4, [r5, #0]
 80172f2:	2701      	movs	r7, #1
 80172f4:	1c85      	adds	r5, r0, #2
 80172f6:	f033 0010 	bics.w	r0, r3, #16
 80172fa:	d109      	bne.n	8017310 <_strtoul_l.constprop.0+0x3c>
 80172fc:	2c30      	cmp	r4, #48	@ 0x30
 80172fe:	d12c      	bne.n	801735a <_strtoul_l.constprop.0+0x86>
 8017300:	7828      	ldrb	r0, [r5, #0]
 8017302:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8017306:	2858      	cmp	r0, #88	@ 0x58
 8017308:	d127      	bne.n	801735a <_strtoul_l.constprop.0+0x86>
 801730a:	786c      	ldrb	r4, [r5, #1]
 801730c:	2310      	movs	r3, #16
 801730e:	3502      	adds	r5, #2
 8017310:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8017314:	2600      	movs	r6, #0
 8017316:	fbb8 f8f3 	udiv	r8, r8, r3
 801731a:	fb03 f908 	mul.w	r9, r3, r8
 801731e:	ea6f 0909 	mvn.w	r9, r9
 8017322:	4630      	mov	r0, r6
 8017324:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8017328:	f1bc 0f09 	cmp.w	ip, #9
 801732c:	d81c      	bhi.n	8017368 <_strtoul_l.constprop.0+0x94>
 801732e:	4664      	mov	r4, ip
 8017330:	42a3      	cmp	r3, r4
 8017332:	dd2a      	ble.n	801738a <_strtoul_l.constprop.0+0xb6>
 8017334:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 8017338:	d007      	beq.n	801734a <_strtoul_l.constprop.0+0x76>
 801733a:	4580      	cmp	r8, r0
 801733c:	d322      	bcc.n	8017384 <_strtoul_l.constprop.0+0xb0>
 801733e:	d101      	bne.n	8017344 <_strtoul_l.constprop.0+0x70>
 8017340:	45a1      	cmp	r9, r4
 8017342:	db1f      	blt.n	8017384 <_strtoul_l.constprop.0+0xb0>
 8017344:	fb00 4003 	mla	r0, r0, r3, r4
 8017348:	2601      	movs	r6, #1
 801734a:	f815 4b01 	ldrb.w	r4, [r5], #1
 801734e:	e7e9      	b.n	8017324 <_strtoul_l.constprop.0+0x50>
 8017350:	2c2b      	cmp	r4, #43	@ 0x2b
 8017352:	bf04      	itt	eq
 8017354:	782c      	ldrbeq	r4, [r5, #0]
 8017356:	1c85      	addeq	r5, r0, #2
 8017358:	e7cd      	b.n	80172f6 <_strtoul_l.constprop.0+0x22>
 801735a:	2b00      	cmp	r3, #0
 801735c:	d1d8      	bne.n	8017310 <_strtoul_l.constprop.0+0x3c>
 801735e:	2c30      	cmp	r4, #48	@ 0x30
 8017360:	bf0c      	ite	eq
 8017362:	2308      	moveq	r3, #8
 8017364:	230a      	movne	r3, #10
 8017366:	e7d3      	b.n	8017310 <_strtoul_l.constprop.0+0x3c>
 8017368:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 801736c:	f1bc 0f19 	cmp.w	ip, #25
 8017370:	d801      	bhi.n	8017376 <_strtoul_l.constprop.0+0xa2>
 8017372:	3c37      	subs	r4, #55	@ 0x37
 8017374:	e7dc      	b.n	8017330 <_strtoul_l.constprop.0+0x5c>
 8017376:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 801737a:	f1bc 0f19 	cmp.w	ip, #25
 801737e:	d804      	bhi.n	801738a <_strtoul_l.constprop.0+0xb6>
 8017380:	3c57      	subs	r4, #87	@ 0x57
 8017382:	e7d5      	b.n	8017330 <_strtoul_l.constprop.0+0x5c>
 8017384:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 8017388:	e7df      	b.n	801734a <_strtoul_l.constprop.0+0x76>
 801738a:	1c73      	adds	r3, r6, #1
 801738c:	d106      	bne.n	801739c <_strtoul_l.constprop.0+0xc8>
 801738e:	2322      	movs	r3, #34	@ 0x22
 8017390:	f8ce 3000 	str.w	r3, [lr]
 8017394:	4630      	mov	r0, r6
 8017396:	b932      	cbnz	r2, 80173a6 <_strtoul_l.constprop.0+0xd2>
 8017398:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801739c:	b107      	cbz	r7, 80173a0 <_strtoul_l.constprop.0+0xcc>
 801739e:	4240      	negs	r0, r0
 80173a0:	2a00      	cmp	r2, #0
 80173a2:	d0f9      	beq.n	8017398 <_strtoul_l.constprop.0+0xc4>
 80173a4:	b106      	cbz	r6, 80173a8 <_strtoul_l.constprop.0+0xd4>
 80173a6:	1e69      	subs	r1, r5, #1
 80173a8:	6011      	str	r1, [r2, #0]
 80173aa:	e7f5      	b.n	8017398 <_strtoul_l.constprop.0+0xc4>
 80173ac:	08019642 	.word	0x08019642

080173b0 <strtoul>:
 80173b0:	4613      	mov	r3, r2
 80173b2:	460a      	mov	r2, r1
 80173b4:	4601      	mov	r1, r0
 80173b6:	4802      	ldr	r0, [pc, #8]	@ (80173c0 <strtoul+0x10>)
 80173b8:	6800      	ldr	r0, [r0, #0]
 80173ba:	f7ff bf8b 	b.w	80172d4 <_strtoul_l.constprop.0>
 80173be:	bf00      	nop
 80173c0:	20000290 	.word	0x20000290

080173c4 <std>:
 80173c4:	2300      	movs	r3, #0
 80173c6:	b510      	push	{r4, lr}
 80173c8:	4604      	mov	r4, r0
 80173ca:	e9c0 3300 	strd	r3, r3, [r0]
 80173ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80173d2:	6083      	str	r3, [r0, #8]
 80173d4:	8181      	strh	r1, [r0, #12]
 80173d6:	6643      	str	r3, [r0, #100]	@ 0x64
 80173d8:	81c2      	strh	r2, [r0, #14]
 80173da:	6183      	str	r3, [r0, #24]
 80173dc:	4619      	mov	r1, r3
 80173de:	2208      	movs	r2, #8
 80173e0:	305c      	adds	r0, #92	@ 0x5c
 80173e2:	f000 fa8b 	bl	80178fc <memset>
 80173e6:	4b0d      	ldr	r3, [pc, #52]	@ (801741c <std+0x58>)
 80173e8:	6263      	str	r3, [r4, #36]	@ 0x24
 80173ea:	4b0d      	ldr	r3, [pc, #52]	@ (8017420 <std+0x5c>)
 80173ec:	62a3      	str	r3, [r4, #40]	@ 0x28
 80173ee:	4b0d      	ldr	r3, [pc, #52]	@ (8017424 <std+0x60>)
 80173f0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80173f2:	4b0d      	ldr	r3, [pc, #52]	@ (8017428 <std+0x64>)
 80173f4:	6323      	str	r3, [r4, #48]	@ 0x30
 80173f6:	4b0d      	ldr	r3, [pc, #52]	@ (801742c <std+0x68>)
 80173f8:	6224      	str	r4, [r4, #32]
 80173fa:	429c      	cmp	r4, r3
 80173fc:	d006      	beq.n	801740c <std+0x48>
 80173fe:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8017402:	4294      	cmp	r4, r2
 8017404:	d002      	beq.n	801740c <std+0x48>
 8017406:	33d0      	adds	r3, #208	@ 0xd0
 8017408:	429c      	cmp	r4, r3
 801740a:	d105      	bne.n	8017418 <std+0x54>
 801740c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8017410:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017414:	f000 bb86 	b.w	8017b24 <__retarget_lock_init_recursive>
 8017418:	bd10      	pop	{r4, pc}
 801741a:	bf00      	nop
 801741c:	08017689 	.word	0x08017689
 8017420:	080176ab 	.word	0x080176ab
 8017424:	080176e3 	.word	0x080176e3
 8017428:	08017707 	.word	0x08017707
 801742c:	2000c0e8 	.word	0x2000c0e8

08017430 <stdio_exit_handler>:
 8017430:	4a02      	ldr	r2, [pc, #8]	@ (801743c <stdio_exit_handler+0xc>)
 8017432:	4903      	ldr	r1, [pc, #12]	@ (8017440 <stdio_exit_handler+0x10>)
 8017434:	4803      	ldr	r0, [pc, #12]	@ (8017444 <stdio_exit_handler+0x14>)
 8017436:	f000 b869 	b.w	801750c <_fwalk_sglue>
 801743a:	bf00      	nop
 801743c:	20000284 	.word	0x20000284
 8017440:	080185a9 	.word	0x080185a9
 8017444:	20000294 	.word	0x20000294

08017448 <cleanup_stdio>:
 8017448:	6841      	ldr	r1, [r0, #4]
 801744a:	4b0c      	ldr	r3, [pc, #48]	@ (801747c <cleanup_stdio+0x34>)
 801744c:	4299      	cmp	r1, r3
 801744e:	b510      	push	{r4, lr}
 8017450:	4604      	mov	r4, r0
 8017452:	d001      	beq.n	8017458 <cleanup_stdio+0x10>
 8017454:	f001 f8a8 	bl	80185a8 <_fflush_r>
 8017458:	68a1      	ldr	r1, [r4, #8]
 801745a:	4b09      	ldr	r3, [pc, #36]	@ (8017480 <cleanup_stdio+0x38>)
 801745c:	4299      	cmp	r1, r3
 801745e:	d002      	beq.n	8017466 <cleanup_stdio+0x1e>
 8017460:	4620      	mov	r0, r4
 8017462:	f001 f8a1 	bl	80185a8 <_fflush_r>
 8017466:	68e1      	ldr	r1, [r4, #12]
 8017468:	4b06      	ldr	r3, [pc, #24]	@ (8017484 <cleanup_stdio+0x3c>)
 801746a:	4299      	cmp	r1, r3
 801746c:	d004      	beq.n	8017478 <cleanup_stdio+0x30>
 801746e:	4620      	mov	r0, r4
 8017470:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017474:	f001 b898 	b.w	80185a8 <_fflush_r>
 8017478:	bd10      	pop	{r4, pc}
 801747a:	bf00      	nop
 801747c:	2000c0e8 	.word	0x2000c0e8
 8017480:	2000c150 	.word	0x2000c150
 8017484:	2000c1b8 	.word	0x2000c1b8

08017488 <global_stdio_init.part.0>:
 8017488:	b510      	push	{r4, lr}
 801748a:	4b0b      	ldr	r3, [pc, #44]	@ (80174b8 <global_stdio_init.part.0+0x30>)
 801748c:	4c0b      	ldr	r4, [pc, #44]	@ (80174bc <global_stdio_init.part.0+0x34>)
 801748e:	4a0c      	ldr	r2, [pc, #48]	@ (80174c0 <global_stdio_init.part.0+0x38>)
 8017490:	601a      	str	r2, [r3, #0]
 8017492:	4620      	mov	r0, r4
 8017494:	2200      	movs	r2, #0
 8017496:	2104      	movs	r1, #4
 8017498:	f7ff ff94 	bl	80173c4 <std>
 801749c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80174a0:	2201      	movs	r2, #1
 80174a2:	2109      	movs	r1, #9
 80174a4:	f7ff ff8e 	bl	80173c4 <std>
 80174a8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80174ac:	2202      	movs	r2, #2
 80174ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80174b2:	2112      	movs	r1, #18
 80174b4:	f7ff bf86 	b.w	80173c4 <std>
 80174b8:	2000c220 	.word	0x2000c220
 80174bc:	2000c0e8 	.word	0x2000c0e8
 80174c0:	08017431 	.word	0x08017431

080174c4 <__sfp_lock_acquire>:
 80174c4:	4801      	ldr	r0, [pc, #4]	@ (80174cc <__sfp_lock_acquire+0x8>)
 80174c6:	f000 bb2e 	b.w	8017b26 <__retarget_lock_acquire_recursive>
 80174ca:	bf00      	nop
 80174cc:	2000c22a 	.word	0x2000c22a

080174d0 <__sfp_lock_release>:
 80174d0:	4801      	ldr	r0, [pc, #4]	@ (80174d8 <__sfp_lock_release+0x8>)
 80174d2:	f000 bb29 	b.w	8017b28 <__retarget_lock_release_recursive>
 80174d6:	bf00      	nop
 80174d8:	2000c22a 	.word	0x2000c22a

080174dc <__sinit>:
 80174dc:	b510      	push	{r4, lr}
 80174de:	4604      	mov	r4, r0
 80174e0:	f7ff fff0 	bl	80174c4 <__sfp_lock_acquire>
 80174e4:	6a23      	ldr	r3, [r4, #32]
 80174e6:	b11b      	cbz	r3, 80174f0 <__sinit+0x14>
 80174e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80174ec:	f7ff bff0 	b.w	80174d0 <__sfp_lock_release>
 80174f0:	4b04      	ldr	r3, [pc, #16]	@ (8017504 <__sinit+0x28>)
 80174f2:	6223      	str	r3, [r4, #32]
 80174f4:	4b04      	ldr	r3, [pc, #16]	@ (8017508 <__sinit+0x2c>)
 80174f6:	681b      	ldr	r3, [r3, #0]
 80174f8:	2b00      	cmp	r3, #0
 80174fa:	d1f5      	bne.n	80174e8 <__sinit+0xc>
 80174fc:	f7ff ffc4 	bl	8017488 <global_stdio_init.part.0>
 8017500:	e7f2      	b.n	80174e8 <__sinit+0xc>
 8017502:	bf00      	nop
 8017504:	08017449 	.word	0x08017449
 8017508:	2000c220 	.word	0x2000c220

0801750c <_fwalk_sglue>:
 801750c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017510:	4607      	mov	r7, r0
 8017512:	4688      	mov	r8, r1
 8017514:	4614      	mov	r4, r2
 8017516:	2600      	movs	r6, #0
 8017518:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801751c:	f1b9 0901 	subs.w	r9, r9, #1
 8017520:	d505      	bpl.n	801752e <_fwalk_sglue+0x22>
 8017522:	6824      	ldr	r4, [r4, #0]
 8017524:	2c00      	cmp	r4, #0
 8017526:	d1f7      	bne.n	8017518 <_fwalk_sglue+0xc>
 8017528:	4630      	mov	r0, r6
 801752a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801752e:	89ab      	ldrh	r3, [r5, #12]
 8017530:	2b01      	cmp	r3, #1
 8017532:	d907      	bls.n	8017544 <_fwalk_sglue+0x38>
 8017534:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8017538:	3301      	adds	r3, #1
 801753a:	d003      	beq.n	8017544 <_fwalk_sglue+0x38>
 801753c:	4629      	mov	r1, r5
 801753e:	4638      	mov	r0, r7
 8017540:	47c0      	blx	r8
 8017542:	4306      	orrs	r6, r0
 8017544:	3568      	adds	r5, #104	@ 0x68
 8017546:	e7e9      	b.n	801751c <_fwalk_sglue+0x10>

08017548 <_fwrite_r>:
 8017548:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801754c:	9c08      	ldr	r4, [sp, #32]
 801754e:	468a      	mov	sl, r1
 8017550:	4690      	mov	r8, r2
 8017552:	fb02 f903 	mul.w	r9, r2, r3
 8017556:	4606      	mov	r6, r0
 8017558:	b118      	cbz	r0, 8017562 <_fwrite_r+0x1a>
 801755a:	6a03      	ldr	r3, [r0, #32]
 801755c:	b90b      	cbnz	r3, 8017562 <_fwrite_r+0x1a>
 801755e:	f7ff ffbd 	bl	80174dc <__sinit>
 8017562:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8017564:	07dd      	lsls	r5, r3, #31
 8017566:	d405      	bmi.n	8017574 <_fwrite_r+0x2c>
 8017568:	89a3      	ldrh	r3, [r4, #12]
 801756a:	0598      	lsls	r0, r3, #22
 801756c:	d402      	bmi.n	8017574 <_fwrite_r+0x2c>
 801756e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8017570:	f000 fad9 	bl	8017b26 <__retarget_lock_acquire_recursive>
 8017574:	89a3      	ldrh	r3, [r4, #12]
 8017576:	0719      	lsls	r1, r3, #28
 8017578:	d516      	bpl.n	80175a8 <_fwrite_r+0x60>
 801757a:	6923      	ldr	r3, [r4, #16]
 801757c:	b1a3      	cbz	r3, 80175a8 <_fwrite_r+0x60>
 801757e:	2500      	movs	r5, #0
 8017580:	454d      	cmp	r5, r9
 8017582:	d01f      	beq.n	80175c4 <_fwrite_r+0x7c>
 8017584:	68a7      	ldr	r7, [r4, #8]
 8017586:	f81a 1005 	ldrb.w	r1, [sl, r5]
 801758a:	3f01      	subs	r7, #1
 801758c:	2f00      	cmp	r7, #0
 801758e:	60a7      	str	r7, [r4, #8]
 8017590:	da04      	bge.n	801759c <_fwrite_r+0x54>
 8017592:	69a3      	ldr	r3, [r4, #24]
 8017594:	429f      	cmp	r7, r3
 8017596:	db0f      	blt.n	80175b8 <_fwrite_r+0x70>
 8017598:	290a      	cmp	r1, #10
 801759a:	d00d      	beq.n	80175b8 <_fwrite_r+0x70>
 801759c:	6823      	ldr	r3, [r4, #0]
 801759e:	1c5a      	adds	r2, r3, #1
 80175a0:	6022      	str	r2, [r4, #0]
 80175a2:	7019      	strb	r1, [r3, #0]
 80175a4:	3501      	adds	r5, #1
 80175a6:	e7eb      	b.n	8017580 <_fwrite_r+0x38>
 80175a8:	4621      	mov	r1, r4
 80175aa:	4630      	mov	r0, r6
 80175ac:	f000 f926 	bl	80177fc <__swsetup_r>
 80175b0:	2800      	cmp	r0, #0
 80175b2:	d0e4      	beq.n	801757e <_fwrite_r+0x36>
 80175b4:	2500      	movs	r5, #0
 80175b6:	e005      	b.n	80175c4 <_fwrite_r+0x7c>
 80175b8:	4622      	mov	r2, r4
 80175ba:	4630      	mov	r0, r6
 80175bc:	f000 f8e0 	bl	8017780 <__swbuf_r>
 80175c0:	3001      	adds	r0, #1
 80175c2:	d1ef      	bne.n	80175a4 <_fwrite_r+0x5c>
 80175c4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80175c6:	07da      	lsls	r2, r3, #31
 80175c8:	d405      	bmi.n	80175d6 <_fwrite_r+0x8e>
 80175ca:	89a3      	ldrh	r3, [r4, #12]
 80175cc:	059b      	lsls	r3, r3, #22
 80175ce:	d402      	bmi.n	80175d6 <_fwrite_r+0x8e>
 80175d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80175d2:	f000 faa9 	bl	8017b28 <__retarget_lock_release_recursive>
 80175d6:	fbb5 f0f8 	udiv	r0, r5, r8
 80175da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

080175e0 <fwrite>:
 80175e0:	b507      	push	{r0, r1, r2, lr}
 80175e2:	9300      	str	r3, [sp, #0]
 80175e4:	4613      	mov	r3, r2
 80175e6:	460a      	mov	r2, r1
 80175e8:	4601      	mov	r1, r0
 80175ea:	4803      	ldr	r0, [pc, #12]	@ (80175f8 <fwrite+0x18>)
 80175ec:	6800      	ldr	r0, [r0, #0]
 80175ee:	f7ff ffab 	bl	8017548 <_fwrite_r>
 80175f2:	b003      	add	sp, #12
 80175f4:	f85d fb04 	ldr.w	pc, [sp], #4
 80175f8:	20000290 	.word	0x20000290

080175fc <iprintf>:
 80175fc:	b40f      	push	{r0, r1, r2, r3}
 80175fe:	b507      	push	{r0, r1, r2, lr}
 8017600:	4906      	ldr	r1, [pc, #24]	@ (801761c <iprintf+0x20>)
 8017602:	ab04      	add	r3, sp, #16
 8017604:	6808      	ldr	r0, [r1, #0]
 8017606:	f853 2b04 	ldr.w	r2, [r3], #4
 801760a:	6881      	ldr	r1, [r0, #8]
 801760c:	9301      	str	r3, [sp, #4]
 801760e:	f000 fca1 	bl	8017f54 <_vfiprintf_r>
 8017612:	b003      	add	sp, #12
 8017614:	f85d eb04 	ldr.w	lr, [sp], #4
 8017618:	b004      	add	sp, #16
 801761a:	4770      	bx	lr
 801761c:	20000290 	.word	0x20000290

08017620 <sniprintf>:
 8017620:	b40c      	push	{r2, r3}
 8017622:	b530      	push	{r4, r5, lr}
 8017624:	4b17      	ldr	r3, [pc, #92]	@ (8017684 <sniprintf+0x64>)
 8017626:	1e0c      	subs	r4, r1, #0
 8017628:	681d      	ldr	r5, [r3, #0]
 801762a:	b09d      	sub	sp, #116	@ 0x74
 801762c:	da08      	bge.n	8017640 <sniprintf+0x20>
 801762e:	238b      	movs	r3, #139	@ 0x8b
 8017630:	602b      	str	r3, [r5, #0]
 8017632:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017636:	b01d      	add	sp, #116	@ 0x74
 8017638:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801763c:	b002      	add	sp, #8
 801763e:	4770      	bx	lr
 8017640:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8017644:	f8ad 3014 	strh.w	r3, [sp, #20]
 8017648:	bf14      	ite	ne
 801764a:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 801764e:	4623      	moveq	r3, r4
 8017650:	9304      	str	r3, [sp, #16]
 8017652:	9307      	str	r3, [sp, #28]
 8017654:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8017658:	9002      	str	r0, [sp, #8]
 801765a:	9006      	str	r0, [sp, #24]
 801765c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8017660:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8017662:	ab21      	add	r3, sp, #132	@ 0x84
 8017664:	a902      	add	r1, sp, #8
 8017666:	4628      	mov	r0, r5
 8017668:	9301      	str	r3, [sp, #4]
 801766a:	f000 fb4d 	bl	8017d08 <_svfiprintf_r>
 801766e:	1c43      	adds	r3, r0, #1
 8017670:	bfbc      	itt	lt
 8017672:	238b      	movlt	r3, #139	@ 0x8b
 8017674:	602b      	strlt	r3, [r5, #0]
 8017676:	2c00      	cmp	r4, #0
 8017678:	d0dd      	beq.n	8017636 <sniprintf+0x16>
 801767a:	9b02      	ldr	r3, [sp, #8]
 801767c:	2200      	movs	r2, #0
 801767e:	701a      	strb	r2, [r3, #0]
 8017680:	e7d9      	b.n	8017636 <sniprintf+0x16>
 8017682:	bf00      	nop
 8017684:	20000290 	.word	0x20000290

08017688 <__sread>:
 8017688:	b510      	push	{r4, lr}
 801768a:	460c      	mov	r4, r1
 801768c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017690:	f000 f9ea 	bl	8017a68 <_read_r>
 8017694:	2800      	cmp	r0, #0
 8017696:	bfab      	itete	ge
 8017698:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801769a:	89a3      	ldrhlt	r3, [r4, #12]
 801769c:	181b      	addge	r3, r3, r0
 801769e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80176a2:	bfac      	ite	ge
 80176a4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80176a6:	81a3      	strhlt	r3, [r4, #12]
 80176a8:	bd10      	pop	{r4, pc}

080176aa <__swrite>:
 80176aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80176ae:	461f      	mov	r7, r3
 80176b0:	898b      	ldrh	r3, [r1, #12]
 80176b2:	05db      	lsls	r3, r3, #23
 80176b4:	4605      	mov	r5, r0
 80176b6:	460c      	mov	r4, r1
 80176b8:	4616      	mov	r6, r2
 80176ba:	d505      	bpl.n	80176c8 <__swrite+0x1e>
 80176bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80176c0:	2302      	movs	r3, #2
 80176c2:	2200      	movs	r2, #0
 80176c4:	f000 f9be 	bl	8017a44 <_lseek_r>
 80176c8:	89a3      	ldrh	r3, [r4, #12]
 80176ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80176ce:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80176d2:	81a3      	strh	r3, [r4, #12]
 80176d4:	4632      	mov	r2, r6
 80176d6:	463b      	mov	r3, r7
 80176d8:	4628      	mov	r0, r5
 80176da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80176de:	f000 b9e5 	b.w	8017aac <_write_r>

080176e2 <__sseek>:
 80176e2:	b510      	push	{r4, lr}
 80176e4:	460c      	mov	r4, r1
 80176e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80176ea:	f000 f9ab 	bl	8017a44 <_lseek_r>
 80176ee:	1c43      	adds	r3, r0, #1
 80176f0:	89a3      	ldrh	r3, [r4, #12]
 80176f2:	bf15      	itete	ne
 80176f4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80176f6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80176fa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80176fe:	81a3      	strheq	r3, [r4, #12]
 8017700:	bf18      	it	ne
 8017702:	81a3      	strhne	r3, [r4, #12]
 8017704:	bd10      	pop	{r4, pc}

08017706 <__sclose>:
 8017706:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801770a:	f000 b935 	b.w	8017978 <_close_r>

0801770e <_vsniprintf_r>:
 801770e:	b530      	push	{r4, r5, lr}
 8017710:	4614      	mov	r4, r2
 8017712:	2c00      	cmp	r4, #0
 8017714:	b09b      	sub	sp, #108	@ 0x6c
 8017716:	4605      	mov	r5, r0
 8017718:	461a      	mov	r2, r3
 801771a:	da05      	bge.n	8017728 <_vsniprintf_r+0x1a>
 801771c:	238b      	movs	r3, #139	@ 0x8b
 801771e:	6003      	str	r3, [r0, #0]
 8017720:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017724:	b01b      	add	sp, #108	@ 0x6c
 8017726:	bd30      	pop	{r4, r5, pc}
 8017728:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801772c:	f8ad 300c 	strh.w	r3, [sp, #12]
 8017730:	bf14      	ite	ne
 8017732:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8017736:	4623      	moveq	r3, r4
 8017738:	9302      	str	r3, [sp, #8]
 801773a:	9305      	str	r3, [sp, #20]
 801773c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8017740:	9100      	str	r1, [sp, #0]
 8017742:	9104      	str	r1, [sp, #16]
 8017744:	f8ad 300e 	strh.w	r3, [sp, #14]
 8017748:	4669      	mov	r1, sp
 801774a:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801774c:	f000 fadc 	bl	8017d08 <_svfiprintf_r>
 8017750:	1c43      	adds	r3, r0, #1
 8017752:	bfbc      	itt	lt
 8017754:	238b      	movlt	r3, #139	@ 0x8b
 8017756:	602b      	strlt	r3, [r5, #0]
 8017758:	2c00      	cmp	r4, #0
 801775a:	d0e3      	beq.n	8017724 <_vsniprintf_r+0x16>
 801775c:	9b00      	ldr	r3, [sp, #0]
 801775e:	2200      	movs	r2, #0
 8017760:	701a      	strb	r2, [r3, #0]
 8017762:	e7df      	b.n	8017724 <_vsniprintf_r+0x16>

08017764 <vsniprintf>:
 8017764:	b507      	push	{r0, r1, r2, lr}
 8017766:	9300      	str	r3, [sp, #0]
 8017768:	4613      	mov	r3, r2
 801776a:	460a      	mov	r2, r1
 801776c:	4601      	mov	r1, r0
 801776e:	4803      	ldr	r0, [pc, #12]	@ (801777c <vsniprintf+0x18>)
 8017770:	6800      	ldr	r0, [r0, #0]
 8017772:	f7ff ffcc 	bl	801770e <_vsniprintf_r>
 8017776:	b003      	add	sp, #12
 8017778:	f85d fb04 	ldr.w	pc, [sp], #4
 801777c:	20000290 	.word	0x20000290

08017780 <__swbuf_r>:
 8017780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017782:	460e      	mov	r6, r1
 8017784:	4614      	mov	r4, r2
 8017786:	4605      	mov	r5, r0
 8017788:	b118      	cbz	r0, 8017792 <__swbuf_r+0x12>
 801778a:	6a03      	ldr	r3, [r0, #32]
 801778c:	b90b      	cbnz	r3, 8017792 <__swbuf_r+0x12>
 801778e:	f7ff fea5 	bl	80174dc <__sinit>
 8017792:	69a3      	ldr	r3, [r4, #24]
 8017794:	60a3      	str	r3, [r4, #8]
 8017796:	89a3      	ldrh	r3, [r4, #12]
 8017798:	071a      	lsls	r2, r3, #28
 801779a:	d501      	bpl.n	80177a0 <__swbuf_r+0x20>
 801779c:	6923      	ldr	r3, [r4, #16]
 801779e:	b943      	cbnz	r3, 80177b2 <__swbuf_r+0x32>
 80177a0:	4621      	mov	r1, r4
 80177a2:	4628      	mov	r0, r5
 80177a4:	f000 f82a 	bl	80177fc <__swsetup_r>
 80177a8:	b118      	cbz	r0, 80177b2 <__swbuf_r+0x32>
 80177aa:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80177ae:	4638      	mov	r0, r7
 80177b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80177b2:	6823      	ldr	r3, [r4, #0]
 80177b4:	6922      	ldr	r2, [r4, #16]
 80177b6:	1a98      	subs	r0, r3, r2
 80177b8:	6963      	ldr	r3, [r4, #20]
 80177ba:	b2f6      	uxtb	r6, r6
 80177bc:	4283      	cmp	r3, r0
 80177be:	4637      	mov	r7, r6
 80177c0:	dc05      	bgt.n	80177ce <__swbuf_r+0x4e>
 80177c2:	4621      	mov	r1, r4
 80177c4:	4628      	mov	r0, r5
 80177c6:	f000 feef 	bl	80185a8 <_fflush_r>
 80177ca:	2800      	cmp	r0, #0
 80177cc:	d1ed      	bne.n	80177aa <__swbuf_r+0x2a>
 80177ce:	68a3      	ldr	r3, [r4, #8]
 80177d0:	3b01      	subs	r3, #1
 80177d2:	60a3      	str	r3, [r4, #8]
 80177d4:	6823      	ldr	r3, [r4, #0]
 80177d6:	1c5a      	adds	r2, r3, #1
 80177d8:	6022      	str	r2, [r4, #0]
 80177da:	701e      	strb	r6, [r3, #0]
 80177dc:	6962      	ldr	r2, [r4, #20]
 80177de:	1c43      	adds	r3, r0, #1
 80177e0:	429a      	cmp	r2, r3
 80177e2:	d004      	beq.n	80177ee <__swbuf_r+0x6e>
 80177e4:	89a3      	ldrh	r3, [r4, #12]
 80177e6:	07db      	lsls	r3, r3, #31
 80177e8:	d5e1      	bpl.n	80177ae <__swbuf_r+0x2e>
 80177ea:	2e0a      	cmp	r6, #10
 80177ec:	d1df      	bne.n	80177ae <__swbuf_r+0x2e>
 80177ee:	4621      	mov	r1, r4
 80177f0:	4628      	mov	r0, r5
 80177f2:	f000 fed9 	bl	80185a8 <_fflush_r>
 80177f6:	2800      	cmp	r0, #0
 80177f8:	d0d9      	beq.n	80177ae <__swbuf_r+0x2e>
 80177fa:	e7d6      	b.n	80177aa <__swbuf_r+0x2a>

080177fc <__swsetup_r>:
 80177fc:	b538      	push	{r3, r4, r5, lr}
 80177fe:	4b29      	ldr	r3, [pc, #164]	@ (80178a4 <__swsetup_r+0xa8>)
 8017800:	4605      	mov	r5, r0
 8017802:	6818      	ldr	r0, [r3, #0]
 8017804:	460c      	mov	r4, r1
 8017806:	b118      	cbz	r0, 8017810 <__swsetup_r+0x14>
 8017808:	6a03      	ldr	r3, [r0, #32]
 801780a:	b90b      	cbnz	r3, 8017810 <__swsetup_r+0x14>
 801780c:	f7ff fe66 	bl	80174dc <__sinit>
 8017810:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017814:	0719      	lsls	r1, r3, #28
 8017816:	d422      	bmi.n	801785e <__swsetup_r+0x62>
 8017818:	06da      	lsls	r2, r3, #27
 801781a:	d407      	bmi.n	801782c <__swsetup_r+0x30>
 801781c:	2209      	movs	r2, #9
 801781e:	602a      	str	r2, [r5, #0]
 8017820:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017824:	81a3      	strh	r3, [r4, #12]
 8017826:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801782a:	e033      	b.n	8017894 <__swsetup_r+0x98>
 801782c:	0758      	lsls	r0, r3, #29
 801782e:	d512      	bpl.n	8017856 <__swsetup_r+0x5a>
 8017830:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8017832:	b141      	cbz	r1, 8017846 <__swsetup_r+0x4a>
 8017834:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8017838:	4299      	cmp	r1, r3
 801783a:	d002      	beq.n	8017842 <__swsetup_r+0x46>
 801783c:	4628      	mov	r0, r5
 801783e:	f000 f9b5 	bl	8017bac <_free_r>
 8017842:	2300      	movs	r3, #0
 8017844:	6363      	str	r3, [r4, #52]	@ 0x34
 8017846:	89a3      	ldrh	r3, [r4, #12]
 8017848:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801784c:	81a3      	strh	r3, [r4, #12]
 801784e:	2300      	movs	r3, #0
 8017850:	6063      	str	r3, [r4, #4]
 8017852:	6923      	ldr	r3, [r4, #16]
 8017854:	6023      	str	r3, [r4, #0]
 8017856:	89a3      	ldrh	r3, [r4, #12]
 8017858:	f043 0308 	orr.w	r3, r3, #8
 801785c:	81a3      	strh	r3, [r4, #12]
 801785e:	6923      	ldr	r3, [r4, #16]
 8017860:	b94b      	cbnz	r3, 8017876 <__swsetup_r+0x7a>
 8017862:	89a3      	ldrh	r3, [r4, #12]
 8017864:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8017868:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801786c:	d003      	beq.n	8017876 <__swsetup_r+0x7a>
 801786e:	4621      	mov	r1, r4
 8017870:	4628      	mov	r0, r5
 8017872:	f000 fef9 	bl	8018668 <__smakebuf_r>
 8017876:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801787a:	f013 0201 	ands.w	r2, r3, #1
 801787e:	d00a      	beq.n	8017896 <__swsetup_r+0x9a>
 8017880:	2200      	movs	r2, #0
 8017882:	60a2      	str	r2, [r4, #8]
 8017884:	6962      	ldr	r2, [r4, #20]
 8017886:	4252      	negs	r2, r2
 8017888:	61a2      	str	r2, [r4, #24]
 801788a:	6922      	ldr	r2, [r4, #16]
 801788c:	b942      	cbnz	r2, 80178a0 <__swsetup_r+0xa4>
 801788e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8017892:	d1c5      	bne.n	8017820 <__swsetup_r+0x24>
 8017894:	bd38      	pop	{r3, r4, r5, pc}
 8017896:	0799      	lsls	r1, r3, #30
 8017898:	bf58      	it	pl
 801789a:	6962      	ldrpl	r2, [r4, #20]
 801789c:	60a2      	str	r2, [r4, #8]
 801789e:	e7f4      	b.n	801788a <__swsetup_r+0x8e>
 80178a0:	2000      	movs	r0, #0
 80178a2:	e7f7      	b.n	8017894 <__swsetup_r+0x98>
 80178a4:	20000290 	.word	0x20000290

080178a8 <memcmp>:
 80178a8:	b510      	push	{r4, lr}
 80178aa:	3901      	subs	r1, #1
 80178ac:	4402      	add	r2, r0
 80178ae:	4290      	cmp	r0, r2
 80178b0:	d101      	bne.n	80178b6 <memcmp+0xe>
 80178b2:	2000      	movs	r0, #0
 80178b4:	e005      	b.n	80178c2 <memcmp+0x1a>
 80178b6:	7803      	ldrb	r3, [r0, #0]
 80178b8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80178bc:	42a3      	cmp	r3, r4
 80178be:	d001      	beq.n	80178c4 <memcmp+0x1c>
 80178c0:	1b18      	subs	r0, r3, r4
 80178c2:	bd10      	pop	{r4, pc}
 80178c4:	3001      	adds	r0, #1
 80178c6:	e7f2      	b.n	80178ae <memcmp+0x6>

080178c8 <memmove>:
 80178c8:	4288      	cmp	r0, r1
 80178ca:	b510      	push	{r4, lr}
 80178cc:	eb01 0402 	add.w	r4, r1, r2
 80178d0:	d902      	bls.n	80178d8 <memmove+0x10>
 80178d2:	4284      	cmp	r4, r0
 80178d4:	4623      	mov	r3, r4
 80178d6:	d807      	bhi.n	80178e8 <memmove+0x20>
 80178d8:	1e43      	subs	r3, r0, #1
 80178da:	42a1      	cmp	r1, r4
 80178dc:	d008      	beq.n	80178f0 <memmove+0x28>
 80178de:	f811 2b01 	ldrb.w	r2, [r1], #1
 80178e2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80178e6:	e7f8      	b.n	80178da <memmove+0x12>
 80178e8:	4402      	add	r2, r0
 80178ea:	4601      	mov	r1, r0
 80178ec:	428a      	cmp	r2, r1
 80178ee:	d100      	bne.n	80178f2 <memmove+0x2a>
 80178f0:	bd10      	pop	{r4, pc}
 80178f2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80178f6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80178fa:	e7f7      	b.n	80178ec <memmove+0x24>

080178fc <memset>:
 80178fc:	4402      	add	r2, r0
 80178fe:	4603      	mov	r3, r0
 8017900:	4293      	cmp	r3, r2
 8017902:	d100      	bne.n	8017906 <memset+0xa>
 8017904:	4770      	bx	lr
 8017906:	f803 1b01 	strb.w	r1, [r3], #1
 801790a:	e7f9      	b.n	8017900 <memset+0x4>

0801790c <strchr>:
 801790c:	b2c9      	uxtb	r1, r1
 801790e:	4603      	mov	r3, r0
 8017910:	4618      	mov	r0, r3
 8017912:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017916:	b112      	cbz	r2, 801791e <strchr+0x12>
 8017918:	428a      	cmp	r2, r1
 801791a:	d1f9      	bne.n	8017910 <strchr+0x4>
 801791c:	4770      	bx	lr
 801791e:	2900      	cmp	r1, #0
 8017920:	bf18      	it	ne
 8017922:	2000      	movne	r0, #0
 8017924:	4770      	bx	lr

08017926 <strncmp>:
 8017926:	b510      	push	{r4, lr}
 8017928:	b16a      	cbz	r2, 8017946 <strncmp+0x20>
 801792a:	3901      	subs	r1, #1
 801792c:	1884      	adds	r4, r0, r2
 801792e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017932:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8017936:	429a      	cmp	r2, r3
 8017938:	d103      	bne.n	8017942 <strncmp+0x1c>
 801793a:	42a0      	cmp	r0, r4
 801793c:	d001      	beq.n	8017942 <strncmp+0x1c>
 801793e:	2a00      	cmp	r2, #0
 8017940:	d1f5      	bne.n	801792e <strncmp+0x8>
 8017942:	1ad0      	subs	r0, r2, r3
 8017944:	bd10      	pop	{r4, pc}
 8017946:	4610      	mov	r0, r2
 8017948:	e7fc      	b.n	8017944 <strncmp+0x1e>

0801794a <strstr>:
 801794a:	780a      	ldrb	r2, [r1, #0]
 801794c:	b570      	push	{r4, r5, r6, lr}
 801794e:	b96a      	cbnz	r2, 801796c <strstr+0x22>
 8017950:	bd70      	pop	{r4, r5, r6, pc}
 8017952:	429a      	cmp	r2, r3
 8017954:	d109      	bne.n	801796a <strstr+0x20>
 8017956:	460c      	mov	r4, r1
 8017958:	4605      	mov	r5, r0
 801795a:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 801795e:	2b00      	cmp	r3, #0
 8017960:	d0f6      	beq.n	8017950 <strstr+0x6>
 8017962:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8017966:	429e      	cmp	r6, r3
 8017968:	d0f7      	beq.n	801795a <strstr+0x10>
 801796a:	3001      	adds	r0, #1
 801796c:	7803      	ldrb	r3, [r0, #0]
 801796e:	2b00      	cmp	r3, #0
 8017970:	d1ef      	bne.n	8017952 <strstr+0x8>
 8017972:	4618      	mov	r0, r3
 8017974:	e7ec      	b.n	8017950 <strstr+0x6>
	...

08017978 <_close_r>:
 8017978:	b538      	push	{r3, r4, r5, lr}
 801797a:	4d06      	ldr	r5, [pc, #24]	@ (8017994 <_close_r+0x1c>)
 801797c:	2300      	movs	r3, #0
 801797e:	4604      	mov	r4, r0
 8017980:	4608      	mov	r0, r1
 8017982:	602b      	str	r3, [r5, #0]
 8017984:	f7ea faec 	bl	8001f60 <_close>
 8017988:	1c43      	adds	r3, r0, #1
 801798a:	d102      	bne.n	8017992 <_close_r+0x1a>
 801798c:	682b      	ldr	r3, [r5, #0]
 801798e:	b103      	cbz	r3, 8017992 <_close_r+0x1a>
 8017990:	6023      	str	r3, [r4, #0]
 8017992:	bd38      	pop	{r3, r4, r5, pc}
 8017994:	2000c224 	.word	0x2000c224

08017998 <_reclaim_reent>:
 8017998:	4b29      	ldr	r3, [pc, #164]	@ (8017a40 <_reclaim_reent+0xa8>)
 801799a:	681b      	ldr	r3, [r3, #0]
 801799c:	4283      	cmp	r3, r0
 801799e:	b570      	push	{r4, r5, r6, lr}
 80179a0:	4604      	mov	r4, r0
 80179a2:	d04b      	beq.n	8017a3c <_reclaim_reent+0xa4>
 80179a4:	69c3      	ldr	r3, [r0, #28]
 80179a6:	b1ab      	cbz	r3, 80179d4 <_reclaim_reent+0x3c>
 80179a8:	68db      	ldr	r3, [r3, #12]
 80179aa:	b16b      	cbz	r3, 80179c8 <_reclaim_reent+0x30>
 80179ac:	2500      	movs	r5, #0
 80179ae:	69e3      	ldr	r3, [r4, #28]
 80179b0:	68db      	ldr	r3, [r3, #12]
 80179b2:	5959      	ldr	r1, [r3, r5]
 80179b4:	2900      	cmp	r1, #0
 80179b6:	d13b      	bne.n	8017a30 <_reclaim_reent+0x98>
 80179b8:	3504      	adds	r5, #4
 80179ba:	2d80      	cmp	r5, #128	@ 0x80
 80179bc:	d1f7      	bne.n	80179ae <_reclaim_reent+0x16>
 80179be:	69e3      	ldr	r3, [r4, #28]
 80179c0:	4620      	mov	r0, r4
 80179c2:	68d9      	ldr	r1, [r3, #12]
 80179c4:	f000 f8f2 	bl	8017bac <_free_r>
 80179c8:	69e3      	ldr	r3, [r4, #28]
 80179ca:	6819      	ldr	r1, [r3, #0]
 80179cc:	b111      	cbz	r1, 80179d4 <_reclaim_reent+0x3c>
 80179ce:	4620      	mov	r0, r4
 80179d0:	f000 f8ec 	bl	8017bac <_free_r>
 80179d4:	6961      	ldr	r1, [r4, #20]
 80179d6:	b111      	cbz	r1, 80179de <_reclaim_reent+0x46>
 80179d8:	4620      	mov	r0, r4
 80179da:	f000 f8e7 	bl	8017bac <_free_r>
 80179de:	69e1      	ldr	r1, [r4, #28]
 80179e0:	b111      	cbz	r1, 80179e8 <_reclaim_reent+0x50>
 80179e2:	4620      	mov	r0, r4
 80179e4:	f000 f8e2 	bl	8017bac <_free_r>
 80179e8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80179ea:	b111      	cbz	r1, 80179f2 <_reclaim_reent+0x5a>
 80179ec:	4620      	mov	r0, r4
 80179ee:	f000 f8dd 	bl	8017bac <_free_r>
 80179f2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80179f4:	b111      	cbz	r1, 80179fc <_reclaim_reent+0x64>
 80179f6:	4620      	mov	r0, r4
 80179f8:	f000 f8d8 	bl	8017bac <_free_r>
 80179fc:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80179fe:	b111      	cbz	r1, 8017a06 <_reclaim_reent+0x6e>
 8017a00:	4620      	mov	r0, r4
 8017a02:	f000 f8d3 	bl	8017bac <_free_r>
 8017a06:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8017a08:	b111      	cbz	r1, 8017a10 <_reclaim_reent+0x78>
 8017a0a:	4620      	mov	r0, r4
 8017a0c:	f000 f8ce 	bl	8017bac <_free_r>
 8017a10:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8017a12:	b111      	cbz	r1, 8017a1a <_reclaim_reent+0x82>
 8017a14:	4620      	mov	r0, r4
 8017a16:	f000 f8c9 	bl	8017bac <_free_r>
 8017a1a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8017a1c:	b111      	cbz	r1, 8017a24 <_reclaim_reent+0x8c>
 8017a1e:	4620      	mov	r0, r4
 8017a20:	f000 f8c4 	bl	8017bac <_free_r>
 8017a24:	6a23      	ldr	r3, [r4, #32]
 8017a26:	b14b      	cbz	r3, 8017a3c <_reclaim_reent+0xa4>
 8017a28:	4620      	mov	r0, r4
 8017a2a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017a2e:	4718      	bx	r3
 8017a30:	680e      	ldr	r6, [r1, #0]
 8017a32:	4620      	mov	r0, r4
 8017a34:	f000 f8ba 	bl	8017bac <_free_r>
 8017a38:	4631      	mov	r1, r6
 8017a3a:	e7bb      	b.n	80179b4 <_reclaim_reent+0x1c>
 8017a3c:	bd70      	pop	{r4, r5, r6, pc}
 8017a3e:	bf00      	nop
 8017a40:	20000290 	.word	0x20000290

08017a44 <_lseek_r>:
 8017a44:	b538      	push	{r3, r4, r5, lr}
 8017a46:	4d07      	ldr	r5, [pc, #28]	@ (8017a64 <_lseek_r+0x20>)
 8017a48:	4604      	mov	r4, r0
 8017a4a:	4608      	mov	r0, r1
 8017a4c:	4611      	mov	r1, r2
 8017a4e:	2200      	movs	r2, #0
 8017a50:	602a      	str	r2, [r5, #0]
 8017a52:	461a      	mov	r2, r3
 8017a54:	f7ea faab 	bl	8001fae <_lseek>
 8017a58:	1c43      	adds	r3, r0, #1
 8017a5a:	d102      	bne.n	8017a62 <_lseek_r+0x1e>
 8017a5c:	682b      	ldr	r3, [r5, #0]
 8017a5e:	b103      	cbz	r3, 8017a62 <_lseek_r+0x1e>
 8017a60:	6023      	str	r3, [r4, #0]
 8017a62:	bd38      	pop	{r3, r4, r5, pc}
 8017a64:	2000c224 	.word	0x2000c224

08017a68 <_read_r>:
 8017a68:	b538      	push	{r3, r4, r5, lr}
 8017a6a:	4d07      	ldr	r5, [pc, #28]	@ (8017a88 <_read_r+0x20>)
 8017a6c:	4604      	mov	r4, r0
 8017a6e:	4608      	mov	r0, r1
 8017a70:	4611      	mov	r1, r2
 8017a72:	2200      	movs	r2, #0
 8017a74:	602a      	str	r2, [r5, #0]
 8017a76:	461a      	mov	r2, r3
 8017a78:	f7ea fa39 	bl	8001eee <_read>
 8017a7c:	1c43      	adds	r3, r0, #1
 8017a7e:	d102      	bne.n	8017a86 <_read_r+0x1e>
 8017a80:	682b      	ldr	r3, [r5, #0]
 8017a82:	b103      	cbz	r3, 8017a86 <_read_r+0x1e>
 8017a84:	6023      	str	r3, [r4, #0]
 8017a86:	bd38      	pop	{r3, r4, r5, pc}
 8017a88:	2000c224 	.word	0x2000c224

08017a8c <_sbrk_r>:
 8017a8c:	b538      	push	{r3, r4, r5, lr}
 8017a8e:	4d06      	ldr	r5, [pc, #24]	@ (8017aa8 <_sbrk_r+0x1c>)
 8017a90:	2300      	movs	r3, #0
 8017a92:	4604      	mov	r4, r0
 8017a94:	4608      	mov	r0, r1
 8017a96:	602b      	str	r3, [r5, #0]
 8017a98:	f7ea fa96 	bl	8001fc8 <_sbrk>
 8017a9c:	1c43      	adds	r3, r0, #1
 8017a9e:	d102      	bne.n	8017aa6 <_sbrk_r+0x1a>
 8017aa0:	682b      	ldr	r3, [r5, #0]
 8017aa2:	b103      	cbz	r3, 8017aa6 <_sbrk_r+0x1a>
 8017aa4:	6023      	str	r3, [r4, #0]
 8017aa6:	bd38      	pop	{r3, r4, r5, pc}
 8017aa8:	2000c224 	.word	0x2000c224

08017aac <_write_r>:
 8017aac:	b538      	push	{r3, r4, r5, lr}
 8017aae:	4d07      	ldr	r5, [pc, #28]	@ (8017acc <_write_r+0x20>)
 8017ab0:	4604      	mov	r4, r0
 8017ab2:	4608      	mov	r0, r1
 8017ab4:	4611      	mov	r1, r2
 8017ab6:	2200      	movs	r2, #0
 8017ab8:	602a      	str	r2, [r5, #0]
 8017aba:	461a      	mov	r2, r3
 8017abc:	f7ea fa34 	bl	8001f28 <_write>
 8017ac0:	1c43      	adds	r3, r0, #1
 8017ac2:	d102      	bne.n	8017aca <_write_r+0x1e>
 8017ac4:	682b      	ldr	r3, [r5, #0]
 8017ac6:	b103      	cbz	r3, 8017aca <_write_r+0x1e>
 8017ac8:	6023      	str	r3, [r4, #0]
 8017aca:	bd38      	pop	{r3, r4, r5, pc}
 8017acc:	2000c224 	.word	0x2000c224

08017ad0 <__errno>:
 8017ad0:	4b01      	ldr	r3, [pc, #4]	@ (8017ad8 <__errno+0x8>)
 8017ad2:	6818      	ldr	r0, [r3, #0]
 8017ad4:	4770      	bx	lr
 8017ad6:	bf00      	nop
 8017ad8:	20000290 	.word	0x20000290

08017adc <__libc_init_array>:
 8017adc:	b570      	push	{r4, r5, r6, lr}
 8017ade:	4d0d      	ldr	r5, [pc, #52]	@ (8017b14 <__libc_init_array+0x38>)
 8017ae0:	4c0d      	ldr	r4, [pc, #52]	@ (8017b18 <__libc_init_array+0x3c>)
 8017ae2:	1b64      	subs	r4, r4, r5
 8017ae4:	10a4      	asrs	r4, r4, #2
 8017ae6:	2600      	movs	r6, #0
 8017ae8:	42a6      	cmp	r6, r4
 8017aea:	d109      	bne.n	8017b00 <__libc_init_array+0x24>
 8017aec:	4d0b      	ldr	r5, [pc, #44]	@ (8017b1c <__libc_init_array+0x40>)
 8017aee:	4c0c      	ldr	r4, [pc, #48]	@ (8017b20 <__libc_init_array+0x44>)
 8017af0:	f000 fe64 	bl	80187bc <_init>
 8017af4:	1b64      	subs	r4, r4, r5
 8017af6:	10a4      	asrs	r4, r4, #2
 8017af8:	2600      	movs	r6, #0
 8017afa:	42a6      	cmp	r6, r4
 8017afc:	d105      	bne.n	8017b0a <__libc_init_array+0x2e>
 8017afe:	bd70      	pop	{r4, r5, r6, pc}
 8017b00:	f855 3b04 	ldr.w	r3, [r5], #4
 8017b04:	4798      	blx	r3
 8017b06:	3601      	adds	r6, #1
 8017b08:	e7ee      	b.n	8017ae8 <__libc_init_array+0xc>
 8017b0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8017b0e:	4798      	blx	r3
 8017b10:	3601      	adds	r6, #1
 8017b12:	e7f2      	b.n	8017afa <__libc_init_array+0x1e>
 8017b14:	080197bc 	.word	0x080197bc
 8017b18:	080197bc 	.word	0x080197bc
 8017b1c:	080197bc 	.word	0x080197bc
 8017b20:	080197c4 	.word	0x080197c4

08017b24 <__retarget_lock_init_recursive>:
 8017b24:	4770      	bx	lr

08017b26 <__retarget_lock_acquire_recursive>:
 8017b26:	4770      	bx	lr

08017b28 <__retarget_lock_release_recursive>:
 8017b28:	4770      	bx	lr

08017b2a <strcpy>:
 8017b2a:	4603      	mov	r3, r0
 8017b2c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8017b30:	f803 2b01 	strb.w	r2, [r3], #1
 8017b34:	2a00      	cmp	r2, #0
 8017b36:	d1f9      	bne.n	8017b2c <strcpy+0x2>
 8017b38:	4770      	bx	lr

08017b3a <memcpy>:
 8017b3a:	440a      	add	r2, r1
 8017b3c:	4291      	cmp	r1, r2
 8017b3e:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8017b42:	d100      	bne.n	8017b46 <memcpy+0xc>
 8017b44:	4770      	bx	lr
 8017b46:	b510      	push	{r4, lr}
 8017b48:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017b4c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8017b50:	4291      	cmp	r1, r2
 8017b52:	d1f9      	bne.n	8017b48 <memcpy+0xe>
 8017b54:	bd10      	pop	{r4, pc}
	...

08017b58 <__assert_func>:
 8017b58:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8017b5a:	4614      	mov	r4, r2
 8017b5c:	461a      	mov	r2, r3
 8017b5e:	4b09      	ldr	r3, [pc, #36]	@ (8017b84 <__assert_func+0x2c>)
 8017b60:	681b      	ldr	r3, [r3, #0]
 8017b62:	4605      	mov	r5, r0
 8017b64:	68d8      	ldr	r0, [r3, #12]
 8017b66:	b954      	cbnz	r4, 8017b7e <__assert_func+0x26>
 8017b68:	4b07      	ldr	r3, [pc, #28]	@ (8017b88 <__assert_func+0x30>)
 8017b6a:	461c      	mov	r4, r3
 8017b6c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8017b70:	9100      	str	r1, [sp, #0]
 8017b72:	462b      	mov	r3, r5
 8017b74:	4905      	ldr	r1, [pc, #20]	@ (8017b8c <__assert_func+0x34>)
 8017b76:	f000 fd3f 	bl	80185f8 <fiprintf>
 8017b7a:	f000 fdd3 	bl	8018724 <abort>
 8017b7e:	4b04      	ldr	r3, [pc, #16]	@ (8017b90 <__assert_func+0x38>)
 8017b80:	e7f4      	b.n	8017b6c <__assert_func+0x14>
 8017b82:	bf00      	nop
 8017b84:	20000290 	.word	0x20000290
 8017b88:	0801977d 	.word	0x0801977d
 8017b8c:	0801974f 	.word	0x0801974f
 8017b90:	08019742 	.word	0x08019742

08017b94 <__env_lock>:
 8017b94:	4801      	ldr	r0, [pc, #4]	@ (8017b9c <__env_lock+0x8>)
 8017b96:	f7ff bfc6 	b.w	8017b26 <__retarget_lock_acquire_recursive>
 8017b9a:	bf00      	nop
 8017b9c:	2000c228 	.word	0x2000c228

08017ba0 <__env_unlock>:
 8017ba0:	4801      	ldr	r0, [pc, #4]	@ (8017ba8 <__env_unlock+0x8>)
 8017ba2:	f7ff bfc1 	b.w	8017b28 <__retarget_lock_release_recursive>
 8017ba6:	bf00      	nop
 8017ba8:	2000c228 	.word	0x2000c228

08017bac <_free_r>:
 8017bac:	b538      	push	{r3, r4, r5, lr}
 8017bae:	4605      	mov	r5, r0
 8017bb0:	2900      	cmp	r1, #0
 8017bb2:	d041      	beq.n	8017c38 <_free_r+0x8c>
 8017bb4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017bb8:	1f0c      	subs	r4, r1, #4
 8017bba:	2b00      	cmp	r3, #0
 8017bbc:	bfb8      	it	lt
 8017bbe:	18e4      	addlt	r4, r4, r3
 8017bc0:	f7ff fada 	bl	8017178 <__malloc_lock>
 8017bc4:	4a1d      	ldr	r2, [pc, #116]	@ (8017c3c <_free_r+0x90>)
 8017bc6:	6813      	ldr	r3, [r2, #0]
 8017bc8:	b933      	cbnz	r3, 8017bd8 <_free_r+0x2c>
 8017bca:	6063      	str	r3, [r4, #4]
 8017bcc:	6014      	str	r4, [r2, #0]
 8017bce:	4628      	mov	r0, r5
 8017bd0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017bd4:	f7ff bad6 	b.w	8017184 <__malloc_unlock>
 8017bd8:	42a3      	cmp	r3, r4
 8017bda:	d908      	bls.n	8017bee <_free_r+0x42>
 8017bdc:	6820      	ldr	r0, [r4, #0]
 8017bde:	1821      	adds	r1, r4, r0
 8017be0:	428b      	cmp	r3, r1
 8017be2:	bf01      	itttt	eq
 8017be4:	6819      	ldreq	r1, [r3, #0]
 8017be6:	685b      	ldreq	r3, [r3, #4]
 8017be8:	1809      	addeq	r1, r1, r0
 8017bea:	6021      	streq	r1, [r4, #0]
 8017bec:	e7ed      	b.n	8017bca <_free_r+0x1e>
 8017bee:	461a      	mov	r2, r3
 8017bf0:	685b      	ldr	r3, [r3, #4]
 8017bf2:	b10b      	cbz	r3, 8017bf8 <_free_r+0x4c>
 8017bf4:	42a3      	cmp	r3, r4
 8017bf6:	d9fa      	bls.n	8017bee <_free_r+0x42>
 8017bf8:	6811      	ldr	r1, [r2, #0]
 8017bfa:	1850      	adds	r0, r2, r1
 8017bfc:	42a0      	cmp	r0, r4
 8017bfe:	d10b      	bne.n	8017c18 <_free_r+0x6c>
 8017c00:	6820      	ldr	r0, [r4, #0]
 8017c02:	4401      	add	r1, r0
 8017c04:	1850      	adds	r0, r2, r1
 8017c06:	4283      	cmp	r3, r0
 8017c08:	6011      	str	r1, [r2, #0]
 8017c0a:	d1e0      	bne.n	8017bce <_free_r+0x22>
 8017c0c:	6818      	ldr	r0, [r3, #0]
 8017c0e:	685b      	ldr	r3, [r3, #4]
 8017c10:	6053      	str	r3, [r2, #4]
 8017c12:	4408      	add	r0, r1
 8017c14:	6010      	str	r0, [r2, #0]
 8017c16:	e7da      	b.n	8017bce <_free_r+0x22>
 8017c18:	d902      	bls.n	8017c20 <_free_r+0x74>
 8017c1a:	230c      	movs	r3, #12
 8017c1c:	602b      	str	r3, [r5, #0]
 8017c1e:	e7d6      	b.n	8017bce <_free_r+0x22>
 8017c20:	6820      	ldr	r0, [r4, #0]
 8017c22:	1821      	adds	r1, r4, r0
 8017c24:	428b      	cmp	r3, r1
 8017c26:	bf04      	itt	eq
 8017c28:	6819      	ldreq	r1, [r3, #0]
 8017c2a:	685b      	ldreq	r3, [r3, #4]
 8017c2c:	6063      	str	r3, [r4, #4]
 8017c2e:	bf04      	itt	eq
 8017c30:	1809      	addeq	r1, r1, r0
 8017c32:	6021      	streq	r1, [r4, #0]
 8017c34:	6054      	str	r4, [r2, #4]
 8017c36:	e7ca      	b.n	8017bce <_free_r+0x22>
 8017c38:	bd38      	pop	{r3, r4, r5, pc}
 8017c3a:	bf00      	nop
 8017c3c:	2000c0e4 	.word	0x2000c0e4

08017c40 <_malloc_usable_size_r>:
 8017c40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017c44:	1f18      	subs	r0, r3, #4
 8017c46:	2b00      	cmp	r3, #0
 8017c48:	bfbc      	itt	lt
 8017c4a:	580b      	ldrlt	r3, [r1, r0]
 8017c4c:	18c0      	addlt	r0, r0, r3
 8017c4e:	4770      	bx	lr

08017c50 <__ssputs_r>:
 8017c50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017c54:	688e      	ldr	r6, [r1, #8]
 8017c56:	461f      	mov	r7, r3
 8017c58:	42be      	cmp	r6, r7
 8017c5a:	680b      	ldr	r3, [r1, #0]
 8017c5c:	4682      	mov	sl, r0
 8017c5e:	460c      	mov	r4, r1
 8017c60:	4690      	mov	r8, r2
 8017c62:	d82d      	bhi.n	8017cc0 <__ssputs_r+0x70>
 8017c64:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8017c68:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8017c6c:	d026      	beq.n	8017cbc <__ssputs_r+0x6c>
 8017c6e:	6965      	ldr	r5, [r4, #20]
 8017c70:	6909      	ldr	r1, [r1, #16]
 8017c72:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8017c76:	eba3 0901 	sub.w	r9, r3, r1
 8017c7a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8017c7e:	1c7b      	adds	r3, r7, #1
 8017c80:	444b      	add	r3, r9
 8017c82:	106d      	asrs	r5, r5, #1
 8017c84:	429d      	cmp	r5, r3
 8017c86:	bf38      	it	cc
 8017c88:	461d      	movcc	r5, r3
 8017c8a:	0553      	lsls	r3, r2, #21
 8017c8c:	d527      	bpl.n	8017cde <__ssputs_r+0x8e>
 8017c8e:	4629      	mov	r1, r5
 8017c90:	f7ff f9f2 	bl	8017078 <_malloc_r>
 8017c94:	4606      	mov	r6, r0
 8017c96:	b360      	cbz	r0, 8017cf2 <__ssputs_r+0xa2>
 8017c98:	6921      	ldr	r1, [r4, #16]
 8017c9a:	464a      	mov	r2, r9
 8017c9c:	f7ff ff4d 	bl	8017b3a <memcpy>
 8017ca0:	89a3      	ldrh	r3, [r4, #12]
 8017ca2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8017ca6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8017caa:	81a3      	strh	r3, [r4, #12]
 8017cac:	6126      	str	r6, [r4, #16]
 8017cae:	6165      	str	r5, [r4, #20]
 8017cb0:	444e      	add	r6, r9
 8017cb2:	eba5 0509 	sub.w	r5, r5, r9
 8017cb6:	6026      	str	r6, [r4, #0]
 8017cb8:	60a5      	str	r5, [r4, #8]
 8017cba:	463e      	mov	r6, r7
 8017cbc:	42be      	cmp	r6, r7
 8017cbe:	d900      	bls.n	8017cc2 <__ssputs_r+0x72>
 8017cc0:	463e      	mov	r6, r7
 8017cc2:	6820      	ldr	r0, [r4, #0]
 8017cc4:	4632      	mov	r2, r6
 8017cc6:	4641      	mov	r1, r8
 8017cc8:	f7ff fdfe 	bl	80178c8 <memmove>
 8017ccc:	68a3      	ldr	r3, [r4, #8]
 8017cce:	1b9b      	subs	r3, r3, r6
 8017cd0:	60a3      	str	r3, [r4, #8]
 8017cd2:	6823      	ldr	r3, [r4, #0]
 8017cd4:	4433      	add	r3, r6
 8017cd6:	6023      	str	r3, [r4, #0]
 8017cd8:	2000      	movs	r0, #0
 8017cda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017cde:	462a      	mov	r2, r5
 8017ce0:	f7ff faca 	bl	8017278 <_realloc_r>
 8017ce4:	4606      	mov	r6, r0
 8017ce6:	2800      	cmp	r0, #0
 8017ce8:	d1e0      	bne.n	8017cac <__ssputs_r+0x5c>
 8017cea:	6921      	ldr	r1, [r4, #16]
 8017cec:	4650      	mov	r0, sl
 8017cee:	f7ff ff5d 	bl	8017bac <_free_r>
 8017cf2:	230c      	movs	r3, #12
 8017cf4:	f8ca 3000 	str.w	r3, [sl]
 8017cf8:	89a3      	ldrh	r3, [r4, #12]
 8017cfa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017cfe:	81a3      	strh	r3, [r4, #12]
 8017d00:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017d04:	e7e9      	b.n	8017cda <__ssputs_r+0x8a>
	...

08017d08 <_svfiprintf_r>:
 8017d08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017d0c:	4698      	mov	r8, r3
 8017d0e:	898b      	ldrh	r3, [r1, #12]
 8017d10:	061b      	lsls	r3, r3, #24
 8017d12:	b09d      	sub	sp, #116	@ 0x74
 8017d14:	4607      	mov	r7, r0
 8017d16:	460d      	mov	r5, r1
 8017d18:	4614      	mov	r4, r2
 8017d1a:	d510      	bpl.n	8017d3e <_svfiprintf_r+0x36>
 8017d1c:	690b      	ldr	r3, [r1, #16]
 8017d1e:	b973      	cbnz	r3, 8017d3e <_svfiprintf_r+0x36>
 8017d20:	2140      	movs	r1, #64	@ 0x40
 8017d22:	f7ff f9a9 	bl	8017078 <_malloc_r>
 8017d26:	6028      	str	r0, [r5, #0]
 8017d28:	6128      	str	r0, [r5, #16]
 8017d2a:	b930      	cbnz	r0, 8017d3a <_svfiprintf_r+0x32>
 8017d2c:	230c      	movs	r3, #12
 8017d2e:	603b      	str	r3, [r7, #0]
 8017d30:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017d34:	b01d      	add	sp, #116	@ 0x74
 8017d36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017d3a:	2340      	movs	r3, #64	@ 0x40
 8017d3c:	616b      	str	r3, [r5, #20]
 8017d3e:	2300      	movs	r3, #0
 8017d40:	9309      	str	r3, [sp, #36]	@ 0x24
 8017d42:	2320      	movs	r3, #32
 8017d44:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8017d48:	f8cd 800c 	str.w	r8, [sp, #12]
 8017d4c:	2330      	movs	r3, #48	@ 0x30
 8017d4e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8017eec <_svfiprintf_r+0x1e4>
 8017d52:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8017d56:	f04f 0901 	mov.w	r9, #1
 8017d5a:	4623      	mov	r3, r4
 8017d5c:	469a      	mov	sl, r3
 8017d5e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017d62:	b10a      	cbz	r2, 8017d68 <_svfiprintf_r+0x60>
 8017d64:	2a25      	cmp	r2, #37	@ 0x25
 8017d66:	d1f9      	bne.n	8017d5c <_svfiprintf_r+0x54>
 8017d68:	ebba 0b04 	subs.w	fp, sl, r4
 8017d6c:	d00b      	beq.n	8017d86 <_svfiprintf_r+0x7e>
 8017d6e:	465b      	mov	r3, fp
 8017d70:	4622      	mov	r2, r4
 8017d72:	4629      	mov	r1, r5
 8017d74:	4638      	mov	r0, r7
 8017d76:	f7ff ff6b 	bl	8017c50 <__ssputs_r>
 8017d7a:	3001      	adds	r0, #1
 8017d7c:	f000 80a7 	beq.w	8017ece <_svfiprintf_r+0x1c6>
 8017d80:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8017d82:	445a      	add	r2, fp
 8017d84:	9209      	str	r2, [sp, #36]	@ 0x24
 8017d86:	f89a 3000 	ldrb.w	r3, [sl]
 8017d8a:	2b00      	cmp	r3, #0
 8017d8c:	f000 809f 	beq.w	8017ece <_svfiprintf_r+0x1c6>
 8017d90:	2300      	movs	r3, #0
 8017d92:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8017d96:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017d9a:	f10a 0a01 	add.w	sl, sl, #1
 8017d9e:	9304      	str	r3, [sp, #16]
 8017da0:	9307      	str	r3, [sp, #28]
 8017da2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8017da6:	931a      	str	r3, [sp, #104]	@ 0x68
 8017da8:	4654      	mov	r4, sl
 8017daa:	2205      	movs	r2, #5
 8017dac:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017db0:	484e      	ldr	r0, [pc, #312]	@ (8017eec <_svfiprintf_r+0x1e4>)
 8017db2:	f7e8 fa25 	bl	8000200 <memchr>
 8017db6:	9a04      	ldr	r2, [sp, #16]
 8017db8:	b9d8      	cbnz	r0, 8017df2 <_svfiprintf_r+0xea>
 8017dba:	06d0      	lsls	r0, r2, #27
 8017dbc:	bf44      	itt	mi
 8017dbe:	2320      	movmi	r3, #32
 8017dc0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017dc4:	0711      	lsls	r1, r2, #28
 8017dc6:	bf44      	itt	mi
 8017dc8:	232b      	movmi	r3, #43	@ 0x2b
 8017dca:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017dce:	f89a 3000 	ldrb.w	r3, [sl]
 8017dd2:	2b2a      	cmp	r3, #42	@ 0x2a
 8017dd4:	d015      	beq.n	8017e02 <_svfiprintf_r+0xfa>
 8017dd6:	9a07      	ldr	r2, [sp, #28]
 8017dd8:	4654      	mov	r4, sl
 8017dda:	2000      	movs	r0, #0
 8017ddc:	f04f 0c0a 	mov.w	ip, #10
 8017de0:	4621      	mov	r1, r4
 8017de2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017de6:	3b30      	subs	r3, #48	@ 0x30
 8017de8:	2b09      	cmp	r3, #9
 8017dea:	d94b      	bls.n	8017e84 <_svfiprintf_r+0x17c>
 8017dec:	b1b0      	cbz	r0, 8017e1c <_svfiprintf_r+0x114>
 8017dee:	9207      	str	r2, [sp, #28]
 8017df0:	e014      	b.n	8017e1c <_svfiprintf_r+0x114>
 8017df2:	eba0 0308 	sub.w	r3, r0, r8
 8017df6:	fa09 f303 	lsl.w	r3, r9, r3
 8017dfa:	4313      	orrs	r3, r2
 8017dfc:	9304      	str	r3, [sp, #16]
 8017dfe:	46a2      	mov	sl, r4
 8017e00:	e7d2      	b.n	8017da8 <_svfiprintf_r+0xa0>
 8017e02:	9b03      	ldr	r3, [sp, #12]
 8017e04:	1d19      	adds	r1, r3, #4
 8017e06:	681b      	ldr	r3, [r3, #0]
 8017e08:	9103      	str	r1, [sp, #12]
 8017e0a:	2b00      	cmp	r3, #0
 8017e0c:	bfbb      	ittet	lt
 8017e0e:	425b      	neglt	r3, r3
 8017e10:	f042 0202 	orrlt.w	r2, r2, #2
 8017e14:	9307      	strge	r3, [sp, #28]
 8017e16:	9307      	strlt	r3, [sp, #28]
 8017e18:	bfb8      	it	lt
 8017e1a:	9204      	strlt	r2, [sp, #16]
 8017e1c:	7823      	ldrb	r3, [r4, #0]
 8017e1e:	2b2e      	cmp	r3, #46	@ 0x2e
 8017e20:	d10a      	bne.n	8017e38 <_svfiprintf_r+0x130>
 8017e22:	7863      	ldrb	r3, [r4, #1]
 8017e24:	2b2a      	cmp	r3, #42	@ 0x2a
 8017e26:	d132      	bne.n	8017e8e <_svfiprintf_r+0x186>
 8017e28:	9b03      	ldr	r3, [sp, #12]
 8017e2a:	1d1a      	adds	r2, r3, #4
 8017e2c:	681b      	ldr	r3, [r3, #0]
 8017e2e:	9203      	str	r2, [sp, #12]
 8017e30:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8017e34:	3402      	adds	r4, #2
 8017e36:	9305      	str	r3, [sp, #20]
 8017e38:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8017efc <_svfiprintf_r+0x1f4>
 8017e3c:	7821      	ldrb	r1, [r4, #0]
 8017e3e:	2203      	movs	r2, #3
 8017e40:	4650      	mov	r0, sl
 8017e42:	f7e8 f9dd 	bl	8000200 <memchr>
 8017e46:	b138      	cbz	r0, 8017e58 <_svfiprintf_r+0x150>
 8017e48:	9b04      	ldr	r3, [sp, #16]
 8017e4a:	eba0 000a 	sub.w	r0, r0, sl
 8017e4e:	2240      	movs	r2, #64	@ 0x40
 8017e50:	4082      	lsls	r2, r0
 8017e52:	4313      	orrs	r3, r2
 8017e54:	3401      	adds	r4, #1
 8017e56:	9304      	str	r3, [sp, #16]
 8017e58:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017e5c:	4824      	ldr	r0, [pc, #144]	@ (8017ef0 <_svfiprintf_r+0x1e8>)
 8017e5e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8017e62:	2206      	movs	r2, #6
 8017e64:	f7e8 f9cc 	bl	8000200 <memchr>
 8017e68:	2800      	cmp	r0, #0
 8017e6a:	d036      	beq.n	8017eda <_svfiprintf_r+0x1d2>
 8017e6c:	4b21      	ldr	r3, [pc, #132]	@ (8017ef4 <_svfiprintf_r+0x1ec>)
 8017e6e:	bb1b      	cbnz	r3, 8017eb8 <_svfiprintf_r+0x1b0>
 8017e70:	9b03      	ldr	r3, [sp, #12]
 8017e72:	3307      	adds	r3, #7
 8017e74:	f023 0307 	bic.w	r3, r3, #7
 8017e78:	3308      	adds	r3, #8
 8017e7a:	9303      	str	r3, [sp, #12]
 8017e7c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017e7e:	4433      	add	r3, r6
 8017e80:	9309      	str	r3, [sp, #36]	@ 0x24
 8017e82:	e76a      	b.n	8017d5a <_svfiprintf_r+0x52>
 8017e84:	fb0c 3202 	mla	r2, ip, r2, r3
 8017e88:	460c      	mov	r4, r1
 8017e8a:	2001      	movs	r0, #1
 8017e8c:	e7a8      	b.n	8017de0 <_svfiprintf_r+0xd8>
 8017e8e:	2300      	movs	r3, #0
 8017e90:	3401      	adds	r4, #1
 8017e92:	9305      	str	r3, [sp, #20]
 8017e94:	4619      	mov	r1, r3
 8017e96:	f04f 0c0a 	mov.w	ip, #10
 8017e9a:	4620      	mov	r0, r4
 8017e9c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017ea0:	3a30      	subs	r2, #48	@ 0x30
 8017ea2:	2a09      	cmp	r2, #9
 8017ea4:	d903      	bls.n	8017eae <_svfiprintf_r+0x1a6>
 8017ea6:	2b00      	cmp	r3, #0
 8017ea8:	d0c6      	beq.n	8017e38 <_svfiprintf_r+0x130>
 8017eaa:	9105      	str	r1, [sp, #20]
 8017eac:	e7c4      	b.n	8017e38 <_svfiprintf_r+0x130>
 8017eae:	fb0c 2101 	mla	r1, ip, r1, r2
 8017eb2:	4604      	mov	r4, r0
 8017eb4:	2301      	movs	r3, #1
 8017eb6:	e7f0      	b.n	8017e9a <_svfiprintf_r+0x192>
 8017eb8:	ab03      	add	r3, sp, #12
 8017eba:	9300      	str	r3, [sp, #0]
 8017ebc:	462a      	mov	r2, r5
 8017ebe:	4b0e      	ldr	r3, [pc, #56]	@ (8017ef8 <_svfiprintf_r+0x1f0>)
 8017ec0:	a904      	add	r1, sp, #16
 8017ec2:	4638      	mov	r0, r7
 8017ec4:	f3af 8000 	nop.w
 8017ec8:	1c42      	adds	r2, r0, #1
 8017eca:	4606      	mov	r6, r0
 8017ecc:	d1d6      	bne.n	8017e7c <_svfiprintf_r+0x174>
 8017ece:	89ab      	ldrh	r3, [r5, #12]
 8017ed0:	065b      	lsls	r3, r3, #25
 8017ed2:	f53f af2d 	bmi.w	8017d30 <_svfiprintf_r+0x28>
 8017ed6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017ed8:	e72c      	b.n	8017d34 <_svfiprintf_r+0x2c>
 8017eda:	ab03      	add	r3, sp, #12
 8017edc:	9300      	str	r3, [sp, #0]
 8017ede:	462a      	mov	r2, r5
 8017ee0:	4b05      	ldr	r3, [pc, #20]	@ (8017ef8 <_svfiprintf_r+0x1f0>)
 8017ee2:	a904      	add	r1, sp, #16
 8017ee4:	4638      	mov	r0, r7
 8017ee6:	f000 f9bb 	bl	8018260 <_printf_i>
 8017eea:	e7ed      	b.n	8017ec8 <_svfiprintf_r+0x1c0>
 8017eec:	0801977e 	.word	0x0801977e
 8017ef0:	08019788 	.word	0x08019788
 8017ef4:	00000000 	.word	0x00000000
 8017ef8:	08017c51 	.word	0x08017c51
 8017efc:	08019784 	.word	0x08019784

08017f00 <__sfputc_r>:
 8017f00:	6893      	ldr	r3, [r2, #8]
 8017f02:	3b01      	subs	r3, #1
 8017f04:	2b00      	cmp	r3, #0
 8017f06:	b410      	push	{r4}
 8017f08:	6093      	str	r3, [r2, #8]
 8017f0a:	da08      	bge.n	8017f1e <__sfputc_r+0x1e>
 8017f0c:	6994      	ldr	r4, [r2, #24]
 8017f0e:	42a3      	cmp	r3, r4
 8017f10:	db01      	blt.n	8017f16 <__sfputc_r+0x16>
 8017f12:	290a      	cmp	r1, #10
 8017f14:	d103      	bne.n	8017f1e <__sfputc_r+0x1e>
 8017f16:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017f1a:	f7ff bc31 	b.w	8017780 <__swbuf_r>
 8017f1e:	6813      	ldr	r3, [r2, #0]
 8017f20:	1c58      	adds	r0, r3, #1
 8017f22:	6010      	str	r0, [r2, #0]
 8017f24:	7019      	strb	r1, [r3, #0]
 8017f26:	4608      	mov	r0, r1
 8017f28:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017f2c:	4770      	bx	lr

08017f2e <__sfputs_r>:
 8017f2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017f30:	4606      	mov	r6, r0
 8017f32:	460f      	mov	r7, r1
 8017f34:	4614      	mov	r4, r2
 8017f36:	18d5      	adds	r5, r2, r3
 8017f38:	42ac      	cmp	r4, r5
 8017f3a:	d101      	bne.n	8017f40 <__sfputs_r+0x12>
 8017f3c:	2000      	movs	r0, #0
 8017f3e:	e007      	b.n	8017f50 <__sfputs_r+0x22>
 8017f40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017f44:	463a      	mov	r2, r7
 8017f46:	4630      	mov	r0, r6
 8017f48:	f7ff ffda 	bl	8017f00 <__sfputc_r>
 8017f4c:	1c43      	adds	r3, r0, #1
 8017f4e:	d1f3      	bne.n	8017f38 <__sfputs_r+0xa>
 8017f50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08017f54 <_vfiprintf_r>:
 8017f54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017f58:	460d      	mov	r5, r1
 8017f5a:	b09d      	sub	sp, #116	@ 0x74
 8017f5c:	4614      	mov	r4, r2
 8017f5e:	4698      	mov	r8, r3
 8017f60:	4606      	mov	r6, r0
 8017f62:	b118      	cbz	r0, 8017f6c <_vfiprintf_r+0x18>
 8017f64:	6a03      	ldr	r3, [r0, #32]
 8017f66:	b90b      	cbnz	r3, 8017f6c <_vfiprintf_r+0x18>
 8017f68:	f7ff fab8 	bl	80174dc <__sinit>
 8017f6c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8017f6e:	07d9      	lsls	r1, r3, #31
 8017f70:	d405      	bmi.n	8017f7e <_vfiprintf_r+0x2a>
 8017f72:	89ab      	ldrh	r3, [r5, #12]
 8017f74:	059a      	lsls	r2, r3, #22
 8017f76:	d402      	bmi.n	8017f7e <_vfiprintf_r+0x2a>
 8017f78:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8017f7a:	f7ff fdd4 	bl	8017b26 <__retarget_lock_acquire_recursive>
 8017f7e:	89ab      	ldrh	r3, [r5, #12]
 8017f80:	071b      	lsls	r3, r3, #28
 8017f82:	d501      	bpl.n	8017f88 <_vfiprintf_r+0x34>
 8017f84:	692b      	ldr	r3, [r5, #16]
 8017f86:	b99b      	cbnz	r3, 8017fb0 <_vfiprintf_r+0x5c>
 8017f88:	4629      	mov	r1, r5
 8017f8a:	4630      	mov	r0, r6
 8017f8c:	f7ff fc36 	bl	80177fc <__swsetup_r>
 8017f90:	b170      	cbz	r0, 8017fb0 <_vfiprintf_r+0x5c>
 8017f92:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8017f94:	07dc      	lsls	r4, r3, #31
 8017f96:	d504      	bpl.n	8017fa2 <_vfiprintf_r+0x4e>
 8017f98:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017f9c:	b01d      	add	sp, #116	@ 0x74
 8017f9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017fa2:	89ab      	ldrh	r3, [r5, #12]
 8017fa4:	0598      	lsls	r0, r3, #22
 8017fa6:	d4f7      	bmi.n	8017f98 <_vfiprintf_r+0x44>
 8017fa8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8017faa:	f7ff fdbd 	bl	8017b28 <__retarget_lock_release_recursive>
 8017fae:	e7f3      	b.n	8017f98 <_vfiprintf_r+0x44>
 8017fb0:	2300      	movs	r3, #0
 8017fb2:	9309      	str	r3, [sp, #36]	@ 0x24
 8017fb4:	2320      	movs	r3, #32
 8017fb6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8017fba:	f8cd 800c 	str.w	r8, [sp, #12]
 8017fbe:	2330      	movs	r3, #48	@ 0x30
 8017fc0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8018170 <_vfiprintf_r+0x21c>
 8017fc4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8017fc8:	f04f 0901 	mov.w	r9, #1
 8017fcc:	4623      	mov	r3, r4
 8017fce:	469a      	mov	sl, r3
 8017fd0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017fd4:	b10a      	cbz	r2, 8017fda <_vfiprintf_r+0x86>
 8017fd6:	2a25      	cmp	r2, #37	@ 0x25
 8017fd8:	d1f9      	bne.n	8017fce <_vfiprintf_r+0x7a>
 8017fda:	ebba 0b04 	subs.w	fp, sl, r4
 8017fde:	d00b      	beq.n	8017ff8 <_vfiprintf_r+0xa4>
 8017fe0:	465b      	mov	r3, fp
 8017fe2:	4622      	mov	r2, r4
 8017fe4:	4629      	mov	r1, r5
 8017fe6:	4630      	mov	r0, r6
 8017fe8:	f7ff ffa1 	bl	8017f2e <__sfputs_r>
 8017fec:	3001      	adds	r0, #1
 8017fee:	f000 80a7 	beq.w	8018140 <_vfiprintf_r+0x1ec>
 8017ff2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8017ff4:	445a      	add	r2, fp
 8017ff6:	9209      	str	r2, [sp, #36]	@ 0x24
 8017ff8:	f89a 3000 	ldrb.w	r3, [sl]
 8017ffc:	2b00      	cmp	r3, #0
 8017ffe:	f000 809f 	beq.w	8018140 <_vfiprintf_r+0x1ec>
 8018002:	2300      	movs	r3, #0
 8018004:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8018008:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801800c:	f10a 0a01 	add.w	sl, sl, #1
 8018010:	9304      	str	r3, [sp, #16]
 8018012:	9307      	str	r3, [sp, #28]
 8018014:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8018018:	931a      	str	r3, [sp, #104]	@ 0x68
 801801a:	4654      	mov	r4, sl
 801801c:	2205      	movs	r2, #5
 801801e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018022:	4853      	ldr	r0, [pc, #332]	@ (8018170 <_vfiprintf_r+0x21c>)
 8018024:	f7e8 f8ec 	bl	8000200 <memchr>
 8018028:	9a04      	ldr	r2, [sp, #16]
 801802a:	b9d8      	cbnz	r0, 8018064 <_vfiprintf_r+0x110>
 801802c:	06d1      	lsls	r1, r2, #27
 801802e:	bf44      	itt	mi
 8018030:	2320      	movmi	r3, #32
 8018032:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8018036:	0713      	lsls	r3, r2, #28
 8018038:	bf44      	itt	mi
 801803a:	232b      	movmi	r3, #43	@ 0x2b
 801803c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8018040:	f89a 3000 	ldrb.w	r3, [sl]
 8018044:	2b2a      	cmp	r3, #42	@ 0x2a
 8018046:	d015      	beq.n	8018074 <_vfiprintf_r+0x120>
 8018048:	9a07      	ldr	r2, [sp, #28]
 801804a:	4654      	mov	r4, sl
 801804c:	2000      	movs	r0, #0
 801804e:	f04f 0c0a 	mov.w	ip, #10
 8018052:	4621      	mov	r1, r4
 8018054:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018058:	3b30      	subs	r3, #48	@ 0x30
 801805a:	2b09      	cmp	r3, #9
 801805c:	d94b      	bls.n	80180f6 <_vfiprintf_r+0x1a2>
 801805e:	b1b0      	cbz	r0, 801808e <_vfiprintf_r+0x13a>
 8018060:	9207      	str	r2, [sp, #28]
 8018062:	e014      	b.n	801808e <_vfiprintf_r+0x13a>
 8018064:	eba0 0308 	sub.w	r3, r0, r8
 8018068:	fa09 f303 	lsl.w	r3, r9, r3
 801806c:	4313      	orrs	r3, r2
 801806e:	9304      	str	r3, [sp, #16]
 8018070:	46a2      	mov	sl, r4
 8018072:	e7d2      	b.n	801801a <_vfiprintf_r+0xc6>
 8018074:	9b03      	ldr	r3, [sp, #12]
 8018076:	1d19      	adds	r1, r3, #4
 8018078:	681b      	ldr	r3, [r3, #0]
 801807a:	9103      	str	r1, [sp, #12]
 801807c:	2b00      	cmp	r3, #0
 801807e:	bfbb      	ittet	lt
 8018080:	425b      	neglt	r3, r3
 8018082:	f042 0202 	orrlt.w	r2, r2, #2
 8018086:	9307      	strge	r3, [sp, #28]
 8018088:	9307      	strlt	r3, [sp, #28]
 801808a:	bfb8      	it	lt
 801808c:	9204      	strlt	r2, [sp, #16]
 801808e:	7823      	ldrb	r3, [r4, #0]
 8018090:	2b2e      	cmp	r3, #46	@ 0x2e
 8018092:	d10a      	bne.n	80180aa <_vfiprintf_r+0x156>
 8018094:	7863      	ldrb	r3, [r4, #1]
 8018096:	2b2a      	cmp	r3, #42	@ 0x2a
 8018098:	d132      	bne.n	8018100 <_vfiprintf_r+0x1ac>
 801809a:	9b03      	ldr	r3, [sp, #12]
 801809c:	1d1a      	adds	r2, r3, #4
 801809e:	681b      	ldr	r3, [r3, #0]
 80180a0:	9203      	str	r2, [sp, #12]
 80180a2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80180a6:	3402      	adds	r4, #2
 80180a8:	9305      	str	r3, [sp, #20]
 80180aa:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8018180 <_vfiprintf_r+0x22c>
 80180ae:	7821      	ldrb	r1, [r4, #0]
 80180b0:	2203      	movs	r2, #3
 80180b2:	4650      	mov	r0, sl
 80180b4:	f7e8 f8a4 	bl	8000200 <memchr>
 80180b8:	b138      	cbz	r0, 80180ca <_vfiprintf_r+0x176>
 80180ba:	9b04      	ldr	r3, [sp, #16]
 80180bc:	eba0 000a 	sub.w	r0, r0, sl
 80180c0:	2240      	movs	r2, #64	@ 0x40
 80180c2:	4082      	lsls	r2, r0
 80180c4:	4313      	orrs	r3, r2
 80180c6:	3401      	adds	r4, #1
 80180c8:	9304      	str	r3, [sp, #16]
 80180ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80180ce:	4829      	ldr	r0, [pc, #164]	@ (8018174 <_vfiprintf_r+0x220>)
 80180d0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80180d4:	2206      	movs	r2, #6
 80180d6:	f7e8 f893 	bl	8000200 <memchr>
 80180da:	2800      	cmp	r0, #0
 80180dc:	d03f      	beq.n	801815e <_vfiprintf_r+0x20a>
 80180de:	4b26      	ldr	r3, [pc, #152]	@ (8018178 <_vfiprintf_r+0x224>)
 80180e0:	bb1b      	cbnz	r3, 801812a <_vfiprintf_r+0x1d6>
 80180e2:	9b03      	ldr	r3, [sp, #12]
 80180e4:	3307      	adds	r3, #7
 80180e6:	f023 0307 	bic.w	r3, r3, #7
 80180ea:	3308      	adds	r3, #8
 80180ec:	9303      	str	r3, [sp, #12]
 80180ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80180f0:	443b      	add	r3, r7
 80180f2:	9309      	str	r3, [sp, #36]	@ 0x24
 80180f4:	e76a      	b.n	8017fcc <_vfiprintf_r+0x78>
 80180f6:	fb0c 3202 	mla	r2, ip, r2, r3
 80180fa:	460c      	mov	r4, r1
 80180fc:	2001      	movs	r0, #1
 80180fe:	e7a8      	b.n	8018052 <_vfiprintf_r+0xfe>
 8018100:	2300      	movs	r3, #0
 8018102:	3401      	adds	r4, #1
 8018104:	9305      	str	r3, [sp, #20]
 8018106:	4619      	mov	r1, r3
 8018108:	f04f 0c0a 	mov.w	ip, #10
 801810c:	4620      	mov	r0, r4
 801810e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018112:	3a30      	subs	r2, #48	@ 0x30
 8018114:	2a09      	cmp	r2, #9
 8018116:	d903      	bls.n	8018120 <_vfiprintf_r+0x1cc>
 8018118:	2b00      	cmp	r3, #0
 801811a:	d0c6      	beq.n	80180aa <_vfiprintf_r+0x156>
 801811c:	9105      	str	r1, [sp, #20]
 801811e:	e7c4      	b.n	80180aa <_vfiprintf_r+0x156>
 8018120:	fb0c 2101 	mla	r1, ip, r1, r2
 8018124:	4604      	mov	r4, r0
 8018126:	2301      	movs	r3, #1
 8018128:	e7f0      	b.n	801810c <_vfiprintf_r+0x1b8>
 801812a:	ab03      	add	r3, sp, #12
 801812c:	9300      	str	r3, [sp, #0]
 801812e:	462a      	mov	r2, r5
 8018130:	4b12      	ldr	r3, [pc, #72]	@ (801817c <_vfiprintf_r+0x228>)
 8018132:	a904      	add	r1, sp, #16
 8018134:	4630      	mov	r0, r6
 8018136:	f3af 8000 	nop.w
 801813a:	4607      	mov	r7, r0
 801813c:	1c78      	adds	r0, r7, #1
 801813e:	d1d6      	bne.n	80180ee <_vfiprintf_r+0x19a>
 8018140:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8018142:	07d9      	lsls	r1, r3, #31
 8018144:	d405      	bmi.n	8018152 <_vfiprintf_r+0x1fe>
 8018146:	89ab      	ldrh	r3, [r5, #12]
 8018148:	059a      	lsls	r2, r3, #22
 801814a:	d402      	bmi.n	8018152 <_vfiprintf_r+0x1fe>
 801814c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801814e:	f7ff fceb 	bl	8017b28 <__retarget_lock_release_recursive>
 8018152:	89ab      	ldrh	r3, [r5, #12]
 8018154:	065b      	lsls	r3, r3, #25
 8018156:	f53f af1f 	bmi.w	8017f98 <_vfiprintf_r+0x44>
 801815a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801815c:	e71e      	b.n	8017f9c <_vfiprintf_r+0x48>
 801815e:	ab03      	add	r3, sp, #12
 8018160:	9300      	str	r3, [sp, #0]
 8018162:	462a      	mov	r2, r5
 8018164:	4b05      	ldr	r3, [pc, #20]	@ (801817c <_vfiprintf_r+0x228>)
 8018166:	a904      	add	r1, sp, #16
 8018168:	4630      	mov	r0, r6
 801816a:	f000 f879 	bl	8018260 <_printf_i>
 801816e:	e7e4      	b.n	801813a <_vfiprintf_r+0x1e6>
 8018170:	0801977e 	.word	0x0801977e
 8018174:	08019788 	.word	0x08019788
 8018178:	00000000 	.word	0x00000000
 801817c:	08017f2f 	.word	0x08017f2f
 8018180:	08019784 	.word	0x08019784

08018184 <_printf_common>:
 8018184:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018188:	4616      	mov	r6, r2
 801818a:	4698      	mov	r8, r3
 801818c:	688a      	ldr	r2, [r1, #8]
 801818e:	690b      	ldr	r3, [r1, #16]
 8018190:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8018194:	4293      	cmp	r3, r2
 8018196:	bfb8      	it	lt
 8018198:	4613      	movlt	r3, r2
 801819a:	6033      	str	r3, [r6, #0]
 801819c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80181a0:	4607      	mov	r7, r0
 80181a2:	460c      	mov	r4, r1
 80181a4:	b10a      	cbz	r2, 80181aa <_printf_common+0x26>
 80181a6:	3301      	adds	r3, #1
 80181a8:	6033      	str	r3, [r6, #0]
 80181aa:	6823      	ldr	r3, [r4, #0]
 80181ac:	0699      	lsls	r1, r3, #26
 80181ae:	bf42      	ittt	mi
 80181b0:	6833      	ldrmi	r3, [r6, #0]
 80181b2:	3302      	addmi	r3, #2
 80181b4:	6033      	strmi	r3, [r6, #0]
 80181b6:	6825      	ldr	r5, [r4, #0]
 80181b8:	f015 0506 	ands.w	r5, r5, #6
 80181bc:	d106      	bne.n	80181cc <_printf_common+0x48>
 80181be:	f104 0a19 	add.w	sl, r4, #25
 80181c2:	68e3      	ldr	r3, [r4, #12]
 80181c4:	6832      	ldr	r2, [r6, #0]
 80181c6:	1a9b      	subs	r3, r3, r2
 80181c8:	42ab      	cmp	r3, r5
 80181ca:	dc26      	bgt.n	801821a <_printf_common+0x96>
 80181cc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80181d0:	6822      	ldr	r2, [r4, #0]
 80181d2:	3b00      	subs	r3, #0
 80181d4:	bf18      	it	ne
 80181d6:	2301      	movne	r3, #1
 80181d8:	0692      	lsls	r2, r2, #26
 80181da:	d42b      	bmi.n	8018234 <_printf_common+0xb0>
 80181dc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80181e0:	4641      	mov	r1, r8
 80181e2:	4638      	mov	r0, r7
 80181e4:	47c8      	blx	r9
 80181e6:	3001      	adds	r0, #1
 80181e8:	d01e      	beq.n	8018228 <_printf_common+0xa4>
 80181ea:	6823      	ldr	r3, [r4, #0]
 80181ec:	6922      	ldr	r2, [r4, #16]
 80181ee:	f003 0306 	and.w	r3, r3, #6
 80181f2:	2b04      	cmp	r3, #4
 80181f4:	bf02      	ittt	eq
 80181f6:	68e5      	ldreq	r5, [r4, #12]
 80181f8:	6833      	ldreq	r3, [r6, #0]
 80181fa:	1aed      	subeq	r5, r5, r3
 80181fc:	68a3      	ldr	r3, [r4, #8]
 80181fe:	bf0c      	ite	eq
 8018200:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8018204:	2500      	movne	r5, #0
 8018206:	4293      	cmp	r3, r2
 8018208:	bfc4      	itt	gt
 801820a:	1a9b      	subgt	r3, r3, r2
 801820c:	18ed      	addgt	r5, r5, r3
 801820e:	2600      	movs	r6, #0
 8018210:	341a      	adds	r4, #26
 8018212:	42b5      	cmp	r5, r6
 8018214:	d11a      	bne.n	801824c <_printf_common+0xc8>
 8018216:	2000      	movs	r0, #0
 8018218:	e008      	b.n	801822c <_printf_common+0xa8>
 801821a:	2301      	movs	r3, #1
 801821c:	4652      	mov	r2, sl
 801821e:	4641      	mov	r1, r8
 8018220:	4638      	mov	r0, r7
 8018222:	47c8      	blx	r9
 8018224:	3001      	adds	r0, #1
 8018226:	d103      	bne.n	8018230 <_printf_common+0xac>
 8018228:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801822c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018230:	3501      	adds	r5, #1
 8018232:	e7c6      	b.n	80181c2 <_printf_common+0x3e>
 8018234:	18e1      	adds	r1, r4, r3
 8018236:	1c5a      	adds	r2, r3, #1
 8018238:	2030      	movs	r0, #48	@ 0x30
 801823a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801823e:	4422      	add	r2, r4
 8018240:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8018244:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8018248:	3302      	adds	r3, #2
 801824a:	e7c7      	b.n	80181dc <_printf_common+0x58>
 801824c:	2301      	movs	r3, #1
 801824e:	4622      	mov	r2, r4
 8018250:	4641      	mov	r1, r8
 8018252:	4638      	mov	r0, r7
 8018254:	47c8      	blx	r9
 8018256:	3001      	adds	r0, #1
 8018258:	d0e6      	beq.n	8018228 <_printf_common+0xa4>
 801825a:	3601      	adds	r6, #1
 801825c:	e7d9      	b.n	8018212 <_printf_common+0x8e>
	...

08018260 <_printf_i>:
 8018260:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8018264:	7e0f      	ldrb	r7, [r1, #24]
 8018266:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8018268:	2f78      	cmp	r7, #120	@ 0x78
 801826a:	4691      	mov	r9, r2
 801826c:	4680      	mov	r8, r0
 801826e:	460c      	mov	r4, r1
 8018270:	469a      	mov	sl, r3
 8018272:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8018276:	d807      	bhi.n	8018288 <_printf_i+0x28>
 8018278:	2f62      	cmp	r7, #98	@ 0x62
 801827a:	d80a      	bhi.n	8018292 <_printf_i+0x32>
 801827c:	2f00      	cmp	r7, #0
 801827e:	f000 80d2 	beq.w	8018426 <_printf_i+0x1c6>
 8018282:	2f58      	cmp	r7, #88	@ 0x58
 8018284:	f000 80b9 	beq.w	80183fa <_printf_i+0x19a>
 8018288:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801828c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8018290:	e03a      	b.n	8018308 <_printf_i+0xa8>
 8018292:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8018296:	2b15      	cmp	r3, #21
 8018298:	d8f6      	bhi.n	8018288 <_printf_i+0x28>
 801829a:	a101      	add	r1, pc, #4	@ (adr r1, 80182a0 <_printf_i+0x40>)
 801829c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80182a0:	080182f9 	.word	0x080182f9
 80182a4:	0801830d 	.word	0x0801830d
 80182a8:	08018289 	.word	0x08018289
 80182ac:	08018289 	.word	0x08018289
 80182b0:	08018289 	.word	0x08018289
 80182b4:	08018289 	.word	0x08018289
 80182b8:	0801830d 	.word	0x0801830d
 80182bc:	08018289 	.word	0x08018289
 80182c0:	08018289 	.word	0x08018289
 80182c4:	08018289 	.word	0x08018289
 80182c8:	08018289 	.word	0x08018289
 80182cc:	0801840d 	.word	0x0801840d
 80182d0:	08018337 	.word	0x08018337
 80182d4:	080183c7 	.word	0x080183c7
 80182d8:	08018289 	.word	0x08018289
 80182dc:	08018289 	.word	0x08018289
 80182e0:	0801842f 	.word	0x0801842f
 80182e4:	08018289 	.word	0x08018289
 80182e8:	08018337 	.word	0x08018337
 80182ec:	08018289 	.word	0x08018289
 80182f0:	08018289 	.word	0x08018289
 80182f4:	080183cf 	.word	0x080183cf
 80182f8:	6833      	ldr	r3, [r6, #0]
 80182fa:	1d1a      	adds	r2, r3, #4
 80182fc:	681b      	ldr	r3, [r3, #0]
 80182fe:	6032      	str	r2, [r6, #0]
 8018300:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8018304:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8018308:	2301      	movs	r3, #1
 801830a:	e09d      	b.n	8018448 <_printf_i+0x1e8>
 801830c:	6833      	ldr	r3, [r6, #0]
 801830e:	6820      	ldr	r0, [r4, #0]
 8018310:	1d19      	adds	r1, r3, #4
 8018312:	6031      	str	r1, [r6, #0]
 8018314:	0606      	lsls	r6, r0, #24
 8018316:	d501      	bpl.n	801831c <_printf_i+0xbc>
 8018318:	681d      	ldr	r5, [r3, #0]
 801831a:	e003      	b.n	8018324 <_printf_i+0xc4>
 801831c:	0645      	lsls	r5, r0, #25
 801831e:	d5fb      	bpl.n	8018318 <_printf_i+0xb8>
 8018320:	f9b3 5000 	ldrsh.w	r5, [r3]
 8018324:	2d00      	cmp	r5, #0
 8018326:	da03      	bge.n	8018330 <_printf_i+0xd0>
 8018328:	232d      	movs	r3, #45	@ 0x2d
 801832a:	426d      	negs	r5, r5
 801832c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8018330:	4859      	ldr	r0, [pc, #356]	@ (8018498 <_printf_i+0x238>)
 8018332:	230a      	movs	r3, #10
 8018334:	e011      	b.n	801835a <_printf_i+0xfa>
 8018336:	6821      	ldr	r1, [r4, #0]
 8018338:	6833      	ldr	r3, [r6, #0]
 801833a:	0608      	lsls	r0, r1, #24
 801833c:	f853 5b04 	ldr.w	r5, [r3], #4
 8018340:	d402      	bmi.n	8018348 <_printf_i+0xe8>
 8018342:	0649      	lsls	r1, r1, #25
 8018344:	bf48      	it	mi
 8018346:	b2ad      	uxthmi	r5, r5
 8018348:	2f6f      	cmp	r7, #111	@ 0x6f
 801834a:	4853      	ldr	r0, [pc, #332]	@ (8018498 <_printf_i+0x238>)
 801834c:	6033      	str	r3, [r6, #0]
 801834e:	bf14      	ite	ne
 8018350:	230a      	movne	r3, #10
 8018352:	2308      	moveq	r3, #8
 8018354:	2100      	movs	r1, #0
 8018356:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801835a:	6866      	ldr	r6, [r4, #4]
 801835c:	60a6      	str	r6, [r4, #8]
 801835e:	2e00      	cmp	r6, #0
 8018360:	bfa2      	ittt	ge
 8018362:	6821      	ldrge	r1, [r4, #0]
 8018364:	f021 0104 	bicge.w	r1, r1, #4
 8018368:	6021      	strge	r1, [r4, #0]
 801836a:	b90d      	cbnz	r5, 8018370 <_printf_i+0x110>
 801836c:	2e00      	cmp	r6, #0
 801836e:	d04b      	beq.n	8018408 <_printf_i+0x1a8>
 8018370:	4616      	mov	r6, r2
 8018372:	fbb5 f1f3 	udiv	r1, r5, r3
 8018376:	fb03 5711 	mls	r7, r3, r1, r5
 801837a:	5dc7      	ldrb	r7, [r0, r7]
 801837c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8018380:	462f      	mov	r7, r5
 8018382:	42bb      	cmp	r3, r7
 8018384:	460d      	mov	r5, r1
 8018386:	d9f4      	bls.n	8018372 <_printf_i+0x112>
 8018388:	2b08      	cmp	r3, #8
 801838a:	d10b      	bne.n	80183a4 <_printf_i+0x144>
 801838c:	6823      	ldr	r3, [r4, #0]
 801838e:	07df      	lsls	r7, r3, #31
 8018390:	d508      	bpl.n	80183a4 <_printf_i+0x144>
 8018392:	6923      	ldr	r3, [r4, #16]
 8018394:	6861      	ldr	r1, [r4, #4]
 8018396:	4299      	cmp	r1, r3
 8018398:	bfde      	ittt	le
 801839a:	2330      	movle	r3, #48	@ 0x30
 801839c:	f806 3c01 	strble.w	r3, [r6, #-1]
 80183a0:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80183a4:	1b92      	subs	r2, r2, r6
 80183a6:	6122      	str	r2, [r4, #16]
 80183a8:	f8cd a000 	str.w	sl, [sp]
 80183ac:	464b      	mov	r3, r9
 80183ae:	aa03      	add	r2, sp, #12
 80183b0:	4621      	mov	r1, r4
 80183b2:	4640      	mov	r0, r8
 80183b4:	f7ff fee6 	bl	8018184 <_printf_common>
 80183b8:	3001      	adds	r0, #1
 80183ba:	d14a      	bne.n	8018452 <_printf_i+0x1f2>
 80183bc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80183c0:	b004      	add	sp, #16
 80183c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80183c6:	6823      	ldr	r3, [r4, #0]
 80183c8:	f043 0320 	orr.w	r3, r3, #32
 80183cc:	6023      	str	r3, [r4, #0]
 80183ce:	4833      	ldr	r0, [pc, #204]	@ (801849c <_printf_i+0x23c>)
 80183d0:	2778      	movs	r7, #120	@ 0x78
 80183d2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80183d6:	6823      	ldr	r3, [r4, #0]
 80183d8:	6831      	ldr	r1, [r6, #0]
 80183da:	061f      	lsls	r7, r3, #24
 80183dc:	f851 5b04 	ldr.w	r5, [r1], #4
 80183e0:	d402      	bmi.n	80183e8 <_printf_i+0x188>
 80183e2:	065f      	lsls	r7, r3, #25
 80183e4:	bf48      	it	mi
 80183e6:	b2ad      	uxthmi	r5, r5
 80183e8:	6031      	str	r1, [r6, #0]
 80183ea:	07d9      	lsls	r1, r3, #31
 80183ec:	bf44      	itt	mi
 80183ee:	f043 0320 	orrmi.w	r3, r3, #32
 80183f2:	6023      	strmi	r3, [r4, #0]
 80183f4:	b11d      	cbz	r5, 80183fe <_printf_i+0x19e>
 80183f6:	2310      	movs	r3, #16
 80183f8:	e7ac      	b.n	8018354 <_printf_i+0xf4>
 80183fa:	4827      	ldr	r0, [pc, #156]	@ (8018498 <_printf_i+0x238>)
 80183fc:	e7e9      	b.n	80183d2 <_printf_i+0x172>
 80183fe:	6823      	ldr	r3, [r4, #0]
 8018400:	f023 0320 	bic.w	r3, r3, #32
 8018404:	6023      	str	r3, [r4, #0]
 8018406:	e7f6      	b.n	80183f6 <_printf_i+0x196>
 8018408:	4616      	mov	r6, r2
 801840a:	e7bd      	b.n	8018388 <_printf_i+0x128>
 801840c:	6833      	ldr	r3, [r6, #0]
 801840e:	6825      	ldr	r5, [r4, #0]
 8018410:	6961      	ldr	r1, [r4, #20]
 8018412:	1d18      	adds	r0, r3, #4
 8018414:	6030      	str	r0, [r6, #0]
 8018416:	062e      	lsls	r6, r5, #24
 8018418:	681b      	ldr	r3, [r3, #0]
 801841a:	d501      	bpl.n	8018420 <_printf_i+0x1c0>
 801841c:	6019      	str	r1, [r3, #0]
 801841e:	e002      	b.n	8018426 <_printf_i+0x1c6>
 8018420:	0668      	lsls	r0, r5, #25
 8018422:	d5fb      	bpl.n	801841c <_printf_i+0x1bc>
 8018424:	8019      	strh	r1, [r3, #0]
 8018426:	2300      	movs	r3, #0
 8018428:	6123      	str	r3, [r4, #16]
 801842a:	4616      	mov	r6, r2
 801842c:	e7bc      	b.n	80183a8 <_printf_i+0x148>
 801842e:	6833      	ldr	r3, [r6, #0]
 8018430:	1d1a      	adds	r2, r3, #4
 8018432:	6032      	str	r2, [r6, #0]
 8018434:	681e      	ldr	r6, [r3, #0]
 8018436:	6862      	ldr	r2, [r4, #4]
 8018438:	2100      	movs	r1, #0
 801843a:	4630      	mov	r0, r6
 801843c:	f7e7 fee0 	bl	8000200 <memchr>
 8018440:	b108      	cbz	r0, 8018446 <_printf_i+0x1e6>
 8018442:	1b80      	subs	r0, r0, r6
 8018444:	6060      	str	r0, [r4, #4]
 8018446:	6863      	ldr	r3, [r4, #4]
 8018448:	6123      	str	r3, [r4, #16]
 801844a:	2300      	movs	r3, #0
 801844c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8018450:	e7aa      	b.n	80183a8 <_printf_i+0x148>
 8018452:	6923      	ldr	r3, [r4, #16]
 8018454:	4632      	mov	r2, r6
 8018456:	4649      	mov	r1, r9
 8018458:	4640      	mov	r0, r8
 801845a:	47d0      	blx	sl
 801845c:	3001      	adds	r0, #1
 801845e:	d0ad      	beq.n	80183bc <_printf_i+0x15c>
 8018460:	6823      	ldr	r3, [r4, #0]
 8018462:	079b      	lsls	r3, r3, #30
 8018464:	d413      	bmi.n	801848e <_printf_i+0x22e>
 8018466:	68e0      	ldr	r0, [r4, #12]
 8018468:	9b03      	ldr	r3, [sp, #12]
 801846a:	4298      	cmp	r0, r3
 801846c:	bfb8      	it	lt
 801846e:	4618      	movlt	r0, r3
 8018470:	e7a6      	b.n	80183c0 <_printf_i+0x160>
 8018472:	2301      	movs	r3, #1
 8018474:	4632      	mov	r2, r6
 8018476:	4649      	mov	r1, r9
 8018478:	4640      	mov	r0, r8
 801847a:	47d0      	blx	sl
 801847c:	3001      	adds	r0, #1
 801847e:	d09d      	beq.n	80183bc <_printf_i+0x15c>
 8018480:	3501      	adds	r5, #1
 8018482:	68e3      	ldr	r3, [r4, #12]
 8018484:	9903      	ldr	r1, [sp, #12]
 8018486:	1a5b      	subs	r3, r3, r1
 8018488:	42ab      	cmp	r3, r5
 801848a:	dcf2      	bgt.n	8018472 <_printf_i+0x212>
 801848c:	e7eb      	b.n	8018466 <_printf_i+0x206>
 801848e:	2500      	movs	r5, #0
 8018490:	f104 0619 	add.w	r6, r4, #25
 8018494:	e7f5      	b.n	8018482 <_printf_i+0x222>
 8018496:	bf00      	nop
 8018498:	0801978f 	.word	0x0801978f
 801849c:	080197a0 	.word	0x080197a0

080184a0 <__sflush_r>:
 80184a0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80184a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80184a8:	0716      	lsls	r6, r2, #28
 80184aa:	4605      	mov	r5, r0
 80184ac:	460c      	mov	r4, r1
 80184ae:	d454      	bmi.n	801855a <__sflush_r+0xba>
 80184b0:	684b      	ldr	r3, [r1, #4]
 80184b2:	2b00      	cmp	r3, #0
 80184b4:	dc02      	bgt.n	80184bc <__sflush_r+0x1c>
 80184b6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80184b8:	2b00      	cmp	r3, #0
 80184ba:	dd48      	ble.n	801854e <__sflush_r+0xae>
 80184bc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80184be:	2e00      	cmp	r6, #0
 80184c0:	d045      	beq.n	801854e <__sflush_r+0xae>
 80184c2:	2300      	movs	r3, #0
 80184c4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80184c8:	682f      	ldr	r7, [r5, #0]
 80184ca:	6a21      	ldr	r1, [r4, #32]
 80184cc:	602b      	str	r3, [r5, #0]
 80184ce:	d030      	beq.n	8018532 <__sflush_r+0x92>
 80184d0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80184d2:	89a3      	ldrh	r3, [r4, #12]
 80184d4:	0759      	lsls	r1, r3, #29
 80184d6:	d505      	bpl.n	80184e4 <__sflush_r+0x44>
 80184d8:	6863      	ldr	r3, [r4, #4]
 80184da:	1ad2      	subs	r2, r2, r3
 80184dc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80184de:	b10b      	cbz	r3, 80184e4 <__sflush_r+0x44>
 80184e0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80184e2:	1ad2      	subs	r2, r2, r3
 80184e4:	2300      	movs	r3, #0
 80184e6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80184e8:	6a21      	ldr	r1, [r4, #32]
 80184ea:	4628      	mov	r0, r5
 80184ec:	47b0      	blx	r6
 80184ee:	1c43      	adds	r3, r0, #1
 80184f0:	89a3      	ldrh	r3, [r4, #12]
 80184f2:	d106      	bne.n	8018502 <__sflush_r+0x62>
 80184f4:	6829      	ldr	r1, [r5, #0]
 80184f6:	291d      	cmp	r1, #29
 80184f8:	d82b      	bhi.n	8018552 <__sflush_r+0xb2>
 80184fa:	4a2a      	ldr	r2, [pc, #168]	@ (80185a4 <__sflush_r+0x104>)
 80184fc:	410a      	asrs	r2, r1
 80184fe:	07d6      	lsls	r6, r2, #31
 8018500:	d427      	bmi.n	8018552 <__sflush_r+0xb2>
 8018502:	2200      	movs	r2, #0
 8018504:	6062      	str	r2, [r4, #4]
 8018506:	04d9      	lsls	r1, r3, #19
 8018508:	6922      	ldr	r2, [r4, #16]
 801850a:	6022      	str	r2, [r4, #0]
 801850c:	d504      	bpl.n	8018518 <__sflush_r+0x78>
 801850e:	1c42      	adds	r2, r0, #1
 8018510:	d101      	bne.n	8018516 <__sflush_r+0x76>
 8018512:	682b      	ldr	r3, [r5, #0]
 8018514:	b903      	cbnz	r3, 8018518 <__sflush_r+0x78>
 8018516:	6560      	str	r0, [r4, #84]	@ 0x54
 8018518:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801851a:	602f      	str	r7, [r5, #0]
 801851c:	b1b9      	cbz	r1, 801854e <__sflush_r+0xae>
 801851e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8018522:	4299      	cmp	r1, r3
 8018524:	d002      	beq.n	801852c <__sflush_r+0x8c>
 8018526:	4628      	mov	r0, r5
 8018528:	f7ff fb40 	bl	8017bac <_free_r>
 801852c:	2300      	movs	r3, #0
 801852e:	6363      	str	r3, [r4, #52]	@ 0x34
 8018530:	e00d      	b.n	801854e <__sflush_r+0xae>
 8018532:	2301      	movs	r3, #1
 8018534:	4628      	mov	r0, r5
 8018536:	47b0      	blx	r6
 8018538:	4602      	mov	r2, r0
 801853a:	1c50      	adds	r0, r2, #1
 801853c:	d1c9      	bne.n	80184d2 <__sflush_r+0x32>
 801853e:	682b      	ldr	r3, [r5, #0]
 8018540:	2b00      	cmp	r3, #0
 8018542:	d0c6      	beq.n	80184d2 <__sflush_r+0x32>
 8018544:	2b1d      	cmp	r3, #29
 8018546:	d001      	beq.n	801854c <__sflush_r+0xac>
 8018548:	2b16      	cmp	r3, #22
 801854a:	d11e      	bne.n	801858a <__sflush_r+0xea>
 801854c:	602f      	str	r7, [r5, #0]
 801854e:	2000      	movs	r0, #0
 8018550:	e022      	b.n	8018598 <__sflush_r+0xf8>
 8018552:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8018556:	b21b      	sxth	r3, r3
 8018558:	e01b      	b.n	8018592 <__sflush_r+0xf2>
 801855a:	690f      	ldr	r7, [r1, #16]
 801855c:	2f00      	cmp	r7, #0
 801855e:	d0f6      	beq.n	801854e <__sflush_r+0xae>
 8018560:	0793      	lsls	r3, r2, #30
 8018562:	680e      	ldr	r6, [r1, #0]
 8018564:	bf08      	it	eq
 8018566:	694b      	ldreq	r3, [r1, #20]
 8018568:	600f      	str	r7, [r1, #0]
 801856a:	bf18      	it	ne
 801856c:	2300      	movne	r3, #0
 801856e:	eba6 0807 	sub.w	r8, r6, r7
 8018572:	608b      	str	r3, [r1, #8]
 8018574:	f1b8 0f00 	cmp.w	r8, #0
 8018578:	dde9      	ble.n	801854e <__sflush_r+0xae>
 801857a:	6a21      	ldr	r1, [r4, #32]
 801857c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801857e:	4643      	mov	r3, r8
 8018580:	463a      	mov	r2, r7
 8018582:	4628      	mov	r0, r5
 8018584:	47b0      	blx	r6
 8018586:	2800      	cmp	r0, #0
 8018588:	dc08      	bgt.n	801859c <__sflush_r+0xfc>
 801858a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801858e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8018592:	81a3      	strh	r3, [r4, #12]
 8018594:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8018598:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801859c:	4407      	add	r7, r0
 801859e:	eba8 0800 	sub.w	r8, r8, r0
 80185a2:	e7e7      	b.n	8018574 <__sflush_r+0xd4>
 80185a4:	dfbffffe 	.word	0xdfbffffe

080185a8 <_fflush_r>:
 80185a8:	b538      	push	{r3, r4, r5, lr}
 80185aa:	690b      	ldr	r3, [r1, #16]
 80185ac:	4605      	mov	r5, r0
 80185ae:	460c      	mov	r4, r1
 80185b0:	b913      	cbnz	r3, 80185b8 <_fflush_r+0x10>
 80185b2:	2500      	movs	r5, #0
 80185b4:	4628      	mov	r0, r5
 80185b6:	bd38      	pop	{r3, r4, r5, pc}
 80185b8:	b118      	cbz	r0, 80185c2 <_fflush_r+0x1a>
 80185ba:	6a03      	ldr	r3, [r0, #32]
 80185bc:	b90b      	cbnz	r3, 80185c2 <_fflush_r+0x1a>
 80185be:	f7fe ff8d 	bl	80174dc <__sinit>
 80185c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80185c6:	2b00      	cmp	r3, #0
 80185c8:	d0f3      	beq.n	80185b2 <_fflush_r+0xa>
 80185ca:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80185cc:	07d0      	lsls	r0, r2, #31
 80185ce:	d404      	bmi.n	80185da <_fflush_r+0x32>
 80185d0:	0599      	lsls	r1, r3, #22
 80185d2:	d402      	bmi.n	80185da <_fflush_r+0x32>
 80185d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80185d6:	f7ff faa6 	bl	8017b26 <__retarget_lock_acquire_recursive>
 80185da:	4628      	mov	r0, r5
 80185dc:	4621      	mov	r1, r4
 80185de:	f7ff ff5f 	bl	80184a0 <__sflush_r>
 80185e2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80185e4:	07da      	lsls	r2, r3, #31
 80185e6:	4605      	mov	r5, r0
 80185e8:	d4e4      	bmi.n	80185b4 <_fflush_r+0xc>
 80185ea:	89a3      	ldrh	r3, [r4, #12]
 80185ec:	059b      	lsls	r3, r3, #22
 80185ee:	d4e1      	bmi.n	80185b4 <_fflush_r+0xc>
 80185f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80185f2:	f7ff fa99 	bl	8017b28 <__retarget_lock_release_recursive>
 80185f6:	e7dd      	b.n	80185b4 <_fflush_r+0xc>

080185f8 <fiprintf>:
 80185f8:	b40e      	push	{r1, r2, r3}
 80185fa:	b503      	push	{r0, r1, lr}
 80185fc:	4601      	mov	r1, r0
 80185fe:	ab03      	add	r3, sp, #12
 8018600:	4805      	ldr	r0, [pc, #20]	@ (8018618 <fiprintf+0x20>)
 8018602:	f853 2b04 	ldr.w	r2, [r3], #4
 8018606:	6800      	ldr	r0, [r0, #0]
 8018608:	9301      	str	r3, [sp, #4]
 801860a:	f7ff fca3 	bl	8017f54 <_vfiprintf_r>
 801860e:	b002      	add	sp, #8
 8018610:	f85d eb04 	ldr.w	lr, [sp], #4
 8018614:	b003      	add	sp, #12
 8018616:	4770      	bx	lr
 8018618:	20000290 	.word	0x20000290

0801861c <__swhatbuf_r>:
 801861c:	b570      	push	{r4, r5, r6, lr}
 801861e:	460c      	mov	r4, r1
 8018620:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018624:	2900      	cmp	r1, #0
 8018626:	b096      	sub	sp, #88	@ 0x58
 8018628:	4615      	mov	r5, r2
 801862a:	461e      	mov	r6, r3
 801862c:	da0d      	bge.n	801864a <__swhatbuf_r+0x2e>
 801862e:	89a3      	ldrh	r3, [r4, #12]
 8018630:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8018634:	f04f 0100 	mov.w	r1, #0
 8018638:	bf14      	ite	ne
 801863a:	2340      	movne	r3, #64	@ 0x40
 801863c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8018640:	2000      	movs	r0, #0
 8018642:	6031      	str	r1, [r6, #0]
 8018644:	602b      	str	r3, [r5, #0]
 8018646:	b016      	add	sp, #88	@ 0x58
 8018648:	bd70      	pop	{r4, r5, r6, pc}
 801864a:	466a      	mov	r2, sp
 801864c:	f000 f848 	bl	80186e0 <_fstat_r>
 8018650:	2800      	cmp	r0, #0
 8018652:	dbec      	blt.n	801862e <__swhatbuf_r+0x12>
 8018654:	9901      	ldr	r1, [sp, #4]
 8018656:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801865a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801865e:	4259      	negs	r1, r3
 8018660:	4159      	adcs	r1, r3
 8018662:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8018666:	e7eb      	b.n	8018640 <__swhatbuf_r+0x24>

08018668 <__smakebuf_r>:
 8018668:	898b      	ldrh	r3, [r1, #12]
 801866a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801866c:	079d      	lsls	r5, r3, #30
 801866e:	4606      	mov	r6, r0
 8018670:	460c      	mov	r4, r1
 8018672:	d507      	bpl.n	8018684 <__smakebuf_r+0x1c>
 8018674:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8018678:	6023      	str	r3, [r4, #0]
 801867a:	6123      	str	r3, [r4, #16]
 801867c:	2301      	movs	r3, #1
 801867e:	6163      	str	r3, [r4, #20]
 8018680:	b003      	add	sp, #12
 8018682:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018684:	ab01      	add	r3, sp, #4
 8018686:	466a      	mov	r2, sp
 8018688:	f7ff ffc8 	bl	801861c <__swhatbuf_r>
 801868c:	9f00      	ldr	r7, [sp, #0]
 801868e:	4605      	mov	r5, r0
 8018690:	4639      	mov	r1, r7
 8018692:	4630      	mov	r0, r6
 8018694:	f7fe fcf0 	bl	8017078 <_malloc_r>
 8018698:	b948      	cbnz	r0, 80186ae <__smakebuf_r+0x46>
 801869a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801869e:	059a      	lsls	r2, r3, #22
 80186a0:	d4ee      	bmi.n	8018680 <__smakebuf_r+0x18>
 80186a2:	f023 0303 	bic.w	r3, r3, #3
 80186a6:	f043 0302 	orr.w	r3, r3, #2
 80186aa:	81a3      	strh	r3, [r4, #12]
 80186ac:	e7e2      	b.n	8018674 <__smakebuf_r+0xc>
 80186ae:	89a3      	ldrh	r3, [r4, #12]
 80186b0:	6020      	str	r0, [r4, #0]
 80186b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80186b6:	81a3      	strh	r3, [r4, #12]
 80186b8:	9b01      	ldr	r3, [sp, #4]
 80186ba:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80186be:	b15b      	cbz	r3, 80186d8 <__smakebuf_r+0x70>
 80186c0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80186c4:	4630      	mov	r0, r6
 80186c6:	f000 f81d 	bl	8018704 <_isatty_r>
 80186ca:	b128      	cbz	r0, 80186d8 <__smakebuf_r+0x70>
 80186cc:	89a3      	ldrh	r3, [r4, #12]
 80186ce:	f023 0303 	bic.w	r3, r3, #3
 80186d2:	f043 0301 	orr.w	r3, r3, #1
 80186d6:	81a3      	strh	r3, [r4, #12]
 80186d8:	89a3      	ldrh	r3, [r4, #12]
 80186da:	431d      	orrs	r5, r3
 80186dc:	81a5      	strh	r5, [r4, #12]
 80186de:	e7cf      	b.n	8018680 <__smakebuf_r+0x18>

080186e0 <_fstat_r>:
 80186e0:	b538      	push	{r3, r4, r5, lr}
 80186e2:	4d07      	ldr	r5, [pc, #28]	@ (8018700 <_fstat_r+0x20>)
 80186e4:	2300      	movs	r3, #0
 80186e6:	4604      	mov	r4, r0
 80186e8:	4608      	mov	r0, r1
 80186ea:	4611      	mov	r1, r2
 80186ec:	602b      	str	r3, [r5, #0]
 80186ee:	f7e9 fc43 	bl	8001f78 <_fstat>
 80186f2:	1c43      	adds	r3, r0, #1
 80186f4:	d102      	bne.n	80186fc <_fstat_r+0x1c>
 80186f6:	682b      	ldr	r3, [r5, #0]
 80186f8:	b103      	cbz	r3, 80186fc <_fstat_r+0x1c>
 80186fa:	6023      	str	r3, [r4, #0]
 80186fc:	bd38      	pop	{r3, r4, r5, pc}
 80186fe:	bf00      	nop
 8018700:	2000c224 	.word	0x2000c224

08018704 <_isatty_r>:
 8018704:	b538      	push	{r3, r4, r5, lr}
 8018706:	4d06      	ldr	r5, [pc, #24]	@ (8018720 <_isatty_r+0x1c>)
 8018708:	2300      	movs	r3, #0
 801870a:	4604      	mov	r4, r0
 801870c:	4608      	mov	r0, r1
 801870e:	602b      	str	r3, [r5, #0]
 8018710:	f7e9 fc42 	bl	8001f98 <_isatty>
 8018714:	1c43      	adds	r3, r0, #1
 8018716:	d102      	bne.n	801871e <_isatty_r+0x1a>
 8018718:	682b      	ldr	r3, [r5, #0]
 801871a:	b103      	cbz	r3, 801871e <_isatty_r+0x1a>
 801871c:	6023      	str	r3, [r4, #0]
 801871e:	bd38      	pop	{r3, r4, r5, pc}
 8018720:	2000c224 	.word	0x2000c224

08018724 <abort>:
 8018724:	b508      	push	{r3, lr}
 8018726:	2006      	movs	r0, #6
 8018728:	f000 f82c 	bl	8018784 <raise>
 801872c:	2001      	movs	r0, #1
 801872e:	f7e9 fbd3 	bl	8001ed8 <_exit>

08018732 <_raise_r>:
 8018732:	291f      	cmp	r1, #31
 8018734:	b538      	push	{r3, r4, r5, lr}
 8018736:	4605      	mov	r5, r0
 8018738:	460c      	mov	r4, r1
 801873a:	d904      	bls.n	8018746 <_raise_r+0x14>
 801873c:	2316      	movs	r3, #22
 801873e:	6003      	str	r3, [r0, #0]
 8018740:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8018744:	bd38      	pop	{r3, r4, r5, pc}
 8018746:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8018748:	b112      	cbz	r2, 8018750 <_raise_r+0x1e>
 801874a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801874e:	b94b      	cbnz	r3, 8018764 <_raise_r+0x32>
 8018750:	4628      	mov	r0, r5
 8018752:	f000 f831 	bl	80187b8 <_getpid_r>
 8018756:	4622      	mov	r2, r4
 8018758:	4601      	mov	r1, r0
 801875a:	4628      	mov	r0, r5
 801875c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8018760:	f000 b818 	b.w	8018794 <_kill_r>
 8018764:	2b01      	cmp	r3, #1
 8018766:	d00a      	beq.n	801877e <_raise_r+0x4c>
 8018768:	1c59      	adds	r1, r3, #1
 801876a:	d103      	bne.n	8018774 <_raise_r+0x42>
 801876c:	2316      	movs	r3, #22
 801876e:	6003      	str	r3, [r0, #0]
 8018770:	2001      	movs	r0, #1
 8018772:	e7e7      	b.n	8018744 <_raise_r+0x12>
 8018774:	2100      	movs	r1, #0
 8018776:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801877a:	4620      	mov	r0, r4
 801877c:	4798      	blx	r3
 801877e:	2000      	movs	r0, #0
 8018780:	e7e0      	b.n	8018744 <_raise_r+0x12>
	...

08018784 <raise>:
 8018784:	4b02      	ldr	r3, [pc, #8]	@ (8018790 <raise+0xc>)
 8018786:	4601      	mov	r1, r0
 8018788:	6818      	ldr	r0, [r3, #0]
 801878a:	f7ff bfd2 	b.w	8018732 <_raise_r>
 801878e:	bf00      	nop
 8018790:	20000290 	.word	0x20000290

08018794 <_kill_r>:
 8018794:	b538      	push	{r3, r4, r5, lr}
 8018796:	4d07      	ldr	r5, [pc, #28]	@ (80187b4 <_kill_r+0x20>)
 8018798:	2300      	movs	r3, #0
 801879a:	4604      	mov	r4, r0
 801879c:	4608      	mov	r0, r1
 801879e:	4611      	mov	r1, r2
 80187a0:	602b      	str	r3, [r5, #0]
 80187a2:	f7e9 fb89 	bl	8001eb8 <_kill>
 80187a6:	1c43      	adds	r3, r0, #1
 80187a8:	d102      	bne.n	80187b0 <_kill_r+0x1c>
 80187aa:	682b      	ldr	r3, [r5, #0]
 80187ac:	b103      	cbz	r3, 80187b0 <_kill_r+0x1c>
 80187ae:	6023      	str	r3, [r4, #0]
 80187b0:	bd38      	pop	{r3, r4, r5, pc}
 80187b2:	bf00      	nop
 80187b4:	2000c224 	.word	0x2000c224

080187b8 <_getpid_r>:
 80187b8:	f7e9 bb76 	b.w	8001ea8 <_getpid>

080187bc <_init>:
 80187bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80187be:	bf00      	nop
 80187c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80187c2:	bc08      	pop	{r3}
 80187c4:	469e      	mov	lr, r3
 80187c6:	4770      	bx	lr

080187c8 <_fini>:
 80187c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80187ca:	bf00      	nop
 80187cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80187ce:	bc08      	pop	{r3}
 80187d0:	469e      	mov	lr, r3
 80187d2:	4770      	bx	lr
