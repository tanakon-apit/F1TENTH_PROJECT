
STM32G431KB_F1TENTH_FIRMWARE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000085c4  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800879c  0800879c  0000979c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080087dc  080087dc  0000a00c  2**0
                  CONTENTS
  4 .ARM          00000008  080087dc  080087dc  000097dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080087e4  080087e4  0000a00c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080087e4  080087e4  000097e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080087e8  080087e8  000097e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080087ec  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000454  20000010  080087f8  0000a010  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000464  080087f8  0000a464  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a00c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017f76  00000000  00000000  0000a03c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000031c3  00000000  00000000  00021fb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001458  00000000  00000000  00025178  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ff1  00000000  00000000  000265d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e79d  00000000  00000000  000275c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001af48  00000000  00000000  00045d5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c62e0  00000000  00000000  00060ca6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00126f86  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005694  00000000  00000000  00126fcc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000094  00000000  00000000  0012c660  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000010 	.word	0x20000010
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08008784 	.word	0x08008784

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000014 	.word	0x20000014
 8000214:	08008784 	.word	0x08008784

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__aeabi_uldivmod>:
 80009b4:	b953      	cbnz	r3, 80009cc <__aeabi_uldivmod+0x18>
 80009b6:	b94a      	cbnz	r2, 80009cc <__aeabi_uldivmod+0x18>
 80009b8:	2900      	cmp	r1, #0
 80009ba:	bf08      	it	eq
 80009bc:	2800      	cmpeq	r0, #0
 80009be:	bf1c      	itt	ne
 80009c0:	f04f 31ff 	movne.w	r1, #4294967295
 80009c4:	f04f 30ff 	movne.w	r0, #4294967295
 80009c8:	f000 b96a 	b.w	8000ca0 <__aeabi_idiv0>
 80009cc:	f1ad 0c08 	sub.w	ip, sp, #8
 80009d0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009d4:	f000 f806 	bl	80009e4 <__udivmoddi4>
 80009d8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009e0:	b004      	add	sp, #16
 80009e2:	4770      	bx	lr

080009e4 <__udivmoddi4>:
 80009e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009e8:	9d08      	ldr	r5, [sp, #32]
 80009ea:	460c      	mov	r4, r1
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d14e      	bne.n	8000a8e <__udivmoddi4+0xaa>
 80009f0:	4694      	mov	ip, r2
 80009f2:	458c      	cmp	ip, r1
 80009f4:	4686      	mov	lr, r0
 80009f6:	fab2 f282 	clz	r2, r2
 80009fa:	d962      	bls.n	8000ac2 <__udivmoddi4+0xde>
 80009fc:	b14a      	cbz	r2, 8000a12 <__udivmoddi4+0x2e>
 80009fe:	f1c2 0320 	rsb	r3, r2, #32
 8000a02:	4091      	lsls	r1, r2
 8000a04:	fa20 f303 	lsr.w	r3, r0, r3
 8000a08:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a0c:	4319      	orrs	r1, r3
 8000a0e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000a12:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a16:	fa1f f68c 	uxth.w	r6, ip
 8000a1a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000a1e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000a22:	fb07 1114 	mls	r1, r7, r4, r1
 8000a26:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a2a:	fb04 f106 	mul.w	r1, r4, r6
 8000a2e:	4299      	cmp	r1, r3
 8000a30:	d90a      	bls.n	8000a48 <__udivmoddi4+0x64>
 8000a32:	eb1c 0303 	adds.w	r3, ip, r3
 8000a36:	f104 30ff 	add.w	r0, r4, #4294967295
 8000a3a:	f080 8112 	bcs.w	8000c62 <__udivmoddi4+0x27e>
 8000a3e:	4299      	cmp	r1, r3
 8000a40:	f240 810f 	bls.w	8000c62 <__udivmoddi4+0x27e>
 8000a44:	3c02      	subs	r4, #2
 8000a46:	4463      	add	r3, ip
 8000a48:	1a59      	subs	r1, r3, r1
 8000a4a:	fa1f f38e 	uxth.w	r3, lr
 8000a4e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a52:	fb07 1110 	mls	r1, r7, r0, r1
 8000a56:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a5a:	fb00 f606 	mul.w	r6, r0, r6
 8000a5e:	429e      	cmp	r6, r3
 8000a60:	d90a      	bls.n	8000a78 <__udivmoddi4+0x94>
 8000a62:	eb1c 0303 	adds.w	r3, ip, r3
 8000a66:	f100 31ff 	add.w	r1, r0, #4294967295
 8000a6a:	f080 80fc 	bcs.w	8000c66 <__udivmoddi4+0x282>
 8000a6e:	429e      	cmp	r6, r3
 8000a70:	f240 80f9 	bls.w	8000c66 <__udivmoddi4+0x282>
 8000a74:	4463      	add	r3, ip
 8000a76:	3802      	subs	r0, #2
 8000a78:	1b9b      	subs	r3, r3, r6
 8000a7a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000a7e:	2100      	movs	r1, #0
 8000a80:	b11d      	cbz	r5, 8000a8a <__udivmoddi4+0xa6>
 8000a82:	40d3      	lsrs	r3, r2
 8000a84:	2200      	movs	r2, #0
 8000a86:	e9c5 3200 	strd	r3, r2, [r5]
 8000a8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a8e:	428b      	cmp	r3, r1
 8000a90:	d905      	bls.n	8000a9e <__udivmoddi4+0xba>
 8000a92:	b10d      	cbz	r5, 8000a98 <__udivmoddi4+0xb4>
 8000a94:	e9c5 0100 	strd	r0, r1, [r5]
 8000a98:	2100      	movs	r1, #0
 8000a9a:	4608      	mov	r0, r1
 8000a9c:	e7f5      	b.n	8000a8a <__udivmoddi4+0xa6>
 8000a9e:	fab3 f183 	clz	r1, r3
 8000aa2:	2900      	cmp	r1, #0
 8000aa4:	d146      	bne.n	8000b34 <__udivmoddi4+0x150>
 8000aa6:	42a3      	cmp	r3, r4
 8000aa8:	d302      	bcc.n	8000ab0 <__udivmoddi4+0xcc>
 8000aaa:	4290      	cmp	r0, r2
 8000aac:	f0c0 80f0 	bcc.w	8000c90 <__udivmoddi4+0x2ac>
 8000ab0:	1a86      	subs	r6, r0, r2
 8000ab2:	eb64 0303 	sbc.w	r3, r4, r3
 8000ab6:	2001      	movs	r0, #1
 8000ab8:	2d00      	cmp	r5, #0
 8000aba:	d0e6      	beq.n	8000a8a <__udivmoddi4+0xa6>
 8000abc:	e9c5 6300 	strd	r6, r3, [r5]
 8000ac0:	e7e3      	b.n	8000a8a <__udivmoddi4+0xa6>
 8000ac2:	2a00      	cmp	r2, #0
 8000ac4:	f040 8090 	bne.w	8000be8 <__udivmoddi4+0x204>
 8000ac8:	eba1 040c 	sub.w	r4, r1, ip
 8000acc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ad0:	fa1f f78c 	uxth.w	r7, ip
 8000ad4:	2101      	movs	r1, #1
 8000ad6:	fbb4 f6f8 	udiv	r6, r4, r8
 8000ada:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ade:	fb08 4416 	mls	r4, r8, r6, r4
 8000ae2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ae6:	fb07 f006 	mul.w	r0, r7, r6
 8000aea:	4298      	cmp	r0, r3
 8000aec:	d908      	bls.n	8000b00 <__udivmoddi4+0x11c>
 8000aee:	eb1c 0303 	adds.w	r3, ip, r3
 8000af2:	f106 34ff 	add.w	r4, r6, #4294967295
 8000af6:	d202      	bcs.n	8000afe <__udivmoddi4+0x11a>
 8000af8:	4298      	cmp	r0, r3
 8000afa:	f200 80cd 	bhi.w	8000c98 <__udivmoddi4+0x2b4>
 8000afe:	4626      	mov	r6, r4
 8000b00:	1a1c      	subs	r4, r3, r0
 8000b02:	fa1f f38e 	uxth.w	r3, lr
 8000b06:	fbb4 f0f8 	udiv	r0, r4, r8
 8000b0a:	fb08 4410 	mls	r4, r8, r0, r4
 8000b0e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b12:	fb00 f707 	mul.w	r7, r0, r7
 8000b16:	429f      	cmp	r7, r3
 8000b18:	d908      	bls.n	8000b2c <__udivmoddi4+0x148>
 8000b1a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b1e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000b22:	d202      	bcs.n	8000b2a <__udivmoddi4+0x146>
 8000b24:	429f      	cmp	r7, r3
 8000b26:	f200 80b0 	bhi.w	8000c8a <__udivmoddi4+0x2a6>
 8000b2a:	4620      	mov	r0, r4
 8000b2c:	1bdb      	subs	r3, r3, r7
 8000b2e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b32:	e7a5      	b.n	8000a80 <__udivmoddi4+0x9c>
 8000b34:	f1c1 0620 	rsb	r6, r1, #32
 8000b38:	408b      	lsls	r3, r1
 8000b3a:	fa22 f706 	lsr.w	r7, r2, r6
 8000b3e:	431f      	orrs	r7, r3
 8000b40:	fa20 fc06 	lsr.w	ip, r0, r6
 8000b44:	fa04 f301 	lsl.w	r3, r4, r1
 8000b48:	ea43 030c 	orr.w	r3, r3, ip
 8000b4c:	40f4      	lsrs	r4, r6
 8000b4e:	fa00 f801 	lsl.w	r8, r0, r1
 8000b52:	0c38      	lsrs	r0, r7, #16
 8000b54:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000b58:	fbb4 fef0 	udiv	lr, r4, r0
 8000b5c:	fa1f fc87 	uxth.w	ip, r7
 8000b60:	fb00 441e 	mls	r4, r0, lr, r4
 8000b64:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000b68:	fb0e f90c 	mul.w	r9, lr, ip
 8000b6c:	45a1      	cmp	r9, r4
 8000b6e:	fa02 f201 	lsl.w	r2, r2, r1
 8000b72:	d90a      	bls.n	8000b8a <__udivmoddi4+0x1a6>
 8000b74:	193c      	adds	r4, r7, r4
 8000b76:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000b7a:	f080 8084 	bcs.w	8000c86 <__udivmoddi4+0x2a2>
 8000b7e:	45a1      	cmp	r9, r4
 8000b80:	f240 8081 	bls.w	8000c86 <__udivmoddi4+0x2a2>
 8000b84:	f1ae 0e02 	sub.w	lr, lr, #2
 8000b88:	443c      	add	r4, r7
 8000b8a:	eba4 0409 	sub.w	r4, r4, r9
 8000b8e:	fa1f f983 	uxth.w	r9, r3
 8000b92:	fbb4 f3f0 	udiv	r3, r4, r0
 8000b96:	fb00 4413 	mls	r4, r0, r3, r4
 8000b9a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000b9e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ba2:	45a4      	cmp	ip, r4
 8000ba4:	d907      	bls.n	8000bb6 <__udivmoddi4+0x1d2>
 8000ba6:	193c      	adds	r4, r7, r4
 8000ba8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000bac:	d267      	bcs.n	8000c7e <__udivmoddi4+0x29a>
 8000bae:	45a4      	cmp	ip, r4
 8000bb0:	d965      	bls.n	8000c7e <__udivmoddi4+0x29a>
 8000bb2:	3b02      	subs	r3, #2
 8000bb4:	443c      	add	r4, r7
 8000bb6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000bba:	fba0 9302 	umull	r9, r3, r0, r2
 8000bbe:	eba4 040c 	sub.w	r4, r4, ip
 8000bc2:	429c      	cmp	r4, r3
 8000bc4:	46ce      	mov	lr, r9
 8000bc6:	469c      	mov	ip, r3
 8000bc8:	d351      	bcc.n	8000c6e <__udivmoddi4+0x28a>
 8000bca:	d04e      	beq.n	8000c6a <__udivmoddi4+0x286>
 8000bcc:	b155      	cbz	r5, 8000be4 <__udivmoddi4+0x200>
 8000bce:	ebb8 030e 	subs.w	r3, r8, lr
 8000bd2:	eb64 040c 	sbc.w	r4, r4, ip
 8000bd6:	fa04 f606 	lsl.w	r6, r4, r6
 8000bda:	40cb      	lsrs	r3, r1
 8000bdc:	431e      	orrs	r6, r3
 8000bde:	40cc      	lsrs	r4, r1
 8000be0:	e9c5 6400 	strd	r6, r4, [r5]
 8000be4:	2100      	movs	r1, #0
 8000be6:	e750      	b.n	8000a8a <__udivmoddi4+0xa6>
 8000be8:	f1c2 0320 	rsb	r3, r2, #32
 8000bec:	fa20 f103 	lsr.w	r1, r0, r3
 8000bf0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bf4:	fa24 f303 	lsr.w	r3, r4, r3
 8000bf8:	4094      	lsls	r4, r2
 8000bfa:	430c      	orrs	r4, r1
 8000bfc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c00:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c04:	fa1f f78c 	uxth.w	r7, ip
 8000c08:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c0c:	fb08 3110 	mls	r1, r8, r0, r3
 8000c10:	0c23      	lsrs	r3, r4, #16
 8000c12:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c16:	fb00 f107 	mul.w	r1, r0, r7
 8000c1a:	4299      	cmp	r1, r3
 8000c1c:	d908      	bls.n	8000c30 <__udivmoddi4+0x24c>
 8000c1e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c22:	f100 36ff 	add.w	r6, r0, #4294967295
 8000c26:	d22c      	bcs.n	8000c82 <__udivmoddi4+0x29e>
 8000c28:	4299      	cmp	r1, r3
 8000c2a:	d92a      	bls.n	8000c82 <__udivmoddi4+0x29e>
 8000c2c:	3802      	subs	r0, #2
 8000c2e:	4463      	add	r3, ip
 8000c30:	1a5b      	subs	r3, r3, r1
 8000c32:	b2a4      	uxth	r4, r4
 8000c34:	fbb3 f1f8 	udiv	r1, r3, r8
 8000c38:	fb08 3311 	mls	r3, r8, r1, r3
 8000c3c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c40:	fb01 f307 	mul.w	r3, r1, r7
 8000c44:	42a3      	cmp	r3, r4
 8000c46:	d908      	bls.n	8000c5a <__udivmoddi4+0x276>
 8000c48:	eb1c 0404 	adds.w	r4, ip, r4
 8000c4c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000c50:	d213      	bcs.n	8000c7a <__udivmoddi4+0x296>
 8000c52:	42a3      	cmp	r3, r4
 8000c54:	d911      	bls.n	8000c7a <__udivmoddi4+0x296>
 8000c56:	3902      	subs	r1, #2
 8000c58:	4464      	add	r4, ip
 8000c5a:	1ae4      	subs	r4, r4, r3
 8000c5c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000c60:	e739      	b.n	8000ad6 <__udivmoddi4+0xf2>
 8000c62:	4604      	mov	r4, r0
 8000c64:	e6f0      	b.n	8000a48 <__udivmoddi4+0x64>
 8000c66:	4608      	mov	r0, r1
 8000c68:	e706      	b.n	8000a78 <__udivmoddi4+0x94>
 8000c6a:	45c8      	cmp	r8, r9
 8000c6c:	d2ae      	bcs.n	8000bcc <__udivmoddi4+0x1e8>
 8000c6e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000c72:	eb63 0c07 	sbc.w	ip, r3, r7
 8000c76:	3801      	subs	r0, #1
 8000c78:	e7a8      	b.n	8000bcc <__udivmoddi4+0x1e8>
 8000c7a:	4631      	mov	r1, r6
 8000c7c:	e7ed      	b.n	8000c5a <__udivmoddi4+0x276>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	e799      	b.n	8000bb6 <__udivmoddi4+0x1d2>
 8000c82:	4630      	mov	r0, r6
 8000c84:	e7d4      	b.n	8000c30 <__udivmoddi4+0x24c>
 8000c86:	46d6      	mov	lr, sl
 8000c88:	e77f      	b.n	8000b8a <__udivmoddi4+0x1a6>
 8000c8a:	4463      	add	r3, ip
 8000c8c:	3802      	subs	r0, #2
 8000c8e:	e74d      	b.n	8000b2c <__udivmoddi4+0x148>
 8000c90:	4606      	mov	r6, r0
 8000c92:	4623      	mov	r3, r4
 8000c94:	4608      	mov	r0, r1
 8000c96:	e70f      	b.n	8000ab8 <__udivmoddi4+0xd4>
 8000c98:	3e02      	subs	r6, #2
 8000c9a:	4463      	add	r3, ip
 8000c9c:	e730      	b.n	8000b00 <__udivmoddi4+0x11c>
 8000c9e:	bf00      	nop

08000ca0 <__aeabi_idiv0>:
 8000ca0:	4770      	bx	lr
 8000ca2:	bf00      	nop

08000ca4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b082      	sub	sp, #8
 8000ca8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000caa:	4b1a      	ldr	r3, [pc, #104]	@ (8000d14 <MX_DMA_Init+0x70>)
 8000cac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000cae:	4a19      	ldr	r2, [pc, #100]	@ (8000d14 <MX_DMA_Init+0x70>)
 8000cb0:	f043 0304 	orr.w	r3, r3, #4
 8000cb4:	6493      	str	r3, [r2, #72]	@ 0x48
 8000cb6:	4b17      	ldr	r3, [pc, #92]	@ (8000d14 <MX_DMA_Init+0x70>)
 8000cb8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000cba:	f003 0304 	and.w	r3, r3, #4
 8000cbe:	607b      	str	r3, [r7, #4]
 8000cc0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000cc2:	4b14      	ldr	r3, [pc, #80]	@ (8000d14 <MX_DMA_Init+0x70>)
 8000cc4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000cc6:	4a13      	ldr	r2, [pc, #76]	@ (8000d14 <MX_DMA_Init+0x70>)
 8000cc8:	f043 0301 	orr.w	r3, r3, #1
 8000ccc:	6493      	str	r3, [r2, #72]	@ 0x48
 8000cce:	4b11      	ldr	r3, [pc, #68]	@ (8000d14 <MX_DMA_Init+0x70>)
 8000cd0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000cd2:	f003 0301 	and.w	r3, r3, #1
 8000cd6:	603b      	str	r3, [r7, #0]
 8000cd8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2100      	movs	r1, #0
 8000cde:	200b      	movs	r0, #11
 8000ce0:	f001 f8bf 	bl	8001e62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000ce4:	200b      	movs	r0, #11
 8000ce6:	f001 f8d6 	bl	8001e96 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000cea:	2200      	movs	r2, #0
 8000cec:	2100      	movs	r1, #0
 8000cee:	200c      	movs	r0, #12
 8000cf0:	f001 f8b7 	bl	8001e62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000cf4:	200c      	movs	r0, #12
 8000cf6:	f001 f8ce 	bl	8001e96 <HAL_NVIC_EnableIRQ>
  /* DMAMUX_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMAMUX_OVR_IRQn, 0, 0);
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2100      	movs	r1, #0
 8000cfe:	205e      	movs	r0, #94	@ 0x5e
 8000d00:	f001 f8af 	bl	8001e62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMAMUX_OVR_IRQn);
 8000d04:	205e      	movs	r0, #94	@ 0x5e
 8000d06:	f001 f8c6 	bl	8001e96 <HAL_NVIC_EnableIRQ>

}
 8000d0a:	bf00      	nop
 8000d0c:	3708      	adds	r7, #8
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	40021000 	.word	0x40021000

08000d18 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b088      	sub	sp, #32
 8000d1c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d1e:	f107 030c 	add.w	r3, r7, #12
 8000d22:	2200      	movs	r2, #0
 8000d24:	601a      	str	r2, [r3, #0]
 8000d26:	605a      	str	r2, [r3, #4]
 8000d28:	609a      	str	r2, [r3, #8]
 8000d2a:	60da      	str	r2, [r3, #12]
 8000d2c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d2e:	4b1e      	ldr	r3, [pc, #120]	@ (8000da8 <MX_GPIO_Init+0x90>)
 8000d30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d32:	4a1d      	ldr	r2, [pc, #116]	@ (8000da8 <MX_GPIO_Init+0x90>)
 8000d34:	f043 0320 	orr.w	r3, r3, #32
 8000d38:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d3a:	4b1b      	ldr	r3, [pc, #108]	@ (8000da8 <MX_GPIO_Init+0x90>)
 8000d3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d3e:	f003 0320 	and.w	r3, r3, #32
 8000d42:	60bb      	str	r3, [r7, #8]
 8000d44:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d46:	4b18      	ldr	r3, [pc, #96]	@ (8000da8 <MX_GPIO_Init+0x90>)
 8000d48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d4a:	4a17      	ldr	r2, [pc, #92]	@ (8000da8 <MX_GPIO_Init+0x90>)
 8000d4c:	f043 0301 	orr.w	r3, r3, #1
 8000d50:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d52:	4b15      	ldr	r3, [pc, #84]	@ (8000da8 <MX_GPIO_Init+0x90>)
 8000d54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d56:	f003 0301 	and.w	r3, r3, #1
 8000d5a:	607b      	str	r3, [r7, #4]
 8000d5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d5e:	4b12      	ldr	r3, [pc, #72]	@ (8000da8 <MX_GPIO_Init+0x90>)
 8000d60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d62:	4a11      	ldr	r2, [pc, #68]	@ (8000da8 <MX_GPIO_Init+0x90>)
 8000d64:	f043 0302 	orr.w	r3, r3, #2
 8000d68:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d6a:	4b0f      	ldr	r3, [pc, #60]	@ (8000da8 <MX_GPIO_Init+0x90>)
 8000d6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d6e:	f003 0302 	and.w	r3, r3, #2
 8000d72:	603b      	str	r3, [r7, #0]
 8000d74:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000d76:	2200      	movs	r2, #0
 8000d78:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000d7c:	480b      	ldr	r0, [pc, #44]	@ (8000dac <MX_GPIO_Init+0x94>)
 8000d7e:	f001 fd0f 	bl	80027a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000d82:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000d86:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d88:	2301      	movs	r3, #1
 8000d8a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d90:	2300      	movs	r3, #0
 8000d92:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000d94:	f107 030c 	add.w	r3, r7, #12
 8000d98:	4619      	mov	r1, r3
 8000d9a:	4804      	ldr	r0, [pc, #16]	@ (8000dac <MX_GPIO_Init+0x94>)
 8000d9c:	f001 fb7e 	bl	800249c <HAL_GPIO_Init>

}
 8000da0:	bf00      	nop
 8000da2:	3720      	adds	r7, #32
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	40021000 	.word	0x40021000
 8000dac:	48000400 	.word	0x48000400

08000db0 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c3_tx;
DMA_HandleTypeDef hdma_i2c3_rx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000db4:	4b1b      	ldr	r3, [pc, #108]	@ (8000e24 <MX_I2C1_Init+0x74>)
 8000db6:	4a1c      	ldr	r2, [pc, #112]	@ (8000e28 <MX_I2C1_Init+0x78>)
 8000db8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10802D9B;
 8000dba:	4b1a      	ldr	r3, [pc, #104]	@ (8000e24 <MX_I2C1_Init+0x74>)
 8000dbc:	4a1b      	ldr	r2, [pc, #108]	@ (8000e2c <MX_I2C1_Init+0x7c>)
 8000dbe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000dc0:	4b18      	ldr	r3, [pc, #96]	@ (8000e24 <MX_I2C1_Init+0x74>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000dc6:	4b17      	ldr	r3, [pc, #92]	@ (8000e24 <MX_I2C1_Init+0x74>)
 8000dc8:	2201      	movs	r2, #1
 8000dca:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000dcc:	4b15      	ldr	r3, [pc, #84]	@ (8000e24 <MX_I2C1_Init+0x74>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000dd2:	4b14      	ldr	r3, [pc, #80]	@ (8000e24 <MX_I2C1_Init+0x74>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000dd8:	4b12      	ldr	r3, [pc, #72]	@ (8000e24 <MX_I2C1_Init+0x74>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000dde:	4b11      	ldr	r3, [pc, #68]	@ (8000e24 <MX_I2C1_Init+0x74>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000de4:	4b0f      	ldr	r3, [pc, #60]	@ (8000e24 <MX_I2C1_Init+0x74>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000dea:	480e      	ldr	r0, [pc, #56]	@ (8000e24 <MX_I2C1_Init+0x74>)
 8000dec:	f001 fcf0 	bl	80027d0 <HAL_I2C_Init>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d001      	beq.n	8000dfa <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000df6:	f000 fa53 	bl	80012a0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000dfa:	2100      	movs	r1, #0
 8000dfc:	4809      	ldr	r0, [pc, #36]	@ (8000e24 <MX_I2C1_Init+0x74>)
 8000dfe:	f003 fe25 	bl	8004a4c <HAL_I2CEx_ConfigAnalogFilter>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d001      	beq.n	8000e0c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000e08:	f000 fa4a 	bl	80012a0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000e0c:	2100      	movs	r1, #0
 8000e0e:	4805      	ldr	r0, [pc, #20]	@ (8000e24 <MX_I2C1_Init+0x74>)
 8000e10:	f003 fe67 	bl	8004ae2 <HAL_I2CEx_ConfigDigitalFilter>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d001      	beq.n	8000e1e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000e1a:	f000 fa41 	bl	80012a0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000e1e:	bf00      	nop
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	2000002c 	.word	0x2000002c
 8000e28:	40005400 	.word	0x40005400
 8000e2c:	10802d9b 	.word	0x10802d9b

08000e30 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000e34:	4b1b      	ldr	r3, [pc, #108]	@ (8000ea4 <MX_I2C3_Init+0x74>)
 8000e36:	4a1c      	ldr	r2, [pc, #112]	@ (8000ea8 <MX_I2C3_Init+0x78>)
 8000e38:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x10802D9B;
 8000e3a:	4b1a      	ldr	r3, [pc, #104]	@ (8000ea4 <MX_I2C3_Init+0x74>)
 8000e3c:	4a1b      	ldr	r2, [pc, #108]	@ (8000eac <MX_I2C3_Init+0x7c>)
 8000e3e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000e40:	4b18      	ldr	r3, [pc, #96]	@ (8000ea4 <MX_I2C3_Init+0x74>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e46:	4b17      	ldr	r3, [pc, #92]	@ (8000ea4 <MX_I2C3_Init+0x74>)
 8000e48:	2201      	movs	r2, #1
 8000e4a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e4c:	4b15      	ldr	r3, [pc, #84]	@ (8000ea4 <MX_I2C3_Init+0x74>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000e52:	4b14      	ldr	r3, [pc, #80]	@ (8000ea4 <MX_I2C3_Init+0x74>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000e58:	4b12      	ldr	r3, [pc, #72]	@ (8000ea4 <MX_I2C3_Init+0x74>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e5e:	4b11      	ldr	r3, [pc, #68]	@ (8000ea4 <MX_I2C3_Init+0x74>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e64:	4b0f      	ldr	r3, [pc, #60]	@ (8000ea4 <MX_I2C3_Init+0x74>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000e6a:	480e      	ldr	r0, [pc, #56]	@ (8000ea4 <MX_I2C3_Init+0x74>)
 8000e6c:	f001 fcb0 	bl	80027d0 <HAL_I2C_Init>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d001      	beq.n	8000e7a <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000e76:	f000 fa13 	bl	80012a0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000e7a:	2100      	movs	r1, #0
 8000e7c:	4809      	ldr	r0, [pc, #36]	@ (8000ea4 <MX_I2C3_Init+0x74>)
 8000e7e:	f003 fde5 	bl	8004a4c <HAL_I2CEx_ConfigAnalogFilter>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d001      	beq.n	8000e8c <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000e88:	f000 fa0a 	bl	80012a0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000e8c:	2100      	movs	r1, #0
 8000e8e:	4805      	ldr	r0, [pc, #20]	@ (8000ea4 <MX_I2C3_Init+0x74>)
 8000e90:	f003 fe27 	bl	8004ae2 <HAL_I2CEx_ConfigDigitalFilter>
 8000e94:	4603      	mov	r3, r0
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d001      	beq.n	8000e9e <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8000e9a:	f000 fa01 	bl	80012a0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000e9e:	bf00      	nop
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	20000080 	.word	0x20000080
 8000ea8:	40007800 	.word	0x40007800
 8000eac:	10802d9b 	.word	0x10802d9b

08000eb0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b09e      	sub	sp, #120	@ 0x78
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	601a      	str	r2, [r3, #0]
 8000ec0:	605a      	str	r2, [r3, #4]
 8000ec2:	609a      	str	r2, [r3, #8]
 8000ec4:	60da      	str	r2, [r3, #12]
 8000ec6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ec8:	f107 0320 	add.w	r3, r7, #32
 8000ecc:	2244      	movs	r2, #68	@ 0x44
 8000ece:	2100      	movs	r1, #0
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f007 fc2a 	bl	800872a <memset>
  if(i2cHandle->Instance==I2C1)
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	4a8c      	ldr	r2, [pc, #560]	@ (800110c <HAL_I2C_MspInit+0x25c>)
 8000edc:	4293      	cmp	r3, r2
 8000ede:	d154      	bne.n	8000f8a <HAL_I2C_MspInit+0xda>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000ee0:	2340      	movs	r3, #64	@ 0x40
 8000ee2:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ee8:	f107 0320 	add.w	r3, r7, #32
 8000eec:	4618      	mov	r0, r3
 8000eee:	f004 fc27 	bl	8005740 <HAL_RCCEx_PeriphCLKConfig>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d001      	beq.n	8000efc <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000ef8:	f000 f9d2 	bl	80012a0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000efc:	4b84      	ldr	r3, [pc, #528]	@ (8001110 <HAL_I2C_MspInit+0x260>)
 8000efe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f00:	4a83      	ldr	r2, [pc, #524]	@ (8001110 <HAL_I2C_MspInit+0x260>)
 8000f02:	f043 0301 	orr.w	r3, r3, #1
 8000f06:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f08:	4b81      	ldr	r3, [pc, #516]	@ (8001110 <HAL_I2C_MspInit+0x260>)
 8000f0a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f0c:	f003 0301 	and.w	r3, r3, #1
 8000f10:	61fb      	str	r3, [r7, #28]
 8000f12:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f14:	4b7e      	ldr	r3, [pc, #504]	@ (8001110 <HAL_I2C_MspInit+0x260>)
 8000f16:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f18:	4a7d      	ldr	r2, [pc, #500]	@ (8001110 <HAL_I2C_MspInit+0x260>)
 8000f1a:	f043 0302 	orr.w	r3, r3, #2
 8000f1e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f20:	4b7b      	ldr	r3, [pc, #492]	@ (8001110 <HAL_I2C_MspInit+0x260>)
 8000f22:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f24:	f003 0302 	and.w	r3, r3, #2
 8000f28:	61bb      	str	r3, [r7, #24]
 8000f2a:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000f2c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000f30:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f32:	2312      	movs	r3, #18
 8000f34:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f36:	2300      	movs	r3, #0
 8000f38:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000f3e:	2304      	movs	r3, #4
 8000f40:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f42:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000f46:	4619      	mov	r1, r3
 8000f48:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f4c:	f001 faa6 	bl	800249c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000f50:	2380      	movs	r3, #128	@ 0x80
 8000f52:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f54:	2312      	movs	r3, #18
 8000f56:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000f60:	2304      	movs	r3, #4
 8000f62:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f64:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000f68:	4619      	mov	r1, r3
 8000f6a:	486a      	ldr	r0, [pc, #424]	@ (8001114 <HAL_I2C_MspInit+0x264>)
 8000f6c:	f001 fa96 	bl	800249c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f70:	4b67      	ldr	r3, [pc, #412]	@ (8001110 <HAL_I2C_MspInit+0x260>)
 8000f72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f74:	4a66      	ldr	r2, [pc, #408]	@ (8001110 <HAL_I2C_MspInit+0x260>)
 8000f76:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000f7a:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f7c:	4b64      	ldr	r3, [pc, #400]	@ (8001110 <HAL_I2C_MspInit+0x260>)
 8000f7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f80:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f84:	617b      	str	r3, [r7, #20]
 8000f86:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8000f88:	e0bc      	b.n	8001104 <HAL_I2C_MspInit+0x254>
  else if(i2cHandle->Instance==I2C3)
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	4a62      	ldr	r2, [pc, #392]	@ (8001118 <HAL_I2C_MspInit+0x268>)
 8000f90:	4293      	cmp	r3, r2
 8000f92:	f040 80b7 	bne.w	8001104 <HAL_I2C_MspInit+0x254>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8000f96:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000f9a:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fa0:	f107 0320 	add.w	r3, r7, #32
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f004 fbcb 	bl	8005740 <HAL_RCCEx_PeriphCLKConfig>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d001      	beq.n	8000fb4 <HAL_I2C_MspInit+0x104>
      Error_Handler();
 8000fb0:	f000 f976 	bl	80012a0 <Error_Handler>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fb4:	4b56      	ldr	r3, [pc, #344]	@ (8001110 <HAL_I2C_MspInit+0x260>)
 8000fb6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fb8:	4a55      	ldr	r2, [pc, #340]	@ (8001110 <HAL_I2C_MspInit+0x260>)
 8000fba:	f043 0301 	orr.w	r3, r3, #1
 8000fbe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fc0:	4b53      	ldr	r3, [pc, #332]	@ (8001110 <HAL_I2C_MspInit+0x260>)
 8000fc2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fc4:	f003 0301 	and.w	r3, r3, #1
 8000fc8:	613b      	str	r3, [r7, #16]
 8000fca:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fcc:	4b50      	ldr	r3, [pc, #320]	@ (8001110 <HAL_I2C_MspInit+0x260>)
 8000fce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fd0:	4a4f      	ldr	r2, [pc, #316]	@ (8001110 <HAL_I2C_MspInit+0x260>)
 8000fd2:	f043 0302 	orr.w	r3, r3, #2
 8000fd6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fd8:	4b4d      	ldr	r3, [pc, #308]	@ (8001110 <HAL_I2C_MspInit+0x260>)
 8000fda:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fdc:	f003 0302 	and.w	r3, r3, #2
 8000fe0:	60fb      	str	r3, [r7, #12]
 8000fe2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000fe4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000fe8:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fea:	2312      	movs	r3, #18
 8000fec:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF2_I2C3;
 8000ff6:	2302      	movs	r3, #2
 8000ff8:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ffa:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000ffe:	4619      	mov	r1, r3
 8001000:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001004:	f001 fa4a 	bl	800249c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001008:	2320      	movs	r3, #32
 800100a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800100c:	2312      	movs	r3, #18
 800100e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001010:	2301      	movs	r3, #1
 8001012:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001014:	2300      	movs	r3, #0
 8001016:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C3;
 8001018:	2308      	movs	r3, #8
 800101a:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800101c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001020:	4619      	mov	r1, r3
 8001022:	483c      	ldr	r0, [pc, #240]	@ (8001114 <HAL_I2C_MspInit+0x264>)
 8001024:	f001 fa3a 	bl	800249c <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001028:	4b39      	ldr	r3, [pc, #228]	@ (8001110 <HAL_I2C_MspInit+0x260>)
 800102a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800102c:	4a38      	ldr	r2, [pc, #224]	@ (8001110 <HAL_I2C_MspInit+0x260>)
 800102e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001032:	6593      	str	r3, [r2, #88]	@ 0x58
 8001034:	4b36      	ldr	r3, [pc, #216]	@ (8001110 <HAL_I2C_MspInit+0x260>)
 8001036:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001038:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800103c:	60bb      	str	r3, [r7, #8]
 800103e:	68bb      	ldr	r3, [r7, #8]
    hdma_i2c3_tx.Instance = DMA1_Channel1;
 8001040:	4b36      	ldr	r3, [pc, #216]	@ (800111c <HAL_I2C_MspInit+0x26c>)
 8001042:	4a37      	ldr	r2, [pc, #220]	@ (8001120 <HAL_I2C_MspInit+0x270>)
 8001044:	601a      	str	r2, [r3, #0]
    hdma_i2c3_tx.Init.Request = DMA_REQUEST_I2C3_TX;
 8001046:	4b35      	ldr	r3, [pc, #212]	@ (800111c <HAL_I2C_MspInit+0x26c>)
 8001048:	2215      	movs	r2, #21
 800104a:	605a      	str	r2, [r3, #4]
    hdma_i2c3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800104c:	4b33      	ldr	r3, [pc, #204]	@ (800111c <HAL_I2C_MspInit+0x26c>)
 800104e:	2210      	movs	r2, #16
 8001050:	609a      	str	r2, [r3, #8]
    hdma_i2c3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001052:	4b32      	ldr	r3, [pc, #200]	@ (800111c <HAL_I2C_MspInit+0x26c>)
 8001054:	2200      	movs	r2, #0
 8001056:	60da      	str	r2, [r3, #12]
    hdma_i2c3_tx.Init.MemInc = DMA_MINC_DISABLE;
 8001058:	4b30      	ldr	r3, [pc, #192]	@ (800111c <HAL_I2C_MspInit+0x26c>)
 800105a:	2200      	movs	r2, #0
 800105c:	611a      	str	r2, [r3, #16]
    hdma_i2c3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800105e:	4b2f      	ldr	r3, [pc, #188]	@ (800111c <HAL_I2C_MspInit+0x26c>)
 8001060:	2200      	movs	r2, #0
 8001062:	615a      	str	r2, [r3, #20]
    hdma_i2c3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001064:	4b2d      	ldr	r3, [pc, #180]	@ (800111c <HAL_I2C_MspInit+0x26c>)
 8001066:	2200      	movs	r2, #0
 8001068:	619a      	str	r2, [r3, #24]
    hdma_i2c3_tx.Init.Mode = DMA_NORMAL;
 800106a:	4b2c      	ldr	r3, [pc, #176]	@ (800111c <HAL_I2C_MspInit+0x26c>)
 800106c:	2200      	movs	r2, #0
 800106e:	61da      	str	r2, [r3, #28]
    hdma_i2c3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001070:	4b2a      	ldr	r3, [pc, #168]	@ (800111c <HAL_I2C_MspInit+0x26c>)
 8001072:	2200      	movs	r2, #0
 8001074:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c3_tx) != HAL_OK)
 8001076:	4829      	ldr	r0, [pc, #164]	@ (800111c <HAL_I2C_MspInit+0x26c>)
 8001078:	f000 ff28 	bl	8001ecc <HAL_DMA_Init>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <HAL_I2C_MspInit+0x1d6>
      Error_Handler();
 8001082:	f000 f90d 	bl	80012a0 <Error_Handler>
    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c3_tx);
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	4a24      	ldr	r2, [pc, #144]	@ (800111c <HAL_I2C_MspInit+0x26c>)
 800108a:	639a      	str	r2, [r3, #56]	@ 0x38
 800108c:	4a23      	ldr	r2, [pc, #140]	@ (800111c <HAL_I2C_MspInit+0x26c>)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	6293      	str	r3, [r2, #40]	@ 0x28
    hdma_i2c3_rx.Instance = DMA1_Channel2;
 8001092:	4b24      	ldr	r3, [pc, #144]	@ (8001124 <HAL_I2C_MspInit+0x274>)
 8001094:	4a24      	ldr	r2, [pc, #144]	@ (8001128 <HAL_I2C_MspInit+0x278>)
 8001096:	601a      	str	r2, [r3, #0]
    hdma_i2c3_rx.Init.Request = DMA_REQUEST_I2C3_RX;
 8001098:	4b22      	ldr	r3, [pc, #136]	@ (8001124 <HAL_I2C_MspInit+0x274>)
 800109a:	2214      	movs	r2, #20
 800109c:	605a      	str	r2, [r3, #4]
    hdma_i2c3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800109e:	4b21      	ldr	r3, [pc, #132]	@ (8001124 <HAL_I2C_MspInit+0x274>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	609a      	str	r2, [r3, #8]
    hdma_i2c3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80010a4:	4b1f      	ldr	r3, [pc, #124]	@ (8001124 <HAL_I2C_MspInit+0x274>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	60da      	str	r2, [r3, #12]
    hdma_i2c3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80010aa:	4b1e      	ldr	r3, [pc, #120]	@ (8001124 <HAL_I2C_MspInit+0x274>)
 80010ac:	2280      	movs	r2, #128	@ 0x80
 80010ae:	611a      	str	r2, [r3, #16]
    hdma_i2c3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80010b0:	4b1c      	ldr	r3, [pc, #112]	@ (8001124 <HAL_I2C_MspInit+0x274>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	615a      	str	r2, [r3, #20]
    hdma_i2c3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80010b6:	4b1b      	ldr	r3, [pc, #108]	@ (8001124 <HAL_I2C_MspInit+0x274>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	619a      	str	r2, [r3, #24]
    hdma_i2c3_rx.Init.Mode = DMA_NORMAL;
 80010bc:	4b19      	ldr	r3, [pc, #100]	@ (8001124 <HAL_I2C_MspInit+0x274>)
 80010be:	2200      	movs	r2, #0
 80010c0:	61da      	str	r2, [r3, #28]
    hdma_i2c3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80010c2:	4b18      	ldr	r3, [pc, #96]	@ (8001124 <HAL_I2C_MspInit+0x274>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c3_rx) != HAL_OK)
 80010c8:	4816      	ldr	r0, [pc, #88]	@ (8001124 <HAL_I2C_MspInit+0x274>)
 80010ca:	f000 feff 	bl	8001ecc <HAL_DMA_Init>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d001      	beq.n	80010d8 <HAL_I2C_MspInit+0x228>
      Error_Handler();
 80010d4:	f000 f8e4 	bl	80012a0 <Error_Handler>
    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c3_rx);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	4a12      	ldr	r2, [pc, #72]	@ (8001124 <HAL_I2C_MspInit+0x274>)
 80010dc:	63da      	str	r2, [r3, #60]	@ 0x3c
 80010de:	4a11      	ldr	r2, [pc, #68]	@ (8001124 <HAL_I2C_MspInit+0x274>)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 0, 0);
 80010e4:	2200      	movs	r2, #0
 80010e6:	2100      	movs	r1, #0
 80010e8:	205c      	movs	r0, #92	@ 0x5c
 80010ea:	f000 feba 	bl	8001e62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 80010ee:	205c      	movs	r0, #92	@ 0x5c
 80010f0:	f000 fed1 	bl	8001e96 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C3_ER_IRQn, 0, 0);
 80010f4:	2200      	movs	r2, #0
 80010f6:	2100      	movs	r1, #0
 80010f8:	205d      	movs	r0, #93	@ 0x5d
 80010fa:	f000 feb2 	bl	8001e62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
 80010fe:	205d      	movs	r0, #93	@ 0x5d
 8001100:	f000 fec9 	bl	8001e96 <HAL_NVIC_EnableIRQ>
}
 8001104:	bf00      	nop
 8001106:	3778      	adds	r7, #120	@ 0x78
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}
 800110c:	40005400 	.word	0x40005400
 8001110:	40021000 	.word	0x40021000
 8001114:	48000400 	.word	0x48000400
 8001118:	40007800 	.word	0x40007800
 800111c:	200000d4 	.word	0x200000d4
 8001120:	40020008 	.word	0x40020008
 8001124:	20000134 	.word	0x20000134
 8001128:	4002001c 	.word	0x4002001c

0800112c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001132:	f000 fd28 	bl	8001b86 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001136:	f000 f851 	bl	80011dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800113a:	f7ff fded 	bl	8000d18 <MX_GPIO_Init>
  MX_DMA_Init();
 800113e:	f7ff fdb1 	bl	8000ca4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001142:	f000 fc53 	bl	80019ec <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001146:	f7ff fe33 	bl	8000db0 <MX_I2C1_Init>
  MX_TIM3_Init();
 800114a:	f000 f98f 	bl	800146c <MX_TIM3_Init>
  MX_TIM4_Init();
 800114e:	f000 f9e3 	bl	8001518 <MX_TIM4_Init>
  MX_I2C3_Init();
 8001152:	f7ff fe6d 	bl	8000e30 <MX_I2C3_Init>
  MX_TIM2_Init();
 8001156:	f000 f93f 	bl	80013d8 <MX_TIM2_Init>
  MX_TIM8_Init();
 800115a:	f000 fa33 	bl	80015c4 <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */
  CHECK(BNO055_Init(&bno, &hi2c3, 0, NDOF))
 800115e:	e002      	b.n	8001166 <main+0x3a>
 8001160:	2064      	movs	r0, #100	@ 0x64
 8001162:	f000 fd81 	bl	8001c68 <HAL_Delay>
 8001166:	230c      	movs	r3, #12
 8001168:	2200      	movs	r2, #0
 800116a:	4918      	ldr	r1, [pc, #96]	@ (80011cc <main+0xa0>)
 800116c:	4818      	ldr	r0, [pc, #96]	@ (80011d0 <main+0xa4>)
 800116e:	f006 fcd5 	bl	8007b1c <BNO055_Init>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d1f3      	bne.n	8001160 <main+0x34>
  #ifdef BNO055_CALIB
  BNO055_Calibrated(&bno, &bno_stat, &bno_off);
 8001178:	4a16      	ldr	r2, [pc, #88]	@ (80011d4 <main+0xa8>)
 800117a:	4917      	ldr	r1, [pc, #92]	@ (80011d8 <main+0xac>)
 800117c:	4814      	ldr	r0, [pc, #80]	@ (80011d0 <main+0xa4>)
 800117e:	f006 ff65 	bl	800804c <BNO055_Calibrated>
  #endif
  BNO055_SetOffsets(&bno, &bno_off);
 8001182:	4914      	ldr	r1, [pc, #80]	@ (80011d4 <main+0xa8>)
 8001184:	4812      	ldr	r0, [pc, #72]	@ (80011d0 <main+0xa4>)
 8001186:	f007 f997 	bl	80084b8 <BNO055_SetOffsets>
  BNO55_SetAxis(&bno, P0_Config, P0_Sign);
 800118a:	2204      	movs	r2, #4
 800118c:	2121      	movs	r1, #33	@ 0x21
 800118e:	4810      	ldr	r0, [pc, #64]	@ (80011d0 <main+0xa4>)
 8001190:	f007 fa45 	bl	800861e <BNO55_SetAxis>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint32_t bno_time = HAL_GetTick() + 10;
 8001194:	f000 fd5c 	bl	8001c50 <HAL_GetTick>
 8001198:	4603      	mov	r3, r0
 800119a:	330a      	adds	r3, #10
 800119c:	607b      	str	r3, [r7, #4]
  while (1)
  {
	uint32_t time = HAL_GetTick();
 800119e:	f000 fd57 	bl	8001c50 <HAL_GetTick>
 80011a2:	6038      	str	r0, [r7, #0]
	if (bno.flag == HAL_OK && time >= bno_time)
 80011a4:	4b0a      	ldr	r3, [pc, #40]	@ (80011d0 <main+0xa4>)
 80011a6:	799b      	ldrb	r3, [r3, #6]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d1f8      	bne.n	800119e <main+0x72>
 80011ac:	683a      	ldr	r2, [r7, #0]
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	429a      	cmp	r2, r3
 80011b2:	d3f4      	bcc.n	800119e <main+0x72>
	{
		bno_time += 10;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	330a      	adds	r3, #10
 80011b8:	607b      	str	r3, [r7, #4]
		BNO055_Read_DMA(&bno, 1);
 80011ba:	2101      	movs	r1, #1
 80011bc:	4804      	ldr	r0, [pc, #16]	@ (80011d0 <main+0xa4>)
 80011be:	f006 fd8f 	bl	8007ce0 <BNO055_Read_DMA>
		bno.flag = HAL_BUSY;
 80011c2:	4b03      	ldr	r3, [pc, #12]	@ (80011d0 <main+0xa4>)
 80011c4:	2202      	movs	r2, #2
 80011c6:	719a      	strb	r2, [r3, #6]
  {
 80011c8:	e7e9      	b.n	800119e <main+0x72>
 80011ca:	bf00      	nop
 80011cc:	20000080 	.word	0x20000080
 80011d0:	20000198 	.word	0x20000198
 80011d4:	20000280 	.word	0x20000280
 80011d8:	20000298 	.word	0x20000298

080011dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b094      	sub	sp, #80	@ 0x50
 80011e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011e2:	f107 0318 	add.w	r3, r7, #24
 80011e6:	2238      	movs	r2, #56	@ 0x38
 80011e8:	2100      	movs	r1, #0
 80011ea:	4618      	mov	r0, r3
 80011ec:	f007 fa9d 	bl	800872a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011f0:	1d3b      	adds	r3, r7, #4
 80011f2:	2200      	movs	r2, #0
 80011f4:	601a      	str	r2, [r3, #0]
 80011f6:	605a      	str	r2, [r3, #4]
 80011f8:	609a      	str	r2, [r3, #8]
 80011fa:	60da      	str	r2, [r3, #12]
 80011fc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80011fe:	2000      	movs	r0, #0
 8001200:	f003 fcbc 	bl	8004b7c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001204:	2302      	movs	r3, #2
 8001206:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001208:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800120c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800120e:	2340      	movs	r3, #64	@ 0x40
 8001210:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001212:	2302      	movs	r3, #2
 8001214:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001216:	2302      	movs	r3, #2
 8001218:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800121a:	2304      	movs	r3, #4
 800121c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800121e:	2355      	movs	r3, #85	@ 0x55
 8001220:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001222:	2302      	movs	r3, #2
 8001224:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001226:	2302      	movs	r3, #2
 8001228:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800122a:	2302      	movs	r3, #2
 800122c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800122e:	f107 0318 	add.w	r3, r7, #24
 8001232:	4618      	mov	r0, r3
 8001234:	f003 fd56 	bl	8004ce4 <HAL_RCC_OscConfig>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d001      	beq.n	8001242 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800123e:	f000 f82f 	bl	80012a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001242:	230f      	movs	r3, #15
 8001244:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001246:	2303      	movs	r3, #3
 8001248:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800124a:	2300      	movs	r3, #0
 800124c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800124e:	2300      	movs	r3, #0
 8001250:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001252:	2300      	movs	r3, #0
 8001254:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001256:	1d3b      	adds	r3, r7, #4
 8001258:	2104      	movs	r1, #4
 800125a:	4618      	mov	r0, r3
 800125c:	f004 f854 	bl	8005308 <HAL_RCC_ClockConfig>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d001      	beq.n	800126a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001266:	f000 f81b 	bl	80012a0 <Error_Handler>
  }
}
 800126a:	bf00      	nop
 800126c:	3750      	adds	r7, #80	@ 0x50
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
	...

08001274 <HAL_I2C_MemRxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001274:	b480      	push	{r7}
 8001276:	b083      	sub	sp, #12
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
	if (hi2c->Instance == bno.hi2cx->Instance) bno.flag = HAL_OK;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681a      	ldr	r2, [r3, #0]
 8001280:	4b06      	ldr	r3, [pc, #24]	@ (800129c <HAL_I2C_MemRxCpltCallback+0x28>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	429a      	cmp	r2, r3
 8001288:	d102      	bne.n	8001290 <HAL_I2C_MemRxCpltCallback+0x1c>
 800128a:	4b04      	ldr	r3, [pc, #16]	@ (800129c <HAL_I2C_MemRxCpltCallback+0x28>)
 800128c:	2200      	movs	r2, #0
 800128e:	719a      	strb	r2, [r3, #6]
}
 8001290:	bf00      	nop
 8001292:	370c      	adds	r7, #12
 8001294:	46bd      	mov	sp, r7
 8001296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129a:	4770      	bx	lr
 800129c:	20000198 	.word	0x20000198

080012a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012a4:	b672      	cpsid	i
}
 80012a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012a8:	bf00      	nop
 80012aa:	e7fd      	b.n	80012a8 <Error_Handler+0x8>

080012ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b082      	sub	sp, #8
 80012b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012b2:	4b0f      	ldr	r3, [pc, #60]	@ (80012f0 <HAL_MspInit+0x44>)
 80012b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012b6:	4a0e      	ldr	r2, [pc, #56]	@ (80012f0 <HAL_MspInit+0x44>)
 80012b8:	f043 0301 	orr.w	r3, r3, #1
 80012bc:	6613      	str	r3, [r2, #96]	@ 0x60
 80012be:	4b0c      	ldr	r3, [pc, #48]	@ (80012f0 <HAL_MspInit+0x44>)
 80012c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012c2:	f003 0301 	and.w	r3, r3, #1
 80012c6:	607b      	str	r3, [r7, #4]
 80012c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012ca:	4b09      	ldr	r3, [pc, #36]	@ (80012f0 <HAL_MspInit+0x44>)
 80012cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012ce:	4a08      	ldr	r2, [pc, #32]	@ (80012f0 <HAL_MspInit+0x44>)
 80012d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012d4:	6593      	str	r3, [r2, #88]	@ 0x58
 80012d6:	4b06      	ldr	r3, [pc, #24]	@ (80012f0 <HAL_MspInit+0x44>)
 80012d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012de:	603b      	str	r3, [r7, #0]
 80012e0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80012e2:	f003 fcef 	bl	8004cc4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012e6:	bf00      	nop
 80012e8:	3708      	adds	r7, #8
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	40021000 	.word	0x40021000

080012f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80012f8:	bf00      	nop
 80012fa:	e7fd      	b.n	80012f8 <NMI_Handler+0x4>

080012fc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001300:	bf00      	nop
 8001302:	e7fd      	b.n	8001300 <HardFault_Handler+0x4>

08001304 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001308:	bf00      	nop
 800130a:	e7fd      	b.n	8001308 <MemManage_Handler+0x4>

0800130c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800130c:	b480      	push	{r7}
 800130e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001310:	bf00      	nop
 8001312:	e7fd      	b.n	8001310 <BusFault_Handler+0x4>

08001314 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001318:	bf00      	nop
 800131a:	e7fd      	b.n	8001318 <UsageFault_Handler+0x4>

0800131c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001320:	bf00      	nop
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr

0800132a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800132a:	b480      	push	{r7}
 800132c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800132e:	bf00      	nop
 8001330:	46bd      	mov	sp, r7
 8001332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001336:	4770      	bx	lr

08001338 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800133c:	bf00      	nop
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr

08001346 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001346:	b580      	push	{r7, lr}
 8001348:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800134a:	f000 fc6f 	bl	8001c2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800134e:	bf00      	nop
 8001350:	bd80      	pop	{r7, pc}
	...

08001354 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c3_tx);
 8001358:	4802      	ldr	r0, [pc, #8]	@ (8001364 <DMA1_Channel1_IRQHandler+0x10>)
 800135a:	f000 ff41 	bl	80021e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800135e:	bf00      	nop
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	200000d4 	.word	0x200000d4

08001368 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c3_rx);
 800136c:	4802      	ldr	r0, [pc, #8]	@ (8001378 <DMA1_Channel2_IRQHandler+0x10>)
 800136e:	f000 ff37 	bl	80021e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001372:	bf00      	nop
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	20000134 	.word	0x20000134

0800137c <I2C3_EV_IRQHandler>:

/**
  * @brief This function handles I2C3 event interrupt / I2C3 wake-up interrupt through EXTI line 27.
  */
void I2C3_EV_IRQHandler(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c3);
 8001380:	4802      	ldr	r0, [pc, #8]	@ (800138c <I2C3_EV_IRQHandler+0x10>)
 8001382:	f001 fdd5 	bl	8002f30 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C3_EV_IRQn 1 */

  /* USER CODE END I2C3_EV_IRQn 1 */
}
 8001386:	bf00      	nop
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	20000080 	.word	0x20000080

08001390 <I2C3_ER_IRQHandler>:

/**
  * @brief This function handles I2C3 error interrupt.
  */
void I2C3_ER_IRQHandler(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_ER_IRQn 0 */

  /* USER CODE END I2C3_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c3);
 8001394:	4802      	ldr	r0, [pc, #8]	@ (80013a0 <I2C3_ER_IRQHandler+0x10>)
 8001396:	f001 fde5 	bl	8002f64 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C3_ER_IRQn 1 */

  /* USER CODE END I2C3_ER_IRQn 1 */
}
 800139a:	bf00      	nop
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	20000080 	.word	0x20000080

080013a4 <DMAMUX_OVR_IRQHandler>:

/**
  * @brief This function handles DMAMUX overrun interrupt.
  */
void DMAMUX_OVR_IRQHandler(void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	af00      	add	r7, sp, #0
  /* USER CODE END DMAMUX_OVR_IRQn 0 */

  /* USER CODE BEGIN DMAMUX_OVR_IRQn 1 */

  /* USER CODE END DMAMUX_OVR_IRQn 1 */
}
 80013a8:	bf00      	nop
 80013aa:	46bd      	mov	sp, r7
 80013ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b0:	4770      	bx	lr
	...

080013b4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80013b8:	4b06      	ldr	r3, [pc, #24]	@ (80013d4 <SystemInit+0x20>)
 80013ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80013be:	4a05      	ldr	r2, [pc, #20]	@ (80013d4 <SystemInit+0x20>)
 80013c0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80013c4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013c8:	bf00      	nop
 80013ca:	46bd      	mov	sp, r7
 80013cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d0:	4770      	bx	lr
 80013d2:	bf00      	nop
 80013d4:	e000ed00 	.word	0xe000ed00

080013d8 <MX_TIM2_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim8;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b088      	sub	sp, #32
 80013dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_HallSensor_InitTypeDef sConfig = {0};
 80013de:	f107 0310 	add.w	r3, r7, #16
 80013e2:	2200      	movs	r2, #0
 80013e4:	601a      	str	r2, [r3, #0]
 80013e6:	605a      	str	r2, [r3, #4]
 80013e8:	609a      	str	r2, [r3, #8]
 80013ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013ec:	1d3b      	adds	r3, r7, #4
 80013ee:	2200      	movs	r2, #0
 80013f0:	601a      	str	r2, [r3, #0]
 80013f2:	605a      	str	r2, [r3, #4]
 80013f4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80013f6:	4b1c      	ldr	r3, [pc, #112]	@ (8001468 <MX_TIM2_Init+0x90>)
 80013f8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80013fc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80013fe:	4b1a      	ldr	r3, [pc, #104]	@ (8001468 <MX_TIM2_Init+0x90>)
 8001400:	2200      	movs	r2, #0
 8001402:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001404:	4b18      	ldr	r3, [pc, #96]	@ (8001468 <MX_TIM2_Init+0x90>)
 8001406:	2200      	movs	r2, #0
 8001408:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800140a:	4b17      	ldr	r3, [pc, #92]	@ (8001468 <MX_TIM2_Init+0x90>)
 800140c:	f04f 32ff 	mov.w	r2, #4294967295
 8001410:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001412:	4b15      	ldr	r3, [pc, #84]	@ (8001468 <MX_TIM2_Init+0x90>)
 8001414:	2200      	movs	r2, #0
 8001416:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001418:	4b13      	ldr	r3, [pc, #76]	@ (8001468 <MX_TIM2_Init+0x90>)
 800141a:	2200      	movs	r2, #0
 800141c:	619a      	str	r2, [r3, #24]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800141e:	2300      	movs	r3, #0
 8001420:	613b      	str	r3, [r7, #16]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001422:	2300      	movs	r3, #0
 8001424:	617b      	str	r3, [r7, #20]
  sConfig.IC1Filter = 0;
 8001426:	2300      	movs	r3, #0
 8001428:	61bb      	str	r3, [r7, #24]
  sConfig.Commutation_Delay = 0;
 800142a:	2300      	movs	r3, #0
 800142c:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_HallSensor_Init(&htim2, &sConfig) != HAL_OK)
 800142e:	f107 0310 	add.w	r3, r7, #16
 8001432:	4619      	mov	r1, r3
 8001434:	480c      	ldr	r0, [pc, #48]	@ (8001468 <MX_TIM2_Init+0x90>)
 8001436:	f005 fb75 	bl	8006b24 <HAL_TIMEx_HallSensor_Init>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d001      	beq.n	8001444 <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 8001440:	f7ff ff2e 	bl	80012a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 8001444:	2350      	movs	r3, #80	@ 0x50
 8001446:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001448:	2300      	movs	r3, #0
 800144a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800144c:	1d3b      	adds	r3, r7, #4
 800144e:	4619      	mov	r1, r3
 8001450:	4805      	ldr	r0, [pc, #20]	@ (8001468 <MX_TIM2_Init+0x90>)
 8001452:	f005 fc17 	bl	8006c84 <HAL_TIMEx_MasterConfigSynchronization>
 8001456:	4603      	mov	r3, r0
 8001458:	2b00      	cmp	r3, #0
 800145a:	d001      	beq.n	8001460 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 800145c:	f7ff ff20 	bl	80012a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001460:	bf00      	nop
 8001462:	3720      	adds	r7, #32
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}
 8001468:	2000029c 	.word	0x2000029c

0800146c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b08c      	sub	sp, #48	@ 0x30
 8001470:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001472:	f107 030c 	add.w	r3, r7, #12
 8001476:	2224      	movs	r2, #36	@ 0x24
 8001478:	2100      	movs	r1, #0
 800147a:	4618      	mov	r0, r3
 800147c:	f007 f955 	bl	800872a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001480:	463b      	mov	r3, r7
 8001482:	2200      	movs	r2, #0
 8001484:	601a      	str	r2, [r3, #0]
 8001486:	605a      	str	r2, [r3, #4]
 8001488:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800148a:	4b21      	ldr	r3, [pc, #132]	@ (8001510 <MX_TIM3_Init+0xa4>)
 800148c:	4a21      	ldr	r2, [pc, #132]	@ (8001514 <MX_TIM3_Init+0xa8>)
 800148e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001490:	4b1f      	ldr	r3, [pc, #124]	@ (8001510 <MX_TIM3_Init+0xa4>)
 8001492:	2200      	movs	r2, #0
 8001494:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001496:	4b1e      	ldr	r3, [pc, #120]	@ (8001510 <MX_TIM3_Init+0xa4>)
 8001498:	2200      	movs	r2, #0
 800149a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800149c:	4b1c      	ldr	r3, [pc, #112]	@ (8001510 <MX_TIM3_Init+0xa4>)
 800149e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80014a2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014a4:	4b1a      	ldr	r3, [pc, #104]	@ (8001510 <MX_TIM3_Init+0xa4>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014aa:	4b19      	ldr	r3, [pc, #100]	@ (8001510 <MX_TIM3_Init+0xa4>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80014b0:	2301      	movs	r3, #1
 80014b2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80014b4:	2300      	movs	r3, #0
 80014b6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80014b8:	2301      	movs	r3, #1
 80014ba:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80014bc:	2300      	movs	r3, #0
 80014be:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80014c0:	2300      	movs	r3, #0
 80014c2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80014c4:	2300      	movs	r3, #0
 80014c6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80014c8:	2301      	movs	r3, #1
 80014ca:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80014cc:	2300      	movs	r3, #0
 80014ce:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80014d0:	2300      	movs	r3, #0
 80014d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80014d4:	f107 030c 	add.w	r3, r7, #12
 80014d8:	4619      	mov	r1, r3
 80014da:	480d      	ldr	r0, [pc, #52]	@ (8001510 <MX_TIM3_Init+0xa4>)
 80014dc:	f004 fbd8 	bl	8005c90 <HAL_TIM_Encoder_Init>
 80014e0:	4603      	mov	r3, r0
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d001      	beq.n	80014ea <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 80014e6:	f7ff fedb 	bl	80012a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014ea:	2300      	movs	r3, #0
 80014ec:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014ee:	2300      	movs	r3, #0
 80014f0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80014f2:	463b      	mov	r3, r7
 80014f4:	4619      	mov	r1, r3
 80014f6:	4806      	ldr	r0, [pc, #24]	@ (8001510 <MX_TIM3_Init+0xa4>)
 80014f8:	f005 fbc4 	bl	8006c84 <HAL_TIMEx_MasterConfigSynchronization>
 80014fc:	4603      	mov	r3, r0
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d001      	beq.n	8001506 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8001502:	f7ff fecd 	bl	80012a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001506:	bf00      	nop
 8001508:	3730      	adds	r7, #48	@ 0x30
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	200002e8 	.word	0x200002e8
 8001514:	40000400 	.word	0x40000400

08001518 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b08c      	sub	sp, #48	@ 0x30
 800151c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800151e:	f107 030c 	add.w	r3, r7, #12
 8001522:	2224      	movs	r2, #36	@ 0x24
 8001524:	2100      	movs	r1, #0
 8001526:	4618      	mov	r0, r3
 8001528:	f007 f8ff 	bl	800872a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800152c:	463b      	mov	r3, r7
 800152e:	2200      	movs	r2, #0
 8001530:	601a      	str	r2, [r3, #0]
 8001532:	605a      	str	r2, [r3, #4]
 8001534:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001536:	4b21      	ldr	r3, [pc, #132]	@ (80015bc <MX_TIM4_Init+0xa4>)
 8001538:	4a21      	ldr	r2, [pc, #132]	@ (80015c0 <MX_TIM4_Init+0xa8>)
 800153a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800153c:	4b1f      	ldr	r3, [pc, #124]	@ (80015bc <MX_TIM4_Init+0xa4>)
 800153e:	2200      	movs	r2, #0
 8001540:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001542:	4b1e      	ldr	r3, [pc, #120]	@ (80015bc <MX_TIM4_Init+0xa4>)
 8001544:	2200      	movs	r2, #0
 8001546:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001548:	4b1c      	ldr	r3, [pc, #112]	@ (80015bc <MX_TIM4_Init+0xa4>)
 800154a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800154e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001550:	4b1a      	ldr	r3, [pc, #104]	@ (80015bc <MX_TIM4_Init+0xa4>)
 8001552:	2200      	movs	r2, #0
 8001554:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001556:	4b19      	ldr	r3, [pc, #100]	@ (80015bc <MX_TIM4_Init+0xa4>)
 8001558:	2200      	movs	r2, #0
 800155a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800155c:	2301      	movs	r3, #1
 800155e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001560:	2300      	movs	r3, #0
 8001562:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001564:	2301      	movs	r3, #1
 8001566:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001568:	2300      	movs	r3, #0
 800156a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800156c:	2300      	movs	r3, #0
 800156e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001570:	2300      	movs	r3, #0
 8001572:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001574:	2301      	movs	r3, #1
 8001576:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001578:	2300      	movs	r3, #0
 800157a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800157c:	2300      	movs	r3, #0
 800157e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001580:	f107 030c 	add.w	r3, r7, #12
 8001584:	4619      	mov	r1, r3
 8001586:	480d      	ldr	r0, [pc, #52]	@ (80015bc <MX_TIM4_Init+0xa4>)
 8001588:	f004 fb82 	bl	8005c90 <HAL_TIM_Encoder_Init>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d001      	beq.n	8001596 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8001592:	f7ff fe85 	bl	80012a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001596:	2300      	movs	r3, #0
 8001598:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800159a:	2300      	movs	r3, #0
 800159c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800159e:	463b      	mov	r3, r7
 80015a0:	4619      	mov	r1, r3
 80015a2:	4806      	ldr	r0, [pc, #24]	@ (80015bc <MX_TIM4_Init+0xa4>)
 80015a4:	f005 fb6e 	bl	8006c84 <HAL_TIMEx_MasterConfigSynchronization>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d001      	beq.n	80015b2 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 80015ae:	f7ff fe77 	bl	80012a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80015b2:	bf00      	nop
 80015b4:	3730      	adds	r7, #48	@ 0x30
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	20000334 	.word	0x20000334
 80015c0:	40000800 	.word	0x40000800

080015c4 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b09c      	sub	sp, #112	@ 0x70
 80015c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015ca:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80015ce:	2200      	movs	r2, #0
 80015d0:	601a      	str	r2, [r3, #0]
 80015d2:	605a      	str	r2, [r3, #4]
 80015d4:	609a      	str	r2, [r3, #8]
 80015d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015d8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80015dc:	2200      	movs	r2, #0
 80015de:	601a      	str	r2, [r3, #0]
 80015e0:	605a      	str	r2, [r3, #4]
 80015e2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015e4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80015e8:	2200      	movs	r2, #0
 80015ea:	601a      	str	r2, [r3, #0]
 80015ec:	605a      	str	r2, [r3, #4]
 80015ee:	609a      	str	r2, [r3, #8]
 80015f0:	60da      	str	r2, [r3, #12]
 80015f2:	611a      	str	r2, [r3, #16]
 80015f4:	615a      	str	r2, [r3, #20]
 80015f6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80015f8:	1d3b      	adds	r3, r7, #4
 80015fa:	2234      	movs	r2, #52	@ 0x34
 80015fc:	2100      	movs	r1, #0
 80015fe:	4618      	mov	r0, r3
 8001600:	f007 f893 	bl	800872a <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001604:	4b4b      	ldr	r3, [pc, #300]	@ (8001734 <MX_TIM8_Init+0x170>)
 8001606:	4a4c      	ldr	r2, [pc, #304]	@ (8001738 <MX_TIM8_Init+0x174>)
 8001608:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800160a:	4b4a      	ldr	r3, [pc, #296]	@ (8001734 <MX_TIM8_Init+0x170>)
 800160c:	2200      	movs	r2, #0
 800160e:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001610:	4b48      	ldr	r3, [pc, #288]	@ (8001734 <MX_TIM8_Init+0x170>)
 8001612:	2200      	movs	r2, #0
 8001614:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001616:	4b47      	ldr	r3, [pc, #284]	@ (8001734 <MX_TIM8_Init+0x170>)
 8001618:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800161c:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800161e:	4b45      	ldr	r3, [pc, #276]	@ (8001734 <MX_TIM8_Init+0x170>)
 8001620:	2200      	movs	r2, #0
 8001622:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001624:	4b43      	ldr	r3, [pc, #268]	@ (8001734 <MX_TIM8_Init+0x170>)
 8001626:	2200      	movs	r2, #0
 8001628:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800162a:	4b42      	ldr	r3, [pc, #264]	@ (8001734 <MX_TIM8_Init+0x170>)
 800162c:	2200      	movs	r2, #0
 800162e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001630:	4840      	ldr	r0, [pc, #256]	@ (8001734 <MX_TIM8_Init+0x170>)
 8001632:	f004 fa75 	bl	8005b20 <HAL_TIM_Base_Init>
 8001636:	4603      	mov	r3, r0
 8001638:	2b00      	cmp	r3, #0
 800163a:	d001      	beq.n	8001640 <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 800163c:	f7ff fe30 	bl	80012a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001640:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001644:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001646:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800164a:	4619      	mov	r1, r3
 800164c:	4839      	ldr	r0, [pc, #228]	@ (8001734 <MX_TIM8_Init+0x170>)
 800164e:	f004 fcd9 	bl	8006004 <HAL_TIM_ConfigClockSource>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d001      	beq.n	800165c <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 8001658:	f7ff fe22 	bl	80012a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800165c:	4835      	ldr	r0, [pc, #212]	@ (8001734 <MX_TIM8_Init+0x170>)
 800165e:	f004 fab6 	bl	8005bce <HAL_TIM_PWM_Init>
 8001662:	4603      	mov	r3, r0
 8001664:	2b00      	cmp	r3, #0
 8001666:	d001      	beq.n	800166c <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 8001668:	f7ff fe1a 	bl	80012a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800166c:	2300      	movs	r3, #0
 800166e:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001670:	2300      	movs	r3, #0
 8001672:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001674:	2300      	movs	r3, #0
 8001676:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001678:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800167c:	4619      	mov	r1, r3
 800167e:	482d      	ldr	r0, [pc, #180]	@ (8001734 <MX_TIM8_Init+0x170>)
 8001680:	f005 fb00 	bl	8006c84 <HAL_TIMEx_MasterConfigSynchronization>
 8001684:	4603      	mov	r3, r0
 8001686:	2b00      	cmp	r3, #0
 8001688:	d001      	beq.n	800168e <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 800168a:	f7ff fe09 	bl	80012a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800168e:	2360      	movs	r3, #96	@ 0x60
 8001690:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8001692:	2300      	movs	r3, #0
 8001694:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001696:	2300      	movs	r3, #0
 8001698:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800169a:	2300      	movs	r3, #0
 800169c:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800169e:	2300      	movs	r3, #0
 80016a0:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80016a2:	2300      	movs	r3, #0
 80016a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80016a6:	2300      	movs	r3, #0
 80016a8:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80016aa:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80016ae:	2200      	movs	r2, #0
 80016b0:	4619      	mov	r1, r3
 80016b2:	4820      	ldr	r0, [pc, #128]	@ (8001734 <MX_TIM8_Init+0x170>)
 80016b4:	f004 fb92 	bl	8005ddc <HAL_TIM_PWM_ConfigChannel>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d001      	beq.n	80016c2 <MX_TIM8_Init+0xfe>
  {
    Error_Handler();
 80016be:	f7ff fdef 	bl	80012a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80016c2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80016c6:	2204      	movs	r2, #4
 80016c8:	4619      	mov	r1, r3
 80016ca:	481a      	ldr	r0, [pc, #104]	@ (8001734 <MX_TIM8_Init+0x170>)
 80016cc:	f004 fb86 	bl	8005ddc <HAL_TIM_PWM_ConfigChannel>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d001      	beq.n	80016da <MX_TIM8_Init+0x116>
  {
    Error_Handler();
 80016d6:	f7ff fde3 	bl	80012a0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80016da:	2300      	movs	r3, #0
 80016dc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80016de:	2300      	movs	r3, #0
 80016e0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80016e2:	2300      	movs	r3, #0
 80016e4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80016e6:	2300      	movs	r3, #0
 80016e8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80016ea:	2300      	movs	r3, #0
 80016ec:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80016ee:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80016f2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80016f4:	2300      	movs	r3, #0
 80016f6:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80016f8:	2300      	movs	r3, #0
 80016fa:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80016fc:	2300      	movs	r3, #0
 80016fe:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001700:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001704:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001706:	2300      	movs	r3, #0
 8001708:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800170a:	2300      	movs	r3, #0
 800170c:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800170e:	2300      	movs	r3, #0
 8001710:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001712:	1d3b      	adds	r3, r7, #4
 8001714:	4619      	mov	r1, r3
 8001716:	4807      	ldr	r0, [pc, #28]	@ (8001734 <MX_TIM8_Init+0x170>)
 8001718:	f005 fb36 	bl	8006d88 <HAL_TIMEx_ConfigBreakDeadTime>
 800171c:	4603      	mov	r3, r0
 800171e:	2b00      	cmp	r3, #0
 8001720:	d001      	beq.n	8001726 <MX_TIM8_Init+0x162>
  {
    Error_Handler();
 8001722:	f7ff fdbd 	bl	80012a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001726:	4803      	ldr	r0, [pc, #12]	@ (8001734 <MX_TIM8_Init+0x170>)
 8001728:	f000 f90c 	bl	8001944 <HAL_TIM_MspPostInit>

}
 800172c:	bf00      	nop
 800172e:	3770      	adds	r7, #112	@ 0x70
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}
 8001734:	20000380 	.word	0x20000380
 8001738:	40013400 	.word	0x40013400

0800173c <HAL_TIMEx_HallSensor_MspInit>:

void HAL_TIMEx_HallSensor_MspInit(TIM_HandleTypeDef* timex_hallsensorHandle)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b08a      	sub	sp, #40	@ 0x28
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001744:	f107 0314 	add.w	r3, r7, #20
 8001748:	2200      	movs	r2, #0
 800174a:	601a      	str	r2, [r3, #0]
 800174c:	605a      	str	r2, [r3, #4]
 800174e:	609a      	str	r2, [r3, #8]
 8001750:	60da      	str	r2, [r3, #12]
 8001752:	611a      	str	r2, [r3, #16]
  if(timex_hallsensorHandle->Instance==TIM2)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800175c:	d13a      	bne.n	80017d4 <HAL_TIMEx_HallSensor_MspInit+0x98>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800175e:	4b1f      	ldr	r3, [pc, #124]	@ (80017dc <HAL_TIMEx_HallSensor_MspInit+0xa0>)
 8001760:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001762:	4a1e      	ldr	r2, [pc, #120]	@ (80017dc <HAL_TIMEx_HallSensor_MspInit+0xa0>)
 8001764:	f043 0301 	orr.w	r3, r3, #1
 8001768:	6593      	str	r3, [r2, #88]	@ 0x58
 800176a:	4b1c      	ldr	r3, [pc, #112]	@ (80017dc <HAL_TIMEx_HallSensor_MspInit+0xa0>)
 800176c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800176e:	f003 0301 	and.w	r3, r3, #1
 8001772:	613b      	str	r3, [r7, #16]
 8001774:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001776:	4b19      	ldr	r3, [pc, #100]	@ (80017dc <HAL_TIMEx_HallSensor_MspInit+0xa0>)
 8001778:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800177a:	4a18      	ldr	r2, [pc, #96]	@ (80017dc <HAL_TIMEx_HallSensor_MspInit+0xa0>)
 800177c:	f043 0301 	orr.w	r3, r3, #1
 8001780:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001782:	4b16      	ldr	r3, [pc, #88]	@ (80017dc <HAL_TIMEx_HallSensor_MspInit+0xa0>)
 8001784:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001786:	f003 0301 	and.w	r3, r3, #1
 800178a:	60fb      	str	r3, [r7, #12]
 800178c:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA5     ------> TIM2_CH1
    PA9     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5;
 800178e:	2322      	movs	r3, #34	@ 0x22
 8001790:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001792:	2302      	movs	r3, #2
 8001794:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001796:	2300      	movs	r3, #0
 8001798:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800179a:	2300      	movs	r3, #0
 800179c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800179e:	2301      	movs	r3, #1
 80017a0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017a2:	f107 0314 	add.w	r3, r7, #20
 80017a6:	4619      	mov	r1, r3
 80017a8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80017ac:	f000 fe76 	bl	800249c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80017b0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80017b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017b6:	2302      	movs	r3, #2
 80017b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ba:	2300      	movs	r3, #0
 80017bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017be:	2300      	movs	r3, #0
 80017c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM2;
 80017c2:	230a      	movs	r3, #10
 80017c4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017c6:	f107 0314 	add.w	r3, r7, #20
 80017ca:	4619      	mov	r1, r3
 80017cc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80017d0:	f000 fe64 	bl	800249c <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80017d4:	bf00      	nop
 80017d6:	3728      	adds	r7, #40	@ 0x28
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}
 80017dc:	40021000 	.word	0x40021000

080017e0 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b08c      	sub	sp, #48	@ 0x30
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017e8:	f107 031c 	add.w	r3, r7, #28
 80017ec:	2200      	movs	r2, #0
 80017ee:	601a      	str	r2, [r3, #0]
 80017f0:	605a      	str	r2, [r3, #4]
 80017f2:	609a      	str	r2, [r3, #8]
 80017f4:	60da      	str	r2, [r3, #12]
 80017f6:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a3d      	ldr	r2, [pc, #244]	@ (80018f4 <HAL_TIM_Encoder_MspInit+0x114>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d145      	bne.n	800188e <HAL_TIM_Encoder_MspInit+0xae>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001802:	4b3d      	ldr	r3, [pc, #244]	@ (80018f8 <HAL_TIM_Encoder_MspInit+0x118>)
 8001804:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001806:	4a3c      	ldr	r2, [pc, #240]	@ (80018f8 <HAL_TIM_Encoder_MspInit+0x118>)
 8001808:	f043 0302 	orr.w	r3, r3, #2
 800180c:	6593      	str	r3, [r2, #88]	@ 0x58
 800180e:	4b3a      	ldr	r3, [pc, #232]	@ (80018f8 <HAL_TIM_Encoder_MspInit+0x118>)
 8001810:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001812:	f003 0302 	and.w	r3, r3, #2
 8001816:	61bb      	str	r3, [r7, #24]
 8001818:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800181a:	4b37      	ldr	r3, [pc, #220]	@ (80018f8 <HAL_TIM_Encoder_MspInit+0x118>)
 800181c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800181e:	4a36      	ldr	r2, [pc, #216]	@ (80018f8 <HAL_TIM_Encoder_MspInit+0x118>)
 8001820:	f043 0301 	orr.w	r3, r3, #1
 8001824:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001826:	4b34      	ldr	r3, [pc, #208]	@ (80018f8 <HAL_TIM_Encoder_MspInit+0x118>)
 8001828:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800182a:	f003 0301 	and.w	r3, r3, #1
 800182e:	617b      	str	r3, [r7, #20]
 8001830:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001832:	4b31      	ldr	r3, [pc, #196]	@ (80018f8 <HAL_TIM_Encoder_MspInit+0x118>)
 8001834:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001836:	4a30      	ldr	r2, [pc, #192]	@ (80018f8 <HAL_TIM_Encoder_MspInit+0x118>)
 8001838:	f043 0302 	orr.w	r3, r3, #2
 800183c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800183e:	4b2e      	ldr	r3, [pc, #184]	@ (80018f8 <HAL_TIM_Encoder_MspInit+0x118>)
 8001840:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001842:	f003 0302 	and.w	r3, r3, #2
 8001846:	613b      	str	r3, [r7, #16]
 8001848:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PA4     ------> TIM3_CH2
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800184a:	2310      	movs	r3, #16
 800184c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800184e:	2302      	movs	r3, #2
 8001850:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001852:	2300      	movs	r3, #0
 8001854:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001856:	2300      	movs	r3, #0
 8001858:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800185a:	2302      	movs	r3, #2
 800185c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800185e:	f107 031c 	add.w	r3, r7, #28
 8001862:	4619      	mov	r1, r3
 8001864:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001868:	f000 fe18 	bl	800249c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800186c:	2310      	movs	r3, #16
 800186e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001870:	2302      	movs	r3, #2
 8001872:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001874:	2300      	movs	r3, #0
 8001876:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001878:	2300      	movs	r3, #0
 800187a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800187c:	2302      	movs	r3, #2
 800187e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001880:	f107 031c 	add.w	r3, r7, #28
 8001884:	4619      	mov	r1, r3
 8001886:	481d      	ldr	r0, [pc, #116]	@ (80018fc <HAL_TIM_Encoder_MspInit+0x11c>)
 8001888:	f000 fe08 	bl	800249c <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800188c:	e02e      	b.n	80018ec <HAL_TIM_Encoder_MspInit+0x10c>
  else if(tim_encoderHandle->Instance==TIM4)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4a1b      	ldr	r2, [pc, #108]	@ (8001900 <HAL_TIM_Encoder_MspInit+0x120>)
 8001894:	4293      	cmp	r3, r2
 8001896:	d129      	bne.n	80018ec <HAL_TIM_Encoder_MspInit+0x10c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001898:	4b17      	ldr	r3, [pc, #92]	@ (80018f8 <HAL_TIM_Encoder_MspInit+0x118>)
 800189a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800189c:	4a16      	ldr	r2, [pc, #88]	@ (80018f8 <HAL_TIM_Encoder_MspInit+0x118>)
 800189e:	f043 0304 	orr.w	r3, r3, #4
 80018a2:	6593      	str	r3, [r2, #88]	@ 0x58
 80018a4:	4b14      	ldr	r3, [pc, #80]	@ (80018f8 <HAL_TIM_Encoder_MspInit+0x118>)
 80018a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018a8:	f003 0304 	and.w	r3, r3, #4
 80018ac:	60fb      	str	r3, [r7, #12]
 80018ae:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018b0:	4b11      	ldr	r3, [pc, #68]	@ (80018f8 <HAL_TIM_Encoder_MspInit+0x118>)
 80018b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018b4:	4a10      	ldr	r2, [pc, #64]	@ (80018f8 <HAL_TIM_Encoder_MspInit+0x118>)
 80018b6:	f043 0301 	orr.w	r3, r3, #1
 80018ba:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80018bc:	4b0e      	ldr	r3, [pc, #56]	@ (80018f8 <HAL_TIM_Encoder_MspInit+0x118>)
 80018be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018c0:	f003 0301 	and.w	r3, r3, #1
 80018c4:	60bb      	str	r3, [r7, #8]
 80018c6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80018c8:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80018cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ce:	2302      	movs	r3, #2
 80018d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d2:	2300      	movs	r3, #0
 80018d4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018d6:	2300      	movs	r3, #0
 80018d8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 80018da:	230a      	movs	r3, #10
 80018dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018de:	f107 031c 	add.w	r3, r7, #28
 80018e2:	4619      	mov	r1, r3
 80018e4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80018e8:	f000 fdd8 	bl	800249c <HAL_GPIO_Init>
}
 80018ec:	bf00      	nop
 80018ee:	3730      	adds	r7, #48	@ 0x30
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}
 80018f4:	40000400 	.word	0x40000400
 80018f8:	40021000 	.word	0x40021000
 80018fc:	48000400 	.word	0x48000400
 8001900:	40000800 	.word	0x40000800

08001904 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001904:	b480      	push	{r7}
 8001906:	b085      	sub	sp, #20
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM8)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4a0a      	ldr	r2, [pc, #40]	@ (800193c <HAL_TIM_Base_MspInit+0x38>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d10b      	bne.n	800192e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* TIM8 clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001916:	4b0a      	ldr	r3, [pc, #40]	@ (8001940 <HAL_TIM_Base_MspInit+0x3c>)
 8001918:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800191a:	4a09      	ldr	r2, [pc, #36]	@ (8001940 <HAL_TIM_Base_MspInit+0x3c>)
 800191c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001920:	6613      	str	r3, [r2, #96]	@ 0x60
 8001922:	4b07      	ldr	r3, [pc, #28]	@ (8001940 <HAL_TIM_Base_MspInit+0x3c>)
 8001924:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001926:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800192a:	60fb      	str	r3, [r7, #12]
 800192c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 800192e:	bf00      	nop
 8001930:	3714      	adds	r7, #20
 8001932:	46bd      	mov	sp, r7
 8001934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001938:	4770      	bx	lr
 800193a:	bf00      	nop
 800193c:	40013400 	.word	0x40013400
 8001940:	40021000 	.word	0x40021000

08001944 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b08a      	sub	sp, #40	@ 0x28
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800194c:	f107 0314 	add.w	r3, r7, #20
 8001950:	2200      	movs	r2, #0
 8001952:	601a      	str	r2, [r3, #0]
 8001954:	605a      	str	r2, [r3, #4]
 8001956:	609a      	str	r2, [r3, #8]
 8001958:	60da      	str	r2, [r3, #12]
 800195a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM8)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4a1f      	ldr	r2, [pc, #124]	@ (80019e0 <HAL_TIM_MspPostInit+0x9c>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d138      	bne.n	80019d8 <HAL_TIM_MspPostInit+0x94>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001966:	4b1f      	ldr	r3, [pc, #124]	@ (80019e4 <HAL_TIM_MspPostInit+0xa0>)
 8001968:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800196a:	4a1e      	ldr	r2, [pc, #120]	@ (80019e4 <HAL_TIM_MspPostInit+0xa0>)
 800196c:	f043 0301 	orr.w	r3, r3, #1
 8001970:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001972:	4b1c      	ldr	r3, [pc, #112]	@ (80019e4 <HAL_TIM_MspPostInit+0xa0>)
 8001974:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001976:	f003 0301 	and.w	r3, r3, #1
 800197a:	613b      	str	r3, [r7, #16]
 800197c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800197e:	4b19      	ldr	r3, [pc, #100]	@ (80019e4 <HAL_TIM_MspPostInit+0xa0>)
 8001980:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001982:	4a18      	ldr	r2, [pc, #96]	@ (80019e4 <HAL_TIM_MspPostInit+0xa0>)
 8001984:	f043 0302 	orr.w	r3, r3, #2
 8001988:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800198a:	4b16      	ldr	r3, [pc, #88]	@ (80019e4 <HAL_TIM_MspPostInit+0xa0>)
 800198c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800198e:	f003 0302 	and.w	r3, r3, #2
 8001992:	60fb      	str	r3, [r7, #12]
 8001994:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PA7     ------> TIM8_CH1N
    PB0     ------> TIM8_CH2N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001996:	2380      	movs	r3, #128	@ 0x80
 8001998:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800199a:	2302      	movs	r3, #2
 800199c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800199e:	2300      	movs	r3, #0
 80019a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019a2:	2300      	movs	r3, #0
 80019a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 80019a6:	2304      	movs	r3, #4
 80019a8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019aa:	f107 0314 	add.w	r3, r7, #20
 80019ae:	4619      	mov	r1, r3
 80019b0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80019b4:	f000 fd72 	bl	800249c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80019b8:	2301      	movs	r3, #1
 80019ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019bc:	2302      	movs	r3, #2
 80019be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c0:	2300      	movs	r3, #0
 80019c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019c4:	2300      	movs	r3, #0
 80019c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 80019c8:	2304      	movs	r3, #4
 80019ca:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019cc:	f107 0314 	add.w	r3, r7, #20
 80019d0:	4619      	mov	r1, r3
 80019d2:	4805      	ldr	r0, [pc, #20]	@ (80019e8 <HAL_TIM_MspPostInit+0xa4>)
 80019d4:	f000 fd62 	bl	800249c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 80019d8:	bf00      	nop
 80019da:	3728      	adds	r7, #40	@ 0x28
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	40013400 	.word	0x40013400
 80019e4:	40021000 	.word	0x40021000
 80019e8:	48000400 	.word	0x48000400

080019ec <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80019f0:	4b22      	ldr	r3, [pc, #136]	@ (8001a7c <MX_USART2_UART_Init+0x90>)
 80019f2:	4a23      	ldr	r2, [pc, #140]	@ (8001a80 <MX_USART2_UART_Init+0x94>)
 80019f4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80019f6:	4b21      	ldr	r3, [pc, #132]	@ (8001a7c <MX_USART2_UART_Init+0x90>)
 80019f8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80019fc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80019fe:	4b1f      	ldr	r3, [pc, #124]	@ (8001a7c <MX_USART2_UART_Init+0x90>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001a04:	4b1d      	ldr	r3, [pc, #116]	@ (8001a7c <MX_USART2_UART_Init+0x90>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001a0a:	4b1c      	ldr	r3, [pc, #112]	@ (8001a7c <MX_USART2_UART_Init+0x90>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001a10:	4b1a      	ldr	r3, [pc, #104]	@ (8001a7c <MX_USART2_UART_Init+0x90>)
 8001a12:	220c      	movs	r2, #12
 8001a14:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a16:	4b19      	ldr	r3, [pc, #100]	@ (8001a7c <MX_USART2_UART_Init+0x90>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a1c:	4b17      	ldr	r3, [pc, #92]	@ (8001a7c <MX_USART2_UART_Init+0x90>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a22:	4b16      	ldr	r3, [pc, #88]	@ (8001a7c <MX_USART2_UART_Init+0x90>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001a28:	4b14      	ldr	r3, [pc, #80]	@ (8001a7c <MX_USART2_UART_Init+0x90>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a2e:	4b13      	ldr	r3, [pc, #76]	@ (8001a7c <MX_USART2_UART_Init+0x90>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001a34:	4811      	ldr	r0, [pc, #68]	@ (8001a7c <MX_USART2_UART_Init+0x90>)
 8001a36:	f005 fa33 	bl	8006ea0 <HAL_UART_Init>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d001      	beq.n	8001a44 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001a40:	f7ff fc2e 	bl	80012a0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a44:	2100      	movs	r1, #0
 8001a46:	480d      	ldr	r0, [pc, #52]	@ (8001a7c <MX_USART2_UART_Init+0x90>)
 8001a48:	f005 ff9e 	bl	8007988 <HAL_UARTEx_SetTxFifoThreshold>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d001      	beq.n	8001a56 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001a52:	f7ff fc25 	bl	80012a0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a56:	2100      	movs	r1, #0
 8001a58:	4808      	ldr	r0, [pc, #32]	@ (8001a7c <MX_USART2_UART_Init+0x90>)
 8001a5a:	f005 ffd3 	bl	8007a04 <HAL_UARTEx_SetRxFifoThreshold>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d001      	beq.n	8001a68 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001a64:	f7ff fc1c 	bl	80012a0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001a68:	4804      	ldr	r0, [pc, #16]	@ (8001a7c <MX_USART2_UART_Init+0x90>)
 8001a6a:	f005 ff54 	bl	8007916 <HAL_UARTEx_DisableFifoMode>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d001      	beq.n	8001a78 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001a74:	f7ff fc14 	bl	80012a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001a78:	bf00      	nop
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	200003cc 	.word	0x200003cc
 8001a80:	40004400 	.word	0x40004400

08001a84 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b09a      	sub	sp, #104	@ 0x68
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a8c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001a90:	2200      	movs	r2, #0
 8001a92:	601a      	str	r2, [r3, #0]
 8001a94:	605a      	str	r2, [r3, #4]
 8001a96:	609a      	str	r2, [r3, #8]
 8001a98:	60da      	str	r2, [r3, #12]
 8001a9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a9c:	f107 0310 	add.w	r3, r7, #16
 8001aa0:	2244      	movs	r2, #68	@ 0x44
 8001aa2:	2100      	movs	r1, #0
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f006 fe40 	bl	800872a <memset>
  if(uartHandle->Instance==USART2)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4a1f      	ldr	r2, [pc, #124]	@ (8001b2c <HAL_UART_MspInit+0xa8>)
 8001ab0:	4293      	cmp	r3, r2
 8001ab2:	d136      	bne.n	8001b22 <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001ab4:	2302      	movs	r3, #2
 8001ab6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001abc:	f107 0310 	add.w	r3, r7, #16
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f003 fe3d 	bl	8005740 <HAL_RCCEx_PeriphCLKConfig>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d001      	beq.n	8001ad0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001acc:	f7ff fbe8 	bl	80012a0 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001ad0:	4b17      	ldr	r3, [pc, #92]	@ (8001b30 <HAL_UART_MspInit+0xac>)
 8001ad2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ad4:	4a16      	ldr	r2, [pc, #88]	@ (8001b30 <HAL_UART_MspInit+0xac>)
 8001ad6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ada:	6593      	str	r3, [r2, #88]	@ 0x58
 8001adc:	4b14      	ldr	r3, [pc, #80]	@ (8001b30 <HAL_UART_MspInit+0xac>)
 8001ade:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ae0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ae4:	60fb      	str	r3, [r7, #12]
 8001ae6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ae8:	4b11      	ldr	r3, [pc, #68]	@ (8001b30 <HAL_UART_MspInit+0xac>)
 8001aea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001aec:	4a10      	ldr	r2, [pc, #64]	@ (8001b30 <HAL_UART_MspInit+0xac>)
 8001aee:	f043 0301 	orr.w	r3, r3, #1
 8001af2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001af4:	4b0e      	ldr	r3, [pc, #56]	@ (8001b30 <HAL_UART_MspInit+0xac>)
 8001af6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001af8:	f003 0301 	and.w	r3, r3, #1
 8001afc:	60bb      	str	r3, [r7, #8]
 8001afe:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8001b00:	230c      	movs	r3, #12
 8001b02:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b04:	2302      	movs	r3, #2
 8001b06:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b10:	2307      	movs	r3, #7
 8001b12:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b14:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001b18:	4619      	mov	r1, r3
 8001b1a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b1e:	f000 fcbd 	bl	800249c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001b22:	bf00      	nop
 8001b24:	3768      	adds	r7, #104	@ 0x68
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	40004400 	.word	0x40004400
 8001b30:	40021000 	.word	0x40021000

08001b34 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001b34:	480d      	ldr	r0, [pc, #52]	@ (8001b6c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001b36:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001b38:	f7ff fc3c 	bl	80013b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b3c:	480c      	ldr	r0, [pc, #48]	@ (8001b70 <LoopForever+0x6>)
  ldr r1, =_edata
 8001b3e:	490d      	ldr	r1, [pc, #52]	@ (8001b74 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001b40:	4a0d      	ldr	r2, [pc, #52]	@ (8001b78 <LoopForever+0xe>)
  movs r3, #0
 8001b42:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001b44:	e002      	b.n	8001b4c <LoopCopyDataInit>

08001b46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b4a:	3304      	adds	r3, #4

08001b4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b50:	d3f9      	bcc.n	8001b46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b52:	4a0a      	ldr	r2, [pc, #40]	@ (8001b7c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001b54:	4c0a      	ldr	r4, [pc, #40]	@ (8001b80 <LoopForever+0x16>)
  movs r3, #0
 8001b56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b58:	e001      	b.n	8001b5e <LoopFillZerobss>

08001b5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b5c:	3204      	adds	r2, #4

08001b5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b60:	d3fb      	bcc.n	8001b5a <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8001b62:	f006 fdeb 	bl	800873c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001b66:	f7ff fae1 	bl	800112c <main>

08001b6a <LoopForever>:

LoopForever:
    b LoopForever
 8001b6a:	e7fe      	b.n	8001b6a <LoopForever>
  ldr   r0, =_estack
 8001b6c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001b70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b74:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001b78:	080087ec 	.word	0x080087ec
  ldr r2, =_sbss
 8001b7c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001b80:	20000464 	.word	0x20000464

08001b84 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001b84:	e7fe      	b.n	8001b84 <ADC1_2_IRQHandler>

08001b86 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b86:	b580      	push	{r7, lr}
 8001b88:	b082      	sub	sp, #8
 8001b8a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b90:	2003      	movs	r0, #3
 8001b92:	f000 f95b 	bl	8001e4c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001b96:	2000      	movs	r0, #0
 8001b98:	f000 f80e 	bl	8001bb8 <HAL_InitTick>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d002      	beq.n	8001ba8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	71fb      	strb	r3, [r7, #7]
 8001ba6:	e001      	b.n	8001bac <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001ba8:	f7ff fb80 	bl	80012ac <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001bac:	79fb      	ldrb	r3, [r7, #7]

}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	3708      	adds	r7, #8
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}
	...

08001bb8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b084      	sub	sp, #16
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001bc4:	4b16      	ldr	r3, [pc, #88]	@ (8001c20 <HAL_InitTick+0x68>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d022      	beq.n	8001c12 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001bcc:	4b15      	ldr	r3, [pc, #84]	@ (8001c24 <HAL_InitTick+0x6c>)
 8001bce:	681a      	ldr	r2, [r3, #0]
 8001bd0:	4b13      	ldr	r3, [pc, #76]	@ (8001c20 <HAL_InitTick+0x68>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001bd8:	fbb1 f3f3 	udiv	r3, r1, r3
 8001bdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001be0:	4618      	mov	r0, r3
 8001be2:	f000 f966 	bl	8001eb2 <HAL_SYSTICK_Config>
 8001be6:	4603      	mov	r3, r0
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d10f      	bne.n	8001c0c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2b0f      	cmp	r3, #15
 8001bf0:	d809      	bhi.n	8001c06 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	6879      	ldr	r1, [r7, #4]
 8001bf6:	f04f 30ff 	mov.w	r0, #4294967295
 8001bfa:	f000 f932 	bl	8001e62 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001bfe:	4a0a      	ldr	r2, [pc, #40]	@ (8001c28 <HAL_InitTick+0x70>)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6013      	str	r3, [r2, #0]
 8001c04:	e007      	b.n	8001c16 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001c06:	2301      	movs	r3, #1
 8001c08:	73fb      	strb	r3, [r7, #15]
 8001c0a:	e004      	b.n	8001c16 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	73fb      	strb	r3, [r7, #15]
 8001c10:	e001      	b.n	8001c16 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001c12:	2301      	movs	r3, #1
 8001c14:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001c16:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	3710      	adds	r7, #16
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}
 8001c20:	20000008 	.word	0x20000008
 8001c24:	20000000 	.word	0x20000000
 8001c28:	20000004 	.word	0x20000004

08001c2c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c30:	4b05      	ldr	r3, [pc, #20]	@ (8001c48 <HAL_IncTick+0x1c>)
 8001c32:	681a      	ldr	r2, [r3, #0]
 8001c34:	4b05      	ldr	r3, [pc, #20]	@ (8001c4c <HAL_IncTick+0x20>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4413      	add	r3, r2
 8001c3a:	4a03      	ldr	r2, [pc, #12]	@ (8001c48 <HAL_IncTick+0x1c>)
 8001c3c:	6013      	str	r3, [r2, #0]
}
 8001c3e:	bf00      	nop
 8001c40:	46bd      	mov	sp, r7
 8001c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c46:	4770      	bx	lr
 8001c48:	20000460 	.word	0x20000460
 8001c4c:	20000008 	.word	0x20000008

08001c50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c50:	b480      	push	{r7}
 8001c52:	af00      	add	r7, sp, #0
  return uwTick;
 8001c54:	4b03      	ldr	r3, [pc, #12]	@ (8001c64 <HAL_GetTick+0x14>)
 8001c56:	681b      	ldr	r3, [r3, #0]
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c60:	4770      	bx	lr
 8001c62:	bf00      	nop
 8001c64:	20000460 	.word	0x20000460

08001c68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b084      	sub	sp, #16
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c70:	f7ff ffee 	bl	8001c50 <HAL_GetTick>
 8001c74:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c80:	d004      	beq.n	8001c8c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c82:	4b09      	ldr	r3, [pc, #36]	@ (8001ca8 <HAL_Delay+0x40>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	68fa      	ldr	r2, [r7, #12]
 8001c88:	4413      	add	r3, r2
 8001c8a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c8c:	bf00      	nop
 8001c8e:	f7ff ffdf 	bl	8001c50 <HAL_GetTick>
 8001c92:	4602      	mov	r2, r0
 8001c94:	68bb      	ldr	r3, [r7, #8]
 8001c96:	1ad3      	subs	r3, r2, r3
 8001c98:	68fa      	ldr	r2, [r7, #12]
 8001c9a:	429a      	cmp	r2, r3
 8001c9c:	d8f7      	bhi.n	8001c8e <HAL_Delay+0x26>
  {
  }
}
 8001c9e:	bf00      	nop
 8001ca0:	bf00      	nop
 8001ca2:	3710      	adds	r7, #16
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}
 8001ca8:	20000008 	.word	0x20000008

08001cac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b085      	sub	sp, #20
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	f003 0307 	and.w	r3, r3, #7
 8001cba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cbc:	4b0c      	ldr	r3, [pc, #48]	@ (8001cf0 <__NVIC_SetPriorityGrouping+0x44>)
 8001cbe:	68db      	ldr	r3, [r3, #12]
 8001cc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cc2:	68ba      	ldr	r2, [r7, #8]
 8001cc4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001cc8:	4013      	ands	r3, r2
 8001cca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cd0:	68bb      	ldr	r3, [r7, #8]
 8001cd2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001cd4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001cd8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001cdc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cde:	4a04      	ldr	r2, [pc, #16]	@ (8001cf0 <__NVIC_SetPriorityGrouping+0x44>)
 8001ce0:	68bb      	ldr	r3, [r7, #8]
 8001ce2:	60d3      	str	r3, [r2, #12]
}
 8001ce4:	bf00      	nop
 8001ce6:	3714      	adds	r7, #20
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cee:	4770      	bx	lr
 8001cf0:	e000ed00 	.word	0xe000ed00

08001cf4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cf8:	4b04      	ldr	r3, [pc, #16]	@ (8001d0c <__NVIC_GetPriorityGrouping+0x18>)
 8001cfa:	68db      	ldr	r3, [r3, #12]
 8001cfc:	0a1b      	lsrs	r3, r3, #8
 8001cfe:	f003 0307 	and.w	r3, r3, #7
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	46bd      	mov	sp, r7
 8001d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0a:	4770      	bx	lr
 8001d0c:	e000ed00 	.word	0xe000ed00

08001d10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b083      	sub	sp, #12
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	4603      	mov	r3, r0
 8001d18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	db0b      	blt.n	8001d3a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d22:	79fb      	ldrb	r3, [r7, #7]
 8001d24:	f003 021f 	and.w	r2, r3, #31
 8001d28:	4907      	ldr	r1, [pc, #28]	@ (8001d48 <__NVIC_EnableIRQ+0x38>)
 8001d2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d2e:	095b      	lsrs	r3, r3, #5
 8001d30:	2001      	movs	r0, #1
 8001d32:	fa00 f202 	lsl.w	r2, r0, r2
 8001d36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001d3a:	bf00      	nop
 8001d3c:	370c      	adds	r7, #12
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr
 8001d46:	bf00      	nop
 8001d48:	e000e100 	.word	0xe000e100

08001d4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b083      	sub	sp, #12
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	4603      	mov	r3, r0
 8001d54:	6039      	str	r1, [r7, #0]
 8001d56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	db0a      	blt.n	8001d76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	b2da      	uxtb	r2, r3
 8001d64:	490c      	ldr	r1, [pc, #48]	@ (8001d98 <__NVIC_SetPriority+0x4c>)
 8001d66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d6a:	0112      	lsls	r2, r2, #4
 8001d6c:	b2d2      	uxtb	r2, r2
 8001d6e:	440b      	add	r3, r1
 8001d70:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d74:	e00a      	b.n	8001d8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	b2da      	uxtb	r2, r3
 8001d7a:	4908      	ldr	r1, [pc, #32]	@ (8001d9c <__NVIC_SetPriority+0x50>)
 8001d7c:	79fb      	ldrb	r3, [r7, #7]
 8001d7e:	f003 030f 	and.w	r3, r3, #15
 8001d82:	3b04      	subs	r3, #4
 8001d84:	0112      	lsls	r2, r2, #4
 8001d86:	b2d2      	uxtb	r2, r2
 8001d88:	440b      	add	r3, r1
 8001d8a:	761a      	strb	r2, [r3, #24]
}
 8001d8c:	bf00      	nop
 8001d8e:	370c      	adds	r7, #12
 8001d90:	46bd      	mov	sp, r7
 8001d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d96:	4770      	bx	lr
 8001d98:	e000e100 	.word	0xe000e100
 8001d9c:	e000ed00 	.word	0xe000ed00

08001da0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b089      	sub	sp, #36	@ 0x24
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	60f8      	str	r0, [r7, #12]
 8001da8:	60b9      	str	r1, [r7, #8]
 8001daa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	f003 0307 	and.w	r3, r3, #7
 8001db2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001db4:	69fb      	ldr	r3, [r7, #28]
 8001db6:	f1c3 0307 	rsb	r3, r3, #7
 8001dba:	2b04      	cmp	r3, #4
 8001dbc:	bf28      	it	cs
 8001dbe:	2304      	movcs	r3, #4
 8001dc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dc2:	69fb      	ldr	r3, [r7, #28]
 8001dc4:	3304      	adds	r3, #4
 8001dc6:	2b06      	cmp	r3, #6
 8001dc8:	d902      	bls.n	8001dd0 <NVIC_EncodePriority+0x30>
 8001dca:	69fb      	ldr	r3, [r7, #28]
 8001dcc:	3b03      	subs	r3, #3
 8001dce:	e000      	b.n	8001dd2 <NVIC_EncodePriority+0x32>
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dd4:	f04f 32ff 	mov.w	r2, #4294967295
 8001dd8:	69bb      	ldr	r3, [r7, #24]
 8001dda:	fa02 f303 	lsl.w	r3, r2, r3
 8001dde:	43da      	mvns	r2, r3
 8001de0:	68bb      	ldr	r3, [r7, #8]
 8001de2:	401a      	ands	r2, r3
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001de8:	f04f 31ff 	mov.w	r1, #4294967295
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	fa01 f303 	lsl.w	r3, r1, r3
 8001df2:	43d9      	mvns	r1, r3
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001df8:	4313      	orrs	r3, r2
         );
}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	3724      	adds	r7, #36	@ 0x24
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e04:	4770      	bx	lr
	...

08001e08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b082      	sub	sp, #8
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	3b01      	subs	r3, #1
 8001e14:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001e18:	d301      	bcc.n	8001e1e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e00f      	b.n	8001e3e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e1e:	4a0a      	ldr	r2, [pc, #40]	@ (8001e48 <SysTick_Config+0x40>)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	3b01      	subs	r3, #1
 8001e24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e26:	210f      	movs	r1, #15
 8001e28:	f04f 30ff 	mov.w	r0, #4294967295
 8001e2c:	f7ff ff8e 	bl	8001d4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e30:	4b05      	ldr	r3, [pc, #20]	@ (8001e48 <SysTick_Config+0x40>)
 8001e32:	2200      	movs	r2, #0
 8001e34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e36:	4b04      	ldr	r3, [pc, #16]	@ (8001e48 <SysTick_Config+0x40>)
 8001e38:	2207      	movs	r2, #7
 8001e3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e3c:	2300      	movs	r3, #0
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	3708      	adds	r7, #8
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	bf00      	nop
 8001e48:	e000e010 	.word	0xe000e010

08001e4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b082      	sub	sp, #8
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e54:	6878      	ldr	r0, [r7, #4]
 8001e56:	f7ff ff29 	bl	8001cac <__NVIC_SetPriorityGrouping>
}
 8001e5a:	bf00      	nop
 8001e5c:	3708      	adds	r7, #8
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}

08001e62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e62:	b580      	push	{r7, lr}
 8001e64:	b086      	sub	sp, #24
 8001e66:	af00      	add	r7, sp, #0
 8001e68:	4603      	mov	r3, r0
 8001e6a:	60b9      	str	r1, [r7, #8]
 8001e6c:	607a      	str	r2, [r7, #4]
 8001e6e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001e70:	f7ff ff40 	bl	8001cf4 <__NVIC_GetPriorityGrouping>
 8001e74:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e76:	687a      	ldr	r2, [r7, #4]
 8001e78:	68b9      	ldr	r1, [r7, #8]
 8001e7a:	6978      	ldr	r0, [r7, #20]
 8001e7c:	f7ff ff90 	bl	8001da0 <NVIC_EncodePriority>
 8001e80:	4602      	mov	r2, r0
 8001e82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e86:	4611      	mov	r1, r2
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f7ff ff5f 	bl	8001d4c <__NVIC_SetPriority>
}
 8001e8e:	bf00      	nop
 8001e90:	3718      	adds	r7, #24
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}

08001e96 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e96:	b580      	push	{r7, lr}
 8001e98:	b082      	sub	sp, #8
 8001e9a:	af00      	add	r7, sp, #0
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ea0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f7ff ff33 	bl	8001d10 <__NVIC_EnableIRQ>
}
 8001eaa:	bf00      	nop
 8001eac:	3708      	adds	r7, #8
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}

08001eb2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001eb2:	b580      	push	{r7, lr}
 8001eb4:	b082      	sub	sp, #8
 8001eb6:	af00      	add	r7, sp, #0
 8001eb8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001eba:	6878      	ldr	r0, [r7, #4]
 8001ebc:	f7ff ffa4 	bl	8001e08 <SysTick_Config>
 8001ec0:	4603      	mov	r3, r0
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	3708      	adds	r7, #8
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}
	...

08001ecc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b084      	sub	sp, #16
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d101      	bne.n	8001ede <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001eda:	2301      	movs	r3, #1
 8001edc:	e08d      	b.n	8001ffa <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	461a      	mov	r2, r3
 8001ee4:	4b47      	ldr	r3, [pc, #284]	@ (8002004 <HAL_DMA_Init+0x138>)
 8001ee6:	429a      	cmp	r2, r3
 8001ee8:	d80f      	bhi.n	8001f0a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	461a      	mov	r2, r3
 8001ef0:	4b45      	ldr	r3, [pc, #276]	@ (8002008 <HAL_DMA_Init+0x13c>)
 8001ef2:	4413      	add	r3, r2
 8001ef4:	4a45      	ldr	r2, [pc, #276]	@ (800200c <HAL_DMA_Init+0x140>)
 8001ef6:	fba2 2303 	umull	r2, r3, r2, r3
 8001efa:	091b      	lsrs	r3, r3, #4
 8001efc:	009a      	lsls	r2, r3, #2
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	4a42      	ldr	r2, [pc, #264]	@ (8002010 <HAL_DMA_Init+0x144>)
 8001f06:	641a      	str	r2, [r3, #64]	@ 0x40
 8001f08:	e00e      	b.n	8001f28 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	461a      	mov	r2, r3
 8001f10:	4b40      	ldr	r3, [pc, #256]	@ (8002014 <HAL_DMA_Init+0x148>)
 8001f12:	4413      	add	r3, r2
 8001f14:	4a3d      	ldr	r2, [pc, #244]	@ (800200c <HAL_DMA_Init+0x140>)
 8001f16:	fba2 2303 	umull	r2, r3, r2, r3
 8001f1a:	091b      	lsrs	r3, r3, #4
 8001f1c:	009a      	lsls	r2, r3, #2
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	4a3c      	ldr	r2, [pc, #240]	@ (8002018 <HAL_DMA_Init+0x14c>)
 8001f26:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2202      	movs	r2, #2
 8001f2c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8001f3e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001f42:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001f4c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	691b      	ldr	r3, [r3, #16]
 8001f52:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f58:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	699b      	ldr	r3, [r3, #24]
 8001f5e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f64:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6a1b      	ldr	r3, [r3, #32]
 8001f6a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001f6c:	68fa      	ldr	r2, [r7, #12]
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	68fa      	ldr	r2, [r7, #12]
 8001f78:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001f7a:	6878      	ldr	r0, [r7, #4]
 8001f7c:	f000 fa2c 	bl	80023d8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	689b      	ldr	r3, [r3, #8]
 8001f84:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001f88:	d102      	bne.n	8001f90 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	685a      	ldr	r2, [r3, #4]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f98:	b2d2      	uxtb	r2, r2
 8001f9a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fa0:	687a      	ldr	r2, [r7, #4]
 8001fa2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001fa4:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d010      	beq.n	8001fd0 <HAL_DMA_Init+0x104>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	2b04      	cmp	r3, #4
 8001fb4:	d80c      	bhi.n	8001fd0 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001fb6:	6878      	ldr	r0, [r7, #4]
 8001fb8:	f000 fa4c 	bl	8002454 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fc8:	687a      	ldr	r2, [r7, #4]
 8001fca:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001fcc:	605a      	str	r2, [r3, #4]
 8001fce:	e008      	b.n	8001fe2 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2200      	movs	r2, #0
 8001fda:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2200      	movs	r2, #0
 8001fe0:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2201      	movs	r2, #1
 8001fec:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8001ff8:	2300      	movs	r3, #0
}
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	3710      	adds	r7, #16
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}
 8002002:	bf00      	nop
 8002004:	40020407 	.word	0x40020407
 8002008:	bffdfff8 	.word	0xbffdfff8
 800200c:	cccccccd 	.word	0xcccccccd
 8002010:	40020000 	.word	0x40020000
 8002014:	bffdfbf8 	.word	0xbffdfbf8
 8002018:	40020400 	.word	0x40020400

0800201c <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b086      	sub	sp, #24
 8002020:	af00      	add	r7, sp, #0
 8002022:	60f8      	str	r0, [r7, #12]
 8002024:	60b9      	str	r1, [r7, #8]
 8002026:	607a      	str	r2, [r7, #4]
 8002028:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800202a:	2300      	movs	r3, #0
 800202c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002034:	2b01      	cmp	r3, #1
 8002036:	d101      	bne.n	800203c <HAL_DMA_Start_IT+0x20>
 8002038:	2302      	movs	r3, #2
 800203a:	e066      	b.n	800210a <HAL_DMA_Start_IT+0xee>
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	2201      	movs	r2, #1
 8002040:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800204a:	b2db      	uxtb	r3, r3
 800204c:	2b01      	cmp	r3, #1
 800204e:	d155      	bne.n	80020fc <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	2202      	movs	r2, #2
 8002054:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	2200      	movs	r2, #0
 800205c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	681a      	ldr	r2, [r3, #0]
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f022 0201 	bic.w	r2, r2, #1
 800206c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	687a      	ldr	r2, [r7, #4]
 8002072:	68b9      	ldr	r1, [r7, #8]
 8002074:	68f8      	ldr	r0, [r7, #12]
 8002076:	f000 f970 	bl	800235a <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800207e:	2b00      	cmp	r3, #0
 8002080:	d008      	beq.n	8002094 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	681a      	ldr	r2, [r3, #0]
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f042 020e 	orr.w	r2, r2, #14
 8002090:	601a      	str	r2, [r3, #0]
 8002092:	e00f      	b.n	80020b4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	681a      	ldr	r2, [r3, #0]
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f022 0204 	bic.w	r2, r2, #4
 80020a2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	681a      	ldr	r2, [r3, #0]
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f042 020a 	orr.w	r2, r2, #10
 80020b2:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d007      	beq.n	80020d2 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80020c6:	681a      	ldr	r2, [r3, #0]
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80020cc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80020d0:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d007      	beq.n	80020ea <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020de:	681a      	ldr	r2, [r3, #0]
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020e4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80020e8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	681a      	ldr	r2, [r3, #0]
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f042 0201 	orr.w	r2, r2, #1
 80020f8:	601a      	str	r2, [r3, #0]
 80020fa:	e005      	b.n	8002108 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	2200      	movs	r2, #0
 8002100:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002104:	2302      	movs	r3, #2
 8002106:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002108:	7dfb      	ldrb	r3, [r7, #23]
}
 800210a:	4618      	mov	r0, r3
 800210c:	3718      	adds	r7, #24
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}

08002112 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002112:	b580      	push	{r7, lr}
 8002114:	b084      	sub	sp, #16
 8002116:	af00      	add	r7, sp, #0
 8002118:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800211a:	2300      	movs	r3, #0
 800211c:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002124:	b2db      	uxtb	r3, r3
 8002126:	2b02      	cmp	r3, #2
 8002128:	d00d      	beq.n	8002146 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2204      	movs	r2, #4
 800212e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2201      	movs	r2, #1
 8002134:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2200      	movs	r2, #0
 800213c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8002140:	2301      	movs	r3, #1
 8002142:	73fb      	strb	r3, [r7, #15]
 8002144:	e047      	b.n	80021d6 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	681a      	ldr	r2, [r3, #0]
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f022 020e 	bic.w	r2, r2, #14
 8002154:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	681a      	ldr	r2, [r3, #0]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f022 0201 	bic.w	r2, r2, #1
 8002164:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800216a:	681a      	ldr	r2, [r3, #0]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002170:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002174:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800217a:	f003 021f 	and.w	r2, r3, #31
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002182:	2101      	movs	r1, #1
 8002184:	fa01 f202 	lsl.w	r2, r1, r2
 8002188:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800218e:	687a      	ldr	r2, [r7, #4]
 8002190:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002192:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002198:	2b00      	cmp	r3, #0
 800219a:	d00c      	beq.n	80021b6 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021a0:	681a      	ldr	r2, [r3, #0]
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021a6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80021aa:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021b0:	687a      	ldr	r2, [r7, #4]
 80021b2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80021b4:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2201      	movs	r2, #1
 80021ba:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2200      	movs	r2, #0
 80021c2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d003      	beq.n	80021d6 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021d2:	6878      	ldr	r0, [r7, #4]
 80021d4:	4798      	blx	r3
    }
  }
  return status;
 80021d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80021d8:	4618      	mov	r0, r3
 80021da:	3710      	adds	r7, #16
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd80      	pop	{r7, pc}

080021e0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b084      	sub	sp, #16
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021fc:	f003 031f 	and.w	r3, r3, #31
 8002200:	2204      	movs	r2, #4
 8002202:	409a      	lsls	r2, r3
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	4013      	ands	r3, r2
 8002208:	2b00      	cmp	r3, #0
 800220a:	d026      	beq.n	800225a <HAL_DMA_IRQHandler+0x7a>
 800220c:	68bb      	ldr	r3, [r7, #8]
 800220e:	f003 0304 	and.w	r3, r3, #4
 8002212:	2b00      	cmp	r3, #0
 8002214:	d021      	beq.n	800225a <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f003 0320 	and.w	r3, r3, #32
 8002220:	2b00      	cmp	r3, #0
 8002222:	d107      	bne.n	8002234 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	681a      	ldr	r2, [r3, #0]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f022 0204 	bic.w	r2, r2, #4
 8002232:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002238:	f003 021f 	and.w	r2, r3, #31
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002240:	2104      	movs	r1, #4
 8002242:	fa01 f202 	lsl.w	r2, r1, r2
 8002246:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800224c:	2b00      	cmp	r3, #0
 800224e:	d071      	beq.n	8002334 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002254:	6878      	ldr	r0, [r7, #4]
 8002256:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002258:	e06c      	b.n	8002334 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800225e:	f003 031f 	and.w	r3, r3, #31
 8002262:	2202      	movs	r2, #2
 8002264:	409a      	lsls	r2, r3
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	4013      	ands	r3, r2
 800226a:	2b00      	cmp	r3, #0
 800226c:	d02e      	beq.n	80022cc <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800226e:	68bb      	ldr	r3, [r7, #8]
 8002270:	f003 0302 	and.w	r3, r3, #2
 8002274:	2b00      	cmp	r3, #0
 8002276:	d029      	beq.n	80022cc <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f003 0320 	and.w	r3, r3, #32
 8002282:	2b00      	cmp	r3, #0
 8002284:	d10b      	bne.n	800229e <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	681a      	ldr	r2, [r3, #0]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f022 020a 	bic.w	r2, r2, #10
 8002294:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2201      	movs	r2, #1
 800229a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022a2:	f003 021f 	and.w	r2, r3, #31
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022aa:	2102      	movs	r1, #2
 80022ac:	fa01 f202 	lsl.w	r2, r1, r2
 80022b0:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2200      	movs	r2, #0
 80022b6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d038      	beq.n	8002334 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022c6:	6878      	ldr	r0, [r7, #4]
 80022c8:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80022ca:	e033      	b.n	8002334 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022d0:	f003 031f 	and.w	r3, r3, #31
 80022d4:	2208      	movs	r2, #8
 80022d6:	409a      	lsls	r2, r3
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	4013      	ands	r3, r2
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d02a      	beq.n	8002336 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80022e0:	68bb      	ldr	r3, [r7, #8]
 80022e2:	f003 0308 	and.w	r3, r3, #8
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d025      	beq.n	8002336 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	681a      	ldr	r2, [r3, #0]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f022 020e 	bic.w	r2, r2, #14
 80022f8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022fe:	f003 021f 	and.w	r2, r3, #31
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002306:	2101      	movs	r1, #1
 8002308:	fa01 f202 	lsl.w	r2, r1, r2
 800230c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2201      	movs	r2, #1
 8002312:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2201      	movs	r2, #1
 8002318:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2200      	movs	r2, #0
 8002320:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002328:	2b00      	cmp	r3, #0
 800232a:	d004      	beq.n	8002336 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002330:	6878      	ldr	r0, [r7, #4]
 8002332:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002334:	bf00      	nop
 8002336:	bf00      	nop
}
 8002338:	3710      	adds	r7, #16
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}

0800233e <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800233e:	b480      	push	{r7}
 8002340:	b083      	sub	sp, #12
 8002342:	af00      	add	r7, sp, #0
 8002344:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800234c:	b2db      	uxtb	r3, r3
}
 800234e:	4618      	mov	r0, r3
 8002350:	370c      	adds	r7, #12
 8002352:	46bd      	mov	sp, r7
 8002354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002358:	4770      	bx	lr

0800235a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800235a:	b480      	push	{r7}
 800235c:	b085      	sub	sp, #20
 800235e:	af00      	add	r7, sp, #0
 8002360:	60f8      	str	r0, [r7, #12]
 8002362:	60b9      	str	r1, [r7, #8]
 8002364:	607a      	str	r2, [r7, #4]
 8002366:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800236c:	68fa      	ldr	r2, [r7, #12]
 800236e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002370:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002376:	2b00      	cmp	r3, #0
 8002378:	d004      	beq.n	8002384 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800237e:	68fa      	ldr	r2, [r7, #12]
 8002380:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002382:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002388:	f003 021f 	and.w	r2, r3, #31
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002390:	2101      	movs	r1, #1
 8002392:	fa01 f202 	lsl.w	r2, r1, r2
 8002396:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	683a      	ldr	r2, [r7, #0]
 800239e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	689b      	ldr	r3, [r3, #8]
 80023a4:	2b10      	cmp	r3, #16
 80023a6:	d108      	bne.n	80023ba <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	687a      	ldr	r2, [r7, #4]
 80023ae:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	68ba      	ldr	r2, [r7, #8]
 80023b6:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80023b8:	e007      	b.n	80023ca <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	68ba      	ldr	r2, [r7, #8]
 80023c0:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	687a      	ldr	r2, [r7, #4]
 80023c8:	60da      	str	r2, [r3, #12]
}
 80023ca:	bf00      	nop
 80023cc:	3714      	adds	r7, #20
 80023ce:	46bd      	mov	sp, r7
 80023d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d4:	4770      	bx	lr
	...

080023d8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80023d8:	b480      	push	{r7}
 80023da:	b087      	sub	sp, #28
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	461a      	mov	r2, r3
 80023e6:	4b16      	ldr	r3, [pc, #88]	@ (8002440 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80023e8:	429a      	cmp	r2, r3
 80023ea:	d802      	bhi.n	80023f2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80023ec:	4b15      	ldr	r3, [pc, #84]	@ (8002444 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80023ee:	617b      	str	r3, [r7, #20]
 80023f0:	e001      	b.n	80023f6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 80023f2:	4b15      	ldr	r3, [pc, #84]	@ (8002448 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80023f4:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80023f6:	697b      	ldr	r3, [r7, #20]
 80023f8:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	b2db      	uxtb	r3, r3
 8002400:	3b08      	subs	r3, #8
 8002402:	4a12      	ldr	r2, [pc, #72]	@ (800244c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8002404:	fba2 2303 	umull	r2, r3, r2, r3
 8002408:	091b      	lsrs	r3, r3, #4
 800240a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002410:	089b      	lsrs	r3, r3, #2
 8002412:	009a      	lsls	r2, r3, #2
 8002414:	693b      	ldr	r3, [r7, #16]
 8002416:	4413      	add	r3, r2
 8002418:	461a      	mov	r2, r3
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	4a0b      	ldr	r2, [pc, #44]	@ (8002450 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8002422:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	f003 031f 	and.w	r3, r3, #31
 800242a:	2201      	movs	r2, #1
 800242c:	409a      	lsls	r2, r3
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8002432:	bf00      	nop
 8002434:	371c      	adds	r7, #28
 8002436:	46bd      	mov	sp, r7
 8002438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243c:	4770      	bx	lr
 800243e:	bf00      	nop
 8002440:	40020407 	.word	0x40020407
 8002444:	40020800 	.word	0x40020800
 8002448:	40020820 	.word	0x40020820
 800244c:	cccccccd 	.word	0xcccccccd
 8002450:	40020880 	.word	0x40020880

08002454 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002454:	b480      	push	{r7}
 8002456:	b085      	sub	sp, #20
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	b2db      	uxtb	r3, r3
 8002462:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002464:	68fa      	ldr	r2, [r7, #12]
 8002466:	4b0b      	ldr	r3, [pc, #44]	@ (8002494 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002468:	4413      	add	r3, r2
 800246a:	009b      	lsls	r3, r3, #2
 800246c:	461a      	mov	r2, r3
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	4a08      	ldr	r2, [pc, #32]	@ (8002498 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002476:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	3b01      	subs	r3, #1
 800247c:	f003 031f 	and.w	r3, r3, #31
 8002480:	2201      	movs	r2, #1
 8002482:	409a      	lsls	r2, r3
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8002488:	bf00      	nop
 800248a:	3714      	adds	r7, #20
 800248c:	46bd      	mov	sp, r7
 800248e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002492:	4770      	bx	lr
 8002494:	1000823f 	.word	0x1000823f
 8002498:	40020940 	.word	0x40020940

0800249c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800249c:	b480      	push	{r7}
 800249e:	b087      	sub	sp, #28
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
 80024a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80024a6:	2300      	movs	r3, #0
 80024a8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80024aa:	e15a      	b.n	8002762 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	681a      	ldr	r2, [r3, #0]
 80024b0:	2101      	movs	r1, #1
 80024b2:	697b      	ldr	r3, [r7, #20]
 80024b4:	fa01 f303 	lsl.w	r3, r1, r3
 80024b8:	4013      	ands	r3, r2
 80024ba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	f000 814c 	beq.w	800275c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	f003 0303 	and.w	r3, r3, #3
 80024cc:	2b01      	cmp	r3, #1
 80024ce:	d005      	beq.n	80024dc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80024d8:	2b02      	cmp	r3, #2
 80024da:	d130      	bne.n	800253e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	689b      	ldr	r3, [r3, #8]
 80024e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	005b      	lsls	r3, r3, #1
 80024e6:	2203      	movs	r2, #3
 80024e8:	fa02 f303 	lsl.w	r3, r2, r3
 80024ec:	43db      	mvns	r3, r3
 80024ee:	693a      	ldr	r2, [r7, #16]
 80024f0:	4013      	ands	r3, r2
 80024f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	68da      	ldr	r2, [r3, #12]
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	005b      	lsls	r3, r3, #1
 80024fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002500:	693a      	ldr	r2, [r7, #16]
 8002502:	4313      	orrs	r3, r2
 8002504:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	693a      	ldr	r2, [r7, #16]
 800250a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002512:	2201      	movs	r2, #1
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	fa02 f303 	lsl.w	r3, r2, r3
 800251a:	43db      	mvns	r3, r3
 800251c:	693a      	ldr	r2, [r7, #16]
 800251e:	4013      	ands	r3, r2
 8002520:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	091b      	lsrs	r3, r3, #4
 8002528:	f003 0201 	and.w	r2, r3, #1
 800252c:	697b      	ldr	r3, [r7, #20]
 800252e:	fa02 f303 	lsl.w	r3, r2, r3
 8002532:	693a      	ldr	r2, [r7, #16]
 8002534:	4313      	orrs	r3, r2
 8002536:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	693a      	ldr	r2, [r7, #16]
 800253c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	f003 0303 	and.w	r3, r3, #3
 8002546:	2b03      	cmp	r3, #3
 8002548:	d017      	beq.n	800257a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	68db      	ldr	r3, [r3, #12]
 800254e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002550:	697b      	ldr	r3, [r7, #20]
 8002552:	005b      	lsls	r3, r3, #1
 8002554:	2203      	movs	r2, #3
 8002556:	fa02 f303 	lsl.w	r3, r2, r3
 800255a:	43db      	mvns	r3, r3
 800255c:	693a      	ldr	r2, [r7, #16]
 800255e:	4013      	ands	r3, r2
 8002560:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	689a      	ldr	r2, [r3, #8]
 8002566:	697b      	ldr	r3, [r7, #20]
 8002568:	005b      	lsls	r3, r3, #1
 800256a:	fa02 f303 	lsl.w	r3, r2, r3
 800256e:	693a      	ldr	r2, [r7, #16]
 8002570:	4313      	orrs	r3, r2
 8002572:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	693a      	ldr	r2, [r7, #16]
 8002578:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	f003 0303 	and.w	r3, r3, #3
 8002582:	2b02      	cmp	r3, #2
 8002584:	d123      	bne.n	80025ce <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002586:	697b      	ldr	r3, [r7, #20]
 8002588:	08da      	lsrs	r2, r3, #3
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	3208      	adds	r2, #8
 800258e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002592:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	f003 0307 	and.w	r3, r3, #7
 800259a:	009b      	lsls	r3, r3, #2
 800259c:	220f      	movs	r2, #15
 800259e:	fa02 f303 	lsl.w	r3, r2, r3
 80025a2:	43db      	mvns	r3, r3
 80025a4:	693a      	ldr	r2, [r7, #16]
 80025a6:	4013      	ands	r3, r2
 80025a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	691a      	ldr	r2, [r3, #16]
 80025ae:	697b      	ldr	r3, [r7, #20]
 80025b0:	f003 0307 	and.w	r3, r3, #7
 80025b4:	009b      	lsls	r3, r3, #2
 80025b6:	fa02 f303 	lsl.w	r3, r2, r3
 80025ba:	693a      	ldr	r2, [r7, #16]
 80025bc:	4313      	orrs	r3, r2
 80025be:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	08da      	lsrs	r2, r3, #3
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	3208      	adds	r2, #8
 80025c8:	6939      	ldr	r1, [r7, #16]
 80025ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80025d4:	697b      	ldr	r3, [r7, #20]
 80025d6:	005b      	lsls	r3, r3, #1
 80025d8:	2203      	movs	r2, #3
 80025da:	fa02 f303 	lsl.w	r3, r2, r3
 80025de:	43db      	mvns	r3, r3
 80025e0:	693a      	ldr	r2, [r7, #16]
 80025e2:	4013      	ands	r3, r2
 80025e4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	f003 0203 	and.w	r2, r3, #3
 80025ee:	697b      	ldr	r3, [r7, #20]
 80025f0:	005b      	lsls	r3, r3, #1
 80025f2:	fa02 f303 	lsl.w	r3, r2, r3
 80025f6:	693a      	ldr	r2, [r7, #16]
 80025f8:	4313      	orrs	r3, r2
 80025fa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	693a      	ldr	r2, [r7, #16]
 8002600:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800260a:	2b00      	cmp	r3, #0
 800260c:	f000 80a6 	beq.w	800275c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002610:	4b5b      	ldr	r3, [pc, #364]	@ (8002780 <HAL_GPIO_Init+0x2e4>)
 8002612:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002614:	4a5a      	ldr	r2, [pc, #360]	@ (8002780 <HAL_GPIO_Init+0x2e4>)
 8002616:	f043 0301 	orr.w	r3, r3, #1
 800261a:	6613      	str	r3, [r2, #96]	@ 0x60
 800261c:	4b58      	ldr	r3, [pc, #352]	@ (8002780 <HAL_GPIO_Init+0x2e4>)
 800261e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002620:	f003 0301 	and.w	r3, r3, #1
 8002624:	60bb      	str	r3, [r7, #8]
 8002626:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002628:	4a56      	ldr	r2, [pc, #344]	@ (8002784 <HAL_GPIO_Init+0x2e8>)
 800262a:	697b      	ldr	r3, [r7, #20]
 800262c:	089b      	lsrs	r3, r3, #2
 800262e:	3302      	adds	r3, #2
 8002630:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002634:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002636:	697b      	ldr	r3, [r7, #20]
 8002638:	f003 0303 	and.w	r3, r3, #3
 800263c:	009b      	lsls	r3, r3, #2
 800263e:	220f      	movs	r2, #15
 8002640:	fa02 f303 	lsl.w	r3, r2, r3
 8002644:	43db      	mvns	r3, r3
 8002646:	693a      	ldr	r2, [r7, #16]
 8002648:	4013      	ands	r3, r2
 800264a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002652:	d01f      	beq.n	8002694 <HAL_GPIO_Init+0x1f8>
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	4a4c      	ldr	r2, [pc, #304]	@ (8002788 <HAL_GPIO_Init+0x2ec>)
 8002658:	4293      	cmp	r3, r2
 800265a:	d019      	beq.n	8002690 <HAL_GPIO_Init+0x1f4>
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	4a4b      	ldr	r2, [pc, #300]	@ (800278c <HAL_GPIO_Init+0x2f0>)
 8002660:	4293      	cmp	r3, r2
 8002662:	d013      	beq.n	800268c <HAL_GPIO_Init+0x1f0>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	4a4a      	ldr	r2, [pc, #296]	@ (8002790 <HAL_GPIO_Init+0x2f4>)
 8002668:	4293      	cmp	r3, r2
 800266a:	d00d      	beq.n	8002688 <HAL_GPIO_Init+0x1ec>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	4a49      	ldr	r2, [pc, #292]	@ (8002794 <HAL_GPIO_Init+0x2f8>)
 8002670:	4293      	cmp	r3, r2
 8002672:	d007      	beq.n	8002684 <HAL_GPIO_Init+0x1e8>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	4a48      	ldr	r2, [pc, #288]	@ (8002798 <HAL_GPIO_Init+0x2fc>)
 8002678:	4293      	cmp	r3, r2
 800267a:	d101      	bne.n	8002680 <HAL_GPIO_Init+0x1e4>
 800267c:	2305      	movs	r3, #5
 800267e:	e00a      	b.n	8002696 <HAL_GPIO_Init+0x1fa>
 8002680:	2306      	movs	r3, #6
 8002682:	e008      	b.n	8002696 <HAL_GPIO_Init+0x1fa>
 8002684:	2304      	movs	r3, #4
 8002686:	e006      	b.n	8002696 <HAL_GPIO_Init+0x1fa>
 8002688:	2303      	movs	r3, #3
 800268a:	e004      	b.n	8002696 <HAL_GPIO_Init+0x1fa>
 800268c:	2302      	movs	r3, #2
 800268e:	e002      	b.n	8002696 <HAL_GPIO_Init+0x1fa>
 8002690:	2301      	movs	r3, #1
 8002692:	e000      	b.n	8002696 <HAL_GPIO_Init+0x1fa>
 8002694:	2300      	movs	r3, #0
 8002696:	697a      	ldr	r2, [r7, #20]
 8002698:	f002 0203 	and.w	r2, r2, #3
 800269c:	0092      	lsls	r2, r2, #2
 800269e:	4093      	lsls	r3, r2
 80026a0:	693a      	ldr	r2, [r7, #16]
 80026a2:	4313      	orrs	r3, r2
 80026a4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80026a6:	4937      	ldr	r1, [pc, #220]	@ (8002784 <HAL_GPIO_Init+0x2e8>)
 80026a8:	697b      	ldr	r3, [r7, #20]
 80026aa:	089b      	lsrs	r3, r3, #2
 80026ac:	3302      	adds	r3, #2
 80026ae:	693a      	ldr	r2, [r7, #16]
 80026b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80026b4:	4b39      	ldr	r3, [pc, #228]	@ (800279c <HAL_GPIO_Init+0x300>)
 80026b6:	689b      	ldr	r3, [r3, #8]
 80026b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	43db      	mvns	r3, r3
 80026be:	693a      	ldr	r2, [r7, #16]
 80026c0:	4013      	ands	r3, r2
 80026c2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d003      	beq.n	80026d8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80026d0:	693a      	ldr	r2, [r7, #16]
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	4313      	orrs	r3, r2
 80026d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80026d8:	4a30      	ldr	r2, [pc, #192]	@ (800279c <HAL_GPIO_Init+0x300>)
 80026da:	693b      	ldr	r3, [r7, #16]
 80026dc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80026de:	4b2f      	ldr	r3, [pc, #188]	@ (800279c <HAL_GPIO_Init+0x300>)
 80026e0:	68db      	ldr	r3, [r3, #12]
 80026e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	43db      	mvns	r3, r3
 80026e8:	693a      	ldr	r2, [r7, #16]
 80026ea:	4013      	ands	r3, r2
 80026ec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d003      	beq.n	8002702 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80026fa:	693a      	ldr	r2, [r7, #16]
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	4313      	orrs	r3, r2
 8002700:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002702:	4a26      	ldr	r2, [pc, #152]	@ (800279c <HAL_GPIO_Init+0x300>)
 8002704:	693b      	ldr	r3, [r7, #16]
 8002706:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002708:	4b24      	ldr	r3, [pc, #144]	@ (800279c <HAL_GPIO_Init+0x300>)
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	43db      	mvns	r3, r3
 8002712:	693a      	ldr	r2, [r7, #16]
 8002714:	4013      	ands	r3, r2
 8002716:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002720:	2b00      	cmp	r3, #0
 8002722:	d003      	beq.n	800272c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002724:	693a      	ldr	r2, [r7, #16]
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	4313      	orrs	r3, r2
 800272a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800272c:	4a1b      	ldr	r2, [pc, #108]	@ (800279c <HAL_GPIO_Init+0x300>)
 800272e:	693b      	ldr	r3, [r7, #16]
 8002730:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002732:	4b1a      	ldr	r3, [pc, #104]	@ (800279c <HAL_GPIO_Init+0x300>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	43db      	mvns	r3, r3
 800273c:	693a      	ldr	r2, [r7, #16]
 800273e:	4013      	ands	r3, r2
 8002740:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800274a:	2b00      	cmp	r3, #0
 800274c:	d003      	beq.n	8002756 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800274e:	693a      	ldr	r2, [r7, #16]
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	4313      	orrs	r3, r2
 8002754:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002756:	4a11      	ldr	r2, [pc, #68]	@ (800279c <HAL_GPIO_Init+0x300>)
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	3301      	adds	r3, #1
 8002760:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	681a      	ldr	r2, [r3, #0]
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	fa22 f303 	lsr.w	r3, r2, r3
 800276c:	2b00      	cmp	r3, #0
 800276e:	f47f ae9d 	bne.w	80024ac <HAL_GPIO_Init+0x10>
  }
}
 8002772:	bf00      	nop
 8002774:	bf00      	nop
 8002776:	371c      	adds	r7, #28
 8002778:	46bd      	mov	sp, r7
 800277a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277e:	4770      	bx	lr
 8002780:	40021000 	.word	0x40021000
 8002784:	40010000 	.word	0x40010000
 8002788:	48000400 	.word	0x48000400
 800278c:	48000800 	.word	0x48000800
 8002790:	48000c00 	.word	0x48000c00
 8002794:	48001000 	.word	0x48001000
 8002798:	48001400 	.word	0x48001400
 800279c:	40010400 	.word	0x40010400

080027a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b083      	sub	sp, #12
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
 80027a8:	460b      	mov	r3, r1
 80027aa:	807b      	strh	r3, [r7, #2]
 80027ac:	4613      	mov	r3, r2
 80027ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80027b0:	787b      	ldrb	r3, [r7, #1]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d003      	beq.n	80027be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80027b6:	887a      	ldrh	r2, [r7, #2]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80027bc:	e002      	b.n	80027c4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80027be:	887a      	ldrh	r2, [r7, #2]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80027c4:	bf00      	nop
 80027c6:	370c      	adds	r7, #12
 80027c8:	46bd      	mov	sp, r7
 80027ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ce:	4770      	bx	lr

080027d0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b082      	sub	sp, #8
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d101      	bne.n	80027e2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80027de:	2301      	movs	r3, #1
 80027e0:	e08d      	b.n	80028fe <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80027e8:	b2db      	uxtb	r3, r3
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d106      	bne.n	80027fc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2200      	movs	r2, #0
 80027f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80027f6:	6878      	ldr	r0, [r7, #4]
 80027f8:	f7fe fb5a 	bl	8000eb0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2224      	movs	r2, #36	@ 0x24
 8002800:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	681a      	ldr	r2, [r3, #0]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f022 0201 	bic.w	r2, r2, #1
 8002812:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	685a      	ldr	r2, [r3, #4]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002820:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	689a      	ldr	r2, [r3, #8]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002830:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	68db      	ldr	r3, [r3, #12]
 8002836:	2b01      	cmp	r3, #1
 8002838:	d107      	bne.n	800284a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	689a      	ldr	r2, [r3, #8]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002846:	609a      	str	r2, [r3, #8]
 8002848:	e006      	b.n	8002858 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	689a      	ldr	r2, [r3, #8]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002856:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	68db      	ldr	r3, [r3, #12]
 800285c:	2b02      	cmp	r3, #2
 800285e:	d108      	bne.n	8002872 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	685a      	ldr	r2, [r3, #4]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800286e:	605a      	str	r2, [r3, #4]
 8002870:	e007      	b.n	8002882 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	685a      	ldr	r2, [r3, #4]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002880:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	687a      	ldr	r2, [r7, #4]
 800288a:	6812      	ldr	r2, [r2, #0]
 800288c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002890:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002894:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	68da      	ldr	r2, [r3, #12]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80028a4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	691a      	ldr	r2, [r3, #16]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	695b      	ldr	r3, [r3, #20]
 80028ae:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	699b      	ldr	r3, [r3, #24]
 80028b6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	430a      	orrs	r2, r1
 80028be:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	69d9      	ldr	r1, [r3, #28]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6a1a      	ldr	r2, [r3, #32]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	430a      	orrs	r2, r1
 80028ce:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	681a      	ldr	r2, [r3, #0]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f042 0201 	orr.w	r2, r2, #1
 80028de:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2200      	movs	r2, #0
 80028e4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2220      	movs	r2, #32
 80028ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2200      	movs	r2, #0
 80028f2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2200      	movs	r2, #0
 80028f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80028fc:	2300      	movs	r3, #0
}
 80028fe:	4618      	mov	r0, r3
 8002900:	3708      	adds	r7, #8
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}
	...

08002908 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b088      	sub	sp, #32
 800290c:	af02      	add	r7, sp, #8
 800290e:	60f8      	str	r0, [r7, #12]
 8002910:	4608      	mov	r0, r1
 8002912:	4611      	mov	r1, r2
 8002914:	461a      	mov	r2, r3
 8002916:	4603      	mov	r3, r0
 8002918:	817b      	strh	r3, [r7, #10]
 800291a:	460b      	mov	r3, r1
 800291c:	813b      	strh	r3, [r7, #8]
 800291e:	4613      	mov	r3, r2
 8002920:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002928:	b2db      	uxtb	r3, r3
 800292a:	2b20      	cmp	r3, #32
 800292c:	f040 80f9 	bne.w	8002b22 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002930:	6a3b      	ldr	r3, [r7, #32]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d002      	beq.n	800293c <HAL_I2C_Mem_Write+0x34>
 8002936:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002938:	2b00      	cmp	r3, #0
 800293a:	d105      	bne.n	8002948 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002942:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002944:	2301      	movs	r3, #1
 8002946:	e0ed      	b.n	8002b24 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800294e:	2b01      	cmp	r3, #1
 8002950:	d101      	bne.n	8002956 <HAL_I2C_Mem_Write+0x4e>
 8002952:	2302      	movs	r3, #2
 8002954:	e0e6      	b.n	8002b24 <HAL_I2C_Mem_Write+0x21c>
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	2201      	movs	r2, #1
 800295a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800295e:	f7ff f977 	bl	8001c50 <HAL_GetTick>
 8002962:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	9300      	str	r3, [sp, #0]
 8002968:	2319      	movs	r3, #25
 800296a:	2201      	movs	r2, #1
 800296c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002970:	68f8      	ldr	r0, [r7, #12]
 8002972:	f001 fd94 	bl	800449e <I2C_WaitOnFlagUntilTimeout>
 8002976:	4603      	mov	r3, r0
 8002978:	2b00      	cmp	r3, #0
 800297a:	d001      	beq.n	8002980 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800297c:	2301      	movs	r3, #1
 800297e:	e0d1      	b.n	8002b24 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	2221      	movs	r2, #33	@ 0x21
 8002984:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	2240      	movs	r2, #64	@ 0x40
 800298c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	2200      	movs	r2, #0
 8002994:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	6a3a      	ldr	r2, [r7, #32]
 800299a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80029a0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	2200      	movs	r2, #0
 80029a6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80029a8:	88f8      	ldrh	r0, [r7, #6]
 80029aa:	893a      	ldrh	r2, [r7, #8]
 80029ac:	8979      	ldrh	r1, [r7, #10]
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	9301      	str	r3, [sp, #4]
 80029b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029b4:	9300      	str	r3, [sp, #0]
 80029b6:	4603      	mov	r3, r0
 80029b8:	68f8      	ldr	r0, [r7, #12]
 80029ba:	f000 ff6f 	bl	800389c <I2C_RequestMemoryWrite>
 80029be:	4603      	mov	r3, r0
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d005      	beq.n	80029d0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	2200      	movs	r2, #0
 80029c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80029cc:	2301      	movs	r3, #1
 80029ce:	e0a9      	b.n	8002b24 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029d4:	b29b      	uxth	r3, r3
 80029d6:	2bff      	cmp	r3, #255	@ 0xff
 80029d8:	d90e      	bls.n	80029f8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	22ff      	movs	r2, #255	@ 0xff
 80029de:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029e4:	b2da      	uxtb	r2, r3
 80029e6:	8979      	ldrh	r1, [r7, #10]
 80029e8:	2300      	movs	r3, #0
 80029ea:	9300      	str	r3, [sp, #0]
 80029ec:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80029f0:	68f8      	ldr	r0, [r7, #12]
 80029f2:	f001 ff17 	bl	8004824 <I2C_TransferConfig>
 80029f6:	e00f      	b.n	8002a18 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029fc:	b29a      	uxth	r2, r3
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a06:	b2da      	uxtb	r2, r3
 8002a08:	8979      	ldrh	r1, [r7, #10]
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	9300      	str	r3, [sp, #0]
 8002a0e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002a12:	68f8      	ldr	r0, [r7, #12]
 8002a14:	f001 ff06 	bl	8004824 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a18:	697a      	ldr	r2, [r7, #20]
 8002a1a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002a1c:	68f8      	ldr	r0, [r7, #12]
 8002a1e:	f001 fd97 	bl	8004550 <I2C_WaitOnTXISFlagUntilTimeout>
 8002a22:	4603      	mov	r3, r0
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d001      	beq.n	8002a2c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	e07b      	b.n	8002b24 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a30:	781a      	ldrb	r2, [r3, #0]
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a3c:	1c5a      	adds	r2, r3, #1
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a46:	b29b      	uxth	r3, r3
 8002a48:	3b01      	subs	r3, #1
 8002a4a:	b29a      	uxth	r2, r3
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a54:	3b01      	subs	r3, #1
 8002a56:	b29a      	uxth	r2, r3
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a60:	b29b      	uxth	r3, r3
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d034      	beq.n	8002ad0 <HAL_I2C_Mem_Write+0x1c8>
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d130      	bne.n	8002ad0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002a6e:	697b      	ldr	r3, [r7, #20]
 8002a70:	9300      	str	r3, [sp, #0]
 8002a72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a74:	2200      	movs	r2, #0
 8002a76:	2180      	movs	r1, #128	@ 0x80
 8002a78:	68f8      	ldr	r0, [r7, #12]
 8002a7a:	f001 fd10 	bl	800449e <I2C_WaitOnFlagUntilTimeout>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d001      	beq.n	8002a88 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002a84:	2301      	movs	r3, #1
 8002a86:	e04d      	b.n	8002b24 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a8c:	b29b      	uxth	r3, r3
 8002a8e:	2bff      	cmp	r3, #255	@ 0xff
 8002a90:	d90e      	bls.n	8002ab0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	22ff      	movs	r2, #255	@ 0xff
 8002a96:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a9c:	b2da      	uxtb	r2, r3
 8002a9e:	8979      	ldrh	r1, [r7, #10]
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	9300      	str	r3, [sp, #0]
 8002aa4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002aa8:	68f8      	ldr	r0, [r7, #12]
 8002aaa:	f001 febb 	bl	8004824 <I2C_TransferConfig>
 8002aae:	e00f      	b.n	8002ad0 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ab4:	b29a      	uxth	r2, r3
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002abe:	b2da      	uxtb	r2, r3
 8002ac0:	8979      	ldrh	r1, [r7, #10]
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	9300      	str	r3, [sp, #0]
 8002ac6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002aca:	68f8      	ldr	r0, [r7, #12]
 8002acc:	f001 feaa 	bl	8004824 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ad4:	b29b      	uxth	r3, r3
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d19e      	bne.n	8002a18 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ada:	697a      	ldr	r2, [r7, #20]
 8002adc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002ade:	68f8      	ldr	r0, [r7, #12]
 8002ae0:	f001 fd7d 	bl	80045de <I2C_WaitOnSTOPFlagUntilTimeout>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d001      	beq.n	8002aee <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002aea:	2301      	movs	r3, #1
 8002aec:	e01a      	b.n	8002b24 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	2220      	movs	r2, #32
 8002af4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	6859      	ldr	r1, [r3, #4]
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681a      	ldr	r2, [r3, #0]
 8002b00:	4b0a      	ldr	r3, [pc, #40]	@ (8002b2c <HAL_I2C_Mem_Write+0x224>)
 8002b02:	400b      	ands	r3, r1
 8002b04:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	2220      	movs	r2, #32
 8002b0a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	2200      	movs	r2, #0
 8002b12:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	2200      	movs	r2, #0
 8002b1a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	e000      	b.n	8002b24 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002b22:	2302      	movs	r3, #2
  }
}
 8002b24:	4618      	mov	r0, r3
 8002b26:	3718      	adds	r7, #24
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bd80      	pop	{r7, pc}
 8002b2c:	fe00e800 	.word	0xfe00e800

08002b30 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b088      	sub	sp, #32
 8002b34:	af02      	add	r7, sp, #8
 8002b36:	60f8      	str	r0, [r7, #12]
 8002b38:	4608      	mov	r0, r1
 8002b3a:	4611      	mov	r1, r2
 8002b3c:	461a      	mov	r2, r3
 8002b3e:	4603      	mov	r3, r0
 8002b40:	817b      	strh	r3, [r7, #10]
 8002b42:	460b      	mov	r3, r1
 8002b44:	813b      	strh	r3, [r7, #8]
 8002b46:	4613      	mov	r3, r2
 8002b48:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b50:	b2db      	uxtb	r3, r3
 8002b52:	2b20      	cmp	r3, #32
 8002b54:	f040 80fd 	bne.w	8002d52 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b58:	6a3b      	ldr	r3, [r7, #32]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d002      	beq.n	8002b64 <HAL_I2C_Mem_Read+0x34>
 8002b5e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d105      	bne.n	8002b70 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002b6a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	e0f1      	b.n	8002d54 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002b76:	2b01      	cmp	r3, #1
 8002b78:	d101      	bne.n	8002b7e <HAL_I2C_Mem_Read+0x4e>
 8002b7a:	2302      	movs	r3, #2
 8002b7c:	e0ea      	b.n	8002d54 <HAL_I2C_Mem_Read+0x224>
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	2201      	movs	r2, #1
 8002b82:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002b86:	f7ff f863 	bl	8001c50 <HAL_GetTick>
 8002b8a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002b8c:	697b      	ldr	r3, [r7, #20]
 8002b8e:	9300      	str	r3, [sp, #0]
 8002b90:	2319      	movs	r3, #25
 8002b92:	2201      	movs	r2, #1
 8002b94:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002b98:	68f8      	ldr	r0, [r7, #12]
 8002b9a:	f001 fc80 	bl	800449e <I2C_WaitOnFlagUntilTimeout>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d001      	beq.n	8002ba8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	e0d5      	b.n	8002d54 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	2222      	movs	r2, #34	@ 0x22
 8002bac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	2240      	movs	r2, #64	@ 0x40
 8002bb4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	2200      	movs	r2, #0
 8002bbc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	6a3a      	ldr	r2, [r7, #32]
 8002bc2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002bc8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	2200      	movs	r2, #0
 8002bce:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002bd0:	88f8      	ldrh	r0, [r7, #6]
 8002bd2:	893a      	ldrh	r2, [r7, #8]
 8002bd4:	8979      	ldrh	r1, [r7, #10]
 8002bd6:	697b      	ldr	r3, [r7, #20]
 8002bd8:	9301      	str	r3, [sp, #4]
 8002bda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bdc:	9300      	str	r3, [sp, #0]
 8002bde:	4603      	mov	r3, r0
 8002be0:	68f8      	ldr	r0, [r7, #12]
 8002be2:	f000 feaf 	bl	8003944 <I2C_RequestMemoryRead>
 8002be6:	4603      	mov	r3, r0
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d005      	beq.n	8002bf8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	e0ad      	b.n	8002d54 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bfc:	b29b      	uxth	r3, r3
 8002bfe:	2bff      	cmp	r3, #255	@ 0xff
 8002c00:	d90e      	bls.n	8002c20 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	22ff      	movs	r2, #255	@ 0xff
 8002c06:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c0c:	b2da      	uxtb	r2, r3
 8002c0e:	8979      	ldrh	r1, [r7, #10]
 8002c10:	4b52      	ldr	r3, [pc, #328]	@ (8002d5c <HAL_I2C_Mem_Read+0x22c>)
 8002c12:	9300      	str	r3, [sp, #0]
 8002c14:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002c18:	68f8      	ldr	r0, [r7, #12]
 8002c1a:	f001 fe03 	bl	8004824 <I2C_TransferConfig>
 8002c1e:	e00f      	b.n	8002c40 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c24:	b29a      	uxth	r2, r3
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c2e:	b2da      	uxtb	r2, r3
 8002c30:	8979      	ldrh	r1, [r7, #10]
 8002c32:	4b4a      	ldr	r3, [pc, #296]	@ (8002d5c <HAL_I2C_Mem_Read+0x22c>)
 8002c34:	9300      	str	r3, [sp, #0]
 8002c36:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002c3a:	68f8      	ldr	r0, [r7, #12]
 8002c3c:	f001 fdf2 	bl	8004824 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002c40:	697b      	ldr	r3, [r7, #20]
 8002c42:	9300      	str	r3, [sp, #0]
 8002c44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c46:	2200      	movs	r2, #0
 8002c48:	2104      	movs	r1, #4
 8002c4a:	68f8      	ldr	r0, [r7, #12]
 8002c4c:	f001 fc27 	bl	800449e <I2C_WaitOnFlagUntilTimeout>
 8002c50:	4603      	mov	r3, r0
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d001      	beq.n	8002c5a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
 8002c58:	e07c      	b.n	8002d54 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c64:	b2d2      	uxtb	r2, r2
 8002c66:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c6c:	1c5a      	adds	r2, r3, #1
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c76:	3b01      	subs	r3, #1
 8002c78:	b29a      	uxth	r2, r3
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c82:	b29b      	uxth	r3, r3
 8002c84:	3b01      	subs	r3, #1
 8002c86:	b29a      	uxth	r2, r3
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c90:	b29b      	uxth	r3, r3
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d034      	beq.n	8002d00 <HAL_I2C_Mem_Read+0x1d0>
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d130      	bne.n	8002d00 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002c9e:	697b      	ldr	r3, [r7, #20]
 8002ca0:	9300      	str	r3, [sp, #0]
 8002ca2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	2180      	movs	r1, #128	@ 0x80
 8002ca8:	68f8      	ldr	r0, [r7, #12]
 8002caa:	f001 fbf8 	bl	800449e <I2C_WaitOnFlagUntilTimeout>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d001      	beq.n	8002cb8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	e04d      	b.n	8002d54 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cbc:	b29b      	uxth	r3, r3
 8002cbe:	2bff      	cmp	r3, #255	@ 0xff
 8002cc0:	d90e      	bls.n	8002ce0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	22ff      	movs	r2, #255	@ 0xff
 8002cc6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ccc:	b2da      	uxtb	r2, r3
 8002cce:	8979      	ldrh	r1, [r7, #10]
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	9300      	str	r3, [sp, #0]
 8002cd4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002cd8:	68f8      	ldr	r0, [r7, #12]
 8002cda:	f001 fda3 	bl	8004824 <I2C_TransferConfig>
 8002cde:	e00f      	b.n	8002d00 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ce4:	b29a      	uxth	r2, r3
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cee:	b2da      	uxtb	r2, r3
 8002cf0:	8979      	ldrh	r1, [r7, #10]
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	9300      	str	r3, [sp, #0]
 8002cf6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002cfa:	68f8      	ldr	r0, [r7, #12]
 8002cfc:	f001 fd92 	bl	8004824 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d04:	b29b      	uxth	r3, r3
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d19a      	bne.n	8002c40 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d0a:	697a      	ldr	r2, [r7, #20]
 8002d0c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002d0e:	68f8      	ldr	r0, [r7, #12]
 8002d10:	f001 fc65 	bl	80045de <I2C_WaitOnSTOPFlagUntilTimeout>
 8002d14:	4603      	mov	r3, r0
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d001      	beq.n	8002d1e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	e01a      	b.n	8002d54 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	2220      	movs	r2, #32
 8002d24:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	6859      	ldr	r1, [r3, #4]
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681a      	ldr	r2, [r3, #0]
 8002d30:	4b0b      	ldr	r3, [pc, #44]	@ (8002d60 <HAL_I2C_Mem_Read+0x230>)
 8002d32:	400b      	ands	r3, r1
 8002d34:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	2220      	movs	r2, #32
 8002d3a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	2200      	movs	r2, #0
 8002d42:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	e000      	b.n	8002d54 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002d52:	2302      	movs	r3, #2
  }
}
 8002d54:	4618      	mov	r0, r3
 8002d56:	3718      	adds	r7, #24
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bd80      	pop	{r7, pc}
 8002d5c:	80002400 	.word	0x80002400
 8002d60:	fe00e800 	.word	0xfe00e800

08002d64 <HAL_I2C_Mem_Read_DMA>:
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                       uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b088      	sub	sp, #32
 8002d68:	af02      	add	r7, sp, #8
 8002d6a:	60f8      	str	r0, [r7, #12]
 8002d6c:	4608      	mov	r0, r1
 8002d6e:	4611      	mov	r1, r2
 8002d70:	461a      	mov	r2, r3
 8002d72:	4603      	mov	r3, r0
 8002d74:	817b      	strh	r3, [r7, #10]
 8002d76:	460b      	mov	r3, r1
 8002d78:	813b      	strh	r3, [r7, #8]
 8002d7a:	4613      	mov	r3, r2
 8002d7c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002d84:	b2db      	uxtb	r3, r3
 8002d86:	2b20      	cmp	r3, #32
 8002d88:	f040 80c2 	bne.w	8002f10 <HAL_I2C_Mem_Read_DMA+0x1ac>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d8c:	6a3b      	ldr	r3, [r7, #32]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d002      	beq.n	8002d98 <HAL_I2C_Mem_Read_DMA+0x34>
 8002d92:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d105      	bne.n	8002da4 <HAL_I2C_Mem_Read_DMA+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002d9e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002da0:	2301      	movs	r3, #1
 8002da2:	e0b6      	b.n	8002f12 <HAL_I2C_Mem_Read_DMA+0x1ae>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	699b      	ldr	r3, [r3, #24]
 8002daa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002dae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002db2:	d101      	bne.n	8002db8 <HAL_I2C_Mem_Read_DMA+0x54>
    {
      return HAL_BUSY;
 8002db4:	2302      	movs	r3, #2
 8002db6:	e0ac      	b.n	8002f12 <HAL_I2C_Mem_Read_DMA+0x1ae>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002dbe:	2b01      	cmp	r3, #1
 8002dc0:	d101      	bne.n	8002dc6 <HAL_I2C_Mem_Read_DMA+0x62>
 8002dc2:	2302      	movs	r3, #2
 8002dc4:	e0a5      	b.n	8002f12 <HAL_I2C_Mem_Read_DMA+0x1ae>
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	2201      	movs	r2, #1
 8002dca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	2222      	movs	r2, #34	@ 0x22
 8002dd2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	2240      	movs	r2, #64	@ 0x40
 8002dda:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	2200      	movs	r2, #0
 8002de2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	6a3a      	ldr	r2, [r7, #32]
 8002de8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002dee:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	4a4a      	ldr	r2, [pc, #296]	@ (8002f1c <HAL_I2C_Mem_Read_DMA+0x1b8>)
 8002df4:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_DMA;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	4a49      	ldr	r2, [pc, #292]	@ (8002f20 <HAL_I2C_Mem_Read_DMA+0x1bc>)
 8002dfa:	635a      	str	r2, [r3, #52]	@ 0x34
    hi2c->Devaddress  = DevAddress;
 8002dfc:	897a      	ldrh	r2, [r7, #10]
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	64da      	str	r2, [r3, #76]	@ 0x4c

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e06:	b29b      	uxth	r3, r3
 8002e08:	2bff      	cmp	r3, #255	@ 0xff
 8002e0a:	d903      	bls.n	8002e14 <HAL_I2C_Mem_Read_DMA+0xb0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	22ff      	movs	r2, #255	@ 0xff
 8002e10:	851a      	strh	r2, [r3, #40]	@ 0x28
 8002e12:	e004      	b.n	8002e1e <HAL_I2C_Mem_Read_DMA+0xba>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e18:	b29a      	uxth	r2, r3
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	851a      	strh	r2, [r3, #40]	@ 0x28
    }

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002e1e:	88fb      	ldrh	r3, [r7, #6]
 8002e20:	2b01      	cmp	r3, #1
 8002e22:	d109      	bne.n	8002e38 <HAL_I2C_Mem_Read_DMA+0xd4>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002e24:	893b      	ldrh	r3, [r7, #8]
 8002e26:	b2da      	uxtb	r2, r3
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	f04f 32ff 	mov.w	r2, #4294967295
 8002e34:	651a      	str	r2, [r3, #80]	@ 0x50
 8002e36:	e00b      	b.n	8002e50 <HAL_I2C_Mem_Read_DMA+0xec>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002e38:	893b      	ldrh	r3, [r7, #8]
 8002e3a:	0a1b      	lsrs	r3, r3, #8
 8002e3c:	b29b      	uxth	r3, r3
 8002e3e:	b2da      	uxtb	r2, r3
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
 8002e46:	893b      	ldrh	r3, [r7, #8]
 8002e48:	b2db      	uxtb	r3, r3
 8002e4a:	461a      	mov	r2, r3
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    if (hi2c->hdmarx != NULL)
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d020      	beq.n	8002e9a <HAL_I2C_Mem_Read_DMA+0x136>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e5c:	4a31      	ldr	r2, [pc, #196]	@ (8002f24 <HAL_I2C_Mem_Read_DMA+0x1c0>)
 8002e5e:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e64:	4a30      	ldr	r2, [pc, #192]	@ (8002f28 <HAL_I2C_Mem_Read_DMA+0x1c4>)
 8002e66:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->hdmarx->XferAbortCallback = NULL;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e74:	2200      	movs	r2, #0
 8002e76:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the DMA channel */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	3324      	adds	r3, #36	@ 0x24
 8002e82:	4619      	mov	r1, r3
 8002e84:	6a3a      	ldr	r2, [r7, #32]
                                       hi2c->XferSize);
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8002e8a:	f7ff f8c7 	bl	800201c <HAL_DMA_Start_IT>
 8002e8e:	4603      	mov	r3, r0
 8002e90:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 8002e92:	7dfb      	ldrb	r3, [r7, #23]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d127      	bne.n	8002ee8 <HAL_I2C_Mem_Read_DMA+0x184>
 8002e98:	e013      	b.n	8002ec2 <HAL_I2C_Mem_Read_DMA+0x15e>
      hi2c->State     = HAL_I2C_STATE_READY;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	2220      	movs	r2, #32
 8002e9e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002eae:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	645a      	str	r2, [r3, #68]	@ 0x44
      __HAL_UNLOCK(hi2c);
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	2200      	movs	r2, #0
 8002eba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	e027      	b.n	8002f12 <HAL_I2C_Mem_Read_DMA+0x1ae>
    {
      /* Send Slave Address and Memory Address */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002ec2:	88fb      	ldrh	r3, [r7, #6]
 8002ec4:	b2da      	uxtb	r2, r3
 8002ec6:	8979      	ldrh	r1, [r7, #10]
 8002ec8:	4b18      	ldr	r3, [pc, #96]	@ (8002f2c <HAL_I2C_Mem_Read_DMA+0x1c8>)
 8002eca:	9300      	str	r3, [sp, #0]
 8002ecc:	2300      	movs	r3, #0
 8002ece:	68f8      	ldr	r0, [r7, #12]
 8002ed0:	f001 fca8 	bl	8004824 <I2C_TransferConfig>

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002edc:	2101      	movs	r1, #1
 8002ede:	68f8      	ldr	r0, [r7, #12]
 8002ee0:	f001 fcd2 	bl	8004888 <I2C_Enable_IRQ>
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	e014      	b.n	8002f12 <HAL_I2C_Mem_Read_DMA+0x1ae>
      hi2c->State     = HAL_I2C_STATE_READY;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	2220      	movs	r2, #32
 8002eec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002efc:	f043 0210 	orr.w	r2, r3, #16
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	645a      	str	r2, [r3, #68]	@ 0x44
      __HAL_UNLOCK(hi2c);
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	2200      	movs	r2, #0
 8002f08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	e000      	b.n	8002f12 <HAL_I2C_Mem_Read_DMA+0x1ae>
  }
  else
  {
    return HAL_BUSY;
 8002f10:	2302      	movs	r3, #2
  }
}
 8002f12:	4618      	mov	r0, r3
 8002f14:	3718      	adds	r7, #24
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}
 8002f1a:	bf00      	nop
 8002f1c:	ffff0000 	.word	0xffff0000
 8002f20:	080034a1 	.word	0x080034a1
 8002f24:	0800439f 	.word	0x0800439f
 8002f28:	08004435 	.word	0x08004435
 8002f2c:	80002000 	.word	0x80002000

08002f30 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b084      	sub	sp, #16
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	699b      	ldr	r3, [r3, #24]
 8002f3e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d005      	beq.n	8002f5c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f54:	68ba      	ldr	r2, [r7, #8]
 8002f56:	68f9      	ldr	r1, [r7, #12]
 8002f58:	6878      	ldr	r0, [r7, #4]
 8002f5a:	4798      	blx	r3
  }
}
 8002f5c:	bf00      	nop
 8002f5e:	3710      	adds	r7, #16
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bd80      	pop	{r7, pc}

08002f64 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b086      	sub	sp, #24
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	699b      	ldr	r3, [r3, #24]
 8002f72:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8002f7c:	697b      	ldr	r3, [r7, #20]
 8002f7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d00f      	beq.n	8002fa6 <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002f86:	693b      	ldr	r3, [r7, #16]
 8002f88:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d00a      	beq.n	8002fa6 <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f94:	f043 0201 	orr.w	r2, r3, #1
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002fa4:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d00f      	beq.n	8002fd0 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002fb0:	693b      	ldr	r3, [r7, #16]
 8002fb2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d00a      	beq.n	8002fd0 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fbe:	f043 0208 	orr.w	r2, r3, #8
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002fce:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002fd0:	697b      	ldr	r3, [r7, #20]
 8002fd2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d00f      	beq.n	8002ffa <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d00a      	beq.n	8002ffa <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fe8:	f043 0202 	orr.w	r2, r3, #2
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002ff8:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ffe:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	f003 030b 	and.w	r3, r3, #11
 8003006:	2b00      	cmp	r3, #0
 8003008:	d003      	beq.n	8003012 <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 800300a:	68f9      	ldr	r1, [r7, #12]
 800300c:	6878      	ldr	r0, [r7, #4]
 800300e:	f001 f88b 	bl	8004128 <I2C_ITError>
  }
}
 8003012:	bf00      	nop
 8003014:	3718      	adds	r7, #24
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}

0800301a <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800301a:	b480      	push	{r7}
 800301c:	b083      	sub	sp, #12
 800301e:	af00      	add	r7, sp, #0
 8003020:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003022:	bf00      	nop
 8003024:	370c      	adds	r7, #12
 8003026:	46bd      	mov	sp, r7
 8003028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302c:	4770      	bx	lr

0800302e <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800302e:	b480      	push	{r7}
 8003030:	b083      	sub	sp, #12
 8003032:	af00      	add	r7, sp, #0
 8003034:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003036:	bf00      	nop
 8003038:	370c      	adds	r7, #12
 800303a:	46bd      	mov	sp, r7
 800303c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003040:	4770      	bx	lr

08003042 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003042:	b480      	push	{r7}
 8003044:	b083      	sub	sp, #12
 8003046:	af00      	add	r7, sp, #0
 8003048:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800304a:	bf00      	nop
 800304c:	370c      	adds	r7, #12
 800304e:	46bd      	mov	sp, r7
 8003050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003054:	4770      	bx	lr

08003056 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003056:	b480      	push	{r7}
 8003058:	b083      	sub	sp, #12
 800305a:	af00      	add	r7, sp, #0
 800305c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800305e:	bf00      	nop
 8003060:	370c      	adds	r7, #12
 8003062:	46bd      	mov	sp, r7
 8003064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003068:	4770      	bx	lr

0800306a <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800306a:	b480      	push	{r7}
 800306c:	b083      	sub	sp, #12
 800306e:	af00      	add	r7, sp, #0
 8003070:	6078      	str	r0, [r7, #4]
 8003072:	460b      	mov	r3, r1
 8003074:	70fb      	strb	r3, [r7, #3]
 8003076:	4613      	mov	r3, r2
 8003078:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800307a:	bf00      	nop
 800307c:	370c      	adds	r7, #12
 800307e:	46bd      	mov	sp, r7
 8003080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003084:	4770      	bx	lr

08003086 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003086:	b480      	push	{r7}
 8003088:	b083      	sub	sp, #12
 800308a:	af00      	add	r7, sp, #0
 800308c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800308e:	bf00      	nop
 8003090:	370c      	adds	r7, #12
 8003092:	46bd      	mov	sp, r7
 8003094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003098:	4770      	bx	lr

0800309a <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800309a:	b480      	push	{r7}
 800309c:	b083      	sub	sp, #12
 800309e:	af00      	add	r7, sp, #0
 80030a0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80030a2:	bf00      	nop
 80030a4:	370c      	adds	r7, #12
 80030a6:	46bd      	mov	sp, r7
 80030a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ac:	4770      	bx	lr

080030ae <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80030ae:	b480      	push	{r7}
 80030b0:	b083      	sub	sp, #12
 80030b2:	af00      	add	r7, sp, #0
 80030b4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80030b6:	bf00      	nop
 80030b8:	370c      	adds	r7, #12
 80030ba:	46bd      	mov	sp, r7
 80030bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c0:	4770      	bx	lr

080030c2 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80030c2:	b480      	push	{r7}
 80030c4:	b083      	sub	sp, #12
 80030c6:	af00      	add	r7, sp, #0
 80030c8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80030ca:	bf00      	nop
 80030cc:	370c      	adds	r7, #12
 80030ce:	46bd      	mov	sp, r7
 80030d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d4:	4770      	bx	lr

080030d6 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 80030d6:	b580      	push	{r7, lr}
 80030d8:	b086      	sub	sp, #24
 80030da:	af00      	add	r7, sp, #0
 80030dc:	60f8      	str	r0, [r7, #12]
 80030de:	60b9      	str	r1, [r7, #8]
 80030e0:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030e6:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80030f2:	2b01      	cmp	r3, #1
 80030f4:	d101      	bne.n	80030fa <I2C_Slave_ISR_IT+0x24>
 80030f6:	2302      	movs	r3, #2
 80030f8:	e0e2      	b.n	80032c0 <I2C_Slave_ISR_IT+0x1ea>
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	2201      	movs	r2, #1
 80030fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003102:	693b      	ldr	r3, [r7, #16]
 8003104:	f003 0320 	and.w	r3, r3, #32
 8003108:	2b00      	cmp	r3, #0
 800310a:	d009      	beq.n	8003120 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003112:	2b00      	cmp	r3, #0
 8003114:	d004      	beq.n	8003120 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8003116:	6939      	ldr	r1, [r7, #16]
 8003118:	68f8      	ldr	r0, [r7, #12]
 800311a:	f000 fe4d 	bl	8003db8 <I2C_ITSlaveCplt>
 800311e:	e0ca      	b.n	80032b6 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003120:	693b      	ldr	r3, [r7, #16]
 8003122:	f003 0310 	and.w	r3, r3, #16
 8003126:	2b00      	cmp	r3, #0
 8003128:	d04b      	beq.n	80031c2 <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003130:	2b00      	cmp	r3, #0
 8003132:	d046      	beq.n	80031c2 <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003138:	b29b      	uxth	r3, r3
 800313a:	2b00      	cmp	r3, #0
 800313c:	d128      	bne.n	8003190 <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003144:	b2db      	uxtb	r3, r3
 8003146:	2b28      	cmp	r3, #40	@ 0x28
 8003148:	d108      	bne.n	800315c <I2C_Slave_ISR_IT+0x86>
 800314a:	697b      	ldr	r3, [r7, #20]
 800314c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003150:	d104      	bne.n	800315c <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8003152:	6939      	ldr	r1, [r7, #16]
 8003154:	68f8      	ldr	r0, [r7, #12]
 8003156:	f000 ff93 	bl	8004080 <I2C_ITListenCplt>
 800315a:	e031      	b.n	80031c0 <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003162:	b2db      	uxtb	r3, r3
 8003164:	2b29      	cmp	r3, #41	@ 0x29
 8003166:	d10e      	bne.n	8003186 <I2C_Slave_ISR_IT+0xb0>
 8003168:	697b      	ldr	r3, [r7, #20]
 800316a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800316e:	d00a      	beq.n	8003186 <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	2210      	movs	r2, #16
 8003176:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8003178:	68f8      	ldr	r0, [r7, #12]
 800317a:	f001 f8ec 	bl	8004356 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800317e:	68f8      	ldr	r0, [r7, #12]
 8003180:	f000 fcf5 	bl	8003b6e <I2C_ITSlaveSeqCplt>
 8003184:	e01c      	b.n	80031c0 <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	2210      	movs	r2, #16
 800318c:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800318e:	e08f      	b.n	80032b0 <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	2210      	movs	r2, #16
 8003196:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800319c:	f043 0204 	orr.w	r2, r3, #4
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80031a4:	697b      	ldr	r3, [r7, #20]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d003      	beq.n	80031b2 <I2C_Slave_ISR_IT+0xdc>
 80031aa:	697b      	ldr	r3, [r7, #20]
 80031ac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80031b0:	d17e      	bne.n	80032b0 <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031b6:	4619      	mov	r1, r3
 80031b8:	68f8      	ldr	r0, [r7, #12]
 80031ba:	f000 ffb5 	bl	8004128 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80031be:	e077      	b.n	80032b0 <I2C_Slave_ISR_IT+0x1da>
 80031c0:	e076      	b.n	80032b0 <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80031c2:	693b      	ldr	r3, [r7, #16]
 80031c4:	f003 0304 	and.w	r3, r3, #4
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d02f      	beq.n	800322c <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d02a      	beq.n	800322c <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031da:	b29b      	uxth	r3, r3
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d018      	beq.n	8003212 <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031ea:	b2d2      	uxtb	r2, r2
 80031ec:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031f2:	1c5a      	adds	r2, r3, #1
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031fc:	3b01      	subs	r3, #1
 80031fe:	b29a      	uxth	r2, r3
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003208:	b29b      	uxth	r3, r3
 800320a:	3b01      	subs	r3, #1
 800320c:	b29a      	uxth	r2, r3
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003216:	b29b      	uxth	r3, r3
 8003218:	2b00      	cmp	r3, #0
 800321a:	d14b      	bne.n	80032b4 <I2C_Slave_ISR_IT+0x1de>
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003222:	d047      	beq.n	80032b4 <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8003224:	68f8      	ldr	r0, [r7, #12]
 8003226:	f000 fca2 	bl	8003b6e <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800322a:	e043      	b.n	80032b4 <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800322c:	693b      	ldr	r3, [r7, #16]
 800322e:	f003 0308 	and.w	r3, r3, #8
 8003232:	2b00      	cmp	r3, #0
 8003234:	d009      	beq.n	800324a <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800323c:	2b00      	cmp	r3, #0
 800323e:	d004      	beq.n	800324a <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8003240:	6939      	ldr	r1, [r7, #16]
 8003242:	68f8      	ldr	r0, [r7, #12]
 8003244:	f000 fbd2 	bl	80039ec <I2C_ITAddrCplt>
 8003248:	e035      	b.n	80032b6 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800324a:	693b      	ldr	r3, [r7, #16]
 800324c:	f003 0302 	and.w	r3, r3, #2
 8003250:	2b00      	cmp	r3, #0
 8003252:	d030      	beq.n	80032b6 <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800325a:	2b00      	cmp	r3, #0
 800325c:	d02b      	beq.n	80032b6 <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003262:	b29b      	uxth	r3, r3
 8003264:	2b00      	cmp	r3, #0
 8003266:	d018      	beq.n	800329a <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800326c:	781a      	ldrb	r2, [r3, #0]
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003278:	1c5a      	adds	r2, r3, #1
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003282:	b29b      	uxth	r3, r3
 8003284:	3b01      	subs	r3, #1
 8003286:	b29a      	uxth	r2, r3
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003290:	3b01      	subs	r3, #1
 8003292:	b29a      	uxth	r2, r3
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	851a      	strh	r2, [r3, #40]	@ 0x28
 8003298:	e00d      	b.n	80032b6 <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800329a:	697b      	ldr	r3, [r7, #20]
 800329c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80032a0:	d002      	beq.n	80032a8 <I2C_Slave_ISR_IT+0x1d2>
 80032a2:	697b      	ldr	r3, [r7, #20]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d106      	bne.n	80032b6 <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80032a8:	68f8      	ldr	r0, [r7, #12]
 80032aa:	f000 fc60 	bl	8003b6e <I2C_ITSlaveSeqCplt>
 80032ae:	e002      	b.n	80032b6 <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 80032b0:	bf00      	nop
 80032b2:	e000      	b.n	80032b6 <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 80032b4:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	2200      	movs	r2, #0
 80032ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80032be:	2300      	movs	r3, #0
}
 80032c0:	4618      	mov	r0, r3
 80032c2:	3718      	adds	r7, #24
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd80      	pop	{r7, pc}

080032c8 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b088      	sub	sp, #32
 80032cc:	af02      	add	r7, sp, #8
 80032ce:	60f8      	str	r0, [r7, #12]
 80032d0:	60b9      	str	r1, [r7, #8]
 80032d2:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80032da:	2b01      	cmp	r3, #1
 80032dc:	d101      	bne.n	80032e2 <I2C_Master_ISR_DMA+0x1a>
 80032de:	2302      	movs	r3, #2
 80032e0:	e0d9      	b.n	8003496 <I2C_Master_ISR_DMA+0x1ce>
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	2201      	movs	r2, #1
 80032e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80032ea:	68bb      	ldr	r3, [r7, #8]
 80032ec:	f003 0310 	and.w	r3, r3, #16
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d016      	beq.n	8003322 <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d011      	beq.n	8003322 <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	2210      	movs	r2, #16
 8003304:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800330a:	f043 0204 	orr.w	r2, r3, #4
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8003312:	2120      	movs	r1, #32
 8003314:	68f8      	ldr	r0, [r7, #12]
 8003316:	f001 fab7 	bl	8004888 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800331a:	68f8      	ldr	r0, [r7, #12]
 800331c:	f001 f81b 	bl	8004356 <I2C_Flush_TXDR>
 8003320:	e0b4      	b.n	800348c <I2C_Master_ISR_DMA+0x1c4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8003322:	68bb      	ldr	r3, [r7, #8]
 8003324:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003328:	2b00      	cmp	r3, #0
 800332a:	d071      	beq.n	8003410 <I2C_Master_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8003332:	2b00      	cmp	r3, #0
 8003334:	d06c      	beq.n	8003410 <I2C_Master_ISR_DMA+0x148>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	681a      	ldr	r2, [r3, #0]
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003344:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800334a:	b29b      	uxth	r3, r3
 800334c:	2b00      	cmp	r3, #0
 800334e:	d04e      	beq.n	80033ee <I2C_Master_ISR_DMA+0x126>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	b29b      	uxth	r3, r3
 8003358:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800335c:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003362:	b29b      	uxth	r3, r3
 8003364:	2bff      	cmp	r3, #255	@ 0xff
 8003366:	d906      	bls.n	8003376 <I2C_Master_ISR_DMA+0xae>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	22ff      	movs	r2, #255	@ 0xff
 800336c:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 800336e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003372:	617b      	str	r3, [r7, #20]
 8003374:	e010      	b.n	8003398 <I2C_Master_ISR_DMA+0xd0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800337a:	b29a      	uxth	r2, r3
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003384:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003388:	d003      	beq.n	8003392 <I2C_Master_ISR_DMA+0xca>
        {
          xfermode = hi2c->XferOptions;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800338e:	617b      	str	r3, [r7, #20]
 8003390:	e002      	b.n	8003398 <I2C_Master_ISR_DMA+0xd0>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8003392:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003396:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800339c:	b2da      	uxtb	r2, r3
 800339e:	8a79      	ldrh	r1, [r7, #18]
 80033a0:	2300      	movs	r3, #0
 80033a2:	9300      	str	r3, [sp, #0]
 80033a4:	697b      	ldr	r3, [r7, #20]
 80033a6:	68f8      	ldr	r0, [r7, #12]
 80033a8:	f001 fa3c 	bl	8004824 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033b0:	b29a      	uxth	r2, r3
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033b6:	1ad3      	subs	r3, r2, r3
 80033b8:	b29a      	uxth	r2, r3
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80033c4:	b2db      	uxtb	r3, r3
 80033c6:	2b22      	cmp	r3, #34	@ 0x22
 80033c8:	d108      	bne.n	80033dc <I2C_Master_ISR_DMA+0x114>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	681a      	ldr	r2, [r3, #0]
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80033d8:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80033da:	e057      	b.n	800348c <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	681a      	ldr	r2, [r3, #0]
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80033ea:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80033ec:	e04e      	b.n	800348c <I2C_Master_ISR_DMA+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033f8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80033fc:	d003      	beq.n	8003406 <I2C_Master_ISR_DMA+0x13e>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 80033fe:	68f8      	ldr	r0, [r7, #12]
 8003400:	f000 fb78 	bl	8003af4 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8003404:	e042      	b.n	800348c <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8003406:	2140      	movs	r1, #64	@ 0x40
 8003408:	68f8      	ldr	r0, [r7, #12]
 800340a:	f000 fe8d 	bl	8004128 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800340e:	e03d      	b.n	800348c <I2C_Master_ISR_DMA+0x1c4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8003410:	68bb      	ldr	r3, [r7, #8]
 8003412:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003416:	2b00      	cmp	r3, #0
 8003418:	d028      	beq.n	800346c <I2C_Master_ISR_DMA+0x1a4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8003420:	2b00      	cmp	r3, #0
 8003422:	d023      	beq.n	800346c <I2C_Master_ISR_DMA+0x1a4>
  {
    if (hi2c->XferCount == 0U)
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003428:	b29b      	uxth	r3, r3
 800342a:	2b00      	cmp	r3, #0
 800342c:	d119      	bne.n	8003462 <I2C_Master_ISR_DMA+0x19a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003438:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800343c:	d025      	beq.n	800348a <I2C_Master_ISR_DMA+0x1c2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003442:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003446:	d108      	bne.n	800345a <I2C_Master_ISR_DMA+0x192>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	685a      	ldr	r2, [r3, #4]
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003456:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8003458:	e017      	b.n	800348a <I2C_Master_ISR_DMA+0x1c2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800345a:	68f8      	ldr	r0, [r7, #12]
 800345c:	f000 fb4a 	bl	8003af4 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8003460:	e013      	b.n	800348a <I2C_Master_ISR_DMA+0x1c2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8003462:	2140      	movs	r1, #64	@ 0x40
 8003464:	68f8      	ldr	r0, [r7, #12]
 8003466:	f000 fe5f 	bl	8004128 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800346a:	e00e      	b.n	800348a <I2C_Master_ISR_DMA+0x1c2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800346c:	68bb      	ldr	r3, [r7, #8]
 800346e:	f003 0320 	and.w	r3, r3, #32
 8003472:	2b00      	cmp	r3, #0
 8003474:	d00a      	beq.n	800348c <I2C_Master_ISR_DMA+0x1c4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800347c:	2b00      	cmp	r3, #0
 800347e:	d005      	beq.n	800348c <I2C_Master_ISR_DMA+0x1c4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8003480:	68b9      	ldr	r1, [r7, #8]
 8003482:	68f8      	ldr	r0, [r7, #12]
 8003484:	f000 fbd0 	bl	8003c28 <I2C_ITMasterCplt>
 8003488:	e000      	b.n	800348c <I2C_Master_ISR_DMA+0x1c4>
    if (hi2c->XferCount == 0U)
 800348a:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	2200      	movs	r2, #0
 8003490:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8003494:	2300      	movs	r3, #0
}
 8003496:	4618      	mov	r0, r3
 8003498:	3718      	adds	r7, #24
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}
	...

080034a0 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b088      	sub	sp, #32
 80034a4:	af02      	add	r7, sp, #8
 80034a6:	60f8      	str	r0, [r7, #12]
 80034a8:	60b9      	str	r1, [r7, #8]
 80034aa:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 80034ac:	4b8d      	ldr	r3, [pc, #564]	@ (80036e4 <I2C_Mem_ISR_DMA+0x244>)
 80034ae:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80034b6:	2b01      	cmp	r3, #1
 80034b8:	d101      	bne.n	80034be <I2C_Mem_ISR_DMA+0x1e>
 80034ba:	2302      	movs	r3, #2
 80034bc:	e10e      	b.n	80036dc <I2C_Mem_ISR_DMA+0x23c>
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	2201      	movs	r2, #1
 80034c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80034c6:	68bb      	ldr	r3, [r7, #8]
 80034c8:	f003 0310 	and.w	r3, r3, #16
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d016      	beq.n	80034fe <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d011      	beq.n	80034fe <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	2210      	movs	r2, #16
 80034e0:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034e6:	f043 0204 	orr.w	r2, r3, #4
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80034ee:	2120      	movs	r1, #32
 80034f0:	68f8      	ldr	r0, [r7, #12]
 80034f2:	f001 f9c9 	bl	8004888 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80034f6:	68f8      	ldr	r0, [r7, #12]
 80034f8:	f000 ff2d 	bl	8004356 <I2C_Flush_TXDR>
 80034fc:	e0e9      	b.n	80036d2 <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 80034fe:	68bb      	ldr	r3, [r7, #8]
 8003500:	f003 0302 	and.w	r3, r3, #2
 8003504:	2b00      	cmp	r3, #0
 8003506:	d00e      	beq.n	8003526 <I2C_Mem_ISR_DMA+0x86>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800350e:	2b00      	cmp	r3, #0
 8003510:	d009      	beq.n	8003526 <I2C_Mem_ISR_DMA+0x86>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	68fa      	ldr	r2, [r7, #12]
 8003518:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800351a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	f04f 32ff 	mov.w	r2, #4294967295
 8003522:	651a      	str	r2, [r3, #80]	@ 0x50
 8003524:	e0d5      	b.n	80036d2 <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8003526:	68bb      	ldr	r3, [r7, #8]
 8003528:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800352c:	2b00      	cmp	r3, #0
 800352e:	d05f      	beq.n	80035f0 <I2C_Mem_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8003536:	2b00      	cmp	r3, #0
 8003538:	d05a      	beq.n	80035f0 <I2C_Mem_ISR_DMA+0x150>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800353a:	2101      	movs	r1, #1
 800353c:	68f8      	ldr	r0, [r7, #12]
 800353e:	f001 fa27 	bl	8004990 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8003542:	2110      	movs	r1, #16
 8003544:	68f8      	ldr	r0, [r7, #12]
 8003546:	f001 f99f 	bl	8004888 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800354e:	b29b      	uxth	r3, r3
 8003550:	2b00      	cmp	r3, #0
 8003552:	d048      	beq.n	80035e6 <I2C_Mem_ISR_DMA+0x146>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003558:	b29b      	uxth	r3, r3
 800355a:	2bff      	cmp	r3, #255	@ 0xff
 800355c:	d910      	bls.n	8003580 <I2C_Mem_ISR_DMA+0xe0>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	22ff      	movs	r2, #255	@ 0xff
 8003562:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003568:	b299      	uxth	r1, r3
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800356e:	b2da      	uxtb	r2, r3
 8003570:	2300      	movs	r3, #0
 8003572:	9300      	str	r3, [sp, #0]
 8003574:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003578:	68f8      	ldr	r0, [r7, #12]
 800357a:	f001 f953 	bl	8004824 <I2C_TransferConfig>
 800357e:	e011      	b.n	80035a4 <I2C_Mem_ISR_DMA+0x104>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003584:	b29a      	uxth	r2, r3
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800358e:	b299      	uxth	r1, r3
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003594:	b2da      	uxtb	r2, r3
 8003596:	2300      	movs	r3, #0
 8003598:	9300      	str	r3, [sp, #0]
 800359a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800359e:	68f8      	ldr	r0, [r7, #12]
 80035a0:	f001 f940 	bl	8004824 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035a8:	b29a      	uxth	r2, r3
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035ae:	1ad3      	subs	r3, r2, r3
 80035b0:	b29a      	uxth	r2, r3
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80035bc:	b2db      	uxtb	r3, r3
 80035be:	2b22      	cmp	r3, #34	@ 0x22
 80035c0:	d108      	bne.n	80035d4 <I2C_Mem_ISR_DMA+0x134>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	681a      	ldr	r2, [r3, #0]
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80035d0:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80035d2:	e07e      	b.n	80036d2 <I2C_Mem_ISR_DMA+0x232>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	681a      	ldr	r2, [r3, #0]
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80035e2:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80035e4:	e075      	b.n	80036d2 <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80035e6:	2140      	movs	r1, #64	@ 0x40
 80035e8:	68f8      	ldr	r0, [r7, #12]
 80035ea:	f000 fd9d 	bl	8004128 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 80035ee:	e070      	b.n	80036d2 <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80035f0:	68bb      	ldr	r3, [r7, #8]
 80035f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d05d      	beq.n	80036b6 <I2C_Mem_ISR_DMA+0x216>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8003600:	2b00      	cmp	r3, #0
 8003602:	d058      	beq.n	80036b6 <I2C_Mem_ISR_DMA+0x216>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003604:	2101      	movs	r1, #1
 8003606:	68f8      	ldr	r0, [r7, #12]
 8003608:	f001 f9c2 	bl	8004990 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800360c:	2110      	movs	r1, #16
 800360e:	68f8      	ldr	r0, [r7, #12]
 8003610:	f001 f93a 	bl	8004888 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800361a:	b2db      	uxtb	r3, r3
 800361c:	2b22      	cmp	r3, #34	@ 0x22
 800361e:	d101      	bne.n	8003624 <I2C_Mem_ISR_DMA+0x184>
    {
      direction = I2C_GENERATE_START_READ;
 8003620:	4b31      	ldr	r3, [pc, #196]	@ (80036e8 <I2C_Mem_ISR_DMA+0x248>)
 8003622:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003628:	b29b      	uxth	r3, r3
 800362a:	2bff      	cmp	r3, #255	@ 0xff
 800362c:	d910      	bls.n	8003650 <I2C_Mem_ISR_DMA+0x1b0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	22ff      	movs	r2, #255	@ 0xff
 8003632:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003638:	b299      	uxth	r1, r3
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800363e:	b2da      	uxtb	r2, r3
 8003640:	697b      	ldr	r3, [r7, #20]
 8003642:	9300      	str	r3, [sp, #0]
 8003644:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003648:	68f8      	ldr	r0, [r7, #12]
 800364a:	f001 f8eb 	bl	8004824 <I2C_TransferConfig>
 800364e:	e011      	b.n	8003674 <I2C_Mem_ISR_DMA+0x1d4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003654:	b29a      	uxth	r2, r3
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800365e:	b299      	uxth	r1, r3
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003664:	b2da      	uxtb	r2, r3
 8003666:	697b      	ldr	r3, [r7, #20]
 8003668:	9300      	str	r3, [sp, #0]
 800366a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800366e:	68f8      	ldr	r0, [r7, #12]
 8003670:	f001 f8d8 	bl	8004824 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003678:	b29a      	uxth	r2, r3
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800367e:	1ad3      	subs	r3, r2, r3
 8003680:	b29a      	uxth	r2, r3
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800368c:	b2db      	uxtb	r3, r3
 800368e:	2b22      	cmp	r3, #34	@ 0x22
 8003690:	d108      	bne.n	80036a4 <I2C_Mem_ISR_DMA+0x204>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	681a      	ldr	r2, [r3, #0]
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80036a0:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80036a2:	e016      	b.n	80036d2 <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	681a      	ldr	r2, [r3, #0]
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80036b2:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80036b4:	e00d      	b.n	80036d2 <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80036b6:	68bb      	ldr	r3, [r7, #8]
 80036b8:	f003 0320 	and.w	r3, r3, #32
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d008      	beq.n	80036d2 <I2C_Mem_ISR_DMA+0x232>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d003      	beq.n	80036d2 <I2C_Mem_ISR_DMA+0x232>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 80036ca:	68b9      	ldr	r1, [r7, #8]
 80036cc:	68f8      	ldr	r0, [r7, #12]
 80036ce:	f000 faab 	bl	8003c28 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	2200      	movs	r2, #0
 80036d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80036da:	2300      	movs	r3, #0
}
 80036dc:	4618      	mov	r0, r3
 80036de:	3718      	adds	r7, #24
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bd80      	pop	{r7, pc}
 80036e4:	80002000 	.word	0x80002000
 80036e8:	80002400 	.word	0x80002400

080036ec <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b088      	sub	sp, #32
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	60f8      	str	r0, [r7, #12]
 80036f4:	60b9      	str	r1, [r7, #8]
 80036f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036fc:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 80036fe:	2300      	movs	r3, #0
 8003700:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003708:	2b01      	cmp	r3, #1
 800370a:	d101      	bne.n	8003710 <I2C_Slave_ISR_DMA+0x24>
 800370c:	2302      	movs	r3, #2
 800370e:	e0c0      	b.n	8003892 <I2C_Slave_ISR_DMA+0x1a6>
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	2201      	movs	r2, #1
 8003714:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003718:	68bb      	ldr	r3, [r7, #8]
 800371a:	f003 0320 	and.w	r3, r3, #32
 800371e:	2b00      	cmp	r3, #0
 8003720:	d009      	beq.n	8003736 <I2C_Slave_ISR_DMA+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003728:	2b00      	cmp	r3, #0
 800372a:	d004      	beq.n	8003736 <I2C_Slave_ISR_DMA+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 800372c:	68b9      	ldr	r1, [r7, #8]
 800372e:	68f8      	ldr	r0, [r7, #12]
 8003730:	f000 fb42 	bl	8003db8 <I2C_ITSlaveCplt>
 8003734:	e0a8      	b.n	8003888 <I2C_Slave_ISR_DMA+0x19c>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003736:	68bb      	ldr	r3, [r7, #8]
 8003738:	f003 0310 	and.w	r3, r3, #16
 800373c:	2b00      	cmp	r3, #0
 800373e:	f000 8095 	beq.w	800386c <I2C_Slave_ISR_DMA+0x180>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003748:	2b00      	cmp	r3, #0
 800374a:	f000 808f 	beq.w	800386c <I2C_Slave_ISR_DMA+0x180>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003754:	2b00      	cmp	r3, #0
 8003756:	d104      	bne.n	8003762 <I2C_Slave_ISR_DMA+0x76>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800375e:	2b00      	cmp	r3, #0
 8003760:	d07d      	beq.n	800385e <I2C_Slave_ISR_DMA+0x172>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003766:	2b00      	cmp	r3, #0
 8003768:	d00c      	beq.n	8003784 <I2C_Slave_ISR_DMA+0x98>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003770:	2b00      	cmp	r3, #0
 8003772:	d007      	beq.n	8003784 <I2C_Slave_ISR_DMA+0x98>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d101      	bne.n	8003784 <I2C_Slave_ISR_DMA+0x98>
          {
            treatdmanack = 1U;
 8003780:	2301      	movs	r3, #1
 8003782:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003788:	2b00      	cmp	r3, #0
 800378a:	d00c      	beq.n	80037a6 <I2C_Slave_ISR_DMA+0xba>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003792:	2b00      	cmp	r3, #0
 8003794:	d007      	beq.n	80037a6 <I2C_Slave_ISR_DMA+0xba>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d101      	bne.n	80037a6 <I2C_Slave_ISR_DMA+0xba>
          {
            treatdmanack = 1U;
 80037a2:	2301      	movs	r3, #1
 80037a4:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 80037a6:	69fb      	ldr	r3, [r7, #28]
 80037a8:	2b01      	cmp	r3, #1
 80037aa:	d128      	bne.n	80037fe <I2C_Slave_ISR_DMA+0x112>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80037b2:	b2db      	uxtb	r3, r3
 80037b4:	2b28      	cmp	r3, #40	@ 0x28
 80037b6:	d108      	bne.n	80037ca <I2C_Slave_ISR_DMA+0xde>
 80037b8:	69bb      	ldr	r3, [r7, #24]
 80037ba:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80037be:	d104      	bne.n	80037ca <I2C_Slave_ISR_DMA+0xde>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 80037c0:	68b9      	ldr	r1, [r7, #8]
 80037c2:	68f8      	ldr	r0, [r7, #12]
 80037c4:	f000 fc5c 	bl	8004080 <I2C_ITListenCplt>
 80037c8:	e048      	b.n	800385c <I2C_Slave_ISR_DMA+0x170>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80037d0:	b2db      	uxtb	r3, r3
 80037d2:	2b29      	cmp	r3, #41	@ 0x29
 80037d4:	d10e      	bne.n	80037f4 <I2C_Slave_ISR_DMA+0x108>
 80037d6:	69bb      	ldr	r3, [r7, #24]
 80037d8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80037dc:	d00a      	beq.n	80037f4 <I2C_Slave_ISR_DMA+0x108>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	2210      	movs	r2, #16
 80037e4:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 80037e6:	68f8      	ldr	r0, [r7, #12]
 80037e8:	f000 fdb5 	bl	8004356 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 80037ec:	68f8      	ldr	r0, [r7, #12]
 80037ee:	f000 f9be 	bl	8003b6e <I2C_ITSlaveSeqCplt>
 80037f2:	e033      	b.n	800385c <I2C_Slave_ISR_DMA+0x170>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	2210      	movs	r2, #16
 80037fa:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 80037fc:	e034      	b.n	8003868 <I2C_Slave_ISR_DMA+0x17c>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	2210      	movs	r2, #16
 8003804:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800380a:	f043 0204 	orr.w	r2, r3, #4
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003818:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800381a:	69bb      	ldr	r3, [r7, #24]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d003      	beq.n	8003828 <I2C_Slave_ISR_DMA+0x13c>
 8003820:	69bb      	ldr	r3, [r7, #24]
 8003822:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003826:	d11f      	bne.n	8003868 <I2C_Slave_ISR_DMA+0x17c>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003828:	7dfb      	ldrb	r3, [r7, #23]
 800382a:	2b21      	cmp	r3, #33	@ 0x21
 800382c:	d002      	beq.n	8003834 <I2C_Slave_ISR_DMA+0x148>
 800382e:	7dfb      	ldrb	r3, [r7, #23]
 8003830:	2b29      	cmp	r3, #41	@ 0x29
 8003832:	d103      	bne.n	800383c <I2C_Slave_ISR_DMA+0x150>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	2221      	movs	r2, #33	@ 0x21
 8003838:	631a      	str	r2, [r3, #48]	@ 0x30
 800383a:	e008      	b.n	800384e <I2C_Slave_ISR_DMA+0x162>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800383c:	7dfb      	ldrb	r3, [r7, #23]
 800383e:	2b22      	cmp	r3, #34	@ 0x22
 8003840:	d002      	beq.n	8003848 <I2C_Slave_ISR_DMA+0x15c>
 8003842:	7dfb      	ldrb	r3, [r7, #23]
 8003844:	2b2a      	cmp	r3, #42	@ 0x2a
 8003846:	d102      	bne.n	800384e <I2C_Slave_ISR_DMA+0x162>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	2222      	movs	r2, #34	@ 0x22
 800384c:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003852:	4619      	mov	r1, r3
 8003854:	68f8      	ldr	r0, [r7, #12]
 8003856:	f000 fc67 	bl	8004128 <I2C_ITError>
      if (treatdmanack == 1U)
 800385a:	e005      	b.n	8003868 <I2C_Slave_ISR_DMA+0x17c>
 800385c:	e004      	b.n	8003868 <I2C_Slave_ISR_DMA+0x17c>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	2210      	movs	r2, #16
 8003864:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8003866:	e00f      	b.n	8003888 <I2C_Slave_ISR_DMA+0x19c>
      if (treatdmanack == 1U)
 8003868:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800386a:	e00d      	b.n	8003888 <I2C_Slave_ISR_DMA+0x19c>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800386c:	68bb      	ldr	r3, [r7, #8]
 800386e:	f003 0308 	and.w	r3, r3, #8
 8003872:	2b00      	cmp	r3, #0
 8003874:	d008      	beq.n	8003888 <I2C_Slave_ISR_DMA+0x19c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800387c:	2b00      	cmp	r3, #0
 800387e:	d003      	beq.n	8003888 <I2C_Slave_ISR_DMA+0x19c>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8003880:	68b9      	ldr	r1, [r7, #8]
 8003882:	68f8      	ldr	r0, [r7, #12]
 8003884:	f000 f8b2 	bl	80039ec <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	2200      	movs	r2, #0
 800388c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8003890:	2300      	movs	r3, #0
}
 8003892:	4618      	mov	r0, r3
 8003894:	3720      	adds	r7, #32
 8003896:	46bd      	mov	sp, r7
 8003898:	bd80      	pop	{r7, pc}
	...

0800389c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b086      	sub	sp, #24
 80038a0:	af02      	add	r7, sp, #8
 80038a2:	60f8      	str	r0, [r7, #12]
 80038a4:	4608      	mov	r0, r1
 80038a6:	4611      	mov	r1, r2
 80038a8:	461a      	mov	r2, r3
 80038aa:	4603      	mov	r3, r0
 80038ac:	817b      	strh	r3, [r7, #10]
 80038ae:	460b      	mov	r3, r1
 80038b0:	813b      	strh	r3, [r7, #8]
 80038b2:	4613      	mov	r3, r2
 80038b4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80038b6:	88fb      	ldrh	r3, [r7, #6]
 80038b8:	b2da      	uxtb	r2, r3
 80038ba:	8979      	ldrh	r1, [r7, #10]
 80038bc:	4b20      	ldr	r3, [pc, #128]	@ (8003940 <I2C_RequestMemoryWrite+0xa4>)
 80038be:	9300      	str	r3, [sp, #0]
 80038c0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80038c4:	68f8      	ldr	r0, [r7, #12]
 80038c6:	f000 ffad 	bl	8004824 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80038ca:	69fa      	ldr	r2, [r7, #28]
 80038cc:	69b9      	ldr	r1, [r7, #24]
 80038ce:	68f8      	ldr	r0, [r7, #12]
 80038d0:	f000 fe3e 	bl	8004550 <I2C_WaitOnTXISFlagUntilTimeout>
 80038d4:	4603      	mov	r3, r0
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d001      	beq.n	80038de <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80038da:	2301      	movs	r3, #1
 80038dc:	e02c      	b.n	8003938 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80038de:	88fb      	ldrh	r3, [r7, #6]
 80038e0:	2b01      	cmp	r3, #1
 80038e2:	d105      	bne.n	80038f0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80038e4:	893b      	ldrh	r3, [r7, #8]
 80038e6:	b2da      	uxtb	r2, r3
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	629a      	str	r2, [r3, #40]	@ 0x28
 80038ee:	e015      	b.n	800391c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80038f0:	893b      	ldrh	r3, [r7, #8]
 80038f2:	0a1b      	lsrs	r3, r3, #8
 80038f4:	b29b      	uxth	r3, r3
 80038f6:	b2da      	uxtb	r2, r3
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80038fe:	69fa      	ldr	r2, [r7, #28]
 8003900:	69b9      	ldr	r1, [r7, #24]
 8003902:	68f8      	ldr	r0, [r7, #12]
 8003904:	f000 fe24 	bl	8004550 <I2C_WaitOnTXISFlagUntilTimeout>
 8003908:	4603      	mov	r3, r0
 800390a:	2b00      	cmp	r3, #0
 800390c:	d001      	beq.n	8003912 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	e012      	b.n	8003938 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003912:	893b      	ldrh	r3, [r7, #8]
 8003914:	b2da      	uxtb	r2, r3
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800391c:	69fb      	ldr	r3, [r7, #28]
 800391e:	9300      	str	r3, [sp, #0]
 8003920:	69bb      	ldr	r3, [r7, #24]
 8003922:	2200      	movs	r2, #0
 8003924:	2180      	movs	r1, #128	@ 0x80
 8003926:	68f8      	ldr	r0, [r7, #12]
 8003928:	f000 fdb9 	bl	800449e <I2C_WaitOnFlagUntilTimeout>
 800392c:	4603      	mov	r3, r0
 800392e:	2b00      	cmp	r3, #0
 8003930:	d001      	beq.n	8003936 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003932:	2301      	movs	r3, #1
 8003934:	e000      	b.n	8003938 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003936:	2300      	movs	r3, #0
}
 8003938:	4618      	mov	r0, r3
 800393a:	3710      	adds	r7, #16
 800393c:	46bd      	mov	sp, r7
 800393e:	bd80      	pop	{r7, pc}
 8003940:	80002000 	.word	0x80002000

08003944 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b086      	sub	sp, #24
 8003948:	af02      	add	r7, sp, #8
 800394a:	60f8      	str	r0, [r7, #12]
 800394c:	4608      	mov	r0, r1
 800394e:	4611      	mov	r1, r2
 8003950:	461a      	mov	r2, r3
 8003952:	4603      	mov	r3, r0
 8003954:	817b      	strh	r3, [r7, #10]
 8003956:	460b      	mov	r3, r1
 8003958:	813b      	strh	r3, [r7, #8]
 800395a:	4613      	mov	r3, r2
 800395c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800395e:	88fb      	ldrh	r3, [r7, #6]
 8003960:	b2da      	uxtb	r2, r3
 8003962:	8979      	ldrh	r1, [r7, #10]
 8003964:	4b20      	ldr	r3, [pc, #128]	@ (80039e8 <I2C_RequestMemoryRead+0xa4>)
 8003966:	9300      	str	r3, [sp, #0]
 8003968:	2300      	movs	r3, #0
 800396a:	68f8      	ldr	r0, [r7, #12]
 800396c:	f000 ff5a 	bl	8004824 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003970:	69fa      	ldr	r2, [r7, #28]
 8003972:	69b9      	ldr	r1, [r7, #24]
 8003974:	68f8      	ldr	r0, [r7, #12]
 8003976:	f000 fdeb 	bl	8004550 <I2C_WaitOnTXISFlagUntilTimeout>
 800397a:	4603      	mov	r3, r0
 800397c:	2b00      	cmp	r3, #0
 800397e:	d001      	beq.n	8003984 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003980:	2301      	movs	r3, #1
 8003982:	e02c      	b.n	80039de <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003984:	88fb      	ldrh	r3, [r7, #6]
 8003986:	2b01      	cmp	r3, #1
 8003988:	d105      	bne.n	8003996 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800398a:	893b      	ldrh	r3, [r7, #8]
 800398c:	b2da      	uxtb	r2, r3
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	629a      	str	r2, [r3, #40]	@ 0x28
 8003994:	e015      	b.n	80039c2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003996:	893b      	ldrh	r3, [r7, #8]
 8003998:	0a1b      	lsrs	r3, r3, #8
 800399a:	b29b      	uxth	r3, r3
 800399c:	b2da      	uxtb	r2, r3
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80039a4:	69fa      	ldr	r2, [r7, #28]
 80039a6:	69b9      	ldr	r1, [r7, #24]
 80039a8:	68f8      	ldr	r0, [r7, #12]
 80039aa:	f000 fdd1 	bl	8004550 <I2C_WaitOnTXISFlagUntilTimeout>
 80039ae:	4603      	mov	r3, r0
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d001      	beq.n	80039b8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80039b4:	2301      	movs	r3, #1
 80039b6:	e012      	b.n	80039de <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80039b8:	893b      	ldrh	r3, [r7, #8]
 80039ba:	b2da      	uxtb	r2, r3
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80039c2:	69fb      	ldr	r3, [r7, #28]
 80039c4:	9300      	str	r3, [sp, #0]
 80039c6:	69bb      	ldr	r3, [r7, #24]
 80039c8:	2200      	movs	r2, #0
 80039ca:	2140      	movs	r1, #64	@ 0x40
 80039cc:	68f8      	ldr	r0, [r7, #12]
 80039ce:	f000 fd66 	bl	800449e <I2C_WaitOnFlagUntilTimeout>
 80039d2:	4603      	mov	r3, r0
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d001      	beq.n	80039dc <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80039d8:	2301      	movs	r3, #1
 80039da:	e000      	b.n	80039de <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80039dc:	2300      	movs	r3, #0
}
 80039de:	4618      	mov	r0, r3
 80039e0:	3710      	adds	r7, #16
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd80      	pop	{r7, pc}
 80039e6:	bf00      	nop
 80039e8:	80002000 	.word	0x80002000

080039ec <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b084      	sub	sp, #16
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
 80039f4:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80039fc:	b2db      	uxtb	r3, r3
 80039fe:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003a02:	2b28      	cmp	r3, #40	@ 0x28
 8003a04:	d16a      	bne.n	8003adc <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	699b      	ldr	r3, [r3, #24]
 8003a0c:	0c1b      	lsrs	r3, r3, #16
 8003a0e:	b2db      	uxtb	r3, r3
 8003a10:	f003 0301 	and.w	r3, r3, #1
 8003a14:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	699b      	ldr	r3, [r3, #24]
 8003a1c:	0c1b      	lsrs	r3, r3, #16
 8003a1e:	b29b      	uxth	r3, r3
 8003a20:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8003a24:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	689b      	ldr	r3, [r3, #8]
 8003a2c:	b29b      	uxth	r3, r3
 8003a2e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a32:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	68db      	ldr	r3, [r3, #12]
 8003a3a:	b29b      	uxth	r3, r3
 8003a3c:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8003a40:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	68db      	ldr	r3, [r3, #12]
 8003a46:	2b02      	cmp	r3, #2
 8003a48:	d138      	bne.n	8003abc <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8003a4a:	897b      	ldrh	r3, [r7, #10]
 8003a4c:	09db      	lsrs	r3, r3, #7
 8003a4e:	b29a      	uxth	r2, r3
 8003a50:	89bb      	ldrh	r3, [r7, #12]
 8003a52:	4053      	eors	r3, r2
 8003a54:	b29b      	uxth	r3, r3
 8003a56:	f003 0306 	and.w	r3, r3, #6
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d11c      	bne.n	8003a98 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8003a5e:	897b      	ldrh	r3, [r7, #10]
 8003a60:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a66:	1c5a      	adds	r2, r3, #1
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a70:	2b02      	cmp	r3, #2
 8003a72:	d13b      	bne.n	8003aec <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2200      	movs	r2, #0
 8003a78:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	2208      	movs	r2, #8
 8003a80:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2200      	movs	r2, #0
 8003a86:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003a8a:	89ba      	ldrh	r2, [r7, #12]
 8003a8c:	7bfb      	ldrb	r3, [r7, #15]
 8003a8e:	4619      	mov	r1, r3
 8003a90:	6878      	ldr	r0, [r7, #4]
 8003a92:	f7ff faea 	bl	800306a <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003a96:	e029      	b.n	8003aec <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8003a98:	893b      	ldrh	r3, [r7, #8]
 8003a9a:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003a9c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003aa0:	6878      	ldr	r0, [r7, #4]
 8003aa2:	f000 ff75 	bl	8004990 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003aae:	89ba      	ldrh	r2, [r7, #12]
 8003ab0:	7bfb      	ldrb	r3, [r7, #15]
 8003ab2:	4619      	mov	r1, r3
 8003ab4:	6878      	ldr	r0, [r7, #4]
 8003ab6:	f7ff fad8 	bl	800306a <HAL_I2C_AddrCallback>
}
 8003aba:	e017      	b.n	8003aec <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003abc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003ac0:	6878      	ldr	r0, [r7, #4]
 8003ac2:	f000 ff65 	bl	8004990 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003ace:	89ba      	ldrh	r2, [r7, #12]
 8003ad0:	7bfb      	ldrb	r3, [r7, #15]
 8003ad2:	4619      	mov	r1, r3
 8003ad4:	6878      	ldr	r0, [r7, #4]
 8003ad6:	f7ff fac8 	bl	800306a <HAL_I2C_AddrCallback>
}
 8003ada:	e007      	b.n	8003aec <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	2208      	movs	r2, #8
 8003ae2:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8003aec:	bf00      	nop
 8003aee:	3710      	adds	r7, #16
 8003af0:	46bd      	mov	sp, r7
 8003af2:	bd80      	pop	{r7, pc}

08003af4 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b082      	sub	sp, #8
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2200      	movs	r2, #0
 8003b00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b0a:	b2db      	uxtb	r3, r3
 8003b0c:	2b21      	cmp	r3, #33	@ 0x21
 8003b0e:	d115      	bne.n	8003b3c <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2220      	movs	r2, #32
 8003b14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2211      	movs	r2, #17
 8003b1c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2200      	movs	r2, #0
 8003b22:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003b24:	2101      	movs	r1, #1
 8003b26:	6878      	ldr	r0, [r7, #4]
 8003b28:	f000 ff32 	bl	8004990 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2200      	movs	r2, #0
 8003b30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8003b34:	6878      	ldr	r0, [r7, #4]
 8003b36:	f7ff fa70 	bl	800301a <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003b3a:	e014      	b.n	8003b66 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2220      	movs	r2, #32
 8003b40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2212      	movs	r2, #18
 8003b48:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003b50:	2102      	movs	r1, #2
 8003b52:	6878      	ldr	r0, [r7, #4]
 8003b54:	f000 ff1c 	bl	8004990 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8003b60:	6878      	ldr	r0, [r7, #4]
 8003b62:	f7ff fa64 	bl	800302e <HAL_I2C_MasterRxCpltCallback>
}
 8003b66:	bf00      	nop
 8003b68:	3708      	adds	r7, #8
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}

08003b6e <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8003b6e:	b580      	push	{r7, lr}
 8003b70:	b084      	sub	sp, #16
 8003b72:	af00      	add	r7, sp, #0
 8003b74:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2200      	movs	r2, #0
 8003b82:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d008      	beq.n	8003ba2 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	681a      	ldr	r2, [r3, #0]
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003b9e:	601a      	str	r2, [r3, #0]
 8003ba0:	e00c      	b.n	8003bbc <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d007      	beq.n	8003bbc <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	681a      	ldr	r2, [r3, #0]
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003bba:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003bc2:	b2db      	uxtb	r3, r3
 8003bc4:	2b29      	cmp	r3, #41	@ 0x29
 8003bc6:	d112      	bne.n	8003bee <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2228      	movs	r2, #40	@ 0x28
 8003bcc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2221      	movs	r2, #33	@ 0x21
 8003bd4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003bd6:	2101      	movs	r1, #1
 8003bd8:	6878      	ldr	r0, [r7, #4]
 8003bda:	f000 fed9 	bl	8004990 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2200      	movs	r2, #0
 8003be2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003be6:	6878      	ldr	r0, [r7, #4]
 8003be8:	f7ff fa2b 	bl	8003042 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003bec:	e017      	b.n	8003c1e <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003bf4:	b2db      	uxtb	r3, r3
 8003bf6:	2b2a      	cmp	r3, #42	@ 0x2a
 8003bf8:	d111      	bne.n	8003c1e <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2228      	movs	r2, #40	@ 0x28
 8003bfe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2222      	movs	r2, #34	@ 0x22
 8003c06:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003c08:	2102      	movs	r1, #2
 8003c0a:	6878      	ldr	r0, [r7, #4]
 8003c0c:	f000 fec0 	bl	8004990 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2200      	movs	r2, #0
 8003c14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003c18:	6878      	ldr	r0, [r7, #4]
 8003c1a:	f7ff fa1c 	bl	8003056 <HAL_I2C_SlaveRxCpltCallback>
}
 8003c1e:	bf00      	nop
 8003c20:	3710      	adds	r7, #16
 8003c22:	46bd      	mov	sp, r7
 8003c24:	bd80      	pop	{r7, pc}
	...

08003c28 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b086      	sub	sp, #24
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
 8003c30:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	2220      	movs	r2, #32
 8003c3c:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c44:	b2db      	uxtb	r3, r3
 8003c46:	2b21      	cmp	r3, #33	@ 0x21
 8003c48:	d107      	bne.n	8003c5a <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003c4a:	2101      	movs	r1, #1
 8003c4c:	6878      	ldr	r0, [r7, #4]
 8003c4e:	f000 fe9f 	bl	8004990 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2211      	movs	r2, #17
 8003c56:	631a      	str	r2, [r3, #48]	@ 0x30
 8003c58:	e00c      	b.n	8003c74 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c60:	b2db      	uxtb	r3, r3
 8003c62:	2b22      	cmp	r3, #34	@ 0x22
 8003c64:	d106      	bne.n	8003c74 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003c66:	2102      	movs	r1, #2
 8003c68:	6878      	ldr	r0, [r7, #4]
 8003c6a:	f000 fe91 	bl	8004990 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2212      	movs	r2, #18
 8003c72:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	6859      	ldr	r1, [r3, #4]
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681a      	ldr	r2, [r3, #0]
 8003c7e:	4b4c      	ldr	r3, [pc, #304]	@ (8003db0 <I2C_ITMasterCplt+0x188>)
 8003c80:	400b      	ands	r3, r1
 8003c82:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2200      	movs	r2, #0
 8003c88:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	4a49      	ldr	r2, [pc, #292]	@ (8003db4 <I2C_ITMasterCplt+0x18c>)
 8003c8e:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8003c90:	697b      	ldr	r3, [r7, #20]
 8003c92:	f003 0310 	and.w	r3, r3, #16
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d009      	beq.n	8003cae <I2C_ITMasterCplt+0x86>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	2210      	movs	r2, #16
 8003ca0:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ca6:	f043 0204 	orr.w	r2, r3, #4
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003cb4:	b2db      	uxtb	r3, r3
 8003cb6:	2b60      	cmp	r3, #96	@ 0x60
 8003cb8:	d10a      	bne.n	8003cd0 <I2C_ITMasterCplt+0xa8>
 8003cba:	697b      	ldr	r3, [r7, #20]
 8003cbc:	f003 0304 	and.w	r3, r3, #4
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d005      	beq.n	8003cd0 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cca:	b2db      	uxtb	r3, r3
 8003ccc:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8003cce:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8003cd0:	6878      	ldr	r0, [r7, #4]
 8003cd2:	f000 fb40 	bl	8004356 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cda:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ce2:	b2db      	uxtb	r3, r3
 8003ce4:	2b60      	cmp	r3, #96	@ 0x60
 8003ce6:	d002      	beq.n	8003cee <I2C_ITMasterCplt+0xc6>
 8003ce8:	693b      	ldr	r3, [r7, #16]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d006      	beq.n	8003cfc <I2C_ITMasterCplt+0xd4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cf2:	4619      	mov	r1, r3
 8003cf4:	6878      	ldr	r0, [r7, #4]
 8003cf6:	f000 fa17 	bl	8004128 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003cfa:	e054      	b.n	8003da6 <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d02:	b2db      	uxtb	r3, r3
 8003d04:	2b21      	cmp	r3, #33	@ 0x21
 8003d06:	d124      	bne.n	8003d52 <I2C_ITMasterCplt+0x12a>
    hi2c->State = HAL_I2C_STATE_READY;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2220      	movs	r2, #32
 8003d0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2200      	movs	r2, #0
 8003d14:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003d1c:	b2db      	uxtb	r3, r3
 8003d1e:	2b40      	cmp	r3, #64	@ 0x40
 8003d20:	d10b      	bne.n	8003d3a <I2C_ITMasterCplt+0x112>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2200      	movs	r2, #0
 8003d26:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003d32:	6878      	ldr	r0, [r7, #4]
 8003d34:	f7ff f9b1 	bl	800309a <HAL_I2C_MemTxCpltCallback>
}
 8003d38:	e035      	b.n	8003da6 <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2200      	movs	r2, #0
 8003d46:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003d4a:	6878      	ldr	r0, [r7, #4]
 8003d4c:	f7ff f965 	bl	800301a <HAL_I2C_MasterTxCpltCallback>
}
 8003d50:	e029      	b.n	8003da6 <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d58:	b2db      	uxtb	r3, r3
 8003d5a:	2b22      	cmp	r3, #34	@ 0x22
 8003d5c:	d123      	bne.n	8003da6 <I2C_ITMasterCplt+0x17e>
    hi2c->State = HAL_I2C_STATE_READY;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2220      	movs	r2, #32
 8003d62:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003d72:	b2db      	uxtb	r3, r3
 8003d74:	2b40      	cmp	r3, #64	@ 0x40
 8003d76:	d10b      	bne.n	8003d90 <I2C_ITMasterCplt+0x168>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2200      	movs	r2, #0
 8003d84:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003d88:	6878      	ldr	r0, [r7, #4]
 8003d8a:	f7fd fa73 	bl	8001274 <HAL_I2C_MemRxCpltCallback>
}
 8003d8e:	e00a      	b.n	8003da6 <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2200      	movs	r2, #0
 8003d94:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003da0:	6878      	ldr	r0, [r7, #4]
 8003da2:	f7ff f944 	bl	800302e <HAL_I2C_MasterRxCpltCallback>
}
 8003da6:	bf00      	nop
 8003da8:	3718      	adds	r7, #24
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bd80      	pop	{r7, pc}
 8003dae:	bf00      	nop
 8003db0:	fe00e800 	.word	0xfe00e800
 8003db4:	ffff0000 	.word	0xffff0000

08003db8 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b086      	sub	sp, #24
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
 8003dc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dd2:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003dda:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	2220      	movs	r2, #32
 8003de2:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003de4:	7afb      	ldrb	r3, [r7, #11]
 8003de6:	2b21      	cmp	r3, #33	@ 0x21
 8003de8:	d002      	beq.n	8003df0 <I2C_ITSlaveCplt+0x38>
 8003dea:	7afb      	ldrb	r3, [r7, #11]
 8003dec:	2b29      	cmp	r3, #41	@ 0x29
 8003dee:	d108      	bne.n	8003e02 <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8003df0:	f248 0101 	movw	r1, #32769	@ 0x8001
 8003df4:	6878      	ldr	r0, [r7, #4]
 8003df6:	f000 fdcb 	bl	8004990 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2221      	movs	r2, #33	@ 0x21
 8003dfe:	631a      	str	r2, [r3, #48]	@ 0x30
 8003e00:	e019      	b.n	8003e36 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003e02:	7afb      	ldrb	r3, [r7, #11]
 8003e04:	2b22      	cmp	r3, #34	@ 0x22
 8003e06:	d002      	beq.n	8003e0e <I2C_ITSlaveCplt+0x56>
 8003e08:	7afb      	ldrb	r3, [r7, #11]
 8003e0a:	2b2a      	cmp	r3, #42	@ 0x2a
 8003e0c:	d108      	bne.n	8003e20 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8003e0e:	f248 0102 	movw	r1, #32770	@ 0x8002
 8003e12:	6878      	ldr	r0, [r7, #4]
 8003e14:	f000 fdbc 	bl	8004990 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2222      	movs	r2, #34	@ 0x22
 8003e1c:	631a      	str	r2, [r3, #48]	@ 0x30
 8003e1e:	e00a      	b.n	8003e36 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8003e20:	7afb      	ldrb	r3, [r7, #11]
 8003e22:	2b28      	cmp	r3, #40	@ 0x28
 8003e24:	d107      	bne.n	8003e36 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8003e26:	f248 0103 	movw	r1, #32771	@ 0x8003
 8003e2a:	6878      	ldr	r0, [r7, #4]
 8003e2c:	f000 fdb0 	bl	8004990 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2200      	movs	r2, #0
 8003e34:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	685a      	ldr	r2, [r3, #4]
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003e44:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	6859      	ldr	r1, [r3, #4]
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681a      	ldr	r2, [r3, #0]
 8003e50:	4b89      	ldr	r3, [pc, #548]	@ (8004078 <I2C_ITSlaveCplt+0x2c0>)
 8003e52:	400b      	ands	r3, r1
 8003e54:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8003e56:	6878      	ldr	r0, [r7, #4]
 8003e58:	f000 fa7d 	bl	8004356 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003e5c:	693b      	ldr	r3, [r7, #16]
 8003e5e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d013      	beq.n	8003e8e <I2C_ITSlaveCplt+0xd6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	681a      	ldr	r2, [r3, #0]
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003e74:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d01f      	beq.n	8003ebe <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	b29a      	uxth	r2, r3
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003e8c:	e017      	b.n	8003ebe <I2C_ITSlaveCplt+0x106>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003e8e:	693b      	ldr	r3, [r7, #16]
 8003e90:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d012      	beq.n	8003ebe <I2C_ITSlaveCplt+0x106>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	681a      	ldr	r2, [r3, #0]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003ea6:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d006      	beq.n	8003ebe <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	b29a      	uxth	r2, r3
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8003ebe:	697b      	ldr	r3, [r7, #20]
 8003ec0:	f003 0304 	and.w	r3, r3, #4
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d020      	beq.n	8003f0a <I2C_ITSlaveCplt+0x152>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8003ec8:	697b      	ldr	r3, [r7, #20]
 8003eca:	f023 0304 	bic.w	r3, r3, #4
 8003ece:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eda:	b2d2      	uxtb	r2, r2
 8003edc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ee2:	1c5a      	adds	r2, r3, #1
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d00c      	beq.n	8003f0a <I2C_ITSlaveCplt+0x152>
    {
      hi2c->XferSize--;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ef4:	3b01      	subs	r3, #1
 8003ef6:	b29a      	uxth	r2, r3
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f00:	b29b      	uxth	r3, r3
 8003f02:	3b01      	subs	r3, #1
 8003f04:	b29a      	uxth	r2, r3
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f0e:	b29b      	uxth	r3, r3
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d005      	beq.n	8003f20 <I2C_ITSlaveCplt+0x168>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f18:	f043 0204 	orr.w	r2, r3, #4
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003f20:	697b      	ldr	r3, [r7, #20]
 8003f22:	f003 0310 	and.w	r3, r3, #16
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d049      	beq.n	8003fbe <I2C_ITSlaveCplt+0x206>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8003f2a:	693b      	ldr	r3, [r7, #16]
 8003f2c:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d044      	beq.n	8003fbe <I2C_ITSlaveCplt+0x206>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f38:	b29b      	uxth	r3, r3
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d128      	bne.n	8003f90 <I2C_ITSlaveCplt+0x1d8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f44:	b2db      	uxtb	r3, r3
 8003f46:	2b28      	cmp	r3, #40	@ 0x28
 8003f48:	d108      	bne.n	8003f5c <I2C_ITSlaveCplt+0x1a4>
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003f50:	d104      	bne.n	8003f5c <I2C_ITSlaveCplt+0x1a4>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8003f52:	6979      	ldr	r1, [r7, #20]
 8003f54:	6878      	ldr	r0, [r7, #4]
 8003f56:	f000 f893 	bl	8004080 <I2C_ITListenCplt>
 8003f5a:	e030      	b.n	8003fbe <I2C_ITSlaveCplt+0x206>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f62:	b2db      	uxtb	r3, r3
 8003f64:	2b29      	cmp	r3, #41	@ 0x29
 8003f66:	d10e      	bne.n	8003f86 <I2C_ITSlaveCplt+0x1ce>
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003f6e:	d00a      	beq.n	8003f86 <I2C_ITSlaveCplt+0x1ce>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	2210      	movs	r2, #16
 8003f76:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8003f78:	6878      	ldr	r0, [r7, #4]
 8003f7a:	f000 f9ec 	bl	8004356 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003f7e:	6878      	ldr	r0, [r7, #4]
 8003f80:	f7ff fdf5 	bl	8003b6e <I2C_ITSlaveSeqCplt>
 8003f84:	e01b      	b.n	8003fbe <I2C_ITSlaveCplt+0x206>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	2210      	movs	r2, #16
 8003f8c:	61da      	str	r2, [r3, #28]
 8003f8e:	e016      	b.n	8003fbe <I2C_ITSlaveCplt+0x206>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	2210      	movs	r2, #16
 8003f96:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f9c:	f043 0204 	orr.w	r2, r3, #4
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d003      	beq.n	8003fb2 <I2C_ITSlaveCplt+0x1fa>
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003fb0:	d105      	bne.n	8003fbe <I2C_ITSlaveCplt+0x206>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fb6:	4619      	mov	r1, r3
 8003fb8:	6878      	ldr	r0, [r7, #4]
 8003fba:	f000 f8b5 	bl	8004128 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d010      	beq.n	8003ff6 <I2C_ITSlaveCplt+0x23e>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fd8:	4619      	mov	r1, r3
 8003fda:	6878      	ldr	r0, [r7, #4]
 8003fdc:	f000 f8a4 	bl	8004128 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003fe6:	b2db      	uxtb	r3, r3
 8003fe8:	2b28      	cmp	r3, #40	@ 0x28
 8003fea:	d141      	bne.n	8004070 <I2C_ITSlaveCplt+0x2b8>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8003fec:	6979      	ldr	r1, [r7, #20]
 8003fee:	6878      	ldr	r0, [r7, #4]
 8003ff0:	f000 f846 	bl	8004080 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003ff4:	e03c      	b.n	8004070 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ffa:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003ffe:	d014      	beq.n	800402a <I2C_ITSlaveCplt+0x272>
    I2C_ITSlaveSeqCplt(hi2c);
 8004000:	6878      	ldr	r0, [r7, #4]
 8004002:	f7ff fdb4 	bl	8003b6e <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	4a1c      	ldr	r2, [pc, #112]	@ (800407c <I2C_ITSlaveCplt+0x2c4>)
 800400a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2220      	movs	r2, #32
 8004010:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2200      	movs	r2, #0
 8004018:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2200      	movs	r2, #0
 800401e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8004022:	6878      	ldr	r0, [r7, #4]
 8004024:	f7ff f82f 	bl	8003086 <HAL_I2C_ListenCpltCallback>
}
 8004028:	e022      	b.n	8004070 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004030:	b2db      	uxtb	r3, r3
 8004032:	2b22      	cmp	r3, #34	@ 0x22
 8004034:	d10e      	bne.n	8004054 <I2C_ITSlaveCplt+0x29c>
    hi2c->State = HAL_I2C_STATE_READY;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2220      	movs	r2, #32
 800403a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2200      	movs	r2, #0
 8004042:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2200      	movs	r2, #0
 8004048:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800404c:	6878      	ldr	r0, [r7, #4]
 800404e:	f7ff f802 	bl	8003056 <HAL_I2C_SlaveRxCpltCallback>
}
 8004052:	e00d      	b.n	8004070 <I2C_ITSlaveCplt+0x2b8>
    hi2c->State = HAL_I2C_STATE_READY;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2220      	movs	r2, #32
 8004058:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2200      	movs	r2, #0
 8004060:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2200      	movs	r2, #0
 8004066:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800406a:	6878      	ldr	r0, [r7, #4]
 800406c:	f7fe ffe9 	bl	8003042 <HAL_I2C_SlaveTxCpltCallback>
}
 8004070:	bf00      	nop
 8004072:	3718      	adds	r7, #24
 8004074:	46bd      	mov	sp, r7
 8004076:	bd80      	pop	{r7, pc}
 8004078:	fe00e800 	.word	0xfe00e800
 800407c:	ffff0000 	.word	0xffff0000

08004080 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b082      	sub	sp, #8
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
 8004088:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	4a25      	ldr	r2, [pc, #148]	@ (8004124 <I2C_ITListenCplt+0xa4>)
 800408e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2200      	movs	r2, #0
 8004094:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2220      	movs	r2, #32
 800409a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2200      	movs	r2, #0
 80040a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2200      	movs	r2, #0
 80040aa:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	f003 0304 	and.w	r3, r3, #4
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d022      	beq.n	80040fc <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040c0:	b2d2      	uxtb	r2, r2
 80040c2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040c8:	1c5a      	adds	r2, r3, #1
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d012      	beq.n	80040fc <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040da:	3b01      	subs	r3, #1
 80040dc:	b29a      	uxth	r2, r3
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040e6:	b29b      	uxth	r3, r3
 80040e8:	3b01      	subs	r3, #1
 80040ea:	b29a      	uxth	r2, r3
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040f4:	f043 0204 	orr.w	r2, r3, #4
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80040fc:	f248 0103 	movw	r1, #32771	@ 0x8003
 8004100:	6878      	ldr	r0, [r7, #4]
 8004102:	f000 fc45 	bl	8004990 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	2210      	movs	r2, #16
 800410c:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2200      	movs	r2, #0
 8004112:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8004116:	6878      	ldr	r0, [r7, #4]
 8004118:	f7fe ffb5 	bl	8003086 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800411c:	bf00      	nop
 800411e:	3708      	adds	r7, #8
 8004120:	46bd      	mov	sp, r7
 8004122:	bd80      	pop	{r7, pc}
 8004124:	ffff0000 	.word	0xffff0000

08004128 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b084      	sub	sp, #16
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
 8004130:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004138:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2200      	movs	r2, #0
 800413e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	4a6d      	ldr	r2, [pc, #436]	@ (80042fc <I2C_ITError+0x1d4>)
 8004146:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2200      	movs	r2, #0
 800414c:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	431a      	orrs	r2, r3
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800415a:	7bfb      	ldrb	r3, [r7, #15]
 800415c:	2b28      	cmp	r3, #40	@ 0x28
 800415e:	d005      	beq.n	800416c <I2C_ITError+0x44>
 8004160:	7bfb      	ldrb	r3, [r7, #15]
 8004162:	2b29      	cmp	r3, #41	@ 0x29
 8004164:	d002      	beq.n	800416c <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8004166:	7bfb      	ldrb	r3, [r7, #15]
 8004168:	2b2a      	cmp	r3, #42	@ 0x2a
 800416a:	d10b      	bne.n	8004184 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800416c:	2103      	movs	r1, #3
 800416e:	6878      	ldr	r0, [r7, #4]
 8004170:	f000 fc0e 	bl	8004990 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2228      	movs	r2, #40	@ 0x28
 8004178:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	4a60      	ldr	r2, [pc, #384]	@ (8004300 <I2C_ITError+0x1d8>)
 8004180:	635a      	str	r2, [r3, #52]	@ 0x34
 8004182:	e030      	b.n	80041e6 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004184:	f248 0103 	movw	r1, #32771	@ 0x8003
 8004188:	6878      	ldr	r0, [r7, #4]
 800418a:	f000 fc01 	bl	8004990 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800418e:	6878      	ldr	r0, [r7, #4]
 8004190:	f000 f8e1 	bl	8004356 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800419a:	b2db      	uxtb	r3, r3
 800419c:	2b60      	cmp	r3, #96	@ 0x60
 800419e:	d01f      	beq.n	80041e0 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2220      	movs	r2, #32
 80041a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	699b      	ldr	r3, [r3, #24]
 80041ae:	f003 0320 	and.w	r3, r3, #32
 80041b2:	2b20      	cmp	r3, #32
 80041b4:	d114      	bne.n	80041e0 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	699b      	ldr	r3, [r3, #24]
 80041bc:	f003 0310 	and.w	r3, r3, #16
 80041c0:	2b10      	cmp	r3, #16
 80041c2:	d109      	bne.n	80041d8 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	2210      	movs	r2, #16
 80041ca:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041d0:	f043 0204 	orr.w	r2, r3, #4
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	2220      	movs	r2, #32
 80041de:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2200      	movs	r2, #0
 80041e4:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041ea:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d039      	beq.n	8004268 <I2C_ITError+0x140>
 80041f4:	68bb      	ldr	r3, [r7, #8]
 80041f6:	2b11      	cmp	r3, #17
 80041f8:	d002      	beq.n	8004200 <I2C_ITError+0xd8>
 80041fa:	68bb      	ldr	r3, [r7, #8]
 80041fc:	2b21      	cmp	r3, #33	@ 0x21
 80041fe:	d133      	bne.n	8004268 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800420a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800420e:	d107      	bne.n	8004220 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	681a      	ldr	r2, [r3, #0]
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800421e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004224:	4618      	mov	r0, r3
 8004226:	f7fe f88a 	bl	800233e <HAL_DMA_GetState>
 800422a:	4603      	mov	r3, r0
 800422c:	2b01      	cmp	r3, #1
 800422e:	d017      	beq.n	8004260 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004234:	4a33      	ldr	r2, [pc, #204]	@ (8004304 <I2C_ITError+0x1dc>)
 8004236:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2200      	movs	r2, #0
 800423c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004244:	4618      	mov	r0, r3
 8004246:	f7fd ff64 	bl	8002112 <HAL_DMA_Abort_IT>
 800424a:	4603      	mov	r3, r0
 800424c:	2b00      	cmp	r3, #0
 800424e:	d04d      	beq.n	80042ec <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004254:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004256:	687a      	ldr	r2, [r7, #4]
 8004258:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800425a:	4610      	mov	r0, r2
 800425c:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800425e:	e045      	b.n	80042ec <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004260:	6878      	ldr	r0, [r7, #4]
 8004262:	f000 f851 	bl	8004308 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004266:	e041      	b.n	80042ec <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800426c:	2b00      	cmp	r3, #0
 800426e:	d039      	beq.n	80042e4 <I2C_ITError+0x1bc>
 8004270:	68bb      	ldr	r3, [r7, #8]
 8004272:	2b12      	cmp	r3, #18
 8004274:	d002      	beq.n	800427c <I2C_ITError+0x154>
 8004276:	68bb      	ldr	r3, [r7, #8]
 8004278:	2b22      	cmp	r3, #34	@ 0x22
 800427a:	d133      	bne.n	80042e4 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004286:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800428a:	d107      	bne.n	800429c <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	681a      	ldr	r2, [r3, #0]
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800429a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042a0:	4618      	mov	r0, r3
 80042a2:	f7fe f84c 	bl	800233e <HAL_DMA_GetState>
 80042a6:	4603      	mov	r3, r0
 80042a8:	2b01      	cmp	r3, #1
 80042aa:	d017      	beq.n	80042dc <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042b0:	4a14      	ldr	r2, [pc, #80]	@ (8004304 <I2C_ITError+0x1dc>)
 80042b2:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2200      	movs	r2, #0
 80042b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042c0:	4618      	mov	r0, r3
 80042c2:	f7fd ff26 	bl	8002112 <HAL_DMA_Abort_IT>
 80042c6:	4603      	mov	r3, r0
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d011      	beq.n	80042f0 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042d2:	687a      	ldr	r2, [r7, #4]
 80042d4:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80042d6:	4610      	mov	r0, r2
 80042d8:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80042da:	e009      	b.n	80042f0 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80042dc:	6878      	ldr	r0, [r7, #4]
 80042de:	f000 f813 	bl	8004308 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80042e2:	e005      	b.n	80042f0 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80042e4:	6878      	ldr	r0, [r7, #4]
 80042e6:	f000 f80f 	bl	8004308 <I2C_TreatErrorCallback>
  }
}
 80042ea:	e002      	b.n	80042f2 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80042ec:	bf00      	nop
 80042ee:	e000      	b.n	80042f2 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80042f0:	bf00      	nop
}
 80042f2:	bf00      	nop
 80042f4:	3710      	adds	r7, #16
 80042f6:	46bd      	mov	sp, r7
 80042f8:	bd80      	pop	{r7, pc}
 80042fa:	bf00      	nop
 80042fc:	ffff0000 	.word	0xffff0000
 8004300:	080030d7 	.word	0x080030d7
 8004304:	08004463 	.word	0x08004463

08004308 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b082      	sub	sp, #8
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004316:	b2db      	uxtb	r3, r3
 8004318:	2b60      	cmp	r3, #96	@ 0x60
 800431a:	d10e      	bne.n	800433a <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2220      	movs	r2, #32
 8004320:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2200      	movs	r2, #0
 8004328:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2200      	movs	r2, #0
 800432e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004332:	6878      	ldr	r0, [r7, #4]
 8004334:	f7fe fec5 	bl	80030c2 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004338:	e009      	b.n	800434e <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2200      	movs	r2, #0
 800433e:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2200      	movs	r2, #0
 8004344:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8004348:	6878      	ldr	r0, [r7, #4]
 800434a:	f7fe feb0 	bl	80030ae <HAL_I2C_ErrorCallback>
}
 800434e:	bf00      	nop
 8004350:	3708      	adds	r7, #8
 8004352:	46bd      	mov	sp, r7
 8004354:	bd80      	pop	{r7, pc}

08004356 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004356:	b480      	push	{r7}
 8004358:	b083      	sub	sp, #12
 800435a:	af00      	add	r7, sp, #0
 800435c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	699b      	ldr	r3, [r3, #24]
 8004364:	f003 0302 	and.w	r3, r3, #2
 8004368:	2b02      	cmp	r3, #2
 800436a:	d103      	bne.n	8004374 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	2200      	movs	r2, #0
 8004372:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	699b      	ldr	r3, [r3, #24]
 800437a:	f003 0301 	and.w	r3, r3, #1
 800437e:	2b01      	cmp	r3, #1
 8004380:	d007      	beq.n	8004392 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	699a      	ldr	r2, [r3, #24]
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f042 0201 	orr.w	r2, r2, #1
 8004390:	619a      	str	r2, [r3, #24]
  }
}
 8004392:	bf00      	nop
 8004394:	370c      	adds	r7, #12
 8004396:	46bd      	mov	sp, r7
 8004398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439c:	4770      	bx	lr

0800439e <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800439e:	b580      	push	{r7, lr}
 80043a0:	b084      	sub	sp, #16
 80043a2:	af00      	add	r7, sp, #0
 80043a4:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043aa:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	681a      	ldr	r2, [r3, #0]
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80043ba:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043c0:	b29b      	uxth	r3, r3
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d104      	bne.n	80043d0 <I2C_DMAMasterReceiveCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80043c6:	2120      	movs	r1, #32
 80043c8:	68f8      	ldr	r0, [r7, #12]
 80043ca:	f000 fa5d 	bl	8004888 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 80043ce:	e02d      	b.n	800442c <I2C_DMAMasterReceiveCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043d4:	68fa      	ldr	r2, [r7, #12]
 80043d6:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 80043d8:	441a      	add	r2, r3
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043e2:	b29b      	uxth	r3, r3
 80043e4:	2bff      	cmp	r3, #255	@ 0xff
 80043e6:	d903      	bls.n	80043f0 <I2C_DMAMasterReceiveCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	22ff      	movs	r2, #255	@ 0xff
 80043ec:	851a      	strh	r2, [r3, #40]	@ 0x28
 80043ee:	e004      	b.n	80043fa <I2C_DMAMasterReceiveCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043f4:	b29a      	uxth	r2, r3
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	3324      	adds	r3, #36	@ 0x24
 8004404:	4619      	mov	r1, r3
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800440a:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8004410:	f7fd fe04 	bl	800201c <HAL_DMA_Start_IT>
 8004414:	4603      	mov	r3, r0
 8004416:	2b00      	cmp	r3, #0
 8004418:	d004      	beq.n	8004424 <I2C_DMAMasterReceiveCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800441a:	2110      	movs	r1, #16
 800441c:	68f8      	ldr	r0, [r7, #12]
 800441e:	f7ff fe83 	bl	8004128 <I2C_ITError>
}
 8004422:	e003      	b.n	800442c <I2C_DMAMasterReceiveCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8004424:	2140      	movs	r1, #64	@ 0x40
 8004426:	68f8      	ldr	r0, [r7, #12]
 8004428:	f000 fa2e 	bl	8004888 <I2C_Enable_IRQ>
}
 800442c:	bf00      	nop
 800442e:	3710      	adds	r7, #16
 8004430:	46bd      	mov	sp, r7
 8004432:	bd80      	pop	{r7, pc}

08004434 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b084      	sub	sp, #16
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004440:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	685a      	ldr	r2, [r3, #4]
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004450:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8004452:	2110      	movs	r1, #16
 8004454:	68f8      	ldr	r0, [r7, #12]
 8004456:	f7ff fe67 	bl	8004128 <I2C_ITError>
}
 800445a:	bf00      	nop
 800445c:	3710      	adds	r7, #16
 800445e:	46bd      	mov	sp, r7
 8004460:	bd80      	pop	{r7, pc}

08004462 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004462:	b580      	push	{r7, lr}
 8004464:	b084      	sub	sp, #16
 8004466:	af00      	add	r7, sp, #0
 8004468:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800446e:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004474:	2b00      	cmp	r3, #0
 8004476:	d003      	beq.n	8004480 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800447c:	2200      	movs	r2, #0
 800447e:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004484:	2b00      	cmp	r3, #0
 8004486:	d003      	beq.n	8004490 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800448c:	2200      	movs	r2, #0
 800448e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8004490:	68f8      	ldr	r0, [r7, #12]
 8004492:	f7ff ff39 	bl	8004308 <I2C_TreatErrorCallback>
}
 8004496:	bf00      	nop
 8004498:	3710      	adds	r7, #16
 800449a:	46bd      	mov	sp, r7
 800449c:	bd80      	pop	{r7, pc}

0800449e <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800449e:	b580      	push	{r7, lr}
 80044a0:	b084      	sub	sp, #16
 80044a2:	af00      	add	r7, sp, #0
 80044a4:	60f8      	str	r0, [r7, #12]
 80044a6:	60b9      	str	r1, [r7, #8]
 80044a8:	603b      	str	r3, [r7, #0]
 80044aa:	4613      	mov	r3, r2
 80044ac:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80044ae:	e03b      	b.n	8004528 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80044b0:	69ba      	ldr	r2, [r7, #24]
 80044b2:	6839      	ldr	r1, [r7, #0]
 80044b4:	68f8      	ldr	r0, [r7, #12]
 80044b6:	f000 f8d5 	bl	8004664 <I2C_IsErrorOccurred>
 80044ba:	4603      	mov	r3, r0
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d001      	beq.n	80044c4 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80044c0:	2301      	movs	r3, #1
 80044c2:	e041      	b.n	8004548 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044ca:	d02d      	beq.n	8004528 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044cc:	f7fd fbc0 	bl	8001c50 <HAL_GetTick>
 80044d0:	4602      	mov	r2, r0
 80044d2:	69bb      	ldr	r3, [r7, #24]
 80044d4:	1ad3      	subs	r3, r2, r3
 80044d6:	683a      	ldr	r2, [r7, #0]
 80044d8:	429a      	cmp	r2, r3
 80044da:	d302      	bcc.n	80044e2 <I2C_WaitOnFlagUntilTimeout+0x44>
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d122      	bne.n	8004528 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	699a      	ldr	r2, [r3, #24]
 80044e8:	68bb      	ldr	r3, [r7, #8]
 80044ea:	4013      	ands	r3, r2
 80044ec:	68ba      	ldr	r2, [r7, #8]
 80044ee:	429a      	cmp	r2, r3
 80044f0:	bf0c      	ite	eq
 80044f2:	2301      	moveq	r3, #1
 80044f4:	2300      	movne	r3, #0
 80044f6:	b2db      	uxtb	r3, r3
 80044f8:	461a      	mov	r2, r3
 80044fa:	79fb      	ldrb	r3, [r7, #7]
 80044fc:	429a      	cmp	r2, r3
 80044fe:	d113      	bne.n	8004528 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004504:	f043 0220 	orr.w	r2, r3, #32
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	2220      	movs	r2, #32
 8004510:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	2200      	movs	r2, #0
 8004518:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	2200      	movs	r2, #0
 8004520:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8004524:	2301      	movs	r3, #1
 8004526:	e00f      	b.n	8004548 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	699a      	ldr	r2, [r3, #24]
 800452e:	68bb      	ldr	r3, [r7, #8]
 8004530:	4013      	ands	r3, r2
 8004532:	68ba      	ldr	r2, [r7, #8]
 8004534:	429a      	cmp	r2, r3
 8004536:	bf0c      	ite	eq
 8004538:	2301      	moveq	r3, #1
 800453a:	2300      	movne	r3, #0
 800453c:	b2db      	uxtb	r3, r3
 800453e:	461a      	mov	r2, r3
 8004540:	79fb      	ldrb	r3, [r7, #7]
 8004542:	429a      	cmp	r2, r3
 8004544:	d0b4      	beq.n	80044b0 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004546:	2300      	movs	r3, #0
}
 8004548:	4618      	mov	r0, r3
 800454a:	3710      	adds	r7, #16
 800454c:	46bd      	mov	sp, r7
 800454e:	bd80      	pop	{r7, pc}

08004550 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b084      	sub	sp, #16
 8004554:	af00      	add	r7, sp, #0
 8004556:	60f8      	str	r0, [r7, #12]
 8004558:	60b9      	str	r1, [r7, #8]
 800455a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800455c:	e033      	b.n	80045c6 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800455e:	687a      	ldr	r2, [r7, #4]
 8004560:	68b9      	ldr	r1, [r7, #8]
 8004562:	68f8      	ldr	r0, [r7, #12]
 8004564:	f000 f87e 	bl	8004664 <I2C_IsErrorOccurred>
 8004568:	4603      	mov	r3, r0
 800456a:	2b00      	cmp	r3, #0
 800456c:	d001      	beq.n	8004572 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800456e:	2301      	movs	r3, #1
 8004570:	e031      	b.n	80045d6 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004572:	68bb      	ldr	r3, [r7, #8]
 8004574:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004578:	d025      	beq.n	80045c6 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800457a:	f7fd fb69 	bl	8001c50 <HAL_GetTick>
 800457e:	4602      	mov	r2, r0
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	1ad3      	subs	r3, r2, r3
 8004584:	68ba      	ldr	r2, [r7, #8]
 8004586:	429a      	cmp	r2, r3
 8004588:	d302      	bcc.n	8004590 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800458a:	68bb      	ldr	r3, [r7, #8]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d11a      	bne.n	80045c6 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	699b      	ldr	r3, [r3, #24]
 8004596:	f003 0302 	and.w	r3, r3, #2
 800459a:	2b02      	cmp	r3, #2
 800459c:	d013      	beq.n	80045c6 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045a2:	f043 0220 	orr.w	r2, r3, #32
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	2220      	movs	r2, #32
 80045ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	2200      	movs	r2, #0
 80045b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	2200      	movs	r2, #0
 80045be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80045c2:	2301      	movs	r3, #1
 80045c4:	e007      	b.n	80045d6 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	699b      	ldr	r3, [r3, #24]
 80045cc:	f003 0302 	and.w	r3, r3, #2
 80045d0:	2b02      	cmp	r3, #2
 80045d2:	d1c4      	bne.n	800455e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80045d4:	2300      	movs	r3, #0
}
 80045d6:	4618      	mov	r0, r3
 80045d8:	3710      	adds	r7, #16
 80045da:	46bd      	mov	sp, r7
 80045dc:	bd80      	pop	{r7, pc}

080045de <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80045de:	b580      	push	{r7, lr}
 80045e0:	b084      	sub	sp, #16
 80045e2:	af00      	add	r7, sp, #0
 80045e4:	60f8      	str	r0, [r7, #12]
 80045e6:	60b9      	str	r1, [r7, #8]
 80045e8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80045ea:	e02f      	b.n	800464c <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80045ec:	687a      	ldr	r2, [r7, #4]
 80045ee:	68b9      	ldr	r1, [r7, #8]
 80045f0:	68f8      	ldr	r0, [r7, #12]
 80045f2:	f000 f837 	bl	8004664 <I2C_IsErrorOccurred>
 80045f6:	4603      	mov	r3, r0
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d001      	beq.n	8004600 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80045fc:	2301      	movs	r3, #1
 80045fe:	e02d      	b.n	800465c <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004600:	f7fd fb26 	bl	8001c50 <HAL_GetTick>
 8004604:	4602      	mov	r2, r0
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	1ad3      	subs	r3, r2, r3
 800460a:	68ba      	ldr	r2, [r7, #8]
 800460c:	429a      	cmp	r2, r3
 800460e:	d302      	bcc.n	8004616 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004610:	68bb      	ldr	r3, [r7, #8]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d11a      	bne.n	800464c <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	699b      	ldr	r3, [r3, #24]
 800461c:	f003 0320 	and.w	r3, r3, #32
 8004620:	2b20      	cmp	r3, #32
 8004622:	d013      	beq.n	800464c <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004628:	f043 0220 	orr.w	r2, r3, #32
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	2220      	movs	r2, #32
 8004634:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	2200      	movs	r2, #0
 800463c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	2200      	movs	r2, #0
 8004644:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8004648:	2301      	movs	r3, #1
 800464a:	e007      	b.n	800465c <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	699b      	ldr	r3, [r3, #24]
 8004652:	f003 0320 	and.w	r3, r3, #32
 8004656:	2b20      	cmp	r3, #32
 8004658:	d1c8      	bne.n	80045ec <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800465a:	2300      	movs	r3, #0
}
 800465c:	4618      	mov	r0, r3
 800465e:	3710      	adds	r7, #16
 8004660:	46bd      	mov	sp, r7
 8004662:	bd80      	pop	{r7, pc}

08004664 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004664:	b580      	push	{r7, lr}
 8004666:	b08a      	sub	sp, #40	@ 0x28
 8004668:	af00      	add	r7, sp, #0
 800466a:	60f8      	str	r0, [r7, #12]
 800466c:	60b9      	str	r1, [r7, #8]
 800466e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004670:	2300      	movs	r3, #0
 8004672:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	699b      	ldr	r3, [r3, #24]
 800467c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800467e:	2300      	movs	r3, #0
 8004680:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004686:	69bb      	ldr	r3, [r7, #24]
 8004688:	f003 0310 	and.w	r3, r3, #16
 800468c:	2b00      	cmp	r3, #0
 800468e:	d068      	beq.n	8004762 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	2210      	movs	r2, #16
 8004696:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004698:	e049      	b.n	800472e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800469a:	68bb      	ldr	r3, [r7, #8]
 800469c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046a0:	d045      	beq.n	800472e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80046a2:	f7fd fad5 	bl	8001c50 <HAL_GetTick>
 80046a6:	4602      	mov	r2, r0
 80046a8:	69fb      	ldr	r3, [r7, #28]
 80046aa:	1ad3      	subs	r3, r2, r3
 80046ac:	68ba      	ldr	r2, [r7, #8]
 80046ae:	429a      	cmp	r2, r3
 80046b0:	d302      	bcc.n	80046b8 <I2C_IsErrorOccurred+0x54>
 80046b2:	68bb      	ldr	r3, [r7, #8]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d13a      	bne.n	800472e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80046c2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80046ca:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	699b      	ldr	r3, [r3, #24]
 80046d2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80046d6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80046da:	d121      	bne.n	8004720 <I2C_IsErrorOccurred+0xbc>
 80046dc:	697b      	ldr	r3, [r7, #20]
 80046de:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80046e2:	d01d      	beq.n	8004720 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80046e4:	7cfb      	ldrb	r3, [r7, #19]
 80046e6:	2b20      	cmp	r3, #32
 80046e8:	d01a      	beq.n	8004720 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	685a      	ldr	r2, [r3, #4]
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80046f8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80046fa:	f7fd faa9 	bl	8001c50 <HAL_GetTick>
 80046fe:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004700:	e00e      	b.n	8004720 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004702:	f7fd faa5 	bl	8001c50 <HAL_GetTick>
 8004706:	4602      	mov	r2, r0
 8004708:	69fb      	ldr	r3, [r7, #28]
 800470a:	1ad3      	subs	r3, r2, r3
 800470c:	2b19      	cmp	r3, #25
 800470e:	d907      	bls.n	8004720 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004710:	6a3b      	ldr	r3, [r7, #32]
 8004712:	f043 0320 	orr.w	r3, r3, #32
 8004716:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004718:	2301      	movs	r3, #1
 800471a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800471e:	e006      	b.n	800472e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	699b      	ldr	r3, [r3, #24]
 8004726:	f003 0320 	and.w	r3, r3, #32
 800472a:	2b20      	cmp	r3, #32
 800472c:	d1e9      	bne.n	8004702 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	699b      	ldr	r3, [r3, #24]
 8004734:	f003 0320 	and.w	r3, r3, #32
 8004738:	2b20      	cmp	r3, #32
 800473a:	d003      	beq.n	8004744 <I2C_IsErrorOccurred+0xe0>
 800473c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004740:	2b00      	cmp	r3, #0
 8004742:	d0aa      	beq.n	800469a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004744:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004748:	2b00      	cmp	r3, #0
 800474a:	d103      	bne.n	8004754 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	2220      	movs	r2, #32
 8004752:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004754:	6a3b      	ldr	r3, [r7, #32]
 8004756:	f043 0304 	orr.w	r3, r3, #4
 800475a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800475c:	2301      	movs	r3, #1
 800475e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	699b      	ldr	r3, [r3, #24]
 8004768:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800476a:	69bb      	ldr	r3, [r7, #24]
 800476c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004770:	2b00      	cmp	r3, #0
 8004772:	d00b      	beq.n	800478c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004774:	6a3b      	ldr	r3, [r7, #32]
 8004776:	f043 0301 	orr.w	r3, r3, #1
 800477a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004784:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004786:	2301      	movs	r3, #1
 8004788:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800478c:	69bb      	ldr	r3, [r7, #24]
 800478e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004792:	2b00      	cmp	r3, #0
 8004794:	d00b      	beq.n	80047ae <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004796:	6a3b      	ldr	r3, [r7, #32]
 8004798:	f043 0308 	orr.w	r3, r3, #8
 800479c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80047a6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80047a8:	2301      	movs	r3, #1
 80047aa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80047ae:	69bb      	ldr	r3, [r7, #24]
 80047b0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d00b      	beq.n	80047d0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80047b8:	6a3b      	ldr	r3, [r7, #32]
 80047ba:	f043 0302 	orr.w	r3, r3, #2
 80047be:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80047c8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80047ca:	2301      	movs	r3, #1
 80047cc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80047d0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d01c      	beq.n	8004812 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80047d8:	68f8      	ldr	r0, [r7, #12]
 80047da:	f7ff fdbc 	bl	8004356 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	6859      	ldr	r1, [r3, #4]
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681a      	ldr	r2, [r3, #0]
 80047e8:	4b0d      	ldr	r3, [pc, #52]	@ (8004820 <I2C_IsErrorOccurred+0x1bc>)
 80047ea:	400b      	ands	r3, r1
 80047ec:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80047f2:	6a3b      	ldr	r3, [r7, #32]
 80047f4:	431a      	orrs	r2, r3
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	2220      	movs	r2, #32
 80047fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	2200      	movs	r2, #0
 8004806:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	2200      	movs	r2, #0
 800480e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8004812:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8004816:	4618      	mov	r0, r3
 8004818:	3728      	adds	r7, #40	@ 0x28
 800481a:	46bd      	mov	sp, r7
 800481c:	bd80      	pop	{r7, pc}
 800481e:	bf00      	nop
 8004820:	fe00e800 	.word	0xfe00e800

08004824 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004824:	b480      	push	{r7}
 8004826:	b087      	sub	sp, #28
 8004828:	af00      	add	r7, sp, #0
 800482a:	60f8      	str	r0, [r7, #12]
 800482c:	607b      	str	r3, [r7, #4]
 800482e:	460b      	mov	r3, r1
 8004830:	817b      	strh	r3, [r7, #10]
 8004832:	4613      	mov	r3, r2
 8004834:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004836:	897b      	ldrh	r3, [r7, #10]
 8004838:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800483c:	7a7b      	ldrb	r3, [r7, #9]
 800483e:	041b      	lsls	r3, r3, #16
 8004840:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004844:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800484a:	6a3b      	ldr	r3, [r7, #32]
 800484c:	4313      	orrs	r3, r2
 800484e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004852:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	685a      	ldr	r2, [r3, #4]
 800485a:	6a3b      	ldr	r3, [r7, #32]
 800485c:	0d5b      	lsrs	r3, r3, #21
 800485e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8004862:	4b08      	ldr	r3, [pc, #32]	@ (8004884 <I2C_TransferConfig+0x60>)
 8004864:	430b      	orrs	r3, r1
 8004866:	43db      	mvns	r3, r3
 8004868:	ea02 0103 	and.w	r1, r2, r3
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	697a      	ldr	r2, [r7, #20]
 8004872:	430a      	orrs	r2, r1
 8004874:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004876:	bf00      	nop
 8004878:	371c      	adds	r7, #28
 800487a:	46bd      	mov	sp, r7
 800487c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004880:	4770      	bx	lr
 8004882:	bf00      	nop
 8004884:	03ff63ff 	.word	0x03ff63ff

08004888 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8004888:	b480      	push	{r7}
 800488a:	b085      	sub	sp, #20
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
 8004890:	460b      	mov	r3, r1
 8004892:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8004894:	2300      	movs	r3, #0
 8004896:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800489c:	4a39      	ldr	r2, [pc, #228]	@ (8004984 <I2C_Enable_IRQ+0xfc>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d032      	beq.n	8004908 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 80048a6:	4a38      	ldr	r2, [pc, #224]	@ (8004988 <I2C_Enable_IRQ+0x100>)
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d02d      	beq.n	8004908 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 80048b0:	4a36      	ldr	r2, [pc, #216]	@ (800498c <I2C_Enable_IRQ+0x104>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d028      	beq.n	8004908 <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80048b6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	da03      	bge.n	80048c6 <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 80048c4:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80048c6:	887b      	ldrh	r3, [r7, #2]
 80048c8:	f003 0301 	and.w	r3, r3, #1
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d003      	beq.n	80048d8 <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 80048d6:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80048d8:	887b      	ldrh	r3, [r7, #2]
 80048da:	f003 0302 	and.w	r3, r3, #2
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d003      	beq.n	80048ea <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 80048e8:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 80048ea:	887b      	ldrh	r3, [r7, #2]
 80048ec:	2b10      	cmp	r3, #16
 80048ee:	d103      	bne.n	80048f8 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 80048f6:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80048f8:	887b      	ldrh	r3, [r7, #2]
 80048fa:	2b20      	cmp	r3, #32
 80048fc:	d133      	bne.n	8004966 <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	f043 0320 	orr.w	r3, r3, #32
 8004904:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8004906:	e02e      	b.n	8004966 <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8004908:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800490c:	2b00      	cmp	r3, #0
 800490e:	da03      	bge.n	8004918 <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8004916:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8004918:	887b      	ldrh	r3, [r7, #2]
 800491a:	f003 0301 	and.w	r3, r3, #1
 800491e:	2b00      	cmp	r3, #0
 8004920:	d003      	beq.n	800492a <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8004928:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800492a:	887b      	ldrh	r3, [r7, #2]
 800492c:	f003 0302 	and.w	r3, r3, #2
 8004930:	2b00      	cmp	r3, #0
 8004932:	d003      	beq.n	800493c <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 800493a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800493c:	887b      	ldrh	r3, [r7, #2]
 800493e:	2b10      	cmp	r3, #16
 8004940:	d103      	bne.n	800494a <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8004948:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800494a:	887b      	ldrh	r3, [r7, #2]
 800494c:	2b20      	cmp	r3, #32
 800494e:	d103      	bne.n	8004958 <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8004956:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8004958:	887b      	ldrh	r3, [r7, #2]
 800495a:	2b40      	cmp	r3, #64	@ 0x40
 800495c:	d103      	bne.n	8004966 <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004964:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	6819      	ldr	r1, [r3, #0]
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	68fa      	ldr	r2, [r7, #12]
 8004972:	430a      	orrs	r2, r1
 8004974:	601a      	str	r2, [r3, #0]
}
 8004976:	bf00      	nop
 8004978:	3714      	adds	r7, #20
 800497a:	46bd      	mov	sp, r7
 800497c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004980:	4770      	bx	lr
 8004982:	bf00      	nop
 8004984:	080032c9 	.word	0x080032c9
 8004988:	080036ed 	.word	0x080036ed
 800498c:	080034a1 	.word	0x080034a1

08004990 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8004990:	b480      	push	{r7}
 8004992:	b085      	sub	sp, #20
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
 8004998:	460b      	mov	r3, r1
 800499a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800499c:	2300      	movs	r3, #0
 800499e:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80049a0:	887b      	ldrh	r3, [r7, #2]
 80049a2:	f003 0301 	and.w	r3, r3, #1
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d00f      	beq.n	80049ca <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 80049b0:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80049b8:	b2db      	uxtb	r3, r3
 80049ba:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80049be:	2b28      	cmp	r3, #40	@ 0x28
 80049c0:	d003      	beq.n	80049ca <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 80049c8:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80049ca:	887b      	ldrh	r3, [r7, #2]
 80049cc:	f003 0302 	and.w	r3, r3, #2
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d00f      	beq.n	80049f4 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 80049da:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80049e2:	b2db      	uxtb	r3, r3
 80049e4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80049e8:	2b28      	cmp	r3, #40	@ 0x28
 80049ea:	d003      	beq.n	80049f4 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 80049f2:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80049f4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	da03      	bge.n	8004a04 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8004a02:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8004a04:	887b      	ldrh	r3, [r7, #2]
 8004a06:	2b10      	cmp	r3, #16
 8004a08:	d103      	bne.n	8004a12 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8004a10:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8004a12:	887b      	ldrh	r3, [r7, #2]
 8004a14:	2b20      	cmp	r3, #32
 8004a16:	d103      	bne.n	8004a20 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	f043 0320 	orr.w	r3, r3, #32
 8004a1e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8004a20:	887b      	ldrh	r3, [r7, #2]
 8004a22:	2b40      	cmp	r3, #64	@ 0x40
 8004a24:	d103      	bne.n	8004a2e <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004a2c:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	6819      	ldr	r1, [r3, #0]
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	43da      	mvns	r2, r3
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	400a      	ands	r2, r1
 8004a3e:	601a      	str	r2, [r3, #0]
}
 8004a40:	bf00      	nop
 8004a42:	3714      	adds	r7, #20
 8004a44:	46bd      	mov	sp, r7
 8004a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4a:	4770      	bx	lr

08004a4c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	b083      	sub	sp, #12
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
 8004a54:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a5c:	b2db      	uxtb	r3, r3
 8004a5e:	2b20      	cmp	r3, #32
 8004a60:	d138      	bne.n	8004ad4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004a68:	2b01      	cmp	r3, #1
 8004a6a:	d101      	bne.n	8004a70 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004a6c:	2302      	movs	r3, #2
 8004a6e:	e032      	b.n	8004ad6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2201      	movs	r2, #1
 8004a74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2224      	movs	r2, #36	@ 0x24
 8004a7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	681a      	ldr	r2, [r3, #0]
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f022 0201 	bic.w	r2, r2, #1
 8004a8e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	681a      	ldr	r2, [r3, #0]
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004a9e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	6819      	ldr	r1, [r3, #0]
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	683a      	ldr	r2, [r7, #0]
 8004aac:	430a      	orrs	r2, r1
 8004aae:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	681a      	ldr	r2, [r3, #0]
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f042 0201 	orr.w	r2, r2, #1
 8004abe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2220      	movs	r2, #32
 8004ac4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2200      	movs	r2, #0
 8004acc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	e000      	b.n	8004ad6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004ad4:	2302      	movs	r3, #2
  }
}
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	370c      	adds	r7, #12
 8004ada:	46bd      	mov	sp, r7
 8004adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae0:	4770      	bx	lr

08004ae2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004ae2:	b480      	push	{r7}
 8004ae4:	b085      	sub	sp, #20
 8004ae6:	af00      	add	r7, sp, #0
 8004ae8:	6078      	str	r0, [r7, #4]
 8004aea:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004af2:	b2db      	uxtb	r3, r3
 8004af4:	2b20      	cmp	r3, #32
 8004af6:	d139      	bne.n	8004b6c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004afe:	2b01      	cmp	r3, #1
 8004b00:	d101      	bne.n	8004b06 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004b02:	2302      	movs	r3, #2
 8004b04:	e033      	b.n	8004b6e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2201      	movs	r2, #1
 8004b0a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2224      	movs	r2, #36	@ 0x24
 8004b12:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	681a      	ldr	r2, [r3, #0]
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f022 0201 	bic.w	r2, r2, #1
 8004b24:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004b34:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	021b      	lsls	r3, r3, #8
 8004b3a:	68fa      	ldr	r2, [r7, #12]
 8004b3c:	4313      	orrs	r3, r2
 8004b3e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	68fa      	ldr	r2, [r7, #12]
 8004b46:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	681a      	ldr	r2, [r3, #0]
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f042 0201 	orr.w	r2, r2, #1
 8004b56:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2220      	movs	r2, #32
 8004b5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2200      	movs	r2, #0
 8004b64:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004b68:	2300      	movs	r3, #0
 8004b6a:	e000      	b.n	8004b6e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004b6c:	2302      	movs	r3, #2
  }
}
 8004b6e:	4618      	mov	r0, r3
 8004b70:	3714      	adds	r7, #20
 8004b72:	46bd      	mov	sp, r7
 8004b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b78:	4770      	bx	lr
	...

08004b7c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004b7c:	b480      	push	{r7}
 8004b7e:	b085      	sub	sp, #20
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d141      	bne.n	8004c0e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004b8a:	4b4b      	ldr	r3, [pc, #300]	@ (8004cb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004b92:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b96:	d131      	bne.n	8004bfc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004b98:	4b47      	ldr	r3, [pc, #284]	@ (8004cb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004b9e:	4a46      	ldr	r2, [pc, #280]	@ (8004cb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ba0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004ba4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004ba8:	4b43      	ldr	r3, [pc, #268]	@ (8004cb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004bb0:	4a41      	ldr	r2, [pc, #260]	@ (8004cb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004bb2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004bb6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004bb8:	4b40      	ldr	r3, [pc, #256]	@ (8004cbc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	2232      	movs	r2, #50	@ 0x32
 8004bbe:	fb02 f303 	mul.w	r3, r2, r3
 8004bc2:	4a3f      	ldr	r2, [pc, #252]	@ (8004cc0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004bc4:	fba2 2303 	umull	r2, r3, r2, r3
 8004bc8:	0c9b      	lsrs	r3, r3, #18
 8004bca:	3301      	adds	r3, #1
 8004bcc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004bce:	e002      	b.n	8004bd6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	3b01      	subs	r3, #1
 8004bd4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004bd6:	4b38      	ldr	r3, [pc, #224]	@ (8004cb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004bd8:	695b      	ldr	r3, [r3, #20]
 8004bda:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004bde:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004be2:	d102      	bne.n	8004bea <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d1f2      	bne.n	8004bd0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004bea:	4b33      	ldr	r3, [pc, #204]	@ (8004cb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004bec:	695b      	ldr	r3, [r3, #20]
 8004bee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004bf2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004bf6:	d158      	bne.n	8004caa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004bf8:	2303      	movs	r3, #3
 8004bfa:	e057      	b.n	8004cac <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004bfc:	4b2e      	ldr	r3, [pc, #184]	@ (8004cb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004bfe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004c02:	4a2d      	ldr	r2, [pc, #180]	@ (8004cb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c04:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004c08:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004c0c:	e04d      	b.n	8004caa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004c14:	d141      	bne.n	8004c9a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004c16:	4b28      	ldr	r3, [pc, #160]	@ (8004cb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004c1e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c22:	d131      	bne.n	8004c88 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004c24:	4b24      	ldr	r3, [pc, #144]	@ (8004cb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c26:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004c2a:	4a23      	ldr	r2, [pc, #140]	@ (8004cb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c2c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c30:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004c34:	4b20      	ldr	r3, [pc, #128]	@ (8004cb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004c3c:	4a1e      	ldr	r2, [pc, #120]	@ (8004cb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c3e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004c42:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004c44:	4b1d      	ldr	r3, [pc, #116]	@ (8004cbc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	2232      	movs	r2, #50	@ 0x32
 8004c4a:	fb02 f303 	mul.w	r3, r2, r3
 8004c4e:	4a1c      	ldr	r2, [pc, #112]	@ (8004cc0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004c50:	fba2 2303 	umull	r2, r3, r2, r3
 8004c54:	0c9b      	lsrs	r3, r3, #18
 8004c56:	3301      	adds	r3, #1
 8004c58:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004c5a:	e002      	b.n	8004c62 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	3b01      	subs	r3, #1
 8004c60:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004c62:	4b15      	ldr	r3, [pc, #84]	@ (8004cb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c64:	695b      	ldr	r3, [r3, #20]
 8004c66:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c6a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c6e:	d102      	bne.n	8004c76 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d1f2      	bne.n	8004c5c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004c76:	4b10      	ldr	r3, [pc, #64]	@ (8004cb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c78:	695b      	ldr	r3, [r3, #20]
 8004c7a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c7e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c82:	d112      	bne.n	8004caa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004c84:	2303      	movs	r3, #3
 8004c86:	e011      	b.n	8004cac <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004c88:	4b0b      	ldr	r3, [pc, #44]	@ (8004cb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004c8e:	4a0a      	ldr	r2, [pc, #40]	@ (8004cb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c90:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c94:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004c98:	e007      	b.n	8004caa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004c9a:	4b07      	ldr	r3, [pc, #28]	@ (8004cb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004ca2:	4a05      	ldr	r2, [pc, #20]	@ (8004cb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ca4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004ca8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004caa:	2300      	movs	r3, #0
}
 8004cac:	4618      	mov	r0, r3
 8004cae:	3714      	adds	r7, #20
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb6:	4770      	bx	lr
 8004cb8:	40007000 	.word	0x40007000
 8004cbc:	20000000 	.word	0x20000000
 8004cc0:	431bde83 	.word	0x431bde83

08004cc4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004cc4:	b480      	push	{r7}
 8004cc6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004cc8:	4b05      	ldr	r3, [pc, #20]	@ (8004ce0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004cca:	689b      	ldr	r3, [r3, #8]
 8004ccc:	4a04      	ldr	r2, [pc, #16]	@ (8004ce0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004cce:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004cd2:	6093      	str	r3, [r2, #8]
}
 8004cd4:	bf00      	nop
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cdc:	4770      	bx	lr
 8004cde:	bf00      	nop
 8004ce0:	40007000 	.word	0x40007000

08004ce4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b088      	sub	sp, #32
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d101      	bne.n	8004cf6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	e2fe      	b.n	80052f4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f003 0301 	and.w	r3, r3, #1
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d075      	beq.n	8004dee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d02:	4b97      	ldr	r3, [pc, #604]	@ (8004f60 <HAL_RCC_OscConfig+0x27c>)
 8004d04:	689b      	ldr	r3, [r3, #8]
 8004d06:	f003 030c 	and.w	r3, r3, #12
 8004d0a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004d0c:	4b94      	ldr	r3, [pc, #592]	@ (8004f60 <HAL_RCC_OscConfig+0x27c>)
 8004d0e:	68db      	ldr	r3, [r3, #12]
 8004d10:	f003 0303 	and.w	r3, r3, #3
 8004d14:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004d16:	69bb      	ldr	r3, [r7, #24]
 8004d18:	2b0c      	cmp	r3, #12
 8004d1a:	d102      	bne.n	8004d22 <HAL_RCC_OscConfig+0x3e>
 8004d1c:	697b      	ldr	r3, [r7, #20]
 8004d1e:	2b03      	cmp	r3, #3
 8004d20:	d002      	beq.n	8004d28 <HAL_RCC_OscConfig+0x44>
 8004d22:	69bb      	ldr	r3, [r7, #24]
 8004d24:	2b08      	cmp	r3, #8
 8004d26:	d10b      	bne.n	8004d40 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d28:	4b8d      	ldr	r3, [pc, #564]	@ (8004f60 <HAL_RCC_OscConfig+0x27c>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d05b      	beq.n	8004dec <HAL_RCC_OscConfig+0x108>
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	685b      	ldr	r3, [r3, #4]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d157      	bne.n	8004dec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004d3c:	2301      	movs	r3, #1
 8004d3e:	e2d9      	b.n	80052f4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	685b      	ldr	r3, [r3, #4]
 8004d44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d48:	d106      	bne.n	8004d58 <HAL_RCC_OscConfig+0x74>
 8004d4a:	4b85      	ldr	r3, [pc, #532]	@ (8004f60 <HAL_RCC_OscConfig+0x27c>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4a84      	ldr	r2, [pc, #528]	@ (8004f60 <HAL_RCC_OscConfig+0x27c>)
 8004d50:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d54:	6013      	str	r3, [r2, #0]
 8004d56:	e01d      	b.n	8004d94 <HAL_RCC_OscConfig+0xb0>
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	685b      	ldr	r3, [r3, #4]
 8004d5c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004d60:	d10c      	bne.n	8004d7c <HAL_RCC_OscConfig+0x98>
 8004d62:	4b7f      	ldr	r3, [pc, #508]	@ (8004f60 <HAL_RCC_OscConfig+0x27c>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	4a7e      	ldr	r2, [pc, #504]	@ (8004f60 <HAL_RCC_OscConfig+0x27c>)
 8004d68:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004d6c:	6013      	str	r3, [r2, #0]
 8004d6e:	4b7c      	ldr	r3, [pc, #496]	@ (8004f60 <HAL_RCC_OscConfig+0x27c>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4a7b      	ldr	r2, [pc, #492]	@ (8004f60 <HAL_RCC_OscConfig+0x27c>)
 8004d74:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d78:	6013      	str	r3, [r2, #0]
 8004d7a:	e00b      	b.n	8004d94 <HAL_RCC_OscConfig+0xb0>
 8004d7c:	4b78      	ldr	r3, [pc, #480]	@ (8004f60 <HAL_RCC_OscConfig+0x27c>)
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4a77      	ldr	r2, [pc, #476]	@ (8004f60 <HAL_RCC_OscConfig+0x27c>)
 8004d82:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004d86:	6013      	str	r3, [r2, #0]
 8004d88:	4b75      	ldr	r3, [pc, #468]	@ (8004f60 <HAL_RCC_OscConfig+0x27c>)
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	4a74      	ldr	r2, [pc, #464]	@ (8004f60 <HAL_RCC_OscConfig+0x27c>)
 8004d8e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004d92:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	685b      	ldr	r3, [r3, #4]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d013      	beq.n	8004dc4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d9c:	f7fc ff58 	bl	8001c50 <HAL_GetTick>
 8004da0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004da2:	e008      	b.n	8004db6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004da4:	f7fc ff54 	bl	8001c50 <HAL_GetTick>
 8004da8:	4602      	mov	r2, r0
 8004daa:	693b      	ldr	r3, [r7, #16]
 8004dac:	1ad3      	subs	r3, r2, r3
 8004dae:	2b64      	cmp	r3, #100	@ 0x64
 8004db0:	d901      	bls.n	8004db6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004db2:	2303      	movs	r3, #3
 8004db4:	e29e      	b.n	80052f4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004db6:	4b6a      	ldr	r3, [pc, #424]	@ (8004f60 <HAL_RCC_OscConfig+0x27c>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d0f0      	beq.n	8004da4 <HAL_RCC_OscConfig+0xc0>
 8004dc2:	e014      	b.n	8004dee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dc4:	f7fc ff44 	bl	8001c50 <HAL_GetTick>
 8004dc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004dca:	e008      	b.n	8004dde <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004dcc:	f7fc ff40 	bl	8001c50 <HAL_GetTick>
 8004dd0:	4602      	mov	r2, r0
 8004dd2:	693b      	ldr	r3, [r7, #16]
 8004dd4:	1ad3      	subs	r3, r2, r3
 8004dd6:	2b64      	cmp	r3, #100	@ 0x64
 8004dd8:	d901      	bls.n	8004dde <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004dda:	2303      	movs	r3, #3
 8004ddc:	e28a      	b.n	80052f4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004dde:	4b60      	ldr	r3, [pc, #384]	@ (8004f60 <HAL_RCC_OscConfig+0x27c>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d1f0      	bne.n	8004dcc <HAL_RCC_OscConfig+0xe8>
 8004dea:	e000      	b.n	8004dee <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004dec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f003 0302 	and.w	r3, r3, #2
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d075      	beq.n	8004ee6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004dfa:	4b59      	ldr	r3, [pc, #356]	@ (8004f60 <HAL_RCC_OscConfig+0x27c>)
 8004dfc:	689b      	ldr	r3, [r3, #8]
 8004dfe:	f003 030c 	and.w	r3, r3, #12
 8004e02:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004e04:	4b56      	ldr	r3, [pc, #344]	@ (8004f60 <HAL_RCC_OscConfig+0x27c>)
 8004e06:	68db      	ldr	r3, [r3, #12]
 8004e08:	f003 0303 	and.w	r3, r3, #3
 8004e0c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004e0e:	69bb      	ldr	r3, [r7, #24]
 8004e10:	2b0c      	cmp	r3, #12
 8004e12:	d102      	bne.n	8004e1a <HAL_RCC_OscConfig+0x136>
 8004e14:	697b      	ldr	r3, [r7, #20]
 8004e16:	2b02      	cmp	r3, #2
 8004e18:	d002      	beq.n	8004e20 <HAL_RCC_OscConfig+0x13c>
 8004e1a:	69bb      	ldr	r3, [r7, #24]
 8004e1c:	2b04      	cmp	r3, #4
 8004e1e:	d11f      	bne.n	8004e60 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004e20:	4b4f      	ldr	r3, [pc, #316]	@ (8004f60 <HAL_RCC_OscConfig+0x27c>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d005      	beq.n	8004e38 <HAL_RCC_OscConfig+0x154>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	68db      	ldr	r3, [r3, #12]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d101      	bne.n	8004e38 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004e34:	2301      	movs	r3, #1
 8004e36:	e25d      	b.n	80052f4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e38:	4b49      	ldr	r3, [pc, #292]	@ (8004f60 <HAL_RCC_OscConfig+0x27c>)
 8004e3a:	685b      	ldr	r3, [r3, #4]
 8004e3c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	691b      	ldr	r3, [r3, #16]
 8004e44:	061b      	lsls	r3, r3, #24
 8004e46:	4946      	ldr	r1, [pc, #280]	@ (8004f60 <HAL_RCC_OscConfig+0x27c>)
 8004e48:	4313      	orrs	r3, r2
 8004e4a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004e4c:	4b45      	ldr	r3, [pc, #276]	@ (8004f64 <HAL_RCC_OscConfig+0x280>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4618      	mov	r0, r3
 8004e52:	f7fc feb1 	bl	8001bb8 <HAL_InitTick>
 8004e56:	4603      	mov	r3, r0
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d043      	beq.n	8004ee4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004e5c:	2301      	movs	r3, #1
 8004e5e:	e249      	b.n	80052f4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	68db      	ldr	r3, [r3, #12]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d023      	beq.n	8004eb0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004e68:	4b3d      	ldr	r3, [pc, #244]	@ (8004f60 <HAL_RCC_OscConfig+0x27c>)
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4a3c      	ldr	r2, [pc, #240]	@ (8004f60 <HAL_RCC_OscConfig+0x27c>)
 8004e6e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e74:	f7fc feec 	bl	8001c50 <HAL_GetTick>
 8004e78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004e7a:	e008      	b.n	8004e8e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e7c:	f7fc fee8 	bl	8001c50 <HAL_GetTick>
 8004e80:	4602      	mov	r2, r0
 8004e82:	693b      	ldr	r3, [r7, #16]
 8004e84:	1ad3      	subs	r3, r2, r3
 8004e86:	2b02      	cmp	r3, #2
 8004e88:	d901      	bls.n	8004e8e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004e8a:	2303      	movs	r3, #3
 8004e8c:	e232      	b.n	80052f4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004e8e:	4b34      	ldr	r3, [pc, #208]	@ (8004f60 <HAL_RCC_OscConfig+0x27c>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d0f0      	beq.n	8004e7c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e9a:	4b31      	ldr	r3, [pc, #196]	@ (8004f60 <HAL_RCC_OscConfig+0x27c>)
 8004e9c:	685b      	ldr	r3, [r3, #4]
 8004e9e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	691b      	ldr	r3, [r3, #16]
 8004ea6:	061b      	lsls	r3, r3, #24
 8004ea8:	492d      	ldr	r1, [pc, #180]	@ (8004f60 <HAL_RCC_OscConfig+0x27c>)
 8004eaa:	4313      	orrs	r3, r2
 8004eac:	604b      	str	r3, [r1, #4]
 8004eae:	e01a      	b.n	8004ee6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004eb0:	4b2b      	ldr	r3, [pc, #172]	@ (8004f60 <HAL_RCC_OscConfig+0x27c>)
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	4a2a      	ldr	r2, [pc, #168]	@ (8004f60 <HAL_RCC_OscConfig+0x27c>)
 8004eb6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004eba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ebc:	f7fc fec8 	bl	8001c50 <HAL_GetTick>
 8004ec0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004ec2:	e008      	b.n	8004ed6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ec4:	f7fc fec4 	bl	8001c50 <HAL_GetTick>
 8004ec8:	4602      	mov	r2, r0
 8004eca:	693b      	ldr	r3, [r7, #16]
 8004ecc:	1ad3      	subs	r3, r2, r3
 8004ece:	2b02      	cmp	r3, #2
 8004ed0:	d901      	bls.n	8004ed6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004ed2:	2303      	movs	r3, #3
 8004ed4:	e20e      	b.n	80052f4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004ed6:	4b22      	ldr	r3, [pc, #136]	@ (8004f60 <HAL_RCC_OscConfig+0x27c>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d1f0      	bne.n	8004ec4 <HAL_RCC_OscConfig+0x1e0>
 8004ee2:	e000      	b.n	8004ee6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004ee4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f003 0308 	and.w	r3, r3, #8
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d041      	beq.n	8004f76 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	695b      	ldr	r3, [r3, #20]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d01c      	beq.n	8004f34 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004efa:	4b19      	ldr	r3, [pc, #100]	@ (8004f60 <HAL_RCC_OscConfig+0x27c>)
 8004efc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004f00:	4a17      	ldr	r2, [pc, #92]	@ (8004f60 <HAL_RCC_OscConfig+0x27c>)
 8004f02:	f043 0301 	orr.w	r3, r3, #1
 8004f06:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f0a:	f7fc fea1 	bl	8001c50 <HAL_GetTick>
 8004f0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004f10:	e008      	b.n	8004f24 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f12:	f7fc fe9d 	bl	8001c50 <HAL_GetTick>
 8004f16:	4602      	mov	r2, r0
 8004f18:	693b      	ldr	r3, [r7, #16]
 8004f1a:	1ad3      	subs	r3, r2, r3
 8004f1c:	2b02      	cmp	r3, #2
 8004f1e:	d901      	bls.n	8004f24 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004f20:	2303      	movs	r3, #3
 8004f22:	e1e7      	b.n	80052f4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004f24:	4b0e      	ldr	r3, [pc, #56]	@ (8004f60 <HAL_RCC_OscConfig+0x27c>)
 8004f26:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004f2a:	f003 0302 	and.w	r3, r3, #2
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d0ef      	beq.n	8004f12 <HAL_RCC_OscConfig+0x22e>
 8004f32:	e020      	b.n	8004f76 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004f34:	4b0a      	ldr	r3, [pc, #40]	@ (8004f60 <HAL_RCC_OscConfig+0x27c>)
 8004f36:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004f3a:	4a09      	ldr	r2, [pc, #36]	@ (8004f60 <HAL_RCC_OscConfig+0x27c>)
 8004f3c:	f023 0301 	bic.w	r3, r3, #1
 8004f40:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f44:	f7fc fe84 	bl	8001c50 <HAL_GetTick>
 8004f48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004f4a:	e00d      	b.n	8004f68 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f4c:	f7fc fe80 	bl	8001c50 <HAL_GetTick>
 8004f50:	4602      	mov	r2, r0
 8004f52:	693b      	ldr	r3, [r7, #16]
 8004f54:	1ad3      	subs	r3, r2, r3
 8004f56:	2b02      	cmp	r3, #2
 8004f58:	d906      	bls.n	8004f68 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004f5a:	2303      	movs	r3, #3
 8004f5c:	e1ca      	b.n	80052f4 <HAL_RCC_OscConfig+0x610>
 8004f5e:	bf00      	nop
 8004f60:	40021000 	.word	0x40021000
 8004f64:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004f68:	4b8c      	ldr	r3, [pc, #560]	@ (800519c <HAL_RCC_OscConfig+0x4b8>)
 8004f6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004f6e:	f003 0302 	and.w	r3, r3, #2
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d1ea      	bne.n	8004f4c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f003 0304 	and.w	r3, r3, #4
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	f000 80a6 	beq.w	80050d0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f84:	2300      	movs	r3, #0
 8004f86:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004f88:	4b84      	ldr	r3, [pc, #528]	@ (800519c <HAL_RCC_OscConfig+0x4b8>)
 8004f8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f8c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d101      	bne.n	8004f98 <HAL_RCC_OscConfig+0x2b4>
 8004f94:	2301      	movs	r3, #1
 8004f96:	e000      	b.n	8004f9a <HAL_RCC_OscConfig+0x2b6>
 8004f98:	2300      	movs	r3, #0
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d00d      	beq.n	8004fba <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f9e:	4b7f      	ldr	r3, [pc, #508]	@ (800519c <HAL_RCC_OscConfig+0x4b8>)
 8004fa0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fa2:	4a7e      	ldr	r2, [pc, #504]	@ (800519c <HAL_RCC_OscConfig+0x4b8>)
 8004fa4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004fa8:	6593      	str	r3, [r2, #88]	@ 0x58
 8004faa:	4b7c      	ldr	r3, [pc, #496]	@ (800519c <HAL_RCC_OscConfig+0x4b8>)
 8004fac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004fb2:	60fb      	str	r3, [r7, #12]
 8004fb4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004fba:	4b79      	ldr	r3, [pc, #484]	@ (80051a0 <HAL_RCC_OscConfig+0x4bc>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d118      	bne.n	8004ff8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004fc6:	4b76      	ldr	r3, [pc, #472]	@ (80051a0 <HAL_RCC_OscConfig+0x4bc>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4a75      	ldr	r2, [pc, #468]	@ (80051a0 <HAL_RCC_OscConfig+0x4bc>)
 8004fcc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004fd0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004fd2:	f7fc fe3d 	bl	8001c50 <HAL_GetTick>
 8004fd6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004fd8:	e008      	b.n	8004fec <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004fda:	f7fc fe39 	bl	8001c50 <HAL_GetTick>
 8004fde:	4602      	mov	r2, r0
 8004fe0:	693b      	ldr	r3, [r7, #16]
 8004fe2:	1ad3      	subs	r3, r2, r3
 8004fe4:	2b02      	cmp	r3, #2
 8004fe6:	d901      	bls.n	8004fec <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004fe8:	2303      	movs	r3, #3
 8004fea:	e183      	b.n	80052f4 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004fec:	4b6c      	ldr	r3, [pc, #432]	@ (80051a0 <HAL_RCC_OscConfig+0x4bc>)
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d0f0      	beq.n	8004fda <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	689b      	ldr	r3, [r3, #8]
 8004ffc:	2b01      	cmp	r3, #1
 8004ffe:	d108      	bne.n	8005012 <HAL_RCC_OscConfig+0x32e>
 8005000:	4b66      	ldr	r3, [pc, #408]	@ (800519c <HAL_RCC_OscConfig+0x4b8>)
 8005002:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005006:	4a65      	ldr	r2, [pc, #404]	@ (800519c <HAL_RCC_OscConfig+0x4b8>)
 8005008:	f043 0301 	orr.w	r3, r3, #1
 800500c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005010:	e024      	b.n	800505c <HAL_RCC_OscConfig+0x378>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	689b      	ldr	r3, [r3, #8]
 8005016:	2b05      	cmp	r3, #5
 8005018:	d110      	bne.n	800503c <HAL_RCC_OscConfig+0x358>
 800501a:	4b60      	ldr	r3, [pc, #384]	@ (800519c <HAL_RCC_OscConfig+0x4b8>)
 800501c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005020:	4a5e      	ldr	r2, [pc, #376]	@ (800519c <HAL_RCC_OscConfig+0x4b8>)
 8005022:	f043 0304 	orr.w	r3, r3, #4
 8005026:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800502a:	4b5c      	ldr	r3, [pc, #368]	@ (800519c <HAL_RCC_OscConfig+0x4b8>)
 800502c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005030:	4a5a      	ldr	r2, [pc, #360]	@ (800519c <HAL_RCC_OscConfig+0x4b8>)
 8005032:	f043 0301 	orr.w	r3, r3, #1
 8005036:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800503a:	e00f      	b.n	800505c <HAL_RCC_OscConfig+0x378>
 800503c:	4b57      	ldr	r3, [pc, #348]	@ (800519c <HAL_RCC_OscConfig+0x4b8>)
 800503e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005042:	4a56      	ldr	r2, [pc, #344]	@ (800519c <HAL_RCC_OscConfig+0x4b8>)
 8005044:	f023 0301 	bic.w	r3, r3, #1
 8005048:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800504c:	4b53      	ldr	r3, [pc, #332]	@ (800519c <HAL_RCC_OscConfig+0x4b8>)
 800504e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005052:	4a52      	ldr	r2, [pc, #328]	@ (800519c <HAL_RCC_OscConfig+0x4b8>)
 8005054:	f023 0304 	bic.w	r3, r3, #4
 8005058:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	689b      	ldr	r3, [r3, #8]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d016      	beq.n	8005092 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005064:	f7fc fdf4 	bl	8001c50 <HAL_GetTick>
 8005068:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800506a:	e00a      	b.n	8005082 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800506c:	f7fc fdf0 	bl	8001c50 <HAL_GetTick>
 8005070:	4602      	mov	r2, r0
 8005072:	693b      	ldr	r3, [r7, #16]
 8005074:	1ad3      	subs	r3, r2, r3
 8005076:	f241 3288 	movw	r2, #5000	@ 0x1388
 800507a:	4293      	cmp	r3, r2
 800507c:	d901      	bls.n	8005082 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800507e:	2303      	movs	r3, #3
 8005080:	e138      	b.n	80052f4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005082:	4b46      	ldr	r3, [pc, #280]	@ (800519c <HAL_RCC_OscConfig+0x4b8>)
 8005084:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005088:	f003 0302 	and.w	r3, r3, #2
 800508c:	2b00      	cmp	r3, #0
 800508e:	d0ed      	beq.n	800506c <HAL_RCC_OscConfig+0x388>
 8005090:	e015      	b.n	80050be <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005092:	f7fc fddd 	bl	8001c50 <HAL_GetTick>
 8005096:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005098:	e00a      	b.n	80050b0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800509a:	f7fc fdd9 	bl	8001c50 <HAL_GetTick>
 800509e:	4602      	mov	r2, r0
 80050a0:	693b      	ldr	r3, [r7, #16]
 80050a2:	1ad3      	subs	r3, r2, r3
 80050a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d901      	bls.n	80050b0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80050ac:	2303      	movs	r3, #3
 80050ae:	e121      	b.n	80052f4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80050b0:	4b3a      	ldr	r3, [pc, #232]	@ (800519c <HAL_RCC_OscConfig+0x4b8>)
 80050b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050b6:	f003 0302 	and.w	r3, r3, #2
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d1ed      	bne.n	800509a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80050be:	7ffb      	ldrb	r3, [r7, #31]
 80050c0:	2b01      	cmp	r3, #1
 80050c2:	d105      	bne.n	80050d0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80050c4:	4b35      	ldr	r3, [pc, #212]	@ (800519c <HAL_RCC_OscConfig+0x4b8>)
 80050c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050c8:	4a34      	ldr	r2, [pc, #208]	@ (800519c <HAL_RCC_OscConfig+0x4b8>)
 80050ca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80050ce:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f003 0320 	and.w	r3, r3, #32
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d03c      	beq.n	8005156 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	699b      	ldr	r3, [r3, #24]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d01c      	beq.n	800511e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80050e4:	4b2d      	ldr	r3, [pc, #180]	@ (800519c <HAL_RCC_OscConfig+0x4b8>)
 80050e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80050ea:	4a2c      	ldr	r2, [pc, #176]	@ (800519c <HAL_RCC_OscConfig+0x4b8>)
 80050ec:	f043 0301 	orr.w	r3, r3, #1
 80050f0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050f4:	f7fc fdac 	bl	8001c50 <HAL_GetTick>
 80050f8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80050fa:	e008      	b.n	800510e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80050fc:	f7fc fda8 	bl	8001c50 <HAL_GetTick>
 8005100:	4602      	mov	r2, r0
 8005102:	693b      	ldr	r3, [r7, #16]
 8005104:	1ad3      	subs	r3, r2, r3
 8005106:	2b02      	cmp	r3, #2
 8005108:	d901      	bls.n	800510e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800510a:	2303      	movs	r3, #3
 800510c:	e0f2      	b.n	80052f4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800510e:	4b23      	ldr	r3, [pc, #140]	@ (800519c <HAL_RCC_OscConfig+0x4b8>)
 8005110:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005114:	f003 0302 	and.w	r3, r3, #2
 8005118:	2b00      	cmp	r3, #0
 800511a:	d0ef      	beq.n	80050fc <HAL_RCC_OscConfig+0x418>
 800511c:	e01b      	b.n	8005156 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800511e:	4b1f      	ldr	r3, [pc, #124]	@ (800519c <HAL_RCC_OscConfig+0x4b8>)
 8005120:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005124:	4a1d      	ldr	r2, [pc, #116]	@ (800519c <HAL_RCC_OscConfig+0x4b8>)
 8005126:	f023 0301 	bic.w	r3, r3, #1
 800512a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800512e:	f7fc fd8f 	bl	8001c50 <HAL_GetTick>
 8005132:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005134:	e008      	b.n	8005148 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005136:	f7fc fd8b 	bl	8001c50 <HAL_GetTick>
 800513a:	4602      	mov	r2, r0
 800513c:	693b      	ldr	r3, [r7, #16]
 800513e:	1ad3      	subs	r3, r2, r3
 8005140:	2b02      	cmp	r3, #2
 8005142:	d901      	bls.n	8005148 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8005144:	2303      	movs	r3, #3
 8005146:	e0d5      	b.n	80052f4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005148:	4b14      	ldr	r3, [pc, #80]	@ (800519c <HAL_RCC_OscConfig+0x4b8>)
 800514a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800514e:	f003 0302 	and.w	r3, r3, #2
 8005152:	2b00      	cmp	r3, #0
 8005154:	d1ef      	bne.n	8005136 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	69db      	ldr	r3, [r3, #28]
 800515a:	2b00      	cmp	r3, #0
 800515c:	f000 80c9 	beq.w	80052f2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005160:	4b0e      	ldr	r3, [pc, #56]	@ (800519c <HAL_RCC_OscConfig+0x4b8>)
 8005162:	689b      	ldr	r3, [r3, #8]
 8005164:	f003 030c 	and.w	r3, r3, #12
 8005168:	2b0c      	cmp	r3, #12
 800516a:	f000 8083 	beq.w	8005274 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	69db      	ldr	r3, [r3, #28]
 8005172:	2b02      	cmp	r3, #2
 8005174:	d15e      	bne.n	8005234 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005176:	4b09      	ldr	r3, [pc, #36]	@ (800519c <HAL_RCC_OscConfig+0x4b8>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	4a08      	ldr	r2, [pc, #32]	@ (800519c <HAL_RCC_OscConfig+0x4b8>)
 800517c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005180:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005182:	f7fc fd65 	bl	8001c50 <HAL_GetTick>
 8005186:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005188:	e00c      	b.n	80051a4 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800518a:	f7fc fd61 	bl	8001c50 <HAL_GetTick>
 800518e:	4602      	mov	r2, r0
 8005190:	693b      	ldr	r3, [r7, #16]
 8005192:	1ad3      	subs	r3, r2, r3
 8005194:	2b02      	cmp	r3, #2
 8005196:	d905      	bls.n	80051a4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8005198:	2303      	movs	r3, #3
 800519a:	e0ab      	b.n	80052f4 <HAL_RCC_OscConfig+0x610>
 800519c:	40021000 	.word	0x40021000
 80051a0:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80051a4:	4b55      	ldr	r3, [pc, #340]	@ (80052fc <HAL_RCC_OscConfig+0x618>)
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d1ec      	bne.n	800518a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80051b0:	4b52      	ldr	r3, [pc, #328]	@ (80052fc <HAL_RCC_OscConfig+0x618>)
 80051b2:	68da      	ldr	r2, [r3, #12]
 80051b4:	4b52      	ldr	r3, [pc, #328]	@ (8005300 <HAL_RCC_OscConfig+0x61c>)
 80051b6:	4013      	ands	r3, r2
 80051b8:	687a      	ldr	r2, [r7, #4]
 80051ba:	6a11      	ldr	r1, [r2, #32]
 80051bc:	687a      	ldr	r2, [r7, #4]
 80051be:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80051c0:	3a01      	subs	r2, #1
 80051c2:	0112      	lsls	r2, r2, #4
 80051c4:	4311      	orrs	r1, r2
 80051c6:	687a      	ldr	r2, [r7, #4]
 80051c8:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80051ca:	0212      	lsls	r2, r2, #8
 80051cc:	4311      	orrs	r1, r2
 80051ce:	687a      	ldr	r2, [r7, #4]
 80051d0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80051d2:	0852      	lsrs	r2, r2, #1
 80051d4:	3a01      	subs	r2, #1
 80051d6:	0552      	lsls	r2, r2, #21
 80051d8:	4311      	orrs	r1, r2
 80051da:	687a      	ldr	r2, [r7, #4]
 80051dc:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80051de:	0852      	lsrs	r2, r2, #1
 80051e0:	3a01      	subs	r2, #1
 80051e2:	0652      	lsls	r2, r2, #25
 80051e4:	4311      	orrs	r1, r2
 80051e6:	687a      	ldr	r2, [r7, #4]
 80051e8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80051ea:	06d2      	lsls	r2, r2, #27
 80051ec:	430a      	orrs	r2, r1
 80051ee:	4943      	ldr	r1, [pc, #268]	@ (80052fc <HAL_RCC_OscConfig+0x618>)
 80051f0:	4313      	orrs	r3, r2
 80051f2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80051f4:	4b41      	ldr	r3, [pc, #260]	@ (80052fc <HAL_RCC_OscConfig+0x618>)
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	4a40      	ldr	r2, [pc, #256]	@ (80052fc <HAL_RCC_OscConfig+0x618>)
 80051fa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80051fe:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005200:	4b3e      	ldr	r3, [pc, #248]	@ (80052fc <HAL_RCC_OscConfig+0x618>)
 8005202:	68db      	ldr	r3, [r3, #12]
 8005204:	4a3d      	ldr	r2, [pc, #244]	@ (80052fc <HAL_RCC_OscConfig+0x618>)
 8005206:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800520a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800520c:	f7fc fd20 	bl	8001c50 <HAL_GetTick>
 8005210:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005212:	e008      	b.n	8005226 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005214:	f7fc fd1c 	bl	8001c50 <HAL_GetTick>
 8005218:	4602      	mov	r2, r0
 800521a:	693b      	ldr	r3, [r7, #16]
 800521c:	1ad3      	subs	r3, r2, r3
 800521e:	2b02      	cmp	r3, #2
 8005220:	d901      	bls.n	8005226 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8005222:	2303      	movs	r3, #3
 8005224:	e066      	b.n	80052f4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005226:	4b35      	ldr	r3, [pc, #212]	@ (80052fc <HAL_RCC_OscConfig+0x618>)
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800522e:	2b00      	cmp	r3, #0
 8005230:	d0f0      	beq.n	8005214 <HAL_RCC_OscConfig+0x530>
 8005232:	e05e      	b.n	80052f2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005234:	4b31      	ldr	r3, [pc, #196]	@ (80052fc <HAL_RCC_OscConfig+0x618>)
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	4a30      	ldr	r2, [pc, #192]	@ (80052fc <HAL_RCC_OscConfig+0x618>)
 800523a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800523e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005240:	f7fc fd06 	bl	8001c50 <HAL_GetTick>
 8005244:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005246:	e008      	b.n	800525a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005248:	f7fc fd02 	bl	8001c50 <HAL_GetTick>
 800524c:	4602      	mov	r2, r0
 800524e:	693b      	ldr	r3, [r7, #16]
 8005250:	1ad3      	subs	r3, r2, r3
 8005252:	2b02      	cmp	r3, #2
 8005254:	d901      	bls.n	800525a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8005256:	2303      	movs	r3, #3
 8005258:	e04c      	b.n	80052f4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800525a:	4b28      	ldr	r3, [pc, #160]	@ (80052fc <HAL_RCC_OscConfig+0x618>)
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005262:	2b00      	cmp	r3, #0
 8005264:	d1f0      	bne.n	8005248 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8005266:	4b25      	ldr	r3, [pc, #148]	@ (80052fc <HAL_RCC_OscConfig+0x618>)
 8005268:	68da      	ldr	r2, [r3, #12]
 800526a:	4924      	ldr	r1, [pc, #144]	@ (80052fc <HAL_RCC_OscConfig+0x618>)
 800526c:	4b25      	ldr	r3, [pc, #148]	@ (8005304 <HAL_RCC_OscConfig+0x620>)
 800526e:	4013      	ands	r3, r2
 8005270:	60cb      	str	r3, [r1, #12]
 8005272:	e03e      	b.n	80052f2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	69db      	ldr	r3, [r3, #28]
 8005278:	2b01      	cmp	r3, #1
 800527a:	d101      	bne.n	8005280 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800527c:	2301      	movs	r3, #1
 800527e:	e039      	b.n	80052f4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005280:	4b1e      	ldr	r3, [pc, #120]	@ (80052fc <HAL_RCC_OscConfig+0x618>)
 8005282:	68db      	ldr	r3, [r3, #12]
 8005284:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005286:	697b      	ldr	r3, [r7, #20]
 8005288:	f003 0203 	and.w	r2, r3, #3
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6a1b      	ldr	r3, [r3, #32]
 8005290:	429a      	cmp	r2, r3
 8005292:	d12c      	bne.n	80052ee <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005294:	697b      	ldr	r3, [r7, #20]
 8005296:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800529e:	3b01      	subs	r3, #1
 80052a0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052a2:	429a      	cmp	r2, r3
 80052a4:	d123      	bne.n	80052ee <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80052a6:	697b      	ldr	r3, [r7, #20]
 80052a8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052b0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80052b2:	429a      	cmp	r2, r3
 80052b4:	d11b      	bne.n	80052ee <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80052b6:	697b      	ldr	r3, [r7, #20]
 80052b8:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052c0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80052c2:	429a      	cmp	r2, r3
 80052c4:	d113      	bne.n	80052ee <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80052c6:	697b      	ldr	r3, [r7, #20]
 80052c8:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052d0:	085b      	lsrs	r3, r3, #1
 80052d2:	3b01      	subs	r3, #1
 80052d4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80052d6:	429a      	cmp	r2, r3
 80052d8:	d109      	bne.n	80052ee <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80052da:	697b      	ldr	r3, [r7, #20]
 80052dc:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80052e4:	085b      	lsrs	r3, r3, #1
 80052e6:	3b01      	subs	r3, #1
 80052e8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80052ea:	429a      	cmp	r2, r3
 80052ec:	d001      	beq.n	80052f2 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80052ee:	2301      	movs	r3, #1
 80052f0:	e000      	b.n	80052f4 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80052f2:	2300      	movs	r3, #0
}
 80052f4:	4618      	mov	r0, r3
 80052f6:	3720      	adds	r7, #32
 80052f8:	46bd      	mov	sp, r7
 80052fa:	bd80      	pop	{r7, pc}
 80052fc:	40021000 	.word	0x40021000
 8005300:	019f800c 	.word	0x019f800c
 8005304:	feeefffc 	.word	0xfeeefffc

08005308 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005308:	b580      	push	{r7, lr}
 800530a:	b086      	sub	sp, #24
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
 8005310:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005312:	2300      	movs	r3, #0
 8005314:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2b00      	cmp	r3, #0
 800531a:	d101      	bne.n	8005320 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800531c:	2301      	movs	r3, #1
 800531e:	e11e      	b.n	800555e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005320:	4b91      	ldr	r3, [pc, #580]	@ (8005568 <HAL_RCC_ClockConfig+0x260>)
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f003 030f 	and.w	r3, r3, #15
 8005328:	683a      	ldr	r2, [r7, #0]
 800532a:	429a      	cmp	r2, r3
 800532c:	d910      	bls.n	8005350 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800532e:	4b8e      	ldr	r3, [pc, #568]	@ (8005568 <HAL_RCC_ClockConfig+0x260>)
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f023 020f 	bic.w	r2, r3, #15
 8005336:	498c      	ldr	r1, [pc, #560]	@ (8005568 <HAL_RCC_ClockConfig+0x260>)
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	4313      	orrs	r3, r2
 800533c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800533e:	4b8a      	ldr	r3, [pc, #552]	@ (8005568 <HAL_RCC_ClockConfig+0x260>)
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f003 030f 	and.w	r3, r3, #15
 8005346:	683a      	ldr	r2, [r7, #0]
 8005348:	429a      	cmp	r2, r3
 800534a:	d001      	beq.n	8005350 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800534c:	2301      	movs	r3, #1
 800534e:	e106      	b.n	800555e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f003 0301 	and.w	r3, r3, #1
 8005358:	2b00      	cmp	r3, #0
 800535a:	d073      	beq.n	8005444 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	685b      	ldr	r3, [r3, #4]
 8005360:	2b03      	cmp	r3, #3
 8005362:	d129      	bne.n	80053b8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005364:	4b81      	ldr	r3, [pc, #516]	@ (800556c <HAL_RCC_ClockConfig+0x264>)
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800536c:	2b00      	cmp	r3, #0
 800536e:	d101      	bne.n	8005374 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005370:	2301      	movs	r3, #1
 8005372:	e0f4      	b.n	800555e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005374:	f000 f99e 	bl	80056b4 <RCC_GetSysClockFreqFromPLLSource>
 8005378:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800537a:	693b      	ldr	r3, [r7, #16]
 800537c:	4a7c      	ldr	r2, [pc, #496]	@ (8005570 <HAL_RCC_ClockConfig+0x268>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d93f      	bls.n	8005402 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005382:	4b7a      	ldr	r3, [pc, #488]	@ (800556c <HAL_RCC_ClockConfig+0x264>)
 8005384:	689b      	ldr	r3, [r3, #8]
 8005386:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800538a:	2b00      	cmp	r3, #0
 800538c:	d009      	beq.n	80053a2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005396:	2b00      	cmp	r3, #0
 8005398:	d033      	beq.n	8005402 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d12f      	bne.n	8005402 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80053a2:	4b72      	ldr	r3, [pc, #456]	@ (800556c <HAL_RCC_ClockConfig+0x264>)
 80053a4:	689b      	ldr	r3, [r3, #8]
 80053a6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80053aa:	4a70      	ldr	r2, [pc, #448]	@ (800556c <HAL_RCC_ClockConfig+0x264>)
 80053ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80053b0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80053b2:	2380      	movs	r3, #128	@ 0x80
 80053b4:	617b      	str	r3, [r7, #20]
 80053b6:	e024      	b.n	8005402 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	685b      	ldr	r3, [r3, #4]
 80053bc:	2b02      	cmp	r3, #2
 80053be:	d107      	bne.n	80053d0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80053c0:	4b6a      	ldr	r3, [pc, #424]	@ (800556c <HAL_RCC_ClockConfig+0x264>)
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d109      	bne.n	80053e0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80053cc:	2301      	movs	r3, #1
 80053ce:	e0c6      	b.n	800555e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80053d0:	4b66      	ldr	r3, [pc, #408]	@ (800556c <HAL_RCC_ClockConfig+0x264>)
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d101      	bne.n	80053e0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80053dc:	2301      	movs	r3, #1
 80053de:	e0be      	b.n	800555e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80053e0:	f000 f8ce 	bl	8005580 <HAL_RCC_GetSysClockFreq>
 80053e4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80053e6:	693b      	ldr	r3, [r7, #16]
 80053e8:	4a61      	ldr	r2, [pc, #388]	@ (8005570 <HAL_RCC_ClockConfig+0x268>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d909      	bls.n	8005402 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80053ee:	4b5f      	ldr	r3, [pc, #380]	@ (800556c <HAL_RCC_ClockConfig+0x264>)
 80053f0:	689b      	ldr	r3, [r3, #8]
 80053f2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80053f6:	4a5d      	ldr	r2, [pc, #372]	@ (800556c <HAL_RCC_ClockConfig+0x264>)
 80053f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80053fc:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80053fe:	2380      	movs	r3, #128	@ 0x80
 8005400:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005402:	4b5a      	ldr	r3, [pc, #360]	@ (800556c <HAL_RCC_ClockConfig+0x264>)
 8005404:	689b      	ldr	r3, [r3, #8]
 8005406:	f023 0203 	bic.w	r2, r3, #3
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	685b      	ldr	r3, [r3, #4]
 800540e:	4957      	ldr	r1, [pc, #348]	@ (800556c <HAL_RCC_ClockConfig+0x264>)
 8005410:	4313      	orrs	r3, r2
 8005412:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005414:	f7fc fc1c 	bl	8001c50 <HAL_GetTick>
 8005418:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800541a:	e00a      	b.n	8005432 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800541c:	f7fc fc18 	bl	8001c50 <HAL_GetTick>
 8005420:	4602      	mov	r2, r0
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	1ad3      	subs	r3, r2, r3
 8005426:	f241 3288 	movw	r2, #5000	@ 0x1388
 800542a:	4293      	cmp	r3, r2
 800542c:	d901      	bls.n	8005432 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800542e:	2303      	movs	r3, #3
 8005430:	e095      	b.n	800555e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005432:	4b4e      	ldr	r3, [pc, #312]	@ (800556c <HAL_RCC_ClockConfig+0x264>)
 8005434:	689b      	ldr	r3, [r3, #8]
 8005436:	f003 020c 	and.w	r2, r3, #12
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	685b      	ldr	r3, [r3, #4]
 800543e:	009b      	lsls	r3, r3, #2
 8005440:	429a      	cmp	r2, r3
 8005442:	d1eb      	bne.n	800541c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f003 0302 	and.w	r3, r3, #2
 800544c:	2b00      	cmp	r3, #0
 800544e:	d023      	beq.n	8005498 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f003 0304 	and.w	r3, r3, #4
 8005458:	2b00      	cmp	r3, #0
 800545a:	d005      	beq.n	8005468 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800545c:	4b43      	ldr	r3, [pc, #268]	@ (800556c <HAL_RCC_ClockConfig+0x264>)
 800545e:	689b      	ldr	r3, [r3, #8]
 8005460:	4a42      	ldr	r2, [pc, #264]	@ (800556c <HAL_RCC_ClockConfig+0x264>)
 8005462:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005466:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f003 0308 	and.w	r3, r3, #8
 8005470:	2b00      	cmp	r3, #0
 8005472:	d007      	beq.n	8005484 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005474:	4b3d      	ldr	r3, [pc, #244]	@ (800556c <HAL_RCC_ClockConfig+0x264>)
 8005476:	689b      	ldr	r3, [r3, #8]
 8005478:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800547c:	4a3b      	ldr	r2, [pc, #236]	@ (800556c <HAL_RCC_ClockConfig+0x264>)
 800547e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005482:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005484:	4b39      	ldr	r3, [pc, #228]	@ (800556c <HAL_RCC_ClockConfig+0x264>)
 8005486:	689b      	ldr	r3, [r3, #8]
 8005488:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	689b      	ldr	r3, [r3, #8]
 8005490:	4936      	ldr	r1, [pc, #216]	@ (800556c <HAL_RCC_ClockConfig+0x264>)
 8005492:	4313      	orrs	r3, r2
 8005494:	608b      	str	r3, [r1, #8]
 8005496:	e008      	b.n	80054aa <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005498:	697b      	ldr	r3, [r7, #20]
 800549a:	2b80      	cmp	r3, #128	@ 0x80
 800549c:	d105      	bne.n	80054aa <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800549e:	4b33      	ldr	r3, [pc, #204]	@ (800556c <HAL_RCC_ClockConfig+0x264>)
 80054a0:	689b      	ldr	r3, [r3, #8]
 80054a2:	4a32      	ldr	r2, [pc, #200]	@ (800556c <HAL_RCC_ClockConfig+0x264>)
 80054a4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80054a8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80054aa:	4b2f      	ldr	r3, [pc, #188]	@ (8005568 <HAL_RCC_ClockConfig+0x260>)
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f003 030f 	and.w	r3, r3, #15
 80054b2:	683a      	ldr	r2, [r7, #0]
 80054b4:	429a      	cmp	r2, r3
 80054b6:	d21d      	bcs.n	80054f4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054b8:	4b2b      	ldr	r3, [pc, #172]	@ (8005568 <HAL_RCC_ClockConfig+0x260>)
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f023 020f 	bic.w	r2, r3, #15
 80054c0:	4929      	ldr	r1, [pc, #164]	@ (8005568 <HAL_RCC_ClockConfig+0x260>)
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	4313      	orrs	r3, r2
 80054c6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80054c8:	f7fc fbc2 	bl	8001c50 <HAL_GetTick>
 80054cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80054ce:	e00a      	b.n	80054e6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80054d0:	f7fc fbbe 	bl	8001c50 <HAL_GetTick>
 80054d4:	4602      	mov	r2, r0
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	1ad3      	subs	r3, r2, r3
 80054da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80054de:	4293      	cmp	r3, r2
 80054e0:	d901      	bls.n	80054e6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80054e2:	2303      	movs	r3, #3
 80054e4:	e03b      	b.n	800555e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80054e6:	4b20      	ldr	r3, [pc, #128]	@ (8005568 <HAL_RCC_ClockConfig+0x260>)
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f003 030f 	and.w	r3, r3, #15
 80054ee:	683a      	ldr	r2, [r7, #0]
 80054f0:	429a      	cmp	r2, r3
 80054f2:	d1ed      	bne.n	80054d0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f003 0304 	and.w	r3, r3, #4
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d008      	beq.n	8005512 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005500:	4b1a      	ldr	r3, [pc, #104]	@ (800556c <HAL_RCC_ClockConfig+0x264>)
 8005502:	689b      	ldr	r3, [r3, #8]
 8005504:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	68db      	ldr	r3, [r3, #12]
 800550c:	4917      	ldr	r1, [pc, #92]	@ (800556c <HAL_RCC_ClockConfig+0x264>)
 800550e:	4313      	orrs	r3, r2
 8005510:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f003 0308 	and.w	r3, r3, #8
 800551a:	2b00      	cmp	r3, #0
 800551c:	d009      	beq.n	8005532 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800551e:	4b13      	ldr	r3, [pc, #76]	@ (800556c <HAL_RCC_ClockConfig+0x264>)
 8005520:	689b      	ldr	r3, [r3, #8]
 8005522:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	691b      	ldr	r3, [r3, #16]
 800552a:	00db      	lsls	r3, r3, #3
 800552c:	490f      	ldr	r1, [pc, #60]	@ (800556c <HAL_RCC_ClockConfig+0x264>)
 800552e:	4313      	orrs	r3, r2
 8005530:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005532:	f000 f825 	bl	8005580 <HAL_RCC_GetSysClockFreq>
 8005536:	4602      	mov	r2, r0
 8005538:	4b0c      	ldr	r3, [pc, #48]	@ (800556c <HAL_RCC_ClockConfig+0x264>)
 800553a:	689b      	ldr	r3, [r3, #8]
 800553c:	091b      	lsrs	r3, r3, #4
 800553e:	f003 030f 	and.w	r3, r3, #15
 8005542:	490c      	ldr	r1, [pc, #48]	@ (8005574 <HAL_RCC_ClockConfig+0x26c>)
 8005544:	5ccb      	ldrb	r3, [r1, r3]
 8005546:	f003 031f 	and.w	r3, r3, #31
 800554a:	fa22 f303 	lsr.w	r3, r2, r3
 800554e:	4a0a      	ldr	r2, [pc, #40]	@ (8005578 <HAL_RCC_ClockConfig+0x270>)
 8005550:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005552:	4b0a      	ldr	r3, [pc, #40]	@ (800557c <HAL_RCC_ClockConfig+0x274>)
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	4618      	mov	r0, r3
 8005558:	f7fc fb2e 	bl	8001bb8 <HAL_InitTick>
 800555c:	4603      	mov	r3, r0
}
 800555e:	4618      	mov	r0, r3
 8005560:	3718      	adds	r7, #24
 8005562:	46bd      	mov	sp, r7
 8005564:	bd80      	pop	{r7, pc}
 8005566:	bf00      	nop
 8005568:	40022000 	.word	0x40022000
 800556c:	40021000 	.word	0x40021000
 8005570:	04c4b400 	.word	0x04c4b400
 8005574:	0800879c 	.word	0x0800879c
 8005578:	20000000 	.word	0x20000000
 800557c:	20000004 	.word	0x20000004

08005580 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005580:	b480      	push	{r7}
 8005582:	b087      	sub	sp, #28
 8005584:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005586:	4b2c      	ldr	r3, [pc, #176]	@ (8005638 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005588:	689b      	ldr	r3, [r3, #8]
 800558a:	f003 030c 	and.w	r3, r3, #12
 800558e:	2b04      	cmp	r3, #4
 8005590:	d102      	bne.n	8005598 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005592:	4b2a      	ldr	r3, [pc, #168]	@ (800563c <HAL_RCC_GetSysClockFreq+0xbc>)
 8005594:	613b      	str	r3, [r7, #16]
 8005596:	e047      	b.n	8005628 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005598:	4b27      	ldr	r3, [pc, #156]	@ (8005638 <HAL_RCC_GetSysClockFreq+0xb8>)
 800559a:	689b      	ldr	r3, [r3, #8]
 800559c:	f003 030c 	and.w	r3, r3, #12
 80055a0:	2b08      	cmp	r3, #8
 80055a2:	d102      	bne.n	80055aa <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80055a4:	4b26      	ldr	r3, [pc, #152]	@ (8005640 <HAL_RCC_GetSysClockFreq+0xc0>)
 80055a6:	613b      	str	r3, [r7, #16]
 80055a8:	e03e      	b.n	8005628 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80055aa:	4b23      	ldr	r3, [pc, #140]	@ (8005638 <HAL_RCC_GetSysClockFreq+0xb8>)
 80055ac:	689b      	ldr	r3, [r3, #8]
 80055ae:	f003 030c 	and.w	r3, r3, #12
 80055b2:	2b0c      	cmp	r3, #12
 80055b4:	d136      	bne.n	8005624 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80055b6:	4b20      	ldr	r3, [pc, #128]	@ (8005638 <HAL_RCC_GetSysClockFreq+0xb8>)
 80055b8:	68db      	ldr	r3, [r3, #12]
 80055ba:	f003 0303 	and.w	r3, r3, #3
 80055be:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80055c0:	4b1d      	ldr	r3, [pc, #116]	@ (8005638 <HAL_RCC_GetSysClockFreq+0xb8>)
 80055c2:	68db      	ldr	r3, [r3, #12]
 80055c4:	091b      	lsrs	r3, r3, #4
 80055c6:	f003 030f 	and.w	r3, r3, #15
 80055ca:	3301      	adds	r3, #1
 80055cc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	2b03      	cmp	r3, #3
 80055d2:	d10c      	bne.n	80055ee <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80055d4:	4a1a      	ldr	r2, [pc, #104]	@ (8005640 <HAL_RCC_GetSysClockFreq+0xc0>)
 80055d6:	68bb      	ldr	r3, [r7, #8]
 80055d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80055dc:	4a16      	ldr	r2, [pc, #88]	@ (8005638 <HAL_RCC_GetSysClockFreq+0xb8>)
 80055de:	68d2      	ldr	r2, [r2, #12]
 80055e0:	0a12      	lsrs	r2, r2, #8
 80055e2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80055e6:	fb02 f303 	mul.w	r3, r2, r3
 80055ea:	617b      	str	r3, [r7, #20]
      break;
 80055ec:	e00c      	b.n	8005608 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80055ee:	4a13      	ldr	r2, [pc, #76]	@ (800563c <HAL_RCC_GetSysClockFreq+0xbc>)
 80055f0:	68bb      	ldr	r3, [r7, #8]
 80055f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80055f6:	4a10      	ldr	r2, [pc, #64]	@ (8005638 <HAL_RCC_GetSysClockFreq+0xb8>)
 80055f8:	68d2      	ldr	r2, [r2, #12]
 80055fa:	0a12      	lsrs	r2, r2, #8
 80055fc:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005600:	fb02 f303 	mul.w	r3, r2, r3
 8005604:	617b      	str	r3, [r7, #20]
      break;
 8005606:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005608:	4b0b      	ldr	r3, [pc, #44]	@ (8005638 <HAL_RCC_GetSysClockFreq+0xb8>)
 800560a:	68db      	ldr	r3, [r3, #12]
 800560c:	0e5b      	lsrs	r3, r3, #25
 800560e:	f003 0303 	and.w	r3, r3, #3
 8005612:	3301      	adds	r3, #1
 8005614:	005b      	lsls	r3, r3, #1
 8005616:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005618:	697a      	ldr	r2, [r7, #20]
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005620:	613b      	str	r3, [r7, #16]
 8005622:	e001      	b.n	8005628 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005624:	2300      	movs	r3, #0
 8005626:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005628:	693b      	ldr	r3, [r7, #16]
}
 800562a:	4618      	mov	r0, r3
 800562c:	371c      	adds	r7, #28
 800562e:	46bd      	mov	sp, r7
 8005630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005634:	4770      	bx	lr
 8005636:	bf00      	nop
 8005638:	40021000 	.word	0x40021000
 800563c:	00f42400 	.word	0x00f42400
 8005640:	007a1200 	.word	0x007a1200

08005644 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005644:	b480      	push	{r7}
 8005646:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005648:	4b03      	ldr	r3, [pc, #12]	@ (8005658 <HAL_RCC_GetHCLKFreq+0x14>)
 800564a:	681b      	ldr	r3, [r3, #0]
}
 800564c:	4618      	mov	r0, r3
 800564e:	46bd      	mov	sp, r7
 8005650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005654:	4770      	bx	lr
 8005656:	bf00      	nop
 8005658:	20000000 	.word	0x20000000

0800565c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800565c:	b580      	push	{r7, lr}
 800565e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005660:	f7ff fff0 	bl	8005644 <HAL_RCC_GetHCLKFreq>
 8005664:	4602      	mov	r2, r0
 8005666:	4b06      	ldr	r3, [pc, #24]	@ (8005680 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005668:	689b      	ldr	r3, [r3, #8]
 800566a:	0a1b      	lsrs	r3, r3, #8
 800566c:	f003 0307 	and.w	r3, r3, #7
 8005670:	4904      	ldr	r1, [pc, #16]	@ (8005684 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005672:	5ccb      	ldrb	r3, [r1, r3]
 8005674:	f003 031f 	and.w	r3, r3, #31
 8005678:	fa22 f303 	lsr.w	r3, r2, r3
}
 800567c:	4618      	mov	r0, r3
 800567e:	bd80      	pop	{r7, pc}
 8005680:	40021000 	.word	0x40021000
 8005684:	080087ac 	.word	0x080087ac

08005688 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005688:	b580      	push	{r7, lr}
 800568a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800568c:	f7ff ffda 	bl	8005644 <HAL_RCC_GetHCLKFreq>
 8005690:	4602      	mov	r2, r0
 8005692:	4b06      	ldr	r3, [pc, #24]	@ (80056ac <HAL_RCC_GetPCLK2Freq+0x24>)
 8005694:	689b      	ldr	r3, [r3, #8]
 8005696:	0adb      	lsrs	r3, r3, #11
 8005698:	f003 0307 	and.w	r3, r3, #7
 800569c:	4904      	ldr	r1, [pc, #16]	@ (80056b0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800569e:	5ccb      	ldrb	r3, [r1, r3]
 80056a0:	f003 031f 	and.w	r3, r3, #31
 80056a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80056a8:	4618      	mov	r0, r3
 80056aa:	bd80      	pop	{r7, pc}
 80056ac:	40021000 	.word	0x40021000
 80056b0:	080087ac 	.word	0x080087ac

080056b4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80056b4:	b480      	push	{r7}
 80056b6:	b087      	sub	sp, #28
 80056b8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80056ba:	4b1e      	ldr	r3, [pc, #120]	@ (8005734 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80056bc:	68db      	ldr	r3, [r3, #12]
 80056be:	f003 0303 	and.w	r3, r3, #3
 80056c2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80056c4:	4b1b      	ldr	r3, [pc, #108]	@ (8005734 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80056c6:	68db      	ldr	r3, [r3, #12]
 80056c8:	091b      	lsrs	r3, r3, #4
 80056ca:	f003 030f 	and.w	r3, r3, #15
 80056ce:	3301      	adds	r3, #1
 80056d0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80056d2:	693b      	ldr	r3, [r7, #16]
 80056d4:	2b03      	cmp	r3, #3
 80056d6:	d10c      	bne.n	80056f2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80056d8:	4a17      	ldr	r2, [pc, #92]	@ (8005738 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80056e0:	4a14      	ldr	r2, [pc, #80]	@ (8005734 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80056e2:	68d2      	ldr	r2, [r2, #12]
 80056e4:	0a12      	lsrs	r2, r2, #8
 80056e6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80056ea:	fb02 f303 	mul.w	r3, r2, r3
 80056ee:	617b      	str	r3, [r7, #20]
    break;
 80056f0:	e00c      	b.n	800570c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80056f2:	4a12      	ldr	r2, [pc, #72]	@ (800573c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80056fa:	4a0e      	ldr	r2, [pc, #56]	@ (8005734 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80056fc:	68d2      	ldr	r2, [r2, #12]
 80056fe:	0a12      	lsrs	r2, r2, #8
 8005700:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005704:	fb02 f303 	mul.w	r3, r2, r3
 8005708:	617b      	str	r3, [r7, #20]
    break;
 800570a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800570c:	4b09      	ldr	r3, [pc, #36]	@ (8005734 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800570e:	68db      	ldr	r3, [r3, #12]
 8005710:	0e5b      	lsrs	r3, r3, #25
 8005712:	f003 0303 	and.w	r3, r3, #3
 8005716:	3301      	adds	r3, #1
 8005718:	005b      	lsls	r3, r3, #1
 800571a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800571c:	697a      	ldr	r2, [r7, #20]
 800571e:	68bb      	ldr	r3, [r7, #8]
 8005720:	fbb2 f3f3 	udiv	r3, r2, r3
 8005724:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8005726:	687b      	ldr	r3, [r7, #4]
}
 8005728:	4618      	mov	r0, r3
 800572a:	371c      	adds	r7, #28
 800572c:	46bd      	mov	sp, r7
 800572e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005732:	4770      	bx	lr
 8005734:	40021000 	.word	0x40021000
 8005738:	007a1200 	.word	0x007a1200
 800573c:	00f42400 	.word	0x00f42400

08005740 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005740:	b580      	push	{r7, lr}
 8005742:	b086      	sub	sp, #24
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005748:	2300      	movs	r3, #0
 800574a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800574c:	2300      	movs	r3, #0
 800574e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005758:	2b00      	cmp	r3, #0
 800575a:	f000 8098 	beq.w	800588e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800575e:	2300      	movs	r3, #0
 8005760:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005762:	4b43      	ldr	r3, [pc, #268]	@ (8005870 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005764:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005766:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800576a:	2b00      	cmp	r3, #0
 800576c:	d10d      	bne.n	800578a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800576e:	4b40      	ldr	r3, [pc, #256]	@ (8005870 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005770:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005772:	4a3f      	ldr	r2, [pc, #252]	@ (8005870 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005774:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005778:	6593      	str	r3, [r2, #88]	@ 0x58
 800577a:	4b3d      	ldr	r3, [pc, #244]	@ (8005870 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800577c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800577e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005782:	60bb      	str	r3, [r7, #8]
 8005784:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005786:	2301      	movs	r3, #1
 8005788:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800578a:	4b3a      	ldr	r3, [pc, #232]	@ (8005874 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	4a39      	ldr	r2, [pc, #228]	@ (8005874 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005790:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005794:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005796:	f7fc fa5b 	bl	8001c50 <HAL_GetTick>
 800579a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800579c:	e009      	b.n	80057b2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800579e:	f7fc fa57 	bl	8001c50 <HAL_GetTick>
 80057a2:	4602      	mov	r2, r0
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	1ad3      	subs	r3, r2, r3
 80057a8:	2b02      	cmp	r3, #2
 80057aa:	d902      	bls.n	80057b2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80057ac:	2303      	movs	r3, #3
 80057ae:	74fb      	strb	r3, [r7, #19]
        break;
 80057b0:	e005      	b.n	80057be <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80057b2:	4b30      	ldr	r3, [pc, #192]	@ (8005874 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d0ef      	beq.n	800579e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80057be:	7cfb      	ldrb	r3, [r7, #19]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d159      	bne.n	8005878 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80057c4:	4b2a      	ldr	r3, [pc, #168]	@ (8005870 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80057c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80057ce:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80057d0:	697b      	ldr	r3, [r7, #20]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d01e      	beq.n	8005814 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057da:	697a      	ldr	r2, [r7, #20]
 80057dc:	429a      	cmp	r2, r3
 80057de:	d019      	beq.n	8005814 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80057e0:	4b23      	ldr	r3, [pc, #140]	@ (8005870 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80057e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057e6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80057ea:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80057ec:	4b20      	ldr	r3, [pc, #128]	@ (8005870 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80057ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057f2:	4a1f      	ldr	r2, [pc, #124]	@ (8005870 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80057f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80057f8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80057fc:	4b1c      	ldr	r3, [pc, #112]	@ (8005870 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80057fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005802:	4a1b      	ldr	r2, [pc, #108]	@ (8005870 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005804:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005808:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800580c:	4a18      	ldr	r2, [pc, #96]	@ (8005870 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800580e:	697b      	ldr	r3, [r7, #20]
 8005810:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005814:	697b      	ldr	r3, [r7, #20]
 8005816:	f003 0301 	and.w	r3, r3, #1
 800581a:	2b00      	cmp	r3, #0
 800581c:	d016      	beq.n	800584c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800581e:	f7fc fa17 	bl	8001c50 <HAL_GetTick>
 8005822:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005824:	e00b      	b.n	800583e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005826:	f7fc fa13 	bl	8001c50 <HAL_GetTick>
 800582a:	4602      	mov	r2, r0
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	1ad3      	subs	r3, r2, r3
 8005830:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005834:	4293      	cmp	r3, r2
 8005836:	d902      	bls.n	800583e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005838:	2303      	movs	r3, #3
 800583a:	74fb      	strb	r3, [r7, #19]
            break;
 800583c:	e006      	b.n	800584c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800583e:	4b0c      	ldr	r3, [pc, #48]	@ (8005870 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005840:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005844:	f003 0302 	and.w	r3, r3, #2
 8005848:	2b00      	cmp	r3, #0
 800584a:	d0ec      	beq.n	8005826 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800584c:	7cfb      	ldrb	r3, [r7, #19]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d10b      	bne.n	800586a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005852:	4b07      	ldr	r3, [pc, #28]	@ (8005870 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005854:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005858:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005860:	4903      	ldr	r1, [pc, #12]	@ (8005870 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005862:	4313      	orrs	r3, r2
 8005864:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005868:	e008      	b.n	800587c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800586a:	7cfb      	ldrb	r3, [r7, #19]
 800586c:	74bb      	strb	r3, [r7, #18]
 800586e:	e005      	b.n	800587c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005870:	40021000 	.word	0x40021000
 8005874:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005878:	7cfb      	ldrb	r3, [r7, #19]
 800587a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800587c:	7c7b      	ldrb	r3, [r7, #17]
 800587e:	2b01      	cmp	r3, #1
 8005880:	d105      	bne.n	800588e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005882:	4ba6      	ldr	r3, [pc, #664]	@ (8005b1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005884:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005886:	4aa5      	ldr	r2, [pc, #660]	@ (8005b1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005888:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800588c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f003 0301 	and.w	r3, r3, #1
 8005896:	2b00      	cmp	r3, #0
 8005898:	d00a      	beq.n	80058b0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800589a:	4ba0      	ldr	r3, [pc, #640]	@ (8005b1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800589c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058a0:	f023 0203 	bic.w	r2, r3, #3
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	685b      	ldr	r3, [r3, #4]
 80058a8:	499c      	ldr	r1, [pc, #624]	@ (8005b1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80058aa:	4313      	orrs	r3, r2
 80058ac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f003 0302 	and.w	r3, r3, #2
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d00a      	beq.n	80058d2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80058bc:	4b97      	ldr	r3, [pc, #604]	@ (8005b1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80058be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058c2:	f023 020c 	bic.w	r2, r3, #12
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	689b      	ldr	r3, [r3, #8]
 80058ca:	4994      	ldr	r1, [pc, #592]	@ (8005b1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80058cc:	4313      	orrs	r3, r2
 80058ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f003 0304 	and.w	r3, r3, #4
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d00a      	beq.n	80058f4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80058de:	4b8f      	ldr	r3, [pc, #572]	@ (8005b1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80058e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058e4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	68db      	ldr	r3, [r3, #12]
 80058ec:	498b      	ldr	r1, [pc, #556]	@ (8005b1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80058ee:	4313      	orrs	r3, r2
 80058f0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f003 0308 	and.w	r3, r3, #8
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d00a      	beq.n	8005916 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005900:	4b86      	ldr	r3, [pc, #536]	@ (8005b1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005902:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005906:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	691b      	ldr	r3, [r3, #16]
 800590e:	4983      	ldr	r1, [pc, #524]	@ (8005b1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005910:	4313      	orrs	r3, r2
 8005912:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f003 0320 	and.w	r3, r3, #32
 800591e:	2b00      	cmp	r3, #0
 8005920:	d00a      	beq.n	8005938 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005922:	4b7e      	ldr	r3, [pc, #504]	@ (8005b1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005924:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005928:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	695b      	ldr	r3, [r3, #20]
 8005930:	497a      	ldr	r1, [pc, #488]	@ (8005b1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005932:	4313      	orrs	r3, r2
 8005934:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005940:	2b00      	cmp	r3, #0
 8005942:	d00a      	beq.n	800595a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005944:	4b75      	ldr	r3, [pc, #468]	@ (8005b1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005946:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800594a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	699b      	ldr	r3, [r3, #24]
 8005952:	4972      	ldr	r1, [pc, #456]	@ (8005b1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005954:	4313      	orrs	r3, r2
 8005956:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005962:	2b00      	cmp	r3, #0
 8005964:	d00a      	beq.n	800597c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005966:	4b6d      	ldr	r3, [pc, #436]	@ (8005b1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005968:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800596c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	69db      	ldr	r3, [r3, #28]
 8005974:	4969      	ldr	r1, [pc, #420]	@ (8005b1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005976:	4313      	orrs	r3, r2
 8005978:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005984:	2b00      	cmp	r3, #0
 8005986:	d00a      	beq.n	800599e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005988:	4b64      	ldr	r3, [pc, #400]	@ (8005b1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800598a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800598e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6a1b      	ldr	r3, [r3, #32]
 8005996:	4961      	ldr	r1, [pc, #388]	@ (8005b1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005998:	4313      	orrs	r3, r2
 800599a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d00a      	beq.n	80059c0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80059aa:	4b5c      	ldr	r3, [pc, #368]	@ (8005b1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80059ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059b0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059b8:	4958      	ldr	r1, [pc, #352]	@ (8005b1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80059ba:	4313      	orrs	r3, r2
 80059bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d015      	beq.n	80059f8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80059cc:	4b53      	ldr	r3, [pc, #332]	@ (8005b1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80059ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059d2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059da:	4950      	ldr	r1, [pc, #320]	@ (8005b1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80059dc:	4313      	orrs	r3, r2
 80059de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059e6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80059ea:	d105      	bne.n	80059f8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80059ec:	4b4b      	ldr	r3, [pc, #300]	@ (8005b1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80059ee:	68db      	ldr	r3, [r3, #12]
 80059f0:	4a4a      	ldr	r2, [pc, #296]	@ (8005b1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80059f2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80059f6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d015      	beq.n	8005a30 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005a04:	4b45      	ldr	r3, [pc, #276]	@ (8005b1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a0a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a12:	4942      	ldr	r1, [pc, #264]	@ (8005b1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a14:	4313      	orrs	r3, r2
 8005a16:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a1e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005a22:	d105      	bne.n	8005a30 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005a24:	4b3d      	ldr	r3, [pc, #244]	@ (8005b1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a26:	68db      	ldr	r3, [r3, #12]
 8005a28:	4a3c      	ldr	r2, [pc, #240]	@ (8005b1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a2a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005a2e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d015      	beq.n	8005a68 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005a3c:	4b37      	ldr	r3, [pc, #220]	@ (8005b1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a42:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a4a:	4934      	ldr	r1, [pc, #208]	@ (8005b1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a4c:	4313      	orrs	r3, r2
 8005a4e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a56:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005a5a:	d105      	bne.n	8005a68 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005a5c:	4b2f      	ldr	r3, [pc, #188]	@ (8005b1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a5e:	68db      	ldr	r3, [r3, #12]
 8005a60:	4a2e      	ldr	r2, [pc, #184]	@ (8005b1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a62:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005a66:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d015      	beq.n	8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005a74:	4b29      	ldr	r3, [pc, #164]	@ (8005b1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a7a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a82:	4926      	ldr	r1, [pc, #152]	@ (8005b1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a84:	4313      	orrs	r3, r2
 8005a86:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a8e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005a92:	d105      	bne.n	8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005a94:	4b21      	ldr	r3, [pc, #132]	@ (8005b1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a96:	68db      	ldr	r3, [r3, #12]
 8005a98:	4a20      	ldr	r2, [pc, #128]	@ (8005b1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a9a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005a9e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d015      	beq.n	8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005aac:	4b1b      	ldr	r3, [pc, #108]	@ (8005b1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005aae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ab2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005aba:	4918      	ldr	r1, [pc, #96]	@ (8005b1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005abc:	4313      	orrs	r3, r2
 8005abe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ac6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005aca:	d105      	bne.n	8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005acc:	4b13      	ldr	r3, [pc, #76]	@ (8005b1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ace:	68db      	ldr	r3, [r3, #12]
 8005ad0:	4a12      	ldr	r2, [pc, #72]	@ (8005b1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ad2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005ad6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d015      	beq.n	8005b10 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005ae4:	4b0d      	ldr	r3, [pc, #52]	@ (8005b1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ae6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005aea:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005af2:	490a      	ldr	r1, [pc, #40]	@ (8005b1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005af4:	4313      	orrs	r3, r2
 8005af6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005afe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005b02:	d105      	bne.n	8005b10 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005b04:	4b05      	ldr	r3, [pc, #20]	@ (8005b1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b06:	68db      	ldr	r3, [r3, #12]
 8005b08:	4a04      	ldr	r2, [pc, #16]	@ (8005b1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b0a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005b0e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005b10:	7cbb      	ldrb	r3, [r7, #18]
}
 8005b12:	4618      	mov	r0, r3
 8005b14:	3718      	adds	r7, #24
 8005b16:	46bd      	mov	sp, r7
 8005b18:	bd80      	pop	{r7, pc}
 8005b1a:	bf00      	nop
 8005b1c:	40021000 	.word	0x40021000

08005b20 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b082      	sub	sp, #8
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d101      	bne.n	8005b32 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005b2e:	2301      	movs	r3, #1
 8005b30:	e049      	b.n	8005bc6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005b38:	b2db      	uxtb	r3, r3
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d106      	bne.n	8005b4c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	2200      	movs	r2, #0
 8005b42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005b46:	6878      	ldr	r0, [r7, #4]
 8005b48:	f7fb fedc 	bl	8001904 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2202      	movs	r2, #2
 8005b50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681a      	ldr	r2, [r3, #0]
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	3304      	adds	r3, #4
 8005b5c:	4619      	mov	r1, r3
 8005b5e:	4610      	mov	r0, r2
 8005b60:	f000 fb4a 	bl	80061f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2201      	movs	r2, #1
 8005b68:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2201      	movs	r2, #1
 8005b70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2201      	movs	r2, #1
 8005b78:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2201      	movs	r2, #1
 8005b80:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2201      	movs	r2, #1
 8005b88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2201      	movs	r2, #1
 8005b90:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2201      	movs	r2, #1
 8005b98:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2201      	movs	r2, #1
 8005ba0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2201      	movs	r2, #1
 8005ba8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2201      	movs	r2, #1
 8005bb0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2201      	movs	r2, #1
 8005bb8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2201      	movs	r2, #1
 8005bc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005bc4:	2300      	movs	r3, #0
}
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	3708      	adds	r7, #8
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	bd80      	pop	{r7, pc}

08005bce <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005bce:	b580      	push	{r7, lr}
 8005bd0:	b082      	sub	sp, #8
 8005bd2:	af00      	add	r7, sp, #0
 8005bd4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d101      	bne.n	8005be0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005bdc:	2301      	movs	r3, #1
 8005bde:	e049      	b.n	8005c74 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005be6:	b2db      	uxtb	r3, r3
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d106      	bne.n	8005bfa <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2200      	movs	r2, #0
 8005bf0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005bf4:	6878      	ldr	r0, [r7, #4]
 8005bf6:	f000 f841 	bl	8005c7c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	2202      	movs	r2, #2
 8005bfe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681a      	ldr	r2, [r3, #0]
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	3304      	adds	r3, #4
 8005c0a:	4619      	mov	r1, r3
 8005c0c:	4610      	mov	r0, r2
 8005c0e:	f000 faf3 	bl	80061f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	2201      	movs	r2, #1
 8005c16:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2201      	movs	r2, #1
 8005c1e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2201      	movs	r2, #1
 8005c26:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2201      	movs	r2, #1
 8005c2e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	2201      	movs	r2, #1
 8005c36:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	2201      	movs	r2, #1
 8005c3e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2201      	movs	r2, #1
 8005c46:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2201      	movs	r2, #1
 8005c4e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	2201      	movs	r2, #1
 8005c56:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2201      	movs	r2, #1
 8005c5e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	2201      	movs	r2, #1
 8005c66:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2201      	movs	r2, #1
 8005c6e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005c72:	2300      	movs	r3, #0
}
 8005c74:	4618      	mov	r0, r3
 8005c76:	3708      	adds	r7, #8
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	bd80      	pop	{r7, pc}

08005c7c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005c7c:	b480      	push	{r7}
 8005c7e:	b083      	sub	sp, #12
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005c84:	bf00      	nop
 8005c86:	370c      	adds	r7, #12
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8e:	4770      	bx	lr

08005c90 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b086      	sub	sp, #24
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
 8005c98:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d101      	bne.n	8005ca4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005ca0:	2301      	movs	r3, #1
 8005ca2:	e097      	b.n	8005dd4 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005caa:	b2db      	uxtb	r3, r3
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d106      	bne.n	8005cbe <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005cb8:	6878      	ldr	r0, [r7, #4]
 8005cba:	f7fb fd91 	bl	80017e0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2202      	movs	r2, #2
 8005cc2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	689b      	ldr	r3, [r3, #8]
 8005ccc:	687a      	ldr	r2, [r7, #4]
 8005cce:	6812      	ldr	r2, [r2, #0]
 8005cd0:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8005cd4:	f023 0307 	bic.w	r3, r3, #7
 8005cd8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681a      	ldr	r2, [r3, #0]
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	3304      	adds	r3, #4
 8005ce2:	4619      	mov	r1, r3
 8005ce4:	4610      	mov	r0, r2
 8005ce6:	f000 fa87 	bl	80061f8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	689b      	ldr	r3, [r3, #8]
 8005cf0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	699b      	ldr	r3, [r3, #24]
 8005cf8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	6a1b      	ldr	r3, [r3, #32]
 8005d00:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	697a      	ldr	r2, [r7, #20]
 8005d08:	4313      	orrs	r3, r2
 8005d0a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005d0c:	693b      	ldr	r3, [r7, #16]
 8005d0e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005d12:	f023 0303 	bic.w	r3, r3, #3
 8005d16:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	689a      	ldr	r2, [r3, #8]
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	699b      	ldr	r3, [r3, #24]
 8005d20:	021b      	lsls	r3, r3, #8
 8005d22:	4313      	orrs	r3, r2
 8005d24:	693a      	ldr	r2, [r7, #16]
 8005d26:	4313      	orrs	r3, r2
 8005d28:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005d2a:	693b      	ldr	r3, [r7, #16]
 8005d2c:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8005d30:	f023 030c 	bic.w	r3, r3, #12
 8005d34:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005d36:	693b      	ldr	r3, [r7, #16]
 8005d38:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005d3c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005d40:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	68da      	ldr	r2, [r3, #12]
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	69db      	ldr	r3, [r3, #28]
 8005d4a:	021b      	lsls	r3, r3, #8
 8005d4c:	4313      	orrs	r3, r2
 8005d4e:	693a      	ldr	r2, [r7, #16]
 8005d50:	4313      	orrs	r3, r2
 8005d52:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	691b      	ldr	r3, [r3, #16]
 8005d58:	011a      	lsls	r2, r3, #4
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	6a1b      	ldr	r3, [r3, #32]
 8005d5e:	031b      	lsls	r3, r3, #12
 8005d60:	4313      	orrs	r3, r2
 8005d62:	693a      	ldr	r2, [r7, #16]
 8005d64:	4313      	orrs	r3, r2
 8005d66:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8005d6e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8005d76:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	685a      	ldr	r2, [r3, #4]
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	695b      	ldr	r3, [r3, #20]
 8005d80:	011b      	lsls	r3, r3, #4
 8005d82:	4313      	orrs	r3, r2
 8005d84:	68fa      	ldr	r2, [r7, #12]
 8005d86:	4313      	orrs	r3, r2
 8005d88:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	697a      	ldr	r2, [r7, #20]
 8005d90:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	693a      	ldr	r2, [r7, #16]
 8005d98:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	68fa      	ldr	r2, [r7, #12]
 8005da0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	2201      	movs	r2, #1
 8005da6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	2201      	movs	r2, #1
 8005dae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	2201      	movs	r2, #1
 8005db6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	2201      	movs	r2, #1
 8005dbe:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2201      	movs	r2, #1
 8005dc6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2201      	movs	r2, #1
 8005dce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005dd2:	2300      	movs	r3, #0
}
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	3718      	adds	r7, #24
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	bd80      	pop	{r7, pc}

08005ddc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	b086      	sub	sp, #24
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	60f8      	str	r0, [r7, #12]
 8005de4:	60b9      	str	r1, [r7, #8]
 8005de6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005de8:	2300      	movs	r3, #0
 8005dea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005df2:	2b01      	cmp	r3, #1
 8005df4:	d101      	bne.n	8005dfa <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005df6:	2302      	movs	r3, #2
 8005df8:	e0ff      	b.n	8005ffa <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	2201      	movs	r2, #1
 8005dfe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2b14      	cmp	r3, #20
 8005e06:	f200 80f0 	bhi.w	8005fea <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005e0a:	a201      	add	r2, pc, #4	@ (adr r2, 8005e10 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005e0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e10:	08005e65 	.word	0x08005e65
 8005e14:	08005feb 	.word	0x08005feb
 8005e18:	08005feb 	.word	0x08005feb
 8005e1c:	08005feb 	.word	0x08005feb
 8005e20:	08005ea5 	.word	0x08005ea5
 8005e24:	08005feb 	.word	0x08005feb
 8005e28:	08005feb 	.word	0x08005feb
 8005e2c:	08005feb 	.word	0x08005feb
 8005e30:	08005ee7 	.word	0x08005ee7
 8005e34:	08005feb 	.word	0x08005feb
 8005e38:	08005feb 	.word	0x08005feb
 8005e3c:	08005feb 	.word	0x08005feb
 8005e40:	08005f27 	.word	0x08005f27
 8005e44:	08005feb 	.word	0x08005feb
 8005e48:	08005feb 	.word	0x08005feb
 8005e4c:	08005feb 	.word	0x08005feb
 8005e50:	08005f69 	.word	0x08005f69
 8005e54:	08005feb 	.word	0x08005feb
 8005e58:	08005feb 	.word	0x08005feb
 8005e5c:	08005feb 	.word	0x08005feb
 8005e60:	08005fa9 	.word	0x08005fa9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	68b9      	ldr	r1, [r7, #8]
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	f000 fa60 	bl	8006330 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	699a      	ldr	r2, [r3, #24]
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f042 0208 	orr.w	r2, r2, #8
 8005e7e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	699a      	ldr	r2, [r3, #24]
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f022 0204 	bic.w	r2, r2, #4
 8005e8e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	6999      	ldr	r1, [r3, #24]
 8005e96:	68bb      	ldr	r3, [r7, #8]
 8005e98:	691a      	ldr	r2, [r3, #16]
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	430a      	orrs	r2, r1
 8005ea0:	619a      	str	r2, [r3, #24]
      break;
 8005ea2:	e0a5      	b.n	8005ff0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	68b9      	ldr	r1, [r7, #8]
 8005eaa:	4618      	mov	r0, r3
 8005eac:	f000 fad0 	bl	8006450 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	699a      	ldr	r2, [r3, #24]
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005ebe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	699a      	ldr	r2, [r3, #24]
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005ece:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	6999      	ldr	r1, [r3, #24]
 8005ed6:	68bb      	ldr	r3, [r7, #8]
 8005ed8:	691b      	ldr	r3, [r3, #16]
 8005eda:	021a      	lsls	r2, r3, #8
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	430a      	orrs	r2, r1
 8005ee2:	619a      	str	r2, [r3, #24]
      break;
 8005ee4:	e084      	b.n	8005ff0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	68b9      	ldr	r1, [r7, #8]
 8005eec:	4618      	mov	r0, r3
 8005eee:	f000 fb39 	bl	8006564 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	69da      	ldr	r2, [r3, #28]
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f042 0208 	orr.w	r2, r2, #8
 8005f00:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	69da      	ldr	r2, [r3, #28]
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f022 0204 	bic.w	r2, r2, #4
 8005f10:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	69d9      	ldr	r1, [r3, #28]
 8005f18:	68bb      	ldr	r3, [r7, #8]
 8005f1a:	691a      	ldr	r2, [r3, #16]
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	430a      	orrs	r2, r1
 8005f22:	61da      	str	r2, [r3, #28]
      break;
 8005f24:	e064      	b.n	8005ff0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	68b9      	ldr	r1, [r7, #8]
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	f000 fba1 	bl	8006674 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	69da      	ldr	r2, [r3, #28]
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005f40:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	69da      	ldr	r2, [r3, #28]
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005f50:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	69d9      	ldr	r1, [r3, #28]
 8005f58:	68bb      	ldr	r3, [r7, #8]
 8005f5a:	691b      	ldr	r3, [r3, #16]
 8005f5c:	021a      	lsls	r2, r3, #8
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	430a      	orrs	r2, r1
 8005f64:	61da      	str	r2, [r3, #28]
      break;
 8005f66:	e043      	b.n	8005ff0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	68b9      	ldr	r1, [r7, #8]
 8005f6e:	4618      	mov	r0, r3
 8005f70:	f000 fc0a 	bl	8006788 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	f042 0208 	orr.w	r2, r2, #8
 8005f82:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f022 0204 	bic.w	r2, r2, #4
 8005f92:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8005f9a:	68bb      	ldr	r3, [r7, #8]
 8005f9c:	691a      	ldr	r2, [r3, #16]
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	430a      	orrs	r2, r1
 8005fa4:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8005fa6:	e023      	b.n	8005ff0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	68b9      	ldr	r1, [r7, #8]
 8005fae:	4618      	mov	r0, r3
 8005fb0:	f000 fc4e 	bl	8006850 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005fc2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005fd2:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8005fda:	68bb      	ldr	r3, [r7, #8]
 8005fdc:	691b      	ldr	r3, [r3, #16]
 8005fde:	021a      	lsls	r2, r3, #8
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	430a      	orrs	r2, r1
 8005fe6:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8005fe8:	e002      	b.n	8005ff0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005fea:	2301      	movs	r3, #1
 8005fec:	75fb      	strb	r3, [r7, #23]
      break;
 8005fee:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005ff8:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	3718      	adds	r7, #24
 8005ffe:	46bd      	mov	sp, r7
 8006000:	bd80      	pop	{r7, pc}
 8006002:	bf00      	nop

08006004 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006004:	b580      	push	{r7, lr}
 8006006:	b084      	sub	sp, #16
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
 800600c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800600e:	2300      	movs	r3, #0
 8006010:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006018:	2b01      	cmp	r3, #1
 800601a:	d101      	bne.n	8006020 <HAL_TIM_ConfigClockSource+0x1c>
 800601c:	2302      	movs	r3, #2
 800601e:	e0de      	b.n	80061de <HAL_TIM_ConfigClockSource+0x1da>
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2201      	movs	r2, #1
 8006024:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2202      	movs	r2, #2
 800602c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	689b      	ldr	r3, [r3, #8]
 8006036:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006038:	68bb      	ldr	r3, [r7, #8]
 800603a:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800603e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006042:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006044:	68bb      	ldr	r3, [r7, #8]
 8006046:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800604a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	68ba      	ldr	r2, [r7, #8]
 8006052:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	4a63      	ldr	r2, [pc, #396]	@ (80061e8 <HAL_TIM_ConfigClockSource+0x1e4>)
 800605a:	4293      	cmp	r3, r2
 800605c:	f000 80a9 	beq.w	80061b2 <HAL_TIM_ConfigClockSource+0x1ae>
 8006060:	4a61      	ldr	r2, [pc, #388]	@ (80061e8 <HAL_TIM_ConfigClockSource+0x1e4>)
 8006062:	4293      	cmp	r3, r2
 8006064:	f200 80ae 	bhi.w	80061c4 <HAL_TIM_ConfigClockSource+0x1c0>
 8006068:	4a60      	ldr	r2, [pc, #384]	@ (80061ec <HAL_TIM_ConfigClockSource+0x1e8>)
 800606a:	4293      	cmp	r3, r2
 800606c:	f000 80a1 	beq.w	80061b2 <HAL_TIM_ConfigClockSource+0x1ae>
 8006070:	4a5e      	ldr	r2, [pc, #376]	@ (80061ec <HAL_TIM_ConfigClockSource+0x1e8>)
 8006072:	4293      	cmp	r3, r2
 8006074:	f200 80a6 	bhi.w	80061c4 <HAL_TIM_ConfigClockSource+0x1c0>
 8006078:	4a5d      	ldr	r2, [pc, #372]	@ (80061f0 <HAL_TIM_ConfigClockSource+0x1ec>)
 800607a:	4293      	cmp	r3, r2
 800607c:	f000 8099 	beq.w	80061b2 <HAL_TIM_ConfigClockSource+0x1ae>
 8006080:	4a5b      	ldr	r2, [pc, #364]	@ (80061f0 <HAL_TIM_ConfigClockSource+0x1ec>)
 8006082:	4293      	cmp	r3, r2
 8006084:	f200 809e 	bhi.w	80061c4 <HAL_TIM_ConfigClockSource+0x1c0>
 8006088:	4a5a      	ldr	r2, [pc, #360]	@ (80061f4 <HAL_TIM_ConfigClockSource+0x1f0>)
 800608a:	4293      	cmp	r3, r2
 800608c:	f000 8091 	beq.w	80061b2 <HAL_TIM_ConfigClockSource+0x1ae>
 8006090:	4a58      	ldr	r2, [pc, #352]	@ (80061f4 <HAL_TIM_ConfigClockSource+0x1f0>)
 8006092:	4293      	cmp	r3, r2
 8006094:	f200 8096 	bhi.w	80061c4 <HAL_TIM_ConfigClockSource+0x1c0>
 8006098:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800609c:	f000 8089 	beq.w	80061b2 <HAL_TIM_ConfigClockSource+0x1ae>
 80060a0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80060a4:	f200 808e 	bhi.w	80061c4 <HAL_TIM_ConfigClockSource+0x1c0>
 80060a8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80060ac:	d03e      	beq.n	800612c <HAL_TIM_ConfigClockSource+0x128>
 80060ae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80060b2:	f200 8087 	bhi.w	80061c4 <HAL_TIM_ConfigClockSource+0x1c0>
 80060b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80060ba:	f000 8086 	beq.w	80061ca <HAL_TIM_ConfigClockSource+0x1c6>
 80060be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80060c2:	d87f      	bhi.n	80061c4 <HAL_TIM_ConfigClockSource+0x1c0>
 80060c4:	2b70      	cmp	r3, #112	@ 0x70
 80060c6:	d01a      	beq.n	80060fe <HAL_TIM_ConfigClockSource+0xfa>
 80060c8:	2b70      	cmp	r3, #112	@ 0x70
 80060ca:	d87b      	bhi.n	80061c4 <HAL_TIM_ConfigClockSource+0x1c0>
 80060cc:	2b60      	cmp	r3, #96	@ 0x60
 80060ce:	d050      	beq.n	8006172 <HAL_TIM_ConfigClockSource+0x16e>
 80060d0:	2b60      	cmp	r3, #96	@ 0x60
 80060d2:	d877      	bhi.n	80061c4 <HAL_TIM_ConfigClockSource+0x1c0>
 80060d4:	2b50      	cmp	r3, #80	@ 0x50
 80060d6:	d03c      	beq.n	8006152 <HAL_TIM_ConfigClockSource+0x14e>
 80060d8:	2b50      	cmp	r3, #80	@ 0x50
 80060da:	d873      	bhi.n	80061c4 <HAL_TIM_ConfigClockSource+0x1c0>
 80060dc:	2b40      	cmp	r3, #64	@ 0x40
 80060de:	d058      	beq.n	8006192 <HAL_TIM_ConfigClockSource+0x18e>
 80060e0:	2b40      	cmp	r3, #64	@ 0x40
 80060e2:	d86f      	bhi.n	80061c4 <HAL_TIM_ConfigClockSource+0x1c0>
 80060e4:	2b30      	cmp	r3, #48	@ 0x30
 80060e6:	d064      	beq.n	80061b2 <HAL_TIM_ConfigClockSource+0x1ae>
 80060e8:	2b30      	cmp	r3, #48	@ 0x30
 80060ea:	d86b      	bhi.n	80061c4 <HAL_TIM_ConfigClockSource+0x1c0>
 80060ec:	2b20      	cmp	r3, #32
 80060ee:	d060      	beq.n	80061b2 <HAL_TIM_ConfigClockSource+0x1ae>
 80060f0:	2b20      	cmp	r3, #32
 80060f2:	d867      	bhi.n	80061c4 <HAL_TIM_ConfigClockSource+0x1c0>
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d05c      	beq.n	80061b2 <HAL_TIM_ConfigClockSource+0x1ae>
 80060f8:	2b10      	cmp	r3, #16
 80060fa:	d05a      	beq.n	80061b2 <HAL_TIM_ConfigClockSource+0x1ae>
 80060fc:	e062      	b.n	80061c4 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006106:	683b      	ldr	r3, [r7, #0]
 8006108:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800610e:	f000 fce9 	bl	8006ae4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	689b      	ldr	r3, [r3, #8]
 8006118:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800611a:	68bb      	ldr	r3, [r7, #8]
 800611c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006120:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	68ba      	ldr	r2, [r7, #8]
 8006128:	609a      	str	r2, [r3, #8]
      break;
 800612a:	e04f      	b.n	80061cc <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800613c:	f000 fcd2 	bl	8006ae4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	689a      	ldr	r2, [r3, #8]
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800614e:	609a      	str	r2, [r3, #8]
      break;
 8006150:	e03c      	b.n	80061cc <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006156:	683b      	ldr	r3, [r7, #0]
 8006158:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800615a:	683b      	ldr	r3, [r7, #0]
 800615c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800615e:	461a      	mov	r2, r3
 8006160:	f000 fc44 	bl	80069ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	2150      	movs	r1, #80	@ 0x50
 800616a:	4618      	mov	r0, r3
 800616c:	f000 fc9d 	bl	8006aaa <TIM_ITRx_SetConfig>
      break;
 8006170:	e02c      	b.n	80061cc <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006176:	683b      	ldr	r3, [r7, #0]
 8006178:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800617e:	461a      	mov	r2, r3
 8006180:	f000 fc63 	bl	8006a4a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	2160      	movs	r1, #96	@ 0x60
 800618a:	4618      	mov	r0, r3
 800618c:	f000 fc8d 	bl	8006aaa <TIM_ITRx_SetConfig>
      break;
 8006190:	e01c      	b.n	80061cc <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800619a:	683b      	ldr	r3, [r7, #0]
 800619c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800619e:	461a      	mov	r2, r3
 80061a0:	f000 fc24 	bl	80069ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	2140      	movs	r1, #64	@ 0x40
 80061aa:	4618      	mov	r0, r3
 80061ac:	f000 fc7d 	bl	8006aaa <TIM_ITRx_SetConfig>
      break;
 80061b0:	e00c      	b.n	80061cc <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681a      	ldr	r2, [r3, #0]
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	4619      	mov	r1, r3
 80061bc:	4610      	mov	r0, r2
 80061be:	f000 fc74 	bl	8006aaa <TIM_ITRx_SetConfig>
      break;
 80061c2:	e003      	b.n	80061cc <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 80061c4:	2301      	movs	r3, #1
 80061c6:	73fb      	strb	r3, [r7, #15]
      break;
 80061c8:	e000      	b.n	80061cc <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 80061ca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2201      	movs	r2, #1
 80061d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2200      	movs	r2, #0
 80061d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80061dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80061de:	4618      	mov	r0, r3
 80061e0:	3710      	adds	r7, #16
 80061e2:	46bd      	mov	sp, r7
 80061e4:	bd80      	pop	{r7, pc}
 80061e6:	bf00      	nop
 80061e8:	00100070 	.word	0x00100070
 80061ec:	00100040 	.word	0x00100040
 80061f0:	00100030 	.word	0x00100030
 80061f4:	00100020 	.word	0x00100020

080061f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80061f8:	b480      	push	{r7}
 80061fa:	b085      	sub	sp, #20
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
 8006200:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	4a42      	ldr	r2, [pc, #264]	@ (8006314 <TIM_Base_SetConfig+0x11c>)
 800620c:	4293      	cmp	r3, r2
 800620e:	d00f      	beq.n	8006230 <TIM_Base_SetConfig+0x38>
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006216:	d00b      	beq.n	8006230 <TIM_Base_SetConfig+0x38>
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	4a3f      	ldr	r2, [pc, #252]	@ (8006318 <TIM_Base_SetConfig+0x120>)
 800621c:	4293      	cmp	r3, r2
 800621e:	d007      	beq.n	8006230 <TIM_Base_SetConfig+0x38>
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	4a3e      	ldr	r2, [pc, #248]	@ (800631c <TIM_Base_SetConfig+0x124>)
 8006224:	4293      	cmp	r3, r2
 8006226:	d003      	beq.n	8006230 <TIM_Base_SetConfig+0x38>
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	4a3d      	ldr	r2, [pc, #244]	@ (8006320 <TIM_Base_SetConfig+0x128>)
 800622c:	4293      	cmp	r3, r2
 800622e:	d108      	bne.n	8006242 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006236:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	685b      	ldr	r3, [r3, #4]
 800623c:	68fa      	ldr	r2, [r7, #12]
 800623e:	4313      	orrs	r3, r2
 8006240:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	4a33      	ldr	r2, [pc, #204]	@ (8006314 <TIM_Base_SetConfig+0x11c>)
 8006246:	4293      	cmp	r3, r2
 8006248:	d01b      	beq.n	8006282 <TIM_Base_SetConfig+0x8a>
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006250:	d017      	beq.n	8006282 <TIM_Base_SetConfig+0x8a>
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	4a30      	ldr	r2, [pc, #192]	@ (8006318 <TIM_Base_SetConfig+0x120>)
 8006256:	4293      	cmp	r3, r2
 8006258:	d013      	beq.n	8006282 <TIM_Base_SetConfig+0x8a>
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	4a2f      	ldr	r2, [pc, #188]	@ (800631c <TIM_Base_SetConfig+0x124>)
 800625e:	4293      	cmp	r3, r2
 8006260:	d00f      	beq.n	8006282 <TIM_Base_SetConfig+0x8a>
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	4a2e      	ldr	r2, [pc, #184]	@ (8006320 <TIM_Base_SetConfig+0x128>)
 8006266:	4293      	cmp	r3, r2
 8006268:	d00b      	beq.n	8006282 <TIM_Base_SetConfig+0x8a>
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	4a2d      	ldr	r2, [pc, #180]	@ (8006324 <TIM_Base_SetConfig+0x12c>)
 800626e:	4293      	cmp	r3, r2
 8006270:	d007      	beq.n	8006282 <TIM_Base_SetConfig+0x8a>
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	4a2c      	ldr	r2, [pc, #176]	@ (8006328 <TIM_Base_SetConfig+0x130>)
 8006276:	4293      	cmp	r3, r2
 8006278:	d003      	beq.n	8006282 <TIM_Base_SetConfig+0x8a>
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	4a2b      	ldr	r2, [pc, #172]	@ (800632c <TIM_Base_SetConfig+0x134>)
 800627e:	4293      	cmp	r3, r2
 8006280:	d108      	bne.n	8006294 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006288:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800628a:	683b      	ldr	r3, [r7, #0]
 800628c:	68db      	ldr	r3, [r3, #12]
 800628e:	68fa      	ldr	r2, [r7, #12]
 8006290:	4313      	orrs	r3, r2
 8006292:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	695b      	ldr	r3, [r3, #20]
 800629e:	4313      	orrs	r3, r2
 80062a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	68fa      	ldr	r2, [r7, #12]
 80062a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	689a      	ldr	r2, [r3, #8]
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	681a      	ldr	r2, [r3, #0]
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	4a16      	ldr	r2, [pc, #88]	@ (8006314 <TIM_Base_SetConfig+0x11c>)
 80062bc:	4293      	cmp	r3, r2
 80062be:	d00f      	beq.n	80062e0 <TIM_Base_SetConfig+0xe8>
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	4a17      	ldr	r2, [pc, #92]	@ (8006320 <TIM_Base_SetConfig+0x128>)
 80062c4:	4293      	cmp	r3, r2
 80062c6:	d00b      	beq.n	80062e0 <TIM_Base_SetConfig+0xe8>
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	4a16      	ldr	r2, [pc, #88]	@ (8006324 <TIM_Base_SetConfig+0x12c>)
 80062cc:	4293      	cmp	r3, r2
 80062ce:	d007      	beq.n	80062e0 <TIM_Base_SetConfig+0xe8>
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	4a15      	ldr	r2, [pc, #84]	@ (8006328 <TIM_Base_SetConfig+0x130>)
 80062d4:	4293      	cmp	r3, r2
 80062d6:	d003      	beq.n	80062e0 <TIM_Base_SetConfig+0xe8>
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	4a14      	ldr	r2, [pc, #80]	@ (800632c <TIM_Base_SetConfig+0x134>)
 80062dc:	4293      	cmp	r3, r2
 80062de:	d103      	bne.n	80062e8 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	691a      	ldr	r2, [r3, #16]
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2201      	movs	r2, #1
 80062ec:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	691b      	ldr	r3, [r3, #16]
 80062f2:	f003 0301 	and.w	r3, r3, #1
 80062f6:	2b01      	cmp	r3, #1
 80062f8:	d105      	bne.n	8006306 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	691b      	ldr	r3, [r3, #16]
 80062fe:	f023 0201 	bic.w	r2, r3, #1
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	611a      	str	r2, [r3, #16]
  }
}
 8006306:	bf00      	nop
 8006308:	3714      	adds	r7, #20
 800630a:	46bd      	mov	sp, r7
 800630c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006310:	4770      	bx	lr
 8006312:	bf00      	nop
 8006314:	40012c00 	.word	0x40012c00
 8006318:	40000400 	.word	0x40000400
 800631c:	40000800 	.word	0x40000800
 8006320:	40013400 	.word	0x40013400
 8006324:	40014000 	.word	0x40014000
 8006328:	40014400 	.word	0x40014400
 800632c:	40014800 	.word	0x40014800

08006330 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006330:	b480      	push	{r7}
 8006332:	b087      	sub	sp, #28
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
 8006338:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	6a1b      	ldr	r3, [r3, #32]
 800633e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	6a1b      	ldr	r3, [r3, #32]
 8006344:	f023 0201 	bic.w	r2, r3, #1
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	685b      	ldr	r3, [r3, #4]
 8006350:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	699b      	ldr	r3, [r3, #24]
 8006356:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800635e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006362:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	f023 0303 	bic.w	r3, r3, #3
 800636a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	68fa      	ldr	r2, [r7, #12]
 8006372:	4313      	orrs	r3, r2
 8006374:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006376:	697b      	ldr	r3, [r7, #20]
 8006378:	f023 0302 	bic.w	r3, r3, #2
 800637c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800637e:	683b      	ldr	r3, [r7, #0]
 8006380:	689b      	ldr	r3, [r3, #8]
 8006382:	697a      	ldr	r2, [r7, #20]
 8006384:	4313      	orrs	r3, r2
 8006386:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	4a2c      	ldr	r2, [pc, #176]	@ (800643c <TIM_OC1_SetConfig+0x10c>)
 800638c:	4293      	cmp	r3, r2
 800638e:	d00f      	beq.n	80063b0 <TIM_OC1_SetConfig+0x80>
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	4a2b      	ldr	r2, [pc, #172]	@ (8006440 <TIM_OC1_SetConfig+0x110>)
 8006394:	4293      	cmp	r3, r2
 8006396:	d00b      	beq.n	80063b0 <TIM_OC1_SetConfig+0x80>
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	4a2a      	ldr	r2, [pc, #168]	@ (8006444 <TIM_OC1_SetConfig+0x114>)
 800639c:	4293      	cmp	r3, r2
 800639e:	d007      	beq.n	80063b0 <TIM_OC1_SetConfig+0x80>
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	4a29      	ldr	r2, [pc, #164]	@ (8006448 <TIM_OC1_SetConfig+0x118>)
 80063a4:	4293      	cmp	r3, r2
 80063a6:	d003      	beq.n	80063b0 <TIM_OC1_SetConfig+0x80>
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	4a28      	ldr	r2, [pc, #160]	@ (800644c <TIM_OC1_SetConfig+0x11c>)
 80063ac:	4293      	cmp	r3, r2
 80063ae:	d10c      	bne.n	80063ca <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80063b0:	697b      	ldr	r3, [r7, #20]
 80063b2:	f023 0308 	bic.w	r3, r3, #8
 80063b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	68db      	ldr	r3, [r3, #12]
 80063bc:	697a      	ldr	r2, [r7, #20]
 80063be:	4313      	orrs	r3, r2
 80063c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80063c2:	697b      	ldr	r3, [r7, #20]
 80063c4:	f023 0304 	bic.w	r3, r3, #4
 80063c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	4a1b      	ldr	r2, [pc, #108]	@ (800643c <TIM_OC1_SetConfig+0x10c>)
 80063ce:	4293      	cmp	r3, r2
 80063d0:	d00f      	beq.n	80063f2 <TIM_OC1_SetConfig+0xc2>
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	4a1a      	ldr	r2, [pc, #104]	@ (8006440 <TIM_OC1_SetConfig+0x110>)
 80063d6:	4293      	cmp	r3, r2
 80063d8:	d00b      	beq.n	80063f2 <TIM_OC1_SetConfig+0xc2>
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	4a19      	ldr	r2, [pc, #100]	@ (8006444 <TIM_OC1_SetConfig+0x114>)
 80063de:	4293      	cmp	r3, r2
 80063e0:	d007      	beq.n	80063f2 <TIM_OC1_SetConfig+0xc2>
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	4a18      	ldr	r2, [pc, #96]	@ (8006448 <TIM_OC1_SetConfig+0x118>)
 80063e6:	4293      	cmp	r3, r2
 80063e8:	d003      	beq.n	80063f2 <TIM_OC1_SetConfig+0xc2>
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	4a17      	ldr	r2, [pc, #92]	@ (800644c <TIM_OC1_SetConfig+0x11c>)
 80063ee:	4293      	cmp	r3, r2
 80063f0:	d111      	bne.n	8006416 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80063f2:	693b      	ldr	r3, [r7, #16]
 80063f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80063f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80063fa:	693b      	ldr	r3, [r7, #16]
 80063fc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006400:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	695b      	ldr	r3, [r3, #20]
 8006406:	693a      	ldr	r2, [r7, #16]
 8006408:	4313      	orrs	r3, r2
 800640a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	699b      	ldr	r3, [r3, #24]
 8006410:	693a      	ldr	r2, [r7, #16]
 8006412:	4313      	orrs	r3, r2
 8006414:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	693a      	ldr	r2, [r7, #16]
 800641a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	68fa      	ldr	r2, [r7, #12]
 8006420:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	685a      	ldr	r2, [r3, #4]
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	697a      	ldr	r2, [r7, #20]
 800642e:	621a      	str	r2, [r3, #32]
}
 8006430:	bf00      	nop
 8006432:	371c      	adds	r7, #28
 8006434:	46bd      	mov	sp, r7
 8006436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643a:	4770      	bx	lr
 800643c:	40012c00 	.word	0x40012c00
 8006440:	40013400 	.word	0x40013400
 8006444:	40014000 	.word	0x40014000
 8006448:	40014400 	.word	0x40014400
 800644c:	40014800 	.word	0x40014800

08006450 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006450:	b480      	push	{r7}
 8006452:	b087      	sub	sp, #28
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
 8006458:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6a1b      	ldr	r3, [r3, #32]
 800645e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	6a1b      	ldr	r3, [r3, #32]
 8006464:	f023 0210 	bic.w	r2, r3, #16
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	685b      	ldr	r3, [r3, #4]
 8006470:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	699b      	ldr	r3, [r3, #24]
 8006476:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800647e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006482:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800648a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800648c:	683b      	ldr	r3, [r7, #0]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	021b      	lsls	r3, r3, #8
 8006492:	68fa      	ldr	r2, [r7, #12]
 8006494:	4313      	orrs	r3, r2
 8006496:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006498:	697b      	ldr	r3, [r7, #20]
 800649a:	f023 0320 	bic.w	r3, r3, #32
 800649e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80064a0:	683b      	ldr	r3, [r7, #0]
 80064a2:	689b      	ldr	r3, [r3, #8]
 80064a4:	011b      	lsls	r3, r3, #4
 80064a6:	697a      	ldr	r2, [r7, #20]
 80064a8:	4313      	orrs	r3, r2
 80064aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	4a28      	ldr	r2, [pc, #160]	@ (8006550 <TIM_OC2_SetConfig+0x100>)
 80064b0:	4293      	cmp	r3, r2
 80064b2:	d003      	beq.n	80064bc <TIM_OC2_SetConfig+0x6c>
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	4a27      	ldr	r2, [pc, #156]	@ (8006554 <TIM_OC2_SetConfig+0x104>)
 80064b8:	4293      	cmp	r3, r2
 80064ba:	d10d      	bne.n	80064d8 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80064bc:	697b      	ldr	r3, [r7, #20]
 80064be:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80064c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	68db      	ldr	r3, [r3, #12]
 80064c8:	011b      	lsls	r3, r3, #4
 80064ca:	697a      	ldr	r2, [r7, #20]
 80064cc:	4313      	orrs	r3, r2
 80064ce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80064d0:	697b      	ldr	r3, [r7, #20]
 80064d2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80064d6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	4a1d      	ldr	r2, [pc, #116]	@ (8006550 <TIM_OC2_SetConfig+0x100>)
 80064dc:	4293      	cmp	r3, r2
 80064de:	d00f      	beq.n	8006500 <TIM_OC2_SetConfig+0xb0>
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	4a1c      	ldr	r2, [pc, #112]	@ (8006554 <TIM_OC2_SetConfig+0x104>)
 80064e4:	4293      	cmp	r3, r2
 80064e6:	d00b      	beq.n	8006500 <TIM_OC2_SetConfig+0xb0>
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	4a1b      	ldr	r2, [pc, #108]	@ (8006558 <TIM_OC2_SetConfig+0x108>)
 80064ec:	4293      	cmp	r3, r2
 80064ee:	d007      	beq.n	8006500 <TIM_OC2_SetConfig+0xb0>
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	4a1a      	ldr	r2, [pc, #104]	@ (800655c <TIM_OC2_SetConfig+0x10c>)
 80064f4:	4293      	cmp	r3, r2
 80064f6:	d003      	beq.n	8006500 <TIM_OC2_SetConfig+0xb0>
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	4a19      	ldr	r2, [pc, #100]	@ (8006560 <TIM_OC2_SetConfig+0x110>)
 80064fc:	4293      	cmp	r3, r2
 80064fe:	d113      	bne.n	8006528 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006500:	693b      	ldr	r3, [r7, #16]
 8006502:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006506:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006508:	693b      	ldr	r3, [r7, #16]
 800650a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800650e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006510:	683b      	ldr	r3, [r7, #0]
 8006512:	695b      	ldr	r3, [r3, #20]
 8006514:	009b      	lsls	r3, r3, #2
 8006516:	693a      	ldr	r2, [r7, #16]
 8006518:	4313      	orrs	r3, r2
 800651a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800651c:	683b      	ldr	r3, [r7, #0]
 800651e:	699b      	ldr	r3, [r3, #24]
 8006520:	009b      	lsls	r3, r3, #2
 8006522:	693a      	ldr	r2, [r7, #16]
 8006524:	4313      	orrs	r3, r2
 8006526:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	693a      	ldr	r2, [r7, #16]
 800652c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	68fa      	ldr	r2, [r7, #12]
 8006532:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	685a      	ldr	r2, [r3, #4]
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	697a      	ldr	r2, [r7, #20]
 8006540:	621a      	str	r2, [r3, #32]
}
 8006542:	bf00      	nop
 8006544:	371c      	adds	r7, #28
 8006546:	46bd      	mov	sp, r7
 8006548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654c:	4770      	bx	lr
 800654e:	bf00      	nop
 8006550:	40012c00 	.word	0x40012c00
 8006554:	40013400 	.word	0x40013400
 8006558:	40014000 	.word	0x40014000
 800655c:	40014400 	.word	0x40014400
 8006560:	40014800 	.word	0x40014800

08006564 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006564:	b480      	push	{r7}
 8006566:	b087      	sub	sp, #28
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
 800656c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	6a1b      	ldr	r3, [r3, #32]
 8006572:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	6a1b      	ldr	r3, [r3, #32]
 8006578:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	685b      	ldr	r3, [r3, #4]
 8006584:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	69db      	ldr	r3, [r3, #28]
 800658a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006592:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006596:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	f023 0303 	bic.w	r3, r3, #3
 800659e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	68fa      	ldr	r2, [r7, #12]
 80065a6:	4313      	orrs	r3, r2
 80065a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80065aa:	697b      	ldr	r3, [r7, #20]
 80065ac:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80065b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80065b2:	683b      	ldr	r3, [r7, #0]
 80065b4:	689b      	ldr	r3, [r3, #8]
 80065b6:	021b      	lsls	r3, r3, #8
 80065b8:	697a      	ldr	r2, [r7, #20]
 80065ba:	4313      	orrs	r3, r2
 80065bc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	4a27      	ldr	r2, [pc, #156]	@ (8006660 <TIM_OC3_SetConfig+0xfc>)
 80065c2:	4293      	cmp	r3, r2
 80065c4:	d003      	beq.n	80065ce <TIM_OC3_SetConfig+0x6a>
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	4a26      	ldr	r2, [pc, #152]	@ (8006664 <TIM_OC3_SetConfig+0x100>)
 80065ca:	4293      	cmp	r3, r2
 80065cc:	d10d      	bne.n	80065ea <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80065ce:	697b      	ldr	r3, [r7, #20]
 80065d0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80065d4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	68db      	ldr	r3, [r3, #12]
 80065da:	021b      	lsls	r3, r3, #8
 80065dc:	697a      	ldr	r2, [r7, #20]
 80065de:	4313      	orrs	r3, r2
 80065e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80065e2:	697b      	ldr	r3, [r7, #20]
 80065e4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80065e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	4a1c      	ldr	r2, [pc, #112]	@ (8006660 <TIM_OC3_SetConfig+0xfc>)
 80065ee:	4293      	cmp	r3, r2
 80065f0:	d00f      	beq.n	8006612 <TIM_OC3_SetConfig+0xae>
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	4a1b      	ldr	r2, [pc, #108]	@ (8006664 <TIM_OC3_SetConfig+0x100>)
 80065f6:	4293      	cmp	r3, r2
 80065f8:	d00b      	beq.n	8006612 <TIM_OC3_SetConfig+0xae>
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	4a1a      	ldr	r2, [pc, #104]	@ (8006668 <TIM_OC3_SetConfig+0x104>)
 80065fe:	4293      	cmp	r3, r2
 8006600:	d007      	beq.n	8006612 <TIM_OC3_SetConfig+0xae>
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	4a19      	ldr	r2, [pc, #100]	@ (800666c <TIM_OC3_SetConfig+0x108>)
 8006606:	4293      	cmp	r3, r2
 8006608:	d003      	beq.n	8006612 <TIM_OC3_SetConfig+0xae>
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	4a18      	ldr	r2, [pc, #96]	@ (8006670 <TIM_OC3_SetConfig+0x10c>)
 800660e:	4293      	cmp	r3, r2
 8006610:	d113      	bne.n	800663a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006612:	693b      	ldr	r3, [r7, #16]
 8006614:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006618:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800661a:	693b      	ldr	r3, [r7, #16]
 800661c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006620:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006622:	683b      	ldr	r3, [r7, #0]
 8006624:	695b      	ldr	r3, [r3, #20]
 8006626:	011b      	lsls	r3, r3, #4
 8006628:	693a      	ldr	r2, [r7, #16]
 800662a:	4313      	orrs	r3, r2
 800662c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800662e:	683b      	ldr	r3, [r7, #0]
 8006630:	699b      	ldr	r3, [r3, #24]
 8006632:	011b      	lsls	r3, r3, #4
 8006634:	693a      	ldr	r2, [r7, #16]
 8006636:	4313      	orrs	r3, r2
 8006638:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	693a      	ldr	r2, [r7, #16]
 800663e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	68fa      	ldr	r2, [r7, #12]
 8006644:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006646:	683b      	ldr	r3, [r7, #0]
 8006648:	685a      	ldr	r2, [r3, #4]
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	697a      	ldr	r2, [r7, #20]
 8006652:	621a      	str	r2, [r3, #32]
}
 8006654:	bf00      	nop
 8006656:	371c      	adds	r7, #28
 8006658:	46bd      	mov	sp, r7
 800665a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665e:	4770      	bx	lr
 8006660:	40012c00 	.word	0x40012c00
 8006664:	40013400 	.word	0x40013400
 8006668:	40014000 	.word	0x40014000
 800666c:	40014400 	.word	0x40014400
 8006670:	40014800 	.word	0x40014800

08006674 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006674:	b480      	push	{r7}
 8006676:	b087      	sub	sp, #28
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
 800667c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	6a1b      	ldr	r3, [r3, #32]
 8006682:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	6a1b      	ldr	r3, [r3, #32]
 8006688:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	685b      	ldr	r3, [r3, #4]
 8006694:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	69db      	ldr	r3, [r3, #28]
 800669a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80066a2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80066a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80066ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	021b      	lsls	r3, r3, #8
 80066b6:	68fa      	ldr	r2, [r7, #12]
 80066b8:	4313      	orrs	r3, r2
 80066ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80066bc:	697b      	ldr	r3, [r7, #20]
 80066be:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80066c2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	689b      	ldr	r3, [r3, #8]
 80066c8:	031b      	lsls	r3, r3, #12
 80066ca:	697a      	ldr	r2, [r7, #20]
 80066cc:	4313      	orrs	r3, r2
 80066ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	4a28      	ldr	r2, [pc, #160]	@ (8006774 <TIM_OC4_SetConfig+0x100>)
 80066d4:	4293      	cmp	r3, r2
 80066d6:	d003      	beq.n	80066e0 <TIM_OC4_SetConfig+0x6c>
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	4a27      	ldr	r2, [pc, #156]	@ (8006778 <TIM_OC4_SetConfig+0x104>)
 80066dc:	4293      	cmp	r3, r2
 80066de:	d10d      	bne.n	80066fc <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80066e0:	697b      	ldr	r3, [r7, #20]
 80066e2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80066e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	68db      	ldr	r3, [r3, #12]
 80066ec:	031b      	lsls	r3, r3, #12
 80066ee:	697a      	ldr	r2, [r7, #20]
 80066f0:	4313      	orrs	r3, r2
 80066f2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80066f4:	697b      	ldr	r3, [r7, #20]
 80066f6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80066fa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	4a1d      	ldr	r2, [pc, #116]	@ (8006774 <TIM_OC4_SetConfig+0x100>)
 8006700:	4293      	cmp	r3, r2
 8006702:	d00f      	beq.n	8006724 <TIM_OC4_SetConfig+0xb0>
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	4a1c      	ldr	r2, [pc, #112]	@ (8006778 <TIM_OC4_SetConfig+0x104>)
 8006708:	4293      	cmp	r3, r2
 800670a:	d00b      	beq.n	8006724 <TIM_OC4_SetConfig+0xb0>
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	4a1b      	ldr	r2, [pc, #108]	@ (800677c <TIM_OC4_SetConfig+0x108>)
 8006710:	4293      	cmp	r3, r2
 8006712:	d007      	beq.n	8006724 <TIM_OC4_SetConfig+0xb0>
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	4a1a      	ldr	r2, [pc, #104]	@ (8006780 <TIM_OC4_SetConfig+0x10c>)
 8006718:	4293      	cmp	r3, r2
 800671a:	d003      	beq.n	8006724 <TIM_OC4_SetConfig+0xb0>
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	4a19      	ldr	r2, [pc, #100]	@ (8006784 <TIM_OC4_SetConfig+0x110>)
 8006720:	4293      	cmp	r3, r2
 8006722:	d113      	bne.n	800674c <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006724:	693b      	ldr	r3, [r7, #16]
 8006726:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800672a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800672c:	693b      	ldr	r3, [r7, #16]
 800672e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006732:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006734:	683b      	ldr	r3, [r7, #0]
 8006736:	695b      	ldr	r3, [r3, #20]
 8006738:	019b      	lsls	r3, r3, #6
 800673a:	693a      	ldr	r2, [r7, #16]
 800673c:	4313      	orrs	r3, r2
 800673e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	699b      	ldr	r3, [r3, #24]
 8006744:	019b      	lsls	r3, r3, #6
 8006746:	693a      	ldr	r2, [r7, #16]
 8006748:	4313      	orrs	r3, r2
 800674a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	693a      	ldr	r2, [r7, #16]
 8006750:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	68fa      	ldr	r2, [r7, #12]
 8006756:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	685a      	ldr	r2, [r3, #4]
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	697a      	ldr	r2, [r7, #20]
 8006764:	621a      	str	r2, [r3, #32]
}
 8006766:	bf00      	nop
 8006768:	371c      	adds	r7, #28
 800676a:	46bd      	mov	sp, r7
 800676c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006770:	4770      	bx	lr
 8006772:	bf00      	nop
 8006774:	40012c00 	.word	0x40012c00
 8006778:	40013400 	.word	0x40013400
 800677c:	40014000 	.word	0x40014000
 8006780:	40014400 	.word	0x40014400
 8006784:	40014800 	.word	0x40014800

08006788 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006788:	b480      	push	{r7}
 800678a:	b087      	sub	sp, #28
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
 8006790:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	6a1b      	ldr	r3, [r3, #32]
 8006796:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	6a1b      	ldr	r3, [r3, #32]
 800679c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	685b      	ldr	r3, [r3, #4]
 80067a8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80067ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80067b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80067ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	68fa      	ldr	r2, [r7, #12]
 80067c2:	4313      	orrs	r3, r2
 80067c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80067c6:	693b      	ldr	r3, [r7, #16]
 80067c8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80067cc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	689b      	ldr	r3, [r3, #8]
 80067d2:	041b      	lsls	r3, r3, #16
 80067d4:	693a      	ldr	r2, [r7, #16]
 80067d6:	4313      	orrs	r3, r2
 80067d8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	4a17      	ldr	r2, [pc, #92]	@ (800683c <TIM_OC5_SetConfig+0xb4>)
 80067de:	4293      	cmp	r3, r2
 80067e0:	d00f      	beq.n	8006802 <TIM_OC5_SetConfig+0x7a>
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	4a16      	ldr	r2, [pc, #88]	@ (8006840 <TIM_OC5_SetConfig+0xb8>)
 80067e6:	4293      	cmp	r3, r2
 80067e8:	d00b      	beq.n	8006802 <TIM_OC5_SetConfig+0x7a>
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	4a15      	ldr	r2, [pc, #84]	@ (8006844 <TIM_OC5_SetConfig+0xbc>)
 80067ee:	4293      	cmp	r3, r2
 80067f0:	d007      	beq.n	8006802 <TIM_OC5_SetConfig+0x7a>
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	4a14      	ldr	r2, [pc, #80]	@ (8006848 <TIM_OC5_SetConfig+0xc0>)
 80067f6:	4293      	cmp	r3, r2
 80067f8:	d003      	beq.n	8006802 <TIM_OC5_SetConfig+0x7a>
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	4a13      	ldr	r2, [pc, #76]	@ (800684c <TIM_OC5_SetConfig+0xc4>)
 80067fe:	4293      	cmp	r3, r2
 8006800:	d109      	bne.n	8006816 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006802:	697b      	ldr	r3, [r7, #20]
 8006804:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006808:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800680a:	683b      	ldr	r3, [r7, #0]
 800680c:	695b      	ldr	r3, [r3, #20]
 800680e:	021b      	lsls	r3, r3, #8
 8006810:	697a      	ldr	r2, [r7, #20]
 8006812:	4313      	orrs	r3, r2
 8006814:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	697a      	ldr	r2, [r7, #20]
 800681a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	68fa      	ldr	r2, [r7, #12]
 8006820:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006822:	683b      	ldr	r3, [r7, #0]
 8006824:	685a      	ldr	r2, [r3, #4]
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	693a      	ldr	r2, [r7, #16]
 800682e:	621a      	str	r2, [r3, #32]
}
 8006830:	bf00      	nop
 8006832:	371c      	adds	r7, #28
 8006834:	46bd      	mov	sp, r7
 8006836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683a:	4770      	bx	lr
 800683c:	40012c00 	.word	0x40012c00
 8006840:	40013400 	.word	0x40013400
 8006844:	40014000 	.word	0x40014000
 8006848:	40014400 	.word	0x40014400
 800684c:	40014800 	.word	0x40014800

08006850 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006850:	b480      	push	{r7}
 8006852:	b087      	sub	sp, #28
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
 8006858:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	6a1b      	ldr	r3, [r3, #32]
 800685e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	6a1b      	ldr	r3, [r3, #32]
 8006864:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	685b      	ldr	r3, [r3, #4]
 8006870:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006876:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800687e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006882:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	021b      	lsls	r3, r3, #8
 800688a:	68fa      	ldr	r2, [r7, #12]
 800688c:	4313      	orrs	r3, r2
 800688e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006890:	693b      	ldr	r3, [r7, #16]
 8006892:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006896:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	689b      	ldr	r3, [r3, #8]
 800689c:	051b      	lsls	r3, r3, #20
 800689e:	693a      	ldr	r2, [r7, #16]
 80068a0:	4313      	orrs	r3, r2
 80068a2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	4a18      	ldr	r2, [pc, #96]	@ (8006908 <TIM_OC6_SetConfig+0xb8>)
 80068a8:	4293      	cmp	r3, r2
 80068aa:	d00f      	beq.n	80068cc <TIM_OC6_SetConfig+0x7c>
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	4a17      	ldr	r2, [pc, #92]	@ (800690c <TIM_OC6_SetConfig+0xbc>)
 80068b0:	4293      	cmp	r3, r2
 80068b2:	d00b      	beq.n	80068cc <TIM_OC6_SetConfig+0x7c>
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	4a16      	ldr	r2, [pc, #88]	@ (8006910 <TIM_OC6_SetConfig+0xc0>)
 80068b8:	4293      	cmp	r3, r2
 80068ba:	d007      	beq.n	80068cc <TIM_OC6_SetConfig+0x7c>
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	4a15      	ldr	r2, [pc, #84]	@ (8006914 <TIM_OC6_SetConfig+0xc4>)
 80068c0:	4293      	cmp	r3, r2
 80068c2:	d003      	beq.n	80068cc <TIM_OC6_SetConfig+0x7c>
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	4a14      	ldr	r2, [pc, #80]	@ (8006918 <TIM_OC6_SetConfig+0xc8>)
 80068c8:	4293      	cmp	r3, r2
 80068ca:	d109      	bne.n	80068e0 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80068cc:	697b      	ldr	r3, [r7, #20]
 80068ce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80068d2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80068d4:	683b      	ldr	r3, [r7, #0]
 80068d6:	695b      	ldr	r3, [r3, #20]
 80068d8:	029b      	lsls	r3, r3, #10
 80068da:	697a      	ldr	r2, [r7, #20]
 80068dc:	4313      	orrs	r3, r2
 80068de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	697a      	ldr	r2, [r7, #20]
 80068e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	68fa      	ldr	r2, [r7, #12]
 80068ea:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	685a      	ldr	r2, [r3, #4]
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	693a      	ldr	r2, [r7, #16]
 80068f8:	621a      	str	r2, [r3, #32]
}
 80068fa:	bf00      	nop
 80068fc:	371c      	adds	r7, #28
 80068fe:	46bd      	mov	sp, r7
 8006900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006904:	4770      	bx	lr
 8006906:	bf00      	nop
 8006908:	40012c00 	.word	0x40012c00
 800690c:	40013400 	.word	0x40013400
 8006910:	40014000 	.word	0x40014000
 8006914:	40014400 	.word	0x40014400
 8006918:	40014800 	.word	0x40014800

0800691c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800691c:	b480      	push	{r7}
 800691e:	b087      	sub	sp, #28
 8006920:	af00      	add	r7, sp, #0
 8006922:	60f8      	str	r0, [r7, #12]
 8006924:	60b9      	str	r1, [r7, #8]
 8006926:	607a      	str	r2, [r7, #4]
 8006928:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	6a1b      	ldr	r3, [r3, #32]
 800692e:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	6a1b      	ldr	r3, [r3, #32]
 8006934:	f023 0201 	bic.w	r2, r3, #1
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	699b      	ldr	r3, [r3, #24]
 8006940:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	4a24      	ldr	r2, [pc, #144]	@ (80069d8 <TIM_TI1_SetConfig+0xbc>)
 8006946:	4293      	cmp	r3, r2
 8006948:	d013      	beq.n	8006972 <TIM_TI1_SetConfig+0x56>
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006950:	d00f      	beq.n	8006972 <TIM_TI1_SetConfig+0x56>
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	4a21      	ldr	r2, [pc, #132]	@ (80069dc <TIM_TI1_SetConfig+0xc0>)
 8006956:	4293      	cmp	r3, r2
 8006958:	d00b      	beq.n	8006972 <TIM_TI1_SetConfig+0x56>
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	4a20      	ldr	r2, [pc, #128]	@ (80069e0 <TIM_TI1_SetConfig+0xc4>)
 800695e:	4293      	cmp	r3, r2
 8006960:	d007      	beq.n	8006972 <TIM_TI1_SetConfig+0x56>
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	4a1f      	ldr	r2, [pc, #124]	@ (80069e4 <TIM_TI1_SetConfig+0xc8>)
 8006966:	4293      	cmp	r3, r2
 8006968:	d003      	beq.n	8006972 <TIM_TI1_SetConfig+0x56>
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	4a1e      	ldr	r2, [pc, #120]	@ (80069e8 <TIM_TI1_SetConfig+0xcc>)
 800696e:	4293      	cmp	r3, r2
 8006970:	d101      	bne.n	8006976 <TIM_TI1_SetConfig+0x5a>
 8006972:	2301      	movs	r3, #1
 8006974:	e000      	b.n	8006978 <TIM_TI1_SetConfig+0x5c>
 8006976:	2300      	movs	r3, #0
 8006978:	2b00      	cmp	r3, #0
 800697a:	d008      	beq.n	800698e <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800697c:	697b      	ldr	r3, [r7, #20]
 800697e:	f023 0303 	bic.w	r3, r3, #3
 8006982:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006984:	697a      	ldr	r2, [r7, #20]
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	4313      	orrs	r3, r2
 800698a:	617b      	str	r3, [r7, #20]
 800698c:	e003      	b.n	8006996 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800698e:	697b      	ldr	r3, [r7, #20]
 8006990:	f043 0301 	orr.w	r3, r3, #1
 8006994:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006996:	697b      	ldr	r3, [r7, #20]
 8006998:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800699c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	011b      	lsls	r3, r3, #4
 80069a2:	b2db      	uxtb	r3, r3
 80069a4:	697a      	ldr	r2, [r7, #20]
 80069a6:	4313      	orrs	r3, r2
 80069a8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80069aa:	693b      	ldr	r3, [r7, #16]
 80069ac:	f023 030a 	bic.w	r3, r3, #10
 80069b0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80069b2:	68bb      	ldr	r3, [r7, #8]
 80069b4:	f003 030a 	and.w	r3, r3, #10
 80069b8:	693a      	ldr	r2, [r7, #16]
 80069ba:	4313      	orrs	r3, r2
 80069bc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	697a      	ldr	r2, [r7, #20]
 80069c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	693a      	ldr	r2, [r7, #16]
 80069c8:	621a      	str	r2, [r3, #32]
}
 80069ca:	bf00      	nop
 80069cc:	371c      	adds	r7, #28
 80069ce:	46bd      	mov	sp, r7
 80069d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d4:	4770      	bx	lr
 80069d6:	bf00      	nop
 80069d8:	40012c00 	.word	0x40012c00
 80069dc:	40000400 	.word	0x40000400
 80069e0:	40000800 	.word	0x40000800
 80069e4:	40013400 	.word	0x40013400
 80069e8:	40014000 	.word	0x40014000

080069ec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80069ec:	b480      	push	{r7}
 80069ee:	b087      	sub	sp, #28
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	60f8      	str	r0, [r7, #12]
 80069f4:	60b9      	str	r1, [r7, #8]
 80069f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	6a1b      	ldr	r3, [r3, #32]
 80069fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	6a1b      	ldr	r3, [r3, #32]
 8006a02:	f023 0201 	bic.w	r2, r3, #1
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	699b      	ldr	r3, [r3, #24]
 8006a0e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006a10:	693b      	ldr	r3, [r7, #16]
 8006a12:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006a16:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	011b      	lsls	r3, r3, #4
 8006a1c:	693a      	ldr	r2, [r7, #16]
 8006a1e:	4313      	orrs	r3, r2
 8006a20:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006a22:	697b      	ldr	r3, [r7, #20]
 8006a24:	f023 030a 	bic.w	r3, r3, #10
 8006a28:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006a2a:	697a      	ldr	r2, [r7, #20]
 8006a2c:	68bb      	ldr	r3, [r7, #8]
 8006a2e:	4313      	orrs	r3, r2
 8006a30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	693a      	ldr	r2, [r7, #16]
 8006a36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	697a      	ldr	r2, [r7, #20]
 8006a3c:	621a      	str	r2, [r3, #32]
}
 8006a3e:	bf00      	nop
 8006a40:	371c      	adds	r7, #28
 8006a42:	46bd      	mov	sp, r7
 8006a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a48:	4770      	bx	lr

08006a4a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006a4a:	b480      	push	{r7}
 8006a4c:	b087      	sub	sp, #28
 8006a4e:	af00      	add	r7, sp, #0
 8006a50:	60f8      	str	r0, [r7, #12]
 8006a52:	60b9      	str	r1, [r7, #8]
 8006a54:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	6a1b      	ldr	r3, [r3, #32]
 8006a5a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	6a1b      	ldr	r3, [r3, #32]
 8006a60:	f023 0210 	bic.w	r2, r3, #16
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	699b      	ldr	r3, [r3, #24]
 8006a6c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006a6e:	693b      	ldr	r3, [r7, #16]
 8006a70:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006a74:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	031b      	lsls	r3, r3, #12
 8006a7a:	693a      	ldr	r2, [r7, #16]
 8006a7c:	4313      	orrs	r3, r2
 8006a7e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006a80:	697b      	ldr	r3, [r7, #20]
 8006a82:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006a86:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006a88:	68bb      	ldr	r3, [r7, #8]
 8006a8a:	011b      	lsls	r3, r3, #4
 8006a8c:	697a      	ldr	r2, [r7, #20]
 8006a8e:	4313      	orrs	r3, r2
 8006a90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	693a      	ldr	r2, [r7, #16]
 8006a96:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	697a      	ldr	r2, [r7, #20]
 8006a9c:	621a      	str	r2, [r3, #32]
}
 8006a9e:	bf00      	nop
 8006aa0:	371c      	adds	r7, #28
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa8:	4770      	bx	lr

08006aaa <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006aaa:	b480      	push	{r7}
 8006aac:	b085      	sub	sp, #20
 8006aae:	af00      	add	r7, sp, #0
 8006ab0:	6078      	str	r0, [r7, #4]
 8006ab2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	689b      	ldr	r3, [r3, #8]
 8006ab8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8006ac0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ac4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006ac6:	683a      	ldr	r2, [r7, #0]
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	4313      	orrs	r3, r2
 8006acc:	f043 0307 	orr.w	r3, r3, #7
 8006ad0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	68fa      	ldr	r2, [r7, #12]
 8006ad6:	609a      	str	r2, [r3, #8]
}
 8006ad8:	bf00      	nop
 8006ada:	3714      	adds	r7, #20
 8006adc:	46bd      	mov	sp, r7
 8006ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae2:	4770      	bx	lr

08006ae4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006ae4:	b480      	push	{r7}
 8006ae6:	b087      	sub	sp, #28
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	60f8      	str	r0, [r7, #12]
 8006aec:	60b9      	str	r1, [r7, #8]
 8006aee:	607a      	str	r2, [r7, #4]
 8006af0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	689b      	ldr	r3, [r3, #8]
 8006af6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006af8:	697b      	ldr	r3, [r7, #20]
 8006afa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006afe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	021a      	lsls	r2, r3, #8
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	431a      	orrs	r2, r3
 8006b08:	68bb      	ldr	r3, [r7, #8]
 8006b0a:	4313      	orrs	r3, r2
 8006b0c:	697a      	ldr	r2, [r7, #20]
 8006b0e:	4313      	orrs	r3, r2
 8006b10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	697a      	ldr	r2, [r7, #20]
 8006b16:	609a      	str	r2, [r3, #8]
}
 8006b18:	bf00      	nop
 8006b1a:	371c      	adds	r7, #28
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b22:	4770      	bx	lr

08006b24 <HAL_TIMEx_HallSensor_Init>:
  * @param  htim TIM Hall Sensor Interface handle
  * @param  sConfig TIM Hall Sensor configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Init(TIM_HandleTypeDef *htim, const TIM_HallSensor_InitTypeDef *sConfig)
{
 8006b24:	b580      	push	{r7, lr}
 8006b26:	b08a      	sub	sp, #40	@ 0x28
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]
 8006b2c:	6039      	str	r1, [r7, #0]
  TIM_OC_InitTypeDef OC_Config;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d101      	bne.n	8006b38 <HAL_TIMEx_HallSensor_Init+0x14>
  {
    return HAL_ERROR;
 8006b34:	2301      	movs	r3, #1
 8006b36:	e0a0      	b.n	8006c7a <HAL_TIMEx_HallSensor_Init+0x156>
  assert_param(IS_TIM_IC_POLARITY(sConfig->IC1Polarity));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006b3e:	b2db      	uxtb	r3, r3
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d106      	bne.n	8006b52 <HAL_TIMEx_HallSensor_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2200      	movs	r2, #0
 8006b48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->HallSensor_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIMEx_HallSensor_MspInit(htim);
 8006b4c:	6878      	ldr	r0, [r7, #4]
 8006b4e:	f7fa fdf5 	bl	800173c <HAL_TIMEx_HallSensor_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	2202      	movs	r2, #2
 8006b56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681a      	ldr	r2, [r3, #0]
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	3304      	adds	r3, #4
 8006b62:	4619      	mov	r1, r3
 8006b64:	4610      	mov	r0, r2
 8006b66:	f7ff fb47 	bl	80061f8 <TIM_Base_SetConfig>

  /* Configure the Channel 1 as Input Channel to interface with the three Outputs of the  Hall sensor */
  TIM_TI1_SetConfig(htim->Instance, sConfig->IC1Polarity, TIM_ICSELECTION_TRC, sConfig->IC1Filter);
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	6818      	ldr	r0, [r3, #0]
 8006b6e:	683b      	ldr	r3, [r7, #0]
 8006b70:	6819      	ldr	r1, [r3, #0]
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	689b      	ldr	r3, [r3, #8]
 8006b76:	2203      	movs	r2, #3
 8006b78:	f7ff fed0 	bl	800691c <TIM_TI1_SetConfig>

  /* Reset the IC1PSC Bits */
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	699a      	ldr	r2, [r3, #24]
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	f022 020c 	bic.w	r2, r2, #12
 8006b8a:	619a      	str	r2, [r3, #24]
  /* Set the IC1PSC value */
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	6999      	ldr	r1, [r3, #24]
 8006b92:	683b      	ldr	r3, [r7, #0]
 8006b94:	685a      	ldr	r2, [r3, #4]
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	430a      	orrs	r2, r1
 8006b9c:	619a      	str	r2, [r3, #24]

  /* Enable the Hall sensor interface (XOR function of the three inputs) */
  htim->Instance->CR2 |= TIM_CR2_TI1S;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	685a      	ldr	r2, [r3, #4]
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006bac:	605a      	str	r2, [r3, #4]

  /* Select the TIM_TS_TI1F_ED signal as Input trigger for the TIM */
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	689b      	ldr	r3, [r3, #8]
 8006bb4:	687a      	ldr	r2, [r7, #4]
 8006bb6:	6812      	ldr	r2, [r2, #0]
 8006bb8:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8006bbc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006bc0:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_TS_TI1F_ED;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	689a      	ldr	r2, [r3, #8]
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006bd0:	609a      	str	r2, [r3, #8]

  /* Use the TIM_TS_TI1F_ED signal to reset the TIM counter each edge detection */
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	689b      	ldr	r3, [r3, #8]
 8006bd8:	687a      	ldr	r2, [r7, #4]
 8006bda:	6812      	ldr	r2, [r2, #0]
 8006bdc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006be0:	f023 0307 	bic.w	r3, r3, #7
 8006be4:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_SLAVEMODE_RESET;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	689a      	ldr	r2, [r3, #8]
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	f042 0204 	orr.w	r2, r2, #4
 8006bf4:	609a      	str	r2, [r3, #8]

  /* Program channel 2 in PWM 2 mode with the desired Commutation_Delay*/
  OC_Config.OCFastMode = TIM_OCFAST_DISABLE;
 8006bf6:	2300      	movs	r3, #0
 8006bf8:	61fb      	str	r3, [r7, #28]
  OC_Config.OCIdleState = TIM_OCIDLESTATE_RESET;
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	623b      	str	r3, [r7, #32]
  OC_Config.OCMode = TIM_OCMODE_PWM2;
 8006bfe:	2370      	movs	r3, #112	@ 0x70
 8006c00:	60fb      	str	r3, [r7, #12]
  OC_Config.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8006c02:	2300      	movs	r3, #0
 8006c04:	627b      	str	r3, [r7, #36]	@ 0x24
  OC_Config.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8006c06:	2300      	movs	r3, #0
 8006c08:	61bb      	str	r3, [r7, #24]
  OC_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006c0a:	2300      	movs	r3, #0
 8006c0c:	617b      	str	r3, [r7, #20]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 8006c0e:	683b      	ldr	r3, [r7, #0]
 8006c10:	68db      	ldr	r3, [r3, #12]
 8006c12:	613b      	str	r3, [r7, #16]

  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f107 020c 	add.w	r2, r7, #12
 8006c1c:	4611      	mov	r1, r2
 8006c1e:	4618      	mov	r0, r3
 8006c20:	f7ff fc16 	bl	8006450 <TIM_OC2_SetConfig>

  /* Select OC2REF as trigger output on TRGO: write the MMS bits in the TIMx_CR2
    register to 101 */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	685b      	ldr	r3, [r3, #4]
 8006c2a:	687a      	ldr	r2, [r7, #4]
 8006c2c:	6812      	ldr	r2, [r2, #0]
 8006c2e:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8006c32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c36:	6053      	str	r3, [r2, #4]
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	685a      	ldr	r2, [r3, #4]
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	f042 0250 	orr.w	r2, r2, #80	@ 0x50
 8006c46:	605a      	str	r2, [r3, #4]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2201      	movs	r2, #1
 8006c4c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2201      	movs	r2, #1
 8006c54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	2201      	movs	r2, #1
 8006c5c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2201      	movs	r2, #1
 8006c64:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2201      	movs	r2, #1
 8006c6c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2201      	movs	r2, #1
 8006c74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006c78:	2300      	movs	r3, #0
}
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	3728      	adds	r7, #40	@ 0x28
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	bd80      	pop	{r7, pc}
	...

08006c84 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006c84:	b480      	push	{r7}
 8006c86:	b085      	sub	sp, #20
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]
 8006c8c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006c94:	2b01      	cmp	r3, #1
 8006c96:	d101      	bne.n	8006c9c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006c98:	2302      	movs	r3, #2
 8006c9a:	e065      	b.n	8006d68 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2201      	movs	r2, #1
 8006ca0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2202      	movs	r2, #2
 8006ca8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	685b      	ldr	r3, [r3, #4]
 8006cb2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	689b      	ldr	r3, [r3, #8]
 8006cba:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	4a2c      	ldr	r2, [pc, #176]	@ (8006d74 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006cc2:	4293      	cmp	r3, r2
 8006cc4:	d004      	beq.n	8006cd0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	4a2b      	ldr	r2, [pc, #172]	@ (8006d78 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006ccc:	4293      	cmp	r3, r2
 8006cce:	d108      	bne.n	8006ce2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006cd6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	685b      	ldr	r3, [r3, #4]
 8006cdc:	68fa      	ldr	r2, [r7, #12]
 8006cde:	4313      	orrs	r3, r2
 8006ce0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8006ce8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006cec:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006cee:	683b      	ldr	r3, [r7, #0]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	68fa      	ldr	r2, [r7, #12]
 8006cf4:	4313      	orrs	r3, r2
 8006cf6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	68fa      	ldr	r2, [r7, #12]
 8006cfe:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	4a1b      	ldr	r2, [pc, #108]	@ (8006d74 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006d06:	4293      	cmp	r3, r2
 8006d08:	d018      	beq.n	8006d3c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d12:	d013      	beq.n	8006d3c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	4a18      	ldr	r2, [pc, #96]	@ (8006d7c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006d1a:	4293      	cmp	r3, r2
 8006d1c:	d00e      	beq.n	8006d3c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	4a17      	ldr	r2, [pc, #92]	@ (8006d80 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006d24:	4293      	cmp	r3, r2
 8006d26:	d009      	beq.n	8006d3c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	4a12      	ldr	r2, [pc, #72]	@ (8006d78 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006d2e:	4293      	cmp	r3, r2
 8006d30:	d004      	beq.n	8006d3c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	4a13      	ldr	r2, [pc, #76]	@ (8006d84 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006d38:	4293      	cmp	r3, r2
 8006d3a:	d10c      	bne.n	8006d56 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006d3c:	68bb      	ldr	r3, [r7, #8]
 8006d3e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006d42:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006d44:	683b      	ldr	r3, [r7, #0]
 8006d46:	689b      	ldr	r3, [r3, #8]
 8006d48:	68ba      	ldr	r2, [r7, #8]
 8006d4a:	4313      	orrs	r3, r2
 8006d4c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	68ba      	ldr	r2, [r7, #8]
 8006d54:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	2201      	movs	r2, #1
 8006d5a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	2200      	movs	r2, #0
 8006d62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006d66:	2300      	movs	r3, #0
}
 8006d68:	4618      	mov	r0, r3
 8006d6a:	3714      	adds	r7, #20
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d72:	4770      	bx	lr
 8006d74:	40012c00 	.word	0x40012c00
 8006d78:	40013400 	.word	0x40013400
 8006d7c:	40000400 	.word	0x40000400
 8006d80:	40000800 	.word	0x40000800
 8006d84:	40014000 	.word	0x40014000

08006d88 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006d88:	b480      	push	{r7}
 8006d8a:	b085      	sub	sp, #20
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
 8006d90:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006d92:	2300      	movs	r3, #0
 8006d94:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006d9c:	2b01      	cmp	r3, #1
 8006d9e:	d101      	bne.n	8006da4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006da0:	2302      	movs	r3, #2
 8006da2:	e073      	b.n	8006e8c <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2201      	movs	r2, #1
 8006da8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006db2:	683b      	ldr	r3, [r7, #0]
 8006db4:	68db      	ldr	r3, [r3, #12]
 8006db6:	4313      	orrs	r3, r2
 8006db8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006dc0:	683b      	ldr	r3, [r7, #0]
 8006dc2:	689b      	ldr	r3, [r3, #8]
 8006dc4:	4313      	orrs	r3, r2
 8006dc6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006dce:	683b      	ldr	r3, [r7, #0]
 8006dd0:	685b      	ldr	r3, [r3, #4]
 8006dd2:	4313      	orrs	r3, r2
 8006dd4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	4313      	orrs	r3, r2
 8006de2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006dea:	683b      	ldr	r3, [r7, #0]
 8006dec:	691b      	ldr	r3, [r3, #16]
 8006dee:	4313      	orrs	r3, r2
 8006df0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006df8:	683b      	ldr	r3, [r7, #0]
 8006dfa:	695b      	ldr	r3, [r3, #20]
 8006dfc:	4313      	orrs	r3, r2
 8006dfe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8006e06:	683b      	ldr	r3, [r7, #0]
 8006e08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e0a:	4313      	orrs	r3, r2
 8006e0c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8006e14:	683b      	ldr	r3, [r7, #0]
 8006e16:	699b      	ldr	r3, [r3, #24]
 8006e18:	041b      	lsls	r3, r3, #16
 8006e1a:	4313      	orrs	r3, r2
 8006e1c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8006e24:	683b      	ldr	r3, [r7, #0]
 8006e26:	69db      	ldr	r3, [r3, #28]
 8006e28:	4313      	orrs	r3, r2
 8006e2a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	4a19      	ldr	r2, [pc, #100]	@ (8006e98 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8006e32:	4293      	cmp	r3, r2
 8006e34:	d004      	beq.n	8006e40 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	4a18      	ldr	r2, [pc, #96]	@ (8006e9c <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8006e3c:	4293      	cmp	r3, r2
 8006e3e:	d11c      	bne.n	8006e7a <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8006e46:	683b      	ldr	r3, [r7, #0]
 8006e48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e4a:	051b      	lsls	r3, r3, #20
 8006e4c:	4313      	orrs	r3, r2
 8006e4e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8006e56:	683b      	ldr	r3, [r7, #0]
 8006e58:	6a1b      	ldr	r3, [r3, #32]
 8006e5a:	4313      	orrs	r3, r2
 8006e5c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8006e64:	683b      	ldr	r3, [r7, #0]
 8006e66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e68:	4313      	orrs	r3, r2
 8006e6a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8006e72:	683b      	ldr	r3, [r7, #0]
 8006e74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e76:	4313      	orrs	r3, r2
 8006e78:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	68fa      	ldr	r2, [r7, #12]
 8006e80:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	2200      	movs	r2, #0
 8006e86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006e8a:	2300      	movs	r3, #0
}
 8006e8c:	4618      	mov	r0, r3
 8006e8e:	3714      	adds	r7, #20
 8006e90:	46bd      	mov	sp, r7
 8006e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e96:	4770      	bx	lr
 8006e98:	40012c00 	.word	0x40012c00
 8006e9c:	40013400 	.word	0x40013400

08006ea0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006ea0:	b580      	push	{r7, lr}
 8006ea2:	b082      	sub	sp, #8
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d101      	bne.n	8006eb2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006eae:	2301      	movs	r3, #1
 8006eb0:	e042      	b.n	8006f38 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d106      	bne.n	8006eca <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	2200      	movs	r2, #0
 8006ec0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006ec4:	6878      	ldr	r0, [r7, #4]
 8006ec6:	f7fa fddd 	bl	8001a84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	2224      	movs	r2, #36	@ 0x24
 8006ece:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	681a      	ldr	r2, [r3, #0]
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	f022 0201 	bic.w	r2, r2, #1
 8006ee0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d002      	beq.n	8006ef0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006eea:	6878      	ldr	r0, [r7, #4]
 8006eec:	f000 faf4 	bl	80074d8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006ef0:	6878      	ldr	r0, [r7, #4]
 8006ef2:	f000 f825 	bl	8006f40 <UART_SetConfig>
 8006ef6:	4603      	mov	r3, r0
 8006ef8:	2b01      	cmp	r3, #1
 8006efa:	d101      	bne.n	8006f00 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006efc:	2301      	movs	r3, #1
 8006efe:	e01b      	b.n	8006f38 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	685a      	ldr	r2, [r3, #4]
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006f0e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	689a      	ldr	r2, [r3, #8]
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006f1e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	681a      	ldr	r2, [r3, #0]
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	f042 0201 	orr.w	r2, r2, #1
 8006f2e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006f30:	6878      	ldr	r0, [r7, #4]
 8006f32:	f000 fb73 	bl	800761c <UART_CheckIdleState>
 8006f36:	4603      	mov	r3, r0
}
 8006f38:	4618      	mov	r0, r3
 8006f3a:	3708      	adds	r7, #8
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	bd80      	pop	{r7, pc}

08006f40 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006f40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006f44:	b08c      	sub	sp, #48	@ 0x30
 8006f46:	af00      	add	r7, sp, #0
 8006f48:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006f50:	697b      	ldr	r3, [r7, #20]
 8006f52:	689a      	ldr	r2, [r3, #8]
 8006f54:	697b      	ldr	r3, [r7, #20]
 8006f56:	691b      	ldr	r3, [r3, #16]
 8006f58:	431a      	orrs	r2, r3
 8006f5a:	697b      	ldr	r3, [r7, #20]
 8006f5c:	695b      	ldr	r3, [r3, #20]
 8006f5e:	431a      	orrs	r2, r3
 8006f60:	697b      	ldr	r3, [r7, #20]
 8006f62:	69db      	ldr	r3, [r3, #28]
 8006f64:	4313      	orrs	r3, r2
 8006f66:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006f68:	697b      	ldr	r3, [r7, #20]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	681a      	ldr	r2, [r3, #0]
 8006f6e:	4bab      	ldr	r3, [pc, #684]	@ (800721c <UART_SetConfig+0x2dc>)
 8006f70:	4013      	ands	r3, r2
 8006f72:	697a      	ldr	r2, [r7, #20]
 8006f74:	6812      	ldr	r2, [r2, #0]
 8006f76:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006f78:	430b      	orrs	r3, r1
 8006f7a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006f7c:	697b      	ldr	r3, [r7, #20]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	685b      	ldr	r3, [r3, #4]
 8006f82:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006f86:	697b      	ldr	r3, [r7, #20]
 8006f88:	68da      	ldr	r2, [r3, #12]
 8006f8a:	697b      	ldr	r3, [r7, #20]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	430a      	orrs	r2, r1
 8006f90:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006f92:	697b      	ldr	r3, [r7, #20]
 8006f94:	699b      	ldr	r3, [r3, #24]
 8006f96:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006f98:	697b      	ldr	r3, [r7, #20]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	4aa0      	ldr	r2, [pc, #640]	@ (8007220 <UART_SetConfig+0x2e0>)
 8006f9e:	4293      	cmp	r3, r2
 8006fa0:	d004      	beq.n	8006fac <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006fa2:	697b      	ldr	r3, [r7, #20]
 8006fa4:	6a1b      	ldr	r3, [r3, #32]
 8006fa6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006fa8:	4313      	orrs	r3, r2
 8006faa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006fac:	697b      	ldr	r3, [r7, #20]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	689b      	ldr	r3, [r3, #8]
 8006fb2:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8006fb6:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8006fba:	697a      	ldr	r2, [r7, #20]
 8006fbc:	6812      	ldr	r2, [r2, #0]
 8006fbe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006fc0:	430b      	orrs	r3, r1
 8006fc2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006fc4:	697b      	ldr	r3, [r7, #20]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fca:	f023 010f 	bic.w	r1, r3, #15
 8006fce:	697b      	ldr	r3, [r7, #20]
 8006fd0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006fd2:	697b      	ldr	r3, [r7, #20]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	430a      	orrs	r2, r1
 8006fd8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006fda:	697b      	ldr	r3, [r7, #20]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	4a91      	ldr	r2, [pc, #580]	@ (8007224 <UART_SetConfig+0x2e4>)
 8006fe0:	4293      	cmp	r3, r2
 8006fe2:	d125      	bne.n	8007030 <UART_SetConfig+0xf0>
 8006fe4:	4b90      	ldr	r3, [pc, #576]	@ (8007228 <UART_SetConfig+0x2e8>)
 8006fe6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006fea:	f003 0303 	and.w	r3, r3, #3
 8006fee:	2b03      	cmp	r3, #3
 8006ff0:	d81a      	bhi.n	8007028 <UART_SetConfig+0xe8>
 8006ff2:	a201      	add	r2, pc, #4	@ (adr r2, 8006ff8 <UART_SetConfig+0xb8>)
 8006ff4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ff8:	08007009 	.word	0x08007009
 8006ffc:	08007019 	.word	0x08007019
 8007000:	08007011 	.word	0x08007011
 8007004:	08007021 	.word	0x08007021
 8007008:	2301      	movs	r3, #1
 800700a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800700e:	e0d6      	b.n	80071be <UART_SetConfig+0x27e>
 8007010:	2302      	movs	r3, #2
 8007012:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007016:	e0d2      	b.n	80071be <UART_SetConfig+0x27e>
 8007018:	2304      	movs	r3, #4
 800701a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800701e:	e0ce      	b.n	80071be <UART_SetConfig+0x27e>
 8007020:	2308      	movs	r3, #8
 8007022:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007026:	e0ca      	b.n	80071be <UART_SetConfig+0x27e>
 8007028:	2310      	movs	r3, #16
 800702a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800702e:	e0c6      	b.n	80071be <UART_SetConfig+0x27e>
 8007030:	697b      	ldr	r3, [r7, #20]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	4a7d      	ldr	r2, [pc, #500]	@ (800722c <UART_SetConfig+0x2ec>)
 8007036:	4293      	cmp	r3, r2
 8007038:	d138      	bne.n	80070ac <UART_SetConfig+0x16c>
 800703a:	4b7b      	ldr	r3, [pc, #492]	@ (8007228 <UART_SetConfig+0x2e8>)
 800703c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007040:	f003 030c 	and.w	r3, r3, #12
 8007044:	2b0c      	cmp	r3, #12
 8007046:	d82d      	bhi.n	80070a4 <UART_SetConfig+0x164>
 8007048:	a201      	add	r2, pc, #4	@ (adr r2, 8007050 <UART_SetConfig+0x110>)
 800704a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800704e:	bf00      	nop
 8007050:	08007085 	.word	0x08007085
 8007054:	080070a5 	.word	0x080070a5
 8007058:	080070a5 	.word	0x080070a5
 800705c:	080070a5 	.word	0x080070a5
 8007060:	08007095 	.word	0x08007095
 8007064:	080070a5 	.word	0x080070a5
 8007068:	080070a5 	.word	0x080070a5
 800706c:	080070a5 	.word	0x080070a5
 8007070:	0800708d 	.word	0x0800708d
 8007074:	080070a5 	.word	0x080070a5
 8007078:	080070a5 	.word	0x080070a5
 800707c:	080070a5 	.word	0x080070a5
 8007080:	0800709d 	.word	0x0800709d
 8007084:	2300      	movs	r3, #0
 8007086:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800708a:	e098      	b.n	80071be <UART_SetConfig+0x27e>
 800708c:	2302      	movs	r3, #2
 800708e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007092:	e094      	b.n	80071be <UART_SetConfig+0x27e>
 8007094:	2304      	movs	r3, #4
 8007096:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800709a:	e090      	b.n	80071be <UART_SetConfig+0x27e>
 800709c:	2308      	movs	r3, #8
 800709e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80070a2:	e08c      	b.n	80071be <UART_SetConfig+0x27e>
 80070a4:	2310      	movs	r3, #16
 80070a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80070aa:	e088      	b.n	80071be <UART_SetConfig+0x27e>
 80070ac:	697b      	ldr	r3, [r7, #20]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	4a5f      	ldr	r2, [pc, #380]	@ (8007230 <UART_SetConfig+0x2f0>)
 80070b2:	4293      	cmp	r3, r2
 80070b4:	d125      	bne.n	8007102 <UART_SetConfig+0x1c2>
 80070b6:	4b5c      	ldr	r3, [pc, #368]	@ (8007228 <UART_SetConfig+0x2e8>)
 80070b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80070bc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80070c0:	2b30      	cmp	r3, #48	@ 0x30
 80070c2:	d016      	beq.n	80070f2 <UART_SetConfig+0x1b2>
 80070c4:	2b30      	cmp	r3, #48	@ 0x30
 80070c6:	d818      	bhi.n	80070fa <UART_SetConfig+0x1ba>
 80070c8:	2b20      	cmp	r3, #32
 80070ca:	d00a      	beq.n	80070e2 <UART_SetConfig+0x1a2>
 80070cc:	2b20      	cmp	r3, #32
 80070ce:	d814      	bhi.n	80070fa <UART_SetConfig+0x1ba>
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d002      	beq.n	80070da <UART_SetConfig+0x19a>
 80070d4:	2b10      	cmp	r3, #16
 80070d6:	d008      	beq.n	80070ea <UART_SetConfig+0x1aa>
 80070d8:	e00f      	b.n	80070fa <UART_SetConfig+0x1ba>
 80070da:	2300      	movs	r3, #0
 80070dc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80070e0:	e06d      	b.n	80071be <UART_SetConfig+0x27e>
 80070e2:	2302      	movs	r3, #2
 80070e4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80070e8:	e069      	b.n	80071be <UART_SetConfig+0x27e>
 80070ea:	2304      	movs	r3, #4
 80070ec:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80070f0:	e065      	b.n	80071be <UART_SetConfig+0x27e>
 80070f2:	2308      	movs	r3, #8
 80070f4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80070f8:	e061      	b.n	80071be <UART_SetConfig+0x27e>
 80070fa:	2310      	movs	r3, #16
 80070fc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007100:	e05d      	b.n	80071be <UART_SetConfig+0x27e>
 8007102:	697b      	ldr	r3, [r7, #20]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	4a4b      	ldr	r2, [pc, #300]	@ (8007234 <UART_SetConfig+0x2f4>)
 8007108:	4293      	cmp	r3, r2
 800710a:	d125      	bne.n	8007158 <UART_SetConfig+0x218>
 800710c:	4b46      	ldr	r3, [pc, #280]	@ (8007228 <UART_SetConfig+0x2e8>)
 800710e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007112:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007116:	2bc0      	cmp	r3, #192	@ 0xc0
 8007118:	d016      	beq.n	8007148 <UART_SetConfig+0x208>
 800711a:	2bc0      	cmp	r3, #192	@ 0xc0
 800711c:	d818      	bhi.n	8007150 <UART_SetConfig+0x210>
 800711e:	2b80      	cmp	r3, #128	@ 0x80
 8007120:	d00a      	beq.n	8007138 <UART_SetConfig+0x1f8>
 8007122:	2b80      	cmp	r3, #128	@ 0x80
 8007124:	d814      	bhi.n	8007150 <UART_SetConfig+0x210>
 8007126:	2b00      	cmp	r3, #0
 8007128:	d002      	beq.n	8007130 <UART_SetConfig+0x1f0>
 800712a:	2b40      	cmp	r3, #64	@ 0x40
 800712c:	d008      	beq.n	8007140 <UART_SetConfig+0x200>
 800712e:	e00f      	b.n	8007150 <UART_SetConfig+0x210>
 8007130:	2300      	movs	r3, #0
 8007132:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007136:	e042      	b.n	80071be <UART_SetConfig+0x27e>
 8007138:	2302      	movs	r3, #2
 800713a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800713e:	e03e      	b.n	80071be <UART_SetConfig+0x27e>
 8007140:	2304      	movs	r3, #4
 8007142:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007146:	e03a      	b.n	80071be <UART_SetConfig+0x27e>
 8007148:	2308      	movs	r3, #8
 800714a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800714e:	e036      	b.n	80071be <UART_SetConfig+0x27e>
 8007150:	2310      	movs	r3, #16
 8007152:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007156:	e032      	b.n	80071be <UART_SetConfig+0x27e>
 8007158:	697b      	ldr	r3, [r7, #20]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	4a30      	ldr	r2, [pc, #192]	@ (8007220 <UART_SetConfig+0x2e0>)
 800715e:	4293      	cmp	r3, r2
 8007160:	d12a      	bne.n	80071b8 <UART_SetConfig+0x278>
 8007162:	4b31      	ldr	r3, [pc, #196]	@ (8007228 <UART_SetConfig+0x2e8>)
 8007164:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007168:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800716c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007170:	d01a      	beq.n	80071a8 <UART_SetConfig+0x268>
 8007172:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007176:	d81b      	bhi.n	80071b0 <UART_SetConfig+0x270>
 8007178:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800717c:	d00c      	beq.n	8007198 <UART_SetConfig+0x258>
 800717e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007182:	d815      	bhi.n	80071b0 <UART_SetConfig+0x270>
 8007184:	2b00      	cmp	r3, #0
 8007186:	d003      	beq.n	8007190 <UART_SetConfig+0x250>
 8007188:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800718c:	d008      	beq.n	80071a0 <UART_SetConfig+0x260>
 800718e:	e00f      	b.n	80071b0 <UART_SetConfig+0x270>
 8007190:	2300      	movs	r3, #0
 8007192:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007196:	e012      	b.n	80071be <UART_SetConfig+0x27e>
 8007198:	2302      	movs	r3, #2
 800719a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800719e:	e00e      	b.n	80071be <UART_SetConfig+0x27e>
 80071a0:	2304      	movs	r3, #4
 80071a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80071a6:	e00a      	b.n	80071be <UART_SetConfig+0x27e>
 80071a8:	2308      	movs	r3, #8
 80071aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80071ae:	e006      	b.n	80071be <UART_SetConfig+0x27e>
 80071b0:	2310      	movs	r3, #16
 80071b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80071b6:	e002      	b.n	80071be <UART_SetConfig+0x27e>
 80071b8:	2310      	movs	r3, #16
 80071ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80071be:	697b      	ldr	r3, [r7, #20]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	4a17      	ldr	r2, [pc, #92]	@ (8007220 <UART_SetConfig+0x2e0>)
 80071c4:	4293      	cmp	r3, r2
 80071c6:	f040 80a8 	bne.w	800731a <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80071ca:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80071ce:	2b08      	cmp	r3, #8
 80071d0:	d834      	bhi.n	800723c <UART_SetConfig+0x2fc>
 80071d2:	a201      	add	r2, pc, #4	@ (adr r2, 80071d8 <UART_SetConfig+0x298>)
 80071d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071d8:	080071fd 	.word	0x080071fd
 80071dc:	0800723d 	.word	0x0800723d
 80071e0:	08007205 	.word	0x08007205
 80071e4:	0800723d 	.word	0x0800723d
 80071e8:	0800720b 	.word	0x0800720b
 80071ec:	0800723d 	.word	0x0800723d
 80071f0:	0800723d 	.word	0x0800723d
 80071f4:	0800723d 	.word	0x0800723d
 80071f8:	08007213 	.word	0x08007213
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80071fc:	f7fe fa2e 	bl	800565c <HAL_RCC_GetPCLK1Freq>
 8007200:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007202:	e021      	b.n	8007248 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007204:	4b0c      	ldr	r3, [pc, #48]	@ (8007238 <UART_SetConfig+0x2f8>)
 8007206:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007208:	e01e      	b.n	8007248 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800720a:	f7fe f9b9 	bl	8005580 <HAL_RCC_GetSysClockFreq>
 800720e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007210:	e01a      	b.n	8007248 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007212:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007216:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007218:	e016      	b.n	8007248 <UART_SetConfig+0x308>
 800721a:	bf00      	nop
 800721c:	cfff69f3 	.word	0xcfff69f3
 8007220:	40008000 	.word	0x40008000
 8007224:	40013800 	.word	0x40013800
 8007228:	40021000 	.word	0x40021000
 800722c:	40004400 	.word	0x40004400
 8007230:	40004800 	.word	0x40004800
 8007234:	40004c00 	.word	0x40004c00
 8007238:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800723c:	2300      	movs	r3, #0
 800723e:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007240:	2301      	movs	r3, #1
 8007242:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007246:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007248:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800724a:	2b00      	cmp	r3, #0
 800724c:	f000 812a 	beq.w	80074a4 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007250:	697b      	ldr	r3, [r7, #20]
 8007252:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007254:	4a9e      	ldr	r2, [pc, #632]	@ (80074d0 <UART_SetConfig+0x590>)
 8007256:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800725a:	461a      	mov	r2, r3
 800725c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800725e:	fbb3 f3f2 	udiv	r3, r3, r2
 8007262:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007264:	697b      	ldr	r3, [r7, #20]
 8007266:	685a      	ldr	r2, [r3, #4]
 8007268:	4613      	mov	r3, r2
 800726a:	005b      	lsls	r3, r3, #1
 800726c:	4413      	add	r3, r2
 800726e:	69ba      	ldr	r2, [r7, #24]
 8007270:	429a      	cmp	r2, r3
 8007272:	d305      	bcc.n	8007280 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007274:	697b      	ldr	r3, [r7, #20]
 8007276:	685b      	ldr	r3, [r3, #4]
 8007278:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800727a:	69ba      	ldr	r2, [r7, #24]
 800727c:	429a      	cmp	r2, r3
 800727e:	d903      	bls.n	8007288 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8007280:	2301      	movs	r3, #1
 8007282:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007286:	e10d      	b.n	80074a4 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007288:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800728a:	2200      	movs	r2, #0
 800728c:	60bb      	str	r3, [r7, #8]
 800728e:	60fa      	str	r2, [r7, #12]
 8007290:	697b      	ldr	r3, [r7, #20]
 8007292:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007294:	4a8e      	ldr	r2, [pc, #568]	@ (80074d0 <UART_SetConfig+0x590>)
 8007296:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800729a:	b29b      	uxth	r3, r3
 800729c:	2200      	movs	r2, #0
 800729e:	603b      	str	r3, [r7, #0]
 80072a0:	607a      	str	r2, [r7, #4]
 80072a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80072a6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80072aa:	f7f9 fb83 	bl	80009b4 <__aeabi_uldivmod>
 80072ae:	4602      	mov	r2, r0
 80072b0:	460b      	mov	r3, r1
 80072b2:	4610      	mov	r0, r2
 80072b4:	4619      	mov	r1, r3
 80072b6:	f04f 0200 	mov.w	r2, #0
 80072ba:	f04f 0300 	mov.w	r3, #0
 80072be:	020b      	lsls	r3, r1, #8
 80072c0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80072c4:	0202      	lsls	r2, r0, #8
 80072c6:	6979      	ldr	r1, [r7, #20]
 80072c8:	6849      	ldr	r1, [r1, #4]
 80072ca:	0849      	lsrs	r1, r1, #1
 80072cc:	2000      	movs	r0, #0
 80072ce:	460c      	mov	r4, r1
 80072d0:	4605      	mov	r5, r0
 80072d2:	eb12 0804 	adds.w	r8, r2, r4
 80072d6:	eb43 0905 	adc.w	r9, r3, r5
 80072da:	697b      	ldr	r3, [r7, #20]
 80072dc:	685b      	ldr	r3, [r3, #4]
 80072de:	2200      	movs	r2, #0
 80072e0:	469a      	mov	sl, r3
 80072e2:	4693      	mov	fp, r2
 80072e4:	4652      	mov	r2, sl
 80072e6:	465b      	mov	r3, fp
 80072e8:	4640      	mov	r0, r8
 80072ea:	4649      	mov	r1, r9
 80072ec:	f7f9 fb62 	bl	80009b4 <__aeabi_uldivmod>
 80072f0:	4602      	mov	r2, r0
 80072f2:	460b      	mov	r3, r1
 80072f4:	4613      	mov	r3, r2
 80072f6:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80072f8:	6a3b      	ldr	r3, [r7, #32]
 80072fa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80072fe:	d308      	bcc.n	8007312 <UART_SetConfig+0x3d2>
 8007300:	6a3b      	ldr	r3, [r7, #32]
 8007302:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007306:	d204      	bcs.n	8007312 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8007308:	697b      	ldr	r3, [r7, #20]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	6a3a      	ldr	r2, [r7, #32]
 800730e:	60da      	str	r2, [r3, #12]
 8007310:	e0c8      	b.n	80074a4 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8007312:	2301      	movs	r3, #1
 8007314:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007318:	e0c4      	b.n	80074a4 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800731a:	697b      	ldr	r3, [r7, #20]
 800731c:	69db      	ldr	r3, [r3, #28]
 800731e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007322:	d167      	bne.n	80073f4 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8007324:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007328:	2b08      	cmp	r3, #8
 800732a:	d828      	bhi.n	800737e <UART_SetConfig+0x43e>
 800732c:	a201      	add	r2, pc, #4	@ (adr r2, 8007334 <UART_SetConfig+0x3f4>)
 800732e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007332:	bf00      	nop
 8007334:	08007359 	.word	0x08007359
 8007338:	08007361 	.word	0x08007361
 800733c:	08007369 	.word	0x08007369
 8007340:	0800737f 	.word	0x0800737f
 8007344:	0800736f 	.word	0x0800736f
 8007348:	0800737f 	.word	0x0800737f
 800734c:	0800737f 	.word	0x0800737f
 8007350:	0800737f 	.word	0x0800737f
 8007354:	08007377 	.word	0x08007377
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007358:	f7fe f980 	bl	800565c <HAL_RCC_GetPCLK1Freq>
 800735c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800735e:	e014      	b.n	800738a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007360:	f7fe f992 	bl	8005688 <HAL_RCC_GetPCLK2Freq>
 8007364:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007366:	e010      	b.n	800738a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007368:	4b5a      	ldr	r3, [pc, #360]	@ (80074d4 <UART_SetConfig+0x594>)
 800736a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800736c:	e00d      	b.n	800738a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800736e:	f7fe f907 	bl	8005580 <HAL_RCC_GetSysClockFreq>
 8007372:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007374:	e009      	b.n	800738a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007376:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800737a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800737c:	e005      	b.n	800738a <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 800737e:	2300      	movs	r3, #0
 8007380:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007382:	2301      	movs	r3, #1
 8007384:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007388:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800738a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800738c:	2b00      	cmp	r3, #0
 800738e:	f000 8089 	beq.w	80074a4 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007392:	697b      	ldr	r3, [r7, #20]
 8007394:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007396:	4a4e      	ldr	r2, [pc, #312]	@ (80074d0 <UART_SetConfig+0x590>)
 8007398:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800739c:	461a      	mov	r2, r3
 800739e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073a0:	fbb3 f3f2 	udiv	r3, r3, r2
 80073a4:	005a      	lsls	r2, r3, #1
 80073a6:	697b      	ldr	r3, [r7, #20]
 80073a8:	685b      	ldr	r3, [r3, #4]
 80073aa:	085b      	lsrs	r3, r3, #1
 80073ac:	441a      	add	r2, r3
 80073ae:	697b      	ldr	r3, [r7, #20]
 80073b0:	685b      	ldr	r3, [r3, #4]
 80073b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80073b6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80073b8:	6a3b      	ldr	r3, [r7, #32]
 80073ba:	2b0f      	cmp	r3, #15
 80073bc:	d916      	bls.n	80073ec <UART_SetConfig+0x4ac>
 80073be:	6a3b      	ldr	r3, [r7, #32]
 80073c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80073c4:	d212      	bcs.n	80073ec <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80073c6:	6a3b      	ldr	r3, [r7, #32]
 80073c8:	b29b      	uxth	r3, r3
 80073ca:	f023 030f 	bic.w	r3, r3, #15
 80073ce:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80073d0:	6a3b      	ldr	r3, [r7, #32]
 80073d2:	085b      	lsrs	r3, r3, #1
 80073d4:	b29b      	uxth	r3, r3
 80073d6:	f003 0307 	and.w	r3, r3, #7
 80073da:	b29a      	uxth	r2, r3
 80073dc:	8bfb      	ldrh	r3, [r7, #30]
 80073de:	4313      	orrs	r3, r2
 80073e0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80073e2:	697b      	ldr	r3, [r7, #20]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	8bfa      	ldrh	r2, [r7, #30]
 80073e8:	60da      	str	r2, [r3, #12]
 80073ea:	e05b      	b.n	80074a4 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80073ec:	2301      	movs	r3, #1
 80073ee:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80073f2:	e057      	b.n	80074a4 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 80073f4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80073f8:	2b08      	cmp	r3, #8
 80073fa:	d828      	bhi.n	800744e <UART_SetConfig+0x50e>
 80073fc:	a201      	add	r2, pc, #4	@ (adr r2, 8007404 <UART_SetConfig+0x4c4>)
 80073fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007402:	bf00      	nop
 8007404:	08007429 	.word	0x08007429
 8007408:	08007431 	.word	0x08007431
 800740c:	08007439 	.word	0x08007439
 8007410:	0800744f 	.word	0x0800744f
 8007414:	0800743f 	.word	0x0800743f
 8007418:	0800744f 	.word	0x0800744f
 800741c:	0800744f 	.word	0x0800744f
 8007420:	0800744f 	.word	0x0800744f
 8007424:	08007447 	.word	0x08007447
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007428:	f7fe f918 	bl	800565c <HAL_RCC_GetPCLK1Freq>
 800742c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800742e:	e014      	b.n	800745a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007430:	f7fe f92a 	bl	8005688 <HAL_RCC_GetPCLK2Freq>
 8007434:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007436:	e010      	b.n	800745a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007438:	4b26      	ldr	r3, [pc, #152]	@ (80074d4 <UART_SetConfig+0x594>)
 800743a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800743c:	e00d      	b.n	800745a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800743e:	f7fe f89f 	bl	8005580 <HAL_RCC_GetSysClockFreq>
 8007442:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007444:	e009      	b.n	800745a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007446:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800744a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800744c:	e005      	b.n	800745a <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800744e:	2300      	movs	r3, #0
 8007450:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007452:	2301      	movs	r3, #1
 8007454:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007458:	bf00      	nop
    }

    if (pclk != 0U)
 800745a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800745c:	2b00      	cmp	r3, #0
 800745e:	d021      	beq.n	80074a4 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007460:	697b      	ldr	r3, [r7, #20]
 8007462:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007464:	4a1a      	ldr	r2, [pc, #104]	@ (80074d0 <UART_SetConfig+0x590>)
 8007466:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800746a:	461a      	mov	r2, r3
 800746c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800746e:	fbb3 f2f2 	udiv	r2, r3, r2
 8007472:	697b      	ldr	r3, [r7, #20]
 8007474:	685b      	ldr	r3, [r3, #4]
 8007476:	085b      	lsrs	r3, r3, #1
 8007478:	441a      	add	r2, r3
 800747a:	697b      	ldr	r3, [r7, #20]
 800747c:	685b      	ldr	r3, [r3, #4]
 800747e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007482:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007484:	6a3b      	ldr	r3, [r7, #32]
 8007486:	2b0f      	cmp	r3, #15
 8007488:	d909      	bls.n	800749e <UART_SetConfig+0x55e>
 800748a:	6a3b      	ldr	r3, [r7, #32]
 800748c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007490:	d205      	bcs.n	800749e <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007492:	6a3b      	ldr	r3, [r7, #32]
 8007494:	b29a      	uxth	r2, r3
 8007496:	697b      	ldr	r3, [r7, #20]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	60da      	str	r2, [r3, #12]
 800749c:	e002      	b.n	80074a4 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800749e:	2301      	movs	r3, #1
 80074a0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80074a4:	697b      	ldr	r3, [r7, #20]
 80074a6:	2201      	movs	r2, #1
 80074a8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80074ac:	697b      	ldr	r3, [r7, #20]
 80074ae:	2201      	movs	r2, #1
 80074b0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80074b4:	697b      	ldr	r3, [r7, #20]
 80074b6:	2200      	movs	r2, #0
 80074b8:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80074ba:	697b      	ldr	r3, [r7, #20]
 80074bc:	2200      	movs	r2, #0
 80074be:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80074c0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80074c4:	4618      	mov	r0, r3
 80074c6:	3730      	adds	r7, #48	@ 0x30
 80074c8:	46bd      	mov	sp, r7
 80074ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80074ce:	bf00      	nop
 80074d0:	080087b4 	.word	0x080087b4
 80074d4:	00f42400 	.word	0x00f42400

080074d8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80074d8:	b480      	push	{r7}
 80074da:	b083      	sub	sp, #12
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074e4:	f003 0308 	and.w	r3, r3, #8
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d00a      	beq.n	8007502 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	685b      	ldr	r3, [r3, #4]
 80074f2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	430a      	orrs	r2, r1
 8007500:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007506:	f003 0301 	and.w	r3, r3, #1
 800750a:	2b00      	cmp	r3, #0
 800750c:	d00a      	beq.n	8007524 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	685b      	ldr	r3, [r3, #4]
 8007514:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	430a      	orrs	r2, r1
 8007522:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007528:	f003 0302 	and.w	r3, r3, #2
 800752c:	2b00      	cmp	r3, #0
 800752e:	d00a      	beq.n	8007546 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	685b      	ldr	r3, [r3, #4]
 8007536:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	430a      	orrs	r2, r1
 8007544:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800754a:	f003 0304 	and.w	r3, r3, #4
 800754e:	2b00      	cmp	r3, #0
 8007550:	d00a      	beq.n	8007568 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	685b      	ldr	r3, [r3, #4]
 8007558:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	430a      	orrs	r2, r1
 8007566:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800756c:	f003 0310 	and.w	r3, r3, #16
 8007570:	2b00      	cmp	r3, #0
 8007572:	d00a      	beq.n	800758a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	689b      	ldr	r3, [r3, #8]
 800757a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	430a      	orrs	r2, r1
 8007588:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800758e:	f003 0320 	and.w	r3, r3, #32
 8007592:	2b00      	cmp	r3, #0
 8007594:	d00a      	beq.n	80075ac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	689b      	ldr	r3, [r3, #8]
 800759c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	430a      	orrs	r2, r1
 80075aa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d01a      	beq.n	80075ee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	685b      	ldr	r3, [r3, #4]
 80075be:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	430a      	orrs	r2, r1
 80075cc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80075d2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80075d6:	d10a      	bne.n	80075ee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	685b      	ldr	r3, [r3, #4]
 80075de:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	430a      	orrs	r2, r1
 80075ec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d00a      	beq.n	8007610 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	685b      	ldr	r3, [r3, #4]
 8007600:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	430a      	orrs	r2, r1
 800760e:	605a      	str	r2, [r3, #4]
  }
}
 8007610:	bf00      	nop
 8007612:	370c      	adds	r7, #12
 8007614:	46bd      	mov	sp, r7
 8007616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761a:	4770      	bx	lr

0800761c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800761c:	b580      	push	{r7, lr}
 800761e:	b098      	sub	sp, #96	@ 0x60
 8007620:	af02      	add	r7, sp, #8
 8007622:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	2200      	movs	r2, #0
 8007628:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800762c:	f7fa fb10 	bl	8001c50 <HAL_GetTick>
 8007630:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	f003 0308 	and.w	r3, r3, #8
 800763c:	2b08      	cmp	r3, #8
 800763e:	d12f      	bne.n	80076a0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007640:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007644:	9300      	str	r3, [sp, #0]
 8007646:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007648:	2200      	movs	r2, #0
 800764a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800764e:	6878      	ldr	r0, [r7, #4]
 8007650:	f000 f88e 	bl	8007770 <UART_WaitOnFlagUntilTimeout>
 8007654:	4603      	mov	r3, r0
 8007656:	2b00      	cmp	r3, #0
 8007658:	d022      	beq.n	80076a0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007660:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007662:	e853 3f00 	ldrex	r3, [r3]
 8007666:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007668:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800766a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800766e:	653b      	str	r3, [r7, #80]	@ 0x50
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	461a      	mov	r2, r3
 8007676:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007678:	647b      	str	r3, [r7, #68]	@ 0x44
 800767a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800767c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800767e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007680:	e841 2300 	strex	r3, r2, [r1]
 8007684:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007686:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007688:	2b00      	cmp	r3, #0
 800768a:	d1e6      	bne.n	800765a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	2220      	movs	r2, #32
 8007690:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	2200      	movs	r2, #0
 8007698:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800769c:	2303      	movs	r3, #3
 800769e:	e063      	b.n	8007768 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	f003 0304 	and.w	r3, r3, #4
 80076aa:	2b04      	cmp	r3, #4
 80076ac:	d149      	bne.n	8007742 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80076ae:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80076b2:	9300      	str	r3, [sp, #0]
 80076b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80076b6:	2200      	movs	r2, #0
 80076b8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80076bc:	6878      	ldr	r0, [r7, #4]
 80076be:	f000 f857 	bl	8007770 <UART_WaitOnFlagUntilTimeout>
 80076c2:	4603      	mov	r3, r0
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d03c      	beq.n	8007742 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076d0:	e853 3f00 	ldrex	r3, [r3]
 80076d4:	623b      	str	r3, [r7, #32]
   return(result);
 80076d6:	6a3b      	ldr	r3, [r7, #32]
 80076d8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80076dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	461a      	mov	r2, r3
 80076e4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80076e6:	633b      	str	r3, [r7, #48]	@ 0x30
 80076e8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076ea:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80076ec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80076ee:	e841 2300 	strex	r3, r2, [r1]
 80076f2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80076f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d1e6      	bne.n	80076c8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	3308      	adds	r3, #8
 8007700:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007702:	693b      	ldr	r3, [r7, #16]
 8007704:	e853 3f00 	ldrex	r3, [r3]
 8007708:	60fb      	str	r3, [r7, #12]
   return(result);
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	f023 0301 	bic.w	r3, r3, #1
 8007710:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	3308      	adds	r3, #8
 8007718:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800771a:	61fa      	str	r2, [r7, #28]
 800771c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800771e:	69b9      	ldr	r1, [r7, #24]
 8007720:	69fa      	ldr	r2, [r7, #28]
 8007722:	e841 2300 	strex	r3, r2, [r1]
 8007726:	617b      	str	r3, [r7, #20]
   return(result);
 8007728:	697b      	ldr	r3, [r7, #20]
 800772a:	2b00      	cmp	r3, #0
 800772c:	d1e5      	bne.n	80076fa <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	2220      	movs	r2, #32
 8007732:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	2200      	movs	r2, #0
 800773a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800773e:	2303      	movs	r3, #3
 8007740:	e012      	b.n	8007768 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	2220      	movs	r2, #32
 8007746:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	2220      	movs	r2, #32
 800774e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	2200      	movs	r2, #0
 8007756:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	2200      	movs	r2, #0
 800775c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	2200      	movs	r2, #0
 8007762:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007766:	2300      	movs	r3, #0
}
 8007768:	4618      	mov	r0, r3
 800776a:	3758      	adds	r7, #88	@ 0x58
 800776c:	46bd      	mov	sp, r7
 800776e:	bd80      	pop	{r7, pc}

08007770 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007770:	b580      	push	{r7, lr}
 8007772:	b084      	sub	sp, #16
 8007774:	af00      	add	r7, sp, #0
 8007776:	60f8      	str	r0, [r7, #12]
 8007778:	60b9      	str	r1, [r7, #8]
 800777a:	603b      	str	r3, [r7, #0]
 800777c:	4613      	mov	r3, r2
 800777e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007780:	e04f      	b.n	8007822 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007782:	69bb      	ldr	r3, [r7, #24]
 8007784:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007788:	d04b      	beq.n	8007822 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800778a:	f7fa fa61 	bl	8001c50 <HAL_GetTick>
 800778e:	4602      	mov	r2, r0
 8007790:	683b      	ldr	r3, [r7, #0]
 8007792:	1ad3      	subs	r3, r2, r3
 8007794:	69ba      	ldr	r2, [r7, #24]
 8007796:	429a      	cmp	r2, r3
 8007798:	d302      	bcc.n	80077a0 <UART_WaitOnFlagUntilTimeout+0x30>
 800779a:	69bb      	ldr	r3, [r7, #24]
 800779c:	2b00      	cmp	r3, #0
 800779e:	d101      	bne.n	80077a4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80077a0:	2303      	movs	r3, #3
 80077a2:	e04e      	b.n	8007842 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	f003 0304 	and.w	r3, r3, #4
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d037      	beq.n	8007822 <UART_WaitOnFlagUntilTimeout+0xb2>
 80077b2:	68bb      	ldr	r3, [r7, #8]
 80077b4:	2b80      	cmp	r3, #128	@ 0x80
 80077b6:	d034      	beq.n	8007822 <UART_WaitOnFlagUntilTimeout+0xb2>
 80077b8:	68bb      	ldr	r3, [r7, #8]
 80077ba:	2b40      	cmp	r3, #64	@ 0x40
 80077bc:	d031      	beq.n	8007822 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	69db      	ldr	r3, [r3, #28]
 80077c4:	f003 0308 	and.w	r3, r3, #8
 80077c8:	2b08      	cmp	r3, #8
 80077ca:	d110      	bne.n	80077ee <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	2208      	movs	r2, #8
 80077d2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80077d4:	68f8      	ldr	r0, [r7, #12]
 80077d6:	f000 f838 	bl	800784a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	2208      	movs	r2, #8
 80077de:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	2200      	movs	r2, #0
 80077e6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80077ea:	2301      	movs	r3, #1
 80077ec:	e029      	b.n	8007842 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	69db      	ldr	r3, [r3, #28]
 80077f4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80077f8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80077fc:	d111      	bne.n	8007822 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007806:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007808:	68f8      	ldr	r0, [r7, #12]
 800780a:	f000 f81e 	bl	800784a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	2220      	movs	r2, #32
 8007812:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	2200      	movs	r2, #0
 800781a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800781e:	2303      	movs	r3, #3
 8007820:	e00f      	b.n	8007842 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	69da      	ldr	r2, [r3, #28]
 8007828:	68bb      	ldr	r3, [r7, #8]
 800782a:	4013      	ands	r3, r2
 800782c:	68ba      	ldr	r2, [r7, #8]
 800782e:	429a      	cmp	r2, r3
 8007830:	bf0c      	ite	eq
 8007832:	2301      	moveq	r3, #1
 8007834:	2300      	movne	r3, #0
 8007836:	b2db      	uxtb	r3, r3
 8007838:	461a      	mov	r2, r3
 800783a:	79fb      	ldrb	r3, [r7, #7]
 800783c:	429a      	cmp	r2, r3
 800783e:	d0a0      	beq.n	8007782 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007840:	2300      	movs	r3, #0
}
 8007842:	4618      	mov	r0, r3
 8007844:	3710      	adds	r7, #16
 8007846:	46bd      	mov	sp, r7
 8007848:	bd80      	pop	{r7, pc}

0800784a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800784a:	b480      	push	{r7}
 800784c:	b095      	sub	sp, #84	@ 0x54
 800784e:	af00      	add	r7, sp, #0
 8007850:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007858:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800785a:	e853 3f00 	ldrex	r3, [r3]
 800785e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007860:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007862:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007866:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	461a      	mov	r2, r3
 800786e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007870:	643b      	str	r3, [r7, #64]	@ 0x40
 8007872:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007874:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007876:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007878:	e841 2300 	strex	r3, r2, [r1]
 800787c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800787e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007880:	2b00      	cmp	r3, #0
 8007882:	d1e6      	bne.n	8007852 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	3308      	adds	r3, #8
 800788a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800788c:	6a3b      	ldr	r3, [r7, #32]
 800788e:	e853 3f00 	ldrex	r3, [r3]
 8007892:	61fb      	str	r3, [r7, #28]
   return(result);
 8007894:	69fb      	ldr	r3, [r7, #28]
 8007896:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800789a:	f023 0301 	bic.w	r3, r3, #1
 800789e:	64bb      	str	r3, [r7, #72]	@ 0x48
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	3308      	adds	r3, #8
 80078a6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80078a8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80078aa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078ac:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80078ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80078b0:	e841 2300 	strex	r3, r2, [r1]
 80078b4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80078b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d1e3      	bne.n	8007884 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80078c0:	2b01      	cmp	r3, #1
 80078c2:	d118      	bne.n	80078f6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	e853 3f00 	ldrex	r3, [r3]
 80078d0:	60bb      	str	r3, [r7, #8]
   return(result);
 80078d2:	68bb      	ldr	r3, [r7, #8]
 80078d4:	f023 0310 	bic.w	r3, r3, #16
 80078d8:	647b      	str	r3, [r7, #68]	@ 0x44
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	461a      	mov	r2, r3
 80078e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80078e2:	61bb      	str	r3, [r7, #24]
 80078e4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078e6:	6979      	ldr	r1, [r7, #20]
 80078e8:	69ba      	ldr	r2, [r7, #24]
 80078ea:	e841 2300 	strex	r3, r2, [r1]
 80078ee:	613b      	str	r3, [r7, #16]
   return(result);
 80078f0:	693b      	ldr	r3, [r7, #16]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d1e6      	bne.n	80078c4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	2220      	movs	r2, #32
 80078fa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	2200      	movs	r2, #0
 8007902:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	2200      	movs	r2, #0
 8007908:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800790a:	bf00      	nop
 800790c:	3754      	adds	r7, #84	@ 0x54
 800790e:	46bd      	mov	sp, r7
 8007910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007914:	4770      	bx	lr

08007916 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007916:	b480      	push	{r7}
 8007918:	b085      	sub	sp, #20
 800791a:	af00      	add	r7, sp, #0
 800791c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007924:	2b01      	cmp	r3, #1
 8007926:	d101      	bne.n	800792c <HAL_UARTEx_DisableFifoMode+0x16>
 8007928:	2302      	movs	r3, #2
 800792a:	e027      	b.n	800797c <HAL_UARTEx_DisableFifoMode+0x66>
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	2201      	movs	r2, #1
 8007930:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	2224      	movs	r2, #36	@ 0x24
 8007938:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	681a      	ldr	r2, [r3, #0]
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	f022 0201 	bic.w	r2, r2, #1
 8007952:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800795a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	2200      	movs	r2, #0
 8007960:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	68fa      	ldr	r2, [r7, #12]
 8007968:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	2220      	movs	r2, #32
 800796e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	2200      	movs	r2, #0
 8007976:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800797a:	2300      	movs	r3, #0
}
 800797c:	4618      	mov	r0, r3
 800797e:	3714      	adds	r7, #20
 8007980:	46bd      	mov	sp, r7
 8007982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007986:	4770      	bx	lr

08007988 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007988:	b580      	push	{r7, lr}
 800798a:	b084      	sub	sp, #16
 800798c:	af00      	add	r7, sp, #0
 800798e:	6078      	str	r0, [r7, #4]
 8007990:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007998:	2b01      	cmp	r3, #1
 800799a:	d101      	bne.n	80079a0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800799c:	2302      	movs	r3, #2
 800799e:	e02d      	b.n	80079fc <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	2201      	movs	r2, #1
 80079a4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	2224      	movs	r2, #36	@ 0x24
 80079ac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	681a      	ldr	r2, [r3, #0]
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	f022 0201 	bic.w	r2, r2, #1
 80079c6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	689b      	ldr	r3, [r3, #8]
 80079ce:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	683a      	ldr	r2, [r7, #0]
 80079d8:	430a      	orrs	r2, r1
 80079da:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80079dc:	6878      	ldr	r0, [r7, #4]
 80079de:	f000 f84f 	bl	8007a80 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	68fa      	ldr	r2, [r7, #12]
 80079e8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	2220      	movs	r2, #32
 80079ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	2200      	movs	r2, #0
 80079f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80079fa:	2300      	movs	r3, #0
}
 80079fc:	4618      	mov	r0, r3
 80079fe:	3710      	adds	r7, #16
 8007a00:	46bd      	mov	sp, r7
 8007a02:	bd80      	pop	{r7, pc}

08007a04 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007a04:	b580      	push	{r7, lr}
 8007a06:	b084      	sub	sp, #16
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	6078      	str	r0, [r7, #4]
 8007a0c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007a14:	2b01      	cmp	r3, #1
 8007a16:	d101      	bne.n	8007a1c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007a18:	2302      	movs	r3, #2
 8007a1a:	e02d      	b.n	8007a78 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	2201      	movs	r2, #1
 8007a20:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	2224      	movs	r2, #36	@ 0x24
 8007a28:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	681a      	ldr	r2, [r3, #0]
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	f022 0201 	bic.w	r2, r2, #1
 8007a42:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	689b      	ldr	r3, [r3, #8]
 8007a4a:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	683a      	ldr	r2, [r7, #0]
 8007a54:	430a      	orrs	r2, r1
 8007a56:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007a58:	6878      	ldr	r0, [r7, #4]
 8007a5a:	f000 f811 	bl	8007a80 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	68fa      	ldr	r2, [r7, #12]
 8007a64:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	2220      	movs	r2, #32
 8007a6a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	2200      	movs	r2, #0
 8007a72:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007a76:	2300      	movs	r3, #0
}
 8007a78:	4618      	mov	r0, r3
 8007a7a:	3710      	adds	r7, #16
 8007a7c:	46bd      	mov	sp, r7
 8007a7e:	bd80      	pop	{r7, pc}

08007a80 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007a80:	b480      	push	{r7}
 8007a82:	b085      	sub	sp, #20
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d108      	bne.n	8007aa2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	2201      	movs	r2, #1
 8007a94:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	2201      	movs	r2, #1
 8007a9c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007aa0:	e031      	b.n	8007b06 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007aa2:	2308      	movs	r3, #8
 8007aa4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007aa6:	2308      	movs	r3, #8
 8007aa8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	689b      	ldr	r3, [r3, #8]
 8007ab0:	0e5b      	lsrs	r3, r3, #25
 8007ab2:	b2db      	uxtb	r3, r3
 8007ab4:	f003 0307 	and.w	r3, r3, #7
 8007ab8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	689b      	ldr	r3, [r3, #8]
 8007ac0:	0f5b      	lsrs	r3, r3, #29
 8007ac2:	b2db      	uxtb	r3, r3
 8007ac4:	f003 0307 	and.w	r3, r3, #7
 8007ac8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007aca:	7bbb      	ldrb	r3, [r7, #14]
 8007acc:	7b3a      	ldrb	r2, [r7, #12]
 8007ace:	4911      	ldr	r1, [pc, #68]	@ (8007b14 <UARTEx_SetNbDataToProcess+0x94>)
 8007ad0:	5c8a      	ldrb	r2, [r1, r2]
 8007ad2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007ad6:	7b3a      	ldrb	r2, [r7, #12]
 8007ad8:	490f      	ldr	r1, [pc, #60]	@ (8007b18 <UARTEx_SetNbDataToProcess+0x98>)
 8007ada:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007adc:	fb93 f3f2 	sdiv	r3, r3, r2
 8007ae0:	b29a      	uxth	r2, r3
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007ae8:	7bfb      	ldrb	r3, [r7, #15]
 8007aea:	7b7a      	ldrb	r2, [r7, #13]
 8007aec:	4909      	ldr	r1, [pc, #36]	@ (8007b14 <UARTEx_SetNbDataToProcess+0x94>)
 8007aee:	5c8a      	ldrb	r2, [r1, r2]
 8007af0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007af4:	7b7a      	ldrb	r2, [r7, #13]
 8007af6:	4908      	ldr	r1, [pc, #32]	@ (8007b18 <UARTEx_SetNbDataToProcess+0x98>)
 8007af8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007afa:	fb93 f3f2 	sdiv	r3, r3, r2
 8007afe:	b29a      	uxth	r2, r3
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8007b06:	bf00      	nop
 8007b08:	3714      	adds	r7, #20
 8007b0a:	46bd      	mov	sp, r7
 8007b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b10:	4770      	bx	lr
 8007b12:	bf00      	nop
 8007b14:	080087cc 	.word	0x080087cc
 8007b18:	080087d4 	.word	0x080087d4

08007b1c <BNO055_Init>:
 */

#include "BNO055.h"

HAL_StatusTypeDef BNO055_Init(BNO055_Structure *bno, I2C_HandleTypeDef *hi2cx, uint8_t addr, OPRMode mode)
{
 8007b1c:	b580      	push	{r7, lr}
 8007b1e:	b08a      	sub	sp, #40	@ 0x28
 8007b20:	af04      	add	r7, sp, #16
 8007b22:	60f8      	str	r0, [r7, #12]
 8007b24:	60b9      	str	r1, [r7, #8]
 8007b26:	4611      	mov	r1, r2
 8007b28:	461a      	mov	r2, r3
 8007b2a:	460b      	mov	r3, r1
 8007b2c:	71fb      	strb	r3, [r7, #7]
 8007b2e:	4613      	mov	r3, r2
 8007b30:	71bb      	strb	r3, [r7, #6]
	uint8_t txbuffer;
	uint8_t rxbuffer;

	bno->hi2cx = hi2cx;
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	68ba      	ldr	r2, [r7, #8]
 8007b36:	601a      	str	r2, [r3, #0]
	bno->address = BNO055_ADD_H;
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	2252      	movs	r2, #82	@ 0x52
 8007b3c:	711a      	strb	r2, [r3, #4]
	if (addr == 0) bno->address = BNO055_ADD_L;
 8007b3e:	79fb      	ldrb	r3, [r7, #7]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d102      	bne.n	8007b4a <BNO055_Init+0x2e>
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	2250      	movs	r2, #80	@ 0x50
 8007b48:	711a      	strb	r2, [r3, #4]

	HAL_I2C_Mem_Read(bno->hi2cx, bno->address, CHIP_ID, 1, &rxbuffer, 1, 10);
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	6818      	ldr	r0, [r3, #0]
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	791b      	ldrb	r3, [r3, #4]
 8007b52:	4619      	mov	r1, r3
 8007b54:	230a      	movs	r3, #10
 8007b56:	9302      	str	r3, [sp, #8]
 8007b58:	2301      	movs	r3, #1
 8007b5a:	9301      	str	r3, [sp, #4]
 8007b5c:	f107 0316 	add.w	r3, r7, #22
 8007b60:	9300      	str	r3, [sp, #0]
 8007b62:	2301      	movs	r3, #1
 8007b64:	2200      	movs	r2, #0
 8007b66:	f7fa ffe3 	bl	8002b30 <HAL_I2C_Mem_Read>
	if (rxbuffer != 0xA0) {
 8007b6a:	7dbb      	ldrb	r3, [r7, #22]
 8007b6c:	2ba0      	cmp	r3, #160	@ 0xa0
 8007b6e:	d018      	beq.n	8007ba2 <BNO055_Init+0x86>
		HAL_Delay(1000);
 8007b70:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8007b74:	f7fa f878 	bl	8001c68 <HAL_Delay>
		HAL_I2C_Mem_Read(bno->hi2cx, bno->address, CHIP_ID, 1, &rxbuffer, 1, 10);
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	6818      	ldr	r0, [r3, #0]
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	791b      	ldrb	r3, [r3, #4]
 8007b80:	4619      	mov	r1, r3
 8007b82:	230a      	movs	r3, #10
 8007b84:	9302      	str	r3, [sp, #8]
 8007b86:	2301      	movs	r3, #1
 8007b88:	9301      	str	r3, [sp, #4]
 8007b8a:	f107 0316 	add.w	r3, r7, #22
 8007b8e:	9300      	str	r3, [sp, #0]
 8007b90:	2301      	movs	r3, #1
 8007b92:	2200      	movs	r2, #0
 8007b94:	f7fa ffcc 	bl	8002b30 <HAL_I2C_Mem_Read>
		if (rxbuffer != 0xA0) return HAL_ERROR;
 8007b98:	7dbb      	ldrb	r3, [r7, #22]
 8007b9a:	2ba0      	cmp	r3, #160	@ 0xa0
 8007b9c:	d001      	beq.n	8007ba2 <BNO055_Init+0x86>
 8007b9e:	2301      	movs	r3, #1
 8007ba0:	e099      	b.n	8007cd6 <BNO055_Init+0x1ba>
	}

	txbuffer = CONFIGMODE;
 8007ba2:	2300      	movs	r3, #0
 8007ba4:	75fb      	strb	r3, [r7, #23]
	HAL_I2C_Mem_Write(bno->hi2cx, bno->address, OPR_MODE, 1, &txbuffer, 1, 10);
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	6818      	ldr	r0, [r3, #0]
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	791b      	ldrb	r3, [r3, #4]
 8007bae:	4619      	mov	r1, r3
 8007bb0:	230a      	movs	r3, #10
 8007bb2:	9302      	str	r3, [sp, #8]
 8007bb4:	2301      	movs	r3, #1
 8007bb6:	9301      	str	r3, [sp, #4]
 8007bb8:	f107 0317 	add.w	r3, r7, #23
 8007bbc:	9300      	str	r3, [sp, #0]
 8007bbe:	2301      	movs	r3, #1
 8007bc0:	223d      	movs	r2, #61	@ 0x3d
 8007bc2:	f7fa fea1 	bl	8002908 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8007bc6:	200a      	movs	r0, #10
 8007bc8:	f7fa f84e 	bl	8001c68 <HAL_Delay>

	txbuffer = 0x20;
 8007bcc:	2320      	movs	r3, #32
 8007bce:	75fb      	strb	r3, [r7, #23]
	HAL_I2C_Mem_Write(bno->hi2cx, bno->address, SYS_TRIGGER, 1, &txbuffer, 1, 10);
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	6818      	ldr	r0, [r3, #0]
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	791b      	ldrb	r3, [r3, #4]
 8007bd8:	4619      	mov	r1, r3
 8007bda:	230a      	movs	r3, #10
 8007bdc:	9302      	str	r3, [sp, #8]
 8007bde:	2301      	movs	r3, #1
 8007be0:	9301      	str	r3, [sp, #4]
 8007be2:	f107 0317 	add.w	r3, r7, #23
 8007be6:	9300      	str	r3, [sp, #0]
 8007be8:	2301      	movs	r3, #1
 8007bea:	223f      	movs	r2, #63	@ 0x3f
 8007bec:	f7fa fe8c 	bl	8002908 <HAL_I2C_Mem_Write>
	HAL_Delay(30);
 8007bf0:	201e      	movs	r0, #30
 8007bf2:	f7fa f839 	bl	8001c68 <HAL_Delay>

	do {
		HAL_I2C_Mem_Read(bno->hi2cx, bno->address, CHIP_ID, 1, &rxbuffer, 1, 10);
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	6818      	ldr	r0, [r3, #0]
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	791b      	ldrb	r3, [r3, #4]
 8007bfe:	4619      	mov	r1, r3
 8007c00:	230a      	movs	r3, #10
 8007c02:	9302      	str	r3, [sp, #8]
 8007c04:	2301      	movs	r3, #1
 8007c06:	9301      	str	r3, [sp, #4]
 8007c08:	f107 0316 	add.w	r3, r7, #22
 8007c0c:	9300      	str	r3, [sp, #0]
 8007c0e:	2301      	movs	r3, #1
 8007c10:	2200      	movs	r2, #0
 8007c12:	f7fa ff8d 	bl	8002b30 <HAL_I2C_Mem_Read>
	} while (rxbuffer != 0xA0);
 8007c16:	7dbb      	ldrb	r3, [r7, #22]
 8007c18:	2ba0      	cmp	r3, #160	@ 0xa0
 8007c1a:	d1ec      	bne.n	8007bf6 <BNO055_Init+0xda>
	HAL_Delay(50);
 8007c1c:	2032      	movs	r0, #50	@ 0x32
 8007c1e:	f7fa f823 	bl	8001c68 <HAL_Delay>

	txbuffer = Normal_Mode;
 8007c22:	2300      	movs	r3, #0
 8007c24:	75fb      	strb	r3, [r7, #23]
	HAL_I2C_Mem_Write(bno->hi2cx, bno->address, PWR_MODE, 1, &txbuffer, 1, 10);
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	6818      	ldr	r0, [r3, #0]
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	791b      	ldrb	r3, [r3, #4]
 8007c2e:	4619      	mov	r1, r3
 8007c30:	230a      	movs	r3, #10
 8007c32:	9302      	str	r3, [sp, #8]
 8007c34:	2301      	movs	r3, #1
 8007c36:	9301      	str	r3, [sp, #4]
 8007c38:	f107 0317 	add.w	r3, r7, #23
 8007c3c:	9300      	str	r3, [sp, #0]
 8007c3e:	2301      	movs	r3, #1
 8007c40:	223e      	movs	r2, #62	@ 0x3e
 8007c42:	f7fa fe61 	bl	8002908 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8007c46:	200a      	movs	r0, #10
 8007c48:	f7fa f80e 	bl	8001c68 <HAL_Delay>

	txbuffer = Page_ID_00;
 8007c4c:	2300      	movs	r3, #0
 8007c4e:	75fb      	strb	r3, [r7, #23]
	HAL_I2C_Mem_Write(bno->hi2cx, bno->address, PAGE_ID, 1, &txbuffer, 1, 10);
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	6818      	ldr	r0, [r3, #0]
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	791b      	ldrb	r3, [r3, #4]
 8007c58:	4619      	mov	r1, r3
 8007c5a:	230a      	movs	r3, #10
 8007c5c:	9302      	str	r3, [sp, #8]
 8007c5e:	2301      	movs	r3, #1
 8007c60:	9301      	str	r3, [sp, #4]
 8007c62:	f107 0317 	add.w	r3, r7, #23
 8007c66:	9300      	str	r3, [sp, #0]
 8007c68:	2301      	movs	r3, #1
 8007c6a:	2207      	movs	r2, #7
 8007c6c:	f7fa fe4c 	bl	8002908 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8007c70:	200a      	movs	r0, #10
 8007c72:	f7f9 fff9 	bl	8001c68 <HAL_Delay>

	txbuffer = 0x00;
 8007c76:	2300      	movs	r3, #0
 8007c78:	75fb      	strb	r3, [r7, #23]
	HAL_I2C_Mem_Write(bno->hi2cx, bno->address, SYS_TRIGGER, 1, &txbuffer, 1, 10);
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	6818      	ldr	r0, [r3, #0]
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	791b      	ldrb	r3, [r3, #4]
 8007c82:	4619      	mov	r1, r3
 8007c84:	230a      	movs	r3, #10
 8007c86:	9302      	str	r3, [sp, #8]
 8007c88:	2301      	movs	r3, #1
 8007c8a:	9301      	str	r3, [sp, #4]
 8007c8c:	f107 0317 	add.w	r3, r7, #23
 8007c90:	9300      	str	r3, [sp, #0]
 8007c92:	2301      	movs	r3, #1
 8007c94:	223f      	movs	r2, #63	@ 0x3f
 8007c96:	f7fa fe37 	bl	8002908 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8007c9a:	200a      	movs	r0, #10
 8007c9c:	f7f9 ffe4 	bl	8001c68 <HAL_Delay>

	bno->mode = mode;
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	79ba      	ldrb	r2, [r7, #6]
 8007ca4:	715a      	strb	r2, [r3, #5]
	HAL_I2C_Mem_Write(bno->hi2cx, bno->address, OPR_MODE, 1, &bno->mode, 1, 10);
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	6818      	ldr	r0, [r3, #0]
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	791b      	ldrb	r3, [r3, #4]
 8007cae:	4619      	mov	r1, r3
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	3305      	adds	r3, #5
 8007cb4:	220a      	movs	r2, #10
 8007cb6:	9202      	str	r2, [sp, #8]
 8007cb8:	2201      	movs	r2, #1
 8007cba:	9201      	str	r2, [sp, #4]
 8007cbc:	9300      	str	r3, [sp, #0]
 8007cbe:	2301      	movs	r3, #1
 8007cc0:	223d      	movs	r2, #61	@ 0x3d
 8007cc2:	f7fa fe21 	bl	8002908 <HAL_I2C_Mem_Write>
	HAL_Delay(1000);
 8007cc6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8007cca:	f7f9 ffcd 	bl	8001c68 <HAL_Delay>

	bno->flag = HAL_OK;
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	2200      	movs	r2, #0
 8007cd2:	719a      	strb	r2, [r3, #6]

	return HAL_OK;
 8007cd4:	2300      	movs	r3, #0
}
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	3718      	adds	r7, #24
 8007cda:	46bd      	mov	sp, r7
 8007cdc:	bd80      	pop	{r7, pc}
	...

08007ce0 <BNO055_Read_DMA>:
	}

}

void BNO055_Read_DMA(BNO055_Structure *bno, uint8_t fast_mode)
{
 8007ce0:	b580      	push	{r7, lr}
 8007ce2:	b08a      	sub	sp, #40	@ 0x28
 8007ce4:	af04      	add	r7, sp, #16
 8007ce6:	6078      	str	r0, [r7, #4]
 8007ce8:	460b      	mov	r3, r1
 8007cea:	70fb      	strb	r3, [r7, #3]
	uint8_t read_mode;
	HAL_I2C_Mem_Read(bno->hi2cx, bno->address, OPR_MODE, 1, &read_mode, 1, 10);
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	6818      	ldr	r0, [r3, #0]
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	791b      	ldrb	r3, [r3, #4]
 8007cf4:	4619      	mov	r1, r3
 8007cf6:	230a      	movs	r3, #10
 8007cf8:	9302      	str	r3, [sp, #8]
 8007cfa:	2301      	movs	r3, #1
 8007cfc:	9301      	str	r3, [sp, #4]
 8007cfe:	f107 030f 	add.w	r3, r7, #15
 8007d02:	9300      	str	r3, [sp, #0]
 8007d04:	2301      	movs	r3, #1
 8007d06:	223d      	movs	r2, #61	@ 0x3d
 8007d08:	f7fa ff12 	bl	8002b30 <HAL_I2C_Mem_Read>
	if (read_mode != bno->mode) {
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	795a      	ldrb	r2, [r3, #5]
 8007d10:	7bfb      	ldrb	r3, [r7, #15]
 8007d12:	429a      	cmp	r2, r3
 8007d14:	d00f      	beq.n	8007d36 <BNO055_Read_DMA+0x56>
		HAL_I2C_Mem_Write(bno->hi2cx, bno->address, OPR_MODE, 1, &bno->mode, 1, 10);
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	6818      	ldr	r0, [r3, #0]
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	791b      	ldrb	r3, [r3, #4]
 8007d1e:	4619      	mov	r1, r3
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	3305      	adds	r3, #5
 8007d24:	220a      	movs	r2, #10
 8007d26:	9202      	str	r2, [sp, #8]
 8007d28:	2201      	movs	r2, #1
 8007d2a:	9201      	str	r2, [sp, #4]
 8007d2c:	9300      	str	r3, [sp, #0]
 8007d2e:	2301      	movs	r3, #1
 8007d30:	223d      	movs	r2, #61	@ 0x3d
 8007d32:	f7fa fde9 	bl	8002908 <HAL_I2C_Mem_Write>
	}

	const double scale = (1.0 / (1 << 14));
 8007d36:	f04f 0200 	mov.w	r2, #0
 8007d3a:	4bb8      	ldr	r3, [pc, #736]	@ (800801c <BNO055_Read_DMA+0x33c>)
 8007d3c:	e9c7 2304 	strd	r2, r3, [r7, #16]

	bno->accel.x = ((double) bno->DataBuffer[0].i16) / 100.0;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	f9b3 30b8 	ldrsh.w	r3, [r3, #184]	@ 0xb8
 8007d46:	4618      	mov	r0, r3
 8007d48:	f7f8 fbb8 	bl	80004bc <__aeabi_i2d>
 8007d4c:	f04f 0200 	mov.w	r2, #0
 8007d50:	4bb3      	ldr	r3, [pc, #716]	@ (8008020 <BNO055_Read_DMA+0x340>)
 8007d52:	f7f8 fd47 	bl	80007e4 <__aeabi_ddiv>
 8007d56:	4602      	mov	r2, r0
 8007d58:	460b      	mov	r3, r1
 8007d5a:	6879      	ldr	r1, [r7, #4]
 8007d5c:	e9c1 2302 	strd	r2, r3, [r1, #8]
	bno->accel.y = ((double) bno->DataBuffer[1].i16) / 100.0;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	f9b3 30ba 	ldrsh.w	r3, [r3, #186]	@ 0xba
 8007d66:	4618      	mov	r0, r3
 8007d68:	f7f8 fba8 	bl	80004bc <__aeabi_i2d>
 8007d6c:	f04f 0200 	mov.w	r2, #0
 8007d70:	4bab      	ldr	r3, [pc, #684]	@ (8008020 <BNO055_Read_DMA+0x340>)
 8007d72:	f7f8 fd37 	bl	80007e4 <__aeabi_ddiv>
 8007d76:	4602      	mov	r2, r0
 8007d78:	460b      	mov	r3, r1
 8007d7a:	6879      	ldr	r1, [r7, #4]
 8007d7c:	e9c1 2304 	strd	r2, r3, [r1, #16]
	bno->accel.z = ((double) bno->DataBuffer[2].i16) / 100.0;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	f9b3 30bc 	ldrsh.w	r3, [r3, #188]	@ 0xbc
 8007d86:	4618      	mov	r0, r3
 8007d88:	f7f8 fb98 	bl	80004bc <__aeabi_i2d>
 8007d8c:	f04f 0200 	mov.w	r2, #0
 8007d90:	4ba3      	ldr	r3, [pc, #652]	@ (8008020 <BNO055_Read_DMA+0x340>)
 8007d92:	f7f8 fd27 	bl	80007e4 <__aeabi_ddiv>
 8007d96:	4602      	mov	r2, r0
 8007d98:	460b      	mov	r3, r1
 8007d9a:	6879      	ldr	r1, [r7, #4]
 8007d9c:	e9c1 2306 	strd	r2, r3, [r1, #24]

	bno->mag.x = ((double) bno->DataBuffer[3].i16) / 16.0;
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	f9b3 30be 	ldrsh.w	r3, [r3, #190]	@ 0xbe
 8007da6:	4618      	mov	r0, r3
 8007da8:	f7f8 fb88 	bl	80004bc <__aeabi_i2d>
 8007dac:	f04f 0200 	mov.w	r2, #0
 8007db0:	4b9c      	ldr	r3, [pc, #624]	@ (8008024 <BNO055_Read_DMA+0x344>)
 8007db2:	f7f8 fd17 	bl	80007e4 <__aeabi_ddiv>
 8007db6:	4602      	mov	r2, r0
 8007db8:	460b      	mov	r3, r1
 8007dba:	6879      	ldr	r1, [r7, #4]
 8007dbc:	e9c1 2308 	strd	r2, r3, [r1, #32]
	bno->mag.y = ((double) bno->DataBuffer[4].i16) / 16.0;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	f9b3 30c0 	ldrsh.w	r3, [r3, #192]	@ 0xc0
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	f7f8 fb78 	bl	80004bc <__aeabi_i2d>
 8007dcc:	f04f 0200 	mov.w	r2, #0
 8007dd0:	4b94      	ldr	r3, [pc, #592]	@ (8008024 <BNO055_Read_DMA+0x344>)
 8007dd2:	f7f8 fd07 	bl	80007e4 <__aeabi_ddiv>
 8007dd6:	4602      	mov	r2, r0
 8007dd8:	460b      	mov	r3, r1
 8007dda:	6879      	ldr	r1, [r7, #4]
 8007ddc:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
	bno->mag.z = ((double) bno->DataBuffer[5].i16) / 16.0;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	f9b3 30c2 	ldrsh.w	r3, [r3, #194]	@ 0xc2
 8007de6:	4618      	mov	r0, r3
 8007de8:	f7f8 fb68 	bl	80004bc <__aeabi_i2d>
 8007dec:	f04f 0200 	mov.w	r2, #0
 8007df0:	4b8c      	ldr	r3, [pc, #560]	@ (8008024 <BNO055_Read_DMA+0x344>)
 8007df2:	f7f8 fcf7 	bl	80007e4 <__aeabi_ddiv>
 8007df6:	4602      	mov	r2, r0
 8007df8:	460b      	mov	r3, r1
 8007dfa:	6879      	ldr	r1, [r7, #4]
 8007dfc:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30

	bno->gyro.x = ((double) bno->DataBuffer[6].i16) / 16.0;
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	f9b3 30c4 	ldrsh.w	r3, [r3, #196]	@ 0xc4
 8007e06:	4618      	mov	r0, r3
 8007e08:	f7f8 fb58 	bl	80004bc <__aeabi_i2d>
 8007e0c:	f04f 0200 	mov.w	r2, #0
 8007e10:	4b84      	ldr	r3, [pc, #528]	@ (8008024 <BNO055_Read_DMA+0x344>)
 8007e12:	f7f8 fce7 	bl	80007e4 <__aeabi_ddiv>
 8007e16:	4602      	mov	r2, r0
 8007e18:	460b      	mov	r3, r1
 8007e1a:	6879      	ldr	r1, [r7, #4]
 8007e1c:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
	bno->gyro.y = ((double) bno->DataBuffer[7].i16) / 16.0;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	f9b3 30c6 	ldrsh.w	r3, [r3, #198]	@ 0xc6
 8007e26:	4618      	mov	r0, r3
 8007e28:	f7f8 fb48 	bl	80004bc <__aeabi_i2d>
 8007e2c:	f04f 0200 	mov.w	r2, #0
 8007e30:	4b7c      	ldr	r3, [pc, #496]	@ (8008024 <BNO055_Read_DMA+0x344>)
 8007e32:	f7f8 fcd7 	bl	80007e4 <__aeabi_ddiv>
 8007e36:	4602      	mov	r2, r0
 8007e38:	460b      	mov	r3, r1
 8007e3a:	6879      	ldr	r1, [r7, #4]
 8007e3c:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40
	bno->gyro.z = ((double) bno->DataBuffer[8].i16) / 16.0;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	f9b3 30c8 	ldrsh.w	r3, [r3, #200]	@ 0xc8
 8007e46:	4618      	mov	r0, r3
 8007e48:	f7f8 fb38 	bl	80004bc <__aeabi_i2d>
 8007e4c:	f04f 0200 	mov.w	r2, #0
 8007e50:	4b74      	ldr	r3, [pc, #464]	@ (8008024 <BNO055_Read_DMA+0x344>)
 8007e52:	f7f8 fcc7 	bl	80007e4 <__aeabi_ddiv>
 8007e56:	4602      	mov	r2, r0
 8007e58:	460b      	mov	r3, r1
 8007e5a:	6879      	ldr	r1, [r7, #4]
 8007e5c:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48

	bno->euler.yaw = ((double) bno->DataBuffer[9].i16) / 16.0;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	f9b3 30ca 	ldrsh.w	r3, [r3, #202]	@ 0xca
 8007e66:	4618      	mov	r0, r3
 8007e68:	f7f8 fb28 	bl	80004bc <__aeabi_i2d>
 8007e6c:	f04f 0200 	mov.w	r2, #0
 8007e70:	4b6c      	ldr	r3, [pc, #432]	@ (8008024 <BNO055_Read_DMA+0x344>)
 8007e72:	f7f8 fcb7 	bl	80007e4 <__aeabi_ddiv>
 8007e76:	4602      	mov	r2, r0
 8007e78:	460b      	mov	r3, r1
 8007e7a:	6879      	ldr	r1, [r7, #4]
 8007e7c:	e9c1 2318 	strd	r2, r3, [r1, #96]	@ 0x60
	bno->euler.roll = ((double) bno->DataBuffer[10].i16) / 16.0;
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	f9b3 30cc 	ldrsh.w	r3, [r3, #204]	@ 0xcc
 8007e86:	4618      	mov	r0, r3
 8007e88:	f7f8 fb18 	bl	80004bc <__aeabi_i2d>
 8007e8c:	f04f 0200 	mov.w	r2, #0
 8007e90:	4b64      	ldr	r3, [pc, #400]	@ (8008024 <BNO055_Read_DMA+0x344>)
 8007e92:	f7f8 fca7 	bl	80007e4 <__aeabi_ddiv>
 8007e96:	4602      	mov	r2, r0
 8007e98:	460b      	mov	r3, r1
 8007e9a:	6879      	ldr	r1, [r7, #4]
 8007e9c:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
	bno->euler.pitch = ((double) bno->DataBuffer[11].i16) / 16.0;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	f9b3 30ce 	ldrsh.w	r3, [r3, #206]	@ 0xce
 8007ea6:	4618      	mov	r0, r3
 8007ea8:	f7f8 fb08 	bl	80004bc <__aeabi_i2d>
 8007eac:	f04f 0200 	mov.w	r2, #0
 8007eb0:	4b5c      	ldr	r3, [pc, #368]	@ (8008024 <BNO055_Read_DMA+0x344>)
 8007eb2:	f7f8 fc97 	bl	80007e4 <__aeabi_ddiv>
 8007eb6:	4602      	mov	r2, r0
 8007eb8:	460b      	mov	r3, r1
 8007eba:	6879      	ldr	r1, [r7, #4]
 8007ebc:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58

	bno->quat.x = bno->DataBuffer[12].i16 * scale;
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	f9b3 30d0 	ldrsh.w	r3, [r3, #208]	@ 0xd0
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	f7f8 faf8 	bl	80004bc <__aeabi_i2d>
 8007ecc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007ed0:	f7f8 fb5e 	bl	8000590 <__aeabi_dmul>
 8007ed4:	4602      	mov	r2, r0
 8007ed6:	460b      	mov	r3, r1
 8007ed8:	6879      	ldr	r1, [r7, #4]
 8007eda:	e9c1 231a 	strd	r2, r3, [r1, #104]	@ 0x68
	bno->quat.y = bno->DataBuffer[13].i16 * scale;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	f9b3 30d2 	ldrsh.w	r3, [r3, #210]	@ 0xd2
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	f7f8 fae9 	bl	80004bc <__aeabi_i2d>
 8007eea:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007eee:	f7f8 fb4f 	bl	8000590 <__aeabi_dmul>
 8007ef2:	4602      	mov	r2, r0
 8007ef4:	460b      	mov	r3, r1
 8007ef6:	6879      	ldr	r1, [r7, #4]
 8007ef8:	e9c1 231c 	strd	r2, r3, [r1, #112]	@ 0x70
	bno->quat.z = bno->DataBuffer[14].i16 * scale;
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	f9b3 30d4 	ldrsh.w	r3, [r3, #212]	@ 0xd4
 8007f02:	4618      	mov	r0, r3
 8007f04:	f7f8 fada 	bl	80004bc <__aeabi_i2d>
 8007f08:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007f0c:	f7f8 fb40 	bl	8000590 <__aeabi_dmul>
 8007f10:	4602      	mov	r2, r0
 8007f12:	460b      	mov	r3, r1
 8007f14:	6879      	ldr	r1, [r7, #4]
 8007f16:	e9c1 231e 	strd	r2, r3, [r1, #120]	@ 0x78
	bno->quat.w = bno->DataBuffer[15].i16 * scale;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	f9b3 30d6 	ldrsh.w	r3, [r3, #214]	@ 0xd6
 8007f20:	4618      	mov	r0, r3
 8007f22:	f7f8 facb 	bl	80004bc <__aeabi_i2d>
 8007f26:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007f2a:	f7f8 fb31 	bl	8000590 <__aeabi_dmul>
 8007f2e:	4602      	mov	r2, r0
 8007f30:	460b      	mov	r3, r1
 8007f32:	6879      	ldr	r1, [r7, #4]
 8007f34:	e9c1 2320 	strd	r2, r3, [r1, #128]	@ 0x80

	if (!fast_mode) {
 8007f38:	78fb      	ldrb	r3, [r7, #3]
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d174      	bne.n	8008028 <BNO055_Read_DMA+0x348>

		bno->lin_acc.x = ((double) bno->DataBuffer[16].i16) / 100.0;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	f9b3 30d8 	ldrsh.w	r3, [r3, #216]	@ 0xd8
 8007f44:	4618      	mov	r0, r3
 8007f46:	f7f8 fab9 	bl	80004bc <__aeabi_i2d>
 8007f4a:	f04f 0200 	mov.w	r2, #0
 8007f4e:	4b34      	ldr	r3, [pc, #208]	@ (8008020 <BNO055_Read_DMA+0x340>)
 8007f50:	f7f8 fc48 	bl	80007e4 <__aeabi_ddiv>
 8007f54:	4602      	mov	r2, r0
 8007f56:	460b      	mov	r3, r1
 8007f58:	6879      	ldr	r1, [r7, #4]
 8007f5a:	e9c1 2322 	strd	r2, r3, [r1, #136]	@ 0x88
		bno->lin_acc.y = ((double) bno->DataBuffer[17].i16) / 100.0;
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	f9b3 30da 	ldrsh.w	r3, [r3, #218]	@ 0xda
 8007f64:	4618      	mov	r0, r3
 8007f66:	f7f8 faa9 	bl	80004bc <__aeabi_i2d>
 8007f6a:	f04f 0200 	mov.w	r2, #0
 8007f6e:	4b2c      	ldr	r3, [pc, #176]	@ (8008020 <BNO055_Read_DMA+0x340>)
 8007f70:	f7f8 fc38 	bl	80007e4 <__aeabi_ddiv>
 8007f74:	4602      	mov	r2, r0
 8007f76:	460b      	mov	r3, r1
 8007f78:	6879      	ldr	r1, [r7, #4]
 8007f7a:	e9c1 2324 	strd	r2, r3, [r1, #144]	@ 0x90
		bno->lin_acc.z = ((double) bno->DataBuffer[18].i16) / 100.0;
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	f9b3 30dc 	ldrsh.w	r3, [r3, #220]	@ 0xdc
 8007f84:	4618      	mov	r0, r3
 8007f86:	f7f8 fa99 	bl	80004bc <__aeabi_i2d>
 8007f8a:	f04f 0200 	mov.w	r2, #0
 8007f8e:	4b24      	ldr	r3, [pc, #144]	@ (8008020 <BNO055_Read_DMA+0x340>)
 8007f90:	f7f8 fc28 	bl	80007e4 <__aeabi_ddiv>
 8007f94:	4602      	mov	r2, r0
 8007f96:	460b      	mov	r3, r1
 8007f98:	6879      	ldr	r1, [r7, #4]
 8007f9a:	e9c1 2326 	strd	r2, r3, [r1, #152]	@ 0x98

		bno->grav.x = ((double) bno->DataBuffer[19].i16) / 100.0;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	f9b3 30de 	ldrsh.w	r3, [r3, #222]	@ 0xde
 8007fa4:	4618      	mov	r0, r3
 8007fa6:	f7f8 fa89 	bl	80004bc <__aeabi_i2d>
 8007faa:	f04f 0200 	mov.w	r2, #0
 8007fae:	4b1c      	ldr	r3, [pc, #112]	@ (8008020 <BNO055_Read_DMA+0x340>)
 8007fb0:	f7f8 fc18 	bl	80007e4 <__aeabi_ddiv>
 8007fb4:	4602      	mov	r2, r0
 8007fb6:	460b      	mov	r3, r1
 8007fb8:	6879      	ldr	r1, [r7, #4]
 8007fba:	e9c1 2328 	strd	r2, r3, [r1, #160]	@ 0xa0
		bno->grav.y = ((double) bno->DataBuffer[20].i16) / 100.0;
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	f9b3 30e0 	ldrsh.w	r3, [r3, #224]	@ 0xe0
 8007fc4:	4618      	mov	r0, r3
 8007fc6:	f7f8 fa79 	bl	80004bc <__aeabi_i2d>
 8007fca:	f04f 0200 	mov.w	r2, #0
 8007fce:	4b14      	ldr	r3, [pc, #80]	@ (8008020 <BNO055_Read_DMA+0x340>)
 8007fd0:	f7f8 fc08 	bl	80007e4 <__aeabi_ddiv>
 8007fd4:	4602      	mov	r2, r0
 8007fd6:	460b      	mov	r3, r1
 8007fd8:	6879      	ldr	r1, [r7, #4]
 8007fda:	e9c1 232a 	strd	r2, r3, [r1, #168]	@ 0xa8
		bno->grav.z = ((double) bno->DataBuffer[21].i16) / 100.0;
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	f9b3 30e2 	ldrsh.w	r3, [r3, #226]	@ 0xe2
 8007fe4:	4618      	mov	r0, r3
 8007fe6:	f7f8 fa69 	bl	80004bc <__aeabi_i2d>
 8007fea:	f04f 0200 	mov.w	r2, #0
 8007fee:	4b0c      	ldr	r3, [pc, #48]	@ (8008020 <BNO055_Read_DMA+0x340>)
 8007ff0:	f7f8 fbf8 	bl	80007e4 <__aeabi_ddiv>
 8007ff4:	4602      	mov	r2, r0
 8007ff6:	460b      	mov	r3, r1
 8007ff8:	6879      	ldr	r1, [r7, #4]
 8007ffa:	e9c1 232c 	strd	r2, r3, [r1, #176]	@ 0xb0

		HAL_I2C_Mem_Read_DMA(bno->hi2cx, bno->address, ACC_DATA_X_LSB, 1, bno->DataBuffer->u8, 44);
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	6818      	ldr	r0, [r3, #0]
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	791b      	ldrb	r3, [r3, #4]
 8008006:	4619      	mov	r1, r3
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	33b8      	adds	r3, #184	@ 0xb8
 800800c:	222c      	movs	r2, #44	@ 0x2c
 800800e:	9201      	str	r2, [sp, #4]
 8008010:	9300      	str	r3, [sp, #0]
 8008012:	2301      	movs	r3, #1
 8008014:	2208      	movs	r2, #8
 8008016:	f7fa fea5 	bl	8002d64 <HAL_I2C_Mem_Read_DMA>
	} else {
		HAL_I2C_Mem_Read_DMA(bno->hi2cx, bno->address, ACC_DATA_X_LSB, 1, bno->DataBuffer->u8, 32);
	}
}
 800801a:	e013      	b.n	8008044 <BNO055_Read_DMA+0x364>
 800801c:	3f100000 	.word	0x3f100000
 8008020:	40590000 	.word	0x40590000
 8008024:	40300000 	.word	0x40300000
		HAL_I2C_Mem_Read_DMA(bno->hi2cx, bno->address, ACC_DATA_X_LSB, 1, bno->DataBuffer->u8, 32);
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	6818      	ldr	r0, [r3, #0]
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	791b      	ldrb	r3, [r3, #4]
 8008030:	4619      	mov	r1, r3
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	33b8      	adds	r3, #184	@ 0xb8
 8008036:	2220      	movs	r2, #32
 8008038:	9201      	str	r2, [sp, #4]
 800803a:	9300      	str	r3, [sp, #0]
 800803c:	2301      	movs	r3, #1
 800803e:	2208      	movs	r2, #8
 8008040:	f7fa fe90 	bl	8002d64 <HAL_I2C_Mem_Read_DMA>
}
 8008044:	bf00      	nop
 8008046:	3718      	adds	r7, #24
 8008048:	46bd      	mov	sp, r7
 800804a:	bd80      	pop	{r7, pc}

0800804c <BNO055_Calibrated>:

void BNO055_Calibrated(BNO055_Structure *bno, BNO055_Calibration_Status *calib_stat, BNO055_Offsets *bno_off)
{
 800804c:	b580      	push	{r7, lr}
 800804e:	b092      	sub	sp, #72	@ 0x48
 8008050:	af04      	add	r7, sp, #16
 8008052:	60f8      	str	r0, [r7, #12]
 8008054:	60b9      	str	r1, [r7, #8]
 8008056:	607a      	str	r2, [r7, #4]
	uint8_t read_mode;
	HAL_I2C_Mem_Read(bno->hi2cx, bno->address, OPR_MODE, 1, &read_mode, 1, 10);
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	6818      	ldr	r0, [r3, #0]
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	791b      	ldrb	r3, [r3, #4]
 8008060:	4619      	mov	r1, r3
 8008062:	230a      	movs	r3, #10
 8008064:	9302      	str	r3, [sp, #8]
 8008066:	2301      	movs	r3, #1
 8008068:	9301      	str	r3, [sp, #4]
 800806a:	f107 032f 	add.w	r3, r7, #47	@ 0x2f
 800806e:	9300      	str	r3, [sp, #0]
 8008070:	2301      	movs	r3, #1
 8008072:	223d      	movs	r2, #61	@ 0x3d
 8008074:	f7fa fd5c 	bl	8002b30 <HAL_I2C_Mem_Read>
	if (read_mode != bno->mode) {
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	795a      	ldrb	r2, [r3, #5]
 800807c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008080:	429a      	cmp	r2, r3
 8008082:	d00f      	beq.n	80080a4 <BNO055_Calibrated+0x58>
		HAL_I2C_Mem_Write(bno->hi2cx, bno->address, OPR_MODE, 1, &bno->mode, 1, 10);
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	6818      	ldr	r0, [r3, #0]
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	791b      	ldrb	r3, [r3, #4]
 800808c:	4619      	mov	r1, r3
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	3305      	adds	r3, #5
 8008092:	220a      	movs	r2, #10
 8008094:	9202      	str	r2, [sp, #8]
 8008096:	2201      	movs	r2, #1
 8008098:	9201      	str	r2, [sp, #4]
 800809a:	9300      	str	r3, [sp, #0]
 800809c:	2301      	movs	r3, #1
 800809e:	223d      	movs	r2, #61	@ 0x3d
 80080a0:	f7fa fc32 	bl	8002908 <HAL_I2C_Mem_Write>
	}

	uint8_t txbuffer;
	uint8_t rxbuffer[22];

	HAL_StatusTypeDef done = HAL_BUSY;
 80080a4:	2302      	movs	r3, #2
 80080a6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

	txbuffer = Page_ID_00;
 80080aa:	2300      	movs	r3, #0
 80080ac:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
	do {
		HAL_I2C_Mem_Write(bno->hi2cx, bno->address, PAGE_ID, 1, &txbuffer, 1, 10);
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	6818      	ldr	r0, [r3, #0]
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	791b      	ldrb	r3, [r3, #4]
 80080b8:	4619      	mov	r1, r3
 80080ba:	230a      	movs	r3, #10
 80080bc:	9302      	str	r3, [sp, #8]
 80080be:	2301      	movs	r3, #1
 80080c0:	9301      	str	r3, [sp, #4]
 80080c2:	f107 032e 	add.w	r3, r7, #46	@ 0x2e
 80080c6:	9300      	str	r3, [sp, #0]
 80080c8:	2301      	movs	r3, #1
 80080ca:	2207      	movs	r2, #7
 80080cc:	f7fa fc1c 	bl	8002908 <HAL_I2C_Mem_Write>

		HAL_Delay(10);
 80080d0:	200a      	movs	r0, #10
 80080d2:	f7f9 fdc9 	bl	8001c68 <HAL_Delay>
		HAL_I2C_Mem_Read(bno->hi2cx, bno->address, CALIB_STAT, 1, &rxbuffer[0], 1, 10);
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	6818      	ldr	r0, [r3, #0]
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	791b      	ldrb	r3, [r3, #4]
 80080de:	4619      	mov	r1, r3
 80080e0:	230a      	movs	r3, #10
 80080e2:	9302      	str	r3, [sp, #8]
 80080e4:	2301      	movs	r3, #1
 80080e6:	9301      	str	r3, [sp, #4]
 80080e8:	f107 0318 	add.w	r3, r7, #24
 80080ec:	9300      	str	r3, [sp, #0]
 80080ee:	2301      	movs	r3, #1
 80080f0:	2235      	movs	r2, #53	@ 0x35
 80080f2:	f7fa fd1d 	bl	8002b30 <HAL_I2C_Mem_Read>

		calib_stat->gyro_stat = (((rxbuffer[0] >> 4) & 0x03) == 3) ? HAL_OK : HAL_BUSY;
 80080f6:	7e3b      	ldrb	r3, [r7, #24]
 80080f8:	091b      	lsrs	r3, r3, #4
 80080fa:	b2db      	uxtb	r3, r3
 80080fc:	f003 0303 	and.w	r3, r3, #3
 8008100:	2b03      	cmp	r3, #3
 8008102:	d101      	bne.n	8008108 <BNO055_Calibrated+0xbc>
 8008104:	2200      	movs	r2, #0
 8008106:	e000      	b.n	800810a <BNO055_Calibrated+0xbe>
 8008108:	2202      	movs	r2, #2
 800810a:	68bb      	ldr	r3, [r7, #8]
 800810c:	709a      	strb	r2, [r3, #2]
		calib_stat->accel_stat = (((rxbuffer[0] >> 2) & 0x03) == 3) ? HAL_OK : HAL_BUSY;
 800810e:	7e3b      	ldrb	r3, [r7, #24]
 8008110:	089b      	lsrs	r3, r3, #2
 8008112:	b2db      	uxtb	r3, r3
 8008114:	f003 0303 	and.w	r3, r3, #3
 8008118:	2b03      	cmp	r3, #3
 800811a:	d101      	bne.n	8008120 <BNO055_Calibrated+0xd4>
 800811c:	2200      	movs	r2, #0
 800811e:	e000      	b.n	8008122 <BNO055_Calibrated+0xd6>
 8008120:	2202      	movs	r2, #2
 8008122:	68bb      	ldr	r3, [r7, #8]
 8008124:	701a      	strb	r2, [r3, #0]
		calib_stat->mag_stat = (((rxbuffer[0]) & 0x03) == 3) ? HAL_OK : HAL_BUSY;
 8008126:	7e3b      	ldrb	r3, [r7, #24]
 8008128:	f003 0303 	and.w	r3, r3, #3
 800812c:	2b03      	cmp	r3, #3
 800812e:	d101      	bne.n	8008134 <BNO055_Calibrated+0xe8>
 8008130:	2200      	movs	r2, #0
 8008132:	e000      	b.n	8008136 <BNO055_Calibrated+0xea>
 8008134:	2202      	movs	r2, #2
 8008136:	68bb      	ldr	r3, [r7, #8]
 8008138:	705a      	strb	r2, [r3, #1]

		switch(bno->mode){
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	795b      	ldrb	r3, [r3, #5]
 800813e:	3b01      	subs	r3, #1
 8008140:	2b0b      	cmp	r3, #11
 8008142:	f200 80c1 	bhi.w	80082c8 <BNO055_Calibrated+0x27c>
 8008146:	a201      	add	r2, pc, #4	@ (adr r2, 800814c <BNO055_Calibrated+0x100>)
 8008148:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800814c:	0800817d 	.word	0x0800817d
 8008150:	0800818f 	.word	0x0800818f
 8008154:	080081a1 	.word	0x080081a1
 8008158:	080081b1 	.word	0x080081b1
 800815c:	080081c9 	.word	0x080081c9
 8008160:	080081e1 	.word	0x080081e1
 8008164:	080081f9 	.word	0x080081f9
 8008168:	08008219 	.word	0x08008219
 800816c:	08008231 	.word	0x08008231
 8008170:	08008249 	.word	0x08008249
 8008174:	08008261 	.word	0x08008261
 8008178:	0800827f 	.word	0x0800827f
		case ACCONLY:
				if(calib_stat->accel_stat == HAL_OK) done = HAL_OK;
 800817c:	68bb      	ldr	r3, [r7, #8]
 800817e:	781b      	ldrb	r3, [r3, #0]
 8008180:	2b00      	cmp	r3, #0
 8008182:	f040 808c 	bne.w	800829e <BNO055_Calibrated+0x252>
 8008186:	2300      	movs	r3, #0
 8008188:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
				break;
 800818c:	e087      	b.n	800829e <BNO055_Calibrated+0x252>
			case MAGONLY:
				if(calib_stat->mag_stat == HAL_OK) done = HAL_OK;
 800818e:	68bb      	ldr	r3, [r7, #8]
 8008190:	785b      	ldrb	r3, [r3, #1]
 8008192:	2b00      	cmp	r3, #0
 8008194:	f040 8085 	bne.w	80082a2 <BNO055_Calibrated+0x256>
 8008198:	2300      	movs	r3, #0
 800819a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
				break;
 800819e:	e080      	b.n	80082a2 <BNO055_Calibrated+0x256>
			case GYROONLY:
				if(calib_stat->gyro_stat == HAL_OK) done = HAL_OK;
 80081a0:	68bb      	ldr	r3, [r7, #8]
 80081a2:	789b      	ldrb	r3, [r3, #2]
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d17e      	bne.n	80082a6 <BNO055_Calibrated+0x25a>
 80081a8:	2300      	movs	r3, #0
 80081aa:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
				break;
 80081ae:	e07a      	b.n	80082a6 <BNO055_Calibrated+0x25a>
			case ACCMAG:
				if(calib_stat->accel_stat == HAL_OK && calib_stat->mag_stat == HAL_OK) done = HAL_OK;
 80081b0:	68bb      	ldr	r3, [r7, #8]
 80081b2:	781b      	ldrb	r3, [r3, #0]
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d178      	bne.n	80082aa <BNO055_Calibrated+0x25e>
 80081b8:	68bb      	ldr	r3, [r7, #8]
 80081ba:	785b      	ldrb	r3, [r3, #1]
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d174      	bne.n	80082aa <BNO055_Calibrated+0x25e>
 80081c0:	2300      	movs	r3, #0
 80081c2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
				break;
 80081c6:	e070      	b.n	80082aa <BNO055_Calibrated+0x25e>
			case ACCGYRO:
				if(calib_stat->accel_stat == HAL_OK && calib_stat->gyro_stat == HAL_OK) done = HAL_OK;
 80081c8:	68bb      	ldr	r3, [r7, #8]
 80081ca:	781b      	ldrb	r3, [r3, #0]
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d16e      	bne.n	80082ae <BNO055_Calibrated+0x262>
 80081d0:	68bb      	ldr	r3, [r7, #8]
 80081d2:	789b      	ldrb	r3, [r3, #2]
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d16a      	bne.n	80082ae <BNO055_Calibrated+0x262>
 80081d8:	2300      	movs	r3, #0
 80081da:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
				break;
 80081de:	e066      	b.n	80082ae <BNO055_Calibrated+0x262>
			case MAGGYRO:
				if(calib_stat->mag_stat == HAL_OK && calib_stat->gyro_stat == HAL_OK) done = HAL_OK;
 80081e0:	68bb      	ldr	r3, [r7, #8]
 80081e2:	785b      	ldrb	r3, [r3, #1]
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d164      	bne.n	80082b2 <BNO055_Calibrated+0x266>
 80081e8:	68bb      	ldr	r3, [r7, #8]
 80081ea:	789b      	ldrb	r3, [r3, #2]
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d160      	bne.n	80082b2 <BNO055_Calibrated+0x266>
 80081f0:	2300      	movs	r3, #0
 80081f2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
				break;
 80081f6:	e05c      	b.n	80082b2 <BNO055_Calibrated+0x266>
			case AMG:
				if(calib_stat->accel_stat == HAL_OK && calib_stat->mag_stat == HAL_OK && calib_stat->gyro_stat == HAL_OK) done = HAL_OK;
 80081f8:	68bb      	ldr	r3, [r7, #8]
 80081fa:	781b      	ldrb	r3, [r3, #0]
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d15a      	bne.n	80082b6 <BNO055_Calibrated+0x26a>
 8008200:	68bb      	ldr	r3, [r7, #8]
 8008202:	785b      	ldrb	r3, [r3, #1]
 8008204:	2b00      	cmp	r3, #0
 8008206:	d156      	bne.n	80082b6 <BNO055_Calibrated+0x26a>
 8008208:	68bb      	ldr	r3, [r7, #8]
 800820a:	789b      	ldrb	r3, [r3, #2]
 800820c:	2b00      	cmp	r3, #0
 800820e:	d152      	bne.n	80082b6 <BNO055_Calibrated+0x26a>
 8008210:	2300      	movs	r3, #0
 8008212:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
				break;
 8008216:	e04e      	b.n	80082b6 <BNO055_Calibrated+0x26a>
			case IMU:
				if(calib_stat->accel_stat == HAL_OK && calib_stat->gyro_stat == HAL_OK) done = HAL_OK;
 8008218:	68bb      	ldr	r3, [r7, #8]
 800821a:	781b      	ldrb	r3, [r3, #0]
 800821c:	2b00      	cmp	r3, #0
 800821e:	d14c      	bne.n	80082ba <BNO055_Calibrated+0x26e>
 8008220:	68bb      	ldr	r3, [r7, #8]
 8008222:	789b      	ldrb	r3, [r3, #2]
 8008224:	2b00      	cmp	r3, #0
 8008226:	d148      	bne.n	80082ba <BNO055_Calibrated+0x26e>
 8008228:	2300      	movs	r3, #0
 800822a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
				break;
 800822e:	e044      	b.n	80082ba <BNO055_Calibrated+0x26e>
			case COMPASS:
				if(calib_stat->accel_stat == HAL_OK && calib_stat->mag_stat == HAL_OK) done = HAL_OK;
 8008230:	68bb      	ldr	r3, [r7, #8]
 8008232:	781b      	ldrb	r3, [r3, #0]
 8008234:	2b00      	cmp	r3, #0
 8008236:	d142      	bne.n	80082be <BNO055_Calibrated+0x272>
 8008238:	68bb      	ldr	r3, [r7, #8]
 800823a:	785b      	ldrb	r3, [r3, #1]
 800823c:	2b00      	cmp	r3, #0
 800823e:	d13e      	bne.n	80082be <BNO055_Calibrated+0x272>
 8008240:	2300      	movs	r3, #0
 8008242:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
				break;
 8008246:	e03a      	b.n	80082be <BNO055_Calibrated+0x272>
			case M4G:
				if(calib_stat->accel_stat == HAL_OK && calib_stat->mag_stat == HAL_OK) done = HAL_OK;
 8008248:	68bb      	ldr	r3, [r7, #8]
 800824a:	781b      	ldrb	r3, [r3, #0]
 800824c:	2b00      	cmp	r3, #0
 800824e:	d138      	bne.n	80082c2 <BNO055_Calibrated+0x276>
 8008250:	68bb      	ldr	r3, [r7, #8]
 8008252:	785b      	ldrb	r3, [r3, #1]
 8008254:	2b00      	cmp	r3, #0
 8008256:	d134      	bne.n	80082c2 <BNO055_Calibrated+0x276>
 8008258:	2300      	movs	r3, #0
 800825a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
				break;
 800825e:	e030      	b.n	80082c2 <BNO055_Calibrated+0x276>
			case NDOF_FMC_OFF:
				if(calib_stat->accel_stat == HAL_OK && calib_stat->mag_stat == HAL_OK && calib_stat->gyro_stat == HAL_OK) done = HAL_OK;
 8008260:	68bb      	ldr	r3, [r7, #8]
 8008262:	781b      	ldrb	r3, [r3, #0]
 8008264:	2b00      	cmp	r3, #0
 8008266:	d10a      	bne.n	800827e <BNO055_Calibrated+0x232>
 8008268:	68bb      	ldr	r3, [r7, #8]
 800826a:	785b      	ldrb	r3, [r3, #1]
 800826c:	2b00      	cmp	r3, #0
 800826e:	d106      	bne.n	800827e <BNO055_Calibrated+0x232>
 8008270:	68bb      	ldr	r3, [r7, #8]
 8008272:	789b      	ldrb	r3, [r3, #2]
 8008274:	2b00      	cmp	r3, #0
 8008276:	d102      	bne.n	800827e <BNO055_Calibrated+0x232>
 8008278:	2300      	movs	r3, #0
 800827a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
			case NDOF:
				if(calib_stat->accel_stat == HAL_OK && calib_stat->mag_stat == HAL_OK && calib_stat->gyro_stat == HAL_OK) done = HAL_OK;
 800827e:	68bb      	ldr	r3, [r7, #8]
 8008280:	781b      	ldrb	r3, [r3, #0]
 8008282:	2b00      	cmp	r3, #0
 8008284:	d11f      	bne.n	80082c6 <BNO055_Calibrated+0x27a>
 8008286:	68bb      	ldr	r3, [r7, #8]
 8008288:	785b      	ldrb	r3, [r3, #1]
 800828a:	2b00      	cmp	r3, #0
 800828c:	d11b      	bne.n	80082c6 <BNO055_Calibrated+0x27a>
 800828e:	68bb      	ldr	r3, [r7, #8]
 8008290:	789b      	ldrb	r3, [r3, #2]
 8008292:	2b00      	cmp	r3, #0
 8008294:	d117      	bne.n	80082c6 <BNO055_Calibrated+0x27a>
 8008296:	2300      	movs	r3, #0
 8008298:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
				break;
 800829c:	e013      	b.n	80082c6 <BNO055_Calibrated+0x27a>
				break;
 800829e:	bf00      	nop
 80082a0:	e012      	b.n	80082c8 <BNO055_Calibrated+0x27c>
				break;
 80082a2:	bf00      	nop
 80082a4:	e010      	b.n	80082c8 <BNO055_Calibrated+0x27c>
				break;
 80082a6:	bf00      	nop
 80082a8:	e00e      	b.n	80082c8 <BNO055_Calibrated+0x27c>
				break;
 80082aa:	bf00      	nop
 80082ac:	e00c      	b.n	80082c8 <BNO055_Calibrated+0x27c>
				break;
 80082ae:	bf00      	nop
 80082b0:	e00a      	b.n	80082c8 <BNO055_Calibrated+0x27c>
				break;
 80082b2:	bf00      	nop
 80082b4:	e008      	b.n	80082c8 <BNO055_Calibrated+0x27c>
				break;
 80082b6:	bf00      	nop
 80082b8:	e006      	b.n	80082c8 <BNO055_Calibrated+0x27c>
				break;
 80082ba:	bf00      	nop
 80082bc:	e004      	b.n	80082c8 <BNO055_Calibrated+0x27c>
				break;
 80082be:	bf00      	nop
 80082c0:	e002      	b.n	80082c8 <BNO055_Calibrated+0x27c>
				break;
 80082c2:	bf00      	nop
 80082c4:	e000      	b.n	80082c8 <BNO055_Calibrated+0x27c>
				break;
 80082c6:	bf00      	nop
		}
	} while (done != HAL_OK);
 80082c8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	f47f aeef 	bne.w	80080b0 <BNO055_Calibrated+0x64>

	HAL_I2C_Mem_Read(bno->hi2cx, bno->address, OPR_MODE, 1, &read_mode, 1, 10);
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	6818      	ldr	r0, [r3, #0]
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	791b      	ldrb	r3, [r3, #4]
 80082da:	4619      	mov	r1, r3
 80082dc:	230a      	movs	r3, #10
 80082de:	9302      	str	r3, [sp, #8]
 80082e0:	2301      	movs	r3, #1
 80082e2:	9301      	str	r3, [sp, #4]
 80082e4:	f107 032f 	add.w	r3, r7, #47	@ 0x2f
 80082e8:	9300      	str	r3, [sp, #0]
 80082ea:	2301      	movs	r3, #1
 80082ec:	223d      	movs	r2, #61	@ 0x3d
 80082ee:	f7fa fc1f 	bl	8002b30 <HAL_I2C_Mem_Read>
	if (read_mode != CONFIGMODE) {
 80082f2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d014      	beq.n	8008324 <BNO055_Calibrated+0x2d8>
		uint8_t txbuffer = CONFIGMODE;
 80082fa:	2300      	movs	r3, #0
 80082fc:	75fb      	strb	r3, [r7, #23]
		HAL_I2C_Mem_Write(bno->hi2cx, bno->address, OPR_MODE, 1, &txbuffer, 1, 10);
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	6818      	ldr	r0, [r3, #0]
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	791b      	ldrb	r3, [r3, #4]
 8008306:	4619      	mov	r1, r3
 8008308:	230a      	movs	r3, #10
 800830a:	9302      	str	r3, [sp, #8]
 800830c:	2301      	movs	r3, #1
 800830e:	9301      	str	r3, [sp, #4]
 8008310:	f107 0317 	add.w	r3, r7, #23
 8008314:	9300      	str	r3, [sp, #0]
 8008316:	2301      	movs	r3, #1
 8008318:	223d      	movs	r2, #61	@ 0x3d
 800831a:	f7fa faf5 	bl	8002908 <HAL_I2C_Mem_Write>
		HAL_Delay(20);
 800831e:	2014      	movs	r0, #20
 8008320:	f7f9 fca2 	bl	8001c68 <HAL_Delay>
	}

	HAL_I2C_Mem_Read(bno->hi2cx, bno->address, ACC_OFFSET_X_LSB, 1, rxbuffer, 22, 10);
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	6818      	ldr	r0, [r3, #0]
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	791b      	ldrb	r3, [r3, #4]
 800832c:	4619      	mov	r1, r3
 800832e:	230a      	movs	r3, #10
 8008330:	9302      	str	r3, [sp, #8]
 8008332:	2316      	movs	r3, #22
 8008334:	9301      	str	r3, [sp, #4]
 8008336:	f107 0318 	add.w	r3, r7, #24
 800833a:	9300      	str	r3, [sp, #0]
 800833c:	2301      	movs	r3, #1
 800833e:	2255      	movs	r2, #85	@ 0x55
 8008340:	f7fa fbf6 	bl	8002b30 <HAL_I2C_Mem_Read>

	for (int i = 0; i < 2; i++)
 8008344:	2300      	movs	r3, #0
 8008346:	633b      	str	r3, [r7, #48]	@ 0x30
 8008348:	e084      	b.n	8008454 <BNO055_Calibrated+0x408>
	{
		bno_off->accel_offset_x.u8[i] = rxbuffer[0 + i];
 800834a:	f107 0218 	add.w	r2, r7, #24
 800834e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008350:	4413      	add	r3, r2
 8008352:	7819      	ldrb	r1, [r3, #0]
 8008354:	687a      	ldr	r2, [r7, #4]
 8008356:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008358:	4413      	add	r3, r2
 800835a:	460a      	mov	r2, r1
 800835c:	701a      	strb	r2, [r3, #0]
		bno_off->accel_offset_y.u8[i] = rxbuffer[2 + i];
 800835e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008360:	3302      	adds	r3, #2
 8008362:	3338      	adds	r3, #56	@ 0x38
 8008364:	443b      	add	r3, r7
 8008366:	f813 1c20 	ldrb.w	r1, [r3, #-32]
 800836a:	687a      	ldr	r2, [r7, #4]
 800836c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800836e:	4413      	add	r3, r2
 8008370:	3302      	adds	r3, #2
 8008372:	460a      	mov	r2, r1
 8008374:	701a      	strb	r2, [r3, #0]
		bno_off->accel_offset_z.u8[i] = rxbuffer[4 + i];
 8008376:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008378:	3304      	adds	r3, #4
 800837a:	3338      	adds	r3, #56	@ 0x38
 800837c:	443b      	add	r3, r7
 800837e:	f813 1c20 	ldrb.w	r1, [r3, #-32]
 8008382:	687a      	ldr	r2, [r7, #4]
 8008384:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008386:	4413      	add	r3, r2
 8008388:	3304      	adds	r3, #4
 800838a:	460a      	mov	r2, r1
 800838c:	701a      	strb	r2, [r3, #0]

		bno_off->mag_offset_x.u8[i] = rxbuffer[6 + i];
 800838e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008390:	3306      	adds	r3, #6
 8008392:	3338      	adds	r3, #56	@ 0x38
 8008394:	443b      	add	r3, r7
 8008396:	f813 1c20 	ldrb.w	r1, [r3, #-32]
 800839a:	687a      	ldr	r2, [r7, #4]
 800839c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800839e:	4413      	add	r3, r2
 80083a0:	3306      	adds	r3, #6
 80083a2:	460a      	mov	r2, r1
 80083a4:	701a      	strb	r2, [r3, #0]
		bno_off->mag_offset_y.u8[i] = rxbuffer[8 + i];
 80083a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083a8:	3308      	adds	r3, #8
 80083aa:	3338      	adds	r3, #56	@ 0x38
 80083ac:	443b      	add	r3, r7
 80083ae:	f813 1c20 	ldrb.w	r1, [r3, #-32]
 80083b2:	687a      	ldr	r2, [r7, #4]
 80083b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083b6:	4413      	add	r3, r2
 80083b8:	3308      	adds	r3, #8
 80083ba:	460a      	mov	r2, r1
 80083bc:	701a      	strb	r2, [r3, #0]
		bno_off->mag_offset_z.u8[i] = rxbuffer[10 + i];
 80083be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083c0:	330a      	adds	r3, #10
 80083c2:	3338      	adds	r3, #56	@ 0x38
 80083c4:	443b      	add	r3, r7
 80083c6:	f813 1c20 	ldrb.w	r1, [r3, #-32]
 80083ca:	687a      	ldr	r2, [r7, #4]
 80083cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083ce:	4413      	add	r3, r2
 80083d0:	330a      	adds	r3, #10
 80083d2:	460a      	mov	r2, r1
 80083d4:	701a      	strb	r2, [r3, #0]

		bno_off->gyro_offset_x.u8[i] = rxbuffer[12 + i];
 80083d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083d8:	330c      	adds	r3, #12
 80083da:	3338      	adds	r3, #56	@ 0x38
 80083dc:	443b      	add	r3, r7
 80083de:	f813 1c20 	ldrb.w	r1, [r3, #-32]
 80083e2:	687a      	ldr	r2, [r7, #4]
 80083e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083e6:	4413      	add	r3, r2
 80083e8:	330c      	adds	r3, #12
 80083ea:	460a      	mov	r2, r1
 80083ec:	701a      	strb	r2, [r3, #0]
		bno_off->gyro_offset_y.u8[i] = rxbuffer[14 + i];
 80083ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083f0:	330e      	adds	r3, #14
 80083f2:	3338      	adds	r3, #56	@ 0x38
 80083f4:	443b      	add	r3, r7
 80083f6:	f813 1c20 	ldrb.w	r1, [r3, #-32]
 80083fa:	687a      	ldr	r2, [r7, #4]
 80083fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083fe:	4413      	add	r3, r2
 8008400:	330e      	adds	r3, #14
 8008402:	460a      	mov	r2, r1
 8008404:	701a      	strb	r2, [r3, #0]
		bno_off->gyro_offset_z.u8[i] = rxbuffer[16 + i];
 8008406:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008408:	3310      	adds	r3, #16
 800840a:	3338      	adds	r3, #56	@ 0x38
 800840c:	443b      	add	r3, r7
 800840e:	f813 1c20 	ldrb.w	r1, [r3, #-32]
 8008412:	687a      	ldr	r2, [r7, #4]
 8008414:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008416:	4413      	add	r3, r2
 8008418:	3310      	adds	r3, #16
 800841a:	460a      	mov	r2, r1
 800841c:	701a      	strb	r2, [r3, #0]

		bno_off->accel_radius.u8[i] = rxbuffer[18 + i];
 800841e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008420:	3312      	adds	r3, #18
 8008422:	3338      	adds	r3, #56	@ 0x38
 8008424:	443b      	add	r3, r7
 8008426:	f813 1c20 	ldrb.w	r1, [r3, #-32]
 800842a:	687a      	ldr	r2, [r7, #4]
 800842c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800842e:	4413      	add	r3, r2
 8008430:	3312      	adds	r3, #18
 8008432:	460a      	mov	r2, r1
 8008434:	701a      	strb	r2, [r3, #0]

		bno_off->mag_radius.u8[i] =rxbuffer[20 + i];
 8008436:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008438:	3314      	adds	r3, #20
 800843a:	3338      	adds	r3, #56	@ 0x38
 800843c:	443b      	add	r3, r7
 800843e:	f813 1c20 	ldrb.w	r1, [r3, #-32]
 8008442:	687a      	ldr	r2, [r7, #4]
 8008444:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008446:	4413      	add	r3, r2
 8008448:	3314      	adds	r3, #20
 800844a:	460a      	mov	r2, r1
 800844c:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 2; i++)
 800844e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008450:	3301      	adds	r3, #1
 8008452:	633b      	str	r3, [r7, #48]	@ 0x30
 8008454:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008456:	2b01      	cmp	r3, #1
 8008458:	f77f af77 	ble.w	800834a <BNO055_Calibrated+0x2fe>
	}

	HAL_I2C_Mem_Read(bno->hi2cx, bno->address, OPR_MODE, 1, &read_mode, 1, 10);
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	6818      	ldr	r0, [r3, #0]
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	791b      	ldrb	r3, [r3, #4]
 8008464:	4619      	mov	r1, r3
 8008466:	230a      	movs	r3, #10
 8008468:	9302      	str	r3, [sp, #8]
 800846a:	2301      	movs	r3, #1
 800846c:	9301      	str	r3, [sp, #4]
 800846e:	f107 032f 	add.w	r3, r7, #47	@ 0x2f
 8008472:	9300      	str	r3, [sp, #0]
 8008474:	2301      	movs	r3, #1
 8008476:	223d      	movs	r2, #61	@ 0x3d
 8008478:	f7fa fb5a 	bl	8002b30 <HAL_I2C_Mem_Read>
	if (read_mode != bno->mode) {
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	795a      	ldrb	r2, [r3, #5]
 8008480:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008484:	429a      	cmp	r2, r3
 8008486:	d012      	beq.n	80084ae <BNO055_Calibrated+0x462>
		HAL_I2C_Mem_Write(bno->hi2cx, bno->address, OPR_MODE, 1, &bno->mode, 1, 10);
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	6818      	ldr	r0, [r3, #0]
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	791b      	ldrb	r3, [r3, #4]
 8008490:	4619      	mov	r1, r3
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	3305      	adds	r3, #5
 8008496:	220a      	movs	r2, #10
 8008498:	9202      	str	r2, [sp, #8]
 800849a:	2201      	movs	r2, #1
 800849c:	9201      	str	r2, [sp, #4]
 800849e:	9300      	str	r3, [sp, #0]
 80084a0:	2301      	movs	r3, #1
 80084a2:	223d      	movs	r2, #61	@ 0x3d
 80084a4:	f7fa fa30 	bl	8002908 <HAL_I2C_Mem_Write>
		HAL_Delay(20);
 80084a8:	2014      	movs	r0, #20
 80084aa:	f7f9 fbdd 	bl	8001c68 <HAL_Delay>
	}
}
 80084ae:	bf00      	nop
 80084b0:	3738      	adds	r7, #56	@ 0x38
 80084b2:	46bd      	mov	sp, r7
 80084b4:	bd80      	pop	{r7, pc}
 80084b6:	bf00      	nop

080084b8 <BNO055_SetOffsets>:

void BNO055_SetOffsets(BNO055_Structure *bno, BNO055_Offsets *bno_offset)
{
 80084b8:	b580      	push	{r7, lr}
 80084ba:	b08e      	sub	sp, #56	@ 0x38
 80084bc:	af04      	add	r7, sp, #16
 80084be:	6078      	str	r0, [r7, #4]
 80084c0:	6039      	str	r1, [r7, #0]
	uint8_t read_mode;
	HAL_I2C_Mem_Read(bno->hi2cx, bno->address, OPR_MODE, 1, &read_mode, 1, 10);
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	6818      	ldr	r0, [r3, #0]
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	791b      	ldrb	r3, [r3, #4]
 80084ca:	4619      	mov	r1, r3
 80084cc:	230a      	movs	r3, #10
 80084ce:	9302      	str	r3, [sp, #8]
 80084d0:	2301      	movs	r3, #1
 80084d2:	9301      	str	r3, [sp, #4]
 80084d4:	f107 0327 	add.w	r3, r7, #39	@ 0x27
 80084d8:	9300      	str	r3, [sp, #0]
 80084da:	2301      	movs	r3, #1
 80084dc:	223d      	movs	r2, #61	@ 0x3d
 80084de:	f7fa fb27 	bl	8002b30 <HAL_I2C_Mem_Read>
	if (read_mode != CONFIGMODE) {
 80084e2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d014      	beq.n	8008514 <BNO055_SetOffsets+0x5c>
		uint8_t txbuffer = CONFIGMODE;
 80084ea:	2300      	movs	r3, #0
 80084ec:	73fb      	strb	r3, [r7, #15]
		HAL_I2C_Mem_Write(bno->hi2cx, bno->address, OPR_MODE, 1, &txbuffer, 1, 10);
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	6818      	ldr	r0, [r3, #0]
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	791b      	ldrb	r3, [r3, #4]
 80084f6:	4619      	mov	r1, r3
 80084f8:	230a      	movs	r3, #10
 80084fa:	9302      	str	r3, [sp, #8]
 80084fc:	2301      	movs	r3, #1
 80084fe:	9301      	str	r3, [sp, #4]
 8008500:	f107 030f 	add.w	r3, r7, #15
 8008504:	9300      	str	r3, [sp, #0]
 8008506:	2301      	movs	r3, #1
 8008508:	223d      	movs	r2, #61	@ 0x3d
 800850a:	f7fa f9fd 	bl	8002908 <HAL_I2C_Mem_Write>
		HAL_Delay(20);
 800850e:	2014      	movs	r0, #20
 8008510:	f7f9 fbaa 	bl	8001c68 <HAL_Delay>
	}

	uint8_t txbuffer[22];
	txbuffer[0] = bno_offset->accel_offset_x.u8[0];
 8008514:	683b      	ldr	r3, [r7, #0]
 8008516:	781b      	ldrb	r3, [r3, #0]
 8008518:	743b      	strb	r3, [r7, #16]
	txbuffer[1] = bno_offset->accel_offset_x.u8[1];
 800851a:	683b      	ldr	r3, [r7, #0]
 800851c:	785b      	ldrb	r3, [r3, #1]
 800851e:	747b      	strb	r3, [r7, #17]
	txbuffer[2] = bno_offset->accel_offset_y.u8[0];
 8008520:	683b      	ldr	r3, [r7, #0]
 8008522:	789b      	ldrb	r3, [r3, #2]
 8008524:	74bb      	strb	r3, [r7, #18]
	txbuffer[3] = bno_offset->accel_offset_y.u8[1];
 8008526:	683b      	ldr	r3, [r7, #0]
 8008528:	78db      	ldrb	r3, [r3, #3]
 800852a:	74fb      	strb	r3, [r7, #19]
	txbuffer[4] = bno_offset->accel_offset_z.u8[0];
 800852c:	683b      	ldr	r3, [r7, #0]
 800852e:	791b      	ldrb	r3, [r3, #4]
 8008530:	753b      	strb	r3, [r7, #20]
	txbuffer[5] = bno_offset->accel_offset_z.u8[1];
 8008532:	683b      	ldr	r3, [r7, #0]
 8008534:	795b      	ldrb	r3, [r3, #5]
 8008536:	757b      	strb	r3, [r7, #21]
	txbuffer[6] = bno_offset->mag_offset_x.u8[0];
 8008538:	683b      	ldr	r3, [r7, #0]
 800853a:	799b      	ldrb	r3, [r3, #6]
 800853c:	75bb      	strb	r3, [r7, #22]
	txbuffer[7] = bno_offset->mag_offset_x.u8[1];
 800853e:	683b      	ldr	r3, [r7, #0]
 8008540:	79db      	ldrb	r3, [r3, #7]
 8008542:	75fb      	strb	r3, [r7, #23]
	txbuffer[8] = bno_offset->mag_offset_y.u8[0];
 8008544:	683b      	ldr	r3, [r7, #0]
 8008546:	7a1b      	ldrb	r3, [r3, #8]
 8008548:	763b      	strb	r3, [r7, #24]
	txbuffer[9] = bno_offset->mag_offset_y.u8[1];
 800854a:	683b      	ldr	r3, [r7, #0]
 800854c:	7a5b      	ldrb	r3, [r3, #9]
 800854e:	767b      	strb	r3, [r7, #25]
	txbuffer[10] = bno_offset->mag_offset_z.u8[0];
 8008550:	683b      	ldr	r3, [r7, #0]
 8008552:	7a9b      	ldrb	r3, [r3, #10]
 8008554:	76bb      	strb	r3, [r7, #26]
	txbuffer[11] = bno_offset->mag_offset_z.u8[1];
 8008556:	683b      	ldr	r3, [r7, #0]
 8008558:	7adb      	ldrb	r3, [r3, #11]
 800855a:	76fb      	strb	r3, [r7, #27]
	txbuffer[12] = bno_offset->gyro_offset_x.u8[0];
 800855c:	683b      	ldr	r3, [r7, #0]
 800855e:	7b1b      	ldrb	r3, [r3, #12]
 8008560:	773b      	strb	r3, [r7, #28]
	txbuffer[13] = bno_offset->gyro_offset_x.u8[1];
 8008562:	683b      	ldr	r3, [r7, #0]
 8008564:	7b5b      	ldrb	r3, [r3, #13]
 8008566:	777b      	strb	r3, [r7, #29]
	txbuffer[14] = bno_offset->gyro_offset_y.u8[0];
 8008568:	683b      	ldr	r3, [r7, #0]
 800856a:	7b9b      	ldrb	r3, [r3, #14]
 800856c:	77bb      	strb	r3, [r7, #30]
	txbuffer[15] = bno_offset->gyro_offset_y.u8[1];
 800856e:	683b      	ldr	r3, [r7, #0]
 8008570:	7bdb      	ldrb	r3, [r3, #15]
 8008572:	77fb      	strb	r3, [r7, #31]
	txbuffer[16] = bno_offset->gyro_offset_z.u8[0];
 8008574:	683b      	ldr	r3, [r7, #0]
 8008576:	7c1b      	ldrb	r3, [r3, #16]
 8008578:	f887 3020 	strb.w	r3, [r7, #32]
	txbuffer[17] = bno_offset->gyro_offset_z.u8[1];
 800857c:	683b      	ldr	r3, [r7, #0]
 800857e:	7c5b      	ldrb	r3, [r3, #17]
 8008580:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
	txbuffer[18] = bno_offset->accel_radius.u8[0];
 8008584:	683b      	ldr	r3, [r7, #0]
 8008586:	7c9b      	ldrb	r3, [r3, #18]
 8008588:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
	txbuffer[19] = bno_offset->accel_radius.u8[1];
 800858c:	683b      	ldr	r3, [r7, #0]
 800858e:	7cdb      	ldrb	r3, [r3, #19]
 8008590:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	txbuffer[20] = bno_offset->mag_radius.u8[0];
 8008594:	683b      	ldr	r3, [r7, #0]
 8008596:	7d1b      	ldrb	r3, [r3, #20]
 8008598:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
	txbuffer[21] = bno_offset->mag_radius.u8[1];
 800859c:	683b      	ldr	r3, [r7, #0]
 800859e:	7d5b      	ldrb	r3, [r3, #21]
 80085a0:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

	HAL_I2C_Mem_Write(bno->hi2cx, bno->address, ACC_OFFSET_X_LSB, 1, txbuffer, 22, 10);
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	6818      	ldr	r0, [r3, #0]
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	791b      	ldrb	r3, [r3, #4]
 80085ac:	4619      	mov	r1, r3
 80085ae:	230a      	movs	r3, #10
 80085b0:	9302      	str	r3, [sp, #8]
 80085b2:	2316      	movs	r3, #22
 80085b4:	9301      	str	r3, [sp, #4]
 80085b6:	f107 0310 	add.w	r3, r7, #16
 80085ba:	9300      	str	r3, [sp, #0]
 80085bc:	2301      	movs	r3, #1
 80085be:	2255      	movs	r2, #85	@ 0x55
 80085c0:	f7fa f9a2 	bl	8002908 <HAL_I2C_Mem_Write>

	HAL_I2C_Mem_Read(bno->hi2cx, bno->address, OPR_MODE, 1, &read_mode, 1, 10);
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	6818      	ldr	r0, [r3, #0]
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	791b      	ldrb	r3, [r3, #4]
 80085cc:	4619      	mov	r1, r3
 80085ce:	230a      	movs	r3, #10
 80085d0:	9302      	str	r3, [sp, #8]
 80085d2:	2301      	movs	r3, #1
 80085d4:	9301      	str	r3, [sp, #4]
 80085d6:	f107 0327 	add.w	r3, r7, #39	@ 0x27
 80085da:	9300      	str	r3, [sp, #0]
 80085dc:	2301      	movs	r3, #1
 80085de:	223d      	movs	r2, #61	@ 0x3d
 80085e0:	f7fa faa6 	bl	8002b30 <HAL_I2C_Mem_Read>
	if (read_mode != bno->mode) {
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	795a      	ldrb	r2, [r3, #5]
 80085e8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80085ec:	429a      	cmp	r2, r3
 80085ee:	d012      	beq.n	8008616 <BNO055_SetOffsets+0x15e>
		HAL_I2C_Mem_Write(bno->hi2cx, bno->address, OPR_MODE, 1, &bno->mode, 1, 10);
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	6818      	ldr	r0, [r3, #0]
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	791b      	ldrb	r3, [r3, #4]
 80085f8:	4619      	mov	r1, r3
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	3305      	adds	r3, #5
 80085fe:	220a      	movs	r2, #10
 8008600:	9202      	str	r2, [sp, #8]
 8008602:	2201      	movs	r2, #1
 8008604:	9201      	str	r2, [sp, #4]
 8008606:	9300      	str	r3, [sp, #0]
 8008608:	2301      	movs	r3, #1
 800860a:	223d      	movs	r2, #61	@ 0x3d
 800860c:	f7fa f97c 	bl	8002908 <HAL_I2C_Mem_Write>
		HAL_Delay(20);
 8008610:	2014      	movs	r0, #20
 8008612:	f7f9 fb29 	bl	8001c68 <HAL_Delay>
	}
}
 8008616:	bf00      	nop
 8008618:	3728      	adds	r7, #40	@ 0x28
 800861a:	46bd      	mov	sp, r7
 800861c:	bd80      	pop	{r7, pc}

0800861e <BNO55_SetAxis>:

void BNO55_SetAxis(BNO055_Structure *bno, Remap_Config config, Remap_Sign sign)
{
 800861e:	b580      	push	{r7, lr}
 8008620:	b088      	sub	sp, #32
 8008622:	af04      	add	r7, sp, #16
 8008624:	6078      	str	r0, [r7, #4]
 8008626:	460b      	mov	r3, r1
 8008628:	70fb      	strb	r3, [r7, #3]
 800862a:	4613      	mov	r3, r2
 800862c:	70bb      	strb	r3, [r7, #2]
	uint8_t read_mode;
	HAL_I2C_Mem_Read(bno->hi2cx, bno->address, OPR_MODE, 1, &read_mode, 1, 10);
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	6818      	ldr	r0, [r3, #0]
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	791b      	ldrb	r3, [r3, #4]
 8008636:	4619      	mov	r1, r3
 8008638:	230a      	movs	r3, #10
 800863a:	9302      	str	r3, [sp, #8]
 800863c:	2301      	movs	r3, #1
 800863e:	9301      	str	r3, [sp, #4]
 8008640:	f107 030f 	add.w	r3, r7, #15
 8008644:	9300      	str	r3, [sp, #0]
 8008646:	2301      	movs	r3, #1
 8008648:	223d      	movs	r2, #61	@ 0x3d
 800864a:	f7fa fa71 	bl	8002b30 <HAL_I2C_Mem_Read>
	if (read_mode != CONFIGMODE) {
 800864e:	7bfb      	ldrb	r3, [r7, #15]
 8008650:	2b00      	cmp	r3, #0
 8008652:	d014      	beq.n	800867e <BNO55_SetAxis+0x60>
		uint8_t txbuffer = CONFIGMODE;
 8008654:	2300      	movs	r3, #0
 8008656:	737b      	strb	r3, [r7, #13]
		HAL_I2C_Mem_Write(bno->hi2cx, bno->address, OPR_MODE, 1, &txbuffer, 1, 10);
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	6818      	ldr	r0, [r3, #0]
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	791b      	ldrb	r3, [r3, #4]
 8008660:	4619      	mov	r1, r3
 8008662:	230a      	movs	r3, #10
 8008664:	9302      	str	r3, [sp, #8]
 8008666:	2301      	movs	r3, #1
 8008668:	9301      	str	r3, [sp, #4]
 800866a:	f107 030d 	add.w	r3, r7, #13
 800866e:	9300      	str	r3, [sp, #0]
 8008670:	2301      	movs	r3, #1
 8008672:	223d      	movs	r2, #61	@ 0x3d
 8008674:	f7fa f948 	bl	8002908 <HAL_I2C_Mem_Write>
		HAL_Delay(20);
 8008678:	2014      	movs	r0, #20
 800867a:	f7f9 faf5 	bl	8001c68 <HAL_Delay>
	}

	uint8_t txbuffer;

	txbuffer = config;
 800867e:	78fb      	ldrb	r3, [r7, #3]
 8008680:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(bno->hi2cx, bno->address, AXIS_MAP_CONFIG, 1, &txbuffer, 1, 10);
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	6818      	ldr	r0, [r3, #0]
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	791b      	ldrb	r3, [r3, #4]
 800868a:	4619      	mov	r1, r3
 800868c:	230a      	movs	r3, #10
 800868e:	9302      	str	r3, [sp, #8]
 8008690:	2301      	movs	r3, #1
 8008692:	9301      	str	r3, [sp, #4]
 8008694:	f107 030e 	add.w	r3, r7, #14
 8008698:	9300      	str	r3, [sp, #0]
 800869a:	2301      	movs	r3, #1
 800869c:	2241      	movs	r2, #65	@ 0x41
 800869e:	f7fa f933 	bl	8002908 <HAL_I2C_Mem_Write>
	HAL_Delay(20);
 80086a2:	2014      	movs	r0, #20
 80086a4:	f7f9 fae0 	bl	8001c68 <HAL_Delay>

	txbuffer = sign;
 80086a8:	78bb      	ldrb	r3, [r7, #2]
 80086aa:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(bno->hi2cx, bno->address, AXIS_MAP_SIGN, 1, &txbuffer, 1, 10);
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	6818      	ldr	r0, [r3, #0]
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	791b      	ldrb	r3, [r3, #4]
 80086b4:	4619      	mov	r1, r3
 80086b6:	230a      	movs	r3, #10
 80086b8:	9302      	str	r3, [sp, #8]
 80086ba:	2301      	movs	r3, #1
 80086bc:	9301      	str	r3, [sp, #4]
 80086be:	f107 030e 	add.w	r3, r7, #14
 80086c2:	9300      	str	r3, [sp, #0]
 80086c4:	2301      	movs	r3, #1
 80086c6:	2242      	movs	r2, #66	@ 0x42
 80086c8:	f7fa f91e 	bl	8002908 <HAL_I2C_Mem_Write>
	HAL_Delay(20);
 80086cc:	2014      	movs	r0, #20
 80086ce:	f7f9 facb 	bl	8001c68 <HAL_Delay>

	HAL_I2C_Mem_Read(bno->hi2cx, bno->address, OPR_MODE, 1, &read_mode, 1, 10);
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	6818      	ldr	r0, [r3, #0]
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	791b      	ldrb	r3, [r3, #4]
 80086da:	4619      	mov	r1, r3
 80086dc:	230a      	movs	r3, #10
 80086de:	9302      	str	r3, [sp, #8]
 80086e0:	2301      	movs	r3, #1
 80086e2:	9301      	str	r3, [sp, #4]
 80086e4:	f107 030f 	add.w	r3, r7, #15
 80086e8:	9300      	str	r3, [sp, #0]
 80086ea:	2301      	movs	r3, #1
 80086ec:	223d      	movs	r2, #61	@ 0x3d
 80086ee:	f7fa fa1f 	bl	8002b30 <HAL_I2C_Mem_Read>
	if (read_mode != bno->mode) {
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	795a      	ldrb	r2, [r3, #5]
 80086f6:	7bfb      	ldrb	r3, [r7, #15]
 80086f8:	429a      	cmp	r2, r3
 80086fa:	d012      	beq.n	8008722 <BNO55_SetAxis+0x104>
		HAL_I2C_Mem_Write(bno->hi2cx, bno->address, OPR_MODE, 1, &bno->mode, 1, 10);
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	6818      	ldr	r0, [r3, #0]
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	791b      	ldrb	r3, [r3, #4]
 8008704:	4619      	mov	r1, r3
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	3305      	adds	r3, #5
 800870a:	220a      	movs	r2, #10
 800870c:	9202      	str	r2, [sp, #8]
 800870e:	2201      	movs	r2, #1
 8008710:	9201      	str	r2, [sp, #4]
 8008712:	9300      	str	r3, [sp, #0]
 8008714:	2301      	movs	r3, #1
 8008716:	223d      	movs	r2, #61	@ 0x3d
 8008718:	f7fa f8f6 	bl	8002908 <HAL_I2C_Mem_Write>
		HAL_Delay(20);
 800871c:	2014      	movs	r0, #20
 800871e:	f7f9 faa3 	bl	8001c68 <HAL_Delay>
	}
}
 8008722:	bf00      	nop
 8008724:	3710      	adds	r7, #16
 8008726:	46bd      	mov	sp, r7
 8008728:	bd80      	pop	{r7, pc}

0800872a <memset>:
 800872a:	4402      	add	r2, r0
 800872c:	4603      	mov	r3, r0
 800872e:	4293      	cmp	r3, r2
 8008730:	d100      	bne.n	8008734 <memset+0xa>
 8008732:	4770      	bx	lr
 8008734:	f803 1b01 	strb.w	r1, [r3], #1
 8008738:	e7f9      	b.n	800872e <memset+0x4>
	...

0800873c <__libc_init_array>:
 800873c:	b570      	push	{r4, r5, r6, lr}
 800873e:	4d0d      	ldr	r5, [pc, #52]	@ (8008774 <__libc_init_array+0x38>)
 8008740:	4c0d      	ldr	r4, [pc, #52]	@ (8008778 <__libc_init_array+0x3c>)
 8008742:	1b64      	subs	r4, r4, r5
 8008744:	10a4      	asrs	r4, r4, #2
 8008746:	2600      	movs	r6, #0
 8008748:	42a6      	cmp	r6, r4
 800874a:	d109      	bne.n	8008760 <__libc_init_array+0x24>
 800874c:	4d0b      	ldr	r5, [pc, #44]	@ (800877c <__libc_init_array+0x40>)
 800874e:	4c0c      	ldr	r4, [pc, #48]	@ (8008780 <__libc_init_array+0x44>)
 8008750:	f000 f818 	bl	8008784 <_init>
 8008754:	1b64      	subs	r4, r4, r5
 8008756:	10a4      	asrs	r4, r4, #2
 8008758:	2600      	movs	r6, #0
 800875a:	42a6      	cmp	r6, r4
 800875c:	d105      	bne.n	800876a <__libc_init_array+0x2e>
 800875e:	bd70      	pop	{r4, r5, r6, pc}
 8008760:	f855 3b04 	ldr.w	r3, [r5], #4
 8008764:	4798      	blx	r3
 8008766:	3601      	adds	r6, #1
 8008768:	e7ee      	b.n	8008748 <__libc_init_array+0xc>
 800876a:	f855 3b04 	ldr.w	r3, [r5], #4
 800876e:	4798      	blx	r3
 8008770:	3601      	adds	r6, #1
 8008772:	e7f2      	b.n	800875a <__libc_init_array+0x1e>
 8008774:	080087e4 	.word	0x080087e4
 8008778:	080087e4 	.word	0x080087e4
 800877c:	080087e4 	.word	0x080087e4
 8008780:	080087e8 	.word	0x080087e8

08008784 <_init>:
 8008784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008786:	bf00      	nop
 8008788:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800878a:	bc08      	pop	{r3}
 800878c:	469e      	mov	lr, r3
 800878e:	4770      	bx	lr

08008790 <_fini>:
 8008790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008792:	bf00      	nop
 8008794:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008796:	bc08      	pop	{r3}
 8008798:	469e      	mov	lr, r3
 800879a:	4770      	bx	lr
