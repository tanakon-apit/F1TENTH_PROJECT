
STM32G431KB_F1TENTH_FIRMWARE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005dcc  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08005fa4  08005fa4  00006fa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005fe4  08005fe4  00007034  2**0
                  CONTENTS
  4 .ARM          00000008  08005fe4  08005fe4  00006fe4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005fec  08005fec  00007034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005fec  08005fec  00006fec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005ff0  08005ff0  00006ff0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000034  20000000  08005ff4  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000334  20000034  08006028  00007034  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000368  08006028  00007368  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007034  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018287  00000000  00000000  00007064  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000315b  00000000  00000000  0001f2eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001580  00000000  00000000  00022448  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000010dd  00000000  00000000  000239c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f0d3  00000000  00000000  00024aa5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001beb4  00000000  00000000  00043b78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cb01a  00000000  00000000  0005fa2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012aa46  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d34  00000000  00000000  0012aa8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000089  00000000  00000000  001307c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000034 	.word	0x20000034
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08005f8c 	.word	0x08005f8c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000038 	.word	0x20000038
 8000214:	08005f8c 	.word	0x08005f8c

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2uiz>:
 8000ac4:	004a      	lsls	r2, r1, #1
 8000ac6:	d211      	bcs.n	8000aec <__aeabi_d2uiz+0x28>
 8000ac8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000acc:	d211      	bcs.n	8000af2 <__aeabi_d2uiz+0x2e>
 8000ace:	d50d      	bpl.n	8000aec <__aeabi_d2uiz+0x28>
 8000ad0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ad4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad8:	d40e      	bmi.n	8000af8 <__aeabi_d2uiz+0x34>
 8000ada:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ade:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ae2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aea:	4770      	bx	lr
 8000aec:	f04f 0000 	mov.w	r0, #0
 8000af0:	4770      	bx	lr
 8000af2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000af6:	d102      	bne.n	8000afe <__aeabi_d2uiz+0x3a>
 8000af8:	f04f 30ff 	mov.w	r0, #4294967295
 8000afc:	4770      	bx	lr
 8000afe:	f04f 0000 	mov.w	r0, #0
 8000b02:	4770      	bx	lr

08000b04 <__aeabi_d2f>:
 8000b04:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b08:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b0c:	bf24      	itt	cs
 8000b0e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b12:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b16:	d90d      	bls.n	8000b34 <__aeabi_d2f+0x30>
 8000b18:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b1c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b20:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b24:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b28:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b2c:	bf08      	it	eq
 8000b2e:	f020 0001 	biceq.w	r0, r0, #1
 8000b32:	4770      	bx	lr
 8000b34:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b38:	d121      	bne.n	8000b7e <__aeabi_d2f+0x7a>
 8000b3a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b3e:	bfbc      	itt	lt
 8000b40:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b44:	4770      	bxlt	lr
 8000b46:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b4a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b4e:	f1c2 0218 	rsb	r2, r2, #24
 8000b52:	f1c2 0c20 	rsb	ip, r2, #32
 8000b56:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b5a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b5e:	bf18      	it	ne
 8000b60:	f040 0001 	orrne.w	r0, r0, #1
 8000b64:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b68:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b6c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b70:	ea40 000c 	orr.w	r0, r0, ip
 8000b74:	fa23 f302 	lsr.w	r3, r3, r2
 8000b78:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b7c:	e7cc      	b.n	8000b18 <__aeabi_d2f+0x14>
 8000b7e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b82:	d107      	bne.n	8000b94 <__aeabi_d2f+0x90>
 8000b84:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b88:	bf1e      	ittt	ne
 8000b8a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b8e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b92:	4770      	bxne	lr
 8000b94:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b9c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop

08000ba4 <__aeabi_uldivmod>:
 8000ba4:	b953      	cbnz	r3, 8000bbc <__aeabi_uldivmod+0x18>
 8000ba6:	b94a      	cbnz	r2, 8000bbc <__aeabi_uldivmod+0x18>
 8000ba8:	2900      	cmp	r1, #0
 8000baa:	bf08      	it	eq
 8000bac:	2800      	cmpeq	r0, #0
 8000bae:	bf1c      	itt	ne
 8000bb0:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb4:	f04f 30ff 	movne.w	r0, #4294967295
 8000bb8:	f000 b96a 	b.w	8000e90 <__aeabi_idiv0>
 8000bbc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc4:	f000 f806 	bl	8000bd4 <__udivmoddi4>
 8000bc8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bcc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd0:	b004      	add	sp, #16
 8000bd2:	4770      	bx	lr

08000bd4 <__udivmoddi4>:
 8000bd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bd8:	9d08      	ldr	r5, [sp, #32]
 8000bda:	460c      	mov	r4, r1
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d14e      	bne.n	8000c7e <__udivmoddi4+0xaa>
 8000be0:	4694      	mov	ip, r2
 8000be2:	458c      	cmp	ip, r1
 8000be4:	4686      	mov	lr, r0
 8000be6:	fab2 f282 	clz	r2, r2
 8000bea:	d962      	bls.n	8000cb2 <__udivmoddi4+0xde>
 8000bec:	b14a      	cbz	r2, 8000c02 <__udivmoddi4+0x2e>
 8000bee:	f1c2 0320 	rsb	r3, r2, #32
 8000bf2:	4091      	lsls	r1, r2
 8000bf4:	fa20 f303 	lsr.w	r3, r0, r3
 8000bf8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bfc:	4319      	orrs	r1, r3
 8000bfe:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c02:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c06:	fa1f f68c 	uxth.w	r6, ip
 8000c0a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c0e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c12:	fb07 1114 	mls	r1, r7, r4, r1
 8000c16:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1a:	fb04 f106 	mul.w	r1, r4, r6
 8000c1e:	4299      	cmp	r1, r3
 8000c20:	d90a      	bls.n	8000c38 <__udivmoddi4+0x64>
 8000c22:	eb1c 0303 	adds.w	r3, ip, r3
 8000c26:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c2a:	f080 8112 	bcs.w	8000e52 <__udivmoddi4+0x27e>
 8000c2e:	4299      	cmp	r1, r3
 8000c30:	f240 810f 	bls.w	8000e52 <__udivmoddi4+0x27e>
 8000c34:	3c02      	subs	r4, #2
 8000c36:	4463      	add	r3, ip
 8000c38:	1a59      	subs	r1, r3, r1
 8000c3a:	fa1f f38e 	uxth.w	r3, lr
 8000c3e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c42:	fb07 1110 	mls	r1, r7, r0, r1
 8000c46:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c4a:	fb00 f606 	mul.w	r6, r0, r6
 8000c4e:	429e      	cmp	r6, r3
 8000c50:	d90a      	bls.n	8000c68 <__udivmoddi4+0x94>
 8000c52:	eb1c 0303 	adds.w	r3, ip, r3
 8000c56:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c5a:	f080 80fc 	bcs.w	8000e56 <__udivmoddi4+0x282>
 8000c5e:	429e      	cmp	r6, r3
 8000c60:	f240 80f9 	bls.w	8000e56 <__udivmoddi4+0x282>
 8000c64:	4463      	add	r3, ip
 8000c66:	3802      	subs	r0, #2
 8000c68:	1b9b      	subs	r3, r3, r6
 8000c6a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c6e:	2100      	movs	r1, #0
 8000c70:	b11d      	cbz	r5, 8000c7a <__udivmoddi4+0xa6>
 8000c72:	40d3      	lsrs	r3, r2
 8000c74:	2200      	movs	r2, #0
 8000c76:	e9c5 3200 	strd	r3, r2, [r5]
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d905      	bls.n	8000c8e <__udivmoddi4+0xba>
 8000c82:	b10d      	cbz	r5, 8000c88 <__udivmoddi4+0xb4>
 8000c84:	e9c5 0100 	strd	r0, r1, [r5]
 8000c88:	2100      	movs	r1, #0
 8000c8a:	4608      	mov	r0, r1
 8000c8c:	e7f5      	b.n	8000c7a <__udivmoddi4+0xa6>
 8000c8e:	fab3 f183 	clz	r1, r3
 8000c92:	2900      	cmp	r1, #0
 8000c94:	d146      	bne.n	8000d24 <__udivmoddi4+0x150>
 8000c96:	42a3      	cmp	r3, r4
 8000c98:	d302      	bcc.n	8000ca0 <__udivmoddi4+0xcc>
 8000c9a:	4290      	cmp	r0, r2
 8000c9c:	f0c0 80f0 	bcc.w	8000e80 <__udivmoddi4+0x2ac>
 8000ca0:	1a86      	subs	r6, r0, r2
 8000ca2:	eb64 0303 	sbc.w	r3, r4, r3
 8000ca6:	2001      	movs	r0, #1
 8000ca8:	2d00      	cmp	r5, #0
 8000caa:	d0e6      	beq.n	8000c7a <__udivmoddi4+0xa6>
 8000cac:	e9c5 6300 	strd	r6, r3, [r5]
 8000cb0:	e7e3      	b.n	8000c7a <__udivmoddi4+0xa6>
 8000cb2:	2a00      	cmp	r2, #0
 8000cb4:	f040 8090 	bne.w	8000dd8 <__udivmoddi4+0x204>
 8000cb8:	eba1 040c 	sub.w	r4, r1, ip
 8000cbc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cc0:	fa1f f78c 	uxth.w	r7, ip
 8000cc4:	2101      	movs	r1, #1
 8000cc6:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cca:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cce:	fb08 4416 	mls	r4, r8, r6, r4
 8000cd2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cd6:	fb07 f006 	mul.w	r0, r7, r6
 8000cda:	4298      	cmp	r0, r3
 8000cdc:	d908      	bls.n	8000cf0 <__udivmoddi4+0x11c>
 8000cde:	eb1c 0303 	adds.w	r3, ip, r3
 8000ce2:	f106 34ff 	add.w	r4, r6, #4294967295
 8000ce6:	d202      	bcs.n	8000cee <__udivmoddi4+0x11a>
 8000ce8:	4298      	cmp	r0, r3
 8000cea:	f200 80cd 	bhi.w	8000e88 <__udivmoddi4+0x2b4>
 8000cee:	4626      	mov	r6, r4
 8000cf0:	1a1c      	subs	r4, r3, r0
 8000cf2:	fa1f f38e 	uxth.w	r3, lr
 8000cf6:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cfa:	fb08 4410 	mls	r4, r8, r0, r4
 8000cfe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d02:	fb00 f707 	mul.w	r7, r0, r7
 8000d06:	429f      	cmp	r7, r3
 8000d08:	d908      	bls.n	8000d1c <__udivmoddi4+0x148>
 8000d0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d12:	d202      	bcs.n	8000d1a <__udivmoddi4+0x146>
 8000d14:	429f      	cmp	r7, r3
 8000d16:	f200 80b0 	bhi.w	8000e7a <__udivmoddi4+0x2a6>
 8000d1a:	4620      	mov	r0, r4
 8000d1c:	1bdb      	subs	r3, r3, r7
 8000d1e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d22:	e7a5      	b.n	8000c70 <__udivmoddi4+0x9c>
 8000d24:	f1c1 0620 	rsb	r6, r1, #32
 8000d28:	408b      	lsls	r3, r1
 8000d2a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d2e:	431f      	orrs	r7, r3
 8000d30:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d34:	fa04 f301 	lsl.w	r3, r4, r1
 8000d38:	ea43 030c 	orr.w	r3, r3, ip
 8000d3c:	40f4      	lsrs	r4, r6
 8000d3e:	fa00 f801 	lsl.w	r8, r0, r1
 8000d42:	0c38      	lsrs	r0, r7, #16
 8000d44:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d48:	fbb4 fef0 	udiv	lr, r4, r0
 8000d4c:	fa1f fc87 	uxth.w	ip, r7
 8000d50:	fb00 441e 	mls	r4, r0, lr, r4
 8000d54:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d58:	fb0e f90c 	mul.w	r9, lr, ip
 8000d5c:	45a1      	cmp	r9, r4
 8000d5e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d62:	d90a      	bls.n	8000d7a <__udivmoddi4+0x1a6>
 8000d64:	193c      	adds	r4, r7, r4
 8000d66:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d6a:	f080 8084 	bcs.w	8000e76 <__udivmoddi4+0x2a2>
 8000d6e:	45a1      	cmp	r9, r4
 8000d70:	f240 8081 	bls.w	8000e76 <__udivmoddi4+0x2a2>
 8000d74:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d78:	443c      	add	r4, r7
 8000d7a:	eba4 0409 	sub.w	r4, r4, r9
 8000d7e:	fa1f f983 	uxth.w	r9, r3
 8000d82:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d86:	fb00 4413 	mls	r4, r0, r3, r4
 8000d8a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d8e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d92:	45a4      	cmp	ip, r4
 8000d94:	d907      	bls.n	8000da6 <__udivmoddi4+0x1d2>
 8000d96:	193c      	adds	r4, r7, r4
 8000d98:	f103 30ff 	add.w	r0, r3, #4294967295
 8000d9c:	d267      	bcs.n	8000e6e <__udivmoddi4+0x29a>
 8000d9e:	45a4      	cmp	ip, r4
 8000da0:	d965      	bls.n	8000e6e <__udivmoddi4+0x29a>
 8000da2:	3b02      	subs	r3, #2
 8000da4:	443c      	add	r4, r7
 8000da6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000daa:	fba0 9302 	umull	r9, r3, r0, r2
 8000dae:	eba4 040c 	sub.w	r4, r4, ip
 8000db2:	429c      	cmp	r4, r3
 8000db4:	46ce      	mov	lr, r9
 8000db6:	469c      	mov	ip, r3
 8000db8:	d351      	bcc.n	8000e5e <__udivmoddi4+0x28a>
 8000dba:	d04e      	beq.n	8000e5a <__udivmoddi4+0x286>
 8000dbc:	b155      	cbz	r5, 8000dd4 <__udivmoddi4+0x200>
 8000dbe:	ebb8 030e 	subs.w	r3, r8, lr
 8000dc2:	eb64 040c 	sbc.w	r4, r4, ip
 8000dc6:	fa04 f606 	lsl.w	r6, r4, r6
 8000dca:	40cb      	lsrs	r3, r1
 8000dcc:	431e      	orrs	r6, r3
 8000dce:	40cc      	lsrs	r4, r1
 8000dd0:	e9c5 6400 	strd	r6, r4, [r5]
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	e750      	b.n	8000c7a <__udivmoddi4+0xa6>
 8000dd8:	f1c2 0320 	rsb	r3, r2, #32
 8000ddc:	fa20 f103 	lsr.w	r1, r0, r3
 8000de0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000de4:	fa24 f303 	lsr.w	r3, r4, r3
 8000de8:	4094      	lsls	r4, r2
 8000dea:	430c      	orrs	r4, r1
 8000dec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000df0:	fa00 fe02 	lsl.w	lr, r0, r2
 8000df4:	fa1f f78c 	uxth.w	r7, ip
 8000df8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dfc:	fb08 3110 	mls	r1, r8, r0, r3
 8000e00:	0c23      	lsrs	r3, r4, #16
 8000e02:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e06:	fb00 f107 	mul.w	r1, r0, r7
 8000e0a:	4299      	cmp	r1, r3
 8000e0c:	d908      	bls.n	8000e20 <__udivmoddi4+0x24c>
 8000e0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e12:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e16:	d22c      	bcs.n	8000e72 <__udivmoddi4+0x29e>
 8000e18:	4299      	cmp	r1, r3
 8000e1a:	d92a      	bls.n	8000e72 <__udivmoddi4+0x29e>
 8000e1c:	3802      	subs	r0, #2
 8000e1e:	4463      	add	r3, ip
 8000e20:	1a5b      	subs	r3, r3, r1
 8000e22:	b2a4      	uxth	r4, r4
 8000e24:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e28:	fb08 3311 	mls	r3, r8, r1, r3
 8000e2c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e30:	fb01 f307 	mul.w	r3, r1, r7
 8000e34:	42a3      	cmp	r3, r4
 8000e36:	d908      	bls.n	8000e4a <__udivmoddi4+0x276>
 8000e38:	eb1c 0404 	adds.w	r4, ip, r4
 8000e3c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e40:	d213      	bcs.n	8000e6a <__udivmoddi4+0x296>
 8000e42:	42a3      	cmp	r3, r4
 8000e44:	d911      	bls.n	8000e6a <__udivmoddi4+0x296>
 8000e46:	3902      	subs	r1, #2
 8000e48:	4464      	add	r4, ip
 8000e4a:	1ae4      	subs	r4, r4, r3
 8000e4c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e50:	e739      	b.n	8000cc6 <__udivmoddi4+0xf2>
 8000e52:	4604      	mov	r4, r0
 8000e54:	e6f0      	b.n	8000c38 <__udivmoddi4+0x64>
 8000e56:	4608      	mov	r0, r1
 8000e58:	e706      	b.n	8000c68 <__udivmoddi4+0x94>
 8000e5a:	45c8      	cmp	r8, r9
 8000e5c:	d2ae      	bcs.n	8000dbc <__udivmoddi4+0x1e8>
 8000e5e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e62:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e66:	3801      	subs	r0, #1
 8000e68:	e7a8      	b.n	8000dbc <__udivmoddi4+0x1e8>
 8000e6a:	4631      	mov	r1, r6
 8000e6c:	e7ed      	b.n	8000e4a <__udivmoddi4+0x276>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	e799      	b.n	8000da6 <__udivmoddi4+0x1d2>
 8000e72:	4630      	mov	r0, r6
 8000e74:	e7d4      	b.n	8000e20 <__udivmoddi4+0x24c>
 8000e76:	46d6      	mov	lr, sl
 8000e78:	e77f      	b.n	8000d7a <__udivmoddi4+0x1a6>
 8000e7a:	4463      	add	r3, ip
 8000e7c:	3802      	subs	r0, #2
 8000e7e:	e74d      	b.n	8000d1c <__udivmoddi4+0x148>
 8000e80:	4606      	mov	r6, r0
 8000e82:	4623      	mov	r3, r4
 8000e84:	4608      	mov	r0, r1
 8000e86:	e70f      	b.n	8000ca8 <__udivmoddi4+0xd4>
 8000e88:	3e02      	subs	r6, #2
 8000e8a:	4463      	add	r3, ip
 8000e8c:	e730      	b.n	8000cf0 <__udivmoddi4+0x11c>
 8000e8e:	bf00      	nop

08000e90 <__aeabi_idiv0>:
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop

08000e94 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b088      	sub	sp, #32
 8000e98:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e9a:	f107 030c 	add.w	r3, r7, #12
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	601a      	str	r2, [r3, #0]
 8000ea2:	605a      	str	r2, [r3, #4]
 8000ea4:	609a      	str	r2, [r3, #8]
 8000ea6:	60da      	str	r2, [r3, #12]
 8000ea8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eaa:	4b1f      	ldr	r3, [pc, #124]	@ (8000f28 <MX_GPIO_Init+0x94>)
 8000eac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eae:	4a1e      	ldr	r2, [pc, #120]	@ (8000f28 <MX_GPIO_Init+0x94>)
 8000eb0:	f043 0301 	orr.w	r3, r3, #1
 8000eb4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000eb6:	4b1c      	ldr	r3, [pc, #112]	@ (8000f28 <MX_GPIO_Init+0x94>)
 8000eb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eba:	f003 0301 	and.w	r3, r3, #1
 8000ebe:	60bb      	str	r3, [r7, #8]
 8000ec0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ec2:	4b19      	ldr	r3, [pc, #100]	@ (8000f28 <MX_GPIO_Init+0x94>)
 8000ec4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ec6:	4a18      	ldr	r2, [pc, #96]	@ (8000f28 <MX_GPIO_Init+0x94>)
 8000ec8:	f043 0302 	orr.w	r3, r3, #2
 8000ecc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ece:	4b16      	ldr	r3, [pc, #88]	@ (8000f28 <MX_GPIO_Init+0x94>)
 8000ed0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ed2:	f003 0302 	and.w	r3, r3, #2
 8000ed6:	607b      	str	r3, [r7, #4]
 8000ed8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000eda:	2200      	movs	r2, #0
 8000edc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000ee0:	4812      	ldr	r0, [pc, #72]	@ (8000f2c <MX_GPIO_Init+0x98>)
 8000ee2:	f001 facf 	bl	8002484 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000eea:	2300      	movs	r3, #0
 8000eec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8000ef2:	f107 030c 	add.w	r3, r7, #12
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000efc:	f001 f940 	bl	8002180 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000f00:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000f04:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f06:	2301      	movs	r3, #1
 8000f08:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000f12:	f107 030c 	add.w	r3, r7, #12
 8000f16:	4619      	mov	r1, r3
 8000f18:	4804      	ldr	r0, [pc, #16]	@ (8000f2c <MX_GPIO_Init+0x98>)
 8000f1a:	f001 f931 	bl	8002180 <HAL_GPIO_Init>

}
 8000f1e:	bf00      	nop
 8000f20:	3720      	adds	r7, #32
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	40021000 	.word	0x40021000
 8000f2c:	48000400 	.word	0x48000400

08000f30 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000f34:	4b1b      	ldr	r3, [pc, #108]	@ (8000fa4 <MX_I2C1_Init+0x74>)
 8000f36:	4a1c      	ldr	r2, [pc, #112]	@ (8000fa8 <MX_I2C1_Init+0x78>)
 8000f38:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10802D9B;
 8000f3a:	4b1a      	ldr	r3, [pc, #104]	@ (8000fa4 <MX_I2C1_Init+0x74>)
 8000f3c:	4a1b      	ldr	r2, [pc, #108]	@ (8000fac <MX_I2C1_Init+0x7c>)
 8000f3e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000f40:	4b18      	ldr	r3, [pc, #96]	@ (8000fa4 <MX_I2C1_Init+0x74>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f46:	4b17      	ldr	r3, [pc, #92]	@ (8000fa4 <MX_I2C1_Init+0x74>)
 8000f48:	2201      	movs	r2, #1
 8000f4a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f4c:	4b15      	ldr	r3, [pc, #84]	@ (8000fa4 <MX_I2C1_Init+0x74>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000f52:	4b14      	ldr	r3, [pc, #80]	@ (8000fa4 <MX_I2C1_Init+0x74>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000f58:	4b12      	ldr	r3, [pc, #72]	@ (8000fa4 <MX_I2C1_Init+0x74>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f5e:	4b11      	ldr	r3, [pc, #68]	@ (8000fa4 <MX_I2C1_Init+0x74>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f64:	4b0f      	ldr	r3, [pc, #60]	@ (8000fa4 <MX_I2C1_Init+0x74>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f6a:	480e      	ldr	r0, [pc, #56]	@ (8000fa4 <MX_I2C1_Init+0x74>)
 8000f6c:	f001 faa2 	bl	80024b4 <HAL_I2C_Init>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d001      	beq.n	8000f7a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000f76:	f000 f930 	bl	80011da <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000f7a:	2100      	movs	r1, #0
 8000f7c:	4809      	ldr	r0, [pc, #36]	@ (8000fa4 <MX_I2C1_Init+0x74>)
 8000f7e:	f001 fb34 	bl	80025ea <HAL_I2CEx_ConfigAnalogFilter>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d001      	beq.n	8000f8c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000f88:	f000 f927 	bl	80011da <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000f8c:	2100      	movs	r1, #0
 8000f8e:	4805      	ldr	r0, [pc, #20]	@ (8000fa4 <MX_I2C1_Init+0x74>)
 8000f90:	f001 fb76 	bl	8002680 <HAL_I2CEx_ConfigDigitalFilter>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d001      	beq.n	8000f9e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000f9a:	f000 f91e 	bl	80011da <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000f9e:	bf00      	nop
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	20000050 	.word	0x20000050
 8000fa8:	40005400 	.word	0x40005400
 8000fac:	10802d9b 	.word	0x10802d9b

08000fb0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b09c      	sub	sp, #112	@ 0x70
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb8:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	601a      	str	r2, [r3, #0]
 8000fc0:	605a      	str	r2, [r3, #4]
 8000fc2:	609a      	str	r2, [r3, #8]
 8000fc4:	60da      	str	r2, [r3, #12]
 8000fc6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fc8:	f107 0318 	add.w	r3, r7, #24
 8000fcc:	2244      	movs	r2, #68	@ 0x44
 8000fce:	2100      	movs	r1, #0
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f004 ffaf 	bl	8005f34 <memset>
  if(i2cHandle->Instance==I2C1)
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	4a2d      	ldr	r2, [pc, #180]	@ (8001090 <HAL_I2C_MspInit+0xe0>)
 8000fdc:	4293      	cmp	r3, r2
 8000fde:	d153      	bne.n	8001088 <HAL_I2C_MspInit+0xd8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000fe0:	2340      	movs	r3, #64	@ 0x40
 8000fe2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fe8:	f107 0318 	add.w	r3, r7, #24
 8000fec:	4618      	mov	r0, r3
 8000fee:	f002 f975 	bl	80032dc <HAL_RCCEx_PeriphCLKConfig>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d001      	beq.n	8000ffc <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000ff8:	f000 f8ef 	bl	80011da <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ffc:	4b25      	ldr	r3, [pc, #148]	@ (8001094 <HAL_I2C_MspInit+0xe4>)
 8000ffe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001000:	4a24      	ldr	r2, [pc, #144]	@ (8001094 <HAL_I2C_MspInit+0xe4>)
 8001002:	f043 0301 	orr.w	r3, r3, #1
 8001006:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001008:	4b22      	ldr	r3, [pc, #136]	@ (8001094 <HAL_I2C_MspInit+0xe4>)
 800100a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800100c:	f003 0301 	and.w	r3, r3, #1
 8001010:	617b      	str	r3, [r7, #20]
 8001012:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001014:	4b1f      	ldr	r3, [pc, #124]	@ (8001094 <HAL_I2C_MspInit+0xe4>)
 8001016:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001018:	4a1e      	ldr	r2, [pc, #120]	@ (8001094 <HAL_I2C_MspInit+0xe4>)
 800101a:	f043 0302 	orr.w	r3, r3, #2
 800101e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001020:	4b1c      	ldr	r3, [pc, #112]	@ (8001094 <HAL_I2C_MspInit+0xe4>)
 8001022:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001024:	f003 0302 	and.w	r3, r3, #2
 8001028:	613b      	str	r3, [r7, #16]
 800102a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800102c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001030:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001032:	2312      	movs	r3, #18
 8001034:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001036:	2300      	movs	r3, #0
 8001038:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800103a:	2300      	movs	r3, #0
 800103c:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800103e:	2304      	movs	r3, #4
 8001040:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001042:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001046:	4619      	mov	r1, r3
 8001048:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800104c:	f001 f898 	bl	8002180 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001050:	2380      	movs	r3, #128	@ 0x80
 8001052:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001054:	2312      	movs	r3, #18
 8001056:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001058:	2300      	movs	r3, #0
 800105a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800105c:	2300      	movs	r3, #0
 800105e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001060:	2304      	movs	r3, #4
 8001062:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001064:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001068:	4619      	mov	r1, r3
 800106a:	480b      	ldr	r0, [pc, #44]	@ (8001098 <HAL_I2C_MspInit+0xe8>)
 800106c:	f001 f888 	bl	8002180 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001070:	4b08      	ldr	r3, [pc, #32]	@ (8001094 <HAL_I2C_MspInit+0xe4>)
 8001072:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001074:	4a07      	ldr	r2, [pc, #28]	@ (8001094 <HAL_I2C_MspInit+0xe4>)
 8001076:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800107a:	6593      	str	r3, [r2, #88]	@ 0x58
 800107c:	4b05      	ldr	r3, [pc, #20]	@ (8001094 <HAL_I2C_MspInit+0xe4>)
 800107e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001080:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001084:	60fb      	str	r3, [r7, #12]
 8001086:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001088:	bf00      	nop
 800108a:	3770      	adds	r7, #112	@ 0x70
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	40005400 	.word	0x40005400
 8001094:	40021000 	.word	0x40021000
 8001098:	48000400 	.word	0x48000400

0800109c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010a0:	f000 fef7 	bl	8001e92 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010a4:	f000 f84e 	bl	8001144 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010a8:	f7ff fef4 	bl	8000e94 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80010ac:	f000 fe24 	bl	8001cf8 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80010b0:	f7ff ff3e 	bl	8000f30 <MX_I2C1_Init>
  MX_TIM1_Init();
 80010b4:	f000 f99c 	bl	80013f0 <MX_TIM1_Init>
  MX_TIM3_Init();
 80010b8:	f000 f9ea 	bl	8001490 <MX_TIM3_Init>
  MX_TIM4_Init();
 80010bc:	f000 fa3e 	bl	800153c <MX_TIM4_Init>
  MX_SPI1_Init();
 80010c0:	f000 f892 	bl	80011e8 <MX_SPI1_Init>
  MX_TIM15_Init();
 80010c4:	f000 fb32 	bl	800172c <MX_TIM15_Init>
  MX_TIM16_Init();
 80010c8:	f000 fbd4 	bl	8001874 <MX_TIM16_Init>
  MX_TIM8_Init();
 80010cc:	f000 fa8c 	bl	80015e8 <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */

//  HAL_TIM_Base_Start(&htim16); // Start Timer
//  HAL_TIMEx_PWMN_Start(&htim16, TIM_CHANNEL_1); // Start PWM Mode

  Servo_Init(&Drive, 170*1.0e6, True);
 80010d0:	2101      	movs	r1, #1
 80010d2:	ed9f 0a15 	vldr	s0, [pc, #84]	@ 8001128 <main+0x8c>
 80010d6:	4815      	ldr	r0, [pc, #84]	@ (800112c <main+0x90>)
 80010d8:	f004 fdf0 	bl	8005cbc <Servo_Init>
  RC_Set_Input_Range(&Drive, 500, 2500);
 80010dc:	eddf 0a14 	vldr	s1, [pc, #80]	@ 8001130 <main+0x94>
 80010e0:	ed9f 0a14 	vldr	s0, [pc, #80]	@ 8001134 <main+0x98>
 80010e4:	4811      	ldr	r0, [pc, #68]	@ (800112c <main+0x90>)
 80010e6:	f004 fe6f 	bl	8005dc8 <RC_Set_Input_Range>

  Servo_Init(&Steer, 170*1.0e6, True);
 80010ea:	2101      	movs	r1, #1
 80010ec:	ed9f 0a0e 	vldr	s0, [pc, #56]	@ 8001128 <main+0x8c>
 80010f0:	4811      	ldr	r0, [pc, #68]	@ (8001138 <main+0x9c>)
 80010f2:	f004 fde3 	bl	8005cbc <Servo_Init>
  RC_Set_Input_Range(&Steer, 500, 2500);
 80010f6:	eddf 0a0e 	vldr	s1, [pc, #56]	@ 8001130 <main+0x94>
 80010fa:	ed9f 0a0e 	vldr	s0, [pc, #56]	@ 8001134 <main+0x98>
 80010fe:	480e      	ldr	r0, [pc, #56]	@ (8001138 <main+0x9c>)
 8001100:	f004 fe62 	bl	8005dc8 <RC_Set_Input_Range>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  RC_Signal_Write(&Steer, degree);
 8001104:	4b0d      	ldr	r3, [pc, #52]	@ (800113c <main+0xa0>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4619      	mov	r1, r3
 800110a:	480b      	ldr	r0, [pc, #44]	@ (8001138 <main+0x9c>)
 800110c:	f004 fe96 	bl	8005e3c <RC_Signal_Write>
	  RC_Signal_Write(&Drive, speed);
 8001110:	4b0b      	ldr	r3, [pc, #44]	@ (8001140 <main+0xa4>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	4619      	mov	r1, r3
 8001116:	4805      	ldr	r0, [pc, #20]	@ (800112c <main+0x90>)
 8001118:	f004 fe90 	bl	8005e3c <RC_Signal_Write>
	  HAL_Delay(20);
 800111c:	2014      	movs	r0, #20
 800111e:	f000 ff29 	bl	8001f74 <HAL_Delay>
	  RC_Signal_Write(&Steer, degree);
 8001122:	bf00      	nop
 8001124:	e7ee      	b.n	8001104 <main+0x68>
 8001126:	bf00      	nop
 8001128:	4d221fe8 	.word	0x4d221fe8
 800112c:	20000000 	.word	0x20000000
 8001130:	451c4000 	.word	0x451c4000
 8001134:	43fa0000 	.word	0x43fa0000
 8001138:	20000010 	.word	0x20000010
 800113c:	20000020 	.word	0x20000020
 8001140:	20000024 	.word	0x20000024

08001144 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b094      	sub	sp, #80	@ 0x50
 8001148:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800114a:	f107 0318 	add.w	r3, r7, #24
 800114e:	2238      	movs	r2, #56	@ 0x38
 8001150:	2100      	movs	r1, #0
 8001152:	4618      	mov	r0, r3
 8001154:	f004 feee 	bl	8005f34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001158:	1d3b      	adds	r3, r7, #4
 800115a:	2200      	movs	r2, #0
 800115c:	601a      	str	r2, [r3, #0]
 800115e:	605a      	str	r2, [r3, #4]
 8001160:	609a      	str	r2, [r3, #8]
 8001162:	60da      	str	r2, [r3, #12]
 8001164:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001166:	2000      	movs	r0, #0
 8001168:	f001 fad6 	bl	8002718 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800116c:	2302      	movs	r3, #2
 800116e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001170:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001174:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001176:	2340      	movs	r3, #64	@ 0x40
 8001178:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800117a:	2302      	movs	r3, #2
 800117c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800117e:	2302      	movs	r3, #2
 8001180:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001182:	2304      	movs	r3, #4
 8001184:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001186:	2355      	movs	r3, #85	@ 0x55
 8001188:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800118a:	2302      	movs	r3, #2
 800118c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800118e:	2302      	movs	r3, #2
 8001190:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001192:	2302      	movs	r3, #2
 8001194:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001196:	f107 0318 	add.w	r3, r7, #24
 800119a:	4618      	mov	r0, r3
 800119c:	f001 fb70 	bl	8002880 <HAL_RCC_OscConfig>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <SystemClock_Config+0x66>
  {
    Error_Handler();
 80011a6:	f000 f818 	bl	80011da <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011aa:	230f      	movs	r3, #15
 80011ac:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011ae:	2303      	movs	r3, #3
 80011b0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011b2:	2300      	movs	r3, #0
 80011b4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80011b6:	2300      	movs	r3, #0
 80011b8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011ba:	2300      	movs	r3, #0
 80011bc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80011be:	1d3b      	adds	r3, r7, #4
 80011c0:	2104      	movs	r1, #4
 80011c2:	4618      	mov	r0, r3
 80011c4:	f001 fe6e 	bl	8002ea4 <HAL_RCC_ClockConfig>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d001      	beq.n	80011d2 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80011ce:	f000 f804 	bl	80011da <Error_Handler>
  }
}
 80011d2:	bf00      	nop
 80011d4:	3750      	adds	r7, #80	@ 0x50
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}

080011da <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011da:	b480      	push	{r7}
 80011dc:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011de:	b672      	cpsid	i
}
 80011e0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011e2:	bf00      	nop
 80011e4:	e7fd      	b.n	80011e2 <Error_Handler+0x8>
	...

080011e8 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80011ec:	4b1b      	ldr	r3, [pc, #108]	@ (800125c <MX_SPI1_Init+0x74>)
 80011ee:	4a1c      	ldr	r2, [pc, #112]	@ (8001260 <MX_SPI1_Init+0x78>)
 80011f0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80011f2:	4b1a      	ldr	r3, [pc, #104]	@ (800125c <MX_SPI1_Init+0x74>)
 80011f4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80011f8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80011fa:	4b18      	ldr	r3, [pc, #96]	@ (800125c <MX_SPI1_Init+0x74>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001200:	4b16      	ldr	r3, [pc, #88]	@ (800125c <MX_SPI1_Init+0x74>)
 8001202:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001206:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001208:	4b14      	ldr	r3, [pc, #80]	@ (800125c <MX_SPI1_Init+0x74>)
 800120a:	2200      	movs	r2, #0
 800120c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800120e:	4b13      	ldr	r3, [pc, #76]	@ (800125c <MX_SPI1_Init+0x74>)
 8001210:	2200      	movs	r2, #0
 8001212:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001214:	4b11      	ldr	r3, [pc, #68]	@ (800125c <MX_SPI1_Init+0x74>)
 8001216:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800121a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800121c:	4b0f      	ldr	r3, [pc, #60]	@ (800125c <MX_SPI1_Init+0x74>)
 800121e:	2220      	movs	r2, #32
 8001220:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001222:	4b0e      	ldr	r3, [pc, #56]	@ (800125c <MX_SPI1_Init+0x74>)
 8001224:	2200      	movs	r2, #0
 8001226:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001228:	4b0c      	ldr	r3, [pc, #48]	@ (800125c <MX_SPI1_Init+0x74>)
 800122a:	2200      	movs	r2, #0
 800122c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800122e:	4b0b      	ldr	r3, [pc, #44]	@ (800125c <MX_SPI1_Init+0x74>)
 8001230:	2200      	movs	r2, #0
 8001232:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001234:	4b09      	ldr	r3, [pc, #36]	@ (800125c <MX_SPI1_Init+0x74>)
 8001236:	2207      	movs	r2, #7
 8001238:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800123a:	4b08      	ldr	r3, [pc, #32]	@ (800125c <MX_SPI1_Init+0x74>)
 800123c:	2200      	movs	r2, #0
 800123e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001240:	4b06      	ldr	r3, [pc, #24]	@ (800125c <MX_SPI1_Init+0x74>)
 8001242:	2208      	movs	r2, #8
 8001244:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001246:	4805      	ldr	r0, [pc, #20]	@ (800125c <MX_SPI1_Init+0x74>)
 8001248:	f002 fa38 	bl	80036bc <HAL_SPI_Init>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d001      	beq.n	8001256 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001252:	f7ff ffc2 	bl	80011da <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001256:	bf00      	nop
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	200000a4 	.word	0x200000a4
 8001260:	40013000 	.word	0x40013000

08001264 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b08a      	sub	sp, #40	@ 0x28
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800126c:	f107 0314 	add.w	r3, r7, #20
 8001270:	2200      	movs	r2, #0
 8001272:	601a      	str	r2, [r3, #0]
 8001274:	605a      	str	r2, [r3, #4]
 8001276:	609a      	str	r2, [r3, #8]
 8001278:	60da      	str	r2, [r3, #12]
 800127a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4a25      	ldr	r2, [pc, #148]	@ (8001318 <HAL_SPI_MspInit+0xb4>)
 8001282:	4293      	cmp	r3, r2
 8001284:	d144      	bne.n	8001310 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001286:	4b25      	ldr	r3, [pc, #148]	@ (800131c <HAL_SPI_MspInit+0xb8>)
 8001288:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800128a:	4a24      	ldr	r2, [pc, #144]	@ (800131c <HAL_SPI_MspInit+0xb8>)
 800128c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001290:	6613      	str	r3, [r2, #96]	@ 0x60
 8001292:	4b22      	ldr	r3, [pc, #136]	@ (800131c <HAL_SPI_MspInit+0xb8>)
 8001294:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001296:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800129a:	613b      	str	r3, [r7, #16]
 800129c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800129e:	4b1f      	ldr	r3, [pc, #124]	@ (800131c <HAL_SPI_MspInit+0xb8>)
 80012a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012a2:	4a1e      	ldr	r2, [pc, #120]	@ (800131c <HAL_SPI_MspInit+0xb8>)
 80012a4:	f043 0301 	orr.w	r3, r3, #1
 80012a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012aa:	4b1c      	ldr	r3, [pc, #112]	@ (800131c <HAL_SPI_MspInit+0xb8>)
 80012ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012ae:	f003 0301 	and.w	r3, r3, #1
 80012b2:	60fb      	str	r3, [r7, #12]
 80012b4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012b6:	4b19      	ldr	r3, [pc, #100]	@ (800131c <HAL_SPI_MspInit+0xb8>)
 80012b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012ba:	4a18      	ldr	r2, [pc, #96]	@ (800131c <HAL_SPI_MspInit+0xb8>)
 80012bc:	f043 0302 	orr.w	r3, r3, #2
 80012c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012c2:	4b16      	ldr	r3, [pc, #88]	@ (800131c <HAL_SPI_MspInit+0xb8>)
 80012c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012c6:	f003 0302 	and.w	r3, r3, #2
 80012ca:	60bb      	str	r3, [r7, #8]
 80012cc:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80012ce:	2360      	movs	r3, #96	@ 0x60
 80012d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d2:	2302      	movs	r3, #2
 80012d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d6:	2300      	movs	r3, #0
 80012d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012da:	2300      	movs	r3, #0
 80012dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80012de:	2305      	movs	r3, #5
 80012e0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012e2:	f107 0314 	add.w	r3, r7, #20
 80012e6:	4619      	mov	r1, r3
 80012e8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012ec:	f000 ff48 	bl	8002180 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80012f0:	2320      	movs	r3, #32
 80012f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012f4:	2302      	movs	r3, #2
 80012f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f8:	2300      	movs	r3, #0
 80012fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012fc:	2300      	movs	r3, #0
 80012fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001300:	2305      	movs	r3, #5
 8001302:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001304:	f107 0314 	add.w	r3, r7, #20
 8001308:	4619      	mov	r1, r3
 800130a:	4805      	ldr	r0, [pc, #20]	@ (8001320 <HAL_SPI_MspInit+0xbc>)
 800130c:	f000 ff38 	bl	8002180 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001310:	bf00      	nop
 8001312:	3728      	adds	r7, #40	@ 0x28
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}
 8001318:	40013000 	.word	0x40013000
 800131c:	40021000 	.word	0x40021000
 8001320:	48000400 	.word	0x48000400

08001324 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b082      	sub	sp, #8
 8001328:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800132a:	4b0f      	ldr	r3, [pc, #60]	@ (8001368 <HAL_MspInit+0x44>)
 800132c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800132e:	4a0e      	ldr	r2, [pc, #56]	@ (8001368 <HAL_MspInit+0x44>)
 8001330:	f043 0301 	orr.w	r3, r3, #1
 8001334:	6613      	str	r3, [r2, #96]	@ 0x60
 8001336:	4b0c      	ldr	r3, [pc, #48]	@ (8001368 <HAL_MspInit+0x44>)
 8001338:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800133a:	f003 0301 	and.w	r3, r3, #1
 800133e:	607b      	str	r3, [r7, #4]
 8001340:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001342:	4b09      	ldr	r3, [pc, #36]	@ (8001368 <HAL_MspInit+0x44>)
 8001344:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001346:	4a08      	ldr	r2, [pc, #32]	@ (8001368 <HAL_MspInit+0x44>)
 8001348:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800134c:	6593      	str	r3, [r2, #88]	@ 0x58
 800134e:	4b06      	ldr	r3, [pc, #24]	@ (8001368 <HAL_MspInit+0x44>)
 8001350:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001352:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001356:	603b      	str	r3, [r7, #0]
 8001358:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800135a:	f001 fa81 	bl	8002860 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800135e:	bf00      	nop
 8001360:	3708      	adds	r7, #8
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	40021000 	.word	0x40021000

0800136c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001370:	bf00      	nop
 8001372:	e7fd      	b.n	8001370 <NMI_Handler+0x4>

08001374 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001378:	bf00      	nop
 800137a:	e7fd      	b.n	8001378 <HardFault_Handler+0x4>

0800137c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800137c:	b480      	push	{r7}
 800137e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001380:	bf00      	nop
 8001382:	e7fd      	b.n	8001380 <MemManage_Handler+0x4>

08001384 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001388:	bf00      	nop
 800138a:	e7fd      	b.n	8001388 <BusFault_Handler+0x4>

0800138c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001390:	bf00      	nop
 8001392:	e7fd      	b.n	8001390 <UsageFault_Handler+0x4>

08001394 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001394:	b480      	push	{r7}
 8001396:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001398:	bf00      	nop
 800139a:	46bd      	mov	sp, r7
 800139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a0:	4770      	bx	lr

080013a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013a2:	b480      	push	{r7}
 80013a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013a6:	bf00      	nop
 80013a8:	46bd      	mov	sp, r7
 80013aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ae:	4770      	bx	lr

080013b0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013b4:	bf00      	nop
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr

080013be <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013be:	b580      	push	{r7, lr}
 80013c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013c2:	f000 fdb9 	bl	8001f38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013c6:	bf00      	nop
 80013c8:	bd80      	pop	{r7, pc}
	...

080013cc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80013d0:	4b06      	ldr	r3, [pc, #24]	@ (80013ec <SystemInit+0x20>)
 80013d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80013d6:	4a05      	ldr	r2, [pc, #20]	@ (80013ec <SystemInit+0x20>)
 80013d8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80013dc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013e0:	bf00      	nop
 80013e2:	46bd      	mov	sp, r7
 80013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e8:	4770      	bx	lr
 80013ea:	bf00      	nop
 80013ec:	e000ed00 	.word	0xe000ed00

080013f0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim15;
TIM_HandleTypeDef htim16;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b088      	sub	sp, #32
 80013f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_HallSensor_InitTypeDef sConfig = {0};
 80013f6:	f107 0310 	add.w	r3, r7, #16
 80013fa:	2200      	movs	r2, #0
 80013fc:	601a      	str	r2, [r3, #0]
 80013fe:	605a      	str	r2, [r3, #4]
 8001400:	609a      	str	r2, [r3, #8]
 8001402:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001404:	1d3b      	adds	r3, r7, #4
 8001406:	2200      	movs	r2, #0
 8001408:	601a      	str	r2, [r3, #0]
 800140a:	605a      	str	r2, [r3, #4]
 800140c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800140e:	4b1e      	ldr	r3, [pc, #120]	@ (8001488 <MX_TIM1_Init+0x98>)
 8001410:	4a1e      	ldr	r2, [pc, #120]	@ (800148c <MX_TIM1_Init+0x9c>)
 8001412:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001414:	4b1c      	ldr	r3, [pc, #112]	@ (8001488 <MX_TIM1_Init+0x98>)
 8001416:	2200      	movs	r2, #0
 8001418:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800141a:	4b1b      	ldr	r3, [pc, #108]	@ (8001488 <MX_TIM1_Init+0x98>)
 800141c:	2200      	movs	r2, #0
 800141e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001420:	4b19      	ldr	r3, [pc, #100]	@ (8001488 <MX_TIM1_Init+0x98>)
 8001422:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001426:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001428:	4b17      	ldr	r3, [pc, #92]	@ (8001488 <MX_TIM1_Init+0x98>)
 800142a:	2200      	movs	r2, #0
 800142c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800142e:	4b16      	ldr	r3, [pc, #88]	@ (8001488 <MX_TIM1_Init+0x98>)
 8001430:	2200      	movs	r2, #0
 8001432:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001434:	4b14      	ldr	r3, [pc, #80]	@ (8001488 <MX_TIM1_Init+0x98>)
 8001436:	2200      	movs	r2, #0
 8001438:	619a      	str	r2, [r3, #24]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800143a:	2300      	movs	r3, #0
 800143c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800143e:	2300      	movs	r3, #0
 8001440:	617b      	str	r3, [r7, #20]
  sConfig.IC1Filter = 0;
 8001442:	2300      	movs	r3, #0
 8001444:	61bb      	str	r3, [r7, #24]
  sConfig.Commutation_Delay = 0;
 8001446:	2300      	movs	r3, #0
 8001448:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_HallSensor_Init(&htim1, &sConfig) != HAL_OK)
 800144a:	f107 0310 	add.w	r3, r7, #16
 800144e:	4619      	mov	r1, r3
 8001450:	480d      	ldr	r0, [pc, #52]	@ (8001488 <MX_TIM1_Init+0x98>)
 8001452:	f003 fb5e 	bl	8004b12 <HAL_TIMEx_HallSensor_Init>
 8001456:	4603      	mov	r3, r0
 8001458:	2b00      	cmp	r3, #0
 800145a:	d001      	beq.n	8001460 <MX_TIM1_Init+0x70>
  {
    Error_Handler();
 800145c:	f7ff febd 	bl	80011da <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 8001460:	2350      	movs	r3, #80	@ 0x50
 8001462:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001464:	2300      	movs	r3, #0
 8001466:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001468:	2300      	movs	r3, #0
 800146a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800146c:	1d3b      	adds	r3, r7, #4
 800146e:	4619      	mov	r1, r3
 8001470:	4805      	ldr	r0, [pc, #20]	@ (8001488 <MX_TIM1_Init+0x98>)
 8001472:	f003 fcb1 	bl	8004dd8 <HAL_TIMEx_MasterConfigSynchronization>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	d001      	beq.n	8001480 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800147c:	f7ff fead 	bl	80011da <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001480:	bf00      	nop
 8001482:	3720      	adds	r7, #32
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}
 8001488:	20000108 	.word	0x20000108
 800148c:	40012c00 	.word	0x40012c00

08001490 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b08c      	sub	sp, #48	@ 0x30
 8001494:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001496:	f107 030c 	add.w	r3, r7, #12
 800149a:	2224      	movs	r2, #36	@ 0x24
 800149c:	2100      	movs	r1, #0
 800149e:	4618      	mov	r0, r3
 80014a0:	f004 fd48 	bl	8005f34 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014a4:	463b      	mov	r3, r7
 80014a6:	2200      	movs	r2, #0
 80014a8:	601a      	str	r2, [r3, #0]
 80014aa:	605a      	str	r2, [r3, #4]
 80014ac:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80014ae:	4b21      	ldr	r3, [pc, #132]	@ (8001534 <MX_TIM3_Init+0xa4>)
 80014b0:	4a21      	ldr	r2, [pc, #132]	@ (8001538 <MX_TIM3_Init+0xa8>)
 80014b2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80014b4:	4b1f      	ldr	r3, [pc, #124]	@ (8001534 <MX_TIM3_Init+0xa4>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014ba:	4b1e      	ldr	r3, [pc, #120]	@ (8001534 <MX_TIM3_Init+0xa4>)
 80014bc:	2200      	movs	r2, #0
 80014be:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80014c0:	4b1c      	ldr	r3, [pc, #112]	@ (8001534 <MX_TIM3_Init+0xa4>)
 80014c2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80014c6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014c8:	4b1a      	ldr	r3, [pc, #104]	@ (8001534 <MX_TIM3_Init+0xa4>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014ce:	4b19      	ldr	r3, [pc, #100]	@ (8001534 <MX_TIM3_Init+0xa4>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80014d4:	2301      	movs	r3, #1
 80014d6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80014d8:	2300      	movs	r3, #0
 80014da:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80014dc:	2301      	movs	r3, #1
 80014de:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80014e0:	2300      	movs	r3, #0
 80014e2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80014e4:	2300      	movs	r3, #0
 80014e6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80014e8:	2300      	movs	r3, #0
 80014ea:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80014ec:	2301      	movs	r3, #1
 80014ee:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80014f0:	2300      	movs	r3, #0
 80014f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80014f4:	2300      	movs	r3, #0
 80014f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80014f8:	f107 030c 	add.w	r3, r7, #12
 80014fc:	4619      	mov	r1, r3
 80014fe:	480d      	ldr	r0, [pc, #52]	@ (8001534 <MX_TIM3_Init+0xa4>)
 8001500:	f002 fb98 	bl	8003c34 <HAL_TIM_Encoder_Init>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d001      	beq.n	800150e <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 800150a:	f7ff fe66 	bl	80011da <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800150e:	2300      	movs	r3, #0
 8001510:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001512:	2300      	movs	r3, #0
 8001514:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001516:	463b      	mov	r3, r7
 8001518:	4619      	mov	r1, r3
 800151a:	4806      	ldr	r0, [pc, #24]	@ (8001534 <MX_TIM3_Init+0xa4>)
 800151c:	f003 fc5c 	bl	8004dd8 <HAL_TIMEx_MasterConfigSynchronization>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d001      	beq.n	800152a <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8001526:	f7ff fe58 	bl	80011da <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800152a:	bf00      	nop
 800152c:	3730      	adds	r7, #48	@ 0x30
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	20000154 	.word	0x20000154
 8001538:	40000400 	.word	0x40000400

0800153c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b08c      	sub	sp, #48	@ 0x30
 8001540:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001542:	f107 030c 	add.w	r3, r7, #12
 8001546:	2224      	movs	r2, #36	@ 0x24
 8001548:	2100      	movs	r1, #0
 800154a:	4618      	mov	r0, r3
 800154c:	f004 fcf2 	bl	8005f34 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001550:	463b      	mov	r3, r7
 8001552:	2200      	movs	r2, #0
 8001554:	601a      	str	r2, [r3, #0]
 8001556:	605a      	str	r2, [r3, #4]
 8001558:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800155a:	4b21      	ldr	r3, [pc, #132]	@ (80015e0 <MX_TIM4_Init+0xa4>)
 800155c:	4a21      	ldr	r2, [pc, #132]	@ (80015e4 <MX_TIM4_Init+0xa8>)
 800155e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001560:	4b1f      	ldr	r3, [pc, #124]	@ (80015e0 <MX_TIM4_Init+0xa4>)
 8001562:	2200      	movs	r2, #0
 8001564:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001566:	4b1e      	ldr	r3, [pc, #120]	@ (80015e0 <MX_TIM4_Init+0xa4>)
 8001568:	2200      	movs	r2, #0
 800156a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800156c:	4b1c      	ldr	r3, [pc, #112]	@ (80015e0 <MX_TIM4_Init+0xa4>)
 800156e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001572:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001574:	4b1a      	ldr	r3, [pc, #104]	@ (80015e0 <MX_TIM4_Init+0xa4>)
 8001576:	2200      	movs	r2, #0
 8001578:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800157a:	4b19      	ldr	r3, [pc, #100]	@ (80015e0 <MX_TIM4_Init+0xa4>)
 800157c:	2200      	movs	r2, #0
 800157e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001580:	2301      	movs	r3, #1
 8001582:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001584:	2300      	movs	r3, #0
 8001586:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001588:	2301      	movs	r3, #1
 800158a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800158c:	2300      	movs	r3, #0
 800158e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001590:	2300      	movs	r3, #0
 8001592:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001594:	2300      	movs	r3, #0
 8001596:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001598:	2301      	movs	r3, #1
 800159a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800159c:	2300      	movs	r3, #0
 800159e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80015a0:	2300      	movs	r3, #0
 80015a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80015a4:	f107 030c 	add.w	r3, r7, #12
 80015a8:	4619      	mov	r1, r3
 80015aa:	480d      	ldr	r0, [pc, #52]	@ (80015e0 <MX_TIM4_Init+0xa4>)
 80015ac:	f002 fb42 	bl	8003c34 <HAL_TIM_Encoder_Init>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d001      	beq.n	80015ba <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 80015b6:	f7ff fe10 	bl	80011da <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015ba:	2300      	movs	r3, #0
 80015bc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015be:	2300      	movs	r3, #0
 80015c0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80015c2:	463b      	mov	r3, r7
 80015c4:	4619      	mov	r1, r3
 80015c6:	4806      	ldr	r0, [pc, #24]	@ (80015e0 <MX_TIM4_Init+0xa4>)
 80015c8:	f003 fc06 	bl	8004dd8 <HAL_TIMEx_MasterConfigSynchronization>
 80015cc:	4603      	mov	r3, r0
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d001      	beq.n	80015d6 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 80015d2:	f7ff fe02 	bl	80011da <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80015d6:	bf00      	nop
 80015d8:	3730      	adds	r7, #48	@ 0x30
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	200001a0 	.word	0x200001a0
 80015e4:	40000800 	.word	0x40000800

080015e8 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b098      	sub	sp, #96	@ 0x60
 80015ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015ee:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80015f2:	2200      	movs	r2, #0
 80015f4:	601a      	str	r2, [r3, #0]
 80015f6:	605a      	str	r2, [r3, #4]
 80015f8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015fa:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80015fe:	2200      	movs	r2, #0
 8001600:	601a      	str	r2, [r3, #0]
 8001602:	605a      	str	r2, [r3, #4]
 8001604:	609a      	str	r2, [r3, #8]
 8001606:	60da      	str	r2, [r3, #12]
 8001608:	611a      	str	r2, [r3, #16]
 800160a:	615a      	str	r2, [r3, #20]
 800160c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800160e:	1d3b      	adds	r3, r7, #4
 8001610:	2234      	movs	r2, #52	@ 0x34
 8001612:	2100      	movs	r1, #0
 8001614:	4618      	mov	r0, r3
 8001616:	f004 fc8d 	bl	8005f34 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800161a:	4b42      	ldr	r3, [pc, #264]	@ (8001724 <MX_TIM8_Init+0x13c>)
 800161c:	4a42      	ldr	r2, [pc, #264]	@ (8001728 <MX_TIM8_Init+0x140>)
 800161e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 170-1;
 8001620:	4b40      	ldr	r3, [pc, #256]	@ (8001724 <MX_TIM8_Init+0x13c>)
 8001622:	22a9      	movs	r2, #169	@ 0xa9
 8001624:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001626:	4b3f      	ldr	r3, [pc, #252]	@ (8001724 <MX_TIM8_Init+0x13c>)
 8001628:	2200      	movs	r2, #0
 800162a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 999;
 800162c:	4b3d      	ldr	r3, [pc, #244]	@ (8001724 <MX_TIM8_Init+0x13c>)
 800162e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001632:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001634:	4b3b      	ldr	r3, [pc, #236]	@ (8001724 <MX_TIM8_Init+0x13c>)
 8001636:	2200      	movs	r2, #0
 8001638:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800163a:	4b3a      	ldr	r3, [pc, #232]	@ (8001724 <MX_TIM8_Init+0x13c>)
 800163c:	2200      	movs	r2, #0
 800163e:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001640:	4b38      	ldr	r3, [pc, #224]	@ (8001724 <MX_TIM8_Init+0x13c>)
 8001642:	2200      	movs	r2, #0
 8001644:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001646:	4837      	ldr	r0, [pc, #220]	@ (8001724 <MX_TIM8_Init+0x13c>)
 8001648:	f002 f99c 	bl	8003984 <HAL_TIM_PWM_Init>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	d001      	beq.n	8001656 <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 8001652:	f7ff fdc2 	bl	80011da <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001656:	2300      	movs	r3, #0
 8001658:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800165a:	2300      	movs	r3, #0
 800165c:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800165e:	2300      	movs	r3, #0
 8001660:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001662:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001666:	4619      	mov	r1, r3
 8001668:	482e      	ldr	r0, [pc, #184]	@ (8001724 <MX_TIM8_Init+0x13c>)
 800166a:	f003 fbb5 	bl	8004dd8 <HAL_TIMEx_MasterConfigSynchronization>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d001      	beq.n	8001678 <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 8001674:	f7ff fdb1 	bl	80011da <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001678:	2360      	movs	r3, #96	@ 0x60
 800167a:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 499;
 800167c:	f240 13f3 	movw	r3, #499	@ 0x1f3
 8001680:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001682:	2300      	movs	r3, #0
 8001684:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001686:	2300      	movs	r3, #0
 8001688:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800168a:	2300      	movs	r3, #0
 800168c:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800168e:	2300      	movs	r3, #0
 8001690:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001692:	2300      	movs	r3, #0
 8001694:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001696:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800169a:	2200      	movs	r2, #0
 800169c:	4619      	mov	r1, r3
 800169e:	4821      	ldr	r0, [pc, #132]	@ (8001724 <MX_TIM8_Init+0x13c>)
 80016a0:	f002 fb6e 	bl	8003d80 <HAL_TIM_PWM_ConfigChannel>
 80016a4:	4603      	mov	r3, r0
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d001      	beq.n	80016ae <MX_TIM8_Init+0xc6>
  {
    Error_Handler();
 80016aa:	f7ff fd96 	bl	80011da <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 80016ae:	2300      	movs	r3, #0
 80016b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80016b2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80016b6:	2204      	movs	r2, #4
 80016b8:	4619      	mov	r1, r3
 80016ba:	481a      	ldr	r0, [pc, #104]	@ (8001724 <MX_TIM8_Init+0x13c>)
 80016bc:	f002 fb60 	bl	8003d80 <HAL_TIM_PWM_ConfigChannel>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d001      	beq.n	80016ca <MX_TIM8_Init+0xe2>
  {
    Error_Handler();
 80016c6:	f7ff fd88 	bl	80011da <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80016ca:	2300      	movs	r3, #0
 80016cc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80016ce:	2300      	movs	r3, #0
 80016d0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80016d2:	2300      	movs	r3, #0
 80016d4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80016d6:	2300      	movs	r3, #0
 80016d8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80016da:	2300      	movs	r3, #0
 80016dc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80016de:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80016e2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80016e4:	2300      	movs	r3, #0
 80016e6:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80016e8:	2300      	movs	r3, #0
 80016ea:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80016ec:	2300      	movs	r3, #0
 80016ee:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80016f0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80016f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80016f6:	2300      	movs	r3, #0
 80016f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80016fa:	2300      	movs	r3, #0
 80016fc:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80016fe:	2300      	movs	r3, #0
 8001700:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001702:	1d3b      	adds	r3, r7, #4
 8001704:	4619      	mov	r1, r3
 8001706:	4807      	ldr	r0, [pc, #28]	@ (8001724 <MX_TIM8_Init+0x13c>)
 8001708:	f003 fbe8 	bl	8004edc <HAL_TIMEx_ConfigBreakDeadTime>
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	d001      	beq.n	8001716 <MX_TIM8_Init+0x12e>
  {
    Error_Handler();
 8001712:	f7ff fd62 	bl	80011da <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001716:	4803      	ldr	r0, [pc, #12]	@ (8001724 <MX_TIM8_Init+0x13c>)
 8001718:	f000 fa50 	bl	8001bbc <HAL_TIM_MspPostInit>

}
 800171c:	bf00      	nop
 800171e:	3760      	adds	r7, #96	@ 0x60
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}
 8001724:	200001ec 	.word	0x200001ec
 8001728:	40013400 	.word	0x40013400

0800172c <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b09c      	sub	sp, #112	@ 0x70
 8001730:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001732:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001736:	2200      	movs	r2, #0
 8001738:	601a      	str	r2, [r3, #0]
 800173a:	605a      	str	r2, [r3, #4]
 800173c:	609a      	str	r2, [r3, #8]
 800173e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001740:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001744:	2200      	movs	r2, #0
 8001746:	601a      	str	r2, [r3, #0]
 8001748:	605a      	str	r2, [r3, #4]
 800174a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800174c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001750:	2200      	movs	r2, #0
 8001752:	601a      	str	r2, [r3, #0]
 8001754:	605a      	str	r2, [r3, #4]
 8001756:	609a      	str	r2, [r3, #8]
 8001758:	60da      	str	r2, [r3, #12]
 800175a:	611a      	str	r2, [r3, #16]
 800175c:	615a      	str	r2, [r3, #20]
 800175e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001760:	1d3b      	adds	r3, r7, #4
 8001762:	2234      	movs	r2, #52	@ 0x34
 8001764:	2100      	movs	r1, #0
 8001766:	4618      	mov	r0, r3
 8001768:	f004 fbe4 	bl	8005f34 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 800176c:	4b3f      	ldr	r3, [pc, #252]	@ (800186c <MX_TIM15_Init+0x140>)
 800176e:	4a40      	ldr	r2, [pc, #256]	@ (8001870 <MX_TIM15_Init+0x144>)
 8001770:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8001772:	4b3e      	ldr	r3, [pc, #248]	@ (800186c <MX_TIM15_Init+0x140>)
 8001774:	2200      	movs	r2, #0
 8001776:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001778:	4b3c      	ldr	r3, [pc, #240]	@ (800186c <MX_TIM15_Init+0x140>)
 800177a:	2200      	movs	r2, #0
 800177c:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 800177e:	4b3b      	ldr	r3, [pc, #236]	@ (800186c <MX_TIM15_Init+0x140>)
 8001780:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001784:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001786:	4b39      	ldr	r3, [pc, #228]	@ (800186c <MX_TIM15_Init+0x140>)
 8001788:	2200      	movs	r2, #0
 800178a:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 800178c:	4b37      	ldr	r3, [pc, #220]	@ (800186c <MX_TIM15_Init+0x140>)
 800178e:	2200      	movs	r2, #0
 8001790:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001792:	4b36      	ldr	r3, [pc, #216]	@ (800186c <MX_TIM15_Init+0x140>)
 8001794:	2200      	movs	r2, #0
 8001796:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8001798:	4834      	ldr	r0, [pc, #208]	@ (800186c <MX_TIM15_Init+0x140>)
 800179a:	f002 f83a 	bl	8003812 <HAL_TIM_Base_Init>
 800179e:	4603      	mov	r3, r0
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d001      	beq.n	80017a8 <MX_TIM15_Init+0x7c>
  {
    Error_Handler();
 80017a4:	f7ff fd19 	bl	80011da <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017a8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80017ac:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 80017ae:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80017b2:	4619      	mov	r1, r3
 80017b4:	482d      	ldr	r0, [pc, #180]	@ (800186c <MX_TIM15_Init+0x140>)
 80017b6:	f002 fbf7 	bl	8003fa8 <HAL_TIM_ConfigClockSource>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d001      	beq.n	80017c4 <MX_TIM15_Init+0x98>
  {
    Error_Handler();
 80017c0:	f7ff fd0b 	bl	80011da <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 80017c4:	4829      	ldr	r0, [pc, #164]	@ (800186c <MX_TIM15_Init+0x140>)
 80017c6:	f002 f8dd 	bl	8003984 <HAL_TIM_PWM_Init>
 80017ca:	4603      	mov	r3, r0
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d001      	beq.n	80017d4 <MX_TIM15_Init+0xa8>
  {
    Error_Handler();
 80017d0:	f7ff fd03 	bl	80011da <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017d4:	2300      	movs	r3, #0
 80017d6:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017d8:	2300      	movs	r3, #0
 80017da:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80017dc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80017e0:	4619      	mov	r1, r3
 80017e2:	4822      	ldr	r0, [pc, #136]	@ (800186c <MX_TIM15_Init+0x140>)
 80017e4:	f003 faf8 	bl	8004dd8 <HAL_TIMEx_MasterConfigSynchronization>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d001      	beq.n	80017f2 <MX_TIM15_Init+0xc6>
  {
    Error_Handler();
 80017ee:	f7ff fcf4 	bl	80011da <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017f2:	2360      	movs	r3, #96	@ 0x60
 80017f4:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 80017f6:	2300      	movs	r3, #0
 80017f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017fa:	2300      	movs	r3, #0
 80017fc:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80017fe:	2300      	movs	r3, #0
 8001800:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001802:	2300      	movs	r3, #0
 8001804:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001806:	2300      	movs	r3, #0
 8001808:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800180a:	2300      	movs	r3, #0
 800180c:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800180e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001812:	2200      	movs	r2, #0
 8001814:	4619      	mov	r1, r3
 8001816:	4815      	ldr	r0, [pc, #84]	@ (800186c <MX_TIM15_Init+0x140>)
 8001818:	f002 fab2 	bl	8003d80 <HAL_TIM_PWM_ConfigChannel>
 800181c:	4603      	mov	r3, r0
 800181e:	2b00      	cmp	r3, #0
 8001820:	d001      	beq.n	8001826 <MX_TIM15_Init+0xfa>
  {
    Error_Handler();
 8001822:	f7ff fcda 	bl	80011da <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001826:	2300      	movs	r3, #0
 8001828:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800182a:	2300      	movs	r3, #0
 800182c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800182e:	2300      	movs	r3, #0
 8001830:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001832:	2300      	movs	r3, #0
 8001834:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001836:	2300      	movs	r3, #0
 8001838:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800183a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800183e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001840:	2300      	movs	r3, #0
 8001842:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001844:	2300      	movs	r3, #0
 8001846:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8001848:	1d3b      	adds	r3, r7, #4
 800184a:	4619      	mov	r1, r3
 800184c:	4807      	ldr	r0, [pc, #28]	@ (800186c <MX_TIM15_Init+0x140>)
 800184e:	f003 fb45 	bl	8004edc <HAL_TIMEx_ConfigBreakDeadTime>
 8001852:	4603      	mov	r3, r0
 8001854:	2b00      	cmp	r3, #0
 8001856:	d001      	beq.n	800185c <MX_TIM15_Init+0x130>
  {
    Error_Handler();
 8001858:	f7ff fcbf 	bl	80011da <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 800185c:	4803      	ldr	r0, [pc, #12]	@ (800186c <MX_TIM15_Init+0x140>)
 800185e:	f000 f9ad 	bl	8001bbc <HAL_TIM_MspPostInit>

}
 8001862:	bf00      	nop
 8001864:	3770      	adds	r7, #112	@ 0x70
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	20000238 	.word	0x20000238
 8001870:	40014000 	.word	0x40014000

08001874 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b094      	sub	sp, #80	@ 0x50
 8001878:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800187a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800187e:	2200      	movs	r2, #0
 8001880:	601a      	str	r2, [r3, #0]
 8001882:	605a      	str	r2, [r3, #4]
 8001884:	609a      	str	r2, [r3, #8]
 8001886:	60da      	str	r2, [r3, #12]
 8001888:	611a      	str	r2, [r3, #16]
 800188a:	615a      	str	r2, [r3, #20]
 800188c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800188e:	463b      	mov	r3, r7
 8001890:	2234      	movs	r2, #52	@ 0x34
 8001892:	2100      	movs	r1, #0
 8001894:	4618      	mov	r0, r3
 8001896:	f004 fb4d 	bl	8005f34 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800189a:	4b31      	ldr	r3, [pc, #196]	@ (8001960 <MX_TIM16_Init+0xec>)
 800189c:	4a31      	ldr	r2, [pc, #196]	@ (8001964 <MX_TIM16_Init+0xf0>)
 800189e:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 170 - 1;
 80018a0:	4b2f      	ldr	r3, [pc, #188]	@ (8001960 <MX_TIM16_Init+0xec>)
 80018a2:	22a9      	movs	r2, #169	@ 0xa9
 80018a4:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018a6:	4b2e      	ldr	r3, [pc, #184]	@ (8001960 <MX_TIM16_Init+0xec>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 999;
 80018ac:	4b2c      	ldr	r3, [pc, #176]	@ (8001960 <MX_TIM16_Init+0xec>)
 80018ae:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80018b2:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018b4:	4b2a      	ldr	r3, [pc, #168]	@ (8001960 <MX_TIM16_Init+0xec>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80018ba:	4b29      	ldr	r3, [pc, #164]	@ (8001960 <MX_TIM16_Init+0xec>)
 80018bc:	2200      	movs	r2, #0
 80018be:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018c0:	4b27      	ldr	r3, [pc, #156]	@ (8001960 <MX_TIM16_Init+0xec>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80018c6:	4826      	ldr	r0, [pc, #152]	@ (8001960 <MX_TIM16_Init+0xec>)
 80018c8:	f001 ffa3 	bl	8003812 <HAL_TIM_Base_Init>
 80018cc:	4603      	mov	r3, r0
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d001      	beq.n	80018d6 <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 80018d2:	f7ff fc82 	bl	80011da <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 80018d6:	4822      	ldr	r0, [pc, #136]	@ (8001960 <MX_TIM16_Init+0xec>)
 80018d8:	f002 f854 	bl	8003984 <HAL_TIM_PWM_Init>
 80018dc:	4603      	mov	r3, r0
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d001      	beq.n	80018e6 <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 80018e2:	f7ff fc7a 	bl	80011da <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018e6:	2360      	movs	r3, #96	@ 0x60
 80018e8:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.Pulse = 499;
 80018ea:	f240 13f3 	movw	r3, #499	@ 0x1f3
 80018ee:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018f0:	2300      	movs	r3, #0
 80018f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80018f4:	2300      	movs	r3, #0
 80018f6:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018f8:	2300      	movs	r3, #0
 80018fa:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80018fc:	2300      	movs	r3, #0
 80018fe:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001900:	2300      	movs	r3, #0
 8001902:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001904:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001908:	2200      	movs	r2, #0
 800190a:	4619      	mov	r1, r3
 800190c:	4814      	ldr	r0, [pc, #80]	@ (8001960 <MX_TIM16_Init+0xec>)
 800190e:	f002 fa37 	bl	8003d80 <HAL_TIM_PWM_ConfigChannel>
 8001912:	4603      	mov	r3, r0
 8001914:	2b00      	cmp	r3, #0
 8001916:	d001      	beq.n	800191c <MX_TIM16_Init+0xa8>
  {
    Error_Handler();
 8001918:	f7ff fc5f 	bl	80011da <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800191c:	2300      	movs	r3, #0
 800191e:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001920:	2300      	movs	r3, #0
 8001922:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001924:	2300      	movs	r3, #0
 8001926:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001928:	2300      	movs	r3, #0
 800192a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800192c:	2300      	movs	r3, #0
 800192e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001930:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001934:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001936:	2300      	movs	r3, #0
 8001938:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800193a:	2300      	movs	r3, #0
 800193c:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 800193e:	463b      	mov	r3, r7
 8001940:	4619      	mov	r1, r3
 8001942:	4807      	ldr	r0, [pc, #28]	@ (8001960 <MX_TIM16_Init+0xec>)
 8001944:	f003 faca 	bl	8004edc <HAL_TIMEx_ConfigBreakDeadTime>
 8001948:	4603      	mov	r3, r0
 800194a:	2b00      	cmp	r3, #0
 800194c:	d001      	beq.n	8001952 <MX_TIM16_Init+0xde>
  {
    Error_Handler();
 800194e:	f7ff fc44 	bl	80011da <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8001952:	4803      	ldr	r0, [pc, #12]	@ (8001960 <MX_TIM16_Init+0xec>)
 8001954:	f000 f932 	bl	8001bbc <HAL_TIM_MspPostInit>

}
 8001958:	bf00      	nop
 800195a:	3750      	adds	r7, #80	@ 0x50
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}
 8001960:	20000284 	.word	0x20000284
 8001964:	40014400 	.word	0x40014400

08001968 <HAL_TIMEx_HallSensor_MspInit>:

void HAL_TIMEx_HallSensor_MspInit(TIM_HandleTypeDef* timex_hallsensorHandle)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b08a      	sub	sp, #40	@ 0x28
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001970:	f107 0314 	add.w	r3, r7, #20
 8001974:	2200      	movs	r2, #0
 8001976:	601a      	str	r2, [r3, #0]
 8001978:	605a      	str	r2, [r3, #4]
 800197a:	609a      	str	r2, [r3, #8]
 800197c:	60da      	str	r2, [r3, #12]
 800197e:	611a      	str	r2, [r3, #16]
  if(timex_hallsensorHandle->Instance==TIM1)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4a18      	ldr	r2, [pc, #96]	@ (80019e8 <HAL_TIMEx_HallSensor_MspInit+0x80>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d129      	bne.n	80019de <HAL_TIMEx_HallSensor_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800198a:	4b18      	ldr	r3, [pc, #96]	@ (80019ec <HAL_TIMEx_HallSensor_MspInit+0x84>)
 800198c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800198e:	4a17      	ldr	r2, [pc, #92]	@ (80019ec <HAL_TIMEx_HallSensor_MspInit+0x84>)
 8001990:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001994:	6613      	str	r3, [r2, #96]	@ 0x60
 8001996:	4b15      	ldr	r3, [pc, #84]	@ (80019ec <HAL_TIMEx_HallSensor_MspInit+0x84>)
 8001998:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800199a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800199e:	613b      	str	r3, [r7, #16]
 80019a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019a2:	4b12      	ldr	r3, [pc, #72]	@ (80019ec <HAL_TIMEx_HallSensor_MspInit+0x84>)
 80019a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019a6:	4a11      	ldr	r2, [pc, #68]	@ (80019ec <HAL_TIMEx_HallSensor_MspInit+0x84>)
 80019a8:	f043 0301 	orr.w	r3, r3, #1
 80019ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80019ae:	4b0f      	ldr	r3, [pc, #60]	@ (80019ec <HAL_TIMEx_HallSensor_MspInit+0x84>)
 80019b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019b2:	f003 0301 	and.w	r3, r3, #1
 80019b6:	60fb      	str	r3, [r7, #12]
 80019b8:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 80019ba:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 80019be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019c0:	2302      	movs	r3, #2
 80019c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c4:	2300      	movs	r3, #0
 80019c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019c8:	2300      	movs	r3, #0
 80019ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80019cc:	2306      	movs	r3, #6
 80019ce:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019d0:	f107 0314 	add.w	r3, r7, #20
 80019d4:	4619      	mov	r1, r3
 80019d6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80019da:	f000 fbd1 	bl	8002180 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80019de:	bf00      	nop
 80019e0:	3728      	adds	r7, #40	@ 0x28
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	40012c00 	.word	0x40012c00
 80019ec:	40021000 	.word	0x40021000

080019f0 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b08c      	sub	sp, #48	@ 0x30
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019f8:	f107 031c 	add.w	r3, r7, #28
 80019fc:	2200      	movs	r2, #0
 80019fe:	601a      	str	r2, [r3, #0]
 8001a00:	605a      	str	r2, [r3, #4]
 8001a02:	609a      	str	r2, [r3, #8]
 8001a04:	60da      	str	r2, [r3, #12]
 8001a06:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4a3d      	ldr	r2, [pc, #244]	@ (8001b04 <HAL_TIM_Encoder_MspInit+0x114>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d145      	bne.n	8001a9e <HAL_TIM_Encoder_MspInit+0xae>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001a12:	4b3d      	ldr	r3, [pc, #244]	@ (8001b08 <HAL_TIM_Encoder_MspInit+0x118>)
 8001a14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a16:	4a3c      	ldr	r2, [pc, #240]	@ (8001b08 <HAL_TIM_Encoder_MspInit+0x118>)
 8001a18:	f043 0302 	orr.w	r3, r3, #2
 8001a1c:	6593      	str	r3, [r2, #88]	@ 0x58
 8001a1e:	4b3a      	ldr	r3, [pc, #232]	@ (8001b08 <HAL_TIM_Encoder_MspInit+0x118>)
 8001a20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a22:	f003 0302 	and.w	r3, r3, #2
 8001a26:	61bb      	str	r3, [r7, #24]
 8001a28:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a2a:	4b37      	ldr	r3, [pc, #220]	@ (8001b08 <HAL_TIM_Encoder_MspInit+0x118>)
 8001a2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a2e:	4a36      	ldr	r2, [pc, #216]	@ (8001b08 <HAL_TIM_Encoder_MspInit+0x118>)
 8001a30:	f043 0301 	orr.w	r3, r3, #1
 8001a34:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a36:	4b34      	ldr	r3, [pc, #208]	@ (8001b08 <HAL_TIM_Encoder_MspInit+0x118>)
 8001a38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a3a:	f003 0301 	and.w	r3, r3, #1
 8001a3e:	617b      	str	r3, [r7, #20]
 8001a40:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a42:	4b31      	ldr	r3, [pc, #196]	@ (8001b08 <HAL_TIM_Encoder_MspInit+0x118>)
 8001a44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a46:	4a30      	ldr	r2, [pc, #192]	@ (8001b08 <HAL_TIM_Encoder_MspInit+0x118>)
 8001a48:	f043 0302 	orr.w	r3, r3, #2
 8001a4c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a4e:	4b2e      	ldr	r3, [pc, #184]	@ (8001b08 <HAL_TIM_Encoder_MspInit+0x118>)
 8001a50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a52:	f003 0302 	and.w	r3, r3, #2
 8001a56:	613b      	str	r3, [r7, #16]
 8001a58:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PA4     ------> TIM3_CH2
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001a5a:	2310      	movs	r3, #16
 8001a5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a5e:	2302      	movs	r3, #2
 8001a60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a62:	2300      	movs	r3, #0
 8001a64:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a66:	2300      	movs	r3, #0
 8001a68:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001a6a:	2302      	movs	r3, #2
 8001a6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a6e:	f107 031c 	add.w	r3, r7, #28
 8001a72:	4619      	mov	r1, r3
 8001a74:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a78:	f000 fb82 	bl	8002180 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001a7c:	2310      	movs	r3, #16
 8001a7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a80:	2302      	movs	r3, #2
 8001a82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a84:	2300      	movs	r3, #0
 8001a86:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001a8c:	2302      	movs	r3, #2
 8001a8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a90:	f107 031c 	add.w	r3, r7, #28
 8001a94:	4619      	mov	r1, r3
 8001a96:	481d      	ldr	r0, [pc, #116]	@ (8001b0c <HAL_TIM_Encoder_MspInit+0x11c>)
 8001a98:	f000 fb72 	bl	8002180 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001a9c:	e02e      	b.n	8001afc <HAL_TIM_Encoder_MspInit+0x10c>
  else if(tim_encoderHandle->Instance==TIM4)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4a1b      	ldr	r2, [pc, #108]	@ (8001b10 <HAL_TIM_Encoder_MspInit+0x120>)
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d129      	bne.n	8001afc <HAL_TIM_Encoder_MspInit+0x10c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001aa8:	4b17      	ldr	r3, [pc, #92]	@ (8001b08 <HAL_TIM_Encoder_MspInit+0x118>)
 8001aaa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001aac:	4a16      	ldr	r2, [pc, #88]	@ (8001b08 <HAL_TIM_Encoder_MspInit+0x118>)
 8001aae:	f043 0304 	orr.w	r3, r3, #4
 8001ab2:	6593      	str	r3, [r2, #88]	@ 0x58
 8001ab4:	4b14      	ldr	r3, [pc, #80]	@ (8001b08 <HAL_TIM_Encoder_MspInit+0x118>)
 8001ab6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ab8:	f003 0304 	and.w	r3, r3, #4
 8001abc:	60fb      	str	r3, [r7, #12]
 8001abe:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ac0:	4b11      	ldr	r3, [pc, #68]	@ (8001b08 <HAL_TIM_Encoder_MspInit+0x118>)
 8001ac2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ac4:	4a10      	ldr	r2, [pc, #64]	@ (8001b08 <HAL_TIM_Encoder_MspInit+0x118>)
 8001ac6:	f043 0301 	orr.w	r3, r3, #1
 8001aca:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001acc:	4b0e      	ldr	r3, [pc, #56]	@ (8001b08 <HAL_TIM_Encoder_MspInit+0x118>)
 8001ace:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ad0:	f003 0301 	and.w	r3, r3, #1
 8001ad4:	60bb      	str	r3, [r7, #8]
 8001ad6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001ad8:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001adc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ade:	2302      	movs	r3, #2
 8001ae0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8001aea:	230a      	movs	r3, #10
 8001aec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aee:	f107 031c 	add.w	r3, r7, #28
 8001af2:	4619      	mov	r1, r3
 8001af4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001af8:	f000 fb42 	bl	8002180 <HAL_GPIO_Init>
}
 8001afc:	bf00      	nop
 8001afe:	3730      	adds	r7, #48	@ 0x30
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}
 8001b04:	40000400 	.word	0x40000400
 8001b08:	40021000 	.word	0x40021000
 8001b0c:	48000400 	.word	0x48000400
 8001b10:	40000800 	.word	0x40000800

08001b14 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001b14:	b480      	push	{r7}
 8001b16:	b085      	sub	sp, #20
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM8)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a0a      	ldr	r2, [pc, #40]	@ (8001b4c <HAL_TIM_PWM_MspInit+0x38>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d10b      	bne.n	8001b3e <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* TIM8 clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001b26:	4b0a      	ldr	r3, [pc, #40]	@ (8001b50 <HAL_TIM_PWM_MspInit+0x3c>)
 8001b28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b2a:	4a09      	ldr	r2, [pc, #36]	@ (8001b50 <HAL_TIM_PWM_MspInit+0x3c>)
 8001b2c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001b30:	6613      	str	r3, [r2, #96]	@ 0x60
 8001b32:	4b07      	ldr	r3, [pc, #28]	@ (8001b50 <HAL_TIM_PWM_MspInit+0x3c>)
 8001b34:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b36:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001b3a:	60fb      	str	r3, [r7, #12]
 8001b3c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8001b3e:	bf00      	nop
 8001b40:	3714      	adds	r7, #20
 8001b42:	46bd      	mov	sp, r7
 8001b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b48:	4770      	bx	lr
 8001b4a:	bf00      	nop
 8001b4c:	40013400 	.word	0x40013400
 8001b50:	40021000 	.word	0x40021000

08001b54 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b085      	sub	sp, #20
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM15)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a13      	ldr	r2, [pc, #76]	@ (8001bb0 <HAL_TIM_Base_MspInit+0x5c>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d10c      	bne.n	8001b80 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM15_MspInit 0 */

  /* USER CODE END TIM15_MspInit 0 */
    /* TIM15 clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 8001b66:	4b13      	ldr	r3, [pc, #76]	@ (8001bb4 <HAL_TIM_Base_MspInit+0x60>)
 8001b68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b6a:	4a12      	ldr	r2, [pc, #72]	@ (8001bb4 <HAL_TIM_Base_MspInit+0x60>)
 8001b6c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b70:	6613      	str	r3, [r2, #96]	@ 0x60
 8001b72:	4b10      	ldr	r3, [pc, #64]	@ (8001bb4 <HAL_TIM_Base_MspInit+0x60>)
 8001b74:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b76:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b7a:	60fb      	str	r3, [r7, #12]
 8001b7c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM16_CLK_ENABLE();
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 8001b7e:	e010      	b.n	8001ba2 <HAL_TIM_Base_MspInit+0x4e>
  else if(tim_baseHandle->Instance==TIM16)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a0c      	ldr	r2, [pc, #48]	@ (8001bb8 <HAL_TIM_Base_MspInit+0x64>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d10b      	bne.n	8001ba2 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001b8a:	4b0a      	ldr	r3, [pc, #40]	@ (8001bb4 <HAL_TIM_Base_MspInit+0x60>)
 8001b8c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b8e:	4a09      	ldr	r2, [pc, #36]	@ (8001bb4 <HAL_TIM_Base_MspInit+0x60>)
 8001b90:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b94:	6613      	str	r3, [r2, #96]	@ 0x60
 8001b96:	4b07      	ldr	r3, [pc, #28]	@ (8001bb4 <HAL_TIM_Base_MspInit+0x60>)
 8001b98:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b9e:	60bb      	str	r3, [r7, #8]
 8001ba0:	68bb      	ldr	r3, [r7, #8]
}
 8001ba2:	bf00      	nop
 8001ba4:	3714      	adds	r7, #20
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bac:	4770      	bx	lr
 8001bae:	bf00      	nop
 8001bb0:	40014000 	.word	0x40014000
 8001bb4:	40021000 	.word	0x40021000
 8001bb8:	40014400 	.word	0x40014400

08001bbc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b08c      	sub	sp, #48	@ 0x30
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bc4:	f107 031c 	add.w	r3, r7, #28
 8001bc8:	2200      	movs	r2, #0
 8001bca:	601a      	str	r2, [r3, #0]
 8001bcc:	605a      	str	r2, [r3, #4]
 8001bce:	609a      	str	r2, [r3, #8]
 8001bd0:	60da      	str	r2, [r3, #12]
 8001bd2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM8)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a42      	ldr	r2, [pc, #264]	@ (8001ce4 <HAL_TIM_MspPostInit+0x128>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d139      	bne.n	8001c52 <HAL_TIM_MspPostInit+0x96>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bde:	4b42      	ldr	r3, [pc, #264]	@ (8001ce8 <HAL_TIM_MspPostInit+0x12c>)
 8001be0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001be2:	4a41      	ldr	r2, [pc, #260]	@ (8001ce8 <HAL_TIM_MspPostInit+0x12c>)
 8001be4:	f043 0301 	orr.w	r3, r3, #1
 8001be8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001bea:	4b3f      	ldr	r3, [pc, #252]	@ (8001ce8 <HAL_TIM_MspPostInit+0x12c>)
 8001bec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bee:	f003 0301 	and.w	r3, r3, #1
 8001bf2:	61bb      	str	r3, [r7, #24]
 8001bf4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bf6:	4b3c      	ldr	r3, [pc, #240]	@ (8001ce8 <HAL_TIM_MspPostInit+0x12c>)
 8001bf8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bfa:	4a3b      	ldr	r2, [pc, #236]	@ (8001ce8 <HAL_TIM_MspPostInit+0x12c>)
 8001bfc:	f043 0302 	orr.w	r3, r3, #2
 8001c00:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c02:	4b39      	ldr	r3, [pc, #228]	@ (8001ce8 <HAL_TIM_MspPostInit+0x12c>)
 8001c04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c06:	f003 0302 	and.w	r3, r3, #2
 8001c0a:	617b      	str	r3, [r7, #20]
 8001c0c:	697b      	ldr	r3, [r7, #20]
    /**TIM8 GPIO Configuration
    PA7     ------> TIM8_CH1N
    PB0     ------> TIM8_CH2N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001c0e:	2380      	movs	r3, #128	@ 0x80
 8001c10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c12:	2302      	movs	r3, #2
 8001c14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c16:	2300      	movs	r3, #0
 8001c18:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8001c1e:	2304      	movs	r3, #4
 8001c20:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c22:	f107 031c 	add.w	r3, r7, #28
 8001c26:	4619      	mov	r1, r3
 8001c28:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c2c:	f000 faa8 	bl	8002180 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001c30:	2301      	movs	r3, #1
 8001c32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c34:	2302      	movs	r3, #2
 8001c36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8001c40:	2304      	movs	r3, #4
 8001c42:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c44:	f107 031c 	add.w	r3, r7, #28
 8001c48:	4619      	mov	r1, r3
 8001c4a:	4828      	ldr	r0, [pc, #160]	@ (8001cec <HAL_TIM_MspPostInit+0x130>)
 8001c4c:	f000 fa98 	bl	8002180 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 8001c50:	e043      	b.n	8001cda <HAL_TIM_MspPostInit+0x11e>
  else if(timHandle->Instance==TIM15)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4a26      	ldr	r2, [pc, #152]	@ (8001cf0 <HAL_TIM_MspPostInit+0x134>)
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d11d      	bne.n	8001c98 <HAL_TIM_MspPostInit+0xdc>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c5c:	4b22      	ldr	r3, [pc, #136]	@ (8001ce8 <HAL_TIM_MspPostInit+0x12c>)
 8001c5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c60:	4a21      	ldr	r2, [pc, #132]	@ (8001ce8 <HAL_TIM_MspPostInit+0x12c>)
 8001c62:	f043 0301 	orr.w	r3, r3, #1
 8001c66:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c68:	4b1f      	ldr	r3, [pc, #124]	@ (8001ce8 <HAL_TIM_MspPostInit+0x12c>)
 8001c6a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c6c:	f003 0301 	and.w	r3, r3, #1
 8001c70:	613b      	str	r3, [r7, #16]
 8001c72:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001c74:	2302      	movs	r3, #2
 8001c76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c78:	2302      	movs	r3, #2
 8001c7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c80:	2300      	movs	r3, #0
 8001c82:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM15;
 8001c84:	2309      	movs	r3, #9
 8001c86:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c88:	f107 031c 	add.w	r3, r7, #28
 8001c8c:	4619      	mov	r1, r3
 8001c8e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c92:	f000 fa75 	bl	8002180 <HAL_GPIO_Init>
}
 8001c96:	e020      	b.n	8001cda <HAL_TIM_MspPostInit+0x11e>
  else if(timHandle->Instance==TIM16)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a15      	ldr	r2, [pc, #84]	@ (8001cf4 <HAL_TIM_MspPostInit+0x138>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d11b      	bne.n	8001cda <HAL_TIM_MspPostInit+0x11e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ca2:	4b11      	ldr	r3, [pc, #68]	@ (8001ce8 <HAL_TIM_MspPostInit+0x12c>)
 8001ca4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ca6:	4a10      	ldr	r2, [pc, #64]	@ (8001ce8 <HAL_TIM_MspPostInit+0x12c>)
 8001ca8:	f043 0302 	orr.w	r3, r3, #2
 8001cac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001cae:	4b0e      	ldr	r3, [pc, #56]	@ (8001ce8 <HAL_TIM_MspPostInit+0x12c>)
 8001cb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cb2:	f003 0302 	and.w	r3, r3, #2
 8001cb6:	60fb      	str	r3, [r7, #12]
 8001cb8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001cba:	2340      	movs	r3, #64	@ 0x40
 8001cbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cbe:	2302      	movs	r3, #2
 8001cc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cce:	f107 031c 	add.w	r3, r7, #28
 8001cd2:	4619      	mov	r1, r3
 8001cd4:	4805      	ldr	r0, [pc, #20]	@ (8001cec <HAL_TIM_MspPostInit+0x130>)
 8001cd6:	f000 fa53 	bl	8002180 <HAL_GPIO_Init>
}
 8001cda:	bf00      	nop
 8001cdc:	3730      	adds	r7, #48	@ 0x30
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	40013400 	.word	0x40013400
 8001ce8:	40021000 	.word	0x40021000
 8001cec:	48000400 	.word	0x48000400
 8001cf0:	40014000 	.word	0x40014000
 8001cf4:	40014400 	.word	0x40014400

08001cf8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001cfc:	4b22      	ldr	r3, [pc, #136]	@ (8001d88 <MX_USART2_UART_Init+0x90>)
 8001cfe:	4a23      	ldr	r2, [pc, #140]	@ (8001d8c <MX_USART2_UART_Init+0x94>)
 8001d00:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001d02:	4b21      	ldr	r3, [pc, #132]	@ (8001d88 <MX_USART2_UART_Init+0x90>)
 8001d04:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001d08:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001d0a:	4b1f      	ldr	r3, [pc, #124]	@ (8001d88 <MX_USART2_UART_Init+0x90>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001d10:	4b1d      	ldr	r3, [pc, #116]	@ (8001d88 <MX_USART2_UART_Init+0x90>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001d16:	4b1c      	ldr	r3, [pc, #112]	@ (8001d88 <MX_USART2_UART_Init+0x90>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001d1c:	4b1a      	ldr	r3, [pc, #104]	@ (8001d88 <MX_USART2_UART_Init+0x90>)
 8001d1e:	220c      	movs	r2, #12
 8001d20:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d22:	4b19      	ldr	r3, [pc, #100]	@ (8001d88 <MX_USART2_UART_Init+0x90>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d28:	4b17      	ldr	r3, [pc, #92]	@ (8001d88 <MX_USART2_UART_Init+0x90>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d2e:	4b16      	ldr	r3, [pc, #88]	@ (8001d88 <MX_USART2_UART_Init+0x90>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001d34:	4b14      	ldr	r3, [pc, #80]	@ (8001d88 <MX_USART2_UART_Init+0x90>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d3a:	4b13      	ldr	r3, [pc, #76]	@ (8001d88 <MX_USART2_UART_Init+0x90>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001d40:	4811      	ldr	r0, [pc, #68]	@ (8001d88 <MX_USART2_UART_Init+0x90>)
 8001d42:	f003 f97c 	bl	800503e <HAL_UART_Init>
 8001d46:	4603      	mov	r3, r0
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d001      	beq.n	8001d50 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001d4c:	f7ff fa45 	bl	80011da <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d50:	2100      	movs	r1, #0
 8001d52:	480d      	ldr	r0, [pc, #52]	@ (8001d88 <MX_USART2_UART_Init+0x90>)
 8001d54:	f003 fee8 	bl	8005b28 <HAL_UARTEx_SetTxFifoThreshold>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d001      	beq.n	8001d62 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001d5e:	f7ff fa3c 	bl	80011da <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d62:	2100      	movs	r1, #0
 8001d64:	4808      	ldr	r0, [pc, #32]	@ (8001d88 <MX_USART2_UART_Init+0x90>)
 8001d66:	f003 ff1d 	bl	8005ba4 <HAL_UARTEx_SetRxFifoThreshold>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d001      	beq.n	8001d74 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001d70:	f7ff fa33 	bl	80011da <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001d74:	4804      	ldr	r0, [pc, #16]	@ (8001d88 <MX_USART2_UART_Init+0x90>)
 8001d76:	f003 fe9e 	bl	8005ab6 <HAL_UARTEx_DisableFifoMode>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d001      	beq.n	8001d84 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001d80:	f7ff fa2b 	bl	80011da <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001d84:	bf00      	nop
 8001d86:	bd80      	pop	{r7, pc}
 8001d88:	200002d0 	.word	0x200002d0
 8001d8c:	40004400 	.word	0x40004400

08001d90 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b09a      	sub	sp, #104	@ 0x68
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d98:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	601a      	str	r2, [r3, #0]
 8001da0:	605a      	str	r2, [r3, #4]
 8001da2:	609a      	str	r2, [r3, #8]
 8001da4:	60da      	str	r2, [r3, #12]
 8001da6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001da8:	f107 0310 	add.w	r3, r7, #16
 8001dac:	2244      	movs	r2, #68	@ 0x44
 8001dae:	2100      	movs	r1, #0
 8001db0:	4618      	mov	r0, r3
 8001db2:	f004 f8bf 	bl	8005f34 <memset>
  if(uartHandle->Instance==USART2)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4a1f      	ldr	r2, [pc, #124]	@ (8001e38 <HAL_UART_MspInit+0xa8>)
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d136      	bne.n	8001e2e <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001dc0:	2302      	movs	r3, #2
 8001dc2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001dc8:	f107 0310 	add.w	r3, r7, #16
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f001 fa85 	bl	80032dc <HAL_RCCEx_PeriphCLKConfig>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d001      	beq.n	8001ddc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001dd8:	f7ff f9ff 	bl	80011da <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001ddc:	4b17      	ldr	r3, [pc, #92]	@ (8001e3c <HAL_UART_MspInit+0xac>)
 8001dde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001de0:	4a16      	ldr	r2, [pc, #88]	@ (8001e3c <HAL_UART_MspInit+0xac>)
 8001de2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001de6:	6593      	str	r3, [r2, #88]	@ 0x58
 8001de8:	4b14      	ldr	r3, [pc, #80]	@ (8001e3c <HAL_UART_MspInit+0xac>)
 8001dea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001df0:	60fb      	str	r3, [r7, #12]
 8001df2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001df4:	4b11      	ldr	r3, [pc, #68]	@ (8001e3c <HAL_UART_MspInit+0xac>)
 8001df6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001df8:	4a10      	ldr	r2, [pc, #64]	@ (8001e3c <HAL_UART_MspInit+0xac>)
 8001dfa:	f043 0301 	orr.w	r3, r3, #1
 8001dfe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e00:	4b0e      	ldr	r3, [pc, #56]	@ (8001e3c <HAL_UART_MspInit+0xac>)
 8001e02:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e04:	f003 0301 	and.w	r3, r3, #1
 8001e08:	60bb      	str	r3, [r7, #8]
 8001e0a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8001e0c:	230c      	movs	r3, #12
 8001e0e:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e10:	2302      	movs	r3, #2
 8001e12:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e14:	2300      	movs	r3, #0
 8001e16:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001e1c:	2307      	movs	r3, #7
 8001e1e:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e20:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001e24:	4619      	mov	r1, r3
 8001e26:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001e2a:	f000 f9a9 	bl	8002180 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001e2e:	bf00      	nop
 8001e30:	3768      	adds	r7, #104	@ 0x68
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	bf00      	nop
 8001e38:	40004400 	.word	0x40004400
 8001e3c:	40021000 	.word	0x40021000

08001e40 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001e40:	480d      	ldr	r0, [pc, #52]	@ (8001e78 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001e42:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001e44:	f7ff fac2 	bl	80013cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e48:	480c      	ldr	r0, [pc, #48]	@ (8001e7c <LoopForever+0x6>)
  ldr r1, =_edata
 8001e4a:	490d      	ldr	r1, [pc, #52]	@ (8001e80 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001e4c:	4a0d      	ldr	r2, [pc, #52]	@ (8001e84 <LoopForever+0xe>)
  movs r3, #0
 8001e4e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001e50:	e002      	b.n	8001e58 <LoopCopyDataInit>

08001e52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e56:	3304      	adds	r3, #4

08001e58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e5c:	d3f9      	bcc.n	8001e52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e5e:	4a0a      	ldr	r2, [pc, #40]	@ (8001e88 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001e60:	4c0a      	ldr	r4, [pc, #40]	@ (8001e8c <LoopForever+0x16>)
  movs r3, #0
 8001e62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e64:	e001      	b.n	8001e6a <LoopFillZerobss>

08001e66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e68:	3204      	adds	r2, #4

08001e6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e6c:	d3fb      	bcc.n	8001e66 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8001e6e:	f004 f869 	bl	8005f44 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001e72:	f7ff f913 	bl	800109c <main>

08001e76 <LoopForever>:

LoopForever:
    b LoopForever
 8001e76:	e7fe      	b.n	8001e76 <LoopForever>
  ldr   r0, =_estack
 8001e78:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001e7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e80:	20000034 	.word	0x20000034
  ldr r2, =_sidata
 8001e84:	08005ff4 	.word	0x08005ff4
  ldr r2, =_sbss
 8001e88:	20000034 	.word	0x20000034
  ldr r4, =_ebss
 8001e8c:	20000368 	.word	0x20000368

08001e90 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001e90:	e7fe      	b.n	8001e90 <ADC1_2_IRQHandler>

08001e92 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e92:	b580      	push	{r7, lr}
 8001e94:	b082      	sub	sp, #8
 8001e96:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e9c:	2003      	movs	r0, #3
 8001e9e:	f000 f93d 	bl	800211c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001ea2:	2000      	movs	r0, #0
 8001ea4:	f000 f80e 	bl	8001ec4 <HAL_InitTick>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d002      	beq.n	8001eb4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	71fb      	strb	r3, [r7, #7]
 8001eb2:	e001      	b.n	8001eb8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001eb4:	f7ff fa36 	bl	8001324 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001eb8:	79fb      	ldrb	r3, [r7, #7]

}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	3708      	adds	r7, #8
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}
	...

08001ec4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b084      	sub	sp, #16
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001ed0:	4b16      	ldr	r3, [pc, #88]	@ (8001f2c <HAL_InitTick+0x68>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d022      	beq.n	8001f1e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001ed8:	4b15      	ldr	r3, [pc, #84]	@ (8001f30 <HAL_InitTick+0x6c>)
 8001eda:	681a      	ldr	r2, [r3, #0]
 8001edc:	4b13      	ldr	r3, [pc, #76]	@ (8001f2c <HAL_InitTick+0x68>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001ee4:	fbb1 f3f3 	udiv	r3, r1, r3
 8001ee8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eec:	4618      	mov	r0, r3
 8001eee:	f000 f93a 	bl	8002166 <HAL_SYSTICK_Config>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d10f      	bne.n	8001f18 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2b0f      	cmp	r3, #15
 8001efc:	d809      	bhi.n	8001f12 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001efe:	2200      	movs	r2, #0
 8001f00:	6879      	ldr	r1, [r7, #4]
 8001f02:	f04f 30ff 	mov.w	r0, #4294967295
 8001f06:	f000 f914 	bl	8002132 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001f0a:	4a0a      	ldr	r2, [pc, #40]	@ (8001f34 <HAL_InitTick+0x70>)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6013      	str	r3, [r2, #0]
 8001f10:	e007      	b.n	8001f22 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001f12:	2301      	movs	r3, #1
 8001f14:	73fb      	strb	r3, [r7, #15]
 8001f16:	e004      	b.n	8001f22 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001f18:	2301      	movs	r3, #1
 8001f1a:	73fb      	strb	r3, [r7, #15]
 8001f1c:	e001      	b.n	8001f22 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001f22:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f24:	4618      	mov	r0, r3
 8001f26:	3710      	adds	r7, #16
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}
 8001f2c:	20000030 	.word	0x20000030
 8001f30:	20000028 	.word	0x20000028
 8001f34:	2000002c 	.word	0x2000002c

08001f38 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f3c:	4b05      	ldr	r3, [pc, #20]	@ (8001f54 <HAL_IncTick+0x1c>)
 8001f3e:	681a      	ldr	r2, [r3, #0]
 8001f40:	4b05      	ldr	r3, [pc, #20]	@ (8001f58 <HAL_IncTick+0x20>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4413      	add	r3, r2
 8001f46:	4a03      	ldr	r2, [pc, #12]	@ (8001f54 <HAL_IncTick+0x1c>)
 8001f48:	6013      	str	r3, [r2, #0]
}
 8001f4a:	bf00      	nop
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f52:	4770      	bx	lr
 8001f54:	20000364 	.word	0x20000364
 8001f58:	20000030 	.word	0x20000030

08001f5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	af00      	add	r7, sp, #0
  return uwTick;
 8001f60:	4b03      	ldr	r3, [pc, #12]	@ (8001f70 <HAL_GetTick+0x14>)
 8001f62:	681b      	ldr	r3, [r3, #0]
}
 8001f64:	4618      	mov	r0, r3
 8001f66:	46bd      	mov	sp, r7
 8001f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6c:	4770      	bx	lr
 8001f6e:	bf00      	nop
 8001f70:	20000364 	.word	0x20000364

08001f74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b084      	sub	sp, #16
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f7c:	f7ff ffee 	bl	8001f5c <HAL_GetTick>
 8001f80:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f8c:	d004      	beq.n	8001f98 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f8e:	4b09      	ldr	r3, [pc, #36]	@ (8001fb4 <HAL_Delay+0x40>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	68fa      	ldr	r2, [r7, #12]
 8001f94:	4413      	add	r3, r2
 8001f96:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001f98:	bf00      	nop
 8001f9a:	f7ff ffdf 	bl	8001f5c <HAL_GetTick>
 8001f9e:	4602      	mov	r2, r0
 8001fa0:	68bb      	ldr	r3, [r7, #8]
 8001fa2:	1ad3      	subs	r3, r2, r3
 8001fa4:	68fa      	ldr	r2, [r7, #12]
 8001fa6:	429a      	cmp	r2, r3
 8001fa8:	d8f7      	bhi.n	8001f9a <HAL_Delay+0x26>
  {
  }
}
 8001faa:	bf00      	nop
 8001fac:	bf00      	nop
 8001fae:	3710      	adds	r7, #16
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}
 8001fb4:	20000030 	.word	0x20000030

08001fb8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b085      	sub	sp, #20
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	f003 0307 	and.w	r3, r3, #7
 8001fc6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fc8:	4b0c      	ldr	r3, [pc, #48]	@ (8001ffc <__NVIC_SetPriorityGrouping+0x44>)
 8001fca:	68db      	ldr	r3, [r3, #12]
 8001fcc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fce:	68ba      	ldr	r2, [r7, #8]
 8001fd0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fdc:	68bb      	ldr	r3, [r7, #8]
 8001fde:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fe0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001fe4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001fe8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fea:	4a04      	ldr	r2, [pc, #16]	@ (8001ffc <__NVIC_SetPriorityGrouping+0x44>)
 8001fec:	68bb      	ldr	r3, [r7, #8]
 8001fee:	60d3      	str	r3, [r2, #12]
}
 8001ff0:	bf00      	nop
 8001ff2:	3714      	adds	r7, #20
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffa:	4770      	bx	lr
 8001ffc:	e000ed00 	.word	0xe000ed00

08002000 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002000:	b480      	push	{r7}
 8002002:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002004:	4b04      	ldr	r3, [pc, #16]	@ (8002018 <__NVIC_GetPriorityGrouping+0x18>)
 8002006:	68db      	ldr	r3, [r3, #12]
 8002008:	0a1b      	lsrs	r3, r3, #8
 800200a:	f003 0307 	and.w	r3, r3, #7
}
 800200e:	4618      	mov	r0, r3
 8002010:	46bd      	mov	sp, r7
 8002012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002016:	4770      	bx	lr
 8002018:	e000ed00 	.word	0xe000ed00

0800201c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800201c:	b480      	push	{r7}
 800201e:	b083      	sub	sp, #12
 8002020:	af00      	add	r7, sp, #0
 8002022:	4603      	mov	r3, r0
 8002024:	6039      	str	r1, [r7, #0]
 8002026:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002028:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800202c:	2b00      	cmp	r3, #0
 800202e:	db0a      	blt.n	8002046 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	b2da      	uxtb	r2, r3
 8002034:	490c      	ldr	r1, [pc, #48]	@ (8002068 <__NVIC_SetPriority+0x4c>)
 8002036:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800203a:	0112      	lsls	r2, r2, #4
 800203c:	b2d2      	uxtb	r2, r2
 800203e:	440b      	add	r3, r1
 8002040:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002044:	e00a      	b.n	800205c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	b2da      	uxtb	r2, r3
 800204a:	4908      	ldr	r1, [pc, #32]	@ (800206c <__NVIC_SetPriority+0x50>)
 800204c:	79fb      	ldrb	r3, [r7, #7]
 800204e:	f003 030f 	and.w	r3, r3, #15
 8002052:	3b04      	subs	r3, #4
 8002054:	0112      	lsls	r2, r2, #4
 8002056:	b2d2      	uxtb	r2, r2
 8002058:	440b      	add	r3, r1
 800205a:	761a      	strb	r2, [r3, #24]
}
 800205c:	bf00      	nop
 800205e:	370c      	adds	r7, #12
 8002060:	46bd      	mov	sp, r7
 8002062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002066:	4770      	bx	lr
 8002068:	e000e100 	.word	0xe000e100
 800206c:	e000ed00 	.word	0xe000ed00

08002070 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002070:	b480      	push	{r7}
 8002072:	b089      	sub	sp, #36	@ 0x24
 8002074:	af00      	add	r7, sp, #0
 8002076:	60f8      	str	r0, [r7, #12]
 8002078:	60b9      	str	r1, [r7, #8]
 800207a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	f003 0307 	and.w	r3, r3, #7
 8002082:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002084:	69fb      	ldr	r3, [r7, #28]
 8002086:	f1c3 0307 	rsb	r3, r3, #7
 800208a:	2b04      	cmp	r3, #4
 800208c:	bf28      	it	cs
 800208e:	2304      	movcs	r3, #4
 8002090:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002092:	69fb      	ldr	r3, [r7, #28]
 8002094:	3304      	adds	r3, #4
 8002096:	2b06      	cmp	r3, #6
 8002098:	d902      	bls.n	80020a0 <NVIC_EncodePriority+0x30>
 800209a:	69fb      	ldr	r3, [r7, #28]
 800209c:	3b03      	subs	r3, #3
 800209e:	e000      	b.n	80020a2 <NVIC_EncodePriority+0x32>
 80020a0:	2300      	movs	r3, #0
 80020a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020a4:	f04f 32ff 	mov.w	r2, #4294967295
 80020a8:	69bb      	ldr	r3, [r7, #24]
 80020aa:	fa02 f303 	lsl.w	r3, r2, r3
 80020ae:	43da      	mvns	r2, r3
 80020b0:	68bb      	ldr	r3, [r7, #8]
 80020b2:	401a      	ands	r2, r3
 80020b4:	697b      	ldr	r3, [r7, #20]
 80020b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020b8:	f04f 31ff 	mov.w	r1, #4294967295
 80020bc:	697b      	ldr	r3, [r7, #20]
 80020be:	fa01 f303 	lsl.w	r3, r1, r3
 80020c2:	43d9      	mvns	r1, r3
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020c8:	4313      	orrs	r3, r2
         );
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	3724      	adds	r7, #36	@ 0x24
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr
	...

080020d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b082      	sub	sp, #8
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	3b01      	subs	r3, #1
 80020e4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80020e8:	d301      	bcc.n	80020ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020ea:	2301      	movs	r3, #1
 80020ec:	e00f      	b.n	800210e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020ee:	4a0a      	ldr	r2, [pc, #40]	@ (8002118 <SysTick_Config+0x40>)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	3b01      	subs	r3, #1
 80020f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020f6:	210f      	movs	r1, #15
 80020f8:	f04f 30ff 	mov.w	r0, #4294967295
 80020fc:	f7ff ff8e 	bl	800201c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002100:	4b05      	ldr	r3, [pc, #20]	@ (8002118 <SysTick_Config+0x40>)
 8002102:	2200      	movs	r2, #0
 8002104:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002106:	4b04      	ldr	r3, [pc, #16]	@ (8002118 <SysTick_Config+0x40>)
 8002108:	2207      	movs	r2, #7
 800210a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800210c:	2300      	movs	r3, #0
}
 800210e:	4618      	mov	r0, r3
 8002110:	3708      	adds	r7, #8
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}
 8002116:	bf00      	nop
 8002118:	e000e010 	.word	0xe000e010

0800211c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b082      	sub	sp, #8
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002124:	6878      	ldr	r0, [r7, #4]
 8002126:	f7ff ff47 	bl	8001fb8 <__NVIC_SetPriorityGrouping>
}
 800212a:	bf00      	nop
 800212c:	3708      	adds	r7, #8
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}

08002132 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002132:	b580      	push	{r7, lr}
 8002134:	b086      	sub	sp, #24
 8002136:	af00      	add	r7, sp, #0
 8002138:	4603      	mov	r3, r0
 800213a:	60b9      	str	r1, [r7, #8]
 800213c:	607a      	str	r2, [r7, #4]
 800213e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002140:	f7ff ff5e 	bl	8002000 <__NVIC_GetPriorityGrouping>
 8002144:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002146:	687a      	ldr	r2, [r7, #4]
 8002148:	68b9      	ldr	r1, [r7, #8]
 800214a:	6978      	ldr	r0, [r7, #20]
 800214c:	f7ff ff90 	bl	8002070 <NVIC_EncodePriority>
 8002150:	4602      	mov	r2, r0
 8002152:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002156:	4611      	mov	r1, r2
 8002158:	4618      	mov	r0, r3
 800215a:	f7ff ff5f 	bl	800201c <__NVIC_SetPriority>
}
 800215e:	bf00      	nop
 8002160:	3718      	adds	r7, #24
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}

08002166 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002166:	b580      	push	{r7, lr}
 8002168:	b082      	sub	sp, #8
 800216a:	af00      	add	r7, sp, #0
 800216c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800216e:	6878      	ldr	r0, [r7, #4]
 8002170:	f7ff ffb2 	bl	80020d8 <SysTick_Config>
 8002174:	4603      	mov	r3, r0
}
 8002176:	4618      	mov	r0, r3
 8002178:	3708      	adds	r7, #8
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}
	...

08002180 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002180:	b480      	push	{r7}
 8002182:	b087      	sub	sp, #28
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
 8002188:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800218a:	2300      	movs	r3, #0
 800218c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800218e:	e15a      	b.n	8002446 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	681a      	ldr	r2, [r3, #0]
 8002194:	2101      	movs	r1, #1
 8002196:	697b      	ldr	r3, [r7, #20]
 8002198:	fa01 f303 	lsl.w	r3, r1, r3
 800219c:	4013      	ands	r3, r2
 800219e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	f000 814c 	beq.w	8002440 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	f003 0303 	and.w	r3, r3, #3
 80021b0:	2b01      	cmp	r3, #1
 80021b2:	d005      	beq.n	80021c0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80021bc:	2b02      	cmp	r3, #2
 80021be:	d130      	bne.n	8002222 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	689b      	ldr	r3, [r3, #8]
 80021c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	005b      	lsls	r3, r3, #1
 80021ca:	2203      	movs	r2, #3
 80021cc:	fa02 f303 	lsl.w	r3, r2, r3
 80021d0:	43db      	mvns	r3, r3
 80021d2:	693a      	ldr	r2, [r7, #16]
 80021d4:	4013      	ands	r3, r2
 80021d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	68da      	ldr	r2, [r3, #12]
 80021dc:	697b      	ldr	r3, [r7, #20]
 80021de:	005b      	lsls	r3, r3, #1
 80021e0:	fa02 f303 	lsl.w	r3, r2, r3
 80021e4:	693a      	ldr	r2, [r7, #16]
 80021e6:	4313      	orrs	r3, r2
 80021e8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	693a      	ldr	r2, [r7, #16]
 80021ee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80021f6:	2201      	movs	r2, #1
 80021f8:	697b      	ldr	r3, [r7, #20]
 80021fa:	fa02 f303 	lsl.w	r3, r2, r3
 80021fe:	43db      	mvns	r3, r3
 8002200:	693a      	ldr	r2, [r7, #16]
 8002202:	4013      	ands	r3, r2
 8002204:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	091b      	lsrs	r3, r3, #4
 800220c:	f003 0201 	and.w	r2, r3, #1
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	fa02 f303 	lsl.w	r3, r2, r3
 8002216:	693a      	ldr	r2, [r7, #16]
 8002218:	4313      	orrs	r3, r2
 800221a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	693a      	ldr	r2, [r7, #16]
 8002220:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	f003 0303 	and.w	r3, r3, #3
 800222a:	2b03      	cmp	r3, #3
 800222c:	d017      	beq.n	800225e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	68db      	ldr	r3, [r3, #12]
 8002232:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002234:	697b      	ldr	r3, [r7, #20]
 8002236:	005b      	lsls	r3, r3, #1
 8002238:	2203      	movs	r2, #3
 800223a:	fa02 f303 	lsl.w	r3, r2, r3
 800223e:	43db      	mvns	r3, r3
 8002240:	693a      	ldr	r2, [r7, #16]
 8002242:	4013      	ands	r3, r2
 8002244:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	689a      	ldr	r2, [r3, #8]
 800224a:	697b      	ldr	r3, [r7, #20]
 800224c:	005b      	lsls	r3, r3, #1
 800224e:	fa02 f303 	lsl.w	r3, r2, r3
 8002252:	693a      	ldr	r2, [r7, #16]
 8002254:	4313      	orrs	r3, r2
 8002256:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	693a      	ldr	r2, [r7, #16]
 800225c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	f003 0303 	and.w	r3, r3, #3
 8002266:	2b02      	cmp	r3, #2
 8002268:	d123      	bne.n	80022b2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800226a:	697b      	ldr	r3, [r7, #20]
 800226c:	08da      	lsrs	r2, r3, #3
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	3208      	adds	r2, #8
 8002272:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002276:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002278:	697b      	ldr	r3, [r7, #20]
 800227a:	f003 0307 	and.w	r3, r3, #7
 800227e:	009b      	lsls	r3, r3, #2
 8002280:	220f      	movs	r2, #15
 8002282:	fa02 f303 	lsl.w	r3, r2, r3
 8002286:	43db      	mvns	r3, r3
 8002288:	693a      	ldr	r2, [r7, #16]
 800228a:	4013      	ands	r3, r2
 800228c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	691a      	ldr	r2, [r3, #16]
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	f003 0307 	and.w	r3, r3, #7
 8002298:	009b      	lsls	r3, r3, #2
 800229a:	fa02 f303 	lsl.w	r3, r2, r3
 800229e:	693a      	ldr	r2, [r7, #16]
 80022a0:	4313      	orrs	r3, r2
 80022a2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80022a4:	697b      	ldr	r3, [r7, #20]
 80022a6:	08da      	lsrs	r2, r3, #3
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	3208      	adds	r2, #8
 80022ac:	6939      	ldr	r1, [r7, #16]
 80022ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80022b8:	697b      	ldr	r3, [r7, #20]
 80022ba:	005b      	lsls	r3, r3, #1
 80022bc:	2203      	movs	r2, #3
 80022be:	fa02 f303 	lsl.w	r3, r2, r3
 80022c2:	43db      	mvns	r3, r3
 80022c4:	693a      	ldr	r2, [r7, #16]
 80022c6:	4013      	ands	r3, r2
 80022c8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	f003 0203 	and.w	r2, r3, #3
 80022d2:	697b      	ldr	r3, [r7, #20]
 80022d4:	005b      	lsls	r3, r3, #1
 80022d6:	fa02 f303 	lsl.w	r3, r2, r3
 80022da:	693a      	ldr	r2, [r7, #16]
 80022dc:	4313      	orrs	r3, r2
 80022de:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	693a      	ldr	r2, [r7, #16]
 80022e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	f000 80a6 	beq.w	8002440 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022f4:	4b5b      	ldr	r3, [pc, #364]	@ (8002464 <HAL_GPIO_Init+0x2e4>)
 80022f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022f8:	4a5a      	ldr	r2, [pc, #360]	@ (8002464 <HAL_GPIO_Init+0x2e4>)
 80022fa:	f043 0301 	orr.w	r3, r3, #1
 80022fe:	6613      	str	r3, [r2, #96]	@ 0x60
 8002300:	4b58      	ldr	r3, [pc, #352]	@ (8002464 <HAL_GPIO_Init+0x2e4>)
 8002302:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002304:	f003 0301 	and.w	r3, r3, #1
 8002308:	60bb      	str	r3, [r7, #8]
 800230a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800230c:	4a56      	ldr	r2, [pc, #344]	@ (8002468 <HAL_GPIO_Init+0x2e8>)
 800230e:	697b      	ldr	r3, [r7, #20]
 8002310:	089b      	lsrs	r3, r3, #2
 8002312:	3302      	adds	r3, #2
 8002314:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002318:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800231a:	697b      	ldr	r3, [r7, #20]
 800231c:	f003 0303 	and.w	r3, r3, #3
 8002320:	009b      	lsls	r3, r3, #2
 8002322:	220f      	movs	r2, #15
 8002324:	fa02 f303 	lsl.w	r3, r2, r3
 8002328:	43db      	mvns	r3, r3
 800232a:	693a      	ldr	r2, [r7, #16]
 800232c:	4013      	ands	r3, r2
 800232e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002336:	d01f      	beq.n	8002378 <HAL_GPIO_Init+0x1f8>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	4a4c      	ldr	r2, [pc, #304]	@ (800246c <HAL_GPIO_Init+0x2ec>)
 800233c:	4293      	cmp	r3, r2
 800233e:	d019      	beq.n	8002374 <HAL_GPIO_Init+0x1f4>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	4a4b      	ldr	r2, [pc, #300]	@ (8002470 <HAL_GPIO_Init+0x2f0>)
 8002344:	4293      	cmp	r3, r2
 8002346:	d013      	beq.n	8002370 <HAL_GPIO_Init+0x1f0>
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	4a4a      	ldr	r2, [pc, #296]	@ (8002474 <HAL_GPIO_Init+0x2f4>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d00d      	beq.n	800236c <HAL_GPIO_Init+0x1ec>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	4a49      	ldr	r2, [pc, #292]	@ (8002478 <HAL_GPIO_Init+0x2f8>)
 8002354:	4293      	cmp	r3, r2
 8002356:	d007      	beq.n	8002368 <HAL_GPIO_Init+0x1e8>
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	4a48      	ldr	r2, [pc, #288]	@ (800247c <HAL_GPIO_Init+0x2fc>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d101      	bne.n	8002364 <HAL_GPIO_Init+0x1e4>
 8002360:	2305      	movs	r3, #5
 8002362:	e00a      	b.n	800237a <HAL_GPIO_Init+0x1fa>
 8002364:	2306      	movs	r3, #6
 8002366:	e008      	b.n	800237a <HAL_GPIO_Init+0x1fa>
 8002368:	2304      	movs	r3, #4
 800236a:	e006      	b.n	800237a <HAL_GPIO_Init+0x1fa>
 800236c:	2303      	movs	r3, #3
 800236e:	e004      	b.n	800237a <HAL_GPIO_Init+0x1fa>
 8002370:	2302      	movs	r3, #2
 8002372:	e002      	b.n	800237a <HAL_GPIO_Init+0x1fa>
 8002374:	2301      	movs	r3, #1
 8002376:	e000      	b.n	800237a <HAL_GPIO_Init+0x1fa>
 8002378:	2300      	movs	r3, #0
 800237a:	697a      	ldr	r2, [r7, #20]
 800237c:	f002 0203 	and.w	r2, r2, #3
 8002380:	0092      	lsls	r2, r2, #2
 8002382:	4093      	lsls	r3, r2
 8002384:	693a      	ldr	r2, [r7, #16]
 8002386:	4313      	orrs	r3, r2
 8002388:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800238a:	4937      	ldr	r1, [pc, #220]	@ (8002468 <HAL_GPIO_Init+0x2e8>)
 800238c:	697b      	ldr	r3, [r7, #20]
 800238e:	089b      	lsrs	r3, r3, #2
 8002390:	3302      	adds	r3, #2
 8002392:	693a      	ldr	r2, [r7, #16]
 8002394:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002398:	4b39      	ldr	r3, [pc, #228]	@ (8002480 <HAL_GPIO_Init+0x300>)
 800239a:	689b      	ldr	r3, [r3, #8]
 800239c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	43db      	mvns	r3, r3
 80023a2:	693a      	ldr	r2, [r7, #16]
 80023a4:	4013      	ands	r3, r2
 80023a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d003      	beq.n	80023bc <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80023b4:	693a      	ldr	r2, [r7, #16]
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	4313      	orrs	r3, r2
 80023ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80023bc:	4a30      	ldr	r2, [pc, #192]	@ (8002480 <HAL_GPIO_Init+0x300>)
 80023be:	693b      	ldr	r3, [r7, #16]
 80023c0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80023c2:	4b2f      	ldr	r3, [pc, #188]	@ (8002480 <HAL_GPIO_Init+0x300>)
 80023c4:	68db      	ldr	r3, [r3, #12]
 80023c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	43db      	mvns	r3, r3
 80023cc:	693a      	ldr	r2, [r7, #16]
 80023ce:	4013      	ands	r3, r2
 80023d0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d003      	beq.n	80023e6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80023de:	693a      	ldr	r2, [r7, #16]
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	4313      	orrs	r3, r2
 80023e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80023e6:	4a26      	ldr	r2, [pc, #152]	@ (8002480 <HAL_GPIO_Init+0x300>)
 80023e8:	693b      	ldr	r3, [r7, #16]
 80023ea:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80023ec:	4b24      	ldr	r3, [pc, #144]	@ (8002480 <HAL_GPIO_Init+0x300>)
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	43db      	mvns	r3, r3
 80023f6:	693a      	ldr	r2, [r7, #16]
 80023f8:	4013      	ands	r3, r2
 80023fa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002404:	2b00      	cmp	r3, #0
 8002406:	d003      	beq.n	8002410 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002408:	693a      	ldr	r2, [r7, #16]
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	4313      	orrs	r3, r2
 800240e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002410:	4a1b      	ldr	r2, [pc, #108]	@ (8002480 <HAL_GPIO_Init+0x300>)
 8002412:	693b      	ldr	r3, [r7, #16]
 8002414:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002416:	4b1a      	ldr	r3, [pc, #104]	@ (8002480 <HAL_GPIO_Init+0x300>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	43db      	mvns	r3, r3
 8002420:	693a      	ldr	r2, [r7, #16]
 8002422:	4013      	ands	r3, r2
 8002424:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800242e:	2b00      	cmp	r3, #0
 8002430:	d003      	beq.n	800243a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002432:	693a      	ldr	r2, [r7, #16]
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	4313      	orrs	r3, r2
 8002438:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800243a:	4a11      	ldr	r2, [pc, #68]	@ (8002480 <HAL_GPIO_Init+0x300>)
 800243c:	693b      	ldr	r3, [r7, #16]
 800243e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	3301      	adds	r3, #1
 8002444:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	681a      	ldr	r2, [r3, #0]
 800244a:	697b      	ldr	r3, [r7, #20]
 800244c:	fa22 f303 	lsr.w	r3, r2, r3
 8002450:	2b00      	cmp	r3, #0
 8002452:	f47f ae9d 	bne.w	8002190 <HAL_GPIO_Init+0x10>
  }
}
 8002456:	bf00      	nop
 8002458:	bf00      	nop
 800245a:	371c      	adds	r7, #28
 800245c:	46bd      	mov	sp, r7
 800245e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002462:	4770      	bx	lr
 8002464:	40021000 	.word	0x40021000
 8002468:	40010000 	.word	0x40010000
 800246c:	48000400 	.word	0x48000400
 8002470:	48000800 	.word	0x48000800
 8002474:	48000c00 	.word	0x48000c00
 8002478:	48001000 	.word	0x48001000
 800247c:	48001400 	.word	0x48001400
 8002480:	40010400 	.word	0x40010400

08002484 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002484:	b480      	push	{r7}
 8002486:	b083      	sub	sp, #12
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
 800248c:	460b      	mov	r3, r1
 800248e:	807b      	strh	r3, [r7, #2]
 8002490:	4613      	mov	r3, r2
 8002492:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002494:	787b      	ldrb	r3, [r7, #1]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d003      	beq.n	80024a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800249a:	887a      	ldrh	r2, [r7, #2]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80024a0:	e002      	b.n	80024a8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80024a2:	887a      	ldrh	r2, [r7, #2]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80024a8:	bf00      	nop
 80024aa:	370c      	adds	r7, #12
 80024ac:	46bd      	mov	sp, r7
 80024ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b2:	4770      	bx	lr

080024b4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b082      	sub	sp, #8
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d101      	bne.n	80024c6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	e08d      	b.n	80025e2 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80024cc:	b2db      	uxtb	r3, r3
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d106      	bne.n	80024e0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2200      	movs	r2, #0
 80024d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80024da:	6878      	ldr	r0, [r7, #4]
 80024dc:	f7fe fd68 	bl	8000fb0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2224      	movs	r2, #36	@ 0x24
 80024e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	681a      	ldr	r2, [r3, #0]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f022 0201 	bic.w	r2, r2, #1
 80024f6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	685a      	ldr	r2, [r3, #4]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002504:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	689a      	ldr	r2, [r3, #8]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002514:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	68db      	ldr	r3, [r3, #12]
 800251a:	2b01      	cmp	r3, #1
 800251c:	d107      	bne.n	800252e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	689a      	ldr	r2, [r3, #8]
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800252a:	609a      	str	r2, [r3, #8]
 800252c:	e006      	b.n	800253c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	689a      	ldr	r2, [r3, #8]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800253a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	68db      	ldr	r3, [r3, #12]
 8002540:	2b02      	cmp	r3, #2
 8002542:	d108      	bne.n	8002556 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	685a      	ldr	r2, [r3, #4]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002552:	605a      	str	r2, [r3, #4]
 8002554:	e007      	b.n	8002566 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	685a      	ldr	r2, [r3, #4]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002564:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	687a      	ldr	r2, [r7, #4]
 800256e:	6812      	ldr	r2, [r2, #0]
 8002570:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002574:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002578:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	68da      	ldr	r2, [r3, #12]
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002588:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	691a      	ldr	r2, [r3, #16]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	695b      	ldr	r3, [r3, #20]
 8002592:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	699b      	ldr	r3, [r3, #24]
 800259a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	430a      	orrs	r2, r1
 80025a2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	69d9      	ldr	r1, [r3, #28]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6a1a      	ldr	r2, [r3, #32]
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	430a      	orrs	r2, r1
 80025b2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	681a      	ldr	r2, [r3, #0]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f042 0201 	orr.w	r2, r2, #1
 80025c2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2200      	movs	r2, #0
 80025c8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2220      	movs	r2, #32
 80025ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2200      	movs	r2, #0
 80025d6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2200      	movs	r2, #0
 80025dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80025e0:	2300      	movs	r3, #0
}
 80025e2:	4618      	mov	r0, r3
 80025e4:	3708      	adds	r7, #8
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}

080025ea <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80025ea:	b480      	push	{r7}
 80025ec:	b083      	sub	sp, #12
 80025ee:	af00      	add	r7, sp, #0
 80025f0:	6078      	str	r0, [r7, #4]
 80025f2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80025fa:	b2db      	uxtb	r3, r3
 80025fc:	2b20      	cmp	r3, #32
 80025fe:	d138      	bne.n	8002672 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002606:	2b01      	cmp	r3, #1
 8002608:	d101      	bne.n	800260e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800260a:	2302      	movs	r3, #2
 800260c:	e032      	b.n	8002674 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2201      	movs	r2, #1
 8002612:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2224      	movs	r2, #36	@ 0x24
 800261a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	681a      	ldr	r2, [r3, #0]
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f022 0201 	bic.w	r2, r2, #1
 800262c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	681a      	ldr	r2, [r3, #0]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800263c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	6819      	ldr	r1, [r3, #0]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	683a      	ldr	r2, [r7, #0]
 800264a:	430a      	orrs	r2, r1
 800264c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	681a      	ldr	r2, [r3, #0]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f042 0201 	orr.w	r2, r2, #1
 800265c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2220      	movs	r2, #32
 8002662:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2200      	movs	r2, #0
 800266a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800266e:	2300      	movs	r3, #0
 8002670:	e000      	b.n	8002674 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002672:	2302      	movs	r3, #2
  }
}
 8002674:	4618      	mov	r0, r3
 8002676:	370c      	adds	r7, #12
 8002678:	46bd      	mov	sp, r7
 800267a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267e:	4770      	bx	lr

08002680 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002680:	b480      	push	{r7}
 8002682:	b085      	sub	sp, #20
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
 8002688:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002690:	b2db      	uxtb	r3, r3
 8002692:	2b20      	cmp	r3, #32
 8002694:	d139      	bne.n	800270a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800269c:	2b01      	cmp	r3, #1
 800269e:	d101      	bne.n	80026a4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80026a0:	2302      	movs	r3, #2
 80026a2:	e033      	b.n	800270c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2201      	movs	r2, #1
 80026a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2224      	movs	r2, #36	@ 0x24
 80026b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	681a      	ldr	r2, [r3, #0]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f022 0201 	bic.w	r2, r2, #1
 80026c2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80026d2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	021b      	lsls	r3, r3, #8
 80026d8:	68fa      	ldr	r2, [r7, #12]
 80026da:	4313      	orrs	r3, r2
 80026dc:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	68fa      	ldr	r2, [r7, #12]
 80026e4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	681a      	ldr	r2, [r3, #0]
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f042 0201 	orr.w	r2, r2, #1
 80026f4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2220      	movs	r2, #32
 80026fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2200      	movs	r2, #0
 8002702:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002706:	2300      	movs	r3, #0
 8002708:	e000      	b.n	800270c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800270a:	2302      	movs	r3, #2
  }
}
 800270c:	4618      	mov	r0, r3
 800270e:	3714      	adds	r7, #20
 8002710:	46bd      	mov	sp, r7
 8002712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002716:	4770      	bx	lr

08002718 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002718:	b480      	push	{r7}
 800271a:	b085      	sub	sp, #20
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d141      	bne.n	80027aa <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002726:	4b4b      	ldr	r3, [pc, #300]	@ (8002854 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800272e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002732:	d131      	bne.n	8002798 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002734:	4b47      	ldr	r3, [pc, #284]	@ (8002854 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002736:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800273a:	4a46      	ldr	r2, [pc, #280]	@ (8002854 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800273c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002740:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002744:	4b43      	ldr	r3, [pc, #268]	@ (8002854 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800274c:	4a41      	ldr	r2, [pc, #260]	@ (8002854 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800274e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002752:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002754:	4b40      	ldr	r3, [pc, #256]	@ (8002858 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	2232      	movs	r2, #50	@ 0x32
 800275a:	fb02 f303 	mul.w	r3, r2, r3
 800275e:	4a3f      	ldr	r2, [pc, #252]	@ (800285c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002760:	fba2 2303 	umull	r2, r3, r2, r3
 8002764:	0c9b      	lsrs	r3, r3, #18
 8002766:	3301      	adds	r3, #1
 8002768:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800276a:	e002      	b.n	8002772 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	3b01      	subs	r3, #1
 8002770:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002772:	4b38      	ldr	r3, [pc, #224]	@ (8002854 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002774:	695b      	ldr	r3, [r3, #20]
 8002776:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800277a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800277e:	d102      	bne.n	8002786 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d1f2      	bne.n	800276c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002786:	4b33      	ldr	r3, [pc, #204]	@ (8002854 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002788:	695b      	ldr	r3, [r3, #20]
 800278a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800278e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002792:	d158      	bne.n	8002846 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002794:	2303      	movs	r3, #3
 8002796:	e057      	b.n	8002848 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002798:	4b2e      	ldr	r3, [pc, #184]	@ (8002854 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800279a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800279e:	4a2d      	ldr	r2, [pc, #180]	@ (8002854 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027a0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80027a4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80027a8:	e04d      	b.n	8002846 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80027b0:	d141      	bne.n	8002836 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80027b2:	4b28      	ldr	r3, [pc, #160]	@ (8002854 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80027ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80027be:	d131      	bne.n	8002824 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80027c0:	4b24      	ldr	r3, [pc, #144]	@ (8002854 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80027c6:	4a23      	ldr	r2, [pc, #140]	@ (8002854 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80027cc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80027d0:	4b20      	ldr	r3, [pc, #128]	@ (8002854 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80027d8:	4a1e      	ldr	r2, [pc, #120]	@ (8002854 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027da:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80027de:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80027e0:	4b1d      	ldr	r3, [pc, #116]	@ (8002858 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	2232      	movs	r2, #50	@ 0x32
 80027e6:	fb02 f303 	mul.w	r3, r2, r3
 80027ea:	4a1c      	ldr	r2, [pc, #112]	@ (800285c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80027ec:	fba2 2303 	umull	r2, r3, r2, r3
 80027f0:	0c9b      	lsrs	r3, r3, #18
 80027f2:	3301      	adds	r3, #1
 80027f4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80027f6:	e002      	b.n	80027fe <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	3b01      	subs	r3, #1
 80027fc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80027fe:	4b15      	ldr	r3, [pc, #84]	@ (8002854 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002800:	695b      	ldr	r3, [r3, #20]
 8002802:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002806:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800280a:	d102      	bne.n	8002812 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d1f2      	bne.n	80027f8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002812:	4b10      	ldr	r3, [pc, #64]	@ (8002854 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002814:	695b      	ldr	r3, [r3, #20]
 8002816:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800281a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800281e:	d112      	bne.n	8002846 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002820:	2303      	movs	r3, #3
 8002822:	e011      	b.n	8002848 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002824:	4b0b      	ldr	r3, [pc, #44]	@ (8002854 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002826:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800282a:	4a0a      	ldr	r2, [pc, #40]	@ (8002854 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800282c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002830:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002834:	e007      	b.n	8002846 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002836:	4b07      	ldr	r3, [pc, #28]	@ (8002854 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800283e:	4a05      	ldr	r2, [pc, #20]	@ (8002854 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002840:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002844:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002846:	2300      	movs	r3, #0
}
 8002848:	4618      	mov	r0, r3
 800284a:	3714      	adds	r7, #20
 800284c:	46bd      	mov	sp, r7
 800284e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002852:	4770      	bx	lr
 8002854:	40007000 	.word	0x40007000
 8002858:	20000028 	.word	0x20000028
 800285c:	431bde83 	.word	0x431bde83

08002860 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002860:	b480      	push	{r7}
 8002862:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002864:	4b05      	ldr	r3, [pc, #20]	@ (800287c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002866:	689b      	ldr	r3, [r3, #8]
 8002868:	4a04      	ldr	r2, [pc, #16]	@ (800287c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800286a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800286e:	6093      	str	r3, [r2, #8]
}
 8002870:	bf00      	nop
 8002872:	46bd      	mov	sp, r7
 8002874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002878:	4770      	bx	lr
 800287a:	bf00      	nop
 800287c:	40007000 	.word	0x40007000

08002880 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b088      	sub	sp, #32
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d101      	bne.n	8002892 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800288e:	2301      	movs	r3, #1
 8002890:	e2fe      	b.n	8002e90 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f003 0301 	and.w	r3, r3, #1
 800289a:	2b00      	cmp	r3, #0
 800289c:	d075      	beq.n	800298a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800289e:	4b97      	ldr	r3, [pc, #604]	@ (8002afc <HAL_RCC_OscConfig+0x27c>)
 80028a0:	689b      	ldr	r3, [r3, #8]
 80028a2:	f003 030c 	and.w	r3, r3, #12
 80028a6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80028a8:	4b94      	ldr	r3, [pc, #592]	@ (8002afc <HAL_RCC_OscConfig+0x27c>)
 80028aa:	68db      	ldr	r3, [r3, #12]
 80028ac:	f003 0303 	and.w	r3, r3, #3
 80028b0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80028b2:	69bb      	ldr	r3, [r7, #24]
 80028b4:	2b0c      	cmp	r3, #12
 80028b6:	d102      	bne.n	80028be <HAL_RCC_OscConfig+0x3e>
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	2b03      	cmp	r3, #3
 80028bc:	d002      	beq.n	80028c4 <HAL_RCC_OscConfig+0x44>
 80028be:	69bb      	ldr	r3, [r7, #24]
 80028c0:	2b08      	cmp	r3, #8
 80028c2:	d10b      	bne.n	80028dc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028c4:	4b8d      	ldr	r3, [pc, #564]	@ (8002afc <HAL_RCC_OscConfig+0x27c>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d05b      	beq.n	8002988 <HAL_RCC_OscConfig+0x108>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d157      	bne.n	8002988 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80028d8:	2301      	movs	r3, #1
 80028da:	e2d9      	b.n	8002e90 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80028e4:	d106      	bne.n	80028f4 <HAL_RCC_OscConfig+0x74>
 80028e6:	4b85      	ldr	r3, [pc, #532]	@ (8002afc <HAL_RCC_OscConfig+0x27c>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4a84      	ldr	r2, [pc, #528]	@ (8002afc <HAL_RCC_OscConfig+0x27c>)
 80028ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028f0:	6013      	str	r3, [r2, #0]
 80028f2:	e01d      	b.n	8002930 <HAL_RCC_OscConfig+0xb0>
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80028fc:	d10c      	bne.n	8002918 <HAL_RCC_OscConfig+0x98>
 80028fe:	4b7f      	ldr	r3, [pc, #508]	@ (8002afc <HAL_RCC_OscConfig+0x27c>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4a7e      	ldr	r2, [pc, #504]	@ (8002afc <HAL_RCC_OscConfig+0x27c>)
 8002904:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002908:	6013      	str	r3, [r2, #0]
 800290a:	4b7c      	ldr	r3, [pc, #496]	@ (8002afc <HAL_RCC_OscConfig+0x27c>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4a7b      	ldr	r2, [pc, #492]	@ (8002afc <HAL_RCC_OscConfig+0x27c>)
 8002910:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002914:	6013      	str	r3, [r2, #0]
 8002916:	e00b      	b.n	8002930 <HAL_RCC_OscConfig+0xb0>
 8002918:	4b78      	ldr	r3, [pc, #480]	@ (8002afc <HAL_RCC_OscConfig+0x27c>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a77      	ldr	r2, [pc, #476]	@ (8002afc <HAL_RCC_OscConfig+0x27c>)
 800291e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002922:	6013      	str	r3, [r2, #0]
 8002924:	4b75      	ldr	r3, [pc, #468]	@ (8002afc <HAL_RCC_OscConfig+0x27c>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a74      	ldr	r2, [pc, #464]	@ (8002afc <HAL_RCC_OscConfig+0x27c>)
 800292a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800292e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d013      	beq.n	8002960 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002938:	f7ff fb10 	bl	8001f5c <HAL_GetTick>
 800293c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800293e:	e008      	b.n	8002952 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002940:	f7ff fb0c 	bl	8001f5c <HAL_GetTick>
 8002944:	4602      	mov	r2, r0
 8002946:	693b      	ldr	r3, [r7, #16]
 8002948:	1ad3      	subs	r3, r2, r3
 800294a:	2b64      	cmp	r3, #100	@ 0x64
 800294c:	d901      	bls.n	8002952 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800294e:	2303      	movs	r3, #3
 8002950:	e29e      	b.n	8002e90 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002952:	4b6a      	ldr	r3, [pc, #424]	@ (8002afc <HAL_RCC_OscConfig+0x27c>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800295a:	2b00      	cmp	r3, #0
 800295c:	d0f0      	beq.n	8002940 <HAL_RCC_OscConfig+0xc0>
 800295e:	e014      	b.n	800298a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002960:	f7ff fafc 	bl	8001f5c <HAL_GetTick>
 8002964:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002966:	e008      	b.n	800297a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002968:	f7ff faf8 	bl	8001f5c <HAL_GetTick>
 800296c:	4602      	mov	r2, r0
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	1ad3      	subs	r3, r2, r3
 8002972:	2b64      	cmp	r3, #100	@ 0x64
 8002974:	d901      	bls.n	800297a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002976:	2303      	movs	r3, #3
 8002978:	e28a      	b.n	8002e90 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800297a:	4b60      	ldr	r3, [pc, #384]	@ (8002afc <HAL_RCC_OscConfig+0x27c>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002982:	2b00      	cmp	r3, #0
 8002984:	d1f0      	bne.n	8002968 <HAL_RCC_OscConfig+0xe8>
 8002986:	e000      	b.n	800298a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002988:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f003 0302 	and.w	r3, r3, #2
 8002992:	2b00      	cmp	r3, #0
 8002994:	d075      	beq.n	8002a82 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002996:	4b59      	ldr	r3, [pc, #356]	@ (8002afc <HAL_RCC_OscConfig+0x27c>)
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	f003 030c 	and.w	r3, r3, #12
 800299e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80029a0:	4b56      	ldr	r3, [pc, #344]	@ (8002afc <HAL_RCC_OscConfig+0x27c>)
 80029a2:	68db      	ldr	r3, [r3, #12]
 80029a4:	f003 0303 	and.w	r3, r3, #3
 80029a8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80029aa:	69bb      	ldr	r3, [r7, #24]
 80029ac:	2b0c      	cmp	r3, #12
 80029ae:	d102      	bne.n	80029b6 <HAL_RCC_OscConfig+0x136>
 80029b0:	697b      	ldr	r3, [r7, #20]
 80029b2:	2b02      	cmp	r3, #2
 80029b4:	d002      	beq.n	80029bc <HAL_RCC_OscConfig+0x13c>
 80029b6:	69bb      	ldr	r3, [r7, #24]
 80029b8:	2b04      	cmp	r3, #4
 80029ba:	d11f      	bne.n	80029fc <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80029bc:	4b4f      	ldr	r3, [pc, #316]	@ (8002afc <HAL_RCC_OscConfig+0x27c>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d005      	beq.n	80029d4 <HAL_RCC_OscConfig+0x154>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	68db      	ldr	r3, [r3, #12]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d101      	bne.n	80029d4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80029d0:	2301      	movs	r3, #1
 80029d2:	e25d      	b.n	8002e90 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029d4:	4b49      	ldr	r3, [pc, #292]	@ (8002afc <HAL_RCC_OscConfig+0x27c>)
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	691b      	ldr	r3, [r3, #16]
 80029e0:	061b      	lsls	r3, r3, #24
 80029e2:	4946      	ldr	r1, [pc, #280]	@ (8002afc <HAL_RCC_OscConfig+0x27c>)
 80029e4:	4313      	orrs	r3, r2
 80029e6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80029e8:	4b45      	ldr	r3, [pc, #276]	@ (8002b00 <HAL_RCC_OscConfig+0x280>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4618      	mov	r0, r3
 80029ee:	f7ff fa69 	bl	8001ec4 <HAL_InitTick>
 80029f2:	4603      	mov	r3, r0
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d043      	beq.n	8002a80 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80029f8:	2301      	movs	r3, #1
 80029fa:	e249      	b.n	8002e90 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	68db      	ldr	r3, [r3, #12]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d023      	beq.n	8002a4c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a04:	4b3d      	ldr	r3, [pc, #244]	@ (8002afc <HAL_RCC_OscConfig+0x27c>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a3c      	ldr	r2, [pc, #240]	@ (8002afc <HAL_RCC_OscConfig+0x27c>)
 8002a0a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a10:	f7ff faa4 	bl	8001f5c <HAL_GetTick>
 8002a14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a16:	e008      	b.n	8002a2a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a18:	f7ff faa0 	bl	8001f5c <HAL_GetTick>
 8002a1c:	4602      	mov	r2, r0
 8002a1e:	693b      	ldr	r3, [r7, #16]
 8002a20:	1ad3      	subs	r3, r2, r3
 8002a22:	2b02      	cmp	r3, #2
 8002a24:	d901      	bls.n	8002a2a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002a26:	2303      	movs	r3, #3
 8002a28:	e232      	b.n	8002e90 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a2a:	4b34      	ldr	r3, [pc, #208]	@ (8002afc <HAL_RCC_OscConfig+0x27c>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d0f0      	beq.n	8002a18 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a36:	4b31      	ldr	r3, [pc, #196]	@ (8002afc <HAL_RCC_OscConfig+0x27c>)
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	691b      	ldr	r3, [r3, #16]
 8002a42:	061b      	lsls	r3, r3, #24
 8002a44:	492d      	ldr	r1, [pc, #180]	@ (8002afc <HAL_RCC_OscConfig+0x27c>)
 8002a46:	4313      	orrs	r3, r2
 8002a48:	604b      	str	r3, [r1, #4]
 8002a4a:	e01a      	b.n	8002a82 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a4c:	4b2b      	ldr	r3, [pc, #172]	@ (8002afc <HAL_RCC_OscConfig+0x27c>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a2a      	ldr	r2, [pc, #168]	@ (8002afc <HAL_RCC_OscConfig+0x27c>)
 8002a52:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002a56:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a58:	f7ff fa80 	bl	8001f5c <HAL_GetTick>
 8002a5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002a5e:	e008      	b.n	8002a72 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a60:	f7ff fa7c 	bl	8001f5c <HAL_GetTick>
 8002a64:	4602      	mov	r2, r0
 8002a66:	693b      	ldr	r3, [r7, #16]
 8002a68:	1ad3      	subs	r3, r2, r3
 8002a6a:	2b02      	cmp	r3, #2
 8002a6c:	d901      	bls.n	8002a72 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002a6e:	2303      	movs	r3, #3
 8002a70:	e20e      	b.n	8002e90 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002a72:	4b22      	ldr	r3, [pc, #136]	@ (8002afc <HAL_RCC_OscConfig+0x27c>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d1f0      	bne.n	8002a60 <HAL_RCC_OscConfig+0x1e0>
 8002a7e:	e000      	b.n	8002a82 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a80:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f003 0308 	and.w	r3, r3, #8
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d041      	beq.n	8002b12 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	695b      	ldr	r3, [r3, #20]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d01c      	beq.n	8002ad0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a96:	4b19      	ldr	r3, [pc, #100]	@ (8002afc <HAL_RCC_OscConfig+0x27c>)
 8002a98:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002a9c:	4a17      	ldr	r2, [pc, #92]	@ (8002afc <HAL_RCC_OscConfig+0x27c>)
 8002a9e:	f043 0301 	orr.w	r3, r3, #1
 8002aa2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002aa6:	f7ff fa59 	bl	8001f5c <HAL_GetTick>
 8002aaa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002aac:	e008      	b.n	8002ac0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002aae:	f7ff fa55 	bl	8001f5c <HAL_GetTick>
 8002ab2:	4602      	mov	r2, r0
 8002ab4:	693b      	ldr	r3, [r7, #16]
 8002ab6:	1ad3      	subs	r3, r2, r3
 8002ab8:	2b02      	cmp	r3, #2
 8002aba:	d901      	bls.n	8002ac0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002abc:	2303      	movs	r3, #3
 8002abe:	e1e7      	b.n	8002e90 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002ac0:	4b0e      	ldr	r3, [pc, #56]	@ (8002afc <HAL_RCC_OscConfig+0x27c>)
 8002ac2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002ac6:	f003 0302 	and.w	r3, r3, #2
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d0ef      	beq.n	8002aae <HAL_RCC_OscConfig+0x22e>
 8002ace:	e020      	b.n	8002b12 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ad0:	4b0a      	ldr	r3, [pc, #40]	@ (8002afc <HAL_RCC_OscConfig+0x27c>)
 8002ad2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002ad6:	4a09      	ldr	r2, [pc, #36]	@ (8002afc <HAL_RCC_OscConfig+0x27c>)
 8002ad8:	f023 0301 	bic.w	r3, r3, #1
 8002adc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ae0:	f7ff fa3c 	bl	8001f5c <HAL_GetTick>
 8002ae4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002ae6:	e00d      	b.n	8002b04 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ae8:	f7ff fa38 	bl	8001f5c <HAL_GetTick>
 8002aec:	4602      	mov	r2, r0
 8002aee:	693b      	ldr	r3, [r7, #16]
 8002af0:	1ad3      	subs	r3, r2, r3
 8002af2:	2b02      	cmp	r3, #2
 8002af4:	d906      	bls.n	8002b04 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002af6:	2303      	movs	r3, #3
 8002af8:	e1ca      	b.n	8002e90 <HAL_RCC_OscConfig+0x610>
 8002afa:	bf00      	nop
 8002afc:	40021000 	.word	0x40021000
 8002b00:	2000002c 	.word	0x2000002c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002b04:	4b8c      	ldr	r3, [pc, #560]	@ (8002d38 <HAL_RCC_OscConfig+0x4b8>)
 8002b06:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002b0a:	f003 0302 	and.w	r3, r3, #2
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d1ea      	bne.n	8002ae8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f003 0304 	and.w	r3, r3, #4
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	f000 80a6 	beq.w	8002c6c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b20:	2300      	movs	r3, #0
 8002b22:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002b24:	4b84      	ldr	r3, [pc, #528]	@ (8002d38 <HAL_RCC_OscConfig+0x4b8>)
 8002b26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b28:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d101      	bne.n	8002b34 <HAL_RCC_OscConfig+0x2b4>
 8002b30:	2301      	movs	r3, #1
 8002b32:	e000      	b.n	8002b36 <HAL_RCC_OscConfig+0x2b6>
 8002b34:	2300      	movs	r3, #0
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d00d      	beq.n	8002b56 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b3a:	4b7f      	ldr	r3, [pc, #508]	@ (8002d38 <HAL_RCC_OscConfig+0x4b8>)
 8002b3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b3e:	4a7e      	ldr	r2, [pc, #504]	@ (8002d38 <HAL_RCC_OscConfig+0x4b8>)
 8002b40:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b44:	6593      	str	r3, [r2, #88]	@ 0x58
 8002b46:	4b7c      	ldr	r3, [pc, #496]	@ (8002d38 <HAL_RCC_OscConfig+0x4b8>)
 8002b48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b4e:	60fb      	str	r3, [r7, #12]
 8002b50:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002b52:	2301      	movs	r3, #1
 8002b54:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b56:	4b79      	ldr	r3, [pc, #484]	@ (8002d3c <HAL_RCC_OscConfig+0x4bc>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d118      	bne.n	8002b94 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002b62:	4b76      	ldr	r3, [pc, #472]	@ (8002d3c <HAL_RCC_OscConfig+0x4bc>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4a75      	ldr	r2, [pc, #468]	@ (8002d3c <HAL_RCC_OscConfig+0x4bc>)
 8002b68:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b6c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b6e:	f7ff f9f5 	bl	8001f5c <HAL_GetTick>
 8002b72:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b74:	e008      	b.n	8002b88 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b76:	f7ff f9f1 	bl	8001f5c <HAL_GetTick>
 8002b7a:	4602      	mov	r2, r0
 8002b7c:	693b      	ldr	r3, [r7, #16]
 8002b7e:	1ad3      	subs	r3, r2, r3
 8002b80:	2b02      	cmp	r3, #2
 8002b82:	d901      	bls.n	8002b88 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002b84:	2303      	movs	r3, #3
 8002b86:	e183      	b.n	8002e90 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b88:	4b6c      	ldr	r3, [pc, #432]	@ (8002d3c <HAL_RCC_OscConfig+0x4bc>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d0f0      	beq.n	8002b76 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	689b      	ldr	r3, [r3, #8]
 8002b98:	2b01      	cmp	r3, #1
 8002b9a:	d108      	bne.n	8002bae <HAL_RCC_OscConfig+0x32e>
 8002b9c:	4b66      	ldr	r3, [pc, #408]	@ (8002d38 <HAL_RCC_OscConfig+0x4b8>)
 8002b9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ba2:	4a65      	ldr	r2, [pc, #404]	@ (8002d38 <HAL_RCC_OscConfig+0x4b8>)
 8002ba4:	f043 0301 	orr.w	r3, r3, #1
 8002ba8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002bac:	e024      	b.n	8002bf8 <HAL_RCC_OscConfig+0x378>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	689b      	ldr	r3, [r3, #8]
 8002bb2:	2b05      	cmp	r3, #5
 8002bb4:	d110      	bne.n	8002bd8 <HAL_RCC_OscConfig+0x358>
 8002bb6:	4b60      	ldr	r3, [pc, #384]	@ (8002d38 <HAL_RCC_OscConfig+0x4b8>)
 8002bb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bbc:	4a5e      	ldr	r2, [pc, #376]	@ (8002d38 <HAL_RCC_OscConfig+0x4b8>)
 8002bbe:	f043 0304 	orr.w	r3, r3, #4
 8002bc2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002bc6:	4b5c      	ldr	r3, [pc, #368]	@ (8002d38 <HAL_RCC_OscConfig+0x4b8>)
 8002bc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bcc:	4a5a      	ldr	r2, [pc, #360]	@ (8002d38 <HAL_RCC_OscConfig+0x4b8>)
 8002bce:	f043 0301 	orr.w	r3, r3, #1
 8002bd2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002bd6:	e00f      	b.n	8002bf8 <HAL_RCC_OscConfig+0x378>
 8002bd8:	4b57      	ldr	r3, [pc, #348]	@ (8002d38 <HAL_RCC_OscConfig+0x4b8>)
 8002bda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bde:	4a56      	ldr	r2, [pc, #344]	@ (8002d38 <HAL_RCC_OscConfig+0x4b8>)
 8002be0:	f023 0301 	bic.w	r3, r3, #1
 8002be4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002be8:	4b53      	ldr	r3, [pc, #332]	@ (8002d38 <HAL_RCC_OscConfig+0x4b8>)
 8002bea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bee:	4a52      	ldr	r2, [pc, #328]	@ (8002d38 <HAL_RCC_OscConfig+0x4b8>)
 8002bf0:	f023 0304 	bic.w	r3, r3, #4
 8002bf4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	689b      	ldr	r3, [r3, #8]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d016      	beq.n	8002c2e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c00:	f7ff f9ac 	bl	8001f5c <HAL_GetTick>
 8002c04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c06:	e00a      	b.n	8002c1e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c08:	f7ff f9a8 	bl	8001f5c <HAL_GetTick>
 8002c0c:	4602      	mov	r2, r0
 8002c0e:	693b      	ldr	r3, [r7, #16]
 8002c10:	1ad3      	subs	r3, r2, r3
 8002c12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d901      	bls.n	8002c1e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002c1a:	2303      	movs	r3, #3
 8002c1c:	e138      	b.n	8002e90 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c1e:	4b46      	ldr	r3, [pc, #280]	@ (8002d38 <HAL_RCC_OscConfig+0x4b8>)
 8002c20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c24:	f003 0302 	and.w	r3, r3, #2
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d0ed      	beq.n	8002c08 <HAL_RCC_OscConfig+0x388>
 8002c2c:	e015      	b.n	8002c5a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c2e:	f7ff f995 	bl	8001f5c <HAL_GetTick>
 8002c32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002c34:	e00a      	b.n	8002c4c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c36:	f7ff f991 	bl	8001f5c <HAL_GetTick>
 8002c3a:	4602      	mov	r2, r0
 8002c3c:	693b      	ldr	r3, [r7, #16]
 8002c3e:	1ad3      	subs	r3, r2, r3
 8002c40:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d901      	bls.n	8002c4c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002c48:	2303      	movs	r3, #3
 8002c4a:	e121      	b.n	8002e90 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002c4c:	4b3a      	ldr	r3, [pc, #232]	@ (8002d38 <HAL_RCC_OscConfig+0x4b8>)
 8002c4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c52:	f003 0302 	and.w	r3, r3, #2
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d1ed      	bne.n	8002c36 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002c5a:	7ffb      	ldrb	r3, [r7, #31]
 8002c5c:	2b01      	cmp	r3, #1
 8002c5e:	d105      	bne.n	8002c6c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c60:	4b35      	ldr	r3, [pc, #212]	@ (8002d38 <HAL_RCC_OscConfig+0x4b8>)
 8002c62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c64:	4a34      	ldr	r2, [pc, #208]	@ (8002d38 <HAL_RCC_OscConfig+0x4b8>)
 8002c66:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002c6a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f003 0320 	and.w	r3, r3, #32
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d03c      	beq.n	8002cf2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	699b      	ldr	r3, [r3, #24]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d01c      	beq.n	8002cba <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002c80:	4b2d      	ldr	r3, [pc, #180]	@ (8002d38 <HAL_RCC_OscConfig+0x4b8>)
 8002c82:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002c86:	4a2c      	ldr	r2, [pc, #176]	@ (8002d38 <HAL_RCC_OscConfig+0x4b8>)
 8002c88:	f043 0301 	orr.w	r3, r3, #1
 8002c8c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c90:	f7ff f964 	bl	8001f5c <HAL_GetTick>
 8002c94:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002c96:	e008      	b.n	8002caa <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002c98:	f7ff f960 	bl	8001f5c <HAL_GetTick>
 8002c9c:	4602      	mov	r2, r0
 8002c9e:	693b      	ldr	r3, [r7, #16]
 8002ca0:	1ad3      	subs	r3, r2, r3
 8002ca2:	2b02      	cmp	r3, #2
 8002ca4:	d901      	bls.n	8002caa <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002ca6:	2303      	movs	r3, #3
 8002ca8:	e0f2      	b.n	8002e90 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002caa:	4b23      	ldr	r3, [pc, #140]	@ (8002d38 <HAL_RCC_OscConfig+0x4b8>)
 8002cac:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002cb0:	f003 0302 	and.w	r3, r3, #2
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d0ef      	beq.n	8002c98 <HAL_RCC_OscConfig+0x418>
 8002cb8:	e01b      	b.n	8002cf2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002cba:	4b1f      	ldr	r3, [pc, #124]	@ (8002d38 <HAL_RCC_OscConfig+0x4b8>)
 8002cbc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002cc0:	4a1d      	ldr	r2, [pc, #116]	@ (8002d38 <HAL_RCC_OscConfig+0x4b8>)
 8002cc2:	f023 0301 	bic.w	r3, r3, #1
 8002cc6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cca:	f7ff f947 	bl	8001f5c <HAL_GetTick>
 8002cce:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002cd0:	e008      	b.n	8002ce4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002cd2:	f7ff f943 	bl	8001f5c <HAL_GetTick>
 8002cd6:	4602      	mov	r2, r0
 8002cd8:	693b      	ldr	r3, [r7, #16]
 8002cda:	1ad3      	subs	r3, r2, r3
 8002cdc:	2b02      	cmp	r3, #2
 8002cde:	d901      	bls.n	8002ce4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002ce0:	2303      	movs	r3, #3
 8002ce2:	e0d5      	b.n	8002e90 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002ce4:	4b14      	ldr	r3, [pc, #80]	@ (8002d38 <HAL_RCC_OscConfig+0x4b8>)
 8002ce6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002cea:	f003 0302 	and.w	r3, r3, #2
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d1ef      	bne.n	8002cd2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	69db      	ldr	r3, [r3, #28]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	f000 80c9 	beq.w	8002e8e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002cfc:	4b0e      	ldr	r3, [pc, #56]	@ (8002d38 <HAL_RCC_OscConfig+0x4b8>)
 8002cfe:	689b      	ldr	r3, [r3, #8]
 8002d00:	f003 030c 	and.w	r3, r3, #12
 8002d04:	2b0c      	cmp	r3, #12
 8002d06:	f000 8083 	beq.w	8002e10 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	69db      	ldr	r3, [r3, #28]
 8002d0e:	2b02      	cmp	r3, #2
 8002d10:	d15e      	bne.n	8002dd0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d12:	4b09      	ldr	r3, [pc, #36]	@ (8002d38 <HAL_RCC_OscConfig+0x4b8>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a08      	ldr	r2, [pc, #32]	@ (8002d38 <HAL_RCC_OscConfig+0x4b8>)
 8002d18:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002d1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d1e:	f7ff f91d 	bl	8001f5c <HAL_GetTick>
 8002d22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d24:	e00c      	b.n	8002d40 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d26:	f7ff f919 	bl	8001f5c <HAL_GetTick>
 8002d2a:	4602      	mov	r2, r0
 8002d2c:	693b      	ldr	r3, [r7, #16]
 8002d2e:	1ad3      	subs	r3, r2, r3
 8002d30:	2b02      	cmp	r3, #2
 8002d32:	d905      	bls.n	8002d40 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002d34:	2303      	movs	r3, #3
 8002d36:	e0ab      	b.n	8002e90 <HAL_RCC_OscConfig+0x610>
 8002d38:	40021000 	.word	0x40021000
 8002d3c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d40:	4b55      	ldr	r3, [pc, #340]	@ (8002e98 <HAL_RCC_OscConfig+0x618>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d1ec      	bne.n	8002d26 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d4c:	4b52      	ldr	r3, [pc, #328]	@ (8002e98 <HAL_RCC_OscConfig+0x618>)
 8002d4e:	68da      	ldr	r2, [r3, #12]
 8002d50:	4b52      	ldr	r3, [pc, #328]	@ (8002e9c <HAL_RCC_OscConfig+0x61c>)
 8002d52:	4013      	ands	r3, r2
 8002d54:	687a      	ldr	r2, [r7, #4]
 8002d56:	6a11      	ldr	r1, [r2, #32]
 8002d58:	687a      	ldr	r2, [r7, #4]
 8002d5a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002d5c:	3a01      	subs	r2, #1
 8002d5e:	0112      	lsls	r2, r2, #4
 8002d60:	4311      	orrs	r1, r2
 8002d62:	687a      	ldr	r2, [r7, #4]
 8002d64:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8002d66:	0212      	lsls	r2, r2, #8
 8002d68:	4311      	orrs	r1, r2
 8002d6a:	687a      	ldr	r2, [r7, #4]
 8002d6c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002d6e:	0852      	lsrs	r2, r2, #1
 8002d70:	3a01      	subs	r2, #1
 8002d72:	0552      	lsls	r2, r2, #21
 8002d74:	4311      	orrs	r1, r2
 8002d76:	687a      	ldr	r2, [r7, #4]
 8002d78:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002d7a:	0852      	lsrs	r2, r2, #1
 8002d7c:	3a01      	subs	r2, #1
 8002d7e:	0652      	lsls	r2, r2, #25
 8002d80:	4311      	orrs	r1, r2
 8002d82:	687a      	ldr	r2, [r7, #4]
 8002d84:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002d86:	06d2      	lsls	r2, r2, #27
 8002d88:	430a      	orrs	r2, r1
 8002d8a:	4943      	ldr	r1, [pc, #268]	@ (8002e98 <HAL_RCC_OscConfig+0x618>)
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d90:	4b41      	ldr	r3, [pc, #260]	@ (8002e98 <HAL_RCC_OscConfig+0x618>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a40      	ldr	r2, [pc, #256]	@ (8002e98 <HAL_RCC_OscConfig+0x618>)
 8002d96:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002d9a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002d9c:	4b3e      	ldr	r3, [pc, #248]	@ (8002e98 <HAL_RCC_OscConfig+0x618>)
 8002d9e:	68db      	ldr	r3, [r3, #12]
 8002da0:	4a3d      	ldr	r2, [pc, #244]	@ (8002e98 <HAL_RCC_OscConfig+0x618>)
 8002da2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002da6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002da8:	f7ff f8d8 	bl	8001f5c <HAL_GetTick>
 8002dac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002dae:	e008      	b.n	8002dc2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002db0:	f7ff f8d4 	bl	8001f5c <HAL_GetTick>
 8002db4:	4602      	mov	r2, r0
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	1ad3      	subs	r3, r2, r3
 8002dba:	2b02      	cmp	r3, #2
 8002dbc:	d901      	bls.n	8002dc2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002dbe:	2303      	movs	r3, #3
 8002dc0:	e066      	b.n	8002e90 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002dc2:	4b35      	ldr	r3, [pc, #212]	@ (8002e98 <HAL_RCC_OscConfig+0x618>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d0f0      	beq.n	8002db0 <HAL_RCC_OscConfig+0x530>
 8002dce:	e05e      	b.n	8002e8e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dd0:	4b31      	ldr	r3, [pc, #196]	@ (8002e98 <HAL_RCC_OscConfig+0x618>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a30      	ldr	r2, [pc, #192]	@ (8002e98 <HAL_RCC_OscConfig+0x618>)
 8002dd6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002dda:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ddc:	f7ff f8be 	bl	8001f5c <HAL_GetTick>
 8002de0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002de2:	e008      	b.n	8002df6 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002de4:	f7ff f8ba 	bl	8001f5c <HAL_GetTick>
 8002de8:	4602      	mov	r2, r0
 8002dea:	693b      	ldr	r3, [r7, #16]
 8002dec:	1ad3      	subs	r3, r2, r3
 8002dee:	2b02      	cmp	r3, #2
 8002df0:	d901      	bls.n	8002df6 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8002df2:	2303      	movs	r3, #3
 8002df4:	e04c      	b.n	8002e90 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002df6:	4b28      	ldr	r3, [pc, #160]	@ (8002e98 <HAL_RCC_OscConfig+0x618>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d1f0      	bne.n	8002de4 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002e02:	4b25      	ldr	r3, [pc, #148]	@ (8002e98 <HAL_RCC_OscConfig+0x618>)
 8002e04:	68da      	ldr	r2, [r3, #12]
 8002e06:	4924      	ldr	r1, [pc, #144]	@ (8002e98 <HAL_RCC_OscConfig+0x618>)
 8002e08:	4b25      	ldr	r3, [pc, #148]	@ (8002ea0 <HAL_RCC_OscConfig+0x620>)
 8002e0a:	4013      	ands	r3, r2
 8002e0c:	60cb      	str	r3, [r1, #12]
 8002e0e:	e03e      	b.n	8002e8e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	69db      	ldr	r3, [r3, #28]
 8002e14:	2b01      	cmp	r3, #1
 8002e16:	d101      	bne.n	8002e1c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	e039      	b.n	8002e90 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002e1c:	4b1e      	ldr	r3, [pc, #120]	@ (8002e98 <HAL_RCC_OscConfig+0x618>)
 8002e1e:	68db      	ldr	r3, [r3, #12]
 8002e20:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e22:	697b      	ldr	r3, [r7, #20]
 8002e24:	f003 0203 	and.w	r2, r3, #3
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6a1b      	ldr	r3, [r3, #32]
 8002e2c:	429a      	cmp	r2, r3
 8002e2e:	d12c      	bne.n	8002e8a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002e30:	697b      	ldr	r3, [r7, #20]
 8002e32:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e3a:	3b01      	subs	r3, #1
 8002e3c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e3e:	429a      	cmp	r2, r3
 8002e40:	d123      	bne.n	8002e8a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e42:	697b      	ldr	r3, [r7, #20]
 8002e44:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e4c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002e4e:	429a      	cmp	r2, r3
 8002e50:	d11b      	bne.n	8002e8a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002e52:	697b      	ldr	r3, [r7, #20]
 8002e54:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e5c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e5e:	429a      	cmp	r2, r3
 8002e60:	d113      	bne.n	8002e8a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e62:	697b      	ldr	r3, [r7, #20]
 8002e64:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e6c:	085b      	lsrs	r3, r3, #1
 8002e6e:	3b01      	subs	r3, #1
 8002e70:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002e72:	429a      	cmp	r2, r3
 8002e74:	d109      	bne.n	8002e8a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002e76:	697b      	ldr	r3, [r7, #20]
 8002e78:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e80:	085b      	lsrs	r3, r3, #1
 8002e82:	3b01      	subs	r3, #1
 8002e84:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e86:	429a      	cmp	r2, r3
 8002e88:	d001      	beq.n	8002e8e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	e000      	b.n	8002e90 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8002e8e:	2300      	movs	r3, #0
}
 8002e90:	4618      	mov	r0, r3
 8002e92:	3720      	adds	r7, #32
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bd80      	pop	{r7, pc}
 8002e98:	40021000 	.word	0x40021000
 8002e9c:	019f800c 	.word	0x019f800c
 8002ea0:	feeefffc 	.word	0xfeeefffc

08002ea4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b086      	sub	sp, #24
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
 8002eac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d101      	bne.n	8002ebc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002eb8:	2301      	movs	r3, #1
 8002eba:	e11e      	b.n	80030fa <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002ebc:	4b91      	ldr	r3, [pc, #580]	@ (8003104 <HAL_RCC_ClockConfig+0x260>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f003 030f 	and.w	r3, r3, #15
 8002ec4:	683a      	ldr	r2, [r7, #0]
 8002ec6:	429a      	cmp	r2, r3
 8002ec8:	d910      	bls.n	8002eec <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002eca:	4b8e      	ldr	r3, [pc, #568]	@ (8003104 <HAL_RCC_ClockConfig+0x260>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f023 020f 	bic.w	r2, r3, #15
 8002ed2:	498c      	ldr	r1, [pc, #560]	@ (8003104 <HAL_RCC_ClockConfig+0x260>)
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002eda:	4b8a      	ldr	r3, [pc, #552]	@ (8003104 <HAL_RCC_ClockConfig+0x260>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f003 030f 	and.w	r3, r3, #15
 8002ee2:	683a      	ldr	r2, [r7, #0]
 8002ee4:	429a      	cmp	r2, r3
 8002ee6:	d001      	beq.n	8002eec <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002ee8:	2301      	movs	r3, #1
 8002eea:	e106      	b.n	80030fa <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f003 0301 	and.w	r3, r3, #1
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d073      	beq.n	8002fe0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	2b03      	cmp	r3, #3
 8002efe:	d129      	bne.n	8002f54 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f00:	4b81      	ldr	r3, [pc, #516]	@ (8003108 <HAL_RCC_ClockConfig+0x264>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d101      	bne.n	8002f10 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	e0f4      	b.n	80030fa <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002f10:	f000 f99e 	bl	8003250 <RCC_GetSysClockFreqFromPLLSource>
 8002f14:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002f16:	693b      	ldr	r3, [r7, #16]
 8002f18:	4a7c      	ldr	r2, [pc, #496]	@ (800310c <HAL_RCC_ClockConfig+0x268>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d93f      	bls.n	8002f9e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002f1e:	4b7a      	ldr	r3, [pc, #488]	@ (8003108 <HAL_RCC_ClockConfig+0x264>)
 8002f20:	689b      	ldr	r3, [r3, #8]
 8002f22:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d009      	beq.n	8002f3e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d033      	beq.n	8002f9e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d12f      	bne.n	8002f9e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002f3e:	4b72      	ldr	r3, [pc, #456]	@ (8003108 <HAL_RCC_ClockConfig+0x264>)
 8002f40:	689b      	ldr	r3, [r3, #8]
 8002f42:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002f46:	4a70      	ldr	r2, [pc, #448]	@ (8003108 <HAL_RCC_ClockConfig+0x264>)
 8002f48:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002f4c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002f4e:	2380      	movs	r3, #128	@ 0x80
 8002f50:	617b      	str	r3, [r7, #20]
 8002f52:	e024      	b.n	8002f9e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	2b02      	cmp	r3, #2
 8002f5a:	d107      	bne.n	8002f6c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f5c:	4b6a      	ldr	r3, [pc, #424]	@ (8003108 <HAL_RCC_ClockConfig+0x264>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d109      	bne.n	8002f7c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002f68:	2301      	movs	r3, #1
 8002f6a:	e0c6      	b.n	80030fa <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f6c:	4b66      	ldr	r3, [pc, #408]	@ (8003108 <HAL_RCC_ClockConfig+0x264>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d101      	bne.n	8002f7c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	e0be      	b.n	80030fa <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002f7c:	f000 f8ce 	bl	800311c <HAL_RCC_GetSysClockFreq>
 8002f80:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002f82:	693b      	ldr	r3, [r7, #16]
 8002f84:	4a61      	ldr	r2, [pc, #388]	@ (800310c <HAL_RCC_ClockConfig+0x268>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d909      	bls.n	8002f9e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002f8a:	4b5f      	ldr	r3, [pc, #380]	@ (8003108 <HAL_RCC_ClockConfig+0x264>)
 8002f8c:	689b      	ldr	r3, [r3, #8]
 8002f8e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002f92:	4a5d      	ldr	r2, [pc, #372]	@ (8003108 <HAL_RCC_ClockConfig+0x264>)
 8002f94:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002f98:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002f9a:	2380      	movs	r3, #128	@ 0x80
 8002f9c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002f9e:	4b5a      	ldr	r3, [pc, #360]	@ (8003108 <HAL_RCC_ClockConfig+0x264>)
 8002fa0:	689b      	ldr	r3, [r3, #8]
 8002fa2:	f023 0203 	bic.w	r2, r3, #3
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	4957      	ldr	r1, [pc, #348]	@ (8003108 <HAL_RCC_ClockConfig+0x264>)
 8002fac:	4313      	orrs	r3, r2
 8002fae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002fb0:	f7fe ffd4 	bl	8001f5c <HAL_GetTick>
 8002fb4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fb6:	e00a      	b.n	8002fce <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fb8:	f7fe ffd0 	bl	8001f5c <HAL_GetTick>
 8002fbc:	4602      	mov	r2, r0
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	1ad3      	subs	r3, r2, r3
 8002fc2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d901      	bls.n	8002fce <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002fca:	2303      	movs	r3, #3
 8002fcc:	e095      	b.n	80030fa <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fce:	4b4e      	ldr	r3, [pc, #312]	@ (8003108 <HAL_RCC_ClockConfig+0x264>)
 8002fd0:	689b      	ldr	r3, [r3, #8]
 8002fd2:	f003 020c 	and.w	r2, r3, #12
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	009b      	lsls	r3, r3, #2
 8002fdc:	429a      	cmp	r2, r3
 8002fde:	d1eb      	bne.n	8002fb8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f003 0302 	and.w	r3, r3, #2
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d023      	beq.n	8003034 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f003 0304 	and.w	r3, r3, #4
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d005      	beq.n	8003004 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ff8:	4b43      	ldr	r3, [pc, #268]	@ (8003108 <HAL_RCC_ClockConfig+0x264>)
 8002ffa:	689b      	ldr	r3, [r3, #8]
 8002ffc:	4a42      	ldr	r2, [pc, #264]	@ (8003108 <HAL_RCC_ClockConfig+0x264>)
 8002ffe:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003002:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f003 0308 	and.w	r3, r3, #8
 800300c:	2b00      	cmp	r3, #0
 800300e:	d007      	beq.n	8003020 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003010:	4b3d      	ldr	r3, [pc, #244]	@ (8003108 <HAL_RCC_ClockConfig+0x264>)
 8003012:	689b      	ldr	r3, [r3, #8]
 8003014:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003018:	4a3b      	ldr	r2, [pc, #236]	@ (8003108 <HAL_RCC_ClockConfig+0x264>)
 800301a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800301e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003020:	4b39      	ldr	r3, [pc, #228]	@ (8003108 <HAL_RCC_ClockConfig+0x264>)
 8003022:	689b      	ldr	r3, [r3, #8]
 8003024:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	689b      	ldr	r3, [r3, #8]
 800302c:	4936      	ldr	r1, [pc, #216]	@ (8003108 <HAL_RCC_ClockConfig+0x264>)
 800302e:	4313      	orrs	r3, r2
 8003030:	608b      	str	r3, [r1, #8]
 8003032:	e008      	b.n	8003046 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003034:	697b      	ldr	r3, [r7, #20]
 8003036:	2b80      	cmp	r3, #128	@ 0x80
 8003038:	d105      	bne.n	8003046 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800303a:	4b33      	ldr	r3, [pc, #204]	@ (8003108 <HAL_RCC_ClockConfig+0x264>)
 800303c:	689b      	ldr	r3, [r3, #8]
 800303e:	4a32      	ldr	r2, [pc, #200]	@ (8003108 <HAL_RCC_ClockConfig+0x264>)
 8003040:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003044:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003046:	4b2f      	ldr	r3, [pc, #188]	@ (8003104 <HAL_RCC_ClockConfig+0x260>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f003 030f 	and.w	r3, r3, #15
 800304e:	683a      	ldr	r2, [r7, #0]
 8003050:	429a      	cmp	r2, r3
 8003052:	d21d      	bcs.n	8003090 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003054:	4b2b      	ldr	r3, [pc, #172]	@ (8003104 <HAL_RCC_ClockConfig+0x260>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f023 020f 	bic.w	r2, r3, #15
 800305c:	4929      	ldr	r1, [pc, #164]	@ (8003104 <HAL_RCC_ClockConfig+0x260>)
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	4313      	orrs	r3, r2
 8003062:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003064:	f7fe ff7a 	bl	8001f5c <HAL_GetTick>
 8003068:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800306a:	e00a      	b.n	8003082 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800306c:	f7fe ff76 	bl	8001f5c <HAL_GetTick>
 8003070:	4602      	mov	r2, r0
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	1ad3      	subs	r3, r2, r3
 8003076:	f241 3288 	movw	r2, #5000	@ 0x1388
 800307a:	4293      	cmp	r3, r2
 800307c:	d901      	bls.n	8003082 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800307e:	2303      	movs	r3, #3
 8003080:	e03b      	b.n	80030fa <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003082:	4b20      	ldr	r3, [pc, #128]	@ (8003104 <HAL_RCC_ClockConfig+0x260>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f003 030f 	and.w	r3, r3, #15
 800308a:	683a      	ldr	r2, [r7, #0]
 800308c:	429a      	cmp	r2, r3
 800308e:	d1ed      	bne.n	800306c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f003 0304 	and.w	r3, r3, #4
 8003098:	2b00      	cmp	r3, #0
 800309a:	d008      	beq.n	80030ae <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800309c:	4b1a      	ldr	r3, [pc, #104]	@ (8003108 <HAL_RCC_ClockConfig+0x264>)
 800309e:	689b      	ldr	r3, [r3, #8]
 80030a0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	68db      	ldr	r3, [r3, #12]
 80030a8:	4917      	ldr	r1, [pc, #92]	@ (8003108 <HAL_RCC_ClockConfig+0x264>)
 80030aa:	4313      	orrs	r3, r2
 80030ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f003 0308 	and.w	r3, r3, #8
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d009      	beq.n	80030ce <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80030ba:	4b13      	ldr	r3, [pc, #76]	@ (8003108 <HAL_RCC_ClockConfig+0x264>)
 80030bc:	689b      	ldr	r3, [r3, #8]
 80030be:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	691b      	ldr	r3, [r3, #16]
 80030c6:	00db      	lsls	r3, r3, #3
 80030c8:	490f      	ldr	r1, [pc, #60]	@ (8003108 <HAL_RCC_ClockConfig+0x264>)
 80030ca:	4313      	orrs	r3, r2
 80030cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80030ce:	f000 f825 	bl	800311c <HAL_RCC_GetSysClockFreq>
 80030d2:	4602      	mov	r2, r0
 80030d4:	4b0c      	ldr	r3, [pc, #48]	@ (8003108 <HAL_RCC_ClockConfig+0x264>)
 80030d6:	689b      	ldr	r3, [r3, #8]
 80030d8:	091b      	lsrs	r3, r3, #4
 80030da:	f003 030f 	and.w	r3, r3, #15
 80030de:	490c      	ldr	r1, [pc, #48]	@ (8003110 <HAL_RCC_ClockConfig+0x26c>)
 80030e0:	5ccb      	ldrb	r3, [r1, r3]
 80030e2:	f003 031f 	and.w	r3, r3, #31
 80030e6:	fa22 f303 	lsr.w	r3, r2, r3
 80030ea:	4a0a      	ldr	r2, [pc, #40]	@ (8003114 <HAL_RCC_ClockConfig+0x270>)
 80030ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80030ee:	4b0a      	ldr	r3, [pc, #40]	@ (8003118 <HAL_RCC_ClockConfig+0x274>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4618      	mov	r0, r3
 80030f4:	f7fe fee6 	bl	8001ec4 <HAL_InitTick>
 80030f8:	4603      	mov	r3, r0
}
 80030fa:	4618      	mov	r0, r3
 80030fc:	3718      	adds	r7, #24
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}
 8003102:	bf00      	nop
 8003104:	40022000 	.word	0x40022000
 8003108:	40021000 	.word	0x40021000
 800310c:	04c4b400 	.word	0x04c4b400
 8003110:	08005fa4 	.word	0x08005fa4
 8003114:	20000028 	.word	0x20000028
 8003118:	2000002c 	.word	0x2000002c

0800311c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800311c:	b480      	push	{r7}
 800311e:	b087      	sub	sp, #28
 8003120:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003122:	4b2c      	ldr	r3, [pc, #176]	@ (80031d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003124:	689b      	ldr	r3, [r3, #8]
 8003126:	f003 030c 	and.w	r3, r3, #12
 800312a:	2b04      	cmp	r3, #4
 800312c:	d102      	bne.n	8003134 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800312e:	4b2a      	ldr	r3, [pc, #168]	@ (80031d8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003130:	613b      	str	r3, [r7, #16]
 8003132:	e047      	b.n	80031c4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003134:	4b27      	ldr	r3, [pc, #156]	@ (80031d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003136:	689b      	ldr	r3, [r3, #8]
 8003138:	f003 030c 	and.w	r3, r3, #12
 800313c:	2b08      	cmp	r3, #8
 800313e:	d102      	bne.n	8003146 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003140:	4b26      	ldr	r3, [pc, #152]	@ (80031dc <HAL_RCC_GetSysClockFreq+0xc0>)
 8003142:	613b      	str	r3, [r7, #16]
 8003144:	e03e      	b.n	80031c4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003146:	4b23      	ldr	r3, [pc, #140]	@ (80031d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003148:	689b      	ldr	r3, [r3, #8]
 800314a:	f003 030c 	and.w	r3, r3, #12
 800314e:	2b0c      	cmp	r3, #12
 8003150:	d136      	bne.n	80031c0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003152:	4b20      	ldr	r3, [pc, #128]	@ (80031d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003154:	68db      	ldr	r3, [r3, #12]
 8003156:	f003 0303 	and.w	r3, r3, #3
 800315a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800315c:	4b1d      	ldr	r3, [pc, #116]	@ (80031d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800315e:	68db      	ldr	r3, [r3, #12]
 8003160:	091b      	lsrs	r3, r3, #4
 8003162:	f003 030f 	and.w	r3, r3, #15
 8003166:	3301      	adds	r3, #1
 8003168:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	2b03      	cmp	r3, #3
 800316e:	d10c      	bne.n	800318a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003170:	4a1a      	ldr	r2, [pc, #104]	@ (80031dc <HAL_RCC_GetSysClockFreq+0xc0>)
 8003172:	68bb      	ldr	r3, [r7, #8]
 8003174:	fbb2 f3f3 	udiv	r3, r2, r3
 8003178:	4a16      	ldr	r2, [pc, #88]	@ (80031d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800317a:	68d2      	ldr	r2, [r2, #12]
 800317c:	0a12      	lsrs	r2, r2, #8
 800317e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003182:	fb02 f303 	mul.w	r3, r2, r3
 8003186:	617b      	str	r3, [r7, #20]
      break;
 8003188:	e00c      	b.n	80031a4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800318a:	4a13      	ldr	r2, [pc, #76]	@ (80031d8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800318c:	68bb      	ldr	r3, [r7, #8]
 800318e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003192:	4a10      	ldr	r2, [pc, #64]	@ (80031d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003194:	68d2      	ldr	r2, [r2, #12]
 8003196:	0a12      	lsrs	r2, r2, #8
 8003198:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800319c:	fb02 f303 	mul.w	r3, r2, r3
 80031a0:	617b      	str	r3, [r7, #20]
      break;
 80031a2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80031a4:	4b0b      	ldr	r3, [pc, #44]	@ (80031d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80031a6:	68db      	ldr	r3, [r3, #12]
 80031a8:	0e5b      	lsrs	r3, r3, #25
 80031aa:	f003 0303 	and.w	r3, r3, #3
 80031ae:	3301      	adds	r3, #1
 80031b0:	005b      	lsls	r3, r3, #1
 80031b2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80031b4:	697a      	ldr	r2, [r7, #20]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80031bc:	613b      	str	r3, [r7, #16]
 80031be:	e001      	b.n	80031c4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80031c0:	2300      	movs	r3, #0
 80031c2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80031c4:	693b      	ldr	r3, [r7, #16]
}
 80031c6:	4618      	mov	r0, r3
 80031c8:	371c      	adds	r7, #28
 80031ca:	46bd      	mov	sp, r7
 80031cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d0:	4770      	bx	lr
 80031d2:	bf00      	nop
 80031d4:	40021000 	.word	0x40021000
 80031d8:	00f42400 	.word	0x00f42400
 80031dc:	007a1200 	.word	0x007a1200

080031e0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031e0:	b480      	push	{r7}
 80031e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80031e4:	4b03      	ldr	r3, [pc, #12]	@ (80031f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80031e6:	681b      	ldr	r3, [r3, #0]
}
 80031e8:	4618      	mov	r0, r3
 80031ea:	46bd      	mov	sp, r7
 80031ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f0:	4770      	bx	lr
 80031f2:	bf00      	nop
 80031f4:	20000028 	.word	0x20000028

080031f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80031fc:	f7ff fff0 	bl	80031e0 <HAL_RCC_GetHCLKFreq>
 8003200:	4602      	mov	r2, r0
 8003202:	4b06      	ldr	r3, [pc, #24]	@ (800321c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003204:	689b      	ldr	r3, [r3, #8]
 8003206:	0a1b      	lsrs	r3, r3, #8
 8003208:	f003 0307 	and.w	r3, r3, #7
 800320c:	4904      	ldr	r1, [pc, #16]	@ (8003220 <HAL_RCC_GetPCLK1Freq+0x28>)
 800320e:	5ccb      	ldrb	r3, [r1, r3]
 8003210:	f003 031f 	and.w	r3, r3, #31
 8003214:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003218:	4618      	mov	r0, r3
 800321a:	bd80      	pop	{r7, pc}
 800321c:	40021000 	.word	0x40021000
 8003220:	08005fb4 	.word	0x08005fb4

08003224 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003228:	f7ff ffda 	bl	80031e0 <HAL_RCC_GetHCLKFreq>
 800322c:	4602      	mov	r2, r0
 800322e:	4b06      	ldr	r3, [pc, #24]	@ (8003248 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003230:	689b      	ldr	r3, [r3, #8]
 8003232:	0adb      	lsrs	r3, r3, #11
 8003234:	f003 0307 	and.w	r3, r3, #7
 8003238:	4904      	ldr	r1, [pc, #16]	@ (800324c <HAL_RCC_GetPCLK2Freq+0x28>)
 800323a:	5ccb      	ldrb	r3, [r1, r3]
 800323c:	f003 031f 	and.w	r3, r3, #31
 8003240:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003244:	4618      	mov	r0, r3
 8003246:	bd80      	pop	{r7, pc}
 8003248:	40021000 	.word	0x40021000
 800324c:	08005fb4 	.word	0x08005fb4

08003250 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003250:	b480      	push	{r7}
 8003252:	b087      	sub	sp, #28
 8003254:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003256:	4b1e      	ldr	r3, [pc, #120]	@ (80032d0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003258:	68db      	ldr	r3, [r3, #12]
 800325a:	f003 0303 	and.w	r3, r3, #3
 800325e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003260:	4b1b      	ldr	r3, [pc, #108]	@ (80032d0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003262:	68db      	ldr	r3, [r3, #12]
 8003264:	091b      	lsrs	r3, r3, #4
 8003266:	f003 030f 	and.w	r3, r3, #15
 800326a:	3301      	adds	r3, #1
 800326c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	2b03      	cmp	r3, #3
 8003272:	d10c      	bne.n	800328e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003274:	4a17      	ldr	r2, [pc, #92]	@ (80032d4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	fbb2 f3f3 	udiv	r3, r2, r3
 800327c:	4a14      	ldr	r2, [pc, #80]	@ (80032d0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800327e:	68d2      	ldr	r2, [r2, #12]
 8003280:	0a12      	lsrs	r2, r2, #8
 8003282:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003286:	fb02 f303 	mul.w	r3, r2, r3
 800328a:	617b      	str	r3, [r7, #20]
    break;
 800328c:	e00c      	b.n	80032a8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800328e:	4a12      	ldr	r2, [pc, #72]	@ (80032d8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	fbb2 f3f3 	udiv	r3, r2, r3
 8003296:	4a0e      	ldr	r2, [pc, #56]	@ (80032d0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003298:	68d2      	ldr	r2, [r2, #12]
 800329a:	0a12      	lsrs	r2, r2, #8
 800329c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80032a0:	fb02 f303 	mul.w	r3, r2, r3
 80032a4:	617b      	str	r3, [r7, #20]
    break;
 80032a6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80032a8:	4b09      	ldr	r3, [pc, #36]	@ (80032d0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80032aa:	68db      	ldr	r3, [r3, #12]
 80032ac:	0e5b      	lsrs	r3, r3, #25
 80032ae:	f003 0303 	and.w	r3, r3, #3
 80032b2:	3301      	adds	r3, #1
 80032b4:	005b      	lsls	r3, r3, #1
 80032b6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80032b8:	697a      	ldr	r2, [r7, #20]
 80032ba:	68bb      	ldr	r3, [r7, #8]
 80032bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80032c0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80032c2:	687b      	ldr	r3, [r7, #4]
}
 80032c4:	4618      	mov	r0, r3
 80032c6:	371c      	adds	r7, #28
 80032c8:	46bd      	mov	sp, r7
 80032ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ce:	4770      	bx	lr
 80032d0:	40021000 	.word	0x40021000
 80032d4:	007a1200 	.word	0x007a1200
 80032d8:	00f42400 	.word	0x00f42400

080032dc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b086      	sub	sp, #24
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80032e4:	2300      	movs	r3, #0
 80032e6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80032e8:	2300      	movs	r3, #0
 80032ea:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	f000 8098 	beq.w	800342a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032fa:	2300      	movs	r3, #0
 80032fc:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032fe:	4b43      	ldr	r3, [pc, #268]	@ (800340c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003300:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003302:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003306:	2b00      	cmp	r3, #0
 8003308:	d10d      	bne.n	8003326 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800330a:	4b40      	ldr	r3, [pc, #256]	@ (800340c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800330c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800330e:	4a3f      	ldr	r2, [pc, #252]	@ (800340c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003310:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003314:	6593      	str	r3, [r2, #88]	@ 0x58
 8003316:	4b3d      	ldr	r3, [pc, #244]	@ (800340c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003318:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800331a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800331e:	60bb      	str	r3, [r7, #8]
 8003320:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003322:	2301      	movs	r3, #1
 8003324:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003326:	4b3a      	ldr	r3, [pc, #232]	@ (8003410 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4a39      	ldr	r2, [pc, #228]	@ (8003410 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800332c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003330:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003332:	f7fe fe13 	bl	8001f5c <HAL_GetTick>
 8003336:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003338:	e009      	b.n	800334e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800333a:	f7fe fe0f 	bl	8001f5c <HAL_GetTick>
 800333e:	4602      	mov	r2, r0
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	1ad3      	subs	r3, r2, r3
 8003344:	2b02      	cmp	r3, #2
 8003346:	d902      	bls.n	800334e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003348:	2303      	movs	r3, #3
 800334a:	74fb      	strb	r3, [r7, #19]
        break;
 800334c:	e005      	b.n	800335a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800334e:	4b30      	ldr	r3, [pc, #192]	@ (8003410 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003356:	2b00      	cmp	r3, #0
 8003358:	d0ef      	beq.n	800333a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800335a:	7cfb      	ldrb	r3, [r7, #19]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d159      	bne.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003360:	4b2a      	ldr	r3, [pc, #168]	@ (800340c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003362:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003366:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800336a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800336c:	697b      	ldr	r3, [r7, #20]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d01e      	beq.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003376:	697a      	ldr	r2, [r7, #20]
 8003378:	429a      	cmp	r2, r3
 800337a:	d019      	beq.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800337c:	4b23      	ldr	r3, [pc, #140]	@ (800340c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800337e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003382:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003386:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003388:	4b20      	ldr	r3, [pc, #128]	@ (800340c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800338a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800338e:	4a1f      	ldr	r2, [pc, #124]	@ (800340c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003390:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003394:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003398:	4b1c      	ldr	r3, [pc, #112]	@ (800340c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800339a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800339e:	4a1b      	ldr	r2, [pc, #108]	@ (800340c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80033a0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80033a4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80033a8:	4a18      	ldr	r2, [pc, #96]	@ (800340c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80033aa:	697b      	ldr	r3, [r7, #20]
 80033ac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80033b0:	697b      	ldr	r3, [r7, #20]
 80033b2:	f003 0301 	and.w	r3, r3, #1
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d016      	beq.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033ba:	f7fe fdcf 	bl	8001f5c <HAL_GetTick>
 80033be:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80033c0:	e00b      	b.n	80033da <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033c2:	f7fe fdcb 	bl	8001f5c <HAL_GetTick>
 80033c6:	4602      	mov	r2, r0
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	1ad3      	subs	r3, r2, r3
 80033cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d902      	bls.n	80033da <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80033d4:	2303      	movs	r3, #3
 80033d6:	74fb      	strb	r3, [r7, #19]
            break;
 80033d8:	e006      	b.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80033da:	4b0c      	ldr	r3, [pc, #48]	@ (800340c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80033dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033e0:	f003 0302 	and.w	r3, r3, #2
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d0ec      	beq.n	80033c2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80033e8:	7cfb      	ldrb	r3, [r7, #19]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d10b      	bne.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80033ee:	4b07      	ldr	r3, [pc, #28]	@ (800340c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80033f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033f4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033fc:	4903      	ldr	r1, [pc, #12]	@ (800340c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80033fe:	4313      	orrs	r3, r2
 8003400:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003404:	e008      	b.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003406:	7cfb      	ldrb	r3, [r7, #19]
 8003408:	74bb      	strb	r3, [r7, #18]
 800340a:	e005      	b.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800340c:	40021000 	.word	0x40021000
 8003410:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003414:	7cfb      	ldrb	r3, [r7, #19]
 8003416:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003418:	7c7b      	ldrb	r3, [r7, #17]
 800341a:	2b01      	cmp	r3, #1
 800341c:	d105      	bne.n	800342a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800341e:	4ba6      	ldr	r3, [pc, #664]	@ (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003420:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003422:	4aa5      	ldr	r2, [pc, #660]	@ (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003424:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003428:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f003 0301 	and.w	r3, r3, #1
 8003432:	2b00      	cmp	r3, #0
 8003434:	d00a      	beq.n	800344c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003436:	4ba0      	ldr	r3, [pc, #640]	@ (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003438:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800343c:	f023 0203 	bic.w	r2, r3, #3
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	499c      	ldr	r1, [pc, #624]	@ (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003446:	4313      	orrs	r3, r2
 8003448:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f003 0302 	and.w	r3, r3, #2
 8003454:	2b00      	cmp	r3, #0
 8003456:	d00a      	beq.n	800346e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003458:	4b97      	ldr	r3, [pc, #604]	@ (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800345a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800345e:	f023 020c 	bic.w	r2, r3, #12
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	689b      	ldr	r3, [r3, #8]
 8003466:	4994      	ldr	r1, [pc, #592]	@ (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003468:	4313      	orrs	r3, r2
 800346a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f003 0304 	and.w	r3, r3, #4
 8003476:	2b00      	cmp	r3, #0
 8003478:	d00a      	beq.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800347a:	4b8f      	ldr	r3, [pc, #572]	@ (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800347c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003480:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	68db      	ldr	r3, [r3, #12]
 8003488:	498b      	ldr	r1, [pc, #556]	@ (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800348a:	4313      	orrs	r3, r2
 800348c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f003 0308 	and.w	r3, r3, #8
 8003498:	2b00      	cmp	r3, #0
 800349a:	d00a      	beq.n	80034b2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800349c:	4b86      	ldr	r3, [pc, #536]	@ (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800349e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034a2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	691b      	ldr	r3, [r3, #16]
 80034aa:	4983      	ldr	r1, [pc, #524]	@ (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80034ac:	4313      	orrs	r3, r2
 80034ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f003 0320 	and.w	r3, r3, #32
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d00a      	beq.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80034be:	4b7e      	ldr	r3, [pc, #504]	@ (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80034c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034c4:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	695b      	ldr	r3, [r3, #20]
 80034cc:	497a      	ldr	r1, [pc, #488]	@ (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80034ce:	4313      	orrs	r3, r2
 80034d0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d00a      	beq.n	80034f6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80034e0:	4b75      	ldr	r3, [pc, #468]	@ (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80034e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034e6:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	699b      	ldr	r3, [r3, #24]
 80034ee:	4972      	ldr	r1, [pc, #456]	@ (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80034f0:	4313      	orrs	r3, r2
 80034f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d00a      	beq.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003502:	4b6d      	ldr	r3, [pc, #436]	@ (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003504:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003508:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	69db      	ldr	r3, [r3, #28]
 8003510:	4969      	ldr	r1, [pc, #420]	@ (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003512:	4313      	orrs	r3, r2
 8003514:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003520:	2b00      	cmp	r3, #0
 8003522:	d00a      	beq.n	800353a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003524:	4b64      	ldr	r3, [pc, #400]	@ (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003526:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800352a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6a1b      	ldr	r3, [r3, #32]
 8003532:	4961      	ldr	r1, [pc, #388]	@ (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003534:	4313      	orrs	r3, r2
 8003536:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003542:	2b00      	cmp	r3, #0
 8003544:	d00a      	beq.n	800355c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003546:	4b5c      	ldr	r3, [pc, #368]	@ (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003548:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800354c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003554:	4958      	ldr	r1, [pc, #352]	@ (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003556:	4313      	orrs	r3, r2
 8003558:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003564:	2b00      	cmp	r3, #0
 8003566:	d015      	beq.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003568:	4b53      	ldr	r3, [pc, #332]	@ (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800356a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800356e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003576:	4950      	ldr	r1, [pc, #320]	@ (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003578:	4313      	orrs	r3, r2
 800357a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003582:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003586:	d105      	bne.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003588:	4b4b      	ldr	r3, [pc, #300]	@ (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800358a:	68db      	ldr	r3, [r3, #12]
 800358c:	4a4a      	ldr	r2, [pc, #296]	@ (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800358e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003592:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800359c:	2b00      	cmp	r3, #0
 800359e:	d015      	beq.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80035a0:	4b45      	ldr	r3, [pc, #276]	@ (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80035a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035a6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035ae:	4942      	ldr	r1, [pc, #264]	@ (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80035b0:	4313      	orrs	r3, r2
 80035b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035ba:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80035be:	d105      	bne.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80035c0:	4b3d      	ldr	r3, [pc, #244]	@ (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80035c2:	68db      	ldr	r3, [r3, #12]
 80035c4:	4a3c      	ldr	r2, [pc, #240]	@ (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80035c6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80035ca:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d015      	beq.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80035d8:	4b37      	ldr	r3, [pc, #220]	@ (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80035da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035de:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035e6:	4934      	ldr	r1, [pc, #208]	@ (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80035e8:	4313      	orrs	r3, r2
 80035ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035f2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80035f6:	d105      	bne.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80035f8:	4b2f      	ldr	r3, [pc, #188]	@ (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80035fa:	68db      	ldr	r3, [r3, #12]
 80035fc:	4a2e      	ldr	r2, [pc, #184]	@ (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80035fe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003602:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800360c:	2b00      	cmp	r3, #0
 800360e:	d015      	beq.n	800363c <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003610:	4b29      	ldr	r3, [pc, #164]	@ (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003612:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003616:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800361e:	4926      	ldr	r1, [pc, #152]	@ (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003620:	4313      	orrs	r3, r2
 8003622:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800362a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800362e:	d105      	bne.n	800363c <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003630:	4b21      	ldr	r3, [pc, #132]	@ (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003632:	68db      	ldr	r3, [r3, #12]
 8003634:	4a20      	ldr	r2, [pc, #128]	@ (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003636:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800363a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003644:	2b00      	cmp	r3, #0
 8003646:	d015      	beq.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003648:	4b1b      	ldr	r3, [pc, #108]	@ (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800364a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800364e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003656:	4918      	ldr	r1, [pc, #96]	@ (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003658:	4313      	orrs	r3, r2
 800365a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003662:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003666:	d105      	bne.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003668:	4b13      	ldr	r3, [pc, #76]	@ (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800366a:	68db      	ldr	r3, [r3, #12]
 800366c:	4a12      	ldr	r2, [pc, #72]	@ (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800366e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003672:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800367c:	2b00      	cmp	r3, #0
 800367e:	d015      	beq.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003680:	4b0d      	ldr	r3, [pc, #52]	@ (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003682:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003686:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800368e:	490a      	ldr	r1, [pc, #40]	@ (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003690:	4313      	orrs	r3, r2
 8003692:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800369a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800369e:	d105      	bne.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80036a0:	4b05      	ldr	r3, [pc, #20]	@ (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80036a2:	68db      	ldr	r3, [r3, #12]
 80036a4:	4a04      	ldr	r2, [pc, #16]	@ (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80036a6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80036aa:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80036ac:	7cbb      	ldrb	r3, [r7, #18]
}
 80036ae:	4618      	mov	r0, r3
 80036b0:	3718      	adds	r7, #24
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd80      	pop	{r7, pc}
 80036b6:	bf00      	nop
 80036b8:	40021000 	.word	0x40021000

080036bc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b084      	sub	sp, #16
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d101      	bne.n	80036ce <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80036ca:	2301      	movs	r3, #1
 80036cc:	e09d      	b.n	800380a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d108      	bne.n	80036e8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80036de:	d009      	beq.n	80036f4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2200      	movs	r2, #0
 80036e4:	61da      	str	r2, [r3, #28]
 80036e6:	e005      	b.n	80036f4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2200      	movs	r2, #0
 80036ec:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2200      	movs	r2, #0
 80036f2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2200      	movs	r2, #0
 80036f8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003700:	b2db      	uxtb	r3, r3
 8003702:	2b00      	cmp	r3, #0
 8003704:	d106      	bne.n	8003714 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2200      	movs	r2, #0
 800370a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800370e:	6878      	ldr	r0, [r7, #4]
 8003710:	f7fd fda8 	bl	8001264 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2202      	movs	r2, #2
 8003718:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	681a      	ldr	r2, [r3, #0]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800372a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	68db      	ldr	r3, [r3, #12]
 8003730:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003734:	d902      	bls.n	800373c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003736:	2300      	movs	r3, #0
 8003738:	60fb      	str	r3, [r7, #12]
 800373a:	e002      	b.n	8003742 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800373c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003740:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	68db      	ldr	r3, [r3, #12]
 8003746:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800374a:	d007      	beq.n	800375c <HAL_SPI_Init+0xa0>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	68db      	ldr	r3, [r3, #12]
 8003750:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003754:	d002      	beq.n	800375c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2200      	movs	r2, #0
 800375a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	689b      	ldr	r3, [r3, #8]
 8003768:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800376c:	431a      	orrs	r2, r3
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	691b      	ldr	r3, [r3, #16]
 8003772:	f003 0302 	and.w	r3, r3, #2
 8003776:	431a      	orrs	r2, r3
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	695b      	ldr	r3, [r3, #20]
 800377c:	f003 0301 	and.w	r3, r3, #1
 8003780:	431a      	orrs	r2, r3
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	699b      	ldr	r3, [r3, #24]
 8003786:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800378a:	431a      	orrs	r2, r3
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	69db      	ldr	r3, [r3, #28]
 8003790:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003794:	431a      	orrs	r2, r3
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6a1b      	ldr	r3, [r3, #32]
 800379a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800379e:	ea42 0103 	orr.w	r1, r2, r3
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037a6:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	430a      	orrs	r2, r1
 80037b0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	699b      	ldr	r3, [r3, #24]
 80037b6:	0c1b      	lsrs	r3, r3, #16
 80037b8:	f003 0204 	and.w	r2, r3, #4
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037c0:	f003 0310 	and.w	r3, r3, #16
 80037c4:	431a      	orrs	r2, r3
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037ca:	f003 0308 	and.w	r3, r3, #8
 80037ce:	431a      	orrs	r2, r3
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	68db      	ldr	r3, [r3, #12]
 80037d4:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80037d8:	ea42 0103 	orr.w	r1, r2, r3
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	430a      	orrs	r2, r1
 80037e8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	69da      	ldr	r2, [r3, #28]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80037f8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2200      	movs	r2, #0
 80037fe:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2201      	movs	r2, #1
 8003804:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8003808:	2300      	movs	r3, #0
}
 800380a:	4618      	mov	r0, r3
 800380c:	3710      	adds	r7, #16
 800380e:	46bd      	mov	sp, r7
 8003810:	bd80      	pop	{r7, pc}

08003812 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003812:	b580      	push	{r7, lr}
 8003814:	b082      	sub	sp, #8
 8003816:	af00      	add	r7, sp, #0
 8003818:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d101      	bne.n	8003824 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003820:	2301      	movs	r3, #1
 8003822:	e049      	b.n	80038b8 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800382a:	b2db      	uxtb	r3, r3
 800382c:	2b00      	cmp	r3, #0
 800382e:	d106      	bne.n	800383e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2200      	movs	r2, #0
 8003834:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003838:	6878      	ldr	r0, [r7, #4]
 800383a:	f7fe f98b 	bl	8001b54 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2202      	movs	r2, #2
 8003842:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681a      	ldr	r2, [r3, #0]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	3304      	adds	r3, #4
 800384e:	4619      	mov	r1, r3
 8003850:	4610      	mov	r0, r2
 8003852:	f000 fca3 	bl	800419c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2201      	movs	r2, #1
 800385a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2201      	movs	r2, #1
 8003862:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2201      	movs	r2, #1
 800386a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2201      	movs	r2, #1
 8003872:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2201      	movs	r2, #1
 800387a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2201      	movs	r2, #1
 8003882:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2201      	movs	r2, #1
 800388a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2201      	movs	r2, #1
 8003892:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2201      	movs	r2, #1
 800389a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2201      	movs	r2, #1
 80038a2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2201      	movs	r2, #1
 80038aa:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2201      	movs	r2, #1
 80038b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80038b6:	2300      	movs	r3, #0
}
 80038b8:	4618      	mov	r0, r3
 80038ba:	3708      	adds	r7, #8
 80038bc:	46bd      	mov	sp, r7
 80038be:	bd80      	pop	{r7, pc}

080038c0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80038c0:	b480      	push	{r7}
 80038c2:	b085      	sub	sp, #20
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80038ce:	b2db      	uxtb	r3, r3
 80038d0:	2b01      	cmp	r3, #1
 80038d2:	d001      	beq.n	80038d8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80038d4:	2301      	movs	r3, #1
 80038d6:	e042      	b.n	800395e <HAL_TIM_Base_Start+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2202      	movs	r2, #2
 80038dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a21      	ldr	r2, [pc, #132]	@ (800396c <HAL_TIM_Base_Start+0xac>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d018      	beq.n	800391c <HAL_TIM_Base_Start+0x5c>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038f2:	d013      	beq.n	800391c <HAL_TIM_Base_Start+0x5c>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a1d      	ldr	r2, [pc, #116]	@ (8003970 <HAL_TIM_Base_Start+0xb0>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d00e      	beq.n	800391c <HAL_TIM_Base_Start+0x5c>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4a1c      	ldr	r2, [pc, #112]	@ (8003974 <HAL_TIM_Base_Start+0xb4>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d009      	beq.n	800391c <HAL_TIM_Base_Start+0x5c>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a1a      	ldr	r2, [pc, #104]	@ (8003978 <HAL_TIM_Base_Start+0xb8>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d004      	beq.n	800391c <HAL_TIM_Base_Start+0x5c>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4a19      	ldr	r2, [pc, #100]	@ (800397c <HAL_TIM_Base_Start+0xbc>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d115      	bne.n	8003948 <HAL_TIM_Base_Start+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	689a      	ldr	r2, [r3, #8]
 8003922:	4b17      	ldr	r3, [pc, #92]	@ (8003980 <HAL_TIM_Base_Start+0xc0>)
 8003924:	4013      	ands	r3, r2
 8003926:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	2b06      	cmp	r3, #6
 800392c:	d015      	beq.n	800395a <HAL_TIM_Base_Start+0x9a>
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003934:	d011      	beq.n	800395a <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	681a      	ldr	r2, [r3, #0]
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f042 0201 	orr.w	r2, r2, #1
 8003944:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003946:	e008      	b.n	800395a <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	681a      	ldr	r2, [r3, #0]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f042 0201 	orr.w	r2, r2, #1
 8003956:	601a      	str	r2, [r3, #0]
 8003958:	e000      	b.n	800395c <HAL_TIM_Base_Start+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800395a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800395c:	2300      	movs	r3, #0
}
 800395e:	4618      	mov	r0, r3
 8003960:	3714      	adds	r7, #20
 8003962:	46bd      	mov	sp, r7
 8003964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003968:	4770      	bx	lr
 800396a:	bf00      	nop
 800396c:	40012c00 	.word	0x40012c00
 8003970:	40000400 	.word	0x40000400
 8003974:	40000800 	.word	0x40000800
 8003978:	40013400 	.word	0x40013400
 800397c:	40014000 	.word	0x40014000
 8003980:	00010007 	.word	0x00010007

08003984 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b082      	sub	sp, #8
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d101      	bne.n	8003996 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003992:	2301      	movs	r3, #1
 8003994:	e049      	b.n	8003a2a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800399c:	b2db      	uxtb	r3, r3
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d106      	bne.n	80039b0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2200      	movs	r2, #0
 80039a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80039aa:	6878      	ldr	r0, [r7, #4]
 80039ac:	f7fe f8b2 	bl	8001b14 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2202      	movs	r2, #2
 80039b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681a      	ldr	r2, [r3, #0]
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	3304      	adds	r3, #4
 80039c0:	4619      	mov	r1, r3
 80039c2:	4610      	mov	r0, r2
 80039c4:	f000 fbea 	bl	800419c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2201      	movs	r2, #1
 80039cc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2201      	movs	r2, #1
 80039d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2201      	movs	r2, #1
 80039dc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2201      	movs	r2, #1
 80039e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2201      	movs	r2, #1
 80039ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2201      	movs	r2, #1
 80039f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2201      	movs	r2, #1
 80039fc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2201      	movs	r2, #1
 8003a04:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2201      	movs	r2, #1
 8003a0c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2201      	movs	r2, #1
 8003a14:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2201      	movs	r2, #1
 8003a1c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2201      	movs	r2, #1
 8003a24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003a28:	2300      	movs	r3, #0
}
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	3708      	adds	r7, #8
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bd80      	pop	{r7, pc}
	...

08003a34 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b084      	sub	sp, #16
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
 8003a3c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d109      	bne.n	8003a58 <HAL_TIM_PWM_Start+0x24>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003a4a:	b2db      	uxtb	r3, r3
 8003a4c:	2b01      	cmp	r3, #1
 8003a4e:	bf14      	ite	ne
 8003a50:	2301      	movne	r3, #1
 8003a52:	2300      	moveq	r3, #0
 8003a54:	b2db      	uxtb	r3, r3
 8003a56:	e03c      	b.n	8003ad2 <HAL_TIM_PWM_Start+0x9e>
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	2b04      	cmp	r3, #4
 8003a5c:	d109      	bne.n	8003a72 <HAL_TIM_PWM_Start+0x3e>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003a64:	b2db      	uxtb	r3, r3
 8003a66:	2b01      	cmp	r3, #1
 8003a68:	bf14      	ite	ne
 8003a6a:	2301      	movne	r3, #1
 8003a6c:	2300      	moveq	r3, #0
 8003a6e:	b2db      	uxtb	r3, r3
 8003a70:	e02f      	b.n	8003ad2 <HAL_TIM_PWM_Start+0x9e>
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	2b08      	cmp	r3, #8
 8003a76:	d109      	bne.n	8003a8c <HAL_TIM_PWM_Start+0x58>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003a7e:	b2db      	uxtb	r3, r3
 8003a80:	2b01      	cmp	r3, #1
 8003a82:	bf14      	ite	ne
 8003a84:	2301      	movne	r3, #1
 8003a86:	2300      	moveq	r3, #0
 8003a88:	b2db      	uxtb	r3, r3
 8003a8a:	e022      	b.n	8003ad2 <HAL_TIM_PWM_Start+0x9e>
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	2b0c      	cmp	r3, #12
 8003a90:	d109      	bne.n	8003aa6 <HAL_TIM_PWM_Start+0x72>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a98:	b2db      	uxtb	r3, r3
 8003a9a:	2b01      	cmp	r3, #1
 8003a9c:	bf14      	ite	ne
 8003a9e:	2301      	movne	r3, #1
 8003aa0:	2300      	moveq	r3, #0
 8003aa2:	b2db      	uxtb	r3, r3
 8003aa4:	e015      	b.n	8003ad2 <HAL_TIM_PWM_Start+0x9e>
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	2b10      	cmp	r3, #16
 8003aaa:	d109      	bne.n	8003ac0 <HAL_TIM_PWM_Start+0x8c>
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003ab2:	b2db      	uxtb	r3, r3
 8003ab4:	2b01      	cmp	r3, #1
 8003ab6:	bf14      	ite	ne
 8003ab8:	2301      	movne	r3, #1
 8003aba:	2300      	moveq	r3, #0
 8003abc:	b2db      	uxtb	r3, r3
 8003abe:	e008      	b.n	8003ad2 <HAL_TIM_PWM_Start+0x9e>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003ac6:	b2db      	uxtb	r3, r3
 8003ac8:	2b01      	cmp	r3, #1
 8003aca:	bf14      	ite	ne
 8003acc:	2301      	movne	r3, #1
 8003ace:	2300      	moveq	r3, #0
 8003ad0:	b2db      	uxtb	r3, r3
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d001      	beq.n	8003ada <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	e097      	b.n	8003c0a <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d104      	bne.n	8003aea <HAL_TIM_PWM_Start+0xb6>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2202      	movs	r2, #2
 8003ae4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003ae8:	e023      	b.n	8003b32 <HAL_TIM_PWM_Start+0xfe>
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	2b04      	cmp	r3, #4
 8003aee:	d104      	bne.n	8003afa <HAL_TIM_PWM_Start+0xc6>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2202      	movs	r2, #2
 8003af4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003af8:	e01b      	b.n	8003b32 <HAL_TIM_PWM_Start+0xfe>
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	2b08      	cmp	r3, #8
 8003afe:	d104      	bne.n	8003b0a <HAL_TIM_PWM_Start+0xd6>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2202      	movs	r2, #2
 8003b04:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003b08:	e013      	b.n	8003b32 <HAL_TIM_PWM_Start+0xfe>
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	2b0c      	cmp	r3, #12
 8003b0e:	d104      	bne.n	8003b1a <HAL_TIM_PWM_Start+0xe6>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2202      	movs	r2, #2
 8003b14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003b18:	e00b      	b.n	8003b32 <HAL_TIM_PWM_Start+0xfe>
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	2b10      	cmp	r3, #16
 8003b1e:	d104      	bne.n	8003b2a <HAL_TIM_PWM_Start+0xf6>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2202      	movs	r2, #2
 8003b24:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003b28:	e003      	b.n	8003b32 <HAL_TIM_PWM_Start+0xfe>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2202      	movs	r2, #2
 8003b2e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	2201      	movs	r2, #1
 8003b38:	6839      	ldr	r1, [r7, #0]
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	f000 ffc4 	bl	8004ac8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a33      	ldr	r2, [pc, #204]	@ (8003c14 <HAL_TIM_PWM_Start+0x1e0>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d013      	beq.n	8003b72 <HAL_TIM_PWM_Start+0x13e>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4a32      	ldr	r2, [pc, #200]	@ (8003c18 <HAL_TIM_PWM_Start+0x1e4>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d00e      	beq.n	8003b72 <HAL_TIM_PWM_Start+0x13e>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4a30      	ldr	r2, [pc, #192]	@ (8003c1c <HAL_TIM_PWM_Start+0x1e8>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d009      	beq.n	8003b72 <HAL_TIM_PWM_Start+0x13e>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4a2f      	ldr	r2, [pc, #188]	@ (8003c20 <HAL_TIM_PWM_Start+0x1ec>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d004      	beq.n	8003b72 <HAL_TIM_PWM_Start+0x13e>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a2d      	ldr	r2, [pc, #180]	@ (8003c24 <HAL_TIM_PWM_Start+0x1f0>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d101      	bne.n	8003b76 <HAL_TIM_PWM_Start+0x142>
 8003b72:	2301      	movs	r3, #1
 8003b74:	e000      	b.n	8003b78 <HAL_TIM_PWM_Start+0x144>
 8003b76:	2300      	movs	r3, #0
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d007      	beq.n	8003b8c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003b8a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a20      	ldr	r2, [pc, #128]	@ (8003c14 <HAL_TIM_PWM_Start+0x1e0>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d018      	beq.n	8003bc8 <HAL_TIM_PWM_Start+0x194>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b9e:	d013      	beq.n	8003bc8 <HAL_TIM_PWM_Start+0x194>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a20      	ldr	r2, [pc, #128]	@ (8003c28 <HAL_TIM_PWM_Start+0x1f4>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d00e      	beq.n	8003bc8 <HAL_TIM_PWM_Start+0x194>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a1f      	ldr	r2, [pc, #124]	@ (8003c2c <HAL_TIM_PWM_Start+0x1f8>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d009      	beq.n	8003bc8 <HAL_TIM_PWM_Start+0x194>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4a17      	ldr	r2, [pc, #92]	@ (8003c18 <HAL_TIM_PWM_Start+0x1e4>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d004      	beq.n	8003bc8 <HAL_TIM_PWM_Start+0x194>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4a16      	ldr	r2, [pc, #88]	@ (8003c1c <HAL_TIM_PWM_Start+0x1e8>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d115      	bne.n	8003bf4 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	689a      	ldr	r2, [r3, #8]
 8003bce:	4b18      	ldr	r3, [pc, #96]	@ (8003c30 <HAL_TIM_PWM_Start+0x1fc>)
 8003bd0:	4013      	ands	r3, r2
 8003bd2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	2b06      	cmp	r3, #6
 8003bd8:	d015      	beq.n	8003c06 <HAL_TIM_PWM_Start+0x1d2>
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003be0:	d011      	beq.n	8003c06 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	681a      	ldr	r2, [r3, #0]
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f042 0201 	orr.w	r2, r2, #1
 8003bf0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bf2:	e008      	b.n	8003c06 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	681a      	ldr	r2, [r3, #0]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f042 0201 	orr.w	r2, r2, #1
 8003c02:	601a      	str	r2, [r3, #0]
 8003c04:	e000      	b.n	8003c08 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c06:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003c08:	2300      	movs	r3, #0
}
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	3710      	adds	r7, #16
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bd80      	pop	{r7, pc}
 8003c12:	bf00      	nop
 8003c14:	40012c00 	.word	0x40012c00
 8003c18:	40013400 	.word	0x40013400
 8003c1c:	40014000 	.word	0x40014000
 8003c20:	40014400 	.word	0x40014400
 8003c24:	40014800 	.word	0x40014800
 8003c28:	40000400 	.word	0x40000400
 8003c2c:	40000800 	.word	0x40000800
 8003c30:	00010007 	.word	0x00010007

08003c34 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b086      	sub	sp, #24
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
 8003c3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d101      	bne.n	8003c48 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003c44:	2301      	movs	r3, #1
 8003c46:	e097      	b.n	8003d78 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c4e:	b2db      	uxtb	r3, r3
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d106      	bne.n	8003c62 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2200      	movs	r2, #0
 8003c58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003c5c:	6878      	ldr	r0, [r7, #4]
 8003c5e:	f7fd fec7 	bl	80019f0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2202      	movs	r2, #2
 8003c66:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	689b      	ldr	r3, [r3, #8]
 8003c70:	687a      	ldr	r2, [r7, #4]
 8003c72:	6812      	ldr	r2, [r2, #0]
 8003c74:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8003c78:	f023 0307 	bic.w	r3, r3, #7
 8003c7c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681a      	ldr	r2, [r3, #0]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	3304      	adds	r3, #4
 8003c86:	4619      	mov	r1, r3
 8003c88:	4610      	mov	r0, r2
 8003c8a:	f000 fa87 	bl	800419c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	689b      	ldr	r3, [r3, #8]
 8003c94:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	699b      	ldr	r3, [r3, #24]
 8003c9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	6a1b      	ldr	r3, [r3, #32]
 8003ca4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	697a      	ldr	r2, [r7, #20]
 8003cac:	4313      	orrs	r3, r2
 8003cae:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003cb0:	693b      	ldr	r3, [r7, #16]
 8003cb2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003cb6:	f023 0303 	bic.w	r3, r3, #3
 8003cba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	689a      	ldr	r2, [r3, #8]
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	699b      	ldr	r3, [r3, #24]
 8003cc4:	021b      	lsls	r3, r3, #8
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	693a      	ldr	r2, [r7, #16]
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003cce:	693b      	ldr	r3, [r7, #16]
 8003cd0:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8003cd4:	f023 030c 	bic.w	r3, r3, #12
 8003cd8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003cda:	693b      	ldr	r3, [r7, #16]
 8003cdc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003ce0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003ce4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	68da      	ldr	r2, [r3, #12]
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	69db      	ldr	r3, [r3, #28]
 8003cee:	021b      	lsls	r3, r3, #8
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	693a      	ldr	r2, [r7, #16]
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	691b      	ldr	r3, [r3, #16]
 8003cfc:	011a      	lsls	r2, r3, #4
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	6a1b      	ldr	r3, [r3, #32]
 8003d02:	031b      	lsls	r3, r3, #12
 8003d04:	4313      	orrs	r3, r2
 8003d06:	693a      	ldr	r2, [r7, #16]
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8003d12:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8003d1a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	685a      	ldr	r2, [r3, #4]
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	695b      	ldr	r3, [r3, #20]
 8003d24:	011b      	lsls	r3, r3, #4
 8003d26:	4313      	orrs	r3, r2
 8003d28:	68fa      	ldr	r2, [r7, #12]
 8003d2a:	4313      	orrs	r3, r2
 8003d2c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	697a      	ldr	r2, [r7, #20]
 8003d34:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	693a      	ldr	r2, [r7, #16]
 8003d3c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	68fa      	ldr	r2, [r7, #12]
 8003d44:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2201      	movs	r2, #1
 8003d4a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2201      	movs	r2, #1
 8003d52:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2201      	movs	r2, #1
 8003d5a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2201      	movs	r2, #1
 8003d62:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2201      	movs	r2, #1
 8003d6a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2201      	movs	r2, #1
 8003d72:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003d76:	2300      	movs	r3, #0
}
 8003d78:	4618      	mov	r0, r3
 8003d7a:	3718      	adds	r7, #24
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	bd80      	pop	{r7, pc}

08003d80 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b086      	sub	sp, #24
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	60f8      	str	r0, [r7, #12]
 8003d88:	60b9      	str	r1, [r7, #8]
 8003d8a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003d96:	2b01      	cmp	r3, #1
 8003d98:	d101      	bne.n	8003d9e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003d9a:	2302      	movs	r3, #2
 8003d9c:	e0ff      	b.n	8003f9e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	2201      	movs	r2, #1
 8003da2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2b14      	cmp	r3, #20
 8003daa:	f200 80f0 	bhi.w	8003f8e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003dae:	a201      	add	r2, pc, #4	@ (adr r2, 8003db4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003db0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003db4:	08003e09 	.word	0x08003e09
 8003db8:	08003f8f 	.word	0x08003f8f
 8003dbc:	08003f8f 	.word	0x08003f8f
 8003dc0:	08003f8f 	.word	0x08003f8f
 8003dc4:	08003e49 	.word	0x08003e49
 8003dc8:	08003f8f 	.word	0x08003f8f
 8003dcc:	08003f8f 	.word	0x08003f8f
 8003dd0:	08003f8f 	.word	0x08003f8f
 8003dd4:	08003e8b 	.word	0x08003e8b
 8003dd8:	08003f8f 	.word	0x08003f8f
 8003ddc:	08003f8f 	.word	0x08003f8f
 8003de0:	08003f8f 	.word	0x08003f8f
 8003de4:	08003ecb 	.word	0x08003ecb
 8003de8:	08003f8f 	.word	0x08003f8f
 8003dec:	08003f8f 	.word	0x08003f8f
 8003df0:	08003f8f 	.word	0x08003f8f
 8003df4:	08003f0d 	.word	0x08003f0d
 8003df8:	08003f8f 	.word	0x08003f8f
 8003dfc:	08003f8f 	.word	0x08003f8f
 8003e00:	08003f8f 	.word	0x08003f8f
 8003e04:	08003f4d 	.word	0x08003f4d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	68b9      	ldr	r1, [r7, #8]
 8003e0e:	4618      	mov	r0, r3
 8003e10:	f000 fa60 	bl	80042d4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	699a      	ldr	r2, [r3, #24]
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f042 0208 	orr.w	r2, r2, #8
 8003e22:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	699a      	ldr	r2, [r3, #24]
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f022 0204 	bic.w	r2, r2, #4
 8003e32:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	6999      	ldr	r1, [r3, #24]
 8003e3a:	68bb      	ldr	r3, [r7, #8]
 8003e3c:	691a      	ldr	r2, [r3, #16]
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	430a      	orrs	r2, r1
 8003e44:	619a      	str	r2, [r3, #24]
      break;
 8003e46:	e0a5      	b.n	8003f94 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	68b9      	ldr	r1, [r7, #8]
 8003e4e:	4618      	mov	r0, r3
 8003e50:	f000 fad0 	bl	80043f4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	699a      	ldr	r2, [r3, #24]
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003e62:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	699a      	ldr	r2, [r3, #24]
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e72:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	6999      	ldr	r1, [r3, #24]
 8003e7a:	68bb      	ldr	r3, [r7, #8]
 8003e7c:	691b      	ldr	r3, [r3, #16]
 8003e7e:	021a      	lsls	r2, r3, #8
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	430a      	orrs	r2, r1
 8003e86:	619a      	str	r2, [r3, #24]
      break;
 8003e88:	e084      	b.n	8003f94 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	68b9      	ldr	r1, [r7, #8]
 8003e90:	4618      	mov	r0, r3
 8003e92:	f000 fb39 	bl	8004508 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	69da      	ldr	r2, [r3, #28]
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f042 0208 	orr.w	r2, r2, #8
 8003ea4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	69da      	ldr	r2, [r3, #28]
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f022 0204 	bic.w	r2, r2, #4
 8003eb4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	69d9      	ldr	r1, [r3, #28]
 8003ebc:	68bb      	ldr	r3, [r7, #8]
 8003ebe:	691a      	ldr	r2, [r3, #16]
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	430a      	orrs	r2, r1
 8003ec6:	61da      	str	r2, [r3, #28]
      break;
 8003ec8:	e064      	b.n	8003f94 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	68b9      	ldr	r1, [r7, #8]
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	f000 fba1 	bl	8004618 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	69da      	ldr	r2, [r3, #28]
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003ee4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	69da      	ldr	r2, [r3, #28]
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ef4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	69d9      	ldr	r1, [r3, #28]
 8003efc:	68bb      	ldr	r3, [r7, #8]
 8003efe:	691b      	ldr	r3, [r3, #16]
 8003f00:	021a      	lsls	r2, r3, #8
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	430a      	orrs	r2, r1
 8003f08:	61da      	str	r2, [r3, #28]
      break;
 8003f0a:	e043      	b.n	8003f94 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	68b9      	ldr	r1, [r7, #8]
 8003f12:	4618      	mov	r0, r3
 8003f14:	f000 fc0a 	bl	800472c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f042 0208 	orr.w	r2, r2, #8
 8003f26:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f022 0204 	bic.w	r2, r2, #4
 8003f36:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8003f3e:	68bb      	ldr	r3, [r7, #8]
 8003f40:	691a      	ldr	r2, [r3, #16]
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	430a      	orrs	r2, r1
 8003f48:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8003f4a:	e023      	b.n	8003f94 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	68b9      	ldr	r1, [r7, #8]
 8003f52:	4618      	mov	r0, r3
 8003f54:	f000 fc4e 	bl	80047f4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003f66:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003f76:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8003f7e:	68bb      	ldr	r3, [r7, #8]
 8003f80:	691b      	ldr	r3, [r3, #16]
 8003f82:	021a      	lsls	r2, r3, #8
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	430a      	orrs	r2, r1
 8003f8a:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8003f8c:	e002      	b.n	8003f94 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8003f8e:	2301      	movs	r3, #1
 8003f90:	75fb      	strb	r3, [r7, #23]
      break;
 8003f92:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	2200      	movs	r2, #0
 8003f98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003f9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	3718      	adds	r7, #24
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	bd80      	pop	{r7, pc}
 8003fa6:	bf00      	nop

08003fa8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b084      	sub	sp, #16
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
 8003fb0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003fbc:	2b01      	cmp	r3, #1
 8003fbe:	d101      	bne.n	8003fc4 <HAL_TIM_ConfigClockSource+0x1c>
 8003fc0:	2302      	movs	r3, #2
 8003fc2:	e0de      	b.n	8004182 <HAL_TIM_ConfigClockSource+0x1da>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2201      	movs	r2, #1
 8003fc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2202      	movs	r2, #2
 8003fd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	689b      	ldr	r3, [r3, #8]
 8003fda:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003fdc:	68bb      	ldr	r3, [r7, #8]
 8003fde:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8003fe2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003fe6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003fe8:	68bb      	ldr	r3, [r7, #8]
 8003fea:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003fee:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	68ba      	ldr	r2, [r7, #8]
 8003ff6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4a63      	ldr	r2, [pc, #396]	@ (800418c <HAL_TIM_ConfigClockSource+0x1e4>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	f000 80a9 	beq.w	8004156 <HAL_TIM_ConfigClockSource+0x1ae>
 8004004:	4a61      	ldr	r2, [pc, #388]	@ (800418c <HAL_TIM_ConfigClockSource+0x1e4>)
 8004006:	4293      	cmp	r3, r2
 8004008:	f200 80ae 	bhi.w	8004168 <HAL_TIM_ConfigClockSource+0x1c0>
 800400c:	4a60      	ldr	r2, [pc, #384]	@ (8004190 <HAL_TIM_ConfigClockSource+0x1e8>)
 800400e:	4293      	cmp	r3, r2
 8004010:	f000 80a1 	beq.w	8004156 <HAL_TIM_ConfigClockSource+0x1ae>
 8004014:	4a5e      	ldr	r2, [pc, #376]	@ (8004190 <HAL_TIM_ConfigClockSource+0x1e8>)
 8004016:	4293      	cmp	r3, r2
 8004018:	f200 80a6 	bhi.w	8004168 <HAL_TIM_ConfigClockSource+0x1c0>
 800401c:	4a5d      	ldr	r2, [pc, #372]	@ (8004194 <HAL_TIM_ConfigClockSource+0x1ec>)
 800401e:	4293      	cmp	r3, r2
 8004020:	f000 8099 	beq.w	8004156 <HAL_TIM_ConfigClockSource+0x1ae>
 8004024:	4a5b      	ldr	r2, [pc, #364]	@ (8004194 <HAL_TIM_ConfigClockSource+0x1ec>)
 8004026:	4293      	cmp	r3, r2
 8004028:	f200 809e 	bhi.w	8004168 <HAL_TIM_ConfigClockSource+0x1c0>
 800402c:	4a5a      	ldr	r2, [pc, #360]	@ (8004198 <HAL_TIM_ConfigClockSource+0x1f0>)
 800402e:	4293      	cmp	r3, r2
 8004030:	f000 8091 	beq.w	8004156 <HAL_TIM_ConfigClockSource+0x1ae>
 8004034:	4a58      	ldr	r2, [pc, #352]	@ (8004198 <HAL_TIM_ConfigClockSource+0x1f0>)
 8004036:	4293      	cmp	r3, r2
 8004038:	f200 8096 	bhi.w	8004168 <HAL_TIM_ConfigClockSource+0x1c0>
 800403c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8004040:	f000 8089 	beq.w	8004156 <HAL_TIM_ConfigClockSource+0x1ae>
 8004044:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8004048:	f200 808e 	bhi.w	8004168 <HAL_TIM_ConfigClockSource+0x1c0>
 800404c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004050:	d03e      	beq.n	80040d0 <HAL_TIM_ConfigClockSource+0x128>
 8004052:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004056:	f200 8087 	bhi.w	8004168 <HAL_TIM_ConfigClockSource+0x1c0>
 800405a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800405e:	f000 8086 	beq.w	800416e <HAL_TIM_ConfigClockSource+0x1c6>
 8004062:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004066:	d87f      	bhi.n	8004168 <HAL_TIM_ConfigClockSource+0x1c0>
 8004068:	2b70      	cmp	r3, #112	@ 0x70
 800406a:	d01a      	beq.n	80040a2 <HAL_TIM_ConfigClockSource+0xfa>
 800406c:	2b70      	cmp	r3, #112	@ 0x70
 800406e:	d87b      	bhi.n	8004168 <HAL_TIM_ConfigClockSource+0x1c0>
 8004070:	2b60      	cmp	r3, #96	@ 0x60
 8004072:	d050      	beq.n	8004116 <HAL_TIM_ConfigClockSource+0x16e>
 8004074:	2b60      	cmp	r3, #96	@ 0x60
 8004076:	d877      	bhi.n	8004168 <HAL_TIM_ConfigClockSource+0x1c0>
 8004078:	2b50      	cmp	r3, #80	@ 0x50
 800407a:	d03c      	beq.n	80040f6 <HAL_TIM_ConfigClockSource+0x14e>
 800407c:	2b50      	cmp	r3, #80	@ 0x50
 800407e:	d873      	bhi.n	8004168 <HAL_TIM_ConfigClockSource+0x1c0>
 8004080:	2b40      	cmp	r3, #64	@ 0x40
 8004082:	d058      	beq.n	8004136 <HAL_TIM_ConfigClockSource+0x18e>
 8004084:	2b40      	cmp	r3, #64	@ 0x40
 8004086:	d86f      	bhi.n	8004168 <HAL_TIM_ConfigClockSource+0x1c0>
 8004088:	2b30      	cmp	r3, #48	@ 0x30
 800408a:	d064      	beq.n	8004156 <HAL_TIM_ConfigClockSource+0x1ae>
 800408c:	2b30      	cmp	r3, #48	@ 0x30
 800408e:	d86b      	bhi.n	8004168 <HAL_TIM_ConfigClockSource+0x1c0>
 8004090:	2b20      	cmp	r3, #32
 8004092:	d060      	beq.n	8004156 <HAL_TIM_ConfigClockSource+0x1ae>
 8004094:	2b20      	cmp	r3, #32
 8004096:	d867      	bhi.n	8004168 <HAL_TIM_ConfigClockSource+0x1c0>
 8004098:	2b00      	cmp	r3, #0
 800409a:	d05c      	beq.n	8004156 <HAL_TIM_ConfigClockSource+0x1ae>
 800409c:	2b10      	cmp	r3, #16
 800409e:	d05a      	beq.n	8004156 <HAL_TIM_ConfigClockSource+0x1ae>
 80040a0:	e062      	b.n	8004168 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80040b2:	f000 fce9 	bl	8004a88 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	689b      	ldr	r3, [r3, #8]
 80040bc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80040be:	68bb      	ldr	r3, [r7, #8]
 80040c0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80040c4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	68ba      	ldr	r2, [r7, #8]
 80040cc:	609a      	str	r2, [r3, #8]
      break;
 80040ce:	e04f      	b.n	8004170 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80040e0:	f000 fcd2 	bl	8004a88 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	689a      	ldr	r2, [r3, #8]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80040f2:	609a      	str	r2, [r3, #8]
      break;
 80040f4:	e03c      	b.n	8004170 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004102:	461a      	mov	r2, r3
 8004104:	f000 fc44 	bl	8004990 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	2150      	movs	r1, #80	@ 0x50
 800410e:	4618      	mov	r0, r3
 8004110:	f000 fc9d 	bl	8004a4e <TIM_ITRx_SetConfig>
      break;
 8004114:	e02c      	b.n	8004170 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004122:	461a      	mov	r2, r3
 8004124:	f000 fc63 	bl	80049ee <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	2160      	movs	r1, #96	@ 0x60
 800412e:	4618      	mov	r0, r3
 8004130:	f000 fc8d 	bl	8004a4e <TIM_ITRx_SetConfig>
      break;
 8004134:	e01c      	b.n	8004170 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004142:	461a      	mov	r2, r3
 8004144:	f000 fc24 	bl	8004990 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	2140      	movs	r1, #64	@ 0x40
 800414e:	4618      	mov	r0, r3
 8004150:	f000 fc7d 	bl	8004a4e <TIM_ITRx_SetConfig>
      break;
 8004154:	e00c      	b.n	8004170 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681a      	ldr	r2, [r3, #0]
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4619      	mov	r1, r3
 8004160:	4610      	mov	r0, r2
 8004162:	f000 fc74 	bl	8004a4e <TIM_ITRx_SetConfig>
      break;
 8004166:	e003      	b.n	8004170 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8004168:	2301      	movs	r3, #1
 800416a:	73fb      	strb	r3, [r7, #15]
      break;
 800416c:	e000      	b.n	8004170 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 800416e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2201      	movs	r2, #1
 8004174:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2200      	movs	r2, #0
 800417c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004180:	7bfb      	ldrb	r3, [r7, #15]
}
 8004182:	4618      	mov	r0, r3
 8004184:	3710      	adds	r7, #16
 8004186:	46bd      	mov	sp, r7
 8004188:	bd80      	pop	{r7, pc}
 800418a:	bf00      	nop
 800418c:	00100070 	.word	0x00100070
 8004190:	00100040 	.word	0x00100040
 8004194:	00100030 	.word	0x00100030
 8004198:	00100020 	.word	0x00100020

0800419c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800419c:	b480      	push	{r7}
 800419e:	b085      	sub	sp, #20
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
 80041a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	4a42      	ldr	r2, [pc, #264]	@ (80042b8 <TIM_Base_SetConfig+0x11c>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d00f      	beq.n	80041d4 <TIM_Base_SetConfig+0x38>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80041ba:	d00b      	beq.n	80041d4 <TIM_Base_SetConfig+0x38>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	4a3f      	ldr	r2, [pc, #252]	@ (80042bc <TIM_Base_SetConfig+0x120>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d007      	beq.n	80041d4 <TIM_Base_SetConfig+0x38>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	4a3e      	ldr	r2, [pc, #248]	@ (80042c0 <TIM_Base_SetConfig+0x124>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d003      	beq.n	80041d4 <TIM_Base_SetConfig+0x38>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	4a3d      	ldr	r2, [pc, #244]	@ (80042c4 <TIM_Base_SetConfig+0x128>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d108      	bne.n	80041e6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80041da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	68fa      	ldr	r2, [r7, #12]
 80041e2:	4313      	orrs	r3, r2
 80041e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	4a33      	ldr	r2, [pc, #204]	@ (80042b8 <TIM_Base_SetConfig+0x11c>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d01b      	beq.n	8004226 <TIM_Base_SetConfig+0x8a>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80041f4:	d017      	beq.n	8004226 <TIM_Base_SetConfig+0x8a>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	4a30      	ldr	r2, [pc, #192]	@ (80042bc <TIM_Base_SetConfig+0x120>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d013      	beq.n	8004226 <TIM_Base_SetConfig+0x8a>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	4a2f      	ldr	r2, [pc, #188]	@ (80042c0 <TIM_Base_SetConfig+0x124>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d00f      	beq.n	8004226 <TIM_Base_SetConfig+0x8a>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	4a2e      	ldr	r2, [pc, #184]	@ (80042c4 <TIM_Base_SetConfig+0x128>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d00b      	beq.n	8004226 <TIM_Base_SetConfig+0x8a>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	4a2d      	ldr	r2, [pc, #180]	@ (80042c8 <TIM_Base_SetConfig+0x12c>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d007      	beq.n	8004226 <TIM_Base_SetConfig+0x8a>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	4a2c      	ldr	r2, [pc, #176]	@ (80042cc <TIM_Base_SetConfig+0x130>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d003      	beq.n	8004226 <TIM_Base_SetConfig+0x8a>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	4a2b      	ldr	r2, [pc, #172]	@ (80042d0 <TIM_Base_SetConfig+0x134>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d108      	bne.n	8004238 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800422c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	68db      	ldr	r3, [r3, #12]
 8004232:	68fa      	ldr	r2, [r7, #12]
 8004234:	4313      	orrs	r3, r2
 8004236:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	695b      	ldr	r3, [r3, #20]
 8004242:	4313      	orrs	r3, r2
 8004244:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	68fa      	ldr	r2, [r7, #12]
 800424a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	689a      	ldr	r2, [r3, #8]
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	681a      	ldr	r2, [r3, #0]
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	4a16      	ldr	r2, [pc, #88]	@ (80042b8 <TIM_Base_SetConfig+0x11c>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d00f      	beq.n	8004284 <TIM_Base_SetConfig+0xe8>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	4a17      	ldr	r2, [pc, #92]	@ (80042c4 <TIM_Base_SetConfig+0x128>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d00b      	beq.n	8004284 <TIM_Base_SetConfig+0xe8>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	4a16      	ldr	r2, [pc, #88]	@ (80042c8 <TIM_Base_SetConfig+0x12c>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d007      	beq.n	8004284 <TIM_Base_SetConfig+0xe8>
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	4a15      	ldr	r2, [pc, #84]	@ (80042cc <TIM_Base_SetConfig+0x130>)
 8004278:	4293      	cmp	r3, r2
 800427a:	d003      	beq.n	8004284 <TIM_Base_SetConfig+0xe8>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	4a14      	ldr	r2, [pc, #80]	@ (80042d0 <TIM_Base_SetConfig+0x134>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d103      	bne.n	800428c <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	691a      	ldr	r2, [r3, #16]
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2201      	movs	r2, #1
 8004290:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	691b      	ldr	r3, [r3, #16]
 8004296:	f003 0301 	and.w	r3, r3, #1
 800429a:	2b01      	cmp	r3, #1
 800429c:	d105      	bne.n	80042aa <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	691b      	ldr	r3, [r3, #16]
 80042a2:	f023 0201 	bic.w	r2, r3, #1
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	611a      	str	r2, [r3, #16]
  }
}
 80042aa:	bf00      	nop
 80042ac:	3714      	adds	r7, #20
 80042ae:	46bd      	mov	sp, r7
 80042b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b4:	4770      	bx	lr
 80042b6:	bf00      	nop
 80042b8:	40012c00 	.word	0x40012c00
 80042bc:	40000400 	.word	0x40000400
 80042c0:	40000800 	.word	0x40000800
 80042c4:	40013400 	.word	0x40013400
 80042c8:	40014000 	.word	0x40014000
 80042cc:	40014400 	.word	0x40014400
 80042d0:	40014800 	.word	0x40014800

080042d4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80042d4:	b480      	push	{r7}
 80042d6:	b087      	sub	sp, #28
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
 80042dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6a1b      	ldr	r3, [r3, #32]
 80042e2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6a1b      	ldr	r3, [r3, #32]
 80042e8:	f023 0201 	bic.w	r2, r3, #1
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	685b      	ldr	r3, [r3, #4]
 80042f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	699b      	ldr	r3, [r3, #24]
 80042fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004302:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004306:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	f023 0303 	bic.w	r3, r3, #3
 800430e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	68fa      	ldr	r2, [r7, #12]
 8004316:	4313      	orrs	r3, r2
 8004318:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800431a:	697b      	ldr	r3, [r7, #20]
 800431c:	f023 0302 	bic.w	r3, r3, #2
 8004320:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	689b      	ldr	r3, [r3, #8]
 8004326:	697a      	ldr	r2, [r7, #20]
 8004328:	4313      	orrs	r3, r2
 800432a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	4a2c      	ldr	r2, [pc, #176]	@ (80043e0 <TIM_OC1_SetConfig+0x10c>)
 8004330:	4293      	cmp	r3, r2
 8004332:	d00f      	beq.n	8004354 <TIM_OC1_SetConfig+0x80>
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	4a2b      	ldr	r2, [pc, #172]	@ (80043e4 <TIM_OC1_SetConfig+0x110>)
 8004338:	4293      	cmp	r3, r2
 800433a:	d00b      	beq.n	8004354 <TIM_OC1_SetConfig+0x80>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	4a2a      	ldr	r2, [pc, #168]	@ (80043e8 <TIM_OC1_SetConfig+0x114>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d007      	beq.n	8004354 <TIM_OC1_SetConfig+0x80>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	4a29      	ldr	r2, [pc, #164]	@ (80043ec <TIM_OC1_SetConfig+0x118>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d003      	beq.n	8004354 <TIM_OC1_SetConfig+0x80>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	4a28      	ldr	r2, [pc, #160]	@ (80043f0 <TIM_OC1_SetConfig+0x11c>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d10c      	bne.n	800436e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004354:	697b      	ldr	r3, [r7, #20]
 8004356:	f023 0308 	bic.w	r3, r3, #8
 800435a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	68db      	ldr	r3, [r3, #12]
 8004360:	697a      	ldr	r2, [r7, #20]
 8004362:	4313      	orrs	r3, r2
 8004364:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004366:	697b      	ldr	r3, [r7, #20]
 8004368:	f023 0304 	bic.w	r3, r3, #4
 800436c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	4a1b      	ldr	r2, [pc, #108]	@ (80043e0 <TIM_OC1_SetConfig+0x10c>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d00f      	beq.n	8004396 <TIM_OC1_SetConfig+0xc2>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	4a1a      	ldr	r2, [pc, #104]	@ (80043e4 <TIM_OC1_SetConfig+0x110>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d00b      	beq.n	8004396 <TIM_OC1_SetConfig+0xc2>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	4a19      	ldr	r2, [pc, #100]	@ (80043e8 <TIM_OC1_SetConfig+0x114>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d007      	beq.n	8004396 <TIM_OC1_SetConfig+0xc2>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	4a18      	ldr	r2, [pc, #96]	@ (80043ec <TIM_OC1_SetConfig+0x118>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d003      	beq.n	8004396 <TIM_OC1_SetConfig+0xc2>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	4a17      	ldr	r2, [pc, #92]	@ (80043f0 <TIM_OC1_SetConfig+0x11c>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d111      	bne.n	80043ba <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004396:	693b      	ldr	r3, [r7, #16]
 8004398:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800439c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800439e:	693b      	ldr	r3, [r7, #16]
 80043a0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80043a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	695b      	ldr	r3, [r3, #20]
 80043aa:	693a      	ldr	r2, [r7, #16]
 80043ac:	4313      	orrs	r3, r2
 80043ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	699b      	ldr	r3, [r3, #24]
 80043b4:	693a      	ldr	r2, [r7, #16]
 80043b6:	4313      	orrs	r3, r2
 80043b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	693a      	ldr	r2, [r7, #16]
 80043be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	68fa      	ldr	r2, [r7, #12]
 80043c4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	685a      	ldr	r2, [r3, #4]
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	697a      	ldr	r2, [r7, #20]
 80043d2:	621a      	str	r2, [r3, #32]
}
 80043d4:	bf00      	nop
 80043d6:	371c      	adds	r7, #28
 80043d8:	46bd      	mov	sp, r7
 80043da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043de:	4770      	bx	lr
 80043e0:	40012c00 	.word	0x40012c00
 80043e4:	40013400 	.word	0x40013400
 80043e8:	40014000 	.word	0x40014000
 80043ec:	40014400 	.word	0x40014400
 80043f0:	40014800 	.word	0x40014800

080043f4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80043f4:	b480      	push	{r7}
 80043f6:	b087      	sub	sp, #28
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
 80043fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6a1b      	ldr	r3, [r3, #32]
 8004402:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6a1b      	ldr	r3, [r3, #32]
 8004408:	f023 0210 	bic.w	r2, r3, #16
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	685b      	ldr	r3, [r3, #4]
 8004414:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	699b      	ldr	r3, [r3, #24]
 800441a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004422:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004426:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800442e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	021b      	lsls	r3, r3, #8
 8004436:	68fa      	ldr	r2, [r7, #12]
 8004438:	4313      	orrs	r3, r2
 800443a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800443c:	697b      	ldr	r3, [r7, #20]
 800443e:	f023 0320 	bic.w	r3, r3, #32
 8004442:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	689b      	ldr	r3, [r3, #8]
 8004448:	011b      	lsls	r3, r3, #4
 800444a:	697a      	ldr	r2, [r7, #20]
 800444c:	4313      	orrs	r3, r2
 800444e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	4a28      	ldr	r2, [pc, #160]	@ (80044f4 <TIM_OC2_SetConfig+0x100>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d003      	beq.n	8004460 <TIM_OC2_SetConfig+0x6c>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	4a27      	ldr	r2, [pc, #156]	@ (80044f8 <TIM_OC2_SetConfig+0x104>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d10d      	bne.n	800447c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004460:	697b      	ldr	r3, [r7, #20]
 8004462:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004466:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	68db      	ldr	r3, [r3, #12]
 800446c:	011b      	lsls	r3, r3, #4
 800446e:	697a      	ldr	r2, [r7, #20]
 8004470:	4313      	orrs	r3, r2
 8004472:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004474:	697b      	ldr	r3, [r7, #20]
 8004476:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800447a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	4a1d      	ldr	r2, [pc, #116]	@ (80044f4 <TIM_OC2_SetConfig+0x100>)
 8004480:	4293      	cmp	r3, r2
 8004482:	d00f      	beq.n	80044a4 <TIM_OC2_SetConfig+0xb0>
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	4a1c      	ldr	r2, [pc, #112]	@ (80044f8 <TIM_OC2_SetConfig+0x104>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d00b      	beq.n	80044a4 <TIM_OC2_SetConfig+0xb0>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	4a1b      	ldr	r2, [pc, #108]	@ (80044fc <TIM_OC2_SetConfig+0x108>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d007      	beq.n	80044a4 <TIM_OC2_SetConfig+0xb0>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	4a1a      	ldr	r2, [pc, #104]	@ (8004500 <TIM_OC2_SetConfig+0x10c>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d003      	beq.n	80044a4 <TIM_OC2_SetConfig+0xb0>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	4a19      	ldr	r2, [pc, #100]	@ (8004504 <TIM_OC2_SetConfig+0x110>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d113      	bne.n	80044cc <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80044a4:	693b      	ldr	r3, [r7, #16]
 80044a6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80044aa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80044ac:	693b      	ldr	r3, [r7, #16]
 80044ae:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80044b2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	695b      	ldr	r3, [r3, #20]
 80044b8:	009b      	lsls	r3, r3, #2
 80044ba:	693a      	ldr	r2, [r7, #16]
 80044bc:	4313      	orrs	r3, r2
 80044be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	699b      	ldr	r3, [r3, #24]
 80044c4:	009b      	lsls	r3, r3, #2
 80044c6:	693a      	ldr	r2, [r7, #16]
 80044c8:	4313      	orrs	r3, r2
 80044ca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	693a      	ldr	r2, [r7, #16]
 80044d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	68fa      	ldr	r2, [r7, #12]
 80044d6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	685a      	ldr	r2, [r3, #4]
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	697a      	ldr	r2, [r7, #20]
 80044e4:	621a      	str	r2, [r3, #32]
}
 80044e6:	bf00      	nop
 80044e8:	371c      	adds	r7, #28
 80044ea:	46bd      	mov	sp, r7
 80044ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f0:	4770      	bx	lr
 80044f2:	bf00      	nop
 80044f4:	40012c00 	.word	0x40012c00
 80044f8:	40013400 	.word	0x40013400
 80044fc:	40014000 	.word	0x40014000
 8004500:	40014400 	.word	0x40014400
 8004504:	40014800 	.word	0x40014800

08004508 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004508:	b480      	push	{r7}
 800450a:	b087      	sub	sp, #28
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
 8004510:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6a1b      	ldr	r3, [r3, #32]
 8004516:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6a1b      	ldr	r3, [r3, #32]
 800451c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	69db      	ldr	r3, [r3, #28]
 800452e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004536:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800453a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	f023 0303 	bic.w	r3, r3, #3
 8004542:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	68fa      	ldr	r2, [r7, #12]
 800454a:	4313      	orrs	r3, r2
 800454c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800454e:	697b      	ldr	r3, [r7, #20]
 8004550:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004554:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	689b      	ldr	r3, [r3, #8]
 800455a:	021b      	lsls	r3, r3, #8
 800455c:	697a      	ldr	r2, [r7, #20]
 800455e:	4313      	orrs	r3, r2
 8004560:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	4a27      	ldr	r2, [pc, #156]	@ (8004604 <TIM_OC3_SetConfig+0xfc>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d003      	beq.n	8004572 <TIM_OC3_SetConfig+0x6a>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	4a26      	ldr	r2, [pc, #152]	@ (8004608 <TIM_OC3_SetConfig+0x100>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d10d      	bne.n	800458e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004572:	697b      	ldr	r3, [r7, #20]
 8004574:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004578:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	68db      	ldr	r3, [r3, #12]
 800457e:	021b      	lsls	r3, r3, #8
 8004580:	697a      	ldr	r2, [r7, #20]
 8004582:	4313      	orrs	r3, r2
 8004584:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004586:	697b      	ldr	r3, [r7, #20]
 8004588:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800458c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	4a1c      	ldr	r2, [pc, #112]	@ (8004604 <TIM_OC3_SetConfig+0xfc>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d00f      	beq.n	80045b6 <TIM_OC3_SetConfig+0xae>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	4a1b      	ldr	r2, [pc, #108]	@ (8004608 <TIM_OC3_SetConfig+0x100>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d00b      	beq.n	80045b6 <TIM_OC3_SetConfig+0xae>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	4a1a      	ldr	r2, [pc, #104]	@ (800460c <TIM_OC3_SetConfig+0x104>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d007      	beq.n	80045b6 <TIM_OC3_SetConfig+0xae>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	4a19      	ldr	r2, [pc, #100]	@ (8004610 <TIM_OC3_SetConfig+0x108>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d003      	beq.n	80045b6 <TIM_OC3_SetConfig+0xae>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	4a18      	ldr	r2, [pc, #96]	@ (8004614 <TIM_OC3_SetConfig+0x10c>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d113      	bne.n	80045de <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80045b6:	693b      	ldr	r3, [r7, #16]
 80045b8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80045bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80045be:	693b      	ldr	r3, [r7, #16]
 80045c0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80045c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	695b      	ldr	r3, [r3, #20]
 80045ca:	011b      	lsls	r3, r3, #4
 80045cc:	693a      	ldr	r2, [r7, #16]
 80045ce:	4313      	orrs	r3, r2
 80045d0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	699b      	ldr	r3, [r3, #24]
 80045d6:	011b      	lsls	r3, r3, #4
 80045d8:	693a      	ldr	r2, [r7, #16]
 80045da:	4313      	orrs	r3, r2
 80045dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	693a      	ldr	r2, [r7, #16]
 80045e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	68fa      	ldr	r2, [r7, #12]
 80045e8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	685a      	ldr	r2, [r3, #4]
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	697a      	ldr	r2, [r7, #20]
 80045f6:	621a      	str	r2, [r3, #32]
}
 80045f8:	bf00      	nop
 80045fa:	371c      	adds	r7, #28
 80045fc:	46bd      	mov	sp, r7
 80045fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004602:	4770      	bx	lr
 8004604:	40012c00 	.word	0x40012c00
 8004608:	40013400 	.word	0x40013400
 800460c:	40014000 	.word	0x40014000
 8004610:	40014400 	.word	0x40014400
 8004614:	40014800 	.word	0x40014800

08004618 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004618:	b480      	push	{r7}
 800461a:	b087      	sub	sp, #28
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
 8004620:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6a1b      	ldr	r3, [r3, #32]
 8004626:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6a1b      	ldr	r3, [r3, #32]
 800462c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	685b      	ldr	r3, [r3, #4]
 8004638:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	69db      	ldr	r3, [r3, #28]
 800463e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004646:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800464a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004652:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	021b      	lsls	r3, r3, #8
 800465a:	68fa      	ldr	r2, [r7, #12]
 800465c:	4313      	orrs	r3, r2
 800465e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004660:	697b      	ldr	r3, [r7, #20]
 8004662:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004666:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	689b      	ldr	r3, [r3, #8]
 800466c:	031b      	lsls	r3, r3, #12
 800466e:	697a      	ldr	r2, [r7, #20]
 8004670:	4313      	orrs	r3, r2
 8004672:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	4a28      	ldr	r2, [pc, #160]	@ (8004718 <TIM_OC4_SetConfig+0x100>)
 8004678:	4293      	cmp	r3, r2
 800467a:	d003      	beq.n	8004684 <TIM_OC4_SetConfig+0x6c>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	4a27      	ldr	r2, [pc, #156]	@ (800471c <TIM_OC4_SetConfig+0x104>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d10d      	bne.n	80046a0 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8004684:	697b      	ldr	r3, [r7, #20]
 8004686:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800468a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	68db      	ldr	r3, [r3, #12]
 8004690:	031b      	lsls	r3, r3, #12
 8004692:	697a      	ldr	r2, [r7, #20]
 8004694:	4313      	orrs	r3, r2
 8004696:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8004698:	697b      	ldr	r3, [r7, #20]
 800469a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800469e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	4a1d      	ldr	r2, [pc, #116]	@ (8004718 <TIM_OC4_SetConfig+0x100>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d00f      	beq.n	80046c8 <TIM_OC4_SetConfig+0xb0>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	4a1c      	ldr	r2, [pc, #112]	@ (800471c <TIM_OC4_SetConfig+0x104>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d00b      	beq.n	80046c8 <TIM_OC4_SetConfig+0xb0>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	4a1b      	ldr	r2, [pc, #108]	@ (8004720 <TIM_OC4_SetConfig+0x108>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d007      	beq.n	80046c8 <TIM_OC4_SetConfig+0xb0>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	4a1a      	ldr	r2, [pc, #104]	@ (8004724 <TIM_OC4_SetConfig+0x10c>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	d003      	beq.n	80046c8 <TIM_OC4_SetConfig+0xb0>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	4a19      	ldr	r2, [pc, #100]	@ (8004728 <TIM_OC4_SetConfig+0x110>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d113      	bne.n	80046f0 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80046c8:	693b      	ldr	r3, [r7, #16]
 80046ca:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80046ce:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80046d0:	693b      	ldr	r3, [r7, #16]
 80046d2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80046d6:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	695b      	ldr	r3, [r3, #20]
 80046dc:	019b      	lsls	r3, r3, #6
 80046de:	693a      	ldr	r2, [r7, #16]
 80046e0:	4313      	orrs	r3, r2
 80046e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	699b      	ldr	r3, [r3, #24]
 80046e8:	019b      	lsls	r3, r3, #6
 80046ea:	693a      	ldr	r2, [r7, #16]
 80046ec:	4313      	orrs	r3, r2
 80046ee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	693a      	ldr	r2, [r7, #16]
 80046f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	68fa      	ldr	r2, [r7, #12]
 80046fa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	685a      	ldr	r2, [r3, #4]
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	697a      	ldr	r2, [r7, #20]
 8004708:	621a      	str	r2, [r3, #32]
}
 800470a:	bf00      	nop
 800470c:	371c      	adds	r7, #28
 800470e:	46bd      	mov	sp, r7
 8004710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004714:	4770      	bx	lr
 8004716:	bf00      	nop
 8004718:	40012c00 	.word	0x40012c00
 800471c:	40013400 	.word	0x40013400
 8004720:	40014000 	.word	0x40014000
 8004724:	40014400 	.word	0x40014400
 8004728:	40014800 	.word	0x40014800

0800472c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800472c:	b480      	push	{r7}
 800472e:	b087      	sub	sp, #28
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
 8004734:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6a1b      	ldr	r3, [r3, #32]
 800473a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6a1b      	ldr	r3, [r3, #32]
 8004740:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004752:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800475a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800475e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	68fa      	ldr	r2, [r7, #12]
 8004766:	4313      	orrs	r3, r2
 8004768:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800476a:	693b      	ldr	r3, [r7, #16]
 800476c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8004770:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	689b      	ldr	r3, [r3, #8]
 8004776:	041b      	lsls	r3, r3, #16
 8004778:	693a      	ldr	r2, [r7, #16]
 800477a:	4313      	orrs	r3, r2
 800477c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	4a17      	ldr	r2, [pc, #92]	@ (80047e0 <TIM_OC5_SetConfig+0xb4>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d00f      	beq.n	80047a6 <TIM_OC5_SetConfig+0x7a>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	4a16      	ldr	r2, [pc, #88]	@ (80047e4 <TIM_OC5_SetConfig+0xb8>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d00b      	beq.n	80047a6 <TIM_OC5_SetConfig+0x7a>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	4a15      	ldr	r2, [pc, #84]	@ (80047e8 <TIM_OC5_SetConfig+0xbc>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d007      	beq.n	80047a6 <TIM_OC5_SetConfig+0x7a>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	4a14      	ldr	r2, [pc, #80]	@ (80047ec <TIM_OC5_SetConfig+0xc0>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d003      	beq.n	80047a6 <TIM_OC5_SetConfig+0x7a>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	4a13      	ldr	r2, [pc, #76]	@ (80047f0 <TIM_OC5_SetConfig+0xc4>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d109      	bne.n	80047ba <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80047a6:	697b      	ldr	r3, [r7, #20]
 80047a8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80047ac:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	695b      	ldr	r3, [r3, #20]
 80047b2:	021b      	lsls	r3, r3, #8
 80047b4:	697a      	ldr	r2, [r7, #20]
 80047b6:	4313      	orrs	r3, r2
 80047b8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	697a      	ldr	r2, [r7, #20]
 80047be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	68fa      	ldr	r2, [r7, #12]
 80047c4:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	685a      	ldr	r2, [r3, #4]
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	693a      	ldr	r2, [r7, #16]
 80047d2:	621a      	str	r2, [r3, #32]
}
 80047d4:	bf00      	nop
 80047d6:	371c      	adds	r7, #28
 80047d8:	46bd      	mov	sp, r7
 80047da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047de:	4770      	bx	lr
 80047e0:	40012c00 	.word	0x40012c00
 80047e4:	40013400 	.word	0x40013400
 80047e8:	40014000 	.word	0x40014000
 80047ec:	40014400 	.word	0x40014400
 80047f0:	40014800 	.word	0x40014800

080047f4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80047f4:	b480      	push	{r7}
 80047f6:	b087      	sub	sp, #28
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
 80047fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6a1b      	ldr	r3, [r3, #32]
 8004802:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6a1b      	ldr	r3, [r3, #32]
 8004808:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	685b      	ldr	r3, [r3, #4]
 8004814:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800481a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004822:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004826:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	021b      	lsls	r3, r3, #8
 800482e:	68fa      	ldr	r2, [r7, #12]
 8004830:	4313      	orrs	r3, r2
 8004832:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004834:	693b      	ldr	r3, [r7, #16]
 8004836:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800483a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	689b      	ldr	r3, [r3, #8]
 8004840:	051b      	lsls	r3, r3, #20
 8004842:	693a      	ldr	r2, [r7, #16]
 8004844:	4313      	orrs	r3, r2
 8004846:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	4a18      	ldr	r2, [pc, #96]	@ (80048ac <TIM_OC6_SetConfig+0xb8>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d00f      	beq.n	8004870 <TIM_OC6_SetConfig+0x7c>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	4a17      	ldr	r2, [pc, #92]	@ (80048b0 <TIM_OC6_SetConfig+0xbc>)
 8004854:	4293      	cmp	r3, r2
 8004856:	d00b      	beq.n	8004870 <TIM_OC6_SetConfig+0x7c>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	4a16      	ldr	r2, [pc, #88]	@ (80048b4 <TIM_OC6_SetConfig+0xc0>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d007      	beq.n	8004870 <TIM_OC6_SetConfig+0x7c>
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	4a15      	ldr	r2, [pc, #84]	@ (80048b8 <TIM_OC6_SetConfig+0xc4>)
 8004864:	4293      	cmp	r3, r2
 8004866:	d003      	beq.n	8004870 <TIM_OC6_SetConfig+0x7c>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	4a14      	ldr	r2, [pc, #80]	@ (80048bc <TIM_OC6_SetConfig+0xc8>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d109      	bne.n	8004884 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004870:	697b      	ldr	r3, [r7, #20]
 8004872:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004876:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	695b      	ldr	r3, [r3, #20]
 800487c:	029b      	lsls	r3, r3, #10
 800487e:	697a      	ldr	r2, [r7, #20]
 8004880:	4313      	orrs	r3, r2
 8004882:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	697a      	ldr	r2, [r7, #20]
 8004888:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	68fa      	ldr	r2, [r7, #12]
 800488e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	685a      	ldr	r2, [r3, #4]
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	693a      	ldr	r2, [r7, #16]
 800489c:	621a      	str	r2, [r3, #32]
}
 800489e:	bf00      	nop
 80048a0:	371c      	adds	r7, #28
 80048a2:	46bd      	mov	sp, r7
 80048a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a8:	4770      	bx	lr
 80048aa:	bf00      	nop
 80048ac:	40012c00 	.word	0x40012c00
 80048b0:	40013400 	.word	0x40013400
 80048b4:	40014000 	.word	0x40014000
 80048b8:	40014400 	.word	0x40014400
 80048bc:	40014800 	.word	0x40014800

080048c0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80048c0:	b480      	push	{r7}
 80048c2:	b087      	sub	sp, #28
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	60f8      	str	r0, [r7, #12]
 80048c8:	60b9      	str	r1, [r7, #8]
 80048ca:	607a      	str	r2, [r7, #4]
 80048cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	6a1b      	ldr	r3, [r3, #32]
 80048d2:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	6a1b      	ldr	r3, [r3, #32]
 80048d8:	f023 0201 	bic.w	r2, r3, #1
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	699b      	ldr	r3, [r3, #24]
 80048e4:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	4a24      	ldr	r2, [pc, #144]	@ (800497c <TIM_TI1_SetConfig+0xbc>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d013      	beq.n	8004916 <TIM_TI1_SetConfig+0x56>
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80048f4:	d00f      	beq.n	8004916 <TIM_TI1_SetConfig+0x56>
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	4a21      	ldr	r2, [pc, #132]	@ (8004980 <TIM_TI1_SetConfig+0xc0>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d00b      	beq.n	8004916 <TIM_TI1_SetConfig+0x56>
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	4a20      	ldr	r2, [pc, #128]	@ (8004984 <TIM_TI1_SetConfig+0xc4>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d007      	beq.n	8004916 <TIM_TI1_SetConfig+0x56>
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	4a1f      	ldr	r2, [pc, #124]	@ (8004988 <TIM_TI1_SetConfig+0xc8>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d003      	beq.n	8004916 <TIM_TI1_SetConfig+0x56>
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	4a1e      	ldr	r2, [pc, #120]	@ (800498c <TIM_TI1_SetConfig+0xcc>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d101      	bne.n	800491a <TIM_TI1_SetConfig+0x5a>
 8004916:	2301      	movs	r3, #1
 8004918:	e000      	b.n	800491c <TIM_TI1_SetConfig+0x5c>
 800491a:	2300      	movs	r3, #0
 800491c:	2b00      	cmp	r3, #0
 800491e:	d008      	beq.n	8004932 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004920:	697b      	ldr	r3, [r7, #20]
 8004922:	f023 0303 	bic.w	r3, r3, #3
 8004926:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004928:	697a      	ldr	r2, [r7, #20]
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	4313      	orrs	r3, r2
 800492e:	617b      	str	r3, [r7, #20]
 8004930:	e003      	b.n	800493a <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004932:	697b      	ldr	r3, [r7, #20]
 8004934:	f043 0301 	orr.w	r3, r3, #1
 8004938:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800493a:	697b      	ldr	r3, [r7, #20]
 800493c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004940:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	011b      	lsls	r3, r3, #4
 8004946:	b2db      	uxtb	r3, r3
 8004948:	697a      	ldr	r2, [r7, #20]
 800494a:	4313      	orrs	r3, r2
 800494c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800494e:	693b      	ldr	r3, [r7, #16]
 8004950:	f023 030a 	bic.w	r3, r3, #10
 8004954:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004956:	68bb      	ldr	r3, [r7, #8]
 8004958:	f003 030a 	and.w	r3, r3, #10
 800495c:	693a      	ldr	r2, [r7, #16]
 800495e:	4313      	orrs	r3, r2
 8004960:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	697a      	ldr	r2, [r7, #20]
 8004966:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	693a      	ldr	r2, [r7, #16]
 800496c:	621a      	str	r2, [r3, #32]
}
 800496e:	bf00      	nop
 8004970:	371c      	adds	r7, #28
 8004972:	46bd      	mov	sp, r7
 8004974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004978:	4770      	bx	lr
 800497a:	bf00      	nop
 800497c:	40012c00 	.word	0x40012c00
 8004980:	40000400 	.word	0x40000400
 8004984:	40000800 	.word	0x40000800
 8004988:	40013400 	.word	0x40013400
 800498c:	40014000 	.word	0x40014000

08004990 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004990:	b480      	push	{r7}
 8004992:	b087      	sub	sp, #28
 8004994:	af00      	add	r7, sp, #0
 8004996:	60f8      	str	r0, [r7, #12]
 8004998:	60b9      	str	r1, [r7, #8]
 800499a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	6a1b      	ldr	r3, [r3, #32]
 80049a0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	6a1b      	ldr	r3, [r3, #32]
 80049a6:	f023 0201 	bic.w	r2, r3, #1
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	699b      	ldr	r3, [r3, #24]
 80049b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80049b4:	693b      	ldr	r3, [r7, #16]
 80049b6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80049ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	011b      	lsls	r3, r3, #4
 80049c0:	693a      	ldr	r2, [r7, #16]
 80049c2:	4313      	orrs	r3, r2
 80049c4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80049c6:	697b      	ldr	r3, [r7, #20]
 80049c8:	f023 030a 	bic.w	r3, r3, #10
 80049cc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80049ce:	697a      	ldr	r2, [r7, #20]
 80049d0:	68bb      	ldr	r3, [r7, #8]
 80049d2:	4313      	orrs	r3, r2
 80049d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	693a      	ldr	r2, [r7, #16]
 80049da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	697a      	ldr	r2, [r7, #20]
 80049e0:	621a      	str	r2, [r3, #32]
}
 80049e2:	bf00      	nop
 80049e4:	371c      	adds	r7, #28
 80049e6:	46bd      	mov	sp, r7
 80049e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ec:	4770      	bx	lr

080049ee <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80049ee:	b480      	push	{r7}
 80049f0:	b087      	sub	sp, #28
 80049f2:	af00      	add	r7, sp, #0
 80049f4:	60f8      	str	r0, [r7, #12]
 80049f6:	60b9      	str	r1, [r7, #8]
 80049f8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	6a1b      	ldr	r3, [r3, #32]
 80049fe:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	6a1b      	ldr	r3, [r3, #32]
 8004a04:	f023 0210 	bic.w	r2, r3, #16
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	699b      	ldr	r3, [r3, #24]
 8004a10:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004a12:	693b      	ldr	r3, [r7, #16]
 8004a14:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004a18:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	031b      	lsls	r3, r3, #12
 8004a1e:	693a      	ldr	r2, [r7, #16]
 8004a20:	4313      	orrs	r3, r2
 8004a22:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004a24:	697b      	ldr	r3, [r7, #20]
 8004a26:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004a2a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004a2c:	68bb      	ldr	r3, [r7, #8]
 8004a2e:	011b      	lsls	r3, r3, #4
 8004a30:	697a      	ldr	r2, [r7, #20]
 8004a32:	4313      	orrs	r3, r2
 8004a34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	693a      	ldr	r2, [r7, #16]
 8004a3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	697a      	ldr	r2, [r7, #20]
 8004a40:	621a      	str	r2, [r3, #32]
}
 8004a42:	bf00      	nop
 8004a44:	371c      	adds	r7, #28
 8004a46:	46bd      	mov	sp, r7
 8004a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4c:	4770      	bx	lr

08004a4e <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004a4e:	b480      	push	{r7}
 8004a50:	b085      	sub	sp, #20
 8004a52:	af00      	add	r7, sp, #0
 8004a54:	6078      	str	r0, [r7, #4]
 8004a56:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	689b      	ldr	r3, [r3, #8]
 8004a5c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8004a64:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a68:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004a6a:	683a      	ldr	r2, [r7, #0]
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	4313      	orrs	r3, r2
 8004a70:	f043 0307 	orr.w	r3, r3, #7
 8004a74:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	68fa      	ldr	r2, [r7, #12]
 8004a7a:	609a      	str	r2, [r3, #8]
}
 8004a7c:	bf00      	nop
 8004a7e:	3714      	adds	r7, #20
 8004a80:	46bd      	mov	sp, r7
 8004a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a86:	4770      	bx	lr

08004a88 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004a88:	b480      	push	{r7}
 8004a8a:	b087      	sub	sp, #28
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	60f8      	str	r0, [r7, #12]
 8004a90:	60b9      	str	r1, [r7, #8]
 8004a92:	607a      	str	r2, [r7, #4]
 8004a94:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	689b      	ldr	r3, [r3, #8]
 8004a9a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a9c:	697b      	ldr	r3, [r7, #20]
 8004a9e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004aa2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	021a      	lsls	r2, r3, #8
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	431a      	orrs	r2, r3
 8004aac:	68bb      	ldr	r3, [r7, #8]
 8004aae:	4313      	orrs	r3, r2
 8004ab0:	697a      	ldr	r2, [r7, #20]
 8004ab2:	4313      	orrs	r3, r2
 8004ab4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	697a      	ldr	r2, [r7, #20]
 8004aba:	609a      	str	r2, [r3, #8]
}
 8004abc:	bf00      	nop
 8004abe:	371c      	adds	r7, #28
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac6:	4770      	bx	lr

08004ac8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004ac8:	b480      	push	{r7}
 8004aca:	b087      	sub	sp, #28
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	60f8      	str	r0, [r7, #12]
 8004ad0:	60b9      	str	r1, [r7, #8]
 8004ad2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004ad4:	68bb      	ldr	r3, [r7, #8]
 8004ad6:	f003 031f 	and.w	r3, r3, #31
 8004ada:	2201      	movs	r2, #1
 8004adc:	fa02 f303 	lsl.w	r3, r2, r3
 8004ae0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	6a1a      	ldr	r2, [r3, #32]
 8004ae6:	697b      	ldr	r3, [r7, #20]
 8004ae8:	43db      	mvns	r3, r3
 8004aea:	401a      	ands	r2, r3
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	6a1a      	ldr	r2, [r3, #32]
 8004af4:	68bb      	ldr	r3, [r7, #8]
 8004af6:	f003 031f 	and.w	r3, r3, #31
 8004afa:	6879      	ldr	r1, [r7, #4]
 8004afc:	fa01 f303 	lsl.w	r3, r1, r3
 8004b00:	431a      	orrs	r2, r3
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	621a      	str	r2, [r3, #32]
}
 8004b06:	bf00      	nop
 8004b08:	371c      	adds	r7, #28
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b10:	4770      	bx	lr

08004b12 <HAL_TIMEx_HallSensor_Init>:
  * @param  htim TIM Hall Sensor Interface handle
  * @param  sConfig TIM Hall Sensor configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Init(TIM_HandleTypeDef *htim, const TIM_HallSensor_InitTypeDef *sConfig)
{
 8004b12:	b580      	push	{r7, lr}
 8004b14:	b08a      	sub	sp, #40	@ 0x28
 8004b16:	af00      	add	r7, sp, #0
 8004b18:	6078      	str	r0, [r7, #4]
 8004b1a:	6039      	str	r1, [r7, #0]
  TIM_OC_InitTypeDef OC_Config;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d101      	bne.n	8004b26 <HAL_TIMEx_HallSensor_Init+0x14>
  {
    return HAL_ERROR;
 8004b22:	2301      	movs	r3, #1
 8004b24:	e0a0      	b.n	8004c68 <HAL_TIMEx_HallSensor_Init+0x156>
  assert_param(IS_TIM_IC_POLARITY(sConfig->IC1Polarity));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b2c:	b2db      	uxtb	r3, r3
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d106      	bne.n	8004b40 <HAL_TIMEx_HallSensor_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2200      	movs	r2, #0
 8004b36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->HallSensor_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIMEx_HallSensor_MspInit(htim);
 8004b3a:	6878      	ldr	r0, [r7, #4]
 8004b3c:	f7fc ff14 	bl	8001968 <HAL_TIMEx_HallSensor_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2202      	movs	r2, #2
 8004b44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681a      	ldr	r2, [r3, #0]
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	3304      	adds	r3, #4
 8004b50:	4619      	mov	r1, r3
 8004b52:	4610      	mov	r0, r2
 8004b54:	f7ff fb22 	bl	800419c <TIM_Base_SetConfig>

  /* Configure the Channel 1 as Input Channel to interface with the three Outputs of the  Hall sensor */
  TIM_TI1_SetConfig(htim->Instance, sConfig->IC1Polarity, TIM_ICSELECTION_TRC, sConfig->IC1Filter);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6818      	ldr	r0, [r3, #0]
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	6819      	ldr	r1, [r3, #0]
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	689b      	ldr	r3, [r3, #8]
 8004b64:	2203      	movs	r2, #3
 8004b66:	f7ff feab 	bl	80048c0 <TIM_TI1_SetConfig>

  /* Reset the IC1PSC Bits */
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	699a      	ldr	r2, [r3, #24]
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f022 020c 	bic.w	r2, r2, #12
 8004b78:	619a      	str	r2, [r3, #24]
  /* Set the IC1PSC value */
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	6999      	ldr	r1, [r3, #24]
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	685a      	ldr	r2, [r3, #4]
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	430a      	orrs	r2, r1
 8004b8a:	619a      	str	r2, [r3, #24]

  /* Enable the Hall sensor interface (XOR function of the three inputs) */
  htim->Instance->CR2 |= TIM_CR2_TI1S;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	685a      	ldr	r2, [r3, #4]
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004b9a:	605a      	str	r2, [r3, #4]

  /* Select the TIM_TS_TI1F_ED signal as Input trigger for the TIM */
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	689b      	ldr	r3, [r3, #8]
 8004ba2:	687a      	ldr	r2, [r7, #4]
 8004ba4:	6812      	ldr	r2, [r2, #0]
 8004ba6:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8004baa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004bae:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_TS_TI1F_ED;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	689a      	ldr	r2, [r3, #8]
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004bbe:	609a      	str	r2, [r3, #8]

  /* Use the TIM_TS_TI1F_ED signal to reset the TIM counter each edge detection */
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	689b      	ldr	r3, [r3, #8]
 8004bc6:	687a      	ldr	r2, [r7, #4]
 8004bc8:	6812      	ldr	r2, [r2, #0]
 8004bca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004bce:	f023 0307 	bic.w	r3, r3, #7
 8004bd2:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_SLAVEMODE_RESET;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	689a      	ldr	r2, [r3, #8]
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f042 0204 	orr.w	r2, r2, #4
 8004be2:	609a      	str	r2, [r3, #8]

  /* Program channel 2 in PWM 2 mode with the desired Commutation_Delay*/
  OC_Config.OCFastMode = TIM_OCFAST_DISABLE;
 8004be4:	2300      	movs	r3, #0
 8004be6:	61fb      	str	r3, [r7, #28]
  OC_Config.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004be8:	2300      	movs	r3, #0
 8004bea:	623b      	str	r3, [r7, #32]
  OC_Config.OCMode = TIM_OCMODE_PWM2;
 8004bec:	2370      	movs	r3, #112	@ 0x70
 8004bee:	60fb      	str	r3, [r7, #12]
  OC_Config.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	627b      	str	r3, [r7, #36]	@ 0x24
  OC_Config.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	61bb      	str	r3, [r7, #24]
  OC_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	617b      	str	r3, [r7, #20]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	68db      	ldr	r3, [r3, #12]
 8004c00:	613b      	str	r3, [r7, #16]

  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f107 020c 	add.w	r2, r7, #12
 8004c0a:	4611      	mov	r1, r2
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	f7ff fbf1 	bl	80043f4 <TIM_OC2_SetConfig>

  /* Select OC2REF as trigger output on TRGO: write the MMS bits in the TIMx_CR2
    register to 101 */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	685b      	ldr	r3, [r3, #4]
 8004c18:	687a      	ldr	r2, [r7, #4]
 8004c1a:	6812      	ldr	r2, [r2, #0]
 8004c1c:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8004c20:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c24:	6053      	str	r3, [r2, #4]
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	685a      	ldr	r2, [r3, #4]
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f042 0250 	orr.w	r2, r2, #80	@ 0x50
 8004c34:	605a      	str	r2, [r3, #4]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2201      	movs	r2, #1
 8004c3a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2201      	movs	r2, #1
 8004c42:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2201      	movs	r2, #1
 8004c4a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2201      	movs	r2, #1
 8004c52:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2201      	movs	r2, #1
 8004c5a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2201      	movs	r2, #1
 8004c62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004c66:	2300      	movs	r3, #0
}
 8004c68:	4618      	mov	r0, r3
 8004c6a:	3728      	adds	r7, #40	@ 0x28
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	bd80      	pop	{r7, pc}

08004c70 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b084      	sub	sp, #16
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
 8004c78:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d109      	bne.n	8004c94 <HAL_TIMEx_PWMN_Start+0x24>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004c86:	b2db      	uxtb	r3, r3
 8004c88:	2b01      	cmp	r3, #1
 8004c8a:	bf14      	ite	ne
 8004c8c:	2301      	movne	r3, #1
 8004c8e:	2300      	moveq	r3, #0
 8004c90:	b2db      	uxtb	r3, r3
 8004c92:	e022      	b.n	8004cda <HAL_TIMEx_PWMN_Start+0x6a>
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	2b04      	cmp	r3, #4
 8004c98:	d109      	bne.n	8004cae <HAL_TIMEx_PWMN_Start+0x3e>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004ca0:	b2db      	uxtb	r3, r3
 8004ca2:	2b01      	cmp	r3, #1
 8004ca4:	bf14      	ite	ne
 8004ca6:	2301      	movne	r3, #1
 8004ca8:	2300      	moveq	r3, #0
 8004caa:	b2db      	uxtb	r3, r3
 8004cac:	e015      	b.n	8004cda <HAL_TIMEx_PWMN_Start+0x6a>
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	2b08      	cmp	r3, #8
 8004cb2:	d109      	bne.n	8004cc8 <HAL_TIMEx_PWMN_Start+0x58>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8004cba:	b2db      	uxtb	r3, r3
 8004cbc:	2b01      	cmp	r3, #1
 8004cbe:	bf14      	ite	ne
 8004cc0:	2301      	movne	r3, #1
 8004cc2:	2300      	moveq	r3, #0
 8004cc4:	b2db      	uxtb	r3, r3
 8004cc6:	e008      	b.n	8004cda <HAL_TIMEx_PWMN_Start+0x6a>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8004cce:	b2db      	uxtb	r3, r3
 8004cd0:	2b01      	cmp	r3, #1
 8004cd2:	bf14      	ite	ne
 8004cd4:	2301      	movne	r3, #1
 8004cd6:	2300      	moveq	r3, #0
 8004cd8:	b2db      	uxtb	r3, r3
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d001      	beq.n	8004ce2 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8004cde:	2301      	movs	r3, #1
 8004ce0:	e069      	b.n	8004db6 <HAL_TIMEx_PWMN_Start+0x146>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d104      	bne.n	8004cf2 <HAL_TIMEx_PWMN_Start+0x82>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2202      	movs	r2, #2
 8004cec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004cf0:	e013      	b.n	8004d1a <HAL_TIMEx_PWMN_Start+0xaa>
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	2b04      	cmp	r3, #4
 8004cf6:	d104      	bne.n	8004d02 <HAL_TIMEx_PWMN_Start+0x92>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2202      	movs	r2, #2
 8004cfc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004d00:	e00b      	b.n	8004d1a <HAL_TIMEx_PWMN_Start+0xaa>
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	2b08      	cmp	r3, #8
 8004d06:	d104      	bne.n	8004d12 <HAL_TIMEx_PWMN_Start+0xa2>
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2202      	movs	r2, #2
 8004d0c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004d10:	e003      	b.n	8004d1a <HAL_TIMEx_PWMN_Start+0xaa>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2202      	movs	r2, #2
 8004d16:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	2204      	movs	r2, #4
 8004d20:	6839      	ldr	r1, [r7, #0]
 8004d22:	4618      	mov	r0, r3
 8004d24:	f000 f966 	bl	8004ff4 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004d36:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	4a20      	ldr	r2, [pc, #128]	@ (8004dc0 <HAL_TIMEx_PWMN_Start+0x150>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d018      	beq.n	8004d74 <HAL_TIMEx_PWMN_Start+0x104>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d4a:	d013      	beq.n	8004d74 <HAL_TIMEx_PWMN_Start+0x104>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	4a1c      	ldr	r2, [pc, #112]	@ (8004dc4 <HAL_TIMEx_PWMN_Start+0x154>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d00e      	beq.n	8004d74 <HAL_TIMEx_PWMN_Start+0x104>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	4a1b      	ldr	r2, [pc, #108]	@ (8004dc8 <HAL_TIMEx_PWMN_Start+0x158>)
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d009      	beq.n	8004d74 <HAL_TIMEx_PWMN_Start+0x104>
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	4a19      	ldr	r2, [pc, #100]	@ (8004dcc <HAL_TIMEx_PWMN_Start+0x15c>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d004      	beq.n	8004d74 <HAL_TIMEx_PWMN_Start+0x104>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	4a18      	ldr	r2, [pc, #96]	@ (8004dd0 <HAL_TIMEx_PWMN_Start+0x160>)
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d115      	bne.n	8004da0 <HAL_TIMEx_PWMN_Start+0x130>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	689a      	ldr	r2, [r3, #8]
 8004d7a:	4b16      	ldr	r3, [pc, #88]	@ (8004dd4 <HAL_TIMEx_PWMN_Start+0x164>)
 8004d7c:	4013      	ands	r3, r2
 8004d7e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	2b06      	cmp	r3, #6
 8004d84:	d015      	beq.n	8004db2 <HAL_TIMEx_PWMN_Start+0x142>
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d8c:	d011      	beq.n	8004db2 <HAL_TIMEx_PWMN_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	681a      	ldr	r2, [r3, #0]
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f042 0201 	orr.w	r2, r2, #1
 8004d9c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d9e:	e008      	b.n	8004db2 <HAL_TIMEx_PWMN_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	681a      	ldr	r2, [r3, #0]
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f042 0201 	orr.w	r2, r2, #1
 8004dae:	601a      	str	r2, [r3, #0]
 8004db0:	e000      	b.n	8004db4 <HAL_TIMEx_PWMN_Start+0x144>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004db2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004db4:	2300      	movs	r3, #0
}
 8004db6:	4618      	mov	r0, r3
 8004db8:	3710      	adds	r7, #16
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	bd80      	pop	{r7, pc}
 8004dbe:	bf00      	nop
 8004dc0:	40012c00 	.word	0x40012c00
 8004dc4:	40000400 	.word	0x40000400
 8004dc8:	40000800 	.word	0x40000800
 8004dcc:	40013400 	.word	0x40013400
 8004dd0:	40014000 	.word	0x40014000
 8004dd4:	00010007 	.word	0x00010007

08004dd8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004dd8:	b480      	push	{r7}
 8004dda:	b085      	sub	sp, #20
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
 8004de0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004de8:	2b01      	cmp	r3, #1
 8004dea:	d101      	bne.n	8004df0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004dec:	2302      	movs	r3, #2
 8004dee:	e065      	b.n	8004ebc <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2201      	movs	r2, #1
 8004df4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2202      	movs	r2, #2
 8004dfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	685b      	ldr	r3, [r3, #4]
 8004e06:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	689b      	ldr	r3, [r3, #8]
 8004e0e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	4a2c      	ldr	r2, [pc, #176]	@ (8004ec8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d004      	beq.n	8004e24 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	4a2b      	ldr	r2, [pc, #172]	@ (8004ecc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d108      	bne.n	8004e36 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004e2a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	685b      	ldr	r3, [r3, #4]
 8004e30:	68fa      	ldr	r2, [r7, #12]
 8004e32:	4313      	orrs	r3, r2
 8004e34:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8004e3c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e40:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	68fa      	ldr	r2, [r7, #12]
 8004e48:	4313      	orrs	r3, r2
 8004e4a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	68fa      	ldr	r2, [r7, #12]
 8004e52:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	4a1b      	ldr	r2, [pc, #108]	@ (8004ec8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d018      	beq.n	8004e90 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e66:	d013      	beq.n	8004e90 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4a18      	ldr	r2, [pc, #96]	@ (8004ed0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d00e      	beq.n	8004e90 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4a17      	ldr	r2, [pc, #92]	@ (8004ed4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d009      	beq.n	8004e90 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	4a12      	ldr	r2, [pc, #72]	@ (8004ecc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d004      	beq.n	8004e90 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	4a13      	ldr	r2, [pc, #76]	@ (8004ed8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d10c      	bne.n	8004eaa <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004e90:	68bb      	ldr	r3, [r7, #8]
 8004e92:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004e96:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	689b      	ldr	r3, [r3, #8]
 8004e9c:	68ba      	ldr	r2, [r7, #8]
 8004e9e:	4313      	orrs	r3, r2
 8004ea0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	68ba      	ldr	r2, [r7, #8]
 8004ea8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2201      	movs	r2, #1
 8004eae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004eba:	2300      	movs	r3, #0
}
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	3714      	adds	r7, #20
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec6:	4770      	bx	lr
 8004ec8:	40012c00 	.word	0x40012c00
 8004ecc:	40013400 	.word	0x40013400
 8004ed0:	40000400 	.word	0x40000400
 8004ed4:	40000800 	.word	0x40000800
 8004ed8:	40014000 	.word	0x40014000

08004edc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004edc:	b480      	push	{r7}
 8004ede:	b085      	sub	sp, #20
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
 8004ee4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004ef0:	2b01      	cmp	r3, #1
 8004ef2:	d101      	bne.n	8004ef8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004ef4:	2302      	movs	r3, #2
 8004ef6:	e073      	b.n	8004fe0 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2201      	movs	r2, #1
 8004efc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	68db      	ldr	r3, [r3, #12]
 8004f0a:	4313      	orrs	r3, r2
 8004f0c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	689b      	ldr	r3, [r3, #8]
 8004f18:	4313      	orrs	r3, r2
 8004f1a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	685b      	ldr	r3, [r3, #4]
 8004f26:	4313      	orrs	r3, r2
 8004f28:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	4313      	orrs	r3, r2
 8004f36:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	691b      	ldr	r3, [r3, #16]
 8004f42:	4313      	orrs	r3, r2
 8004f44:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	695b      	ldr	r3, [r3, #20]
 8004f50:	4313      	orrs	r3, r2
 8004f52:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f5e:	4313      	orrs	r3, r2
 8004f60:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	699b      	ldr	r3, [r3, #24]
 8004f6c:	041b      	lsls	r3, r3, #16
 8004f6e:	4313      	orrs	r3, r2
 8004f70:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	69db      	ldr	r3, [r3, #28]
 8004f7c:	4313      	orrs	r3, r2
 8004f7e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	4a19      	ldr	r2, [pc, #100]	@ (8004fec <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d004      	beq.n	8004f94 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	4a18      	ldr	r2, [pc, #96]	@ (8004ff0 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d11c      	bne.n	8004fce <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f9e:	051b      	lsls	r3, r3, #20
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	6a1b      	ldr	r3, [r3, #32]
 8004fae:	4313      	orrs	r3, r2
 8004fb0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fbc:	4313      	orrs	r3, r2
 8004fbe:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fca:	4313      	orrs	r3, r2
 8004fcc:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	68fa      	ldr	r2, [r7, #12]
 8004fd4:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2200      	movs	r2, #0
 8004fda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004fde:	2300      	movs	r3, #0
}
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	3714      	adds	r7, #20
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fea:	4770      	bx	lr
 8004fec:	40012c00 	.word	0x40012c00
 8004ff0:	40013400 	.word	0x40013400

08004ff4 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8004ff4:	b480      	push	{r7}
 8004ff6:	b087      	sub	sp, #28
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	60f8      	str	r0, [r7, #12]
 8004ffc:	60b9      	str	r1, [r7, #8]
 8004ffe:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 8005000:	68bb      	ldr	r3, [r7, #8]
 8005002:	f003 030f 	and.w	r3, r3, #15
 8005006:	2204      	movs	r2, #4
 8005008:	fa02 f303 	lsl.w	r3, r2, r3
 800500c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	6a1a      	ldr	r2, [r3, #32]
 8005012:	697b      	ldr	r3, [r7, #20]
 8005014:	43db      	mvns	r3, r3
 8005016:	401a      	ands	r2, r3
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	6a1a      	ldr	r2, [r3, #32]
 8005020:	68bb      	ldr	r3, [r7, #8]
 8005022:	f003 030f 	and.w	r3, r3, #15
 8005026:	6879      	ldr	r1, [r7, #4]
 8005028:	fa01 f303 	lsl.w	r3, r1, r3
 800502c:	431a      	orrs	r2, r3
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	621a      	str	r2, [r3, #32]
}
 8005032:	bf00      	nop
 8005034:	371c      	adds	r7, #28
 8005036:	46bd      	mov	sp, r7
 8005038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503c:	4770      	bx	lr

0800503e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800503e:	b580      	push	{r7, lr}
 8005040:	b082      	sub	sp, #8
 8005042:	af00      	add	r7, sp, #0
 8005044:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d101      	bne.n	8005050 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800504c:	2301      	movs	r3, #1
 800504e:	e042      	b.n	80050d6 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005056:	2b00      	cmp	r3, #0
 8005058:	d106      	bne.n	8005068 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2200      	movs	r2, #0
 800505e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005062:	6878      	ldr	r0, [r7, #4]
 8005064:	f7fc fe94 	bl	8001d90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2224      	movs	r2, #36	@ 0x24
 800506c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	681a      	ldr	r2, [r3, #0]
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f022 0201 	bic.w	r2, r2, #1
 800507e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005084:	2b00      	cmp	r3, #0
 8005086:	d002      	beq.n	800508e <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005088:	6878      	ldr	r0, [r7, #4]
 800508a:	f000 faf5 	bl	8005678 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800508e:	6878      	ldr	r0, [r7, #4]
 8005090:	f000 f826 	bl	80050e0 <UART_SetConfig>
 8005094:	4603      	mov	r3, r0
 8005096:	2b01      	cmp	r3, #1
 8005098:	d101      	bne.n	800509e <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800509a:	2301      	movs	r3, #1
 800509c:	e01b      	b.n	80050d6 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	685a      	ldr	r2, [r3, #4]
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80050ac:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	689a      	ldr	r2, [r3, #8]
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80050bc:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	681a      	ldr	r2, [r3, #0]
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f042 0201 	orr.w	r2, r2, #1
 80050cc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80050ce:	6878      	ldr	r0, [r7, #4]
 80050d0:	f000 fb74 	bl	80057bc <UART_CheckIdleState>
 80050d4:	4603      	mov	r3, r0
}
 80050d6:	4618      	mov	r0, r3
 80050d8:	3708      	adds	r7, #8
 80050da:	46bd      	mov	sp, r7
 80050dc:	bd80      	pop	{r7, pc}
	...

080050e0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80050e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80050e4:	b08c      	sub	sp, #48	@ 0x30
 80050e6:	af00      	add	r7, sp, #0
 80050e8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80050ea:	2300      	movs	r3, #0
 80050ec:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80050f0:	697b      	ldr	r3, [r7, #20]
 80050f2:	689a      	ldr	r2, [r3, #8]
 80050f4:	697b      	ldr	r3, [r7, #20]
 80050f6:	691b      	ldr	r3, [r3, #16]
 80050f8:	431a      	orrs	r2, r3
 80050fa:	697b      	ldr	r3, [r7, #20]
 80050fc:	695b      	ldr	r3, [r3, #20]
 80050fe:	431a      	orrs	r2, r3
 8005100:	697b      	ldr	r3, [r7, #20]
 8005102:	69db      	ldr	r3, [r3, #28]
 8005104:	4313      	orrs	r3, r2
 8005106:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005108:	697b      	ldr	r3, [r7, #20]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	681a      	ldr	r2, [r3, #0]
 800510e:	4bab      	ldr	r3, [pc, #684]	@ (80053bc <UART_SetConfig+0x2dc>)
 8005110:	4013      	ands	r3, r2
 8005112:	697a      	ldr	r2, [r7, #20]
 8005114:	6812      	ldr	r2, [r2, #0]
 8005116:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005118:	430b      	orrs	r3, r1
 800511a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800511c:	697b      	ldr	r3, [r7, #20]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	685b      	ldr	r3, [r3, #4]
 8005122:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005126:	697b      	ldr	r3, [r7, #20]
 8005128:	68da      	ldr	r2, [r3, #12]
 800512a:	697b      	ldr	r3, [r7, #20]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	430a      	orrs	r2, r1
 8005130:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005132:	697b      	ldr	r3, [r7, #20]
 8005134:	699b      	ldr	r3, [r3, #24]
 8005136:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005138:	697b      	ldr	r3, [r7, #20]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	4aa0      	ldr	r2, [pc, #640]	@ (80053c0 <UART_SetConfig+0x2e0>)
 800513e:	4293      	cmp	r3, r2
 8005140:	d004      	beq.n	800514c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005142:	697b      	ldr	r3, [r7, #20]
 8005144:	6a1b      	ldr	r3, [r3, #32]
 8005146:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005148:	4313      	orrs	r3, r2
 800514a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800514c:	697b      	ldr	r3, [r7, #20]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	689b      	ldr	r3, [r3, #8]
 8005152:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8005156:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800515a:	697a      	ldr	r2, [r7, #20]
 800515c:	6812      	ldr	r2, [r2, #0]
 800515e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005160:	430b      	orrs	r3, r1
 8005162:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005164:	697b      	ldr	r3, [r7, #20]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800516a:	f023 010f 	bic.w	r1, r3, #15
 800516e:	697b      	ldr	r3, [r7, #20]
 8005170:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005172:	697b      	ldr	r3, [r7, #20]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	430a      	orrs	r2, r1
 8005178:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800517a:	697b      	ldr	r3, [r7, #20]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	4a91      	ldr	r2, [pc, #580]	@ (80053c4 <UART_SetConfig+0x2e4>)
 8005180:	4293      	cmp	r3, r2
 8005182:	d125      	bne.n	80051d0 <UART_SetConfig+0xf0>
 8005184:	4b90      	ldr	r3, [pc, #576]	@ (80053c8 <UART_SetConfig+0x2e8>)
 8005186:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800518a:	f003 0303 	and.w	r3, r3, #3
 800518e:	2b03      	cmp	r3, #3
 8005190:	d81a      	bhi.n	80051c8 <UART_SetConfig+0xe8>
 8005192:	a201      	add	r2, pc, #4	@ (adr r2, 8005198 <UART_SetConfig+0xb8>)
 8005194:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005198:	080051a9 	.word	0x080051a9
 800519c:	080051b9 	.word	0x080051b9
 80051a0:	080051b1 	.word	0x080051b1
 80051a4:	080051c1 	.word	0x080051c1
 80051a8:	2301      	movs	r3, #1
 80051aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80051ae:	e0d6      	b.n	800535e <UART_SetConfig+0x27e>
 80051b0:	2302      	movs	r3, #2
 80051b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80051b6:	e0d2      	b.n	800535e <UART_SetConfig+0x27e>
 80051b8:	2304      	movs	r3, #4
 80051ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80051be:	e0ce      	b.n	800535e <UART_SetConfig+0x27e>
 80051c0:	2308      	movs	r3, #8
 80051c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80051c6:	e0ca      	b.n	800535e <UART_SetConfig+0x27e>
 80051c8:	2310      	movs	r3, #16
 80051ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80051ce:	e0c6      	b.n	800535e <UART_SetConfig+0x27e>
 80051d0:	697b      	ldr	r3, [r7, #20]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	4a7d      	ldr	r2, [pc, #500]	@ (80053cc <UART_SetConfig+0x2ec>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d138      	bne.n	800524c <UART_SetConfig+0x16c>
 80051da:	4b7b      	ldr	r3, [pc, #492]	@ (80053c8 <UART_SetConfig+0x2e8>)
 80051dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051e0:	f003 030c 	and.w	r3, r3, #12
 80051e4:	2b0c      	cmp	r3, #12
 80051e6:	d82d      	bhi.n	8005244 <UART_SetConfig+0x164>
 80051e8:	a201      	add	r2, pc, #4	@ (adr r2, 80051f0 <UART_SetConfig+0x110>)
 80051ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051ee:	bf00      	nop
 80051f0:	08005225 	.word	0x08005225
 80051f4:	08005245 	.word	0x08005245
 80051f8:	08005245 	.word	0x08005245
 80051fc:	08005245 	.word	0x08005245
 8005200:	08005235 	.word	0x08005235
 8005204:	08005245 	.word	0x08005245
 8005208:	08005245 	.word	0x08005245
 800520c:	08005245 	.word	0x08005245
 8005210:	0800522d 	.word	0x0800522d
 8005214:	08005245 	.word	0x08005245
 8005218:	08005245 	.word	0x08005245
 800521c:	08005245 	.word	0x08005245
 8005220:	0800523d 	.word	0x0800523d
 8005224:	2300      	movs	r3, #0
 8005226:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800522a:	e098      	b.n	800535e <UART_SetConfig+0x27e>
 800522c:	2302      	movs	r3, #2
 800522e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005232:	e094      	b.n	800535e <UART_SetConfig+0x27e>
 8005234:	2304      	movs	r3, #4
 8005236:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800523a:	e090      	b.n	800535e <UART_SetConfig+0x27e>
 800523c:	2308      	movs	r3, #8
 800523e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005242:	e08c      	b.n	800535e <UART_SetConfig+0x27e>
 8005244:	2310      	movs	r3, #16
 8005246:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800524a:	e088      	b.n	800535e <UART_SetConfig+0x27e>
 800524c:	697b      	ldr	r3, [r7, #20]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4a5f      	ldr	r2, [pc, #380]	@ (80053d0 <UART_SetConfig+0x2f0>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d125      	bne.n	80052a2 <UART_SetConfig+0x1c2>
 8005256:	4b5c      	ldr	r3, [pc, #368]	@ (80053c8 <UART_SetConfig+0x2e8>)
 8005258:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800525c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005260:	2b30      	cmp	r3, #48	@ 0x30
 8005262:	d016      	beq.n	8005292 <UART_SetConfig+0x1b2>
 8005264:	2b30      	cmp	r3, #48	@ 0x30
 8005266:	d818      	bhi.n	800529a <UART_SetConfig+0x1ba>
 8005268:	2b20      	cmp	r3, #32
 800526a:	d00a      	beq.n	8005282 <UART_SetConfig+0x1a2>
 800526c:	2b20      	cmp	r3, #32
 800526e:	d814      	bhi.n	800529a <UART_SetConfig+0x1ba>
 8005270:	2b00      	cmp	r3, #0
 8005272:	d002      	beq.n	800527a <UART_SetConfig+0x19a>
 8005274:	2b10      	cmp	r3, #16
 8005276:	d008      	beq.n	800528a <UART_SetConfig+0x1aa>
 8005278:	e00f      	b.n	800529a <UART_SetConfig+0x1ba>
 800527a:	2300      	movs	r3, #0
 800527c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005280:	e06d      	b.n	800535e <UART_SetConfig+0x27e>
 8005282:	2302      	movs	r3, #2
 8005284:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005288:	e069      	b.n	800535e <UART_SetConfig+0x27e>
 800528a:	2304      	movs	r3, #4
 800528c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005290:	e065      	b.n	800535e <UART_SetConfig+0x27e>
 8005292:	2308      	movs	r3, #8
 8005294:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005298:	e061      	b.n	800535e <UART_SetConfig+0x27e>
 800529a:	2310      	movs	r3, #16
 800529c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80052a0:	e05d      	b.n	800535e <UART_SetConfig+0x27e>
 80052a2:	697b      	ldr	r3, [r7, #20]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	4a4b      	ldr	r2, [pc, #300]	@ (80053d4 <UART_SetConfig+0x2f4>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d125      	bne.n	80052f8 <UART_SetConfig+0x218>
 80052ac:	4b46      	ldr	r3, [pc, #280]	@ (80053c8 <UART_SetConfig+0x2e8>)
 80052ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052b2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80052b6:	2bc0      	cmp	r3, #192	@ 0xc0
 80052b8:	d016      	beq.n	80052e8 <UART_SetConfig+0x208>
 80052ba:	2bc0      	cmp	r3, #192	@ 0xc0
 80052bc:	d818      	bhi.n	80052f0 <UART_SetConfig+0x210>
 80052be:	2b80      	cmp	r3, #128	@ 0x80
 80052c0:	d00a      	beq.n	80052d8 <UART_SetConfig+0x1f8>
 80052c2:	2b80      	cmp	r3, #128	@ 0x80
 80052c4:	d814      	bhi.n	80052f0 <UART_SetConfig+0x210>
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d002      	beq.n	80052d0 <UART_SetConfig+0x1f0>
 80052ca:	2b40      	cmp	r3, #64	@ 0x40
 80052cc:	d008      	beq.n	80052e0 <UART_SetConfig+0x200>
 80052ce:	e00f      	b.n	80052f0 <UART_SetConfig+0x210>
 80052d0:	2300      	movs	r3, #0
 80052d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80052d6:	e042      	b.n	800535e <UART_SetConfig+0x27e>
 80052d8:	2302      	movs	r3, #2
 80052da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80052de:	e03e      	b.n	800535e <UART_SetConfig+0x27e>
 80052e0:	2304      	movs	r3, #4
 80052e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80052e6:	e03a      	b.n	800535e <UART_SetConfig+0x27e>
 80052e8:	2308      	movs	r3, #8
 80052ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80052ee:	e036      	b.n	800535e <UART_SetConfig+0x27e>
 80052f0:	2310      	movs	r3, #16
 80052f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80052f6:	e032      	b.n	800535e <UART_SetConfig+0x27e>
 80052f8:	697b      	ldr	r3, [r7, #20]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	4a30      	ldr	r2, [pc, #192]	@ (80053c0 <UART_SetConfig+0x2e0>)
 80052fe:	4293      	cmp	r3, r2
 8005300:	d12a      	bne.n	8005358 <UART_SetConfig+0x278>
 8005302:	4b31      	ldr	r3, [pc, #196]	@ (80053c8 <UART_SetConfig+0x2e8>)
 8005304:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005308:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800530c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005310:	d01a      	beq.n	8005348 <UART_SetConfig+0x268>
 8005312:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005316:	d81b      	bhi.n	8005350 <UART_SetConfig+0x270>
 8005318:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800531c:	d00c      	beq.n	8005338 <UART_SetConfig+0x258>
 800531e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005322:	d815      	bhi.n	8005350 <UART_SetConfig+0x270>
 8005324:	2b00      	cmp	r3, #0
 8005326:	d003      	beq.n	8005330 <UART_SetConfig+0x250>
 8005328:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800532c:	d008      	beq.n	8005340 <UART_SetConfig+0x260>
 800532e:	e00f      	b.n	8005350 <UART_SetConfig+0x270>
 8005330:	2300      	movs	r3, #0
 8005332:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005336:	e012      	b.n	800535e <UART_SetConfig+0x27e>
 8005338:	2302      	movs	r3, #2
 800533a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800533e:	e00e      	b.n	800535e <UART_SetConfig+0x27e>
 8005340:	2304      	movs	r3, #4
 8005342:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005346:	e00a      	b.n	800535e <UART_SetConfig+0x27e>
 8005348:	2308      	movs	r3, #8
 800534a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800534e:	e006      	b.n	800535e <UART_SetConfig+0x27e>
 8005350:	2310      	movs	r3, #16
 8005352:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005356:	e002      	b.n	800535e <UART_SetConfig+0x27e>
 8005358:	2310      	movs	r3, #16
 800535a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800535e:	697b      	ldr	r3, [r7, #20]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	4a17      	ldr	r2, [pc, #92]	@ (80053c0 <UART_SetConfig+0x2e0>)
 8005364:	4293      	cmp	r3, r2
 8005366:	f040 80a8 	bne.w	80054ba <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800536a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800536e:	2b08      	cmp	r3, #8
 8005370:	d834      	bhi.n	80053dc <UART_SetConfig+0x2fc>
 8005372:	a201      	add	r2, pc, #4	@ (adr r2, 8005378 <UART_SetConfig+0x298>)
 8005374:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005378:	0800539d 	.word	0x0800539d
 800537c:	080053dd 	.word	0x080053dd
 8005380:	080053a5 	.word	0x080053a5
 8005384:	080053dd 	.word	0x080053dd
 8005388:	080053ab 	.word	0x080053ab
 800538c:	080053dd 	.word	0x080053dd
 8005390:	080053dd 	.word	0x080053dd
 8005394:	080053dd 	.word	0x080053dd
 8005398:	080053b3 	.word	0x080053b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800539c:	f7fd ff2c 	bl	80031f8 <HAL_RCC_GetPCLK1Freq>
 80053a0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80053a2:	e021      	b.n	80053e8 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80053a4:	4b0c      	ldr	r3, [pc, #48]	@ (80053d8 <UART_SetConfig+0x2f8>)
 80053a6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80053a8:	e01e      	b.n	80053e8 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80053aa:	f7fd feb7 	bl	800311c <HAL_RCC_GetSysClockFreq>
 80053ae:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80053b0:	e01a      	b.n	80053e8 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80053b2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80053b6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80053b8:	e016      	b.n	80053e8 <UART_SetConfig+0x308>
 80053ba:	bf00      	nop
 80053bc:	cfff69f3 	.word	0xcfff69f3
 80053c0:	40008000 	.word	0x40008000
 80053c4:	40013800 	.word	0x40013800
 80053c8:	40021000 	.word	0x40021000
 80053cc:	40004400 	.word	0x40004400
 80053d0:	40004800 	.word	0x40004800
 80053d4:	40004c00 	.word	0x40004c00
 80053d8:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80053dc:	2300      	movs	r3, #0
 80053de:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80053e0:	2301      	movs	r3, #1
 80053e2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80053e6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80053e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	f000 812a 	beq.w	8005644 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80053f0:	697b      	ldr	r3, [r7, #20]
 80053f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053f4:	4a9e      	ldr	r2, [pc, #632]	@ (8005670 <UART_SetConfig+0x590>)
 80053f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80053fa:	461a      	mov	r2, r3
 80053fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053fe:	fbb3 f3f2 	udiv	r3, r3, r2
 8005402:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005404:	697b      	ldr	r3, [r7, #20]
 8005406:	685a      	ldr	r2, [r3, #4]
 8005408:	4613      	mov	r3, r2
 800540a:	005b      	lsls	r3, r3, #1
 800540c:	4413      	add	r3, r2
 800540e:	69ba      	ldr	r2, [r7, #24]
 8005410:	429a      	cmp	r2, r3
 8005412:	d305      	bcc.n	8005420 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005414:	697b      	ldr	r3, [r7, #20]
 8005416:	685b      	ldr	r3, [r3, #4]
 8005418:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800541a:	69ba      	ldr	r2, [r7, #24]
 800541c:	429a      	cmp	r2, r3
 800541e:	d903      	bls.n	8005428 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8005420:	2301      	movs	r3, #1
 8005422:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005426:	e10d      	b.n	8005644 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005428:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800542a:	2200      	movs	r2, #0
 800542c:	60bb      	str	r3, [r7, #8]
 800542e:	60fa      	str	r2, [r7, #12]
 8005430:	697b      	ldr	r3, [r7, #20]
 8005432:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005434:	4a8e      	ldr	r2, [pc, #568]	@ (8005670 <UART_SetConfig+0x590>)
 8005436:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800543a:	b29b      	uxth	r3, r3
 800543c:	2200      	movs	r2, #0
 800543e:	603b      	str	r3, [r7, #0]
 8005440:	607a      	str	r2, [r7, #4]
 8005442:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005446:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800544a:	f7fb fbab 	bl	8000ba4 <__aeabi_uldivmod>
 800544e:	4602      	mov	r2, r0
 8005450:	460b      	mov	r3, r1
 8005452:	4610      	mov	r0, r2
 8005454:	4619      	mov	r1, r3
 8005456:	f04f 0200 	mov.w	r2, #0
 800545a:	f04f 0300 	mov.w	r3, #0
 800545e:	020b      	lsls	r3, r1, #8
 8005460:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005464:	0202      	lsls	r2, r0, #8
 8005466:	6979      	ldr	r1, [r7, #20]
 8005468:	6849      	ldr	r1, [r1, #4]
 800546a:	0849      	lsrs	r1, r1, #1
 800546c:	2000      	movs	r0, #0
 800546e:	460c      	mov	r4, r1
 8005470:	4605      	mov	r5, r0
 8005472:	eb12 0804 	adds.w	r8, r2, r4
 8005476:	eb43 0905 	adc.w	r9, r3, r5
 800547a:	697b      	ldr	r3, [r7, #20]
 800547c:	685b      	ldr	r3, [r3, #4]
 800547e:	2200      	movs	r2, #0
 8005480:	469a      	mov	sl, r3
 8005482:	4693      	mov	fp, r2
 8005484:	4652      	mov	r2, sl
 8005486:	465b      	mov	r3, fp
 8005488:	4640      	mov	r0, r8
 800548a:	4649      	mov	r1, r9
 800548c:	f7fb fb8a 	bl	8000ba4 <__aeabi_uldivmod>
 8005490:	4602      	mov	r2, r0
 8005492:	460b      	mov	r3, r1
 8005494:	4613      	mov	r3, r2
 8005496:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005498:	6a3b      	ldr	r3, [r7, #32]
 800549a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800549e:	d308      	bcc.n	80054b2 <UART_SetConfig+0x3d2>
 80054a0:	6a3b      	ldr	r3, [r7, #32]
 80054a2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80054a6:	d204      	bcs.n	80054b2 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 80054a8:	697b      	ldr	r3, [r7, #20]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	6a3a      	ldr	r2, [r7, #32]
 80054ae:	60da      	str	r2, [r3, #12]
 80054b0:	e0c8      	b.n	8005644 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 80054b2:	2301      	movs	r3, #1
 80054b4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80054b8:	e0c4      	b.n	8005644 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80054ba:	697b      	ldr	r3, [r7, #20]
 80054bc:	69db      	ldr	r3, [r3, #28]
 80054be:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80054c2:	d167      	bne.n	8005594 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 80054c4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80054c8:	2b08      	cmp	r3, #8
 80054ca:	d828      	bhi.n	800551e <UART_SetConfig+0x43e>
 80054cc:	a201      	add	r2, pc, #4	@ (adr r2, 80054d4 <UART_SetConfig+0x3f4>)
 80054ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054d2:	bf00      	nop
 80054d4:	080054f9 	.word	0x080054f9
 80054d8:	08005501 	.word	0x08005501
 80054dc:	08005509 	.word	0x08005509
 80054e0:	0800551f 	.word	0x0800551f
 80054e4:	0800550f 	.word	0x0800550f
 80054e8:	0800551f 	.word	0x0800551f
 80054ec:	0800551f 	.word	0x0800551f
 80054f0:	0800551f 	.word	0x0800551f
 80054f4:	08005517 	.word	0x08005517
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80054f8:	f7fd fe7e 	bl	80031f8 <HAL_RCC_GetPCLK1Freq>
 80054fc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80054fe:	e014      	b.n	800552a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005500:	f7fd fe90 	bl	8003224 <HAL_RCC_GetPCLK2Freq>
 8005504:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005506:	e010      	b.n	800552a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005508:	4b5a      	ldr	r3, [pc, #360]	@ (8005674 <UART_SetConfig+0x594>)
 800550a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800550c:	e00d      	b.n	800552a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800550e:	f7fd fe05 	bl	800311c <HAL_RCC_GetSysClockFreq>
 8005512:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005514:	e009      	b.n	800552a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005516:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800551a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800551c:	e005      	b.n	800552a <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 800551e:	2300      	movs	r3, #0
 8005520:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005522:	2301      	movs	r3, #1
 8005524:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005528:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800552a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800552c:	2b00      	cmp	r3, #0
 800552e:	f000 8089 	beq.w	8005644 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005532:	697b      	ldr	r3, [r7, #20]
 8005534:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005536:	4a4e      	ldr	r2, [pc, #312]	@ (8005670 <UART_SetConfig+0x590>)
 8005538:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800553c:	461a      	mov	r2, r3
 800553e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005540:	fbb3 f3f2 	udiv	r3, r3, r2
 8005544:	005a      	lsls	r2, r3, #1
 8005546:	697b      	ldr	r3, [r7, #20]
 8005548:	685b      	ldr	r3, [r3, #4]
 800554a:	085b      	lsrs	r3, r3, #1
 800554c:	441a      	add	r2, r3
 800554e:	697b      	ldr	r3, [r7, #20]
 8005550:	685b      	ldr	r3, [r3, #4]
 8005552:	fbb2 f3f3 	udiv	r3, r2, r3
 8005556:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005558:	6a3b      	ldr	r3, [r7, #32]
 800555a:	2b0f      	cmp	r3, #15
 800555c:	d916      	bls.n	800558c <UART_SetConfig+0x4ac>
 800555e:	6a3b      	ldr	r3, [r7, #32]
 8005560:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005564:	d212      	bcs.n	800558c <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005566:	6a3b      	ldr	r3, [r7, #32]
 8005568:	b29b      	uxth	r3, r3
 800556a:	f023 030f 	bic.w	r3, r3, #15
 800556e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005570:	6a3b      	ldr	r3, [r7, #32]
 8005572:	085b      	lsrs	r3, r3, #1
 8005574:	b29b      	uxth	r3, r3
 8005576:	f003 0307 	and.w	r3, r3, #7
 800557a:	b29a      	uxth	r2, r3
 800557c:	8bfb      	ldrh	r3, [r7, #30]
 800557e:	4313      	orrs	r3, r2
 8005580:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005582:	697b      	ldr	r3, [r7, #20]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	8bfa      	ldrh	r2, [r7, #30]
 8005588:	60da      	str	r2, [r3, #12]
 800558a:	e05b      	b.n	8005644 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800558c:	2301      	movs	r3, #1
 800558e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005592:	e057      	b.n	8005644 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005594:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005598:	2b08      	cmp	r3, #8
 800559a:	d828      	bhi.n	80055ee <UART_SetConfig+0x50e>
 800559c:	a201      	add	r2, pc, #4	@ (adr r2, 80055a4 <UART_SetConfig+0x4c4>)
 800559e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055a2:	bf00      	nop
 80055a4:	080055c9 	.word	0x080055c9
 80055a8:	080055d1 	.word	0x080055d1
 80055ac:	080055d9 	.word	0x080055d9
 80055b0:	080055ef 	.word	0x080055ef
 80055b4:	080055df 	.word	0x080055df
 80055b8:	080055ef 	.word	0x080055ef
 80055bc:	080055ef 	.word	0x080055ef
 80055c0:	080055ef 	.word	0x080055ef
 80055c4:	080055e7 	.word	0x080055e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80055c8:	f7fd fe16 	bl	80031f8 <HAL_RCC_GetPCLK1Freq>
 80055cc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80055ce:	e014      	b.n	80055fa <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80055d0:	f7fd fe28 	bl	8003224 <HAL_RCC_GetPCLK2Freq>
 80055d4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80055d6:	e010      	b.n	80055fa <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80055d8:	4b26      	ldr	r3, [pc, #152]	@ (8005674 <UART_SetConfig+0x594>)
 80055da:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80055dc:	e00d      	b.n	80055fa <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80055de:	f7fd fd9d 	bl	800311c <HAL_RCC_GetSysClockFreq>
 80055e2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80055e4:	e009      	b.n	80055fa <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80055e6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80055ea:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80055ec:	e005      	b.n	80055fa <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 80055ee:	2300      	movs	r3, #0
 80055f0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80055f2:	2301      	movs	r3, #1
 80055f4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80055f8:	bf00      	nop
    }

    if (pclk != 0U)
 80055fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d021      	beq.n	8005644 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005600:	697b      	ldr	r3, [r7, #20]
 8005602:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005604:	4a1a      	ldr	r2, [pc, #104]	@ (8005670 <UART_SetConfig+0x590>)
 8005606:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800560a:	461a      	mov	r2, r3
 800560c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800560e:	fbb3 f2f2 	udiv	r2, r3, r2
 8005612:	697b      	ldr	r3, [r7, #20]
 8005614:	685b      	ldr	r3, [r3, #4]
 8005616:	085b      	lsrs	r3, r3, #1
 8005618:	441a      	add	r2, r3
 800561a:	697b      	ldr	r3, [r7, #20]
 800561c:	685b      	ldr	r3, [r3, #4]
 800561e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005622:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005624:	6a3b      	ldr	r3, [r7, #32]
 8005626:	2b0f      	cmp	r3, #15
 8005628:	d909      	bls.n	800563e <UART_SetConfig+0x55e>
 800562a:	6a3b      	ldr	r3, [r7, #32]
 800562c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005630:	d205      	bcs.n	800563e <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005632:	6a3b      	ldr	r3, [r7, #32]
 8005634:	b29a      	uxth	r2, r3
 8005636:	697b      	ldr	r3, [r7, #20]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	60da      	str	r2, [r3, #12]
 800563c:	e002      	b.n	8005644 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800563e:	2301      	movs	r3, #1
 8005640:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005644:	697b      	ldr	r3, [r7, #20]
 8005646:	2201      	movs	r2, #1
 8005648:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800564c:	697b      	ldr	r3, [r7, #20]
 800564e:	2201      	movs	r2, #1
 8005650:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005654:	697b      	ldr	r3, [r7, #20]
 8005656:	2200      	movs	r2, #0
 8005658:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800565a:	697b      	ldr	r3, [r7, #20]
 800565c:	2200      	movs	r2, #0
 800565e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005660:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8005664:	4618      	mov	r0, r3
 8005666:	3730      	adds	r7, #48	@ 0x30
 8005668:	46bd      	mov	sp, r7
 800566a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800566e:	bf00      	nop
 8005670:	08005fbc 	.word	0x08005fbc
 8005674:	00f42400 	.word	0x00f42400

08005678 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005678:	b480      	push	{r7}
 800567a:	b083      	sub	sp, #12
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005684:	f003 0308 	and.w	r3, r3, #8
 8005688:	2b00      	cmp	r3, #0
 800568a:	d00a      	beq.n	80056a2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	685b      	ldr	r3, [r3, #4]
 8005692:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	430a      	orrs	r2, r1
 80056a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056a6:	f003 0301 	and.w	r3, r3, #1
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d00a      	beq.n	80056c4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	685b      	ldr	r3, [r3, #4]
 80056b4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	430a      	orrs	r2, r1
 80056c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056c8:	f003 0302 	and.w	r3, r3, #2
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d00a      	beq.n	80056e6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	685b      	ldr	r3, [r3, #4]
 80056d6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	430a      	orrs	r2, r1
 80056e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056ea:	f003 0304 	and.w	r3, r3, #4
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d00a      	beq.n	8005708 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	685b      	ldr	r3, [r3, #4]
 80056f8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	430a      	orrs	r2, r1
 8005706:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800570c:	f003 0310 	and.w	r3, r3, #16
 8005710:	2b00      	cmp	r3, #0
 8005712:	d00a      	beq.n	800572a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	689b      	ldr	r3, [r3, #8]
 800571a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	430a      	orrs	r2, r1
 8005728:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800572e:	f003 0320 	and.w	r3, r3, #32
 8005732:	2b00      	cmp	r3, #0
 8005734:	d00a      	beq.n	800574c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	689b      	ldr	r3, [r3, #8]
 800573c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	430a      	orrs	r2, r1
 800574a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005750:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005754:	2b00      	cmp	r3, #0
 8005756:	d01a      	beq.n	800578e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	685b      	ldr	r3, [r3, #4]
 800575e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	430a      	orrs	r2, r1
 800576c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005772:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005776:	d10a      	bne.n	800578e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	685b      	ldr	r3, [r3, #4]
 800577e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	430a      	orrs	r2, r1
 800578c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005792:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005796:	2b00      	cmp	r3, #0
 8005798:	d00a      	beq.n	80057b0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	685b      	ldr	r3, [r3, #4]
 80057a0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	430a      	orrs	r2, r1
 80057ae:	605a      	str	r2, [r3, #4]
  }
}
 80057b0:	bf00      	nop
 80057b2:	370c      	adds	r7, #12
 80057b4:	46bd      	mov	sp, r7
 80057b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ba:	4770      	bx	lr

080057bc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b098      	sub	sp, #96	@ 0x60
 80057c0:	af02      	add	r7, sp, #8
 80057c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2200      	movs	r2, #0
 80057c8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80057cc:	f7fc fbc6 	bl	8001f5c <HAL_GetTick>
 80057d0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f003 0308 	and.w	r3, r3, #8
 80057dc:	2b08      	cmp	r3, #8
 80057de:	d12f      	bne.n	8005840 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80057e0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80057e4:	9300      	str	r3, [sp, #0]
 80057e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80057e8:	2200      	movs	r2, #0
 80057ea:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80057ee:	6878      	ldr	r0, [r7, #4]
 80057f0:	f000 f88e 	bl	8005910 <UART_WaitOnFlagUntilTimeout>
 80057f4:	4603      	mov	r3, r0
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d022      	beq.n	8005840 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005800:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005802:	e853 3f00 	ldrex	r3, [r3]
 8005806:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005808:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800580a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800580e:	653b      	str	r3, [r7, #80]	@ 0x50
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	461a      	mov	r2, r3
 8005816:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005818:	647b      	str	r3, [r7, #68]	@ 0x44
 800581a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800581c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800581e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005820:	e841 2300 	strex	r3, r2, [r1]
 8005824:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005826:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005828:	2b00      	cmp	r3, #0
 800582a:	d1e6      	bne.n	80057fa <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2220      	movs	r2, #32
 8005830:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2200      	movs	r2, #0
 8005838:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800583c:	2303      	movs	r3, #3
 800583e:	e063      	b.n	8005908 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f003 0304 	and.w	r3, r3, #4
 800584a:	2b04      	cmp	r3, #4
 800584c:	d149      	bne.n	80058e2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800584e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005852:	9300      	str	r3, [sp, #0]
 8005854:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005856:	2200      	movs	r2, #0
 8005858:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800585c:	6878      	ldr	r0, [r7, #4]
 800585e:	f000 f857 	bl	8005910 <UART_WaitOnFlagUntilTimeout>
 8005862:	4603      	mov	r3, r0
 8005864:	2b00      	cmp	r3, #0
 8005866:	d03c      	beq.n	80058e2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800586e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005870:	e853 3f00 	ldrex	r3, [r3]
 8005874:	623b      	str	r3, [r7, #32]
   return(result);
 8005876:	6a3b      	ldr	r3, [r7, #32]
 8005878:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800587c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	461a      	mov	r2, r3
 8005884:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005886:	633b      	str	r3, [r7, #48]	@ 0x30
 8005888:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800588a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800588c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800588e:	e841 2300 	strex	r3, r2, [r1]
 8005892:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005894:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005896:	2b00      	cmp	r3, #0
 8005898:	d1e6      	bne.n	8005868 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	3308      	adds	r3, #8
 80058a0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058a2:	693b      	ldr	r3, [r7, #16]
 80058a4:	e853 3f00 	ldrex	r3, [r3]
 80058a8:	60fb      	str	r3, [r7, #12]
   return(result);
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	f023 0301 	bic.w	r3, r3, #1
 80058b0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	3308      	adds	r3, #8
 80058b8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80058ba:	61fa      	str	r2, [r7, #28]
 80058bc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058be:	69b9      	ldr	r1, [r7, #24]
 80058c0:	69fa      	ldr	r2, [r7, #28]
 80058c2:	e841 2300 	strex	r3, r2, [r1]
 80058c6:	617b      	str	r3, [r7, #20]
   return(result);
 80058c8:	697b      	ldr	r3, [r7, #20]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d1e5      	bne.n	800589a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	2220      	movs	r2, #32
 80058d2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	2200      	movs	r2, #0
 80058da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80058de:	2303      	movs	r3, #3
 80058e0:	e012      	b.n	8005908 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2220      	movs	r2, #32
 80058e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	2220      	movs	r2, #32
 80058ee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	2200      	movs	r2, #0
 80058f6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2200      	movs	r2, #0
 80058fc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2200      	movs	r2, #0
 8005902:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005906:	2300      	movs	r3, #0
}
 8005908:	4618      	mov	r0, r3
 800590a:	3758      	adds	r7, #88	@ 0x58
 800590c:	46bd      	mov	sp, r7
 800590e:	bd80      	pop	{r7, pc}

08005910 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b084      	sub	sp, #16
 8005914:	af00      	add	r7, sp, #0
 8005916:	60f8      	str	r0, [r7, #12]
 8005918:	60b9      	str	r1, [r7, #8]
 800591a:	603b      	str	r3, [r7, #0]
 800591c:	4613      	mov	r3, r2
 800591e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005920:	e04f      	b.n	80059c2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005922:	69bb      	ldr	r3, [r7, #24]
 8005924:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005928:	d04b      	beq.n	80059c2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800592a:	f7fc fb17 	bl	8001f5c <HAL_GetTick>
 800592e:	4602      	mov	r2, r0
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	1ad3      	subs	r3, r2, r3
 8005934:	69ba      	ldr	r2, [r7, #24]
 8005936:	429a      	cmp	r2, r3
 8005938:	d302      	bcc.n	8005940 <UART_WaitOnFlagUntilTimeout+0x30>
 800593a:	69bb      	ldr	r3, [r7, #24]
 800593c:	2b00      	cmp	r3, #0
 800593e:	d101      	bne.n	8005944 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005940:	2303      	movs	r3, #3
 8005942:	e04e      	b.n	80059e2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f003 0304 	and.w	r3, r3, #4
 800594e:	2b00      	cmp	r3, #0
 8005950:	d037      	beq.n	80059c2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005952:	68bb      	ldr	r3, [r7, #8]
 8005954:	2b80      	cmp	r3, #128	@ 0x80
 8005956:	d034      	beq.n	80059c2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005958:	68bb      	ldr	r3, [r7, #8]
 800595a:	2b40      	cmp	r3, #64	@ 0x40
 800595c:	d031      	beq.n	80059c2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	69db      	ldr	r3, [r3, #28]
 8005964:	f003 0308 	and.w	r3, r3, #8
 8005968:	2b08      	cmp	r3, #8
 800596a:	d110      	bne.n	800598e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	2208      	movs	r2, #8
 8005972:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005974:	68f8      	ldr	r0, [r7, #12]
 8005976:	f000 f838 	bl	80059ea <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	2208      	movs	r2, #8
 800597e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	2200      	movs	r2, #0
 8005986:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800598a:	2301      	movs	r3, #1
 800598c:	e029      	b.n	80059e2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	69db      	ldr	r3, [r3, #28]
 8005994:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005998:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800599c:	d111      	bne.n	80059c2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80059a6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80059a8:	68f8      	ldr	r0, [r7, #12]
 80059aa:	f000 f81e 	bl	80059ea <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	2220      	movs	r2, #32
 80059b2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	2200      	movs	r2, #0
 80059ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80059be:	2303      	movs	r3, #3
 80059c0:	e00f      	b.n	80059e2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	69da      	ldr	r2, [r3, #28]
 80059c8:	68bb      	ldr	r3, [r7, #8]
 80059ca:	4013      	ands	r3, r2
 80059cc:	68ba      	ldr	r2, [r7, #8]
 80059ce:	429a      	cmp	r2, r3
 80059d0:	bf0c      	ite	eq
 80059d2:	2301      	moveq	r3, #1
 80059d4:	2300      	movne	r3, #0
 80059d6:	b2db      	uxtb	r3, r3
 80059d8:	461a      	mov	r2, r3
 80059da:	79fb      	ldrb	r3, [r7, #7]
 80059dc:	429a      	cmp	r2, r3
 80059de:	d0a0      	beq.n	8005922 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80059e0:	2300      	movs	r3, #0
}
 80059e2:	4618      	mov	r0, r3
 80059e4:	3710      	adds	r7, #16
 80059e6:	46bd      	mov	sp, r7
 80059e8:	bd80      	pop	{r7, pc}

080059ea <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80059ea:	b480      	push	{r7}
 80059ec:	b095      	sub	sp, #84	@ 0x54
 80059ee:	af00      	add	r7, sp, #0
 80059f0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059fa:	e853 3f00 	ldrex	r3, [r3]
 80059fe:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005a00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a02:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005a06:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	461a      	mov	r2, r3
 8005a0e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005a10:	643b      	str	r3, [r7, #64]	@ 0x40
 8005a12:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a14:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005a16:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005a18:	e841 2300 	strex	r3, r2, [r1]
 8005a1c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005a1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d1e6      	bne.n	80059f2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	3308      	adds	r3, #8
 8005a2a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a2c:	6a3b      	ldr	r3, [r7, #32]
 8005a2e:	e853 3f00 	ldrex	r3, [r3]
 8005a32:	61fb      	str	r3, [r7, #28]
   return(result);
 8005a34:	69fb      	ldr	r3, [r7, #28]
 8005a36:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005a3a:	f023 0301 	bic.w	r3, r3, #1
 8005a3e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	3308      	adds	r3, #8
 8005a46:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005a48:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005a4a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a4c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005a4e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005a50:	e841 2300 	strex	r3, r2, [r1]
 8005a54:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005a56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d1e3      	bne.n	8005a24 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005a60:	2b01      	cmp	r3, #1
 8005a62:	d118      	bne.n	8005a96 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	e853 3f00 	ldrex	r3, [r3]
 8005a70:	60bb      	str	r3, [r7, #8]
   return(result);
 8005a72:	68bb      	ldr	r3, [r7, #8]
 8005a74:	f023 0310 	bic.w	r3, r3, #16
 8005a78:	647b      	str	r3, [r7, #68]	@ 0x44
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	461a      	mov	r2, r3
 8005a80:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005a82:	61bb      	str	r3, [r7, #24]
 8005a84:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a86:	6979      	ldr	r1, [r7, #20]
 8005a88:	69ba      	ldr	r2, [r7, #24]
 8005a8a:	e841 2300 	strex	r3, r2, [r1]
 8005a8e:	613b      	str	r3, [r7, #16]
   return(result);
 8005a90:	693b      	ldr	r3, [r7, #16]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d1e6      	bne.n	8005a64 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2220      	movs	r2, #32
 8005a9a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8005aaa:	bf00      	nop
 8005aac:	3754      	adds	r7, #84	@ 0x54
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab4:	4770      	bx	lr

08005ab6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005ab6:	b480      	push	{r7}
 8005ab8:	b085      	sub	sp, #20
 8005aba:	af00      	add	r7, sp, #0
 8005abc:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005ac4:	2b01      	cmp	r3, #1
 8005ac6:	d101      	bne.n	8005acc <HAL_UARTEx_DisableFifoMode+0x16>
 8005ac8:	2302      	movs	r3, #2
 8005aca:	e027      	b.n	8005b1c <HAL_UARTEx_DisableFifoMode+0x66>
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2201      	movs	r2, #1
 8005ad0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2224      	movs	r2, #36	@ 0x24
 8005ad8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	681a      	ldr	r2, [r3, #0]
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f022 0201 	bic.w	r2, r2, #1
 8005af2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005afa:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2200      	movs	r2, #0
 8005b00:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	68fa      	ldr	r2, [r7, #12]
 8005b08:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	2220      	movs	r2, #32
 8005b0e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2200      	movs	r2, #0
 8005b16:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005b1a:	2300      	movs	r3, #0
}
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	3714      	adds	r7, #20
 8005b20:	46bd      	mov	sp, r7
 8005b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b26:	4770      	bx	lr

08005b28 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b084      	sub	sp, #16
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
 8005b30:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005b38:	2b01      	cmp	r3, #1
 8005b3a:	d101      	bne.n	8005b40 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005b3c:	2302      	movs	r3, #2
 8005b3e:	e02d      	b.n	8005b9c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2201      	movs	r2, #1
 8005b44:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2224      	movs	r2, #36	@ 0x24
 8005b4c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	681a      	ldr	r2, [r3, #0]
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f022 0201 	bic.w	r2, r2, #1
 8005b66:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	689b      	ldr	r3, [r3, #8]
 8005b6e:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	683a      	ldr	r2, [r7, #0]
 8005b78:	430a      	orrs	r2, r1
 8005b7a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005b7c:	6878      	ldr	r0, [r7, #4]
 8005b7e:	f000 f84f 	bl	8005c20 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	68fa      	ldr	r2, [r7, #12]
 8005b88:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2220      	movs	r2, #32
 8005b8e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2200      	movs	r2, #0
 8005b96:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005b9a:	2300      	movs	r3, #0
}
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	3710      	adds	r7, #16
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	bd80      	pop	{r7, pc}

08005ba4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b084      	sub	sp, #16
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
 8005bac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005bb4:	2b01      	cmp	r3, #1
 8005bb6:	d101      	bne.n	8005bbc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005bb8:	2302      	movs	r3, #2
 8005bba:	e02d      	b.n	8005c18 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2201      	movs	r2, #1
 8005bc0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2224      	movs	r2, #36	@ 0x24
 8005bc8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	681a      	ldr	r2, [r3, #0]
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f022 0201 	bic.w	r2, r2, #1
 8005be2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	689b      	ldr	r3, [r3, #8]
 8005bea:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	683a      	ldr	r2, [r7, #0]
 8005bf4:	430a      	orrs	r2, r1
 8005bf6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005bf8:	6878      	ldr	r0, [r7, #4]
 8005bfa:	f000 f811 	bl	8005c20 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	68fa      	ldr	r2, [r7, #12]
 8005c04:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	2220      	movs	r2, #32
 8005c0a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2200      	movs	r2, #0
 8005c12:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005c16:	2300      	movs	r3, #0
}
 8005c18:	4618      	mov	r0, r3
 8005c1a:	3710      	adds	r7, #16
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	bd80      	pop	{r7, pc}

08005c20 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005c20:	b480      	push	{r7}
 8005c22:	b085      	sub	sp, #20
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d108      	bne.n	8005c42 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2201      	movs	r2, #1
 8005c34:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2201      	movs	r2, #1
 8005c3c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005c40:	e031      	b.n	8005ca6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005c42:	2308      	movs	r3, #8
 8005c44:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005c46:	2308      	movs	r3, #8
 8005c48:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	689b      	ldr	r3, [r3, #8]
 8005c50:	0e5b      	lsrs	r3, r3, #25
 8005c52:	b2db      	uxtb	r3, r3
 8005c54:	f003 0307 	and.w	r3, r3, #7
 8005c58:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	689b      	ldr	r3, [r3, #8]
 8005c60:	0f5b      	lsrs	r3, r3, #29
 8005c62:	b2db      	uxtb	r3, r3
 8005c64:	f003 0307 	and.w	r3, r3, #7
 8005c68:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005c6a:	7bbb      	ldrb	r3, [r7, #14]
 8005c6c:	7b3a      	ldrb	r2, [r7, #12]
 8005c6e:	4911      	ldr	r1, [pc, #68]	@ (8005cb4 <UARTEx_SetNbDataToProcess+0x94>)
 8005c70:	5c8a      	ldrb	r2, [r1, r2]
 8005c72:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005c76:	7b3a      	ldrb	r2, [r7, #12]
 8005c78:	490f      	ldr	r1, [pc, #60]	@ (8005cb8 <UARTEx_SetNbDataToProcess+0x98>)
 8005c7a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005c7c:	fb93 f3f2 	sdiv	r3, r3, r2
 8005c80:	b29a      	uxth	r2, r3
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005c88:	7bfb      	ldrb	r3, [r7, #15]
 8005c8a:	7b7a      	ldrb	r2, [r7, #13]
 8005c8c:	4909      	ldr	r1, [pc, #36]	@ (8005cb4 <UARTEx_SetNbDataToProcess+0x94>)
 8005c8e:	5c8a      	ldrb	r2, [r1, r2]
 8005c90:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005c94:	7b7a      	ldrb	r2, [r7, #13]
 8005c96:	4908      	ldr	r1, [pc, #32]	@ (8005cb8 <UARTEx_SetNbDataToProcess+0x98>)
 8005c98:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005c9a:	fb93 f3f2 	sdiv	r3, r3, r2
 8005c9e:	b29a      	uxth	r2, r3
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8005ca6:	bf00      	nop
 8005ca8:	3714      	adds	r7, #20
 8005caa:	46bd      	mov	sp, r7
 8005cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb0:	4770      	bx	lr
 8005cb2:	bf00      	nop
 8005cb4:	08005fd4 	.word	0x08005fd4
 8005cb8:	08005fdc 	.word	0x08005fdc

08005cbc <Servo_Init>:
uint8_t Servo_Init(
		Servo_Structure *Sx,
		float cpu_freq,
		bool isCHN
)
{
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	b086      	sub	sp, #24
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	60f8      	str	r0, [r7, #12]
 8005cc4:	ed87 0a02 	vstr	s0, [r7, #8]
 8005cc8:	460b      	mov	r3, r1
 8005cca:	71fb      	strb	r3, [r7, #7]
	HAL_TIM_Base_Start(Sx->htimx);
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	f7fd fdf5 	bl	80038c0 <HAL_TIM_Base_Start>
	if (isCHN) HAL_TIMEx_PWMN_Start(Sx->htimx, Sx->channelx);
 8005cd6:	79fb      	ldrb	r3, [r7, #7]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d008      	beq.n	8005cee <Servo_Init+0x32>
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	681a      	ldr	r2, [r3, #0]
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	685b      	ldr	r3, [r3, #4]
 8005ce4:	4619      	mov	r1, r3
 8005ce6:	4610      	mov	r0, r2
 8005ce8:	f7fe ffc2 	bl	8004c70 <HAL_TIMEx_PWMN_Start>
 8005cec:	e007      	b.n	8005cfe <Servo_Init+0x42>
	else HAL_TIM_PWM_Start(Sx->htimx, Sx->channelx);
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681a      	ldr	r2, [r3, #0]
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	685b      	ldr	r3, [r3, #4]
 8005cf6:	4619      	mov	r1, r3
 8005cf8:	4610      	mov	r0, r2
 8005cfa:	f7fd fe9b 	bl	8003a34 <HAL_TIM_PWM_Start>

	if (50.0 >= cpu_freq / 2.0) return -1;
 8005cfe:	68b8      	ldr	r0, [r7, #8]
 8005d00:	f7fa fbee 	bl	80004e0 <__aeabi_f2d>
 8005d04:	f04f 0200 	mov.w	r2, #0
 8005d08:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8005d0c:	f7fa fd6a 	bl	80007e4 <__aeabi_ddiv>
 8005d10:	4602      	mov	r2, r0
 8005d12:	460b      	mov	r3, r1
 8005d14:	4610      	mov	r0, r2
 8005d16:	4619      	mov	r1, r3
 8005d18:	f04f 0200 	mov.w	r2, #0
 8005d1c:	4b27      	ldr	r3, [pc, #156]	@ (8005dbc <Servo_Init+0x100>)
 8005d1e:	f7fa feb3 	bl	8000a88 <__aeabi_dcmple>
 8005d22:	4603      	mov	r3, r0
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d001      	beq.n	8005d2c <Servo_Init+0x70>
 8005d28:	23ff      	movs	r3, #255	@ 0xff
 8005d2a:	e042      	b.n	8005db2 <Servo_Init+0xf6>
	uint32_t period_cyc = (uint32_t) (cpu_freq / 50.0);
 8005d2c:	68b8      	ldr	r0, [r7, #8]
 8005d2e:	f7fa fbd7 	bl	80004e0 <__aeabi_f2d>
 8005d32:	f04f 0200 	mov.w	r2, #0
 8005d36:	4b21      	ldr	r3, [pc, #132]	@ (8005dbc <Servo_Init+0x100>)
 8005d38:	f7fa fd54 	bl	80007e4 <__aeabi_ddiv>
 8005d3c:	4602      	mov	r2, r0
 8005d3e:	460b      	mov	r3, r1
 8005d40:	4610      	mov	r0, r2
 8005d42:	4619      	mov	r1, r3
 8005d44:	f7fa febe 	bl	8000ac4 <__aeabi_d2uiz>
 8005d48:	4603      	mov	r3, r0
 8005d4a:	617b      	str	r3, [r7, #20]
	uint16_t prescaler = (uint16_t) (period_cyc / 65535 + 1);
 8005d4c:	697b      	ldr	r3, [r7, #20]
 8005d4e:	4a1c      	ldr	r2, [pc, #112]	@ (8005dc0 <Servo_Init+0x104>)
 8005d50:	fba2 2303 	umull	r2, r3, r2, r3
 8005d54:	0bdb      	lsrs	r3, r3, #15
 8005d56:	b29b      	uxth	r3, r3
 8005d58:	3301      	adds	r3, #1
 8005d5a:	827b      	strh	r3, [r7, #18]
	uint16_t overflow = (uint16_t) ((period_cyc + (prescaler / 2)) / prescaler);
 8005d5c:	8a7b      	ldrh	r3, [r7, #18]
 8005d5e:	085b      	lsrs	r3, r3, #1
 8005d60:	b29b      	uxth	r3, r3
 8005d62:	461a      	mov	r2, r3
 8005d64:	697b      	ldr	r3, [r7, #20]
 8005d66:	441a      	add	r2, r3
 8005d68:	8a7b      	ldrh	r3, [r7, #18]
 8005d6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d6e:	823b      	strh	r3, [r7, #16]
	__HAL_TIM_SET_PRESCALER(Sx->htimx, prescaler);
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	8a7a      	ldrh	r2, [r7, #18]
 8005d78:	629a      	str	r2, [r3, #40]	@ 0x28
	__HAL_TIM_SET_AUTORELOAD(Sx->htimx, overflow);
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	8a3a      	ldrh	r2, [r7, #16]
 8005d82:	62da      	str	r2, [r3, #44]	@ 0x2c
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	8a3a      	ldrh	r2, [r7, #16]
 8005d8a:	60da      	str	r2, [r3, #12]
	Sx->gain = overflow / 20.0;
 8005d8c:	8a3b      	ldrh	r3, [r7, #16]
 8005d8e:	4618      	mov	r0, r3
 8005d90:	f7fa fb94 	bl	80004bc <__aeabi_i2d>
 8005d94:	f04f 0200 	mov.w	r2, #0
 8005d98:	4b0a      	ldr	r3, [pc, #40]	@ (8005dc4 <Servo_Init+0x108>)
 8005d9a:	f7fa fd23 	bl	80007e4 <__aeabi_ddiv>
 8005d9e:	4602      	mov	r2, r0
 8005da0:	460b      	mov	r3, r1
 8005da2:	4610      	mov	r0, r2
 8005da4:	4619      	mov	r1, r3
 8005da6:	f7fa fead 	bl	8000b04 <__aeabi_d2f>
 8005daa:	4602      	mov	r2, r0
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	609a      	str	r2, [r3, #8]
	return 0;
 8005db0:	2300      	movs	r3, #0
}
 8005db2:	4618      	mov	r0, r3
 8005db4:	3718      	adds	r7, #24
 8005db6:	46bd      	mov	sp, r7
 8005db8:	bd80      	pop	{r7, pc}
 8005dba:	bf00      	nop
 8005dbc:	40490000 	.word	0x40490000
 8005dc0:	80008001 	.word	0x80008001
 8005dc4:	40340000 	.word	0x40340000

08005dc8 <RC_Set_Input_Range>:
void RC_Set_Input_Range(
		Servo_Structure *Sx,
		float _min, //degree
		float _max
)
{
 8005dc8:	b480      	push	{r7}
 8005dca:	b087      	sub	sp, #28
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	60f8      	str	r0, [r7, #12]
 8005dd0:	ed87 0a02 	vstr	s0, [r7, #8]
 8005dd4:	edc7 0a01 	vstr	s1, [r7, #4]
	float m = (2.5 - 0.5) / (_max - _min);
 8005dd8:	ed97 7a01 	vldr	s14, [r7, #4]
 8005ddc:	edd7 7a02 	vldr	s15, [r7, #8]
 8005de0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005de4:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8005de8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005dec:	edc7 7a05 	vstr	s15, [r7, #20]
	float c = 0.5 - (m * _min);
 8005df0:	ed97 7a05 	vldr	s14, [r7, #20]
 8005df4:	edd7 7a02 	vldr	s15, [r7, #8]
 8005df8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005dfc:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005e00:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005e04:	edc7 7a04 	vstr	s15, [r7, #16]

	Sx->offset = Sx->gain * c;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	ed93 7a02 	vldr	s14, [r3, #8]
 8005e0e:	edd7 7a04 	vldr	s15, [r7, #16]
 8005e12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	edc3 7a03 	vstr	s15, [r3, #12]
	Sx->gain *= m;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	ed93 7a02 	vldr	s14, [r3, #8]
 8005e22:	edd7 7a05 	vldr	s15, [r7, #20]
 8005e26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8005e30:	bf00      	nop
 8005e32:	371c      	adds	r7, #28
 8005e34:	46bd      	mov	sp, r7
 8005e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3a:	4770      	bx	lr

08005e3c <RC_Signal_Write>:

void RC_Signal_Write(
		Servo_Structure *Sx,
		int32_t cmd
)
{
 8005e3c:	b480      	push	{r7}
 8005e3e:	b085      	sub	sp, #20
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
 8005e44:	6039      	str	r1, [r7, #0]
	float pwm = (Sx->gain * cmd) + Sx->offset;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	ed93 7a02 	vldr	s14, [r3, #8]
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	ee07 3a90 	vmov	s15, r3
 8005e52:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005e56:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	edd3 7a03 	vldr	s15, [r3, #12]
 8005e60:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005e64:	edc7 7a03 	vstr	s15, [r7, #12]
	__HAL_TIM_SET_COMPARE(Sx->htimx, Sx->channelx, (uint16_t) pwm);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	685b      	ldr	r3, [r3, #4]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d10b      	bne.n	8005e88 <RC_Signal_Write+0x4c>
 8005e70:	edd7 7a03 	vldr	s15, [r7, #12]
 8005e74:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e78:	ee17 3a90 	vmov	r3, s15
 8005e7c:	b29a      	uxth	r2, r3
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8005e86:	e04f      	b.n	8005f28 <RC_Signal_Write+0xec>
	__HAL_TIM_SET_COMPARE(Sx->htimx, Sx->channelx, (uint16_t) pwm);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	685b      	ldr	r3, [r3, #4]
 8005e8c:	2b04      	cmp	r3, #4
 8005e8e:	d10c      	bne.n	8005eaa <RC_Signal_Write+0x6e>
 8005e90:	edd7 7a03 	vldr	s15, [r7, #12]
 8005e94:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e98:	ee17 3a90 	vmov	r3, s15
 8005e9c:	b299      	uxth	r1, r3
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	681a      	ldr	r2, [r3, #0]
 8005ea4:	460b      	mov	r3, r1
 8005ea6:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8005ea8:	e03e      	b.n	8005f28 <RC_Signal_Write+0xec>
	__HAL_TIM_SET_COMPARE(Sx->htimx, Sx->channelx, (uint16_t) pwm);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	685b      	ldr	r3, [r3, #4]
 8005eae:	2b08      	cmp	r3, #8
 8005eb0:	d10c      	bne.n	8005ecc <RC_Signal_Write+0x90>
 8005eb2:	edd7 7a03 	vldr	s15, [r7, #12]
 8005eb6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005eba:	ee17 3a90 	vmov	r3, s15
 8005ebe:	b299      	uxth	r1, r3
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	681a      	ldr	r2, [r3, #0]
 8005ec6:	460b      	mov	r3, r1
 8005ec8:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8005eca:	e02d      	b.n	8005f28 <RC_Signal_Write+0xec>
	__HAL_TIM_SET_COMPARE(Sx->htimx, Sx->channelx, (uint16_t) pwm);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	685b      	ldr	r3, [r3, #4]
 8005ed0:	2b0c      	cmp	r3, #12
 8005ed2:	d10c      	bne.n	8005eee <RC_Signal_Write+0xb2>
 8005ed4:	edd7 7a03 	vldr	s15, [r7, #12]
 8005ed8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005edc:	ee17 3a90 	vmov	r3, s15
 8005ee0:	b299      	uxth	r1, r3
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	681a      	ldr	r2, [r3, #0]
 8005ee8:	460b      	mov	r3, r1
 8005eea:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8005eec:	e01c      	b.n	8005f28 <RC_Signal_Write+0xec>
	__HAL_TIM_SET_COMPARE(Sx->htimx, Sx->channelx, (uint16_t) pwm);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	685b      	ldr	r3, [r3, #4]
 8005ef2:	2b10      	cmp	r3, #16
 8005ef4:	d10c      	bne.n	8005f10 <RC_Signal_Write+0xd4>
 8005ef6:	edd7 7a03 	vldr	s15, [r7, #12]
 8005efa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005efe:	ee17 3a90 	vmov	r3, s15
 8005f02:	b299      	uxth	r1, r3
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	681a      	ldr	r2, [r3, #0]
 8005f0a:	460b      	mov	r3, r1
 8005f0c:	6493      	str	r3, [r2, #72]	@ 0x48
}
 8005f0e:	e00b      	b.n	8005f28 <RC_Signal_Write+0xec>
	__HAL_TIM_SET_COMPARE(Sx->htimx, Sx->channelx, (uint16_t) pwm);
 8005f10:	edd7 7a03 	vldr	s15, [r7, #12]
 8005f14:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005f18:	ee17 3a90 	vmov	r3, s15
 8005f1c:	b299      	uxth	r1, r3
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	681a      	ldr	r2, [r3, #0]
 8005f24:	460b      	mov	r3, r1
 8005f26:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8005f28:	bf00      	nop
 8005f2a:	3714      	adds	r7, #20
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f32:	4770      	bx	lr

08005f34 <memset>:
 8005f34:	4402      	add	r2, r0
 8005f36:	4603      	mov	r3, r0
 8005f38:	4293      	cmp	r3, r2
 8005f3a:	d100      	bne.n	8005f3e <memset+0xa>
 8005f3c:	4770      	bx	lr
 8005f3e:	f803 1b01 	strb.w	r1, [r3], #1
 8005f42:	e7f9      	b.n	8005f38 <memset+0x4>

08005f44 <__libc_init_array>:
 8005f44:	b570      	push	{r4, r5, r6, lr}
 8005f46:	4d0d      	ldr	r5, [pc, #52]	@ (8005f7c <__libc_init_array+0x38>)
 8005f48:	4c0d      	ldr	r4, [pc, #52]	@ (8005f80 <__libc_init_array+0x3c>)
 8005f4a:	1b64      	subs	r4, r4, r5
 8005f4c:	10a4      	asrs	r4, r4, #2
 8005f4e:	2600      	movs	r6, #0
 8005f50:	42a6      	cmp	r6, r4
 8005f52:	d109      	bne.n	8005f68 <__libc_init_array+0x24>
 8005f54:	4d0b      	ldr	r5, [pc, #44]	@ (8005f84 <__libc_init_array+0x40>)
 8005f56:	4c0c      	ldr	r4, [pc, #48]	@ (8005f88 <__libc_init_array+0x44>)
 8005f58:	f000 f818 	bl	8005f8c <_init>
 8005f5c:	1b64      	subs	r4, r4, r5
 8005f5e:	10a4      	asrs	r4, r4, #2
 8005f60:	2600      	movs	r6, #0
 8005f62:	42a6      	cmp	r6, r4
 8005f64:	d105      	bne.n	8005f72 <__libc_init_array+0x2e>
 8005f66:	bd70      	pop	{r4, r5, r6, pc}
 8005f68:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f6c:	4798      	blx	r3
 8005f6e:	3601      	adds	r6, #1
 8005f70:	e7ee      	b.n	8005f50 <__libc_init_array+0xc>
 8005f72:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f76:	4798      	blx	r3
 8005f78:	3601      	adds	r6, #1
 8005f7a:	e7f2      	b.n	8005f62 <__libc_init_array+0x1e>
 8005f7c:	08005fec 	.word	0x08005fec
 8005f80:	08005fec 	.word	0x08005fec
 8005f84:	08005fec 	.word	0x08005fec
 8005f88:	08005ff0 	.word	0x08005ff0

08005f8c <_init>:
 8005f8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f8e:	bf00      	nop
 8005f90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f92:	bc08      	pop	{r3}
 8005f94:	469e      	mov	lr, r3
 8005f96:	4770      	bx	lr

08005f98 <_fini>:
 8005f98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f9a:	bf00      	nop
 8005f9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f9e:	bc08      	pop	{r3}
 8005fa0:	469e      	mov	lr, r3
 8005fa2:	4770      	bx	lr
