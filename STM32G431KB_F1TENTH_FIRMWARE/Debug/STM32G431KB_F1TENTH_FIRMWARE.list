
STM32G431KB_F1TENTH_FIRMWARE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006b58  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08006d30  08006d30  00007d30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006d70  08006d70  0000800c  2**0
                  CONTENTS
  4 .ARM          00000008  08006d70  08006d70  00007d70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006d78  08006d78  0000800c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006d78  08006d78  00007d78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006d7c  08006d7c  00007d7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08006d80  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000039c  2000000c  08006d8c  0000800c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003a8  08006d8c  000083a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000800c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001761e  00000000  00000000  0000803c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003068  00000000  00000000  0001f65a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001418  00000000  00000000  000226c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000fbb  00000000  00000000  00023ae0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e799  00000000  00000000  00024a9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a63d  00000000  00000000  00043234  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c5f9d  00000000  00000000  0005d871  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012380e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005468  00000000  00000000  00123854  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000094  00000000  00000000  00128cbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08006d18 	.word	0x08006d18

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08006d18 	.word	0x08006d18

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b96a 	b.w	8000504 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	460c      	mov	r4, r1
 8000250:	2b00      	cmp	r3, #0
 8000252:	d14e      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000254:	4694      	mov	ip, r2
 8000256:	458c      	cmp	ip, r1
 8000258:	4686      	mov	lr, r0
 800025a:	fab2 f282 	clz	r2, r2
 800025e:	d962      	bls.n	8000326 <__udivmoddi4+0xde>
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0320 	rsb	r3, r2, #32
 8000266:	4091      	lsls	r1, r2
 8000268:	fa20 f303 	lsr.w	r3, r0, r3
 800026c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000270:	4319      	orrs	r1, r3
 8000272:	fa00 fe02 	lsl.w	lr, r0, r2
 8000276:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800027a:	fa1f f68c 	uxth.w	r6, ip
 800027e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000282:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000286:	fb07 1114 	mls	r1, r7, r4, r1
 800028a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028e:	fb04 f106 	mul.w	r1, r4, r6
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f104 30ff 	add.w	r0, r4, #4294967295
 800029e:	f080 8112 	bcs.w	80004c6 <__udivmoddi4+0x27e>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 810f 	bls.w	80004c6 <__udivmoddi4+0x27e>
 80002a8:	3c02      	subs	r4, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a59      	subs	r1, r3, r1
 80002ae:	fa1f f38e 	uxth.w	r3, lr
 80002b2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002b6:	fb07 1110 	mls	r1, r7, r0, r1
 80002ba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002be:	fb00 f606 	mul.w	r6, r0, r6
 80002c2:	429e      	cmp	r6, r3
 80002c4:	d90a      	bls.n	80002dc <__udivmoddi4+0x94>
 80002c6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ca:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ce:	f080 80fc 	bcs.w	80004ca <__udivmoddi4+0x282>
 80002d2:	429e      	cmp	r6, r3
 80002d4:	f240 80f9 	bls.w	80004ca <__udivmoddi4+0x282>
 80002d8:	4463      	add	r3, ip
 80002da:	3802      	subs	r0, #2
 80002dc:	1b9b      	subs	r3, r3, r6
 80002de:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002e2:	2100      	movs	r1, #0
 80002e4:	b11d      	cbz	r5, 80002ee <__udivmoddi4+0xa6>
 80002e6:	40d3      	lsrs	r3, r2
 80002e8:	2200      	movs	r2, #0
 80002ea:	e9c5 3200 	strd	r3, r2, [r5]
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d905      	bls.n	8000302 <__udivmoddi4+0xba>
 80002f6:	b10d      	cbz	r5, 80002fc <__udivmoddi4+0xb4>
 80002f8:	e9c5 0100 	strd	r0, r1, [r5]
 80002fc:	2100      	movs	r1, #0
 80002fe:	4608      	mov	r0, r1
 8000300:	e7f5      	b.n	80002ee <__udivmoddi4+0xa6>
 8000302:	fab3 f183 	clz	r1, r3
 8000306:	2900      	cmp	r1, #0
 8000308:	d146      	bne.n	8000398 <__udivmoddi4+0x150>
 800030a:	42a3      	cmp	r3, r4
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xcc>
 800030e:	4290      	cmp	r0, r2
 8000310:	f0c0 80f0 	bcc.w	80004f4 <__udivmoddi4+0x2ac>
 8000314:	1a86      	subs	r6, r0, r2
 8000316:	eb64 0303 	sbc.w	r3, r4, r3
 800031a:	2001      	movs	r0, #1
 800031c:	2d00      	cmp	r5, #0
 800031e:	d0e6      	beq.n	80002ee <__udivmoddi4+0xa6>
 8000320:	e9c5 6300 	strd	r6, r3, [r5]
 8000324:	e7e3      	b.n	80002ee <__udivmoddi4+0xa6>
 8000326:	2a00      	cmp	r2, #0
 8000328:	f040 8090 	bne.w	800044c <__udivmoddi4+0x204>
 800032c:	eba1 040c 	sub.w	r4, r1, ip
 8000330:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000334:	fa1f f78c 	uxth.w	r7, ip
 8000338:	2101      	movs	r1, #1
 800033a:	fbb4 f6f8 	udiv	r6, r4, r8
 800033e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000342:	fb08 4416 	mls	r4, r8, r6, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb07 f006 	mul.w	r0, r7, r6
 800034e:	4298      	cmp	r0, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x11c>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f106 34ff 	add.w	r4, r6, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x11a>
 800035c:	4298      	cmp	r0, r3
 800035e:	f200 80cd 	bhi.w	80004fc <__udivmoddi4+0x2b4>
 8000362:	4626      	mov	r6, r4
 8000364:	1a1c      	subs	r4, r3, r0
 8000366:	fa1f f38e 	uxth.w	r3, lr
 800036a:	fbb4 f0f8 	udiv	r0, r4, r8
 800036e:	fb08 4410 	mls	r4, r8, r0, r4
 8000372:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000376:	fb00 f707 	mul.w	r7, r0, r7
 800037a:	429f      	cmp	r7, r3
 800037c:	d908      	bls.n	8000390 <__udivmoddi4+0x148>
 800037e:	eb1c 0303 	adds.w	r3, ip, r3
 8000382:	f100 34ff 	add.w	r4, r0, #4294967295
 8000386:	d202      	bcs.n	800038e <__udivmoddi4+0x146>
 8000388:	429f      	cmp	r7, r3
 800038a:	f200 80b0 	bhi.w	80004ee <__udivmoddi4+0x2a6>
 800038e:	4620      	mov	r0, r4
 8000390:	1bdb      	subs	r3, r3, r7
 8000392:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000396:	e7a5      	b.n	80002e4 <__udivmoddi4+0x9c>
 8000398:	f1c1 0620 	rsb	r6, r1, #32
 800039c:	408b      	lsls	r3, r1
 800039e:	fa22 f706 	lsr.w	r7, r2, r6
 80003a2:	431f      	orrs	r7, r3
 80003a4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a8:	fa04 f301 	lsl.w	r3, r4, r1
 80003ac:	ea43 030c 	orr.w	r3, r3, ip
 80003b0:	40f4      	lsrs	r4, r6
 80003b2:	fa00 f801 	lsl.w	r8, r0, r1
 80003b6:	0c38      	lsrs	r0, r7, #16
 80003b8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003bc:	fbb4 fef0 	udiv	lr, r4, r0
 80003c0:	fa1f fc87 	uxth.w	ip, r7
 80003c4:	fb00 441e 	mls	r4, r0, lr, r4
 80003c8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003cc:	fb0e f90c 	mul.w	r9, lr, ip
 80003d0:	45a1      	cmp	r9, r4
 80003d2:	fa02 f201 	lsl.w	r2, r2, r1
 80003d6:	d90a      	bls.n	80003ee <__udivmoddi4+0x1a6>
 80003d8:	193c      	adds	r4, r7, r4
 80003da:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003de:	f080 8084 	bcs.w	80004ea <__udivmoddi4+0x2a2>
 80003e2:	45a1      	cmp	r9, r4
 80003e4:	f240 8081 	bls.w	80004ea <__udivmoddi4+0x2a2>
 80003e8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	eba4 0409 	sub.w	r4, r4, r9
 80003f2:	fa1f f983 	uxth.w	r9, r3
 80003f6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003fa:	fb00 4413 	mls	r4, r0, r3, r4
 80003fe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000402:	fb03 fc0c 	mul.w	ip, r3, ip
 8000406:	45a4      	cmp	ip, r4
 8000408:	d907      	bls.n	800041a <__udivmoddi4+0x1d2>
 800040a:	193c      	adds	r4, r7, r4
 800040c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000410:	d267      	bcs.n	80004e2 <__udivmoddi4+0x29a>
 8000412:	45a4      	cmp	ip, r4
 8000414:	d965      	bls.n	80004e2 <__udivmoddi4+0x29a>
 8000416:	3b02      	subs	r3, #2
 8000418:	443c      	add	r4, r7
 800041a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800041e:	fba0 9302 	umull	r9, r3, r0, r2
 8000422:	eba4 040c 	sub.w	r4, r4, ip
 8000426:	429c      	cmp	r4, r3
 8000428:	46ce      	mov	lr, r9
 800042a:	469c      	mov	ip, r3
 800042c:	d351      	bcc.n	80004d2 <__udivmoddi4+0x28a>
 800042e:	d04e      	beq.n	80004ce <__udivmoddi4+0x286>
 8000430:	b155      	cbz	r5, 8000448 <__udivmoddi4+0x200>
 8000432:	ebb8 030e 	subs.w	r3, r8, lr
 8000436:	eb64 040c 	sbc.w	r4, r4, ip
 800043a:	fa04 f606 	lsl.w	r6, r4, r6
 800043e:	40cb      	lsrs	r3, r1
 8000440:	431e      	orrs	r6, r3
 8000442:	40cc      	lsrs	r4, r1
 8000444:	e9c5 6400 	strd	r6, r4, [r5]
 8000448:	2100      	movs	r1, #0
 800044a:	e750      	b.n	80002ee <__udivmoddi4+0xa6>
 800044c:	f1c2 0320 	rsb	r3, r2, #32
 8000450:	fa20 f103 	lsr.w	r1, r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa24 f303 	lsr.w	r3, r4, r3
 800045c:	4094      	lsls	r4, r2
 800045e:	430c      	orrs	r4, r1
 8000460:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000464:	fa00 fe02 	lsl.w	lr, r0, r2
 8000468:	fa1f f78c 	uxth.w	r7, ip
 800046c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000470:	fb08 3110 	mls	r1, r8, r0, r3
 8000474:	0c23      	lsrs	r3, r4, #16
 8000476:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800047a:	fb00 f107 	mul.w	r1, r0, r7
 800047e:	4299      	cmp	r1, r3
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x24c>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 36ff 	add.w	r6, r0, #4294967295
 800048a:	d22c      	bcs.n	80004e6 <__udivmoddi4+0x29e>
 800048c:	4299      	cmp	r1, r3
 800048e:	d92a      	bls.n	80004e6 <__udivmoddi4+0x29e>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1a5b      	subs	r3, r3, r1
 8000496:	b2a4      	uxth	r4, r4
 8000498:	fbb3 f1f8 	udiv	r1, r3, r8
 800049c:	fb08 3311 	mls	r3, r8, r1, r3
 80004a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004a4:	fb01 f307 	mul.w	r3, r1, r7
 80004a8:	42a3      	cmp	r3, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x276>
 80004ac:	eb1c 0404 	adds.w	r4, ip, r4
 80004b0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004b4:	d213      	bcs.n	80004de <__udivmoddi4+0x296>
 80004b6:	42a3      	cmp	r3, r4
 80004b8:	d911      	bls.n	80004de <__udivmoddi4+0x296>
 80004ba:	3902      	subs	r1, #2
 80004bc:	4464      	add	r4, ip
 80004be:	1ae4      	subs	r4, r4, r3
 80004c0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004c4:	e739      	b.n	800033a <__udivmoddi4+0xf2>
 80004c6:	4604      	mov	r4, r0
 80004c8:	e6f0      	b.n	80002ac <__udivmoddi4+0x64>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e706      	b.n	80002dc <__udivmoddi4+0x94>
 80004ce:	45c8      	cmp	r8, r9
 80004d0:	d2ae      	bcs.n	8000430 <__udivmoddi4+0x1e8>
 80004d2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004d6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004da:	3801      	subs	r0, #1
 80004dc:	e7a8      	b.n	8000430 <__udivmoddi4+0x1e8>
 80004de:	4631      	mov	r1, r6
 80004e0:	e7ed      	b.n	80004be <__udivmoddi4+0x276>
 80004e2:	4603      	mov	r3, r0
 80004e4:	e799      	b.n	800041a <__udivmoddi4+0x1d2>
 80004e6:	4630      	mov	r0, r6
 80004e8:	e7d4      	b.n	8000494 <__udivmoddi4+0x24c>
 80004ea:	46d6      	mov	lr, sl
 80004ec:	e77f      	b.n	80003ee <__udivmoddi4+0x1a6>
 80004ee:	4463      	add	r3, ip
 80004f0:	3802      	subs	r0, #2
 80004f2:	e74d      	b.n	8000390 <__udivmoddi4+0x148>
 80004f4:	4606      	mov	r6, r0
 80004f6:	4623      	mov	r3, r4
 80004f8:	4608      	mov	r0, r1
 80004fa:	e70f      	b.n	800031c <__udivmoddi4+0xd4>
 80004fc:	3e02      	subs	r6, #2
 80004fe:	4463      	add	r3, ip
 8000500:	e730      	b.n	8000364 <__udivmoddi4+0x11c>
 8000502:	bf00      	nop

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b082      	sub	sp, #8
 800050c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800050e:	4b16      	ldr	r3, [pc, #88]	@ (8000568 <MX_DMA_Init+0x60>)
 8000510:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000512:	4a15      	ldr	r2, [pc, #84]	@ (8000568 <MX_DMA_Init+0x60>)
 8000514:	f043 0304 	orr.w	r3, r3, #4
 8000518:	6493      	str	r3, [r2, #72]	@ 0x48
 800051a:	4b13      	ldr	r3, [pc, #76]	@ (8000568 <MX_DMA_Init+0x60>)
 800051c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800051e:	f003 0304 	and.w	r3, r3, #4
 8000522:	607b      	str	r3, [r7, #4]
 8000524:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000526:	4b10      	ldr	r3, [pc, #64]	@ (8000568 <MX_DMA_Init+0x60>)
 8000528:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800052a:	4a0f      	ldr	r2, [pc, #60]	@ (8000568 <MX_DMA_Init+0x60>)
 800052c:	f043 0301 	orr.w	r3, r3, #1
 8000530:	6493      	str	r3, [r2, #72]	@ 0x48
 8000532:	4b0d      	ldr	r3, [pc, #52]	@ (8000568 <MX_DMA_Init+0x60>)
 8000534:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000536:	f003 0301 	and.w	r3, r3, #1
 800053a:	603b      	str	r3, [r7, #0]
 800053c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800053e:	2200      	movs	r2, #0
 8000540:	2100      	movs	r1, #0
 8000542:	200b      	movs	r0, #11
 8000544:	f001 f855 	bl	80015f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000548:	200b      	movs	r0, #11
 800054a:	f001 f86c 	bl	8001626 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800054e:	2200      	movs	r2, #0
 8000550:	2100      	movs	r1, #0
 8000552:	200c      	movs	r0, #12
 8000554:	f001 f84d 	bl	80015f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000558:	200c      	movs	r0, #12
 800055a:	f001 f864 	bl	8001626 <HAL_NVIC_EnableIRQ>

}
 800055e:	bf00      	nop
 8000560:	3708      	adds	r7, #8
 8000562:	46bd      	mov	sp, r7
 8000564:	bd80      	pop	{r7, pc}
 8000566:	bf00      	nop
 8000568:	40021000 	.word	0x40021000

0800056c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b088      	sub	sp, #32
 8000570:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000572:	f107 030c 	add.w	r3, r7, #12
 8000576:	2200      	movs	r2, #0
 8000578:	601a      	str	r2, [r3, #0]
 800057a:	605a      	str	r2, [r3, #4]
 800057c:	609a      	str	r2, [r3, #8]
 800057e:	60da      	str	r2, [r3, #12]
 8000580:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000582:	4b1e      	ldr	r3, [pc, #120]	@ (80005fc <MX_GPIO_Init+0x90>)
 8000584:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000586:	4a1d      	ldr	r2, [pc, #116]	@ (80005fc <MX_GPIO_Init+0x90>)
 8000588:	f043 0320 	orr.w	r3, r3, #32
 800058c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800058e:	4b1b      	ldr	r3, [pc, #108]	@ (80005fc <MX_GPIO_Init+0x90>)
 8000590:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000592:	f003 0320 	and.w	r3, r3, #32
 8000596:	60bb      	str	r3, [r7, #8]
 8000598:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800059a:	4b18      	ldr	r3, [pc, #96]	@ (80005fc <MX_GPIO_Init+0x90>)
 800059c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800059e:	4a17      	ldr	r2, [pc, #92]	@ (80005fc <MX_GPIO_Init+0x90>)
 80005a0:	f043 0301 	orr.w	r3, r3, #1
 80005a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005a6:	4b15      	ldr	r3, [pc, #84]	@ (80005fc <MX_GPIO_Init+0x90>)
 80005a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005aa:	f003 0301 	and.w	r3, r3, #1
 80005ae:	607b      	str	r3, [r7, #4]
 80005b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005b2:	4b12      	ldr	r3, [pc, #72]	@ (80005fc <MX_GPIO_Init+0x90>)
 80005b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005b6:	4a11      	ldr	r2, [pc, #68]	@ (80005fc <MX_GPIO_Init+0x90>)
 80005b8:	f043 0302 	orr.w	r3, r3, #2
 80005bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005be:	4b0f      	ldr	r3, [pc, #60]	@ (80005fc <MX_GPIO_Init+0x90>)
 80005c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005c2:	f003 0302 	and.w	r3, r3, #2
 80005c6:	603b      	str	r3, [r7, #0]
 80005c8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80005ca:	2200      	movs	r2, #0
 80005cc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80005d0:	480b      	ldr	r0, [pc, #44]	@ (8000600 <MX_GPIO_Init+0x94>)
 80005d2:	f001 fcad 	bl	8001f30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80005d6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80005da:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005dc:	2301      	movs	r3, #1
 80005de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e0:	2300      	movs	r3, #0
 80005e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005e4:	2300      	movs	r3, #0
 80005e6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80005e8:	f107 030c 	add.w	r3, r7, #12
 80005ec:	4619      	mov	r1, r3
 80005ee:	4804      	ldr	r0, [pc, #16]	@ (8000600 <MX_GPIO_Init+0x94>)
 80005f0:	f001 fb1c 	bl	8001c2c <HAL_GPIO_Init>

}
 80005f4:	bf00      	nop
 80005f6:	3720      	adds	r7, #32
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}
 80005fc:	40021000 	.word	0x40021000
 8000600:	48000400 	.word	0x48000400

08000604 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c3_tx;
DMA_HandleTypeDef hdma_i2c3_rx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000608:	4b1b      	ldr	r3, [pc, #108]	@ (8000678 <MX_I2C1_Init+0x74>)
 800060a:	4a1c      	ldr	r2, [pc, #112]	@ (800067c <MX_I2C1_Init+0x78>)
 800060c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10802D9B;
 800060e:	4b1a      	ldr	r3, [pc, #104]	@ (8000678 <MX_I2C1_Init+0x74>)
 8000610:	4a1b      	ldr	r2, [pc, #108]	@ (8000680 <MX_I2C1_Init+0x7c>)
 8000612:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000614:	4b18      	ldr	r3, [pc, #96]	@ (8000678 <MX_I2C1_Init+0x74>)
 8000616:	2200      	movs	r2, #0
 8000618:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800061a:	4b17      	ldr	r3, [pc, #92]	@ (8000678 <MX_I2C1_Init+0x74>)
 800061c:	2201      	movs	r2, #1
 800061e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000620:	4b15      	ldr	r3, [pc, #84]	@ (8000678 <MX_I2C1_Init+0x74>)
 8000622:	2200      	movs	r2, #0
 8000624:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000626:	4b14      	ldr	r3, [pc, #80]	@ (8000678 <MX_I2C1_Init+0x74>)
 8000628:	2200      	movs	r2, #0
 800062a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800062c:	4b12      	ldr	r3, [pc, #72]	@ (8000678 <MX_I2C1_Init+0x74>)
 800062e:	2200      	movs	r2, #0
 8000630:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000632:	4b11      	ldr	r3, [pc, #68]	@ (8000678 <MX_I2C1_Init+0x74>)
 8000634:	2200      	movs	r2, #0
 8000636:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000638:	4b0f      	ldr	r3, [pc, #60]	@ (8000678 <MX_I2C1_Init+0x74>)
 800063a:	2200      	movs	r2, #0
 800063c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800063e:	480e      	ldr	r0, [pc, #56]	@ (8000678 <MX_I2C1_Init+0x74>)
 8000640:	f001 fc8e 	bl	8001f60 <HAL_I2C_Init>
 8000644:	4603      	mov	r3, r0
 8000646:	2b00      	cmp	r3, #0
 8000648:	d001      	beq.n	800064e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800064a:	f000 fa02 	bl	8000a52 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800064e:	2100      	movs	r1, #0
 8000650:	4809      	ldr	r0, [pc, #36]	@ (8000678 <MX_I2C1_Init+0x74>)
 8000652:	f003 fa07 	bl	8003a64 <HAL_I2CEx_ConfigAnalogFilter>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	d001      	beq.n	8000660 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800065c:	f000 f9f9 	bl	8000a52 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000660:	2100      	movs	r1, #0
 8000662:	4805      	ldr	r0, [pc, #20]	@ (8000678 <MX_I2C1_Init+0x74>)
 8000664:	f003 fa49 	bl	8003afa <HAL_I2CEx_ConfigDigitalFilter>
 8000668:	4603      	mov	r3, r0
 800066a:	2b00      	cmp	r3, #0
 800066c:	d001      	beq.n	8000672 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800066e:	f000 f9f0 	bl	8000a52 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000672:	bf00      	nop
 8000674:	bd80      	pop	{r7, pc}
 8000676:	bf00      	nop
 8000678:	20000028 	.word	0x20000028
 800067c:	40005400 	.word	0x40005400
 8000680:	10802d9b 	.word	0x10802d9b

08000684 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000688:	4b1b      	ldr	r3, [pc, #108]	@ (80006f8 <MX_I2C3_Init+0x74>)
 800068a:	4a1c      	ldr	r2, [pc, #112]	@ (80006fc <MX_I2C3_Init+0x78>)
 800068c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x10802D9B;
 800068e:	4b1a      	ldr	r3, [pc, #104]	@ (80006f8 <MX_I2C3_Init+0x74>)
 8000690:	4a1b      	ldr	r2, [pc, #108]	@ (8000700 <MX_I2C3_Init+0x7c>)
 8000692:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000694:	4b18      	ldr	r3, [pc, #96]	@ (80006f8 <MX_I2C3_Init+0x74>)
 8000696:	2200      	movs	r2, #0
 8000698:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800069a:	4b17      	ldr	r3, [pc, #92]	@ (80006f8 <MX_I2C3_Init+0x74>)
 800069c:	2201      	movs	r2, #1
 800069e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006a0:	4b15      	ldr	r3, [pc, #84]	@ (80006f8 <MX_I2C3_Init+0x74>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80006a6:	4b14      	ldr	r3, [pc, #80]	@ (80006f8 <MX_I2C3_Init+0x74>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80006ac:	4b12      	ldr	r3, [pc, #72]	@ (80006f8 <MX_I2C3_Init+0x74>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006b2:	4b11      	ldr	r3, [pc, #68]	@ (80006f8 <MX_I2C3_Init+0x74>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006b8:	4b0f      	ldr	r3, [pc, #60]	@ (80006f8 <MX_I2C3_Init+0x74>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80006be:	480e      	ldr	r0, [pc, #56]	@ (80006f8 <MX_I2C3_Init+0x74>)
 80006c0:	f001 fc4e 	bl	8001f60 <HAL_I2C_Init>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d001      	beq.n	80006ce <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 80006ca:	f000 f9c2 	bl	8000a52 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80006ce:	2100      	movs	r1, #0
 80006d0:	4809      	ldr	r0, [pc, #36]	@ (80006f8 <MX_I2C3_Init+0x74>)
 80006d2:	f003 f9c7 	bl	8003a64 <HAL_I2CEx_ConfigAnalogFilter>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 80006dc:	f000 f9b9 	bl	8000a52 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80006e0:	2100      	movs	r1, #0
 80006e2:	4805      	ldr	r0, [pc, #20]	@ (80006f8 <MX_I2C3_Init+0x74>)
 80006e4:	f003 fa09 	bl	8003afa <HAL_I2CEx_ConfigDigitalFilter>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 80006ee:	f000 f9b0 	bl	8000a52 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80006f2:	bf00      	nop
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	2000007c 	.word	0x2000007c
 80006fc:	40007800 	.word	0x40007800
 8000700:	10802d9b 	.word	0x10802d9b

08000704 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b09e      	sub	sp, #120	@ 0x78
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800070c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000710:	2200      	movs	r2, #0
 8000712:	601a      	str	r2, [r3, #0]
 8000714:	605a      	str	r2, [r3, #4]
 8000716:	609a      	str	r2, [r3, #8]
 8000718:	60da      	str	r2, [r3, #12]
 800071a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800071c:	f107 0320 	add.w	r3, r7, #32
 8000720:	2244      	movs	r2, #68	@ 0x44
 8000722:	2100      	movs	r1, #0
 8000724:	4618      	mov	r0, r3
 8000726:	f006 facb 	bl	8006cc0 <memset>
  if(i2cHandle->Instance==I2C1)
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	4a88      	ldr	r2, [pc, #544]	@ (8000950 <HAL_I2C_MspInit+0x24c>)
 8000730:	4293      	cmp	r3, r2
 8000732:	d154      	bne.n	80007de <HAL_I2C_MspInit+0xda>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000734:	2340      	movs	r3, #64	@ 0x40
 8000736:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000738:	2300      	movs	r3, #0
 800073a:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800073c:	f107 0320 	add.w	r3, r7, #32
 8000740:	4618      	mov	r0, r3
 8000742:	f004 f809 	bl	8004758 <HAL_RCCEx_PeriphCLKConfig>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d001      	beq.n	8000750 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800074c:	f000 f981 	bl	8000a52 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000750:	4b80      	ldr	r3, [pc, #512]	@ (8000954 <HAL_I2C_MspInit+0x250>)
 8000752:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000754:	4a7f      	ldr	r2, [pc, #508]	@ (8000954 <HAL_I2C_MspInit+0x250>)
 8000756:	f043 0301 	orr.w	r3, r3, #1
 800075a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800075c:	4b7d      	ldr	r3, [pc, #500]	@ (8000954 <HAL_I2C_MspInit+0x250>)
 800075e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000760:	f003 0301 	and.w	r3, r3, #1
 8000764:	61fb      	str	r3, [r7, #28]
 8000766:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000768:	4b7a      	ldr	r3, [pc, #488]	@ (8000954 <HAL_I2C_MspInit+0x250>)
 800076a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800076c:	4a79      	ldr	r2, [pc, #484]	@ (8000954 <HAL_I2C_MspInit+0x250>)
 800076e:	f043 0302 	orr.w	r3, r3, #2
 8000772:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000774:	4b77      	ldr	r3, [pc, #476]	@ (8000954 <HAL_I2C_MspInit+0x250>)
 8000776:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000778:	f003 0302 	and.w	r3, r3, #2
 800077c:	61bb      	str	r3, [r7, #24]
 800077e:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000780:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000784:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000786:	2312      	movs	r3, #18
 8000788:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078a:	2300      	movs	r3, #0
 800078c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800078e:	2300      	movs	r3, #0
 8000790:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000792:	2304      	movs	r3, #4
 8000794:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000796:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800079a:	4619      	mov	r1, r3
 800079c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007a0:	f001 fa44 	bl	8001c2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80007a4:	2380      	movs	r3, #128	@ 0x80
 80007a6:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80007a8:	2312      	movs	r3, #18
 80007aa:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ac:	2300      	movs	r3, #0
 80007ae:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b0:	2300      	movs	r3, #0
 80007b2:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80007b4:	2304      	movs	r3, #4
 80007b6:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007b8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80007bc:	4619      	mov	r1, r3
 80007be:	4866      	ldr	r0, [pc, #408]	@ (8000958 <HAL_I2C_MspInit+0x254>)
 80007c0:	f001 fa34 	bl	8001c2c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80007c4:	4b63      	ldr	r3, [pc, #396]	@ (8000954 <HAL_I2C_MspInit+0x250>)
 80007c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80007c8:	4a62      	ldr	r2, [pc, #392]	@ (8000954 <HAL_I2C_MspInit+0x250>)
 80007ca:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80007ce:	6593      	str	r3, [r2, #88]	@ 0x58
 80007d0:	4b60      	ldr	r3, [pc, #384]	@ (8000954 <HAL_I2C_MspInit+0x250>)
 80007d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80007d4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80007d8:	617b      	str	r3, [r7, #20]
 80007da:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 80007dc:	e0b4      	b.n	8000948 <HAL_I2C_MspInit+0x244>
  else if(i2cHandle->Instance==I2C3)
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	4a5e      	ldr	r2, [pc, #376]	@ (800095c <HAL_I2C_MspInit+0x258>)
 80007e4:	4293      	cmp	r3, r2
 80007e6:	f040 80af 	bne.w	8000948 <HAL_I2C_MspInit+0x244>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80007ea:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80007ee:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80007f0:	2300      	movs	r3, #0
 80007f2:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007f4:	f107 0320 	add.w	r3, r7, #32
 80007f8:	4618      	mov	r0, r3
 80007fa:	f003 ffad 	bl	8004758 <HAL_RCCEx_PeriphCLKConfig>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d001      	beq.n	8000808 <HAL_I2C_MspInit+0x104>
      Error_Handler();
 8000804:	f000 f925 	bl	8000a52 <Error_Handler>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000808:	4b52      	ldr	r3, [pc, #328]	@ (8000954 <HAL_I2C_MspInit+0x250>)
 800080a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800080c:	4a51      	ldr	r2, [pc, #324]	@ (8000954 <HAL_I2C_MspInit+0x250>)
 800080e:	f043 0301 	orr.w	r3, r3, #1
 8000812:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000814:	4b4f      	ldr	r3, [pc, #316]	@ (8000954 <HAL_I2C_MspInit+0x250>)
 8000816:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000818:	f003 0301 	and.w	r3, r3, #1
 800081c:	613b      	str	r3, [r7, #16]
 800081e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000820:	4b4c      	ldr	r3, [pc, #304]	@ (8000954 <HAL_I2C_MspInit+0x250>)
 8000822:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000824:	4a4b      	ldr	r2, [pc, #300]	@ (8000954 <HAL_I2C_MspInit+0x250>)
 8000826:	f043 0302 	orr.w	r3, r3, #2
 800082a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800082c:	4b49      	ldr	r3, [pc, #292]	@ (8000954 <HAL_I2C_MspInit+0x250>)
 800082e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000830:	f003 0302 	and.w	r3, r3, #2
 8000834:	60fb      	str	r3, [r7, #12]
 8000836:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000838:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800083c:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800083e:	2312      	movs	r3, #18
 8000840:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000842:	2301      	movs	r3, #1
 8000844:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000846:	2300      	movs	r3, #0
 8000848:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF2_I2C3;
 800084a:	2302      	movs	r3, #2
 800084c:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800084e:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000852:	4619      	mov	r1, r3
 8000854:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000858:	f001 f9e8 	bl	8001c2c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800085c:	2320      	movs	r3, #32
 800085e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000860:	2312      	movs	r3, #18
 8000862:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000864:	2301      	movs	r3, #1
 8000866:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000868:	2300      	movs	r3, #0
 800086a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C3;
 800086c:	2308      	movs	r3, #8
 800086e:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000870:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000874:	4619      	mov	r1, r3
 8000876:	4838      	ldr	r0, [pc, #224]	@ (8000958 <HAL_I2C_MspInit+0x254>)
 8000878:	f001 f9d8 	bl	8001c2c <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800087c:	4b35      	ldr	r3, [pc, #212]	@ (8000954 <HAL_I2C_MspInit+0x250>)
 800087e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000880:	4a34      	ldr	r2, [pc, #208]	@ (8000954 <HAL_I2C_MspInit+0x250>)
 8000882:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8000886:	6593      	str	r3, [r2, #88]	@ 0x58
 8000888:	4b32      	ldr	r3, [pc, #200]	@ (8000954 <HAL_I2C_MspInit+0x250>)
 800088a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800088c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8000890:	60bb      	str	r3, [r7, #8]
 8000892:	68bb      	ldr	r3, [r7, #8]
    hdma_i2c3_tx.Instance = DMA1_Channel1;
 8000894:	4b32      	ldr	r3, [pc, #200]	@ (8000960 <HAL_I2C_MspInit+0x25c>)
 8000896:	4a33      	ldr	r2, [pc, #204]	@ (8000964 <HAL_I2C_MspInit+0x260>)
 8000898:	601a      	str	r2, [r3, #0]
    hdma_i2c3_tx.Init.Request = DMA_REQUEST_I2C3_TX;
 800089a:	4b31      	ldr	r3, [pc, #196]	@ (8000960 <HAL_I2C_MspInit+0x25c>)
 800089c:	2215      	movs	r2, #21
 800089e:	605a      	str	r2, [r3, #4]
    hdma_i2c3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80008a0:	4b2f      	ldr	r3, [pc, #188]	@ (8000960 <HAL_I2C_MspInit+0x25c>)
 80008a2:	2210      	movs	r2, #16
 80008a4:	609a      	str	r2, [r3, #8]
    hdma_i2c3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80008a6:	4b2e      	ldr	r3, [pc, #184]	@ (8000960 <HAL_I2C_MspInit+0x25c>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	60da      	str	r2, [r3, #12]
    hdma_i2c3_tx.Init.MemInc = DMA_MINC_DISABLE;
 80008ac:	4b2c      	ldr	r3, [pc, #176]	@ (8000960 <HAL_I2C_MspInit+0x25c>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	611a      	str	r2, [r3, #16]
    hdma_i2c3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80008b2:	4b2b      	ldr	r3, [pc, #172]	@ (8000960 <HAL_I2C_MspInit+0x25c>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	615a      	str	r2, [r3, #20]
    hdma_i2c3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80008b8:	4b29      	ldr	r3, [pc, #164]	@ (8000960 <HAL_I2C_MspInit+0x25c>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	619a      	str	r2, [r3, #24]
    hdma_i2c3_tx.Init.Mode = DMA_NORMAL;
 80008be:	4b28      	ldr	r3, [pc, #160]	@ (8000960 <HAL_I2C_MspInit+0x25c>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	61da      	str	r2, [r3, #28]
    hdma_i2c3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80008c4:	4b26      	ldr	r3, [pc, #152]	@ (8000960 <HAL_I2C_MspInit+0x25c>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c3_tx) != HAL_OK)
 80008ca:	4825      	ldr	r0, [pc, #148]	@ (8000960 <HAL_I2C_MspInit+0x25c>)
 80008cc:	f000 fec6 	bl	800165c <HAL_DMA_Init>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <HAL_I2C_MspInit+0x1d6>
      Error_Handler();
 80008d6:	f000 f8bc 	bl	8000a52 <Error_Handler>
    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c3_tx);
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	4a20      	ldr	r2, [pc, #128]	@ (8000960 <HAL_I2C_MspInit+0x25c>)
 80008de:	639a      	str	r2, [r3, #56]	@ 0x38
 80008e0:	4a1f      	ldr	r2, [pc, #124]	@ (8000960 <HAL_I2C_MspInit+0x25c>)
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	6293      	str	r3, [r2, #40]	@ 0x28
    hdma_i2c3_rx.Instance = DMA1_Channel2;
 80008e6:	4b20      	ldr	r3, [pc, #128]	@ (8000968 <HAL_I2C_MspInit+0x264>)
 80008e8:	4a20      	ldr	r2, [pc, #128]	@ (800096c <HAL_I2C_MspInit+0x268>)
 80008ea:	601a      	str	r2, [r3, #0]
    hdma_i2c3_rx.Init.Request = DMA_REQUEST_I2C3_RX;
 80008ec:	4b1e      	ldr	r3, [pc, #120]	@ (8000968 <HAL_I2C_MspInit+0x264>)
 80008ee:	2214      	movs	r2, #20
 80008f0:	605a      	str	r2, [r3, #4]
    hdma_i2c3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80008f2:	4b1d      	ldr	r3, [pc, #116]	@ (8000968 <HAL_I2C_MspInit+0x264>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	609a      	str	r2, [r3, #8]
    hdma_i2c3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80008f8:	4b1b      	ldr	r3, [pc, #108]	@ (8000968 <HAL_I2C_MspInit+0x264>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	60da      	str	r2, [r3, #12]
    hdma_i2c3_rx.Init.MemInc = DMA_MINC_DISABLE;
 80008fe:	4b1a      	ldr	r3, [pc, #104]	@ (8000968 <HAL_I2C_MspInit+0x264>)
 8000900:	2200      	movs	r2, #0
 8000902:	611a      	str	r2, [r3, #16]
    hdma_i2c3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000904:	4b18      	ldr	r3, [pc, #96]	@ (8000968 <HAL_I2C_MspInit+0x264>)
 8000906:	2200      	movs	r2, #0
 8000908:	615a      	str	r2, [r3, #20]
    hdma_i2c3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800090a:	4b17      	ldr	r3, [pc, #92]	@ (8000968 <HAL_I2C_MspInit+0x264>)
 800090c:	2200      	movs	r2, #0
 800090e:	619a      	str	r2, [r3, #24]
    hdma_i2c3_rx.Init.Mode = DMA_NORMAL;
 8000910:	4b15      	ldr	r3, [pc, #84]	@ (8000968 <HAL_I2C_MspInit+0x264>)
 8000912:	2200      	movs	r2, #0
 8000914:	61da      	str	r2, [r3, #28]
    hdma_i2c3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000916:	4b14      	ldr	r3, [pc, #80]	@ (8000968 <HAL_I2C_MspInit+0x264>)
 8000918:	2200      	movs	r2, #0
 800091a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c3_rx) != HAL_OK)
 800091c:	4812      	ldr	r0, [pc, #72]	@ (8000968 <HAL_I2C_MspInit+0x264>)
 800091e:	f000 fe9d 	bl	800165c <HAL_DMA_Init>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d001      	beq.n	800092c <HAL_I2C_MspInit+0x228>
      Error_Handler();
 8000928:	f000 f893 	bl	8000a52 <Error_Handler>
    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c3_rx);
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	4a0e      	ldr	r2, [pc, #56]	@ (8000968 <HAL_I2C_MspInit+0x264>)
 8000930:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000932:	4a0d      	ldr	r2, [pc, #52]	@ (8000968 <HAL_I2C_MspInit+0x264>)
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 0, 0);
 8000938:	2200      	movs	r2, #0
 800093a:	2100      	movs	r1, #0
 800093c:	205c      	movs	r0, #92	@ 0x5c
 800093e:	f000 fe58 	bl	80015f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 8000942:	205c      	movs	r0, #92	@ 0x5c
 8000944:	f000 fe6f 	bl	8001626 <HAL_NVIC_EnableIRQ>
}
 8000948:	bf00      	nop
 800094a:	3778      	adds	r7, #120	@ 0x78
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}
 8000950:	40005400 	.word	0x40005400
 8000954:	40021000 	.word	0x40021000
 8000958:	48000400 	.word	0x48000400
 800095c:	40007800 	.word	0x40007800
 8000960:	200000d0 	.word	0x200000d0
 8000964:	40020008 	.word	0x40020008
 8000968:	20000130 	.word	0x20000130
 800096c:	4002001c 	.word	0x4002001c

08000970 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000974:	f000 fccf 	bl	8001316 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000978:	f000 f820 	bl	80009bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800097c:	f7ff fdf6 	bl	800056c <MX_GPIO_Init>
  MX_DMA_Init();
 8000980:	f7ff fdc2 	bl	8000508 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000984:	f000 fbfa 	bl	800117c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000988:	f7ff fe3c 	bl	8000604 <MX_I2C1_Init>
  MX_TIM3_Init();
 800098c:	f000 f936 	bl	8000bfc <MX_TIM3_Init>
  MX_TIM4_Init();
 8000990:	f000 f98a 	bl	8000ca8 <MX_TIM4_Init>
  MX_I2C3_Init();
 8000994:	f7ff fe76 	bl	8000684 <MX_I2C3_Init>
  MX_TIM2_Init();
 8000998:	f000 f8e6 	bl	8000b68 <MX_TIM2_Init>
  MX_TIM8_Init();
 800099c:	f000 f9da 	bl	8000d54 <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */
  BNO055_Init(&bno, &hi2c3, 1, NDOF);
 80009a0:	230c      	movs	r3, #12
 80009a2:	2201      	movs	r2, #1
 80009a4:	4903      	ldr	r1, [pc, #12]	@ (80009b4 <main+0x44>)
 80009a6:	4804      	ldr	r0, [pc, #16]	@ (80009b8 <main+0x48>)
 80009a8:	f006 f8c4 	bl	8006b34 <BNO055_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	HAL_Delay(100);
 80009ac:	2064      	movs	r0, #100	@ 0x64
 80009ae:	f000 fd23 	bl	80013f8 <HAL_Delay>
 80009b2:	e7fb      	b.n	80009ac <main+0x3c>
 80009b4:	2000007c 	.word	0x2000007c
 80009b8:	20000190 	.word	0x20000190

080009bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b094      	sub	sp, #80	@ 0x50
 80009c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009c2:	f107 0318 	add.w	r3, r7, #24
 80009c6:	2238      	movs	r2, #56	@ 0x38
 80009c8:	2100      	movs	r1, #0
 80009ca:	4618      	mov	r0, r3
 80009cc:	f006 f978 	bl	8006cc0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009d0:	1d3b      	adds	r3, r7, #4
 80009d2:	2200      	movs	r2, #0
 80009d4:	601a      	str	r2, [r3, #0]
 80009d6:	605a      	str	r2, [r3, #4]
 80009d8:	609a      	str	r2, [r3, #8]
 80009da:	60da      	str	r2, [r3, #12]
 80009dc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80009de:	2000      	movs	r0, #0
 80009e0:	f003 f8d8 	bl	8003b94 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009e4:	2302      	movs	r3, #2
 80009e6:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009e8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80009ec:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009ee:	2340      	movs	r3, #64	@ 0x40
 80009f0:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009f2:	2302      	movs	r3, #2
 80009f4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80009f6:	2302      	movs	r3, #2
 80009f8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80009fa:	2304      	movs	r3, #4
 80009fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80009fe:	2355      	movs	r3, #85	@ 0x55
 8000a00:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a02:	2302      	movs	r3, #2
 8000a04:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000a06:	2302      	movs	r3, #2
 8000a08:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000a0a:	2302      	movs	r3, #2
 8000a0c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a0e:	f107 0318 	add.w	r3, r7, #24
 8000a12:	4618      	mov	r0, r3
 8000a14:	f003 f972 	bl	8003cfc <HAL_RCC_OscConfig>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d001      	beq.n	8000a22 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000a1e:	f000 f818 	bl	8000a52 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a22:	230f      	movs	r3, #15
 8000a24:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a26:	2303      	movs	r3, #3
 8000a28:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a32:	2300      	movs	r3, #0
 8000a34:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000a36:	1d3b      	adds	r3, r7, #4
 8000a38:	2104      	movs	r1, #4
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f003 fc70 	bl	8004320 <HAL_RCC_ClockConfig>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d001      	beq.n	8000a4a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000a46:	f000 f804 	bl	8000a52 <Error_Handler>
  }
}
 8000a4a:	bf00      	nop
 8000a4c:	3750      	adds	r7, #80	@ 0x50
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}

08000a52 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a52:	b480      	push	{r7}
 8000a54:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a56:	b672      	cpsid	i
}
 8000a58:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a5a:	bf00      	nop
 8000a5c:	e7fd      	b.n	8000a5a <Error_Handler+0x8>
	...

08000a60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b082      	sub	sp, #8
 8000a64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a66:	4b0f      	ldr	r3, [pc, #60]	@ (8000aa4 <HAL_MspInit+0x44>)
 8000a68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a6a:	4a0e      	ldr	r2, [pc, #56]	@ (8000aa4 <HAL_MspInit+0x44>)
 8000a6c:	f043 0301 	orr.w	r3, r3, #1
 8000a70:	6613      	str	r3, [r2, #96]	@ 0x60
 8000a72:	4b0c      	ldr	r3, [pc, #48]	@ (8000aa4 <HAL_MspInit+0x44>)
 8000a74:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a76:	f003 0301 	and.w	r3, r3, #1
 8000a7a:	607b      	str	r3, [r7, #4]
 8000a7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a7e:	4b09      	ldr	r3, [pc, #36]	@ (8000aa4 <HAL_MspInit+0x44>)
 8000a80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a82:	4a08      	ldr	r2, [pc, #32]	@ (8000aa4 <HAL_MspInit+0x44>)
 8000a84:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a88:	6593      	str	r3, [r2, #88]	@ 0x58
 8000a8a:	4b06      	ldr	r3, [pc, #24]	@ (8000aa4 <HAL_MspInit+0x44>)
 8000a8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a92:	603b      	str	r3, [r7, #0]
 8000a94:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000a96:	f003 f921 	bl	8003cdc <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a9a:	bf00      	nop
 8000a9c:	3708      	adds	r7, #8
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	40021000 	.word	0x40021000

08000aa8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000aac:	bf00      	nop
 8000aae:	e7fd      	b.n	8000aac <NMI_Handler+0x4>

08000ab0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ab4:	bf00      	nop
 8000ab6:	e7fd      	b.n	8000ab4 <HardFault_Handler+0x4>

08000ab8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000abc:	bf00      	nop
 8000abe:	e7fd      	b.n	8000abc <MemManage_Handler+0x4>

08000ac0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ac4:	bf00      	nop
 8000ac6:	e7fd      	b.n	8000ac4 <BusFault_Handler+0x4>

08000ac8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000acc:	bf00      	nop
 8000ace:	e7fd      	b.n	8000acc <UsageFault_Handler+0x4>

08000ad0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ad4:	bf00      	nop
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000adc:	4770      	bx	lr

08000ade <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ade:	b480      	push	{r7}
 8000ae0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ae2:	bf00      	nop
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aea:	4770      	bx	lr

08000aec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000af0:	bf00      	nop
 8000af2:	46bd      	mov	sp, r7
 8000af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af8:	4770      	bx	lr

08000afa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000afa:	b580      	push	{r7, lr}
 8000afc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000afe:	f000 fc5d 	bl	80013bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b02:	bf00      	nop
 8000b04:	bd80      	pop	{r7, pc}
	...

08000b08 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c3_tx);
 8000b0c:	4802      	ldr	r0, [pc, #8]	@ (8000b18 <DMA1_Channel1_IRQHandler+0x10>)
 8000b0e:	f000 ff2f 	bl	8001970 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000b12:	bf00      	nop
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	200000d0 	.word	0x200000d0

08000b1c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c3_rx);
 8000b20:	4802      	ldr	r0, [pc, #8]	@ (8000b2c <DMA1_Channel2_IRQHandler+0x10>)
 8000b22:	f000 ff25 	bl	8001970 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8000b26:	bf00      	nop
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	20000130 	.word	0x20000130

08000b30 <I2C3_EV_IRQHandler>:

/**
  * @brief This function handles I2C3 event interrupt / I2C3 wake-up interrupt through EXTI line 27.
  */
void I2C3_EV_IRQHandler(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c3);
 8000b34:	4802      	ldr	r0, [pc, #8]	@ (8000b40 <I2C3_EV_IRQHandler+0x10>)
 8000b36:	f001 fc7b 	bl	8002430 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C3_EV_IRQn 1 */

  /* USER CODE END I2C3_EV_IRQn 1 */
}
 8000b3a:	bf00      	nop
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	2000007c 	.word	0x2000007c

08000b44 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000b48:	4b06      	ldr	r3, [pc, #24]	@ (8000b64 <SystemInit+0x20>)
 8000b4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b4e:	4a05      	ldr	r2, [pc, #20]	@ (8000b64 <SystemInit+0x20>)
 8000b50:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b54:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b58:	bf00      	nop
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop
 8000b64:	e000ed00 	.word	0xe000ed00

08000b68 <MX_TIM2_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim8;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b088      	sub	sp, #32
 8000b6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_HallSensor_InitTypeDef sConfig = {0};
 8000b6e:	f107 0310 	add.w	r3, r7, #16
 8000b72:	2200      	movs	r2, #0
 8000b74:	601a      	str	r2, [r3, #0]
 8000b76:	605a      	str	r2, [r3, #4]
 8000b78:	609a      	str	r2, [r3, #8]
 8000b7a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b7c:	1d3b      	adds	r3, r7, #4
 8000b7e:	2200      	movs	r2, #0
 8000b80:	601a      	str	r2, [r3, #0]
 8000b82:	605a      	str	r2, [r3, #4]
 8000b84:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b86:	4b1c      	ldr	r3, [pc, #112]	@ (8000bf8 <MX_TIM2_Init+0x90>)
 8000b88:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000b8c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000b8e:	4b1a      	ldr	r3, [pc, #104]	@ (8000bf8 <MX_TIM2_Init+0x90>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b94:	4b18      	ldr	r3, [pc, #96]	@ (8000bf8 <MX_TIM2_Init+0x90>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000b9a:	4b17      	ldr	r3, [pc, #92]	@ (8000bf8 <MX_TIM2_Init+0x90>)
 8000b9c:	f04f 32ff 	mov.w	r2, #4294967295
 8000ba0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ba2:	4b15      	ldr	r3, [pc, #84]	@ (8000bf8 <MX_TIM2_Init+0x90>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ba8:	4b13      	ldr	r3, [pc, #76]	@ (8000bf8 <MX_TIM2_Init+0x90>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	619a      	str	r2, [r3, #24]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Filter = 0;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	61bb      	str	r3, [r7, #24]
  sConfig.Commutation_Delay = 0;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_HallSensor_Init(&htim2, &sConfig) != HAL_OK)
 8000bbe:	f107 0310 	add.w	r3, r7, #16
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	480c      	ldr	r0, [pc, #48]	@ (8000bf8 <MX_TIM2_Init+0x90>)
 8000bc6:	f004 ffb9 	bl	8005b3c <HAL_TIMEx_HallSensor_Init>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d001      	beq.n	8000bd4 <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 8000bd0:	f7ff ff3f 	bl	8000a52 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 8000bd4:	2350      	movs	r3, #80	@ 0x50
 8000bd6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000bdc:	1d3b      	adds	r3, r7, #4
 8000bde:	4619      	mov	r1, r3
 8000be0:	4805      	ldr	r0, [pc, #20]	@ (8000bf8 <MX_TIM2_Init+0x90>)
 8000be2:	f005 f85b 	bl	8005c9c <HAL_TIMEx_MasterConfigSynchronization>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d001      	beq.n	8000bf0 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 8000bec:	f7ff ff31 	bl	8000a52 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000bf0:	bf00      	nop
 8000bf2:	3720      	adds	r7, #32
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	200001e0 	.word	0x200001e0

08000bfc <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b08c      	sub	sp, #48	@ 0x30
 8000c00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000c02:	f107 030c 	add.w	r3, r7, #12
 8000c06:	2224      	movs	r2, #36	@ 0x24
 8000c08:	2100      	movs	r1, #0
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f006 f858 	bl	8006cc0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c10:	463b      	mov	r3, r7
 8000c12:	2200      	movs	r2, #0
 8000c14:	601a      	str	r2, [r3, #0]
 8000c16:	605a      	str	r2, [r3, #4]
 8000c18:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000c1a:	4b21      	ldr	r3, [pc, #132]	@ (8000ca0 <MX_TIM3_Init+0xa4>)
 8000c1c:	4a21      	ldr	r2, [pc, #132]	@ (8000ca4 <MX_TIM3_Init+0xa8>)
 8000c1e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000c20:	4b1f      	ldr	r3, [pc, #124]	@ (8000ca0 <MX_TIM3_Init+0xa4>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c26:	4b1e      	ldr	r3, [pc, #120]	@ (8000ca0 <MX_TIM3_Init+0xa4>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000c2c:	4b1c      	ldr	r3, [pc, #112]	@ (8000ca0 <MX_TIM3_Init+0xa4>)
 8000c2e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000c32:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c34:	4b1a      	ldr	r3, [pc, #104]	@ (8000ca0 <MX_TIM3_Init+0xa4>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c3a:	4b19      	ldr	r3, [pc, #100]	@ (8000ca0 <MX_TIM3_Init+0xa4>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000c40:	2301      	movs	r3, #1
 8000c42:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000c44:	2300      	movs	r3, #0
 8000c46:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000c48:	2301      	movs	r3, #1
 8000c4a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000c50:	2300      	movs	r3, #0
 8000c52:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000c54:	2300      	movs	r3, #0
 8000c56:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000c58:	2301      	movs	r3, #1
 8000c5a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000c60:	2300      	movs	r3, #0
 8000c62:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000c64:	f107 030c 	add.w	r3, r7, #12
 8000c68:	4619      	mov	r1, r3
 8000c6a:	480d      	ldr	r0, [pc, #52]	@ (8000ca0 <MX_TIM3_Init+0xa4>)
 8000c6c:	f004 f81c 	bl	8004ca8 <HAL_TIM_Encoder_Init>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d001      	beq.n	8000c7a <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8000c76:	f7ff feec 	bl	8000a52 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000c82:	463b      	mov	r3, r7
 8000c84:	4619      	mov	r1, r3
 8000c86:	4806      	ldr	r0, [pc, #24]	@ (8000ca0 <MX_TIM3_Init+0xa4>)
 8000c88:	f005 f808 	bl	8005c9c <HAL_TIMEx_MasterConfigSynchronization>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d001      	beq.n	8000c96 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8000c92:	f7ff fede 	bl	8000a52 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000c96:	bf00      	nop
 8000c98:	3730      	adds	r7, #48	@ 0x30
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	2000022c 	.word	0x2000022c
 8000ca4:	40000400 	.word	0x40000400

08000ca8 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b08c      	sub	sp, #48	@ 0x30
 8000cac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000cae:	f107 030c 	add.w	r3, r7, #12
 8000cb2:	2224      	movs	r2, #36	@ 0x24
 8000cb4:	2100      	movs	r1, #0
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f006 f802 	bl	8006cc0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cbc:	463b      	mov	r3, r7
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	601a      	str	r2, [r3, #0]
 8000cc2:	605a      	str	r2, [r3, #4]
 8000cc4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000cc6:	4b21      	ldr	r3, [pc, #132]	@ (8000d4c <MX_TIM4_Init+0xa4>)
 8000cc8:	4a21      	ldr	r2, [pc, #132]	@ (8000d50 <MX_TIM4_Init+0xa8>)
 8000cca:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000ccc:	4b1f      	ldr	r3, [pc, #124]	@ (8000d4c <MX_TIM4_Init+0xa4>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cd2:	4b1e      	ldr	r3, [pc, #120]	@ (8000d4c <MX_TIM4_Init+0xa4>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000cd8:	4b1c      	ldr	r3, [pc, #112]	@ (8000d4c <MX_TIM4_Init+0xa4>)
 8000cda:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000cde:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ce0:	4b1a      	ldr	r3, [pc, #104]	@ (8000d4c <MX_TIM4_Init+0xa4>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ce6:	4b19      	ldr	r3, [pc, #100]	@ (8000d4c <MX_TIM4_Init+0xa4>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000cec:	2301      	movs	r3, #1
 8000cee:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000cf4:	2301      	movs	r3, #1
 8000cf6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000d00:	2300      	movs	r3, #0
 8000d02:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000d04:	2301      	movs	r3, #1
 8000d06:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8000d10:	f107 030c 	add.w	r3, r7, #12
 8000d14:	4619      	mov	r1, r3
 8000d16:	480d      	ldr	r0, [pc, #52]	@ (8000d4c <MX_TIM4_Init+0xa4>)
 8000d18:	f003 ffc6 	bl	8004ca8 <HAL_TIM_Encoder_Init>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d001      	beq.n	8000d26 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8000d22:	f7ff fe96 	bl	8000a52 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d26:	2300      	movs	r3, #0
 8000d28:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000d2e:	463b      	mov	r3, r7
 8000d30:	4619      	mov	r1, r3
 8000d32:	4806      	ldr	r0, [pc, #24]	@ (8000d4c <MX_TIM4_Init+0xa4>)
 8000d34:	f004 ffb2 	bl	8005c9c <HAL_TIMEx_MasterConfigSynchronization>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d001      	beq.n	8000d42 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8000d3e:	f7ff fe88 	bl	8000a52 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000d42:	bf00      	nop
 8000d44:	3730      	adds	r7, #48	@ 0x30
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	20000278 	.word	0x20000278
 8000d50:	40000800 	.word	0x40000800

08000d54 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b09c      	sub	sp, #112	@ 0x70
 8000d58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d5a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000d5e:	2200      	movs	r2, #0
 8000d60:	601a      	str	r2, [r3, #0]
 8000d62:	605a      	str	r2, [r3, #4]
 8000d64:	609a      	str	r2, [r3, #8]
 8000d66:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d68:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	601a      	str	r2, [r3, #0]
 8000d70:	605a      	str	r2, [r3, #4]
 8000d72:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d74:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000d78:	2200      	movs	r2, #0
 8000d7a:	601a      	str	r2, [r3, #0]
 8000d7c:	605a      	str	r2, [r3, #4]
 8000d7e:	609a      	str	r2, [r3, #8]
 8000d80:	60da      	str	r2, [r3, #12]
 8000d82:	611a      	str	r2, [r3, #16]
 8000d84:	615a      	str	r2, [r3, #20]
 8000d86:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000d88:	1d3b      	adds	r3, r7, #4
 8000d8a:	2234      	movs	r2, #52	@ 0x34
 8000d8c:	2100      	movs	r1, #0
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f005 ff96 	bl	8006cc0 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000d94:	4b4b      	ldr	r3, [pc, #300]	@ (8000ec4 <MX_TIM8_Init+0x170>)
 8000d96:	4a4c      	ldr	r2, [pc, #304]	@ (8000ec8 <MX_TIM8_Init+0x174>)
 8000d98:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8000d9a:	4b4a      	ldr	r3, [pc, #296]	@ (8000ec4 <MX_TIM8_Init+0x170>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000da0:	4b48      	ldr	r3, [pc, #288]	@ (8000ec4 <MX_TIM8_Init+0x170>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8000da6:	4b47      	ldr	r3, [pc, #284]	@ (8000ec4 <MX_TIM8_Init+0x170>)
 8000da8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000dac:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dae:	4b45      	ldr	r3, [pc, #276]	@ (8000ec4 <MX_TIM8_Init+0x170>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000db4:	4b43      	ldr	r3, [pc, #268]	@ (8000ec4 <MX_TIM8_Init+0x170>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dba:	4b42      	ldr	r3, [pc, #264]	@ (8000ec4 <MX_TIM8_Init+0x170>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8000dc0:	4840      	ldr	r0, [pc, #256]	@ (8000ec4 <MX_TIM8_Init+0x170>)
 8000dc2:	f003 feb9 	bl	8004b38 <HAL_TIM_Base_Init>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d001      	beq.n	8000dd0 <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 8000dcc:	f7ff fe41 	bl	8000a52 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000dd0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000dd4:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8000dd6:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000dda:	4619      	mov	r1, r3
 8000ddc:	4839      	ldr	r0, [pc, #228]	@ (8000ec4 <MX_TIM8_Init+0x170>)
 8000dde:	f004 f91d 	bl	800501c <HAL_TIM_ConfigClockSource>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d001      	beq.n	8000dec <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 8000de8:	f7ff fe33 	bl	8000a52 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8000dec:	4835      	ldr	r0, [pc, #212]	@ (8000ec4 <MX_TIM8_Init+0x170>)
 8000dee:	f003 fefa 	bl	8004be6 <HAL_TIM_PWM_Init>
 8000df2:	4603      	mov	r3, r0
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d001      	beq.n	8000dfc <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 8000df8:	f7ff fe2b 	bl	8000a52 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000e00:	2300      	movs	r3, #0
 8000e02:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e04:	2300      	movs	r3, #0
 8000e06:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000e08:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	482d      	ldr	r0, [pc, #180]	@ (8000ec4 <MX_TIM8_Init+0x170>)
 8000e10:	f004 ff44 	bl	8005c9c <HAL_TIMEx_MasterConfigSynchronization>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d001      	beq.n	8000e1e <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 8000e1a:	f7ff fe1a 	bl	8000a52 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e1e:	2360      	movs	r3, #96	@ 0x60
 8000e20:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8000e22:	2300      	movs	r3, #0
 8000e24:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e26:	2300      	movs	r3, #0
 8000e28:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000e32:	2300      	movs	r3, #0
 8000e34:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000e36:	2300      	movs	r3, #0
 8000e38:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e3a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000e3e:	2200      	movs	r2, #0
 8000e40:	4619      	mov	r1, r3
 8000e42:	4820      	ldr	r0, [pc, #128]	@ (8000ec4 <MX_TIM8_Init+0x170>)
 8000e44:	f003 ffd6 	bl	8004df4 <HAL_TIM_PWM_ConfigChannel>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d001      	beq.n	8000e52 <MX_TIM8_Init+0xfe>
  {
    Error_Handler();
 8000e4e:	f7ff fe00 	bl	8000a52 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000e52:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000e56:	2204      	movs	r2, #4
 8000e58:	4619      	mov	r1, r3
 8000e5a:	481a      	ldr	r0, [pc, #104]	@ (8000ec4 <MX_TIM8_Init+0x170>)
 8000e5c:	f003 ffca 	bl	8004df4 <HAL_TIM_PWM_ConfigChannel>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d001      	beq.n	8000e6a <MX_TIM8_Init+0x116>
  {
    Error_Handler();
 8000e66:	f7ff fdf4 	bl	8000a52 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000e72:	2300      	movs	r3, #0
 8000e74:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000e76:	2300      	movs	r3, #0
 8000e78:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000e7e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e82:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000e84:	2300      	movs	r3, #0
 8000e86:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000e90:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000e94:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000e96:	2300      	movs	r3, #0
 8000e98:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8000ea2:	1d3b      	adds	r3, r7, #4
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	4807      	ldr	r0, [pc, #28]	@ (8000ec4 <MX_TIM8_Init+0x170>)
 8000ea8:	f004 ff7a 	bl	8005da0 <HAL_TIMEx_ConfigBreakDeadTime>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d001      	beq.n	8000eb6 <MX_TIM8_Init+0x162>
  {
    Error_Handler();
 8000eb2:	f7ff fdce 	bl	8000a52 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8000eb6:	4803      	ldr	r0, [pc, #12]	@ (8000ec4 <MX_TIM8_Init+0x170>)
 8000eb8:	f000 f90c 	bl	80010d4 <HAL_TIM_MspPostInit>

}
 8000ebc:	bf00      	nop
 8000ebe:	3770      	adds	r7, #112	@ 0x70
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	200002c4 	.word	0x200002c4
 8000ec8:	40013400 	.word	0x40013400

08000ecc <HAL_TIMEx_HallSensor_MspInit>:

void HAL_TIMEx_HallSensor_MspInit(TIM_HandleTypeDef* timex_hallsensorHandle)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b08a      	sub	sp, #40	@ 0x28
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ed4:	f107 0314 	add.w	r3, r7, #20
 8000ed8:	2200      	movs	r2, #0
 8000eda:	601a      	str	r2, [r3, #0]
 8000edc:	605a      	str	r2, [r3, #4]
 8000ede:	609a      	str	r2, [r3, #8]
 8000ee0:	60da      	str	r2, [r3, #12]
 8000ee2:	611a      	str	r2, [r3, #16]
  if(timex_hallsensorHandle->Instance==TIM2)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000eec:	d13a      	bne.n	8000f64 <HAL_TIMEx_HallSensor_MspInit+0x98>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000eee:	4b1f      	ldr	r3, [pc, #124]	@ (8000f6c <HAL_TIMEx_HallSensor_MspInit+0xa0>)
 8000ef0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ef2:	4a1e      	ldr	r2, [pc, #120]	@ (8000f6c <HAL_TIMEx_HallSensor_MspInit+0xa0>)
 8000ef4:	f043 0301 	orr.w	r3, r3, #1
 8000ef8:	6593      	str	r3, [r2, #88]	@ 0x58
 8000efa:	4b1c      	ldr	r3, [pc, #112]	@ (8000f6c <HAL_TIMEx_HallSensor_MspInit+0xa0>)
 8000efc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000efe:	f003 0301 	and.w	r3, r3, #1
 8000f02:	613b      	str	r3, [r7, #16]
 8000f04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f06:	4b19      	ldr	r3, [pc, #100]	@ (8000f6c <HAL_TIMEx_HallSensor_MspInit+0xa0>)
 8000f08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f0a:	4a18      	ldr	r2, [pc, #96]	@ (8000f6c <HAL_TIMEx_HallSensor_MspInit+0xa0>)
 8000f0c:	f043 0301 	orr.w	r3, r3, #1
 8000f10:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f12:	4b16      	ldr	r3, [pc, #88]	@ (8000f6c <HAL_TIMEx_HallSensor_MspInit+0xa0>)
 8000f14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f16:	f003 0301 	and.w	r3, r3, #1
 8000f1a:	60fb      	str	r3, [r7, #12]
 8000f1c:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA5     ------> TIM2_CH1
    PA9     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5;
 8000f1e:	2322      	movs	r3, #34	@ 0x22
 8000f20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f22:	2302      	movs	r3, #2
 8000f24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f26:	2300      	movs	r3, #0
 8000f28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000f2e:	2301      	movs	r3, #1
 8000f30:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f32:	f107 0314 	add.w	r3, r7, #20
 8000f36:	4619      	mov	r1, r3
 8000f38:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f3c:	f000 fe76 	bl	8001c2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000f40:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000f44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f46:	2302      	movs	r3, #2
 8000f48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM2;
 8000f52:	230a      	movs	r3, #10
 8000f54:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f56:	f107 0314 	add.w	r3, r7, #20
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f60:	f000 fe64 	bl	8001c2c <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000f64:	bf00      	nop
 8000f66:	3728      	adds	r7, #40	@ 0x28
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	40021000 	.word	0x40021000

08000f70 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b08c      	sub	sp, #48	@ 0x30
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f78:	f107 031c 	add.w	r3, r7, #28
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	601a      	str	r2, [r3, #0]
 8000f80:	605a      	str	r2, [r3, #4]
 8000f82:	609a      	str	r2, [r3, #8]
 8000f84:	60da      	str	r2, [r3, #12]
 8000f86:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	4a3d      	ldr	r2, [pc, #244]	@ (8001084 <HAL_TIM_Encoder_MspInit+0x114>)
 8000f8e:	4293      	cmp	r3, r2
 8000f90:	d145      	bne.n	800101e <HAL_TIM_Encoder_MspInit+0xae>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000f92:	4b3d      	ldr	r3, [pc, #244]	@ (8001088 <HAL_TIM_Encoder_MspInit+0x118>)
 8000f94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f96:	4a3c      	ldr	r2, [pc, #240]	@ (8001088 <HAL_TIM_Encoder_MspInit+0x118>)
 8000f98:	f043 0302 	orr.w	r3, r3, #2
 8000f9c:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f9e:	4b3a      	ldr	r3, [pc, #232]	@ (8001088 <HAL_TIM_Encoder_MspInit+0x118>)
 8000fa0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fa2:	f003 0302 	and.w	r3, r3, #2
 8000fa6:	61bb      	str	r3, [r7, #24]
 8000fa8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000faa:	4b37      	ldr	r3, [pc, #220]	@ (8001088 <HAL_TIM_Encoder_MspInit+0x118>)
 8000fac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fae:	4a36      	ldr	r2, [pc, #216]	@ (8001088 <HAL_TIM_Encoder_MspInit+0x118>)
 8000fb0:	f043 0301 	orr.w	r3, r3, #1
 8000fb4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fb6:	4b34      	ldr	r3, [pc, #208]	@ (8001088 <HAL_TIM_Encoder_MspInit+0x118>)
 8000fb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fba:	f003 0301 	and.w	r3, r3, #1
 8000fbe:	617b      	str	r3, [r7, #20]
 8000fc0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fc2:	4b31      	ldr	r3, [pc, #196]	@ (8001088 <HAL_TIM_Encoder_MspInit+0x118>)
 8000fc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fc6:	4a30      	ldr	r2, [pc, #192]	@ (8001088 <HAL_TIM_Encoder_MspInit+0x118>)
 8000fc8:	f043 0302 	orr.w	r3, r3, #2
 8000fcc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fce:	4b2e      	ldr	r3, [pc, #184]	@ (8001088 <HAL_TIM_Encoder_MspInit+0x118>)
 8000fd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fd2:	f003 0302 	and.w	r3, r3, #2
 8000fd6:	613b      	str	r3, [r7, #16]
 8000fd8:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PA4     ------> TIM3_CH2
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000fda:	2310      	movs	r3, #16
 8000fdc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fde:	2302      	movs	r3, #2
 8000fe0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000fea:	2302      	movs	r3, #2
 8000fec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fee:	f107 031c 	add.w	r3, r7, #28
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ff8:	f000 fe18 	bl	8001c2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000ffc:	2310      	movs	r3, #16
 8000ffe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001000:	2302      	movs	r3, #2
 8001002:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001004:	2300      	movs	r3, #0
 8001006:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001008:	2300      	movs	r3, #0
 800100a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800100c:	2302      	movs	r3, #2
 800100e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001010:	f107 031c 	add.w	r3, r7, #28
 8001014:	4619      	mov	r1, r3
 8001016:	481d      	ldr	r0, [pc, #116]	@ (800108c <HAL_TIM_Encoder_MspInit+0x11c>)
 8001018:	f000 fe08 	bl	8001c2c <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800101c:	e02e      	b.n	800107c <HAL_TIM_Encoder_MspInit+0x10c>
  else if(tim_encoderHandle->Instance==TIM4)
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	4a1b      	ldr	r2, [pc, #108]	@ (8001090 <HAL_TIM_Encoder_MspInit+0x120>)
 8001024:	4293      	cmp	r3, r2
 8001026:	d129      	bne.n	800107c <HAL_TIM_Encoder_MspInit+0x10c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001028:	4b17      	ldr	r3, [pc, #92]	@ (8001088 <HAL_TIM_Encoder_MspInit+0x118>)
 800102a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800102c:	4a16      	ldr	r2, [pc, #88]	@ (8001088 <HAL_TIM_Encoder_MspInit+0x118>)
 800102e:	f043 0304 	orr.w	r3, r3, #4
 8001032:	6593      	str	r3, [r2, #88]	@ 0x58
 8001034:	4b14      	ldr	r3, [pc, #80]	@ (8001088 <HAL_TIM_Encoder_MspInit+0x118>)
 8001036:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001038:	f003 0304 	and.w	r3, r3, #4
 800103c:	60fb      	str	r3, [r7, #12]
 800103e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001040:	4b11      	ldr	r3, [pc, #68]	@ (8001088 <HAL_TIM_Encoder_MspInit+0x118>)
 8001042:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001044:	4a10      	ldr	r2, [pc, #64]	@ (8001088 <HAL_TIM_Encoder_MspInit+0x118>)
 8001046:	f043 0301 	orr.w	r3, r3, #1
 800104a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800104c:	4b0e      	ldr	r3, [pc, #56]	@ (8001088 <HAL_TIM_Encoder_MspInit+0x118>)
 800104e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001050:	f003 0301 	and.w	r3, r3, #1
 8001054:	60bb      	str	r3, [r7, #8]
 8001056:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001058:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800105c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800105e:	2302      	movs	r3, #2
 8001060:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001062:	2300      	movs	r3, #0
 8001064:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001066:	2300      	movs	r3, #0
 8001068:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 800106a:	230a      	movs	r3, #10
 800106c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800106e:	f107 031c 	add.w	r3, r7, #28
 8001072:	4619      	mov	r1, r3
 8001074:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001078:	f000 fdd8 	bl	8001c2c <HAL_GPIO_Init>
}
 800107c:	bf00      	nop
 800107e:	3730      	adds	r7, #48	@ 0x30
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}
 8001084:	40000400 	.word	0x40000400
 8001088:	40021000 	.word	0x40021000
 800108c:	48000400 	.word	0x48000400
 8001090:	40000800 	.word	0x40000800

08001094 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001094:	b480      	push	{r7}
 8001096:	b085      	sub	sp, #20
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM8)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4a0a      	ldr	r2, [pc, #40]	@ (80010cc <HAL_TIM_Base_MspInit+0x38>)
 80010a2:	4293      	cmp	r3, r2
 80010a4:	d10b      	bne.n	80010be <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* TIM8 clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 80010a6:	4b0a      	ldr	r3, [pc, #40]	@ (80010d0 <HAL_TIM_Base_MspInit+0x3c>)
 80010a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010aa:	4a09      	ldr	r2, [pc, #36]	@ (80010d0 <HAL_TIM_Base_MspInit+0x3c>)
 80010ac:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80010b0:	6613      	str	r3, [r2, #96]	@ 0x60
 80010b2:	4b07      	ldr	r3, [pc, #28]	@ (80010d0 <HAL_TIM_Base_MspInit+0x3c>)
 80010b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010b6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80010ba:	60fb      	str	r3, [r7, #12]
 80010bc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 80010be:	bf00      	nop
 80010c0:	3714      	adds	r7, #20
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr
 80010ca:	bf00      	nop
 80010cc:	40013400 	.word	0x40013400
 80010d0:	40021000 	.word	0x40021000

080010d4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b08a      	sub	sp, #40	@ 0x28
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010dc:	f107 0314 	add.w	r3, r7, #20
 80010e0:	2200      	movs	r2, #0
 80010e2:	601a      	str	r2, [r3, #0]
 80010e4:	605a      	str	r2, [r3, #4]
 80010e6:	609a      	str	r2, [r3, #8]
 80010e8:	60da      	str	r2, [r3, #12]
 80010ea:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM8)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4a1f      	ldr	r2, [pc, #124]	@ (8001170 <HAL_TIM_MspPostInit+0x9c>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d138      	bne.n	8001168 <HAL_TIM_MspPostInit+0x94>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010f6:	4b1f      	ldr	r3, [pc, #124]	@ (8001174 <HAL_TIM_MspPostInit+0xa0>)
 80010f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010fa:	4a1e      	ldr	r2, [pc, #120]	@ (8001174 <HAL_TIM_MspPostInit+0xa0>)
 80010fc:	f043 0301 	orr.w	r3, r3, #1
 8001100:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001102:	4b1c      	ldr	r3, [pc, #112]	@ (8001174 <HAL_TIM_MspPostInit+0xa0>)
 8001104:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001106:	f003 0301 	and.w	r3, r3, #1
 800110a:	613b      	str	r3, [r7, #16]
 800110c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800110e:	4b19      	ldr	r3, [pc, #100]	@ (8001174 <HAL_TIM_MspPostInit+0xa0>)
 8001110:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001112:	4a18      	ldr	r2, [pc, #96]	@ (8001174 <HAL_TIM_MspPostInit+0xa0>)
 8001114:	f043 0302 	orr.w	r3, r3, #2
 8001118:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800111a:	4b16      	ldr	r3, [pc, #88]	@ (8001174 <HAL_TIM_MspPostInit+0xa0>)
 800111c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800111e:	f003 0302 	and.w	r3, r3, #2
 8001122:	60fb      	str	r3, [r7, #12]
 8001124:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PA7     ------> TIM8_CH1N
    PB0     ------> TIM8_CH2N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001126:	2380      	movs	r3, #128	@ 0x80
 8001128:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800112a:	2302      	movs	r3, #2
 800112c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112e:	2300      	movs	r3, #0
 8001130:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001132:	2300      	movs	r3, #0
 8001134:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8001136:	2304      	movs	r3, #4
 8001138:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800113a:	f107 0314 	add.w	r3, r7, #20
 800113e:	4619      	mov	r1, r3
 8001140:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001144:	f000 fd72 	bl	8001c2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001148:	2301      	movs	r3, #1
 800114a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800114c:	2302      	movs	r3, #2
 800114e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001150:	2300      	movs	r3, #0
 8001152:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001154:	2300      	movs	r3, #0
 8001156:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8001158:	2304      	movs	r3, #4
 800115a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800115c:	f107 0314 	add.w	r3, r7, #20
 8001160:	4619      	mov	r1, r3
 8001162:	4805      	ldr	r0, [pc, #20]	@ (8001178 <HAL_TIM_MspPostInit+0xa4>)
 8001164:	f000 fd62 	bl	8001c2c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8001168:	bf00      	nop
 800116a:	3728      	adds	r7, #40	@ 0x28
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}
 8001170:	40013400 	.word	0x40013400
 8001174:	40021000 	.word	0x40021000
 8001178:	48000400 	.word	0x48000400

0800117c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001180:	4b22      	ldr	r3, [pc, #136]	@ (800120c <MX_USART2_UART_Init+0x90>)
 8001182:	4a23      	ldr	r2, [pc, #140]	@ (8001210 <MX_USART2_UART_Init+0x94>)
 8001184:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001186:	4b21      	ldr	r3, [pc, #132]	@ (800120c <MX_USART2_UART_Init+0x90>)
 8001188:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800118c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800118e:	4b1f      	ldr	r3, [pc, #124]	@ (800120c <MX_USART2_UART_Init+0x90>)
 8001190:	2200      	movs	r2, #0
 8001192:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001194:	4b1d      	ldr	r3, [pc, #116]	@ (800120c <MX_USART2_UART_Init+0x90>)
 8001196:	2200      	movs	r2, #0
 8001198:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800119a:	4b1c      	ldr	r3, [pc, #112]	@ (800120c <MX_USART2_UART_Init+0x90>)
 800119c:	2200      	movs	r2, #0
 800119e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80011a0:	4b1a      	ldr	r3, [pc, #104]	@ (800120c <MX_USART2_UART_Init+0x90>)
 80011a2:	220c      	movs	r2, #12
 80011a4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011a6:	4b19      	ldr	r3, [pc, #100]	@ (800120c <MX_USART2_UART_Init+0x90>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80011ac:	4b17      	ldr	r3, [pc, #92]	@ (800120c <MX_USART2_UART_Init+0x90>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011b2:	4b16      	ldr	r3, [pc, #88]	@ (800120c <MX_USART2_UART_Init+0x90>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80011b8:	4b14      	ldr	r3, [pc, #80]	@ (800120c <MX_USART2_UART_Init+0x90>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011be:	4b13      	ldr	r3, [pc, #76]	@ (800120c <MX_USART2_UART_Init+0x90>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80011c4:	4811      	ldr	r0, [pc, #68]	@ (800120c <MX_USART2_UART_Init+0x90>)
 80011c6:	f004 fe77 	bl	8005eb8 <HAL_UART_Init>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d001      	beq.n	80011d4 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80011d0:	f7ff fc3f 	bl	8000a52 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011d4:	2100      	movs	r1, #0
 80011d6:	480d      	ldr	r0, [pc, #52]	@ (800120c <MX_USART2_UART_Init+0x90>)
 80011d8:	f005 fbe2 	bl	80069a0 <HAL_UARTEx_SetTxFifoThreshold>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d001      	beq.n	80011e6 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80011e2:	f7ff fc36 	bl	8000a52 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011e6:	2100      	movs	r1, #0
 80011e8:	4808      	ldr	r0, [pc, #32]	@ (800120c <MX_USART2_UART_Init+0x90>)
 80011ea:	f005 fc17 	bl	8006a1c <HAL_UARTEx_SetRxFifoThreshold>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d001      	beq.n	80011f8 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80011f4:	f7ff fc2d 	bl	8000a52 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80011f8:	4804      	ldr	r0, [pc, #16]	@ (800120c <MX_USART2_UART_Init+0x90>)
 80011fa:	f005 fb98 	bl	800692e <HAL_UARTEx_DisableFifoMode>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d001      	beq.n	8001208 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001204:	f7ff fc25 	bl	8000a52 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001208:	bf00      	nop
 800120a:	bd80      	pop	{r7, pc}
 800120c:	20000310 	.word	0x20000310
 8001210:	40004400 	.word	0x40004400

08001214 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b09a      	sub	sp, #104	@ 0x68
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800121c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001220:	2200      	movs	r2, #0
 8001222:	601a      	str	r2, [r3, #0]
 8001224:	605a      	str	r2, [r3, #4]
 8001226:	609a      	str	r2, [r3, #8]
 8001228:	60da      	str	r2, [r3, #12]
 800122a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800122c:	f107 0310 	add.w	r3, r7, #16
 8001230:	2244      	movs	r2, #68	@ 0x44
 8001232:	2100      	movs	r1, #0
 8001234:	4618      	mov	r0, r3
 8001236:	f005 fd43 	bl	8006cc0 <memset>
  if(uartHandle->Instance==USART2)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	4a1f      	ldr	r2, [pc, #124]	@ (80012bc <HAL_UART_MspInit+0xa8>)
 8001240:	4293      	cmp	r3, r2
 8001242:	d136      	bne.n	80012b2 <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001244:	2302      	movs	r3, #2
 8001246:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001248:	2300      	movs	r3, #0
 800124a:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800124c:	f107 0310 	add.w	r3, r7, #16
 8001250:	4618      	mov	r0, r3
 8001252:	f003 fa81 	bl	8004758 <HAL_RCCEx_PeriphCLKConfig>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d001      	beq.n	8001260 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800125c:	f7ff fbf9 	bl	8000a52 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001260:	4b17      	ldr	r3, [pc, #92]	@ (80012c0 <HAL_UART_MspInit+0xac>)
 8001262:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001264:	4a16      	ldr	r2, [pc, #88]	@ (80012c0 <HAL_UART_MspInit+0xac>)
 8001266:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800126a:	6593      	str	r3, [r2, #88]	@ 0x58
 800126c:	4b14      	ldr	r3, [pc, #80]	@ (80012c0 <HAL_UART_MspInit+0xac>)
 800126e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001270:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001274:	60fb      	str	r3, [r7, #12]
 8001276:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001278:	4b11      	ldr	r3, [pc, #68]	@ (80012c0 <HAL_UART_MspInit+0xac>)
 800127a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800127c:	4a10      	ldr	r2, [pc, #64]	@ (80012c0 <HAL_UART_MspInit+0xac>)
 800127e:	f043 0301 	orr.w	r3, r3, #1
 8001282:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001284:	4b0e      	ldr	r3, [pc, #56]	@ (80012c0 <HAL_UART_MspInit+0xac>)
 8001286:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001288:	f003 0301 	and.w	r3, r3, #1
 800128c:	60bb      	str	r3, [r7, #8]
 800128e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8001290:	230c      	movs	r3, #12
 8001292:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001294:	2302      	movs	r3, #2
 8001296:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001298:	2300      	movs	r3, #0
 800129a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800129c:	2300      	movs	r3, #0
 800129e:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80012a0:	2307      	movs	r3, #7
 80012a2:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012a4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80012a8:	4619      	mov	r1, r3
 80012aa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012ae:	f000 fcbd 	bl	8001c2c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80012b2:	bf00      	nop
 80012b4:	3768      	adds	r7, #104	@ 0x68
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	40004400 	.word	0x40004400
 80012c0:	40021000 	.word	0x40021000

080012c4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80012c4:	480d      	ldr	r0, [pc, #52]	@ (80012fc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80012c6:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80012c8:	f7ff fc3c 	bl	8000b44 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012cc:	480c      	ldr	r0, [pc, #48]	@ (8001300 <LoopForever+0x6>)
  ldr r1, =_edata
 80012ce:	490d      	ldr	r1, [pc, #52]	@ (8001304 <LoopForever+0xa>)
  ldr r2, =_sidata
 80012d0:	4a0d      	ldr	r2, [pc, #52]	@ (8001308 <LoopForever+0xe>)
  movs r3, #0
 80012d2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80012d4:	e002      	b.n	80012dc <LoopCopyDataInit>

080012d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012da:	3304      	adds	r3, #4

080012dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012e0:	d3f9      	bcc.n	80012d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012e2:	4a0a      	ldr	r2, [pc, #40]	@ (800130c <LoopForever+0x12>)
  ldr r4, =_ebss
 80012e4:	4c0a      	ldr	r4, [pc, #40]	@ (8001310 <LoopForever+0x16>)
  movs r3, #0
 80012e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012e8:	e001      	b.n	80012ee <LoopFillZerobss>

080012ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012ec:	3204      	adds	r2, #4

080012ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012f0:	d3fb      	bcc.n	80012ea <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 80012f2:	f005 fced 	bl	8006cd0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80012f6:	f7ff fb3b 	bl	8000970 <main>

080012fa <LoopForever>:

LoopForever:
    b LoopForever
 80012fa:	e7fe      	b.n	80012fa <LoopForever>
  ldr   r0, =_estack
 80012fc:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001300:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001304:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001308:	08006d80 	.word	0x08006d80
  ldr r2, =_sbss
 800130c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001310:	200003a8 	.word	0x200003a8

08001314 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001314:	e7fe      	b.n	8001314 <ADC1_2_IRQHandler>

08001316 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001316:	b580      	push	{r7, lr}
 8001318:	b082      	sub	sp, #8
 800131a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800131c:	2300      	movs	r3, #0
 800131e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001320:	2003      	movs	r0, #3
 8001322:	f000 f95b 	bl	80015dc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001326:	2000      	movs	r0, #0
 8001328:	f000 f80e 	bl	8001348 <HAL_InitTick>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d002      	beq.n	8001338 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001332:	2301      	movs	r3, #1
 8001334:	71fb      	strb	r3, [r7, #7]
 8001336:	e001      	b.n	800133c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001338:	f7ff fb92 	bl	8000a60 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800133c:	79fb      	ldrb	r3, [r7, #7]

}
 800133e:	4618      	mov	r0, r3
 8001340:	3708      	adds	r7, #8
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
	...

08001348 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b084      	sub	sp, #16
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001350:	2300      	movs	r3, #0
 8001352:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001354:	4b16      	ldr	r3, [pc, #88]	@ (80013b0 <HAL_InitTick+0x68>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d022      	beq.n	80013a2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800135c:	4b15      	ldr	r3, [pc, #84]	@ (80013b4 <HAL_InitTick+0x6c>)
 800135e:	681a      	ldr	r2, [r3, #0]
 8001360:	4b13      	ldr	r3, [pc, #76]	@ (80013b0 <HAL_InitTick+0x68>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001368:	fbb1 f3f3 	udiv	r3, r1, r3
 800136c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001370:	4618      	mov	r0, r3
 8001372:	f000 f966 	bl	8001642 <HAL_SYSTICK_Config>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d10f      	bne.n	800139c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	2b0f      	cmp	r3, #15
 8001380:	d809      	bhi.n	8001396 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001382:	2200      	movs	r2, #0
 8001384:	6879      	ldr	r1, [r7, #4]
 8001386:	f04f 30ff 	mov.w	r0, #4294967295
 800138a:	f000 f932 	bl	80015f2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800138e:	4a0a      	ldr	r2, [pc, #40]	@ (80013b8 <HAL_InitTick+0x70>)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	6013      	str	r3, [r2, #0]
 8001394:	e007      	b.n	80013a6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001396:	2301      	movs	r3, #1
 8001398:	73fb      	strb	r3, [r7, #15]
 800139a:	e004      	b.n	80013a6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800139c:	2301      	movs	r3, #1
 800139e:	73fb      	strb	r3, [r7, #15]
 80013a0:	e001      	b.n	80013a6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80013a2:	2301      	movs	r3, #1
 80013a4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80013a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80013a8:	4618      	mov	r0, r3
 80013aa:	3710      	adds	r7, #16
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	20000008 	.word	0x20000008
 80013b4:	20000000 	.word	0x20000000
 80013b8:	20000004 	.word	0x20000004

080013bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013c0:	4b05      	ldr	r3, [pc, #20]	@ (80013d8 <HAL_IncTick+0x1c>)
 80013c2:	681a      	ldr	r2, [r3, #0]
 80013c4:	4b05      	ldr	r3, [pc, #20]	@ (80013dc <HAL_IncTick+0x20>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4413      	add	r3, r2
 80013ca:	4a03      	ldr	r2, [pc, #12]	@ (80013d8 <HAL_IncTick+0x1c>)
 80013cc:	6013      	str	r3, [r2, #0]
}
 80013ce:	bf00      	nop
 80013d0:	46bd      	mov	sp, r7
 80013d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d6:	4770      	bx	lr
 80013d8:	200003a4 	.word	0x200003a4
 80013dc:	20000008 	.word	0x20000008

080013e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0
  return uwTick;
 80013e4:	4b03      	ldr	r3, [pc, #12]	@ (80013f4 <HAL_GetTick+0x14>)
 80013e6:	681b      	ldr	r3, [r3, #0]
}
 80013e8:	4618      	mov	r0, r3
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr
 80013f2:	bf00      	nop
 80013f4:	200003a4 	.word	0x200003a4

080013f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b084      	sub	sp, #16
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001400:	f7ff ffee 	bl	80013e0 <HAL_GetTick>
 8001404:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001410:	d004      	beq.n	800141c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001412:	4b09      	ldr	r3, [pc, #36]	@ (8001438 <HAL_Delay+0x40>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	68fa      	ldr	r2, [r7, #12]
 8001418:	4413      	add	r3, r2
 800141a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800141c:	bf00      	nop
 800141e:	f7ff ffdf 	bl	80013e0 <HAL_GetTick>
 8001422:	4602      	mov	r2, r0
 8001424:	68bb      	ldr	r3, [r7, #8]
 8001426:	1ad3      	subs	r3, r2, r3
 8001428:	68fa      	ldr	r2, [r7, #12]
 800142a:	429a      	cmp	r2, r3
 800142c:	d8f7      	bhi.n	800141e <HAL_Delay+0x26>
  {
  }
}
 800142e:	bf00      	nop
 8001430:	bf00      	nop
 8001432:	3710      	adds	r7, #16
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}
 8001438:	20000008 	.word	0x20000008

0800143c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800143c:	b480      	push	{r7}
 800143e:	b085      	sub	sp, #20
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	f003 0307 	and.w	r3, r3, #7
 800144a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800144c:	4b0c      	ldr	r3, [pc, #48]	@ (8001480 <__NVIC_SetPriorityGrouping+0x44>)
 800144e:	68db      	ldr	r3, [r3, #12]
 8001450:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001452:	68ba      	ldr	r2, [r7, #8]
 8001454:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001458:	4013      	ands	r3, r2
 800145a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001460:	68bb      	ldr	r3, [r7, #8]
 8001462:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001464:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001468:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800146c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800146e:	4a04      	ldr	r2, [pc, #16]	@ (8001480 <__NVIC_SetPriorityGrouping+0x44>)
 8001470:	68bb      	ldr	r3, [r7, #8]
 8001472:	60d3      	str	r3, [r2, #12]
}
 8001474:	bf00      	nop
 8001476:	3714      	adds	r7, #20
 8001478:	46bd      	mov	sp, r7
 800147a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147e:	4770      	bx	lr
 8001480:	e000ed00 	.word	0xe000ed00

08001484 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001488:	4b04      	ldr	r3, [pc, #16]	@ (800149c <__NVIC_GetPriorityGrouping+0x18>)
 800148a:	68db      	ldr	r3, [r3, #12]
 800148c:	0a1b      	lsrs	r3, r3, #8
 800148e:	f003 0307 	and.w	r3, r3, #7
}
 8001492:	4618      	mov	r0, r3
 8001494:	46bd      	mov	sp, r7
 8001496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149a:	4770      	bx	lr
 800149c:	e000ed00 	.word	0xe000ed00

080014a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014a0:	b480      	push	{r7}
 80014a2:	b083      	sub	sp, #12
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	4603      	mov	r3, r0
 80014a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	db0b      	blt.n	80014ca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014b2:	79fb      	ldrb	r3, [r7, #7]
 80014b4:	f003 021f 	and.w	r2, r3, #31
 80014b8:	4907      	ldr	r1, [pc, #28]	@ (80014d8 <__NVIC_EnableIRQ+0x38>)
 80014ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014be:	095b      	lsrs	r3, r3, #5
 80014c0:	2001      	movs	r0, #1
 80014c2:	fa00 f202 	lsl.w	r2, r0, r2
 80014c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80014ca:	bf00      	nop
 80014cc:	370c      	adds	r7, #12
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr
 80014d6:	bf00      	nop
 80014d8:	e000e100 	.word	0xe000e100

080014dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014dc:	b480      	push	{r7}
 80014de:	b083      	sub	sp, #12
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	4603      	mov	r3, r0
 80014e4:	6039      	str	r1, [r7, #0]
 80014e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	db0a      	blt.n	8001506 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	b2da      	uxtb	r2, r3
 80014f4:	490c      	ldr	r1, [pc, #48]	@ (8001528 <__NVIC_SetPriority+0x4c>)
 80014f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014fa:	0112      	lsls	r2, r2, #4
 80014fc:	b2d2      	uxtb	r2, r2
 80014fe:	440b      	add	r3, r1
 8001500:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001504:	e00a      	b.n	800151c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	b2da      	uxtb	r2, r3
 800150a:	4908      	ldr	r1, [pc, #32]	@ (800152c <__NVIC_SetPriority+0x50>)
 800150c:	79fb      	ldrb	r3, [r7, #7]
 800150e:	f003 030f 	and.w	r3, r3, #15
 8001512:	3b04      	subs	r3, #4
 8001514:	0112      	lsls	r2, r2, #4
 8001516:	b2d2      	uxtb	r2, r2
 8001518:	440b      	add	r3, r1
 800151a:	761a      	strb	r2, [r3, #24]
}
 800151c:	bf00      	nop
 800151e:	370c      	adds	r7, #12
 8001520:	46bd      	mov	sp, r7
 8001522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001526:	4770      	bx	lr
 8001528:	e000e100 	.word	0xe000e100
 800152c:	e000ed00 	.word	0xe000ed00

08001530 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001530:	b480      	push	{r7}
 8001532:	b089      	sub	sp, #36	@ 0x24
 8001534:	af00      	add	r7, sp, #0
 8001536:	60f8      	str	r0, [r7, #12]
 8001538:	60b9      	str	r1, [r7, #8]
 800153a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	f003 0307 	and.w	r3, r3, #7
 8001542:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001544:	69fb      	ldr	r3, [r7, #28]
 8001546:	f1c3 0307 	rsb	r3, r3, #7
 800154a:	2b04      	cmp	r3, #4
 800154c:	bf28      	it	cs
 800154e:	2304      	movcs	r3, #4
 8001550:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001552:	69fb      	ldr	r3, [r7, #28]
 8001554:	3304      	adds	r3, #4
 8001556:	2b06      	cmp	r3, #6
 8001558:	d902      	bls.n	8001560 <NVIC_EncodePriority+0x30>
 800155a:	69fb      	ldr	r3, [r7, #28]
 800155c:	3b03      	subs	r3, #3
 800155e:	e000      	b.n	8001562 <NVIC_EncodePriority+0x32>
 8001560:	2300      	movs	r3, #0
 8001562:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001564:	f04f 32ff 	mov.w	r2, #4294967295
 8001568:	69bb      	ldr	r3, [r7, #24]
 800156a:	fa02 f303 	lsl.w	r3, r2, r3
 800156e:	43da      	mvns	r2, r3
 8001570:	68bb      	ldr	r3, [r7, #8]
 8001572:	401a      	ands	r2, r3
 8001574:	697b      	ldr	r3, [r7, #20]
 8001576:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001578:	f04f 31ff 	mov.w	r1, #4294967295
 800157c:	697b      	ldr	r3, [r7, #20]
 800157e:	fa01 f303 	lsl.w	r3, r1, r3
 8001582:	43d9      	mvns	r1, r3
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001588:	4313      	orrs	r3, r2
         );
}
 800158a:	4618      	mov	r0, r3
 800158c:	3724      	adds	r7, #36	@ 0x24
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr
	...

08001598 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b082      	sub	sp, #8
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	3b01      	subs	r3, #1
 80015a4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80015a8:	d301      	bcc.n	80015ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015aa:	2301      	movs	r3, #1
 80015ac:	e00f      	b.n	80015ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015ae:	4a0a      	ldr	r2, [pc, #40]	@ (80015d8 <SysTick_Config+0x40>)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	3b01      	subs	r3, #1
 80015b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015b6:	210f      	movs	r1, #15
 80015b8:	f04f 30ff 	mov.w	r0, #4294967295
 80015bc:	f7ff ff8e 	bl	80014dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015c0:	4b05      	ldr	r3, [pc, #20]	@ (80015d8 <SysTick_Config+0x40>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015c6:	4b04      	ldr	r3, [pc, #16]	@ (80015d8 <SysTick_Config+0x40>)
 80015c8:	2207      	movs	r2, #7
 80015ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015cc:	2300      	movs	r3, #0
}
 80015ce:	4618      	mov	r0, r3
 80015d0:	3708      	adds	r7, #8
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	e000e010 	.word	0xe000e010

080015dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b082      	sub	sp, #8
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015e4:	6878      	ldr	r0, [r7, #4]
 80015e6:	f7ff ff29 	bl	800143c <__NVIC_SetPriorityGrouping>
}
 80015ea:	bf00      	nop
 80015ec:	3708      	adds	r7, #8
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}

080015f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015f2:	b580      	push	{r7, lr}
 80015f4:	b086      	sub	sp, #24
 80015f6:	af00      	add	r7, sp, #0
 80015f8:	4603      	mov	r3, r0
 80015fa:	60b9      	str	r1, [r7, #8]
 80015fc:	607a      	str	r2, [r7, #4]
 80015fe:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001600:	f7ff ff40 	bl	8001484 <__NVIC_GetPriorityGrouping>
 8001604:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001606:	687a      	ldr	r2, [r7, #4]
 8001608:	68b9      	ldr	r1, [r7, #8]
 800160a:	6978      	ldr	r0, [r7, #20]
 800160c:	f7ff ff90 	bl	8001530 <NVIC_EncodePriority>
 8001610:	4602      	mov	r2, r0
 8001612:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001616:	4611      	mov	r1, r2
 8001618:	4618      	mov	r0, r3
 800161a:	f7ff ff5f 	bl	80014dc <__NVIC_SetPriority>
}
 800161e:	bf00      	nop
 8001620:	3718      	adds	r7, #24
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}

08001626 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001626:	b580      	push	{r7, lr}
 8001628:	b082      	sub	sp, #8
 800162a:	af00      	add	r7, sp, #0
 800162c:	4603      	mov	r3, r0
 800162e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001630:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001634:	4618      	mov	r0, r3
 8001636:	f7ff ff33 	bl	80014a0 <__NVIC_EnableIRQ>
}
 800163a:	bf00      	nop
 800163c:	3708      	adds	r7, #8
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}

08001642 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001642:	b580      	push	{r7, lr}
 8001644:	b082      	sub	sp, #8
 8001646:	af00      	add	r7, sp, #0
 8001648:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800164a:	6878      	ldr	r0, [r7, #4]
 800164c:	f7ff ffa4 	bl	8001598 <SysTick_Config>
 8001650:	4603      	mov	r3, r0
}
 8001652:	4618      	mov	r0, r3
 8001654:	3708      	adds	r7, #8
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
	...

0800165c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b084      	sub	sp, #16
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d101      	bne.n	800166e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800166a:	2301      	movs	r3, #1
 800166c:	e08d      	b.n	800178a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	461a      	mov	r2, r3
 8001674:	4b47      	ldr	r3, [pc, #284]	@ (8001794 <HAL_DMA_Init+0x138>)
 8001676:	429a      	cmp	r2, r3
 8001678:	d80f      	bhi.n	800169a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	461a      	mov	r2, r3
 8001680:	4b45      	ldr	r3, [pc, #276]	@ (8001798 <HAL_DMA_Init+0x13c>)
 8001682:	4413      	add	r3, r2
 8001684:	4a45      	ldr	r2, [pc, #276]	@ (800179c <HAL_DMA_Init+0x140>)
 8001686:	fba2 2303 	umull	r2, r3, r2, r3
 800168a:	091b      	lsrs	r3, r3, #4
 800168c:	009a      	lsls	r2, r3, #2
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	4a42      	ldr	r2, [pc, #264]	@ (80017a0 <HAL_DMA_Init+0x144>)
 8001696:	641a      	str	r2, [r3, #64]	@ 0x40
 8001698:	e00e      	b.n	80016b8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	461a      	mov	r2, r3
 80016a0:	4b40      	ldr	r3, [pc, #256]	@ (80017a4 <HAL_DMA_Init+0x148>)
 80016a2:	4413      	add	r3, r2
 80016a4:	4a3d      	ldr	r2, [pc, #244]	@ (800179c <HAL_DMA_Init+0x140>)
 80016a6:	fba2 2303 	umull	r2, r3, r2, r3
 80016aa:	091b      	lsrs	r3, r3, #4
 80016ac:	009a      	lsls	r2, r3, #2
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	4a3c      	ldr	r2, [pc, #240]	@ (80017a8 <HAL_DMA_Init+0x14c>)
 80016b6:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2202      	movs	r2, #2
 80016bc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80016ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80016d2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80016dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	691b      	ldr	r3, [r3, #16]
 80016e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	699b      	ldr	r3, [r3, #24]
 80016ee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016f4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6a1b      	ldr	r3, [r3, #32]
 80016fa:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80016fc:	68fa      	ldr	r2, [r7, #12]
 80016fe:	4313      	orrs	r3, r2
 8001700:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	68fa      	ldr	r2, [r7, #12]
 8001708:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800170a:	6878      	ldr	r0, [r7, #4]
 800170c:	f000 fa2c 	bl	8001b68 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	689b      	ldr	r3, [r3, #8]
 8001714:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001718:	d102      	bne.n	8001720 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2200      	movs	r2, #0
 800171e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	685a      	ldr	r2, [r3, #4]
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001728:	b2d2      	uxtb	r2, r2
 800172a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001730:	687a      	ldr	r2, [r7, #4]
 8001732:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001734:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d010      	beq.n	8001760 <HAL_DMA_Init+0x104>
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	2b04      	cmp	r3, #4
 8001744:	d80c      	bhi.n	8001760 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001746:	6878      	ldr	r0, [r7, #4]
 8001748:	f000 fa4c 	bl	8001be4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001750:	2200      	movs	r2, #0
 8001752:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001758:	687a      	ldr	r2, [r7, #4]
 800175a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800175c:	605a      	str	r2, [r3, #4]
 800175e:	e008      	b.n	8001772 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	2200      	movs	r2, #0
 8001764:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	2200      	movs	r2, #0
 800176a:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2200      	movs	r2, #0
 8001770:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	2200      	movs	r2, #0
 8001776:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	2201      	movs	r2, #1
 800177c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	2200      	movs	r2, #0
 8001784:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8001788:	2300      	movs	r3, #0
}
 800178a:	4618      	mov	r0, r3
 800178c:	3710      	adds	r7, #16
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	40020407 	.word	0x40020407
 8001798:	bffdfff8 	.word	0xbffdfff8
 800179c:	cccccccd 	.word	0xcccccccd
 80017a0:	40020000 	.word	0x40020000
 80017a4:	bffdfbf8 	.word	0xbffdfbf8
 80017a8:	40020400 	.word	0x40020400

080017ac <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b086      	sub	sp, #24
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	60f8      	str	r0, [r7, #12]
 80017b4:	60b9      	str	r1, [r7, #8]
 80017b6:	607a      	str	r2, [r7, #4]
 80017b8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80017ba:	2300      	movs	r3, #0
 80017bc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80017c4:	2b01      	cmp	r3, #1
 80017c6:	d101      	bne.n	80017cc <HAL_DMA_Start_IT+0x20>
 80017c8:	2302      	movs	r3, #2
 80017ca:	e066      	b.n	800189a <HAL_DMA_Start_IT+0xee>
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	2201      	movs	r2, #1
 80017d0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80017da:	b2db      	uxtb	r3, r3
 80017dc:	2b01      	cmp	r3, #1
 80017de:	d155      	bne.n	800188c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	2202      	movs	r2, #2
 80017e4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	2200      	movs	r2, #0
 80017ec:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	681a      	ldr	r2, [r3, #0]
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f022 0201 	bic.w	r2, r2, #1
 80017fc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	687a      	ldr	r2, [r7, #4]
 8001802:	68b9      	ldr	r1, [r7, #8]
 8001804:	68f8      	ldr	r0, [r7, #12]
 8001806:	f000 f970 	bl	8001aea <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800180e:	2b00      	cmp	r3, #0
 8001810:	d008      	beq.n	8001824 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	681a      	ldr	r2, [r3, #0]
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f042 020e 	orr.w	r2, r2, #14
 8001820:	601a      	str	r2, [r3, #0]
 8001822:	e00f      	b.n	8001844 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	681a      	ldr	r2, [r3, #0]
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f022 0204 	bic.w	r2, r2, #4
 8001832:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	681a      	ldr	r2, [r3, #0]
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f042 020a 	orr.w	r2, r2, #10
 8001842:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800184e:	2b00      	cmp	r3, #0
 8001850:	d007      	beq.n	8001862 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001856:	681a      	ldr	r2, [r3, #0]
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800185c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001860:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001866:	2b00      	cmp	r3, #0
 8001868:	d007      	beq.n	800187a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800186e:	681a      	ldr	r2, [r3, #0]
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001874:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001878:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	681a      	ldr	r2, [r3, #0]
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f042 0201 	orr.w	r2, r2, #1
 8001888:	601a      	str	r2, [r3, #0]
 800188a:	e005      	b.n	8001898 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	2200      	movs	r2, #0
 8001890:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001894:	2302      	movs	r3, #2
 8001896:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001898:	7dfb      	ldrb	r3, [r7, #23]
}
 800189a:	4618      	mov	r0, r3
 800189c:	3718      	adds	r7, #24
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}

080018a2 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80018a2:	b580      	push	{r7, lr}
 80018a4:	b084      	sub	sp, #16
 80018a6:	af00      	add	r7, sp, #0
 80018a8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80018aa:	2300      	movs	r3, #0
 80018ac:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80018b4:	b2db      	uxtb	r3, r3
 80018b6:	2b02      	cmp	r3, #2
 80018b8:	d00d      	beq.n	80018d6 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	2204      	movs	r2, #4
 80018be:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2201      	movs	r2, #1
 80018c4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2200      	movs	r2, #0
 80018cc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 80018d0:	2301      	movs	r3, #1
 80018d2:	73fb      	strb	r3, [r7, #15]
 80018d4:	e047      	b.n	8001966 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	681a      	ldr	r2, [r3, #0]
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f022 020e 	bic.w	r2, r2, #14
 80018e4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	681a      	ldr	r2, [r3, #0]
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f022 0201 	bic.w	r2, r2, #1
 80018f4:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80018fa:	681a      	ldr	r2, [r3, #0]
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001900:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001904:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800190a:	f003 021f 	and.w	r2, r3, #31
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001912:	2101      	movs	r1, #1
 8001914:	fa01 f202 	lsl.w	r2, r1, r2
 8001918:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800191e:	687a      	ldr	r2, [r7, #4]
 8001920:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001922:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001928:	2b00      	cmp	r3, #0
 800192a:	d00c      	beq.n	8001946 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001930:	681a      	ldr	r2, [r3, #0]
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001936:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800193a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001940:	687a      	ldr	r2, [r7, #4]
 8001942:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001944:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2201      	movs	r2, #1
 800194a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	2200      	movs	r2, #0
 8001952:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800195a:	2b00      	cmp	r3, #0
 800195c:	d003      	beq.n	8001966 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001962:	6878      	ldr	r0, [r7, #4]
 8001964:	4798      	blx	r3
    }
  }
  return status;
 8001966:	7bfb      	ldrb	r3, [r7, #15]
}
 8001968:	4618      	mov	r0, r3
 800196a:	3710      	adds	r7, #16
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}

08001970 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b084      	sub	sp, #16
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800198c:	f003 031f 	and.w	r3, r3, #31
 8001990:	2204      	movs	r2, #4
 8001992:	409a      	lsls	r2, r3
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	4013      	ands	r3, r2
 8001998:	2b00      	cmp	r3, #0
 800199a:	d026      	beq.n	80019ea <HAL_DMA_IRQHandler+0x7a>
 800199c:	68bb      	ldr	r3, [r7, #8]
 800199e:	f003 0304 	and.w	r3, r3, #4
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d021      	beq.n	80019ea <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f003 0320 	and.w	r3, r3, #32
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d107      	bne.n	80019c4 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	681a      	ldr	r2, [r3, #0]
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f022 0204 	bic.w	r2, r2, #4
 80019c2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019c8:	f003 021f 	and.w	r2, r3, #31
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019d0:	2104      	movs	r1, #4
 80019d2:	fa01 f202 	lsl.w	r2, r1, r2
 80019d6:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d071      	beq.n	8001ac4 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019e4:	6878      	ldr	r0, [r7, #4]
 80019e6:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80019e8:	e06c      	b.n	8001ac4 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019ee:	f003 031f 	and.w	r3, r3, #31
 80019f2:	2202      	movs	r2, #2
 80019f4:	409a      	lsls	r2, r3
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	4013      	ands	r3, r2
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d02e      	beq.n	8001a5c <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80019fe:	68bb      	ldr	r3, [r7, #8]
 8001a00:	f003 0302 	and.w	r3, r3, #2
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d029      	beq.n	8001a5c <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f003 0320 	and.w	r3, r3, #32
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d10b      	bne.n	8001a2e <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	681a      	ldr	r2, [r3, #0]
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f022 020a 	bic.w	r2, r2, #10
 8001a24:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2201      	movs	r2, #1
 8001a2a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a32:	f003 021f 	and.w	r2, r3, #31
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a3a:	2102      	movs	r1, #2
 8001a3c:	fa01 f202 	lsl.w	r2, r1, r2
 8001a40:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	2200      	movs	r2, #0
 8001a46:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d038      	beq.n	8001ac4 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a56:	6878      	ldr	r0, [r7, #4]
 8001a58:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001a5a:	e033      	b.n	8001ac4 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a60:	f003 031f 	and.w	r3, r3, #31
 8001a64:	2208      	movs	r2, #8
 8001a66:	409a      	lsls	r2, r3
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	4013      	ands	r3, r2
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d02a      	beq.n	8001ac6 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8001a70:	68bb      	ldr	r3, [r7, #8]
 8001a72:	f003 0308 	and.w	r3, r3, #8
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d025      	beq.n	8001ac6 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	681a      	ldr	r2, [r3, #0]
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f022 020e 	bic.w	r2, r2, #14
 8001a88:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a8e:	f003 021f 	and.w	r2, r3, #31
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a96:	2101      	movs	r1, #1
 8001a98:	fa01 f202 	lsl.w	r2, r1, r2
 8001a9c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2201      	movs	r2, #1
 8001aa8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2200      	movs	r2, #0
 8001ab0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d004      	beq.n	8001ac6 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ac0:	6878      	ldr	r0, [r7, #4]
 8001ac2:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001ac4:	bf00      	nop
 8001ac6:	bf00      	nop
}
 8001ac8:	3710      	adds	r7, #16
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}

08001ace <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001ace:	b480      	push	{r7}
 8001ad0:	b083      	sub	sp, #12
 8001ad2:	af00      	add	r7, sp, #0
 8001ad4:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001adc:	b2db      	uxtb	r3, r3
}
 8001ade:	4618      	mov	r0, r3
 8001ae0:	370c      	adds	r7, #12
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr

08001aea <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001aea:	b480      	push	{r7}
 8001aec:	b085      	sub	sp, #20
 8001aee:	af00      	add	r7, sp, #0
 8001af0:	60f8      	str	r0, [r7, #12]
 8001af2:	60b9      	str	r1, [r7, #8]
 8001af4:	607a      	str	r2, [r7, #4]
 8001af6:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001afc:	68fa      	ldr	r2, [r7, #12]
 8001afe:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001b00:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d004      	beq.n	8001b14 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b0e:	68fa      	ldr	r2, [r7, #12]
 8001b10:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001b12:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b18:	f003 021f 	and.w	r2, r3, #31
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b20:	2101      	movs	r1, #1
 8001b22:	fa01 f202 	lsl.w	r2, r1, r2
 8001b26:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	683a      	ldr	r2, [r7, #0]
 8001b2e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	689b      	ldr	r3, [r3, #8]
 8001b34:	2b10      	cmp	r3, #16
 8001b36:	d108      	bne.n	8001b4a <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	687a      	ldr	r2, [r7, #4]
 8001b3e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	68ba      	ldr	r2, [r7, #8]
 8001b46:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001b48:	e007      	b.n	8001b5a <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	68ba      	ldr	r2, [r7, #8]
 8001b50:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	687a      	ldr	r2, [r7, #4]
 8001b58:	60da      	str	r2, [r3, #12]
}
 8001b5a:	bf00      	nop
 8001b5c:	3714      	adds	r7, #20
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b64:	4770      	bx	lr
	...

08001b68 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b087      	sub	sp, #28
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	461a      	mov	r2, r3
 8001b76:	4b16      	ldr	r3, [pc, #88]	@ (8001bd0 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8001b78:	429a      	cmp	r2, r3
 8001b7a:	d802      	bhi.n	8001b82 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8001b7c:	4b15      	ldr	r3, [pc, #84]	@ (8001bd4 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8001b7e:	617b      	str	r3, [r7, #20]
 8001b80:	e001      	b.n	8001b86 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8001b82:	4b15      	ldr	r3, [pc, #84]	@ (8001bd8 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8001b84:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8001b86:	697b      	ldr	r3, [r7, #20]
 8001b88:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	b2db      	uxtb	r3, r3
 8001b90:	3b08      	subs	r3, #8
 8001b92:	4a12      	ldr	r2, [pc, #72]	@ (8001bdc <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8001b94:	fba2 2303 	umull	r2, r3, r2, r3
 8001b98:	091b      	lsrs	r3, r3, #4
 8001b9a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ba0:	089b      	lsrs	r3, r3, #2
 8001ba2:	009a      	lsls	r2, r3, #2
 8001ba4:	693b      	ldr	r3, [r7, #16]
 8001ba6:	4413      	add	r3, r2
 8001ba8:	461a      	mov	r2, r3
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	4a0b      	ldr	r2, [pc, #44]	@ (8001be0 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8001bb2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	f003 031f 	and.w	r3, r3, #31
 8001bba:	2201      	movs	r2, #1
 8001bbc:	409a      	lsls	r2, r3
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8001bc2:	bf00      	nop
 8001bc4:	371c      	adds	r7, #28
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bcc:	4770      	bx	lr
 8001bce:	bf00      	nop
 8001bd0:	40020407 	.word	0x40020407
 8001bd4:	40020800 	.word	0x40020800
 8001bd8:	40020820 	.word	0x40020820
 8001bdc:	cccccccd 	.word	0xcccccccd
 8001be0:	40020880 	.word	0x40020880

08001be4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001be4:	b480      	push	{r7}
 8001be6:	b085      	sub	sp, #20
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	b2db      	uxtb	r3, r3
 8001bf2:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001bf4:	68fa      	ldr	r2, [r7, #12]
 8001bf6:	4b0b      	ldr	r3, [pc, #44]	@ (8001c24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001bf8:	4413      	add	r3, r2
 8001bfa:	009b      	lsls	r3, r3, #2
 8001bfc:	461a      	mov	r2, r3
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	4a08      	ldr	r2, [pc, #32]	@ (8001c28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001c06:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	3b01      	subs	r3, #1
 8001c0c:	f003 031f 	and.w	r3, r3, #31
 8001c10:	2201      	movs	r2, #1
 8001c12:	409a      	lsls	r2, r3
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8001c18:	bf00      	nop
 8001c1a:	3714      	adds	r7, #20
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c22:	4770      	bx	lr
 8001c24:	1000823f 	.word	0x1000823f
 8001c28:	40020940 	.word	0x40020940

08001c2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b087      	sub	sp, #28
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
 8001c34:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001c36:	2300      	movs	r3, #0
 8001c38:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001c3a:	e15a      	b.n	8001ef2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	681a      	ldr	r2, [r3, #0]
 8001c40:	2101      	movs	r1, #1
 8001c42:	697b      	ldr	r3, [r7, #20]
 8001c44:	fa01 f303 	lsl.w	r3, r1, r3
 8001c48:	4013      	ands	r3, r2
 8001c4a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	f000 814c 	beq.w	8001eec <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	f003 0303 	and.w	r3, r3, #3
 8001c5c:	2b01      	cmp	r3, #1
 8001c5e:	d005      	beq.n	8001c6c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001c68:	2b02      	cmp	r3, #2
 8001c6a:	d130      	bne.n	8001cce <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	689b      	ldr	r3, [r3, #8]
 8001c70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001c72:	697b      	ldr	r3, [r7, #20]
 8001c74:	005b      	lsls	r3, r3, #1
 8001c76:	2203      	movs	r2, #3
 8001c78:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7c:	43db      	mvns	r3, r3
 8001c7e:	693a      	ldr	r2, [r7, #16]
 8001c80:	4013      	ands	r3, r2
 8001c82:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	68da      	ldr	r2, [r3, #12]
 8001c88:	697b      	ldr	r3, [r7, #20]
 8001c8a:	005b      	lsls	r3, r3, #1
 8001c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c90:	693a      	ldr	r2, [r7, #16]
 8001c92:	4313      	orrs	r3, r2
 8001c94:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	693a      	ldr	r2, [r7, #16]
 8001c9a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8001caa:	43db      	mvns	r3, r3
 8001cac:	693a      	ldr	r2, [r7, #16]
 8001cae:	4013      	ands	r3, r2
 8001cb0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	091b      	lsrs	r3, r3, #4
 8001cb8:	f003 0201 	and.w	r2, r3, #1
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc2:	693a      	ldr	r2, [r7, #16]
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	693a      	ldr	r2, [r7, #16]
 8001ccc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	f003 0303 	and.w	r3, r3, #3
 8001cd6:	2b03      	cmp	r3, #3
 8001cd8:	d017      	beq.n	8001d0a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	68db      	ldr	r3, [r3, #12]
 8001cde:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001ce0:	697b      	ldr	r3, [r7, #20]
 8001ce2:	005b      	lsls	r3, r3, #1
 8001ce4:	2203      	movs	r2, #3
 8001ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cea:	43db      	mvns	r3, r3
 8001cec:	693a      	ldr	r2, [r7, #16]
 8001cee:	4013      	ands	r3, r2
 8001cf0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	689a      	ldr	r2, [r3, #8]
 8001cf6:	697b      	ldr	r3, [r7, #20]
 8001cf8:	005b      	lsls	r3, r3, #1
 8001cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfe:	693a      	ldr	r2, [r7, #16]
 8001d00:	4313      	orrs	r3, r2
 8001d02:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	693a      	ldr	r2, [r7, #16]
 8001d08:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	f003 0303 	and.w	r3, r3, #3
 8001d12:	2b02      	cmp	r3, #2
 8001d14:	d123      	bne.n	8001d5e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d16:	697b      	ldr	r3, [r7, #20]
 8001d18:	08da      	lsrs	r2, r3, #3
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	3208      	adds	r2, #8
 8001d1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d22:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	f003 0307 	and.w	r3, r3, #7
 8001d2a:	009b      	lsls	r3, r3, #2
 8001d2c:	220f      	movs	r2, #15
 8001d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d32:	43db      	mvns	r3, r3
 8001d34:	693a      	ldr	r2, [r7, #16]
 8001d36:	4013      	ands	r3, r2
 8001d38:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	691a      	ldr	r2, [r3, #16]
 8001d3e:	697b      	ldr	r3, [r7, #20]
 8001d40:	f003 0307 	and.w	r3, r3, #7
 8001d44:	009b      	lsls	r3, r3, #2
 8001d46:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4a:	693a      	ldr	r2, [r7, #16]
 8001d4c:	4313      	orrs	r3, r2
 8001d4e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001d50:	697b      	ldr	r3, [r7, #20]
 8001d52:	08da      	lsrs	r2, r3, #3
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	3208      	adds	r2, #8
 8001d58:	6939      	ldr	r1, [r7, #16]
 8001d5a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001d64:	697b      	ldr	r3, [r7, #20]
 8001d66:	005b      	lsls	r3, r3, #1
 8001d68:	2203      	movs	r2, #3
 8001d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6e:	43db      	mvns	r3, r3
 8001d70:	693a      	ldr	r2, [r7, #16]
 8001d72:	4013      	ands	r3, r2
 8001d74:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	f003 0203 	and.w	r2, r3, #3
 8001d7e:	697b      	ldr	r3, [r7, #20]
 8001d80:	005b      	lsls	r3, r3, #1
 8001d82:	fa02 f303 	lsl.w	r3, r2, r3
 8001d86:	693a      	ldr	r2, [r7, #16]
 8001d88:	4313      	orrs	r3, r2
 8001d8a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	693a      	ldr	r2, [r7, #16]
 8001d90:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	f000 80a6 	beq.w	8001eec <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001da0:	4b5b      	ldr	r3, [pc, #364]	@ (8001f10 <HAL_GPIO_Init+0x2e4>)
 8001da2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001da4:	4a5a      	ldr	r2, [pc, #360]	@ (8001f10 <HAL_GPIO_Init+0x2e4>)
 8001da6:	f043 0301 	orr.w	r3, r3, #1
 8001daa:	6613      	str	r3, [r2, #96]	@ 0x60
 8001dac:	4b58      	ldr	r3, [pc, #352]	@ (8001f10 <HAL_GPIO_Init+0x2e4>)
 8001dae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001db0:	f003 0301 	and.w	r3, r3, #1
 8001db4:	60bb      	str	r3, [r7, #8]
 8001db6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001db8:	4a56      	ldr	r2, [pc, #344]	@ (8001f14 <HAL_GPIO_Init+0x2e8>)
 8001dba:	697b      	ldr	r3, [r7, #20]
 8001dbc:	089b      	lsrs	r3, r3, #2
 8001dbe:	3302      	adds	r3, #2
 8001dc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dc4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	f003 0303 	and.w	r3, r3, #3
 8001dcc:	009b      	lsls	r3, r3, #2
 8001dce:	220f      	movs	r2, #15
 8001dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd4:	43db      	mvns	r3, r3
 8001dd6:	693a      	ldr	r2, [r7, #16]
 8001dd8:	4013      	ands	r3, r2
 8001dda:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001de2:	d01f      	beq.n	8001e24 <HAL_GPIO_Init+0x1f8>
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	4a4c      	ldr	r2, [pc, #304]	@ (8001f18 <HAL_GPIO_Init+0x2ec>)
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d019      	beq.n	8001e20 <HAL_GPIO_Init+0x1f4>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	4a4b      	ldr	r2, [pc, #300]	@ (8001f1c <HAL_GPIO_Init+0x2f0>)
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d013      	beq.n	8001e1c <HAL_GPIO_Init+0x1f0>
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	4a4a      	ldr	r2, [pc, #296]	@ (8001f20 <HAL_GPIO_Init+0x2f4>)
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	d00d      	beq.n	8001e18 <HAL_GPIO_Init+0x1ec>
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	4a49      	ldr	r2, [pc, #292]	@ (8001f24 <HAL_GPIO_Init+0x2f8>)
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d007      	beq.n	8001e14 <HAL_GPIO_Init+0x1e8>
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	4a48      	ldr	r2, [pc, #288]	@ (8001f28 <HAL_GPIO_Init+0x2fc>)
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	d101      	bne.n	8001e10 <HAL_GPIO_Init+0x1e4>
 8001e0c:	2305      	movs	r3, #5
 8001e0e:	e00a      	b.n	8001e26 <HAL_GPIO_Init+0x1fa>
 8001e10:	2306      	movs	r3, #6
 8001e12:	e008      	b.n	8001e26 <HAL_GPIO_Init+0x1fa>
 8001e14:	2304      	movs	r3, #4
 8001e16:	e006      	b.n	8001e26 <HAL_GPIO_Init+0x1fa>
 8001e18:	2303      	movs	r3, #3
 8001e1a:	e004      	b.n	8001e26 <HAL_GPIO_Init+0x1fa>
 8001e1c:	2302      	movs	r3, #2
 8001e1e:	e002      	b.n	8001e26 <HAL_GPIO_Init+0x1fa>
 8001e20:	2301      	movs	r3, #1
 8001e22:	e000      	b.n	8001e26 <HAL_GPIO_Init+0x1fa>
 8001e24:	2300      	movs	r3, #0
 8001e26:	697a      	ldr	r2, [r7, #20]
 8001e28:	f002 0203 	and.w	r2, r2, #3
 8001e2c:	0092      	lsls	r2, r2, #2
 8001e2e:	4093      	lsls	r3, r2
 8001e30:	693a      	ldr	r2, [r7, #16]
 8001e32:	4313      	orrs	r3, r2
 8001e34:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e36:	4937      	ldr	r1, [pc, #220]	@ (8001f14 <HAL_GPIO_Init+0x2e8>)
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	089b      	lsrs	r3, r3, #2
 8001e3c:	3302      	adds	r3, #2
 8001e3e:	693a      	ldr	r2, [r7, #16]
 8001e40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001e44:	4b39      	ldr	r3, [pc, #228]	@ (8001f2c <HAL_GPIO_Init+0x300>)
 8001e46:	689b      	ldr	r3, [r3, #8]
 8001e48:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	43db      	mvns	r3, r3
 8001e4e:	693a      	ldr	r2, [r7, #16]
 8001e50:	4013      	ands	r3, r2
 8001e52:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d003      	beq.n	8001e68 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001e60:	693a      	ldr	r2, [r7, #16]
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	4313      	orrs	r3, r2
 8001e66:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001e68:	4a30      	ldr	r2, [pc, #192]	@ (8001f2c <HAL_GPIO_Init+0x300>)
 8001e6a:	693b      	ldr	r3, [r7, #16]
 8001e6c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001e6e:	4b2f      	ldr	r3, [pc, #188]	@ (8001f2c <HAL_GPIO_Init+0x300>)
 8001e70:	68db      	ldr	r3, [r3, #12]
 8001e72:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	43db      	mvns	r3, r3
 8001e78:	693a      	ldr	r2, [r7, #16]
 8001e7a:	4013      	ands	r3, r2
 8001e7c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d003      	beq.n	8001e92 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001e8a:	693a      	ldr	r2, [r7, #16]
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	4313      	orrs	r3, r2
 8001e90:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001e92:	4a26      	ldr	r2, [pc, #152]	@ (8001f2c <HAL_GPIO_Init+0x300>)
 8001e94:	693b      	ldr	r3, [r7, #16]
 8001e96:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001e98:	4b24      	ldr	r3, [pc, #144]	@ (8001f2c <HAL_GPIO_Init+0x300>)
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	43db      	mvns	r3, r3
 8001ea2:	693a      	ldr	r2, [r7, #16]
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d003      	beq.n	8001ebc <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001eb4:	693a      	ldr	r2, [r7, #16]
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001ebc:	4a1b      	ldr	r2, [pc, #108]	@ (8001f2c <HAL_GPIO_Init+0x300>)
 8001ebe:	693b      	ldr	r3, [r7, #16]
 8001ec0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001ec2:	4b1a      	ldr	r3, [pc, #104]	@ (8001f2c <HAL_GPIO_Init+0x300>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	43db      	mvns	r3, r3
 8001ecc:	693a      	ldr	r2, [r7, #16]
 8001ece:	4013      	ands	r3, r2
 8001ed0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d003      	beq.n	8001ee6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001ede:	693a      	ldr	r2, [r7, #16]
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001ee6:	4a11      	ldr	r2, [pc, #68]	@ (8001f2c <HAL_GPIO_Init+0x300>)
 8001ee8:	693b      	ldr	r3, [r7, #16]
 8001eea:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001eec:	697b      	ldr	r3, [r7, #20]
 8001eee:	3301      	adds	r3, #1
 8001ef0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	681a      	ldr	r2, [r3, #0]
 8001ef6:	697b      	ldr	r3, [r7, #20]
 8001ef8:	fa22 f303 	lsr.w	r3, r2, r3
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	f47f ae9d 	bne.w	8001c3c <HAL_GPIO_Init+0x10>
  }
}
 8001f02:	bf00      	nop
 8001f04:	bf00      	nop
 8001f06:	371c      	adds	r7, #28
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0e:	4770      	bx	lr
 8001f10:	40021000 	.word	0x40021000
 8001f14:	40010000 	.word	0x40010000
 8001f18:	48000400 	.word	0x48000400
 8001f1c:	48000800 	.word	0x48000800
 8001f20:	48000c00 	.word	0x48000c00
 8001f24:	48001000 	.word	0x48001000
 8001f28:	48001400 	.word	0x48001400
 8001f2c:	40010400 	.word	0x40010400

08001f30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b083      	sub	sp, #12
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
 8001f38:	460b      	mov	r3, r1
 8001f3a:	807b      	strh	r3, [r7, #2]
 8001f3c:	4613      	mov	r3, r2
 8001f3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f40:	787b      	ldrb	r3, [r7, #1]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d003      	beq.n	8001f4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001f46:	887a      	ldrh	r2, [r7, #2]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001f4c:	e002      	b.n	8001f54 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001f4e:	887a      	ldrh	r2, [r7, #2]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001f54:	bf00      	nop
 8001f56:	370c      	adds	r7, #12
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5e:	4770      	bx	lr

08001f60 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b082      	sub	sp, #8
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d101      	bne.n	8001f72 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	e08d      	b.n	800208e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001f78:	b2db      	uxtb	r3, r3
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d106      	bne.n	8001f8c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2200      	movs	r2, #0
 8001f82:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001f86:	6878      	ldr	r0, [r7, #4]
 8001f88:	f7fe fbbc 	bl	8000704 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2224      	movs	r2, #36	@ 0x24
 8001f90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	681a      	ldr	r2, [r3, #0]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f022 0201 	bic.w	r2, r2, #1
 8001fa2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	685a      	ldr	r2, [r3, #4]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001fb0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	689a      	ldr	r2, [r3, #8]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001fc0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	68db      	ldr	r3, [r3, #12]
 8001fc6:	2b01      	cmp	r3, #1
 8001fc8:	d107      	bne.n	8001fda <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	689a      	ldr	r2, [r3, #8]
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001fd6:	609a      	str	r2, [r3, #8]
 8001fd8:	e006      	b.n	8001fe8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	689a      	ldr	r2, [r3, #8]
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001fe6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	68db      	ldr	r3, [r3, #12]
 8001fec:	2b02      	cmp	r3, #2
 8001fee:	d108      	bne.n	8002002 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	685a      	ldr	r2, [r3, #4]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001ffe:	605a      	str	r2, [r3, #4]
 8002000:	e007      	b.n	8002012 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	685a      	ldr	r2, [r3, #4]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002010:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	687a      	ldr	r2, [r7, #4]
 800201a:	6812      	ldr	r2, [r2, #0]
 800201c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002020:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002024:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	68da      	ldr	r2, [r3, #12]
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002034:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	691a      	ldr	r2, [r3, #16]
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	695b      	ldr	r3, [r3, #20]
 800203e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	699b      	ldr	r3, [r3, #24]
 8002046:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	430a      	orrs	r2, r1
 800204e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	69d9      	ldr	r1, [r3, #28]
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6a1a      	ldr	r2, [r3, #32]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	430a      	orrs	r2, r1
 800205e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	681a      	ldr	r2, [r3, #0]
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f042 0201 	orr.w	r2, r2, #1
 800206e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2200      	movs	r2, #0
 8002074:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2220      	movs	r2, #32
 800207a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2200      	movs	r2, #0
 8002082:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2200      	movs	r2, #0
 8002088:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800208c:	2300      	movs	r3, #0
}
 800208e:	4618      	mov	r0, r3
 8002090:	3708      	adds	r7, #8
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}
	...

08002098 <HAL_I2C_Mem_Write_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                        uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b088      	sub	sp, #32
 800209c:	af02      	add	r7, sp, #8
 800209e:	60f8      	str	r0, [r7, #12]
 80020a0:	4608      	mov	r0, r1
 80020a2:	4611      	mov	r1, r2
 80020a4:	461a      	mov	r2, r3
 80020a6:	4603      	mov	r3, r0
 80020a8:	817b      	strh	r3, [r7, #10]
 80020aa:	460b      	mov	r3, r1
 80020ac:	813b      	strh	r3, [r7, #8]
 80020ae:	4613      	mov	r3, r2
 80020b0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80020b8:	b2db      	uxtb	r3, r3
 80020ba:	2b20      	cmp	r3, #32
 80020bc:	f040 80c3 	bne.w	8002246 <HAL_I2C_Mem_Write_DMA+0x1ae>
  {
    if ((pData == NULL) || (Size == 0U))
 80020c0:	6a3b      	ldr	r3, [r7, #32]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d002      	beq.n	80020cc <HAL_I2C_Mem_Write_DMA+0x34>
 80020c6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d105      	bne.n	80020d8 <HAL_I2C_Mem_Write_DMA+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80020d2:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80020d4:	2301      	movs	r3, #1
 80020d6:	e0b7      	b.n	8002248 <HAL_I2C_Mem_Write_DMA+0x1b0>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	699b      	ldr	r3, [r3, #24]
 80020de:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80020e2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80020e6:	d101      	bne.n	80020ec <HAL_I2C_Mem_Write_DMA+0x54>
    {
      return HAL_BUSY;
 80020e8:	2302      	movs	r3, #2
 80020ea:	e0ad      	b.n	8002248 <HAL_I2C_Mem_Write_DMA+0x1b0>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80020f2:	2b01      	cmp	r3, #1
 80020f4:	d101      	bne.n	80020fa <HAL_I2C_Mem_Write_DMA+0x62>
 80020f6:	2302      	movs	r3, #2
 80020f8:	e0a6      	b.n	8002248 <HAL_I2C_Mem_Write_DMA+0x1b0>
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	2201      	movs	r2, #1
 80020fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	2221      	movs	r2, #33	@ 0x21
 8002106:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	2240      	movs	r2, #64	@ 0x40
 800210e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	2200      	movs	r2, #0
 8002116:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	6a3a      	ldr	r2, [r7, #32]
 800211c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002122:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	4a4a      	ldr	r2, [pc, #296]	@ (8002250 <HAL_I2C_Mem_Write_DMA+0x1b8>)
 8002128:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_DMA;
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	4a49      	ldr	r2, [pc, #292]	@ (8002254 <HAL_I2C_Mem_Write_DMA+0x1bc>)
 800212e:	635a      	str	r2, [r3, #52]	@ 0x34
    hi2c->Devaddress  = DevAddress;
 8002130:	897a      	ldrh	r2, [r7, #10]
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	64da      	str	r2, [r3, #76]	@ 0x4c

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800213a:	b29b      	uxth	r3, r3
 800213c:	2bff      	cmp	r3, #255	@ 0xff
 800213e:	d903      	bls.n	8002148 <HAL_I2C_Mem_Write_DMA+0xb0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	22ff      	movs	r2, #255	@ 0xff
 8002144:	851a      	strh	r2, [r3, #40]	@ 0x28
 8002146:	e004      	b.n	8002152 <HAL_I2C_Mem_Write_DMA+0xba>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800214c:	b29a      	uxth	r2, r3
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	851a      	strh	r2, [r3, #40]	@ 0x28
    }

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002152:	88fb      	ldrh	r3, [r7, #6]
 8002154:	2b01      	cmp	r3, #1
 8002156:	d109      	bne.n	800216c <HAL_I2C_Mem_Write_DMA+0xd4>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002158:	893b      	ldrh	r3, [r7, #8]
 800215a:	b2da      	uxtb	r2, r3
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	f04f 32ff 	mov.w	r2, #4294967295
 8002168:	651a      	str	r2, [r3, #80]	@ 0x50
 800216a:	e00b      	b.n	8002184 <HAL_I2C_Mem_Write_DMA+0xec>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800216c:	893b      	ldrh	r3, [r7, #8]
 800216e:	0a1b      	lsrs	r3, r3, #8
 8002170:	b29b      	uxth	r3, r3
 8002172:	b2da      	uxtb	r2, r3
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
 800217a:	893b      	ldrh	r3, [r7, #8]
 800217c:	b2db      	uxtb	r3, r3
 800217e:	461a      	mov	r2, r3
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    if (hi2c->hdmatx != NULL)
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002188:	2b00      	cmp	r3, #0
 800218a:	d020      	beq.n	80021ce <HAL_I2C_Mem_Write_DMA+0x136>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002190:	4a31      	ldr	r2, [pc, #196]	@ (8002258 <HAL_I2C_Mem_Write_DMA+0x1c0>)
 8002192:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002198:	4a30      	ldr	r2, [pc, #192]	@ (800225c <HAL_I2C_Mem_Write_DMA+0x1c4>)
 800219a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmatx->XferHalfCpltCallback = NULL;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021a0:	2200      	movs	r2, #0
 80021a2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->hdmatx->XferAbortCallback = NULL;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021a8:	2200      	movs	r2, #0
 80021aa:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the DMA channel */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80021b0:	6a39      	ldr	r1, [r7, #32]
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	3328      	adds	r3, #40	@ 0x28
 80021b8:	461a      	mov	r2, r3
                                       hi2c->XferSize);
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 80021be:	f7ff faf5 	bl	80017ac <HAL_DMA_Start_IT>
 80021c2:	4603      	mov	r3, r0
 80021c4:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 80021c6:	7dfb      	ldrb	r3, [r7, #23]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d128      	bne.n	800221e <HAL_I2C_Mem_Write_DMA+0x186>
 80021cc:	e013      	b.n	80021f6 <HAL_I2C_Mem_Write_DMA+0x15e>
      hi2c->State     = HAL_I2C_STATE_READY;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	2220      	movs	r2, #32
 80021d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	2200      	movs	r2, #0
 80021da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021e2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	645a      	str	r2, [r3, #68]	@ 0x44
      __HAL_UNLOCK(hi2c);
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	2200      	movs	r2, #0
 80021ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80021f2:	2301      	movs	r3, #1
 80021f4:	e028      	b.n	8002248 <HAL_I2C_Mem_Write_DMA+0x1b0>
    {
      /* Send Slave Address and Memory Address */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80021f6:	88fb      	ldrh	r3, [r7, #6]
 80021f8:	b2da      	uxtb	r2, r3
 80021fa:	8979      	ldrh	r1, [r7, #10]
 80021fc:	4b18      	ldr	r3, [pc, #96]	@ (8002260 <HAL_I2C_Mem_Write_DMA+0x1c8>)
 80021fe:	9300      	str	r3, [sp, #0]
 8002200:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002204:	68f8      	ldr	r0, [r7, #12]
 8002206:	f001 fb19 	bl	800383c <I2C_TransferConfig>

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	2200      	movs	r2, #0
 800220e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002212:	2101      	movs	r1, #1
 8002214:	68f8      	ldr	r0, [r7, #12]
 8002216:	f001 fb43 	bl	80038a0 <I2C_Enable_IRQ>
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
 800221a:	2300      	movs	r3, #0
 800221c:	e014      	b.n	8002248 <HAL_I2C_Mem_Write_DMA+0x1b0>
      hi2c->State     = HAL_I2C_STATE_READY;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	2220      	movs	r2, #32
 8002222:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	2200      	movs	r2, #0
 800222a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002232:	f043 0210 	orr.w	r2, r3, #16
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	645a      	str	r2, [r3, #68]	@ 0x44
      __HAL_UNLOCK(hi2c);
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	2200      	movs	r2, #0
 800223e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002242:	2301      	movs	r3, #1
 8002244:	e000      	b.n	8002248 <HAL_I2C_Mem_Write_DMA+0x1b0>
  }
  else
  {
    return HAL_BUSY;
 8002246:	2302      	movs	r3, #2
  }
}
 8002248:	4618      	mov	r0, r3
 800224a:	3718      	adds	r7, #24
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}
 8002250:	ffff0000 	.word	0xffff0000
 8002254:	080028fd 	.word	0x080028fd
 8002258:	080036a7 	.word	0x080036a7
 800225c:	080037d3 	.word	0x080037d3
 8002260:	80002000 	.word	0x80002000

08002264 <HAL_I2C_Mem_Read_DMA>:
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                       uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b088      	sub	sp, #32
 8002268:	af02      	add	r7, sp, #8
 800226a:	60f8      	str	r0, [r7, #12]
 800226c:	4608      	mov	r0, r1
 800226e:	4611      	mov	r1, r2
 8002270:	461a      	mov	r2, r3
 8002272:	4603      	mov	r3, r0
 8002274:	817b      	strh	r3, [r7, #10]
 8002276:	460b      	mov	r3, r1
 8002278:	813b      	strh	r3, [r7, #8]
 800227a:	4613      	mov	r3, r2
 800227c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002284:	b2db      	uxtb	r3, r3
 8002286:	2b20      	cmp	r3, #32
 8002288:	f040 80c2 	bne.w	8002410 <HAL_I2C_Mem_Read_DMA+0x1ac>
  {
    if ((pData == NULL) || (Size == 0U))
 800228c:	6a3b      	ldr	r3, [r7, #32]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d002      	beq.n	8002298 <HAL_I2C_Mem_Read_DMA+0x34>
 8002292:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002294:	2b00      	cmp	r3, #0
 8002296:	d105      	bne.n	80022a4 <HAL_I2C_Mem_Read_DMA+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800229e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80022a0:	2301      	movs	r3, #1
 80022a2:	e0b6      	b.n	8002412 <HAL_I2C_Mem_Read_DMA+0x1ae>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	699b      	ldr	r3, [r3, #24]
 80022aa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80022ae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80022b2:	d101      	bne.n	80022b8 <HAL_I2C_Mem_Read_DMA+0x54>
    {
      return HAL_BUSY;
 80022b4:	2302      	movs	r3, #2
 80022b6:	e0ac      	b.n	8002412 <HAL_I2C_Mem_Read_DMA+0x1ae>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80022be:	2b01      	cmp	r3, #1
 80022c0:	d101      	bne.n	80022c6 <HAL_I2C_Mem_Read_DMA+0x62>
 80022c2:	2302      	movs	r3, #2
 80022c4:	e0a5      	b.n	8002412 <HAL_I2C_Mem_Read_DMA+0x1ae>
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	2201      	movs	r2, #1
 80022ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	2222      	movs	r2, #34	@ 0x22
 80022d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	2240      	movs	r2, #64	@ 0x40
 80022da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	2200      	movs	r2, #0
 80022e2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	6a3a      	ldr	r2, [r7, #32]
 80022e8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80022ee:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	4a4a      	ldr	r2, [pc, #296]	@ (800241c <HAL_I2C_Mem_Read_DMA+0x1b8>)
 80022f4:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_DMA;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	4a49      	ldr	r2, [pc, #292]	@ (8002420 <HAL_I2C_Mem_Read_DMA+0x1bc>)
 80022fa:	635a      	str	r2, [r3, #52]	@ 0x34
    hi2c->Devaddress  = DevAddress;
 80022fc:	897a      	ldrh	r2, [r7, #10]
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	64da      	str	r2, [r3, #76]	@ 0x4c

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002306:	b29b      	uxth	r3, r3
 8002308:	2bff      	cmp	r3, #255	@ 0xff
 800230a:	d903      	bls.n	8002314 <HAL_I2C_Mem_Read_DMA+0xb0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	22ff      	movs	r2, #255	@ 0xff
 8002310:	851a      	strh	r2, [r3, #40]	@ 0x28
 8002312:	e004      	b.n	800231e <HAL_I2C_Mem_Read_DMA+0xba>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002318:	b29a      	uxth	r2, r3
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	851a      	strh	r2, [r3, #40]	@ 0x28
    }

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800231e:	88fb      	ldrh	r3, [r7, #6]
 8002320:	2b01      	cmp	r3, #1
 8002322:	d109      	bne.n	8002338 <HAL_I2C_Mem_Read_DMA+0xd4>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002324:	893b      	ldrh	r3, [r7, #8]
 8002326:	b2da      	uxtb	r2, r3
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	f04f 32ff 	mov.w	r2, #4294967295
 8002334:	651a      	str	r2, [r3, #80]	@ 0x50
 8002336:	e00b      	b.n	8002350 <HAL_I2C_Mem_Read_DMA+0xec>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002338:	893b      	ldrh	r3, [r7, #8]
 800233a:	0a1b      	lsrs	r3, r3, #8
 800233c:	b29b      	uxth	r3, r3
 800233e:	b2da      	uxtb	r2, r3
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
 8002346:	893b      	ldrh	r3, [r7, #8]
 8002348:	b2db      	uxtb	r3, r3
 800234a:	461a      	mov	r2, r3
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    if (hi2c->hdmarx != NULL)
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002354:	2b00      	cmp	r3, #0
 8002356:	d020      	beq.n	800239a <HAL_I2C_Mem_Read_DMA+0x136>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800235c:	4a31      	ldr	r2, [pc, #196]	@ (8002424 <HAL_I2C_Mem_Read_DMA+0x1c0>)
 800235e:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002364:	4a30      	ldr	r2, [pc, #192]	@ (8002428 <HAL_I2C_Mem_Read_DMA+0x1c4>)
 8002366:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800236c:	2200      	movs	r2, #0
 800236e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->hdmarx->XferAbortCallback = NULL;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002374:	2200      	movs	r2, #0
 8002376:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the DMA channel */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	3324      	adds	r3, #36	@ 0x24
 8002382:	4619      	mov	r1, r3
 8002384:	6a3a      	ldr	r2, [r7, #32]
                                       hi2c->XferSize);
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 800238a:	f7ff fa0f 	bl	80017ac <HAL_DMA_Start_IT>
 800238e:	4603      	mov	r3, r0
 8002390:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 8002392:	7dfb      	ldrb	r3, [r7, #23]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d127      	bne.n	80023e8 <HAL_I2C_Mem_Read_DMA+0x184>
 8002398:	e013      	b.n	80023c2 <HAL_I2C_Mem_Read_DMA+0x15e>
      hi2c->State     = HAL_I2C_STATE_READY;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	2220      	movs	r2, #32
 800239e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	2200      	movs	r2, #0
 80023a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023ae:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	645a      	str	r2, [r3, #68]	@ 0x44
      __HAL_UNLOCK(hi2c);
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	2200      	movs	r2, #0
 80023ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80023be:	2301      	movs	r3, #1
 80023c0:	e027      	b.n	8002412 <HAL_I2C_Mem_Read_DMA+0x1ae>
    {
      /* Send Slave Address and Memory Address */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80023c2:	88fb      	ldrh	r3, [r7, #6]
 80023c4:	b2da      	uxtb	r2, r3
 80023c6:	8979      	ldrh	r1, [r7, #10]
 80023c8:	4b18      	ldr	r3, [pc, #96]	@ (800242c <HAL_I2C_Mem_Read_DMA+0x1c8>)
 80023ca:	9300      	str	r3, [sp, #0]
 80023cc:	2300      	movs	r3, #0
 80023ce:	68f8      	ldr	r0, [r7, #12]
 80023d0:	f001 fa34 	bl	800383c <I2C_TransferConfig>

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	2200      	movs	r2, #0
 80023d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 80023dc:	2101      	movs	r1, #1
 80023de:	68f8      	ldr	r0, [r7, #12]
 80023e0:	f001 fa5e 	bl	80038a0 <I2C_Enable_IRQ>
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
 80023e4:	2300      	movs	r3, #0
 80023e6:	e014      	b.n	8002412 <HAL_I2C_Mem_Read_DMA+0x1ae>
      hi2c->State     = HAL_I2C_STATE_READY;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	2220      	movs	r2, #32
 80023ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	2200      	movs	r2, #0
 80023f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023fc:	f043 0210 	orr.w	r2, r3, #16
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	645a      	str	r2, [r3, #68]	@ 0x44
      __HAL_UNLOCK(hi2c);
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	2200      	movs	r2, #0
 8002408:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800240c:	2301      	movs	r3, #1
 800240e:	e000      	b.n	8002412 <HAL_I2C_Mem_Read_DMA+0x1ae>
  }
  else
  {
    return HAL_BUSY;
 8002410:	2302      	movs	r3, #2
  }
}
 8002412:	4618      	mov	r0, r3
 8002414:	3718      	adds	r7, #24
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}
 800241a:	bf00      	nop
 800241c:	ffff0000 	.word	0xffff0000
 8002420:	080028fd 	.word	0x080028fd
 8002424:	0800373d 	.word	0x0800373d
 8002428:	080037d3 	.word	0x080037d3
 800242c:	80002000 	.word	0x80002000

08002430 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b084      	sub	sp, #16
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	699b      	ldr	r3, [r3, #24]
 800243e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800244c:	2b00      	cmp	r3, #0
 800244e:	d005      	beq.n	800245c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002454:	68ba      	ldr	r2, [r7, #8]
 8002456:	68f9      	ldr	r1, [r7, #12]
 8002458:	6878      	ldr	r0, [r7, #4]
 800245a:	4798      	blx	r3
  }
}
 800245c:	bf00      	nop
 800245e:	3710      	adds	r7, #16
 8002460:	46bd      	mov	sp, r7
 8002462:	bd80      	pop	{r7, pc}

08002464 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002464:	b480      	push	{r7}
 8002466:	b083      	sub	sp, #12
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800246c:	bf00      	nop
 800246e:	370c      	adds	r7, #12
 8002470:	46bd      	mov	sp, r7
 8002472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002476:	4770      	bx	lr

08002478 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002478:	b480      	push	{r7}
 800247a:	b083      	sub	sp, #12
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8002480:	bf00      	nop
 8002482:	370c      	adds	r7, #12
 8002484:	46bd      	mov	sp, r7
 8002486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248a:	4770      	bx	lr

0800248c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800248c:	b480      	push	{r7}
 800248e:	b083      	sub	sp, #12
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002494:	bf00      	nop
 8002496:	370c      	adds	r7, #12
 8002498:	46bd      	mov	sp, r7
 800249a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249e:	4770      	bx	lr

080024a0 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b083      	sub	sp, #12
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80024a8:	bf00      	nop
 80024aa:	370c      	adds	r7, #12
 80024ac:	46bd      	mov	sp, r7
 80024ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b2:	4770      	bx	lr

080024b4 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80024b4:	b480      	push	{r7}
 80024b6:	b083      	sub	sp, #12
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
 80024bc:	460b      	mov	r3, r1
 80024be:	70fb      	strb	r3, [r7, #3]
 80024c0:	4613      	mov	r3, r2
 80024c2:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80024c4:	bf00      	nop
 80024c6:	370c      	adds	r7, #12
 80024c8:	46bd      	mov	sp, r7
 80024ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ce:	4770      	bx	lr

080024d0 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80024d0:	b480      	push	{r7}
 80024d2:	b083      	sub	sp, #12
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80024d8:	bf00      	nop
 80024da:	370c      	adds	r7, #12
 80024dc:	46bd      	mov	sp, r7
 80024de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e2:	4770      	bx	lr

080024e4 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80024e4:	b480      	push	{r7}
 80024e6:	b083      	sub	sp, #12
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80024ec:	bf00      	nop
 80024ee:	370c      	adds	r7, #12
 80024f0:	46bd      	mov	sp, r7
 80024f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f6:	4770      	bx	lr

080024f8 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b083      	sub	sp, #12
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8002500:	bf00      	nop
 8002502:	370c      	adds	r7, #12
 8002504:	46bd      	mov	sp, r7
 8002506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250a:	4770      	bx	lr

0800250c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800250c:	b480      	push	{r7}
 800250e:	b083      	sub	sp, #12
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002514:	bf00      	nop
 8002516:	370c      	adds	r7, #12
 8002518:	46bd      	mov	sp, r7
 800251a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251e:	4770      	bx	lr

08002520 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002520:	b480      	push	{r7}
 8002522:	b083      	sub	sp, #12
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002528:	bf00      	nop
 800252a:	370c      	adds	r7, #12
 800252c:	46bd      	mov	sp, r7
 800252e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002532:	4770      	bx	lr

08002534 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b086      	sub	sp, #24
 8002538:	af00      	add	r7, sp, #0
 800253a:	60f8      	str	r0, [r7, #12]
 800253c:	60b9      	str	r1, [r7, #8]
 800253e:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002544:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8002546:	68bb      	ldr	r3, [r7, #8]
 8002548:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002550:	2b01      	cmp	r3, #1
 8002552:	d101      	bne.n	8002558 <I2C_Slave_ISR_IT+0x24>
 8002554:	2302      	movs	r3, #2
 8002556:	e0e2      	b.n	800271e <I2C_Slave_ISR_IT+0x1ea>
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	2201      	movs	r2, #1
 800255c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002560:	693b      	ldr	r3, [r7, #16]
 8002562:	f003 0320 	and.w	r3, r3, #32
 8002566:	2b00      	cmp	r3, #0
 8002568:	d009      	beq.n	800257e <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002570:	2b00      	cmp	r3, #0
 8002572:	d004      	beq.n	800257e <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8002574:	6939      	ldr	r1, [r7, #16]
 8002576:	68f8      	ldr	r0, [r7, #12]
 8002578:	f000 fda2 	bl	80030c0 <I2C_ITSlaveCplt>
 800257c:	e0ca      	b.n	8002714 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800257e:	693b      	ldr	r3, [r7, #16]
 8002580:	f003 0310 	and.w	r3, r3, #16
 8002584:	2b00      	cmp	r3, #0
 8002586:	d04b      	beq.n	8002620 <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800258e:	2b00      	cmp	r3, #0
 8002590:	d046      	beq.n	8002620 <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002596:	b29b      	uxth	r3, r3
 8002598:	2b00      	cmp	r3, #0
 800259a:	d128      	bne.n	80025ee <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80025a2:	b2db      	uxtb	r3, r3
 80025a4:	2b28      	cmp	r3, #40	@ 0x28
 80025a6:	d108      	bne.n	80025ba <I2C_Slave_ISR_IT+0x86>
 80025a8:	697b      	ldr	r3, [r7, #20]
 80025aa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80025ae:	d104      	bne.n	80025ba <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80025b0:	6939      	ldr	r1, [r7, #16]
 80025b2:	68f8      	ldr	r0, [r7, #12]
 80025b4:	f000 fee8 	bl	8003388 <I2C_ITListenCplt>
 80025b8:	e031      	b.n	800261e <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80025c0:	b2db      	uxtb	r3, r3
 80025c2:	2b29      	cmp	r3, #41	@ 0x29
 80025c4:	d10e      	bne.n	80025e4 <I2C_Slave_ISR_IT+0xb0>
 80025c6:	697b      	ldr	r3, [r7, #20]
 80025c8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80025cc:	d00a      	beq.n	80025e4 <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	2210      	movs	r2, #16
 80025d4:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80025d6:	68f8      	ldr	r0, [r7, #12]
 80025d8:	f001 f841 	bl	800365e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80025dc:	68f8      	ldr	r0, [r7, #12]
 80025de:	f000 fc4b 	bl	8002e78 <I2C_ITSlaveSeqCplt>
 80025e2:	e01c      	b.n	800261e <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	2210      	movs	r2, #16
 80025ea:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80025ec:	e08f      	b.n	800270e <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	2210      	movs	r2, #16
 80025f4:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025fa:	f043 0204 	orr.w	r2, r3, #4
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d003      	beq.n	8002610 <I2C_Slave_ISR_IT+0xdc>
 8002608:	697b      	ldr	r3, [r7, #20]
 800260a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800260e:	d17e      	bne.n	800270e <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002614:	4619      	mov	r1, r3
 8002616:	68f8      	ldr	r0, [r7, #12]
 8002618:	f000 ff0a 	bl	8003430 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800261c:	e077      	b.n	800270e <I2C_Slave_ISR_IT+0x1da>
 800261e:	e076      	b.n	800270e <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002620:	693b      	ldr	r3, [r7, #16]
 8002622:	f003 0304 	and.w	r3, r3, #4
 8002626:	2b00      	cmp	r3, #0
 8002628:	d02f      	beq.n	800268a <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002630:	2b00      	cmp	r3, #0
 8002632:	d02a      	beq.n	800268a <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002638:	b29b      	uxth	r3, r3
 800263a:	2b00      	cmp	r3, #0
 800263c:	d018      	beq.n	8002670 <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002648:	b2d2      	uxtb	r2, r2
 800264a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002650:	1c5a      	adds	r2, r3, #1
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800265a:	3b01      	subs	r3, #1
 800265c:	b29a      	uxth	r2, r3
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002666:	b29b      	uxth	r3, r3
 8002668:	3b01      	subs	r3, #1
 800266a:	b29a      	uxth	r2, r3
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002674:	b29b      	uxth	r3, r3
 8002676:	2b00      	cmp	r3, #0
 8002678:	d14b      	bne.n	8002712 <I2C_Slave_ISR_IT+0x1de>
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002680:	d047      	beq.n	8002712 <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8002682:	68f8      	ldr	r0, [r7, #12]
 8002684:	f000 fbf8 	bl	8002e78 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8002688:	e043      	b.n	8002712 <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800268a:	693b      	ldr	r3, [r7, #16]
 800268c:	f003 0308 	and.w	r3, r3, #8
 8002690:	2b00      	cmp	r3, #0
 8002692:	d009      	beq.n	80026a8 <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800269a:	2b00      	cmp	r3, #0
 800269c:	d004      	beq.n	80026a8 <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800269e:	6939      	ldr	r1, [r7, #16]
 80026a0:	68f8      	ldr	r0, [r7, #12]
 80026a2:	f000 fb28 	bl	8002cf6 <I2C_ITAddrCplt>
 80026a6:	e035      	b.n	8002714 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80026a8:	693b      	ldr	r3, [r7, #16]
 80026aa:	f003 0302 	and.w	r3, r3, #2
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d030      	beq.n	8002714 <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d02b      	beq.n	8002714 <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026c0:	b29b      	uxth	r3, r3
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d018      	beq.n	80026f8 <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026ca:	781a      	ldrb	r2, [r3, #0]
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026d6:	1c5a      	adds	r2, r3, #1
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026e0:	b29b      	uxth	r3, r3
 80026e2:	3b01      	subs	r3, #1
 80026e4:	b29a      	uxth	r2, r3
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026ee:	3b01      	subs	r3, #1
 80026f0:	b29a      	uxth	r2, r3
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	851a      	strh	r2, [r3, #40]	@ 0x28
 80026f6:	e00d      	b.n	8002714 <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80026fe:	d002      	beq.n	8002706 <I2C_Slave_ISR_IT+0x1d2>
 8002700:	697b      	ldr	r3, [r7, #20]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d106      	bne.n	8002714 <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002706:	68f8      	ldr	r0, [r7, #12]
 8002708:	f000 fbb6 	bl	8002e78 <I2C_ITSlaveSeqCplt>
 800270c:	e002      	b.n	8002714 <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 800270e:	bf00      	nop
 8002710:	e000      	b.n	8002714 <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 8002712:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	2200      	movs	r2, #0
 8002718:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800271c:	2300      	movs	r3, #0
}
 800271e:	4618      	mov	r0, r3
 8002720:	3718      	adds	r7, #24
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}

08002726 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8002726:	b580      	push	{r7, lr}
 8002728:	b088      	sub	sp, #32
 800272a:	af02      	add	r7, sp, #8
 800272c:	60f8      	str	r0, [r7, #12]
 800272e:	60b9      	str	r1, [r7, #8]
 8002730:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002738:	2b01      	cmp	r3, #1
 800273a:	d101      	bne.n	8002740 <I2C_Master_ISR_DMA+0x1a>
 800273c:	2302      	movs	r3, #2
 800273e:	e0d9      	b.n	80028f4 <I2C_Master_ISR_DMA+0x1ce>
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	2201      	movs	r2, #1
 8002744:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	f003 0310 	and.w	r3, r3, #16
 800274e:	2b00      	cmp	r3, #0
 8002750:	d016      	beq.n	8002780 <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002758:	2b00      	cmp	r3, #0
 800275a:	d011      	beq.n	8002780 <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	2210      	movs	r2, #16
 8002762:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002768:	f043 0204 	orr.w	r2, r3, #4
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8002770:	2120      	movs	r1, #32
 8002772:	68f8      	ldr	r0, [r7, #12]
 8002774:	f001 f894 	bl	80038a0 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002778:	68f8      	ldr	r0, [r7, #12]
 800277a:	f000 ff70 	bl	800365e <I2C_Flush_TXDR>
 800277e:	e0b4      	b.n	80028ea <I2C_Master_ISR_DMA+0x1c4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8002780:	68bb      	ldr	r3, [r7, #8]
 8002782:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002786:	2b00      	cmp	r3, #0
 8002788:	d071      	beq.n	800286e <I2C_Master_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8002790:	2b00      	cmp	r3, #0
 8002792:	d06c      	beq.n	800286e <I2C_Master_ISR_DMA+0x148>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	681a      	ldr	r2, [r3, #0]
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80027a2:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027a8:	b29b      	uxth	r3, r3
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d04e      	beq.n	800284c <I2C_Master_ISR_DMA+0x126>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	b29b      	uxth	r3, r3
 80027b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80027ba:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027c0:	b29b      	uxth	r3, r3
 80027c2:	2bff      	cmp	r3, #255	@ 0xff
 80027c4:	d906      	bls.n	80027d4 <I2C_Master_ISR_DMA+0xae>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	22ff      	movs	r2, #255	@ 0xff
 80027ca:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 80027cc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80027d0:	617b      	str	r3, [r7, #20]
 80027d2:	e010      	b.n	80027f6 <I2C_Master_ISR_DMA+0xd0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027d8:	b29a      	uxth	r2, r3
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027e2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80027e6:	d003      	beq.n	80027f0 <I2C_Master_ISR_DMA+0xca>
        {
          xfermode = hi2c->XferOptions;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027ec:	617b      	str	r3, [r7, #20]
 80027ee:	e002      	b.n	80027f6 <I2C_Master_ISR_DMA+0xd0>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 80027f0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80027f4:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027fa:	b2da      	uxtb	r2, r3
 80027fc:	8a79      	ldrh	r1, [r7, #18]
 80027fe:	2300      	movs	r3, #0
 8002800:	9300      	str	r3, [sp, #0]
 8002802:	697b      	ldr	r3, [r7, #20]
 8002804:	68f8      	ldr	r0, [r7, #12]
 8002806:	f001 f819 	bl	800383c <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800280e:	b29a      	uxth	r2, r3
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002814:	1ad3      	subs	r3, r2, r3
 8002816:	b29a      	uxth	r2, r3
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002822:	b2db      	uxtb	r3, r3
 8002824:	2b22      	cmp	r3, #34	@ 0x22
 8002826:	d108      	bne.n	800283a <I2C_Master_ISR_DMA+0x114>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	681a      	ldr	r2, [r3, #0]
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002836:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8002838:	e057      	b.n	80028ea <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	681a      	ldr	r2, [r3, #0]
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002848:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800284a:	e04e      	b.n	80028ea <I2C_Master_ISR_DMA+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002856:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800285a:	d003      	beq.n	8002864 <I2C_Master_ISR_DMA+0x13e>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800285c:	68f8      	ldr	r0, [r7, #12]
 800285e:	f000 face 	bl	8002dfe <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8002862:	e042      	b.n	80028ea <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002864:	2140      	movs	r1, #64	@ 0x40
 8002866:	68f8      	ldr	r0, [r7, #12]
 8002868:	f000 fde2 	bl	8003430 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800286c:	e03d      	b.n	80028ea <I2C_Master_ISR_DMA+0x1c4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800286e:	68bb      	ldr	r3, [r7, #8]
 8002870:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002874:	2b00      	cmp	r3, #0
 8002876:	d028      	beq.n	80028ca <I2C_Master_ISR_DMA+0x1a4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800287e:	2b00      	cmp	r3, #0
 8002880:	d023      	beq.n	80028ca <I2C_Master_ISR_DMA+0x1a4>
  {
    if (hi2c->XferCount == 0U)
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002886:	b29b      	uxth	r3, r3
 8002888:	2b00      	cmp	r3, #0
 800288a:	d119      	bne.n	80028c0 <I2C_Master_ISR_DMA+0x19a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002896:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800289a:	d025      	beq.n	80028e8 <I2C_Master_ISR_DMA+0x1c2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028a0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80028a4:	d108      	bne.n	80028b8 <I2C_Master_ISR_DMA+0x192>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	685a      	ldr	r2, [r3, #4]
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80028b4:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 80028b6:	e017      	b.n	80028e8 <I2C_Master_ISR_DMA+0x1c2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 80028b8:	68f8      	ldr	r0, [r7, #12]
 80028ba:	f000 faa0 	bl	8002dfe <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 80028be:	e013      	b.n	80028e8 <I2C_Master_ISR_DMA+0x1c2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80028c0:	2140      	movs	r1, #64	@ 0x40
 80028c2:	68f8      	ldr	r0, [r7, #12]
 80028c4:	f000 fdb4 	bl	8003430 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80028c8:	e00e      	b.n	80028e8 <I2C_Master_ISR_DMA+0x1c2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80028ca:	68bb      	ldr	r3, [r7, #8]
 80028cc:	f003 0320 	and.w	r3, r3, #32
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d00a      	beq.n	80028ea <I2C_Master_ISR_DMA+0x1c4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d005      	beq.n	80028ea <I2C_Master_ISR_DMA+0x1c4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 80028de:	68b9      	ldr	r1, [r7, #8]
 80028e0:	68f8      	ldr	r0, [r7, #12]
 80028e2:	f000 fb25 	bl	8002f30 <I2C_ITMasterCplt>
 80028e6:	e000      	b.n	80028ea <I2C_Master_ISR_DMA+0x1c4>
    if (hi2c->XferCount == 0U)
 80028e8:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	2200      	movs	r2, #0
 80028ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80028f2:	2300      	movs	r3, #0
}
 80028f4:	4618      	mov	r0, r3
 80028f6:	3718      	adds	r7, #24
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bd80      	pop	{r7, pc}

080028fc <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b088      	sub	sp, #32
 8002900:	af02      	add	r7, sp, #8
 8002902:	60f8      	str	r0, [r7, #12]
 8002904:	60b9      	str	r1, [r7, #8]
 8002906:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8002908:	4b8d      	ldr	r3, [pc, #564]	@ (8002b40 <I2C_Mem_ISR_DMA+0x244>)
 800290a:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002912:	2b01      	cmp	r3, #1
 8002914:	d101      	bne.n	800291a <I2C_Mem_ISR_DMA+0x1e>
 8002916:	2302      	movs	r3, #2
 8002918:	e10e      	b.n	8002b38 <I2C_Mem_ISR_DMA+0x23c>
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	2201      	movs	r2, #1
 800291e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002922:	68bb      	ldr	r3, [r7, #8]
 8002924:	f003 0310 	and.w	r3, r3, #16
 8002928:	2b00      	cmp	r3, #0
 800292a:	d016      	beq.n	800295a <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002932:	2b00      	cmp	r3, #0
 8002934:	d011      	beq.n	800295a <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	2210      	movs	r2, #16
 800293c:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002942:	f043 0204 	orr.w	r2, r3, #4
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800294a:	2120      	movs	r1, #32
 800294c:	68f8      	ldr	r0, [r7, #12]
 800294e:	f000 ffa7 	bl	80038a0 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002952:	68f8      	ldr	r0, [r7, #12]
 8002954:	f000 fe83 	bl	800365e <I2C_Flush_TXDR>
 8002958:	e0e9      	b.n	8002b2e <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800295a:	68bb      	ldr	r3, [r7, #8]
 800295c:	f003 0302 	and.w	r3, r3, #2
 8002960:	2b00      	cmp	r3, #0
 8002962:	d00e      	beq.n	8002982 <I2C_Mem_ISR_DMA+0x86>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800296a:	2b00      	cmp	r3, #0
 800296c:	d009      	beq.n	8002982 <I2C_Mem_ISR_DMA+0x86>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	68fa      	ldr	r2, [r7, #12]
 8002974:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002976:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	f04f 32ff 	mov.w	r2, #4294967295
 800297e:	651a      	str	r2, [r3, #80]	@ 0x50
 8002980:	e0d5      	b.n	8002b2e <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8002982:	68bb      	ldr	r3, [r7, #8]
 8002984:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002988:	2b00      	cmp	r3, #0
 800298a:	d05f      	beq.n	8002a4c <I2C_Mem_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8002992:	2b00      	cmp	r3, #0
 8002994:	d05a      	beq.n	8002a4c <I2C_Mem_ISR_DMA+0x150>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002996:	2101      	movs	r1, #1
 8002998:	68f8      	ldr	r0, [r7, #12]
 800299a:	f001 f805 	bl	80039a8 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800299e:	2110      	movs	r1, #16
 80029a0:	68f8      	ldr	r0, [r7, #12]
 80029a2:	f000 ff7d 	bl	80038a0 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029aa:	b29b      	uxth	r3, r3
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d048      	beq.n	8002a42 <I2C_Mem_ISR_DMA+0x146>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029b4:	b29b      	uxth	r3, r3
 80029b6:	2bff      	cmp	r3, #255	@ 0xff
 80029b8:	d910      	bls.n	80029dc <I2C_Mem_ISR_DMA+0xe0>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	22ff      	movs	r2, #255	@ 0xff
 80029be:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029c4:	b299      	uxth	r1, r3
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029ca:	b2da      	uxtb	r2, r3
 80029cc:	2300      	movs	r3, #0
 80029ce:	9300      	str	r3, [sp, #0]
 80029d0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80029d4:	68f8      	ldr	r0, [r7, #12]
 80029d6:	f000 ff31 	bl	800383c <I2C_TransferConfig>
 80029da:	e011      	b.n	8002a00 <I2C_Mem_ISR_DMA+0x104>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029e0:	b29a      	uxth	r2, r3
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029ea:	b299      	uxth	r1, r3
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029f0:	b2da      	uxtb	r2, r3
 80029f2:	2300      	movs	r3, #0
 80029f4:	9300      	str	r3, [sp, #0]
 80029f6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80029fa:	68f8      	ldr	r0, [r7, #12]
 80029fc:	f000 ff1e 	bl	800383c <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a04:	b29a      	uxth	r2, r3
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a0a:	1ad3      	subs	r3, r2, r3
 8002a0c:	b29a      	uxth	r2, r3
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a18:	b2db      	uxtb	r3, r3
 8002a1a:	2b22      	cmp	r3, #34	@ 0x22
 8002a1c:	d108      	bne.n	8002a30 <I2C_Mem_ISR_DMA+0x134>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	681a      	ldr	r2, [r3, #0]
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002a2c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8002a2e:	e07e      	b.n	8002b2e <I2C_Mem_ISR_DMA+0x232>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	681a      	ldr	r2, [r3, #0]
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002a3e:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8002a40:	e075      	b.n	8002b2e <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002a42:	2140      	movs	r1, #64	@ 0x40
 8002a44:	68f8      	ldr	r0, [r7, #12]
 8002a46:	f000 fcf3 	bl	8003430 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8002a4a:	e070      	b.n	8002b2e <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8002a4c:	68bb      	ldr	r3, [r7, #8]
 8002a4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d05d      	beq.n	8002b12 <I2C_Mem_ISR_DMA+0x216>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d058      	beq.n	8002b12 <I2C_Mem_ISR_DMA+0x216>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002a60:	2101      	movs	r1, #1
 8002a62:	68f8      	ldr	r0, [r7, #12]
 8002a64:	f000 ffa0 	bl	80039a8 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8002a68:	2110      	movs	r1, #16
 8002a6a:	68f8      	ldr	r0, [r7, #12]
 8002a6c:	f000 ff18 	bl	80038a0 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a76:	b2db      	uxtb	r3, r3
 8002a78:	2b22      	cmp	r3, #34	@ 0x22
 8002a7a:	d101      	bne.n	8002a80 <I2C_Mem_ISR_DMA+0x184>
    {
      direction = I2C_GENERATE_START_READ;
 8002a7c:	4b31      	ldr	r3, [pc, #196]	@ (8002b44 <I2C_Mem_ISR_DMA+0x248>)
 8002a7e:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a84:	b29b      	uxth	r3, r3
 8002a86:	2bff      	cmp	r3, #255	@ 0xff
 8002a88:	d910      	bls.n	8002aac <I2C_Mem_ISR_DMA+0x1b0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	22ff      	movs	r2, #255	@ 0xff
 8002a8e:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a94:	b299      	uxth	r1, r3
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a9a:	b2da      	uxtb	r2, r3
 8002a9c:	697b      	ldr	r3, [r7, #20]
 8002a9e:	9300      	str	r3, [sp, #0]
 8002aa0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002aa4:	68f8      	ldr	r0, [r7, #12]
 8002aa6:	f000 fec9 	bl	800383c <I2C_TransferConfig>
 8002aaa:	e011      	b.n	8002ad0 <I2C_Mem_ISR_DMA+0x1d4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ab0:	b29a      	uxth	r2, r3
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002aba:	b299      	uxth	r1, r3
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ac0:	b2da      	uxtb	r2, r3
 8002ac2:	697b      	ldr	r3, [r7, #20]
 8002ac4:	9300      	str	r3, [sp, #0]
 8002ac6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002aca:	68f8      	ldr	r0, [r7, #12]
 8002acc:	f000 feb6 	bl	800383c <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ad4:	b29a      	uxth	r2, r3
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ada:	1ad3      	subs	r3, r2, r3
 8002adc:	b29a      	uxth	r2, r3
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ae8:	b2db      	uxtb	r3, r3
 8002aea:	2b22      	cmp	r3, #34	@ 0x22
 8002aec:	d108      	bne.n	8002b00 <I2C_Mem_ISR_DMA+0x204>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	681a      	ldr	r2, [r3, #0]
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002afc:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002afe:	e016      	b.n	8002b2e <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	681a      	ldr	r2, [r3, #0]
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002b0e:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002b10:	e00d      	b.n	8002b2e <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002b12:	68bb      	ldr	r3, [r7, #8]
 8002b14:	f003 0320 	and.w	r3, r3, #32
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d008      	beq.n	8002b2e <I2C_Mem_ISR_DMA+0x232>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d003      	beq.n	8002b2e <I2C_Mem_ISR_DMA+0x232>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8002b26:	68b9      	ldr	r1, [r7, #8]
 8002b28:	68f8      	ldr	r0, [r7, #12]
 8002b2a:	f000 fa01 	bl	8002f30 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	2200      	movs	r2, #0
 8002b32:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8002b36:	2300      	movs	r3, #0
}
 8002b38:	4618      	mov	r0, r3
 8002b3a:	3718      	adds	r7, #24
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bd80      	pop	{r7, pc}
 8002b40:	80002000 	.word	0x80002000
 8002b44:	80002400 	.word	0x80002400

08002b48 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b088      	sub	sp, #32
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	60f8      	str	r0, [r7, #12]
 8002b50:	60b9      	str	r1, [r7, #8]
 8002b52:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b58:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002b64:	2b01      	cmp	r3, #1
 8002b66:	d101      	bne.n	8002b6c <I2C_Slave_ISR_DMA+0x24>
 8002b68:	2302      	movs	r3, #2
 8002b6a:	e0c0      	b.n	8002cee <I2C_Slave_ISR_DMA+0x1a6>
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	2201      	movs	r2, #1
 8002b70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	f003 0320 	and.w	r3, r3, #32
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d009      	beq.n	8002b92 <I2C_Slave_ISR_DMA+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d004      	beq.n	8002b92 <I2C_Slave_ISR_DMA+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8002b88:	68b9      	ldr	r1, [r7, #8]
 8002b8a:	68f8      	ldr	r0, [r7, #12]
 8002b8c:	f000 fa98 	bl	80030c0 <I2C_ITSlaveCplt>
 8002b90:	e0a8      	b.n	8002ce4 <I2C_Slave_ISR_DMA+0x19c>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002b92:	68bb      	ldr	r3, [r7, #8]
 8002b94:	f003 0310 	and.w	r3, r3, #16
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	f000 8095 	beq.w	8002cc8 <I2C_Slave_ISR_DMA+0x180>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	f000 808f 	beq.w	8002cc8 <I2C_Slave_ISR_DMA+0x180>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d104      	bne.n	8002bbe <I2C_Slave_ISR_DMA+0x76>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d07d      	beq.n	8002cba <I2C_Slave_ISR_DMA+0x172>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d00c      	beq.n	8002be0 <I2C_Slave_ISR_DMA+0x98>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d007      	beq.n	8002be0 <I2C_Slave_ISR_DMA+0x98>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d101      	bne.n	8002be0 <I2C_Slave_ISR_DMA+0x98>
          {
            treatdmanack = 1U;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d00c      	beq.n	8002c02 <I2C_Slave_ISR_DMA+0xba>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d007      	beq.n	8002c02 <I2C_Slave_ISR_DMA+0xba>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d101      	bne.n	8002c02 <I2C_Slave_ISR_DMA+0xba>
          {
            treatdmanack = 1U;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8002c02:	69fb      	ldr	r3, [r7, #28]
 8002c04:	2b01      	cmp	r3, #1
 8002c06:	d128      	bne.n	8002c5a <I2C_Slave_ISR_DMA+0x112>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c0e:	b2db      	uxtb	r3, r3
 8002c10:	2b28      	cmp	r3, #40	@ 0x28
 8002c12:	d108      	bne.n	8002c26 <I2C_Slave_ISR_DMA+0xde>
 8002c14:	69bb      	ldr	r3, [r7, #24]
 8002c16:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002c1a:	d104      	bne.n	8002c26 <I2C_Slave_ISR_DMA+0xde>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8002c1c:	68b9      	ldr	r1, [r7, #8]
 8002c1e:	68f8      	ldr	r0, [r7, #12]
 8002c20:	f000 fbb2 	bl	8003388 <I2C_ITListenCplt>
 8002c24:	e048      	b.n	8002cb8 <I2C_Slave_ISR_DMA+0x170>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c2c:	b2db      	uxtb	r3, r3
 8002c2e:	2b29      	cmp	r3, #41	@ 0x29
 8002c30:	d10e      	bne.n	8002c50 <I2C_Slave_ISR_DMA+0x108>
 8002c32:	69bb      	ldr	r3, [r7, #24]
 8002c34:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002c38:	d00a      	beq.n	8002c50 <I2C_Slave_ISR_DMA+0x108>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	2210      	movs	r2, #16
 8002c40:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8002c42:	68f8      	ldr	r0, [r7, #12]
 8002c44:	f000 fd0b 	bl	800365e <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8002c48:	68f8      	ldr	r0, [r7, #12]
 8002c4a:	f000 f915 	bl	8002e78 <I2C_ITSlaveSeqCplt>
 8002c4e:	e033      	b.n	8002cb8 <I2C_Slave_ISR_DMA+0x170>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	2210      	movs	r2, #16
 8002c56:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8002c58:	e034      	b.n	8002cc4 <I2C_Slave_ISR_DMA+0x17c>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	2210      	movs	r2, #16
 8002c60:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c66:	f043 0204 	orr.w	r2, r3, #4
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c74:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002c76:	69bb      	ldr	r3, [r7, #24]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d003      	beq.n	8002c84 <I2C_Slave_ISR_DMA+0x13c>
 8002c7c:	69bb      	ldr	r3, [r7, #24]
 8002c7e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002c82:	d11f      	bne.n	8002cc4 <I2C_Slave_ISR_DMA+0x17c>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002c84:	7dfb      	ldrb	r3, [r7, #23]
 8002c86:	2b21      	cmp	r3, #33	@ 0x21
 8002c88:	d002      	beq.n	8002c90 <I2C_Slave_ISR_DMA+0x148>
 8002c8a:	7dfb      	ldrb	r3, [r7, #23]
 8002c8c:	2b29      	cmp	r3, #41	@ 0x29
 8002c8e:	d103      	bne.n	8002c98 <I2C_Slave_ISR_DMA+0x150>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	2221      	movs	r2, #33	@ 0x21
 8002c94:	631a      	str	r2, [r3, #48]	@ 0x30
 8002c96:	e008      	b.n	8002caa <I2C_Slave_ISR_DMA+0x162>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002c98:	7dfb      	ldrb	r3, [r7, #23]
 8002c9a:	2b22      	cmp	r3, #34	@ 0x22
 8002c9c:	d002      	beq.n	8002ca4 <I2C_Slave_ISR_DMA+0x15c>
 8002c9e:	7dfb      	ldrb	r3, [r7, #23]
 8002ca0:	2b2a      	cmp	r3, #42	@ 0x2a
 8002ca2:	d102      	bne.n	8002caa <I2C_Slave_ISR_DMA+0x162>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	2222      	movs	r2, #34	@ 0x22
 8002ca8:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cae:	4619      	mov	r1, r3
 8002cb0:	68f8      	ldr	r0, [r7, #12]
 8002cb2:	f000 fbbd 	bl	8003430 <I2C_ITError>
      if (treatdmanack == 1U)
 8002cb6:	e005      	b.n	8002cc4 <I2C_Slave_ISR_DMA+0x17c>
 8002cb8:	e004      	b.n	8002cc4 <I2C_Slave_ISR_DMA+0x17c>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	2210      	movs	r2, #16
 8002cc0:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002cc2:	e00f      	b.n	8002ce4 <I2C_Slave_ISR_DMA+0x19c>
      if (treatdmanack == 1U)
 8002cc4:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002cc6:	e00d      	b.n	8002ce4 <I2C_Slave_ISR_DMA+0x19c>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	f003 0308 	and.w	r3, r3, #8
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d008      	beq.n	8002ce4 <I2C_Slave_ISR_DMA+0x19c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d003      	beq.n	8002ce4 <I2C_Slave_ISR_DMA+0x19c>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8002cdc:	68b9      	ldr	r1, [r7, #8]
 8002cde:	68f8      	ldr	r0, [r7, #12]
 8002ce0:	f000 f809 	bl	8002cf6 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8002cec:	2300      	movs	r3, #0
}
 8002cee:	4618      	mov	r0, r3
 8002cf0:	3720      	adds	r7, #32
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd80      	pop	{r7, pc}

08002cf6 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002cf6:	b580      	push	{r7, lr}
 8002cf8:	b084      	sub	sp, #16
 8002cfa:	af00      	add	r7, sp, #0
 8002cfc:	6078      	str	r0, [r7, #4]
 8002cfe:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002d06:	b2db      	uxtb	r3, r3
 8002d08:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002d0c:	2b28      	cmp	r3, #40	@ 0x28
 8002d0e:	d16a      	bne.n	8002de6 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	699b      	ldr	r3, [r3, #24]
 8002d16:	0c1b      	lsrs	r3, r3, #16
 8002d18:	b2db      	uxtb	r3, r3
 8002d1a:	f003 0301 	and.w	r3, r3, #1
 8002d1e:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	699b      	ldr	r3, [r3, #24]
 8002d26:	0c1b      	lsrs	r3, r3, #16
 8002d28:	b29b      	uxth	r3, r3
 8002d2a:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8002d2e:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	689b      	ldr	r3, [r3, #8]
 8002d36:	b29b      	uxth	r3, r3
 8002d38:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d3c:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	68db      	ldr	r3, [r3, #12]
 8002d44:	b29b      	uxth	r3, r3
 8002d46:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8002d4a:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	68db      	ldr	r3, [r3, #12]
 8002d50:	2b02      	cmp	r3, #2
 8002d52:	d138      	bne.n	8002dc6 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8002d54:	897b      	ldrh	r3, [r7, #10]
 8002d56:	09db      	lsrs	r3, r3, #7
 8002d58:	b29a      	uxth	r2, r3
 8002d5a:	89bb      	ldrh	r3, [r7, #12]
 8002d5c:	4053      	eors	r3, r2
 8002d5e:	b29b      	uxth	r3, r3
 8002d60:	f003 0306 	and.w	r3, r3, #6
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d11c      	bne.n	8002da2 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8002d68:	897b      	ldrh	r3, [r7, #10]
 8002d6a:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d70:	1c5a      	adds	r2, r3, #1
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d7a:	2b02      	cmp	r3, #2
 8002d7c:	d13b      	bne.n	8002df6 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2200      	movs	r2, #0
 8002d82:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	2208      	movs	r2, #8
 8002d8a:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002d94:	89ba      	ldrh	r2, [r7, #12]
 8002d96:	7bfb      	ldrb	r3, [r7, #15]
 8002d98:	4619      	mov	r1, r3
 8002d9a:	6878      	ldr	r0, [r7, #4]
 8002d9c:	f7ff fb8a 	bl	80024b4 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002da0:	e029      	b.n	8002df6 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8002da2:	893b      	ldrh	r3, [r7, #8]
 8002da4:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002da6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002daa:	6878      	ldr	r0, [r7, #4]
 8002dac:	f000 fdfc 	bl	80039a8 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2200      	movs	r2, #0
 8002db4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002db8:	89ba      	ldrh	r2, [r7, #12]
 8002dba:	7bfb      	ldrb	r3, [r7, #15]
 8002dbc:	4619      	mov	r1, r3
 8002dbe:	6878      	ldr	r0, [r7, #4]
 8002dc0:	f7ff fb78 	bl	80024b4 <HAL_I2C_AddrCallback>
}
 8002dc4:	e017      	b.n	8002df6 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002dc6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002dca:	6878      	ldr	r0, [r7, #4]
 8002dcc:	f000 fdec 	bl	80039a8 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002dd8:	89ba      	ldrh	r2, [r7, #12]
 8002dda:	7bfb      	ldrb	r3, [r7, #15]
 8002ddc:	4619      	mov	r1, r3
 8002dde:	6878      	ldr	r0, [r7, #4]
 8002de0:	f7ff fb68 	bl	80024b4 <HAL_I2C_AddrCallback>
}
 8002de4:	e007      	b.n	8002df6 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	2208      	movs	r2, #8
 8002dec:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2200      	movs	r2, #0
 8002df2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8002df6:	bf00      	nop
 8002df8:	3710      	adds	r7, #16
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}

08002dfe <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8002dfe:	b580      	push	{r7, lr}
 8002e00:	b082      	sub	sp, #8
 8002e02:	af00      	add	r7, sp, #0
 8002e04:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e14:	b2db      	uxtb	r3, r3
 8002e16:	2b21      	cmp	r3, #33	@ 0x21
 8002e18:	d115      	bne.n	8002e46 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2220      	movs	r2, #32
 8002e1e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2211      	movs	r2, #17
 8002e26:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002e2e:	2101      	movs	r1, #1
 8002e30:	6878      	ldr	r0, [r7, #4]
 8002e32:	f000 fdb9 	bl	80039a8 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2200      	movs	r2, #0
 8002e3a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8002e3e:	6878      	ldr	r0, [r7, #4]
 8002e40:	f7ff fb10 	bl	8002464 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002e44:	e014      	b.n	8002e70 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2220      	movs	r2, #32
 8002e4a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2212      	movs	r2, #18
 8002e52:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2200      	movs	r2, #0
 8002e58:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002e5a:	2102      	movs	r1, #2
 8002e5c:	6878      	ldr	r0, [r7, #4]
 8002e5e:	f000 fda3 	bl	80039a8 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2200      	movs	r2, #0
 8002e66:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8002e6a:	6878      	ldr	r0, [r7, #4]
 8002e6c:	f7ff fb04 	bl	8002478 <HAL_I2C_MasterRxCpltCallback>
}
 8002e70:	bf00      	nop
 8002e72:	3708      	adds	r7, #8
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bd80      	pop	{r7, pc}

08002e78 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b084      	sub	sp, #16
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d008      	beq.n	8002eac <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	681a      	ldr	r2, [r3, #0]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002ea8:	601a      	str	r2, [r3, #0]
 8002eaa:	e00c      	b.n	8002ec6 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d007      	beq.n	8002ec6 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	681a      	ldr	r2, [r3, #0]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002ec4:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ecc:	b2db      	uxtb	r3, r3
 8002ece:	2b29      	cmp	r3, #41	@ 0x29
 8002ed0:	d112      	bne.n	8002ef8 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2228      	movs	r2, #40	@ 0x28
 8002ed6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2221      	movs	r2, #33	@ 0x21
 8002ede:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002ee0:	2101      	movs	r1, #1
 8002ee2:	6878      	ldr	r0, [r7, #4]
 8002ee4:	f000 fd60 	bl	80039a8 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2200      	movs	r2, #0
 8002eec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002ef0:	6878      	ldr	r0, [r7, #4]
 8002ef2:	f7ff facb 	bl	800248c <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8002ef6:	e017      	b.n	8002f28 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002efe:	b2db      	uxtb	r3, r3
 8002f00:	2b2a      	cmp	r3, #42	@ 0x2a
 8002f02:	d111      	bne.n	8002f28 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2228      	movs	r2, #40	@ 0x28
 8002f08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2222      	movs	r2, #34	@ 0x22
 8002f10:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002f12:	2102      	movs	r1, #2
 8002f14:	6878      	ldr	r0, [r7, #4]
 8002f16:	f000 fd47 	bl	80039a8 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002f22:	6878      	ldr	r0, [r7, #4]
 8002f24:	f7ff fabc 	bl	80024a0 <HAL_I2C_SlaveRxCpltCallback>
}
 8002f28:	bf00      	nop
 8002f2a:	3710      	adds	r7, #16
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bd80      	pop	{r7, pc}

08002f30 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b086      	sub	sp, #24
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
 8002f38:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	2220      	movs	r2, #32
 8002f44:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f4c:	b2db      	uxtb	r3, r3
 8002f4e:	2b21      	cmp	r3, #33	@ 0x21
 8002f50:	d107      	bne.n	8002f62 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002f52:	2101      	movs	r1, #1
 8002f54:	6878      	ldr	r0, [r7, #4]
 8002f56:	f000 fd27 	bl	80039a8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2211      	movs	r2, #17
 8002f5e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002f60:	e00c      	b.n	8002f7c <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f68:	b2db      	uxtb	r3, r3
 8002f6a:	2b22      	cmp	r3, #34	@ 0x22
 8002f6c:	d106      	bne.n	8002f7c <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002f6e:	2102      	movs	r1, #2
 8002f70:	6878      	ldr	r0, [r7, #4]
 8002f72:	f000 fd19 	bl	80039a8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2212      	movs	r2, #18
 8002f7a:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	6859      	ldr	r1, [r3, #4]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681a      	ldr	r2, [r3, #0]
 8002f86:	4b4c      	ldr	r3, [pc, #304]	@ (80030b8 <I2C_ITMasterCplt+0x188>)
 8002f88:	400b      	ands	r3, r1
 8002f8a:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2200      	movs	r2, #0
 8002f90:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	4a49      	ldr	r2, [pc, #292]	@ (80030bc <I2C_ITMasterCplt+0x18c>)
 8002f96:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8002f98:	697b      	ldr	r3, [r7, #20]
 8002f9a:	f003 0310 	and.w	r3, r3, #16
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d009      	beq.n	8002fb6 <I2C_ITMasterCplt+0x86>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	2210      	movs	r2, #16
 8002fa8:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fae:	f043 0204 	orr.w	r2, r3, #4
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002fbc:	b2db      	uxtb	r3, r3
 8002fbe:	2b60      	cmp	r3, #96	@ 0x60
 8002fc0:	d10a      	bne.n	8002fd8 <I2C_ITMasterCplt+0xa8>
 8002fc2:	697b      	ldr	r3, [r7, #20]
 8002fc4:	f003 0304 	and.w	r3, r3, #4
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d005      	beq.n	8002fd8 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fd2:	b2db      	uxtb	r3, r3
 8002fd4:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8002fd6:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8002fd8:	6878      	ldr	r0, [r7, #4]
 8002fda:	f000 fb40 	bl	800365e <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fe2:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002fea:	b2db      	uxtb	r3, r3
 8002fec:	2b60      	cmp	r3, #96	@ 0x60
 8002fee:	d002      	beq.n	8002ff6 <I2C_ITMasterCplt+0xc6>
 8002ff0:	693b      	ldr	r3, [r7, #16]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d006      	beq.n	8003004 <I2C_ITMasterCplt+0xd4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ffa:	4619      	mov	r1, r3
 8002ffc:	6878      	ldr	r0, [r7, #4]
 8002ffe:	f000 fa17 	bl	8003430 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003002:	e054      	b.n	80030ae <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800300a:	b2db      	uxtb	r3, r3
 800300c:	2b21      	cmp	r3, #33	@ 0x21
 800300e:	d124      	bne.n	800305a <I2C_ITMasterCplt+0x12a>
    hi2c->State = HAL_I2C_STATE_READY;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2220      	movs	r2, #32
 8003014:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2200      	movs	r2, #0
 800301c:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003024:	b2db      	uxtb	r3, r3
 8003026:	2b40      	cmp	r3, #64	@ 0x40
 8003028:	d10b      	bne.n	8003042 <I2C_ITMasterCplt+0x112>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2200      	movs	r2, #0
 800302e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2200      	movs	r2, #0
 8003036:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 800303a:	6878      	ldr	r0, [r7, #4]
 800303c:	f7ff fa52 	bl	80024e4 <HAL_I2C_MemTxCpltCallback>
}
 8003040:	e035      	b.n	80030ae <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2200      	movs	r2, #0
 8003046:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2200      	movs	r2, #0
 800304e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003052:	6878      	ldr	r0, [r7, #4]
 8003054:	f7ff fa06 	bl	8002464 <HAL_I2C_MasterTxCpltCallback>
}
 8003058:	e029      	b.n	80030ae <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003060:	b2db      	uxtb	r3, r3
 8003062:	2b22      	cmp	r3, #34	@ 0x22
 8003064:	d123      	bne.n	80030ae <I2C_ITMasterCplt+0x17e>
    hi2c->State = HAL_I2C_STATE_READY;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2220      	movs	r2, #32
 800306a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2200      	movs	r2, #0
 8003072:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800307a:	b2db      	uxtb	r3, r3
 800307c:	2b40      	cmp	r3, #64	@ 0x40
 800307e:	d10b      	bne.n	8003098 <I2C_ITMasterCplt+0x168>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2200      	movs	r2, #0
 8003084:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2200      	movs	r2, #0
 800308c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003090:	6878      	ldr	r0, [r7, #4]
 8003092:	f7ff fa31 	bl	80024f8 <HAL_I2C_MemRxCpltCallback>
}
 8003096:	e00a      	b.n	80030ae <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2200      	movs	r2, #0
 800309c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2200      	movs	r2, #0
 80030a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80030a8:	6878      	ldr	r0, [r7, #4]
 80030aa:	f7ff f9e5 	bl	8002478 <HAL_I2C_MasterRxCpltCallback>
}
 80030ae:	bf00      	nop
 80030b0:	3718      	adds	r7, #24
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}
 80030b6:	bf00      	nop
 80030b8:	fe00e800 	.word	0xfe00e800
 80030bc:	ffff0000 	.word	0xffff0000

080030c0 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b086      	sub	sp, #24
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
 80030c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030da:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80030e2:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	2220      	movs	r2, #32
 80030ea:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80030ec:	7afb      	ldrb	r3, [r7, #11]
 80030ee:	2b21      	cmp	r3, #33	@ 0x21
 80030f0:	d002      	beq.n	80030f8 <I2C_ITSlaveCplt+0x38>
 80030f2:	7afb      	ldrb	r3, [r7, #11]
 80030f4:	2b29      	cmp	r3, #41	@ 0x29
 80030f6:	d108      	bne.n	800310a <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80030f8:	f248 0101 	movw	r1, #32769	@ 0x8001
 80030fc:	6878      	ldr	r0, [r7, #4]
 80030fe:	f000 fc53 	bl	80039a8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2221      	movs	r2, #33	@ 0x21
 8003106:	631a      	str	r2, [r3, #48]	@ 0x30
 8003108:	e019      	b.n	800313e <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800310a:	7afb      	ldrb	r3, [r7, #11]
 800310c:	2b22      	cmp	r3, #34	@ 0x22
 800310e:	d002      	beq.n	8003116 <I2C_ITSlaveCplt+0x56>
 8003110:	7afb      	ldrb	r3, [r7, #11]
 8003112:	2b2a      	cmp	r3, #42	@ 0x2a
 8003114:	d108      	bne.n	8003128 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8003116:	f248 0102 	movw	r1, #32770	@ 0x8002
 800311a:	6878      	ldr	r0, [r7, #4]
 800311c:	f000 fc44 	bl	80039a8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2222      	movs	r2, #34	@ 0x22
 8003124:	631a      	str	r2, [r3, #48]	@ 0x30
 8003126:	e00a      	b.n	800313e <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8003128:	7afb      	ldrb	r3, [r7, #11]
 800312a:	2b28      	cmp	r3, #40	@ 0x28
 800312c:	d107      	bne.n	800313e <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 800312e:	f248 0103 	movw	r1, #32771	@ 0x8003
 8003132:	6878      	ldr	r0, [r7, #4]
 8003134:	f000 fc38 	bl	80039a8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2200      	movs	r2, #0
 800313c:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	685a      	ldr	r2, [r3, #4]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800314c:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	6859      	ldr	r1, [r3, #4]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681a      	ldr	r2, [r3, #0]
 8003158:	4b89      	ldr	r3, [pc, #548]	@ (8003380 <I2C_ITSlaveCplt+0x2c0>)
 800315a:	400b      	ands	r3, r1
 800315c:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800315e:	6878      	ldr	r0, [r7, #4]
 8003160:	f000 fa7d 	bl	800365e <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003164:	693b      	ldr	r3, [r7, #16]
 8003166:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800316a:	2b00      	cmp	r3, #0
 800316c:	d013      	beq.n	8003196 <I2C_ITSlaveCplt+0xd6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	681a      	ldr	r2, [r3, #0]
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800317c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003182:	2b00      	cmp	r3, #0
 8003184:	d01f      	beq.n	80031c6 <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	b29a      	uxth	r2, r3
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003194:	e017      	b.n	80031c6 <I2C_ITSlaveCplt+0x106>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800319c:	2b00      	cmp	r3, #0
 800319e:	d012      	beq.n	80031c6 <I2C_ITSlaveCplt+0x106>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	681a      	ldr	r2, [r3, #0]
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80031ae:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d006      	beq.n	80031c6 <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	b29a      	uxth	r2, r3
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80031c6:	697b      	ldr	r3, [r7, #20]
 80031c8:	f003 0304 	and.w	r3, r3, #4
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d020      	beq.n	8003212 <I2C_ITSlaveCplt+0x152>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80031d0:	697b      	ldr	r3, [r7, #20]
 80031d2:	f023 0304 	bic.w	r3, r3, #4
 80031d6:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031e2:	b2d2      	uxtb	r2, r2
 80031e4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031ea:	1c5a      	adds	r2, r3, #1
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d00c      	beq.n	8003212 <I2C_ITSlaveCplt+0x152>
    {
      hi2c->XferSize--;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031fc:	3b01      	subs	r3, #1
 80031fe:	b29a      	uxth	r2, r3
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003208:	b29b      	uxth	r3, r3
 800320a:	3b01      	subs	r3, #1
 800320c:	b29a      	uxth	r2, r3
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003216:	b29b      	uxth	r3, r3
 8003218:	2b00      	cmp	r3, #0
 800321a:	d005      	beq.n	8003228 <I2C_ITSlaveCplt+0x168>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003220:	f043 0204 	orr.w	r2, r3, #4
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003228:	697b      	ldr	r3, [r7, #20]
 800322a:	f003 0310 	and.w	r3, r3, #16
 800322e:	2b00      	cmp	r3, #0
 8003230:	d049      	beq.n	80032c6 <I2C_ITSlaveCplt+0x206>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8003232:	693b      	ldr	r3, [r7, #16]
 8003234:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003238:	2b00      	cmp	r3, #0
 800323a:	d044      	beq.n	80032c6 <I2C_ITSlaveCplt+0x206>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003240:	b29b      	uxth	r3, r3
 8003242:	2b00      	cmp	r3, #0
 8003244:	d128      	bne.n	8003298 <I2C_ITSlaveCplt+0x1d8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800324c:	b2db      	uxtb	r3, r3
 800324e:	2b28      	cmp	r3, #40	@ 0x28
 8003250:	d108      	bne.n	8003264 <I2C_ITSlaveCplt+0x1a4>
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003258:	d104      	bne.n	8003264 <I2C_ITSlaveCplt+0x1a4>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800325a:	6979      	ldr	r1, [r7, #20]
 800325c:	6878      	ldr	r0, [r7, #4]
 800325e:	f000 f893 	bl	8003388 <I2C_ITListenCplt>
 8003262:	e030      	b.n	80032c6 <I2C_ITSlaveCplt+0x206>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800326a:	b2db      	uxtb	r3, r3
 800326c:	2b29      	cmp	r3, #41	@ 0x29
 800326e:	d10e      	bne.n	800328e <I2C_ITSlaveCplt+0x1ce>
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003276:	d00a      	beq.n	800328e <I2C_ITSlaveCplt+0x1ce>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	2210      	movs	r2, #16
 800327e:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8003280:	6878      	ldr	r0, [r7, #4]
 8003282:	f000 f9ec 	bl	800365e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003286:	6878      	ldr	r0, [r7, #4]
 8003288:	f7ff fdf6 	bl	8002e78 <I2C_ITSlaveSeqCplt>
 800328c:	e01b      	b.n	80032c6 <I2C_ITSlaveCplt+0x206>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	2210      	movs	r2, #16
 8003294:	61da      	str	r2, [r3, #28]
 8003296:	e016      	b.n	80032c6 <I2C_ITSlaveCplt+0x206>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	2210      	movs	r2, #16
 800329e:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032a4:	f043 0204 	orr.w	r2, r3, #4
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d003      	beq.n	80032ba <I2C_ITSlaveCplt+0x1fa>
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80032b8:	d105      	bne.n	80032c6 <I2C_ITSlaveCplt+0x206>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032be:	4619      	mov	r1, r3
 80032c0:	6878      	ldr	r0, [r7, #4]
 80032c2:	f000 f8b5 	bl	8003430 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2200      	movs	r2, #0
 80032ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2200      	movs	r2, #0
 80032d2:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d010      	beq.n	80032fe <I2C_ITSlaveCplt+0x23e>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032e0:	4619      	mov	r1, r3
 80032e2:	6878      	ldr	r0, [r7, #4]
 80032e4:	f000 f8a4 	bl	8003430 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80032ee:	b2db      	uxtb	r3, r3
 80032f0:	2b28      	cmp	r3, #40	@ 0x28
 80032f2:	d141      	bne.n	8003378 <I2C_ITSlaveCplt+0x2b8>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80032f4:	6979      	ldr	r1, [r7, #20]
 80032f6:	6878      	ldr	r0, [r7, #4]
 80032f8:	f000 f846 	bl	8003388 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80032fc:	e03c      	b.n	8003378 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003302:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003306:	d014      	beq.n	8003332 <I2C_ITSlaveCplt+0x272>
    I2C_ITSlaveSeqCplt(hi2c);
 8003308:	6878      	ldr	r0, [r7, #4]
 800330a:	f7ff fdb5 	bl	8002e78 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	4a1c      	ldr	r2, [pc, #112]	@ (8003384 <I2C_ITSlaveCplt+0x2c4>)
 8003312:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2220      	movs	r2, #32
 8003318:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2200      	movs	r2, #0
 8003320:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2200      	movs	r2, #0
 8003326:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800332a:	6878      	ldr	r0, [r7, #4]
 800332c:	f7ff f8d0 	bl	80024d0 <HAL_I2C_ListenCpltCallback>
}
 8003330:	e022      	b.n	8003378 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003338:	b2db      	uxtb	r3, r3
 800333a:	2b22      	cmp	r3, #34	@ 0x22
 800333c:	d10e      	bne.n	800335c <I2C_ITSlaveCplt+0x29c>
    hi2c->State = HAL_I2C_STATE_READY;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2220      	movs	r2, #32
 8003342:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2200      	movs	r2, #0
 800334a:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2200      	movs	r2, #0
 8003350:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003354:	6878      	ldr	r0, [r7, #4]
 8003356:	f7ff f8a3 	bl	80024a0 <HAL_I2C_SlaveRxCpltCallback>
}
 800335a:	e00d      	b.n	8003378 <I2C_ITSlaveCplt+0x2b8>
    hi2c->State = HAL_I2C_STATE_READY;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2220      	movs	r2, #32
 8003360:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2200      	movs	r2, #0
 8003368:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2200      	movs	r2, #0
 800336e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003372:	6878      	ldr	r0, [r7, #4]
 8003374:	f7ff f88a 	bl	800248c <HAL_I2C_SlaveTxCpltCallback>
}
 8003378:	bf00      	nop
 800337a:	3718      	adds	r7, #24
 800337c:	46bd      	mov	sp, r7
 800337e:	bd80      	pop	{r7, pc}
 8003380:	fe00e800 	.word	0xfe00e800
 8003384:	ffff0000 	.word	0xffff0000

08003388 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b082      	sub	sp, #8
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
 8003390:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	4a25      	ldr	r2, [pc, #148]	@ (800342c <I2C_ITListenCplt+0xa4>)
 8003396:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2200      	movs	r2, #0
 800339c:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2220      	movs	r2, #32
 80033a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2200      	movs	r2, #0
 80033aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2200      	movs	r2, #0
 80033b2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	f003 0304 	and.w	r3, r3, #4
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d022      	beq.n	8003404 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033c8:	b2d2      	uxtb	r2, r2
 80033ca:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033d0:	1c5a      	adds	r2, r3, #1
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d012      	beq.n	8003404 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033e2:	3b01      	subs	r3, #1
 80033e4:	b29a      	uxth	r2, r3
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033ee:	b29b      	uxth	r3, r3
 80033f0:	3b01      	subs	r3, #1
 80033f2:	b29a      	uxth	r2, r3
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033fc:	f043 0204 	orr.w	r2, r3, #4
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003404:	f248 0103 	movw	r1, #32771	@ 0x8003
 8003408:	6878      	ldr	r0, [r7, #4]
 800340a:	f000 facd 	bl	80039a8 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	2210      	movs	r2, #16
 8003414:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2200      	movs	r2, #0
 800341a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800341e:	6878      	ldr	r0, [r7, #4]
 8003420:	f7ff f856 	bl	80024d0 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8003424:	bf00      	nop
 8003426:	3708      	adds	r7, #8
 8003428:	46bd      	mov	sp, r7
 800342a:	bd80      	pop	{r7, pc}
 800342c:	ffff0000 	.word	0xffff0000

08003430 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b084      	sub	sp, #16
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
 8003438:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003440:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2200      	movs	r2, #0
 8003446:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	4a6d      	ldr	r2, [pc, #436]	@ (8003604 <I2C_ITError+0x1d4>)
 800344e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2200      	movs	r2, #0
 8003454:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	431a      	orrs	r2, r3
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8003462:	7bfb      	ldrb	r3, [r7, #15]
 8003464:	2b28      	cmp	r3, #40	@ 0x28
 8003466:	d005      	beq.n	8003474 <I2C_ITError+0x44>
 8003468:	7bfb      	ldrb	r3, [r7, #15]
 800346a:	2b29      	cmp	r3, #41	@ 0x29
 800346c:	d002      	beq.n	8003474 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800346e:	7bfb      	ldrb	r3, [r7, #15]
 8003470:	2b2a      	cmp	r3, #42	@ 0x2a
 8003472:	d10b      	bne.n	800348c <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003474:	2103      	movs	r1, #3
 8003476:	6878      	ldr	r0, [r7, #4]
 8003478:	f000 fa96 	bl	80039a8 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2228      	movs	r2, #40	@ 0x28
 8003480:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	4a60      	ldr	r2, [pc, #384]	@ (8003608 <I2C_ITError+0x1d8>)
 8003488:	635a      	str	r2, [r3, #52]	@ 0x34
 800348a:	e030      	b.n	80034ee <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800348c:	f248 0103 	movw	r1, #32771	@ 0x8003
 8003490:	6878      	ldr	r0, [r7, #4]
 8003492:	f000 fa89 	bl	80039a8 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003496:	6878      	ldr	r0, [r7, #4]
 8003498:	f000 f8e1 	bl	800365e <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80034a2:	b2db      	uxtb	r3, r3
 80034a4:	2b60      	cmp	r3, #96	@ 0x60
 80034a6:	d01f      	beq.n	80034e8 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2220      	movs	r2, #32
 80034ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	699b      	ldr	r3, [r3, #24]
 80034b6:	f003 0320 	and.w	r3, r3, #32
 80034ba:	2b20      	cmp	r3, #32
 80034bc:	d114      	bne.n	80034e8 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	699b      	ldr	r3, [r3, #24]
 80034c4:	f003 0310 	and.w	r3, r3, #16
 80034c8:	2b10      	cmp	r3, #16
 80034ca:	d109      	bne.n	80034e0 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	2210      	movs	r2, #16
 80034d2:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034d8:	f043 0204 	orr.w	r2, r3, #4
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	2220      	movs	r2, #32
 80034e6:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2200      	movs	r2, #0
 80034ec:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034f2:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d039      	beq.n	8003570 <I2C_ITError+0x140>
 80034fc:	68bb      	ldr	r3, [r7, #8]
 80034fe:	2b11      	cmp	r3, #17
 8003500:	d002      	beq.n	8003508 <I2C_ITError+0xd8>
 8003502:	68bb      	ldr	r3, [r7, #8]
 8003504:	2b21      	cmp	r3, #33	@ 0x21
 8003506:	d133      	bne.n	8003570 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003512:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003516:	d107      	bne.n	8003528 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	681a      	ldr	r2, [r3, #0]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003526:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800352c:	4618      	mov	r0, r3
 800352e:	f7fe face 	bl	8001ace <HAL_DMA_GetState>
 8003532:	4603      	mov	r3, r0
 8003534:	2b01      	cmp	r3, #1
 8003536:	d017      	beq.n	8003568 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800353c:	4a33      	ldr	r2, [pc, #204]	@ (800360c <I2C_ITError+0x1dc>)
 800353e:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2200      	movs	r2, #0
 8003544:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800354c:	4618      	mov	r0, r3
 800354e:	f7fe f9a8 	bl	80018a2 <HAL_DMA_Abort_IT>
 8003552:	4603      	mov	r3, r0
 8003554:	2b00      	cmp	r3, #0
 8003556:	d04d      	beq.n	80035f4 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800355c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800355e:	687a      	ldr	r2, [r7, #4]
 8003560:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003562:	4610      	mov	r0, r2
 8003564:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003566:	e045      	b.n	80035f4 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003568:	6878      	ldr	r0, [r7, #4]
 800356a:	f000 f851 	bl	8003610 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800356e:	e041      	b.n	80035f4 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003574:	2b00      	cmp	r3, #0
 8003576:	d039      	beq.n	80035ec <I2C_ITError+0x1bc>
 8003578:	68bb      	ldr	r3, [r7, #8]
 800357a:	2b12      	cmp	r3, #18
 800357c:	d002      	beq.n	8003584 <I2C_ITError+0x154>
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	2b22      	cmp	r3, #34	@ 0x22
 8003582:	d133      	bne.n	80035ec <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800358e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003592:	d107      	bne.n	80035a4 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	681a      	ldr	r2, [r3, #0]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80035a2:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035a8:	4618      	mov	r0, r3
 80035aa:	f7fe fa90 	bl	8001ace <HAL_DMA_GetState>
 80035ae:	4603      	mov	r3, r0
 80035b0:	2b01      	cmp	r3, #1
 80035b2:	d017      	beq.n	80035e4 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035b8:	4a14      	ldr	r2, [pc, #80]	@ (800360c <I2C_ITError+0x1dc>)
 80035ba:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2200      	movs	r2, #0
 80035c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035c8:	4618      	mov	r0, r3
 80035ca:	f7fe f96a 	bl	80018a2 <HAL_DMA_Abort_IT>
 80035ce:	4603      	mov	r3, r0
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d011      	beq.n	80035f8 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035da:	687a      	ldr	r2, [r7, #4]
 80035dc:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80035de:	4610      	mov	r0, r2
 80035e0:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80035e2:	e009      	b.n	80035f8 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80035e4:	6878      	ldr	r0, [r7, #4]
 80035e6:	f000 f813 	bl	8003610 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80035ea:	e005      	b.n	80035f8 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80035ec:	6878      	ldr	r0, [r7, #4]
 80035ee:	f000 f80f 	bl	8003610 <I2C_TreatErrorCallback>
  }
}
 80035f2:	e002      	b.n	80035fa <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80035f4:	bf00      	nop
 80035f6:	e000      	b.n	80035fa <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80035f8:	bf00      	nop
}
 80035fa:	bf00      	nop
 80035fc:	3710      	adds	r7, #16
 80035fe:	46bd      	mov	sp, r7
 8003600:	bd80      	pop	{r7, pc}
 8003602:	bf00      	nop
 8003604:	ffff0000 	.word	0xffff0000
 8003608:	08002535 	.word	0x08002535
 800360c:	08003801 	.word	0x08003801

08003610 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b082      	sub	sp, #8
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800361e:	b2db      	uxtb	r3, r3
 8003620:	2b60      	cmp	r3, #96	@ 0x60
 8003622:	d10e      	bne.n	8003642 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2220      	movs	r2, #32
 8003628:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2200      	movs	r2, #0
 8003630:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2200      	movs	r2, #0
 8003636:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800363a:	6878      	ldr	r0, [r7, #4]
 800363c:	f7fe ff70 	bl	8002520 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003640:	e009      	b.n	8003656 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2200      	movs	r2, #0
 8003646:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2200      	movs	r2, #0
 800364c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8003650:	6878      	ldr	r0, [r7, #4]
 8003652:	f7fe ff5b 	bl	800250c <HAL_I2C_ErrorCallback>
}
 8003656:	bf00      	nop
 8003658:	3708      	adds	r7, #8
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}

0800365e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800365e:	b480      	push	{r7}
 8003660:	b083      	sub	sp, #12
 8003662:	af00      	add	r7, sp, #0
 8003664:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	699b      	ldr	r3, [r3, #24]
 800366c:	f003 0302 	and.w	r3, r3, #2
 8003670:	2b02      	cmp	r3, #2
 8003672:	d103      	bne.n	800367c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	2200      	movs	r2, #0
 800367a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	699b      	ldr	r3, [r3, #24]
 8003682:	f003 0301 	and.w	r3, r3, #1
 8003686:	2b01      	cmp	r3, #1
 8003688:	d007      	beq.n	800369a <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	699a      	ldr	r2, [r3, #24]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f042 0201 	orr.w	r2, r2, #1
 8003698:	619a      	str	r2, [r3, #24]
  }
}
 800369a:	bf00      	nop
 800369c:	370c      	adds	r7, #12
 800369e:	46bd      	mov	sp, r7
 80036a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a4:	4770      	bx	lr

080036a6 <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80036a6:	b580      	push	{r7, lr}
 80036a8:	b084      	sub	sp, #16
 80036aa:	af00      	add	r7, sp, #0
 80036ac:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036b2:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	681a      	ldr	r2, [r3, #0]
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80036c2:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036c8:	b29b      	uxth	r3, r3
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d104      	bne.n	80036d8 <I2C_DMAMasterTransmitCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80036ce:	2120      	movs	r1, #32
 80036d0:	68f8      	ldr	r0, [r7, #12]
 80036d2:	f000 f8e5 	bl	80038a0 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 80036d6:	e02d      	b.n	8003734 <I2C_DMAMasterTransmitCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036dc:	68fa      	ldr	r2, [r7, #12]
 80036de:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 80036e0:	441a      	add	r2, r3
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036ea:	b29b      	uxth	r3, r3
 80036ec:	2bff      	cmp	r3, #255	@ 0xff
 80036ee:	d903      	bls.n	80036f8 <I2C_DMAMasterTransmitCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	22ff      	movs	r2, #255	@ 0xff
 80036f4:	851a      	strh	r2, [r3, #40]	@ 0x28
 80036f6:	e004      	b.n	8003702 <I2C_DMAMasterTransmitCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036fc:	b29a      	uxth	r2, r3
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800370a:	4619      	mov	r1, r3
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	3328      	adds	r3, #40	@ 0x28
 8003712:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8003718:	f7fe f848 	bl	80017ac <HAL_DMA_Start_IT>
 800371c:	4603      	mov	r3, r0
 800371e:	2b00      	cmp	r3, #0
 8003720:	d004      	beq.n	800372c <I2C_DMAMasterTransmitCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8003722:	2110      	movs	r1, #16
 8003724:	68f8      	ldr	r0, [r7, #12]
 8003726:	f7ff fe83 	bl	8003430 <I2C_ITError>
}
 800372a:	e003      	b.n	8003734 <I2C_DMAMasterTransmitCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 800372c:	2140      	movs	r1, #64	@ 0x40
 800372e:	68f8      	ldr	r0, [r7, #12]
 8003730:	f000 f8b6 	bl	80038a0 <I2C_Enable_IRQ>
}
 8003734:	bf00      	nop
 8003736:	3710      	adds	r7, #16
 8003738:	46bd      	mov	sp, r7
 800373a:	bd80      	pop	{r7, pc}

0800373c <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b084      	sub	sp, #16
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003748:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	681a      	ldr	r2, [r3, #0]
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003758:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800375e:	b29b      	uxth	r3, r3
 8003760:	2b00      	cmp	r3, #0
 8003762:	d104      	bne.n	800376e <I2C_DMAMasterReceiveCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8003764:	2120      	movs	r1, #32
 8003766:	68f8      	ldr	r0, [r7, #12]
 8003768:	f000 f89a 	bl	80038a0 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 800376c:	e02d      	b.n	80037ca <I2C_DMAMasterReceiveCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003772:	68fa      	ldr	r2, [r7, #12]
 8003774:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8003776:	441a      	add	r2, r3
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003780:	b29b      	uxth	r3, r3
 8003782:	2bff      	cmp	r3, #255	@ 0xff
 8003784:	d903      	bls.n	800378e <I2C_DMAMasterReceiveCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	22ff      	movs	r2, #255	@ 0xff
 800378a:	851a      	strh	r2, [r3, #40]	@ 0x28
 800378c:	e004      	b.n	8003798 <I2C_DMAMasterReceiveCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003792:	b29a      	uxth	r2, r3
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	3324      	adds	r3, #36	@ 0x24
 80037a2:	4619      	mov	r1, r3
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037a8:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 80037ae:	f7fd fffd 	bl	80017ac <HAL_DMA_Start_IT>
 80037b2:	4603      	mov	r3, r0
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d004      	beq.n	80037c2 <I2C_DMAMasterReceiveCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 80037b8:	2110      	movs	r1, #16
 80037ba:	68f8      	ldr	r0, [r7, #12]
 80037bc:	f7ff fe38 	bl	8003430 <I2C_ITError>
}
 80037c0:	e003      	b.n	80037ca <I2C_DMAMasterReceiveCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 80037c2:	2140      	movs	r1, #64	@ 0x40
 80037c4:	68f8      	ldr	r0, [r7, #12]
 80037c6:	f000 f86b 	bl	80038a0 <I2C_Enable_IRQ>
}
 80037ca:	bf00      	nop
 80037cc:	3710      	adds	r7, #16
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bd80      	pop	{r7, pc}

080037d2 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 80037d2:	b580      	push	{r7, lr}
 80037d4:	b084      	sub	sp, #16
 80037d6:	af00      	add	r7, sp, #0
 80037d8:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037de:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	685a      	ldr	r2, [r3, #4]
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80037ee:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 80037f0:	2110      	movs	r1, #16
 80037f2:	68f8      	ldr	r0, [r7, #12]
 80037f4:	f7ff fe1c 	bl	8003430 <I2C_ITError>
}
 80037f8:	bf00      	nop
 80037fa:	3710      	adds	r7, #16
 80037fc:	46bd      	mov	sp, r7
 80037fe:	bd80      	pop	{r7, pc}

08003800 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b084      	sub	sp, #16
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800380c:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003812:	2b00      	cmp	r3, #0
 8003814:	d003      	beq.n	800381e <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800381a:	2200      	movs	r2, #0
 800381c:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003822:	2b00      	cmp	r3, #0
 8003824:	d003      	beq.n	800382e <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800382a:	2200      	movs	r2, #0
 800382c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 800382e:	68f8      	ldr	r0, [r7, #12]
 8003830:	f7ff feee 	bl	8003610 <I2C_TreatErrorCallback>
}
 8003834:	bf00      	nop
 8003836:	3710      	adds	r7, #16
 8003838:	46bd      	mov	sp, r7
 800383a:	bd80      	pop	{r7, pc}

0800383c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800383c:	b480      	push	{r7}
 800383e:	b087      	sub	sp, #28
 8003840:	af00      	add	r7, sp, #0
 8003842:	60f8      	str	r0, [r7, #12]
 8003844:	607b      	str	r3, [r7, #4]
 8003846:	460b      	mov	r3, r1
 8003848:	817b      	strh	r3, [r7, #10]
 800384a:	4613      	mov	r3, r2
 800384c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800384e:	897b      	ldrh	r3, [r7, #10]
 8003850:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003854:	7a7b      	ldrb	r3, [r7, #9]
 8003856:	041b      	lsls	r3, r3, #16
 8003858:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800385c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003862:	6a3b      	ldr	r3, [r7, #32]
 8003864:	4313      	orrs	r3, r2
 8003866:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800386a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	685a      	ldr	r2, [r3, #4]
 8003872:	6a3b      	ldr	r3, [r7, #32]
 8003874:	0d5b      	lsrs	r3, r3, #21
 8003876:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800387a:	4b08      	ldr	r3, [pc, #32]	@ (800389c <I2C_TransferConfig+0x60>)
 800387c:	430b      	orrs	r3, r1
 800387e:	43db      	mvns	r3, r3
 8003880:	ea02 0103 	and.w	r1, r2, r3
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	697a      	ldr	r2, [r7, #20]
 800388a:	430a      	orrs	r2, r1
 800388c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800388e:	bf00      	nop
 8003890:	371c      	adds	r7, #28
 8003892:	46bd      	mov	sp, r7
 8003894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003898:	4770      	bx	lr
 800389a:	bf00      	nop
 800389c:	03ff63ff 	.word	0x03ff63ff

080038a0 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80038a0:	b480      	push	{r7}
 80038a2:	b085      	sub	sp, #20
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
 80038a8:	460b      	mov	r3, r1
 80038aa:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80038ac:	2300      	movs	r3, #0
 80038ae:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038b4:	4a39      	ldr	r2, [pc, #228]	@ (800399c <I2C_Enable_IRQ+0xfc>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d032      	beq.n	8003920 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 80038be:	4a38      	ldr	r2, [pc, #224]	@ (80039a0 <I2C_Enable_IRQ+0x100>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d02d      	beq.n	8003920 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 80038c8:	4a36      	ldr	r2, [pc, #216]	@ (80039a4 <I2C_Enable_IRQ+0x104>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d028      	beq.n	8003920 <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80038ce:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	da03      	bge.n	80038de <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 80038dc:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80038de:	887b      	ldrh	r3, [r7, #2]
 80038e0:	f003 0301 	and.w	r3, r3, #1
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d003      	beq.n	80038f0 <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 80038ee:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80038f0:	887b      	ldrh	r3, [r7, #2]
 80038f2:	f003 0302 	and.w	r3, r3, #2
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d003      	beq.n	8003902 <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8003900:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003902:	887b      	ldrh	r3, [r7, #2]
 8003904:	2b10      	cmp	r3, #16
 8003906:	d103      	bne.n	8003910 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 800390e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003910:	887b      	ldrh	r3, [r7, #2]
 8003912:	2b20      	cmp	r3, #32
 8003914:	d133      	bne.n	800397e <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	f043 0320 	orr.w	r3, r3, #32
 800391c:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800391e:	e02e      	b.n	800397e <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003920:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003924:	2b00      	cmp	r3, #0
 8003926:	da03      	bge.n	8003930 <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 800392e:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003930:	887b      	ldrh	r3, [r7, #2]
 8003932:	f003 0301 	and.w	r3, r3, #1
 8003936:	2b00      	cmp	r3, #0
 8003938:	d003      	beq.n	8003942 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8003940:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003942:	887b      	ldrh	r3, [r7, #2]
 8003944:	f003 0302 	and.w	r3, r3, #2
 8003948:	2b00      	cmp	r3, #0
 800394a:	d003      	beq.n	8003954 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8003952:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003954:	887b      	ldrh	r3, [r7, #2]
 8003956:	2b10      	cmp	r3, #16
 8003958:	d103      	bne.n	8003962 <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8003960:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003962:	887b      	ldrh	r3, [r7, #2]
 8003964:	2b20      	cmp	r3, #32
 8003966:	d103      	bne.n	8003970 <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800396e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003970:	887b      	ldrh	r3, [r7, #2]
 8003972:	2b40      	cmp	r3, #64	@ 0x40
 8003974:	d103      	bne.n	800397e <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800397c:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	6819      	ldr	r1, [r3, #0]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	68fa      	ldr	r2, [r7, #12]
 800398a:	430a      	orrs	r2, r1
 800398c:	601a      	str	r2, [r3, #0]
}
 800398e:	bf00      	nop
 8003990:	3714      	adds	r7, #20
 8003992:	46bd      	mov	sp, r7
 8003994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003998:	4770      	bx	lr
 800399a:	bf00      	nop
 800399c:	08002727 	.word	0x08002727
 80039a0:	08002b49 	.word	0x08002b49
 80039a4:	080028fd 	.word	0x080028fd

080039a8 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80039a8:	b480      	push	{r7}
 80039aa:	b085      	sub	sp, #20
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
 80039b0:	460b      	mov	r3, r1
 80039b2:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80039b4:	2300      	movs	r3, #0
 80039b6:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80039b8:	887b      	ldrh	r3, [r7, #2]
 80039ba:	f003 0301 	and.w	r3, r3, #1
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d00f      	beq.n	80039e2 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 80039c8:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80039d0:	b2db      	uxtb	r3, r3
 80039d2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80039d6:	2b28      	cmp	r3, #40	@ 0x28
 80039d8:	d003      	beq.n	80039e2 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 80039e0:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80039e2:	887b      	ldrh	r3, [r7, #2]
 80039e4:	f003 0302 	and.w	r3, r3, #2
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d00f      	beq.n	8003a0c <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 80039f2:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80039fa:	b2db      	uxtb	r3, r3
 80039fc:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003a00:	2b28      	cmp	r3, #40	@ 0x28
 8003a02:	d003      	beq.n	8003a0c <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8003a0a:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003a0c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	da03      	bge.n	8003a1c <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8003a1a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003a1c:	887b      	ldrh	r3, [r7, #2]
 8003a1e:	2b10      	cmp	r3, #16
 8003a20:	d103      	bne.n	8003a2a <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8003a28:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003a2a:	887b      	ldrh	r3, [r7, #2]
 8003a2c:	2b20      	cmp	r3, #32
 8003a2e:	d103      	bne.n	8003a38 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	f043 0320 	orr.w	r3, r3, #32
 8003a36:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003a38:	887b      	ldrh	r3, [r7, #2]
 8003a3a:	2b40      	cmp	r3, #64	@ 0x40
 8003a3c:	d103      	bne.n	8003a46 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003a44:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	6819      	ldr	r1, [r3, #0]
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	43da      	mvns	r2, r3
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	400a      	ands	r2, r1
 8003a56:	601a      	str	r2, [r3, #0]
}
 8003a58:	bf00      	nop
 8003a5a:	3714      	adds	r7, #20
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a62:	4770      	bx	lr

08003a64 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003a64:	b480      	push	{r7}
 8003a66:	b083      	sub	sp, #12
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
 8003a6c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a74:	b2db      	uxtb	r3, r3
 8003a76:	2b20      	cmp	r3, #32
 8003a78:	d138      	bne.n	8003aec <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003a80:	2b01      	cmp	r3, #1
 8003a82:	d101      	bne.n	8003a88 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003a84:	2302      	movs	r3, #2
 8003a86:	e032      	b.n	8003aee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2201      	movs	r2, #1
 8003a8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2224      	movs	r2, #36	@ 0x24
 8003a94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	681a      	ldr	r2, [r3, #0]
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f022 0201 	bic.w	r2, r2, #1
 8003aa6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	681a      	ldr	r2, [r3, #0]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003ab6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	6819      	ldr	r1, [r3, #0]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	683a      	ldr	r2, [r7, #0]
 8003ac4:	430a      	orrs	r2, r1
 8003ac6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	681a      	ldr	r2, [r3, #0]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f042 0201 	orr.w	r2, r2, #1
 8003ad6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2220      	movs	r2, #32
 8003adc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003ae8:	2300      	movs	r3, #0
 8003aea:	e000      	b.n	8003aee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003aec:	2302      	movs	r3, #2
  }
}
 8003aee:	4618      	mov	r0, r3
 8003af0:	370c      	adds	r7, #12
 8003af2:	46bd      	mov	sp, r7
 8003af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af8:	4770      	bx	lr

08003afa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003afa:	b480      	push	{r7}
 8003afc:	b085      	sub	sp, #20
 8003afe:	af00      	add	r7, sp, #0
 8003b00:	6078      	str	r0, [r7, #4]
 8003b02:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b0a:	b2db      	uxtb	r3, r3
 8003b0c:	2b20      	cmp	r3, #32
 8003b0e:	d139      	bne.n	8003b84 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003b16:	2b01      	cmp	r3, #1
 8003b18:	d101      	bne.n	8003b1e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003b1a:	2302      	movs	r3, #2
 8003b1c:	e033      	b.n	8003b86 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2201      	movs	r2, #1
 8003b22:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2224      	movs	r2, #36	@ 0x24
 8003b2a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	681a      	ldr	r2, [r3, #0]
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f022 0201 	bic.w	r2, r2, #1
 8003b3c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003b4c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	021b      	lsls	r3, r3, #8
 8003b52:	68fa      	ldr	r2, [r7, #12]
 8003b54:	4313      	orrs	r3, r2
 8003b56:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	68fa      	ldr	r2, [r7, #12]
 8003b5e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	681a      	ldr	r2, [r3, #0]
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f042 0201 	orr.w	r2, r2, #1
 8003b6e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2220      	movs	r2, #32
 8003b74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003b80:	2300      	movs	r3, #0
 8003b82:	e000      	b.n	8003b86 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003b84:	2302      	movs	r3, #2
  }
}
 8003b86:	4618      	mov	r0, r3
 8003b88:	3714      	adds	r7, #20
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b90:	4770      	bx	lr
	...

08003b94 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003b94:	b480      	push	{r7}
 8003b96:	b085      	sub	sp, #20
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d141      	bne.n	8003c26 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003ba2:	4b4b      	ldr	r3, [pc, #300]	@ (8003cd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003baa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003bae:	d131      	bne.n	8003c14 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003bb0:	4b47      	ldr	r3, [pc, #284]	@ (8003cd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003bb6:	4a46      	ldr	r2, [pc, #280]	@ (8003cd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bb8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003bbc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003bc0:	4b43      	ldr	r3, [pc, #268]	@ (8003cd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003bc8:	4a41      	ldr	r2, [pc, #260]	@ (8003cd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bca:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003bce:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003bd0:	4b40      	ldr	r3, [pc, #256]	@ (8003cd4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	2232      	movs	r2, #50	@ 0x32
 8003bd6:	fb02 f303 	mul.w	r3, r2, r3
 8003bda:	4a3f      	ldr	r2, [pc, #252]	@ (8003cd8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003bdc:	fba2 2303 	umull	r2, r3, r2, r3
 8003be0:	0c9b      	lsrs	r3, r3, #18
 8003be2:	3301      	adds	r3, #1
 8003be4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003be6:	e002      	b.n	8003bee <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	3b01      	subs	r3, #1
 8003bec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003bee:	4b38      	ldr	r3, [pc, #224]	@ (8003cd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bf0:	695b      	ldr	r3, [r3, #20]
 8003bf2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003bf6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003bfa:	d102      	bne.n	8003c02 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d1f2      	bne.n	8003be8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003c02:	4b33      	ldr	r3, [pc, #204]	@ (8003cd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c04:	695b      	ldr	r3, [r3, #20]
 8003c06:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c0a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c0e:	d158      	bne.n	8003cc2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003c10:	2303      	movs	r3, #3
 8003c12:	e057      	b.n	8003cc4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003c14:	4b2e      	ldr	r3, [pc, #184]	@ (8003cd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c16:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003c1a:	4a2d      	ldr	r2, [pc, #180]	@ (8003cd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c1c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003c20:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003c24:	e04d      	b.n	8003cc2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003c2c:	d141      	bne.n	8003cb2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003c2e:	4b28      	ldr	r3, [pc, #160]	@ (8003cd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003c36:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c3a:	d131      	bne.n	8003ca0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003c3c:	4b24      	ldr	r3, [pc, #144]	@ (8003cd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003c42:	4a23      	ldr	r2, [pc, #140]	@ (8003cd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c44:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c48:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003c4c:	4b20      	ldr	r3, [pc, #128]	@ (8003cd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003c54:	4a1e      	ldr	r2, [pc, #120]	@ (8003cd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c56:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003c5a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003c5c:	4b1d      	ldr	r3, [pc, #116]	@ (8003cd4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	2232      	movs	r2, #50	@ 0x32
 8003c62:	fb02 f303 	mul.w	r3, r2, r3
 8003c66:	4a1c      	ldr	r2, [pc, #112]	@ (8003cd8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003c68:	fba2 2303 	umull	r2, r3, r2, r3
 8003c6c:	0c9b      	lsrs	r3, r3, #18
 8003c6e:	3301      	adds	r3, #1
 8003c70:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003c72:	e002      	b.n	8003c7a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	3b01      	subs	r3, #1
 8003c78:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003c7a:	4b15      	ldr	r3, [pc, #84]	@ (8003cd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c7c:	695b      	ldr	r3, [r3, #20]
 8003c7e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c82:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c86:	d102      	bne.n	8003c8e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d1f2      	bne.n	8003c74 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003c8e:	4b10      	ldr	r3, [pc, #64]	@ (8003cd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c90:	695b      	ldr	r3, [r3, #20]
 8003c92:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c96:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c9a:	d112      	bne.n	8003cc2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003c9c:	2303      	movs	r3, #3
 8003c9e:	e011      	b.n	8003cc4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003ca0:	4b0b      	ldr	r3, [pc, #44]	@ (8003cd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ca2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003ca6:	4a0a      	ldr	r2, [pc, #40]	@ (8003cd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ca8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003cac:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003cb0:	e007      	b.n	8003cc2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003cb2:	4b07      	ldr	r3, [pc, #28]	@ (8003cd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003cba:	4a05      	ldr	r2, [pc, #20]	@ (8003cd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cbc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003cc0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003cc2:	2300      	movs	r3, #0
}
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	3714      	adds	r7, #20
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cce:	4770      	bx	lr
 8003cd0:	40007000 	.word	0x40007000
 8003cd4:	20000000 	.word	0x20000000
 8003cd8:	431bde83 	.word	0x431bde83

08003cdc <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003ce0:	4b05      	ldr	r3, [pc, #20]	@ (8003cf8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003ce2:	689b      	ldr	r3, [r3, #8]
 8003ce4:	4a04      	ldr	r2, [pc, #16]	@ (8003cf8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003ce6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003cea:	6093      	str	r3, [r2, #8]
}
 8003cec:	bf00      	nop
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf4:	4770      	bx	lr
 8003cf6:	bf00      	nop
 8003cf8:	40007000 	.word	0x40007000

08003cfc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b088      	sub	sp, #32
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d101      	bne.n	8003d0e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	e2fe      	b.n	800430c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f003 0301 	and.w	r3, r3, #1
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d075      	beq.n	8003e06 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d1a:	4b97      	ldr	r3, [pc, #604]	@ (8003f78 <HAL_RCC_OscConfig+0x27c>)
 8003d1c:	689b      	ldr	r3, [r3, #8]
 8003d1e:	f003 030c 	and.w	r3, r3, #12
 8003d22:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003d24:	4b94      	ldr	r3, [pc, #592]	@ (8003f78 <HAL_RCC_OscConfig+0x27c>)
 8003d26:	68db      	ldr	r3, [r3, #12]
 8003d28:	f003 0303 	and.w	r3, r3, #3
 8003d2c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003d2e:	69bb      	ldr	r3, [r7, #24]
 8003d30:	2b0c      	cmp	r3, #12
 8003d32:	d102      	bne.n	8003d3a <HAL_RCC_OscConfig+0x3e>
 8003d34:	697b      	ldr	r3, [r7, #20]
 8003d36:	2b03      	cmp	r3, #3
 8003d38:	d002      	beq.n	8003d40 <HAL_RCC_OscConfig+0x44>
 8003d3a:	69bb      	ldr	r3, [r7, #24]
 8003d3c:	2b08      	cmp	r3, #8
 8003d3e:	d10b      	bne.n	8003d58 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d40:	4b8d      	ldr	r3, [pc, #564]	@ (8003f78 <HAL_RCC_OscConfig+0x27c>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d05b      	beq.n	8003e04 <HAL_RCC_OscConfig+0x108>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d157      	bne.n	8003e04 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003d54:	2301      	movs	r3, #1
 8003d56:	e2d9      	b.n	800430c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	685b      	ldr	r3, [r3, #4]
 8003d5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d60:	d106      	bne.n	8003d70 <HAL_RCC_OscConfig+0x74>
 8003d62:	4b85      	ldr	r3, [pc, #532]	@ (8003f78 <HAL_RCC_OscConfig+0x27c>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4a84      	ldr	r2, [pc, #528]	@ (8003f78 <HAL_RCC_OscConfig+0x27c>)
 8003d68:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d6c:	6013      	str	r3, [r2, #0]
 8003d6e:	e01d      	b.n	8003dac <HAL_RCC_OscConfig+0xb0>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003d78:	d10c      	bne.n	8003d94 <HAL_RCC_OscConfig+0x98>
 8003d7a:	4b7f      	ldr	r3, [pc, #508]	@ (8003f78 <HAL_RCC_OscConfig+0x27c>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a7e      	ldr	r2, [pc, #504]	@ (8003f78 <HAL_RCC_OscConfig+0x27c>)
 8003d80:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003d84:	6013      	str	r3, [r2, #0]
 8003d86:	4b7c      	ldr	r3, [pc, #496]	@ (8003f78 <HAL_RCC_OscConfig+0x27c>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4a7b      	ldr	r2, [pc, #492]	@ (8003f78 <HAL_RCC_OscConfig+0x27c>)
 8003d8c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d90:	6013      	str	r3, [r2, #0]
 8003d92:	e00b      	b.n	8003dac <HAL_RCC_OscConfig+0xb0>
 8003d94:	4b78      	ldr	r3, [pc, #480]	@ (8003f78 <HAL_RCC_OscConfig+0x27c>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4a77      	ldr	r2, [pc, #476]	@ (8003f78 <HAL_RCC_OscConfig+0x27c>)
 8003d9a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d9e:	6013      	str	r3, [r2, #0]
 8003da0:	4b75      	ldr	r3, [pc, #468]	@ (8003f78 <HAL_RCC_OscConfig+0x27c>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a74      	ldr	r2, [pc, #464]	@ (8003f78 <HAL_RCC_OscConfig+0x27c>)
 8003da6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003daa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d013      	beq.n	8003ddc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003db4:	f7fd fb14 	bl	80013e0 <HAL_GetTick>
 8003db8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003dba:	e008      	b.n	8003dce <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003dbc:	f7fd fb10 	bl	80013e0 <HAL_GetTick>
 8003dc0:	4602      	mov	r2, r0
 8003dc2:	693b      	ldr	r3, [r7, #16]
 8003dc4:	1ad3      	subs	r3, r2, r3
 8003dc6:	2b64      	cmp	r3, #100	@ 0x64
 8003dc8:	d901      	bls.n	8003dce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003dca:	2303      	movs	r3, #3
 8003dcc:	e29e      	b.n	800430c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003dce:	4b6a      	ldr	r3, [pc, #424]	@ (8003f78 <HAL_RCC_OscConfig+0x27c>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d0f0      	beq.n	8003dbc <HAL_RCC_OscConfig+0xc0>
 8003dda:	e014      	b.n	8003e06 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ddc:	f7fd fb00 	bl	80013e0 <HAL_GetTick>
 8003de0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003de2:	e008      	b.n	8003df6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003de4:	f7fd fafc 	bl	80013e0 <HAL_GetTick>
 8003de8:	4602      	mov	r2, r0
 8003dea:	693b      	ldr	r3, [r7, #16]
 8003dec:	1ad3      	subs	r3, r2, r3
 8003dee:	2b64      	cmp	r3, #100	@ 0x64
 8003df0:	d901      	bls.n	8003df6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003df2:	2303      	movs	r3, #3
 8003df4:	e28a      	b.n	800430c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003df6:	4b60      	ldr	r3, [pc, #384]	@ (8003f78 <HAL_RCC_OscConfig+0x27c>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d1f0      	bne.n	8003de4 <HAL_RCC_OscConfig+0xe8>
 8003e02:	e000      	b.n	8003e06 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f003 0302 	and.w	r3, r3, #2
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d075      	beq.n	8003efe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e12:	4b59      	ldr	r3, [pc, #356]	@ (8003f78 <HAL_RCC_OscConfig+0x27c>)
 8003e14:	689b      	ldr	r3, [r3, #8]
 8003e16:	f003 030c 	and.w	r3, r3, #12
 8003e1a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003e1c:	4b56      	ldr	r3, [pc, #344]	@ (8003f78 <HAL_RCC_OscConfig+0x27c>)
 8003e1e:	68db      	ldr	r3, [r3, #12]
 8003e20:	f003 0303 	and.w	r3, r3, #3
 8003e24:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003e26:	69bb      	ldr	r3, [r7, #24]
 8003e28:	2b0c      	cmp	r3, #12
 8003e2a:	d102      	bne.n	8003e32 <HAL_RCC_OscConfig+0x136>
 8003e2c:	697b      	ldr	r3, [r7, #20]
 8003e2e:	2b02      	cmp	r3, #2
 8003e30:	d002      	beq.n	8003e38 <HAL_RCC_OscConfig+0x13c>
 8003e32:	69bb      	ldr	r3, [r7, #24]
 8003e34:	2b04      	cmp	r3, #4
 8003e36:	d11f      	bne.n	8003e78 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003e38:	4b4f      	ldr	r3, [pc, #316]	@ (8003f78 <HAL_RCC_OscConfig+0x27c>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d005      	beq.n	8003e50 <HAL_RCC_OscConfig+0x154>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	68db      	ldr	r3, [r3, #12]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d101      	bne.n	8003e50 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	e25d      	b.n	800430c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e50:	4b49      	ldr	r3, [pc, #292]	@ (8003f78 <HAL_RCC_OscConfig+0x27c>)
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	691b      	ldr	r3, [r3, #16]
 8003e5c:	061b      	lsls	r3, r3, #24
 8003e5e:	4946      	ldr	r1, [pc, #280]	@ (8003f78 <HAL_RCC_OscConfig+0x27c>)
 8003e60:	4313      	orrs	r3, r2
 8003e62:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003e64:	4b45      	ldr	r3, [pc, #276]	@ (8003f7c <HAL_RCC_OscConfig+0x280>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4618      	mov	r0, r3
 8003e6a:	f7fd fa6d 	bl	8001348 <HAL_InitTick>
 8003e6e:	4603      	mov	r3, r0
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d043      	beq.n	8003efc <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003e74:	2301      	movs	r3, #1
 8003e76:	e249      	b.n	800430c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	68db      	ldr	r3, [r3, #12]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d023      	beq.n	8003ec8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e80:	4b3d      	ldr	r3, [pc, #244]	@ (8003f78 <HAL_RCC_OscConfig+0x27c>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4a3c      	ldr	r2, [pc, #240]	@ (8003f78 <HAL_RCC_OscConfig+0x27c>)
 8003e86:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e8a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e8c:	f7fd faa8 	bl	80013e0 <HAL_GetTick>
 8003e90:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e92:	e008      	b.n	8003ea6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e94:	f7fd faa4 	bl	80013e0 <HAL_GetTick>
 8003e98:	4602      	mov	r2, r0
 8003e9a:	693b      	ldr	r3, [r7, #16]
 8003e9c:	1ad3      	subs	r3, r2, r3
 8003e9e:	2b02      	cmp	r3, #2
 8003ea0:	d901      	bls.n	8003ea6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003ea2:	2303      	movs	r3, #3
 8003ea4:	e232      	b.n	800430c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ea6:	4b34      	ldr	r3, [pc, #208]	@ (8003f78 <HAL_RCC_OscConfig+0x27c>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d0f0      	beq.n	8003e94 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003eb2:	4b31      	ldr	r3, [pc, #196]	@ (8003f78 <HAL_RCC_OscConfig+0x27c>)
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	691b      	ldr	r3, [r3, #16]
 8003ebe:	061b      	lsls	r3, r3, #24
 8003ec0:	492d      	ldr	r1, [pc, #180]	@ (8003f78 <HAL_RCC_OscConfig+0x27c>)
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	604b      	str	r3, [r1, #4]
 8003ec6:	e01a      	b.n	8003efe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ec8:	4b2b      	ldr	r3, [pc, #172]	@ (8003f78 <HAL_RCC_OscConfig+0x27c>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a2a      	ldr	r2, [pc, #168]	@ (8003f78 <HAL_RCC_OscConfig+0x27c>)
 8003ece:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003ed2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ed4:	f7fd fa84 	bl	80013e0 <HAL_GetTick>
 8003ed8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003eda:	e008      	b.n	8003eee <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003edc:	f7fd fa80 	bl	80013e0 <HAL_GetTick>
 8003ee0:	4602      	mov	r2, r0
 8003ee2:	693b      	ldr	r3, [r7, #16]
 8003ee4:	1ad3      	subs	r3, r2, r3
 8003ee6:	2b02      	cmp	r3, #2
 8003ee8:	d901      	bls.n	8003eee <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003eea:	2303      	movs	r3, #3
 8003eec:	e20e      	b.n	800430c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003eee:	4b22      	ldr	r3, [pc, #136]	@ (8003f78 <HAL_RCC_OscConfig+0x27c>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d1f0      	bne.n	8003edc <HAL_RCC_OscConfig+0x1e0>
 8003efa:	e000      	b.n	8003efe <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003efc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f003 0308 	and.w	r3, r3, #8
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d041      	beq.n	8003f8e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	695b      	ldr	r3, [r3, #20]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d01c      	beq.n	8003f4c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f12:	4b19      	ldr	r3, [pc, #100]	@ (8003f78 <HAL_RCC_OscConfig+0x27c>)
 8003f14:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003f18:	4a17      	ldr	r2, [pc, #92]	@ (8003f78 <HAL_RCC_OscConfig+0x27c>)
 8003f1a:	f043 0301 	orr.w	r3, r3, #1
 8003f1e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f22:	f7fd fa5d 	bl	80013e0 <HAL_GetTick>
 8003f26:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003f28:	e008      	b.n	8003f3c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f2a:	f7fd fa59 	bl	80013e0 <HAL_GetTick>
 8003f2e:	4602      	mov	r2, r0
 8003f30:	693b      	ldr	r3, [r7, #16]
 8003f32:	1ad3      	subs	r3, r2, r3
 8003f34:	2b02      	cmp	r3, #2
 8003f36:	d901      	bls.n	8003f3c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003f38:	2303      	movs	r3, #3
 8003f3a:	e1e7      	b.n	800430c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003f3c:	4b0e      	ldr	r3, [pc, #56]	@ (8003f78 <HAL_RCC_OscConfig+0x27c>)
 8003f3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003f42:	f003 0302 	and.w	r3, r3, #2
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d0ef      	beq.n	8003f2a <HAL_RCC_OscConfig+0x22e>
 8003f4a:	e020      	b.n	8003f8e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f4c:	4b0a      	ldr	r3, [pc, #40]	@ (8003f78 <HAL_RCC_OscConfig+0x27c>)
 8003f4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003f52:	4a09      	ldr	r2, [pc, #36]	@ (8003f78 <HAL_RCC_OscConfig+0x27c>)
 8003f54:	f023 0301 	bic.w	r3, r3, #1
 8003f58:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f5c:	f7fd fa40 	bl	80013e0 <HAL_GetTick>
 8003f60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003f62:	e00d      	b.n	8003f80 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f64:	f7fd fa3c 	bl	80013e0 <HAL_GetTick>
 8003f68:	4602      	mov	r2, r0
 8003f6a:	693b      	ldr	r3, [r7, #16]
 8003f6c:	1ad3      	subs	r3, r2, r3
 8003f6e:	2b02      	cmp	r3, #2
 8003f70:	d906      	bls.n	8003f80 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003f72:	2303      	movs	r3, #3
 8003f74:	e1ca      	b.n	800430c <HAL_RCC_OscConfig+0x610>
 8003f76:	bf00      	nop
 8003f78:	40021000 	.word	0x40021000
 8003f7c:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003f80:	4b8c      	ldr	r3, [pc, #560]	@ (80041b4 <HAL_RCC_OscConfig+0x4b8>)
 8003f82:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003f86:	f003 0302 	and.w	r3, r3, #2
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d1ea      	bne.n	8003f64 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f003 0304 	and.w	r3, r3, #4
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	f000 80a6 	beq.w	80040e8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003fa0:	4b84      	ldr	r3, [pc, #528]	@ (80041b4 <HAL_RCC_OscConfig+0x4b8>)
 8003fa2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fa4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d101      	bne.n	8003fb0 <HAL_RCC_OscConfig+0x2b4>
 8003fac:	2301      	movs	r3, #1
 8003fae:	e000      	b.n	8003fb2 <HAL_RCC_OscConfig+0x2b6>
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d00d      	beq.n	8003fd2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fb6:	4b7f      	ldr	r3, [pc, #508]	@ (80041b4 <HAL_RCC_OscConfig+0x4b8>)
 8003fb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fba:	4a7e      	ldr	r2, [pc, #504]	@ (80041b4 <HAL_RCC_OscConfig+0x4b8>)
 8003fbc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003fc0:	6593      	str	r3, [r2, #88]	@ 0x58
 8003fc2:	4b7c      	ldr	r3, [pc, #496]	@ (80041b4 <HAL_RCC_OscConfig+0x4b8>)
 8003fc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fc6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003fca:	60fb      	str	r3, [r7, #12]
 8003fcc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003fce:	2301      	movs	r3, #1
 8003fd0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003fd2:	4b79      	ldr	r3, [pc, #484]	@ (80041b8 <HAL_RCC_OscConfig+0x4bc>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d118      	bne.n	8004010 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003fde:	4b76      	ldr	r3, [pc, #472]	@ (80041b8 <HAL_RCC_OscConfig+0x4bc>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4a75      	ldr	r2, [pc, #468]	@ (80041b8 <HAL_RCC_OscConfig+0x4bc>)
 8003fe4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003fe8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003fea:	f7fd f9f9 	bl	80013e0 <HAL_GetTick>
 8003fee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ff0:	e008      	b.n	8004004 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ff2:	f7fd f9f5 	bl	80013e0 <HAL_GetTick>
 8003ff6:	4602      	mov	r2, r0
 8003ff8:	693b      	ldr	r3, [r7, #16]
 8003ffa:	1ad3      	subs	r3, r2, r3
 8003ffc:	2b02      	cmp	r3, #2
 8003ffe:	d901      	bls.n	8004004 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004000:	2303      	movs	r3, #3
 8004002:	e183      	b.n	800430c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004004:	4b6c      	ldr	r3, [pc, #432]	@ (80041b8 <HAL_RCC_OscConfig+0x4bc>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800400c:	2b00      	cmp	r3, #0
 800400e:	d0f0      	beq.n	8003ff2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	689b      	ldr	r3, [r3, #8]
 8004014:	2b01      	cmp	r3, #1
 8004016:	d108      	bne.n	800402a <HAL_RCC_OscConfig+0x32e>
 8004018:	4b66      	ldr	r3, [pc, #408]	@ (80041b4 <HAL_RCC_OscConfig+0x4b8>)
 800401a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800401e:	4a65      	ldr	r2, [pc, #404]	@ (80041b4 <HAL_RCC_OscConfig+0x4b8>)
 8004020:	f043 0301 	orr.w	r3, r3, #1
 8004024:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004028:	e024      	b.n	8004074 <HAL_RCC_OscConfig+0x378>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	689b      	ldr	r3, [r3, #8]
 800402e:	2b05      	cmp	r3, #5
 8004030:	d110      	bne.n	8004054 <HAL_RCC_OscConfig+0x358>
 8004032:	4b60      	ldr	r3, [pc, #384]	@ (80041b4 <HAL_RCC_OscConfig+0x4b8>)
 8004034:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004038:	4a5e      	ldr	r2, [pc, #376]	@ (80041b4 <HAL_RCC_OscConfig+0x4b8>)
 800403a:	f043 0304 	orr.w	r3, r3, #4
 800403e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004042:	4b5c      	ldr	r3, [pc, #368]	@ (80041b4 <HAL_RCC_OscConfig+0x4b8>)
 8004044:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004048:	4a5a      	ldr	r2, [pc, #360]	@ (80041b4 <HAL_RCC_OscConfig+0x4b8>)
 800404a:	f043 0301 	orr.w	r3, r3, #1
 800404e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004052:	e00f      	b.n	8004074 <HAL_RCC_OscConfig+0x378>
 8004054:	4b57      	ldr	r3, [pc, #348]	@ (80041b4 <HAL_RCC_OscConfig+0x4b8>)
 8004056:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800405a:	4a56      	ldr	r2, [pc, #344]	@ (80041b4 <HAL_RCC_OscConfig+0x4b8>)
 800405c:	f023 0301 	bic.w	r3, r3, #1
 8004060:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004064:	4b53      	ldr	r3, [pc, #332]	@ (80041b4 <HAL_RCC_OscConfig+0x4b8>)
 8004066:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800406a:	4a52      	ldr	r2, [pc, #328]	@ (80041b4 <HAL_RCC_OscConfig+0x4b8>)
 800406c:	f023 0304 	bic.w	r3, r3, #4
 8004070:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	689b      	ldr	r3, [r3, #8]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d016      	beq.n	80040aa <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800407c:	f7fd f9b0 	bl	80013e0 <HAL_GetTick>
 8004080:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004082:	e00a      	b.n	800409a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004084:	f7fd f9ac 	bl	80013e0 <HAL_GetTick>
 8004088:	4602      	mov	r2, r0
 800408a:	693b      	ldr	r3, [r7, #16]
 800408c:	1ad3      	subs	r3, r2, r3
 800408e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004092:	4293      	cmp	r3, r2
 8004094:	d901      	bls.n	800409a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004096:	2303      	movs	r3, #3
 8004098:	e138      	b.n	800430c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800409a:	4b46      	ldr	r3, [pc, #280]	@ (80041b4 <HAL_RCC_OscConfig+0x4b8>)
 800409c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040a0:	f003 0302 	and.w	r3, r3, #2
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d0ed      	beq.n	8004084 <HAL_RCC_OscConfig+0x388>
 80040a8:	e015      	b.n	80040d6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040aa:	f7fd f999 	bl	80013e0 <HAL_GetTick>
 80040ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80040b0:	e00a      	b.n	80040c8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040b2:	f7fd f995 	bl	80013e0 <HAL_GetTick>
 80040b6:	4602      	mov	r2, r0
 80040b8:	693b      	ldr	r3, [r7, #16]
 80040ba:	1ad3      	subs	r3, r2, r3
 80040bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d901      	bls.n	80040c8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80040c4:	2303      	movs	r3, #3
 80040c6:	e121      	b.n	800430c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80040c8:	4b3a      	ldr	r3, [pc, #232]	@ (80041b4 <HAL_RCC_OscConfig+0x4b8>)
 80040ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040ce:	f003 0302 	and.w	r3, r3, #2
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d1ed      	bne.n	80040b2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80040d6:	7ffb      	ldrb	r3, [r7, #31]
 80040d8:	2b01      	cmp	r3, #1
 80040da:	d105      	bne.n	80040e8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040dc:	4b35      	ldr	r3, [pc, #212]	@ (80041b4 <HAL_RCC_OscConfig+0x4b8>)
 80040de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040e0:	4a34      	ldr	r2, [pc, #208]	@ (80041b4 <HAL_RCC_OscConfig+0x4b8>)
 80040e2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80040e6:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f003 0320 	and.w	r3, r3, #32
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d03c      	beq.n	800416e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	699b      	ldr	r3, [r3, #24]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d01c      	beq.n	8004136 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80040fc:	4b2d      	ldr	r3, [pc, #180]	@ (80041b4 <HAL_RCC_OscConfig+0x4b8>)
 80040fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004102:	4a2c      	ldr	r2, [pc, #176]	@ (80041b4 <HAL_RCC_OscConfig+0x4b8>)
 8004104:	f043 0301 	orr.w	r3, r3, #1
 8004108:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800410c:	f7fd f968 	bl	80013e0 <HAL_GetTick>
 8004110:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004112:	e008      	b.n	8004126 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004114:	f7fd f964 	bl	80013e0 <HAL_GetTick>
 8004118:	4602      	mov	r2, r0
 800411a:	693b      	ldr	r3, [r7, #16]
 800411c:	1ad3      	subs	r3, r2, r3
 800411e:	2b02      	cmp	r3, #2
 8004120:	d901      	bls.n	8004126 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004122:	2303      	movs	r3, #3
 8004124:	e0f2      	b.n	800430c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004126:	4b23      	ldr	r3, [pc, #140]	@ (80041b4 <HAL_RCC_OscConfig+0x4b8>)
 8004128:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800412c:	f003 0302 	and.w	r3, r3, #2
 8004130:	2b00      	cmp	r3, #0
 8004132:	d0ef      	beq.n	8004114 <HAL_RCC_OscConfig+0x418>
 8004134:	e01b      	b.n	800416e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004136:	4b1f      	ldr	r3, [pc, #124]	@ (80041b4 <HAL_RCC_OscConfig+0x4b8>)
 8004138:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800413c:	4a1d      	ldr	r2, [pc, #116]	@ (80041b4 <HAL_RCC_OscConfig+0x4b8>)
 800413e:	f023 0301 	bic.w	r3, r3, #1
 8004142:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004146:	f7fd f94b 	bl	80013e0 <HAL_GetTick>
 800414a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800414c:	e008      	b.n	8004160 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800414e:	f7fd f947 	bl	80013e0 <HAL_GetTick>
 8004152:	4602      	mov	r2, r0
 8004154:	693b      	ldr	r3, [r7, #16]
 8004156:	1ad3      	subs	r3, r2, r3
 8004158:	2b02      	cmp	r3, #2
 800415a:	d901      	bls.n	8004160 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800415c:	2303      	movs	r3, #3
 800415e:	e0d5      	b.n	800430c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004160:	4b14      	ldr	r3, [pc, #80]	@ (80041b4 <HAL_RCC_OscConfig+0x4b8>)
 8004162:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004166:	f003 0302 	and.w	r3, r3, #2
 800416a:	2b00      	cmp	r3, #0
 800416c:	d1ef      	bne.n	800414e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	69db      	ldr	r3, [r3, #28]
 8004172:	2b00      	cmp	r3, #0
 8004174:	f000 80c9 	beq.w	800430a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004178:	4b0e      	ldr	r3, [pc, #56]	@ (80041b4 <HAL_RCC_OscConfig+0x4b8>)
 800417a:	689b      	ldr	r3, [r3, #8]
 800417c:	f003 030c 	and.w	r3, r3, #12
 8004180:	2b0c      	cmp	r3, #12
 8004182:	f000 8083 	beq.w	800428c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	69db      	ldr	r3, [r3, #28]
 800418a:	2b02      	cmp	r3, #2
 800418c:	d15e      	bne.n	800424c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800418e:	4b09      	ldr	r3, [pc, #36]	@ (80041b4 <HAL_RCC_OscConfig+0x4b8>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4a08      	ldr	r2, [pc, #32]	@ (80041b4 <HAL_RCC_OscConfig+0x4b8>)
 8004194:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004198:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800419a:	f7fd f921 	bl	80013e0 <HAL_GetTick>
 800419e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80041a0:	e00c      	b.n	80041bc <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041a2:	f7fd f91d 	bl	80013e0 <HAL_GetTick>
 80041a6:	4602      	mov	r2, r0
 80041a8:	693b      	ldr	r3, [r7, #16]
 80041aa:	1ad3      	subs	r3, r2, r3
 80041ac:	2b02      	cmp	r3, #2
 80041ae:	d905      	bls.n	80041bc <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80041b0:	2303      	movs	r3, #3
 80041b2:	e0ab      	b.n	800430c <HAL_RCC_OscConfig+0x610>
 80041b4:	40021000 	.word	0x40021000
 80041b8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80041bc:	4b55      	ldr	r3, [pc, #340]	@ (8004314 <HAL_RCC_OscConfig+0x618>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d1ec      	bne.n	80041a2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80041c8:	4b52      	ldr	r3, [pc, #328]	@ (8004314 <HAL_RCC_OscConfig+0x618>)
 80041ca:	68da      	ldr	r2, [r3, #12]
 80041cc:	4b52      	ldr	r3, [pc, #328]	@ (8004318 <HAL_RCC_OscConfig+0x61c>)
 80041ce:	4013      	ands	r3, r2
 80041d0:	687a      	ldr	r2, [r7, #4]
 80041d2:	6a11      	ldr	r1, [r2, #32]
 80041d4:	687a      	ldr	r2, [r7, #4]
 80041d6:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80041d8:	3a01      	subs	r2, #1
 80041da:	0112      	lsls	r2, r2, #4
 80041dc:	4311      	orrs	r1, r2
 80041de:	687a      	ldr	r2, [r7, #4]
 80041e0:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80041e2:	0212      	lsls	r2, r2, #8
 80041e4:	4311      	orrs	r1, r2
 80041e6:	687a      	ldr	r2, [r7, #4]
 80041e8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80041ea:	0852      	lsrs	r2, r2, #1
 80041ec:	3a01      	subs	r2, #1
 80041ee:	0552      	lsls	r2, r2, #21
 80041f0:	4311      	orrs	r1, r2
 80041f2:	687a      	ldr	r2, [r7, #4]
 80041f4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80041f6:	0852      	lsrs	r2, r2, #1
 80041f8:	3a01      	subs	r2, #1
 80041fa:	0652      	lsls	r2, r2, #25
 80041fc:	4311      	orrs	r1, r2
 80041fe:	687a      	ldr	r2, [r7, #4]
 8004200:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004202:	06d2      	lsls	r2, r2, #27
 8004204:	430a      	orrs	r2, r1
 8004206:	4943      	ldr	r1, [pc, #268]	@ (8004314 <HAL_RCC_OscConfig+0x618>)
 8004208:	4313      	orrs	r3, r2
 800420a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800420c:	4b41      	ldr	r3, [pc, #260]	@ (8004314 <HAL_RCC_OscConfig+0x618>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4a40      	ldr	r2, [pc, #256]	@ (8004314 <HAL_RCC_OscConfig+0x618>)
 8004212:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004216:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004218:	4b3e      	ldr	r3, [pc, #248]	@ (8004314 <HAL_RCC_OscConfig+0x618>)
 800421a:	68db      	ldr	r3, [r3, #12]
 800421c:	4a3d      	ldr	r2, [pc, #244]	@ (8004314 <HAL_RCC_OscConfig+0x618>)
 800421e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004222:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004224:	f7fd f8dc 	bl	80013e0 <HAL_GetTick>
 8004228:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800422a:	e008      	b.n	800423e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800422c:	f7fd f8d8 	bl	80013e0 <HAL_GetTick>
 8004230:	4602      	mov	r2, r0
 8004232:	693b      	ldr	r3, [r7, #16]
 8004234:	1ad3      	subs	r3, r2, r3
 8004236:	2b02      	cmp	r3, #2
 8004238:	d901      	bls.n	800423e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800423a:	2303      	movs	r3, #3
 800423c:	e066      	b.n	800430c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800423e:	4b35      	ldr	r3, [pc, #212]	@ (8004314 <HAL_RCC_OscConfig+0x618>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004246:	2b00      	cmp	r3, #0
 8004248:	d0f0      	beq.n	800422c <HAL_RCC_OscConfig+0x530>
 800424a:	e05e      	b.n	800430a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800424c:	4b31      	ldr	r3, [pc, #196]	@ (8004314 <HAL_RCC_OscConfig+0x618>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4a30      	ldr	r2, [pc, #192]	@ (8004314 <HAL_RCC_OscConfig+0x618>)
 8004252:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004256:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004258:	f7fd f8c2 	bl	80013e0 <HAL_GetTick>
 800425c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800425e:	e008      	b.n	8004272 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004260:	f7fd f8be 	bl	80013e0 <HAL_GetTick>
 8004264:	4602      	mov	r2, r0
 8004266:	693b      	ldr	r3, [r7, #16]
 8004268:	1ad3      	subs	r3, r2, r3
 800426a:	2b02      	cmp	r3, #2
 800426c:	d901      	bls.n	8004272 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800426e:	2303      	movs	r3, #3
 8004270:	e04c      	b.n	800430c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004272:	4b28      	ldr	r3, [pc, #160]	@ (8004314 <HAL_RCC_OscConfig+0x618>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800427a:	2b00      	cmp	r3, #0
 800427c:	d1f0      	bne.n	8004260 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800427e:	4b25      	ldr	r3, [pc, #148]	@ (8004314 <HAL_RCC_OscConfig+0x618>)
 8004280:	68da      	ldr	r2, [r3, #12]
 8004282:	4924      	ldr	r1, [pc, #144]	@ (8004314 <HAL_RCC_OscConfig+0x618>)
 8004284:	4b25      	ldr	r3, [pc, #148]	@ (800431c <HAL_RCC_OscConfig+0x620>)
 8004286:	4013      	ands	r3, r2
 8004288:	60cb      	str	r3, [r1, #12]
 800428a:	e03e      	b.n	800430a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	69db      	ldr	r3, [r3, #28]
 8004290:	2b01      	cmp	r3, #1
 8004292:	d101      	bne.n	8004298 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8004294:	2301      	movs	r3, #1
 8004296:	e039      	b.n	800430c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004298:	4b1e      	ldr	r3, [pc, #120]	@ (8004314 <HAL_RCC_OscConfig+0x618>)
 800429a:	68db      	ldr	r3, [r3, #12]
 800429c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800429e:	697b      	ldr	r3, [r7, #20]
 80042a0:	f003 0203 	and.w	r2, r3, #3
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6a1b      	ldr	r3, [r3, #32]
 80042a8:	429a      	cmp	r2, r3
 80042aa:	d12c      	bne.n	8004306 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80042ac:	697b      	ldr	r3, [r7, #20]
 80042ae:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042b6:	3b01      	subs	r3, #1
 80042b8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042ba:	429a      	cmp	r2, r3
 80042bc:	d123      	bne.n	8004306 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80042be:	697b      	ldr	r3, [r7, #20]
 80042c0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042c8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80042ca:	429a      	cmp	r2, r3
 80042cc:	d11b      	bne.n	8004306 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80042ce:	697b      	ldr	r3, [r7, #20]
 80042d0:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042d8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80042da:	429a      	cmp	r2, r3
 80042dc:	d113      	bne.n	8004306 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80042de:	697b      	ldr	r3, [r7, #20]
 80042e0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042e8:	085b      	lsrs	r3, r3, #1
 80042ea:	3b01      	subs	r3, #1
 80042ec:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80042ee:	429a      	cmp	r2, r3
 80042f0:	d109      	bne.n	8004306 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80042f2:	697b      	ldr	r3, [r7, #20]
 80042f4:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042fc:	085b      	lsrs	r3, r3, #1
 80042fe:	3b01      	subs	r3, #1
 8004300:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004302:	429a      	cmp	r2, r3
 8004304:	d001      	beq.n	800430a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8004306:	2301      	movs	r3, #1
 8004308:	e000      	b.n	800430c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800430a:	2300      	movs	r3, #0
}
 800430c:	4618      	mov	r0, r3
 800430e:	3720      	adds	r7, #32
 8004310:	46bd      	mov	sp, r7
 8004312:	bd80      	pop	{r7, pc}
 8004314:	40021000 	.word	0x40021000
 8004318:	019f800c 	.word	0x019f800c
 800431c:	feeefffc 	.word	0xfeeefffc

08004320 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b086      	sub	sp, #24
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
 8004328:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800432a:	2300      	movs	r3, #0
 800432c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d101      	bne.n	8004338 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004334:	2301      	movs	r3, #1
 8004336:	e11e      	b.n	8004576 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004338:	4b91      	ldr	r3, [pc, #580]	@ (8004580 <HAL_RCC_ClockConfig+0x260>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f003 030f 	and.w	r3, r3, #15
 8004340:	683a      	ldr	r2, [r7, #0]
 8004342:	429a      	cmp	r2, r3
 8004344:	d910      	bls.n	8004368 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004346:	4b8e      	ldr	r3, [pc, #568]	@ (8004580 <HAL_RCC_ClockConfig+0x260>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f023 020f 	bic.w	r2, r3, #15
 800434e:	498c      	ldr	r1, [pc, #560]	@ (8004580 <HAL_RCC_ClockConfig+0x260>)
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	4313      	orrs	r3, r2
 8004354:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004356:	4b8a      	ldr	r3, [pc, #552]	@ (8004580 <HAL_RCC_ClockConfig+0x260>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f003 030f 	and.w	r3, r3, #15
 800435e:	683a      	ldr	r2, [r7, #0]
 8004360:	429a      	cmp	r2, r3
 8004362:	d001      	beq.n	8004368 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004364:	2301      	movs	r3, #1
 8004366:	e106      	b.n	8004576 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f003 0301 	and.w	r3, r3, #1
 8004370:	2b00      	cmp	r3, #0
 8004372:	d073      	beq.n	800445c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	2b03      	cmp	r3, #3
 800437a:	d129      	bne.n	80043d0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800437c:	4b81      	ldr	r3, [pc, #516]	@ (8004584 <HAL_RCC_ClockConfig+0x264>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004384:	2b00      	cmp	r3, #0
 8004386:	d101      	bne.n	800438c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004388:	2301      	movs	r3, #1
 800438a:	e0f4      	b.n	8004576 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800438c:	f000 f99e 	bl	80046cc <RCC_GetSysClockFreqFromPLLSource>
 8004390:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004392:	693b      	ldr	r3, [r7, #16]
 8004394:	4a7c      	ldr	r2, [pc, #496]	@ (8004588 <HAL_RCC_ClockConfig+0x268>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d93f      	bls.n	800441a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800439a:	4b7a      	ldr	r3, [pc, #488]	@ (8004584 <HAL_RCC_ClockConfig+0x264>)
 800439c:	689b      	ldr	r3, [r3, #8]
 800439e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d009      	beq.n	80043ba <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d033      	beq.n	800441a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d12f      	bne.n	800441a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80043ba:	4b72      	ldr	r3, [pc, #456]	@ (8004584 <HAL_RCC_ClockConfig+0x264>)
 80043bc:	689b      	ldr	r3, [r3, #8]
 80043be:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80043c2:	4a70      	ldr	r2, [pc, #448]	@ (8004584 <HAL_RCC_ClockConfig+0x264>)
 80043c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80043c8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80043ca:	2380      	movs	r3, #128	@ 0x80
 80043cc:	617b      	str	r3, [r7, #20]
 80043ce:	e024      	b.n	800441a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	2b02      	cmp	r3, #2
 80043d6:	d107      	bne.n	80043e8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80043d8:	4b6a      	ldr	r3, [pc, #424]	@ (8004584 <HAL_RCC_ClockConfig+0x264>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d109      	bne.n	80043f8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80043e4:	2301      	movs	r3, #1
 80043e6:	e0c6      	b.n	8004576 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80043e8:	4b66      	ldr	r3, [pc, #408]	@ (8004584 <HAL_RCC_ClockConfig+0x264>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d101      	bne.n	80043f8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80043f4:	2301      	movs	r3, #1
 80043f6:	e0be      	b.n	8004576 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80043f8:	f000 f8ce 	bl	8004598 <HAL_RCC_GetSysClockFreq>
 80043fc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80043fe:	693b      	ldr	r3, [r7, #16]
 8004400:	4a61      	ldr	r2, [pc, #388]	@ (8004588 <HAL_RCC_ClockConfig+0x268>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d909      	bls.n	800441a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004406:	4b5f      	ldr	r3, [pc, #380]	@ (8004584 <HAL_RCC_ClockConfig+0x264>)
 8004408:	689b      	ldr	r3, [r3, #8]
 800440a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800440e:	4a5d      	ldr	r2, [pc, #372]	@ (8004584 <HAL_RCC_ClockConfig+0x264>)
 8004410:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004414:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004416:	2380      	movs	r3, #128	@ 0x80
 8004418:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800441a:	4b5a      	ldr	r3, [pc, #360]	@ (8004584 <HAL_RCC_ClockConfig+0x264>)
 800441c:	689b      	ldr	r3, [r3, #8]
 800441e:	f023 0203 	bic.w	r2, r3, #3
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	685b      	ldr	r3, [r3, #4]
 8004426:	4957      	ldr	r1, [pc, #348]	@ (8004584 <HAL_RCC_ClockConfig+0x264>)
 8004428:	4313      	orrs	r3, r2
 800442a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800442c:	f7fc ffd8 	bl	80013e0 <HAL_GetTick>
 8004430:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004432:	e00a      	b.n	800444a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004434:	f7fc ffd4 	bl	80013e0 <HAL_GetTick>
 8004438:	4602      	mov	r2, r0
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	1ad3      	subs	r3, r2, r3
 800443e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004442:	4293      	cmp	r3, r2
 8004444:	d901      	bls.n	800444a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004446:	2303      	movs	r3, #3
 8004448:	e095      	b.n	8004576 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800444a:	4b4e      	ldr	r3, [pc, #312]	@ (8004584 <HAL_RCC_ClockConfig+0x264>)
 800444c:	689b      	ldr	r3, [r3, #8]
 800444e:	f003 020c 	and.w	r2, r3, #12
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	685b      	ldr	r3, [r3, #4]
 8004456:	009b      	lsls	r3, r3, #2
 8004458:	429a      	cmp	r2, r3
 800445a:	d1eb      	bne.n	8004434 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f003 0302 	and.w	r3, r3, #2
 8004464:	2b00      	cmp	r3, #0
 8004466:	d023      	beq.n	80044b0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f003 0304 	and.w	r3, r3, #4
 8004470:	2b00      	cmp	r3, #0
 8004472:	d005      	beq.n	8004480 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004474:	4b43      	ldr	r3, [pc, #268]	@ (8004584 <HAL_RCC_ClockConfig+0x264>)
 8004476:	689b      	ldr	r3, [r3, #8]
 8004478:	4a42      	ldr	r2, [pc, #264]	@ (8004584 <HAL_RCC_ClockConfig+0x264>)
 800447a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800447e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f003 0308 	and.w	r3, r3, #8
 8004488:	2b00      	cmp	r3, #0
 800448a:	d007      	beq.n	800449c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800448c:	4b3d      	ldr	r3, [pc, #244]	@ (8004584 <HAL_RCC_ClockConfig+0x264>)
 800448e:	689b      	ldr	r3, [r3, #8]
 8004490:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004494:	4a3b      	ldr	r2, [pc, #236]	@ (8004584 <HAL_RCC_ClockConfig+0x264>)
 8004496:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800449a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800449c:	4b39      	ldr	r3, [pc, #228]	@ (8004584 <HAL_RCC_ClockConfig+0x264>)
 800449e:	689b      	ldr	r3, [r3, #8]
 80044a0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	689b      	ldr	r3, [r3, #8]
 80044a8:	4936      	ldr	r1, [pc, #216]	@ (8004584 <HAL_RCC_ClockConfig+0x264>)
 80044aa:	4313      	orrs	r3, r2
 80044ac:	608b      	str	r3, [r1, #8]
 80044ae:	e008      	b.n	80044c2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80044b0:	697b      	ldr	r3, [r7, #20]
 80044b2:	2b80      	cmp	r3, #128	@ 0x80
 80044b4:	d105      	bne.n	80044c2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80044b6:	4b33      	ldr	r3, [pc, #204]	@ (8004584 <HAL_RCC_ClockConfig+0x264>)
 80044b8:	689b      	ldr	r3, [r3, #8]
 80044ba:	4a32      	ldr	r2, [pc, #200]	@ (8004584 <HAL_RCC_ClockConfig+0x264>)
 80044bc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80044c0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80044c2:	4b2f      	ldr	r3, [pc, #188]	@ (8004580 <HAL_RCC_ClockConfig+0x260>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f003 030f 	and.w	r3, r3, #15
 80044ca:	683a      	ldr	r2, [r7, #0]
 80044cc:	429a      	cmp	r2, r3
 80044ce:	d21d      	bcs.n	800450c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044d0:	4b2b      	ldr	r3, [pc, #172]	@ (8004580 <HAL_RCC_ClockConfig+0x260>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f023 020f 	bic.w	r2, r3, #15
 80044d8:	4929      	ldr	r1, [pc, #164]	@ (8004580 <HAL_RCC_ClockConfig+0x260>)
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	4313      	orrs	r3, r2
 80044de:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80044e0:	f7fc ff7e 	bl	80013e0 <HAL_GetTick>
 80044e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80044e6:	e00a      	b.n	80044fe <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044e8:	f7fc ff7a 	bl	80013e0 <HAL_GetTick>
 80044ec:	4602      	mov	r2, r0
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	1ad3      	subs	r3, r2, r3
 80044f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d901      	bls.n	80044fe <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80044fa:	2303      	movs	r3, #3
 80044fc:	e03b      	b.n	8004576 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80044fe:	4b20      	ldr	r3, [pc, #128]	@ (8004580 <HAL_RCC_ClockConfig+0x260>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f003 030f 	and.w	r3, r3, #15
 8004506:	683a      	ldr	r2, [r7, #0]
 8004508:	429a      	cmp	r2, r3
 800450a:	d1ed      	bne.n	80044e8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f003 0304 	and.w	r3, r3, #4
 8004514:	2b00      	cmp	r3, #0
 8004516:	d008      	beq.n	800452a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004518:	4b1a      	ldr	r3, [pc, #104]	@ (8004584 <HAL_RCC_ClockConfig+0x264>)
 800451a:	689b      	ldr	r3, [r3, #8]
 800451c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	68db      	ldr	r3, [r3, #12]
 8004524:	4917      	ldr	r1, [pc, #92]	@ (8004584 <HAL_RCC_ClockConfig+0x264>)
 8004526:	4313      	orrs	r3, r2
 8004528:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f003 0308 	and.w	r3, r3, #8
 8004532:	2b00      	cmp	r3, #0
 8004534:	d009      	beq.n	800454a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004536:	4b13      	ldr	r3, [pc, #76]	@ (8004584 <HAL_RCC_ClockConfig+0x264>)
 8004538:	689b      	ldr	r3, [r3, #8]
 800453a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	691b      	ldr	r3, [r3, #16]
 8004542:	00db      	lsls	r3, r3, #3
 8004544:	490f      	ldr	r1, [pc, #60]	@ (8004584 <HAL_RCC_ClockConfig+0x264>)
 8004546:	4313      	orrs	r3, r2
 8004548:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800454a:	f000 f825 	bl	8004598 <HAL_RCC_GetSysClockFreq>
 800454e:	4602      	mov	r2, r0
 8004550:	4b0c      	ldr	r3, [pc, #48]	@ (8004584 <HAL_RCC_ClockConfig+0x264>)
 8004552:	689b      	ldr	r3, [r3, #8]
 8004554:	091b      	lsrs	r3, r3, #4
 8004556:	f003 030f 	and.w	r3, r3, #15
 800455a:	490c      	ldr	r1, [pc, #48]	@ (800458c <HAL_RCC_ClockConfig+0x26c>)
 800455c:	5ccb      	ldrb	r3, [r1, r3]
 800455e:	f003 031f 	and.w	r3, r3, #31
 8004562:	fa22 f303 	lsr.w	r3, r2, r3
 8004566:	4a0a      	ldr	r2, [pc, #40]	@ (8004590 <HAL_RCC_ClockConfig+0x270>)
 8004568:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800456a:	4b0a      	ldr	r3, [pc, #40]	@ (8004594 <HAL_RCC_ClockConfig+0x274>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4618      	mov	r0, r3
 8004570:	f7fc feea 	bl	8001348 <HAL_InitTick>
 8004574:	4603      	mov	r3, r0
}
 8004576:	4618      	mov	r0, r3
 8004578:	3718      	adds	r7, #24
 800457a:	46bd      	mov	sp, r7
 800457c:	bd80      	pop	{r7, pc}
 800457e:	bf00      	nop
 8004580:	40022000 	.word	0x40022000
 8004584:	40021000 	.word	0x40021000
 8004588:	04c4b400 	.word	0x04c4b400
 800458c:	08006d30 	.word	0x08006d30
 8004590:	20000000 	.word	0x20000000
 8004594:	20000004 	.word	0x20000004

08004598 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004598:	b480      	push	{r7}
 800459a:	b087      	sub	sp, #28
 800459c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800459e:	4b2c      	ldr	r3, [pc, #176]	@ (8004650 <HAL_RCC_GetSysClockFreq+0xb8>)
 80045a0:	689b      	ldr	r3, [r3, #8]
 80045a2:	f003 030c 	and.w	r3, r3, #12
 80045a6:	2b04      	cmp	r3, #4
 80045a8:	d102      	bne.n	80045b0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80045aa:	4b2a      	ldr	r3, [pc, #168]	@ (8004654 <HAL_RCC_GetSysClockFreq+0xbc>)
 80045ac:	613b      	str	r3, [r7, #16]
 80045ae:	e047      	b.n	8004640 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80045b0:	4b27      	ldr	r3, [pc, #156]	@ (8004650 <HAL_RCC_GetSysClockFreq+0xb8>)
 80045b2:	689b      	ldr	r3, [r3, #8]
 80045b4:	f003 030c 	and.w	r3, r3, #12
 80045b8:	2b08      	cmp	r3, #8
 80045ba:	d102      	bne.n	80045c2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80045bc:	4b26      	ldr	r3, [pc, #152]	@ (8004658 <HAL_RCC_GetSysClockFreq+0xc0>)
 80045be:	613b      	str	r3, [r7, #16]
 80045c0:	e03e      	b.n	8004640 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80045c2:	4b23      	ldr	r3, [pc, #140]	@ (8004650 <HAL_RCC_GetSysClockFreq+0xb8>)
 80045c4:	689b      	ldr	r3, [r3, #8]
 80045c6:	f003 030c 	and.w	r3, r3, #12
 80045ca:	2b0c      	cmp	r3, #12
 80045cc:	d136      	bne.n	800463c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80045ce:	4b20      	ldr	r3, [pc, #128]	@ (8004650 <HAL_RCC_GetSysClockFreq+0xb8>)
 80045d0:	68db      	ldr	r3, [r3, #12]
 80045d2:	f003 0303 	and.w	r3, r3, #3
 80045d6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80045d8:	4b1d      	ldr	r3, [pc, #116]	@ (8004650 <HAL_RCC_GetSysClockFreq+0xb8>)
 80045da:	68db      	ldr	r3, [r3, #12]
 80045dc:	091b      	lsrs	r3, r3, #4
 80045de:	f003 030f 	and.w	r3, r3, #15
 80045e2:	3301      	adds	r3, #1
 80045e4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	2b03      	cmp	r3, #3
 80045ea:	d10c      	bne.n	8004606 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80045ec:	4a1a      	ldr	r2, [pc, #104]	@ (8004658 <HAL_RCC_GetSysClockFreq+0xc0>)
 80045ee:	68bb      	ldr	r3, [r7, #8]
 80045f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80045f4:	4a16      	ldr	r2, [pc, #88]	@ (8004650 <HAL_RCC_GetSysClockFreq+0xb8>)
 80045f6:	68d2      	ldr	r2, [r2, #12]
 80045f8:	0a12      	lsrs	r2, r2, #8
 80045fa:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80045fe:	fb02 f303 	mul.w	r3, r2, r3
 8004602:	617b      	str	r3, [r7, #20]
      break;
 8004604:	e00c      	b.n	8004620 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004606:	4a13      	ldr	r2, [pc, #76]	@ (8004654 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004608:	68bb      	ldr	r3, [r7, #8]
 800460a:	fbb2 f3f3 	udiv	r3, r2, r3
 800460e:	4a10      	ldr	r2, [pc, #64]	@ (8004650 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004610:	68d2      	ldr	r2, [r2, #12]
 8004612:	0a12      	lsrs	r2, r2, #8
 8004614:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004618:	fb02 f303 	mul.w	r3, r2, r3
 800461c:	617b      	str	r3, [r7, #20]
      break;
 800461e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004620:	4b0b      	ldr	r3, [pc, #44]	@ (8004650 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004622:	68db      	ldr	r3, [r3, #12]
 8004624:	0e5b      	lsrs	r3, r3, #25
 8004626:	f003 0303 	and.w	r3, r3, #3
 800462a:	3301      	adds	r3, #1
 800462c:	005b      	lsls	r3, r3, #1
 800462e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004630:	697a      	ldr	r2, [r7, #20]
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	fbb2 f3f3 	udiv	r3, r2, r3
 8004638:	613b      	str	r3, [r7, #16]
 800463a:	e001      	b.n	8004640 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800463c:	2300      	movs	r3, #0
 800463e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004640:	693b      	ldr	r3, [r7, #16]
}
 8004642:	4618      	mov	r0, r3
 8004644:	371c      	adds	r7, #28
 8004646:	46bd      	mov	sp, r7
 8004648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464c:	4770      	bx	lr
 800464e:	bf00      	nop
 8004650:	40021000 	.word	0x40021000
 8004654:	00f42400 	.word	0x00f42400
 8004658:	007a1200 	.word	0x007a1200

0800465c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800465c:	b480      	push	{r7}
 800465e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004660:	4b03      	ldr	r3, [pc, #12]	@ (8004670 <HAL_RCC_GetHCLKFreq+0x14>)
 8004662:	681b      	ldr	r3, [r3, #0]
}
 8004664:	4618      	mov	r0, r3
 8004666:	46bd      	mov	sp, r7
 8004668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466c:	4770      	bx	lr
 800466e:	bf00      	nop
 8004670:	20000000 	.word	0x20000000

08004674 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004678:	f7ff fff0 	bl	800465c <HAL_RCC_GetHCLKFreq>
 800467c:	4602      	mov	r2, r0
 800467e:	4b06      	ldr	r3, [pc, #24]	@ (8004698 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004680:	689b      	ldr	r3, [r3, #8]
 8004682:	0a1b      	lsrs	r3, r3, #8
 8004684:	f003 0307 	and.w	r3, r3, #7
 8004688:	4904      	ldr	r1, [pc, #16]	@ (800469c <HAL_RCC_GetPCLK1Freq+0x28>)
 800468a:	5ccb      	ldrb	r3, [r1, r3]
 800468c:	f003 031f 	and.w	r3, r3, #31
 8004690:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004694:	4618      	mov	r0, r3
 8004696:	bd80      	pop	{r7, pc}
 8004698:	40021000 	.word	0x40021000
 800469c:	08006d40 	.word	0x08006d40

080046a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80046a4:	f7ff ffda 	bl	800465c <HAL_RCC_GetHCLKFreq>
 80046a8:	4602      	mov	r2, r0
 80046aa:	4b06      	ldr	r3, [pc, #24]	@ (80046c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80046ac:	689b      	ldr	r3, [r3, #8]
 80046ae:	0adb      	lsrs	r3, r3, #11
 80046b0:	f003 0307 	and.w	r3, r3, #7
 80046b4:	4904      	ldr	r1, [pc, #16]	@ (80046c8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80046b6:	5ccb      	ldrb	r3, [r1, r3]
 80046b8:	f003 031f 	and.w	r3, r3, #31
 80046bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80046c0:	4618      	mov	r0, r3
 80046c2:	bd80      	pop	{r7, pc}
 80046c4:	40021000 	.word	0x40021000
 80046c8:	08006d40 	.word	0x08006d40

080046cc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80046cc:	b480      	push	{r7}
 80046ce:	b087      	sub	sp, #28
 80046d0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80046d2:	4b1e      	ldr	r3, [pc, #120]	@ (800474c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80046d4:	68db      	ldr	r3, [r3, #12]
 80046d6:	f003 0303 	and.w	r3, r3, #3
 80046da:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80046dc:	4b1b      	ldr	r3, [pc, #108]	@ (800474c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80046de:	68db      	ldr	r3, [r3, #12]
 80046e0:	091b      	lsrs	r3, r3, #4
 80046e2:	f003 030f 	and.w	r3, r3, #15
 80046e6:	3301      	adds	r3, #1
 80046e8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80046ea:	693b      	ldr	r3, [r7, #16]
 80046ec:	2b03      	cmp	r3, #3
 80046ee:	d10c      	bne.n	800470a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80046f0:	4a17      	ldr	r2, [pc, #92]	@ (8004750 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80046f8:	4a14      	ldr	r2, [pc, #80]	@ (800474c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80046fa:	68d2      	ldr	r2, [r2, #12]
 80046fc:	0a12      	lsrs	r2, r2, #8
 80046fe:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004702:	fb02 f303 	mul.w	r3, r2, r3
 8004706:	617b      	str	r3, [r7, #20]
    break;
 8004708:	e00c      	b.n	8004724 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800470a:	4a12      	ldr	r2, [pc, #72]	@ (8004754 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004712:	4a0e      	ldr	r2, [pc, #56]	@ (800474c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004714:	68d2      	ldr	r2, [r2, #12]
 8004716:	0a12      	lsrs	r2, r2, #8
 8004718:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800471c:	fb02 f303 	mul.w	r3, r2, r3
 8004720:	617b      	str	r3, [r7, #20]
    break;
 8004722:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004724:	4b09      	ldr	r3, [pc, #36]	@ (800474c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004726:	68db      	ldr	r3, [r3, #12]
 8004728:	0e5b      	lsrs	r3, r3, #25
 800472a:	f003 0303 	and.w	r3, r3, #3
 800472e:	3301      	adds	r3, #1
 8004730:	005b      	lsls	r3, r3, #1
 8004732:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004734:	697a      	ldr	r2, [r7, #20]
 8004736:	68bb      	ldr	r3, [r7, #8]
 8004738:	fbb2 f3f3 	udiv	r3, r2, r3
 800473c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800473e:	687b      	ldr	r3, [r7, #4]
}
 8004740:	4618      	mov	r0, r3
 8004742:	371c      	adds	r7, #28
 8004744:	46bd      	mov	sp, r7
 8004746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474a:	4770      	bx	lr
 800474c:	40021000 	.word	0x40021000
 8004750:	007a1200 	.word	0x007a1200
 8004754:	00f42400 	.word	0x00f42400

08004758 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b086      	sub	sp, #24
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004760:	2300      	movs	r3, #0
 8004762:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004764:	2300      	movs	r3, #0
 8004766:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004770:	2b00      	cmp	r3, #0
 8004772:	f000 8098 	beq.w	80048a6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004776:	2300      	movs	r3, #0
 8004778:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800477a:	4b43      	ldr	r3, [pc, #268]	@ (8004888 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800477c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800477e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004782:	2b00      	cmp	r3, #0
 8004784:	d10d      	bne.n	80047a2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004786:	4b40      	ldr	r3, [pc, #256]	@ (8004888 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004788:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800478a:	4a3f      	ldr	r2, [pc, #252]	@ (8004888 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800478c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004790:	6593      	str	r3, [r2, #88]	@ 0x58
 8004792:	4b3d      	ldr	r3, [pc, #244]	@ (8004888 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004794:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004796:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800479a:	60bb      	str	r3, [r7, #8]
 800479c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800479e:	2301      	movs	r3, #1
 80047a0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80047a2:	4b3a      	ldr	r3, [pc, #232]	@ (800488c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4a39      	ldr	r2, [pc, #228]	@ (800488c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80047a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80047ac:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80047ae:	f7fc fe17 	bl	80013e0 <HAL_GetTick>
 80047b2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80047b4:	e009      	b.n	80047ca <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047b6:	f7fc fe13 	bl	80013e0 <HAL_GetTick>
 80047ba:	4602      	mov	r2, r0
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	1ad3      	subs	r3, r2, r3
 80047c0:	2b02      	cmp	r3, #2
 80047c2:	d902      	bls.n	80047ca <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80047c4:	2303      	movs	r3, #3
 80047c6:	74fb      	strb	r3, [r7, #19]
        break;
 80047c8:	e005      	b.n	80047d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80047ca:	4b30      	ldr	r3, [pc, #192]	@ (800488c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d0ef      	beq.n	80047b6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80047d6:	7cfb      	ldrb	r3, [r7, #19]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d159      	bne.n	8004890 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80047dc:	4b2a      	ldr	r3, [pc, #168]	@ (8004888 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80047de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80047e6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80047e8:	697b      	ldr	r3, [r7, #20]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d01e      	beq.n	800482c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047f2:	697a      	ldr	r2, [r7, #20]
 80047f4:	429a      	cmp	r2, r3
 80047f6:	d019      	beq.n	800482c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80047f8:	4b23      	ldr	r3, [pc, #140]	@ (8004888 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80047fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047fe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004802:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004804:	4b20      	ldr	r3, [pc, #128]	@ (8004888 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004806:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800480a:	4a1f      	ldr	r2, [pc, #124]	@ (8004888 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800480c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004810:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004814:	4b1c      	ldr	r3, [pc, #112]	@ (8004888 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004816:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800481a:	4a1b      	ldr	r2, [pc, #108]	@ (8004888 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800481c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004820:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004824:	4a18      	ldr	r2, [pc, #96]	@ (8004888 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004826:	697b      	ldr	r3, [r7, #20]
 8004828:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800482c:	697b      	ldr	r3, [r7, #20]
 800482e:	f003 0301 	and.w	r3, r3, #1
 8004832:	2b00      	cmp	r3, #0
 8004834:	d016      	beq.n	8004864 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004836:	f7fc fdd3 	bl	80013e0 <HAL_GetTick>
 800483a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800483c:	e00b      	b.n	8004856 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800483e:	f7fc fdcf 	bl	80013e0 <HAL_GetTick>
 8004842:	4602      	mov	r2, r0
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	1ad3      	subs	r3, r2, r3
 8004848:	f241 3288 	movw	r2, #5000	@ 0x1388
 800484c:	4293      	cmp	r3, r2
 800484e:	d902      	bls.n	8004856 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004850:	2303      	movs	r3, #3
 8004852:	74fb      	strb	r3, [r7, #19]
            break;
 8004854:	e006      	b.n	8004864 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004856:	4b0c      	ldr	r3, [pc, #48]	@ (8004888 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004858:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800485c:	f003 0302 	and.w	r3, r3, #2
 8004860:	2b00      	cmp	r3, #0
 8004862:	d0ec      	beq.n	800483e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004864:	7cfb      	ldrb	r3, [r7, #19]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d10b      	bne.n	8004882 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800486a:	4b07      	ldr	r3, [pc, #28]	@ (8004888 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800486c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004870:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004878:	4903      	ldr	r1, [pc, #12]	@ (8004888 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800487a:	4313      	orrs	r3, r2
 800487c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004880:	e008      	b.n	8004894 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004882:	7cfb      	ldrb	r3, [r7, #19]
 8004884:	74bb      	strb	r3, [r7, #18]
 8004886:	e005      	b.n	8004894 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004888:	40021000 	.word	0x40021000
 800488c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004890:	7cfb      	ldrb	r3, [r7, #19]
 8004892:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004894:	7c7b      	ldrb	r3, [r7, #17]
 8004896:	2b01      	cmp	r3, #1
 8004898:	d105      	bne.n	80048a6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800489a:	4ba6      	ldr	r3, [pc, #664]	@ (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800489c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800489e:	4aa5      	ldr	r2, [pc, #660]	@ (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80048a0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80048a4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f003 0301 	and.w	r3, r3, #1
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d00a      	beq.n	80048c8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80048b2:	4ba0      	ldr	r3, [pc, #640]	@ (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80048b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048b8:	f023 0203 	bic.w	r2, r3, #3
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	685b      	ldr	r3, [r3, #4]
 80048c0:	499c      	ldr	r1, [pc, #624]	@ (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80048c2:	4313      	orrs	r3, r2
 80048c4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f003 0302 	and.w	r3, r3, #2
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d00a      	beq.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80048d4:	4b97      	ldr	r3, [pc, #604]	@ (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80048d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048da:	f023 020c 	bic.w	r2, r3, #12
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	689b      	ldr	r3, [r3, #8]
 80048e2:	4994      	ldr	r1, [pc, #592]	@ (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80048e4:	4313      	orrs	r3, r2
 80048e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f003 0304 	and.w	r3, r3, #4
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d00a      	beq.n	800490c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80048f6:	4b8f      	ldr	r3, [pc, #572]	@ (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80048f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048fc:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	68db      	ldr	r3, [r3, #12]
 8004904:	498b      	ldr	r1, [pc, #556]	@ (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004906:	4313      	orrs	r3, r2
 8004908:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f003 0308 	and.w	r3, r3, #8
 8004914:	2b00      	cmp	r3, #0
 8004916:	d00a      	beq.n	800492e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004918:	4b86      	ldr	r3, [pc, #536]	@ (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800491a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800491e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	691b      	ldr	r3, [r3, #16]
 8004926:	4983      	ldr	r1, [pc, #524]	@ (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004928:	4313      	orrs	r3, r2
 800492a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f003 0320 	and.w	r3, r3, #32
 8004936:	2b00      	cmp	r3, #0
 8004938:	d00a      	beq.n	8004950 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800493a:	4b7e      	ldr	r3, [pc, #504]	@ (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800493c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004940:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	695b      	ldr	r3, [r3, #20]
 8004948:	497a      	ldr	r1, [pc, #488]	@ (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800494a:	4313      	orrs	r3, r2
 800494c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004958:	2b00      	cmp	r3, #0
 800495a:	d00a      	beq.n	8004972 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800495c:	4b75      	ldr	r3, [pc, #468]	@ (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800495e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004962:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	699b      	ldr	r3, [r3, #24]
 800496a:	4972      	ldr	r1, [pc, #456]	@ (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800496c:	4313      	orrs	r3, r2
 800496e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800497a:	2b00      	cmp	r3, #0
 800497c:	d00a      	beq.n	8004994 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800497e:	4b6d      	ldr	r3, [pc, #436]	@ (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004980:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004984:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	69db      	ldr	r3, [r3, #28]
 800498c:	4969      	ldr	r1, [pc, #420]	@ (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800498e:	4313      	orrs	r3, r2
 8004990:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800499c:	2b00      	cmp	r3, #0
 800499e:	d00a      	beq.n	80049b6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80049a0:	4b64      	ldr	r3, [pc, #400]	@ (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80049a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049a6:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6a1b      	ldr	r3, [r3, #32]
 80049ae:	4961      	ldr	r1, [pc, #388]	@ (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80049b0:	4313      	orrs	r3, r2
 80049b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d00a      	beq.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80049c2:	4b5c      	ldr	r3, [pc, #368]	@ (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80049c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049c8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049d0:	4958      	ldr	r1, [pc, #352]	@ (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80049d2:	4313      	orrs	r3, r2
 80049d4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d015      	beq.n	8004a10 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80049e4:	4b53      	ldr	r3, [pc, #332]	@ (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80049e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049ea:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049f2:	4950      	ldr	r1, [pc, #320]	@ (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80049f4:	4313      	orrs	r3, r2
 80049f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049fe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004a02:	d105      	bne.n	8004a10 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a04:	4b4b      	ldr	r3, [pc, #300]	@ (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a06:	68db      	ldr	r3, [r3, #12]
 8004a08:	4a4a      	ldr	r2, [pc, #296]	@ (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a0a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004a0e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d015      	beq.n	8004a48 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004a1c:	4b45      	ldr	r3, [pc, #276]	@ (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a22:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a2a:	4942      	ldr	r1, [pc, #264]	@ (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a2c:	4313      	orrs	r3, r2
 8004a2e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a36:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004a3a:	d105      	bne.n	8004a48 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a3c:	4b3d      	ldr	r3, [pc, #244]	@ (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a3e:	68db      	ldr	r3, [r3, #12]
 8004a40:	4a3c      	ldr	r2, [pc, #240]	@ (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a42:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004a46:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d015      	beq.n	8004a80 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004a54:	4b37      	ldr	r3, [pc, #220]	@ (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a5a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a62:	4934      	ldr	r1, [pc, #208]	@ (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a64:	4313      	orrs	r3, r2
 8004a66:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a6e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004a72:	d105      	bne.n	8004a80 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a74:	4b2f      	ldr	r3, [pc, #188]	@ (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a76:	68db      	ldr	r3, [r3, #12]
 8004a78:	4a2e      	ldr	r2, [pc, #184]	@ (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a7a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004a7e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d015      	beq.n	8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004a8c:	4b29      	ldr	r3, [pc, #164]	@ (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a92:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a9a:	4926      	ldr	r1, [pc, #152]	@ (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a9c:	4313      	orrs	r3, r2
 8004a9e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004aa6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004aaa:	d105      	bne.n	8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004aac:	4b21      	ldr	r3, [pc, #132]	@ (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004aae:	68db      	ldr	r3, [r3, #12]
 8004ab0:	4a20      	ldr	r2, [pc, #128]	@ (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ab2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004ab6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d015      	beq.n	8004af0 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004ac4:	4b1b      	ldr	r3, [pc, #108]	@ (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ac6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004aca:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ad2:	4918      	ldr	r1, [pc, #96]	@ (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ad4:	4313      	orrs	r3, r2
 8004ad6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ade:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004ae2:	d105      	bne.n	8004af0 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ae4:	4b13      	ldr	r3, [pc, #76]	@ (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ae6:	68db      	ldr	r3, [r3, #12]
 8004ae8:	4a12      	ldr	r2, [pc, #72]	@ (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004aea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004aee:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d015      	beq.n	8004b28 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004afc:	4b0d      	ldr	r3, [pc, #52]	@ (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004afe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b02:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b0a:	490a      	ldr	r1, [pc, #40]	@ (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b0c:	4313      	orrs	r3, r2
 8004b0e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b16:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004b1a:	d105      	bne.n	8004b28 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004b1c:	4b05      	ldr	r3, [pc, #20]	@ (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b1e:	68db      	ldr	r3, [r3, #12]
 8004b20:	4a04      	ldr	r2, [pc, #16]	@ (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b22:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b26:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004b28:	7cbb      	ldrb	r3, [r7, #18]
}
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	3718      	adds	r7, #24
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	bd80      	pop	{r7, pc}
 8004b32:	bf00      	nop
 8004b34:	40021000 	.word	0x40021000

08004b38 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b082      	sub	sp, #8
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d101      	bne.n	8004b4a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004b46:	2301      	movs	r3, #1
 8004b48:	e049      	b.n	8004bde <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b50:	b2db      	uxtb	r3, r3
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d106      	bne.n	8004b64 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2200      	movs	r2, #0
 8004b5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004b5e:	6878      	ldr	r0, [r7, #4]
 8004b60:	f7fc fa98 	bl	8001094 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2202      	movs	r2, #2
 8004b68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681a      	ldr	r2, [r3, #0]
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	3304      	adds	r3, #4
 8004b74:	4619      	mov	r1, r3
 8004b76:	4610      	mov	r0, r2
 8004b78:	f000 fb4a 	bl	8005210 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2201      	movs	r2, #1
 8004b80:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2201      	movs	r2, #1
 8004b88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2201      	movs	r2, #1
 8004b90:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2201      	movs	r2, #1
 8004b98:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2201      	movs	r2, #1
 8004ba0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2201      	movs	r2, #1
 8004ba8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2201      	movs	r2, #1
 8004bb0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2201      	movs	r2, #1
 8004bb8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2201      	movs	r2, #1
 8004bc0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2201      	movs	r2, #1
 8004bc8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2201      	movs	r2, #1
 8004bd0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2201      	movs	r2, #1
 8004bd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004bdc:	2300      	movs	r3, #0
}
 8004bde:	4618      	mov	r0, r3
 8004be0:	3708      	adds	r7, #8
 8004be2:	46bd      	mov	sp, r7
 8004be4:	bd80      	pop	{r7, pc}

08004be6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004be6:	b580      	push	{r7, lr}
 8004be8:	b082      	sub	sp, #8
 8004bea:	af00      	add	r7, sp, #0
 8004bec:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d101      	bne.n	8004bf8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004bf4:	2301      	movs	r3, #1
 8004bf6:	e049      	b.n	8004c8c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004bfe:	b2db      	uxtb	r3, r3
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d106      	bne.n	8004c12 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2200      	movs	r2, #0
 8004c08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004c0c:	6878      	ldr	r0, [r7, #4]
 8004c0e:	f000 f841 	bl	8004c94 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2202      	movs	r2, #2
 8004c16:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681a      	ldr	r2, [r3, #0]
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	3304      	adds	r3, #4
 8004c22:	4619      	mov	r1, r3
 8004c24:	4610      	mov	r0, r2
 8004c26:	f000 faf3 	bl	8005210 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2201      	movs	r2, #1
 8004c2e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2201      	movs	r2, #1
 8004c36:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2201      	movs	r2, #1
 8004c3e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2201      	movs	r2, #1
 8004c46:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2201      	movs	r2, #1
 8004c4e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2201      	movs	r2, #1
 8004c56:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2201      	movs	r2, #1
 8004c5e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2201      	movs	r2, #1
 8004c66:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2201      	movs	r2, #1
 8004c6e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2201      	movs	r2, #1
 8004c76:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2201      	movs	r2, #1
 8004c7e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2201      	movs	r2, #1
 8004c86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004c8a:	2300      	movs	r3, #0
}
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	3708      	adds	r7, #8
 8004c90:	46bd      	mov	sp, r7
 8004c92:	bd80      	pop	{r7, pc}

08004c94 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004c94:	b480      	push	{r7}
 8004c96:	b083      	sub	sp, #12
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004c9c:	bf00      	nop
 8004c9e:	370c      	adds	r7, #12
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca6:	4770      	bx	lr

08004ca8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b086      	sub	sp, #24
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
 8004cb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d101      	bne.n	8004cbc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004cb8:	2301      	movs	r3, #1
 8004cba:	e097      	b.n	8004dec <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004cc2:	b2db      	uxtb	r3, r3
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d106      	bne.n	8004cd6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2200      	movs	r2, #0
 8004ccc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004cd0:	6878      	ldr	r0, [r7, #4]
 8004cd2:	f7fc f94d 	bl	8000f70 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2202      	movs	r2, #2
 8004cda:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	689b      	ldr	r3, [r3, #8]
 8004ce4:	687a      	ldr	r2, [r7, #4]
 8004ce6:	6812      	ldr	r2, [r2, #0]
 8004ce8:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8004cec:	f023 0307 	bic.w	r3, r3, #7
 8004cf0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681a      	ldr	r2, [r3, #0]
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	3304      	adds	r3, #4
 8004cfa:	4619      	mov	r1, r3
 8004cfc:	4610      	mov	r0, r2
 8004cfe:	f000 fa87 	bl	8005210 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	689b      	ldr	r3, [r3, #8]
 8004d08:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	699b      	ldr	r3, [r3, #24]
 8004d10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	6a1b      	ldr	r3, [r3, #32]
 8004d18:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	697a      	ldr	r2, [r7, #20]
 8004d20:	4313      	orrs	r3, r2
 8004d22:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004d24:	693b      	ldr	r3, [r7, #16]
 8004d26:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d2a:	f023 0303 	bic.w	r3, r3, #3
 8004d2e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	689a      	ldr	r2, [r3, #8]
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	699b      	ldr	r3, [r3, #24]
 8004d38:	021b      	lsls	r3, r3, #8
 8004d3a:	4313      	orrs	r3, r2
 8004d3c:	693a      	ldr	r2, [r7, #16]
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004d42:	693b      	ldr	r3, [r7, #16]
 8004d44:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8004d48:	f023 030c 	bic.w	r3, r3, #12
 8004d4c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004d4e:	693b      	ldr	r3, [r7, #16]
 8004d50:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004d54:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004d58:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	68da      	ldr	r2, [r3, #12]
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	69db      	ldr	r3, [r3, #28]
 8004d62:	021b      	lsls	r3, r3, #8
 8004d64:	4313      	orrs	r3, r2
 8004d66:	693a      	ldr	r2, [r7, #16]
 8004d68:	4313      	orrs	r3, r2
 8004d6a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	691b      	ldr	r3, [r3, #16]
 8004d70:	011a      	lsls	r2, r3, #4
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	6a1b      	ldr	r3, [r3, #32]
 8004d76:	031b      	lsls	r3, r3, #12
 8004d78:	4313      	orrs	r3, r2
 8004d7a:	693a      	ldr	r2, [r7, #16]
 8004d7c:	4313      	orrs	r3, r2
 8004d7e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8004d86:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8004d8e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	685a      	ldr	r2, [r3, #4]
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	695b      	ldr	r3, [r3, #20]
 8004d98:	011b      	lsls	r3, r3, #4
 8004d9a:	4313      	orrs	r3, r2
 8004d9c:	68fa      	ldr	r2, [r7, #12]
 8004d9e:	4313      	orrs	r3, r2
 8004da0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	697a      	ldr	r2, [r7, #20]
 8004da8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	693a      	ldr	r2, [r7, #16]
 8004db0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	68fa      	ldr	r2, [r7, #12]
 8004db8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2201      	movs	r2, #1
 8004dbe:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2201      	movs	r2, #1
 8004dc6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2201      	movs	r2, #1
 8004dce:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2201      	movs	r2, #1
 8004dd6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2201      	movs	r2, #1
 8004dde:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2201      	movs	r2, #1
 8004de6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004dea:	2300      	movs	r3, #0
}
 8004dec:	4618      	mov	r0, r3
 8004dee:	3718      	adds	r7, #24
 8004df0:	46bd      	mov	sp, r7
 8004df2:	bd80      	pop	{r7, pc}

08004df4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b086      	sub	sp, #24
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	60f8      	str	r0, [r7, #12]
 8004dfc:	60b9      	str	r1, [r7, #8]
 8004dfe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e00:	2300      	movs	r3, #0
 8004e02:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004e0a:	2b01      	cmp	r3, #1
 8004e0c:	d101      	bne.n	8004e12 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004e0e:	2302      	movs	r3, #2
 8004e10:	e0ff      	b.n	8005012 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	2201      	movs	r2, #1
 8004e16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2b14      	cmp	r3, #20
 8004e1e:	f200 80f0 	bhi.w	8005002 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004e22:	a201      	add	r2, pc, #4	@ (adr r2, 8004e28 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004e24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e28:	08004e7d 	.word	0x08004e7d
 8004e2c:	08005003 	.word	0x08005003
 8004e30:	08005003 	.word	0x08005003
 8004e34:	08005003 	.word	0x08005003
 8004e38:	08004ebd 	.word	0x08004ebd
 8004e3c:	08005003 	.word	0x08005003
 8004e40:	08005003 	.word	0x08005003
 8004e44:	08005003 	.word	0x08005003
 8004e48:	08004eff 	.word	0x08004eff
 8004e4c:	08005003 	.word	0x08005003
 8004e50:	08005003 	.word	0x08005003
 8004e54:	08005003 	.word	0x08005003
 8004e58:	08004f3f 	.word	0x08004f3f
 8004e5c:	08005003 	.word	0x08005003
 8004e60:	08005003 	.word	0x08005003
 8004e64:	08005003 	.word	0x08005003
 8004e68:	08004f81 	.word	0x08004f81
 8004e6c:	08005003 	.word	0x08005003
 8004e70:	08005003 	.word	0x08005003
 8004e74:	08005003 	.word	0x08005003
 8004e78:	08004fc1 	.word	0x08004fc1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	68b9      	ldr	r1, [r7, #8]
 8004e82:	4618      	mov	r0, r3
 8004e84:	f000 fa60 	bl	8005348 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	699a      	ldr	r2, [r3, #24]
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f042 0208 	orr.w	r2, r2, #8
 8004e96:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	699a      	ldr	r2, [r3, #24]
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f022 0204 	bic.w	r2, r2, #4
 8004ea6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	6999      	ldr	r1, [r3, #24]
 8004eae:	68bb      	ldr	r3, [r7, #8]
 8004eb0:	691a      	ldr	r2, [r3, #16]
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	430a      	orrs	r2, r1
 8004eb8:	619a      	str	r2, [r3, #24]
      break;
 8004eba:	e0a5      	b.n	8005008 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	68b9      	ldr	r1, [r7, #8]
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	f000 fad0 	bl	8005468 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	699a      	ldr	r2, [r3, #24]
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004ed6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	699a      	ldr	r2, [r3, #24]
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004ee6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	6999      	ldr	r1, [r3, #24]
 8004eee:	68bb      	ldr	r3, [r7, #8]
 8004ef0:	691b      	ldr	r3, [r3, #16]
 8004ef2:	021a      	lsls	r2, r3, #8
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	430a      	orrs	r2, r1
 8004efa:	619a      	str	r2, [r3, #24]
      break;
 8004efc:	e084      	b.n	8005008 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	68b9      	ldr	r1, [r7, #8]
 8004f04:	4618      	mov	r0, r3
 8004f06:	f000 fb39 	bl	800557c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	69da      	ldr	r2, [r3, #28]
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f042 0208 	orr.w	r2, r2, #8
 8004f18:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	69da      	ldr	r2, [r3, #28]
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f022 0204 	bic.w	r2, r2, #4
 8004f28:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	69d9      	ldr	r1, [r3, #28]
 8004f30:	68bb      	ldr	r3, [r7, #8]
 8004f32:	691a      	ldr	r2, [r3, #16]
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	430a      	orrs	r2, r1
 8004f3a:	61da      	str	r2, [r3, #28]
      break;
 8004f3c:	e064      	b.n	8005008 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	68b9      	ldr	r1, [r7, #8]
 8004f44:	4618      	mov	r0, r3
 8004f46:	f000 fba1 	bl	800568c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	69da      	ldr	r2, [r3, #28]
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004f58:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	69da      	ldr	r2, [r3, #28]
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004f68:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	69d9      	ldr	r1, [r3, #28]
 8004f70:	68bb      	ldr	r3, [r7, #8]
 8004f72:	691b      	ldr	r3, [r3, #16]
 8004f74:	021a      	lsls	r2, r3, #8
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	430a      	orrs	r2, r1
 8004f7c:	61da      	str	r2, [r3, #28]
      break;
 8004f7e:	e043      	b.n	8005008 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	68b9      	ldr	r1, [r7, #8]
 8004f86:	4618      	mov	r0, r3
 8004f88:	f000 fc0a 	bl	80057a0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f042 0208 	orr.w	r2, r2, #8
 8004f9a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f022 0204 	bic.w	r2, r2, #4
 8004faa:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8004fb2:	68bb      	ldr	r3, [r7, #8]
 8004fb4:	691a      	ldr	r2, [r3, #16]
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	430a      	orrs	r2, r1
 8004fbc:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8004fbe:	e023      	b.n	8005008 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	68b9      	ldr	r1, [r7, #8]
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	f000 fc4e 	bl	8005868 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004fda:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004fea:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8004ff2:	68bb      	ldr	r3, [r7, #8]
 8004ff4:	691b      	ldr	r3, [r3, #16]
 8004ff6:	021a      	lsls	r2, r3, #8
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	430a      	orrs	r2, r1
 8004ffe:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8005000:	e002      	b.n	8005008 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005002:	2301      	movs	r3, #1
 8005004:	75fb      	strb	r3, [r7, #23]
      break;
 8005006:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	2200      	movs	r2, #0
 800500c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005010:	7dfb      	ldrb	r3, [r7, #23]
}
 8005012:	4618      	mov	r0, r3
 8005014:	3718      	adds	r7, #24
 8005016:	46bd      	mov	sp, r7
 8005018:	bd80      	pop	{r7, pc}
 800501a:	bf00      	nop

0800501c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b084      	sub	sp, #16
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
 8005024:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005026:	2300      	movs	r3, #0
 8005028:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005030:	2b01      	cmp	r3, #1
 8005032:	d101      	bne.n	8005038 <HAL_TIM_ConfigClockSource+0x1c>
 8005034:	2302      	movs	r3, #2
 8005036:	e0de      	b.n	80051f6 <HAL_TIM_ConfigClockSource+0x1da>
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2201      	movs	r2, #1
 800503c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2202      	movs	r2, #2
 8005044:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	689b      	ldr	r3, [r3, #8]
 800504e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005050:	68bb      	ldr	r3, [r7, #8]
 8005052:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8005056:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800505a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800505c:	68bb      	ldr	r3, [r7, #8]
 800505e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005062:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	68ba      	ldr	r2, [r7, #8]
 800506a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4a63      	ldr	r2, [pc, #396]	@ (8005200 <HAL_TIM_ConfigClockSource+0x1e4>)
 8005072:	4293      	cmp	r3, r2
 8005074:	f000 80a9 	beq.w	80051ca <HAL_TIM_ConfigClockSource+0x1ae>
 8005078:	4a61      	ldr	r2, [pc, #388]	@ (8005200 <HAL_TIM_ConfigClockSource+0x1e4>)
 800507a:	4293      	cmp	r3, r2
 800507c:	f200 80ae 	bhi.w	80051dc <HAL_TIM_ConfigClockSource+0x1c0>
 8005080:	4a60      	ldr	r2, [pc, #384]	@ (8005204 <HAL_TIM_ConfigClockSource+0x1e8>)
 8005082:	4293      	cmp	r3, r2
 8005084:	f000 80a1 	beq.w	80051ca <HAL_TIM_ConfigClockSource+0x1ae>
 8005088:	4a5e      	ldr	r2, [pc, #376]	@ (8005204 <HAL_TIM_ConfigClockSource+0x1e8>)
 800508a:	4293      	cmp	r3, r2
 800508c:	f200 80a6 	bhi.w	80051dc <HAL_TIM_ConfigClockSource+0x1c0>
 8005090:	4a5d      	ldr	r2, [pc, #372]	@ (8005208 <HAL_TIM_ConfigClockSource+0x1ec>)
 8005092:	4293      	cmp	r3, r2
 8005094:	f000 8099 	beq.w	80051ca <HAL_TIM_ConfigClockSource+0x1ae>
 8005098:	4a5b      	ldr	r2, [pc, #364]	@ (8005208 <HAL_TIM_ConfigClockSource+0x1ec>)
 800509a:	4293      	cmp	r3, r2
 800509c:	f200 809e 	bhi.w	80051dc <HAL_TIM_ConfigClockSource+0x1c0>
 80050a0:	4a5a      	ldr	r2, [pc, #360]	@ (800520c <HAL_TIM_ConfigClockSource+0x1f0>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	f000 8091 	beq.w	80051ca <HAL_TIM_ConfigClockSource+0x1ae>
 80050a8:	4a58      	ldr	r2, [pc, #352]	@ (800520c <HAL_TIM_ConfigClockSource+0x1f0>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	f200 8096 	bhi.w	80051dc <HAL_TIM_ConfigClockSource+0x1c0>
 80050b0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80050b4:	f000 8089 	beq.w	80051ca <HAL_TIM_ConfigClockSource+0x1ae>
 80050b8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80050bc:	f200 808e 	bhi.w	80051dc <HAL_TIM_ConfigClockSource+0x1c0>
 80050c0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80050c4:	d03e      	beq.n	8005144 <HAL_TIM_ConfigClockSource+0x128>
 80050c6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80050ca:	f200 8087 	bhi.w	80051dc <HAL_TIM_ConfigClockSource+0x1c0>
 80050ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80050d2:	f000 8086 	beq.w	80051e2 <HAL_TIM_ConfigClockSource+0x1c6>
 80050d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80050da:	d87f      	bhi.n	80051dc <HAL_TIM_ConfigClockSource+0x1c0>
 80050dc:	2b70      	cmp	r3, #112	@ 0x70
 80050de:	d01a      	beq.n	8005116 <HAL_TIM_ConfigClockSource+0xfa>
 80050e0:	2b70      	cmp	r3, #112	@ 0x70
 80050e2:	d87b      	bhi.n	80051dc <HAL_TIM_ConfigClockSource+0x1c0>
 80050e4:	2b60      	cmp	r3, #96	@ 0x60
 80050e6:	d050      	beq.n	800518a <HAL_TIM_ConfigClockSource+0x16e>
 80050e8:	2b60      	cmp	r3, #96	@ 0x60
 80050ea:	d877      	bhi.n	80051dc <HAL_TIM_ConfigClockSource+0x1c0>
 80050ec:	2b50      	cmp	r3, #80	@ 0x50
 80050ee:	d03c      	beq.n	800516a <HAL_TIM_ConfigClockSource+0x14e>
 80050f0:	2b50      	cmp	r3, #80	@ 0x50
 80050f2:	d873      	bhi.n	80051dc <HAL_TIM_ConfigClockSource+0x1c0>
 80050f4:	2b40      	cmp	r3, #64	@ 0x40
 80050f6:	d058      	beq.n	80051aa <HAL_TIM_ConfigClockSource+0x18e>
 80050f8:	2b40      	cmp	r3, #64	@ 0x40
 80050fa:	d86f      	bhi.n	80051dc <HAL_TIM_ConfigClockSource+0x1c0>
 80050fc:	2b30      	cmp	r3, #48	@ 0x30
 80050fe:	d064      	beq.n	80051ca <HAL_TIM_ConfigClockSource+0x1ae>
 8005100:	2b30      	cmp	r3, #48	@ 0x30
 8005102:	d86b      	bhi.n	80051dc <HAL_TIM_ConfigClockSource+0x1c0>
 8005104:	2b20      	cmp	r3, #32
 8005106:	d060      	beq.n	80051ca <HAL_TIM_ConfigClockSource+0x1ae>
 8005108:	2b20      	cmp	r3, #32
 800510a:	d867      	bhi.n	80051dc <HAL_TIM_ConfigClockSource+0x1c0>
 800510c:	2b00      	cmp	r3, #0
 800510e:	d05c      	beq.n	80051ca <HAL_TIM_ConfigClockSource+0x1ae>
 8005110:	2b10      	cmp	r3, #16
 8005112:	d05a      	beq.n	80051ca <HAL_TIM_ConfigClockSource+0x1ae>
 8005114:	e062      	b.n	80051dc <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005126:	f000 fce9 	bl	8005afc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	689b      	ldr	r3, [r3, #8]
 8005130:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005132:	68bb      	ldr	r3, [r7, #8]
 8005134:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005138:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	68ba      	ldr	r2, [r7, #8]
 8005140:	609a      	str	r2, [r3, #8]
      break;
 8005142:	e04f      	b.n	80051e4 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005154:	f000 fcd2 	bl	8005afc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	689a      	ldr	r2, [r3, #8]
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005166:	609a      	str	r2, [r3, #8]
      break;
 8005168:	e03c      	b.n	80051e4 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005176:	461a      	mov	r2, r3
 8005178:	f000 fc44 	bl	8005a04 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	2150      	movs	r1, #80	@ 0x50
 8005182:	4618      	mov	r0, r3
 8005184:	f000 fc9d 	bl	8005ac2 <TIM_ITRx_SetConfig>
      break;
 8005188:	e02c      	b.n	80051e4 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005196:	461a      	mov	r2, r3
 8005198:	f000 fc63 	bl	8005a62 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	2160      	movs	r1, #96	@ 0x60
 80051a2:	4618      	mov	r0, r3
 80051a4:	f000 fc8d 	bl	8005ac2 <TIM_ITRx_SetConfig>
      break;
 80051a8:	e01c      	b.n	80051e4 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80051b6:	461a      	mov	r2, r3
 80051b8:	f000 fc24 	bl	8005a04 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	2140      	movs	r1, #64	@ 0x40
 80051c2:	4618      	mov	r0, r3
 80051c4:	f000 fc7d 	bl	8005ac2 <TIM_ITRx_SetConfig>
      break;
 80051c8:	e00c      	b.n	80051e4 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681a      	ldr	r2, [r3, #0]
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	4619      	mov	r1, r3
 80051d4:	4610      	mov	r0, r2
 80051d6:	f000 fc74 	bl	8005ac2 <TIM_ITRx_SetConfig>
      break;
 80051da:	e003      	b.n	80051e4 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 80051dc:	2301      	movs	r3, #1
 80051de:	73fb      	strb	r3, [r7, #15]
      break;
 80051e0:	e000      	b.n	80051e4 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 80051e2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2201      	movs	r2, #1
 80051e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2200      	movs	r2, #0
 80051f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80051f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80051f6:	4618      	mov	r0, r3
 80051f8:	3710      	adds	r7, #16
 80051fa:	46bd      	mov	sp, r7
 80051fc:	bd80      	pop	{r7, pc}
 80051fe:	bf00      	nop
 8005200:	00100070 	.word	0x00100070
 8005204:	00100040 	.word	0x00100040
 8005208:	00100030 	.word	0x00100030
 800520c:	00100020 	.word	0x00100020

08005210 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005210:	b480      	push	{r7}
 8005212:	b085      	sub	sp, #20
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
 8005218:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	4a42      	ldr	r2, [pc, #264]	@ (800532c <TIM_Base_SetConfig+0x11c>)
 8005224:	4293      	cmp	r3, r2
 8005226:	d00f      	beq.n	8005248 <TIM_Base_SetConfig+0x38>
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800522e:	d00b      	beq.n	8005248 <TIM_Base_SetConfig+0x38>
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	4a3f      	ldr	r2, [pc, #252]	@ (8005330 <TIM_Base_SetConfig+0x120>)
 8005234:	4293      	cmp	r3, r2
 8005236:	d007      	beq.n	8005248 <TIM_Base_SetConfig+0x38>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	4a3e      	ldr	r2, [pc, #248]	@ (8005334 <TIM_Base_SetConfig+0x124>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d003      	beq.n	8005248 <TIM_Base_SetConfig+0x38>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	4a3d      	ldr	r2, [pc, #244]	@ (8005338 <TIM_Base_SetConfig+0x128>)
 8005244:	4293      	cmp	r3, r2
 8005246:	d108      	bne.n	800525a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800524e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	685b      	ldr	r3, [r3, #4]
 8005254:	68fa      	ldr	r2, [r7, #12]
 8005256:	4313      	orrs	r3, r2
 8005258:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	4a33      	ldr	r2, [pc, #204]	@ (800532c <TIM_Base_SetConfig+0x11c>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d01b      	beq.n	800529a <TIM_Base_SetConfig+0x8a>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005268:	d017      	beq.n	800529a <TIM_Base_SetConfig+0x8a>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	4a30      	ldr	r2, [pc, #192]	@ (8005330 <TIM_Base_SetConfig+0x120>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d013      	beq.n	800529a <TIM_Base_SetConfig+0x8a>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	4a2f      	ldr	r2, [pc, #188]	@ (8005334 <TIM_Base_SetConfig+0x124>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d00f      	beq.n	800529a <TIM_Base_SetConfig+0x8a>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	4a2e      	ldr	r2, [pc, #184]	@ (8005338 <TIM_Base_SetConfig+0x128>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d00b      	beq.n	800529a <TIM_Base_SetConfig+0x8a>
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	4a2d      	ldr	r2, [pc, #180]	@ (800533c <TIM_Base_SetConfig+0x12c>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d007      	beq.n	800529a <TIM_Base_SetConfig+0x8a>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	4a2c      	ldr	r2, [pc, #176]	@ (8005340 <TIM_Base_SetConfig+0x130>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d003      	beq.n	800529a <TIM_Base_SetConfig+0x8a>
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	4a2b      	ldr	r2, [pc, #172]	@ (8005344 <TIM_Base_SetConfig+0x134>)
 8005296:	4293      	cmp	r3, r2
 8005298:	d108      	bne.n	80052ac <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80052a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	68db      	ldr	r3, [r3, #12]
 80052a6:	68fa      	ldr	r2, [r7, #12]
 80052a8:	4313      	orrs	r3, r2
 80052aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	695b      	ldr	r3, [r3, #20]
 80052b6:	4313      	orrs	r3, r2
 80052b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	68fa      	ldr	r2, [r7, #12]
 80052be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	689a      	ldr	r2, [r3, #8]
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	681a      	ldr	r2, [r3, #0]
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	4a16      	ldr	r2, [pc, #88]	@ (800532c <TIM_Base_SetConfig+0x11c>)
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d00f      	beq.n	80052f8 <TIM_Base_SetConfig+0xe8>
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	4a17      	ldr	r2, [pc, #92]	@ (8005338 <TIM_Base_SetConfig+0x128>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d00b      	beq.n	80052f8 <TIM_Base_SetConfig+0xe8>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	4a16      	ldr	r2, [pc, #88]	@ (800533c <TIM_Base_SetConfig+0x12c>)
 80052e4:	4293      	cmp	r3, r2
 80052e6:	d007      	beq.n	80052f8 <TIM_Base_SetConfig+0xe8>
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	4a15      	ldr	r2, [pc, #84]	@ (8005340 <TIM_Base_SetConfig+0x130>)
 80052ec:	4293      	cmp	r3, r2
 80052ee:	d003      	beq.n	80052f8 <TIM_Base_SetConfig+0xe8>
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	4a14      	ldr	r2, [pc, #80]	@ (8005344 <TIM_Base_SetConfig+0x134>)
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d103      	bne.n	8005300 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	691a      	ldr	r2, [r3, #16]
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2201      	movs	r2, #1
 8005304:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	691b      	ldr	r3, [r3, #16]
 800530a:	f003 0301 	and.w	r3, r3, #1
 800530e:	2b01      	cmp	r3, #1
 8005310:	d105      	bne.n	800531e <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	691b      	ldr	r3, [r3, #16]
 8005316:	f023 0201 	bic.w	r2, r3, #1
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	611a      	str	r2, [r3, #16]
  }
}
 800531e:	bf00      	nop
 8005320:	3714      	adds	r7, #20
 8005322:	46bd      	mov	sp, r7
 8005324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005328:	4770      	bx	lr
 800532a:	bf00      	nop
 800532c:	40012c00 	.word	0x40012c00
 8005330:	40000400 	.word	0x40000400
 8005334:	40000800 	.word	0x40000800
 8005338:	40013400 	.word	0x40013400
 800533c:	40014000 	.word	0x40014000
 8005340:	40014400 	.word	0x40014400
 8005344:	40014800 	.word	0x40014800

08005348 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005348:	b480      	push	{r7}
 800534a:	b087      	sub	sp, #28
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
 8005350:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6a1b      	ldr	r3, [r3, #32]
 8005356:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6a1b      	ldr	r3, [r3, #32]
 800535c:	f023 0201 	bic.w	r2, r3, #1
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	685b      	ldr	r3, [r3, #4]
 8005368:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	699b      	ldr	r3, [r3, #24]
 800536e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005376:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800537a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	f023 0303 	bic.w	r3, r3, #3
 8005382:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	68fa      	ldr	r2, [r7, #12]
 800538a:	4313      	orrs	r3, r2
 800538c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800538e:	697b      	ldr	r3, [r7, #20]
 8005390:	f023 0302 	bic.w	r3, r3, #2
 8005394:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	689b      	ldr	r3, [r3, #8]
 800539a:	697a      	ldr	r2, [r7, #20]
 800539c:	4313      	orrs	r3, r2
 800539e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	4a2c      	ldr	r2, [pc, #176]	@ (8005454 <TIM_OC1_SetConfig+0x10c>)
 80053a4:	4293      	cmp	r3, r2
 80053a6:	d00f      	beq.n	80053c8 <TIM_OC1_SetConfig+0x80>
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	4a2b      	ldr	r2, [pc, #172]	@ (8005458 <TIM_OC1_SetConfig+0x110>)
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d00b      	beq.n	80053c8 <TIM_OC1_SetConfig+0x80>
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	4a2a      	ldr	r2, [pc, #168]	@ (800545c <TIM_OC1_SetConfig+0x114>)
 80053b4:	4293      	cmp	r3, r2
 80053b6:	d007      	beq.n	80053c8 <TIM_OC1_SetConfig+0x80>
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	4a29      	ldr	r2, [pc, #164]	@ (8005460 <TIM_OC1_SetConfig+0x118>)
 80053bc:	4293      	cmp	r3, r2
 80053be:	d003      	beq.n	80053c8 <TIM_OC1_SetConfig+0x80>
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	4a28      	ldr	r2, [pc, #160]	@ (8005464 <TIM_OC1_SetConfig+0x11c>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d10c      	bne.n	80053e2 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80053c8:	697b      	ldr	r3, [r7, #20]
 80053ca:	f023 0308 	bic.w	r3, r3, #8
 80053ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	68db      	ldr	r3, [r3, #12]
 80053d4:	697a      	ldr	r2, [r7, #20]
 80053d6:	4313      	orrs	r3, r2
 80053d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80053da:	697b      	ldr	r3, [r7, #20]
 80053dc:	f023 0304 	bic.w	r3, r3, #4
 80053e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	4a1b      	ldr	r2, [pc, #108]	@ (8005454 <TIM_OC1_SetConfig+0x10c>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d00f      	beq.n	800540a <TIM_OC1_SetConfig+0xc2>
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	4a1a      	ldr	r2, [pc, #104]	@ (8005458 <TIM_OC1_SetConfig+0x110>)
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d00b      	beq.n	800540a <TIM_OC1_SetConfig+0xc2>
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	4a19      	ldr	r2, [pc, #100]	@ (800545c <TIM_OC1_SetConfig+0x114>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d007      	beq.n	800540a <TIM_OC1_SetConfig+0xc2>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	4a18      	ldr	r2, [pc, #96]	@ (8005460 <TIM_OC1_SetConfig+0x118>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	d003      	beq.n	800540a <TIM_OC1_SetConfig+0xc2>
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	4a17      	ldr	r2, [pc, #92]	@ (8005464 <TIM_OC1_SetConfig+0x11c>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d111      	bne.n	800542e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800540a:	693b      	ldr	r3, [r7, #16]
 800540c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005410:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005412:	693b      	ldr	r3, [r7, #16]
 8005414:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005418:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	695b      	ldr	r3, [r3, #20]
 800541e:	693a      	ldr	r2, [r7, #16]
 8005420:	4313      	orrs	r3, r2
 8005422:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	699b      	ldr	r3, [r3, #24]
 8005428:	693a      	ldr	r2, [r7, #16]
 800542a:	4313      	orrs	r3, r2
 800542c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	693a      	ldr	r2, [r7, #16]
 8005432:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	68fa      	ldr	r2, [r7, #12]
 8005438:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	685a      	ldr	r2, [r3, #4]
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	697a      	ldr	r2, [r7, #20]
 8005446:	621a      	str	r2, [r3, #32]
}
 8005448:	bf00      	nop
 800544a:	371c      	adds	r7, #28
 800544c:	46bd      	mov	sp, r7
 800544e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005452:	4770      	bx	lr
 8005454:	40012c00 	.word	0x40012c00
 8005458:	40013400 	.word	0x40013400
 800545c:	40014000 	.word	0x40014000
 8005460:	40014400 	.word	0x40014400
 8005464:	40014800 	.word	0x40014800

08005468 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005468:	b480      	push	{r7}
 800546a:	b087      	sub	sp, #28
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
 8005470:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6a1b      	ldr	r3, [r3, #32]
 8005476:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	6a1b      	ldr	r3, [r3, #32]
 800547c:	f023 0210 	bic.w	r2, r3, #16
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	685b      	ldr	r3, [r3, #4]
 8005488:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	699b      	ldr	r3, [r3, #24]
 800548e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005496:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800549a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80054a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	021b      	lsls	r3, r3, #8
 80054aa:	68fa      	ldr	r2, [r7, #12]
 80054ac:	4313      	orrs	r3, r2
 80054ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80054b0:	697b      	ldr	r3, [r7, #20]
 80054b2:	f023 0320 	bic.w	r3, r3, #32
 80054b6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	689b      	ldr	r3, [r3, #8]
 80054bc:	011b      	lsls	r3, r3, #4
 80054be:	697a      	ldr	r2, [r7, #20]
 80054c0:	4313      	orrs	r3, r2
 80054c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	4a28      	ldr	r2, [pc, #160]	@ (8005568 <TIM_OC2_SetConfig+0x100>)
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d003      	beq.n	80054d4 <TIM_OC2_SetConfig+0x6c>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	4a27      	ldr	r2, [pc, #156]	@ (800556c <TIM_OC2_SetConfig+0x104>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d10d      	bne.n	80054f0 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80054d4:	697b      	ldr	r3, [r7, #20]
 80054d6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80054da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	68db      	ldr	r3, [r3, #12]
 80054e0:	011b      	lsls	r3, r3, #4
 80054e2:	697a      	ldr	r2, [r7, #20]
 80054e4:	4313      	orrs	r3, r2
 80054e6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80054e8:	697b      	ldr	r3, [r7, #20]
 80054ea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80054ee:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	4a1d      	ldr	r2, [pc, #116]	@ (8005568 <TIM_OC2_SetConfig+0x100>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d00f      	beq.n	8005518 <TIM_OC2_SetConfig+0xb0>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	4a1c      	ldr	r2, [pc, #112]	@ (800556c <TIM_OC2_SetConfig+0x104>)
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d00b      	beq.n	8005518 <TIM_OC2_SetConfig+0xb0>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	4a1b      	ldr	r2, [pc, #108]	@ (8005570 <TIM_OC2_SetConfig+0x108>)
 8005504:	4293      	cmp	r3, r2
 8005506:	d007      	beq.n	8005518 <TIM_OC2_SetConfig+0xb0>
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	4a1a      	ldr	r2, [pc, #104]	@ (8005574 <TIM_OC2_SetConfig+0x10c>)
 800550c:	4293      	cmp	r3, r2
 800550e:	d003      	beq.n	8005518 <TIM_OC2_SetConfig+0xb0>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	4a19      	ldr	r2, [pc, #100]	@ (8005578 <TIM_OC2_SetConfig+0x110>)
 8005514:	4293      	cmp	r3, r2
 8005516:	d113      	bne.n	8005540 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005518:	693b      	ldr	r3, [r7, #16]
 800551a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800551e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005520:	693b      	ldr	r3, [r7, #16]
 8005522:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005526:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	695b      	ldr	r3, [r3, #20]
 800552c:	009b      	lsls	r3, r3, #2
 800552e:	693a      	ldr	r2, [r7, #16]
 8005530:	4313      	orrs	r3, r2
 8005532:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	699b      	ldr	r3, [r3, #24]
 8005538:	009b      	lsls	r3, r3, #2
 800553a:	693a      	ldr	r2, [r7, #16]
 800553c:	4313      	orrs	r3, r2
 800553e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	693a      	ldr	r2, [r7, #16]
 8005544:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	68fa      	ldr	r2, [r7, #12]
 800554a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	685a      	ldr	r2, [r3, #4]
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	697a      	ldr	r2, [r7, #20]
 8005558:	621a      	str	r2, [r3, #32]
}
 800555a:	bf00      	nop
 800555c:	371c      	adds	r7, #28
 800555e:	46bd      	mov	sp, r7
 8005560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005564:	4770      	bx	lr
 8005566:	bf00      	nop
 8005568:	40012c00 	.word	0x40012c00
 800556c:	40013400 	.word	0x40013400
 8005570:	40014000 	.word	0x40014000
 8005574:	40014400 	.word	0x40014400
 8005578:	40014800 	.word	0x40014800

0800557c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800557c:	b480      	push	{r7}
 800557e:	b087      	sub	sp, #28
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
 8005584:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6a1b      	ldr	r3, [r3, #32]
 800558a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	6a1b      	ldr	r3, [r3, #32]
 8005590:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	685b      	ldr	r3, [r3, #4]
 800559c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	69db      	ldr	r3, [r3, #28]
 80055a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80055aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80055ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	f023 0303 	bic.w	r3, r3, #3
 80055b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	68fa      	ldr	r2, [r7, #12]
 80055be:	4313      	orrs	r3, r2
 80055c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80055c2:	697b      	ldr	r3, [r7, #20]
 80055c4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80055c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	689b      	ldr	r3, [r3, #8]
 80055ce:	021b      	lsls	r3, r3, #8
 80055d0:	697a      	ldr	r2, [r7, #20]
 80055d2:	4313      	orrs	r3, r2
 80055d4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	4a27      	ldr	r2, [pc, #156]	@ (8005678 <TIM_OC3_SetConfig+0xfc>)
 80055da:	4293      	cmp	r3, r2
 80055dc:	d003      	beq.n	80055e6 <TIM_OC3_SetConfig+0x6a>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	4a26      	ldr	r2, [pc, #152]	@ (800567c <TIM_OC3_SetConfig+0x100>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d10d      	bne.n	8005602 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80055e6:	697b      	ldr	r3, [r7, #20]
 80055e8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80055ec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	68db      	ldr	r3, [r3, #12]
 80055f2:	021b      	lsls	r3, r3, #8
 80055f4:	697a      	ldr	r2, [r7, #20]
 80055f6:	4313      	orrs	r3, r2
 80055f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80055fa:	697b      	ldr	r3, [r7, #20]
 80055fc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005600:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	4a1c      	ldr	r2, [pc, #112]	@ (8005678 <TIM_OC3_SetConfig+0xfc>)
 8005606:	4293      	cmp	r3, r2
 8005608:	d00f      	beq.n	800562a <TIM_OC3_SetConfig+0xae>
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	4a1b      	ldr	r2, [pc, #108]	@ (800567c <TIM_OC3_SetConfig+0x100>)
 800560e:	4293      	cmp	r3, r2
 8005610:	d00b      	beq.n	800562a <TIM_OC3_SetConfig+0xae>
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	4a1a      	ldr	r2, [pc, #104]	@ (8005680 <TIM_OC3_SetConfig+0x104>)
 8005616:	4293      	cmp	r3, r2
 8005618:	d007      	beq.n	800562a <TIM_OC3_SetConfig+0xae>
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	4a19      	ldr	r2, [pc, #100]	@ (8005684 <TIM_OC3_SetConfig+0x108>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d003      	beq.n	800562a <TIM_OC3_SetConfig+0xae>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	4a18      	ldr	r2, [pc, #96]	@ (8005688 <TIM_OC3_SetConfig+0x10c>)
 8005626:	4293      	cmp	r3, r2
 8005628:	d113      	bne.n	8005652 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800562a:	693b      	ldr	r3, [r7, #16]
 800562c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005630:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005632:	693b      	ldr	r3, [r7, #16]
 8005634:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005638:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	695b      	ldr	r3, [r3, #20]
 800563e:	011b      	lsls	r3, r3, #4
 8005640:	693a      	ldr	r2, [r7, #16]
 8005642:	4313      	orrs	r3, r2
 8005644:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	699b      	ldr	r3, [r3, #24]
 800564a:	011b      	lsls	r3, r3, #4
 800564c:	693a      	ldr	r2, [r7, #16]
 800564e:	4313      	orrs	r3, r2
 8005650:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	693a      	ldr	r2, [r7, #16]
 8005656:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	68fa      	ldr	r2, [r7, #12]
 800565c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	685a      	ldr	r2, [r3, #4]
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	697a      	ldr	r2, [r7, #20]
 800566a:	621a      	str	r2, [r3, #32]
}
 800566c:	bf00      	nop
 800566e:	371c      	adds	r7, #28
 8005670:	46bd      	mov	sp, r7
 8005672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005676:	4770      	bx	lr
 8005678:	40012c00 	.word	0x40012c00
 800567c:	40013400 	.word	0x40013400
 8005680:	40014000 	.word	0x40014000
 8005684:	40014400 	.word	0x40014400
 8005688:	40014800 	.word	0x40014800

0800568c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800568c:	b480      	push	{r7}
 800568e:	b087      	sub	sp, #28
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
 8005694:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6a1b      	ldr	r3, [r3, #32]
 800569a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	6a1b      	ldr	r3, [r3, #32]
 80056a0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	685b      	ldr	r3, [r3, #4]
 80056ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	69db      	ldr	r3, [r3, #28]
 80056b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80056ba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80056be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80056c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	021b      	lsls	r3, r3, #8
 80056ce:	68fa      	ldr	r2, [r7, #12]
 80056d0:	4313      	orrs	r3, r2
 80056d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80056d4:	697b      	ldr	r3, [r7, #20]
 80056d6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80056da:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	689b      	ldr	r3, [r3, #8]
 80056e0:	031b      	lsls	r3, r3, #12
 80056e2:	697a      	ldr	r2, [r7, #20]
 80056e4:	4313      	orrs	r3, r2
 80056e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	4a28      	ldr	r2, [pc, #160]	@ (800578c <TIM_OC4_SetConfig+0x100>)
 80056ec:	4293      	cmp	r3, r2
 80056ee:	d003      	beq.n	80056f8 <TIM_OC4_SetConfig+0x6c>
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	4a27      	ldr	r2, [pc, #156]	@ (8005790 <TIM_OC4_SetConfig+0x104>)
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d10d      	bne.n	8005714 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80056f8:	697b      	ldr	r3, [r7, #20]
 80056fa:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80056fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	68db      	ldr	r3, [r3, #12]
 8005704:	031b      	lsls	r3, r3, #12
 8005706:	697a      	ldr	r2, [r7, #20]
 8005708:	4313      	orrs	r3, r2
 800570a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800570c:	697b      	ldr	r3, [r7, #20]
 800570e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005712:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	4a1d      	ldr	r2, [pc, #116]	@ (800578c <TIM_OC4_SetConfig+0x100>)
 8005718:	4293      	cmp	r3, r2
 800571a:	d00f      	beq.n	800573c <TIM_OC4_SetConfig+0xb0>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	4a1c      	ldr	r2, [pc, #112]	@ (8005790 <TIM_OC4_SetConfig+0x104>)
 8005720:	4293      	cmp	r3, r2
 8005722:	d00b      	beq.n	800573c <TIM_OC4_SetConfig+0xb0>
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	4a1b      	ldr	r2, [pc, #108]	@ (8005794 <TIM_OC4_SetConfig+0x108>)
 8005728:	4293      	cmp	r3, r2
 800572a:	d007      	beq.n	800573c <TIM_OC4_SetConfig+0xb0>
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	4a1a      	ldr	r2, [pc, #104]	@ (8005798 <TIM_OC4_SetConfig+0x10c>)
 8005730:	4293      	cmp	r3, r2
 8005732:	d003      	beq.n	800573c <TIM_OC4_SetConfig+0xb0>
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	4a19      	ldr	r2, [pc, #100]	@ (800579c <TIM_OC4_SetConfig+0x110>)
 8005738:	4293      	cmp	r3, r2
 800573a:	d113      	bne.n	8005764 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800573c:	693b      	ldr	r3, [r7, #16]
 800573e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005742:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8005744:	693b      	ldr	r3, [r7, #16]
 8005746:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800574a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	695b      	ldr	r3, [r3, #20]
 8005750:	019b      	lsls	r3, r3, #6
 8005752:	693a      	ldr	r2, [r7, #16]
 8005754:	4313      	orrs	r3, r2
 8005756:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	699b      	ldr	r3, [r3, #24]
 800575c:	019b      	lsls	r3, r3, #6
 800575e:	693a      	ldr	r2, [r7, #16]
 8005760:	4313      	orrs	r3, r2
 8005762:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	693a      	ldr	r2, [r7, #16]
 8005768:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	68fa      	ldr	r2, [r7, #12]
 800576e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	685a      	ldr	r2, [r3, #4]
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	697a      	ldr	r2, [r7, #20]
 800577c:	621a      	str	r2, [r3, #32]
}
 800577e:	bf00      	nop
 8005780:	371c      	adds	r7, #28
 8005782:	46bd      	mov	sp, r7
 8005784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005788:	4770      	bx	lr
 800578a:	bf00      	nop
 800578c:	40012c00 	.word	0x40012c00
 8005790:	40013400 	.word	0x40013400
 8005794:	40014000 	.word	0x40014000
 8005798:	40014400 	.word	0x40014400
 800579c:	40014800 	.word	0x40014800

080057a0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80057a0:	b480      	push	{r7}
 80057a2:	b087      	sub	sp, #28
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
 80057a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6a1b      	ldr	r3, [r3, #32]
 80057ae:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	6a1b      	ldr	r3, [r3, #32]
 80057b4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	685b      	ldr	r3, [r3, #4]
 80057c0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80057c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80057ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80057d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	68fa      	ldr	r2, [r7, #12]
 80057da:	4313      	orrs	r3, r2
 80057dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80057de:	693b      	ldr	r3, [r7, #16]
 80057e0:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80057e4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	689b      	ldr	r3, [r3, #8]
 80057ea:	041b      	lsls	r3, r3, #16
 80057ec:	693a      	ldr	r2, [r7, #16]
 80057ee:	4313      	orrs	r3, r2
 80057f0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	4a17      	ldr	r2, [pc, #92]	@ (8005854 <TIM_OC5_SetConfig+0xb4>)
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d00f      	beq.n	800581a <TIM_OC5_SetConfig+0x7a>
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	4a16      	ldr	r2, [pc, #88]	@ (8005858 <TIM_OC5_SetConfig+0xb8>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d00b      	beq.n	800581a <TIM_OC5_SetConfig+0x7a>
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	4a15      	ldr	r2, [pc, #84]	@ (800585c <TIM_OC5_SetConfig+0xbc>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d007      	beq.n	800581a <TIM_OC5_SetConfig+0x7a>
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	4a14      	ldr	r2, [pc, #80]	@ (8005860 <TIM_OC5_SetConfig+0xc0>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d003      	beq.n	800581a <TIM_OC5_SetConfig+0x7a>
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	4a13      	ldr	r2, [pc, #76]	@ (8005864 <TIM_OC5_SetConfig+0xc4>)
 8005816:	4293      	cmp	r3, r2
 8005818:	d109      	bne.n	800582e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800581a:	697b      	ldr	r3, [r7, #20]
 800581c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005820:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	695b      	ldr	r3, [r3, #20]
 8005826:	021b      	lsls	r3, r3, #8
 8005828:	697a      	ldr	r2, [r7, #20]
 800582a:	4313      	orrs	r3, r2
 800582c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	697a      	ldr	r2, [r7, #20]
 8005832:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	68fa      	ldr	r2, [r7, #12]
 8005838:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	685a      	ldr	r2, [r3, #4]
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	693a      	ldr	r2, [r7, #16]
 8005846:	621a      	str	r2, [r3, #32]
}
 8005848:	bf00      	nop
 800584a:	371c      	adds	r7, #28
 800584c:	46bd      	mov	sp, r7
 800584e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005852:	4770      	bx	lr
 8005854:	40012c00 	.word	0x40012c00
 8005858:	40013400 	.word	0x40013400
 800585c:	40014000 	.word	0x40014000
 8005860:	40014400 	.word	0x40014400
 8005864:	40014800 	.word	0x40014800

08005868 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005868:	b480      	push	{r7}
 800586a:	b087      	sub	sp, #28
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
 8005870:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6a1b      	ldr	r3, [r3, #32]
 8005876:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	6a1b      	ldr	r3, [r3, #32]
 800587c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	685b      	ldr	r3, [r3, #4]
 8005888:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800588e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005896:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800589a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	021b      	lsls	r3, r3, #8
 80058a2:	68fa      	ldr	r2, [r7, #12]
 80058a4:	4313      	orrs	r3, r2
 80058a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80058a8:	693b      	ldr	r3, [r7, #16]
 80058aa:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80058ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	689b      	ldr	r3, [r3, #8]
 80058b4:	051b      	lsls	r3, r3, #20
 80058b6:	693a      	ldr	r2, [r7, #16]
 80058b8:	4313      	orrs	r3, r2
 80058ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	4a18      	ldr	r2, [pc, #96]	@ (8005920 <TIM_OC6_SetConfig+0xb8>)
 80058c0:	4293      	cmp	r3, r2
 80058c2:	d00f      	beq.n	80058e4 <TIM_OC6_SetConfig+0x7c>
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	4a17      	ldr	r2, [pc, #92]	@ (8005924 <TIM_OC6_SetConfig+0xbc>)
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d00b      	beq.n	80058e4 <TIM_OC6_SetConfig+0x7c>
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	4a16      	ldr	r2, [pc, #88]	@ (8005928 <TIM_OC6_SetConfig+0xc0>)
 80058d0:	4293      	cmp	r3, r2
 80058d2:	d007      	beq.n	80058e4 <TIM_OC6_SetConfig+0x7c>
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	4a15      	ldr	r2, [pc, #84]	@ (800592c <TIM_OC6_SetConfig+0xc4>)
 80058d8:	4293      	cmp	r3, r2
 80058da:	d003      	beq.n	80058e4 <TIM_OC6_SetConfig+0x7c>
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	4a14      	ldr	r2, [pc, #80]	@ (8005930 <TIM_OC6_SetConfig+0xc8>)
 80058e0:	4293      	cmp	r3, r2
 80058e2:	d109      	bne.n	80058f8 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80058e4:	697b      	ldr	r3, [r7, #20]
 80058e6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80058ea:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	695b      	ldr	r3, [r3, #20]
 80058f0:	029b      	lsls	r3, r3, #10
 80058f2:	697a      	ldr	r2, [r7, #20]
 80058f4:	4313      	orrs	r3, r2
 80058f6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	697a      	ldr	r2, [r7, #20]
 80058fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	68fa      	ldr	r2, [r7, #12]
 8005902:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	685a      	ldr	r2, [r3, #4]
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	693a      	ldr	r2, [r7, #16]
 8005910:	621a      	str	r2, [r3, #32]
}
 8005912:	bf00      	nop
 8005914:	371c      	adds	r7, #28
 8005916:	46bd      	mov	sp, r7
 8005918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591c:	4770      	bx	lr
 800591e:	bf00      	nop
 8005920:	40012c00 	.word	0x40012c00
 8005924:	40013400 	.word	0x40013400
 8005928:	40014000 	.word	0x40014000
 800592c:	40014400 	.word	0x40014400
 8005930:	40014800 	.word	0x40014800

08005934 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005934:	b480      	push	{r7}
 8005936:	b087      	sub	sp, #28
 8005938:	af00      	add	r7, sp, #0
 800593a:	60f8      	str	r0, [r7, #12]
 800593c:	60b9      	str	r1, [r7, #8]
 800593e:	607a      	str	r2, [r7, #4]
 8005940:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	6a1b      	ldr	r3, [r3, #32]
 8005946:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	6a1b      	ldr	r3, [r3, #32]
 800594c:	f023 0201 	bic.w	r2, r3, #1
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	699b      	ldr	r3, [r3, #24]
 8005958:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	4a24      	ldr	r2, [pc, #144]	@ (80059f0 <TIM_TI1_SetConfig+0xbc>)
 800595e:	4293      	cmp	r3, r2
 8005960:	d013      	beq.n	800598a <TIM_TI1_SetConfig+0x56>
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005968:	d00f      	beq.n	800598a <TIM_TI1_SetConfig+0x56>
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	4a21      	ldr	r2, [pc, #132]	@ (80059f4 <TIM_TI1_SetConfig+0xc0>)
 800596e:	4293      	cmp	r3, r2
 8005970:	d00b      	beq.n	800598a <TIM_TI1_SetConfig+0x56>
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	4a20      	ldr	r2, [pc, #128]	@ (80059f8 <TIM_TI1_SetConfig+0xc4>)
 8005976:	4293      	cmp	r3, r2
 8005978:	d007      	beq.n	800598a <TIM_TI1_SetConfig+0x56>
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	4a1f      	ldr	r2, [pc, #124]	@ (80059fc <TIM_TI1_SetConfig+0xc8>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d003      	beq.n	800598a <TIM_TI1_SetConfig+0x56>
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	4a1e      	ldr	r2, [pc, #120]	@ (8005a00 <TIM_TI1_SetConfig+0xcc>)
 8005986:	4293      	cmp	r3, r2
 8005988:	d101      	bne.n	800598e <TIM_TI1_SetConfig+0x5a>
 800598a:	2301      	movs	r3, #1
 800598c:	e000      	b.n	8005990 <TIM_TI1_SetConfig+0x5c>
 800598e:	2300      	movs	r3, #0
 8005990:	2b00      	cmp	r3, #0
 8005992:	d008      	beq.n	80059a6 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005994:	697b      	ldr	r3, [r7, #20]
 8005996:	f023 0303 	bic.w	r3, r3, #3
 800599a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800599c:	697a      	ldr	r2, [r7, #20]
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	4313      	orrs	r3, r2
 80059a2:	617b      	str	r3, [r7, #20]
 80059a4:	e003      	b.n	80059ae <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80059a6:	697b      	ldr	r3, [r7, #20]
 80059a8:	f043 0301 	orr.w	r3, r3, #1
 80059ac:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80059ae:	697b      	ldr	r3, [r7, #20]
 80059b0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80059b4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	011b      	lsls	r3, r3, #4
 80059ba:	b2db      	uxtb	r3, r3
 80059bc:	697a      	ldr	r2, [r7, #20]
 80059be:	4313      	orrs	r3, r2
 80059c0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80059c2:	693b      	ldr	r3, [r7, #16]
 80059c4:	f023 030a 	bic.w	r3, r3, #10
 80059c8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80059ca:	68bb      	ldr	r3, [r7, #8]
 80059cc:	f003 030a 	and.w	r3, r3, #10
 80059d0:	693a      	ldr	r2, [r7, #16]
 80059d2:	4313      	orrs	r3, r2
 80059d4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	697a      	ldr	r2, [r7, #20]
 80059da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	693a      	ldr	r2, [r7, #16]
 80059e0:	621a      	str	r2, [r3, #32]
}
 80059e2:	bf00      	nop
 80059e4:	371c      	adds	r7, #28
 80059e6:	46bd      	mov	sp, r7
 80059e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ec:	4770      	bx	lr
 80059ee:	bf00      	nop
 80059f0:	40012c00 	.word	0x40012c00
 80059f4:	40000400 	.word	0x40000400
 80059f8:	40000800 	.word	0x40000800
 80059fc:	40013400 	.word	0x40013400
 8005a00:	40014000 	.word	0x40014000

08005a04 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005a04:	b480      	push	{r7}
 8005a06:	b087      	sub	sp, #28
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	60f8      	str	r0, [r7, #12]
 8005a0c:	60b9      	str	r1, [r7, #8]
 8005a0e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	6a1b      	ldr	r3, [r3, #32]
 8005a14:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	6a1b      	ldr	r3, [r3, #32]
 8005a1a:	f023 0201 	bic.w	r2, r3, #1
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	699b      	ldr	r3, [r3, #24]
 8005a26:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005a28:	693b      	ldr	r3, [r7, #16]
 8005a2a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005a2e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	011b      	lsls	r3, r3, #4
 8005a34:	693a      	ldr	r2, [r7, #16]
 8005a36:	4313      	orrs	r3, r2
 8005a38:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005a3a:	697b      	ldr	r3, [r7, #20]
 8005a3c:	f023 030a 	bic.w	r3, r3, #10
 8005a40:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005a42:	697a      	ldr	r2, [r7, #20]
 8005a44:	68bb      	ldr	r3, [r7, #8]
 8005a46:	4313      	orrs	r3, r2
 8005a48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	693a      	ldr	r2, [r7, #16]
 8005a4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	697a      	ldr	r2, [r7, #20]
 8005a54:	621a      	str	r2, [r3, #32]
}
 8005a56:	bf00      	nop
 8005a58:	371c      	adds	r7, #28
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a60:	4770      	bx	lr

08005a62 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005a62:	b480      	push	{r7}
 8005a64:	b087      	sub	sp, #28
 8005a66:	af00      	add	r7, sp, #0
 8005a68:	60f8      	str	r0, [r7, #12]
 8005a6a:	60b9      	str	r1, [r7, #8]
 8005a6c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	6a1b      	ldr	r3, [r3, #32]
 8005a72:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	6a1b      	ldr	r3, [r3, #32]
 8005a78:	f023 0210 	bic.w	r2, r3, #16
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	699b      	ldr	r3, [r3, #24]
 8005a84:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005a86:	693b      	ldr	r3, [r7, #16]
 8005a88:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005a8c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	031b      	lsls	r3, r3, #12
 8005a92:	693a      	ldr	r2, [r7, #16]
 8005a94:	4313      	orrs	r3, r2
 8005a96:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005a98:	697b      	ldr	r3, [r7, #20]
 8005a9a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005a9e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005aa0:	68bb      	ldr	r3, [r7, #8]
 8005aa2:	011b      	lsls	r3, r3, #4
 8005aa4:	697a      	ldr	r2, [r7, #20]
 8005aa6:	4313      	orrs	r3, r2
 8005aa8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	693a      	ldr	r2, [r7, #16]
 8005aae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	697a      	ldr	r2, [r7, #20]
 8005ab4:	621a      	str	r2, [r3, #32]
}
 8005ab6:	bf00      	nop
 8005ab8:	371c      	adds	r7, #28
 8005aba:	46bd      	mov	sp, r7
 8005abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac0:	4770      	bx	lr

08005ac2 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005ac2:	b480      	push	{r7}
 8005ac4:	b085      	sub	sp, #20
 8005ac6:	af00      	add	r7, sp, #0
 8005ac8:	6078      	str	r0, [r7, #4]
 8005aca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	689b      	ldr	r3, [r3, #8]
 8005ad0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8005ad8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005adc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005ade:	683a      	ldr	r2, [r7, #0]
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	4313      	orrs	r3, r2
 8005ae4:	f043 0307 	orr.w	r3, r3, #7
 8005ae8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	68fa      	ldr	r2, [r7, #12]
 8005aee:	609a      	str	r2, [r3, #8]
}
 8005af0:	bf00      	nop
 8005af2:	3714      	adds	r7, #20
 8005af4:	46bd      	mov	sp, r7
 8005af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afa:	4770      	bx	lr

08005afc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005afc:	b480      	push	{r7}
 8005afe:	b087      	sub	sp, #28
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	60f8      	str	r0, [r7, #12]
 8005b04:	60b9      	str	r1, [r7, #8]
 8005b06:	607a      	str	r2, [r7, #4]
 8005b08:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	689b      	ldr	r3, [r3, #8]
 8005b0e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005b10:	697b      	ldr	r3, [r7, #20]
 8005b12:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005b16:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	021a      	lsls	r2, r3, #8
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	431a      	orrs	r2, r3
 8005b20:	68bb      	ldr	r3, [r7, #8]
 8005b22:	4313      	orrs	r3, r2
 8005b24:	697a      	ldr	r2, [r7, #20]
 8005b26:	4313      	orrs	r3, r2
 8005b28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	697a      	ldr	r2, [r7, #20]
 8005b2e:	609a      	str	r2, [r3, #8]
}
 8005b30:	bf00      	nop
 8005b32:	371c      	adds	r7, #28
 8005b34:	46bd      	mov	sp, r7
 8005b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3a:	4770      	bx	lr

08005b3c <HAL_TIMEx_HallSensor_Init>:
  * @param  htim TIM Hall Sensor Interface handle
  * @param  sConfig TIM Hall Sensor configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Init(TIM_HandleTypeDef *htim, const TIM_HallSensor_InitTypeDef *sConfig)
{
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b08a      	sub	sp, #40	@ 0x28
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
 8005b44:	6039      	str	r1, [r7, #0]
  TIM_OC_InitTypeDef OC_Config;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d101      	bne.n	8005b50 <HAL_TIMEx_HallSensor_Init+0x14>
  {
    return HAL_ERROR;
 8005b4c:	2301      	movs	r3, #1
 8005b4e:	e0a0      	b.n	8005c92 <HAL_TIMEx_HallSensor_Init+0x156>
  assert_param(IS_TIM_IC_POLARITY(sConfig->IC1Polarity));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005b56:	b2db      	uxtb	r3, r3
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d106      	bne.n	8005b6a <HAL_TIMEx_HallSensor_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2200      	movs	r2, #0
 8005b60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->HallSensor_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIMEx_HallSensor_MspInit(htim);
 8005b64:	6878      	ldr	r0, [r7, #4]
 8005b66:	f7fb f9b1 	bl	8000ecc <HAL_TIMEx_HallSensor_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2202      	movs	r2, #2
 8005b6e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681a      	ldr	r2, [r3, #0]
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	3304      	adds	r3, #4
 8005b7a:	4619      	mov	r1, r3
 8005b7c:	4610      	mov	r0, r2
 8005b7e:	f7ff fb47 	bl	8005210 <TIM_Base_SetConfig>

  /* Configure the Channel 1 as Input Channel to interface with the three Outputs of the  Hall sensor */
  TIM_TI1_SetConfig(htim->Instance, sConfig->IC1Polarity, TIM_ICSELECTION_TRC, sConfig->IC1Filter);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6818      	ldr	r0, [r3, #0]
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	6819      	ldr	r1, [r3, #0]
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	689b      	ldr	r3, [r3, #8]
 8005b8e:	2203      	movs	r2, #3
 8005b90:	f7ff fed0 	bl	8005934 <TIM_TI1_SetConfig>

  /* Reset the IC1PSC Bits */
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	699a      	ldr	r2, [r3, #24]
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f022 020c 	bic.w	r2, r2, #12
 8005ba2:	619a      	str	r2, [r3, #24]
  /* Set the IC1PSC value */
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	6999      	ldr	r1, [r3, #24]
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	685a      	ldr	r2, [r3, #4]
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	430a      	orrs	r2, r1
 8005bb4:	619a      	str	r2, [r3, #24]

  /* Enable the Hall sensor interface (XOR function of the three inputs) */
  htim->Instance->CR2 |= TIM_CR2_TI1S;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	685a      	ldr	r2, [r3, #4]
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005bc4:	605a      	str	r2, [r3, #4]

  /* Select the TIM_TS_TI1F_ED signal as Input trigger for the TIM */
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	689b      	ldr	r3, [r3, #8]
 8005bcc:	687a      	ldr	r2, [r7, #4]
 8005bce:	6812      	ldr	r2, [r2, #0]
 8005bd0:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8005bd4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005bd8:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_TS_TI1F_ED;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	689a      	ldr	r2, [r3, #8]
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005be8:	609a      	str	r2, [r3, #8]

  /* Use the TIM_TS_TI1F_ED signal to reset the TIM counter each edge detection */
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	689b      	ldr	r3, [r3, #8]
 8005bf0:	687a      	ldr	r2, [r7, #4]
 8005bf2:	6812      	ldr	r2, [r2, #0]
 8005bf4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005bf8:	f023 0307 	bic.w	r3, r3, #7
 8005bfc:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_SLAVEMODE_RESET;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	689a      	ldr	r2, [r3, #8]
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f042 0204 	orr.w	r2, r2, #4
 8005c0c:	609a      	str	r2, [r3, #8]

  /* Program channel 2 in PWM 2 mode with the desired Commutation_Delay*/
  OC_Config.OCFastMode = TIM_OCFAST_DISABLE;
 8005c0e:	2300      	movs	r3, #0
 8005c10:	61fb      	str	r3, [r7, #28]
  OC_Config.OCIdleState = TIM_OCIDLESTATE_RESET;
 8005c12:	2300      	movs	r3, #0
 8005c14:	623b      	str	r3, [r7, #32]
  OC_Config.OCMode = TIM_OCMODE_PWM2;
 8005c16:	2370      	movs	r3, #112	@ 0x70
 8005c18:	60fb      	str	r3, [r7, #12]
  OC_Config.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	627b      	str	r3, [r7, #36]	@ 0x24
  OC_Config.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8005c1e:	2300      	movs	r3, #0
 8005c20:	61bb      	str	r3, [r7, #24]
  OC_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005c22:	2300      	movs	r3, #0
 8005c24:	617b      	str	r3, [r7, #20]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	68db      	ldr	r3, [r3, #12]
 8005c2a:	613b      	str	r3, [r7, #16]

  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f107 020c 	add.w	r2, r7, #12
 8005c34:	4611      	mov	r1, r2
 8005c36:	4618      	mov	r0, r3
 8005c38:	f7ff fc16 	bl	8005468 <TIM_OC2_SetConfig>

  /* Select OC2REF as trigger output on TRGO: write the MMS bits in the TIMx_CR2
    register to 101 */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	685b      	ldr	r3, [r3, #4]
 8005c42:	687a      	ldr	r2, [r7, #4]
 8005c44:	6812      	ldr	r2, [r2, #0]
 8005c46:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8005c4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c4e:	6053      	str	r3, [r2, #4]
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	685a      	ldr	r2, [r3, #4]
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f042 0250 	orr.w	r2, r2, #80	@ 0x50
 8005c5e:	605a      	str	r2, [r3, #4]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2201      	movs	r2, #1
 8005c64:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2201      	movs	r2, #1
 8005c6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2201      	movs	r2, #1
 8005c74:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2201      	movs	r2, #1
 8005c7c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2201      	movs	r2, #1
 8005c84:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2201      	movs	r2, #1
 8005c8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005c90:	2300      	movs	r3, #0
}
 8005c92:	4618      	mov	r0, r3
 8005c94:	3728      	adds	r7, #40	@ 0x28
 8005c96:	46bd      	mov	sp, r7
 8005c98:	bd80      	pop	{r7, pc}
	...

08005c9c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005c9c:	b480      	push	{r7}
 8005c9e:	b085      	sub	sp, #20
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
 8005ca4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005cac:	2b01      	cmp	r3, #1
 8005cae:	d101      	bne.n	8005cb4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005cb0:	2302      	movs	r3, #2
 8005cb2:	e065      	b.n	8005d80 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2201      	movs	r2, #1
 8005cb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2202      	movs	r2, #2
 8005cc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	685b      	ldr	r3, [r3, #4]
 8005cca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	689b      	ldr	r3, [r3, #8]
 8005cd2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	4a2c      	ldr	r2, [pc, #176]	@ (8005d8c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	d004      	beq.n	8005ce8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	4a2b      	ldr	r2, [pc, #172]	@ (8005d90 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005ce4:	4293      	cmp	r3, r2
 8005ce6:	d108      	bne.n	8005cfa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005cee:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	685b      	ldr	r3, [r3, #4]
 8005cf4:	68fa      	ldr	r2, [r7, #12]
 8005cf6:	4313      	orrs	r3, r2
 8005cf8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8005d00:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d04:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	68fa      	ldr	r2, [r7, #12]
 8005d0c:	4313      	orrs	r3, r2
 8005d0e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	68fa      	ldr	r2, [r7, #12]
 8005d16:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	4a1b      	ldr	r2, [pc, #108]	@ (8005d8c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	d018      	beq.n	8005d54 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d2a:	d013      	beq.n	8005d54 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	4a18      	ldr	r2, [pc, #96]	@ (8005d94 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d00e      	beq.n	8005d54 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	4a17      	ldr	r2, [pc, #92]	@ (8005d98 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005d3c:	4293      	cmp	r3, r2
 8005d3e:	d009      	beq.n	8005d54 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	4a12      	ldr	r2, [pc, #72]	@ (8005d90 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005d46:	4293      	cmp	r3, r2
 8005d48:	d004      	beq.n	8005d54 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	4a13      	ldr	r2, [pc, #76]	@ (8005d9c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005d50:	4293      	cmp	r3, r2
 8005d52:	d10c      	bne.n	8005d6e <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005d54:	68bb      	ldr	r3, [r7, #8]
 8005d56:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005d5a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	689b      	ldr	r3, [r3, #8]
 8005d60:	68ba      	ldr	r2, [r7, #8]
 8005d62:	4313      	orrs	r3, r2
 8005d64:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	68ba      	ldr	r2, [r7, #8]
 8005d6c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	2201      	movs	r2, #1
 8005d72:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2200      	movs	r2, #0
 8005d7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005d7e:	2300      	movs	r3, #0
}
 8005d80:	4618      	mov	r0, r3
 8005d82:	3714      	adds	r7, #20
 8005d84:	46bd      	mov	sp, r7
 8005d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8a:	4770      	bx	lr
 8005d8c:	40012c00 	.word	0x40012c00
 8005d90:	40013400 	.word	0x40013400
 8005d94:	40000400 	.word	0x40000400
 8005d98:	40000800 	.word	0x40000800
 8005d9c:	40014000 	.word	0x40014000

08005da0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005da0:	b480      	push	{r7}
 8005da2:	b085      	sub	sp, #20
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
 8005da8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005daa:	2300      	movs	r3, #0
 8005dac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005db4:	2b01      	cmp	r3, #1
 8005db6:	d101      	bne.n	8005dbc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005db8:	2302      	movs	r3, #2
 8005dba:	e073      	b.n	8005ea4 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2201      	movs	r2, #1
 8005dc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	68db      	ldr	r3, [r3, #12]
 8005dce:	4313      	orrs	r3, r2
 8005dd0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	689b      	ldr	r3, [r3, #8]
 8005ddc:	4313      	orrs	r3, r2
 8005dde:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	685b      	ldr	r3, [r3, #4]
 8005dea:	4313      	orrs	r3, r2
 8005dec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	4313      	orrs	r3, r2
 8005dfa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	691b      	ldr	r3, [r3, #16]
 8005e06:	4313      	orrs	r3, r2
 8005e08:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	695b      	ldr	r3, [r3, #20]
 8005e14:	4313      	orrs	r3, r2
 8005e16:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e22:	4313      	orrs	r3, r2
 8005e24:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	699b      	ldr	r3, [r3, #24]
 8005e30:	041b      	lsls	r3, r3, #16
 8005e32:	4313      	orrs	r3, r2
 8005e34:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	69db      	ldr	r3, [r3, #28]
 8005e40:	4313      	orrs	r3, r2
 8005e42:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	4a19      	ldr	r2, [pc, #100]	@ (8005eb0 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	d004      	beq.n	8005e58 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	4a18      	ldr	r2, [pc, #96]	@ (8005eb4 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8005e54:	4293      	cmp	r3, r2
 8005e56:	d11c      	bne.n	8005e92 <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e62:	051b      	lsls	r3, r3, #20
 8005e64:	4313      	orrs	r3, r2
 8005e66:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8005e6e:	683b      	ldr	r3, [r7, #0]
 8005e70:	6a1b      	ldr	r3, [r3, #32]
 8005e72:	4313      	orrs	r3, r2
 8005e74:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e80:	4313      	orrs	r3, r2
 8005e82:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e8e:	4313      	orrs	r3, r2
 8005e90:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	68fa      	ldr	r2, [r7, #12]
 8005e98:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005ea2:	2300      	movs	r3, #0
}
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	3714      	adds	r7, #20
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eae:	4770      	bx	lr
 8005eb0:	40012c00 	.word	0x40012c00
 8005eb4:	40013400 	.word	0x40013400

08005eb8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b082      	sub	sp, #8
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d101      	bne.n	8005eca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005ec6:	2301      	movs	r3, #1
 8005ec8:	e042      	b.n	8005f50 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d106      	bne.n	8005ee2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005edc:	6878      	ldr	r0, [r7, #4]
 8005ede:	f7fb f999 	bl	8001214 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	2224      	movs	r2, #36	@ 0x24
 8005ee6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	681a      	ldr	r2, [r3, #0]
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f022 0201 	bic.w	r2, r2, #1
 8005ef8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d002      	beq.n	8005f08 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005f02:	6878      	ldr	r0, [r7, #4]
 8005f04:	f000 faf4 	bl	80064f0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005f08:	6878      	ldr	r0, [r7, #4]
 8005f0a:	f000 f825 	bl	8005f58 <UART_SetConfig>
 8005f0e:	4603      	mov	r3, r0
 8005f10:	2b01      	cmp	r3, #1
 8005f12:	d101      	bne.n	8005f18 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005f14:	2301      	movs	r3, #1
 8005f16:	e01b      	b.n	8005f50 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	685a      	ldr	r2, [r3, #4]
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005f26:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	689a      	ldr	r2, [r3, #8]
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005f36:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	681a      	ldr	r2, [r3, #0]
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f042 0201 	orr.w	r2, r2, #1
 8005f46:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005f48:	6878      	ldr	r0, [r7, #4]
 8005f4a:	f000 fb73 	bl	8006634 <UART_CheckIdleState>
 8005f4e:	4603      	mov	r3, r0
}
 8005f50:	4618      	mov	r0, r3
 8005f52:	3708      	adds	r7, #8
 8005f54:	46bd      	mov	sp, r7
 8005f56:	bd80      	pop	{r7, pc}

08005f58 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005f58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005f5c:	b08c      	sub	sp, #48	@ 0x30
 8005f5e:	af00      	add	r7, sp, #0
 8005f60:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005f62:	2300      	movs	r3, #0
 8005f64:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005f68:	697b      	ldr	r3, [r7, #20]
 8005f6a:	689a      	ldr	r2, [r3, #8]
 8005f6c:	697b      	ldr	r3, [r7, #20]
 8005f6e:	691b      	ldr	r3, [r3, #16]
 8005f70:	431a      	orrs	r2, r3
 8005f72:	697b      	ldr	r3, [r7, #20]
 8005f74:	695b      	ldr	r3, [r3, #20]
 8005f76:	431a      	orrs	r2, r3
 8005f78:	697b      	ldr	r3, [r7, #20]
 8005f7a:	69db      	ldr	r3, [r3, #28]
 8005f7c:	4313      	orrs	r3, r2
 8005f7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005f80:	697b      	ldr	r3, [r7, #20]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	681a      	ldr	r2, [r3, #0]
 8005f86:	4bab      	ldr	r3, [pc, #684]	@ (8006234 <UART_SetConfig+0x2dc>)
 8005f88:	4013      	ands	r3, r2
 8005f8a:	697a      	ldr	r2, [r7, #20]
 8005f8c:	6812      	ldr	r2, [r2, #0]
 8005f8e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005f90:	430b      	orrs	r3, r1
 8005f92:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005f94:	697b      	ldr	r3, [r7, #20]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	685b      	ldr	r3, [r3, #4]
 8005f9a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005f9e:	697b      	ldr	r3, [r7, #20]
 8005fa0:	68da      	ldr	r2, [r3, #12]
 8005fa2:	697b      	ldr	r3, [r7, #20]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	430a      	orrs	r2, r1
 8005fa8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005faa:	697b      	ldr	r3, [r7, #20]
 8005fac:	699b      	ldr	r3, [r3, #24]
 8005fae:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005fb0:	697b      	ldr	r3, [r7, #20]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	4aa0      	ldr	r2, [pc, #640]	@ (8006238 <UART_SetConfig+0x2e0>)
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d004      	beq.n	8005fc4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005fba:	697b      	ldr	r3, [r7, #20]
 8005fbc:	6a1b      	ldr	r3, [r3, #32]
 8005fbe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005fc0:	4313      	orrs	r3, r2
 8005fc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005fc4:	697b      	ldr	r3, [r7, #20]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	689b      	ldr	r3, [r3, #8]
 8005fca:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8005fce:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8005fd2:	697a      	ldr	r2, [r7, #20]
 8005fd4:	6812      	ldr	r2, [r2, #0]
 8005fd6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005fd8:	430b      	orrs	r3, r1
 8005fda:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005fdc:	697b      	ldr	r3, [r7, #20]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fe2:	f023 010f 	bic.w	r1, r3, #15
 8005fe6:	697b      	ldr	r3, [r7, #20]
 8005fe8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005fea:	697b      	ldr	r3, [r7, #20]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	430a      	orrs	r2, r1
 8005ff0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005ff2:	697b      	ldr	r3, [r7, #20]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	4a91      	ldr	r2, [pc, #580]	@ (800623c <UART_SetConfig+0x2e4>)
 8005ff8:	4293      	cmp	r3, r2
 8005ffa:	d125      	bne.n	8006048 <UART_SetConfig+0xf0>
 8005ffc:	4b90      	ldr	r3, [pc, #576]	@ (8006240 <UART_SetConfig+0x2e8>)
 8005ffe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006002:	f003 0303 	and.w	r3, r3, #3
 8006006:	2b03      	cmp	r3, #3
 8006008:	d81a      	bhi.n	8006040 <UART_SetConfig+0xe8>
 800600a:	a201      	add	r2, pc, #4	@ (adr r2, 8006010 <UART_SetConfig+0xb8>)
 800600c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006010:	08006021 	.word	0x08006021
 8006014:	08006031 	.word	0x08006031
 8006018:	08006029 	.word	0x08006029
 800601c:	08006039 	.word	0x08006039
 8006020:	2301      	movs	r3, #1
 8006022:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006026:	e0d6      	b.n	80061d6 <UART_SetConfig+0x27e>
 8006028:	2302      	movs	r3, #2
 800602a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800602e:	e0d2      	b.n	80061d6 <UART_SetConfig+0x27e>
 8006030:	2304      	movs	r3, #4
 8006032:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006036:	e0ce      	b.n	80061d6 <UART_SetConfig+0x27e>
 8006038:	2308      	movs	r3, #8
 800603a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800603e:	e0ca      	b.n	80061d6 <UART_SetConfig+0x27e>
 8006040:	2310      	movs	r3, #16
 8006042:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006046:	e0c6      	b.n	80061d6 <UART_SetConfig+0x27e>
 8006048:	697b      	ldr	r3, [r7, #20]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	4a7d      	ldr	r2, [pc, #500]	@ (8006244 <UART_SetConfig+0x2ec>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d138      	bne.n	80060c4 <UART_SetConfig+0x16c>
 8006052:	4b7b      	ldr	r3, [pc, #492]	@ (8006240 <UART_SetConfig+0x2e8>)
 8006054:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006058:	f003 030c 	and.w	r3, r3, #12
 800605c:	2b0c      	cmp	r3, #12
 800605e:	d82d      	bhi.n	80060bc <UART_SetConfig+0x164>
 8006060:	a201      	add	r2, pc, #4	@ (adr r2, 8006068 <UART_SetConfig+0x110>)
 8006062:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006066:	bf00      	nop
 8006068:	0800609d 	.word	0x0800609d
 800606c:	080060bd 	.word	0x080060bd
 8006070:	080060bd 	.word	0x080060bd
 8006074:	080060bd 	.word	0x080060bd
 8006078:	080060ad 	.word	0x080060ad
 800607c:	080060bd 	.word	0x080060bd
 8006080:	080060bd 	.word	0x080060bd
 8006084:	080060bd 	.word	0x080060bd
 8006088:	080060a5 	.word	0x080060a5
 800608c:	080060bd 	.word	0x080060bd
 8006090:	080060bd 	.word	0x080060bd
 8006094:	080060bd 	.word	0x080060bd
 8006098:	080060b5 	.word	0x080060b5
 800609c:	2300      	movs	r3, #0
 800609e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80060a2:	e098      	b.n	80061d6 <UART_SetConfig+0x27e>
 80060a4:	2302      	movs	r3, #2
 80060a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80060aa:	e094      	b.n	80061d6 <UART_SetConfig+0x27e>
 80060ac:	2304      	movs	r3, #4
 80060ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80060b2:	e090      	b.n	80061d6 <UART_SetConfig+0x27e>
 80060b4:	2308      	movs	r3, #8
 80060b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80060ba:	e08c      	b.n	80061d6 <UART_SetConfig+0x27e>
 80060bc:	2310      	movs	r3, #16
 80060be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80060c2:	e088      	b.n	80061d6 <UART_SetConfig+0x27e>
 80060c4:	697b      	ldr	r3, [r7, #20]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	4a5f      	ldr	r2, [pc, #380]	@ (8006248 <UART_SetConfig+0x2f0>)
 80060ca:	4293      	cmp	r3, r2
 80060cc:	d125      	bne.n	800611a <UART_SetConfig+0x1c2>
 80060ce:	4b5c      	ldr	r3, [pc, #368]	@ (8006240 <UART_SetConfig+0x2e8>)
 80060d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80060d4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80060d8:	2b30      	cmp	r3, #48	@ 0x30
 80060da:	d016      	beq.n	800610a <UART_SetConfig+0x1b2>
 80060dc:	2b30      	cmp	r3, #48	@ 0x30
 80060de:	d818      	bhi.n	8006112 <UART_SetConfig+0x1ba>
 80060e0:	2b20      	cmp	r3, #32
 80060e2:	d00a      	beq.n	80060fa <UART_SetConfig+0x1a2>
 80060e4:	2b20      	cmp	r3, #32
 80060e6:	d814      	bhi.n	8006112 <UART_SetConfig+0x1ba>
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d002      	beq.n	80060f2 <UART_SetConfig+0x19a>
 80060ec:	2b10      	cmp	r3, #16
 80060ee:	d008      	beq.n	8006102 <UART_SetConfig+0x1aa>
 80060f0:	e00f      	b.n	8006112 <UART_SetConfig+0x1ba>
 80060f2:	2300      	movs	r3, #0
 80060f4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80060f8:	e06d      	b.n	80061d6 <UART_SetConfig+0x27e>
 80060fa:	2302      	movs	r3, #2
 80060fc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006100:	e069      	b.n	80061d6 <UART_SetConfig+0x27e>
 8006102:	2304      	movs	r3, #4
 8006104:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006108:	e065      	b.n	80061d6 <UART_SetConfig+0x27e>
 800610a:	2308      	movs	r3, #8
 800610c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006110:	e061      	b.n	80061d6 <UART_SetConfig+0x27e>
 8006112:	2310      	movs	r3, #16
 8006114:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006118:	e05d      	b.n	80061d6 <UART_SetConfig+0x27e>
 800611a:	697b      	ldr	r3, [r7, #20]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	4a4b      	ldr	r2, [pc, #300]	@ (800624c <UART_SetConfig+0x2f4>)
 8006120:	4293      	cmp	r3, r2
 8006122:	d125      	bne.n	8006170 <UART_SetConfig+0x218>
 8006124:	4b46      	ldr	r3, [pc, #280]	@ (8006240 <UART_SetConfig+0x2e8>)
 8006126:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800612a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800612e:	2bc0      	cmp	r3, #192	@ 0xc0
 8006130:	d016      	beq.n	8006160 <UART_SetConfig+0x208>
 8006132:	2bc0      	cmp	r3, #192	@ 0xc0
 8006134:	d818      	bhi.n	8006168 <UART_SetConfig+0x210>
 8006136:	2b80      	cmp	r3, #128	@ 0x80
 8006138:	d00a      	beq.n	8006150 <UART_SetConfig+0x1f8>
 800613a:	2b80      	cmp	r3, #128	@ 0x80
 800613c:	d814      	bhi.n	8006168 <UART_SetConfig+0x210>
 800613e:	2b00      	cmp	r3, #0
 8006140:	d002      	beq.n	8006148 <UART_SetConfig+0x1f0>
 8006142:	2b40      	cmp	r3, #64	@ 0x40
 8006144:	d008      	beq.n	8006158 <UART_SetConfig+0x200>
 8006146:	e00f      	b.n	8006168 <UART_SetConfig+0x210>
 8006148:	2300      	movs	r3, #0
 800614a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800614e:	e042      	b.n	80061d6 <UART_SetConfig+0x27e>
 8006150:	2302      	movs	r3, #2
 8006152:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006156:	e03e      	b.n	80061d6 <UART_SetConfig+0x27e>
 8006158:	2304      	movs	r3, #4
 800615a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800615e:	e03a      	b.n	80061d6 <UART_SetConfig+0x27e>
 8006160:	2308      	movs	r3, #8
 8006162:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006166:	e036      	b.n	80061d6 <UART_SetConfig+0x27e>
 8006168:	2310      	movs	r3, #16
 800616a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800616e:	e032      	b.n	80061d6 <UART_SetConfig+0x27e>
 8006170:	697b      	ldr	r3, [r7, #20]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	4a30      	ldr	r2, [pc, #192]	@ (8006238 <UART_SetConfig+0x2e0>)
 8006176:	4293      	cmp	r3, r2
 8006178:	d12a      	bne.n	80061d0 <UART_SetConfig+0x278>
 800617a:	4b31      	ldr	r3, [pc, #196]	@ (8006240 <UART_SetConfig+0x2e8>)
 800617c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006180:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006184:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006188:	d01a      	beq.n	80061c0 <UART_SetConfig+0x268>
 800618a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800618e:	d81b      	bhi.n	80061c8 <UART_SetConfig+0x270>
 8006190:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006194:	d00c      	beq.n	80061b0 <UART_SetConfig+0x258>
 8006196:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800619a:	d815      	bhi.n	80061c8 <UART_SetConfig+0x270>
 800619c:	2b00      	cmp	r3, #0
 800619e:	d003      	beq.n	80061a8 <UART_SetConfig+0x250>
 80061a0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80061a4:	d008      	beq.n	80061b8 <UART_SetConfig+0x260>
 80061a6:	e00f      	b.n	80061c8 <UART_SetConfig+0x270>
 80061a8:	2300      	movs	r3, #0
 80061aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80061ae:	e012      	b.n	80061d6 <UART_SetConfig+0x27e>
 80061b0:	2302      	movs	r3, #2
 80061b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80061b6:	e00e      	b.n	80061d6 <UART_SetConfig+0x27e>
 80061b8:	2304      	movs	r3, #4
 80061ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80061be:	e00a      	b.n	80061d6 <UART_SetConfig+0x27e>
 80061c0:	2308      	movs	r3, #8
 80061c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80061c6:	e006      	b.n	80061d6 <UART_SetConfig+0x27e>
 80061c8:	2310      	movs	r3, #16
 80061ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80061ce:	e002      	b.n	80061d6 <UART_SetConfig+0x27e>
 80061d0:	2310      	movs	r3, #16
 80061d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80061d6:	697b      	ldr	r3, [r7, #20]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	4a17      	ldr	r2, [pc, #92]	@ (8006238 <UART_SetConfig+0x2e0>)
 80061dc:	4293      	cmp	r3, r2
 80061de:	f040 80a8 	bne.w	8006332 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80061e2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80061e6:	2b08      	cmp	r3, #8
 80061e8:	d834      	bhi.n	8006254 <UART_SetConfig+0x2fc>
 80061ea:	a201      	add	r2, pc, #4	@ (adr r2, 80061f0 <UART_SetConfig+0x298>)
 80061ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061f0:	08006215 	.word	0x08006215
 80061f4:	08006255 	.word	0x08006255
 80061f8:	0800621d 	.word	0x0800621d
 80061fc:	08006255 	.word	0x08006255
 8006200:	08006223 	.word	0x08006223
 8006204:	08006255 	.word	0x08006255
 8006208:	08006255 	.word	0x08006255
 800620c:	08006255 	.word	0x08006255
 8006210:	0800622b 	.word	0x0800622b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006214:	f7fe fa2e 	bl	8004674 <HAL_RCC_GetPCLK1Freq>
 8006218:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800621a:	e021      	b.n	8006260 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800621c:	4b0c      	ldr	r3, [pc, #48]	@ (8006250 <UART_SetConfig+0x2f8>)
 800621e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006220:	e01e      	b.n	8006260 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006222:	f7fe f9b9 	bl	8004598 <HAL_RCC_GetSysClockFreq>
 8006226:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006228:	e01a      	b.n	8006260 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800622a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800622e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006230:	e016      	b.n	8006260 <UART_SetConfig+0x308>
 8006232:	bf00      	nop
 8006234:	cfff69f3 	.word	0xcfff69f3
 8006238:	40008000 	.word	0x40008000
 800623c:	40013800 	.word	0x40013800
 8006240:	40021000 	.word	0x40021000
 8006244:	40004400 	.word	0x40004400
 8006248:	40004800 	.word	0x40004800
 800624c:	40004c00 	.word	0x40004c00
 8006250:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8006254:	2300      	movs	r3, #0
 8006256:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006258:	2301      	movs	r3, #1
 800625a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800625e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006260:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006262:	2b00      	cmp	r3, #0
 8006264:	f000 812a 	beq.w	80064bc <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006268:	697b      	ldr	r3, [r7, #20]
 800626a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800626c:	4a9e      	ldr	r2, [pc, #632]	@ (80064e8 <UART_SetConfig+0x590>)
 800626e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006272:	461a      	mov	r2, r3
 8006274:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006276:	fbb3 f3f2 	udiv	r3, r3, r2
 800627a:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800627c:	697b      	ldr	r3, [r7, #20]
 800627e:	685a      	ldr	r2, [r3, #4]
 8006280:	4613      	mov	r3, r2
 8006282:	005b      	lsls	r3, r3, #1
 8006284:	4413      	add	r3, r2
 8006286:	69ba      	ldr	r2, [r7, #24]
 8006288:	429a      	cmp	r2, r3
 800628a:	d305      	bcc.n	8006298 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800628c:	697b      	ldr	r3, [r7, #20]
 800628e:	685b      	ldr	r3, [r3, #4]
 8006290:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006292:	69ba      	ldr	r2, [r7, #24]
 8006294:	429a      	cmp	r2, r3
 8006296:	d903      	bls.n	80062a0 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8006298:	2301      	movs	r3, #1
 800629a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800629e:	e10d      	b.n	80064bc <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80062a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062a2:	2200      	movs	r2, #0
 80062a4:	60bb      	str	r3, [r7, #8]
 80062a6:	60fa      	str	r2, [r7, #12]
 80062a8:	697b      	ldr	r3, [r7, #20]
 80062aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062ac:	4a8e      	ldr	r2, [pc, #568]	@ (80064e8 <UART_SetConfig+0x590>)
 80062ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80062b2:	b29b      	uxth	r3, r3
 80062b4:	2200      	movs	r2, #0
 80062b6:	603b      	str	r3, [r7, #0]
 80062b8:	607a      	str	r2, [r7, #4]
 80062ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 80062be:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80062c2:	f7f9 ffa9 	bl	8000218 <__aeabi_uldivmod>
 80062c6:	4602      	mov	r2, r0
 80062c8:	460b      	mov	r3, r1
 80062ca:	4610      	mov	r0, r2
 80062cc:	4619      	mov	r1, r3
 80062ce:	f04f 0200 	mov.w	r2, #0
 80062d2:	f04f 0300 	mov.w	r3, #0
 80062d6:	020b      	lsls	r3, r1, #8
 80062d8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80062dc:	0202      	lsls	r2, r0, #8
 80062de:	6979      	ldr	r1, [r7, #20]
 80062e0:	6849      	ldr	r1, [r1, #4]
 80062e2:	0849      	lsrs	r1, r1, #1
 80062e4:	2000      	movs	r0, #0
 80062e6:	460c      	mov	r4, r1
 80062e8:	4605      	mov	r5, r0
 80062ea:	eb12 0804 	adds.w	r8, r2, r4
 80062ee:	eb43 0905 	adc.w	r9, r3, r5
 80062f2:	697b      	ldr	r3, [r7, #20]
 80062f4:	685b      	ldr	r3, [r3, #4]
 80062f6:	2200      	movs	r2, #0
 80062f8:	469a      	mov	sl, r3
 80062fa:	4693      	mov	fp, r2
 80062fc:	4652      	mov	r2, sl
 80062fe:	465b      	mov	r3, fp
 8006300:	4640      	mov	r0, r8
 8006302:	4649      	mov	r1, r9
 8006304:	f7f9 ff88 	bl	8000218 <__aeabi_uldivmod>
 8006308:	4602      	mov	r2, r0
 800630a:	460b      	mov	r3, r1
 800630c:	4613      	mov	r3, r2
 800630e:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006310:	6a3b      	ldr	r3, [r7, #32]
 8006312:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006316:	d308      	bcc.n	800632a <UART_SetConfig+0x3d2>
 8006318:	6a3b      	ldr	r3, [r7, #32]
 800631a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800631e:	d204      	bcs.n	800632a <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8006320:	697b      	ldr	r3, [r7, #20]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	6a3a      	ldr	r2, [r7, #32]
 8006326:	60da      	str	r2, [r3, #12]
 8006328:	e0c8      	b.n	80064bc <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800632a:	2301      	movs	r3, #1
 800632c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006330:	e0c4      	b.n	80064bc <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006332:	697b      	ldr	r3, [r7, #20]
 8006334:	69db      	ldr	r3, [r3, #28]
 8006336:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800633a:	d167      	bne.n	800640c <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 800633c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006340:	2b08      	cmp	r3, #8
 8006342:	d828      	bhi.n	8006396 <UART_SetConfig+0x43e>
 8006344:	a201      	add	r2, pc, #4	@ (adr r2, 800634c <UART_SetConfig+0x3f4>)
 8006346:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800634a:	bf00      	nop
 800634c:	08006371 	.word	0x08006371
 8006350:	08006379 	.word	0x08006379
 8006354:	08006381 	.word	0x08006381
 8006358:	08006397 	.word	0x08006397
 800635c:	08006387 	.word	0x08006387
 8006360:	08006397 	.word	0x08006397
 8006364:	08006397 	.word	0x08006397
 8006368:	08006397 	.word	0x08006397
 800636c:	0800638f 	.word	0x0800638f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006370:	f7fe f980 	bl	8004674 <HAL_RCC_GetPCLK1Freq>
 8006374:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006376:	e014      	b.n	80063a2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006378:	f7fe f992 	bl	80046a0 <HAL_RCC_GetPCLK2Freq>
 800637c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800637e:	e010      	b.n	80063a2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006380:	4b5a      	ldr	r3, [pc, #360]	@ (80064ec <UART_SetConfig+0x594>)
 8006382:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006384:	e00d      	b.n	80063a2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006386:	f7fe f907 	bl	8004598 <HAL_RCC_GetSysClockFreq>
 800638a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800638c:	e009      	b.n	80063a2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800638e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006392:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006394:	e005      	b.n	80063a2 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8006396:	2300      	movs	r3, #0
 8006398:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800639a:	2301      	movs	r3, #1
 800639c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80063a0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80063a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	f000 8089 	beq.w	80064bc <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80063aa:	697b      	ldr	r3, [r7, #20]
 80063ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063ae:	4a4e      	ldr	r2, [pc, #312]	@ (80064e8 <UART_SetConfig+0x590>)
 80063b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80063b4:	461a      	mov	r2, r3
 80063b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063b8:	fbb3 f3f2 	udiv	r3, r3, r2
 80063bc:	005a      	lsls	r2, r3, #1
 80063be:	697b      	ldr	r3, [r7, #20]
 80063c0:	685b      	ldr	r3, [r3, #4]
 80063c2:	085b      	lsrs	r3, r3, #1
 80063c4:	441a      	add	r2, r3
 80063c6:	697b      	ldr	r3, [r7, #20]
 80063c8:	685b      	ldr	r3, [r3, #4]
 80063ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80063ce:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80063d0:	6a3b      	ldr	r3, [r7, #32]
 80063d2:	2b0f      	cmp	r3, #15
 80063d4:	d916      	bls.n	8006404 <UART_SetConfig+0x4ac>
 80063d6:	6a3b      	ldr	r3, [r7, #32]
 80063d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80063dc:	d212      	bcs.n	8006404 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80063de:	6a3b      	ldr	r3, [r7, #32]
 80063e0:	b29b      	uxth	r3, r3
 80063e2:	f023 030f 	bic.w	r3, r3, #15
 80063e6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80063e8:	6a3b      	ldr	r3, [r7, #32]
 80063ea:	085b      	lsrs	r3, r3, #1
 80063ec:	b29b      	uxth	r3, r3
 80063ee:	f003 0307 	and.w	r3, r3, #7
 80063f2:	b29a      	uxth	r2, r3
 80063f4:	8bfb      	ldrh	r3, [r7, #30]
 80063f6:	4313      	orrs	r3, r2
 80063f8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80063fa:	697b      	ldr	r3, [r7, #20]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	8bfa      	ldrh	r2, [r7, #30]
 8006400:	60da      	str	r2, [r3, #12]
 8006402:	e05b      	b.n	80064bc <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8006404:	2301      	movs	r3, #1
 8006406:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800640a:	e057      	b.n	80064bc <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 800640c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006410:	2b08      	cmp	r3, #8
 8006412:	d828      	bhi.n	8006466 <UART_SetConfig+0x50e>
 8006414:	a201      	add	r2, pc, #4	@ (adr r2, 800641c <UART_SetConfig+0x4c4>)
 8006416:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800641a:	bf00      	nop
 800641c:	08006441 	.word	0x08006441
 8006420:	08006449 	.word	0x08006449
 8006424:	08006451 	.word	0x08006451
 8006428:	08006467 	.word	0x08006467
 800642c:	08006457 	.word	0x08006457
 8006430:	08006467 	.word	0x08006467
 8006434:	08006467 	.word	0x08006467
 8006438:	08006467 	.word	0x08006467
 800643c:	0800645f 	.word	0x0800645f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006440:	f7fe f918 	bl	8004674 <HAL_RCC_GetPCLK1Freq>
 8006444:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006446:	e014      	b.n	8006472 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006448:	f7fe f92a 	bl	80046a0 <HAL_RCC_GetPCLK2Freq>
 800644c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800644e:	e010      	b.n	8006472 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006450:	4b26      	ldr	r3, [pc, #152]	@ (80064ec <UART_SetConfig+0x594>)
 8006452:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006454:	e00d      	b.n	8006472 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006456:	f7fe f89f 	bl	8004598 <HAL_RCC_GetSysClockFreq>
 800645a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800645c:	e009      	b.n	8006472 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800645e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006462:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006464:	e005      	b.n	8006472 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8006466:	2300      	movs	r3, #0
 8006468:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800646a:	2301      	movs	r3, #1
 800646c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006470:	bf00      	nop
    }

    if (pclk != 0U)
 8006472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006474:	2b00      	cmp	r3, #0
 8006476:	d021      	beq.n	80064bc <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006478:	697b      	ldr	r3, [r7, #20]
 800647a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800647c:	4a1a      	ldr	r2, [pc, #104]	@ (80064e8 <UART_SetConfig+0x590>)
 800647e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006482:	461a      	mov	r2, r3
 8006484:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006486:	fbb3 f2f2 	udiv	r2, r3, r2
 800648a:	697b      	ldr	r3, [r7, #20]
 800648c:	685b      	ldr	r3, [r3, #4]
 800648e:	085b      	lsrs	r3, r3, #1
 8006490:	441a      	add	r2, r3
 8006492:	697b      	ldr	r3, [r7, #20]
 8006494:	685b      	ldr	r3, [r3, #4]
 8006496:	fbb2 f3f3 	udiv	r3, r2, r3
 800649a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800649c:	6a3b      	ldr	r3, [r7, #32]
 800649e:	2b0f      	cmp	r3, #15
 80064a0:	d909      	bls.n	80064b6 <UART_SetConfig+0x55e>
 80064a2:	6a3b      	ldr	r3, [r7, #32]
 80064a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80064a8:	d205      	bcs.n	80064b6 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80064aa:	6a3b      	ldr	r3, [r7, #32]
 80064ac:	b29a      	uxth	r2, r3
 80064ae:	697b      	ldr	r3, [r7, #20]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	60da      	str	r2, [r3, #12]
 80064b4:	e002      	b.n	80064bc <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80064b6:	2301      	movs	r3, #1
 80064b8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80064bc:	697b      	ldr	r3, [r7, #20]
 80064be:	2201      	movs	r2, #1
 80064c0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80064c4:	697b      	ldr	r3, [r7, #20]
 80064c6:	2201      	movs	r2, #1
 80064c8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80064cc:	697b      	ldr	r3, [r7, #20]
 80064ce:	2200      	movs	r2, #0
 80064d0:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80064d2:	697b      	ldr	r3, [r7, #20]
 80064d4:	2200      	movs	r2, #0
 80064d6:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80064d8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80064dc:	4618      	mov	r0, r3
 80064de:	3730      	adds	r7, #48	@ 0x30
 80064e0:	46bd      	mov	sp, r7
 80064e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80064e6:	bf00      	nop
 80064e8:	08006d48 	.word	0x08006d48
 80064ec:	00f42400 	.word	0x00f42400

080064f0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80064f0:	b480      	push	{r7}
 80064f2:	b083      	sub	sp, #12
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064fc:	f003 0308 	and.w	r3, r3, #8
 8006500:	2b00      	cmp	r3, #0
 8006502:	d00a      	beq.n	800651a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	685b      	ldr	r3, [r3, #4]
 800650a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	430a      	orrs	r2, r1
 8006518:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800651e:	f003 0301 	and.w	r3, r3, #1
 8006522:	2b00      	cmp	r3, #0
 8006524:	d00a      	beq.n	800653c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	685b      	ldr	r3, [r3, #4]
 800652c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	430a      	orrs	r2, r1
 800653a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006540:	f003 0302 	and.w	r3, r3, #2
 8006544:	2b00      	cmp	r3, #0
 8006546:	d00a      	beq.n	800655e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	685b      	ldr	r3, [r3, #4]
 800654e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	430a      	orrs	r2, r1
 800655c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006562:	f003 0304 	and.w	r3, r3, #4
 8006566:	2b00      	cmp	r3, #0
 8006568:	d00a      	beq.n	8006580 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	685b      	ldr	r3, [r3, #4]
 8006570:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	430a      	orrs	r2, r1
 800657e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006584:	f003 0310 	and.w	r3, r3, #16
 8006588:	2b00      	cmp	r3, #0
 800658a:	d00a      	beq.n	80065a2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	689b      	ldr	r3, [r3, #8]
 8006592:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	430a      	orrs	r2, r1
 80065a0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065a6:	f003 0320 	and.w	r3, r3, #32
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d00a      	beq.n	80065c4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	689b      	ldr	r3, [r3, #8]
 80065b4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	430a      	orrs	r2, r1
 80065c2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d01a      	beq.n	8006606 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	685b      	ldr	r3, [r3, #4]
 80065d6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	430a      	orrs	r2, r1
 80065e4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80065ea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80065ee:	d10a      	bne.n	8006606 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	685b      	ldr	r3, [r3, #4]
 80065f6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	430a      	orrs	r2, r1
 8006604:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800660a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800660e:	2b00      	cmp	r3, #0
 8006610:	d00a      	beq.n	8006628 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	685b      	ldr	r3, [r3, #4]
 8006618:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	430a      	orrs	r2, r1
 8006626:	605a      	str	r2, [r3, #4]
  }
}
 8006628:	bf00      	nop
 800662a:	370c      	adds	r7, #12
 800662c:	46bd      	mov	sp, r7
 800662e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006632:	4770      	bx	lr

08006634 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006634:	b580      	push	{r7, lr}
 8006636:	b098      	sub	sp, #96	@ 0x60
 8006638:	af02      	add	r7, sp, #8
 800663a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2200      	movs	r2, #0
 8006640:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006644:	f7fa fecc 	bl	80013e0 <HAL_GetTick>
 8006648:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f003 0308 	and.w	r3, r3, #8
 8006654:	2b08      	cmp	r3, #8
 8006656:	d12f      	bne.n	80066b8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006658:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800665c:	9300      	str	r3, [sp, #0]
 800665e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006660:	2200      	movs	r2, #0
 8006662:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006666:	6878      	ldr	r0, [r7, #4]
 8006668:	f000 f88e 	bl	8006788 <UART_WaitOnFlagUntilTimeout>
 800666c:	4603      	mov	r3, r0
 800666e:	2b00      	cmp	r3, #0
 8006670:	d022      	beq.n	80066b8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006678:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800667a:	e853 3f00 	ldrex	r3, [r3]
 800667e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006680:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006682:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006686:	653b      	str	r3, [r7, #80]	@ 0x50
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	461a      	mov	r2, r3
 800668e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006690:	647b      	str	r3, [r7, #68]	@ 0x44
 8006692:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006694:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006696:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006698:	e841 2300 	strex	r3, r2, [r1]
 800669c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800669e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d1e6      	bne.n	8006672 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2220      	movs	r2, #32
 80066a8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2200      	movs	r2, #0
 80066b0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80066b4:	2303      	movs	r3, #3
 80066b6:	e063      	b.n	8006780 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f003 0304 	and.w	r3, r3, #4
 80066c2:	2b04      	cmp	r3, #4
 80066c4:	d149      	bne.n	800675a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80066c6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80066ca:	9300      	str	r3, [sp, #0]
 80066cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80066ce:	2200      	movs	r2, #0
 80066d0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80066d4:	6878      	ldr	r0, [r7, #4]
 80066d6:	f000 f857 	bl	8006788 <UART_WaitOnFlagUntilTimeout>
 80066da:	4603      	mov	r3, r0
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d03c      	beq.n	800675a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066e8:	e853 3f00 	ldrex	r3, [r3]
 80066ec:	623b      	str	r3, [r7, #32]
   return(result);
 80066ee:	6a3b      	ldr	r3, [r7, #32]
 80066f0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80066f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	461a      	mov	r2, r3
 80066fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80066fe:	633b      	str	r3, [r7, #48]	@ 0x30
 8006700:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006702:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006704:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006706:	e841 2300 	strex	r3, r2, [r1]
 800670a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800670c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800670e:	2b00      	cmp	r3, #0
 8006710:	d1e6      	bne.n	80066e0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	3308      	adds	r3, #8
 8006718:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800671a:	693b      	ldr	r3, [r7, #16]
 800671c:	e853 3f00 	ldrex	r3, [r3]
 8006720:	60fb      	str	r3, [r7, #12]
   return(result);
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	f023 0301 	bic.w	r3, r3, #1
 8006728:	64bb      	str	r3, [r7, #72]	@ 0x48
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	3308      	adds	r3, #8
 8006730:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006732:	61fa      	str	r2, [r7, #28]
 8006734:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006736:	69b9      	ldr	r1, [r7, #24]
 8006738:	69fa      	ldr	r2, [r7, #28]
 800673a:	e841 2300 	strex	r3, r2, [r1]
 800673e:	617b      	str	r3, [r7, #20]
   return(result);
 8006740:	697b      	ldr	r3, [r7, #20]
 8006742:	2b00      	cmp	r3, #0
 8006744:	d1e5      	bne.n	8006712 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	2220      	movs	r2, #32
 800674a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	2200      	movs	r2, #0
 8006752:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006756:	2303      	movs	r3, #3
 8006758:	e012      	b.n	8006780 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	2220      	movs	r2, #32
 800675e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	2220      	movs	r2, #32
 8006766:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	2200      	movs	r2, #0
 800676e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2200      	movs	r2, #0
 8006774:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	2200      	movs	r2, #0
 800677a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800677e:	2300      	movs	r3, #0
}
 8006780:	4618      	mov	r0, r3
 8006782:	3758      	adds	r7, #88	@ 0x58
 8006784:	46bd      	mov	sp, r7
 8006786:	bd80      	pop	{r7, pc}

08006788 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006788:	b580      	push	{r7, lr}
 800678a:	b084      	sub	sp, #16
 800678c:	af00      	add	r7, sp, #0
 800678e:	60f8      	str	r0, [r7, #12]
 8006790:	60b9      	str	r1, [r7, #8]
 8006792:	603b      	str	r3, [r7, #0]
 8006794:	4613      	mov	r3, r2
 8006796:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006798:	e04f      	b.n	800683a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800679a:	69bb      	ldr	r3, [r7, #24]
 800679c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067a0:	d04b      	beq.n	800683a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80067a2:	f7fa fe1d 	bl	80013e0 <HAL_GetTick>
 80067a6:	4602      	mov	r2, r0
 80067a8:	683b      	ldr	r3, [r7, #0]
 80067aa:	1ad3      	subs	r3, r2, r3
 80067ac:	69ba      	ldr	r2, [r7, #24]
 80067ae:	429a      	cmp	r2, r3
 80067b0:	d302      	bcc.n	80067b8 <UART_WaitOnFlagUntilTimeout+0x30>
 80067b2:	69bb      	ldr	r3, [r7, #24]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d101      	bne.n	80067bc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80067b8:	2303      	movs	r3, #3
 80067ba:	e04e      	b.n	800685a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f003 0304 	and.w	r3, r3, #4
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d037      	beq.n	800683a <UART_WaitOnFlagUntilTimeout+0xb2>
 80067ca:	68bb      	ldr	r3, [r7, #8]
 80067cc:	2b80      	cmp	r3, #128	@ 0x80
 80067ce:	d034      	beq.n	800683a <UART_WaitOnFlagUntilTimeout+0xb2>
 80067d0:	68bb      	ldr	r3, [r7, #8]
 80067d2:	2b40      	cmp	r3, #64	@ 0x40
 80067d4:	d031      	beq.n	800683a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	69db      	ldr	r3, [r3, #28]
 80067dc:	f003 0308 	and.w	r3, r3, #8
 80067e0:	2b08      	cmp	r3, #8
 80067e2:	d110      	bne.n	8006806 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	2208      	movs	r2, #8
 80067ea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80067ec:	68f8      	ldr	r0, [r7, #12]
 80067ee:	f000 f838 	bl	8006862 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	2208      	movs	r2, #8
 80067f6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	2200      	movs	r2, #0
 80067fe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8006802:	2301      	movs	r3, #1
 8006804:	e029      	b.n	800685a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	69db      	ldr	r3, [r3, #28]
 800680c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006810:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006814:	d111      	bne.n	800683a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800681e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006820:	68f8      	ldr	r0, [r7, #12]
 8006822:	f000 f81e 	bl	8006862 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	2220      	movs	r2, #32
 800682a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	2200      	movs	r2, #0
 8006832:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8006836:	2303      	movs	r3, #3
 8006838:	e00f      	b.n	800685a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	69da      	ldr	r2, [r3, #28]
 8006840:	68bb      	ldr	r3, [r7, #8]
 8006842:	4013      	ands	r3, r2
 8006844:	68ba      	ldr	r2, [r7, #8]
 8006846:	429a      	cmp	r2, r3
 8006848:	bf0c      	ite	eq
 800684a:	2301      	moveq	r3, #1
 800684c:	2300      	movne	r3, #0
 800684e:	b2db      	uxtb	r3, r3
 8006850:	461a      	mov	r2, r3
 8006852:	79fb      	ldrb	r3, [r7, #7]
 8006854:	429a      	cmp	r2, r3
 8006856:	d0a0      	beq.n	800679a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006858:	2300      	movs	r3, #0
}
 800685a:	4618      	mov	r0, r3
 800685c:	3710      	adds	r7, #16
 800685e:	46bd      	mov	sp, r7
 8006860:	bd80      	pop	{r7, pc}

08006862 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006862:	b480      	push	{r7}
 8006864:	b095      	sub	sp, #84	@ 0x54
 8006866:	af00      	add	r7, sp, #0
 8006868:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006870:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006872:	e853 3f00 	ldrex	r3, [r3]
 8006876:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006878:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800687a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800687e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	461a      	mov	r2, r3
 8006886:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006888:	643b      	str	r3, [r7, #64]	@ 0x40
 800688a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800688c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800688e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006890:	e841 2300 	strex	r3, r2, [r1]
 8006894:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006896:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006898:	2b00      	cmp	r3, #0
 800689a:	d1e6      	bne.n	800686a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	3308      	adds	r3, #8
 80068a2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068a4:	6a3b      	ldr	r3, [r7, #32]
 80068a6:	e853 3f00 	ldrex	r3, [r3]
 80068aa:	61fb      	str	r3, [r7, #28]
   return(result);
 80068ac:	69fb      	ldr	r3, [r7, #28]
 80068ae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80068b2:	f023 0301 	bic.w	r3, r3, #1
 80068b6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	3308      	adds	r3, #8
 80068be:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80068c0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80068c2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068c4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80068c6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80068c8:	e841 2300 	strex	r3, r2, [r1]
 80068cc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80068ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d1e3      	bne.n	800689c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80068d8:	2b01      	cmp	r3, #1
 80068da:	d118      	bne.n	800690e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	e853 3f00 	ldrex	r3, [r3]
 80068e8:	60bb      	str	r3, [r7, #8]
   return(result);
 80068ea:	68bb      	ldr	r3, [r7, #8]
 80068ec:	f023 0310 	bic.w	r3, r3, #16
 80068f0:	647b      	str	r3, [r7, #68]	@ 0x44
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	461a      	mov	r2, r3
 80068f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80068fa:	61bb      	str	r3, [r7, #24]
 80068fc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068fe:	6979      	ldr	r1, [r7, #20]
 8006900:	69ba      	ldr	r2, [r7, #24]
 8006902:	e841 2300 	strex	r3, r2, [r1]
 8006906:	613b      	str	r3, [r7, #16]
   return(result);
 8006908:	693b      	ldr	r3, [r7, #16]
 800690a:	2b00      	cmp	r3, #0
 800690c:	d1e6      	bne.n	80068dc <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	2220      	movs	r2, #32
 8006912:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	2200      	movs	r2, #0
 800691a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2200      	movs	r2, #0
 8006920:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006922:	bf00      	nop
 8006924:	3754      	adds	r7, #84	@ 0x54
 8006926:	46bd      	mov	sp, r7
 8006928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692c:	4770      	bx	lr

0800692e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800692e:	b480      	push	{r7}
 8006930:	b085      	sub	sp, #20
 8006932:	af00      	add	r7, sp, #0
 8006934:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800693c:	2b01      	cmp	r3, #1
 800693e:	d101      	bne.n	8006944 <HAL_UARTEx_DisableFifoMode+0x16>
 8006940:	2302      	movs	r3, #2
 8006942:	e027      	b.n	8006994 <HAL_UARTEx_DisableFifoMode+0x66>
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2201      	movs	r2, #1
 8006948:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2224      	movs	r2, #36	@ 0x24
 8006950:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	681a      	ldr	r2, [r3, #0]
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	f022 0201 	bic.w	r2, r2, #1
 800696a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006972:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2200      	movs	r2, #0
 8006978:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	68fa      	ldr	r2, [r7, #12]
 8006980:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	2220      	movs	r2, #32
 8006986:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	2200      	movs	r2, #0
 800698e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006992:	2300      	movs	r3, #0
}
 8006994:	4618      	mov	r0, r3
 8006996:	3714      	adds	r7, #20
 8006998:	46bd      	mov	sp, r7
 800699a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699e:	4770      	bx	lr

080069a0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80069a0:	b580      	push	{r7, lr}
 80069a2:	b084      	sub	sp, #16
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
 80069a8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80069b0:	2b01      	cmp	r3, #1
 80069b2:	d101      	bne.n	80069b8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80069b4:	2302      	movs	r3, #2
 80069b6:	e02d      	b.n	8006a14 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2201      	movs	r2, #1
 80069bc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2224      	movs	r2, #36	@ 0x24
 80069c4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	681a      	ldr	r2, [r3, #0]
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	f022 0201 	bic.w	r2, r2, #1
 80069de:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	689b      	ldr	r3, [r3, #8]
 80069e6:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	683a      	ldr	r2, [r7, #0]
 80069f0:	430a      	orrs	r2, r1
 80069f2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80069f4:	6878      	ldr	r0, [r7, #4]
 80069f6:	f000 f84f 	bl	8006a98 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	68fa      	ldr	r2, [r7, #12]
 8006a00:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	2220      	movs	r2, #32
 8006a06:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006a12:	2300      	movs	r3, #0
}
 8006a14:	4618      	mov	r0, r3
 8006a16:	3710      	adds	r7, #16
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	bd80      	pop	{r7, pc}

08006a1c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b084      	sub	sp, #16
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
 8006a24:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006a2c:	2b01      	cmp	r3, #1
 8006a2e:	d101      	bne.n	8006a34 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006a30:	2302      	movs	r3, #2
 8006a32:	e02d      	b.n	8006a90 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2201      	movs	r2, #1
 8006a38:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	2224      	movs	r2, #36	@ 0x24
 8006a40:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	681a      	ldr	r2, [r3, #0]
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	f022 0201 	bic.w	r2, r2, #1
 8006a5a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	689b      	ldr	r3, [r3, #8]
 8006a62:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	683a      	ldr	r2, [r7, #0]
 8006a6c:	430a      	orrs	r2, r1
 8006a6e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006a70:	6878      	ldr	r0, [r7, #4]
 8006a72:	f000 f811 	bl	8006a98 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	68fa      	ldr	r2, [r7, #12]
 8006a7c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	2220      	movs	r2, #32
 8006a82:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	2200      	movs	r2, #0
 8006a8a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006a8e:	2300      	movs	r3, #0
}
 8006a90:	4618      	mov	r0, r3
 8006a92:	3710      	adds	r7, #16
 8006a94:	46bd      	mov	sp, r7
 8006a96:	bd80      	pop	{r7, pc}

08006a98 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006a98:	b480      	push	{r7}
 8006a9a:	b085      	sub	sp, #20
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d108      	bne.n	8006aba <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2201      	movs	r2, #1
 8006aac:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2201      	movs	r2, #1
 8006ab4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006ab8:	e031      	b.n	8006b1e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006aba:	2308      	movs	r3, #8
 8006abc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006abe:	2308      	movs	r3, #8
 8006ac0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	689b      	ldr	r3, [r3, #8]
 8006ac8:	0e5b      	lsrs	r3, r3, #25
 8006aca:	b2db      	uxtb	r3, r3
 8006acc:	f003 0307 	and.w	r3, r3, #7
 8006ad0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	689b      	ldr	r3, [r3, #8]
 8006ad8:	0f5b      	lsrs	r3, r3, #29
 8006ada:	b2db      	uxtb	r3, r3
 8006adc:	f003 0307 	and.w	r3, r3, #7
 8006ae0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006ae2:	7bbb      	ldrb	r3, [r7, #14]
 8006ae4:	7b3a      	ldrb	r2, [r7, #12]
 8006ae6:	4911      	ldr	r1, [pc, #68]	@ (8006b2c <UARTEx_SetNbDataToProcess+0x94>)
 8006ae8:	5c8a      	ldrb	r2, [r1, r2]
 8006aea:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006aee:	7b3a      	ldrb	r2, [r7, #12]
 8006af0:	490f      	ldr	r1, [pc, #60]	@ (8006b30 <UARTEx_SetNbDataToProcess+0x98>)
 8006af2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006af4:	fb93 f3f2 	sdiv	r3, r3, r2
 8006af8:	b29a      	uxth	r2, r3
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006b00:	7bfb      	ldrb	r3, [r7, #15]
 8006b02:	7b7a      	ldrb	r2, [r7, #13]
 8006b04:	4909      	ldr	r1, [pc, #36]	@ (8006b2c <UARTEx_SetNbDataToProcess+0x94>)
 8006b06:	5c8a      	ldrb	r2, [r1, r2]
 8006b08:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006b0c:	7b7a      	ldrb	r2, [r7, #13]
 8006b0e:	4908      	ldr	r1, [pc, #32]	@ (8006b30 <UARTEx_SetNbDataToProcess+0x98>)
 8006b10:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006b12:	fb93 f3f2 	sdiv	r3, r3, r2
 8006b16:	b29a      	uxth	r2, r3
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8006b1e:	bf00      	nop
 8006b20:	3714      	adds	r7, #20
 8006b22:	46bd      	mov	sp, r7
 8006b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b28:	4770      	bx	lr
 8006b2a:	bf00      	nop
 8006b2c:	08006d60 	.word	0x08006d60
 8006b30:	08006d68 	.word	0x08006d68

08006b34 <BNO055_Init>:
 */

#include "BNO055.h"

HAL_StatusTypeDef BNO055_Init(BNO055_Structure *bno, I2C_HandleTypeDef *hi2cx, uint8_t addr, OPRMode mode)
{
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b086      	sub	sp, #24
 8006b38:	af02      	add	r7, sp, #8
 8006b3a:	60f8      	str	r0, [r7, #12]
 8006b3c:	60b9      	str	r1, [r7, #8]
 8006b3e:	4611      	mov	r1, r2
 8006b40:	461a      	mov	r2, r3
 8006b42:	460b      	mov	r3, r1
 8006b44:	71fb      	strb	r3, [r7, #7]
 8006b46:	4613      	mov	r3, r2
 8006b48:	71bb      	strb	r3, [r7, #6]
	bno->TxBuffer[0] = Page_ID_00;
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	2200      	movs	r2, #0
 8006b4e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
	bno->TxBuffer[1] = CONFIGMODE;
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	2200      	movs	r2, #0
 8006b56:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
	bno->TxBuffer[2] = 0x20; // Reset
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	2220      	movs	r2, #32
 8006b5e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
	bno->TxBuffer[3] = Normal_Mode;
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	2200      	movs	r2, #0
 8006b66:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49
	bno->TxBuffer[4] = mode;
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	79ba      	ldrb	r2, [r7, #6]
 8006b6e:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a

	bno->hi2cx = hi2cx;
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	68ba      	ldr	r2, [r7, #8]
 8006b76:	601a      	str	r2, [r3, #0]
	bno->address = BNO055_ADD_H;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	2252      	movs	r2, #82	@ 0x52
 8006b7c:	711a      	strb	r2, [r3, #4]
	if (addr == 0) bno->address = BNO055_ADD_L;
 8006b7e:	79fb      	ldrb	r3, [r7, #7]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d102      	bne.n	8006b8a <BNO055_Init+0x56>
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	2250      	movs	r2, #80	@ 0x50
 8006b88:	711a      	strb	r2, [r3, #4]

	HAL_I2C_Mem_Write_DMA(bno->hi2cx, bno->address, PAGE_ID, 1, &bno->TxBuffer[0], 1);
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	6818      	ldr	r0, [r3, #0]
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	791b      	ldrb	r3, [r3, #4]
 8006b92:	4619      	mov	r1, r3
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	3346      	adds	r3, #70	@ 0x46
 8006b98:	2201      	movs	r2, #1
 8006b9a:	9201      	str	r2, [sp, #4]
 8006b9c:	9300      	str	r3, [sp, #0]
 8006b9e:	2301      	movs	r3, #1
 8006ba0:	2207      	movs	r2, #7
 8006ba2:	f7fb fa79 	bl	8002098 <HAL_I2C_Mem_Write_DMA>

	HAL_Delay(10);
 8006ba6:	200a      	movs	r0, #10
 8006ba8:	f7fa fc26 	bl	80013f8 <HAL_Delay>
	HAL_I2C_Mem_Read_DMA(bno->hi2cx, bno->address, CHIP_ID, 1, bno->RxBuffer, 1);
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	6818      	ldr	r0, [r3, #0]
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	791b      	ldrb	r3, [r3, #4]
 8006bb4:	4619      	mov	r1, r3
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	333c      	adds	r3, #60	@ 0x3c
 8006bba:	2201      	movs	r2, #1
 8006bbc:	9201      	str	r2, [sp, #4]
 8006bbe:	9300      	str	r3, [sp, #0]
 8006bc0:	2301      	movs	r3, #1
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	f7fb fb4e 	bl	8002264 <HAL_I2C_Mem_Read_DMA>
	if (bno->RxBuffer[0] != 0xA0) return HAL_ERROR;
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006bce:	2ba0      	cmp	r3, #160	@ 0xa0
 8006bd0:	d001      	beq.n	8006bd6 <BNO055_Init+0xa2>
 8006bd2:	2301      	movs	r3, #1
 8006bd4:	e070      	b.n	8006cb8 <BNO055_Init+0x184>

	HAL_Delay(10);
 8006bd6:	200a      	movs	r0, #10
 8006bd8:	f7fa fc0e 	bl	80013f8 <HAL_Delay>
	HAL_I2C_Mem_Write_DMA(bno->hi2cx, bno->address, OPR_MODE, 1, &bno->TxBuffer[1], 1);
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	6818      	ldr	r0, [r3, #0]
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	791b      	ldrb	r3, [r3, #4]
 8006be4:	4619      	mov	r1, r3
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	3347      	adds	r3, #71	@ 0x47
 8006bea:	2201      	movs	r2, #1
 8006bec:	9201      	str	r2, [sp, #4]
 8006bee:	9300      	str	r3, [sp, #0]
 8006bf0:	2301      	movs	r3, #1
 8006bf2:	223d      	movs	r2, #61	@ 0x3d
 8006bf4:	f7fb fa50 	bl	8002098 <HAL_I2C_Mem_Write_DMA>

	HAL_Delay(10);
 8006bf8:	200a      	movs	r0, #10
 8006bfa:	f7fa fbfd 	bl	80013f8 <HAL_Delay>
	HAL_I2C_Mem_Write_DMA(bno->hi2cx, bno->address, SYS_TRIGGER, 1, &bno->TxBuffer[2], 1);
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	6818      	ldr	r0, [r3, #0]
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	791b      	ldrb	r3, [r3, #4]
 8006c06:	4619      	mov	r1, r3
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	3348      	adds	r3, #72	@ 0x48
 8006c0c:	2201      	movs	r2, #1
 8006c0e:	9201      	str	r2, [sp, #4]
 8006c10:	9300      	str	r3, [sp, #0]
 8006c12:	2301      	movs	r3, #1
 8006c14:	223f      	movs	r2, #63	@ 0x3f
 8006c16:	f7fb fa3f 	bl	8002098 <HAL_I2C_Mem_Write_DMA>

	HAL_Delay(30);
 8006c1a:	201e      	movs	r0, #30
 8006c1c:	f7fa fbec 	bl	80013f8 <HAL_Delay>
	HAL_I2C_Mem_Read_DMA(bno->hi2cx, bno->address, CHIP_ID, 1, bno->RxBuffer, 1);
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	6818      	ldr	r0, [r3, #0]
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	791b      	ldrb	r3, [r3, #4]
 8006c28:	4619      	mov	r1, r3
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	333c      	adds	r3, #60	@ 0x3c
 8006c2e:	2201      	movs	r2, #1
 8006c30:	9201      	str	r2, [sp, #4]
 8006c32:	9300      	str	r3, [sp, #0]
 8006c34:	2301      	movs	r3, #1
 8006c36:	2200      	movs	r2, #0
 8006c38:	f7fb fb14 	bl	8002264 <HAL_I2C_Mem_Read_DMA>
	if (bno->RxBuffer[0] != 0xA0) return HAL_ERROR;
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006c42:	2ba0      	cmp	r3, #160	@ 0xa0
 8006c44:	d001      	beq.n	8006c4a <BNO055_Init+0x116>
 8006c46:	2301      	movs	r3, #1
 8006c48:	e036      	b.n	8006cb8 <BNO055_Init+0x184>

	HAL_Delay(10);
 8006c4a:	200a      	movs	r0, #10
 8006c4c:	f7fa fbd4 	bl	80013f8 <HAL_Delay>
	HAL_I2C_Mem_Write_DMA(bno->hi2cx, bno->address, PWR_MODE, 1, &bno->TxBuffer[3], 1);
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	6818      	ldr	r0, [r3, #0]
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	791b      	ldrb	r3, [r3, #4]
 8006c58:	4619      	mov	r1, r3
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	3349      	adds	r3, #73	@ 0x49
 8006c5e:	2201      	movs	r2, #1
 8006c60:	9201      	str	r2, [sp, #4]
 8006c62:	9300      	str	r3, [sp, #0]
 8006c64:	2301      	movs	r3, #1
 8006c66:	223e      	movs	r2, #62	@ 0x3e
 8006c68:	f7fb fa16 	bl	8002098 <HAL_I2C_Mem_Write_DMA>

	HAL_Delay(10);
 8006c6c:	200a      	movs	r0, #10
 8006c6e:	f7fa fbc3 	bl	80013f8 <HAL_Delay>
	HAL_I2C_Mem_Write_DMA(bno->hi2cx, bno->address, PAGE_ID, 1, &bno->TxBuffer[0], 1);
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	6818      	ldr	r0, [r3, #0]
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	791b      	ldrb	r3, [r3, #4]
 8006c7a:	4619      	mov	r1, r3
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	3346      	adds	r3, #70	@ 0x46
 8006c80:	2201      	movs	r2, #1
 8006c82:	9201      	str	r2, [sp, #4]
 8006c84:	9300      	str	r3, [sp, #0]
 8006c86:	2301      	movs	r3, #1
 8006c88:	2207      	movs	r2, #7
 8006c8a:	f7fb fa05 	bl	8002098 <HAL_I2C_Mem_Write_DMA>

	HAL_Delay(10);
 8006c8e:	200a      	movs	r0, #10
 8006c90:	f7fa fbb2 	bl	80013f8 <HAL_Delay>
	HAL_I2C_Mem_Write_DMA(bno->hi2cx, bno->address, OPR_MODE, 1, &bno->TxBuffer[4], 1);
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	6818      	ldr	r0, [r3, #0]
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	791b      	ldrb	r3, [r3, #4]
 8006c9c:	4619      	mov	r1, r3
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	334a      	adds	r3, #74	@ 0x4a
 8006ca2:	2201      	movs	r2, #1
 8006ca4:	9201      	str	r2, [sp, #4]
 8006ca6:	9300      	str	r3, [sp, #0]
 8006ca8:	2301      	movs	r3, #1
 8006caa:	223d      	movs	r2, #61	@ 0x3d
 8006cac:	f7fb f9f4 	bl	8002098 <HAL_I2C_Mem_Write_DMA>
	HAL_Delay(20);
 8006cb0:	2014      	movs	r0, #20
 8006cb2:	f7fa fba1 	bl	80013f8 <HAL_Delay>

	return HAL_OK;
 8006cb6:	2300      	movs	r3, #0
}
 8006cb8:	4618      	mov	r0, r3
 8006cba:	3710      	adds	r7, #16
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	bd80      	pop	{r7, pc}

08006cc0 <memset>:
 8006cc0:	4402      	add	r2, r0
 8006cc2:	4603      	mov	r3, r0
 8006cc4:	4293      	cmp	r3, r2
 8006cc6:	d100      	bne.n	8006cca <memset+0xa>
 8006cc8:	4770      	bx	lr
 8006cca:	f803 1b01 	strb.w	r1, [r3], #1
 8006cce:	e7f9      	b.n	8006cc4 <memset+0x4>

08006cd0 <__libc_init_array>:
 8006cd0:	b570      	push	{r4, r5, r6, lr}
 8006cd2:	4d0d      	ldr	r5, [pc, #52]	@ (8006d08 <__libc_init_array+0x38>)
 8006cd4:	4c0d      	ldr	r4, [pc, #52]	@ (8006d0c <__libc_init_array+0x3c>)
 8006cd6:	1b64      	subs	r4, r4, r5
 8006cd8:	10a4      	asrs	r4, r4, #2
 8006cda:	2600      	movs	r6, #0
 8006cdc:	42a6      	cmp	r6, r4
 8006cde:	d109      	bne.n	8006cf4 <__libc_init_array+0x24>
 8006ce0:	4d0b      	ldr	r5, [pc, #44]	@ (8006d10 <__libc_init_array+0x40>)
 8006ce2:	4c0c      	ldr	r4, [pc, #48]	@ (8006d14 <__libc_init_array+0x44>)
 8006ce4:	f000 f818 	bl	8006d18 <_init>
 8006ce8:	1b64      	subs	r4, r4, r5
 8006cea:	10a4      	asrs	r4, r4, #2
 8006cec:	2600      	movs	r6, #0
 8006cee:	42a6      	cmp	r6, r4
 8006cf0:	d105      	bne.n	8006cfe <__libc_init_array+0x2e>
 8006cf2:	bd70      	pop	{r4, r5, r6, pc}
 8006cf4:	f855 3b04 	ldr.w	r3, [r5], #4
 8006cf8:	4798      	blx	r3
 8006cfa:	3601      	adds	r6, #1
 8006cfc:	e7ee      	b.n	8006cdc <__libc_init_array+0xc>
 8006cfe:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d02:	4798      	blx	r3
 8006d04:	3601      	adds	r6, #1
 8006d06:	e7f2      	b.n	8006cee <__libc_init_array+0x1e>
 8006d08:	08006d78 	.word	0x08006d78
 8006d0c:	08006d78 	.word	0x08006d78
 8006d10:	08006d78 	.word	0x08006d78
 8006d14:	08006d7c 	.word	0x08006d7c

08006d18 <_init>:
 8006d18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d1a:	bf00      	nop
 8006d1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d1e:	bc08      	pop	{r3}
 8006d20:	469e      	mov	lr, r3
 8006d22:	4770      	bx	lr

08006d24 <_fini>:
 8006d24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d26:	bf00      	nop
 8006d28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d2a:	bc08      	pop	{r3}
 8006d2c:	469e      	mov	lr, r3
 8006d2e:	4770      	bx	lr
