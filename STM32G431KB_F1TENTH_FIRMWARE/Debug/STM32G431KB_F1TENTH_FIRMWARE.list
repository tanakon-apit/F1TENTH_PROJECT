
STM32G431KB_F1TENTH_FIRMWARE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000069c8  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08006ba0  08006ba0  00007ba0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006be0  08006be0  00008040  2**0
                  CONTENTS
  4 .ARM          00000008  08006be0  08006be0  00007be0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006be8  08006be8  00008040  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006be8  08006be8  00007be8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006bec  08006bec  00007bec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000040  20000000  08006bf0  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003b0  20000040  08006c30  00008040  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003f0  08006c30  000083f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008040  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017528  00000000  00000000  00008070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000314e  00000000  00000000  0001f598  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001448  00000000  00000000  000226e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000fdf  00000000  00000000  00023b30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e314  00000000  00000000  00024b0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a753  00000000  00000000  00042e23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c598d  00000000  00000000  0005d576  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00122f03  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005544  00000000  00000000  00122f48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000089  00000000  00000000  0012848c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000040 	.word	0x20000040
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08006b88 	.word	0x08006b88

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000044 	.word	0x20000044
 8000214:	08006b88 	.word	0x08006b88

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b96a 	b.w	8000504 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	460c      	mov	r4, r1
 8000250:	2b00      	cmp	r3, #0
 8000252:	d14e      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000254:	4694      	mov	ip, r2
 8000256:	458c      	cmp	ip, r1
 8000258:	4686      	mov	lr, r0
 800025a:	fab2 f282 	clz	r2, r2
 800025e:	d962      	bls.n	8000326 <__udivmoddi4+0xde>
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0320 	rsb	r3, r2, #32
 8000266:	4091      	lsls	r1, r2
 8000268:	fa20 f303 	lsr.w	r3, r0, r3
 800026c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000270:	4319      	orrs	r1, r3
 8000272:	fa00 fe02 	lsl.w	lr, r0, r2
 8000276:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800027a:	fa1f f68c 	uxth.w	r6, ip
 800027e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000282:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000286:	fb07 1114 	mls	r1, r7, r4, r1
 800028a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028e:	fb04 f106 	mul.w	r1, r4, r6
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f104 30ff 	add.w	r0, r4, #4294967295
 800029e:	f080 8112 	bcs.w	80004c6 <__udivmoddi4+0x27e>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 810f 	bls.w	80004c6 <__udivmoddi4+0x27e>
 80002a8:	3c02      	subs	r4, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a59      	subs	r1, r3, r1
 80002ae:	fa1f f38e 	uxth.w	r3, lr
 80002b2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002b6:	fb07 1110 	mls	r1, r7, r0, r1
 80002ba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002be:	fb00 f606 	mul.w	r6, r0, r6
 80002c2:	429e      	cmp	r6, r3
 80002c4:	d90a      	bls.n	80002dc <__udivmoddi4+0x94>
 80002c6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ca:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ce:	f080 80fc 	bcs.w	80004ca <__udivmoddi4+0x282>
 80002d2:	429e      	cmp	r6, r3
 80002d4:	f240 80f9 	bls.w	80004ca <__udivmoddi4+0x282>
 80002d8:	4463      	add	r3, ip
 80002da:	3802      	subs	r0, #2
 80002dc:	1b9b      	subs	r3, r3, r6
 80002de:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002e2:	2100      	movs	r1, #0
 80002e4:	b11d      	cbz	r5, 80002ee <__udivmoddi4+0xa6>
 80002e6:	40d3      	lsrs	r3, r2
 80002e8:	2200      	movs	r2, #0
 80002ea:	e9c5 3200 	strd	r3, r2, [r5]
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d905      	bls.n	8000302 <__udivmoddi4+0xba>
 80002f6:	b10d      	cbz	r5, 80002fc <__udivmoddi4+0xb4>
 80002f8:	e9c5 0100 	strd	r0, r1, [r5]
 80002fc:	2100      	movs	r1, #0
 80002fe:	4608      	mov	r0, r1
 8000300:	e7f5      	b.n	80002ee <__udivmoddi4+0xa6>
 8000302:	fab3 f183 	clz	r1, r3
 8000306:	2900      	cmp	r1, #0
 8000308:	d146      	bne.n	8000398 <__udivmoddi4+0x150>
 800030a:	42a3      	cmp	r3, r4
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xcc>
 800030e:	4290      	cmp	r0, r2
 8000310:	f0c0 80f0 	bcc.w	80004f4 <__udivmoddi4+0x2ac>
 8000314:	1a86      	subs	r6, r0, r2
 8000316:	eb64 0303 	sbc.w	r3, r4, r3
 800031a:	2001      	movs	r0, #1
 800031c:	2d00      	cmp	r5, #0
 800031e:	d0e6      	beq.n	80002ee <__udivmoddi4+0xa6>
 8000320:	e9c5 6300 	strd	r6, r3, [r5]
 8000324:	e7e3      	b.n	80002ee <__udivmoddi4+0xa6>
 8000326:	2a00      	cmp	r2, #0
 8000328:	f040 8090 	bne.w	800044c <__udivmoddi4+0x204>
 800032c:	eba1 040c 	sub.w	r4, r1, ip
 8000330:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000334:	fa1f f78c 	uxth.w	r7, ip
 8000338:	2101      	movs	r1, #1
 800033a:	fbb4 f6f8 	udiv	r6, r4, r8
 800033e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000342:	fb08 4416 	mls	r4, r8, r6, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb07 f006 	mul.w	r0, r7, r6
 800034e:	4298      	cmp	r0, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x11c>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f106 34ff 	add.w	r4, r6, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x11a>
 800035c:	4298      	cmp	r0, r3
 800035e:	f200 80cd 	bhi.w	80004fc <__udivmoddi4+0x2b4>
 8000362:	4626      	mov	r6, r4
 8000364:	1a1c      	subs	r4, r3, r0
 8000366:	fa1f f38e 	uxth.w	r3, lr
 800036a:	fbb4 f0f8 	udiv	r0, r4, r8
 800036e:	fb08 4410 	mls	r4, r8, r0, r4
 8000372:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000376:	fb00 f707 	mul.w	r7, r0, r7
 800037a:	429f      	cmp	r7, r3
 800037c:	d908      	bls.n	8000390 <__udivmoddi4+0x148>
 800037e:	eb1c 0303 	adds.w	r3, ip, r3
 8000382:	f100 34ff 	add.w	r4, r0, #4294967295
 8000386:	d202      	bcs.n	800038e <__udivmoddi4+0x146>
 8000388:	429f      	cmp	r7, r3
 800038a:	f200 80b0 	bhi.w	80004ee <__udivmoddi4+0x2a6>
 800038e:	4620      	mov	r0, r4
 8000390:	1bdb      	subs	r3, r3, r7
 8000392:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000396:	e7a5      	b.n	80002e4 <__udivmoddi4+0x9c>
 8000398:	f1c1 0620 	rsb	r6, r1, #32
 800039c:	408b      	lsls	r3, r1
 800039e:	fa22 f706 	lsr.w	r7, r2, r6
 80003a2:	431f      	orrs	r7, r3
 80003a4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a8:	fa04 f301 	lsl.w	r3, r4, r1
 80003ac:	ea43 030c 	orr.w	r3, r3, ip
 80003b0:	40f4      	lsrs	r4, r6
 80003b2:	fa00 f801 	lsl.w	r8, r0, r1
 80003b6:	0c38      	lsrs	r0, r7, #16
 80003b8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003bc:	fbb4 fef0 	udiv	lr, r4, r0
 80003c0:	fa1f fc87 	uxth.w	ip, r7
 80003c4:	fb00 441e 	mls	r4, r0, lr, r4
 80003c8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003cc:	fb0e f90c 	mul.w	r9, lr, ip
 80003d0:	45a1      	cmp	r9, r4
 80003d2:	fa02 f201 	lsl.w	r2, r2, r1
 80003d6:	d90a      	bls.n	80003ee <__udivmoddi4+0x1a6>
 80003d8:	193c      	adds	r4, r7, r4
 80003da:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003de:	f080 8084 	bcs.w	80004ea <__udivmoddi4+0x2a2>
 80003e2:	45a1      	cmp	r9, r4
 80003e4:	f240 8081 	bls.w	80004ea <__udivmoddi4+0x2a2>
 80003e8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	eba4 0409 	sub.w	r4, r4, r9
 80003f2:	fa1f f983 	uxth.w	r9, r3
 80003f6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003fa:	fb00 4413 	mls	r4, r0, r3, r4
 80003fe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000402:	fb03 fc0c 	mul.w	ip, r3, ip
 8000406:	45a4      	cmp	ip, r4
 8000408:	d907      	bls.n	800041a <__udivmoddi4+0x1d2>
 800040a:	193c      	adds	r4, r7, r4
 800040c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000410:	d267      	bcs.n	80004e2 <__udivmoddi4+0x29a>
 8000412:	45a4      	cmp	ip, r4
 8000414:	d965      	bls.n	80004e2 <__udivmoddi4+0x29a>
 8000416:	3b02      	subs	r3, #2
 8000418:	443c      	add	r4, r7
 800041a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800041e:	fba0 9302 	umull	r9, r3, r0, r2
 8000422:	eba4 040c 	sub.w	r4, r4, ip
 8000426:	429c      	cmp	r4, r3
 8000428:	46ce      	mov	lr, r9
 800042a:	469c      	mov	ip, r3
 800042c:	d351      	bcc.n	80004d2 <__udivmoddi4+0x28a>
 800042e:	d04e      	beq.n	80004ce <__udivmoddi4+0x286>
 8000430:	b155      	cbz	r5, 8000448 <__udivmoddi4+0x200>
 8000432:	ebb8 030e 	subs.w	r3, r8, lr
 8000436:	eb64 040c 	sbc.w	r4, r4, ip
 800043a:	fa04 f606 	lsl.w	r6, r4, r6
 800043e:	40cb      	lsrs	r3, r1
 8000440:	431e      	orrs	r6, r3
 8000442:	40cc      	lsrs	r4, r1
 8000444:	e9c5 6400 	strd	r6, r4, [r5]
 8000448:	2100      	movs	r1, #0
 800044a:	e750      	b.n	80002ee <__udivmoddi4+0xa6>
 800044c:	f1c2 0320 	rsb	r3, r2, #32
 8000450:	fa20 f103 	lsr.w	r1, r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa24 f303 	lsr.w	r3, r4, r3
 800045c:	4094      	lsls	r4, r2
 800045e:	430c      	orrs	r4, r1
 8000460:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000464:	fa00 fe02 	lsl.w	lr, r0, r2
 8000468:	fa1f f78c 	uxth.w	r7, ip
 800046c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000470:	fb08 3110 	mls	r1, r8, r0, r3
 8000474:	0c23      	lsrs	r3, r4, #16
 8000476:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800047a:	fb00 f107 	mul.w	r1, r0, r7
 800047e:	4299      	cmp	r1, r3
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x24c>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 36ff 	add.w	r6, r0, #4294967295
 800048a:	d22c      	bcs.n	80004e6 <__udivmoddi4+0x29e>
 800048c:	4299      	cmp	r1, r3
 800048e:	d92a      	bls.n	80004e6 <__udivmoddi4+0x29e>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1a5b      	subs	r3, r3, r1
 8000496:	b2a4      	uxth	r4, r4
 8000498:	fbb3 f1f8 	udiv	r1, r3, r8
 800049c:	fb08 3311 	mls	r3, r8, r1, r3
 80004a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004a4:	fb01 f307 	mul.w	r3, r1, r7
 80004a8:	42a3      	cmp	r3, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x276>
 80004ac:	eb1c 0404 	adds.w	r4, ip, r4
 80004b0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004b4:	d213      	bcs.n	80004de <__udivmoddi4+0x296>
 80004b6:	42a3      	cmp	r3, r4
 80004b8:	d911      	bls.n	80004de <__udivmoddi4+0x296>
 80004ba:	3902      	subs	r1, #2
 80004bc:	4464      	add	r4, ip
 80004be:	1ae4      	subs	r4, r4, r3
 80004c0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004c4:	e739      	b.n	800033a <__udivmoddi4+0xf2>
 80004c6:	4604      	mov	r4, r0
 80004c8:	e6f0      	b.n	80002ac <__udivmoddi4+0x64>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e706      	b.n	80002dc <__udivmoddi4+0x94>
 80004ce:	45c8      	cmp	r8, r9
 80004d0:	d2ae      	bcs.n	8000430 <__udivmoddi4+0x1e8>
 80004d2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004d6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004da:	3801      	subs	r0, #1
 80004dc:	e7a8      	b.n	8000430 <__udivmoddi4+0x1e8>
 80004de:	4631      	mov	r1, r6
 80004e0:	e7ed      	b.n	80004be <__udivmoddi4+0x276>
 80004e2:	4603      	mov	r3, r0
 80004e4:	e799      	b.n	800041a <__udivmoddi4+0x1d2>
 80004e6:	4630      	mov	r0, r6
 80004e8:	e7d4      	b.n	8000494 <__udivmoddi4+0x24c>
 80004ea:	46d6      	mov	lr, sl
 80004ec:	e77f      	b.n	80003ee <__udivmoddi4+0x1a6>
 80004ee:	4463      	add	r3, ip
 80004f0:	3802      	subs	r0, #2
 80004f2:	e74d      	b.n	8000390 <__udivmoddi4+0x148>
 80004f4:	4606      	mov	r6, r0
 80004f6:	4623      	mov	r3, r4
 80004f8:	4608      	mov	r0, r1
 80004fa:	e70f      	b.n	800031c <__udivmoddi4+0xd4>
 80004fc:	3e02      	subs	r6, #2
 80004fe:	4463      	add	r3, ip
 8000500:	e730      	b.n	8000364 <__udivmoddi4+0x11c>
 8000502:	bf00      	nop

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b082      	sub	sp, #8
 800050c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800050e:	4b16      	ldr	r3, [pc, #88]	@ (8000568 <MX_DMA_Init+0x60>)
 8000510:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000512:	4a15      	ldr	r2, [pc, #84]	@ (8000568 <MX_DMA_Init+0x60>)
 8000514:	f043 0304 	orr.w	r3, r3, #4
 8000518:	6493      	str	r3, [r2, #72]	@ 0x48
 800051a:	4b13      	ldr	r3, [pc, #76]	@ (8000568 <MX_DMA_Init+0x60>)
 800051c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800051e:	f003 0304 	and.w	r3, r3, #4
 8000522:	607b      	str	r3, [r7, #4]
 8000524:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000526:	4b10      	ldr	r3, [pc, #64]	@ (8000568 <MX_DMA_Init+0x60>)
 8000528:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800052a:	4a0f      	ldr	r2, [pc, #60]	@ (8000568 <MX_DMA_Init+0x60>)
 800052c:	f043 0301 	orr.w	r3, r3, #1
 8000530:	6493      	str	r3, [r2, #72]	@ 0x48
 8000532:	4b0d      	ldr	r3, [pc, #52]	@ (8000568 <MX_DMA_Init+0x60>)
 8000534:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000536:	f003 0301 	and.w	r3, r3, #1
 800053a:	603b      	str	r3, [r7, #0]
 800053c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800053e:	2200      	movs	r2, #0
 8000540:	2100      	movs	r1, #0
 8000542:	200b      	movs	r0, #11
 8000544:	f001 f82d 	bl	80015a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000548:	200b      	movs	r0, #11
 800054a:	f001 f844 	bl	80015d6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800054e:	2200      	movs	r2, #0
 8000550:	2100      	movs	r1, #0
 8000552:	200c      	movs	r0, #12
 8000554:	f001 f825 	bl	80015a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000558:	200c      	movs	r0, #12
 800055a:	f001 f83c 	bl	80015d6 <HAL_NVIC_EnableIRQ>

}
 800055e:	bf00      	nop
 8000560:	3708      	adds	r7, #8
 8000562:	46bd      	mov	sp, r7
 8000564:	bd80      	pop	{r7, pc}
 8000566:	bf00      	nop
 8000568:	40021000 	.word	0x40021000

0800056c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b088      	sub	sp, #32
 8000570:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000572:	f107 030c 	add.w	r3, r7, #12
 8000576:	2200      	movs	r2, #0
 8000578:	601a      	str	r2, [r3, #0]
 800057a:	605a      	str	r2, [r3, #4]
 800057c:	609a      	str	r2, [r3, #8]
 800057e:	60da      	str	r2, [r3, #12]
 8000580:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000582:	4b18      	ldr	r3, [pc, #96]	@ (80005e4 <MX_GPIO_Init+0x78>)
 8000584:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000586:	4a17      	ldr	r2, [pc, #92]	@ (80005e4 <MX_GPIO_Init+0x78>)
 8000588:	f043 0301 	orr.w	r3, r3, #1
 800058c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800058e:	4b15      	ldr	r3, [pc, #84]	@ (80005e4 <MX_GPIO_Init+0x78>)
 8000590:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000592:	f003 0301 	and.w	r3, r3, #1
 8000596:	60bb      	str	r3, [r7, #8]
 8000598:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800059a:	4b12      	ldr	r3, [pc, #72]	@ (80005e4 <MX_GPIO_Init+0x78>)
 800059c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800059e:	4a11      	ldr	r2, [pc, #68]	@ (80005e4 <MX_GPIO_Init+0x78>)
 80005a0:	f043 0302 	orr.w	r3, r3, #2
 80005a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005a6:	4b0f      	ldr	r3, [pc, #60]	@ (80005e4 <MX_GPIO_Init+0x78>)
 80005a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005aa:	f003 0302 	and.w	r3, r3, #2
 80005ae:	607b      	str	r3, [r7, #4]
 80005b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80005b2:	2200      	movs	r2, #0
 80005b4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80005b8:	480b      	ldr	r0, [pc, #44]	@ (80005e8 <MX_GPIO_Init+0x7c>)
 80005ba:	f001 fc91 	bl	8001ee0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80005be:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80005c2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005c4:	2301      	movs	r3, #1
 80005c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c8:	2300      	movs	r3, #0
 80005ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005cc:	2300      	movs	r3, #0
 80005ce:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80005d0:	f107 030c 	add.w	r3, r7, #12
 80005d4:	4619      	mov	r1, r3
 80005d6:	4804      	ldr	r0, [pc, #16]	@ (80005e8 <MX_GPIO_Init+0x7c>)
 80005d8:	f001 fb00 	bl	8001bdc <HAL_GPIO_Init>

}
 80005dc:	bf00      	nop
 80005de:	3720      	adds	r7, #32
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bd80      	pop	{r7, pc}
 80005e4:	40021000 	.word	0x40021000
 80005e8:	48000400 	.word	0x48000400

080005ec <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80005f0:	4b1b      	ldr	r3, [pc, #108]	@ (8000660 <MX_I2C1_Init+0x74>)
 80005f2:	4a1c      	ldr	r2, [pc, #112]	@ (8000664 <MX_I2C1_Init+0x78>)
 80005f4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10802D9B;
 80005f6:	4b1a      	ldr	r3, [pc, #104]	@ (8000660 <MX_I2C1_Init+0x74>)
 80005f8:	4a1b      	ldr	r2, [pc, #108]	@ (8000668 <MX_I2C1_Init+0x7c>)
 80005fa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80005fc:	4b18      	ldr	r3, [pc, #96]	@ (8000660 <MX_I2C1_Init+0x74>)
 80005fe:	2200      	movs	r2, #0
 8000600:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000602:	4b17      	ldr	r3, [pc, #92]	@ (8000660 <MX_I2C1_Init+0x74>)
 8000604:	2201      	movs	r2, #1
 8000606:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000608:	4b15      	ldr	r3, [pc, #84]	@ (8000660 <MX_I2C1_Init+0x74>)
 800060a:	2200      	movs	r2, #0
 800060c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800060e:	4b14      	ldr	r3, [pc, #80]	@ (8000660 <MX_I2C1_Init+0x74>)
 8000610:	2200      	movs	r2, #0
 8000612:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000614:	4b12      	ldr	r3, [pc, #72]	@ (8000660 <MX_I2C1_Init+0x74>)
 8000616:	2200      	movs	r2, #0
 8000618:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800061a:	4b11      	ldr	r3, [pc, #68]	@ (8000660 <MX_I2C1_Init+0x74>)
 800061c:	2200      	movs	r2, #0
 800061e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000620:	4b0f      	ldr	r3, [pc, #60]	@ (8000660 <MX_I2C1_Init+0x74>)
 8000622:	2200      	movs	r2, #0
 8000624:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000626:	480e      	ldr	r0, [pc, #56]	@ (8000660 <MX_I2C1_Init+0x74>)
 8000628:	f001 fc72 	bl	8001f10 <HAL_I2C_Init>
 800062c:	4603      	mov	r3, r0
 800062e:	2b00      	cmp	r3, #0
 8000630:	d001      	beq.n	8000636 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000632:	f000 fa35 	bl	8000aa0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000636:	2100      	movs	r1, #0
 8000638:	4809      	ldr	r0, [pc, #36]	@ (8000660 <MX_I2C1_Init+0x74>)
 800063a:	f003 fbe3 	bl	8003e04 <HAL_I2CEx_ConfigAnalogFilter>
 800063e:	4603      	mov	r3, r0
 8000640:	2b00      	cmp	r3, #0
 8000642:	d001      	beq.n	8000648 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000644:	f000 fa2c 	bl	8000aa0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000648:	2100      	movs	r1, #0
 800064a:	4805      	ldr	r0, [pc, #20]	@ (8000660 <MX_I2C1_Init+0x74>)
 800064c:	f003 fc25 	bl	8003e9a <HAL_I2CEx_ConfigDigitalFilter>
 8000650:	4603      	mov	r3, r0
 8000652:	2b00      	cmp	r3, #0
 8000654:	d001      	beq.n	800065a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000656:	f000 fa23 	bl	8000aa0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800065a:	bf00      	nop
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	2000005c 	.word	0x2000005c
 8000664:	40005400 	.word	0x40005400
 8000668:	10802d9b 	.word	0x10802d9b

0800066c <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000670:	4b1b      	ldr	r3, [pc, #108]	@ (80006e0 <MX_I2C3_Init+0x74>)
 8000672:	4a1c      	ldr	r2, [pc, #112]	@ (80006e4 <MX_I2C3_Init+0x78>)
 8000674:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x30A0A7FB;
 8000676:	4b1a      	ldr	r3, [pc, #104]	@ (80006e0 <MX_I2C3_Init+0x74>)
 8000678:	4a1b      	ldr	r2, [pc, #108]	@ (80006e8 <MX_I2C3_Init+0x7c>)
 800067a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 800067c:	4b18      	ldr	r3, [pc, #96]	@ (80006e0 <MX_I2C3_Init+0x74>)
 800067e:	2200      	movs	r2, #0
 8000680:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000682:	4b17      	ldr	r3, [pc, #92]	@ (80006e0 <MX_I2C3_Init+0x74>)
 8000684:	2201      	movs	r2, #1
 8000686:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000688:	4b15      	ldr	r3, [pc, #84]	@ (80006e0 <MX_I2C3_Init+0x74>)
 800068a:	2200      	movs	r2, #0
 800068c:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 800068e:	4b14      	ldr	r3, [pc, #80]	@ (80006e0 <MX_I2C3_Init+0x74>)
 8000690:	2200      	movs	r2, #0
 8000692:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000694:	4b12      	ldr	r3, [pc, #72]	@ (80006e0 <MX_I2C3_Init+0x74>)
 8000696:	2200      	movs	r2, #0
 8000698:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800069a:	4b11      	ldr	r3, [pc, #68]	@ (80006e0 <MX_I2C3_Init+0x74>)
 800069c:	2200      	movs	r2, #0
 800069e:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006a0:	4b0f      	ldr	r3, [pc, #60]	@ (80006e0 <MX_I2C3_Init+0x74>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80006a6:	480e      	ldr	r0, [pc, #56]	@ (80006e0 <MX_I2C3_Init+0x74>)
 80006a8:	f001 fc32 	bl	8001f10 <HAL_I2C_Init>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 80006b2:	f000 f9f5 	bl	8000aa0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80006b6:	2100      	movs	r1, #0
 80006b8:	4809      	ldr	r0, [pc, #36]	@ (80006e0 <MX_I2C3_Init+0x74>)
 80006ba:	f003 fba3 	bl	8003e04 <HAL_I2CEx_ConfigAnalogFilter>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d001      	beq.n	80006c8 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 80006c4:	f000 f9ec 	bl	8000aa0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80006c8:	2100      	movs	r1, #0
 80006ca:	4805      	ldr	r0, [pc, #20]	@ (80006e0 <MX_I2C3_Init+0x74>)
 80006cc:	f003 fbe5 	bl	8003e9a <HAL_I2CEx_ConfigDigitalFilter>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 80006d6:	f000 f9e3 	bl	8000aa0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80006da:	bf00      	nop
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	200000b0 	.word	0x200000b0
 80006e4:	40007800 	.word	0x40007800
 80006e8:	30a0a7fb 	.word	0x30a0a7fb

080006ec <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b09e      	sub	sp, #120	@ 0x78
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006f4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80006f8:	2200      	movs	r2, #0
 80006fa:	601a      	str	r2, [r3, #0]
 80006fc:	605a      	str	r2, [r3, #4]
 80006fe:	609a      	str	r2, [r3, #8]
 8000700:	60da      	str	r2, [r3, #12]
 8000702:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000704:	f107 0320 	add.w	r3, r7, #32
 8000708:	2244      	movs	r2, #68	@ 0x44
 800070a:	2100      	movs	r1, #0
 800070c:	4618      	mov	r0, r3
 800070e:	f006 fa0f 	bl	8006b30 <memset>
  if(i2cHandle->Instance==I2C1)
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	4a88      	ldr	r2, [pc, #544]	@ (8000938 <HAL_I2C_MspInit+0x24c>)
 8000718:	4293      	cmp	r3, r2
 800071a:	f040 80af 	bne.w	800087c <HAL_I2C_MspInit+0x190>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800071e:	2340      	movs	r3, #64	@ 0x40
 8000720:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000722:	2300      	movs	r3, #0
 8000724:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000726:	f107 0320 	add.w	r3, r7, #32
 800072a:	4618      	mov	r0, r3
 800072c:	f004 f9e4 	bl	8004af8 <HAL_RCCEx_PeriphCLKConfig>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d001      	beq.n	800073a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000736:	f000 f9b3 	bl	8000aa0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800073a:	4b80      	ldr	r3, [pc, #512]	@ (800093c <HAL_I2C_MspInit+0x250>)
 800073c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800073e:	4a7f      	ldr	r2, [pc, #508]	@ (800093c <HAL_I2C_MspInit+0x250>)
 8000740:	f043 0301 	orr.w	r3, r3, #1
 8000744:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000746:	4b7d      	ldr	r3, [pc, #500]	@ (800093c <HAL_I2C_MspInit+0x250>)
 8000748:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800074a:	f003 0301 	and.w	r3, r3, #1
 800074e:	61fb      	str	r3, [r7, #28]
 8000750:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000752:	4b7a      	ldr	r3, [pc, #488]	@ (800093c <HAL_I2C_MspInit+0x250>)
 8000754:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000756:	4a79      	ldr	r2, [pc, #484]	@ (800093c <HAL_I2C_MspInit+0x250>)
 8000758:	f043 0302 	orr.w	r3, r3, #2
 800075c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800075e:	4b77      	ldr	r3, [pc, #476]	@ (800093c <HAL_I2C_MspInit+0x250>)
 8000760:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000762:	f003 0302 	and.w	r3, r3, #2
 8000766:	61bb      	str	r3, [r7, #24]
 8000768:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800076a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800076e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000770:	2312      	movs	r3, #18
 8000772:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000774:	2301      	movs	r3, #1
 8000776:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000778:	2300      	movs	r3, #0
 800077a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800077c:	2304      	movs	r3, #4
 800077e:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000780:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000784:	4619      	mov	r1, r3
 8000786:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800078a:	f001 fa27 	bl	8001bdc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800078e:	2380      	movs	r3, #128	@ 0x80
 8000790:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000792:	2312      	movs	r3, #18
 8000794:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000796:	2301      	movs	r3, #1
 8000798:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800079a:	2300      	movs	r3, #0
 800079c:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800079e:	2304      	movs	r3, #4
 80007a0:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007a2:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80007a6:	4619      	mov	r1, r3
 80007a8:	4865      	ldr	r0, [pc, #404]	@ (8000940 <HAL_I2C_MspInit+0x254>)
 80007aa:	f001 fa17 	bl	8001bdc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80007ae:	4b63      	ldr	r3, [pc, #396]	@ (800093c <HAL_I2C_MspInit+0x250>)
 80007b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80007b2:	4a62      	ldr	r2, [pc, #392]	@ (800093c <HAL_I2C_MspInit+0x250>)
 80007b4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80007b8:	6593      	str	r3, [r2, #88]	@ 0x58
 80007ba:	4b60      	ldr	r3, [pc, #384]	@ (800093c <HAL_I2C_MspInit+0x250>)
 80007bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80007be:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80007c2:	617b      	str	r3, [r7, #20]
 80007c4:	697b      	ldr	r3, [r7, #20]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel1;
 80007c6:	4b5f      	ldr	r3, [pc, #380]	@ (8000944 <HAL_I2C_MspInit+0x258>)
 80007c8:	4a5f      	ldr	r2, [pc, #380]	@ (8000948 <HAL_I2C_MspInit+0x25c>)
 80007ca:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 80007cc:	4b5d      	ldr	r3, [pc, #372]	@ (8000944 <HAL_I2C_MspInit+0x258>)
 80007ce:	2210      	movs	r2, #16
 80007d0:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80007d2:	4b5c      	ldr	r3, [pc, #368]	@ (8000944 <HAL_I2C_MspInit+0x258>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80007d8:	4b5a      	ldr	r3, [pc, #360]	@ (8000944 <HAL_I2C_MspInit+0x258>)
 80007da:	2200      	movs	r2, #0
 80007dc:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80007de:	4b59      	ldr	r3, [pc, #356]	@ (8000944 <HAL_I2C_MspInit+0x258>)
 80007e0:	2280      	movs	r2, #128	@ 0x80
 80007e2:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80007e4:	4b57      	ldr	r3, [pc, #348]	@ (8000944 <HAL_I2C_MspInit+0x258>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80007ea:	4b56      	ldr	r3, [pc, #344]	@ (8000944 <HAL_I2C_MspInit+0x258>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 80007f0:	4b54      	ldr	r3, [pc, #336]	@ (8000944 <HAL_I2C_MspInit+0x258>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80007f6:	4b53      	ldr	r3, [pc, #332]	@ (8000944 <HAL_I2C_MspInit+0x258>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 80007fc:	4851      	ldr	r0, [pc, #324]	@ (8000944 <HAL_I2C_MspInit+0x258>)
 80007fe:	f000 ff05 	bl	800160c <HAL_DMA_Init>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d001      	beq.n	800080c <HAL_I2C_MspInit+0x120>
    {
      Error_Handler();
 8000808:	f000 f94a 	bl	8000aa0 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	4a4d      	ldr	r2, [pc, #308]	@ (8000944 <HAL_I2C_MspInit+0x258>)
 8000810:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000812:	4a4c      	ldr	r2, [pc, #304]	@ (8000944 <HAL_I2C_MspInit+0x258>)
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	6293      	str	r3, [r2, #40]	@ 0x28

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel2;
 8000818:	4b4c      	ldr	r3, [pc, #304]	@ (800094c <HAL_I2C_MspInit+0x260>)
 800081a:	4a4d      	ldr	r2, [pc, #308]	@ (8000950 <HAL_I2C_MspInit+0x264>)
 800081c:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
 800081e:	4b4b      	ldr	r3, [pc, #300]	@ (800094c <HAL_I2C_MspInit+0x260>)
 8000820:	2211      	movs	r2, #17
 8000822:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000824:	4b49      	ldr	r3, [pc, #292]	@ (800094c <HAL_I2C_MspInit+0x260>)
 8000826:	2210      	movs	r2, #16
 8000828:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800082a:	4b48      	ldr	r3, [pc, #288]	@ (800094c <HAL_I2C_MspInit+0x260>)
 800082c:	2200      	movs	r2, #0
 800082e:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_DISABLE;
 8000830:	4b46      	ldr	r3, [pc, #280]	@ (800094c <HAL_I2C_MspInit+0x260>)
 8000832:	2200      	movs	r2, #0
 8000834:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000836:	4b45      	ldr	r3, [pc, #276]	@ (800094c <HAL_I2C_MspInit+0x260>)
 8000838:	2200      	movs	r2, #0
 800083a:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800083c:	4b43      	ldr	r3, [pc, #268]	@ (800094c <HAL_I2C_MspInit+0x260>)
 800083e:	2200      	movs	r2, #0
 8000840:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8000842:	4b42      	ldr	r3, [pc, #264]	@ (800094c <HAL_I2C_MspInit+0x260>)
 8000844:	2200      	movs	r2, #0
 8000846:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000848:	4b40      	ldr	r3, [pc, #256]	@ (800094c <HAL_I2C_MspInit+0x260>)
 800084a:	2200      	movs	r2, #0
 800084c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 800084e:	483f      	ldr	r0, [pc, #252]	@ (800094c <HAL_I2C_MspInit+0x260>)
 8000850:	f000 fedc 	bl	800160c <HAL_DMA_Init>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <HAL_I2C_MspInit+0x172>
    {
      Error_Handler();
 800085a:	f000 f921 	bl	8000aa0 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	4a3a      	ldr	r2, [pc, #232]	@ (800094c <HAL_I2C_MspInit+0x260>)
 8000862:	639a      	str	r2, [r3, #56]	@ 0x38
 8000864:	4a39      	ldr	r2, [pc, #228]	@ (800094c <HAL_I2C_MspInit+0x260>)
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	6293      	str	r3, [r2, #40]	@ 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800086a:	2200      	movs	r2, #0
 800086c:	2100      	movs	r1, #0
 800086e:	201f      	movs	r0, #31
 8000870:	f000 fe97 	bl	80015a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000874:	201f      	movs	r0, #31
 8000876:	f000 feae 	bl	80015d6 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 800087a:	e059      	b.n	8000930 <HAL_I2C_MspInit+0x244>
  else if(i2cHandle->Instance==I2C3)
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	4a34      	ldr	r2, [pc, #208]	@ (8000954 <HAL_I2C_MspInit+0x268>)
 8000882:	4293      	cmp	r3, r2
 8000884:	d154      	bne.n	8000930 <HAL_I2C_MspInit+0x244>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8000886:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800088a:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 800088c:	2300      	movs	r3, #0
 800088e:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000890:	f107 0320 	add.w	r3, r7, #32
 8000894:	4618      	mov	r0, r3
 8000896:	f004 f92f 	bl	8004af8 <HAL_RCCEx_PeriphCLKConfig>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <HAL_I2C_MspInit+0x1b8>
      Error_Handler();
 80008a0:	f000 f8fe 	bl	8000aa0 <Error_Handler>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008a4:	4b25      	ldr	r3, [pc, #148]	@ (800093c <HAL_I2C_MspInit+0x250>)
 80008a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008a8:	4a24      	ldr	r2, [pc, #144]	@ (800093c <HAL_I2C_MspInit+0x250>)
 80008aa:	f043 0301 	orr.w	r3, r3, #1
 80008ae:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008b0:	4b22      	ldr	r3, [pc, #136]	@ (800093c <HAL_I2C_MspInit+0x250>)
 80008b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008b4:	f003 0301 	and.w	r3, r3, #1
 80008b8:	613b      	str	r3, [r7, #16]
 80008ba:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008bc:	4b1f      	ldr	r3, [pc, #124]	@ (800093c <HAL_I2C_MspInit+0x250>)
 80008be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008c0:	4a1e      	ldr	r2, [pc, #120]	@ (800093c <HAL_I2C_MspInit+0x250>)
 80008c2:	f043 0302 	orr.w	r3, r3, #2
 80008c6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008c8:	4b1c      	ldr	r3, [pc, #112]	@ (800093c <HAL_I2C_MspInit+0x250>)
 80008ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008cc:	f003 0302 	and.w	r3, r3, #2
 80008d0:	60fb      	str	r3, [r7, #12]
 80008d2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80008d4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80008d8:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008da:	2312      	movs	r3, #18
 80008dc:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008de:	2300      	movs	r3, #0
 80008e0:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e2:	2300      	movs	r3, #0
 80008e4:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF2_I2C3;
 80008e6:	2302      	movs	r3, #2
 80008e8:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ea:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80008ee:	4619      	mov	r1, r3
 80008f0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008f4:	f001 f972 	bl	8001bdc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80008f8:	2320      	movs	r3, #32
 80008fa:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008fc:	2312      	movs	r3, #18
 80008fe:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000900:	2300      	movs	r3, #0
 8000902:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000904:	2300      	movs	r3, #0
 8000906:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C3;
 8000908:	2308      	movs	r3, #8
 800090a:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800090c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000910:	4619      	mov	r1, r3
 8000912:	480b      	ldr	r0, [pc, #44]	@ (8000940 <HAL_I2C_MspInit+0x254>)
 8000914:	f001 f962 	bl	8001bdc <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000918:	4b08      	ldr	r3, [pc, #32]	@ (800093c <HAL_I2C_MspInit+0x250>)
 800091a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800091c:	4a07      	ldr	r2, [pc, #28]	@ (800093c <HAL_I2C_MspInit+0x250>)
 800091e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8000922:	6593      	str	r3, [r2, #88]	@ 0x58
 8000924:	4b05      	ldr	r3, [pc, #20]	@ (800093c <HAL_I2C_MspInit+0x250>)
 8000926:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000928:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800092c:	60bb      	str	r3, [r7, #8]
 800092e:	68bb      	ldr	r3, [r7, #8]
}
 8000930:	bf00      	nop
 8000932:	3778      	adds	r7, #120	@ 0x78
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}
 8000938:	40005400 	.word	0x40005400
 800093c:	40021000 	.word	0x40021000
 8000940:	48000400 	.word	0x48000400
 8000944:	20000104 	.word	0x20000104
 8000948:	40020008 	.word	0x40020008
 800094c:	20000164 	.word	0x20000164
 8000950:	4002001c 	.word	0x4002001c
 8000954:	40007800 	.word	0x40007800

08000958 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800095c:	f000 fcd5 	bl	800130a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000960:	f000 f83c 	bl	80009dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000964:	f7ff fe02 	bl	800056c <MX_GPIO_Init>
  MX_DMA_Init();
 8000968:	f7ff fdce 	bl	8000508 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800096c:	f000 fbc0 	bl	80010f0 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000970:	f7ff fe3c 	bl	80005ec <MX_I2C1_Init>
  MX_TIM3_Init();
 8000974:	f000 f91e 	bl	8000bb4 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000978:	f000 f972 	bl	8000c60 <MX_TIM4_Init>
  MX_TIM8_Init();
 800097c:	f000 f9c6 	bl	8000d0c <MX_TIM8_Init>
  MX_USART1_UART_Init();
 8000980:	f000 fb6a 	bl	8001058 <MX_USART1_UART_Init>
  MX_I2C3_Init();
 8000984:	f7ff fe72 	bl	800066c <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */
	AS5600_isConnected(&as5600);
 8000988:	480f      	ldr	r0, [pc, #60]	@ (80009c8 <main+0x70>)
 800098a:	f005 ff95 	bl	80068b8 <AS5600_isConnected>
	AS5600_resetCumulativePosition(&as5600, 0.0);
 800098e:	ed9f 0a0f 	vldr	s0, [pc, #60]	@ 80009cc <main+0x74>
 8000992:	480d      	ldr	r0, [pc, #52]	@ (80009c8 <main+0x70>)
 8000994:	f006 f890 	bl	8006ab8 <AS5600_resetCumulativePosition>
	{
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		Rad = AS5600_readAngle(&as5600);
 8000998:	480b      	ldr	r0, [pc, #44]	@ (80009c8 <main+0x70>)
 800099a:	f005 ffe5 	bl	8006968 <AS5600_readAngle>
 800099e:	eef0 7a40 	vmov.f32	s15, s0
 80009a2:	4b0b      	ldr	r3, [pc, #44]	@ (80009d0 <main+0x78>)
 80009a4:	edc3 7a00 	vstr	s15, [r3]

		Cumulative_Rad = AS5600_getCumulativePosition(&as5600);
 80009a8:	4807      	ldr	r0, [pc, #28]	@ (80009c8 <main+0x70>)
 80009aa:	f006 f809 	bl	80069c0 <AS5600_getCumulativePosition>
 80009ae:	eef0 7a40 	vmov.f32	s15, s0
 80009b2:	4b08      	ldr	r3, [pc, #32]	@ (80009d4 <main+0x7c>)
 80009b4:	edc3 7a00 	vstr	s15, [r3]
//			timestamp += 100;
//			revCount = AS5600_getAngularSpeed(&hi2c1, AS5600_MODE_RADIANS);
//		}


		debug_status = AS5600_lastError();
 80009b8:	f006 f8a8 	bl	8006b0c <AS5600_lastError>
 80009bc:	4603      	mov	r3, r0
 80009be:	4a06      	ldr	r2, [pc, #24]	@ (80009d8 <main+0x80>)
 80009c0:	6013      	str	r3, [r2, #0]
		Rad = AS5600_readAngle(&as5600);
 80009c2:	bf00      	nop
 80009c4:	e7e8      	b.n	8000998 <main+0x40>
 80009c6:	bf00      	nop
 80009c8:	20000000 	.word	0x20000000
 80009cc:	00000000 	.word	0x00000000
 80009d0:	200001c8 	.word	0x200001c8
 80009d4:	200001cc 	.word	0x200001cc
 80009d8:	200001c4 	.word	0x200001c4

080009dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b094      	sub	sp, #80	@ 0x50
 80009e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009e2:	f107 0318 	add.w	r3, r7, #24
 80009e6:	2238      	movs	r2, #56	@ 0x38
 80009e8:	2100      	movs	r1, #0
 80009ea:	4618      	mov	r0, r3
 80009ec:	f006 f8a0 	bl	8006b30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009f0:	1d3b      	adds	r3, r7, #4
 80009f2:	2200      	movs	r2, #0
 80009f4:	601a      	str	r2, [r3, #0]
 80009f6:	605a      	str	r2, [r3, #4]
 80009f8:	609a      	str	r2, [r3, #8]
 80009fa:	60da      	str	r2, [r3, #12]
 80009fc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80009fe:	2000      	movs	r0, #0
 8000a00:	f003 fa98 	bl	8003f34 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a04:	2302      	movs	r3, #2
 8000a06:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a08:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000a0c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a0e:	2340      	movs	r3, #64	@ 0x40
 8000a10:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a12:	2302      	movs	r3, #2
 8000a14:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a16:	2302      	movs	r3, #2
 8000a18:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000a1a:	2304      	movs	r3, #4
 8000a1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000a1e:	2355      	movs	r3, #85	@ 0x55
 8000a20:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a22:	2302      	movs	r3, #2
 8000a24:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000a26:	2302      	movs	r3, #2
 8000a28:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000a2a:	2302      	movs	r3, #2
 8000a2c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a2e:	f107 0318 	add.w	r3, r7, #24
 8000a32:	4618      	mov	r0, r3
 8000a34:	f003 fb32 	bl	800409c <HAL_RCC_OscConfig>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d001      	beq.n	8000a42 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000a3e:	f000 f82f 	bl	8000aa0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a42:	230f      	movs	r3, #15
 8000a44:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a46:	2303      	movs	r3, #3
 8000a48:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a52:	2300      	movs	r3, #0
 8000a54:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000a56:	1d3b      	adds	r3, r7, #4
 8000a58:	2104      	movs	r1, #4
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	f003 fe30 	bl	80046c0 <HAL_RCC_ClockConfig>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d001      	beq.n	8000a6a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000a66:	f000 f81b 	bl	8000aa0 <Error_Handler>
  }
}
 8000a6a:	bf00      	nop
 8000a6c:	3750      	adds	r7, #80	@ 0x50
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}
	...

08000a74 <HAL_I2C_MemRxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8000a74:	b480      	push	{r7}
 8000a76:	b083      	sub	sp, #12
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
	if (hi2c->Instance == as5600.hi2cx->Instance) as5600.flag = HAL_OK;
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	681a      	ldr	r2, [r3, #0]
 8000a80:	4b06      	ldr	r3, [pc, #24]	@ (8000a9c <HAL_I2C_MemRxCpltCallback+0x28>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	429a      	cmp	r2, r3
 8000a88:	d102      	bne.n	8000a90 <HAL_I2C_MemRxCpltCallback+0x1c>
 8000a8a:	4b04      	ldr	r3, [pc, #16]	@ (8000a9c <HAL_I2C_MemRxCpltCallback+0x28>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	719a      	strb	r2, [r3, #6]
}
 8000a90:	bf00      	nop
 8000a92:	370c      	adds	r7, #12
 8000a94:	46bd      	mov	sp, r7
 8000a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9a:	4770      	bx	lr
 8000a9c:	20000000 	.word	0x20000000

08000aa0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000aa4:	b672      	cpsid	i
}
 8000aa6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000aa8:	bf00      	nop
 8000aaa:	e7fd      	b.n	8000aa8 <Error_Handler+0x8>

08000aac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b082      	sub	sp, #8
 8000ab0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ab2:	4b0f      	ldr	r3, [pc, #60]	@ (8000af0 <HAL_MspInit+0x44>)
 8000ab4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ab6:	4a0e      	ldr	r2, [pc, #56]	@ (8000af0 <HAL_MspInit+0x44>)
 8000ab8:	f043 0301 	orr.w	r3, r3, #1
 8000abc:	6613      	str	r3, [r2, #96]	@ 0x60
 8000abe:	4b0c      	ldr	r3, [pc, #48]	@ (8000af0 <HAL_MspInit+0x44>)
 8000ac0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ac2:	f003 0301 	and.w	r3, r3, #1
 8000ac6:	607b      	str	r3, [r7, #4]
 8000ac8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aca:	4b09      	ldr	r3, [pc, #36]	@ (8000af0 <HAL_MspInit+0x44>)
 8000acc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ace:	4a08      	ldr	r2, [pc, #32]	@ (8000af0 <HAL_MspInit+0x44>)
 8000ad0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ad4:	6593      	str	r3, [r2, #88]	@ 0x58
 8000ad6:	4b06      	ldr	r3, [pc, #24]	@ (8000af0 <HAL_MspInit+0x44>)
 8000ad8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ada:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ade:	603b      	str	r3, [r7, #0]
 8000ae0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000ae2:	f003 facb 	bl	800407c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ae6:	bf00      	nop
 8000ae8:	3708      	adds	r7, #8
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	40021000 	.word	0x40021000

08000af4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000af8:	bf00      	nop
 8000afa:	e7fd      	b.n	8000af8 <NMI_Handler+0x4>

08000afc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b00:	bf00      	nop
 8000b02:	e7fd      	b.n	8000b00 <HardFault_Handler+0x4>

08000b04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b08:	bf00      	nop
 8000b0a:	e7fd      	b.n	8000b08 <MemManage_Handler+0x4>

08000b0c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b10:	bf00      	nop
 8000b12:	e7fd      	b.n	8000b10 <BusFault_Handler+0x4>

08000b14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b18:	bf00      	nop
 8000b1a:	e7fd      	b.n	8000b18 <UsageFault_Handler+0x4>

08000b1c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b20:	bf00      	nop
 8000b22:	46bd      	mov	sp, r7
 8000b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b28:	4770      	bx	lr

08000b2a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b2a:	b480      	push	{r7}
 8000b2c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b2e:	bf00      	nop
 8000b30:	46bd      	mov	sp, r7
 8000b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b36:	4770      	bx	lr

08000b38 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b3c:	bf00      	nop
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b44:	4770      	bx	lr

08000b46 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b46:	b580      	push	{r7, lr}
 8000b48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b4a:	f000 fc31 	bl	80013b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b4e:	bf00      	nop
 8000b50:	bd80      	pop	{r7, pc}
	...

08000b54 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8000b58:	4802      	ldr	r0, [pc, #8]	@ (8000b64 <DMA1_Channel1_IRQHandler+0x10>)
 8000b5a:	f000 fee1 	bl	8001920 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000b5e:	bf00      	nop
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	20000104 	.word	0x20000104

08000b68 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8000b6c:	4802      	ldr	r0, [pc, #8]	@ (8000b78 <DMA1_Channel2_IRQHandler+0x10>)
 8000b6e:	f000 fed7 	bl	8001920 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8000b72:	bf00      	nop
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	20000164 	.word	0x20000164

08000b7c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_EV_IRQHandler(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000b80:	4802      	ldr	r0, [pc, #8]	@ (8000b8c <I2C1_EV_IRQHandler+0x10>)
 8000b82:	f001 fc61 	bl	8002448 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000b86:	bf00      	nop
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	2000005c 	.word	0x2000005c

08000b90 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000b94:	4b06      	ldr	r3, [pc, #24]	@ (8000bb0 <SystemInit+0x20>)
 8000b96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b9a:	4a05      	ldr	r2, [pc, #20]	@ (8000bb0 <SystemInit+0x20>)
 8000b9c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ba0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ba4:	bf00      	nop
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop
 8000bb0:	e000ed00 	.word	0xe000ed00

08000bb4 <MX_TIM3_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim8;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b08c      	sub	sp, #48	@ 0x30
 8000bb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000bba:	f107 030c 	add.w	r3, r7, #12
 8000bbe:	2224      	movs	r2, #36	@ 0x24
 8000bc0:	2100      	movs	r1, #0
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f005 ffb4 	bl	8006b30 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bc8:	463b      	mov	r3, r7
 8000bca:	2200      	movs	r2, #0
 8000bcc:	601a      	str	r2, [r3, #0]
 8000bce:	605a      	str	r2, [r3, #4]
 8000bd0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000bd2:	4b21      	ldr	r3, [pc, #132]	@ (8000c58 <MX_TIM3_Init+0xa4>)
 8000bd4:	4a21      	ldr	r2, [pc, #132]	@ (8000c5c <MX_TIM3_Init+0xa8>)
 8000bd6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000bd8:	4b1f      	ldr	r3, [pc, #124]	@ (8000c58 <MX_TIM3_Init+0xa4>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bde:	4b1e      	ldr	r3, [pc, #120]	@ (8000c58 <MX_TIM3_Init+0xa4>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000be4:	4b1c      	ldr	r3, [pc, #112]	@ (8000c58 <MX_TIM3_Init+0xa4>)
 8000be6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000bea:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bec:	4b1a      	ldr	r3, [pc, #104]	@ (8000c58 <MX_TIM3_Init+0xa4>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bf2:	4b19      	ldr	r3, [pc, #100]	@ (8000c58 <MX_TIM3_Init+0xa4>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000bf8:	2301      	movs	r3, #1
 8000bfa:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000c00:	2301      	movs	r3, #1
 8000c02:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000c04:	2300      	movs	r3, #0
 8000c06:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000c10:	2301      	movs	r3, #1
 8000c12:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000c14:	2300      	movs	r3, #0
 8000c16:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000c1c:	f107 030c 	add.w	r3, r7, #12
 8000c20:	4619      	mov	r1, r3
 8000c22:	480d      	ldr	r0, [pc, #52]	@ (8000c58 <MX_TIM3_Init+0xa4>)
 8000c24:	f004 f9af 	bl	8004f86 <HAL_TIM_Encoder_Init>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d001      	beq.n	8000c32 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8000c2e:	f7ff ff37 	bl	8000aa0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c32:	2300      	movs	r3, #0
 8000c34:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c36:	2300      	movs	r3, #0
 8000c38:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000c3a:	463b      	mov	r3, r7
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	4806      	ldr	r0, [pc, #24]	@ (8000c58 <MX_TIM3_Init+0xa4>)
 8000c40:	f004 feee 	bl	8005a20 <HAL_TIMEx_MasterConfigSynchronization>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d001      	beq.n	8000c4e <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8000c4a:	f7ff ff29 	bl	8000aa0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000c4e:	bf00      	nop
 8000c50:	3730      	adds	r7, #48	@ 0x30
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	200001d0 	.word	0x200001d0
 8000c5c:	40000400 	.word	0x40000400

08000c60 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b08c      	sub	sp, #48	@ 0x30
 8000c64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000c66:	f107 030c 	add.w	r3, r7, #12
 8000c6a:	2224      	movs	r2, #36	@ 0x24
 8000c6c:	2100      	movs	r1, #0
 8000c6e:	4618      	mov	r0, r3
 8000c70:	f005 ff5e 	bl	8006b30 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c74:	463b      	mov	r3, r7
 8000c76:	2200      	movs	r2, #0
 8000c78:	601a      	str	r2, [r3, #0]
 8000c7a:	605a      	str	r2, [r3, #4]
 8000c7c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000c7e:	4b21      	ldr	r3, [pc, #132]	@ (8000d04 <MX_TIM4_Init+0xa4>)
 8000c80:	4a21      	ldr	r2, [pc, #132]	@ (8000d08 <MX_TIM4_Init+0xa8>)
 8000c82:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000c84:	4b1f      	ldr	r3, [pc, #124]	@ (8000d04 <MX_TIM4_Init+0xa4>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c8a:	4b1e      	ldr	r3, [pc, #120]	@ (8000d04 <MX_TIM4_Init+0xa4>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000c90:	4b1c      	ldr	r3, [pc, #112]	@ (8000d04 <MX_TIM4_Init+0xa4>)
 8000c92:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000c96:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c98:	4b1a      	ldr	r3, [pc, #104]	@ (8000d04 <MX_TIM4_Init+0xa4>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c9e:	4b19      	ldr	r3, [pc, #100]	@ (8000d04 <MX_TIM4_Init+0xa4>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000ca4:	2301      	movs	r3, #1
 8000ca6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000cac:	2301      	movs	r3, #1
 8000cae:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000cbc:	2301      	movs	r3, #1
 8000cbe:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8000cc8:	f107 030c 	add.w	r3, r7, #12
 8000ccc:	4619      	mov	r1, r3
 8000cce:	480d      	ldr	r0, [pc, #52]	@ (8000d04 <MX_TIM4_Init+0xa4>)
 8000cd0:	f004 f959 	bl	8004f86 <HAL_TIM_Encoder_Init>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d001      	beq.n	8000cde <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8000cda:	f7ff fee1 	bl	8000aa0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000ce6:	463b      	mov	r3, r7
 8000ce8:	4619      	mov	r1, r3
 8000cea:	4806      	ldr	r0, [pc, #24]	@ (8000d04 <MX_TIM4_Init+0xa4>)
 8000cec:	f004 fe98 	bl	8005a20 <HAL_TIMEx_MasterConfigSynchronization>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d001      	beq.n	8000cfa <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8000cf6:	f7ff fed3 	bl	8000aa0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000cfa:	bf00      	nop
 8000cfc:	3730      	adds	r7, #48	@ 0x30
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	2000021c 	.word	0x2000021c
 8000d08:	40000800 	.word	0x40000800

08000d0c <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b098      	sub	sp, #96	@ 0x60
 8000d10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d12:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000d16:	2200      	movs	r2, #0
 8000d18:	601a      	str	r2, [r3, #0]
 8000d1a:	605a      	str	r2, [r3, #4]
 8000d1c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d1e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000d22:	2200      	movs	r2, #0
 8000d24:	601a      	str	r2, [r3, #0]
 8000d26:	605a      	str	r2, [r3, #4]
 8000d28:	609a      	str	r2, [r3, #8]
 8000d2a:	60da      	str	r2, [r3, #12]
 8000d2c:	611a      	str	r2, [r3, #16]
 8000d2e:	615a      	str	r2, [r3, #20]
 8000d30:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000d32:	1d3b      	adds	r3, r7, #4
 8000d34:	2234      	movs	r2, #52	@ 0x34
 8000d36:	2100      	movs	r1, #0
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f005 fef9 	bl	8006b30 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000d3e:	4b41      	ldr	r3, [pc, #260]	@ (8000e44 <MX_TIM8_Init+0x138>)
 8000d40:	4a41      	ldr	r2, [pc, #260]	@ (8000e48 <MX_TIM8_Init+0x13c>)
 8000d42:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8000d44:	4b3f      	ldr	r3, [pc, #252]	@ (8000e44 <MX_TIM8_Init+0x138>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d4a:	4b3e      	ldr	r3, [pc, #248]	@ (8000e44 <MX_TIM8_Init+0x138>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8000d50:	4b3c      	ldr	r3, [pc, #240]	@ (8000e44 <MX_TIM8_Init+0x138>)
 8000d52:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000d56:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d58:	4b3a      	ldr	r3, [pc, #232]	@ (8000e44 <MX_TIM8_Init+0x138>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000d5e:	4b39      	ldr	r3, [pc, #228]	@ (8000e44 <MX_TIM8_Init+0x138>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d64:	4b37      	ldr	r3, [pc, #220]	@ (8000e44 <MX_TIM8_Init+0x138>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8000d6a:	4836      	ldr	r0, [pc, #216]	@ (8000e44 <MX_TIM8_Init+0x138>)
 8000d6c:	f004 f8b4 	bl	8004ed8 <HAL_TIM_PWM_Init>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d001      	beq.n	8000d7a <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 8000d76:	f7ff fe93 	bl	8000aa0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d82:	2300      	movs	r3, #0
 8000d84:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000d86:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	482d      	ldr	r0, [pc, #180]	@ (8000e44 <MX_TIM8_Init+0x138>)
 8000d8e:	f004 fe47 	bl	8005a20 <HAL_TIMEx_MasterConfigSynchronization>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d001      	beq.n	8000d9c <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 8000d98:	f7ff fe82 	bl	8000aa0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d9c:	2360      	movs	r3, #96	@ 0x60
 8000d9e:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8000da0:	2300      	movs	r3, #0
 8000da2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000da4:	2300      	movs	r3, #0
 8000da6:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000da8:	2300      	movs	r3, #0
 8000daa:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000dac:	2300      	movs	r3, #0
 8000dae:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000db0:	2300      	movs	r3, #0
 8000db2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000db4:	2300      	movs	r3, #0
 8000db6:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000db8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	4619      	mov	r1, r3
 8000dc0:	4820      	ldr	r0, [pc, #128]	@ (8000e44 <MX_TIM8_Init+0x138>)
 8000dc2:	f004 f987 	bl	80050d4 <HAL_TIM_PWM_ConfigChannel>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d001      	beq.n	8000dd0 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8000dcc:	f7ff fe68 	bl	8000aa0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000dd0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000dd4:	2204      	movs	r2, #4
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	481a      	ldr	r0, [pc, #104]	@ (8000e44 <MX_TIM8_Init+0x138>)
 8000dda:	f004 f97b 	bl	80050d4 <HAL_TIM_PWM_ConfigChannel>
 8000dde:	4603      	mov	r3, r0
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d001      	beq.n	8000de8 <MX_TIM8_Init+0xdc>
  {
    Error_Handler();
 8000de4:	f7ff fe5c 	bl	8000aa0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000de8:	2300      	movs	r3, #0
 8000dea:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000dec:	2300      	movs	r3, #0
 8000dee:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000df0:	2300      	movs	r3, #0
 8000df2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000df4:	2300      	movs	r3, #0
 8000df6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000dfc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e00:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000e02:	2300      	movs	r3, #0
 8000e04:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000e06:	2300      	movs	r3, #0
 8000e08:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000e0e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000e12:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000e14:	2300      	movs	r3, #0
 8000e16:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8000e20:	1d3b      	adds	r3, r7, #4
 8000e22:	4619      	mov	r1, r3
 8000e24:	4807      	ldr	r0, [pc, #28]	@ (8000e44 <MX_TIM8_Init+0x138>)
 8000e26:	f004 fe7d 	bl	8005b24 <HAL_TIMEx_ConfigBreakDeadTime>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d001      	beq.n	8000e34 <MX_TIM8_Init+0x128>
  {
    Error_Handler();
 8000e30:	f7ff fe36 	bl	8000aa0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8000e34:	4803      	ldr	r0, [pc, #12]	@ (8000e44 <MX_TIM8_Init+0x138>)
 8000e36:	f000 f8bb 	bl	8000fb0 <HAL_TIM_MspPostInit>

}
 8000e3a:	bf00      	nop
 8000e3c:	3760      	adds	r7, #96	@ 0x60
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	20000268 	.word	0x20000268
 8000e48:	40013400 	.word	0x40013400

08000e4c <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b08c      	sub	sp, #48	@ 0x30
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e54:	f107 031c 	add.w	r3, r7, #28
 8000e58:	2200      	movs	r2, #0
 8000e5a:	601a      	str	r2, [r3, #0]
 8000e5c:	605a      	str	r2, [r3, #4]
 8000e5e:	609a      	str	r2, [r3, #8]
 8000e60:	60da      	str	r2, [r3, #12]
 8000e62:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	4a3d      	ldr	r2, [pc, #244]	@ (8000f60 <HAL_TIM_Encoder_MspInit+0x114>)
 8000e6a:	4293      	cmp	r3, r2
 8000e6c:	d145      	bne.n	8000efa <HAL_TIM_Encoder_MspInit+0xae>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000e6e:	4b3d      	ldr	r3, [pc, #244]	@ (8000f64 <HAL_TIM_Encoder_MspInit+0x118>)
 8000e70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e72:	4a3c      	ldr	r2, [pc, #240]	@ (8000f64 <HAL_TIM_Encoder_MspInit+0x118>)
 8000e74:	f043 0302 	orr.w	r3, r3, #2
 8000e78:	6593      	str	r3, [r2, #88]	@ 0x58
 8000e7a:	4b3a      	ldr	r3, [pc, #232]	@ (8000f64 <HAL_TIM_Encoder_MspInit+0x118>)
 8000e7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e7e:	f003 0302 	and.w	r3, r3, #2
 8000e82:	61bb      	str	r3, [r7, #24]
 8000e84:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e86:	4b37      	ldr	r3, [pc, #220]	@ (8000f64 <HAL_TIM_Encoder_MspInit+0x118>)
 8000e88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e8a:	4a36      	ldr	r2, [pc, #216]	@ (8000f64 <HAL_TIM_Encoder_MspInit+0x118>)
 8000e8c:	f043 0301 	orr.w	r3, r3, #1
 8000e90:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e92:	4b34      	ldr	r3, [pc, #208]	@ (8000f64 <HAL_TIM_Encoder_MspInit+0x118>)
 8000e94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e96:	f003 0301 	and.w	r3, r3, #1
 8000e9a:	617b      	str	r3, [r7, #20]
 8000e9c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e9e:	4b31      	ldr	r3, [pc, #196]	@ (8000f64 <HAL_TIM_Encoder_MspInit+0x118>)
 8000ea0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ea2:	4a30      	ldr	r2, [pc, #192]	@ (8000f64 <HAL_TIM_Encoder_MspInit+0x118>)
 8000ea4:	f043 0302 	orr.w	r3, r3, #2
 8000ea8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000eaa:	4b2e      	ldr	r3, [pc, #184]	@ (8000f64 <HAL_TIM_Encoder_MspInit+0x118>)
 8000eac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eae:	f003 0302 	and.w	r3, r3, #2
 8000eb2:	613b      	str	r3, [r7, #16]
 8000eb4:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PA4     ------> TIM3_CH2
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000eb6:	2310      	movs	r3, #16
 8000eb8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eba:	2302      	movs	r3, #2
 8000ebc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000ec6:	2302      	movs	r3, #2
 8000ec8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eca:	f107 031c 	add.w	r3, r7, #28
 8000ece:	4619      	mov	r1, r3
 8000ed0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ed4:	f000 fe82 	bl	8001bdc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000ed8:	2310      	movs	r3, #16
 8000eda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000edc:	2302      	movs	r3, #2
 8000ede:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000ee8:	2302      	movs	r3, #2
 8000eea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eec:	f107 031c 	add.w	r3, r7, #28
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	481d      	ldr	r0, [pc, #116]	@ (8000f68 <HAL_TIM_Encoder_MspInit+0x11c>)
 8000ef4:	f000 fe72 	bl	8001bdc <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8000ef8:	e02e      	b.n	8000f58 <HAL_TIM_Encoder_MspInit+0x10c>
  else if(tim_encoderHandle->Instance==TIM4)
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	4a1b      	ldr	r2, [pc, #108]	@ (8000f6c <HAL_TIM_Encoder_MspInit+0x120>)
 8000f00:	4293      	cmp	r3, r2
 8000f02:	d129      	bne.n	8000f58 <HAL_TIM_Encoder_MspInit+0x10c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000f04:	4b17      	ldr	r3, [pc, #92]	@ (8000f64 <HAL_TIM_Encoder_MspInit+0x118>)
 8000f06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f08:	4a16      	ldr	r2, [pc, #88]	@ (8000f64 <HAL_TIM_Encoder_MspInit+0x118>)
 8000f0a:	f043 0304 	orr.w	r3, r3, #4
 8000f0e:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f10:	4b14      	ldr	r3, [pc, #80]	@ (8000f64 <HAL_TIM_Encoder_MspInit+0x118>)
 8000f12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f14:	f003 0304 	and.w	r3, r3, #4
 8000f18:	60fb      	str	r3, [r7, #12]
 8000f1a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f1c:	4b11      	ldr	r3, [pc, #68]	@ (8000f64 <HAL_TIM_Encoder_MspInit+0x118>)
 8000f1e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f20:	4a10      	ldr	r2, [pc, #64]	@ (8000f64 <HAL_TIM_Encoder_MspInit+0x118>)
 8000f22:	f043 0301 	orr.w	r3, r3, #1
 8000f26:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f28:	4b0e      	ldr	r3, [pc, #56]	@ (8000f64 <HAL_TIM_Encoder_MspInit+0x118>)
 8000f2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f2c:	f003 0301 	and.w	r3, r3, #1
 8000f30:	60bb      	str	r3, [r7, #8]
 8000f32:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000f34:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000f38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f3a:	2302      	movs	r3, #2
 8000f3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f42:	2300      	movs	r3, #0
 8000f44:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8000f46:	230a      	movs	r3, #10
 8000f48:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f4a:	f107 031c 	add.w	r3, r7, #28
 8000f4e:	4619      	mov	r1, r3
 8000f50:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f54:	f000 fe42 	bl	8001bdc <HAL_GPIO_Init>
}
 8000f58:	bf00      	nop
 8000f5a:	3730      	adds	r7, #48	@ 0x30
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	40000400 	.word	0x40000400
 8000f64:	40021000 	.word	0x40021000
 8000f68:	48000400 	.word	0x48000400
 8000f6c:	40000800 	.word	0x40000800

08000f70 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b085      	sub	sp, #20
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM8)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4a0a      	ldr	r2, [pc, #40]	@ (8000fa8 <HAL_TIM_PWM_MspInit+0x38>)
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	d10b      	bne.n	8000f9a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* TIM8 clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8000f82:	4b0a      	ldr	r3, [pc, #40]	@ (8000fac <HAL_TIM_PWM_MspInit+0x3c>)
 8000f84:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f86:	4a09      	ldr	r2, [pc, #36]	@ (8000fac <HAL_TIM_PWM_MspInit+0x3c>)
 8000f88:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000f8c:	6613      	str	r3, [r2, #96]	@ 0x60
 8000f8e:	4b07      	ldr	r3, [pc, #28]	@ (8000fac <HAL_TIM_PWM_MspInit+0x3c>)
 8000f90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f92:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000f96:	60fb      	str	r3, [r7, #12]
 8000f98:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8000f9a:	bf00      	nop
 8000f9c:	3714      	adds	r7, #20
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop
 8000fa8:	40013400 	.word	0x40013400
 8000fac:	40021000 	.word	0x40021000

08000fb0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b08a      	sub	sp, #40	@ 0x28
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb8:	f107 0314 	add.w	r3, r7, #20
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	601a      	str	r2, [r3, #0]
 8000fc0:	605a      	str	r2, [r3, #4]
 8000fc2:	609a      	str	r2, [r3, #8]
 8000fc4:	60da      	str	r2, [r3, #12]
 8000fc6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM8)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	4a1f      	ldr	r2, [pc, #124]	@ (800104c <HAL_TIM_MspPostInit+0x9c>)
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d138      	bne.n	8001044 <HAL_TIM_MspPostInit+0x94>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fd2:	4b1f      	ldr	r3, [pc, #124]	@ (8001050 <HAL_TIM_MspPostInit+0xa0>)
 8000fd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fd6:	4a1e      	ldr	r2, [pc, #120]	@ (8001050 <HAL_TIM_MspPostInit+0xa0>)
 8000fd8:	f043 0301 	orr.w	r3, r3, #1
 8000fdc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fde:	4b1c      	ldr	r3, [pc, #112]	@ (8001050 <HAL_TIM_MspPostInit+0xa0>)
 8000fe0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fe2:	f003 0301 	and.w	r3, r3, #1
 8000fe6:	613b      	str	r3, [r7, #16]
 8000fe8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fea:	4b19      	ldr	r3, [pc, #100]	@ (8001050 <HAL_TIM_MspPostInit+0xa0>)
 8000fec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fee:	4a18      	ldr	r2, [pc, #96]	@ (8001050 <HAL_TIM_MspPostInit+0xa0>)
 8000ff0:	f043 0302 	orr.w	r3, r3, #2
 8000ff4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ff6:	4b16      	ldr	r3, [pc, #88]	@ (8001050 <HAL_TIM_MspPostInit+0xa0>)
 8000ff8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ffa:	f003 0302 	and.w	r3, r3, #2
 8000ffe:	60fb      	str	r3, [r7, #12]
 8001000:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PA7     ------> TIM8_CH1N
    PB0     ------> TIM8_CH2N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001002:	2380      	movs	r3, #128	@ 0x80
 8001004:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001006:	2302      	movs	r3, #2
 8001008:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100a:	2300      	movs	r3, #0
 800100c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800100e:	2300      	movs	r3, #0
 8001010:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8001012:	2304      	movs	r3, #4
 8001014:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001016:	f107 0314 	add.w	r3, r7, #20
 800101a:	4619      	mov	r1, r3
 800101c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001020:	f000 fddc 	bl	8001bdc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001024:	2301      	movs	r3, #1
 8001026:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001028:	2302      	movs	r3, #2
 800102a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102c:	2300      	movs	r3, #0
 800102e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001030:	2300      	movs	r3, #0
 8001032:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8001034:	2304      	movs	r3, #4
 8001036:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001038:	f107 0314 	add.w	r3, r7, #20
 800103c:	4619      	mov	r1, r3
 800103e:	4805      	ldr	r0, [pc, #20]	@ (8001054 <HAL_TIM_MspPostInit+0xa4>)
 8001040:	f000 fdcc 	bl	8001bdc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8001044:	bf00      	nop
 8001046:	3728      	adds	r7, #40	@ 0x28
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	40013400 	.word	0x40013400
 8001050:	40021000 	.word	0x40021000
 8001054:	48000400 	.word	0x48000400

08001058 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800105c:	4b22      	ldr	r3, [pc, #136]	@ (80010e8 <MX_USART1_UART_Init+0x90>)
 800105e:	4a23      	ldr	r2, [pc, #140]	@ (80010ec <MX_USART1_UART_Init+0x94>)
 8001060:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001062:	4b21      	ldr	r3, [pc, #132]	@ (80010e8 <MX_USART1_UART_Init+0x90>)
 8001064:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001068:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800106a:	4b1f      	ldr	r3, [pc, #124]	@ (80010e8 <MX_USART1_UART_Init+0x90>)
 800106c:	2200      	movs	r2, #0
 800106e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001070:	4b1d      	ldr	r3, [pc, #116]	@ (80010e8 <MX_USART1_UART_Init+0x90>)
 8001072:	2200      	movs	r2, #0
 8001074:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001076:	4b1c      	ldr	r3, [pc, #112]	@ (80010e8 <MX_USART1_UART_Init+0x90>)
 8001078:	2200      	movs	r2, #0
 800107a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800107c:	4b1a      	ldr	r3, [pc, #104]	@ (80010e8 <MX_USART1_UART_Init+0x90>)
 800107e:	220c      	movs	r2, #12
 8001080:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001082:	4b19      	ldr	r3, [pc, #100]	@ (80010e8 <MX_USART1_UART_Init+0x90>)
 8001084:	2200      	movs	r2, #0
 8001086:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001088:	4b17      	ldr	r3, [pc, #92]	@ (80010e8 <MX_USART1_UART_Init+0x90>)
 800108a:	2200      	movs	r2, #0
 800108c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800108e:	4b16      	ldr	r3, [pc, #88]	@ (80010e8 <MX_USART1_UART_Init+0x90>)
 8001090:	2200      	movs	r2, #0
 8001092:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001094:	4b14      	ldr	r3, [pc, #80]	@ (80010e8 <MX_USART1_UART_Init+0x90>)
 8001096:	2200      	movs	r2, #0
 8001098:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800109a:	4b13      	ldr	r3, [pc, #76]	@ (80010e8 <MX_USART1_UART_Init+0x90>)
 800109c:	2200      	movs	r2, #0
 800109e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80010a0:	4811      	ldr	r0, [pc, #68]	@ (80010e8 <MX_USART1_UART_Init+0x90>)
 80010a2:	f004 fdcb 	bl	8005c3c <HAL_UART_Init>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d001      	beq.n	80010b0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80010ac:	f7ff fcf8 	bl	8000aa0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010b0:	2100      	movs	r1, #0
 80010b2:	480d      	ldr	r0, [pc, #52]	@ (80010e8 <MX_USART1_UART_Init+0x90>)
 80010b4:	f005 fb36 	bl	8006724 <HAL_UARTEx_SetTxFifoThreshold>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80010be:	f7ff fcef 	bl	8000aa0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010c2:	2100      	movs	r1, #0
 80010c4:	4808      	ldr	r0, [pc, #32]	@ (80010e8 <MX_USART1_UART_Init+0x90>)
 80010c6:	f005 fb6b 	bl	80067a0 <HAL_UARTEx_SetRxFifoThreshold>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d001      	beq.n	80010d4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80010d0:	f7ff fce6 	bl	8000aa0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80010d4:	4804      	ldr	r0, [pc, #16]	@ (80010e8 <MX_USART1_UART_Init+0x90>)
 80010d6:	f005 faec 	bl	80066b2 <HAL_UARTEx_DisableFifoMode>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d001      	beq.n	80010e4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80010e0:	f7ff fcde 	bl	8000aa0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80010e4:	bf00      	nop
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	200002b4 	.word	0x200002b4
 80010ec:	40013800 	.word	0x40013800

080010f0 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80010f4:	4b22      	ldr	r3, [pc, #136]	@ (8001180 <MX_USART2_UART_Init+0x90>)
 80010f6:	4a23      	ldr	r2, [pc, #140]	@ (8001184 <MX_USART2_UART_Init+0x94>)
 80010f8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80010fa:	4b21      	ldr	r3, [pc, #132]	@ (8001180 <MX_USART2_UART_Init+0x90>)
 80010fc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001100:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001102:	4b1f      	ldr	r3, [pc, #124]	@ (8001180 <MX_USART2_UART_Init+0x90>)
 8001104:	2200      	movs	r2, #0
 8001106:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001108:	4b1d      	ldr	r3, [pc, #116]	@ (8001180 <MX_USART2_UART_Init+0x90>)
 800110a:	2200      	movs	r2, #0
 800110c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800110e:	4b1c      	ldr	r3, [pc, #112]	@ (8001180 <MX_USART2_UART_Init+0x90>)
 8001110:	2200      	movs	r2, #0
 8001112:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001114:	4b1a      	ldr	r3, [pc, #104]	@ (8001180 <MX_USART2_UART_Init+0x90>)
 8001116:	220c      	movs	r2, #12
 8001118:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800111a:	4b19      	ldr	r3, [pc, #100]	@ (8001180 <MX_USART2_UART_Init+0x90>)
 800111c:	2200      	movs	r2, #0
 800111e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001120:	4b17      	ldr	r3, [pc, #92]	@ (8001180 <MX_USART2_UART_Init+0x90>)
 8001122:	2200      	movs	r2, #0
 8001124:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001126:	4b16      	ldr	r3, [pc, #88]	@ (8001180 <MX_USART2_UART_Init+0x90>)
 8001128:	2200      	movs	r2, #0
 800112a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800112c:	4b14      	ldr	r3, [pc, #80]	@ (8001180 <MX_USART2_UART_Init+0x90>)
 800112e:	2200      	movs	r2, #0
 8001130:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001132:	4b13      	ldr	r3, [pc, #76]	@ (8001180 <MX_USART2_UART_Init+0x90>)
 8001134:	2200      	movs	r2, #0
 8001136:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001138:	4811      	ldr	r0, [pc, #68]	@ (8001180 <MX_USART2_UART_Init+0x90>)
 800113a:	f004 fd7f 	bl	8005c3c <HAL_UART_Init>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d001      	beq.n	8001148 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001144:	f7ff fcac 	bl	8000aa0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001148:	2100      	movs	r1, #0
 800114a:	480d      	ldr	r0, [pc, #52]	@ (8001180 <MX_USART2_UART_Init+0x90>)
 800114c:	f005 faea 	bl	8006724 <HAL_UARTEx_SetTxFifoThreshold>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d001      	beq.n	800115a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001156:	f7ff fca3 	bl	8000aa0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800115a:	2100      	movs	r1, #0
 800115c:	4808      	ldr	r0, [pc, #32]	@ (8001180 <MX_USART2_UART_Init+0x90>)
 800115e:	f005 fb1f 	bl	80067a0 <HAL_UARTEx_SetRxFifoThreshold>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d001      	beq.n	800116c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001168:	f7ff fc9a 	bl	8000aa0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800116c:	4804      	ldr	r0, [pc, #16]	@ (8001180 <MX_USART2_UART_Init+0x90>)
 800116e:	f005 faa0 	bl	80066b2 <HAL_UARTEx_DisableFifoMode>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d001      	beq.n	800117c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001178:	f7ff fc92 	bl	8000aa0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800117c:	bf00      	nop
 800117e:	bd80      	pop	{r7, pc}
 8001180:	20000348 	.word	0x20000348
 8001184:	40004400 	.word	0x40004400

08001188 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b09c      	sub	sp, #112	@ 0x70
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001190:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001194:	2200      	movs	r2, #0
 8001196:	601a      	str	r2, [r3, #0]
 8001198:	605a      	str	r2, [r3, #4]
 800119a:	609a      	str	r2, [r3, #8]
 800119c:	60da      	str	r2, [r3, #12]
 800119e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011a0:	f107 0318 	add.w	r3, r7, #24
 80011a4:	2244      	movs	r2, #68	@ 0x44
 80011a6:	2100      	movs	r1, #0
 80011a8:	4618      	mov	r0, r3
 80011aa:	f005 fcc1 	bl	8006b30 <memset>
  if(uartHandle->Instance==USART1)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	4a3e      	ldr	r2, [pc, #248]	@ (80012ac <HAL_UART_MspInit+0x124>)
 80011b4:	4293      	cmp	r3, r2
 80011b6:	d138      	bne.n	800122a <HAL_UART_MspInit+0xa2>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80011b8:	2301      	movs	r3, #1
 80011ba:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80011bc:	2300      	movs	r3, #0
 80011be:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011c0:	f107 0318 	add.w	r3, r7, #24
 80011c4:	4618      	mov	r0, r3
 80011c6:	f003 fc97 	bl	8004af8 <HAL_RCCEx_PeriphCLKConfig>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d001      	beq.n	80011d4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80011d0:	f7ff fc66 	bl	8000aa0 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80011d4:	4b36      	ldr	r3, [pc, #216]	@ (80012b0 <HAL_UART_MspInit+0x128>)
 80011d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80011d8:	4a35      	ldr	r2, [pc, #212]	@ (80012b0 <HAL_UART_MspInit+0x128>)
 80011da:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011de:	6613      	str	r3, [r2, #96]	@ 0x60
 80011e0:	4b33      	ldr	r3, [pc, #204]	@ (80012b0 <HAL_UART_MspInit+0x128>)
 80011e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80011e4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011e8:	617b      	str	r3, [r7, #20]
 80011ea:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ec:	4b30      	ldr	r3, [pc, #192]	@ (80012b0 <HAL_UART_MspInit+0x128>)
 80011ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011f0:	4a2f      	ldr	r2, [pc, #188]	@ (80012b0 <HAL_UART_MspInit+0x128>)
 80011f2:	f043 0301 	orr.w	r3, r3, #1
 80011f6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011f8:	4b2d      	ldr	r3, [pc, #180]	@ (80012b0 <HAL_UART_MspInit+0x128>)
 80011fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011fc:	f003 0301 	and.w	r3, r3, #1
 8001200:	613b      	str	r3, [r7, #16]
 8001202:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001204:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001208:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800120a:	2302      	movs	r3, #2
 800120c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120e:	2300      	movs	r3, #0
 8001210:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001212:	2300      	movs	r3, #0
 8001214:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001216:	2307      	movs	r3, #7
 8001218:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800121a:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800121e:	4619      	mov	r1, r3
 8001220:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001224:	f000 fcda 	bl	8001bdc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001228:	e03b      	b.n	80012a2 <HAL_UART_MspInit+0x11a>
  else if(uartHandle->Instance==USART2)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	4a21      	ldr	r2, [pc, #132]	@ (80012b4 <HAL_UART_MspInit+0x12c>)
 8001230:	4293      	cmp	r3, r2
 8001232:	d136      	bne.n	80012a2 <HAL_UART_MspInit+0x11a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001234:	2302      	movs	r3, #2
 8001236:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001238:	2300      	movs	r3, #0
 800123a:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800123c:	f107 0318 	add.w	r3, r7, #24
 8001240:	4618      	mov	r0, r3
 8001242:	f003 fc59 	bl	8004af8 <HAL_RCCEx_PeriphCLKConfig>
 8001246:	4603      	mov	r3, r0
 8001248:	2b00      	cmp	r3, #0
 800124a:	d001      	beq.n	8001250 <HAL_UART_MspInit+0xc8>
      Error_Handler();
 800124c:	f7ff fc28 	bl	8000aa0 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001250:	4b17      	ldr	r3, [pc, #92]	@ (80012b0 <HAL_UART_MspInit+0x128>)
 8001252:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001254:	4a16      	ldr	r2, [pc, #88]	@ (80012b0 <HAL_UART_MspInit+0x128>)
 8001256:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800125a:	6593      	str	r3, [r2, #88]	@ 0x58
 800125c:	4b14      	ldr	r3, [pc, #80]	@ (80012b0 <HAL_UART_MspInit+0x128>)
 800125e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001260:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001264:	60fb      	str	r3, [r7, #12]
 8001266:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001268:	4b11      	ldr	r3, [pc, #68]	@ (80012b0 <HAL_UART_MspInit+0x128>)
 800126a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800126c:	4a10      	ldr	r2, [pc, #64]	@ (80012b0 <HAL_UART_MspInit+0x128>)
 800126e:	f043 0301 	orr.w	r3, r3, #1
 8001272:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001274:	4b0e      	ldr	r3, [pc, #56]	@ (80012b0 <HAL_UART_MspInit+0x128>)
 8001276:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001278:	f003 0301 	and.w	r3, r3, #1
 800127c:	60bb      	str	r3, [r7, #8]
 800127e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8001280:	230c      	movs	r3, #12
 8001282:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001284:	2302      	movs	r3, #2
 8001286:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001288:	2300      	movs	r3, #0
 800128a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800128c:	2300      	movs	r3, #0
 800128e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001290:	2307      	movs	r3, #7
 8001292:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001294:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001298:	4619      	mov	r1, r3
 800129a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800129e:	f000 fc9d 	bl	8001bdc <HAL_GPIO_Init>
}
 80012a2:	bf00      	nop
 80012a4:	3770      	adds	r7, #112	@ 0x70
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	40013800 	.word	0x40013800
 80012b0:	40021000 	.word	0x40021000
 80012b4:	40004400 	.word	0x40004400

080012b8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80012b8:	480d      	ldr	r0, [pc, #52]	@ (80012f0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80012ba:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80012bc:	f7ff fc68 	bl	8000b90 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012c0:	480c      	ldr	r0, [pc, #48]	@ (80012f4 <LoopForever+0x6>)
  ldr r1, =_edata
 80012c2:	490d      	ldr	r1, [pc, #52]	@ (80012f8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80012c4:	4a0d      	ldr	r2, [pc, #52]	@ (80012fc <LoopForever+0xe>)
  movs r3, #0
 80012c6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80012c8:	e002      	b.n	80012d0 <LoopCopyDataInit>

080012ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012ce:	3304      	adds	r3, #4

080012d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012d4:	d3f9      	bcc.n	80012ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012d6:	4a0a      	ldr	r2, [pc, #40]	@ (8001300 <LoopForever+0x12>)
  ldr r4, =_ebss
 80012d8:	4c0a      	ldr	r4, [pc, #40]	@ (8001304 <LoopForever+0x16>)
  movs r3, #0
 80012da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012dc:	e001      	b.n	80012e2 <LoopFillZerobss>

080012de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012e0:	3204      	adds	r2, #4

080012e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012e4:	d3fb      	bcc.n	80012de <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 80012e6:	f005 fc2b 	bl	8006b40 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80012ea:	f7ff fb35 	bl	8000958 <main>

080012ee <LoopForever>:

LoopForever:
    b LoopForever
 80012ee:	e7fe      	b.n	80012ee <LoopForever>
  ldr   r0, =_estack
 80012f0:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80012f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012f8:	20000040 	.word	0x20000040
  ldr r2, =_sidata
 80012fc:	08006bf0 	.word	0x08006bf0
  ldr r2, =_sbss
 8001300:	20000040 	.word	0x20000040
  ldr r4, =_ebss
 8001304:	200003f0 	.word	0x200003f0

08001308 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001308:	e7fe      	b.n	8001308 <ADC1_2_IRQHandler>

0800130a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800130a:	b580      	push	{r7, lr}
 800130c:	b082      	sub	sp, #8
 800130e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001310:	2300      	movs	r3, #0
 8001312:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001314:	2003      	movs	r0, #3
 8001316:	f000 f939 	bl	800158c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800131a:	2000      	movs	r0, #0
 800131c:	f000 f80e 	bl	800133c <HAL_InitTick>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d002      	beq.n	800132c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001326:	2301      	movs	r3, #1
 8001328:	71fb      	strb	r3, [r7, #7]
 800132a:	e001      	b.n	8001330 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800132c:	f7ff fbbe 	bl	8000aac <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001330:	79fb      	ldrb	r3, [r7, #7]

}
 8001332:	4618      	mov	r0, r3
 8001334:	3708      	adds	r7, #8
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
	...

0800133c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b084      	sub	sp, #16
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001344:	2300      	movs	r3, #0
 8001346:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001348:	4b16      	ldr	r3, [pc, #88]	@ (80013a4 <HAL_InitTick+0x68>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	2b00      	cmp	r3, #0
 800134e:	d022      	beq.n	8001396 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001350:	4b15      	ldr	r3, [pc, #84]	@ (80013a8 <HAL_InitTick+0x6c>)
 8001352:	681a      	ldr	r2, [r3, #0]
 8001354:	4b13      	ldr	r3, [pc, #76]	@ (80013a4 <HAL_InitTick+0x68>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800135c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001360:	fbb2 f3f3 	udiv	r3, r2, r3
 8001364:	4618      	mov	r0, r3
 8001366:	f000 f944 	bl	80015f2 <HAL_SYSTICK_Config>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d10f      	bne.n	8001390 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	2b0f      	cmp	r3, #15
 8001374:	d809      	bhi.n	800138a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001376:	2200      	movs	r2, #0
 8001378:	6879      	ldr	r1, [r7, #4]
 800137a:	f04f 30ff 	mov.w	r0, #4294967295
 800137e:	f000 f910 	bl	80015a2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001382:	4a0a      	ldr	r2, [pc, #40]	@ (80013ac <HAL_InitTick+0x70>)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	6013      	str	r3, [r2, #0]
 8001388:	e007      	b.n	800139a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800138a:	2301      	movs	r3, #1
 800138c:	73fb      	strb	r3, [r7, #15]
 800138e:	e004      	b.n	800139a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001390:	2301      	movs	r3, #1
 8001392:	73fb      	strb	r3, [r7, #15]
 8001394:	e001      	b.n	800139a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001396:	2301      	movs	r3, #1
 8001398:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800139a:	7bfb      	ldrb	r3, [r7, #15]
}
 800139c:	4618      	mov	r0, r3
 800139e:	3710      	adds	r7, #16
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	2000003c 	.word	0x2000003c
 80013a8:	20000034 	.word	0x20000034
 80013ac:	20000038 	.word	0x20000038

080013b0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013b4:	4b05      	ldr	r3, [pc, #20]	@ (80013cc <HAL_IncTick+0x1c>)
 80013b6:	681a      	ldr	r2, [r3, #0]
 80013b8:	4b05      	ldr	r3, [pc, #20]	@ (80013d0 <HAL_IncTick+0x20>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4413      	add	r3, r2
 80013be:	4a03      	ldr	r2, [pc, #12]	@ (80013cc <HAL_IncTick+0x1c>)
 80013c0:	6013      	str	r3, [r2, #0]
}
 80013c2:	bf00      	nop
 80013c4:	46bd      	mov	sp, r7
 80013c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ca:	4770      	bx	lr
 80013cc:	200003dc 	.word	0x200003dc
 80013d0:	2000003c 	.word	0x2000003c

080013d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0
  return uwTick;
 80013d8:	4b03      	ldr	r3, [pc, #12]	@ (80013e8 <HAL_GetTick+0x14>)
 80013da:	681b      	ldr	r3, [r3, #0]
}
 80013dc:	4618      	mov	r0, r3
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr
 80013e6:	bf00      	nop
 80013e8:	200003dc 	.word	0x200003dc

080013ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b085      	sub	sp, #20
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	f003 0307 	and.w	r3, r3, #7
 80013fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013fc:	4b0c      	ldr	r3, [pc, #48]	@ (8001430 <__NVIC_SetPriorityGrouping+0x44>)
 80013fe:	68db      	ldr	r3, [r3, #12]
 8001400:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001402:	68ba      	ldr	r2, [r7, #8]
 8001404:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001408:	4013      	ands	r3, r2
 800140a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001410:	68bb      	ldr	r3, [r7, #8]
 8001412:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001414:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001418:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800141c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800141e:	4a04      	ldr	r2, [pc, #16]	@ (8001430 <__NVIC_SetPriorityGrouping+0x44>)
 8001420:	68bb      	ldr	r3, [r7, #8]
 8001422:	60d3      	str	r3, [r2, #12]
}
 8001424:	bf00      	nop
 8001426:	3714      	adds	r7, #20
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr
 8001430:	e000ed00 	.word	0xe000ed00

08001434 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001438:	4b04      	ldr	r3, [pc, #16]	@ (800144c <__NVIC_GetPriorityGrouping+0x18>)
 800143a:	68db      	ldr	r3, [r3, #12]
 800143c:	0a1b      	lsrs	r3, r3, #8
 800143e:	f003 0307 	and.w	r3, r3, #7
}
 8001442:	4618      	mov	r0, r3
 8001444:	46bd      	mov	sp, r7
 8001446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144a:	4770      	bx	lr
 800144c:	e000ed00 	.word	0xe000ed00

08001450 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001450:	b480      	push	{r7}
 8001452:	b083      	sub	sp, #12
 8001454:	af00      	add	r7, sp, #0
 8001456:	4603      	mov	r3, r0
 8001458:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800145a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800145e:	2b00      	cmp	r3, #0
 8001460:	db0b      	blt.n	800147a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001462:	79fb      	ldrb	r3, [r7, #7]
 8001464:	f003 021f 	and.w	r2, r3, #31
 8001468:	4907      	ldr	r1, [pc, #28]	@ (8001488 <__NVIC_EnableIRQ+0x38>)
 800146a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800146e:	095b      	lsrs	r3, r3, #5
 8001470:	2001      	movs	r0, #1
 8001472:	fa00 f202 	lsl.w	r2, r0, r2
 8001476:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800147a:	bf00      	nop
 800147c:	370c      	adds	r7, #12
 800147e:	46bd      	mov	sp, r7
 8001480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001484:	4770      	bx	lr
 8001486:	bf00      	nop
 8001488:	e000e100 	.word	0xe000e100

0800148c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800148c:	b480      	push	{r7}
 800148e:	b083      	sub	sp, #12
 8001490:	af00      	add	r7, sp, #0
 8001492:	4603      	mov	r3, r0
 8001494:	6039      	str	r1, [r7, #0]
 8001496:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001498:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800149c:	2b00      	cmp	r3, #0
 800149e:	db0a      	blt.n	80014b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	b2da      	uxtb	r2, r3
 80014a4:	490c      	ldr	r1, [pc, #48]	@ (80014d8 <__NVIC_SetPriority+0x4c>)
 80014a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014aa:	0112      	lsls	r2, r2, #4
 80014ac:	b2d2      	uxtb	r2, r2
 80014ae:	440b      	add	r3, r1
 80014b0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014b4:	e00a      	b.n	80014cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	b2da      	uxtb	r2, r3
 80014ba:	4908      	ldr	r1, [pc, #32]	@ (80014dc <__NVIC_SetPriority+0x50>)
 80014bc:	79fb      	ldrb	r3, [r7, #7]
 80014be:	f003 030f 	and.w	r3, r3, #15
 80014c2:	3b04      	subs	r3, #4
 80014c4:	0112      	lsls	r2, r2, #4
 80014c6:	b2d2      	uxtb	r2, r2
 80014c8:	440b      	add	r3, r1
 80014ca:	761a      	strb	r2, [r3, #24]
}
 80014cc:	bf00      	nop
 80014ce:	370c      	adds	r7, #12
 80014d0:	46bd      	mov	sp, r7
 80014d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d6:	4770      	bx	lr
 80014d8:	e000e100 	.word	0xe000e100
 80014dc:	e000ed00 	.word	0xe000ed00

080014e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b089      	sub	sp, #36	@ 0x24
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	60f8      	str	r0, [r7, #12]
 80014e8:	60b9      	str	r1, [r7, #8]
 80014ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	f003 0307 	and.w	r3, r3, #7
 80014f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014f4:	69fb      	ldr	r3, [r7, #28]
 80014f6:	f1c3 0307 	rsb	r3, r3, #7
 80014fa:	2b04      	cmp	r3, #4
 80014fc:	bf28      	it	cs
 80014fe:	2304      	movcs	r3, #4
 8001500:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001502:	69fb      	ldr	r3, [r7, #28]
 8001504:	3304      	adds	r3, #4
 8001506:	2b06      	cmp	r3, #6
 8001508:	d902      	bls.n	8001510 <NVIC_EncodePriority+0x30>
 800150a:	69fb      	ldr	r3, [r7, #28]
 800150c:	3b03      	subs	r3, #3
 800150e:	e000      	b.n	8001512 <NVIC_EncodePriority+0x32>
 8001510:	2300      	movs	r3, #0
 8001512:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001514:	f04f 32ff 	mov.w	r2, #4294967295
 8001518:	69bb      	ldr	r3, [r7, #24]
 800151a:	fa02 f303 	lsl.w	r3, r2, r3
 800151e:	43da      	mvns	r2, r3
 8001520:	68bb      	ldr	r3, [r7, #8]
 8001522:	401a      	ands	r2, r3
 8001524:	697b      	ldr	r3, [r7, #20]
 8001526:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001528:	f04f 31ff 	mov.w	r1, #4294967295
 800152c:	697b      	ldr	r3, [r7, #20]
 800152e:	fa01 f303 	lsl.w	r3, r1, r3
 8001532:	43d9      	mvns	r1, r3
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001538:	4313      	orrs	r3, r2
         );
}
 800153a:	4618      	mov	r0, r3
 800153c:	3724      	adds	r7, #36	@ 0x24
 800153e:	46bd      	mov	sp, r7
 8001540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001544:	4770      	bx	lr
	...

08001548 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b082      	sub	sp, #8
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	3b01      	subs	r3, #1
 8001554:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001558:	d301      	bcc.n	800155e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800155a:	2301      	movs	r3, #1
 800155c:	e00f      	b.n	800157e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800155e:	4a0a      	ldr	r2, [pc, #40]	@ (8001588 <SysTick_Config+0x40>)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	3b01      	subs	r3, #1
 8001564:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001566:	210f      	movs	r1, #15
 8001568:	f04f 30ff 	mov.w	r0, #4294967295
 800156c:	f7ff ff8e 	bl	800148c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001570:	4b05      	ldr	r3, [pc, #20]	@ (8001588 <SysTick_Config+0x40>)
 8001572:	2200      	movs	r2, #0
 8001574:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001576:	4b04      	ldr	r3, [pc, #16]	@ (8001588 <SysTick_Config+0x40>)
 8001578:	2207      	movs	r2, #7
 800157a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800157c:	2300      	movs	r3, #0
}
 800157e:	4618      	mov	r0, r3
 8001580:	3708      	adds	r7, #8
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	e000e010 	.word	0xe000e010

0800158c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b082      	sub	sp, #8
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001594:	6878      	ldr	r0, [r7, #4]
 8001596:	f7ff ff29 	bl	80013ec <__NVIC_SetPriorityGrouping>
}
 800159a:	bf00      	nop
 800159c:	3708      	adds	r7, #8
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}

080015a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015a2:	b580      	push	{r7, lr}
 80015a4:	b086      	sub	sp, #24
 80015a6:	af00      	add	r7, sp, #0
 80015a8:	4603      	mov	r3, r0
 80015aa:	60b9      	str	r1, [r7, #8]
 80015ac:	607a      	str	r2, [r7, #4]
 80015ae:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80015b0:	f7ff ff40 	bl	8001434 <__NVIC_GetPriorityGrouping>
 80015b4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015b6:	687a      	ldr	r2, [r7, #4]
 80015b8:	68b9      	ldr	r1, [r7, #8]
 80015ba:	6978      	ldr	r0, [r7, #20]
 80015bc:	f7ff ff90 	bl	80014e0 <NVIC_EncodePriority>
 80015c0:	4602      	mov	r2, r0
 80015c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015c6:	4611      	mov	r1, r2
 80015c8:	4618      	mov	r0, r3
 80015ca:	f7ff ff5f 	bl	800148c <__NVIC_SetPriority>
}
 80015ce:	bf00      	nop
 80015d0:	3718      	adds	r7, #24
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}

080015d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015d6:	b580      	push	{r7, lr}
 80015d8:	b082      	sub	sp, #8
 80015da:	af00      	add	r7, sp, #0
 80015dc:	4603      	mov	r3, r0
 80015de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015e4:	4618      	mov	r0, r3
 80015e6:	f7ff ff33 	bl	8001450 <__NVIC_EnableIRQ>
}
 80015ea:	bf00      	nop
 80015ec:	3708      	adds	r7, #8
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}

080015f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015f2:	b580      	push	{r7, lr}
 80015f4:	b082      	sub	sp, #8
 80015f6:	af00      	add	r7, sp, #0
 80015f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015fa:	6878      	ldr	r0, [r7, #4]
 80015fc:	f7ff ffa4 	bl	8001548 <SysTick_Config>
 8001600:	4603      	mov	r3, r0
}
 8001602:	4618      	mov	r0, r3
 8001604:	3708      	adds	r7, #8
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
	...

0800160c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b084      	sub	sp, #16
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d101      	bne.n	800161e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800161a:	2301      	movs	r3, #1
 800161c:	e08d      	b.n	800173a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	461a      	mov	r2, r3
 8001624:	4b47      	ldr	r3, [pc, #284]	@ (8001744 <HAL_DMA_Init+0x138>)
 8001626:	429a      	cmp	r2, r3
 8001628:	d80f      	bhi.n	800164a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	461a      	mov	r2, r3
 8001630:	4b45      	ldr	r3, [pc, #276]	@ (8001748 <HAL_DMA_Init+0x13c>)
 8001632:	4413      	add	r3, r2
 8001634:	4a45      	ldr	r2, [pc, #276]	@ (800174c <HAL_DMA_Init+0x140>)
 8001636:	fba2 2303 	umull	r2, r3, r2, r3
 800163a:	091b      	lsrs	r3, r3, #4
 800163c:	009a      	lsls	r2, r3, #2
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	4a42      	ldr	r2, [pc, #264]	@ (8001750 <HAL_DMA_Init+0x144>)
 8001646:	641a      	str	r2, [r3, #64]	@ 0x40
 8001648:	e00e      	b.n	8001668 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	461a      	mov	r2, r3
 8001650:	4b40      	ldr	r3, [pc, #256]	@ (8001754 <HAL_DMA_Init+0x148>)
 8001652:	4413      	add	r3, r2
 8001654:	4a3d      	ldr	r2, [pc, #244]	@ (800174c <HAL_DMA_Init+0x140>)
 8001656:	fba2 2303 	umull	r2, r3, r2, r3
 800165a:	091b      	lsrs	r3, r3, #4
 800165c:	009a      	lsls	r2, r3, #2
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	4a3c      	ldr	r2, [pc, #240]	@ (8001758 <HAL_DMA_Init+0x14c>)
 8001666:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	2202      	movs	r2, #2
 800166c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800167e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001682:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800168c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	691b      	ldr	r3, [r3, #16]
 8001692:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001698:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	699b      	ldr	r3, [r3, #24]
 800169e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016a4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6a1b      	ldr	r3, [r3, #32]
 80016aa:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80016ac:	68fa      	ldr	r2, [r7, #12]
 80016ae:	4313      	orrs	r3, r2
 80016b0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	68fa      	ldr	r2, [r7, #12]
 80016b8:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80016ba:	6878      	ldr	r0, [r7, #4]
 80016bc:	f000 fa2c 	bl	8001b18 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	689b      	ldr	r3, [r3, #8]
 80016c4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80016c8:	d102      	bne.n	80016d0 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	2200      	movs	r2, #0
 80016ce:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	685a      	ldr	r2, [r3, #4]
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80016d8:	b2d2      	uxtb	r2, r2
 80016da:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016e0:	687a      	ldr	r2, [r7, #4]
 80016e2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80016e4:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d010      	beq.n	8001710 <HAL_DMA_Init+0x104>
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	2b04      	cmp	r3, #4
 80016f4:	d80c      	bhi.n	8001710 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80016f6:	6878      	ldr	r0, [r7, #4]
 80016f8:	f000 fa4c 	bl	8001b94 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001700:	2200      	movs	r2, #0
 8001702:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001708:	687a      	ldr	r2, [r7, #4]
 800170a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800170c:	605a      	str	r2, [r3, #4]
 800170e:	e008      	b.n	8001722 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	2200      	movs	r2, #0
 8001714:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	2200      	movs	r2, #0
 800171a:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	2200      	movs	r2, #0
 8001720:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	2200      	movs	r2, #0
 8001726:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2201      	movs	r2, #1
 800172c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2200      	movs	r2, #0
 8001734:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8001738:	2300      	movs	r3, #0
}
 800173a:	4618      	mov	r0, r3
 800173c:	3710      	adds	r7, #16
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	40020407 	.word	0x40020407
 8001748:	bffdfff8 	.word	0xbffdfff8
 800174c:	cccccccd 	.word	0xcccccccd
 8001750:	40020000 	.word	0x40020000
 8001754:	bffdfbf8 	.word	0xbffdfbf8
 8001758:	40020400 	.word	0x40020400

0800175c <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b086      	sub	sp, #24
 8001760:	af00      	add	r7, sp, #0
 8001762:	60f8      	str	r0, [r7, #12]
 8001764:	60b9      	str	r1, [r7, #8]
 8001766:	607a      	str	r2, [r7, #4]
 8001768:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800176a:	2300      	movs	r3, #0
 800176c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001774:	2b01      	cmp	r3, #1
 8001776:	d101      	bne.n	800177c <HAL_DMA_Start_IT+0x20>
 8001778:	2302      	movs	r3, #2
 800177a:	e066      	b.n	800184a <HAL_DMA_Start_IT+0xee>
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	2201      	movs	r2, #1
 8001780:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800178a:	b2db      	uxtb	r3, r3
 800178c:	2b01      	cmp	r3, #1
 800178e:	d155      	bne.n	800183c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	2202      	movs	r2, #2
 8001794:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	2200      	movs	r2, #0
 800179c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	681a      	ldr	r2, [r3, #0]
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f022 0201 	bic.w	r2, r2, #1
 80017ac:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	687a      	ldr	r2, [r7, #4]
 80017b2:	68b9      	ldr	r1, [r7, #8]
 80017b4:	68f8      	ldr	r0, [r7, #12]
 80017b6:	f000 f970 	bl	8001a9a <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d008      	beq.n	80017d4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	681a      	ldr	r2, [r3, #0]
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f042 020e 	orr.w	r2, r2, #14
 80017d0:	601a      	str	r2, [r3, #0]
 80017d2:	e00f      	b.n	80017f4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	681a      	ldr	r2, [r3, #0]
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f022 0204 	bic.w	r2, r2, #4
 80017e2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	681a      	ldr	r2, [r3, #0]
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f042 020a 	orr.w	r2, r2, #10
 80017f2:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d007      	beq.n	8001812 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001806:	681a      	ldr	r2, [r3, #0]
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800180c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001810:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001816:	2b00      	cmp	r3, #0
 8001818:	d007      	beq.n	800182a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800181e:	681a      	ldr	r2, [r3, #0]
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001824:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001828:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	681a      	ldr	r2, [r3, #0]
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f042 0201 	orr.w	r2, r2, #1
 8001838:	601a      	str	r2, [r3, #0]
 800183a:	e005      	b.n	8001848 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	2200      	movs	r2, #0
 8001840:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001844:	2302      	movs	r3, #2
 8001846:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001848:	7dfb      	ldrb	r3, [r7, #23]
}
 800184a:	4618      	mov	r0, r3
 800184c:	3718      	adds	r7, #24
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}

08001852 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001852:	b580      	push	{r7, lr}
 8001854:	b084      	sub	sp, #16
 8001856:	af00      	add	r7, sp, #0
 8001858:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800185a:	2300      	movs	r3, #0
 800185c:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001864:	b2db      	uxtb	r3, r3
 8001866:	2b02      	cmp	r3, #2
 8001868:	d00d      	beq.n	8001886 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2204      	movs	r2, #4
 800186e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2201      	movs	r2, #1
 8001874:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2200      	movs	r2, #0
 800187c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8001880:	2301      	movs	r3, #1
 8001882:	73fb      	strb	r3, [r7, #15]
 8001884:	e047      	b.n	8001916 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	681a      	ldr	r2, [r3, #0]
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f022 020e 	bic.w	r2, r2, #14
 8001894:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	681a      	ldr	r2, [r3, #0]
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f022 0201 	bic.w	r2, r2, #1
 80018a4:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80018aa:	681a      	ldr	r2, [r3, #0]
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80018b0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80018b4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018ba:	f003 021f 	and.w	r2, r3, #31
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018c2:	2101      	movs	r1, #1
 80018c4:	fa01 f202 	lsl.w	r2, r1, r2
 80018c8:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018ce:	687a      	ldr	r2, [r7, #4]
 80018d0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80018d2:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d00c      	beq.n	80018f6 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018e0:	681a      	ldr	r2, [r3, #0]
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018e6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80018ea:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018f0:	687a      	ldr	r2, [r7, #4]
 80018f2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80018f4:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	2201      	movs	r2, #1
 80018fa:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	2200      	movs	r2, #0
 8001902:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800190a:	2b00      	cmp	r3, #0
 800190c:	d003      	beq.n	8001916 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001912:	6878      	ldr	r0, [r7, #4]
 8001914:	4798      	blx	r3
    }
  }
  return status;
 8001916:	7bfb      	ldrb	r3, [r7, #15]
}
 8001918:	4618      	mov	r0, r3
 800191a:	3710      	adds	r7, #16
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}

08001920 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b084      	sub	sp, #16
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800193c:	f003 031f 	and.w	r3, r3, #31
 8001940:	2204      	movs	r2, #4
 8001942:	409a      	lsls	r2, r3
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	4013      	ands	r3, r2
 8001948:	2b00      	cmp	r3, #0
 800194a:	d026      	beq.n	800199a <HAL_DMA_IRQHandler+0x7a>
 800194c:	68bb      	ldr	r3, [r7, #8]
 800194e:	f003 0304 	and.w	r3, r3, #4
 8001952:	2b00      	cmp	r3, #0
 8001954:	d021      	beq.n	800199a <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f003 0320 	and.w	r3, r3, #32
 8001960:	2b00      	cmp	r3, #0
 8001962:	d107      	bne.n	8001974 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	681a      	ldr	r2, [r3, #0]
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f022 0204 	bic.w	r2, r2, #4
 8001972:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001978:	f003 021f 	and.w	r2, r3, #31
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001980:	2104      	movs	r1, #4
 8001982:	fa01 f202 	lsl.w	r2, r1, r2
 8001986:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800198c:	2b00      	cmp	r3, #0
 800198e:	d071      	beq.n	8001a74 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001994:	6878      	ldr	r0, [r7, #4]
 8001996:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001998:	e06c      	b.n	8001a74 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800199e:	f003 031f 	and.w	r3, r3, #31
 80019a2:	2202      	movs	r2, #2
 80019a4:	409a      	lsls	r2, r3
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	4013      	ands	r3, r2
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d02e      	beq.n	8001a0c <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80019ae:	68bb      	ldr	r3, [r7, #8]
 80019b0:	f003 0302 	and.w	r3, r3, #2
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d029      	beq.n	8001a0c <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f003 0320 	and.w	r3, r3, #32
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d10b      	bne.n	80019de <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	681a      	ldr	r2, [r3, #0]
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f022 020a 	bic.w	r2, r2, #10
 80019d4:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	2201      	movs	r2, #1
 80019da:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019e2:	f003 021f 	and.w	r2, r3, #31
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019ea:	2102      	movs	r1, #2
 80019ec:	fa01 f202 	lsl.w	r2, r1, r2
 80019f0:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2200      	movs	r2, #0
 80019f6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d038      	beq.n	8001a74 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a06:	6878      	ldr	r0, [r7, #4]
 8001a08:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001a0a:	e033      	b.n	8001a74 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a10:	f003 031f 	and.w	r3, r3, #31
 8001a14:	2208      	movs	r2, #8
 8001a16:	409a      	lsls	r2, r3
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	4013      	ands	r3, r2
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d02a      	beq.n	8001a76 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8001a20:	68bb      	ldr	r3, [r7, #8]
 8001a22:	f003 0308 	and.w	r3, r3, #8
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d025      	beq.n	8001a76 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	681a      	ldr	r2, [r3, #0]
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f022 020e 	bic.w	r2, r2, #14
 8001a38:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a3e:	f003 021f 	and.w	r2, r3, #31
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a46:	2101      	movs	r1, #1
 8001a48:	fa01 f202 	lsl.w	r2, r1, r2
 8001a4c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2201      	movs	r2, #1
 8001a52:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2201      	movs	r2, #1
 8001a58:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2200      	movs	r2, #0
 8001a60:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d004      	beq.n	8001a76 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a70:	6878      	ldr	r0, [r7, #4]
 8001a72:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001a74:	bf00      	nop
 8001a76:	bf00      	nop
}
 8001a78:	3710      	adds	r7, #16
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}

08001a7e <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001a7e:	b480      	push	{r7}
 8001a80:	b083      	sub	sp, #12
 8001a82:	af00      	add	r7, sp, #0
 8001a84:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001a8c:	b2db      	uxtb	r3, r3
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	370c      	adds	r7, #12
 8001a92:	46bd      	mov	sp, r7
 8001a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a98:	4770      	bx	lr

08001a9a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a9a:	b480      	push	{r7}
 8001a9c:	b085      	sub	sp, #20
 8001a9e:	af00      	add	r7, sp, #0
 8001aa0:	60f8      	str	r0, [r7, #12]
 8001aa2:	60b9      	str	r1, [r7, #8]
 8001aa4:	607a      	str	r2, [r7, #4]
 8001aa6:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001aac:	68fa      	ldr	r2, [r7, #12]
 8001aae:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001ab0:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d004      	beq.n	8001ac4 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001abe:	68fa      	ldr	r2, [r7, #12]
 8001ac0:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001ac2:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ac8:	f003 021f 	and.w	r2, r3, #31
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ad0:	2101      	movs	r1, #1
 8001ad2:	fa01 f202 	lsl.w	r2, r1, r2
 8001ad6:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	683a      	ldr	r2, [r7, #0]
 8001ade:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	689b      	ldr	r3, [r3, #8]
 8001ae4:	2b10      	cmp	r3, #16
 8001ae6:	d108      	bne.n	8001afa <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	687a      	ldr	r2, [r7, #4]
 8001aee:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	68ba      	ldr	r2, [r7, #8]
 8001af6:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001af8:	e007      	b.n	8001b0a <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	68ba      	ldr	r2, [r7, #8]
 8001b00:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	687a      	ldr	r2, [r7, #4]
 8001b08:	60da      	str	r2, [r3, #12]
}
 8001b0a:	bf00      	nop
 8001b0c:	3714      	adds	r7, #20
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b14:	4770      	bx	lr
	...

08001b18 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b087      	sub	sp, #28
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	461a      	mov	r2, r3
 8001b26:	4b16      	ldr	r3, [pc, #88]	@ (8001b80 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8001b28:	429a      	cmp	r2, r3
 8001b2a:	d802      	bhi.n	8001b32 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8001b2c:	4b15      	ldr	r3, [pc, #84]	@ (8001b84 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8001b2e:	617b      	str	r3, [r7, #20]
 8001b30:	e001      	b.n	8001b36 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8001b32:	4b15      	ldr	r3, [pc, #84]	@ (8001b88 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8001b34:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8001b36:	697b      	ldr	r3, [r7, #20]
 8001b38:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	b2db      	uxtb	r3, r3
 8001b40:	3b08      	subs	r3, #8
 8001b42:	4a12      	ldr	r2, [pc, #72]	@ (8001b8c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8001b44:	fba2 2303 	umull	r2, r3, r2, r3
 8001b48:	091b      	lsrs	r3, r3, #4
 8001b4a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b50:	089b      	lsrs	r3, r3, #2
 8001b52:	009a      	lsls	r2, r3, #2
 8001b54:	693b      	ldr	r3, [r7, #16]
 8001b56:	4413      	add	r3, r2
 8001b58:	461a      	mov	r2, r3
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	4a0b      	ldr	r2, [pc, #44]	@ (8001b90 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8001b62:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	f003 031f 	and.w	r3, r3, #31
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	409a      	lsls	r2, r3
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8001b72:	bf00      	nop
 8001b74:	371c      	adds	r7, #28
 8001b76:	46bd      	mov	sp, r7
 8001b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7c:	4770      	bx	lr
 8001b7e:	bf00      	nop
 8001b80:	40020407 	.word	0x40020407
 8001b84:	40020800 	.word	0x40020800
 8001b88:	40020820 	.word	0x40020820
 8001b8c:	cccccccd 	.word	0xcccccccd
 8001b90:	40020880 	.word	0x40020880

08001b94 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b085      	sub	sp, #20
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	b2db      	uxtb	r3, r3
 8001ba2:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001ba4:	68fa      	ldr	r2, [r7, #12]
 8001ba6:	4b0b      	ldr	r3, [pc, #44]	@ (8001bd4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001ba8:	4413      	add	r3, r2
 8001baa:	009b      	lsls	r3, r3, #2
 8001bac:	461a      	mov	r2, r3
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	4a08      	ldr	r2, [pc, #32]	@ (8001bd8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001bb6:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	3b01      	subs	r3, #1
 8001bbc:	f003 031f 	and.w	r3, r3, #31
 8001bc0:	2201      	movs	r2, #1
 8001bc2:	409a      	lsls	r2, r3
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8001bc8:	bf00      	nop
 8001bca:	3714      	adds	r7, #20
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd2:	4770      	bx	lr
 8001bd4:	1000823f 	.word	0x1000823f
 8001bd8:	40020940 	.word	0x40020940

08001bdc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b087      	sub	sp, #28
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
 8001be4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001be6:	2300      	movs	r3, #0
 8001be8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001bea:	e15a      	b.n	8001ea2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	681a      	ldr	r2, [r3, #0]
 8001bf0:	2101      	movs	r1, #1
 8001bf2:	697b      	ldr	r3, [r7, #20]
 8001bf4:	fa01 f303 	lsl.w	r3, r1, r3
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	f000 814c 	beq.w	8001e9c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	f003 0303 	and.w	r3, r3, #3
 8001c0c:	2b01      	cmp	r3, #1
 8001c0e:	d005      	beq.n	8001c1c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001c18:	2b02      	cmp	r3, #2
 8001c1a:	d130      	bne.n	8001c7e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	689b      	ldr	r3, [r3, #8]
 8001c20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001c22:	697b      	ldr	r3, [r7, #20]
 8001c24:	005b      	lsls	r3, r3, #1
 8001c26:	2203      	movs	r2, #3
 8001c28:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2c:	43db      	mvns	r3, r3
 8001c2e:	693a      	ldr	r2, [r7, #16]
 8001c30:	4013      	ands	r3, r2
 8001c32:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	68da      	ldr	r2, [r3, #12]
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	005b      	lsls	r3, r3, #1
 8001c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c40:	693a      	ldr	r2, [r7, #16]
 8001c42:	4313      	orrs	r3, r2
 8001c44:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	693a      	ldr	r2, [r7, #16]
 8001c4a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001c52:	2201      	movs	r2, #1
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5a:	43db      	mvns	r3, r3
 8001c5c:	693a      	ldr	r2, [r7, #16]
 8001c5e:	4013      	ands	r3, r2
 8001c60:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	091b      	lsrs	r3, r3, #4
 8001c68:	f003 0201 	and.w	r2, r3, #1
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c72:	693a      	ldr	r2, [r7, #16]
 8001c74:	4313      	orrs	r3, r2
 8001c76:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	693a      	ldr	r2, [r7, #16]
 8001c7c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	f003 0303 	and.w	r3, r3, #3
 8001c86:	2b03      	cmp	r3, #3
 8001c88:	d017      	beq.n	8001cba <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	68db      	ldr	r3, [r3, #12]
 8001c8e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	005b      	lsls	r3, r3, #1
 8001c94:	2203      	movs	r2, #3
 8001c96:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9a:	43db      	mvns	r3, r3
 8001c9c:	693a      	ldr	r2, [r7, #16]
 8001c9e:	4013      	ands	r3, r2
 8001ca0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	689a      	ldr	r2, [r3, #8]
 8001ca6:	697b      	ldr	r3, [r7, #20]
 8001ca8:	005b      	lsls	r3, r3, #1
 8001caa:	fa02 f303 	lsl.w	r3, r2, r3
 8001cae:	693a      	ldr	r2, [r7, #16]
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	693a      	ldr	r2, [r7, #16]
 8001cb8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	f003 0303 	and.w	r3, r3, #3
 8001cc2:	2b02      	cmp	r3, #2
 8001cc4:	d123      	bne.n	8001d0e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001cc6:	697b      	ldr	r3, [r7, #20]
 8001cc8:	08da      	lsrs	r2, r3, #3
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	3208      	adds	r2, #8
 8001cce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cd2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	f003 0307 	and.w	r3, r3, #7
 8001cda:	009b      	lsls	r3, r3, #2
 8001cdc:	220f      	movs	r2, #15
 8001cde:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce2:	43db      	mvns	r3, r3
 8001ce4:	693a      	ldr	r2, [r7, #16]
 8001ce6:	4013      	ands	r3, r2
 8001ce8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	691a      	ldr	r2, [r3, #16]
 8001cee:	697b      	ldr	r3, [r7, #20]
 8001cf0:	f003 0307 	and.w	r3, r3, #7
 8001cf4:	009b      	lsls	r3, r3, #2
 8001cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfa:	693a      	ldr	r2, [r7, #16]
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001d00:	697b      	ldr	r3, [r7, #20]
 8001d02:	08da      	lsrs	r2, r3, #3
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	3208      	adds	r2, #8
 8001d08:	6939      	ldr	r1, [r7, #16]
 8001d0a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001d14:	697b      	ldr	r3, [r7, #20]
 8001d16:	005b      	lsls	r3, r3, #1
 8001d18:	2203      	movs	r2, #3
 8001d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1e:	43db      	mvns	r3, r3
 8001d20:	693a      	ldr	r2, [r7, #16]
 8001d22:	4013      	ands	r3, r2
 8001d24:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	f003 0203 	and.w	r2, r3, #3
 8001d2e:	697b      	ldr	r3, [r7, #20]
 8001d30:	005b      	lsls	r3, r3, #1
 8001d32:	fa02 f303 	lsl.w	r3, r2, r3
 8001d36:	693a      	ldr	r2, [r7, #16]
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	693a      	ldr	r2, [r7, #16]
 8001d40:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	f000 80a6 	beq.w	8001e9c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d50:	4b5b      	ldr	r3, [pc, #364]	@ (8001ec0 <HAL_GPIO_Init+0x2e4>)
 8001d52:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d54:	4a5a      	ldr	r2, [pc, #360]	@ (8001ec0 <HAL_GPIO_Init+0x2e4>)
 8001d56:	f043 0301 	orr.w	r3, r3, #1
 8001d5a:	6613      	str	r3, [r2, #96]	@ 0x60
 8001d5c:	4b58      	ldr	r3, [pc, #352]	@ (8001ec0 <HAL_GPIO_Init+0x2e4>)
 8001d5e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d60:	f003 0301 	and.w	r3, r3, #1
 8001d64:	60bb      	str	r3, [r7, #8]
 8001d66:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d68:	4a56      	ldr	r2, [pc, #344]	@ (8001ec4 <HAL_GPIO_Init+0x2e8>)
 8001d6a:	697b      	ldr	r3, [r7, #20]
 8001d6c:	089b      	lsrs	r3, r3, #2
 8001d6e:	3302      	adds	r3, #2
 8001d70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d74:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001d76:	697b      	ldr	r3, [r7, #20]
 8001d78:	f003 0303 	and.w	r3, r3, #3
 8001d7c:	009b      	lsls	r3, r3, #2
 8001d7e:	220f      	movs	r2, #15
 8001d80:	fa02 f303 	lsl.w	r3, r2, r3
 8001d84:	43db      	mvns	r3, r3
 8001d86:	693a      	ldr	r2, [r7, #16]
 8001d88:	4013      	ands	r3, r2
 8001d8a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001d92:	d01f      	beq.n	8001dd4 <HAL_GPIO_Init+0x1f8>
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	4a4c      	ldr	r2, [pc, #304]	@ (8001ec8 <HAL_GPIO_Init+0x2ec>)
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d019      	beq.n	8001dd0 <HAL_GPIO_Init+0x1f4>
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	4a4b      	ldr	r2, [pc, #300]	@ (8001ecc <HAL_GPIO_Init+0x2f0>)
 8001da0:	4293      	cmp	r3, r2
 8001da2:	d013      	beq.n	8001dcc <HAL_GPIO_Init+0x1f0>
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	4a4a      	ldr	r2, [pc, #296]	@ (8001ed0 <HAL_GPIO_Init+0x2f4>)
 8001da8:	4293      	cmp	r3, r2
 8001daa:	d00d      	beq.n	8001dc8 <HAL_GPIO_Init+0x1ec>
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	4a49      	ldr	r2, [pc, #292]	@ (8001ed4 <HAL_GPIO_Init+0x2f8>)
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d007      	beq.n	8001dc4 <HAL_GPIO_Init+0x1e8>
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	4a48      	ldr	r2, [pc, #288]	@ (8001ed8 <HAL_GPIO_Init+0x2fc>)
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d101      	bne.n	8001dc0 <HAL_GPIO_Init+0x1e4>
 8001dbc:	2305      	movs	r3, #5
 8001dbe:	e00a      	b.n	8001dd6 <HAL_GPIO_Init+0x1fa>
 8001dc0:	2306      	movs	r3, #6
 8001dc2:	e008      	b.n	8001dd6 <HAL_GPIO_Init+0x1fa>
 8001dc4:	2304      	movs	r3, #4
 8001dc6:	e006      	b.n	8001dd6 <HAL_GPIO_Init+0x1fa>
 8001dc8:	2303      	movs	r3, #3
 8001dca:	e004      	b.n	8001dd6 <HAL_GPIO_Init+0x1fa>
 8001dcc:	2302      	movs	r3, #2
 8001dce:	e002      	b.n	8001dd6 <HAL_GPIO_Init+0x1fa>
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	e000      	b.n	8001dd6 <HAL_GPIO_Init+0x1fa>
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	697a      	ldr	r2, [r7, #20]
 8001dd8:	f002 0203 	and.w	r2, r2, #3
 8001ddc:	0092      	lsls	r2, r2, #2
 8001dde:	4093      	lsls	r3, r2
 8001de0:	693a      	ldr	r2, [r7, #16]
 8001de2:	4313      	orrs	r3, r2
 8001de4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001de6:	4937      	ldr	r1, [pc, #220]	@ (8001ec4 <HAL_GPIO_Init+0x2e8>)
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	089b      	lsrs	r3, r3, #2
 8001dec:	3302      	adds	r3, #2
 8001dee:	693a      	ldr	r2, [r7, #16]
 8001df0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001df4:	4b39      	ldr	r3, [pc, #228]	@ (8001edc <HAL_GPIO_Init+0x300>)
 8001df6:	689b      	ldr	r3, [r3, #8]
 8001df8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	43db      	mvns	r3, r3
 8001dfe:	693a      	ldr	r2, [r7, #16]
 8001e00:	4013      	ands	r3, r2
 8001e02:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d003      	beq.n	8001e18 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001e10:	693a      	ldr	r2, [r7, #16]
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	4313      	orrs	r3, r2
 8001e16:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001e18:	4a30      	ldr	r2, [pc, #192]	@ (8001edc <HAL_GPIO_Init+0x300>)
 8001e1a:	693b      	ldr	r3, [r7, #16]
 8001e1c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001e1e:	4b2f      	ldr	r3, [pc, #188]	@ (8001edc <HAL_GPIO_Init+0x300>)
 8001e20:	68db      	ldr	r3, [r3, #12]
 8001e22:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	43db      	mvns	r3, r3
 8001e28:	693a      	ldr	r2, [r7, #16]
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d003      	beq.n	8001e42 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001e3a:	693a      	ldr	r2, [r7, #16]
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001e42:	4a26      	ldr	r2, [pc, #152]	@ (8001edc <HAL_GPIO_Init+0x300>)
 8001e44:	693b      	ldr	r3, [r7, #16]
 8001e46:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001e48:	4b24      	ldr	r3, [pc, #144]	@ (8001edc <HAL_GPIO_Init+0x300>)
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	43db      	mvns	r3, r3
 8001e52:	693a      	ldr	r2, [r7, #16]
 8001e54:	4013      	ands	r3, r2
 8001e56:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d003      	beq.n	8001e6c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001e64:	693a      	ldr	r2, [r7, #16]
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	4313      	orrs	r3, r2
 8001e6a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001e6c:	4a1b      	ldr	r2, [pc, #108]	@ (8001edc <HAL_GPIO_Init+0x300>)
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001e72:	4b1a      	ldr	r3, [pc, #104]	@ (8001edc <HAL_GPIO_Init+0x300>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	43db      	mvns	r3, r3
 8001e7c:	693a      	ldr	r2, [r7, #16]
 8001e7e:	4013      	ands	r3, r2
 8001e80:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d003      	beq.n	8001e96 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001e8e:	693a      	ldr	r2, [r7, #16]
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	4313      	orrs	r3, r2
 8001e94:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001e96:	4a11      	ldr	r2, [pc, #68]	@ (8001edc <HAL_GPIO_Init+0x300>)
 8001e98:	693b      	ldr	r3, [r7, #16]
 8001e9a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001e9c:	697b      	ldr	r3, [r7, #20]
 8001e9e:	3301      	adds	r3, #1
 8001ea0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	681a      	ldr	r2, [r3, #0]
 8001ea6:	697b      	ldr	r3, [r7, #20]
 8001ea8:	fa22 f303 	lsr.w	r3, r2, r3
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	f47f ae9d 	bne.w	8001bec <HAL_GPIO_Init+0x10>
  }
}
 8001eb2:	bf00      	nop
 8001eb4:	bf00      	nop
 8001eb6:	371c      	adds	r7, #28
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebe:	4770      	bx	lr
 8001ec0:	40021000 	.word	0x40021000
 8001ec4:	40010000 	.word	0x40010000
 8001ec8:	48000400 	.word	0x48000400
 8001ecc:	48000800 	.word	0x48000800
 8001ed0:	48000c00 	.word	0x48000c00
 8001ed4:	48001000 	.word	0x48001000
 8001ed8:	48001400 	.word	0x48001400
 8001edc:	40010400 	.word	0x40010400

08001ee0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b083      	sub	sp, #12
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
 8001ee8:	460b      	mov	r3, r1
 8001eea:	807b      	strh	r3, [r7, #2]
 8001eec:	4613      	mov	r3, r2
 8001eee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ef0:	787b      	ldrb	r3, [r7, #1]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d003      	beq.n	8001efe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001ef6:	887a      	ldrh	r2, [r7, #2]
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001efc:	e002      	b.n	8001f04 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001efe:	887a      	ldrh	r2, [r7, #2]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001f04:	bf00      	nop
 8001f06:	370c      	adds	r7, #12
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0e:	4770      	bx	lr

08001f10 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b082      	sub	sp, #8
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d101      	bne.n	8001f22 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	e08d      	b.n	800203e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001f28:	b2db      	uxtb	r3, r3
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d106      	bne.n	8001f3c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2200      	movs	r2, #0
 8001f32:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001f36:	6878      	ldr	r0, [r7, #4]
 8001f38:	f7fe fbd8 	bl	80006ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2224      	movs	r2, #36	@ 0x24
 8001f40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	681a      	ldr	r2, [r3, #0]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f022 0201 	bic.w	r2, r2, #1
 8001f52:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	685a      	ldr	r2, [r3, #4]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001f60:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	689a      	ldr	r2, [r3, #8]
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001f70:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	68db      	ldr	r3, [r3, #12]
 8001f76:	2b01      	cmp	r3, #1
 8001f78:	d107      	bne.n	8001f8a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	689a      	ldr	r2, [r3, #8]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001f86:	609a      	str	r2, [r3, #8]
 8001f88:	e006      	b.n	8001f98 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	689a      	ldr	r2, [r3, #8]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001f96:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	68db      	ldr	r3, [r3, #12]
 8001f9c:	2b02      	cmp	r3, #2
 8001f9e:	d108      	bne.n	8001fb2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	685a      	ldr	r2, [r3, #4]
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001fae:	605a      	str	r2, [r3, #4]
 8001fb0:	e007      	b.n	8001fc2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	685a      	ldr	r2, [r3, #4]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001fc0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	687a      	ldr	r2, [r7, #4]
 8001fca:	6812      	ldr	r2, [r2, #0]
 8001fcc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001fd0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001fd4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	68da      	ldr	r2, [r3, #12]
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001fe4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	691a      	ldr	r2, [r3, #16]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	695b      	ldr	r3, [r3, #20]
 8001fee:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	699b      	ldr	r3, [r3, #24]
 8001ff6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	430a      	orrs	r2, r1
 8001ffe:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	69d9      	ldr	r1, [r3, #28]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6a1a      	ldr	r2, [r3, #32]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	430a      	orrs	r2, r1
 800200e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	681a      	ldr	r2, [r3, #0]
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f042 0201 	orr.w	r2, r2, #1
 800201e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2200      	movs	r2, #0
 8002024:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2220      	movs	r2, #32
 800202a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2200      	movs	r2, #0
 8002032:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2200      	movs	r2, #0
 8002038:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800203c:	2300      	movs	r3, #0
}
 800203e:	4618      	mov	r0, r3
 8002040:	3708      	adds	r7, #8
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}
	...

08002048 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b088      	sub	sp, #32
 800204c:	af02      	add	r7, sp, #8
 800204e:	60f8      	str	r0, [r7, #12]
 8002050:	4608      	mov	r0, r1
 8002052:	4611      	mov	r1, r2
 8002054:	461a      	mov	r2, r3
 8002056:	4603      	mov	r3, r0
 8002058:	817b      	strh	r3, [r7, #10]
 800205a:	460b      	mov	r3, r1
 800205c:	813b      	strh	r3, [r7, #8]
 800205e:	4613      	mov	r3, r2
 8002060:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002068:	b2db      	uxtb	r3, r3
 800206a:	2b20      	cmp	r3, #32
 800206c:	f040 80fd 	bne.w	800226a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002070:	6a3b      	ldr	r3, [r7, #32]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d002      	beq.n	800207c <HAL_I2C_Mem_Read+0x34>
 8002076:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002078:	2b00      	cmp	r3, #0
 800207a:	d105      	bne.n	8002088 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002082:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002084:	2301      	movs	r3, #1
 8002086:	e0f1      	b.n	800226c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800208e:	2b01      	cmp	r3, #1
 8002090:	d101      	bne.n	8002096 <HAL_I2C_Mem_Read+0x4e>
 8002092:	2302      	movs	r3, #2
 8002094:	e0ea      	b.n	800226c <HAL_I2C_Mem_Read+0x224>
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	2201      	movs	r2, #1
 800209a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800209e:	f7ff f999 	bl	80013d4 <HAL_GetTick>
 80020a2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	9300      	str	r3, [sp, #0]
 80020a8:	2319      	movs	r3, #25
 80020aa:	2201      	movs	r2, #1
 80020ac:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80020b0:	68f8      	ldr	r0, [r7, #12]
 80020b2:	f001 fbd0 	bl	8003856 <I2C_WaitOnFlagUntilTimeout>
 80020b6:	4603      	mov	r3, r0
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d001      	beq.n	80020c0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80020bc:	2301      	movs	r3, #1
 80020be:	e0d5      	b.n	800226c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	2222      	movs	r2, #34	@ 0x22
 80020c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	2240      	movs	r2, #64	@ 0x40
 80020cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	2200      	movs	r2, #0
 80020d4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	6a3a      	ldr	r2, [r7, #32]
 80020da:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80020e0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	2200      	movs	r2, #0
 80020e6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80020e8:	88f8      	ldrh	r0, [r7, #6]
 80020ea:	893a      	ldrh	r2, [r7, #8]
 80020ec:	8979      	ldrh	r1, [r7, #10]
 80020ee:	697b      	ldr	r3, [r7, #20]
 80020f0:	9301      	str	r3, [sp, #4]
 80020f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020f4:	9300      	str	r3, [sp, #0]
 80020f6:	4603      	mov	r3, r0
 80020f8:	68f8      	ldr	r0, [r7, #12]
 80020fa:	f000 fdff 	bl	8002cfc <I2C_RequestMemoryRead>
 80020fe:	4603      	mov	r3, r0
 8002100:	2b00      	cmp	r3, #0
 8002102:	d005      	beq.n	8002110 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	2200      	movs	r2, #0
 8002108:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800210c:	2301      	movs	r3, #1
 800210e:	e0ad      	b.n	800226c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002114:	b29b      	uxth	r3, r3
 8002116:	2bff      	cmp	r3, #255	@ 0xff
 8002118:	d90e      	bls.n	8002138 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	22ff      	movs	r2, #255	@ 0xff
 800211e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002124:	b2da      	uxtb	r2, r3
 8002126:	8979      	ldrh	r1, [r7, #10]
 8002128:	4b52      	ldr	r3, [pc, #328]	@ (8002274 <HAL_I2C_Mem_Read+0x22c>)
 800212a:	9300      	str	r3, [sp, #0]
 800212c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002130:	68f8      	ldr	r0, [r7, #12]
 8002132:	f001 fd53 	bl	8003bdc <I2C_TransferConfig>
 8002136:	e00f      	b.n	8002158 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800213c:	b29a      	uxth	r2, r3
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002146:	b2da      	uxtb	r2, r3
 8002148:	8979      	ldrh	r1, [r7, #10]
 800214a:	4b4a      	ldr	r3, [pc, #296]	@ (8002274 <HAL_I2C_Mem_Read+0x22c>)
 800214c:	9300      	str	r3, [sp, #0]
 800214e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002152:	68f8      	ldr	r0, [r7, #12]
 8002154:	f001 fd42 	bl	8003bdc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	9300      	str	r3, [sp, #0]
 800215c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800215e:	2200      	movs	r2, #0
 8002160:	2104      	movs	r1, #4
 8002162:	68f8      	ldr	r0, [r7, #12]
 8002164:	f001 fb77 	bl	8003856 <I2C_WaitOnFlagUntilTimeout>
 8002168:	4603      	mov	r3, r0
 800216a:	2b00      	cmp	r3, #0
 800216c:	d001      	beq.n	8002172 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800216e:	2301      	movs	r3, #1
 8002170:	e07c      	b.n	800226c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800217c:	b2d2      	uxtb	r2, r2
 800217e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002184:	1c5a      	adds	r2, r3, #1
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800218e:	3b01      	subs	r3, #1
 8002190:	b29a      	uxth	r2, r3
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800219a:	b29b      	uxth	r3, r3
 800219c:	3b01      	subs	r3, #1
 800219e:	b29a      	uxth	r2, r3
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021a8:	b29b      	uxth	r3, r3
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d034      	beq.n	8002218 <HAL_I2C_Mem_Read+0x1d0>
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d130      	bne.n	8002218 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80021b6:	697b      	ldr	r3, [r7, #20]
 80021b8:	9300      	str	r3, [sp, #0]
 80021ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021bc:	2200      	movs	r2, #0
 80021be:	2180      	movs	r1, #128	@ 0x80
 80021c0:	68f8      	ldr	r0, [r7, #12]
 80021c2:	f001 fb48 	bl	8003856 <I2C_WaitOnFlagUntilTimeout>
 80021c6:	4603      	mov	r3, r0
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d001      	beq.n	80021d0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80021cc:	2301      	movs	r3, #1
 80021ce:	e04d      	b.n	800226c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021d4:	b29b      	uxth	r3, r3
 80021d6:	2bff      	cmp	r3, #255	@ 0xff
 80021d8:	d90e      	bls.n	80021f8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	22ff      	movs	r2, #255	@ 0xff
 80021de:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021e4:	b2da      	uxtb	r2, r3
 80021e6:	8979      	ldrh	r1, [r7, #10]
 80021e8:	2300      	movs	r3, #0
 80021ea:	9300      	str	r3, [sp, #0]
 80021ec:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80021f0:	68f8      	ldr	r0, [r7, #12]
 80021f2:	f001 fcf3 	bl	8003bdc <I2C_TransferConfig>
 80021f6:	e00f      	b.n	8002218 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021fc:	b29a      	uxth	r2, r3
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002206:	b2da      	uxtb	r2, r3
 8002208:	8979      	ldrh	r1, [r7, #10]
 800220a:	2300      	movs	r3, #0
 800220c:	9300      	str	r3, [sp, #0]
 800220e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002212:	68f8      	ldr	r0, [r7, #12]
 8002214:	f001 fce2 	bl	8003bdc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800221c:	b29b      	uxth	r3, r3
 800221e:	2b00      	cmp	r3, #0
 8002220:	d19a      	bne.n	8002158 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002222:	697a      	ldr	r2, [r7, #20]
 8002224:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002226:	68f8      	ldr	r0, [r7, #12]
 8002228:	f001 fbb5 	bl	8003996 <I2C_WaitOnSTOPFlagUntilTimeout>
 800222c:	4603      	mov	r3, r0
 800222e:	2b00      	cmp	r3, #0
 8002230:	d001      	beq.n	8002236 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002232:	2301      	movs	r3, #1
 8002234:	e01a      	b.n	800226c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	2220      	movs	r2, #32
 800223c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	6859      	ldr	r1, [r3, #4]
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681a      	ldr	r2, [r3, #0]
 8002248:	4b0b      	ldr	r3, [pc, #44]	@ (8002278 <HAL_I2C_Mem_Read+0x230>)
 800224a:	400b      	ands	r3, r1
 800224c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	2220      	movs	r2, #32
 8002252:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	2200      	movs	r2, #0
 800225a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	2200      	movs	r2, #0
 8002262:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002266:	2300      	movs	r3, #0
 8002268:	e000      	b.n	800226c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800226a:	2302      	movs	r3, #2
  }
}
 800226c:	4618      	mov	r0, r3
 800226e:	3718      	adds	r7, #24
 8002270:	46bd      	mov	sp, r7
 8002272:	bd80      	pop	{r7, pc}
 8002274:	80002400 	.word	0x80002400
 8002278:	fe00e800 	.word	0xfe00e800

0800227c <HAL_I2C_Mem_Read_DMA>:
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                       uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b088      	sub	sp, #32
 8002280:	af02      	add	r7, sp, #8
 8002282:	60f8      	str	r0, [r7, #12]
 8002284:	4608      	mov	r0, r1
 8002286:	4611      	mov	r1, r2
 8002288:	461a      	mov	r2, r3
 800228a:	4603      	mov	r3, r0
 800228c:	817b      	strh	r3, [r7, #10]
 800228e:	460b      	mov	r3, r1
 8002290:	813b      	strh	r3, [r7, #8]
 8002292:	4613      	mov	r3, r2
 8002294:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800229c:	b2db      	uxtb	r3, r3
 800229e:	2b20      	cmp	r3, #32
 80022a0:	f040 80c2 	bne.w	8002428 <HAL_I2C_Mem_Read_DMA+0x1ac>
  {
    if ((pData == NULL) || (Size == 0U))
 80022a4:	6a3b      	ldr	r3, [r7, #32]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d002      	beq.n	80022b0 <HAL_I2C_Mem_Read_DMA+0x34>
 80022aa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d105      	bne.n	80022bc <HAL_I2C_Mem_Read_DMA+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80022b6:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80022b8:	2301      	movs	r3, #1
 80022ba:	e0b6      	b.n	800242a <HAL_I2C_Mem_Read_DMA+0x1ae>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	699b      	ldr	r3, [r3, #24]
 80022c2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80022c6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80022ca:	d101      	bne.n	80022d0 <HAL_I2C_Mem_Read_DMA+0x54>
    {
      return HAL_BUSY;
 80022cc:	2302      	movs	r3, #2
 80022ce:	e0ac      	b.n	800242a <HAL_I2C_Mem_Read_DMA+0x1ae>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80022d6:	2b01      	cmp	r3, #1
 80022d8:	d101      	bne.n	80022de <HAL_I2C_Mem_Read_DMA+0x62>
 80022da:	2302      	movs	r3, #2
 80022dc:	e0a5      	b.n	800242a <HAL_I2C_Mem_Read_DMA+0x1ae>
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	2201      	movs	r2, #1
 80022e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	2222      	movs	r2, #34	@ 0x22
 80022ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	2240      	movs	r2, #64	@ 0x40
 80022f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	2200      	movs	r2, #0
 80022fa:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	6a3a      	ldr	r2, [r7, #32]
 8002300:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002306:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	4a4a      	ldr	r2, [pc, #296]	@ (8002434 <HAL_I2C_Mem_Read_DMA+0x1b8>)
 800230c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_DMA;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	4a49      	ldr	r2, [pc, #292]	@ (8002438 <HAL_I2C_Mem_Read_DMA+0x1bc>)
 8002312:	635a      	str	r2, [r3, #52]	@ 0x34
    hi2c->Devaddress  = DevAddress;
 8002314:	897a      	ldrh	r2, [r7, #10]
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	64da      	str	r2, [r3, #76]	@ 0x4c

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800231e:	b29b      	uxth	r3, r3
 8002320:	2bff      	cmp	r3, #255	@ 0xff
 8002322:	d903      	bls.n	800232c <HAL_I2C_Mem_Read_DMA+0xb0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	22ff      	movs	r2, #255	@ 0xff
 8002328:	851a      	strh	r2, [r3, #40]	@ 0x28
 800232a:	e004      	b.n	8002336 <HAL_I2C_Mem_Read_DMA+0xba>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002330:	b29a      	uxth	r2, r3
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	851a      	strh	r2, [r3, #40]	@ 0x28
    }

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002336:	88fb      	ldrh	r3, [r7, #6]
 8002338:	2b01      	cmp	r3, #1
 800233a:	d109      	bne.n	8002350 <HAL_I2C_Mem_Read_DMA+0xd4>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800233c:	893b      	ldrh	r3, [r7, #8]
 800233e:	b2da      	uxtb	r2, r3
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	f04f 32ff 	mov.w	r2, #4294967295
 800234c:	651a      	str	r2, [r3, #80]	@ 0x50
 800234e:	e00b      	b.n	8002368 <HAL_I2C_Mem_Read_DMA+0xec>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002350:	893b      	ldrh	r3, [r7, #8]
 8002352:	0a1b      	lsrs	r3, r3, #8
 8002354:	b29b      	uxth	r3, r3
 8002356:	b2da      	uxtb	r2, r3
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
 800235e:	893b      	ldrh	r3, [r7, #8]
 8002360:	b2db      	uxtb	r3, r3
 8002362:	461a      	mov	r2, r3
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    if (hi2c->hdmarx != NULL)
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800236c:	2b00      	cmp	r3, #0
 800236e:	d020      	beq.n	80023b2 <HAL_I2C_Mem_Read_DMA+0x136>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002374:	4a31      	ldr	r2, [pc, #196]	@ (800243c <HAL_I2C_Mem_Read_DMA+0x1c0>)
 8002376:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800237c:	4a30      	ldr	r2, [pc, #192]	@ (8002440 <HAL_I2C_Mem_Read_DMA+0x1c4>)
 800237e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002384:	2200      	movs	r2, #0
 8002386:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->hdmarx->XferAbortCallback = NULL;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800238c:	2200      	movs	r2, #0
 800238e:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the DMA channel */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	3324      	adds	r3, #36	@ 0x24
 800239a:	4619      	mov	r1, r3
 800239c:	6a3a      	ldr	r2, [r7, #32]
                                       hi2c->XferSize);
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 80023a2:	f7ff f9db 	bl	800175c <HAL_DMA_Start_IT>
 80023a6:	4603      	mov	r3, r0
 80023a8:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 80023aa:	7dfb      	ldrb	r3, [r7, #23]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d127      	bne.n	8002400 <HAL_I2C_Mem_Read_DMA+0x184>
 80023b0:	e013      	b.n	80023da <HAL_I2C_Mem_Read_DMA+0x15e>
      hi2c->State     = HAL_I2C_STATE_READY;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	2220      	movs	r2, #32
 80023b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	2200      	movs	r2, #0
 80023be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023c6:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	645a      	str	r2, [r3, #68]	@ 0x44
      __HAL_UNLOCK(hi2c);
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	2200      	movs	r2, #0
 80023d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	e027      	b.n	800242a <HAL_I2C_Mem_Read_DMA+0x1ae>
    {
      /* Send Slave Address and Memory Address */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80023da:	88fb      	ldrh	r3, [r7, #6]
 80023dc:	b2da      	uxtb	r2, r3
 80023de:	8979      	ldrh	r1, [r7, #10]
 80023e0:	4b18      	ldr	r3, [pc, #96]	@ (8002444 <HAL_I2C_Mem_Read_DMA+0x1c8>)
 80023e2:	9300      	str	r3, [sp, #0]
 80023e4:	2300      	movs	r3, #0
 80023e6:	68f8      	ldr	r0, [r7, #12]
 80023e8:	f001 fbf8 	bl	8003bdc <I2C_TransferConfig>

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	2200      	movs	r2, #0
 80023f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 80023f4:	2101      	movs	r1, #1
 80023f6:	68f8      	ldr	r0, [r7, #12]
 80023f8:	f001 fc22 	bl	8003c40 <I2C_Enable_IRQ>
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
 80023fc:	2300      	movs	r3, #0
 80023fe:	e014      	b.n	800242a <HAL_I2C_Mem_Read_DMA+0x1ae>
      hi2c->State     = HAL_I2C_STATE_READY;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	2220      	movs	r2, #32
 8002404:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	2200      	movs	r2, #0
 800240c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002414:	f043 0210 	orr.w	r2, r3, #16
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	645a      	str	r2, [r3, #68]	@ 0x44
      __HAL_UNLOCK(hi2c);
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	2200      	movs	r2, #0
 8002420:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002424:	2301      	movs	r3, #1
 8002426:	e000      	b.n	800242a <HAL_I2C_Mem_Read_DMA+0x1ae>
  }
  else
  {
    return HAL_BUSY;
 8002428:	2302      	movs	r3, #2
  }
}
 800242a:	4618      	mov	r0, r3
 800242c:	3718      	adds	r7, #24
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}
 8002432:	bf00      	nop
 8002434:	ffff0000 	.word	0xffff0000
 8002438:	08002901 	.word	0x08002901
 800243c:	08003757 	.word	0x08003757
 8002440:	080037ed 	.word	0x080037ed
 8002444:	80002000 	.word	0x80002000

08002448 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b084      	sub	sp, #16
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	699b      	ldr	r3, [r3, #24]
 8002456:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002464:	2b00      	cmp	r3, #0
 8002466:	d005      	beq.n	8002474 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800246c:	68ba      	ldr	r2, [r7, #8]
 800246e:	68f9      	ldr	r1, [r7, #12]
 8002470:	6878      	ldr	r0, [r7, #4]
 8002472:	4798      	blx	r3
  }
}
 8002474:	bf00      	nop
 8002476:	3710      	adds	r7, #16
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}

0800247c <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800247c:	b480      	push	{r7}
 800247e:	b083      	sub	sp, #12
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8002484:	bf00      	nop
 8002486:	370c      	adds	r7, #12
 8002488:	46bd      	mov	sp, r7
 800248a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248e:	4770      	bx	lr

08002490 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002490:	b480      	push	{r7}
 8002492:	b083      	sub	sp, #12
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8002498:	bf00      	nop
 800249a:	370c      	adds	r7, #12
 800249c:	46bd      	mov	sp, r7
 800249e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a2:	4770      	bx	lr

080024a4 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b083      	sub	sp, #12
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80024ac:	bf00      	nop
 80024ae:	370c      	adds	r7, #12
 80024b0:	46bd      	mov	sp, r7
 80024b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b6:	4770      	bx	lr

080024b8 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80024b8:	b480      	push	{r7}
 80024ba:	b083      	sub	sp, #12
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80024c0:	bf00      	nop
 80024c2:	370c      	adds	r7, #12
 80024c4:	46bd      	mov	sp, r7
 80024c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ca:	4770      	bx	lr

080024cc <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80024cc:	b480      	push	{r7}
 80024ce:	b083      	sub	sp, #12
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
 80024d4:	460b      	mov	r3, r1
 80024d6:	70fb      	strb	r3, [r7, #3]
 80024d8:	4613      	mov	r3, r2
 80024da:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80024dc:	bf00      	nop
 80024de:	370c      	adds	r7, #12
 80024e0:	46bd      	mov	sp, r7
 80024e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e6:	4770      	bx	lr

080024e8 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b083      	sub	sp, #12
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80024f0:	bf00      	nop
 80024f2:	370c      	adds	r7, #12
 80024f4:	46bd      	mov	sp, r7
 80024f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fa:	4770      	bx	lr

080024fc <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80024fc:	b480      	push	{r7}
 80024fe:	b083      	sub	sp, #12
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8002504:	bf00      	nop
 8002506:	370c      	adds	r7, #12
 8002508:	46bd      	mov	sp, r7
 800250a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250e:	4770      	bx	lr

08002510 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002510:	b480      	push	{r7}
 8002512:	b083      	sub	sp, #12
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002518:	bf00      	nop
 800251a:	370c      	adds	r7, #12
 800251c:	46bd      	mov	sp, r7
 800251e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002522:	4770      	bx	lr

08002524 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002524:	b480      	push	{r7}
 8002526:	b083      	sub	sp, #12
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800252c:	bf00      	nop
 800252e:	370c      	adds	r7, #12
 8002530:	46bd      	mov	sp, r7
 8002532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002536:	4770      	bx	lr

08002538 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b086      	sub	sp, #24
 800253c:	af00      	add	r7, sp, #0
 800253e:	60f8      	str	r0, [r7, #12]
 8002540:	60b9      	str	r1, [r7, #8]
 8002542:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002548:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800254a:	68bb      	ldr	r3, [r7, #8]
 800254c:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002554:	2b01      	cmp	r3, #1
 8002556:	d101      	bne.n	800255c <I2C_Slave_ISR_IT+0x24>
 8002558:	2302      	movs	r3, #2
 800255a:	e0e2      	b.n	8002722 <I2C_Slave_ISR_IT+0x1ea>
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	2201      	movs	r2, #1
 8002560:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002564:	693b      	ldr	r3, [r7, #16]
 8002566:	f003 0320 	and.w	r3, r3, #32
 800256a:	2b00      	cmp	r3, #0
 800256c:	d009      	beq.n	8002582 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002574:	2b00      	cmp	r3, #0
 8002576:	d004      	beq.n	8002582 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8002578:	6939      	ldr	r1, [r7, #16]
 800257a:	68f8      	ldr	r0, [r7, #12]
 800257c:	f000 fdf8 	bl	8003170 <I2C_ITSlaveCplt>
 8002580:	e0ca      	b.n	8002718 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002582:	693b      	ldr	r3, [r7, #16]
 8002584:	f003 0310 	and.w	r3, r3, #16
 8002588:	2b00      	cmp	r3, #0
 800258a:	d04b      	beq.n	8002624 <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002592:	2b00      	cmp	r3, #0
 8002594:	d046      	beq.n	8002624 <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800259a:	b29b      	uxth	r3, r3
 800259c:	2b00      	cmp	r3, #0
 800259e:	d128      	bne.n	80025f2 <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80025a6:	b2db      	uxtb	r3, r3
 80025a8:	2b28      	cmp	r3, #40	@ 0x28
 80025aa:	d108      	bne.n	80025be <I2C_Slave_ISR_IT+0x86>
 80025ac:	697b      	ldr	r3, [r7, #20]
 80025ae:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80025b2:	d104      	bne.n	80025be <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80025b4:	6939      	ldr	r1, [r7, #16]
 80025b6:	68f8      	ldr	r0, [r7, #12]
 80025b8:	f000 ff3e 	bl	8003438 <I2C_ITListenCplt>
 80025bc:	e031      	b.n	8002622 <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80025c4:	b2db      	uxtb	r3, r3
 80025c6:	2b29      	cmp	r3, #41	@ 0x29
 80025c8:	d10e      	bne.n	80025e8 <I2C_Slave_ISR_IT+0xb0>
 80025ca:	697b      	ldr	r3, [r7, #20]
 80025cc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80025d0:	d00a      	beq.n	80025e8 <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	2210      	movs	r2, #16
 80025d8:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80025da:	68f8      	ldr	r0, [r7, #12]
 80025dc:	f001 f897 	bl	800370e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80025e0:	68f8      	ldr	r0, [r7, #12]
 80025e2:	f000 fca0 	bl	8002f26 <I2C_ITSlaveSeqCplt>
 80025e6:	e01c      	b.n	8002622 <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	2210      	movs	r2, #16
 80025ee:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80025f0:	e08f      	b.n	8002712 <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	2210      	movs	r2, #16
 80025f8:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025fe:	f043 0204 	orr.w	r2, r3, #4
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d003      	beq.n	8002614 <I2C_Slave_ISR_IT+0xdc>
 800260c:	697b      	ldr	r3, [r7, #20]
 800260e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002612:	d17e      	bne.n	8002712 <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002618:	4619      	mov	r1, r3
 800261a:	68f8      	ldr	r0, [r7, #12]
 800261c:	f000 ff60 	bl	80034e0 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8002620:	e077      	b.n	8002712 <I2C_Slave_ISR_IT+0x1da>
 8002622:	e076      	b.n	8002712 <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002624:	693b      	ldr	r3, [r7, #16]
 8002626:	f003 0304 	and.w	r3, r3, #4
 800262a:	2b00      	cmp	r3, #0
 800262c:	d02f      	beq.n	800268e <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002634:	2b00      	cmp	r3, #0
 8002636:	d02a      	beq.n	800268e <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800263c:	b29b      	uxth	r3, r3
 800263e:	2b00      	cmp	r3, #0
 8002640:	d018      	beq.n	8002674 <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800264c:	b2d2      	uxtb	r2, r2
 800264e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002654:	1c5a      	adds	r2, r3, #1
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800265e:	3b01      	subs	r3, #1
 8002660:	b29a      	uxth	r2, r3
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800266a:	b29b      	uxth	r3, r3
 800266c:	3b01      	subs	r3, #1
 800266e:	b29a      	uxth	r2, r3
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002678:	b29b      	uxth	r3, r3
 800267a:	2b00      	cmp	r3, #0
 800267c:	d14b      	bne.n	8002716 <I2C_Slave_ISR_IT+0x1de>
 800267e:	697b      	ldr	r3, [r7, #20]
 8002680:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002684:	d047      	beq.n	8002716 <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8002686:	68f8      	ldr	r0, [r7, #12]
 8002688:	f000 fc4d 	bl	8002f26 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800268c:	e043      	b.n	8002716 <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	f003 0308 	and.w	r3, r3, #8
 8002694:	2b00      	cmp	r3, #0
 8002696:	d009      	beq.n	80026ac <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d004      	beq.n	80026ac <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80026a2:	6939      	ldr	r1, [r7, #16]
 80026a4:	68f8      	ldr	r0, [r7, #12]
 80026a6:	f000 fb7d 	bl	8002da4 <I2C_ITAddrCplt>
 80026aa:	e035      	b.n	8002718 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80026ac:	693b      	ldr	r3, [r7, #16]
 80026ae:	f003 0302 	and.w	r3, r3, #2
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d030      	beq.n	8002718 <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d02b      	beq.n	8002718 <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026c4:	b29b      	uxth	r3, r3
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d018      	beq.n	80026fc <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026ce:	781a      	ldrb	r2, [r3, #0]
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026da:	1c5a      	adds	r2, r3, #1
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026e4:	b29b      	uxth	r3, r3
 80026e6:	3b01      	subs	r3, #1
 80026e8:	b29a      	uxth	r2, r3
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026f2:	3b01      	subs	r3, #1
 80026f4:	b29a      	uxth	r2, r3
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	851a      	strh	r2, [r3, #40]	@ 0x28
 80026fa:	e00d      	b.n	8002718 <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80026fc:	697b      	ldr	r3, [r7, #20]
 80026fe:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002702:	d002      	beq.n	800270a <I2C_Slave_ISR_IT+0x1d2>
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d106      	bne.n	8002718 <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800270a:	68f8      	ldr	r0, [r7, #12]
 800270c:	f000 fc0b 	bl	8002f26 <I2C_ITSlaveSeqCplt>
 8002710:	e002      	b.n	8002718 <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 8002712:	bf00      	nop
 8002714:	e000      	b.n	8002718 <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 8002716:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	2200      	movs	r2, #0
 800271c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8002720:	2300      	movs	r3, #0
}
 8002722:	4618      	mov	r0, r3
 8002724:	3718      	adds	r7, #24
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}

0800272a <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 800272a:	b580      	push	{r7, lr}
 800272c:	b088      	sub	sp, #32
 800272e:	af02      	add	r7, sp, #8
 8002730:	60f8      	str	r0, [r7, #12]
 8002732:	60b9      	str	r1, [r7, #8]
 8002734:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800273c:	2b01      	cmp	r3, #1
 800273e:	d101      	bne.n	8002744 <I2C_Master_ISR_DMA+0x1a>
 8002740:	2302      	movs	r3, #2
 8002742:	e0d9      	b.n	80028f8 <I2C_Master_ISR_DMA+0x1ce>
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	2201      	movs	r2, #1
 8002748:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800274c:	68bb      	ldr	r3, [r7, #8]
 800274e:	f003 0310 	and.w	r3, r3, #16
 8002752:	2b00      	cmp	r3, #0
 8002754:	d016      	beq.n	8002784 <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800275c:	2b00      	cmp	r3, #0
 800275e:	d011      	beq.n	8002784 <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	2210      	movs	r2, #16
 8002766:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800276c:	f043 0204 	orr.w	r2, r3, #4
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8002774:	2120      	movs	r1, #32
 8002776:	68f8      	ldr	r0, [r7, #12]
 8002778:	f001 fa62 	bl	8003c40 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800277c:	68f8      	ldr	r0, [r7, #12]
 800277e:	f000 ffc6 	bl	800370e <I2C_Flush_TXDR>
 8002782:	e0b4      	b.n	80028ee <I2C_Master_ISR_DMA+0x1c4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800278a:	2b00      	cmp	r3, #0
 800278c:	d071      	beq.n	8002872 <I2C_Master_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8002794:	2b00      	cmp	r3, #0
 8002796:	d06c      	beq.n	8002872 <I2C_Master_ISR_DMA+0x148>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	681a      	ldr	r2, [r3, #0]
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80027a6:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027ac:	b29b      	uxth	r3, r3
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d04e      	beq.n	8002850 <I2C_Master_ISR_DMA+0x126>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	b29b      	uxth	r3, r3
 80027ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80027be:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027c4:	b29b      	uxth	r3, r3
 80027c6:	2bff      	cmp	r3, #255	@ 0xff
 80027c8:	d906      	bls.n	80027d8 <I2C_Master_ISR_DMA+0xae>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	22ff      	movs	r2, #255	@ 0xff
 80027ce:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 80027d0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80027d4:	617b      	str	r3, [r7, #20]
 80027d6:	e010      	b.n	80027fa <I2C_Master_ISR_DMA+0xd0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027dc:	b29a      	uxth	r2, r3
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027e6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80027ea:	d003      	beq.n	80027f4 <I2C_Master_ISR_DMA+0xca>
        {
          xfermode = hi2c->XferOptions;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027f0:	617b      	str	r3, [r7, #20]
 80027f2:	e002      	b.n	80027fa <I2C_Master_ISR_DMA+0xd0>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 80027f4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80027f8:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027fe:	b2da      	uxtb	r2, r3
 8002800:	8a79      	ldrh	r1, [r7, #18]
 8002802:	2300      	movs	r3, #0
 8002804:	9300      	str	r3, [sp, #0]
 8002806:	697b      	ldr	r3, [r7, #20]
 8002808:	68f8      	ldr	r0, [r7, #12]
 800280a:	f001 f9e7 	bl	8003bdc <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002812:	b29a      	uxth	r2, r3
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002818:	1ad3      	subs	r3, r2, r3
 800281a:	b29a      	uxth	r2, r3
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002826:	b2db      	uxtb	r3, r3
 8002828:	2b22      	cmp	r3, #34	@ 0x22
 800282a:	d108      	bne.n	800283e <I2C_Master_ISR_DMA+0x114>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	681a      	ldr	r2, [r3, #0]
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800283a:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800283c:	e057      	b.n	80028ee <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	681a      	ldr	r2, [r3, #0]
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800284c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800284e:	e04e      	b.n	80028ee <I2C_Master_ISR_DMA+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800285a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800285e:	d003      	beq.n	8002868 <I2C_Master_ISR_DMA+0x13e>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8002860:	68f8      	ldr	r0, [r7, #12]
 8002862:	f000 fb23 	bl	8002eac <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8002866:	e042      	b.n	80028ee <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002868:	2140      	movs	r1, #64	@ 0x40
 800286a:	68f8      	ldr	r0, [r7, #12]
 800286c:	f000 fe38 	bl	80034e0 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8002870:	e03d      	b.n	80028ee <I2C_Master_ISR_DMA+0x1c4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8002872:	68bb      	ldr	r3, [r7, #8]
 8002874:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002878:	2b00      	cmp	r3, #0
 800287a:	d028      	beq.n	80028ce <I2C_Master_ISR_DMA+0x1a4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8002882:	2b00      	cmp	r3, #0
 8002884:	d023      	beq.n	80028ce <I2C_Master_ISR_DMA+0x1a4>
  {
    if (hi2c->XferCount == 0U)
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800288a:	b29b      	uxth	r3, r3
 800288c:	2b00      	cmp	r3, #0
 800288e:	d119      	bne.n	80028c4 <I2C_Master_ISR_DMA+0x19a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800289a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800289e:	d025      	beq.n	80028ec <I2C_Master_ISR_DMA+0x1c2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028a4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80028a8:	d108      	bne.n	80028bc <I2C_Master_ISR_DMA+0x192>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	685a      	ldr	r2, [r3, #4]
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80028b8:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 80028ba:	e017      	b.n	80028ec <I2C_Master_ISR_DMA+0x1c2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 80028bc:	68f8      	ldr	r0, [r7, #12]
 80028be:	f000 faf5 	bl	8002eac <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 80028c2:	e013      	b.n	80028ec <I2C_Master_ISR_DMA+0x1c2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80028c4:	2140      	movs	r1, #64	@ 0x40
 80028c6:	68f8      	ldr	r0, [r7, #12]
 80028c8:	f000 fe0a 	bl	80034e0 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80028cc:	e00e      	b.n	80028ec <I2C_Master_ISR_DMA+0x1c2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80028ce:	68bb      	ldr	r3, [r7, #8]
 80028d0:	f003 0320 	and.w	r3, r3, #32
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d00a      	beq.n	80028ee <I2C_Master_ISR_DMA+0x1c4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d005      	beq.n	80028ee <I2C_Master_ISR_DMA+0x1c4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 80028e2:	68b9      	ldr	r1, [r7, #8]
 80028e4:	68f8      	ldr	r0, [r7, #12]
 80028e6:	f000 fb7b 	bl	8002fe0 <I2C_ITMasterCplt>
 80028ea:	e000      	b.n	80028ee <I2C_Master_ISR_DMA+0x1c4>
    if (hi2c->XferCount == 0U)
 80028ec:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	2200      	movs	r2, #0
 80028f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80028f6:	2300      	movs	r3, #0
}
 80028f8:	4618      	mov	r0, r3
 80028fa:	3718      	adds	r7, #24
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bd80      	pop	{r7, pc}

08002900 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b088      	sub	sp, #32
 8002904:	af02      	add	r7, sp, #8
 8002906:	60f8      	str	r0, [r7, #12]
 8002908:	60b9      	str	r1, [r7, #8]
 800290a:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 800290c:	4b8d      	ldr	r3, [pc, #564]	@ (8002b44 <I2C_Mem_ISR_DMA+0x244>)
 800290e:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002916:	2b01      	cmp	r3, #1
 8002918:	d101      	bne.n	800291e <I2C_Mem_ISR_DMA+0x1e>
 800291a:	2302      	movs	r3, #2
 800291c:	e10e      	b.n	8002b3c <I2C_Mem_ISR_DMA+0x23c>
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	2201      	movs	r2, #1
 8002922:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002926:	68bb      	ldr	r3, [r7, #8]
 8002928:	f003 0310 	and.w	r3, r3, #16
 800292c:	2b00      	cmp	r3, #0
 800292e:	d016      	beq.n	800295e <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002936:	2b00      	cmp	r3, #0
 8002938:	d011      	beq.n	800295e <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	2210      	movs	r2, #16
 8002940:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002946:	f043 0204 	orr.w	r2, r3, #4
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800294e:	2120      	movs	r1, #32
 8002950:	68f8      	ldr	r0, [r7, #12]
 8002952:	f001 f975 	bl	8003c40 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002956:	68f8      	ldr	r0, [r7, #12]
 8002958:	f000 fed9 	bl	800370e <I2C_Flush_TXDR>
 800295c:	e0e9      	b.n	8002b32 <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800295e:	68bb      	ldr	r3, [r7, #8]
 8002960:	f003 0302 	and.w	r3, r3, #2
 8002964:	2b00      	cmp	r3, #0
 8002966:	d00e      	beq.n	8002986 <I2C_Mem_ISR_DMA+0x86>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800296e:	2b00      	cmp	r3, #0
 8002970:	d009      	beq.n	8002986 <I2C_Mem_ISR_DMA+0x86>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	68fa      	ldr	r2, [r7, #12]
 8002978:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800297a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	f04f 32ff 	mov.w	r2, #4294967295
 8002982:	651a      	str	r2, [r3, #80]	@ 0x50
 8002984:	e0d5      	b.n	8002b32 <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8002986:	68bb      	ldr	r3, [r7, #8]
 8002988:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800298c:	2b00      	cmp	r3, #0
 800298e:	d05f      	beq.n	8002a50 <I2C_Mem_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8002996:	2b00      	cmp	r3, #0
 8002998:	d05a      	beq.n	8002a50 <I2C_Mem_ISR_DMA+0x150>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800299a:	2101      	movs	r1, #1
 800299c:	68f8      	ldr	r0, [r7, #12]
 800299e:	f001 f9d3 	bl	8003d48 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80029a2:	2110      	movs	r1, #16
 80029a4:	68f8      	ldr	r0, [r7, #12]
 80029a6:	f001 f94b 	bl	8003c40 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029ae:	b29b      	uxth	r3, r3
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d048      	beq.n	8002a46 <I2C_Mem_ISR_DMA+0x146>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029b8:	b29b      	uxth	r3, r3
 80029ba:	2bff      	cmp	r3, #255	@ 0xff
 80029bc:	d910      	bls.n	80029e0 <I2C_Mem_ISR_DMA+0xe0>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	22ff      	movs	r2, #255	@ 0xff
 80029c2:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029c8:	b299      	uxth	r1, r3
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029ce:	b2da      	uxtb	r2, r3
 80029d0:	2300      	movs	r3, #0
 80029d2:	9300      	str	r3, [sp, #0]
 80029d4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80029d8:	68f8      	ldr	r0, [r7, #12]
 80029da:	f001 f8ff 	bl	8003bdc <I2C_TransferConfig>
 80029de:	e011      	b.n	8002a04 <I2C_Mem_ISR_DMA+0x104>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029e4:	b29a      	uxth	r2, r3
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029ee:	b299      	uxth	r1, r3
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029f4:	b2da      	uxtb	r2, r3
 80029f6:	2300      	movs	r3, #0
 80029f8:	9300      	str	r3, [sp, #0]
 80029fa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80029fe:	68f8      	ldr	r0, [r7, #12]
 8002a00:	f001 f8ec 	bl	8003bdc <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a08:	b29a      	uxth	r2, r3
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a0e:	1ad3      	subs	r3, r2, r3
 8002a10:	b29a      	uxth	r2, r3
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a1c:	b2db      	uxtb	r3, r3
 8002a1e:	2b22      	cmp	r3, #34	@ 0x22
 8002a20:	d108      	bne.n	8002a34 <I2C_Mem_ISR_DMA+0x134>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	681a      	ldr	r2, [r3, #0]
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002a30:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8002a32:	e07e      	b.n	8002b32 <I2C_Mem_ISR_DMA+0x232>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	681a      	ldr	r2, [r3, #0]
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002a42:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8002a44:	e075      	b.n	8002b32 <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002a46:	2140      	movs	r1, #64	@ 0x40
 8002a48:	68f8      	ldr	r0, [r7, #12]
 8002a4a:	f000 fd49 	bl	80034e0 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8002a4e:	e070      	b.n	8002b32 <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d05d      	beq.n	8002b16 <I2C_Mem_ISR_DMA+0x216>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d058      	beq.n	8002b16 <I2C_Mem_ISR_DMA+0x216>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002a64:	2101      	movs	r1, #1
 8002a66:	68f8      	ldr	r0, [r7, #12]
 8002a68:	f001 f96e 	bl	8003d48 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8002a6c:	2110      	movs	r1, #16
 8002a6e:	68f8      	ldr	r0, [r7, #12]
 8002a70:	f001 f8e6 	bl	8003c40 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a7a:	b2db      	uxtb	r3, r3
 8002a7c:	2b22      	cmp	r3, #34	@ 0x22
 8002a7e:	d101      	bne.n	8002a84 <I2C_Mem_ISR_DMA+0x184>
    {
      direction = I2C_GENERATE_START_READ;
 8002a80:	4b31      	ldr	r3, [pc, #196]	@ (8002b48 <I2C_Mem_ISR_DMA+0x248>)
 8002a82:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a88:	b29b      	uxth	r3, r3
 8002a8a:	2bff      	cmp	r3, #255	@ 0xff
 8002a8c:	d910      	bls.n	8002ab0 <I2C_Mem_ISR_DMA+0x1b0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	22ff      	movs	r2, #255	@ 0xff
 8002a92:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a98:	b299      	uxth	r1, r3
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a9e:	b2da      	uxtb	r2, r3
 8002aa0:	697b      	ldr	r3, [r7, #20]
 8002aa2:	9300      	str	r3, [sp, #0]
 8002aa4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002aa8:	68f8      	ldr	r0, [r7, #12]
 8002aaa:	f001 f897 	bl	8003bdc <I2C_TransferConfig>
 8002aae:	e011      	b.n	8002ad4 <I2C_Mem_ISR_DMA+0x1d4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ab4:	b29a      	uxth	r2, r3
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002abe:	b299      	uxth	r1, r3
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ac4:	b2da      	uxtb	r2, r3
 8002ac6:	697b      	ldr	r3, [r7, #20]
 8002ac8:	9300      	str	r3, [sp, #0]
 8002aca:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002ace:	68f8      	ldr	r0, [r7, #12]
 8002ad0:	f001 f884 	bl	8003bdc <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ad8:	b29a      	uxth	r2, r3
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ade:	1ad3      	subs	r3, r2, r3
 8002ae0:	b29a      	uxth	r2, r3
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002aec:	b2db      	uxtb	r3, r3
 8002aee:	2b22      	cmp	r3, #34	@ 0x22
 8002af0:	d108      	bne.n	8002b04 <I2C_Mem_ISR_DMA+0x204>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	681a      	ldr	r2, [r3, #0]
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002b00:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002b02:	e016      	b.n	8002b32 <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	681a      	ldr	r2, [r3, #0]
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002b12:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002b14:	e00d      	b.n	8002b32 <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002b16:	68bb      	ldr	r3, [r7, #8]
 8002b18:	f003 0320 	and.w	r3, r3, #32
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d008      	beq.n	8002b32 <I2C_Mem_ISR_DMA+0x232>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d003      	beq.n	8002b32 <I2C_Mem_ISR_DMA+0x232>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8002b2a:	68b9      	ldr	r1, [r7, #8]
 8002b2c:	68f8      	ldr	r0, [r7, #12]
 8002b2e:	f000 fa57 	bl	8002fe0 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	2200      	movs	r2, #0
 8002b36:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8002b3a:	2300      	movs	r3, #0
}
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	3718      	adds	r7, #24
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bd80      	pop	{r7, pc}
 8002b44:	80002000 	.word	0x80002000
 8002b48:	80002400 	.word	0x80002400

08002b4c <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b088      	sub	sp, #32
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	60f8      	str	r0, [r7, #12]
 8002b54:	60b9      	str	r1, [r7, #8]
 8002b56:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b5c:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002b68:	2b01      	cmp	r3, #1
 8002b6a:	d101      	bne.n	8002b70 <I2C_Slave_ISR_DMA+0x24>
 8002b6c:	2302      	movs	r3, #2
 8002b6e:	e0c0      	b.n	8002cf2 <I2C_Slave_ISR_DMA+0x1a6>
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	2201      	movs	r2, #1
 8002b74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	f003 0320 	and.w	r3, r3, #32
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d009      	beq.n	8002b96 <I2C_Slave_ISR_DMA+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d004      	beq.n	8002b96 <I2C_Slave_ISR_DMA+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8002b8c:	68b9      	ldr	r1, [r7, #8]
 8002b8e:	68f8      	ldr	r0, [r7, #12]
 8002b90:	f000 faee 	bl	8003170 <I2C_ITSlaveCplt>
 8002b94:	e0a8      	b.n	8002ce8 <I2C_Slave_ISR_DMA+0x19c>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002b96:	68bb      	ldr	r3, [r7, #8]
 8002b98:	f003 0310 	and.w	r3, r3, #16
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	f000 8095 	beq.w	8002ccc <I2C_Slave_ISR_DMA+0x180>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	f000 808f 	beq.w	8002ccc <I2C_Slave_ISR_DMA+0x180>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d104      	bne.n	8002bc2 <I2C_Slave_ISR_DMA+0x76>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d07d      	beq.n	8002cbe <I2C_Slave_ISR_DMA+0x172>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d00c      	beq.n	8002be4 <I2C_Slave_ISR_DMA+0x98>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d007      	beq.n	8002be4 <I2C_Slave_ISR_DMA+0x98>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d101      	bne.n	8002be4 <I2C_Slave_ISR_DMA+0x98>
          {
            treatdmanack = 1U;
 8002be0:	2301      	movs	r3, #1
 8002be2:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d00c      	beq.n	8002c06 <I2C_Slave_ISR_DMA+0xba>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d007      	beq.n	8002c06 <I2C_Slave_ISR_DMA+0xba>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d101      	bne.n	8002c06 <I2C_Slave_ISR_DMA+0xba>
          {
            treatdmanack = 1U;
 8002c02:	2301      	movs	r3, #1
 8002c04:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8002c06:	69fb      	ldr	r3, [r7, #28]
 8002c08:	2b01      	cmp	r3, #1
 8002c0a:	d128      	bne.n	8002c5e <I2C_Slave_ISR_DMA+0x112>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c12:	b2db      	uxtb	r3, r3
 8002c14:	2b28      	cmp	r3, #40	@ 0x28
 8002c16:	d108      	bne.n	8002c2a <I2C_Slave_ISR_DMA+0xde>
 8002c18:	69bb      	ldr	r3, [r7, #24]
 8002c1a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002c1e:	d104      	bne.n	8002c2a <I2C_Slave_ISR_DMA+0xde>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8002c20:	68b9      	ldr	r1, [r7, #8]
 8002c22:	68f8      	ldr	r0, [r7, #12]
 8002c24:	f000 fc08 	bl	8003438 <I2C_ITListenCplt>
 8002c28:	e048      	b.n	8002cbc <I2C_Slave_ISR_DMA+0x170>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c30:	b2db      	uxtb	r3, r3
 8002c32:	2b29      	cmp	r3, #41	@ 0x29
 8002c34:	d10e      	bne.n	8002c54 <I2C_Slave_ISR_DMA+0x108>
 8002c36:	69bb      	ldr	r3, [r7, #24]
 8002c38:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002c3c:	d00a      	beq.n	8002c54 <I2C_Slave_ISR_DMA+0x108>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	2210      	movs	r2, #16
 8002c44:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8002c46:	68f8      	ldr	r0, [r7, #12]
 8002c48:	f000 fd61 	bl	800370e <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8002c4c:	68f8      	ldr	r0, [r7, #12]
 8002c4e:	f000 f96a 	bl	8002f26 <I2C_ITSlaveSeqCplt>
 8002c52:	e033      	b.n	8002cbc <I2C_Slave_ISR_DMA+0x170>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	2210      	movs	r2, #16
 8002c5a:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8002c5c:	e034      	b.n	8002cc8 <I2C_Slave_ISR_DMA+0x17c>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	2210      	movs	r2, #16
 8002c64:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c6a:	f043 0204 	orr.w	r2, r3, #4
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c78:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002c7a:	69bb      	ldr	r3, [r7, #24]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d003      	beq.n	8002c88 <I2C_Slave_ISR_DMA+0x13c>
 8002c80:	69bb      	ldr	r3, [r7, #24]
 8002c82:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002c86:	d11f      	bne.n	8002cc8 <I2C_Slave_ISR_DMA+0x17c>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002c88:	7dfb      	ldrb	r3, [r7, #23]
 8002c8a:	2b21      	cmp	r3, #33	@ 0x21
 8002c8c:	d002      	beq.n	8002c94 <I2C_Slave_ISR_DMA+0x148>
 8002c8e:	7dfb      	ldrb	r3, [r7, #23]
 8002c90:	2b29      	cmp	r3, #41	@ 0x29
 8002c92:	d103      	bne.n	8002c9c <I2C_Slave_ISR_DMA+0x150>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	2221      	movs	r2, #33	@ 0x21
 8002c98:	631a      	str	r2, [r3, #48]	@ 0x30
 8002c9a:	e008      	b.n	8002cae <I2C_Slave_ISR_DMA+0x162>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002c9c:	7dfb      	ldrb	r3, [r7, #23]
 8002c9e:	2b22      	cmp	r3, #34	@ 0x22
 8002ca0:	d002      	beq.n	8002ca8 <I2C_Slave_ISR_DMA+0x15c>
 8002ca2:	7dfb      	ldrb	r3, [r7, #23]
 8002ca4:	2b2a      	cmp	r3, #42	@ 0x2a
 8002ca6:	d102      	bne.n	8002cae <I2C_Slave_ISR_DMA+0x162>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	2222      	movs	r2, #34	@ 0x22
 8002cac:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cb2:	4619      	mov	r1, r3
 8002cb4:	68f8      	ldr	r0, [r7, #12]
 8002cb6:	f000 fc13 	bl	80034e0 <I2C_ITError>
      if (treatdmanack == 1U)
 8002cba:	e005      	b.n	8002cc8 <I2C_Slave_ISR_DMA+0x17c>
 8002cbc:	e004      	b.n	8002cc8 <I2C_Slave_ISR_DMA+0x17c>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	2210      	movs	r2, #16
 8002cc4:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002cc6:	e00f      	b.n	8002ce8 <I2C_Slave_ISR_DMA+0x19c>
      if (treatdmanack == 1U)
 8002cc8:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002cca:	e00d      	b.n	8002ce8 <I2C_Slave_ISR_DMA+0x19c>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	f003 0308 	and.w	r3, r3, #8
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d008      	beq.n	8002ce8 <I2C_Slave_ISR_DMA+0x19c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d003      	beq.n	8002ce8 <I2C_Slave_ISR_DMA+0x19c>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8002ce0:	68b9      	ldr	r1, [r7, #8]
 8002ce2:	68f8      	ldr	r0, [r7, #12]
 8002ce4:	f000 f85e 	bl	8002da4 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	2200      	movs	r2, #0
 8002cec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8002cf0:	2300      	movs	r3, #0
}
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	3720      	adds	r7, #32
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}
	...

08002cfc <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b086      	sub	sp, #24
 8002d00:	af02      	add	r7, sp, #8
 8002d02:	60f8      	str	r0, [r7, #12]
 8002d04:	4608      	mov	r0, r1
 8002d06:	4611      	mov	r1, r2
 8002d08:	461a      	mov	r2, r3
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	817b      	strh	r3, [r7, #10]
 8002d0e:	460b      	mov	r3, r1
 8002d10:	813b      	strh	r3, [r7, #8]
 8002d12:	4613      	mov	r3, r2
 8002d14:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002d16:	88fb      	ldrh	r3, [r7, #6]
 8002d18:	b2da      	uxtb	r2, r3
 8002d1a:	8979      	ldrh	r1, [r7, #10]
 8002d1c:	4b20      	ldr	r3, [pc, #128]	@ (8002da0 <I2C_RequestMemoryRead+0xa4>)
 8002d1e:	9300      	str	r3, [sp, #0]
 8002d20:	2300      	movs	r3, #0
 8002d22:	68f8      	ldr	r0, [r7, #12]
 8002d24:	f000 ff5a 	bl	8003bdc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d28:	69fa      	ldr	r2, [r7, #28]
 8002d2a:	69b9      	ldr	r1, [r7, #24]
 8002d2c:	68f8      	ldr	r0, [r7, #12]
 8002d2e:	f000 fdeb 	bl	8003908 <I2C_WaitOnTXISFlagUntilTimeout>
 8002d32:	4603      	mov	r3, r0
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d001      	beq.n	8002d3c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002d38:	2301      	movs	r3, #1
 8002d3a:	e02c      	b.n	8002d96 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002d3c:	88fb      	ldrh	r3, [r7, #6]
 8002d3e:	2b01      	cmp	r3, #1
 8002d40:	d105      	bne.n	8002d4e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002d42:	893b      	ldrh	r3, [r7, #8]
 8002d44:	b2da      	uxtb	r2, r3
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	629a      	str	r2, [r3, #40]	@ 0x28
 8002d4c:	e015      	b.n	8002d7a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002d4e:	893b      	ldrh	r3, [r7, #8]
 8002d50:	0a1b      	lsrs	r3, r3, #8
 8002d52:	b29b      	uxth	r3, r3
 8002d54:	b2da      	uxtb	r2, r3
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d5c:	69fa      	ldr	r2, [r7, #28]
 8002d5e:	69b9      	ldr	r1, [r7, #24]
 8002d60:	68f8      	ldr	r0, [r7, #12]
 8002d62:	f000 fdd1 	bl	8003908 <I2C_WaitOnTXISFlagUntilTimeout>
 8002d66:	4603      	mov	r3, r0
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d001      	beq.n	8002d70 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	e012      	b.n	8002d96 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002d70:	893b      	ldrh	r3, [r7, #8]
 8002d72:	b2da      	uxtb	r2, r3
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002d7a:	69fb      	ldr	r3, [r7, #28]
 8002d7c:	9300      	str	r3, [sp, #0]
 8002d7e:	69bb      	ldr	r3, [r7, #24]
 8002d80:	2200      	movs	r2, #0
 8002d82:	2140      	movs	r1, #64	@ 0x40
 8002d84:	68f8      	ldr	r0, [r7, #12]
 8002d86:	f000 fd66 	bl	8003856 <I2C_WaitOnFlagUntilTimeout>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d001      	beq.n	8002d94 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002d90:	2301      	movs	r3, #1
 8002d92:	e000      	b.n	8002d96 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002d94:	2300      	movs	r3, #0
}
 8002d96:	4618      	mov	r0, r3
 8002d98:	3710      	adds	r7, #16
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}
 8002d9e:	bf00      	nop
 8002da0:	80002000 	.word	0x80002000

08002da4 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b084      	sub	sp, #16
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
 8002dac:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002db4:	b2db      	uxtb	r3, r3
 8002db6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002dba:	2b28      	cmp	r3, #40	@ 0x28
 8002dbc:	d16a      	bne.n	8002e94 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	699b      	ldr	r3, [r3, #24]
 8002dc4:	0c1b      	lsrs	r3, r3, #16
 8002dc6:	b2db      	uxtb	r3, r3
 8002dc8:	f003 0301 	and.w	r3, r3, #1
 8002dcc:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	699b      	ldr	r3, [r3, #24]
 8002dd4:	0c1b      	lsrs	r3, r3, #16
 8002dd6:	b29b      	uxth	r3, r3
 8002dd8:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8002ddc:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	689b      	ldr	r3, [r3, #8]
 8002de4:	b29b      	uxth	r3, r3
 8002de6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002dea:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	68db      	ldr	r3, [r3, #12]
 8002df2:	b29b      	uxth	r3, r3
 8002df4:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8002df8:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	68db      	ldr	r3, [r3, #12]
 8002dfe:	2b02      	cmp	r3, #2
 8002e00:	d138      	bne.n	8002e74 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8002e02:	897b      	ldrh	r3, [r7, #10]
 8002e04:	09db      	lsrs	r3, r3, #7
 8002e06:	b29a      	uxth	r2, r3
 8002e08:	89bb      	ldrh	r3, [r7, #12]
 8002e0a:	4053      	eors	r3, r2
 8002e0c:	b29b      	uxth	r3, r3
 8002e0e:	f003 0306 	and.w	r3, r3, #6
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d11c      	bne.n	8002e50 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8002e16:	897b      	ldrh	r3, [r7, #10]
 8002e18:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e1e:	1c5a      	adds	r2, r3, #1
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e28:	2b02      	cmp	r3, #2
 8002e2a:	d13b      	bne.n	8002ea4 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2200      	movs	r2, #0
 8002e30:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	2208      	movs	r2, #8
 8002e38:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002e42:	89ba      	ldrh	r2, [r7, #12]
 8002e44:	7bfb      	ldrb	r3, [r7, #15]
 8002e46:	4619      	mov	r1, r3
 8002e48:	6878      	ldr	r0, [r7, #4]
 8002e4a:	f7ff fb3f 	bl	80024cc <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002e4e:	e029      	b.n	8002ea4 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8002e50:	893b      	ldrh	r3, [r7, #8]
 8002e52:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002e54:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002e58:	6878      	ldr	r0, [r7, #4]
 8002e5a:	f000 ff75 	bl	8003d48 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2200      	movs	r2, #0
 8002e62:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002e66:	89ba      	ldrh	r2, [r7, #12]
 8002e68:	7bfb      	ldrb	r3, [r7, #15]
 8002e6a:	4619      	mov	r1, r3
 8002e6c:	6878      	ldr	r0, [r7, #4]
 8002e6e:	f7ff fb2d 	bl	80024cc <HAL_I2C_AddrCallback>
}
 8002e72:	e017      	b.n	8002ea4 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002e74:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002e78:	6878      	ldr	r0, [r7, #4]
 8002e7a:	f000 ff65 	bl	8003d48 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2200      	movs	r2, #0
 8002e82:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002e86:	89ba      	ldrh	r2, [r7, #12]
 8002e88:	7bfb      	ldrb	r3, [r7, #15]
 8002e8a:	4619      	mov	r1, r3
 8002e8c:	6878      	ldr	r0, [r7, #4]
 8002e8e:	f7ff fb1d 	bl	80024cc <HAL_I2C_AddrCallback>
}
 8002e92:	e007      	b.n	8002ea4 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	2208      	movs	r2, #8
 8002e9a:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8002ea4:	bf00      	nop
 8002ea6:	3710      	adds	r7, #16
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bd80      	pop	{r7, pc}

08002eac <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b082      	sub	sp, #8
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ec2:	b2db      	uxtb	r3, r3
 8002ec4:	2b21      	cmp	r3, #33	@ 0x21
 8002ec6:	d115      	bne.n	8002ef4 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2220      	movs	r2, #32
 8002ecc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2211      	movs	r2, #17
 8002ed4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002edc:	2101      	movs	r1, #1
 8002ede:	6878      	ldr	r0, [r7, #4]
 8002ee0:	f000 ff32 	bl	8003d48 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8002eec:	6878      	ldr	r0, [r7, #4]
 8002eee:	f7ff fac5 	bl	800247c <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002ef2:	e014      	b.n	8002f1e <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2220      	movs	r2, #32
 8002ef8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2212      	movs	r2, #18
 8002f00:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2200      	movs	r2, #0
 8002f06:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002f08:	2102      	movs	r1, #2
 8002f0a:	6878      	ldr	r0, [r7, #4]
 8002f0c:	f000 ff1c 	bl	8003d48 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2200      	movs	r2, #0
 8002f14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8002f18:	6878      	ldr	r0, [r7, #4]
 8002f1a:	f7ff fab9 	bl	8002490 <HAL_I2C_MasterRxCpltCallback>
}
 8002f1e:	bf00      	nop
 8002f20:	3708      	adds	r7, #8
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}

08002f26 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8002f26:	b580      	push	{r7, lr}
 8002f28:	b084      	sub	sp, #16
 8002f2a:	af00      	add	r7, sp, #0
 8002f2c:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2200      	movs	r2, #0
 8002f3a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d008      	beq.n	8002f5a <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	681a      	ldr	r2, [r3, #0]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002f56:	601a      	str	r2, [r3, #0]
 8002f58:	e00c      	b.n	8002f74 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d007      	beq.n	8002f74 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	681a      	ldr	r2, [r3, #0]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002f72:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f7a:	b2db      	uxtb	r3, r3
 8002f7c:	2b29      	cmp	r3, #41	@ 0x29
 8002f7e:	d112      	bne.n	8002fa6 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2228      	movs	r2, #40	@ 0x28
 8002f84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2221      	movs	r2, #33	@ 0x21
 8002f8c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002f8e:	2101      	movs	r1, #1
 8002f90:	6878      	ldr	r0, [r7, #4]
 8002f92:	f000 fed9 	bl	8003d48 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002f9e:	6878      	ldr	r0, [r7, #4]
 8002fa0:	f7ff fa80 	bl	80024a4 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8002fa4:	e017      	b.n	8002fd6 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002fac:	b2db      	uxtb	r3, r3
 8002fae:	2b2a      	cmp	r3, #42	@ 0x2a
 8002fb0:	d111      	bne.n	8002fd6 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2228      	movs	r2, #40	@ 0x28
 8002fb6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2222      	movs	r2, #34	@ 0x22
 8002fbe:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002fc0:	2102      	movs	r1, #2
 8002fc2:	6878      	ldr	r0, [r7, #4]
 8002fc4:	f000 fec0 	bl	8003d48 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2200      	movs	r2, #0
 8002fcc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002fd0:	6878      	ldr	r0, [r7, #4]
 8002fd2:	f7ff fa71 	bl	80024b8 <HAL_I2C_SlaveRxCpltCallback>
}
 8002fd6:	bf00      	nop
 8002fd8:	3710      	adds	r7, #16
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}
	...

08002fe0 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b086      	sub	sp, #24
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
 8002fe8:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	2220      	movs	r2, #32
 8002ff4:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ffc:	b2db      	uxtb	r3, r3
 8002ffe:	2b21      	cmp	r3, #33	@ 0x21
 8003000:	d107      	bne.n	8003012 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003002:	2101      	movs	r1, #1
 8003004:	6878      	ldr	r0, [r7, #4]
 8003006:	f000 fe9f 	bl	8003d48 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2211      	movs	r2, #17
 800300e:	631a      	str	r2, [r3, #48]	@ 0x30
 8003010:	e00c      	b.n	800302c <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003018:	b2db      	uxtb	r3, r3
 800301a:	2b22      	cmp	r3, #34	@ 0x22
 800301c:	d106      	bne.n	800302c <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800301e:	2102      	movs	r1, #2
 8003020:	6878      	ldr	r0, [r7, #4]
 8003022:	f000 fe91 	bl	8003d48 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2212      	movs	r2, #18
 800302a:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	6859      	ldr	r1, [r3, #4]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681a      	ldr	r2, [r3, #0]
 8003036:	4b4c      	ldr	r3, [pc, #304]	@ (8003168 <I2C_ITMasterCplt+0x188>)
 8003038:	400b      	ands	r3, r1
 800303a:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2200      	movs	r2, #0
 8003040:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	4a49      	ldr	r2, [pc, #292]	@ (800316c <I2C_ITMasterCplt+0x18c>)
 8003046:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8003048:	697b      	ldr	r3, [r7, #20]
 800304a:	f003 0310 	and.w	r3, r3, #16
 800304e:	2b00      	cmp	r3, #0
 8003050:	d009      	beq.n	8003066 <I2C_ITMasterCplt+0x86>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	2210      	movs	r2, #16
 8003058:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800305e:	f043 0204 	orr.w	r2, r3, #4
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800306c:	b2db      	uxtb	r3, r3
 800306e:	2b60      	cmp	r3, #96	@ 0x60
 8003070:	d10a      	bne.n	8003088 <I2C_ITMasterCplt+0xa8>
 8003072:	697b      	ldr	r3, [r7, #20]
 8003074:	f003 0304 	and.w	r3, r3, #4
 8003078:	2b00      	cmp	r3, #0
 800307a:	d005      	beq.n	8003088 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003082:	b2db      	uxtb	r3, r3
 8003084:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8003086:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8003088:	6878      	ldr	r0, [r7, #4]
 800308a:	f000 fb40 	bl	800370e <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003092:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800309a:	b2db      	uxtb	r3, r3
 800309c:	2b60      	cmp	r3, #96	@ 0x60
 800309e:	d002      	beq.n	80030a6 <I2C_ITMasterCplt+0xc6>
 80030a0:	693b      	ldr	r3, [r7, #16]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d006      	beq.n	80030b4 <I2C_ITMasterCplt+0xd4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030aa:	4619      	mov	r1, r3
 80030ac:	6878      	ldr	r0, [r7, #4]
 80030ae:	f000 fa17 	bl	80034e0 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 80030b2:	e054      	b.n	800315e <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80030ba:	b2db      	uxtb	r3, r3
 80030bc:	2b21      	cmp	r3, #33	@ 0x21
 80030be:	d124      	bne.n	800310a <I2C_ITMasterCplt+0x12a>
    hi2c->State = HAL_I2C_STATE_READY;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2220      	movs	r2, #32
 80030c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2200      	movs	r2, #0
 80030cc:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80030d4:	b2db      	uxtb	r3, r3
 80030d6:	2b40      	cmp	r3, #64	@ 0x40
 80030d8:	d10b      	bne.n	80030f2 <I2C_ITMasterCplt+0x112>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2200      	movs	r2, #0
 80030de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2200      	movs	r2, #0
 80030e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 80030ea:	6878      	ldr	r0, [r7, #4]
 80030ec:	f7ff fa06 	bl	80024fc <HAL_I2C_MemTxCpltCallback>
}
 80030f0:	e035      	b.n	800315e <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2200      	movs	r2, #0
 80030f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2200      	movs	r2, #0
 80030fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003102:	6878      	ldr	r0, [r7, #4]
 8003104:	f7ff f9ba 	bl	800247c <HAL_I2C_MasterTxCpltCallback>
}
 8003108:	e029      	b.n	800315e <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003110:	b2db      	uxtb	r3, r3
 8003112:	2b22      	cmp	r3, #34	@ 0x22
 8003114:	d123      	bne.n	800315e <I2C_ITMasterCplt+0x17e>
    hi2c->State = HAL_I2C_STATE_READY;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2220      	movs	r2, #32
 800311a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2200      	movs	r2, #0
 8003122:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800312a:	b2db      	uxtb	r3, r3
 800312c:	2b40      	cmp	r3, #64	@ 0x40
 800312e:	d10b      	bne.n	8003148 <I2C_ITMasterCplt+0x168>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2200      	movs	r2, #0
 8003134:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2200      	movs	r2, #0
 800313c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003140:	6878      	ldr	r0, [r7, #4]
 8003142:	f7fd fc97 	bl	8000a74 <HAL_I2C_MemRxCpltCallback>
}
 8003146:	e00a      	b.n	800315e <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2200      	movs	r2, #0
 800314c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2200      	movs	r2, #0
 8003154:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003158:	6878      	ldr	r0, [r7, #4]
 800315a:	f7ff f999 	bl	8002490 <HAL_I2C_MasterRxCpltCallback>
}
 800315e:	bf00      	nop
 8003160:	3718      	adds	r7, #24
 8003162:	46bd      	mov	sp, r7
 8003164:	bd80      	pop	{r7, pc}
 8003166:	bf00      	nop
 8003168:	fe00e800 	.word	0xfe00e800
 800316c:	ffff0000 	.word	0xffff0000

08003170 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b086      	sub	sp, #24
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
 8003178:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800318a:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003192:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	2220      	movs	r2, #32
 800319a:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800319c:	7afb      	ldrb	r3, [r7, #11]
 800319e:	2b21      	cmp	r3, #33	@ 0x21
 80031a0:	d002      	beq.n	80031a8 <I2C_ITSlaveCplt+0x38>
 80031a2:	7afb      	ldrb	r3, [r7, #11]
 80031a4:	2b29      	cmp	r3, #41	@ 0x29
 80031a6:	d108      	bne.n	80031ba <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80031a8:	f248 0101 	movw	r1, #32769	@ 0x8001
 80031ac:	6878      	ldr	r0, [r7, #4]
 80031ae:	f000 fdcb 	bl	8003d48 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2221      	movs	r2, #33	@ 0x21
 80031b6:	631a      	str	r2, [r3, #48]	@ 0x30
 80031b8:	e019      	b.n	80031ee <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80031ba:	7afb      	ldrb	r3, [r7, #11]
 80031bc:	2b22      	cmp	r3, #34	@ 0x22
 80031be:	d002      	beq.n	80031c6 <I2C_ITSlaveCplt+0x56>
 80031c0:	7afb      	ldrb	r3, [r7, #11]
 80031c2:	2b2a      	cmp	r3, #42	@ 0x2a
 80031c4:	d108      	bne.n	80031d8 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80031c6:	f248 0102 	movw	r1, #32770	@ 0x8002
 80031ca:	6878      	ldr	r0, [r7, #4]
 80031cc:	f000 fdbc 	bl	8003d48 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2222      	movs	r2, #34	@ 0x22
 80031d4:	631a      	str	r2, [r3, #48]	@ 0x30
 80031d6:	e00a      	b.n	80031ee <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 80031d8:	7afb      	ldrb	r3, [r7, #11]
 80031da:	2b28      	cmp	r3, #40	@ 0x28
 80031dc:	d107      	bne.n	80031ee <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 80031de:	f248 0103 	movw	r1, #32771	@ 0x8003
 80031e2:	6878      	ldr	r0, [r7, #4]
 80031e4:	f000 fdb0 	bl	8003d48 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2200      	movs	r2, #0
 80031ec:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	685a      	ldr	r2, [r3, #4]
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80031fc:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	6859      	ldr	r1, [r3, #4]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681a      	ldr	r2, [r3, #0]
 8003208:	4b89      	ldr	r3, [pc, #548]	@ (8003430 <I2C_ITSlaveCplt+0x2c0>)
 800320a:	400b      	ands	r3, r1
 800320c:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800320e:	6878      	ldr	r0, [r7, #4]
 8003210:	f000 fa7d 	bl	800370e <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003214:	693b      	ldr	r3, [r7, #16]
 8003216:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800321a:	2b00      	cmp	r3, #0
 800321c:	d013      	beq.n	8003246 <I2C_ITSlaveCplt+0xd6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	681a      	ldr	r2, [r3, #0]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800322c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003232:	2b00      	cmp	r3, #0
 8003234:	d01f      	beq.n	8003276 <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	b29a      	uxth	r2, r3
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003244:	e017      	b.n	8003276 <I2C_ITSlaveCplt+0x106>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003246:	693b      	ldr	r3, [r7, #16]
 8003248:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800324c:	2b00      	cmp	r3, #0
 800324e:	d012      	beq.n	8003276 <I2C_ITSlaveCplt+0x106>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	681a      	ldr	r2, [r3, #0]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800325e:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003264:	2b00      	cmp	r3, #0
 8003266:	d006      	beq.n	8003276 <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	b29a      	uxth	r2, r3
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8003276:	697b      	ldr	r3, [r7, #20]
 8003278:	f003 0304 	and.w	r3, r3, #4
 800327c:	2b00      	cmp	r3, #0
 800327e:	d020      	beq.n	80032c2 <I2C_ITSlaveCplt+0x152>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8003280:	697b      	ldr	r3, [r7, #20]
 8003282:	f023 0304 	bic.w	r3, r3, #4
 8003286:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003292:	b2d2      	uxtb	r2, r2
 8003294:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800329a:	1c5a      	adds	r2, r3, #1
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d00c      	beq.n	80032c2 <I2C_ITSlaveCplt+0x152>
    {
      hi2c->XferSize--;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032ac:	3b01      	subs	r3, #1
 80032ae:	b29a      	uxth	r2, r3
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032b8:	b29b      	uxth	r3, r3
 80032ba:	3b01      	subs	r3, #1
 80032bc:	b29a      	uxth	r2, r3
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032c6:	b29b      	uxth	r3, r3
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d005      	beq.n	80032d8 <I2C_ITSlaveCplt+0x168>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032d0:	f043 0204 	orr.w	r2, r3, #4
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80032d8:	697b      	ldr	r3, [r7, #20]
 80032da:	f003 0310 	and.w	r3, r3, #16
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d049      	beq.n	8003376 <I2C_ITSlaveCplt+0x206>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d044      	beq.n	8003376 <I2C_ITSlaveCplt+0x206>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032f0:	b29b      	uxth	r3, r3
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d128      	bne.n	8003348 <I2C_ITSlaveCplt+0x1d8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80032fc:	b2db      	uxtb	r3, r3
 80032fe:	2b28      	cmp	r3, #40	@ 0x28
 8003300:	d108      	bne.n	8003314 <I2C_ITSlaveCplt+0x1a4>
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003308:	d104      	bne.n	8003314 <I2C_ITSlaveCplt+0x1a4>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800330a:	6979      	ldr	r1, [r7, #20]
 800330c:	6878      	ldr	r0, [r7, #4]
 800330e:	f000 f893 	bl	8003438 <I2C_ITListenCplt>
 8003312:	e030      	b.n	8003376 <I2C_ITSlaveCplt+0x206>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800331a:	b2db      	uxtb	r3, r3
 800331c:	2b29      	cmp	r3, #41	@ 0x29
 800331e:	d10e      	bne.n	800333e <I2C_ITSlaveCplt+0x1ce>
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003326:	d00a      	beq.n	800333e <I2C_ITSlaveCplt+0x1ce>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	2210      	movs	r2, #16
 800332e:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8003330:	6878      	ldr	r0, [r7, #4]
 8003332:	f000 f9ec 	bl	800370e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003336:	6878      	ldr	r0, [r7, #4]
 8003338:	f7ff fdf5 	bl	8002f26 <I2C_ITSlaveSeqCplt>
 800333c:	e01b      	b.n	8003376 <I2C_ITSlaveCplt+0x206>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	2210      	movs	r2, #16
 8003344:	61da      	str	r2, [r3, #28]
 8003346:	e016      	b.n	8003376 <I2C_ITSlaveCplt+0x206>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	2210      	movs	r2, #16
 800334e:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003354:	f043 0204 	orr.w	r2, r3, #4
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d003      	beq.n	800336a <I2C_ITSlaveCplt+0x1fa>
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003368:	d105      	bne.n	8003376 <I2C_ITSlaveCplt+0x206>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800336e:	4619      	mov	r1, r3
 8003370:	6878      	ldr	r0, [r7, #4]
 8003372:	f000 f8b5 	bl	80034e0 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2200      	movs	r2, #0
 800337a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2200      	movs	r2, #0
 8003382:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003388:	2b00      	cmp	r3, #0
 800338a:	d010      	beq.n	80033ae <I2C_ITSlaveCplt+0x23e>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003390:	4619      	mov	r1, r3
 8003392:	6878      	ldr	r0, [r7, #4]
 8003394:	f000 f8a4 	bl	80034e0 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800339e:	b2db      	uxtb	r3, r3
 80033a0:	2b28      	cmp	r3, #40	@ 0x28
 80033a2:	d141      	bne.n	8003428 <I2C_ITSlaveCplt+0x2b8>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80033a4:	6979      	ldr	r1, [r7, #20]
 80033a6:	6878      	ldr	r0, [r7, #4]
 80033a8:	f000 f846 	bl	8003438 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80033ac:	e03c      	b.n	8003428 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033b2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80033b6:	d014      	beq.n	80033e2 <I2C_ITSlaveCplt+0x272>
    I2C_ITSlaveSeqCplt(hi2c);
 80033b8:	6878      	ldr	r0, [r7, #4]
 80033ba:	f7ff fdb4 	bl	8002f26 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	4a1c      	ldr	r2, [pc, #112]	@ (8003434 <I2C_ITSlaveCplt+0x2c4>)
 80033c2:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2220      	movs	r2, #32
 80033c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2200      	movs	r2, #0
 80033d0:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2200      	movs	r2, #0
 80033d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 80033da:	6878      	ldr	r0, [r7, #4]
 80033dc:	f7ff f884 	bl	80024e8 <HAL_I2C_ListenCpltCallback>
}
 80033e0:	e022      	b.n	8003428 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80033e8:	b2db      	uxtb	r3, r3
 80033ea:	2b22      	cmp	r3, #34	@ 0x22
 80033ec:	d10e      	bne.n	800340c <I2C_ITSlaveCplt+0x29c>
    hi2c->State = HAL_I2C_STATE_READY;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2220      	movs	r2, #32
 80033f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2200      	movs	r2, #0
 80033fa:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2200      	movs	r2, #0
 8003400:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003404:	6878      	ldr	r0, [r7, #4]
 8003406:	f7ff f857 	bl	80024b8 <HAL_I2C_SlaveRxCpltCallback>
}
 800340a:	e00d      	b.n	8003428 <I2C_ITSlaveCplt+0x2b8>
    hi2c->State = HAL_I2C_STATE_READY;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2220      	movs	r2, #32
 8003410:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2200      	movs	r2, #0
 8003418:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2200      	movs	r2, #0
 800341e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003422:	6878      	ldr	r0, [r7, #4]
 8003424:	f7ff f83e 	bl	80024a4 <HAL_I2C_SlaveTxCpltCallback>
}
 8003428:	bf00      	nop
 800342a:	3718      	adds	r7, #24
 800342c:	46bd      	mov	sp, r7
 800342e:	bd80      	pop	{r7, pc}
 8003430:	fe00e800 	.word	0xfe00e800
 8003434:	ffff0000 	.word	0xffff0000

08003438 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b082      	sub	sp, #8
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
 8003440:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	4a25      	ldr	r2, [pc, #148]	@ (80034dc <I2C_ITListenCplt+0xa4>)
 8003446:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2200      	movs	r2, #0
 800344c:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2220      	movs	r2, #32
 8003452:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2200      	movs	r2, #0
 800345a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2200      	movs	r2, #0
 8003462:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	f003 0304 	and.w	r3, r3, #4
 800346a:	2b00      	cmp	r3, #0
 800346c:	d022      	beq.n	80034b4 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003478:	b2d2      	uxtb	r2, r2
 800347a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003480:	1c5a      	adds	r2, r3, #1
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800348a:	2b00      	cmp	r3, #0
 800348c:	d012      	beq.n	80034b4 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003492:	3b01      	subs	r3, #1
 8003494:	b29a      	uxth	r2, r3
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800349e:	b29b      	uxth	r3, r3
 80034a0:	3b01      	subs	r3, #1
 80034a2:	b29a      	uxth	r2, r3
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034ac:	f043 0204 	orr.w	r2, r3, #4
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80034b4:	f248 0103 	movw	r1, #32771	@ 0x8003
 80034b8:	6878      	ldr	r0, [r7, #4]
 80034ba:	f000 fc45 	bl	8003d48 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	2210      	movs	r2, #16
 80034c4:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2200      	movs	r2, #0
 80034ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80034ce:	6878      	ldr	r0, [r7, #4]
 80034d0:	f7ff f80a 	bl	80024e8 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80034d4:	bf00      	nop
 80034d6:	3708      	adds	r7, #8
 80034d8:	46bd      	mov	sp, r7
 80034da:	bd80      	pop	{r7, pc}
 80034dc:	ffff0000 	.word	0xffff0000

080034e0 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b084      	sub	sp, #16
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
 80034e8:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80034f0:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2200      	movs	r2, #0
 80034f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	4a6d      	ldr	r2, [pc, #436]	@ (80036b4 <I2C_ITError+0x1d4>)
 80034fe:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2200      	movs	r2, #0
 8003504:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	431a      	orrs	r2, r3
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8003512:	7bfb      	ldrb	r3, [r7, #15]
 8003514:	2b28      	cmp	r3, #40	@ 0x28
 8003516:	d005      	beq.n	8003524 <I2C_ITError+0x44>
 8003518:	7bfb      	ldrb	r3, [r7, #15]
 800351a:	2b29      	cmp	r3, #41	@ 0x29
 800351c:	d002      	beq.n	8003524 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800351e:	7bfb      	ldrb	r3, [r7, #15]
 8003520:	2b2a      	cmp	r3, #42	@ 0x2a
 8003522:	d10b      	bne.n	800353c <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003524:	2103      	movs	r1, #3
 8003526:	6878      	ldr	r0, [r7, #4]
 8003528:	f000 fc0e 	bl	8003d48 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2228      	movs	r2, #40	@ 0x28
 8003530:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	4a60      	ldr	r2, [pc, #384]	@ (80036b8 <I2C_ITError+0x1d8>)
 8003538:	635a      	str	r2, [r3, #52]	@ 0x34
 800353a:	e030      	b.n	800359e <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800353c:	f248 0103 	movw	r1, #32771	@ 0x8003
 8003540:	6878      	ldr	r0, [r7, #4]
 8003542:	f000 fc01 	bl	8003d48 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003546:	6878      	ldr	r0, [r7, #4]
 8003548:	f000 f8e1 	bl	800370e <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003552:	b2db      	uxtb	r3, r3
 8003554:	2b60      	cmp	r3, #96	@ 0x60
 8003556:	d01f      	beq.n	8003598 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2220      	movs	r2, #32
 800355c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	699b      	ldr	r3, [r3, #24]
 8003566:	f003 0320 	and.w	r3, r3, #32
 800356a:	2b20      	cmp	r3, #32
 800356c:	d114      	bne.n	8003598 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	699b      	ldr	r3, [r3, #24]
 8003574:	f003 0310 	and.w	r3, r3, #16
 8003578:	2b10      	cmp	r3, #16
 800357a:	d109      	bne.n	8003590 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	2210      	movs	r2, #16
 8003582:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003588:	f043 0204 	orr.w	r2, r3, #4
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	2220      	movs	r2, #32
 8003596:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2200      	movs	r2, #0
 800359c:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035a2:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d039      	beq.n	8003620 <I2C_ITError+0x140>
 80035ac:	68bb      	ldr	r3, [r7, #8]
 80035ae:	2b11      	cmp	r3, #17
 80035b0:	d002      	beq.n	80035b8 <I2C_ITError+0xd8>
 80035b2:	68bb      	ldr	r3, [r7, #8]
 80035b4:	2b21      	cmp	r3, #33	@ 0x21
 80035b6:	d133      	bne.n	8003620 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80035c2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80035c6:	d107      	bne.n	80035d8 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	681a      	ldr	r2, [r3, #0]
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80035d6:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035dc:	4618      	mov	r0, r3
 80035de:	f7fe fa4e 	bl	8001a7e <HAL_DMA_GetState>
 80035e2:	4603      	mov	r3, r0
 80035e4:	2b01      	cmp	r3, #1
 80035e6:	d017      	beq.n	8003618 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035ec:	4a33      	ldr	r2, [pc, #204]	@ (80036bc <I2C_ITError+0x1dc>)
 80035ee:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2200      	movs	r2, #0
 80035f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035fc:	4618      	mov	r0, r3
 80035fe:	f7fe f928 	bl	8001852 <HAL_DMA_Abort_IT>
 8003602:	4603      	mov	r3, r0
 8003604:	2b00      	cmp	r3, #0
 8003606:	d04d      	beq.n	80036a4 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800360c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800360e:	687a      	ldr	r2, [r7, #4]
 8003610:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003612:	4610      	mov	r0, r2
 8003614:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003616:	e045      	b.n	80036a4 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003618:	6878      	ldr	r0, [r7, #4]
 800361a:	f000 f851 	bl	80036c0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800361e:	e041      	b.n	80036a4 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003624:	2b00      	cmp	r3, #0
 8003626:	d039      	beq.n	800369c <I2C_ITError+0x1bc>
 8003628:	68bb      	ldr	r3, [r7, #8]
 800362a:	2b12      	cmp	r3, #18
 800362c:	d002      	beq.n	8003634 <I2C_ITError+0x154>
 800362e:	68bb      	ldr	r3, [r7, #8]
 8003630:	2b22      	cmp	r3, #34	@ 0x22
 8003632:	d133      	bne.n	800369c <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800363e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003642:	d107      	bne.n	8003654 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	681a      	ldr	r2, [r3, #0]
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003652:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003658:	4618      	mov	r0, r3
 800365a:	f7fe fa10 	bl	8001a7e <HAL_DMA_GetState>
 800365e:	4603      	mov	r3, r0
 8003660:	2b01      	cmp	r3, #1
 8003662:	d017      	beq.n	8003694 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003668:	4a14      	ldr	r2, [pc, #80]	@ (80036bc <I2C_ITError+0x1dc>)
 800366a:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2200      	movs	r2, #0
 8003670:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003678:	4618      	mov	r0, r3
 800367a:	f7fe f8ea 	bl	8001852 <HAL_DMA_Abort_IT>
 800367e:	4603      	mov	r3, r0
 8003680:	2b00      	cmp	r3, #0
 8003682:	d011      	beq.n	80036a8 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003688:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800368a:	687a      	ldr	r2, [r7, #4]
 800368c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800368e:	4610      	mov	r0, r2
 8003690:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003692:	e009      	b.n	80036a8 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003694:	6878      	ldr	r0, [r7, #4]
 8003696:	f000 f813 	bl	80036c0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800369a:	e005      	b.n	80036a8 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800369c:	6878      	ldr	r0, [r7, #4]
 800369e:	f000 f80f 	bl	80036c0 <I2C_TreatErrorCallback>
  }
}
 80036a2:	e002      	b.n	80036aa <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80036a4:	bf00      	nop
 80036a6:	e000      	b.n	80036aa <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80036a8:	bf00      	nop
}
 80036aa:	bf00      	nop
 80036ac:	3710      	adds	r7, #16
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}
 80036b2:	bf00      	nop
 80036b4:	ffff0000 	.word	0xffff0000
 80036b8:	08002539 	.word	0x08002539
 80036bc:	0800381b 	.word	0x0800381b

080036c0 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b082      	sub	sp, #8
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80036ce:	b2db      	uxtb	r3, r3
 80036d0:	2b60      	cmp	r3, #96	@ 0x60
 80036d2:	d10e      	bne.n	80036f2 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2220      	movs	r2, #32
 80036d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2200      	movs	r2, #0
 80036e0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2200      	movs	r2, #0
 80036e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80036ea:	6878      	ldr	r0, [r7, #4]
 80036ec:	f7fe ff1a 	bl	8002524 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80036f0:	e009      	b.n	8003706 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2200      	movs	r2, #0
 80036f6:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2200      	movs	r2, #0
 80036fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8003700:	6878      	ldr	r0, [r7, #4]
 8003702:	f7fe ff05 	bl	8002510 <HAL_I2C_ErrorCallback>
}
 8003706:	bf00      	nop
 8003708:	3708      	adds	r7, #8
 800370a:	46bd      	mov	sp, r7
 800370c:	bd80      	pop	{r7, pc}

0800370e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800370e:	b480      	push	{r7}
 8003710:	b083      	sub	sp, #12
 8003712:	af00      	add	r7, sp, #0
 8003714:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	699b      	ldr	r3, [r3, #24]
 800371c:	f003 0302 	and.w	r3, r3, #2
 8003720:	2b02      	cmp	r3, #2
 8003722:	d103      	bne.n	800372c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	2200      	movs	r2, #0
 800372a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	699b      	ldr	r3, [r3, #24]
 8003732:	f003 0301 	and.w	r3, r3, #1
 8003736:	2b01      	cmp	r3, #1
 8003738:	d007      	beq.n	800374a <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	699a      	ldr	r2, [r3, #24]
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f042 0201 	orr.w	r2, r2, #1
 8003748:	619a      	str	r2, [r3, #24]
  }
}
 800374a:	bf00      	nop
 800374c:	370c      	adds	r7, #12
 800374e:	46bd      	mov	sp, r7
 8003750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003754:	4770      	bx	lr

08003756 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003756:	b580      	push	{r7, lr}
 8003758:	b084      	sub	sp, #16
 800375a:	af00      	add	r7, sp, #0
 800375c:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003762:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	681a      	ldr	r2, [r3, #0]
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003772:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003778:	b29b      	uxth	r3, r3
 800377a:	2b00      	cmp	r3, #0
 800377c:	d104      	bne.n	8003788 <I2C_DMAMasterReceiveCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800377e:	2120      	movs	r1, #32
 8003780:	68f8      	ldr	r0, [r7, #12]
 8003782:	f000 fa5d 	bl	8003c40 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8003786:	e02d      	b.n	80037e4 <I2C_DMAMasterReceiveCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800378c:	68fa      	ldr	r2, [r7, #12]
 800378e:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8003790:	441a      	add	r2, r3
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800379a:	b29b      	uxth	r3, r3
 800379c:	2bff      	cmp	r3, #255	@ 0xff
 800379e:	d903      	bls.n	80037a8 <I2C_DMAMasterReceiveCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	22ff      	movs	r2, #255	@ 0xff
 80037a4:	851a      	strh	r2, [r3, #40]	@ 0x28
 80037a6:	e004      	b.n	80037b2 <I2C_DMAMasterReceiveCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037ac:	b29a      	uxth	r2, r3
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	3324      	adds	r3, #36	@ 0x24
 80037bc:	4619      	mov	r1, r3
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037c2:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 80037c8:	f7fd ffc8 	bl	800175c <HAL_DMA_Start_IT>
 80037cc:	4603      	mov	r3, r0
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d004      	beq.n	80037dc <I2C_DMAMasterReceiveCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 80037d2:	2110      	movs	r1, #16
 80037d4:	68f8      	ldr	r0, [r7, #12]
 80037d6:	f7ff fe83 	bl	80034e0 <I2C_ITError>
}
 80037da:	e003      	b.n	80037e4 <I2C_DMAMasterReceiveCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 80037dc:	2140      	movs	r1, #64	@ 0x40
 80037de:	68f8      	ldr	r0, [r7, #12]
 80037e0:	f000 fa2e 	bl	8003c40 <I2C_Enable_IRQ>
}
 80037e4:	bf00      	nop
 80037e6:	3710      	adds	r7, #16
 80037e8:	46bd      	mov	sp, r7
 80037ea:	bd80      	pop	{r7, pc}

080037ec <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b084      	sub	sp, #16
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037f8:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	685a      	ldr	r2, [r3, #4]
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003808:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800380a:	2110      	movs	r1, #16
 800380c:	68f8      	ldr	r0, [r7, #12]
 800380e:	f7ff fe67 	bl	80034e0 <I2C_ITError>
}
 8003812:	bf00      	nop
 8003814:	3710      	adds	r7, #16
 8003816:	46bd      	mov	sp, r7
 8003818:	bd80      	pop	{r7, pc}

0800381a <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800381a:	b580      	push	{r7, lr}
 800381c:	b084      	sub	sp, #16
 800381e:	af00      	add	r7, sp, #0
 8003820:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003826:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800382c:	2b00      	cmp	r3, #0
 800382e:	d003      	beq.n	8003838 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003834:	2200      	movs	r2, #0
 8003836:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800383c:	2b00      	cmp	r3, #0
 800383e:	d003      	beq.n	8003848 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003844:	2200      	movs	r2, #0
 8003846:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8003848:	68f8      	ldr	r0, [r7, #12]
 800384a:	f7ff ff39 	bl	80036c0 <I2C_TreatErrorCallback>
}
 800384e:	bf00      	nop
 8003850:	3710      	adds	r7, #16
 8003852:	46bd      	mov	sp, r7
 8003854:	bd80      	pop	{r7, pc}

08003856 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003856:	b580      	push	{r7, lr}
 8003858:	b084      	sub	sp, #16
 800385a:	af00      	add	r7, sp, #0
 800385c:	60f8      	str	r0, [r7, #12]
 800385e:	60b9      	str	r1, [r7, #8]
 8003860:	603b      	str	r3, [r7, #0]
 8003862:	4613      	mov	r3, r2
 8003864:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003866:	e03b      	b.n	80038e0 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003868:	69ba      	ldr	r2, [r7, #24]
 800386a:	6839      	ldr	r1, [r7, #0]
 800386c:	68f8      	ldr	r0, [r7, #12]
 800386e:	f000 f8d5 	bl	8003a1c <I2C_IsErrorOccurred>
 8003872:	4603      	mov	r3, r0
 8003874:	2b00      	cmp	r3, #0
 8003876:	d001      	beq.n	800387c <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8003878:	2301      	movs	r3, #1
 800387a:	e041      	b.n	8003900 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003882:	d02d      	beq.n	80038e0 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003884:	f7fd fda6 	bl	80013d4 <HAL_GetTick>
 8003888:	4602      	mov	r2, r0
 800388a:	69bb      	ldr	r3, [r7, #24]
 800388c:	1ad3      	subs	r3, r2, r3
 800388e:	683a      	ldr	r2, [r7, #0]
 8003890:	429a      	cmp	r2, r3
 8003892:	d302      	bcc.n	800389a <I2C_WaitOnFlagUntilTimeout+0x44>
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d122      	bne.n	80038e0 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	699a      	ldr	r2, [r3, #24]
 80038a0:	68bb      	ldr	r3, [r7, #8]
 80038a2:	4013      	ands	r3, r2
 80038a4:	68ba      	ldr	r2, [r7, #8]
 80038a6:	429a      	cmp	r2, r3
 80038a8:	bf0c      	ite	eq
 80038aa:	2301      	moveq	r3, #1
 80038ac:	2300      	movne	r3, #0
 80038ae:	b2db      	uxtb	r3, r3
 80038b0:	461a      	mov	r2, r3
 80038b2:	79fb      	ldrb	r3, [r7, #7]
 80038b4:	429a      	cmp	r2, r3
 80038b6:	d113      	bne.n	80038e0 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038bc:	f043 0220 	orr.w	r2, r3, #32
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	2220      	movs	r2, #32
 80038c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	2200      	movs	r2, #0
 80038d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	2200      	movs	r2, #0
 80038d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80038dc:	2301      	movs	r3, #1
 80038de:	e00f      	b.n	8003900 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	699a      	ldr	r2, [r3, #24]
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	4013      	ands	r3, r2
 80038ea:	68ba      	ldr	r2, [r7, #8]
 80038ec:	429a      	cmp	r2, r3
 80038ee:	bf0c      	ite	eq
 80038f0:	2301      	moveq	r3, #1
 80038f2:	2300      	movne	r3, #0
 80038f4:	b2db      	uxtb	r3, r3
 80038f6:	461a      	mov	r2, r3
 80038f8:	79fb      	ldrb	r3, [r7, #7]
 80038fa:	429a      	cmp	r2, r3
 80038fc:	d0b4      	beq.n	8003868 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80038fe:	2300      	movs	r3, #0
}
 8003900:	4618      	mov	r0, r3
 8003902:	3710      	adds	r7, #16
 8003904:	46bd      	mov	sp, r7
 8003906:	bd80      	pop	{r7, pc}

08003908 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b084      	sub	sp, #16
 800390c:	af00      	add	r7, sp, #0
 800390e:	60f8      	str	r0, [r7, #12]
 8003910:	60b9      	str	r1, [r7, #8]
 8003912:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003914:	e033      	b.n	800397e <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003916:	687a      	ldr	r2, [r7, #4]
 8003918:	68b9      	ldr	r1, [r7, #8]
 800391a:	68f8      	ldr	r0, [r7, #12]
 800391c:	f000 f87e 	bl	8003a1c <I2C_IsErrorOccurred>
 8003920:	4603      	mov	r3, r0
 8003922:	2b00      	cmp	r3, #0
 8003924:	d001      	beq.n	800392a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003926:	2301      	movs	r3, #1
 8003928:	e031      	b.n	800398e <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800392a:	68bb      	ldr	r3, [r7, #8]
 800392c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003930:	d025      	beq.n	800397e <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003932:	f7fd fd4f 	bl	80013d4 <HAL_GetTick>
 8003936:	4602      	mov	r2, r0
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	1ad3      	subs	r3, r2, r3
 800393c:	68ba      	ldr	r2, [r7, #8]
 800393e:	429a      	cmp	r2, r3
 8003940:	d302      	bcc.n	8003948 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003942:	68bb      	ldr	r3, [r7, #8]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d11a      	bne.n	800397e <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	699b      	ldr	r3, [r3, #24]
 800394e:	f003 0302 	and.w	r3, r3, #2
 8003952:	2b02      	cmp	r3, #2
 8003954:	d013      	beq.n	800397e <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800395a:	f043 0220 	orr.w	r2, r3, #32
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	2220      	movs	r2, #32
 8003966:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	2200      	movs	r2, #0
 800396e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	2200      	movs	r2, #0
 8003976:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800397a:	2301      	movs	r3, #1
 800397c:	e007      	b.n	800398e <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	699b      	ldr	r3, [r3, #24]
 8003984:	f003 0302 	and.w	r3, r3, #2
 8003988:	2b02      	cmp	r3, #2
 800398a:	d1c4      	bne.n	8003916 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800398c:	2300      	movs	r3, #0
}
 800398e:	4618      	mov	r0, r3
 8003990:	3710      	adds	r7, #16
 8003992:	46bd      	mov	sp, r7
 8003994:	bd80      	pop	{r7, pc}

08003996 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003996:	b580      	push	{r7, lr}
 8003998:	b084      	sub	sp, #16
 800399a:	af00      	add	r7, sp, #0
 800399c:	60f8      	str	r0, [r7, #12]
 800399e:	60b9      	str	r1, [r7, #8]
 80039a0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80039a2:	e02f      	b.n	8003a04 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80039a4:	687a      	ldr	r2, [r7, #4]
 80039a6:	68b9      	ldr	r1, [r7, #8]
 80039a8:	68f8      	ldr	r0, [r7, #12]
 80039aa:	f000 f837 	bl	8003a1c <I2C_IsErrorOccurred>
 80039ae:	4603      	mov	r3, r0
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d001      	beq.n	80039b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80039b4:	2301      	movs	r3, #1
 80039b6:	e02d      	b.n	8003a14 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039b8:	f7fd fd0c 	bl	80013d4 <HAL_GetTick>
 80039bc:	4602      	mov	r2, r0
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	1ad3      	subs	r3, r2, r3
 80039c2:	68ba      	ldr	r2, [r7, #8]
 80039c4:	429a      	cmp	r2, r3
 80039c6:	d302      	bcc.n	80039ce <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80039c8:	68bb      	ldr	r3, [r7, #8]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d11a      	bne.n	8003a04 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	699b      	ldr	r3, [r3, #24]
 80039d4:	f003 0320 	and.w	r3, r3, #32
 80039d8:	2b20      	cmp	r3, #32
 80039da:	d013      	beq.n	8003a04 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039e0:	f043 0220 	orr.w	r2, r3, #32
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	2220      	movs	r2, #32
 80039ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	2200      	movs	r2, #0
 80039f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	2200      	movs	r2, #0
 80039fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8003a00:	2301      	movs	r3, #1
 8003a02:	e007      	b.n	8003a14 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	699b      	ldr	r3, [r3, #24]
 8003a0a:	f003 0320 	and.w	r3, r3, #32
 8003a0e:	2b20      	cmp	r3, #32
 8003a10:	d1c8      	bne.n	80039a4 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003a12:	2300      	movs	r3, #0
}
 8003a14:	4618      	mov	r0, r3
 8003a16:	3710      	adds	r7, #16
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	bd80      	pop	{r7, pc}

08003a1c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b08a      	sub	sp, #40	@ 0x28
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	60f8      	str	r0, [r7, #12]
 8003a24:	60b9      	str	r1, [r7, #8]
 8003a26:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a28:	2300      	movs	r3, #0
 8003a2a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	699b      	ldr	r3, [r3, #24]
 8003a34:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003a36:	2300      	movs	r3, #0
 8003a38:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003a3e:	69bb      	ldr	r3, [r7, #24]
 8003a40:	f003 0310 	and.w	r3, r3, #16
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d068      	beq.n	8003b1a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	2210      	movs	r2, #16
 8003a4e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003a50:	e049      	b.n	8003ae6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003a52:	68bb      	ldr	r3, [r7, #8]
 8003a54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a58:	d045      	beq.n	8003ae6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003a5a:	f7fd fcbb 	bl	80013d4 <HAL_GetTick>
 8003a5e:	4602      	mov	r2, r0
 8003a60:	69fb      	ldr	r3, [r7, #28]
 8003a62:	1ad3      	subs	r3, r2, r3
 8003a64:	68ba      	ldr	r2, [r7, #8]
 8003a66:	429a      	cmp	r2, r3
 8003a68:	d302      	bcc.n	8003a70 <I2C_IsErrorOccurred+0x54>
 8003a6a:	68bb      	ldr	r3, [r7, #8]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d13a      	bne.n	8003ae6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003a7a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003a82:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	699b      	ldr	r3, [r3, #24]
 8003a8a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003a8e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003a92:	d121      	bne.n	8003ad8 <I2C_IsErrorOccurred+0xbc>
 8003a94:	697b      	ldr	r3, [r7, #20]
 8003a96:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003a9a:	d01d      	beq.n	8003ad8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003a9c:	7cfb      	ldrb	r3, [r7, #19]
 8003a9e:	2b20      	cmp	r3, #32
 8003aa0:	d01a      	beq.n	8003ad8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	685a      	ldr	r2, [r3, #4]
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003ab0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003ab2:	f7fd fc8f 	bl	80013d4 <HAL_GetTick>
 8003ab6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003ab8:	e00e      	b.n	8003ad8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003aba:	f7fd fc8b 	bl	80013d4 <HAL_GetTick>
 8003abe:	4602      	mov	r2, r0
 8003ac0:	69fb      	ldr	r3, [r7, #28]
 8003ac2:	1ad3      	subs	r3, r2, r3
 8003ac4:	2b19      	cmp	r3, #25
 8003ac6:	d907      	bls.n	8003ad8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003ac8:	6a3b      	ldr	r3, [r7, #32]
 8003aca:	f043 0320 	orr.w	r3, r3, #32
 8003ace:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8003ad6:	e006      	b.n	8003ae6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	699b      	ldr	r3, [r3, #24]
 8003ade:	f003 0320 	and.w	r3, r3, #32
 8003ae2:	2b20      	cmp	r3, #32
 8003ae4:	d1e9      	bne.n	8003aba <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	699b      	ldr	r3, [r3, #24]
 8003aec:	f003 0320 	and.w	r3, r3, #32
 8003af0:	2b20      	cmp	r3, #32
 8003af2:	d003      	beq.n	8003afc <I2C_IsErrorOccurred+0xe0>
 8003af4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d0aa      	beq.n	8003a52 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003afc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d103      	bne.n	8003b0c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	2220      	movs	r2, #32
 8003b0a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003b0c:	6a3b      	ldr	r3, [r7, #32]
 8003b0e:	f043 0304 	orr.w	r3, r3, #4
 8003b12:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003b14:	2301      	movs	r3, #1
 8003b16:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	699b      	ldr	r3, [r3, #24]
 8003b20:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003b22:	69bb      	ldr	r3, [r7, #24]
 8003b24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d00b      	beq.n	8003b44 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003b2c:	6a3b      	ldr	r3, [r7, #32]
 8003b2e:	f043 0301 	orr.w	r3, r3, #1
 8003b32:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003b3c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003b44:	69bb      	ldr	r3, [r7, #24]
 8003b46:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d00b      	beq.n	8003b66 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003b4e:	6a3b      	ldr	r3, [r7, #32]
 8003b50:	f043 0308 	orr.w	r3, r3, #8
 8003b54:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003b5e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003b60:	2301      	movs	r3, #1
 8003b62:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003b66:	69bb      	ldr	r3, [r7, #24]
 8003b68:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d00b      	beq.n	8003b88 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003b70:	6a3b      	ldr	r3, [r7, #32]
 8003b72:	f043 0302 	orr.w	r3, r3, #2
 8003b76:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003b80:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003b82:	2301      	movs	r3, #1
 8003b84:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8003b88:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d01c      	beq.n	8003bca <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003b90:	68f8      	ldr	r0, [r7, #12]
 8003b92:	f7ff fdbc 	bl	800370e <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	6859      	ldr	r1, [r3, #4]
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681a      	ldr	r2, [r3, #0]
 8003ba0:	4b0d      	ldr	r3, [pc, #52]	@ (8003bd8 <I2C_IsErrorOccurred+0x1bc>)
 8003ba2:	400b      	ands	r3, r1
 8003ba4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003baa:	6a3b      	ldr	r3, [r7, #32]
 8003bac:	431a      	orrs	r2, r3
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	2220      	movs	r2, #32
 8003bb6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8003bca:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003bce:	4618      	mov	r0, r3
 8003bd0:	3728      	adds	r7, #40	@ 0x28
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bd80      	pop	{r7, pc}
 8003bd6:	bf00      	nop
 8003bd8:	fe00e800 	.word	0xfe00e800

08003bdc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	b087      	sub	sp, #28
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	60f8      	str	r0, [r7, #12]
 8003be4:	607b      	str	r3, [r7, #4]
 8003be6:	460b      	mov	r3, r1
 8003be8:	817b      	strh	r3, [r7, #10]
 8003bea:	4613      	mov	r3, r2
 8003bec:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003bee:	897b      	ldrh	r3, [r7, #10]
 8003bf0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003bf4:	7a7b      	ldrb	r3, [r7, #9]
 8003bf6:	041b      	lsls	r3, r3, #16
 8003bf8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003bfc:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003c02:	6a3b      	ldr	r3, [r7, #32]
 8003c04:	4313      	orrs	r3, r2
 8003c06:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003c0a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	685a      	ldr	r2, [r3, #4]
 8003c12:	6a3b      	ldr	r3, [r7, #32]
 8003c14:	0d5b      	lsrs	r3, r3, #21
 8003c16:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8003c1a:	4b08      	ldr	r3, [pc, #32]	@ (8003c3c <I2C_TransferConfig+0x60>)
 8003c1c:	430b      	orrs	r3, r1
 8003c1e:	43db      	mvns	r3, r3
 8003c20:	ea02 0103 	and.w	r1, r2, r3
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	697a      	ldr	r2, [r7, #20]
 8003c2a:	430a      	orrs	r2, r1
 8003c2c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003c2e:	bf00      	nop
 8003c30:	371c      	adds	r7, #28
 8003c32:	46bd      	mov	sp, r7
 8003c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c38:	4770      	bx	lr
 8003c3a:	bf00      	nop
 8003c3c:	03ff63ff 	.word	0x03ff63ff

08003c40 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8003c40:	b480      	push	{r7}
 8003c42:	b085      	sub	sp, #20
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
 8003c48:	460b      	mov	r3, r1
 8003c4a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c54:	4a39      	ldr	r2, [pc, #228]	@ (8003d3c <I2C_Enable_IRQ+0xfc>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d032      	beq.n	8003cc0 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8003c5e:	4a38      	ldr	r2, [pc, #224]	@ (8003d40 <I2C_Enable_IRQ+0x100>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d02d      	beq.n	8003cc0 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8003c68:	4a36      	ldr	r2, [pc, #216]	@ (8003d44 <I2C_Enable_IRQ+0x104>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d028      	beq.n	8003cc0 <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003c6e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	da03      	bge.n	8003c7e <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8003c7c:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003c7e:	887b      	ldrh	r3, [r7, #2]
 8003c80:	f003 0301 	and.w	r3, r3, #1
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d003      	beq.n	8003c90 <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8003c8e:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003c90:	887b      	ldrh	r3, [r7, #2]
 8003c92:	f003 0302 	and.w	r3, r3, #2
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d003      	beq.n	8003ca2 <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8003ca0:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003ca2:	887b      	ldrh	r3, [r7, #2]
 8003ca4:	2b10      	cmp	r3, #16
 8003ca6:	d103      	bne.n	8003cb0 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8003cae:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003cb0:	887b      	ldrh	r3, [r7, #2]
 8003cb2:	2b20      	cmp	r3, #32
 8003cb4:	d133      	bne.n	8003d1e <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	f043 0320 	orr.w	r3, r3, #32
 8003cbc:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003cbe:	e02e      	b.n	8003d1e <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003cc0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	da03      	bge.n	8003cd0 <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8003cce:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003cd0:	887b      	ldrh	r3, [r7, #2]
 8003cd2:	f003 0301 	and.w	r3, r3, #1
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d003      	beq.n	8003ce2 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8003ce0:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003ce2:	887b      	ldrh	r3, [r7, #2]
 8003ce4:	f003 0302 	and.w	r3, r3, #2
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d003      	beq.n	8003cf4 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8003cf2:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003cf4:	887b      	ldrh	r3, [r7, #2]
 8003cf6:	2b10      	cmp	r3, #16
 8003cf8:	d103      	bne.n	8003d02 <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8003d00:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003d02:	887b      	ldrh	r3, [r7, #2]
 8003d04:	2b20      	cmp	r3, #32
 8003d06:	d103      	bne.n	8003d10 <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8003d0e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003d10:	887b      	ldrh	r3, [r7, #2]
 8003d12:	2b40      	cmp	r3, #64	@ 0x40
 8003d14:	d103      	bne.n	8003d1e <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003d1c:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	6819      	ldr	r1, [r3, #0]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	68fa      	ldr	r2, [r7, #12]
 8003d2a:	430a      	orrs	r2, r1
 8003d2c:	601a      	str	r2, [r3, #0]
}
 8003d2e:	bf00      	nop
 8003d30:	3714      	adds	r7, #20
 8003d32:	46bd      	mov	sp, r7
 8003d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d38:	4770      	bx	lr
 8003d3a:	bf00      	nop
 8003d3c:	0800272b 	.word	0x0800272b
 8003d40:	08002b4d 	.word	0x08002b4d
 8003d44:	08002901 	.word	0x08002901

08003d48 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8003d48:	b480      	push	{r7}
 8003d4a:	b085      	sub	sp, #20
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
 8003d50:	460b      	mov	r3, r1
 8003d52:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8003d54:	2300      	movs	r3, #0
 8003d56:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003d58:	887b      	ldrh	r3, [r7, #2]
 8003d5a:	f003 0301 	and.w	r3, r3, #1
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d00f      	beq.n	8003d82 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8003d68:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d70:	b2db      	uxtb	r3, r3
 8003d72:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003d76:	2b28      	cmp	r3, #40	@ 0x28
 8003d78:	d003      	beq.n	8003d82 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8003d80:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003d82:	887b      	ldrh	r3, [r7, #2]
 8003d84:	f003 0302 	and.w	r3, r3, #2
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d00f      	beq.n	8003dac <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8003d92:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d9a:	b2db      	uxtb	r3, r3
 8003d9c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003da0:	2b28      	cmp	r3, #40	@ 0x28
 8003da2:	d003      	beq.n	8003dac <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8003daa:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003dac:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	da03      	bge.n	8003dbc <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8003dba:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003dbc:	887b      	ldrh	r3, [r7, #2]
 8003dbe:	2b10      	cmp	r3, #16
 8003dc0:	d103      	bne.n	8003dca <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8003dc8:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003dca:	887b      	ldrh	r3, [r7, #2]
 8003dcc:	2b20      	cmp	r3, #32
 8003dce:	d103      	bne.n	8003dd8 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	f043 0320 	orr.w	r3, r3, #32
 8003dd6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003dd8:	887b      	ldrh	r3, [r7, #2]
 8003dda:	2b40      	cmp	r3, #64	@ 0x40
 8003ddc:	d103      	bne.n	8003de6 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003de4:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	6819      	ldr	r1, [r3, #0]
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	43da      	mvns	r2, r3
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	400a      	ands	r2, r1
 8003df6:	601a      	str	r2, [r3, #0]
}
 8003df8:	bf00      	nop
 8003dfa:	3714      	adds	r7, #20
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e02:	4770      	bx	lr

08003e04 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003e04:	b480      	push	{r7}
 8003e06:	b083      	sub	sp, #12
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
 8003e0c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e14:	b2db      	uxtb	r3, r3
 8003e16:	2b20      	cmp	r3, #32
 8003e18:	d138      	bne.n	8003e8c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003e20:	2b01      	cmp	r3, #1
 8003e22:	d101      	bne.n	8003e28 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003e24:	2302      	movs	r3, #2
 8003e26:	e032      	b.n	8003e8e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2201      	movs	r2, #1
 8003e2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2224      	movs	r2, #36	@ 0x24
 8003e34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	681a      	ldr	r2, [r3, #0]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f022 0201 	bic.w	r2, r2, #1
 8003e46:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	681a      	ldr	r2, [r3, #0]
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003e56:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	6819      	ldr	r1, [r3, #0]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	683a      	ldr	r2, [r7, #0]
 8003e64:	430a      	orrs	r2, r1
 8003e66:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	681a      	ldr	r2, [r3, #0]
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f042 0201 	orr.w	r2, r2, #1
 8003e76:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2220      	movs	r2, #32
 8003e7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2200      	movs	r2, #0
 8003e84:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003e88:	2300      	movs	r3, #0
 8003e8a:	e000      	b.n	8003e8e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003e8c:	2302      	movs	r3, #2
  }
}
 8003e8e:	4618      	mov	r0, r3
 8003e90:	370c      	adds	r7, #12
 8003e92:	46bd      	mov	sp, r7
 8003e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e98:	4770      	bx	lr

08003e9a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003e9a:	b480      	push	{r7}
 8003e9c:	b085      	sub	sp, #20
 8003e9e:	af00      	add	r7, sp, #0
 8003ea0:	6078      	str	r0, [r7, #4]
 8003ea2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003eaa:	b2db      	uxtb	r3, r3
 8003eac:	2b20      	cmp	r3, #32
 8003eae:	d139      	bne.n	8003f24 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003eb6:	2b01      	cmp	r3, #1
 8003eb8:	d101      	bne.n	8003ebe <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003eba:	2302      	movs	r3, #2
 8003ebc:	e033      	b.n	8003f26 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2201      	movs	r2, #1
 8003ec2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2224      	movs	r2, #36	@ 0x24
 8003eca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	681a      	ldr	r2, [r3, #0]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f022 0201 	bic.w	r2, r2, #1
 8003edc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003eec:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	021b      	lsls	r3, r3, #8
 8003ef2:	68fa      	ldr	r2, [r7, #12]
 8003ef4:	4313      	orrs	r3, r2
 8003ef6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	68fa      	ldr	r2, [r7, #12]
 8003efe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	681a      	ldr	r2, [r3, #0]
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f042 0201 	orr.w	r2, r2, #1
 8003f0e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2220      	movs	r2, #32
 8003f14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003f20:	2300      	movs	r3, #0
 8003f22:	e000      	b.n	8003f26 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003f24:	2302      	movs	r3, #2
  }
}
 8003f26:	4618      	mov	r0, r3
 8003f28:	3714      	adds	r7, #20
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f30:	4770      	bx	lr
	...

08003f34 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003f34:	b480      	push	{r7}
 8003f36:	b085      	sub	sp, #20
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d141      	bne.n	8003fc6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003f42:	4b4b      	ldr	r3, [pc, #300]	@ (8004070 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003f4a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f4e:	d131      	bne.n	8003fb4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003f50:	4b47      	ldr	r3, [pc, #284]	@ (8004070 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f52:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003f56:	4a46      	ldr	r2, [pc, #280]	@ (8004070 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f58:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003f5c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003f60:	4b43      	ldr	r3, [pc, #268]	@ (8004070 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003f68:	4a41      	ldr	r2, [pc, #260]	@ (8004070 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f6a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003f6e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003f70:	4b40      	ldr	r3, [pc, #256]	@ (8004074 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	2232      	movs	r2, #50	@ 0x32
 8003f76:	fb02 f303 	mul.w	r3, r2, r3
 8003f7a:	4a3f      	ldr	r2, [pc, #252]	@ (8004078 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003f7c:	fba2 2303 	umull	r2, r3, r2, r3
 8003f80:	0c9b      	lsrs	r3, r3, #18
 8003f82:	3301      	adds	r3, #1
 8003f84:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003f86:	e002      	b.n	8003f8e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	3b01      	subs	r3, #1
 8003f8c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003f8e:	4b38      	ldr	r3, [pc, #224]	@ (8004070 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f90:	695b      	ldr	r3, [r3, #20]
 8003f92:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f96:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f9a:	d102      	bne.n	8003fa2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d1f2      	bne.n	8003f88 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003fa2:	4b33      	ldr	r3, [pc, #204]	@ (8004070 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fa4:	695b      	ldr	r3, [r3, #20]
 8003fa6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003faa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003fae:	d158      	bne.n	8004062 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003fb0:	2303      	movs	r3, #3
 8003fb2:	e057      	b.n	8004064 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003fb4:	4b2e      	ldr	r3, [pc, #184]	@ (8004070 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003fba:	4a2d      	ldr	r2, [pc, #180]	@ (8004070 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fbc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003fc0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003fc4:	e04d      	b.n	8004062 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003fcc:	d141      	bne.n	8004052 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003fce:	4b28      	ldr	r3, [pc, #160]	@ (8004070 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003fd6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003fda:	d131      	bne.n	8004040 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003fdc:	4b24      	ldr	r3, [pc, #144]	@ (8004070 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fde:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003fe2:	4a23      	ldr	r2, [pc, #140]	@ (8004070 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fe4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003fe8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003fec:	4b20      	ldr	r3, [pc, #128]	@ (8004070 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003ff4:	4a1e      	ldr	r2, [pc, #120]	@ (8004070 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ff6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003ffa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003ffc:	4b1d      	ldr	r3, [pc, #116]	@ (8004074 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	2232      	movs	r2, #50	@ 0x32
 8004002:	fb02 f303 	mul.w	r3, r2, r3
 8004006:	4a1c      	ldr	r2, [pc, #112]	@ (8004078 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004008:	fba2 2303 	umull	r2, r3, r2, r3
 800400c:	0c9b      	lsrs	r3, r3, #18
 800400e:	3301      	adds	r3, #1
 8004010:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004012:	e002      	b.n	800401a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	3b01      	subs	r3, #1
 8004018:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800401a:	4b15      	ldr	r3, [pc, #84]	@ (8004070 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800401c:	695b      	ldr	r3, [r3, #20]
 800401e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004022:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004026:	d102      	bne.n	800402e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d1f2      	bne.n	8004014 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800402e:	4b10      	ldr	r3, [pc, #64]	@ (8004070 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004030:	695b      	ldr	r3, [r3, #20]
 8004032:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004036:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800403a:	d112      	bne.n	8004062 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800403c:	2303      	movs	r3, #3
 800403e:	e011      	b.n	8004064 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004040:	4b0b      	ldr	r3, [pc, #44]	@ (8004070 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004042:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004046:	4a0a      	ldr	r2, [pc, #40]	@ (8004070 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004048:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800404c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004050:	e007      	b.n	8004062 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004052:	4b07      	ldr	r3, [pc, #28]	@ (8004070 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800405a:	4a05      	ldr	r2, [pc, #20]	@ (8004070 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800405c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004060:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004062:	2300      	movs	r3, #0
}
 8004064:	4618      	mov	r0, r3
 8004066:	3714      	adds	r7, #20
 8004068:	46bd      	mov	sp, r7
 800406a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406e:	4770      	bx	lr
 8004070:	40007000 	.word	0x40007000
 8004074:	20000034 	.word	0x20000034
 8004078:	431bde83 	.word	0x431bde83

0800407c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800407c:	b480      	push	{r7}
 800407e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004080:	4b05      	ldr	r3, [pc, #20]	@ (8004098 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004082:	689b      	ldr	r3, [r3, #8]
 8004084:	4a04      	ldr	r2, [pc, #16]	@ (8004098 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004086:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800408a:	6093      	str	r3, [r2, #8]
}
 800408c:	bf00      	nop
 800408e:	46bd      	mov	sp, r7
 8004090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004094:	4770      	bx	lr
 8004096:	bf00      	nop
 8004098:	40007000 	.word	0x40007000

0800409c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b088      	sub	sp, #32
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d101      	bne.n	80040ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80040aa:	2301      	movs	r3, #1
 80040ac:	e2fe      	b.n	80046ac <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f003 0301 	and.w	r3, r3, #1
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d075      	beq.n	80041a6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80040ba:	4b97      	ldr	r3, [pc, #604]	@ (8004318 <HAL_RCC_OscConfig+0x27c>)
 80040bc:	689b      	ldr	r3, [r3, #8]
 80040be:	f003 030c 	and.w	r3, r3, #12
 80040c2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80040c4:	4b94      	ldr	r3, [pc, #592]	@ (8004318 <HAL_RCC_OscConfig+0x27c>)
 80040c6:	68db      	ldr	r3, [r3, #12]
 80040c8:	f003 0303 	and.w	r3, r3, #3
 80040cc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80040ce:	69bb      	ldr	r3, [r7, #24]
 80040d0:	2b0c      	cmp	r3, #12
 80040d2:	d102      	bne.n	80040da <HAL_RCC_OscConfig+0x3e>
 80040d4:	697b      	ldr	r3, [r7, #20]
 80040d6:	2b03      	cmp	r3, #3
 80040d8:	d002      	beq.n	80040e0 <HAL_RCC_OscConfig+0x44>
 80040da:	69bb      	ldr	r3, [r7, #24]
 80040dc:	2b08      	cmp	r3, #8
 80040de:	d10b      	bne.n	80040f8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040e0:	4b8d      	ldr	r3, [pc, #564]	@ (8004318 <HAL_RCC_OscConfig+0x27c>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d05b      	beq.n	80041a4 <HAL_RCC_OscConfig+0x108>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d157      	bne.n	80041a4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80040f4:	2301      	movs	r3, #1
 80040f6:	e2d9      	b.n	80046ac <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004100:	d106      	bne.n	8004110 <HAL_RCC_OscConfig+0x74>
 8004102:	4b85      	ldr	r3, [pc, #532]	@ (8004318 <HAL_RCC_OscConfig+0x27c>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4a84      	ldr	r2, [pc, #528]	@ (8004318 <HAL_RCC_OscConfig+0x27c>)
 8004108:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800410c:	6013      	str	r3, [r2, #0]
 800410e:	e01d      	b.n	800414c <HAL_RCC_OscConfig+0xb0>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	685b      	ldr	r3, [r3, #4]
 8004114:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004118:	d10c      	bne.n	8004134 <HAL_RCC_OscConfig+0x98>
 800411a:	4b7f      	ldr	r3, [pc, #508]	@ (8004318 <HAL_RCC_OscConfig+0x27c>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4a7e      	ldr	r2, [pc, #504]	@ (8004318 <HAL_RCC_OscConfig+0x27c>)
 8004120:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004124:	6013      	str	r3, [r2, #0]
 8004126:	4b7c      	ldr	r3, [pc, #496]	@ (8004318 <HAL_RCC_OscConfig+0x27c>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4a7b      	ldr	r2, [pc, #492]	@ (8004318 <HAL_RCC_OscConfig+0x27c>)
 800412c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004130:	6013      	str	r3, [r2, #0]
 8004132:	e00b      	b.n	800414c <HAL_RCC_OscConfig+0xb0>
 8004134:	4b78      	ldr	r3, [pc, #480]	@ (8004318 <HAL_RCC_OscConfig+0x27c>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4a77      	ldr	r2, [pc, #476]	@ (8004318 <HAL_RCC_OscConfig+0x27c>)
 800413a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800413e:	6013      	str	r3, [r2, #0]
 8004140:	4b75      	ldr	r3, [pc, #468]	@ (8004318 <HAL_RCC_OscConfig+0x27c>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4a74      	ldr	r2, [pc, #464]	@ (8004318 <HAL_RCC_OscConfig+0x27c>)
 8004146:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800414a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	685b      	ldr	r3, [r3, #4]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d013      	beq.n	800417c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004154:	f7fd f93e 	bl	80013d4 <HAL_GetTick>
 8004158:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800415a:	e008      	b.n	800416e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800415c:	f7fd f93a 	bl	80013d4 <HAL_GetTick>
 8004160:	4602      	mov	r2, r0
 8004162:	693b      	ldr	r3, [r7, #16]
 8004164:	1ad3      	subs	r3, r2, r3
 8004166:	2b64      	cmp	r3, #100	@ 0x64
 8004168:	d901      	bls.n	800416e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800416a:	2303      	movs	r3, #3
 800416c:	e29e      	b.n	80046ac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800416e:	4b6a      	ldr	r3, [pc, #424]	@ (8004318 <HAL_RCC_OscConfig+0x27c>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004176:	2b00      	cmp	r3, #0
 8004178:	d0f0      	beq.n	800415c <HAL_RCC_OscConfig+0xc0>
 800417a:	e014      	b.n	80041a6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800417c:	f7fd f92a 	bl	80013d4 <HAL_GetTick>
 8004180:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004182:	e008      	b.n	8004196 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004184:	f7fd f926 	bl	80013d4 <HAL_GetTick>
 8004188:	4602      	mov	r2, r0
 800418a:	693b      	ldr	r3, [r7, #16]
 800418c:	1ad3      	subs	r3, r2, r3
 800418e:	2b64      	cmp	r3, #100	@ 0x64
 8004190:	d901      	bls.n	8004196 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004192:	2303      	movs	r3, #3
 8004194:	e28a      	b.n	80046ac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004196:	4b60      	ldr	r3, [pc, #384]	@ (8004318 <HAL_RCC_OscConfig+0x27c>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d1f0      	bne.n	8004184 <HAL_RCC_OscConfig+0xe8>
 80041a2:	e000      	b.n	80041a6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f003 0302 	and.w	r3, r3, #2
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d075      	beq.n	800429e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80041b2:	4b59      	ldr	r3, [pc, #356]	@ (8004318 <HAL_RCC_OscConfig+0x27c>)
 80041b4:	689b      	ldr	r3, [r3, #8]
 80041b6:	f003 030c 	and.w	r3, r3, #12
 80041ba:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80041bc:	4b56      	ldr	r3, [pc, #344]	@ (8004318 <HAL_RCC_OscConfig+0x27c>)
 80041be:	68db      	ldr	r3, [r3, #12]
 80041c0:	f003 0303 	and.w	r3, r3, #3
 80041c4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80041c6:	69bb      	ldr	r3, [r7, #24]
 80041c8:	2b0c      	cmp	r3, #12
 80041ca:	d102      	bne.n	80041d2 <HAL_RCC_OscConfig+0x136>
 80041cc:	697b      	ldr	r3, [r7, #20]
 80041ce:	2b02      	cmp	r3, #2
 80041d0:	d002      	beq.n	80041d8 <HAL_RCC_OscConfig+0x13c>
 80041d2:	69bb      	ldr	r3, [r7, #24]
 80041d4:	2b04      	cmp	r3, #4
 80041d6:	d11f      	bne.n	8004218 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80041d8:	4b4f      	ldr	r3, [pc, #316]	@ (8004318 <HAL_RCC_OscConfig+0x27c>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d005      	beq.n	80041f0 <HAL_RCC_OscConfig+0x154>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	68db      	ldr	r3, [r3, #12]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d101      	bne.n	80041f0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80041ec:	2301      	movs	r3, #1
 80041ee:	e25d      	b.n	80046ac <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041f0:	4b49      	ldr	r3, [pc, #292]	@ (8004318 <HAL_RCC_OscConfig+0x27c>)
 80041f2:	685b      	ldr	r3, [r3, #4]
 80041f4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	691b      	ldr	r3, [r3, #16]
 80041fc:	061b      	lsls	r3, r3, #24
 80041fe:	4946      	ldr	r1, [pc, #280]	@ (8004318 <HAL_RCC_OscConfig+0x27c>)
 8004200:	4313      	orrs	r3, r2
 8004202:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004204:	4b45      	ldr	r3, [pc, #276]	@ (800431c <HAL_RCC_OscConfig+0x280>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4618      	mov	r0, r3
 800420a:	f7fd f897 	bl	800133c <HAL_InitTick>
 800420e:	4603      	mov	r3, r0
 8004210:	2b00      	cmp	r3, #0
 8004212:	d043      	beq.n	800429c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004214:	2301      	movs	r3, #1
 8004216:	e249      	b.n	80046ac <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	68db      	ldr	r3, [r3, #12]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d023      	beq.n	8004268 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004220:	4b3d      	ldr	r3, [pc, #244]	@ (8004318 <HAL_RCC_OscConfig+0x27c>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4a3c      	ldr	r2, [pc, #240]	@ (8004318 <HAL_RCC_OscConfig+0x27c>)
 8004226:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800422a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800422c:	f7fd f8d2 	bl	80013d4 <HAL_GetTick>
 8004230:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004232:	e008      	b.n	8004246 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004234:	f7fd f8ce 	bl	80013d4 <HAL_GetTick>
 8004238:	4602      	mov	r2, r0
 800423a:	693b      	ldr	r3, [r7, #16]
 800423c:	1ad3      	subs	r3, r2, r3
 800423e:	2b02      	cmp	r3, #2
 8004240:	d901      	bls.n	8004246 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004242:	2303      	movs	r3, #3
 8004244:	e232      	b.n	80046ac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004246:	4b34      	ldr	r3, [pc, #208]	@ (8004318 <HAL_RCC_OscConfig+0x27c>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800424e:	2b00      	cmp	r3, #0
 8004250:	d0f0      	beq.n	8004234 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004252:	4b31      	ldr	r3, [pc, #196]	@ (8004318 <HAL_RCC_OscConfig+0x27c>)
 8004254:	685b      	ldr	r3, [r3, #4]
 8004256:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	691b      	ldr	r3, [r3, #16]
 800425e:	061b      	lsls	r3, r3, #24
 8004260:	492d      	ldr	r1, [pc, #180]	@ (8004318 <HAL_RCC_OscConfig+0x27c>)
 8004262:	4313      	orrs	r3, r2
 8004264:	604b      	str	r3, [r1, #4]
 8004266:	e01a      	b.n	800429e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004268:	4b2b      	ldr	r3, [pc, #172]	@ (8004318 <HAL_RCC_OscConfig+0x27c>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4a2a      	ldr	r2, [pc, #168]	@ (8004318 <HAL_RCC_OscConfig+0x27c>)
 800426e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004272:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004274:	f7fd f8ae 	bl	80013d4 <HAL_GetTick>
 8004278:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800427a:	e008      	b.n	800428e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800427c:	f7fd f8aa 	bl	80013d4 <HAL_GetTick>
 8004280:	4602      	mov	r2, r0
 8004282:	693b      	ldr	r3, [r7, #16]
 8004284:	1ad3      	subs	r3, r2, r3
 8004286:	2b02      	cmp	r3, #2
 8004288:	d901      	bls.n	800428e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800428a:	2303      	movs	r3, #3
 800428c:	e20e      	b.n	80046ac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800428e:	4b22      	ldr	r3, [pc, #136]	@ (8004318 <HAL_RCC_OscConfig+0x27c>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004296:	2b00      	cmp	r3, #0
 8004298:	d1f0      	bne.n	800427c <HAL_RCC_OscConfig+0x1e0>
 800429a:	e000      	b.n	800429e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800429c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f003 0308 	and.w	r3, r3, #8
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d041      	beq.n	800432e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	695b      	ldr	r3, [r3, #20]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d01c      	beq.n	80042ec <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80042b2:	4b19      	ldr	r3, [pc, #100]	@ (8004318 <HAL_RCC_OscConfig+0x27c>)
 80042b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80042b8:	4a17      	ldr	r2, [pc, #92]	@ (8004318 <HAL_RCC_OscConfig+0x27c>)
 80042ba:	f043 0301 	orr.w	r3, r3, #1
 80042be:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042c2:	f7fd f887 	bl	80013d4 <HAL_GetTick>
 80042c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80042c8:	e008      	b.n	80042dc <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80042ca:	f7fd f883 	bl	80013d4 <HAL_GetTick>
 80042ce:	4602      	mov	r2, r0
 80042d0:	693b      	ldr	r3, [r7, #16]
 80042d2:	1ad3      	subs	r3, r2, r3
 80042d4:	2b02      	cmp	r3, #2
 80042d6:	d901      	bls.n	80042dc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80042d8:	2303      	movs	r3, #3
 80042da:	e1e7      	b.n	80046ac <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80042dc:	4b0e      	ldr	r3, [pc, #56]	@ (8004318 <HAL_RCC_OscConfig+0x27c>)
 80042de:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80042e2:	f003 0302 	and.w	r3, r3, #2
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d0ef      	beq.n	80042ca <HAL_RCC_OscConfig+0x22e>
 80042ea:	e020      	b.n	800432e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80042ec:	4b0a      	ldr	r3, [pc, #40]	@ (8004318 <HAL_RCC_OscConfig+0x27c>)
 80042ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80042f2:	4a09      	ldr	r2, [pc, #36]	@ (8004318 <HAL_RCC_OscConfig+0x27c>)
 80042f4:	f023 0301 	bic.w	r3, r3, #1
 80042f8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042fc:	f7fd f86a 	bl	80013d4 <HAL_GetTick>
 8004300:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004302:	e00d      	b.n	8004320 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004304:	f7fd f866 	bl	80013d4 <HAL_GetTick>
 8004308:	4602      	mov	r2, r0
 800430a:	693b      	ldr	r3, [r7, #16]
 800430c:	1ad3      	subs	r3, r2, r3
 800430e:	2b02      	cmp	r3, #2
 8004310:	d906      	bls.n	8004320 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004312:	2303      	movs	r3, #3
 8004314:	e1ca      	b.n	80046ac <HAL_RCC_OscConfig+0x610>
 8004316:	bf00      	nop
 8004318:	40021000 	.word	0x40021000
 800431c:	20000038 	.word	0x20000038
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004320:	4b8c      	ldr	r3, [pc, #560]	@ (8004554 <HAL_RCC_OscConfig+0x4b8>)
 8004322:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004326:	f003 0302 	and.w	r3, r3, #2
 800432a:	2b00      	cmp	r3, #0
 800432c:	d1ea      	bne.n	8004304 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f003 0304 	and.w	r3, r3, #4
 8004336:	2b00      	cmp	r3, #0
 8004338:	f000 80a6 	beq.w	8004488 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800433c:	2300      	movs	r3, #0
 800433e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004340:	4b84      	ldr	r3, [pc, #528]	@ (8004554 <HAL_RCC_OscConfig+0x4b8>)
 8004342:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004344:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004348:	2b00      	cmp	r3, #0
 800434a:	d101      	bne.n	8004350 <HAL_RCC_OscConfig+0x2b4>
 800434c:	2301      	movs	r3, #1
 800434e:	e000      	b.n	8004352 <HAL_RCC_OscConfig+0x2b6>
 8004350:	2300      	movs	r3, #0
 8004352:	2b00      	cmp	r3, #0
 8004354:	d00d      	beq.n	8004372 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004356:	4b7f      	ldr	r3, [pc, #508]	@ (8004554 <HAL_RCC_OscConfig+0x4b8>)
 8004358:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800435a:	4a7e      	ldr	r2, [pc, #504]	@ (8004554 <HAL_RCC_OscConfig+0x4b8>)
 800435c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004360:	6593      	str	r3, [r2, #88]	@ 0x58
 8004362:	4b7c      	ldr	r3, [pc, #496]	@ (8004554 <HAL_RCC_OscConfig+0x4b8>)
 8004364:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004366:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800436a:	60fb      	str	r3, [r7, #12]
 800436c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800436e:	2301      	movs	r3, #1
 8004370:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004372:	4b79      	ldr	r3, [pc, #484]	@ (8004558 <HAL_RCC_OscConfig+0x4bc>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800437a:	2b00      	cmp	r3, #0
 800437c:	d118      	bne.n	80043b0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800437e:	4b76      	ldr	r3, [pc, #472]	@ (8004558 <HAL_RCC_OscConfig+0x4bc>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4a75      	ldr	r2, [pc, #468]	@ (8004558 <HAL_RCC_OscConfig+0x4bc>)
 8004384:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004388:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800438a:	f7fd f823 	bl	80013d4 <HAL_GetTick>
 800438e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004390:	e008      	b.n	80043a4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004392:	f7fd f81f 	bl	80013d4 <HAL_GetTick>
 8004396:	4602      	mov	r2, r0
 8004398:	693b      	ldr	r3, [r7, #16]
 800439a:	1ad3      	subs	r3, r2, r3
 800439c:	2b02      	cmp	r3, #2
 800439e:	d901      	bls.n	80043a4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80043a0:	2303      	movs	r3, #3
 80043a2:	e183      	b.n	80046ac <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80043a4:	4b6c      	ldr	r3, [pc, #432]	@ (8004558 <HAL_RCC_OscConfig+0x4bc>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d0f0      	beq.n	8004392 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	689b      	ldr	r3, [r3, #8]
 80043b4:	2b01      	cmp	r3, #1
 80043b6:	d108      	bne.n	80043ca <HAL_RCC_OscConfig+0x32e>
 80043b8:	4b66      	ldr	r3, [pc, #408]	@ (8004554 <HAL_RCC_OscConfig+0x4b8>)
 80043ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043be:	4a65      	ldr	r2, [pc, #404]	@ (8004554 <HAL_RCC_OscConfig+0x4b8>)
 80043c0:	f043 0301 	orr.w	r3, r3, #1
 80043c4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80043c8:	e024      	b.n	8004414 <HAL_RCC_OscConfig+0x378>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	689b      	ldr	r3, [r3, #8]
 80043ce:	2b05      	cmp	r3, #5
 80043d0:	d110      	bne.n	80043f4 <HAL_RCC_OscConfig+0x358>
 80043d2:	4b60      	ldr	r3, [pc, #384]	@ (8004554 <HAL_RCC_OscConfig+0x4b8>)
 80043d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043d8:	4a5e      	ldr	r2, [pc, #376]	@ (8004554 <HAL_RCC_OscConfig+0x4b8>)
 80043da:	f043 0304 	orr.w	r3, r3, #4
 80043de:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80043e2:	4b5c      	ldr	r3, [pc, #368]	@ (8004554 <HAL_RCC_OscConfig+0x4b8>)
 80043e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043e8:	4a5a      	ldr	r2, [pc, #360]	@ (8004554 <HAL_RCC_OscConfig+0x4b8>)
 80043ea:	f043 0301 	orr.w	r3, r3, #1
 80043ee:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80043f2:	e00f      	b.n	8004414 <HAL_RCC_OscConfig+0x378>
 80043f4:	4b57      	ldr	r3, [pc, #348]	@ (8004554 <HAL_RCC_OscConfig+0x4b8>)
 80043f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043fa:	4a56      	ldr	r2, [pc, #344]	@ (8004554 <HAL_RCC_OscConfig+0x4b8>)
 80043fc:	f023 0301 	bic.w	r3, r3, #1
 8004400:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004404:	4b53      	ldr	r3, [pc, #332]	@ (8004554 <HAL_RCC_OscConfig+0x4b8>)
 8004406:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800440a:	4a52      	ldr	r2, [pc, #328]	@ (8004554 <HAL_RCC_OscConfig+0x4b8>)
 800440c:	f023 0304 	bic.w	r3, r3, #4
 8004410:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	689b      	ldr	r3, [r3, #8]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d016      	beq.n	800444a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800441c:	f7fc ffda 	bl	80013d4 <HAL_GetTick>
 8004420:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004422:	e00a      	b.n	800443a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004424:	f7fc ffd6 	bl	80013d4 <HAL_GetTick>
 8004428:	4602      	mov	r2, r0
 800442a:	693b      	ldr	r3, [r7, #16]
 800442c:	1ad3      	subs	r3, r2, r3
 800442e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004432:	4293      	cmp	r3, r2
 8004434:	d901      	bls.n	800443a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004436:	2303      	movs	r3, #3
 8004438:	e138      	b.n	80046ac <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800443a:	4b46      	ldr	r3, [pc, #280]	@ (8004554 <HAL_RCC_OscConfig+0x4b8>)
 800443c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004440:	f003 0302 	and.w	r3, r3, #2
 8004444:	2b00      	cmp	r3, #0
 8004446:	d0ed      	beq.n	8004424 <HAL_RCC_OscConfig+0x388>
 8004448:	e015      	b.n	8004476 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800444a:	f7fc ffc3 	bl	80013d4 <HAL_GetTick>
 800444e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004450:	e00a      	b.n	8004468 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004452:	f7fc ffbf 	bl	80013d4 <HAL_GetTick>
 8004456:	4602      	mov	r2, r0
 8004458:	693b      	ldr	r3, [r7, #16]
 800445a:	1ad3      	subs	r3, r2, r3
 800445c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004460:	4293      	cmp	r3, r2
 8004462:	d901      	bls.n	8004468 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004464:	2303      	movs	r3, #3
 8004466:	e121      	b.n	80046ac <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004468:	4b3a      	ldr	r3, [pc, #232]	@ (8004554 <HAL_RCC_OscConfig+0x4b8>)
 800446a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800446e:	f003 0302 	and.w	r3, r3, #2
 8004472:	2b00      	cmp	r3, #0
 8004474:	d1ed      	bne.n	8004452 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004476:	7ffb      	ldrb	r3, [r7, #31]
 8004478:	2b01      	cmp	r3, #1
 800447a:	d105      	bne.n	8004488 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800447c:	4b35      	ldr	r3, [pc, #212]	@ (8004554 <HAL_RCC_OscConfig+0x4b8>)
 800447e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004480:	4a34      	ldr	r2, [pc, #208]	@ (8004554 <HAL_RCC_OscConfig+0x4b8>)
 8004482:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004486:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f003 0320 	and.w	r3, r3, #32
 8004490:	2b00      	cmp	r3, #0
 8004492:	d03c      	beq.n	800450e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	699b      	ldr	r3, [r3, #24]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d01c      	beq.n	80044d6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800449c:	4b2d      	ldr	r3, [pc, #180]	@ (8004554 <HAL_RCC_OscConfig+0x4b8>)
 800449e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80044a2:	4a2c      	ldr	r2, [pc, #176]	@ (8004554 <HAL_RCC_OscConfig+0x4b8>)
 80044a4:	f043 0301 	orr.w	r3, r3, #1
 80044a8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044ac:	f7fc ff92 	bl	80013d4 <HAL_GetTick>
 80044b0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80044b2:	e008      	b.n	80044c6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80044b4:	f7fc ff8e 	bl	80013d4 <HAL_GetTick>
 80044b8:	4602      	mov	r2, r0
 80044ba:	693b      	ldr	r3, [r7, #16]
 80044bc:	1ad3      	subs	r3, r2, r3
 80044be:	2b02      	cmp	r3, #2
 80044c0:	d901      	bls.n	80044c6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80044c2:	2303      	movs	r3, #3
 80044c4:	e0f2      	b.n	80046ac <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80044c6:	4b23      	ldr	r3, [pc, #140]	@ (8004554 <HAL_RCC_OscConfig+0x4b8>)
 80044c8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80044cc:	f003 0302 	and.w	r3, r3, #2
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d0ef      	beq.n	80044b4 <HAL_RCC_OscConfig+0x418>
 80044d4:	e01b      	b.n	800450e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80044d6:	4b1f      	ldr	r3, [pc, #124]	@ (8004554 <HAL_RCC_OscConfig+0x4b8>)
 80044d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80044dc:	4a1d      	ldr	r2, [pc, #116]	@ (8004554 <HAL_RCC_OscConfig+0x4b8>)
 80044de:	f023 0301 	bic.w	r3, r3, #1
 80044e2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044e6:	f7fc ff75 	bl	80013d4 <HAL_GetTick>
 80044ea:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80044ec:	e008      	b.n	8004500 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80044ee:	f7fc ff71 	bl	80013d4 <HAL_GetTick>
 80044f2:	4602      	mov	r2, r0
 80044f4:	693b      	ldr	r3, [r7, #16]
 80044f6:	1ad3      	subs	r3, r2, r3
 80044f8:	2b02      	cmp	r3, #2
 80044fa:	d901      	bls.n	8004500 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80044fc:	2303      	movs	r3, #3
 80044fe:	e0d5      	b.n	80046ac <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004500:	4b14      	ldr	r3, [pc, #80]	@ (8004554 <HAL_RCC_OscConfig+0x4b8>)
 8004502:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004506:	f003 0302 	and.w	r3, r3, #2
 800450a:	2b00      	cmp	r3, #0
 800450c:	d1ef      	bne.n	80044ee <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	69db      	ldr	r3, [r3, #28]
 8004512:	2b00      	cmp	r3, #0
 8004514:	f000 80c9 	beq.w	80046aa <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004518:	4b0e      	ldr	r3, [pc, #56]	@ (8004554 <HAL_RCC_OscConfig+0x4b8>)
 800451a:	689b      	ldr	r3, [r3, #8]
 800451c:	f003 030c 	and.w	r3, r3, #12
 8004520:	2b0c      	cmp	r3, #12
 8004522:	f000 8083 	beq.w	800462c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	69db      	ldr	r3, [r3, #28]
 800452a:	2b02      	cmp	r3, #2
 800452c:	d15e      	bne.n	80045ec <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800452e:	4b09      	ldr	r3, [pc, #36]	@ (8004554 <HAL_RCC_OscConfig+0x4b8>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4a08      	ldr	r2, [pc, #32]	@ (8004554 <HAL_RCC_OscConfig+0x4b8>)
 8004534:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004538:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800453a:	f7fc ff4b 	bl	80013d4 <HAL_GetTick>
 800453e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004540:	e00c      	b.n	800455c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004542:	f7fc ff47 	bl	80013d4 <HAL_GetTick>
 8004546:	4602      	mov	r2, r0
 8004548:	693b      	ldr	r3, [r7, #16]
 800454a:	1ad3      	subs	r3, r2, r3
 800454c:	2b02      	cmp	r3, #2
 800454e:	d905      	bls.n	800455c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004550:	2303      	movs	r3, #3
 8004552:	e0ab      	b.n	80046ac <HAL_RCC_OscConfig+0x610>
 8004554:	40021000 	.word	0x40021000
 8004558:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800455c:	4b55      	ldr	r3, [pc, #340]	@ (80046b4 <HAL_RCC_OscConfig+0x618>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004564:	2b00      	cmp	r3, #0
 8004566:	d1ec      	bne.n	8004542 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004568:	4b52      	ldr	r3, [pc, #328]	@ (80046b4 <HAL_RCC_OscConfig+0x618>)
 800456a:	68da      	ldr	r2, [r3, #12]
 800456c:	4b52      	ldr	r3, [pc, #328]	@ (80046b8 <HAL_RCC_OscConfig+0x61c>)
 800456e:	4013      	ands	r3, r2
 8004570:	687a      	ldr	r2, [r7, #4]
 8004572:	6a11      	ldr	r1, [r2, #32]
 8004574:	687a      	ldr	r2, [r7, #4]
 8004576:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004578:	3a01      	subs	r2, #1
 800457a:	0112      	lsls	r2, r2, #4
 800457c:	4311      	orrs	r1, r2
 800457e:	687a      	ldr	r2, [r7, #4]
 8004580:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8004582:	0212      	lsls	r2, r2, #8
 8004584:	4311      	orrs	r1, r2
 8004586:	687a      	ldr	r2, [r7, #4]
 8004588:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800458a:	0852      	lsrs	r2, r2, #1
 800458c:	3a01      	subs	r2, #1
 800458e:	0552      	lsls	r2, r2, #21
 8004590:	4311      	orrs	r1, r2
 8004592:	687a      	ldr	r2, [r7, #4]
 8004594:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004596:	0852      	lsrs	r2, r2, #1
 8004598:	3a01      	subs	r2, #1
 800459a:	0652      	lsls	r2, r2, #25
 800459c:	4311      	orrs	r1, r2
 800459e:	687a      	ldr	r2, [r7, #4]
 80045a0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80045a2:	06d2      	lsls	r2, r2, #27
 80045a4:	430a      	orrs	r2, r1
 80045a6:	4943      	ldr	r1, [pc, #268]	@ (80046b4 <HAL_RCC_OscConfig+0x618>)
 80045a8:	4313      	orrs	r3, r2
 80045aa:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80045ac:	4b41      	ldr	r3, [pc, #260]	@ (80046b4 <HAL_RCC_OscConfig+0x618>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4a40      	ldr	r2, [pc, #256]	@ (80046b4 <HAL_RCC_OscConfig+0x618>)
 80045b2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80045b6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80045b8:	4b3e      	ldr	r3, [pc, #248]	@ (80046b4 <HAL_RCC_OscConfig+0x618>)
 80045ba:	68db      	ldr	r3, [r3, #12]
 80045bc:	4a3d      	ldr	r2, [pc, #244]	@ (80046b4 <HAL_RCC_OscConfig+0x618>)
 80045be:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80045c2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045c4:	f7fc ff06 	bl	80013d4 <HAL_GetTick>
 80045c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80045ca:	e008      	b.n	80045de <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045cc:	f7fc ff02 	bl	80013d4 <HAL_GetTick>
 80045d0:	4602      	mov	r2, r0
 80045d2:	693b      	ldr	r3, [r7, #16]
 80045d4:	1ad3      	subs	r3, r2, r3
 80045d6:	2b02      	cmp	r3, #2
 80045d8:	d901      	bls.n	80045de <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80045da:	2303      	movs	r3, #3
 80045dc:	e066      	b.n	80046ac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80045de:	4b35      	ldr	r3, [pc, #212]	@ (80046b4 <HAL_RCC_OscConfig+0x618>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d0f0      	beq.n	80045cc <HAL_RCC_OscConfig+0x530>
 80045ea:	e05e      	b.n	80046aa <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045ec:	4b31      	ldr	r3, [pc, #196]	@ (80046b4 <HAL_RCC_OscConfig+0x618>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4a30      	ldr	r2, [pc, #192]	@ (80046b4 <HAL_RCC_OscConfig+0x618>)
 80045f2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80045f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045f8:	f7fc feec 	bl	80013d4 <HAL_GetTick>
 80045fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80045fe:	e008      	b.n	8004612 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004600:	f7fc fee8 	bl	80013d4 <HAL_GetTick>
 8004604:	4602      	mov	r2, r0
 8004606:	693b      	ldr	r3, [r7, #16]
 8004608:	1ad3      	subs	r3, r2, r3
 800460a:	2b02      	cmp	r3, #2
 800460c:	d901      	bls.n	8004612 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800460e:	2303      	movs	r3, #3
 8004610:	e04c      	b.n	80046ac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004612:	4b28      	ldr	r3, [pc, #160]	@ (80046b4 <HAL_RCC_OscConfig+0x618>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800461a:	2b00      	cmp	r3, #0
 800461c:	d1f0      	bne.n	8004600 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800461e:	4b25      	ldr	r3, [pc, #148]	@ (80046b4 <HAL_RCC_OscConfig+0x618>)
 8004620:	68da      	ldr	r2, [r3, #12]
 8004622:	4924      	ldr	r1, [pc, #144]	@ (80046b4 <HAL_RCC_OscConfig+0x618>)
 8004624:	4b25      	ldr	r3, [pc, #148]	@ (80046bc <HAL_RCC_OscConfig+0x620>)
 8004626:	4013      	ands	r3, r2
 8004628:	60cb      	str	r3, [r1, #12]
 800462a:	e03e      	b.n	80046aa <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	69db      	ldr	r3, [r3, #28]
 8004630:	2b01      	cmp	r3, #1
 8004632:	d101      	bne.n	8004638 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8004634:	2301      	movs	r3, #1
 8004636:	e039      	b.n	80046ac <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004638:	4b1e      	ldr	r3, [pc, #120]	@ (80046b4 <HAL_RCC_OscConfig+0x618>)
 800463a:	68db      	ldr	r3, [r3, #12]
 800463c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800463e:	697b      	ldr	r3, [r7, #20]
 8004640:	f003 0203 	and.w	r2, r3, #3
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6a1b      	ldr	r3, [r3, #32]
 8004648:	429a      	cmp	r2, r3
 800464a:	d12c      	bne.n	80046a6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800464c:	697b      	ldr	r3, [r7, #20]
 800464e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004656:	3b01      	subs	r3, #1
 8004658:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800465a:	429a      	cmp	r2, r3
 800465c:	d123      	bne.n	80046a6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800465e:	697b      	ldr	r3, [r7, #20]
 8004660:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004668:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800466a:	429a      	cmp	r2, r3
 800466c:	d11b      	bne.n	80046a6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800466e:	697b      	ldr	r3, [r7, #20]
 8004670:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004678:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800467a:	429a      	cmp	r2, r3
 800467c:	d113      	bne.n	80046a6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800467e:	697b      	ldr	r3, [r7, #20]
 8004680:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004688:	085b      	lsrs	r3, r3, #1
 800468a:	3b01      	subs	r3, #1
 800468c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800468e:	429a      	cmp	r2, r3
 8004690:	d109      	bne.n	80046a6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004692:	697b      	ldr	r3, [r7, #20]
 8004694:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800469c:	085b      	lsrs	r3, r3, #1
 800469e:	3b01      	subs	r3, #1
 80046a0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80046a2:	429a      	cmp	r2, r3
 80046a4:	d001      	beq.n	80046aa <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80046a6:	2301      	movs	r3, #1
 80046a8:	e000      	b.n	80046ac <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80046aa:	2300      	movs	r3, #0
}
 80046ac:	4618      	mov	r0, r3
 80046ae:	3720      	adds	r7, #32
 80046b0:	46bd      	mov	sp, r7
 80046b2:	bd80      	pop	{r7, pc}
 80046b4:	40021000 	.word	0x40021000
 80046b8:	019f800c 	.word	0x019f800c
 80046bc:	feeefffc 	.word	0xfeeefffc

080046c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b086      	sub	sp, #24
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
 80046c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80046ca:	2300      	movs	r3, #0
 80046cc:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d101      	bne.n	80046d8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80046d4:	2301      	movs	r3, #1
 80046d6:	e11e      	b.n	8004916 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80046d8:	4b91      	ldr	r3, [pc, #580]	@ (8004920 <HAL_RCC_ClockConfig+0x260>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f003 030f 	and.w	r3, r3, #15
 80046e0:	683a      	ldr	r2, [r7, #0]
 80046e2:	429a      	cmp	r2, r3
 80046e4:	d910      	bls.n	8004708 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046e6:	4b8e      	ldr	r3, [pc, #568]	@ (8004920 <HAL_RCC_ClockConfig+0x260>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f023 020f 	bic.w	r2, r3, #15
 80046ee:	498c      	ldr	r1, [pc, #560]	@ (8004920 <HAL_RCC_ClockConfig+0x260>)
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	4313      	orrs	r3, r2
 80046f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80046f6:	4b8a      	ldr	r3, [pc, #552]	@ (8004920 <HAL_RCC_ClockConfig+0x260>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f003 030f 	and.w	r3, r3, #15
 80046fe:	683a      	ldr	r2, [r7, #0]
 8004700:	429a      	cmp	r2, r3
 8004702:	d001      	beq.n	8004708 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004704:	2301      	movs	r3, #1
 8004706:	e106      	b.n	8004916 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f003 0301 	and.w	r3, r3, #1
 8004710:	2b00      	cmp	r3, #0
 8004712:	d073      	beq.n	80047fc <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	2b03      	cmp	r3, #3
 800471a:	d129      	bne.n	8004770 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800471c:	4b81      	ldr	r3, [pc, #516]	@ (8004924 <HAL_RCC_ClockConfig+0x264>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004724:	2b00      	cmp	r3, #0
 8004726:	d101      	bne.n	800472c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004728:	2301      	movs	r3, #1
 800472a:	e0f4      	b.n	8004916 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800472c:	f000 f99e 	bl	8004a6c <RCC_GetSysClockFreqFromPLLSource>
 8004730:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004732:	693b      	ldr	r3, [r7, #16]
 8004734:	4a7c      	ldr	r2, [pc, #496]	@ (8004928 <HAL_RCC_ClockConfig+0x268>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d93f      	bls.n	80047ba <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800473a:	4b7a      	ldr	r3, [pc, #488]	@ (8004924 <HAL_RCC_ClockConfig+0x264>)
 800473c:	689b      	ldr	r3, [r3, #8]
 800473e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004742:	2b00      	cmp	r3, #0
 8004744:	d009      	beq.n	800475a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800474e:	2b00      	cmp	r3, #0
 8004750:	d033      	beq.n	80047ba <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004756:	2b00      	cmp	r3, #0
 8004758:	d12f      	bne.n	80047ba <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800475a:	4b72      	ldr	r3, [pc, #456]	@ (8004924 <HAL_RCC_ClockConfig+0x264>)
 800475c:	689b      	ldr	r3, [r3, #8]
 800475e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004762:	4a70      	ldr	r2, [pc, #448]	@ (8004924 <HAL_RCC_ClockConfig+0x264>)
 8004764:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004768:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800476a:	2380      	movs	r3, #128	@ 0x80
 800476c:	617b      	str	r3, [r7, #20]
 800476e:	e024      	b.n	80047ba <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	2b02      	cmp	r3, #2
 8004776:	d107      	bne.n	8004788 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004778:	4b6a      	ldr	r3, [pc, #424]	@ (8004924 <HAL_RCC_ClockConfig+0x264>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004780:	2b00      	cmp	r3, #0
 8004782:	d109      	bne.n	8004798 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004784:	2301      	movs	r3, #1
 8004786:	e0c6      	b.n	8004916 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004788:	4b66      	ldr	r3, [pc, #408]	@ (8004924 <HAL_RCC_ClockConfig+0x264>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004790:	2b00      	cmp	r3, #0
 8004792:	d101      	bne.n	8004798 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004794:	2301      	movs	r3, #1
 8004796:	e0be      	b.n	8004916 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004798:	f000 f8ce 	bl	8004938 <HAL_RCC_GetSysClockFreq>
 800479c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800479e:	693b      	ldr	r3, [r7, #16]
 80047a0:	4a61      	ldr	r2, [pc, #388]	@ (8004928 <HAL_RCC_ClockConfig+0x268>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d909      	bls.n	80047ba <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80047a6:	4b5f      	ldr	r3, [pc, #380]	@ (8004924 <HAL_RCC_ClockConfig+0x264>)
 80047a8:	689b      	ldr	r3, [r3, #8]
 80047aa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80047ae:	4a5d      	ldr	r2, [pc, #372]	@ (8004924 <HAL_RCC_ClockConfig+0x264>)
 80047b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80047b4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80047b6:	2380      	movs	r3, #128	@ 0x80
 80047b8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80047ba:	4b5a      	ldr	r3, [pc, #360]	@ (8004924 <HAL_RCC_ClockConfig+0x264>)
 80047bc:	689b      	ldr	r3, [r3, #8]
 80047be:	f023 0203 	bic.w	r2, r3, #3
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	685b      	ldr	r3, [r3, #4]
 80047c6:	4957      	ldr	r1, [pc, #348]	@ (8004924 <HAL_RCC_ClockConfig+0x264>)
 80047c8:	4313      	orrs	r3, r2
 80047ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047cc:	f7fc fe02 	bl	80013d4 <HAL_GetTick>
 80047d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047d2:	e00a      	b.n	80047ea <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047d4:	f7fc fdfe 	bl	80013d4 <HAL_GetTick>
 80047d8:	4602      	mov	r2, r0
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	1ad3      	subs	r3, r2, r3
 80047de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d901      	bls.n	80047ea <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80047e6:	2303      	movs	r3, #3
 80047e8:	e095      	b.n	8004916 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047ea:	4b4e      	ldr	r3, [pc, #312]	@ (8004924 <HAL_RCC_ClockConfig+0x264>)
 80047ec:	689b      	ldr	r3, [r3, #8]
 80047ee:	f003 020c 	and.w	r2, r3, #12
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	009b      	lsls	r3, r3, #2
 80047f8:	429a      	cmp	r2, r3
 80047fa:	d1eb      	bne.n	80047d4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f003 0302 	and.w	r3, r3, #2
 8004804:	2b00      	cmp	r3, #0
 8004806:	d023      	beq.n	8004850 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f003 0304 	and.w	r3, r3, #4
 8004810:	2b00      	cmp	r3, #0
 8004812:	d005      	beq.n	8004820 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004814:	4b43      	ldr	r3, [pc, #268]	@ (8004924 <HAL_RCC_ClockConfig+0x264>)
 8004816:	689b      	ldr	r3, [r3, #8]
 8004818:	4a42      	ldr	r2, [pc, #264]	@ (8004924 <HAL_RCC_ClockConfig+0x264>)
 800481a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800481e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f003 0308 	and.w	r3, r3, #8
 8004828:	2b00      	cmp	r3, #0
 800482a:	d007      	beq.n	800483c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800482c:	4b3d      	ldr	r3, [pc, #244]	@ (8004924 <HAL_RCC_ClockConfig+0x264>)
 800482e:	689b      	ldr	r3, [r3, #8]
 8004830:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004834:	4a3b      	ldr	r2, [pc, #236]	@ (8004924 <HAL_RCC_ClockConfig+0x264>)
 8004836:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800483a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800483c:	4b39      	ldr	r3, [pc, #228]	@ (8004924 <HAL_RCC_ClockConfig+0x264>)
 800483e:	689b      	ldr	r3, [r3, #8]
 8004840:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	689b      	ldr	r3, [r3, #8]
 8004848:	4936      	ldr	r1, [pc, #216]	@ (8004924 <HAL_RCC_ClockConfig+0x264>)
 800484a:	4313      	orrs	r3, r2
 800484c:	608b      	str	r3, [r1, #8]
 800484e:	e008      	b.n	8004862 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004850:	697b      	ldr	r3, [r7, #20]
 8004852:	2b80      	cmp	r3, #128	@ 0x80
 8004854:	d105      	bne.n	8004862 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004856:	4b33      	ldr	r3, [pc, #204]	@ (8004924 <HAL_RCC_ClockConfig+0x264>)
 8004858:	689b      	ldr	r3, [r3, #8]
 800485a:	4a32      	ldr	r2, [pc, #200]	@ (8004924 <HAL_RCC_ClockConfig+0x264>)
 800485c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004860:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004862:	4b2f      	ldr	r3, [pc, #188]	@ (8004920 <HAL_RCC_ClockConfig+0x260>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f003 030f 	and.w	r3, r3, #15
 800486a:	683a      	ldr	r2, [r7, #0]
 800486c:	429a      	cmp	r2, r3
 800486e:	d21d      	bcs.n	80048ac <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004870:	4b2b      	ldr	r3, [pc, #172]	@ (8004920 <HAL_RCC_ClockConfig+0x260>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f023 020f 	bic.w	r2, r3, #15
 8004878:	4929      	ldr	r1, [pc, #164]	@ (8004920 <HAL_RCC_ClockConfig+0x260>)
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	4313      	orrs	r3, r2
 800487e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004880:	f7fc fda8 	bl	80013d4 <HAL_GetTick>
 8004884:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004886:	e00a      	b.n	800489e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004888:	f7fc fda4 	bl	80013d4 <HAL_GetTick>
 800488c:	4602      	mov	r2, r0
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	1ad3      	subs	r3, r2, r3
 8004892:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004896:	4293      	cmp	r3, r2
 8004898:	d901      	bls.n	800489e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800489a:	2303      	movs	r3, #3
 800489c:	e03b      	b.n	8004916 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800489e:	4b20      	ldr	r3, [pc, #128]	@ (8004920 <HAL_RCC_ClockConfig+0x260>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f003 030f 	and.w	r3, r3, #15
 80048a6:	683a      	ldr	r2, [r7, #0]
 80048a8:	429a      	cmp	r2, r3
 80048aa:	d1ed      	bne.n	8004888 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f003 0304 	and.w	r3, r3, #4
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d008      	beq.n	80048ca <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80048b8:	4b1a      	ldr	r3, [pc, #104]	@ (8004924 <HAL_RCC_ClockConfig+0x264>)
 80048ba:	689b      	ldr	r3, [r3, #8]
 80048bc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	68db      	ldr	r3, [r3, #12]
 80048c4:	4917      	ldr	r1, [pc, #92]	@ (8004924 <HAL_RCC_ClockConfig+0x264>)
 80048c6:	4313      	orrs	r3, r2
 80048c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f003 0308 	and.w	r3, r3, #8
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d009      	beq.n	80048ea <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80048d6:	4b13      	ldr	r3, [pc, #76]	@ (8004924 <HAL_RCC_ClockConfig+0x264>)
 80048d8:	689b      	ldr	r3, [r3, #8]
 80048da:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	691b      	ldr	r3, [r3, #16]
 80048e2:	00db      	lsls	r3, r3, #3
 80048e4:	490f      	ldr	r1, [pc, #60]	@ (8004924 <HAL_RCC_ClockConfig+0x264>)
 80048e6:	4313      	orrs	r3, r2
 80048e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80048ea:	f000 f825 	bl	8004938 <HAL_RCC_GetSysClockFreq>
 80048ee:	4602      	mov	r2, r0
 80048f0:	4b0c      	ldr	r3, [pc, #48]	@ (8004924 <HAL_RCC_ClockConfig+0x264>)
 80048f2:	689b      	ldr	r3, [r3, #8]
 80048f4:	091b      	lsrs	r3, r3, #4
 80048f6:	f003 030f 	and.w	r3, r3, #15
 80048fa:	490c      	ldr	r1, [pc, #48]	@ (800492c <HAL_RCC_ClockConfig+0x26c>)
 80048fc:	5ccb      	ldrb	r3, [r1, r3]
 80048fe:	f003 031f 	and.w	r3, r3, #31
 8004902:	fa22 f303 	lsr.w	r3, r2, r3
 8004906:	4a0a      	ldr	r2, [pc, #40]	@ (8004930 <HAL_RCC_ClockConfig+0x270>)
 8004908:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800490a:	4b0a      	ldr	r3, [pc, #40]	@ (8004934 <HAL_RCC_ClockConfig+0x274>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4618      	mov	r0, r3
 8004910:	f7fc fd14 	bl	800133c <HAL_InitTick>
 8004914:	4603      	mov	r3, r0
}
 8004916:	4618      	mov	r0, r3
 8004918:	3718      	adds	r7, #24
 800491a:	46bd      	mov	sp, r7
 800491c:	bd80      	pop	{r7, pc}
 800491e:	bf00      	nop
 8004920:	40022000 	.word	0x40022000
 8004924:	40021000 	.word	0x40021000
 8004928:	04c4b400 	.word	0x04c4b400
 800492c:	08006ba0 	.word	0x08006ba0
 8004930:	20000034 	.word	0x20000034
 8004934:	20000038 	.word	0x20000038

08004938 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004938:	b480      	push	{r7}
 800493a:	b087      	sub	sp, #28
 800493c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800493e:	4b2c      	ldr	r3, [pc, #176]	@ (80049f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004940:	689b      	ldr	r3, [r3, #8]
 8004942:	f003 030c 	and.w	r3, r3, #12
 8004946:	2b04      	cmp	r3, #4
 8004948:	d102      	bne.n	8004950 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800494a:	4b2a      	ldr	r3, [pc, #168]	@ (80049f4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800494c:	613b      	str	r3, [r7, #16]
 800494e:	e047      	b.n	80049e0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004950:	4b27      	ldr	r3, [pc, #156]	@ (80049f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004952:	689b      	ldr	r3, [r3, #8]
 8004954:	f003 030c 	and.w	r3, r3, #12
 8004958:	2b08      	cmp	r3, #8
 800495a:	d102      	bne.n	8004962 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800495c:	4b26      	ldr	r3, [pc, #152]	@ (80049f8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800495e:	613b      	str	r3, [r7, #16]
 8004960:	e03e      	b.n	80049e0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004962:	4b23      	ldr	r3, [pc, #140]	@ (80049f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004964:	689b      	ldr	r3, [r3, #8]
 8004966:	f003 030c 	and.w	r3, r3, #12
 800496a:	2b0c      	cmp	r3, #12
 800496c:	d136      	bne.n	80049dc <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800496e:	4b20      	ldr	r3, [pc, #128]	@ (80049f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004970:	68db      	ldr	r3, [r3, #12]
 8004972:	f003 0303 	and.w	r3, r3, #3
 8004976:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004978:	4b1d      	ldr	r3, [pc, #116]	@ (80049f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800497a:	68db      	ldr	r3, [r3, #12]
 800497c:	091b      	lsrs	r3, r3, #4
 800497e:	f003 030f 	and.w	r3, r3, #15
 8004982:	3301      	adds	r3, #1
 8004984:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	2b03      	cmp	r3, #3
 800498a:	d10c      	bne.n	80049a6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800498c:	4a1a      	ldr	r2, [pc, #104]	@ (80049f8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800498e:	68bb      	ldr	r3, [r7, #8]
 8004990:	fbb2 f3f3 	udiv	r3, r2, r3
 8004994:	4a16      	ldr	r2, [pc, #88]	@ (80049f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004996:	68d2      	ldr	r2, [r2, #12]
 8004998:	0a12      	lsrs	r2, r2, #8
 800499a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800499e:	fb02 f303 	mul.w	r3, r2, r3
 80049a2:	617b      	str	r3, [r7, #20]
      break;
 80049a4:	e00c      	b.n	80049c0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80049a6:	4a13      	ldr	r2, [pc, #76]	@ (80049f4 <HAL_RCC_GetSysClockFreq+0xbc>)
 80049a8:	68bb      	ldr	r3, [r7, #8]
 80049aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80049ae:	4a10      	ldr	r2, [pc, #64]	@ (80049f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80049b0:	68d2      	ldr	r2, [r2, #12]
 80049b2:	0a12      	lsrs	r2, r2, #8
 80049b4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80049b8:	fb02 f303 	mul.w	r3, r2, r3
 80049bc:	617b      	str	r3, [r7, #20]
      break;
 80049be:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80049c0:	4b0b      	ldr	r3, [pc, #44]	@ (80049f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80049c2:	68db      	ldr	r3, [r3, #12]
 80049c4:	0e5b      	lsrs	r3, r3, #25
 80049c6:	f003 0303 	and.w	r3, r3, #3
 80049ca:	3301      	adds	r3, #1
 80049cc:	005b      	lsls	r3, r3, #1
 80049ce:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80049d0:	697a      	ldr	r2, [r7, #20]
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80049d8:	613b      	str	r3, [r7, #16]
 80049da:	e001      	b.n	80049e0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80049dc:	2300      	movs	r3, #0
 80049de:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80049e0:	693b      	ldr	r3, [r7, #16]
}
 80049e2:	4618      	mov	r0, r3
 80049e4:	371c      	adds	r7, #28
 80049e6:	46bd      	mov	sp, r7
 80049e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ec:	4770      	bx	lr
 80049ee:	bf00      	nop
 80049f0:	40021000 	.word	0x40021000
 80049f4:	00f42400 	.word	0x00f42400
 80049f8:	007a1200 	.word	0x007a1200

080049fc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80049fc:	b480      	push	{r7}
 80049fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a00:	4b03      	ldr	r3, [pc, #12]	@ (8004a10 <HAL_RCC_GetHCLKFreq+0x14>)
 8004a02:	681b      	ldr	r3, [r3, #0]
}
 8004a04:	4618      	mov	r0, r3
 8004a06:	46bd      	mov	sp, r7
 8004a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0c:	4770      	bx	lr
 8004a0e:	bf00      	nop
 8004a10:	20000034 	.word	0x20000034

08004a14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004a18:	f7ff fff0 	bl	80049fc <HAL_RCC_GetHCLKFreq>
 8004a1c:	4602      	mov	r2, r0
 8004a1e:	4b06      	ldr	r3, [pc, #24]	@ (8004a38 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a20:	689b      	ldr	r3, [r3, #8]
 8004a22:	0a1b      	lsrs	r3, r3, #8
 8004a24:	f003 0307 	and.w	r3, r3, #7
 8004a28:	4904      	ldr	r1, [pc, #16]	@ (8004a3c <HAL_RCC_GetPCLK1Freq+0x28>)
 8004a2a:	5ccb      	ldrb	r3, [r1, r3]
 8004a2c:	f003 031f 	and.w	r3, r3, #31
 8004a30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a34:	4618      	mov	r0, r3
 8004a36:	bd80      	pop	{r7, pc}
 8004a38:	40021000 	.word	0x40021000
 8004a3c:	08006bb0 	.word	0x08006bb0

08004a40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004a44:	f7ff ffda 	bl	80049fc <HAL_RCC_GetHCLKFreq>
 8004a48:	4602      	mov	r2, r0
 8004a4a:	4b06      	ldr	r3, [pc, #24]	@ (8004a64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004a4c:	689b      	ldr	r3, [r3, #8]
 8004a4e:	0adb      	lsrs	r3, r3, #11
 8004a50:	f003 0307 	and.w	r3, r3, #7
 8004a54:	4904      	ldr	r1, [pc, #16]	@ (8004a68 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004a56:	5ccb      	ldrb	r3, [r1, r3]
 8004a58:	f003 031f 	and.w	r3, r3, #31
 8004a5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a60:	4618      	mov	r0, r3
 8004a62:	bd80      	pop	{r7, pc}
 8004a64:	40021000 	.word	0x40021000
 8004a68:	08006bb0 	.word	0x08006bb0

08004a6c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	b087      	sub	sp, #28
 8004a70:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004a72:	4b1e      	ldr	r3, [pc, #120]	@ (8004aec <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004a74:	68db      	ldr	r3, [r3, #12]
 8004a76:	f003 0303 	and.w	r3, r3, #3
 8004a7a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004a7c:	4b1b      	ldr	r3, [pc, #108]	@ (8004aec <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004a7e:	68db      	ldr	r3, [r3, #12]
 8004a80:	091b      	lsrs	r3, r3, #4
 8004a82:	f003 030f 	and.w	r3, r3, #15
 8004a86:	3301      	adds	r3, #1
 8004a88:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004a8a:	693b      	ldr	r3, [r7, #16]
 8004a8c:	2b03      	cmp	r3, #3
 8004a8e:	d10c      	bne.n	8004aaa <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004a90:	4a17      	ldr	r2, [pc, #92]	@ (8004af0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a98:	4a14      	ldr	r2, [pc, #80]	@ (8004aec <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004a9a:	68d2      	ldr	r2, [r2, #12]
 8004a9c:	0a12      	lsrs	r2, r2, #8
 8004a9e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004aa2:	fb02 f303 	mul.w	r3, r2, r3
 8004aa6:	617b      	str	r3, [r7, #20]
    break;
 8004aa8:	e00c      	b.n	8004ac4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004aaa:	4a12      	ldr	r2, [pc, #72]	@ (8004af4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ab2:	4a0e      	ldr	r2, [pc, #56]	@ (8004aec <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004ab4:	68d2      	ldr	r2, [r2, #12]
 8004ab6:	0a12      	lsrs	r2, r2, #8
 8004ab8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004abc:	fb02 f303 	mul.w	r3, r2, r3
 8004ac0:	617b      	str	r3, [r7, #20]
    break;
 8004ac2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004ac4:	4b09      	ldr	r3, [pc, #36]	@ (8004aec <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004ac6:	68db      	ldr	r3, [r3, #12]
 8004ac8:	0e5b      	lsrs	r3, r3, #25
 8004aca:	f003 0303 	and.w	r3, r3, #3
 8004ace:	3301      	adds	r3, #1
 8004ad0:	005b      	lsls	r3, r3, #1
 8004ad2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004ad4:	697a      	ldr	r2, [r7, #20]
 8004ad6:	68bb      	ldr	r3, [r7, #8]
 8004ad8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004adc:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004ade:	687b      	ldr	r3, [r7, #4]
}
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	371c      	adds	r7, #28
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aea:	4770      	bx	lr
 8004aec:	40021000 	.word	0x40021000
 8004af0:	007a1200 	.word	0x007a1200
 8004af4:	00f42400 	.word	0x00f42400

08004af8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b086      	sub	sp, #24
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004b00:	2300      	movs	r3, #0
 8004b02:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004b04:	2300      	movs	r3, #0
 8004b06:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	f000 8098 	beq.w	8004c46 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b16:	2300      	movs	r3, #0
 8004b18:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b1a:	4b43      	ldr	r3, [pc, #268]	@ (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d10d      	bne.n	8004b42 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b26:	4b40      	ldr	r3, [pc, #256]	@ (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b2a:	4a3f      	ldr	r2, [pc, #252]	@ (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b2c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004b30:	6593      	str	r3, [r2, #88]	@ 0x58
 8004b32:	4b3d      	ldr	r3, [pc, #244]	@ (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b3a:	60bb      	str	r3, [r7, #8]
 8004b3c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b3e:	2301      	movs	r3, #1
 8004b40:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004b42:	4b3a      	ldr	r3, [pc, #232]	@ (8004c2c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	4a39      	ldr	r2, [pc, #228]	@ (8004c2c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004b48:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004b4c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004b4e:	f7fc fc41 	bl	80013d4 <HAL_GetTick>
 8004b52:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004b54:	e009      	b.n	8004b6a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b56:	f7fc fc3d 	bl	80013d4 <HAL_GetTick>
 8004b5a:	4602      	mov	r2, r0
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	1ad3      	subs	r3, r2, r3
 8004b60:	2b02      	cmp	r3, #2
 8004b62:	d902      	bls.n	8004b6a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004b64:	2303      	movs	r3, #3
 8004b66:	74fb      	strb	r3, [r7, #19]
        break;
 8004b68:	e005      	b.n	8004b76 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004b6a:	4b30      	ldr	r3, [pc, #192]	@ (8004c2c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d0ef      	beq.n	8004b56 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004b76:	7cfb      	ldrb	r3, [r7, #19]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d159      	bne.n	8004c30 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004b7c:	4b2a      	ldr	r3, [pc, #168]	@ (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b82:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004b86:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004b88:	697b      	ldr	r3, [r7, #20]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d01e      	beq.n	8004bcc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b92:	697a      	ldr	r2, [r7, #20]
 8004b94:	429a      	cmp	r2, r3
 8004b96:	d019      	beq.n	8004bcc <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004b98:	4b23      	ldr	r3, [pc, #140]	@ (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b9e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004ba2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004ba4:	4b20      	ldr	r3, [pc, #128]	@ (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ba6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004baa:	4a1f      	ldr	r2, [pc, #124]	@ (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004bac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004bb0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004bb4:	4b1c      	ldr	r3, [pc, #112]	@ (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004bb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004bba:	4a1b      	ldr	r2, [pc, #108]	@ (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004bbc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004bc0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004bc4:	4a18      	ldr	r2, [pc, #96]	@ (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004bc6:	697b      	ldr	r3, [r7, #20]
 8004bc8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004bcc:	697b      	ldr	r3, [r7, #20]
 8004bce:	f003 0301 	and.w	r3, r3, #1
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d016      	beq.n	8004c04 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bd6:	f7fc fbfd 	bl	80013d4 <HAL_GetTick>
 8004bda:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004bdc:	e00b      	b.n	8004bf6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004bde:	f7fc fbf9 	bl	80013d4 <HAL_GetTick>
 8004be2:	4602      	mov	r2, r0
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	1ad3      	subs	r3, r2, r3
 8004be8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004bec:	4293      	cmp	r3, r2
 8004bee:	d902      	bls.n	8004bf6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004bf0:	2303      	movs	r3, #3
 8004bf2:	74fb      	strb	r3, [r7, #19]
            break;
 8004bf4:	e006      	b.n	8004c04 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004bf6:	4b0c      	ldr	r3, [pc, #48]	@ (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004bf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004bfc:	f003 0302 	and.w	r3, r3, #2
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d0ec      	beq.n	8004bde <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004c04:	7cfb      	ldrb	r3, [r7, #19]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d10b      	bne.n	8004c22 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004c0a:	4b07      	ldr	r3, [pc, #28]	@ (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c10:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c18:	4903      	ldr	r1, [pc, #12]	@ (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c1a:	4313      	orrs	r3, r2
 8004c1c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004c20:	e008      	b.n	8004c34 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004c22:	7cfb      	ldrb	r3, [r7, #19]
 8004c24:	74bb      	strb	r3, [r7, #18]
 8004c26:	e005      	b.n	8004c34 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004c28:	40021000 	.word	0x40021000
 8004c2c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c30:	7cfb      	ldrb	r3, [r7, #19]
 8004c32:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004c34:	7c7b      	ldrb	r3, [r7, #17]
 8004c36:	2b01      	cmp	r3, #1
 8004c38:	d105      	bne.n	8004c46 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c3a:	4ba6      	ldr	r3, [pc, #664]	@ (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c3e:	4aa5      	ldr	r2, [pc, #660]	@ (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c40:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004c44:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f003 0301 	and.w	r3, r3, #1
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d00a      	beq.n	8004c68 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004c52:	4ba0      	ldr	r3, [pc, #640]	@ (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c58:	f023 0203 	bic.w	r2, r3, #3
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	685b      	ldr	r3, [r3, #4]
 8004c60:	499c      	ldr	r1, [pc, #624]	@ (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c62:	4313      	orrs	r3, r2
 8004c64:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f003 0302 	and.w	r3, r3, #2
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d00a      	beq.n	8004c8a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004c74:	4b97      	ldr	r3, [pc, #604]	@ (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c7a:	f023 020c 	bic.w	r2, r3, #12
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	689b      	ldr	r3, [r3, #8]
 8004c82:	4994      	ldr	r1, [pc, #592]	@ (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c84:	4313      	orrs	r3, r2
 8004c86:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f003 0304 	and.w	r3, r3, #4
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d00a      	beq.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004c96:	4b8f      	ldr	r3, [pc, #572]	@ (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c9c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	68db      	ldr	r3, [r3, #12]
 8004ca4:	498b      	ldr	r1, [pc, #556]	@ (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ca6:	4313      	orrs	r3, r2
 8004ca8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f003 0308 	and.w	r3, r3, #8
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d00a      	beq.n	8004cce <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004cb8:	4b86      	ldr	r3, [pc, #536]	@ (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004cba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cbe:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	691b      	ldr	r3, [r3, #16]
 8004cc6:	4983      	ldr	r1, [pc, #524]	@ (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f003 0320 	and.w	r3, r3, #32
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d00a      	beq.n	8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004cda:	4b7e      	ldr	r3, [pc, #504]	@ (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004cdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ce0:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	695b      	ldr	r3, [r3, #20]
 8004ce8:	497a      	ldr	r1, [pc, #488]	@ (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004cea:	4313      	orrs	r3, r2
 8004cec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d00a      	beq.n	8004d12 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004cfc:	4b75      	ldr	r3, [pc, #468]	@ (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004cfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d02:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	699b      	ldr	r3, [r3, #24]
 8004d0a:	4972      	ldr	r1, [pc, #456]	@ (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d0c:	4313      	orrs	r3, r2
 8004d0e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d00a      	beq.n	8004d34 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004d1e:	4b6d      	ldr	r3, [pc, #436]	@ (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d24:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	69db      	ldr	r3, [r3, #28]
 8004d2c:	4969      	ldr	r1, [pc, #420]	@ (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d2e:	4313      	orrs	r3, r2
 8004d30:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d00a      	beq.n	8004d56 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004d40:	4b64      	ldr	r3, [pc, #400]	@ (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d46:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6a1b      	ldr	r3, [r3, #32]
 8004d4e:	4961      	ldr	r1, [pc, #388]	@ (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d50:	4313      	orrs	r3, r2
 8004d52:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d00a      	beq.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004d62:	4b5c      	ldr	r3, [pc, #368]	@ (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d68:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d70:	4958      	ldr	r1, [pc, #352]	@ (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d72:	4313      	orrs	r3, r2
 8004d74:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d015      	beq.n	8004db0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004d84:	4b53      	ldr	r3, [pc, #332]	@ (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d8a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d92:	4950      	ldr	r1, [pc, #320]	@ (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d94:	4313      	orrs	r3, r2
 8004d96:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d9e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004da2:	d105      	bne.n	8004db0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004da4:	4b4b      	ldr	r3, [pc, #300]	@ (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004da6:	68db      	ldr	r3, [r3, #12]
 8004da8:	4a4a      	ldr	r2, [pc, #296]	@ (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004daa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004dae:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d015      	beq.n	8004de8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004dbc:	4b45      	ldr	r3, [pc, #276]	@ (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004dbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004dc2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dca:	4942      	ldr	r1, [pc, #264]	@ (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004dcc:	4313      	orrs	r3, r2
 8004dce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dd6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004dda:	d105      	bne.n	8004de8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ddc:	4b3d      	ldr	r3, [pc, #244]	@ (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004dde:	68db      	ldr	r3, [r3, #12]
 8004de0:	4a3c      	ldr	r2, [pc, #240]	@ (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004de2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004de6:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d015      	beq.n	8004e20 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004df4:	4b37      	ldr	r3, [pc, #220]	@ (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004df6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004dfa:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e02:	4934      	ldr	r1, [pc, #208]	@ (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e04:	4313      	orrs	r3, r2
 8004e06:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e0e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004e12:	d105      	bne.n	8004e20 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e14:	4b2f      	ldr	r3, [pc, #188]	@ (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e16:	68db      	ldr	r3, [r3, #12]
 8004e18:	4a2e      	ldr	r2, [pc, #184]	@ (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e1a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004e1e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d015      	beq.n	8004e58 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004e2c:	4b29      	ldr	r3, [pc, #164]	@ (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e32:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e3a:	4926      	ldr	r1, [pc, #152]	@ (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e3c:	4313      	orrs	r3, r2
 8004e3e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e46:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004e4a:	d105      	bne.n	8004e58 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e4c:	4b21      	ldr	r3, [pc, #132]	@ (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e4e:	68db      	ldr	r3, [r3, #12]
 8004e50:	4a20      	ldr	r2, [pc, #128]	@ (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e52:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004e56:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d015      	beq.n	8004e90 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004e64:	4b1b      	ldr	r3, [pc, #108]	@ (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e6a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e72:	4918      	ldr	r1, [pc, #96]	@ (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e74:	4313      	orrs	r3, r2
 8004e76:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e7e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004e82:	d105      	bne.n	8004e90 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e84:	4b13      	ldr	r3, [pc, #76]	@ (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e86:	68db      	ldr	r3, [r3, #12]
 8004e88:	4a12      	ldr	r2, [pc, #72]	@ (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e8a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004e8e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d015      	beq.n	8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004e9c:	4b0d      	ldr	r3, [pc, #52]	@ (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ea2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004eaa:	490a      	ldr	r1, [pc, #40]	@ (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004eac:	4313      	orrs	r3, r2
 8004eae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004eb6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004eba:	d105      	bne.n	8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004ebc:	4b05      	ldr	r3, [pc, #20]	@ (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ebe:	68db      	ldr	r3, [r3, #12]
 8004ec0:	4a04      	ldr	r2, [pc, #16]	@ (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ec2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ec6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004ec8:	7cbb      	ldrb	r3, [r7, #18]
}
 8004eca:	4618      	mov	r0, r3
 8004ecc:	3718      	adds	r7, #24
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	bd80      	pop	{r7, pc}
 8004ed2:	bf00      	nop
 8004ed4:	40021000 	.word	0x40021000

08004ed8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b082      	sub	sp, #8
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d101      	bne.n	8004eea <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	e049      	b.n	8004f7e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ef0:	b2db      	uxtb	r3, r3
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d106      	bne.n	8004f04 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2200      	movs	r2, #0
 8004efa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004efe:	6878      	ldr	r0, [r7, #4]
 8004f00:	f7fc f836 	bl	8000f70 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2202      	movs	r2, #2
 8004f08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681a      	ldr	r2, [r3, #0]
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	3304      	adds	r3, #4
 8004f14:	4619      	mov	r1, r3
 8004f16:	4610      	mov	r0, r2
 8004f18:	f000 f9f0 	bl	80052fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2201      	movs	r2, #1
 8004f20:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2201      	movs	r2, #1
 8004f28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2201      	movs	r2, #1
 8004f30:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2201      	movs	r2, #1
 8004f38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2201      	movs	r2, #1
 8004f40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2201      	movs	r2, #1
 8004f48:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2201      	movs	r2, #1
 8004f50:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2201      	movs	r2, #1
 8004f58:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2201      	movs	r2, #1
 8004f60:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2201      	movs	r2, #1
 8004f68:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2201      	movs	r2, #1
 8004f70:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2201      	movs	r2, #1
 8004f78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004f7c:	2300      	movs	r3, #0
}
 8004f7e:	4618      	mov	r0, r3
 8004f80:	3708      	adds	r7, #8
 8004f82:	46bd      	mov	sp, r7
 8004f84:	bd80      	pop	{r7, pc}

08004f86 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8004f86:	b580      	push	{r7, lr}
 8004f88:	b086      	sub	sp, #24
 8004f8a:	af00      	add	r7, sp, #0
 8004f8c:	6078      	str	r0, [r7, #4]
 8004f8e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d101      	bne.n	8004f9a <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004f96:	2301      	movs	r3, #1
 8004f98:	e097      	b.n	80050ca <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004fa0:	b2db      	uxtb	r3, r3
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d106      	bne.n	8004fb4 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2200      	movs	r2, #0
 8004faa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004fae:	6878      	ldr	r0, [r7, #4]
 8004fb0:	f7fb ff4c 	bl	8000e4c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2202      	movs	r2, #2
 8004fb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	689b      	ldr	r3, [r3, #8]
 8004fc2:	687a      	ldr	r2, [r7, #4]
 8004fc4:	6812      	ldr	r2, [r2, #0]
 8004fc6:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8004fca:	f023 0307 	bic.w	r3, r3, #7
 8004fce:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681a      	ldr	r2, [r3, #0]
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	3304      	adds	r3, #4
 8004fd8:	4619      	mov	r1, r3
 8004fda:	4610      	mov	r0, r2
 8004fdc:	f000 f98e 	bl	80052fc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	689b      	ldr	r3, [r3, #8]
 8004fe6:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	699b      	ldr	r3, [r3, #24]
 8004fee:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	6a1b      	ldr	r3, [r3, #32]
 8004ff6:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	697a      	ldr	r2, [r7, #20]
 8004ffe:	4313      	orrs	r3, r2
 8005000:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005002:	693b      	ldr	r3, [r7, #16]
 8005004:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005008:	f023 0303 	bic.w	r3, r3, #3
 800500c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	689a      	ldr	r2, [r3, #8]
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	699b      	ldr	r3, [r3, #24]
 8005016:	021b      	lsls	r3, r3, #8
 8005018:	4313      	orrs	r3, r2
 800501a:	693a      	ldr	r2, [r7, #16]
 800501c:	4313      	orrs	r3, r2
 800501e:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005020:	693b      	ldr	r3, [r7, #16]
 8005022:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8005026:	f023 030c 	bic.w	r3, r3, #12
 800502a:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800502c:	693b      	ldr	r3, [r7, #16]
 800502e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005032:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005036:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	68da      	ldr	r2, [r3, #12]
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	69db      	ldr	r3, [r3, #28]
 8005040:	021b      	lsls	r3, r3, #8
 8005042:	4313      	orrs	r3, r2
 8005044:	693a      	ldr	r2, [r7, #16]
 8005046:	4313      	orrs	r3, r2
 8005048:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	691b      	ldr	r3, [r3, #16]
 800504e:	011a      	lsls	r2, r3, #4
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	6a1b      	ldr	r3, [r3, #32]
 8005054:	031b      	lsls	r3, r3, #12
 8005056:	4313      	orrs	r3, r2
 8005058:	693a      	ldr	r2, [r7, #16]
 800505a:	4313      	orrs	r3, r2
 800505c:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8005064:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800506c:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	685a      	ldr	r2, [r3, #4]
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	695b      	ldr	r3, [r3, #20]
 8005076:	011b      	lsls	r3, r3, #4
 8005078:	4313      	orrs	r3, r2
 800507a:	68fa      	ldr	r2, [r7, #12]
 800507c:	4313      	orrs	r3, r2
 800507e:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	697a      	ldr	r2, [r7, #20]
 8005086:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	693a      	ldr	r2, [r7, #16]
 800508e:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	68fa      	ldr	r2, [r7, #12]
 8005096:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2201      	movs	r2, #1
 800509c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2201      	movs	r2, #1
 80050a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2201      	movs	r2, #1
 80050ac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2201      	movs	r2, #1
 80050b4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2201      	movs	r2, #1
 80050bc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2201      	movs	r2, #1
 80050c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80050c8:	2300      	movs	r3, #0
}
 80050ca:	4618      	mov	r0, r3
 80050cc:	3718      	adds	r7, #24
 80050ce:	46bd      	mov	sp, r7
 80050d0:	bd80      	pop	{r7, pc}
	...

080050d4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b086      	sub	sp, #24
 80050d8:	af00      	add	r7, sp, #0
 80050da:	60f8      	str	r0, [r7, #12]
 80050dc:	60b9      	str	r1, [r7, #8]
 80050de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80050e0:	2300      	movs	r3, #0
 80050e2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80050ea:	2b01      	cmp	r3, #1
 80050ec:	d101      	bne.n	80050f2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80050ee:	2302      	movs	r3, #2
 80050f0:	e0ff      	b.n	80052f2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	2201      	movs	r2, #1
 80050f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2b14      	cmp	r3, #20
 80050fe:	f200 80f0 	bhi.w	80052e2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005102:	a201      	add	r2, pc, #4	@ (adr r2, 8005108 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005104:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005108:	0800515d 	.word	0x0800515d
 800510c:	080052e3 	.word	0x080052e3
 8005110:	080052e3 	.word	0x080052e3
 8005114:	080052e3 	.word	0x080052e3
 8005118:	0800519d 	.word	0x0800519d
 800511c:	080052e3 	.word	0x080052e3
 8005120:	080052e3 	.word	0x080052e3
 8005124:	080052e3 	.word	0x080052e3
 8005128:	080051df 	.word	0x080051df
 800512c:	080052e3 	.word	0x080052e3
 8005130:	080052e3 	.word	0x080052e3
 8005134:	080052e3 	.word	0x080052e3
 8005138:	0800521f 	.word	0x0800521f
 800513c:	080052e3 	.word	0x080052e3
 8005140:	080052e3 	.word	0x080052e3
 8005144:	080052e3 	.word	0x080052e3
 8005148:	08005261 	.word	0x08005261
 800514c:	080052e3 	.word	0x080052e3
 8005150:	080052e3 	.word	0x080052e3
 8005154:	080052e3 	.word	0x080052e3
 8005158:	080052a1 	.word	0x080052a1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	68b9      	ldr	r1, [r7, #8]
 8005162:	4618      	mov	r0, r3
 8005164:	f000 f966 	bl	8005434 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	699a      	ldr	r2, [r3, #24]
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f042 0208 	orr.w	r2, r2, #8
 8005176:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	699a      	ldr	r2, [r3, #24]
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f022 0204 	bic.w	r2, r2, #4
 8005186:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	6999      	ldr	r1, [r3, #24]
 800518e:	68bb      	ldr	r3, [r7, #8]
 8005190:	691a      	ldr	r2, [r3, #16]
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	430a      	orrs	r2, r1
 8005198:	619a      	str	r2, [r3, #24]
      break;
 800519a:	e0a5      	b.n	80052e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	68b9      	ldr	r1, [r7, #8]
 80051a2:	4618      	mov	r0, r3
 80051a4:	f000 f9d6 	bl	8005554 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	699a      	ldr	r2, [r3, #24]
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80051b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	699a      	ldr	r2, [r3, #24]
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80051c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	6999      	ldr	r1, [r3, #24]
 80051ce:	68bb      	ldr	r3, [r7, #8]
 80051d0:	691b      	ldr	r3, [r3, #16]
 80051d2:	021a      	lsls	r2, r3, #8
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	430a      	orrs	r2, r1
 80051da:	619a      	str	r2, [r3, #24]
      break;
 80051dc:	e084      	b.n	80052e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	68b9      	ldr	r1, [r7, #8]
 80051e4:	4618      	mov	r0, r3
 80051e6:	f000 fa3f 	bl	8005668 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	69da      	ldr	r2, [r3, #28]
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f042 0208 	orr.w	r2, r2, #8
 80051f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	69da      	ldr	r2, [r3, #28]
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f022 0204 	bic.w	r2, r2, #4
 8005208:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	69d9      	ldr	r1, [r3, #28]
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	691a      	ldr	r2, [r3, #16]
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	430a      	orrs	r2, r1
 800521a:	61da      	str	r2, [r3, #28]
      break;
 800521c:	e064      	b.n	80052e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	68b9      	ldr	r1, [r7, #8]
 8005224:	4618      	mov	r0, r3
 8005226:	f000 faa7 	bl	8005778 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	69da      	ldr	r2, [r3, #28]
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005238:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	69da      	ldr	r2, [r3, #28]
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005248:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	69d9      	ldr	r1, [r3, #28]
 8005250:	68bb      	ldr	r3, [r7, #8]
 8005252:	691b      	ldr	r3, [r3, #16]
 8005254:	021a      	lsls	r2, r3, #8
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	430a      	orrs	r2, r1
 800525c:	61da      	str	r2, [r3, #28]
      break;
 800525e:	e043      	b.n	80052e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	68b9      	ldr	r1, [r7, #8]
 8005266:	4618      	mov	r0, r3
 8005268:	f000 fb10 	bl	800588c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f042 0208 	orr.w	r2, r2, #8
 800527a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f022 0204 	bic.w	r2, r2, #4
 800528a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8005292:	68bb      	ldr	r3, [r7, #8]
 8005294:	691a      	ldr	r2, [r3, #16]
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	430a      	orrs	r2, r1
 800529c:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800529e:	e023      	b.n	80052e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	68b9      	ldr	r1, [r7, #8]
 80052a6:	4618      	mov	r0, r3
 80052a8:	f000 fb54 	bl	8005954 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80052ba:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80052ca:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80052d2:	68bb      	ldr	r3, [r7, #8]
 80052d4:	691b      	ldr	r3, [r3, #16]
 80052d6:	021a      	lsls	r2, r3, #8
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	430a      	orrs	r2, r1
 80052de:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80052e0:	e002      	b.n	80052e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80052e2:	2301      	movs	r3, #1
 80052e4:	75fb      	strb	r3, [r7, #23]
      break;
 80052e6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	2200      	movs	r2, #0
 80052ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80052f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80052f2:	4618      	mov	r0, r3
 80052f4:	3718      	adds	r7, #24
 80052f6:	46bd      	mov	sp, r7
 80052f8:	bd80      	pop	{r7, pc}
 80052fa:	bf00      	nop

080052fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80052fc:	b480      	push	{r7}
 80052fe:	b085      	sub	sp, #20
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
 8005304:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	4a42      	ldr	r2, [pc, #264]	@ (8005418 <TIM_Base_SetConfig+0x11c>)
 8005310:	4293      	cmp	r3, r2
 8005312:	d00f      	beq.n	8005334 <TIM_Base_SetConfig+0x38>
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800531a:	d00b      	beq.n	8005334 <TIM_Base_SetConfig+0x38>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	4a3f      	ldr	r2, [pc, #252]	@ (800541c <TIM_Base_SetConfig+0x120>)
 8005320:	4293      	cmp	r3, r2
 8005322:	d007      	beq.n	8005334 <TIM_Base_SetConfig+0x38>
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	4a3e      	ldr	r2, [pc, #248]	@ (8005420 <TIM_Base_SetConfig+0x124>)
 8005328:	4293      	cmp	r3, r2
 800532a:	d003      	beq.n	8005334 <TIM_Base_SetConfig+0x38>
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	4a3d      	ldr	r2, [pc, #244]	@ (8005424 <TIM_Base_SetConfig+0x128>)
 8005330:	4293      	cmp	r3, r2
 8005332:	d108      	bne.n	8005346 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800533a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	685b      	ldr	r3, [r3, #4]
 8005340:	68fa      	ldr	r2, [r7, #12]
 8005342:	4313      	orrs	r3, r2
 8005344:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	4a33      	ldr	r2, [pc, #204]	@ (8005418 <TIM_Base_SetConfig+0x11c>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d01b      	beq.n	8005386 <TIM_Base_SetConfig+0x8a>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005354:	d017      	beq.n	8005386 <TIM_Base_SetConfig+0x8a>
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	4a30      	ldr	r2, [pc, #192]	@ (800541c <TIM_Base_SetConfig+0x120>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d013      	beq.n	8005386 <TIM_Base_SetConfig+0x8a>
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	4a2f      	ldr	r2, [pc, #188]	@ (8005420 <TIM_Base_SetConfig+0x124>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d00f      	beq.n	8005386 <TIM_Base_SetConfig+0x8a>
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	4a2e      	ldr	r2, [pc, #184]	@ (8005424 <TIM_Base_SetConfig+0x128>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d00b      	beq.n	8005386 <TIM_Base_SetConfig+0x8a>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	4a2d      	ldr	r2, [pc, #180]	@ (8005428 <TIM_Base_SetConfig+0x12c>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d007      	beq.n	8005386 <TIM_Base_SetConfig+0x8a>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	4a2c      	ldr	r2, [pc, #176]	@ (800542c <TIM_Base_SetConfig+0x130>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d003      	beq.n	8005386 <TIM_Base_SetConfig+0x8a>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	4a2b      	ldr	r2, [pc, #172]	@ (8005430 <TIM_Base_SetConfig+0x134>)
 8005382:	4293      	cmp	r3, r2
 8005384:	d108      	bne.n	8005398 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800538c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	68db      	ldr	r3, [r3, #12]
 8005392:	68fa      	ldr	r2, [r7, #12]
 8005394:	4313      	orrs	r3, r2
 8005396:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	695b      	ldr	r3, [r3, #20]
 80053a2:	4313      	orrs	r3, r2
 80053a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	68fa      	ldr	r2, [r7, #12]
 80053aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	689a      	ldr	r2, [r3, #8]
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	681a      	ldr	r2, [r3, #0]
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	4a16      	ldr	r2, [pc, #88]	@ (8005418 <TIM_Base_SetConfig+0x11c>)
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d00f      	beq.n	80053e4 <TIM_Base_SetConfig+0xe8>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	4a17      	ldr	r2, [pc, #92]	@ (8005424 <TIM_Base_SetConfig+0x128>)
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d00b      	beq.n	80053e4 <TIM_Base_SetConfig+0xe8>
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	4a16      	ldr	r2, [pc, #88]	@ (8005428 <TIM_Base_SetConfig+0x12c>)
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d007      	beq.n	80053e4 <TIM_Base_SetConfig+0xe8>
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	4a15      	ldr	r2, [pc, #84]	@ (800542c <TIM_Base_SetConfig+0x130>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d003      	beq.n	80053e4 <TIM_Base_SetConfig+0xe8>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	4a14      	ldr	r2, [pc, #80]	@ (8005430 <TIM_Base_SetConfig+0x134>)
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d103      	bne.n	80053ec <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	691a      	ldr	r2, [r3, #16]
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2201      	movs	r2, #1
 80053f0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	691b      	ldr	r3, [r3, #16]
 80053f6:	f003 0301 	and.w	r3, r3, #1
 80053fa:	2b01      	cmp	r3, #1
 80053fc:	d105      	bne.n	800540a <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	691b      	ldr	r3, [r3, #16]
 8005402:	f023 0201 	bic.w	r2, r3, #1
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	611a      	str	r2, [r3, #16]
  }
}
 800540a:	bf00      	nop
 800540c:	3714      	adds	r7, #20
 800540e:	46bd      	mov	sp, r7
 8005410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005414:	4770      	bx	lr
 8005416:	bf00      	nop
 8005418:	40012c00 	.word	0x40012c00
 800541c:	40000400 	.word	0x40000400
 8005420:	40000800 	.word	0x40000800
 8005424:	40013400 	.word	0x40013400
 8005428:	40014000 	.word	0x40014000
 800542c:	40014400 	.word	0x40014400
 8005430:	40014800 	.word	0x40014800

08005434 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005434:	b480      	push	{r7}
 8005436:	b087      	sub	sp, #28
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
 800543c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6a1b      	ldr	r3, [r3, #32]
 8005442:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6a1b      	ldr	r3, [r3, #32]
 8005448:	f023 0201 	bic.w	r2, r3, #1
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	685b      	ldr	r3, [r3, #4]
 8005454:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	699b      	ldr	r3, [r3, #24]
 800545a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005462:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005466:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	f023 0303 	bic.w	r3, r3, #3
 800546e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	68fa      	ldr	r2, [r7, #12]
 8005476:	4313      	orrs	r3, r2
 8005478:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800547a:	697b      	ldr	r3, [r7, #20]
 800547c:	f023 0302 	bic.w	r3, r3, #2
 8005480:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	689b      	ldr	r3, [r3, #8]
 8005486:	697a      	ldr	r2, [r7, #20]
 8005488:	4313      	orrs	r3, r2
 800548a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	4a2c      	ldr	r2, [pc, #176]	@ (8005540 <TIM_OC1_SetConfig+0x10c>)
 8005490:	4293      	cmp	r3, r2
 8005492:	d00f      	beq.n	80054b4 <TIM_OC1_SetConfig+0x80>
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	4a2b      	ldr	r2, [pc, #172]	@ (8005544 <TIM_OC1_SetConfig+0x110>)
 8005498:	4293      	cmp	r3, r2
 800549a:	d00b      	beq.n	80054b4 <TIM_OC1_SetConfig+0x80>
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	4a2a      	ldr	r2, [pc, #168]	@ (8005548 <TIM_OC1_SetConfig+0x114>)
 80054a0:	4293      	cmp	r3, r2
 80054a2:	d007      	beq.n	80054b4 <TIM_OC1_SetConfig+0x80>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	4a29      	ldr	r2, [pc, #164]	@ (800554c <TIM_OC1_SetConfig+0x118>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d003      	beq.n	80054b4 <TIM_OC1_SetConfig+0x80>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	4a28      	ldr	r2, [pc, #160]	@ (8005550 <TIM_OC1_SetConfig+0x11c>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d10c      	bne.n	80054ce <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80054b4:	697b      	ldr	r3, [r7, #20]
 80054b6:	f023 0308 	bic.w	r3, r3, #8
 80054ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	68db      	ldr	r3, [r3, #12]
 80054c0:	697a      	ldr	r2, [r7, #20]
 80054c2:	4313      	orrs	r3, r2
 80054c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80054c6:	697b      	ldr	r3, [r7, #20]
 80054c8:	f023 0304 	bic.w	r3, r3, #4
 80054cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	4a1b      	ldr	r2, [pc, #108]	@ (8005540 <TIM_OC1_SetConfig+0x10c>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d00f      	beq.n	80054f6 <TIM_OC1_SetConfig+0xc2>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	4a1a      	ldr	r2, [pc, #104]	@ (8005544 <TIM_OC1_SetConfig+0x110>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d00b      	beq.n	80054f6 <TIM_OC1_SetConfig+0xc2>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	4a19      	ldr	r2, [pc, #100]	@ (8005548 <TIM_OC1_SetConfig+0x114>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d007      	beq.n	80054f6 <TIM_OC1_SetConfig+0xc2>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	4a18      	ldr	r2, [pc, #96]	@ (800554c <TIM_OC1_SetConfig+0x118>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d003      	beq.n	80054f6 <TIM_OC1_SetConfig+0xc2>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	4a17      	ldr	r2, [pc, #92]	@ (8005550 <TIM_OC1_SetConfig+0x11c>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d111      	bne.n	800551a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80054f6:	693b      	ldr	r3, [r7, #16]
 80054f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80054fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80054fe:	693b      	ldr	r3, [r7, #16]
 8005500:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005504:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	695b      	ldr	r3, [r3, #20]
 800550a:	693a      	ldr	r2, [r7, #16]
 800550c:	4313      	orrs	r3, r2
 800550e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	699b      	ldr	r3, [r3, #24]
 8005514:	693a      	ldr	r2, [r7, #16]
 8005516:	4313      	orrs	r3, r2
 8005518:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	693a      	ldr	r2, [r7, #16]
 800551e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	68fa      	ldr	r2, [r7, #12]
 8005524:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	685a      	ldr	r2, [r3, #4]
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	697a      	ldr	r2, [r7, #20]
 8005532:	621a      	str	r2, [r3, #32]
}
 8005534:	bf00      	nop
 8005536:	371c      	adds	r7, #28
 8005538:	46bd      	mov	sp, r7
 800553a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553e:	4770      	bx	lr
 8005540:	40012c00 	.word	0x40012c00
 8005544:	40013400 	.word	0x40013400
 8005548:	40014000 	.word	0x40014000
 800554c:	40014400 	.word	0x40014400
 8005550:	40014800 	.word	0x40014800

08005554 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005554:	b480      	push	{r7}
 8005556:	b087      	sub	sp, #28
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
 800555c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6a1b      	ldr	r3, [r3, #32]
 8005562:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	6a1b      	ldr	r3, [r3, #32]
 8005568:	f023 0210 	bic.w	r2, r3, #16
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	685b      	ldr	r3, [r3, #4]
 8005574:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	699b      	ldr	r3, [r3, #24]
 800557a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005582:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005586:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800558e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	021b      	lsls	r3, r3, #8
 8005596:	68fa      	ldr	r2, [r7, #12]
 8005598:	4313      	orrs	r3, r2
 800559a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800559c:	697b      	ldr	r3, [r7, #20]
 800559e:	f023 0320 	bic.w	r3, r3, #32
 80055a2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	689b      	ldr	r3, [r3, #8]
 80055a8:	011b      	lsls	r3, r3, #4
 80055aa:	697a      	ldr	r2, [r7, #20]
 80055ac:	4313      	orrs	r3, r2
 80055ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	4a28      	ldr	r2, [pc, #160]	@ (8005654 <TIM_OC2_SetConfig+0x100>)
 80055b4:	4293      	cmp	r3, r2
 80055b6:	d003      	beq.n	80055c0 <TIM_OC2_SetConfig+0x6c>
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	4a27      	ldr	r2, [pc, #156]	@ (8005658 <TIM_OC2_SetConfig+0x104>)
 80055bc:	4293      	cmp	r3, r2
 80055be:	d10d      	bne.n	80055dc <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80055c0:	697b      	ldr	r3, [r7, #20]
 80055c2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80055c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	68db      	ldr	r3, [r3, #12]
 80055cc:	011b      	lsls	r3, r3, #4
 80055ce:	697a      	ldr	r2, [r7, #20]
 80055d0:	4313      	orrs	r3, r2
 80055d2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80055d4:	697b      	ldr	r3, [r7, #20]
 80055d6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80055da:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	4a1d      	ldr	r2, [pc, #116]	@ (8005654 <TIM_OC2_SetConfig+0x100>)
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d00f      	beq.n	8005604 <TIM_OC2_SetConfig+0xb0>
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	4a1c      	ldr	r2, [pc, #112]	@ (8005658 <TIM_OC2_SetConfig+0x104>)
 80055e8:	4293      	cmp	r3, r2
 80055ea:	d00b      	beq.n	8005604 <TIM_OC2_SetConfig+0xb0>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	4a1b      	ldr	r2, [pc, #108]	@ (800565c <TIM_OC2_SetConfig+0x108>)
 80055f0:	4293      	cmp	r3, r2
 80055f2:	d007      	beq.n	8005604 <TIM_OC2_SetConfig+0xb0>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	4a1a      	ldr	r2, [pc, #104]	@ (8005660 <TIM_OC2_SetConfig+0x10c>)
 80055f8:	4293      	cmp	r3, r2
 80055fa:	d003      	beq.n	8005604 <TIM_OC2_SetConfig+0xb0>
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	4a19      	ldr	r2, [pc, #100]	@ (8005664 <TIM_OC2_SetConfig+0x110>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d113      	bne.n	800562c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005604:	693b      	ldr	r3, [r7, #16]
 8005606:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800560a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800560c:	693b      	ldr	r3, [r7, #16]
 800560e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005612:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	695b      	ldr	r3, [r3, #20]
 8005618:	009b      	lsls	r3, r3, #2
 800561a:	693a      	ldr	r2, [r7, #16]
 800561c:	4313      	orrs	r3, r2
 800561e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	699b      	ldr	r3, [r3, #24]
 8005624:	009b      	lsls	r3, r3, #2
 8005626:	693a      	ldr	r2, [r7, #16]
 8005628:	4313      	orrs	r3, r2
 800562a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	693a      	ldr	r2, [r7, #16]
 8005630:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	68fa      	ldr	r2, [r7, #12]
 8005636:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	685a      	ldr	r2, [r3, #4]
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	697a      	ldr	r2, [r7, #20]
 8005644:	621a      	str	r2, [r3, #32]
}
 8005646:	bf00      	nop
 8005648:	371c      	adds	r7, #28
 800564a:	46bd      	mov	sp, r7
 800564c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005650:	4770      	bx	lr
 8005652:	bf00      	nop
 8005654:	40012c00 	.word	0x40012c00
 8005658:	40013400 	.word	0x40013400
 800565c:	40014000 	.word	0x40014000
 8005660:	40014400 	.word	0x40014400
 8005664:	40014800 	.word	0x40014800

08005668 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005668:	b480      	push	{r7}
 800566a:	b087      	sub	sp, #28
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
 8005670:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6a1b      	ldr	r3, [r3, #32]
 8005676:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	6a1b      	ldr	r3, [r3, #32]
 800567c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	685b      	ldr	r3, [r3, #4]
 8005688:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	69db      	ldr	r3, [r3, #28]
 800568e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005696:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800569a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	f023 0303 	bic.w	r3, r3, #3
 80056a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	68fa      	ldr	r2, [r7, #12]
 80056aa:	4313      	orrs	r3, r2
 80056ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80056ae:	697b      	ldr	r3, [r7, #20]
 80056b0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80056b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	689b      	ldr	r3, [r3, #8]
 80056ba:	021b      	lsls	r3, r3, #8
 80056bc:	697a      	ldr	r2, [r7, #20]
 80056be:	4313      	orrs	r3, r2
 80056c0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	4a27      	ldr	r2, [pc, #156]	@ (8005764 <TIM_OC3_SetConfig+0xfc>)
 80056c6:	4293      	cmp	r3, r2
 80056c8:	d003      	beq.n	80056d2 <TIM_OC3_SetConfig+0x6a>
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	4a26      	ldr	r2, [pc, #152]	@ (8005768 <TIM_OC3_SetConfig+0x100>)
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d10d      	bne.n	80056ee <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80056d2:	697b      	ldr	r3, [r7, #20]
 80056d4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80056d8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	68db      	ldr	r3, [r3, #12]
 80056de:	021b      	lsls	r3, r3, #8
 80056e0:	697a      	ldr	r2, [r7, #20]
 80056e2:	4313      	orrs	r3, r2
 80056e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80056e6:	697b      	ldr	r3, [r7, #20]
 80056e8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80056ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	4a1c      	ldr	r2, [pc, #112]	@ (8005764 <TIM_OC3_SetConfig+0xfc>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d00f      	beq.n	8005716 <TIM_OC3_SetConfig+0xae>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	4a1b      	ldr	r2, [pc, #108]	@ (8005768 <TIM_OC3_SetConfig+0x100>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d00b      	beq.n	8005716 <TIM_OC3_SetConfig+0xae>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	4a1a      	ldr	r2, [pc, #104]	@ (800576c <TIM_OC3_SetConfig+0x104>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d007      	beq.n	8005716 <TIM_OC3_SetConfig+0xae>
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	4a19      	ldr	r2, [pc, #100]	@ (8005770 <TIM_OC3_SetConfig+0x108>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d003      	beq.n	8005716 <TIM_OC3_SetConfig+0xae>
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	4a18      	ldr	r2, [pc, #96]	@ (8005774 <TIM_OC3_SetConfig+0x10c>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d113      	bne.n	800573e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005716:	693b      	ldr	r3, [r7, #16]
 8005718:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800571c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800571e:	693b      	ldr	r3, [r7, #16]
 8005720:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005724:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	695b      	ldr	r3, [r3, #20]
 800572a:	011b      	lsls	r3, r3, #4
 800572c:	693a      	ldr	r2, [r7, #16]
 800572e:	4313      	orrs	r3, r2
 8005730:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	699b      	ldr	r3, [r3, #24]
 8005736:	011b      	lsls	r3, r3, #4
 8005738:	693a      	ldr	r2, [r7, #16]
 800573a:	4313      	orrs	r3, r2
 800573c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	693a      	ldr	r2, [r7, #16]
 8005742:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	68fa      	ldr	r2, [r7, #12]
 8005748:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	685a      	ldr	r2, [r3, #4]
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	697a      	ldr	r2, [r7, #20]
 8005756:	621a      	str	r2, [r3, #32]
}
 8005758:	bf00      	nop
 800575a:	371c      	adds	r7, #28
 800575c:	46bd      	mov	sp, r7
 800575e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005762:	4770      	bx	lr
 8005764:	40012c00 	.word	0x40012c00
 8005768:	40013400 	.word	0x40013400
 800576c:	40014000 	.word	0x40014000
 8005770:	40014400 	.word	0x40014400
 8005774:	40014800 	.word	0x40014800

08005778 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005778:	b480      	push	{r7}
 800577a:	b087      	sub	sp, #28
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
 8005780:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6a1b      	ldr	r3, [r3, #32]
 8005786:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	6a1b      	ldr	r3, [r3, #32]
 800578c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	685b      	ldr	r3, [r3, #4]
 8005798:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	69db      	ldr	r3, [r3, #28]
 800579e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80057a6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80057aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80057b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	021b      	lsls	r3, r3, #8
 80057ba:	68fa      	ldr	r2, [r7, #12]
 80057bc:	4313      	orrs	r3, r2
 80057be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80057c0:	697b      	ldr	r3, [r7, #20]
 80057c2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80057c6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	689b      	ldr	r3, [r3, #8]
 80057cc:	031b      	lsls	r3, r3, #12
 80057ce:	697a      	ldr	r2, [r7, #20]
 80057d0:	4313      	orrs	r3, r2
 80057d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	4a28      	ldr	r2, [pc, #160]	@ (8005878 <TIM_OC4_SetConfig+0x100>)
 80057d8:	4293      	cmp	r3, r2
 80057da:	d003      	beq.n	80057e4 <TIM_OC4_SetConfig+0x6c>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	4a27      	ldr	r2, [pc, #156]	@ (800587c <TIM_OC4_SetConfig+0x104>)
 80057e0:	4293      	cmp	r3, r2
 80057e2:	d10d      	bne.n	8005800 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80057e4:	697b      	ldr	r3, [r7, #20]
 80057e6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80057ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	68db      	ldr	r3, [r3, #12]
 80057f0:	031b      	lsls	r3, r3, #12
 80057f2:	697a      	ldr	r2, [r7, #20]
 80057f4:	4313      	orrs	r3, r2
 80057f6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80057f8:	697b      	ldr	r3, [r7, #20]
 80057fa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80057fe:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	4a1d      	ldr	r2, [pc, #116]	@ (8005878 <TIM_OC4_SetConfig+0x100>)
 8005804:	4293      	cmp	r3, r2
 8005806:	d00f      	beq.n	8005828 <TIM_OC4_SetConfig+0xb0>
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	4a1c      	ldr	r2, [pc, #112]	@ (800587c <TIM_OC4_SetConfig+0x104>)
 800580c:	4293      	cmp	r3, r2
 800580e:	d00b      	beq.n	8005828 <TIM_OC4_SetConfig+0xb0>
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	4a1b      	ldr	r2, [pc, #108]	@ (8005880 <TIM_OC4_SetConfig+0x108>)
 8005814:	4293      	cmp	r3, r2
 8005816:	d007      	beq.n	8005828 <TIM_OC4_SetConfig+0xb0>
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	4a1a      	ldr	r2, [pc, #104]	@ (8005884 <TIM_OC4_SetConfig+0x10c>)
 800581c:	4293      	cmp	r3, r2
 800581e:	d003      	beq.n	8005828 <TIM_OC4_SetConfig+0xb0>
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	4a19      	ldr	r2, [pc, #100]	@ (8005888 <TIM_OC4_SetConfig+0x110>)
 8005824:	4293      	cmp	r3, r2
 8005826:	d113      	bne.n	8005850 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005828:	693b      	ldr	r3, [r7, #16]
 800582a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800582e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8005830:	693b      	ldr	r3, [r7, #16]
 8005832:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005836:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	695b      	ldr	r3, [r3, #20]
 800583c:	019b      	lsls	r3, r3, #6
 800583e:	693a      	ldr	r2, [r7, #16]
 8005840:	4313      	orrs	r3, r2
 8005842:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	699b      	ldr	r3, [r3, #24]
 8005848:	019b      	lsls	r3, r3, #6
 800584a:	693a      	ldr	r2, [r7, #16]
 800584c:	4313      	orrs	r3, r2
 800584e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	693a      	ldr	r2, [r7, #16]
 8005854:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	68fa      	ldr	r2, [r7, #12]
 800585a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	685a      	ldr	r2, [r3, #4]
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	697a      	ldr	r2, [r7, #20]
 8005868:	621a      	str	r2, [r3, #32]
}
 800586a:	bf00      	nop
 800586c:	371c      	adds	r7, #28
 800586e:	46bd      	mov	sp, r7
 8005870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005874:	4770      	bx	lr
 8005876:	bf00      	nop
 8005878:	40012c00 	.word	0x40012c00
 800587c:	40013400 	.word	0x40013400
 8005880:	40014000 	.word	0x40014000
 8005884:	40014400 	.word	0x40014400
 8005888:	40014800 	.word	0x40014800

0800588c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800588c:	b480      	push	{r7}
 800588e:	b087      	sub	sp, #28
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
 8005894:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6a1b      	ldr	r3, [r3, #32]
 800589a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	6a1b      	ldr	r3, [r3, #32]
 80058a0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	685b      	ldr	r3, [r3, #4]
 80058ac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80058b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80058ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80058be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	68fa      	ldr	r2, [r7, #12]
 80058c6:	4313      	orrs	r3, r2
 80058c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80058ca:	693b      	ldr	r3, [r7, #16]
 80058cc:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80058d0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	689b      	ldr	r3, [r3, #8]
 80058d6:	041b      	lsls	r3, r3, #16
 80058d8:	693a      	ldr	r2, [r7, #16]
 80058da:	4313      	orrs	r3, r2
 80058dc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	4a17      	ldr	r2, [pc, #92]	@ (8005940 <TIM_OC5_SetConfig+0xb4>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d00f      	beq.n	8005906 <TIM_OC5_SetConfig+0x7a>
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	4a16      	ldr	r2, [pc, #88]	@ (8005944 <TIM_OC5_SetConfig+0xb8>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d00b      	beq.n	8005906 <TIM_OC5_SetConfig+0x7a>
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	4a15      	ldr	r2, [pc, #84]	@ (8005948 <TIM_OC5_SetConfig+0xbc>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d007      	beq.n	8005906 <TIM_OC5_SetConfig+0x7a>
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	4a14      	ldr	r2, [pc, #80]	@ (800594c <TIM_OC5_SetConfig+0xc0>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d003      	beq.n	8005906 <TIM_OC5_SetConfig+0x7a>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	4a13      	ldr	r2, [pc, #76]	@ (8005950 <TIM_OC5_SetConfig+0xc4>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d109      	bne.n	800591a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005906:	697b      	ldr	r3, [r7, #20]
 8005908:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800590c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	695b      	ldr	r3, [r3, #20]
 8005912:	021b      	lsls	r3, r3, #8
 8005914:	697a      	ldr	r2, [r7, #20]
 8005916:	4313      	orrs	r3, r2
 8005918:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	697a      	ldr	r2, [r7, #20]
 800591e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	68fa      	ldr	r2, [r7, #12]
 8005924:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	685a      	ldr	r2, [r3, #4]
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	693a      	ldr	r2, [r7, #16]
 8005932:	621a      	str	r2, [r3, #32]
}
 8005934:	bf00      	nop
 8005936:	371c      	adds	r7, #28
 8005938:	46bd      	mov	sp, r7
 800593a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593e:	4770      	bx	lr
 8005940:	40012c00 	.word	0x40012c00
 8005944:	40013400 	.word	0x40013400
 8005948:	40014000 	.word	0x40014000
 800594c:	40014400 	.word	0x40014400
 8005950:	40014800 	.word	0x40014800

08005954 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005954:	b480      	push	{r7}
 8005956:	b087      	sub	sp, #28
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
 800595c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6a1b      	ldr	r3, [r3, #32]
 8005962:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	6a1b      	ldr	r3, [r3, #32]
 8005968:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	685b      	ldr	r3, [r3, #4]
 8005974:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800597a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005982:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005986:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	021b      	lsls	r3, r3, #8
 800598e:	68fa      	ldr	r2, [r7, #12]
 8005990:	4313      	orrs	r3, r2
 8005992:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005994:	693b      	ldr	r3, [r7, #16]
 8005996:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800599a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	689b      	ldr	r3, [r3, #8]
 80059a0:	051b      	lsls	r3, r3, #20
 80059a2:	693a      	ldr	r2, [r7, #16]
 80059a4:	4313      	orrs	r3, r2
 80059a6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	4a18      	ldr	r2, [pc, #96]	@ (8005a0c <TIM_OC6_SetConfig+0xb8>)
 80059ac:	4293      	cmp	r3, r2
 80059ae:	d00f      	beq.n	80059d0 <TIM_OC6_SetConfig+0x7c>
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	4a17      	ldr	r2, [pc, #92]	@ (8005a10 <TIM_OC6_SetConfig+0xbc>)
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d00b      	beq.n	80059d0 <TIM_OC6_SetConfig+0x7c>
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	4a16      	ldr	r2, [pc, #88]	@ (8005a14 <TIM_OC6_SetConfig+0xc0>)
 80059bc:	4293      	cmp	r3, r2
 80059be:	d007      	beq.n	80059d0 <TIM_OC6_SetConfig+0x7c>
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	4a15      	ldr	r2, [pc, #84]	@ (8005a18 <TIM_OC6_SetConfig+0xc4>)
 80059c4:	4293      	cmp	r3, r2
 80059c6:	d003      	beq.n	80059d0 <TIM_OC6_SetConfig+0x7c>
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	4a14      	ldr	r2, [pc, #80]	@ (8005a1c <TIM_OC6_SetConfig+0xc8>)
 80059cc:	4293      	cmp	r3, r2
 80059ce:	d109      	bne.n	80059e4 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80059d0:	697b      	ldr	r3, [r7, #20]
 80059d2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80059d6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	695b      	ldr	r3, [r3, #20]
 80059dc:	029b      	lsls	r3, r3, #10
 80059de:	697a      	ldr	r2, [r7, #20]
 80059e0:	4313      	orrs	r3, r2
 80059e2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	697a      	ldr	r2, [r7, #20]
 80059e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	68fa      	ldr	r2, [r7, #12]
 80059ee:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	685a      	ldr	r2, [r3, #4]
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	693a      	ldr	r2, [r7, #16]
 80059fc:	621a      	str	r2, [r3, #32]
}
 80059fe:	bf00      	nop
 8005a00:	371c      	adds	r7, #28
 8005a02:	46bd      	mov	sp, r7
 8005a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a08:	4770      	bx	lr
 8005a0a:	bf00      	nop
 8005a0c:	40012c00 	.word	0x40012c00
 8005a10:	40013400 	.word	0x40013400
 8005a14:	40014000 	.word	0x40014000
 8005a18:	40014400 	.word	0x40014400
 8005a1c:	40014800 	.word	0x40014800

08005a20 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005a20:	b480      	push	{r7}
 8005a22:	b085      	sub	sp, #20
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
 8005a28:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005a30:	2b01      	cmp	r3, #1
 8005a32:	d101      	bne.n	8005a38 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005a34:	2302      	movs	r3, #2
 8005a36:	e065      	b.n	8005b04 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2201      	movs	r2, #1
 8005a3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2202      	movs	r2, #2
 8005a44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	685b      	ldr	r3, [r3, #4]
 8005a4e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	689b      	ldr	r3, [r3, #8]
 8005a56:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	4a2c      	ldr	r2, [pc, #176]	@ (8005b10 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d004      	beq.n	8005a6c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	4a2b      	ldr	r2, [pc, #172]	@ (8005b14 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005a68:	4293      	cmp	r3, r2
 8005a6a:	d108      	bne.n	8005a7e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005a72:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	685b      	ldr	r3, [r3, #4]
 8005a78:	68fa      	ldr	r2, [r7, #12]
 8005a7a:	4313      	orrs	r3, r2
 8005a7c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8005a84:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a88:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	68fa      	ldr	r2, [r7, #12]
 8005a90:	4313      	orrs	r3, r2
 8005a92:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	68fa      	ldr	r2, [r7, #12]
 8005a9a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	4a1b      	ldr	r2, [pc, #108]	@ (8005b10 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d018      	beq.n	8005ad8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005aae:	d013      	beq.n	8005ad8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	4a18      	ldr	r2, [pc, #96]	@ (8005b18 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d00e      	beq.n	8005ad8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	4a17      	ldr	r2, [pc, #92]	@ (8005b1c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	d009      	beq.n	8005ad8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	4a12      	ldr	r2, [pc, #72]	@ (8005b14 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d004      	beq.n	8005ad8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	4a13      	ldr	r2, [pc, #76]	@ (8005b20 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	d10c      	bne.n	8005af2 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005ad8:	68bb      	ldr	r3, [r7, #8]
 8005ada:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005ade:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	689b      	ldr	r3, [r3, #8]
 8005ae4:	68ba      	ldr	r2, [r7, #8]
 8005ae6:	4313      	orrs	r3, r2
 8005ae8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	68ba      	ldr	r2, [r7, #8]
 8005af0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2201      	movs	r2, #1
 8005af6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2200      	movs	r2, #0
 8005afe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005b02:	2300      	movs	r3, #0
}
 8005b04:	4618      	mov	r0, r3
 8005b06:	3714      	adds	r7, #20
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0e:	4770      	bx	lr
 8005b10:	40012c00 	.word	0x40012c00
 8005b14:	40013400 	.word	0x40013400
 8005b18:	40000400 	.word	0x40000400
 8005b1c:	40000800 	.word	0x40000800
 8005b20:	40014000 	.word	0x40014000

08005b24 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005b24:	b480      	push	{r7}
 8005b26:	b085      	sub	sp, #20
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
 8005b2c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005b2e:	2300      	movs	r3, #0
 8005b30:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005b38:	2b01      	cmp	r3, #1
 8005b3a:	d101      	bne.n	8005b40 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005b3c:	2302      	movs	r3, #2
 8005b3e:	e073      	b.n	8005c28 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2201      	movs	r2, #1
 8005b44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	68db      	ldr	r3, [r3, #12]
 8005b52:	4313      	orrs	r3, r2
 8005b54:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	689b      	ldr	r3, [r3, #8]
 8005b60:	4313      	orrs	r3, r2
 8005b62:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	685b      	ldr	r3, [r3, #4]
 8005b6e:	4313      	orrs	r3, r2
 8005b70:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	4313      	orrs	r3, r2
 8005b7e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	691b      	ldr	r3, [r3, #16]
 8005b8a:	4313      	orrs	r3, r2
 8005b8c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	695b      	ldr	r3, [r3, #20]
 8005b98:	4313      	orrs	r3, r2
 8005b9a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ba6:	4313      	orrs	r3, r2
 8005ba8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	699b      	ldr	r3, [r3, #24]
 8005bb4:	041b      	lsls	r3, r3, #16
 8005bb6:	4313      	orrs	r3, r2
 8005bb8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	69db      	ldr	r3, [r3, #28]
 8005bc4:	4313      	orrs	r3, r2
 8005bc6:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	4a19      	ldr	r2, [pc, #100]	@ (8005c34 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	d004      	beq.n	8005bdc <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	4a18      	ldr	r2, [pc, #96]	@ (8005c38 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8005bd8:	4293      	cmp	r3, r2
 8005bda:	d11c      	bne.n	8005c16 <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005be6:	051b      	lsls	r3, r3, #20
 8005be8:	4313      	orrs	r3, r2
 8005bea:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	6a1b      	ldr	r3, [r3, #32]
 8005bf6:	4313      	orrs	r3, r2
 8005bf8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c04:	4313      	orrs	r3, r2
 8005c06:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c12:	4313      	orrs	r3, r2
 8005c14:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	68fa      	ldr	r2, [r7, #12]
 8005c1c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2200      	movs	r2, #0
 8005c22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005c26:	2300      	movs	r3, #0
}
 8005c28:	4618      	mov	r0, r3
 8005c2a:	3714      	adds	r7, #20
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c32:	4770      	bx	lr
 8005c34:	40012c00 	.word	0x40012c00
 8005c38:	40013400 	.word	0x40013400

08005c3c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b082      	sub	sp, #8
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d101      	bne.n	8005c4e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005c4a:	2301      	movs	r3, #1
 8005c4c:	e042      	b.n	8005cd4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d106      	bne.n	8005c66 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005c60:	6878      	ldr	r0, [r7, #4]
 8005c62:	f7fb fa91 	bl	8001188 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2224      	movs	r2, #36	@ 0x24
 8005c6a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	681a      	ldr	r2, [r3, #0]
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f022 0201 	bic.w	r2, r2, #1
 8005c7c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d002      	beq.n	8005c8c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005c86:	6878      	ldr	r0, [r7, #4]
 8005c88:	f000 faf4 	bl	8006274 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005c8c:	6878      	ldr	r0, [r7, #4]
 8005c8e:	f000 f825 	bl	8005cdc <UART_SetConfig>
 8005c92:	4603      	mov	r3, r0
 8005c94:	2b01      	cmp	r3, #1
 8005c96:	d101      	bne.n	8005c9c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005c98:	2301      	movs	r3, #1
 8005c9a:	e01b      	b.n	8005cd4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	685a      	ldr	r2, [r3, #4]
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005caa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	689a      	ldr	r2, [r3, #8]
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005cba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	681a      	ldr	r2, [r3, #0]
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f042 0201 	orr.w	r2, r2, #1
 8005cca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005ccc:	6878      	ldr	r0, [r7, #4]
 8005cce:	f000 fb73 	bl	80063b8 <UART_CheckIdleState>
 8005cd2:	4603      	mov	r3, r0
}
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	3708      	adds	r7, #8
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	bd80      	pop	{r7, pc}

08005cdc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005cdc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005ce0:	b08c      	sub	sp, #48	@ 0x30
 8005ce2:	af00      	add	r7, sp, #0
 8005ce4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005cec:	697b      	ldr	r3, [r7, #20]
 8005cee:	689a      	ldr	r2, [r3, #8]
 8005cf0:	697b      	ldr	r3, [r7, #20]
 8005cf2:	691b      	ldr	r3, [r3, #16]
 8005cf4:	431a      	orrs	r2, r3
 8005cf6:	697b      	ldr	r3, [r7, #20]
 8005cf8:	695b      	ldr	r3, [r3, #20]
 8005cfa:	431a      	orrs	r2, r3
 8005cfc:	697b      	ldr	r3, [r7, #20]
 8005cfe:	69db      	ldr	r3, [r3, #28]
 8005d00:	4313      	orrs	r3, r2
 8005d02:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005d04:	697b      	ldr	r3, [r7, #20]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	681a      	ldr	r2, [r3, #0]
 8005d0a:	4bab      	ldr	r3, [pc, #684]	@ (8005fb8 <UART_SetConfig+0x2dc>)
 8005d0c:	4013      	ands	r3, r2
 8005d0e:	697a      	ldr	r2, [r7, #20]
 8005d10:	6812      	ldr	r2, [r2, #0]
 8005d12:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005d14:	430b      	orrs	r3, r1
 8005d16:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d18:	697b      	ldr	r3, [r7, #20]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	685b      	ldr	r3, [r3, #4]
 8005d1e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005d22:	697b      	ldr	r3, [r7, #20]
 8005d24:	68da      	ldr	r2, [r3, #12]
 8005d26:	697b      	ldr	r3, [r7, #20]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	430a      	orrs	r2, r1
 8005d2c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005d2e:	697b      	ldr	r3, [r7, #20]
 8005d30:	699b      	ldr	r3, [r3, #24]
 8005d32:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005d34:	697b      	ldr	r3, [r7, #20]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	4aa0      	ldr	r2, [pc, #640]	@ (8005fbc <UART_SetConfig+0x2e0>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d004      	beq.n	8005d48 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005d3e:	697b      	ldr	r3, [r7, #20]
 8005d40:	6a1b      	ldr	r3, [r3, #32]
 8005d42:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005d44:	4313      	orrs	r3, r2
 8005d46:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005d48:	697b      	ldr	r3, [r7, #20]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	689b      	ldr	r3, [r3, #8]
 8005d4e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8005d52:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8005d56:	697a      	ldr	r2, [r7, #20]
 8005d58:	6812      	ldr	r2, [r2, #0]
 8005d5a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005d5c:	430b      	orrs	r3, r1
 8005d5e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005d60:	697b      	ldr	r3, [r7, #20]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d66:	f023 010f 	bic.w	r1, r3, #15
 8005d6a:	697b      	ldr	r3, [r7, #20]
 8005d6c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005d6e:	697b      	ldr	r3, [r7, #20]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	430a      	orrs	r2, r1
 8005d74:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005d76:	697b      	ldr	r3, [r7, #20]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	4a91      	ldr	r2, [pc, #580]	@ (8005fc0 <UART_SetConfig+0x2e4>)
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	d125      	bne.n	8005dcc <UART_SetConfig+0xf0>
 8005d80:	4b90      	ldr	r3, [pc, #576]	@ (8005fc4 <UART_SetConfig+0x2e8>)
 8005d82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d86:	f003 0303 	and.w	r3, r3, #3
 8005d8a:	2b03      	cmp	r3, #3
 8005d8c:	d81a      	bhi.n	8005dc4 <UART_SetConfig+0xe8>
 8005d8e:	a201      	add	r2, pc, #4	@ (adr r2, 8005d94 <UART_SetConfig+0xb8>)
 8005d90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d94:	08005da5 	.word	0x08005da5
 8005d98:	08005db5 	.word	0x08005db5
 8005d9c:	08005dad 	.word	0x08005dad
 8005da0:	08005dbd 	.word	0x08005dbd
 8005da4:	2301      	movs	r3, #1
 8005da6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005daa:	e0d6      	b.n	8005f5a <UART_SetConfig+0x27e>
 8005dac:	2302      	movs	r3, #2
 8005dae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005db2:	e0d2      	b.n	8005f5a <UART_SetConfig+0x27e>
 8005db4:	2304      	movs	r3, #4
 8005db6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005dba:	e0ce      	b.n	8005f5a <UART_SetConfig+0x27e>
 8005dbc:	2308      	movs	r3, #8
 8005dbe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005dc2:	e0ca      	b.n	8005f5a <UART_SetConfig+0x27e>
 8005dc4:	2310      	movs	r3, #16
 8005dc6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005dca:	e0c6      	b.n	8005f5a <UART_SetConfig+0x27e>
 8005dcc:	697b      	ldr	r3, [r7, #20]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	4a7d      	ldr	r2, [pc, #500]	@ (8005fc8 <UART_SetConfig+0x2ec>)
 8005dd2:	4293      	cmp	r3, r2
 8005dd4:	d138      	bne.n	8005e48 <UART_SetConfig+0x16c>
 8005dd6:	4b7b      	ldr	r3, [pc, #492]	@ (8005fc4 <UART_SetConfig+0x2e8>)
 8005dd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ddc:	f003 030c 	and.w	r3, r3, #12
 8005de0:	2b0c      	cmp	r3, #12
 8005de2:	d82d      	bhi.n	8005e40 <UART_SetConfig+0x164>
 8005de4:	a201      	add	r2, pc, #4	@ (adr r2, 8005dec <UART_SetConfig+0x110>)
 8005de6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dea:	bf00      	nop
 8005dec:	08005e21 	.word	0x08005e21
 8005df0:	08005e41 	.word	0x08005e41
 8005df4:	08005e41 	.word	0x08005e41
 8005df8:	08005e41 	.word	0x08005e41
 8005dfc:	08005e31 	.word	0x08005e31
 8005e00:	08005e41 	.word	0x08005e41
 8005e04:	08005e41 	.word	0x08005e41
 8005e08:	08005e41 	.word	0x08005e41
 8005e0c:	08005e29 	.word	0x08005e29
 8005e10:	08005e41 	.word	0x08005e41
 8005e14:	08005e41 	.word	0x08005e41
 8005e18:	08005e41 	.word	0x08005e41
 8005e1c:	08005e39 	.word	0x08005e39
 8005e20:	2300      	movs	r3, #0
 8005e22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005e26:	e098      	b.n	8005f5a <UART_SetConfig+0x27e>
 8005e28:	2302      	movs	r3, #2
 8005e2a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005e2e:	e094      	b.n	8005f5a <UART_SetConfig+0x27e>
 8005e30:	2304      	movs	r3, #4
 8005e32:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005e36:	e090      	b.n	8005f5a <UART_SetConfig+0x27e>
 8005e38:	2308      	movs	r3, #8
 8005e3a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005e3e:	e08c      	b.n	8005f5a <UART_SetConfig+0x27e>
 8005e40:	2310      	movs	r3, #16
 8005e42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005e46:	e088      	b.n	8005f5a <UART_SetConfig+0x27e>
 8005e48:	697b      	ldr	r3, [r7, #20]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	4a5f      	ldr	r2, [pc, #380]	@ (8005fcc <UART_SetConfig+0x2f0>)
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	d125      	bne.n	8005e9e <UART_SetConfig+0x1c2>
 8005e52:	4b5c      	ldr	r3, [pc, #368]	@ (8005fc4 <UART_SetConfig+0x2e8>)
 8005e54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e58:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005e5c:	2b30      	cmp	r3, #48	@ 0x30
 8005e5e:	d016      	beq.n	8005e8e <UART_SetConfig+0x1b2>
 8005e60:	2b30      	cmp	r3, #48	@ 0x30
 8005e62:	d818      	bhi.n	8005e96 <UART_SetConfig+0x1ba>
 8005e64:	2b20      	cmp	r3, #32
 8005e66:	d00a      	beq.n	8005e7e <UART_SetConfig+0x1a2>
 8005e68:	2b20      	cmp	r3, #32
 8005e6a:	d814      	bhi.n	8005e96 <UART_SetConfig+0x1ba>
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d002      	beq.n	8005e76 <UART_SetConfig+0x19a>
 8005e70:	2b10      	cmp	r3, #16
 8005e72:	d008      	beq.n	8005e86 <UART_SetConfig+0x1aa>
 8005e74:	e00f      	b.n	8005e96 <UART_SetConfig+0x1ba>
 8005e76:	2300      	movs	r3, #0
 8005e78:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005e7c:	e06d      	b.n	8005f5a <UART_SetConfig+0x27e>
 8005e7e:	2302      	movs	r3, #2
 8005e80:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005e84:	e069      	b.n	8005f5a <UART_SetConfig+0x27e>
 8005e86:	2304      	movs	r3, #4
 8005e88:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005e8c:	e065      	b.n	8005f5a <UART_SetConfig+0x27e>
 8005e8e:	2308      	movs	r3, #8
 8005e90:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005e94:	e061      	b.n	8005f5a <UART_SetConfig+0x27e>
 8005e96:	2310      	movs	r3, #16
 8005e98:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005e9c:	e05d      	b.n	8005f5a <UART_SetConfig+0x27e>
 8005e9e:	697b      	ldr	r3, [r7, #20]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	4a4b      	ldr	r2, [pc, #300]	@ (8005fd0 <UART_SetConfig+0x2f4>)
 8005ea4:	4293      	cmp	r3, r2
 8005ea6:	d125      	bne.n	8005ef4 <UART_SetConfig+0x218>
 8005ea8:	4b46      	ldr	r3, [pc, #280]	@ (8005fc4 <UART_SetConfig+0x2e8>)
 8005eaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005eae:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005eb2:	2bc0      	cmp	r3, #192	@ 0xc0
 8005eb4:	d016      	beq.n	8005ee4 <UART_SetConfig+0x208>
 8005eb6:	2bc0      	cmp	r3, #192	@ 0xc0
 8005eb8:	d818      	bhi.n	8005eec <UART_SetConfig+0x210>
 8005eba:	2b80      	cmp	r3, #128	@ 0x80
 8005ebc:	d00a      	beq.n	8005ed4 <UART_SetConfig+0x1f8>
 8005ebe:	2b80      	cmp	r3, #128	@ 0x80
 8005ec0:	d814      	bhi.n	8005eec <UART_SetConfig+0x210>
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d002      	beq.n	8005ecc <UART_SetConfig+0x1f0>
 8005ec6:	2b40      	cmp	r3, #64	@ 0x40
 8005ec8:	d008      	beq.n	8005edc <UART_SetConfig+0x200>
 8005eca:	e00f      	b.n	8005eec <UART_SetConfig+0x210>
 8005ecc:	2300      	movs	r3, #0
 8005ece:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005ed2:	e042      	b.n	8005f5a <UART_SetConfig+0x27e>
 8005ed4:	2302      	movs	r3, #2
 8005ed6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005eda:	e03e      	b.n	8005f5a <UART_SetConfig+0x27e>
 8005edc:	2304      	movs	r3, #4
 8005ede:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005ee2:	e03a      	b.n	8005f5a <UART_SetConfig+0x27e>
 8005ee4:	2308      	movs	r3, #8
 8005ee6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005eea:	e036      	b.n	8005f5a <UART_SetConfig+0x27e>
 8005eec:	2310      	movs	r3, #16
 8005eee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005ef2:	e032      	b.n	8005f5a <UART_SetConfig+0x27e>
 8005ef4:	697b      	ldr	r3, [r7, #20]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	4a30      	ldr	r2, [pc, #192]	@ (8005fbc <UART_SetConfig+0x2e0>)
 8005efa:	4293      	cmp	r3, r2
 8005efc:	d12a      	bne.n	8005f54 <UART_SetConfig+0x278>
 8005efe:	4b31      	ldr	r3, [pc, #196]	@ (8005fc4 <UART_SetConfig+0x2e8>)
 8005f00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f04:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005f08:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005f0c:	d01a      	beq.n	8005f44 <UART_SetConfig+0x268>
 8005f0e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005f12:	d81b      	bhi.n	8005f4c <UART_SetConfig+0x270>
 8005f14:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005f18:	d00c      	beq.n	8005f34 <UART_SetConfig+0x258>
 8005f1a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005f1e:	d815      	bhi.n	8005f4c <UART_SetConfig+0x270>
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d003      	beq.n	8005f2c <UART_SetConfig+0x250>
 8005f24:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005f28:	d008      	beq.n	8005f3c <UART_SetConfig+0x260>
 8005f2a:	e00f      	b.n	8005f4c <UART_SetConfig+0x270>
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005f32:	e012      	b.n	8005f5a <UART_SetConfig+0x27e>
 8005f34:	2302      	movs	r3, #2
 8005f36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005f3a:	e00e      	b.n	8005f5a <UART_SetConfig+0x27e>
 8005f3c:	2304      	movs	r3, #4
 8005f3e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005f42:	e00a      	b.n	8005f5a <UART_SetConfig+0x27e>
 8005f44:	2308      	movs	r3, #8
 8005f46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005f4a:	e006      	b.n	8005f5a <UART_SetConfig+0x27e>
 8005f4c:	2310      	movs	r3, #16
 8005f4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005f52:	e002      	b.n	8005f5a <UART_SetConfig+0x27e>
 8005f54:	2310      	movs	r3, #16
 8005f56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005f5a:	697b      	ldr	r3, [r7, #20]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	4a17      	ldr	r2, [pc, #92]	@ (8005fbc <UART_SetConfig+0x2e0>)
 8005f60:	4293      	cmp	r3, r2
 8005f62:	f040 80a8 	bne.w	80060b6 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005f66:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005f6a:	2b08      	cmp	r3, #8
 8005f6c:	d834      	bhi.n	8005fd8 <UART_SetConfig+0x2fc>
 8005f6e:	a201      	add	r2, pc, #4	@ (adr r2, 8005f74 <UART_SetConfig+0x298>)
 8005f70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f74:	08005f99 	.word	0x08005f99
 8005f78:	08005fd9 	.word	0x08005fd9
 8005f7c:	08005fa1 	.word	0x08005fa1
 8005f80:	08005fd9 	.word	0x08005fd9
 8005f84:	08005fa7 	.word	0x08005fa7
 8005f88:	08005fd9 	.word	0x08005fd9
 8005f8c:	08005fd9 	.word	0x08005fd9
 8005f90:	08005fd9 	.word	0x08005fd9
 8005f94:	08005faf 	.word	0x08005faf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005f98:	f7fe fd3c 	bl	8004a14 <HAL_RCC_GetPCLK1Freq>
 8005f9c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005f9e:	e021      	b.n	8005fe4 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005fa0:	4b0c      	ldr	r3, [pc, #48]	@ (8005fd4 <UART_SetConfig+0x2f8>)
 8005fa2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005fa4:	e01e      	b.n	8005fe4 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005fa6:	f7fe fcc7 	bl	8004938 <HAL_RCC_GetSysClockFreq>
 8005faa:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005fac:	e01a      	b.n	8005fe4 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005fae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005fb2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005fb4:	e016      	b.n	8005fe4 <UART_SetConfig+0x308>
 8005fb6:	bf00      	nop
 8005fb8:	cfff69f3 	.word	0xcfff69f3
 8005fbc:	40008000 	.word	0x40008000
 8005fc0:	40013800 	.word	0x40013800
 8005fc4:	40021000 	.word	0x40021000
 8005fc8:	40004400 	.word	0x40004400
 8005fcc:	40004800 	.word	0x40004800
 8005fd0:	40004c00 	.word	0x40004c00
 8005fd4:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8005fd8:	2300      	movs	r3, #0
 8005fda:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005fdc:	2301      	movs	r3, #1
 8005fde:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005fe2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005fe4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	f000 812a 	beq.w	8006240 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005fec:	697b      	ldr	r3, [r7, #20]
 8005fee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ff0:	4a9e      	ldr	r2, [pc, #632]	@ (800626c <UART_SetConfig+0x590>)
 8005ff2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005ff6:	461a      	mov	r2, r3
 8005ff8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ffa:	fbb3 f3f2 	udiv	r3, r3, r2
 8005ffe:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006000:	697b      	ldr	r3, [r7, #20]
 8006002:	685a      	ldr	r2, [r3, #4]
 8006004:	4613      	mov	r3, r2
 8006006:	005b      	lsls	r3, r3, #1
 8006008:	4413      	add	r3, r2
 800600a:	69ba      	ldr	r2, [r7, #24]
 800600c:	429a      	cmp	r2, r3
 800600e:	d305      	bcc.n	800601c <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006010:	697b      	ldr	r3, [r7, #20]
 8006012:	685b      	ldr	r3, [r3, #4]
 8006014:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006016:	69ba      	ldr	r2, [r7, #24]
 8006018:	429a      	cmp	r2, r3
 800601a:	d903      	bls.n	8006024 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 800601c:	2301      	movs	r3, #1
 800601e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006022:	e10d      	b.n	8006240 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006024:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006026:	2200      	movs	r2, #0
 8006028:	60bb      	str	r3, [r7, #8]
 800602a:	60fa      	str	r2, [r7, #12]
 800602c:	697b      	ldr	r3, [r7, #20]
 800602e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006030:	4a8e      	ldr	r2, [pc, #568]	@ (800626c <UART_SetConfig+0x590>)
 8006032:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006036:	b29b      	uxth	r3, r3
 8006038:	2200      	movs	r2, #0
 800603a:	603b      	str	r3, [r7, #0]
 800603c:	607a      	str	r2, [r7, #4]
 800603e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006042:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006046:	f7fa f8e7 	bl	8000218 <__aeabi_uldivmod>
 800604a:	4602      	mov	r2, r0
 800604c:	460b      	mov	r3, r1
 800604e:	4610      	mov	r0, r2
 8006050:	4619      	mov	r1, r3
 8006052:	f04f 0200 	mov.w	r2, #0
 8006056:	f04f 0300 	mov.w	r3, #0
 800605a:	020b      	lsls	r3, r1, #8
 800605c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006060:	0202      	lsls	r2, r0, #8
 8006062:	6979      	ldr	r1, [r7, #20]
 8006064:	6849      	ldr	r1, [r1, #4]
 8006066:	0849      	lsrs	r1, r1, #1
 8006068:	2000      	movs	r0, #0
 800606a:	460c      	mov	r4, r1
 800606c:	4605      	mov	r5, r0
 800606e:	eb12 0804 	adds.w	r8, r2, r4
 8006072:	eb43 0905 	adc.w	r9, r3, r5
 8006076:	697b      	ldr	r3, [r7, #20]
 8006078:	685b      	ldr	r3, [r3, #4]
 800607a:	2200      	movs	r2, #0
 800607c:	469a      	mov	sl, r3
 800607e:	4693      	mov	fp, r2
 8006080:	4652      	mov	r2, sl
 8006082:	465b      	mov	r3, fp
 8006084:	4640      	mov	r0, r8
 8006086:	4649      	mov	r1, r9
 8006088:	f7fa f8c6 	bl	8000218 <__aeabi_uldivmod>
 800608c:	4602      	mov	r2, r0
 800608e:	460b      	mov	r3, r1
 8006090:	4613      	mov	r3, r2
 8006092:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006094:	6a3b      	ldr	r3, [r7, #32]
 8006096:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800609a:	d308      	bcc.n	80060ae <UART_SetConfig+0x3d2>
 800609c:	6a3b      	ldr	r3, [r7, #32]
 800609e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80060a2:	d204      	bcs.n	80060ae <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 80060a4:	697b      	ldr	r3, [r7, #20]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	6a3a      	ldr	r2, [r7, #32]
 80060aa:	60da      	str	r2, [r3, #12]
 80060ac:	e0c8      	b.n	8006240 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 80060ae:	2301      	movs	r3, #1
 80060b0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80060b4:	e0c4      	b.n	8006240 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80060b6:	697b      	ldr	r3, [r7, #20]
 80060b8:	69db      	ldr	r3, [r3, #28]
 80060ba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80060be:	d167      	bne.n	8006190 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 80060c0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80060c4:	2b08      	cmp	r3, #8
 80060c6:	d828      	bhi.n	800611a <UART_SetConfig+0x43e>
 80060c8:	a201      	add	r2, pc, #4	@ (adr r2, 80060d0 <UART_SetConfig+0x3f4>)
 80060ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060ce:	bf00      	nop
 80060d0:	080060f5 	.word	0x080060f5
 80060d4:	080060fd 	.word	0x080060fd
 80060d8:	08006105 	.word	0x08006105
 80060dc:	0800611b 	.word	0x0800611b
 80060e0:	0800610b 	.word	0x0800610b
 80060e4:	0800611b 	.word	0x0800611b
 80060e8:	0800611b 	.word	0x0800611b
 80060ec:	0800611b 	.word	0x0800611b
 80060f0:	08006113 	.word	0x08006113
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80060f4:	f7fe fc8e 	bl	8004a14 <HAL_RCC_GetPCLK1Freq>
 80060f8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80060fa:	e014      	b.n	8006126 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80060fc:	f7fe fca0 	bl	8004a40 <HAL_RCC_GetPCLK2Freq>
 8006100:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006102:	e010      	b.n	8006126 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006104:	4b5a      	ldr	r3, [pc, #360]	@ (8006270 <UART_SetConfig+0x594>)
 8006106:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006108:	e00d      	b.n	8006126 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800610a:	f7fe fc15 	bl	8004938 <HAL_RCC_GetSysClockFreq>
 800610e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006110:	e009      	b.n	8006126 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006112:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006116:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006118:	e005      	b.n	8006126 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 800611a:	2300      	movs	r3, #0
 800611c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800611e:	2301      	movs	r3, #1
 8006120:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006124:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006126:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006128:	2b00      	cmp	r3, #0
 800612a:	f000 8089 	beq.w	8006240 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800612e:	697b      	ldr	r3, [r7, #20]
 8006130:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006132:	4a4e      	ldr	r2, [pc, #312]	@ (800626c <UART_SetConfig+0x590>)
 8006134:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006138:	461a      	mov	r2, r3
 800613a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800613c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006140:	005a      	lsls	r2, r3, #1
 8006142:	697b      	ldr	r3, [r7, #20]
 8006144:	685b      	ldr	r3, [r3, #4]
 8006146:	085b      	lsrs	r3, r3, #1
 8006148:	441a      	add	r2, r3
 800614a:	697b      	ldr	r3, [r7, #20]
 800614c:	685b      	ldr	r3, [r3, #4]
 800614e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006152:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006154:	6a3b      	ldr	r3, [r7, #32]
 8006156:	2b0f      	cmp	r3, #15
 8006158:	d916      	bls.n	8006188 <UART_SetConfig+0x4ac>
 800615a:	6a3b      	ldr	r3, [r7, #32]
 800615c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006160:	d212      	bcs.n	8006188 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006162:	6a3b      	ldr	r3, [r7, #32]
 8006164:	b29b      	uxth	r3, r3
 8006166:	f023 030f 	bic.w	r3, r3, #15
 800616a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800616c:	6a3b      	ldr	r3, [r7, #32]
 800616e:	085b      	lsrs	r3, r3, #1
 8006170:	b29b      	uxth	r3, r3
 8006172:	f003 0307 	and.w	r3, r3, #7
 8006176:	b29a      	uxth	r2, r3
 8006178:	8bfb      	ldrh	r3, [r7, #30]
 800617a:	4313      	orrs	r3, r2
 800617c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800617e:	697b      	ldr	r3, [r7, #20]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	8bfa      	ldrh	r2, [r7, #30]
 8006184:	60da      	str	r2, [r3, #12]
 8006186:	e05b      	b.n	8006240 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8006188:	2301      	movs	r3, #1
 800618a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800618e:	e057      	b.n	8006240 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006190:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006194:	2b08      	cmp	r3, #8
 8006196:	d828      	bhi.n	80061ea <UART_SetConfig+0x50e>
 8006198:	a201      	add	r2, pc, #4	@ (adr r2, 80061a0 <UART_SetConfig+0x4c4>)
 800619a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800619e:	bf00      	nop
 80061a0:	080061c5 	.word	0x080061c5
 80061a4:	080061cd 	.word	0x080061cd
 80061a8:	080061d5 	.word	0x080061d5
 80061ac:	080061eb 	.word	0x080061eb
 80061b0:	080061db 	.word	0x080061db
 80061b4:	080061eb 	.word	0x080061eb
 80061b8:	080061eb 	.word	0x080061eb
 80061bc:	080061eb 	.word	0x080061eb
 80061c0:	080061e3 	.word	0x080061e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80061c4:	f7fe fc26 	bl	8004a14 <HAL_RCC_GetPCLK1Freq>
 80061c8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80061ca:	e014      	b.n	80061f6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80061cc:	f7fe fc38 	bl	8004a40 <HAL_RCC_GetPCLK2Freq>
 80061d0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80061d2:	e010      	b.n	80061f6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80061d4:	4b26      	ldr	r3, [pc, #152]	@ (8006270 <UART_SetConfig+0x594>)
 80061d6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80061d8:	e00d      	b.n	80061f6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80061da:	f7fe fbad 	bl	8004938 <HAL_RCC_GetSysClockFreq>
 80061de:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80061e0:	e009      	b.n	80061f6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80061e2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80061e6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80061e8:	e005      	b.n	80061f6 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 80061ea:	2300      	movs	r3, #0
 80061ec:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80061ee:	2301      	movs	r3, #1
 80061f0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80061f4:	bf00      	nop
    }

    if (pclk != 0U)
 80061f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d021      	beq.n	8006240 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80061fc:	697b      	ldr	r3, [r7, #20]
 80061fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006200:	4a1a      	ldr	r2, [pc, #104]	@ (800626c <UART_SetConfig+0x590>)
 8006202:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006206:	461a      	mov	r2, r3
 8006208:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800620a:	fbb3 f2f2 	udiv	r2, r3, r2
 800620e:	697b      	ldr	r3, [r7, #20]
 8006210:	685b      	ldr	r3, [r3, #4]
 8006212:	085b      	lsrs	r3, r3, #1
 8006214:	441a      	add	r2, r3
 8006216:	697b      	ldr	r3, [r7, #20]
 8006218:	685b      	ldr	r3, [r3, #4]
 800621a:	fbb2 f3f3 	udiv	r3, r2, r3
 800621e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006220:	6a3b      	ldr	r3, [r7, #32]
 8006222:	2b0f      	cmp	r3, #15
 8006224:	d909      	bls.n	800623a <UART_SetConfig+0x55e>
 8006226:	6a3b      	ldr	r3, [r7, #32]
 8006228:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800622c:	d205      	bcs.n	800623a <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800622e:	6a3b      	ldr	r3, [r7, #32]
 8006230:	b29a      	uxth	r2, r3
 8006232:	697b      	ldr	r3, [r7, #20]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	60da      	str	r2, [r3, #12]
 8006238:	e002      	b.n	8006240 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800623a:	2301      	movs	r3, #1
 800623c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006240:	697b      	ldr	r3, [r7, #20]
 8006242:	2201      	movs	r2, #1
 8006244:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006248:	697b      	ldr	r3, [r7, #20]
 800624a:	2201      	movs	r2, #1
 800624c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006250:	697b      	ldr	r3, [r7, #20]
 8006252:	2200      	movs	r2, #0
 8006254:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006256:	697b      	ldr	r3, [r7, #20]
 8006258:	2200      	movs	r2, #0
 800625a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800625c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8006260:	4618      	mov	r0, r3
 8006262:	3730      	adds	r7, #48	@ 0x30
 8006264:	46bd      	mov	sp, r7
 8006266:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800626a:	bf00      	nop
 800626c:	08006bb8 	.word	0x08006bb8
 8006270:	00f42400 	.word	0x00f42400

08006274 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006274:	b480      	push	{r7}
 8006276:	b083      	sub	sp, #12
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006280:	f003 0308 	and.w	r3, r3, #8
 8006284:	2b00      	cmp	r3, #0
 8006286:	d00a      	beq.n	800629e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	685b      	ldr	r3, [r3, #4]
 800628e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	430a      	orrs	r2, r1
 800629c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062a2:	f003 0301 	and.w	r3, r3, #1
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d00a      	beq.n	80062c0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	685b      	ldr	r3, [r3, #4]
 80062b0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	430a      	orrs	r2, r1
 80062be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062c4:	f003 0302 	and.w	r3, r3, #2
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d00a      	beq.n	80062e2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	685b      	ldr	r3, [r3, #4]
 80062d2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	430a      	orrs	r2, r1
 80062e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062e6:	f003 0304 	and.w	r3, r3, #4
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d00a      	beq.n	8006304 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	685b      	ldr	r3, [r3, #4]
 80062f4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	430a      	orrs	r2, r1
 8006302:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006308:	f003 0310 	and.w	r3, r3, #16
 800630c:	2b00      	cmp	r3, #0
 800630e:	d00a      	beq.n	8006326 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	689b      	ldr	r3, [r3, #8]
 8006316:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	430a      	orrs	r2, r1
 8006324:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800632a:	f003 0320 	and.w	r3, r3, #32
 800632e:	2b00      	cmp	r3, #0
 8006330:	d00a      	beq.n	8006348 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	689b      	ldr	r3, [r3, #8]
 8006338:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	430a      	orrs	r2, r1
 8006346:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800634c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006350:	2b00      	cmp	r3, #0
 8006352:	d01a      	beq.n	800638a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	685b      	ldr	r3, [r3, #4]
 800635a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	430a      	orrs	r2, r1
 8006368:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800636e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006372:	d10a      	bne.n	800638a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	685b      	ldr	r3, [r3, #4]
 800637a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	430a      	orrs	r2, r1
 8006388:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800638e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006392:	2b00      	cmp	r3, #0
 8006394:	d00a      	beq.n	80063ac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	685b      	ldr	r3, [r3, #4]
 800639c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	430a      	orrs	r2, r1
 80063aa:	605a      	str	r2, [r3, #4]
  }
}
 80063ac:	bf00      	nop
 80063ae:	370c      	adds	r7, #12
 80063b0:	46bd      	mov	sp, r7
 80063b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b6:	4770      	bx	lr

080063b8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b098      	sub	sp, #96	@ 0x60
 80063bc:	af02      	add	r7, sp, #8
 80063be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2200      	movs	r2, #0
 80063c4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80063c8:	f7fb f804 	bl	80013d4 <HAL_GetTick>
 80063cc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	f003 0308 	and.w	r3, r3, #8
 80063d8:	2b08      	cmp	r3, #8
 80063da:	d12f      	bne.n	800643c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80063dc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80063e0:	9300      	str	r3, [sp, #0]
 80063e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80063e4:	2200      	movs	r2, #0
 80063e6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80063ea:	6878      	ldr	r0, [r7, #4]
 80063ec:	f000 f88e 	bl	800650c <UART_WaitOnFlagUntilTimeout>
 80063f0:	4603      	mov	r3, r0
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d022      	beq.n	800643c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063fe:	e853 3f00 	ldrex	r3, [r3]
 8006402:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006404:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006406:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800640a:	653b      	str	r3, [r7, #80]	@ 0x50
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	461a      	mov	r2, r3
 8006412:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006414:	647b      	str	r3, [r7, #68]	@ 0x44
 8006416:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006418:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800641a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800641c:	e841 2300 	strex	r3, r2, [r1]
 8006420:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006422:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006424:	2b00      	cmp	r3, #0
 8006426:	d1e6      	bne.n	80063f6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2220      	movs	r2, #32
 800642c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2200      	movs	r2, #0
 8006434:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006438:	2303      	movs	r3, #3
 800643a:	e063      	b.n	8006504 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f003 0304 	and.w	r3, r3, #4
 8006446:	2b04      	cmp	r3, #4
 8006448:	d149      	bne.n	80064de <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800644a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800644e:	9300      	str	r3, [sp, #0]
 8006450:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006452:	2200      	movs	r2, #0
 8006454:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006458:	6878      	ldr	r0, [r7, #4]
 800645a:	f000 f857 	bl	800650c <UART_WaitOnFlagUntilTimeout>
 800645e:	4603      	mov	r3, r0
 8006460:	2b00      	cmp	r3, #0
 8006462:	d03c      	beq.n	80064de <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800646a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800646c:	e853 3f00 	ldrex	r3, [r3]
 8006470:	623b      	str	r3, [r7, #32]
   return(result);
 8006472:	6a3b      	ldr	r3, [r7, #32]
 8006474:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006478:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	461a      	mov	r2, r3
 8006480:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006482:	633b      	str	r3, [r7, #48]	@ 0x30
 8006484:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006486:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006488:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800648a:	e841 2300 	strex	r3, r2, [r1]
 800648e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006490:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006492:	2b00      	cmp	r3, #0
 8006494:	d1e6      	bne.n	8006464 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	3308      	adds	r3, #8
 800649c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800649e:	693b      	ldr	r3, [r7, #16]
 80064a0:	e853 3f00 	ldrex	r3, [r3]
 80064a4:	60fb      	str	r3, [r7, #12]
   return(result);
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	f023 0301 	bic.w	r3, r3, #1
 80064ac:	64bb      	str	r3, [r7, #72]	@ 0x48
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	3308      	adds	r3, #8
 80064b4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80064b6:	61fa      	str	r2, [r7, #28]
 80064b8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064ba:	69b9      	ldr	r1, [r7, #24]
 80064bc:	69fa      	ldr	r2, [r7, #28]
 80064be:	e841 2300 	strex	r3, r2, [r1]
 80064c2:	617b      	str	r3, [r7, #20]
   return(result);
 80064c4:	697b      	ldr	r3, [r7, #20]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d1e5      	bne.n	8006496 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	2220      	movs	r2, #32
 80064ce:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	2200      	movs	r2, #0
 80064d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80064da:	2303      	movs	r3, #3
 80064dc:	e012      	b.n	8006504 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	2220      	movs	r2, #32
 80064e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	2220      	movs	r2, #32
 80064ea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	2200      	movs	r2, #0
 80064f2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2200      	movs	r2, #0
 80064f8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	2200      	movs	r2, #0
 80064fe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006502:	2300      	movs	r3, #0
}
 8006504:	4618      	mov	r0, r3
 8006506:	3758      	adds	r7, #88	@ 0x58
 8006508:	46bd      	mov	sp, r7
 800650a:	bd80      	pop	{r7, pc}

0800650c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800650c:	b580      	push	{r7, lr}
 800650e:	b084      	sub	sp, #16
 8006510:	af00      	add	r7, sp, #0
 8006512:	60f8      	str	r0, [r7, #12]
 8006514:	60b9      	str	r1, [r7, #8]
 8006516:	603b      	str	r3, [r7, #0]
 8006518:	4613      	mov	r3, r2
 800651a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800651c:	e04f      	b.n	80065be <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800651e:	69bb      	ldr	r3, [r7, #24]
 8006520:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006524:	d04b      	beq.n	80065be <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006526:	f7fa ff55 	bl	80013d4 <HAL_GetTick>
 800652a:	4602      	mov	r2, r0
 800652c:	683b      	ldr	r3, [r7, #0]
 800652e:	1ad3      	subs	r3, r2, r3
 8006530:	69ba      	ldr	r2, [r7, #24]
 8006532:	429a      	cmp	r2, r3
 8006534:	d302      	bcc.n	800653c <UART_WaitOnFlagUntilTimeout+0x30>
 8006536:	69bb      	ldr	r3, [r7, #24]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d101      	bne.n	8006540 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800653c:	2303      	movs	r3, #3
 800653e:	e04e      	b.n	80065de <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f003 0304 	and.w	r3, r3, #4
 800654a:	2b00      	cmp	r3, #0
 800654c:	d037      	beq.n	80065be <UART_WaitOnFlagUntilTimeout+0xb2>
 800654e:	68bb      	ldr	r3, [r7, #8]
 8006550:	2b80      	cmp	r3, #128	@ 0x80
 8006552:	d034      	beq.n	80065be <UART_WaitOnFlagUntilTimeout+0xb2>
 8006554:	68bb      	ldr	r3, [r7, #8]
 8006556:	2b40      	cmp	r3, #64	@ 0x40
 8006558:	d031      	beq.n	80065be <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	69db      	ldr	r3, [r3, #28]
 8006560:	f003 0308 	and.w	r3, r3, #8
 8006564:	2b08      	cmp	r3, #8
 8006566:	d110      	bne.n	800658a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	2208      	movs	r2, #8
 800656e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006570:	68f8      	ldr	r0, [r7, #12]
 8006572:	f000 f838 	bl	80065e6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	2208      	movs	r2, #8
 800657a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	2200      	movs	r2, #0
 8006582:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8006586:	2301      	movs	r3, #1
 8006588:	e029      	b.n	80065de <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	69db      	ldr	r3, [r3, #28]
 8006590:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006594:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006598:	d111      	bne.n	80065be <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80065a2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80065a4:	68f8      	ldr	r0, [r7, #12]
 80065a6:	f000 f81e 	bl	80065e6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	2220      	movs	r2, #32
 80065ae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	2200      	movs	r2, #0
 80065b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80065ba:	2303      	movs	r3, #3
 80065bc:	e00f      	b.n	80065de <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	69da      	ldr	r2, [r3, #28]
 80065c4:	68bb      	ldr	r3, [r7, #8]
 80065c6:	4013      	ands	r3, r2
 80065c8:	68ba      	ldr	r2, [r7, #8]
 80065ca:	429a      	cmp	r2, r3
 80065cc:	bf0c      	ite	eq
 80065ce:	2301      	moveq	r3, #1
 80065d0:	2300      	movne	r3, #0
 80065d2:	b2db      	uxtb	r3, r3
 80065d4:	461a      	mov	r2, r3
 80065d6:	79fb      	ldrb	r3, [r7, #7]
 80065d8:	429a      	cmp	r2, r3
 80065da:	d0a0      	beq.n	800651e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80065dc:	2300      	movs	r3, #0
}
 80065de:	4618      	mov	r0, r3
 80065e0:	3710      	adds	r7, #16
 80065e2:	46bd      	mov	sp, r7
 80065e4:	bd80      	pop	{r7, pc}

080065e6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80065e6:	b480      	push	{r7}
 80065e8:	b095      	sub	sp, #84	@ 0x54
 80065ea:	af00      	add	r7, sp, #0
 80065ec:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80065f6:	e853 3f00 	ldrex	r3, [r3]
 80065fa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80065fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065fe:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006602:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	461a      	mov	r2, r3
 800660a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800660c:	643b      	str	r3, [r7, #64]	@ 0x40
 800660e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006610:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006612:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006614:	e841 2300 	strex	r3, r2, [r1]
 8006618:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800661a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800661c:	2b00      	cmp	r3, #0
 800661e:	d1e6      	bne.n	80065ee <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	3308      	adds	r3, #8
 8006626:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006628:	6a3b      	ldr	r3, [r7, #32]
 800662a:	e853 3f00 	ldrex	r3, [r3]
 800662e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006630:	69fb      	ldr	r3, [r7, #28]
 8006632:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006636:	f023 0301 	bic.w	r3, r3, #1
 800663a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	3308      	adds	r3, #8
 8006642:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006644:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006646:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006648:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800664a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800664c:	e841 2300 	strex	r3, r2, [r1]
 8006650:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006652:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006654:	2b00      	cmp	r3, #0
 8006656:	d1e3      	bne.n	8006620 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800665c:	2b01      	cmp	r3, #1
 800665e:	d118      	bne.n	8006692 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	e853 3f00 	ldrex	r3, [r3]
 800666c:	60bb      	str	r3, [r7, #8]
   return(result);
 800666e:	68bb      	ldr	r3, [r7, #8]
 8006670:	f023 0310 	bic.w	r3, r3, #16
 8006674:	647b      	str	r3, [r7, #68]	@ 0x44
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	461a      	mov	r2, r3
 800667c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800667e:	61bb      	str	r3, [r7, #24]
 8006680:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006682:	6979      	ldr	r1, [r7, #20]
 8006684:	69ba      	ldr	r2, [r7, #24]
 8006686:	e841 2300 	strex	r3, r2, [r1]
 800668a:	613b      	str	r3, [r7, #16]
   return(result);
 800668c:	693b      	ldr	r3, [r7, #16]
 800668e:	2b00      	cmp	r3, #0
 8006690:	d1e6      	bne.n	8006660 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	2220      	movs	r2, #32
 8006696:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	2200      	movs	r2, #0
 800669e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2200      	movs	r2, #0
 80066a4:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80066a6:	bf00      	nop
 80066a8:	3754      	adds	r7, #84	@ 0x54
 80066aa:	46bd      	mov	sp, r7
 80066ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b0:	4770      	bx	lr

080066b2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80066b2:	b480      	push	{r7}
 80066b4:	b085      	sub	sp, #20
 80066b6:	af00      	add	r7, sp, #0
 80066b8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80066c0:	2b01      	cmp	r3, #1
 80066c2:	d101      	bne.n	80066c8 <HAL_UARTEx_DisableFifoMode+0x16>
 80066c4:	2302      	movs	r3, #2
 80066c6:	e027      	b.n	8006718 <HAL_UARTEx_DisableFifoMode+0x66>
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2201      	movs	r2, #1
 80066cc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2224      	movs	r2, #36	@ 0x24
 80066d4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	681a      	ldr	r2, [r3, #0]
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	f022 0201 	bic.w	r2, r2, #1
 80066ee:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80066f6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2200      	movs	r2, #0
 80066fc:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	68fa      	ldr	r2, [r7, #12]
 8006704:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	2220      	movs	r2, #32
 800670a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	2200      	movs	r2, #0
 8006712:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006716:	2300      	movs	r3, #0
}
 8006718:	4618      	mov	r0, r3
 800671a:	3714      	adds	r7, #20
 800671c:	46bd      	mov	sp, r7
 800671e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006722:	4770      	bx	lr

08006724 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006724:	b580      	push	{r7, lr}
 8006726:	b084      	sub	sp, #16
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
 800672c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006734:	2b01      	cmp	r3, #1
 8006736:	d101      	bne.n	800673c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006738:	2302      	movs	r3, #2
 800673a:	e02d      	b.n	8006798 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2201      	movs	r2, #1
 8006740:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2224      	movs	r2, #36	@ 0x24
 8006748:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	681a      	ldr	r2, [r3, #0]
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f022 0201 	bic.w	r2, r2, #1
 8006762:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	689b      	ldr	r3, [r3, #8]
 800676a:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	683a      	ldr	r2, [r7, #0]
 8006774:	430a      	orrs	r2, r1
 8006776:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006778:	6878      	ldr	r0, [r7, #4]
 800677a:	f000 f84f 	bl	800681c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	68fa      	ldr	r2, [r7, #12]
 8006784:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	2220      	movs	r2, #32
 800678a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	2200      	movs	r2, #0
 8006792:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006796:	2300      	movs	r3, #0
}
 8006798:	4618      	mov	r0, r3
 800679a:	3710      	adds	r7, #16
 800679c:	46bd      	mov	sp, r7
 800679e:	bd80      	pop	{r7, pc}

080067a0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80067a0:	b580      	push	{r7, lr}
 80067a2:	b084      	sub	sp, #16
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
 80067a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80067b0:	2b01      	cmp	r3, #1
 80067b2:	d101      	bne.n	80067b8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80067b4:	2302      	movs	r3, #2
 80067b6:	e02d      	b.n	8006814 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2201      	movs	r2, #1
 80067bc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2224      	movs	r2, #36	@ 0x24
 80067c4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	681a      	ldr	r2, [r3, #0]
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	f022 0201 	bic.w	r2, r2, #1
 80067de:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	689b      	ldr	r3, [r3, #8]
 80067e6:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	683a      	ldr	r2, [r7, #0]
 80067f0:	430a      	orrs	r2, r1
 80067f2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80067f4:	6878      	ldr	r0, [r7, #4]
 80067f6:	f000 f811 	bl	800681c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	68fa      	ldr	r2, [r7, #12]
 8006800:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	2220      	movs	r2, #32
 8006806:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	2200      	movs	r2, #0
 800680e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006812:	2300      	movs	r3, #0
}
 8006814:	4618      	mov	r0, r3
 8006816:	3710      	adds	r7, #16
 8006818:	46bd      	mov	sp, r7
 800681a:	bd80      	pop	{r7, pc}

0800681c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800681c:	b480      	push	{r7}
 800681e:	b085      	sub	sp, #20
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006828:	2b00      	cmp	r3, #0
 800682a:	d108      	bne.n	800683e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2201      	movs	r2, #1
 8006830:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2201      	movs	r2, #1
 8006838:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800683c:	e031      	b.n	80068a2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800683e:	2308      	movs	r3, #8
 8006840:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006842:	2308      	movs	r3, #8
 8006844:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	689b      	ldr	r3, [r3, #8]
 800684c:	0e5b      	lsrs	r3, r3, #25
 800684e:	b2db      	uxtb	r3, r3
 8006850:	f003 0307 	and.w	r3, r3, #7
 8006854:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	689b      	ldr	r3, [r3, #8]
 800685c:	0f5b      	lsrs	r3, r3, #29
 800685e:	b2db      	uxtb	r3, r3
 8006860:	f003 0307 	and.w	r3, r3, #7
 8006864:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006866:	7bbb      	ldrb	r3, [r7, #14]
 8006868:	7b3a      	ldrb	r2, [r7, #12]
 800686a:	4911      	ldr	r1, [pc, #68]	@ (80068b0 <UARTEx_SetNbDataToProcess+0x94>)
 800686c:	5c8a      	ldrb	r2, [r1, r2]
 800686e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006872:	7b3a      	ldrb	r2, [r7, #12]
 8006874:	490f      	ldr	r1, [pc, #60]	@ (80068b4 <UARTEx_SetNbDataToProcess+0x98>)
 8006876:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006878:	fb93 f3f2 	sdiv	r3, r3, r2
 800687c:	b29a      	uxth	r2, r3
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006884:	7bfb      	ldrb	r3, [r7, #15]
 8006886:	7b7a      	ldrb	r2, [r7, #13]
 8006888:	4909      	ldr	r1, [pc, #36]	@ (80068b0 <UARTEx_SetNbDataToProcess+0x94>)
 800688a:	5c8a      	ldrb	r2, [r1, r2]
 800688c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006890:	7b7a      	ldrb	r2, [r7, #13]
 8006892:	4908      	ldr	r1, [pc, #32]	@ (80068b4 <UARTEx_SetNbDataToProcess+0x98>)
 8006894:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006896:	fb93 f3f2 	sdiv	r3, r3, r2
 800689a:	b29a      	uxth	r2, r3
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80068a2:	bf00      	nop
 80068a4:	3714      	adds	r7, #20
 80068a6:	46bd      	mov	sp, r7
 80068a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ac:	4770      	bx	lr
 80068ae:	bf00      	nop
 80068b0:	08006bd0 	.word	0x08006bd0
 80068b4:	08006bd8 	.word	0x08006bd8

080068b8 <AS5600_isConnected>:
//uint8_t  _direction       = AS5600_CLOCK_WISE;
int      _error           = AS5600_OK;

/* USER CODE BEGIN PID */
HAL_StatusTypeDef AS5600_isConnected(AS5600_Structure *as5600)
{
 80068b8:	b580      	push	{r7, lr}
 80068ba:	b086      	sub	sp, #24
 80068bc:	af04      	add	r7, sp, #16
 80068be:	6078      	str	r0, [r7, #4]
	_error = AS5600_OK;
 80068c0:	4b12      	ldr	r3, [pc, #72]	@ (800690c <AS5600_isConnected+0x54>)
 80068c2:	2200      	movs	r2, #0
 80068c4:	601a      	str	r2, [r3, #0]

	ret = HAL_I2C_Mem_Read(as5600->hi2cx, as5600->address, AS5600_ANGLE, 1, as5600->RxBuffer, 2, 10);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	6818      	ldr	r0, [r3, #0]
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	791b      	ldrb	r3, [r3, #4]
 80068ce:	4619      	mov	r1, r3
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	3307      	adds	r3, #7
 80068d4:	220a      	movs	r2, #10
 80068d6:	9202      	str	r2, [sp, #8]
 80068d8:	2202      	movs	r2, #2
 80068da:	9201      	str	r2, [sp, #4]
 80068dc:	9300      	str	r3, [sp, #0]
 80068de:	2301      	movs	r3, #1
 80068e0:	220e      	movs	r2, #14
 80068e2:	f7fb fbb1 	bl	8002048 <HAL_I2C_Mem_Read>
 80068e6:	4603      	mov	r3, r0
 80068e8:	461a      	mov	r2, r3
 80068ea:	4b09      	ldr	r3, [pc, #36]	@ (8006910 <AS5600_isConnected+0x58>)
 80068ec:	701a      	strb	r2, [r3, #0]
	if (ret != HAL_OK){
 80068ee:	4b08      	ldr	r3, [pc, #32]	@ (8006910 <AS5600_isConnected+0x58>)
 80068f0:	781b      	ldrb	r3, [r3, #0]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d005      	beq.n	8006902 <AS5600_isConnected+0x4a>
		_error = AS5600_ERROR_I2C_READ_3;
 80068f6:	4b05      	ldr	r3, [pc, #20]	@ (800690c <AS5600_isConnected+0x54>)
 80068f8:	f06f 0266 	mvn.w	r2, #102	@ 0x66
 80068fc:	601a      	str	r2, [r3, #0]
		return HAL_ERROR;
 80068fe:	2301      	movs	r3, #1
 8006900:	e000      	b.n	8006904 <AS5600_isConnected+0x4c>
	}
	return HAL_OK;
 8006902:	2300      	movs	r3, #0
}
 8006904:	4618      	mov	r0, r3
 8006906:	3708      	adds	r7, #8
 8006908:	46bd      	mov	sp, r7
 800690a:	bd80      	pop	{r7, pc}
 800690c:	200003ec 	.word	0x200003ec
 8006910:	200003e0 	.word	0x200003e0

08006914 <AS5600_readRaw>:

uint16_t AS5600_readRaw(AS5600_Structure *as5600)
{
 8006914:	b580      	push	{r7, lr}
 8006916:	b086      	sub	sp, #24
 8006918:	af02      	add	r7, sp, #8
 800691a:	6078      	str	r0, [r7, #4]
	uint16_t data;

	ret = HAL_I2C_Mem_Read_DMA(as5600->hi2cx, as5600->address, AS5600_ANGLE, 1, as5600->RxBuffer, 2);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	6818      	ldr	r0, [r3, #0]
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	791b      	ldrb	r3, [r3, #4]
 8006924:	4619      	mov	r1, r3
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	3307      	adds	r3, #7
 800692a:	2202      	movs	r2, #2
 800692c:	9201      	str	r2, [sp, #4]
 800692e:	9300      	str	r3, [sp, #0]
 8006930:	2301      	movs	r3, #1
 8006932:	220e      	movs	r2, #14
 8006934:	f7fb fca2 	bl	800227c <HAL_I2C_Mem_Read_DMA>
 8006938:	4603      	mov	r3, r0
 800693a:	461a      	mov	r2, r3
 800693c:	4b09      	ldr	r3, [pc, #36]	@ (8006964 <AS5600_readRaw+0x50>)
 800693e:	701a      	strb	r2, [r3, #0]

	data = as5600->RxBuffer[0];
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	79db      	ldrb	r3, [r3, #7]
 8006944:	81fb      	strh	r3, [r7, #14]
	data <<= 8;
 8006946:	89fb      	ldrh	r3, [r7, #14]
 8006948:	021b      	lsls	r3, r3, #8
 800694a:	81fb      	strh	r3, [r7, #14]
	data += as5600->RxBuffer[1];
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	7a1b      	ldrb	r3, [r3, #8]
 8006950:	461a      	mov	r2, r3
 8006952:	89fb      	ldrh	r3, [r7, #14]
 8006954:	4413      	add	r3, r2
 8006956:	81fb      	strh	r3, [r7, #14]
	return data ;
 8006958:	89fb      	ldrh	r3, [r7, #14]

}
 800695a:	4618      	mov	r0, r3
 800695c:	3710      	adds	r7, #16
 800695e:	46bd      	mov	sp, r7
 8006960:	bd80      	pop	{r7, pc}
 8006962:	bf00      	nop
 8006964:	200003e0 	.word	0x200003e0

08006968 <AS5600_readAngle>:

float AS5600_readAngle(AS5600_Structure *as5600)
{
 8006968:	b580      	push	{r7, lr}
 800696a:	b084      	sub	sp, #16
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]
	uint16_t value = AS5600_readRaw(as5600) & 0x0FFF;
 8006970:	6878      	ldr	r0, [r7, #4]
 8006972:	f7ff ffcf 	bl	8006914 <AS5600_readRaw>
 8006976:	4603      	mov	r3, r0
 8006978:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800697c:	81fb      	strh	r3, [r7, #14]

	uint16_t denominator = (1 << 12);
 800697e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006982:	81bb      	strh	r3, [r7, #12]
	float rad = (value / (float)(denominator - 1)) * 180;
 8006984:	89fb      	ldrh	r3, [r7, #14]
 8006986:	ee07 3a90 	vmov	s15, r3
 800698a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800698e:	89bb      	ldrh	r3, [r7, #12]
 8006990:	3b01      	subs	r3, #1
 8006992:	ee07 3a90 	vmov	s15, r3
 8006996:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800699a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800699e:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 80069bc <AS5600_readAngle+0x54>
 80069a2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80069a6:	edc7 7a02 	vstr	s15, [r7, #8]

	return rad;
 80069aa:	68bb      	ldr	r3, [r7, #8]
 80069ac:	ee07 3a90 	vmov	s15, r3
}
 80069b0:	eeb0 0a67 	vmov.f32	s0, s15
 80069b4:	3710      	adds	r7, #16
 80069b6:	46bd      	mov	sp, r7
 80069b8:	bd80      	pop	{r7, pc}
 80069ba:	bf00      	nop
 80069bc:	43340000 	.word	0x43340000

080069c0 <AS5600_getCumulativePosition>:

float AS5600_getCumulativePosition(AS5600_Structure *as5600)
{
 80069c0:	b580      	push	{r7, lr}
 80069c2:	b084      	sub	sp, #16
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
	int16_t value = AS5600_readRaw(as5600) & 0x0FFF;
 80069c8:	6878      	ldr	r0, [r7, #4]
 80069ca:	f7ff ffa3 	bl	8006914 <AS5600_readRaw>
 80069ce:	4603      	mov	r3, r0
 80069d0:	b21b      	sxth	r3, r3
 80069d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80069d6:	81fb      	strh	r3, [r7, #14]

	if ((_lastPosition > 2048) && ( value < (_lastPosition - 2048)))
 80069d8:	4b34      	ldr	r3, [pc, #208]	@ (8006aac <AS5600_getCumulativePosition+0xec>)
 80069da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80069de:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80069e2:	dd16      	ble.n	8006a12 <AS5600_getCumulativePosition+0x52>
 80069e4:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80069e8:	4b30      	ldr	r3, [pc, #192]	@ (8006aac <AS5600_getCumulativePosition+0xec>)
 80069ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80069ee:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 80069f2:	429a      	cmp	r2, r3
 80069f4:	da0d      	bge.n	8006a12 <AS5600_getCumulativePosition+0x52>
	{
		_position = _position + 4096 - _lastPosition + value;
 80069f6:	4b2e      	ldr	r3, [pc, #184]	@ (8006ab0 <AS5600_getCumulativePosition+0xf0>)
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80069fe:	4a2b      	ldr	r2, [pc, #172]	@ (8006aac <AS5600_getCumulativePosition+0xec>)
 8006a00:	f9b2 2000 	ldrsh.w	r2, [r2]
 8006a04:	1a9a      	subs	r2, r3, r2
 8006a06:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006a0a:	4413      	add	r3, r2
 8006a0c:	4a28      	ldr	r2, [pc, #160]	@ (8006ab0 <AS5600_getCumulativePosition+0xf0>)
 8006a0e:	6013      	str	r3, [r2, #0]
 8006a10:	e027      	b.n	8006a62 <AS5600_getCumulativePosition+0xa2>
	}

	else if ((value > 2048) && ( _lastPosition < (value - 2048)))
 8006a12:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006a16:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006a1a:	dd17      	ble.n	8006a4c <AS5600_getCumulativePosition+0x8c>
 8006a1c:	4b23      	ldr	r3, [pc, #140]	@ (8006aac <AS5600_getCumulativePosition+0xec>)
 8006a1e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006a22:	461a      	mov	r2, r3
 8006a24:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006a28:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 8006a2c:	429a      	cmp	r2, r3
 8006a2e:	da0d      	bge.n	8006a4c <AS5600_getCumulativePosition+0x8c>
	{
		_position = _position - 4096 - _lastPosition + value;
 8006a30:	4b1f      	ldr	r3, [pc, #124]	@ (8006ab0 <AS5600_getCumulativePosition+0xf0>)
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	f5a3 5380 	sub.w	r3, r3, #4096	@ 0x1000
 8006a38:	4a1c      	ldr	r2, [pc, #112]	@ (8006aac <AS5600_getCumulativePosition+0xec>)
 8006a3a:	f9b2 2000 	ldrsh.w	r2, [r2]
 8006a3e:	1a9a      	subs	r2, r3, r2
 8006a40:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006a44:	4413      	add	r3, r2
 8006a46:	4a1a      	ldr	r2, [pc, #104]	@ (8006ab0 <AS5600_getCumulativePosition+0xf0>)
 8006a48:	6013      	str	r3, [r2, #0]
 8006a4a:	e00a      	b.n	8006a62 <AS5600_getCumulativePosition+0xa2>
	}
	else _position = _position - _lastPosition + value;
 8006a4c:	4b18      	ldr	r3, [pc, #96]	@ (8006ab0 <AS5600_getCumulativePosition+0xf0>)
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	4a16      	ldr	r2, [pc, #88]	@ (8006aac <AS5600_getCumulativePosition+0xec>)
 8006a52:	f9b2 2000 	ldrsh.w	r2, [r2]
 8006a56:	1a9a      	subs	r2, r3, r2
 8006a58:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006a5c:	4413      	add	r3, r2
 8006a5e:	4a14      	ldr	r2, [pc, #80]	@ (8006ab0 <AS5600_getCumulativePosition+0xf0>)
 8006a60:	6013      	str	r3, [r2, #0]
	_lastPosition = value;
 8006a62:	4a12      	ldr	r2, [pc, #72]	@ (8006aac <AS5600_getCumulativePosition+0xec>)
 8006a64:	89fb      	ldrh	r3, [r7, #14]
 8006a66:	8013      	strh	r3, [r2, #0]

	uint16_t denominator = (1 << 12);
 8006a68:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006a6c:	81bb      	strh	r3, [r7, #12]
	float cumulative_rad = (_position / (float)(denominator - 1)) * 2 * 180;
 8006a6e:	4b10      	ldr	r3, [pc, #64]	@ (8006ab0 <AS5600_getCumulativePosition+0xf0>)
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	ee07 3a90 	vmov	s15, r3
 8006a76:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8006a7a:	89bb      	ldrh	r3, [r7, #12]
 8006a7c:	3b01      	subs	r3, #1
 8006a7e:	ee07 3a90 	vmov	s15, r3
 8006a82:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006a86:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006a8a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8006a8e:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8006ab4 <AS5600_getCumulativePosition+0xf4>
 8006a92:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006a96:	edc7 7a02 	vstr	s15, [r7, #8]

	return cumulative_rad;
 8006a9a:	68bb      	ldr	r3, [r7, #8]
 8006a9c:	ee07 3a90 	vmov	s15, r3
}
 8006aa0:	eeb0 0a67 	vmov.f32	s0, s15
 8006aa4:	3710      	adds	r7, #16
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	bd80      	pop	{r7, pc}
 8006aaa:	bf00      	nop
 8006aac:	200003e8 	.word	0x200003e8
 8006ab0:	200003e4 	.word	0x200003e4
 8006ab4:	43340000 	.word	0x43340000

08006ab8 <AS5600_resetCumulativePosition>:

float AS5600_resetCumulativePosition(AS5600_Structure *as5600, float position)
{
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	b084      	sub	sp, #16
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
 8006ac0:	ed87 0a00 	vstr	s0, [r7]
	_lastPosition = AS5600_readRaw(as5600) & 0x0FFF;
 8006ac4:	6878      	ldr	r0, [r7, #4]
 8006ac6:	f7ff ff25 	bl	8006914 <AS5600_readRaw>
 8006aca:	4603      	mov	r3, r0
 8006acc:	b21b      	sxth	r3, r3
 8006ace:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006ad2:	b21a      	sxth	r2, r3
 8006ad4:	4b0b      	ldr	r3, [pc, #44]	@ (8006b04 <AS5600_resetCumulativePosition+0x4c>)
 8006ad6:	801a      	strh	r2, [r3, #0]
	int32_t old = _position;
 8006ad8:	4b0b      	ldr	r3, [pc, #44]	@ (8006b08 <AS5600_resetCumulativePosition+0x50>)
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	60fb      	str	r3, [r7, #12]
	_position = position;
 8006ade:	edd7 7a00 	vldr	s15, [r7]
 8006ae2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006ae6:	ee17 2a90 	vmov	r2, s15
 8006aea:	4b07      	ldr	r3, [pc, #28]	@ (8006b08 <AS5600_resetCumulativePosition+0x50>)
 8006aec:	601a      	str	r2, [r3, #0]
	return old;
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	ee07 3a90 	vmov	s15, r3
 8006af4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 8006af8:	eeb0 0a67 	vmov.f32	s0, s15
 8006afc:	3710      	adds	r7, #16
 8006afe:	46bd      	mov	sp, r7
 8006b00:	bd80      	pop	{r7, pc}
 8006b02:	bf00      	nop
 8006b04:	200003e8 	.word	0x200003e8
 8006b08:	200003e4 	.word	0x200003e4

08006b0c <AS5600_lastError>:


int AS5600_lastError()
{
 8006b0c:	b480      	push	{r7}
 8006b0e:	b083      	sub	sp, #12
 8006b10:	af00      	add	r7, sp, #0
	int value = _error;
 8006b12:	4b06      	ldr	r3, [pc, #24]	@ (8006b2c <AS5600_lastError+0x20>)
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	607b      	str	r3, [r7, #4]
	_error = AS5600_OK;
 8006b18:	4b04      	ldr	r3, [pc, #16]	@ (8006b2c <AS5600_lastError+0x20>)
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	601a      	str	r2, [r3, #0]
	return value;
 8006b1e:	687b      	ldr	r3, [r7, #4]
}
 8006b20:	4618      	mov	r0, r3
 8006b22:	370c      	adds	r7, #12
 8006b24:	46bd      	mov	sp, r7
 8006b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2a:	4770      	bx	lr
 8006b2c:	200003ec 	.word	0x200003ec

08006b30 <memset>:
 8006b30:	4402      	add	r2, r0
 8006b32:	4603      	mov	r3, r0
 8006b34:	4293      	cmp	r3, r2
 8006b36:	d100      	bne.n	8006b3a <memset+0xa>
 8006b38:	4770      	bx	lr
 8006b3a:	f803 1b01 	strb.w	r1, [r3], #1
 8006b3e:	e7f9      	b.n	8006b34 <memset+0x4>

08006b40 <__libc_init_array>:
 8006b40:	b570      	push	{r4, r5, r6, lr}
 8006b42:	4d0d      	ldr	r5, [pc, #52]	@ (8006b78 <__libc_init_array+0x38>)
 8006b44:	4c0d      	ldr	r4, [pc, #52]	@ (8006b7c <__libc_init_array+0x3c>)
 8006b46:	1b64      	subs	r4, r4, r5
 8006b48:	10a4      	asrs	r4, r4, #2
 8006b4a:	2600      	movs	r6, #0
 8006b4c:	42a6      	cmp	r6, r4
 8006b4e:	d109      	bne.n	8006b64 <__libc_init_array+0x24>
 8006b50:	4d0b      	ldr	r5, [pc, #44]	@ (8006b80 <__libc_init_array+0x40>)
 8006b52:	4c0c      	ldr	r4, [pc, #48]	@ (8006b84 <__libc_init_array+0x44>)
 8006b54:	f000 f818 	bl	8006b88 <_init>
 8006b58:	1b64      	subs	r4, r4, r5
 8006b5a:	10a4      	asrs	r4, r4, #2
 8006b5c:	2600      	movs	r6, #0
 8006b5e:	42a6      	cmp	r6, r4
 8006b60:	d105      	bne.n	8006b6e <__libc_init_array+0x2e>
 8006b62:	bd70      	pop	{r4, r5, r6, pc}
 8006b64:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b68:	4798      	blx	r3
 8006b6a:	3601      	adds	r6, #1
 8006b6c:	e7ee      	b.n	8006b4c <__libc_init_array+0xc>
 8006b6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b72:	4798      	blx	r3
 8006b74:	3601      	adds	r6, #1
 8006b76:	e7f2      	b.n	8006b5e <__libc_init_array+0x1e>
 8006b78:	08006be8 	.word	0x08006be8
 8006b7c:	08006be8 	.word	0x08006be8
 8006b80:	08006be8 	.word	0x08006be8
 8006b84:	08006bec 	.word	0x08006bec

08006b88 <_init>:
 8006b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b8a:	bf00      	nop
 8006b8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b8e:	bc08      	pop	{r3}
 8006b90:	469e      	mov	lr, r3
 8006b92:	4770      	bx	lr

08006b94 <_fini>:
 8006b94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b96:	bf00      	nop
 8006b98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b9a:	bc08      	pop	{r3}
 8006b9c:	469e      	mov	lr, r3
 8006b9e:	4770      	bx	lr
