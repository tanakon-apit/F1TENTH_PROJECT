
STM32G431KB_F1TENTH_FIRMWARE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000049c0  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08004b98  08004b98  00005b98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004bd8  08004bd8  00006040  2**0
                  CONTENTS
  4 .ARM          00000008  08004bd8  08004bd8  00005bd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004be0  08004be0  00006040  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004be0  08004be0  00005be0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004be4  08004be4  00005be4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000040  20000000  08004be8  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a0  20000040  08004c28  00006040  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002e0  08004c28  000062e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006040  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015d93  00000000  00000000  00006070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d39  00000000  00000000  0001be03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001378  00000000  00000000  0001eb40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f40  00000000  00000000  0001feb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001df23  00000000  00000000  00020df8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018f85  00000000  00000000  0003ed1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c568e  00000000  00000000  00057ca0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011d32e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005250  00000000  00000000  0011d374  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000089  00000000  00000000  001225c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000040 	.word	0x20000040
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08004b80 	.word	0x08004b80

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000044 	.word	0x20000044
 8000214:	08004b80 	.word	0x08004b80

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b96a 	b.w	8000504 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	460c      	mov	r4, r1
 8000250:	2b00      	cmp	r3, #0
 8000252:	d14e      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000254:	4694      	mov	ip, r2
 8000256:	458c      	cmp	ip, r1
 8000258:	4686      	mov	lr, r0
 800025a:	fab2 f282 	clz	r2, r2
 800025e:	d962      	bls.n	8000326 <__udivmoddi4+0xde>
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0320 	rsb	r3, r2, #32
 8000266:	4091      	lsls	r1, r2
 8000268:	fa20 f303 	lsr.w	r3, r0, r3
 800026c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000270:	4319      	orrs	r1, r3
 8000272:	fa00 fe02 	lsl.w	lr, r0, r2
 8000276:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800027a:	fa1f f68c 	uxth.w	r6, ip
 800027e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000282:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000286:	fb07 1114 	mls	r1, r7, r4, r1
 800028a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028e:	fb04 f106 	mul.w	r1, r4, r6
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f104 30ff 	add.w	r0, r4, #4294967295
 800029e:	f080 8112 	bcs.w	80004c6 <__udivmoddi4+0x27e>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 810f 	bls.w	80004c6 <__udivmoddi4+0x27e>
 80002a8:	3c02      	subs	r4, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a59      	subs	r1, r3, r1
 80002ae:	fa1f f38e 	uxth.w	r3, lr
 80002b2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002b6:	fb07 1110 	mls	r1, r7, r0, r1
 80002ba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002be:	fb00 f606 	mul.w	r6, r0, r6
 80002c2:	429e      	cmp	r6, r3
 80002c4:	d90a      	bls.n	80002dc <__udivmoddi4+0x94>
 80002c6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ca:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ce:	f080 80fc 	bcs.w	80004ca <__udivmoddi4+0x282>
 80002d2:	429e      	cmp	r6, r3
 80002d4:	f240 80f9 	bls.w	80004ca <__udivmoddi4+0x282>
 80002d8:	4463      	add	r3, ip
 80002da:	3802      	subs	r0, #2
 80002dc:	1b9b      	subs	r3, r3, r6
 80002de:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002e2:	2100      	movs	r1, #0
 80002e4:	b11d      	cbz	r5, 80002ee <__udivmoddi4+0xa6>
 80002e6:	40d3      	lsrs	r3, r2
 80002e8:	2200      	movs	r2, #0
 80002ea:	e9c5 3200 	strd	r3, r2, [r5]
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d905      	bls.n	8000302 <__udivmoddi4+0xba>
 80002f6:	b10d      	cbz	r5, 80002fc <__udivmoddi4+0xb4>
 80002f8:	e9c5 0100 	strd	r0, r1, [r5]
 80002fc:	2100      	movs	r1, #0
 80002fe:	4608      	mov	r0, r1
 8000300:	e7f5      	b.n	80002ee <__udivmoddi4+0xa6>
 8000302:	fab3 f183 	clz	r1, r3
 8000306:	2900      	cmp	r1, #0
 8000308:	d146      	bne.n	8000398 <__udivmoddi4+0x150>
 800030a:	42a3      	cmp	r3, r4
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xcc>
 800030e:	4290      	cmp	r0, r2
 8000310:	f0c0 80f0 	bcc.w	80004f4 <__udivmoddi4+0x2ac>
 8000314:	1a86      	subs	r6, r0, r2
 8000316:	eb64 0303 	sbc.w	r3, r4, r3
 800031a:	2001      	movs	r0, #1
 800031c:	2d00      	cmp	r5, #0
 800031e:	d0e6      	beq.n	80002ee <__udivmoddi4+0xa6>
 8000320:	e9c5 6300 	strd	r6, r3, [r5]
 8000324:	e7e3      	b.n	80002ee <__udivmoddi4+0xa6>
 8000326:	2a00      	cmp	r2, #0
 8000328:	f040 8090 	bne.w	800044c <__udivmoddi4+0x204>
 800032c:	eba1 040c 	sub.w	r4, r1, ip
 8000330:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000334:	fa1f f78c 	uxth.w	r7, ip
 8000338:	2101      	movs	r1, #1
 800033a:	fbb4 f6f8 	udiv	r6, r4, r8
 800033e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000342:	fb08 4416 	mls	r4, r8, r6, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb07 f006 	mul.w	r0, r7, r6
 800034e:	4298      	cmp	r0, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x11c>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f106 34ff 	add.w	r4, r6, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x11a>
 800035c:	4298      	cmp	r0, r3
 800035e:	f200 80cd 	bhi.w	80004fc <__udivmoddi4+0x2b4>
 8000362:	4626      	mov	r6, r4
 8000364:	1a1c      	subs	r4, r3, r0
 8000366:	fa1f f38e 	uxth.w	r3, lr
 800036a:	fbb4 f0f8 	udiv	r0, r4, r8
 800036e:	fb08 4410 	mls	r4, r8, r0, r4
 8000372:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000376:	fb00 f707 	mul.w	r7, r0, r7
 800037a:	429f      	cmp	r7, r3
 800037c:	d908      	bls.n	8000390 <__udivmoddi4+0x148>
 800037e:	eb1c 0303 	adds.w	r3, ip, r3
 8000382:	f100 34ff 	add.w	r4, r0, #4294967295
 8000386:	d202      	bcs.n	800038e <__udivmoddi4+0x146>
 8000388:	429f      	cmp	r7, r3
 800038a:	f200 80b0 	bhi.w	80004ee <__udivmoddi4+0x2a6>
 800038e:	4620      	mov	r0, r4
 8000390:	1bdb      	subs	r3, r3, r7
 8000392:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000396:	e7a5      	b.n	80002e4 <__udivmoddi4+0x9c>
 8000398:	f1c1 0620 	rsb	r6, r1, #32
 800039c:	408b      	lsls	r3, r1
 800039e:	fa22 f706 	lsr.w	r7, r2, r6
 80003a2:	431f      	orrs	r7, r3
 80003a4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a8:	fa04 f301 	lsl.w	r3, r4, r1
 80003ac:	ea43 030c 	orr.w	r3, r3, ip
 80003b0:	40f4      	lsrs	r4, r6
 80003b2:	fa00 f801 	lsl.w	r8, r0, r1
 80003b6:	0c38      	lsrs	r0, r7, #16
 80003b8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003bc:	fbb4 fef0 	udiv	lr, r4, r0
 80003c0:	fa1f fc87 	uxth.w	ip, r7
 80003c4:	fb00 441e 	mls	r4, r0, lr, r4
 80003c8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003cc:	fb0e f90c 	mul.w	r9, lr, ip
 80003d0:	45a1      	cmp	r9, r4
 80003d2:	fa02 f201 	lsl.w	r2, r2, r1
 80003d6:	d90a      	bls.n	80003ee <__udivmoddi4+0x1a6>
 80003d8:	193c      	adds	r4, r7, r4
 80003da:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003de:	f080 8084 	bcs.w	80004ea <__udivmoddi4+0x2a2>
 80003e2:	45a1      	cmp	r9, r4
 80003e4:	f240 8081 	bls.w	80004ea <__udivmoddi4+0x2a2>
 80003e8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	eba4 0409 	sub.w	r4, r4, r9
 80003f2:	fa1f f983 	uxth.w	r9, r3
 80003f6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003fa:	fb00 4413 	mls	r4, r0, r3, r4
 80003fe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000402:	fb03 fc0c 	mul.w	ip, r3, ip
 8000406:	45a4      	cmp	ip, r4
 8000408:	d907      	bls.n	800041a <__udivmoddi4+0x1d2>
 800040a:	193c      	adds	r4, r7, r4
 800040c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000410:	d267      	bcs.n	80004e2 <__udivmoddi4+0x29a>
 8000412:	45a4      	cmp	ip, r4
 8000414:	d965      	bls.n	80004e2 <__udivmoddi4+0x29a>
 8000416:	3b02      	subs	r3, #2
 8000418:	443c      	add	r4, r7
 800041a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800041e:	fba0 9302 	umull	r9, r3, r0, r2
 8000422:	eba4 040c 	sub.w	r4, r4, ip
 8000426:	429c      	cmp	r4, r3
 8000428:	46ce      	mov	lr, r9
 800042a:	469c      	mov	ip, r3
 800042c:	d351      	bcc.n	80004d2 <__udivmoddi4+0x28a>
 800042e:	d04e      	beq.n	80004ce <__udivmoddi4+0x286>
 8000430:	b155      	cbz	r5, 8000448 <__udivmoddi4+0x200>
 8000432:	ebb8 030e 	subs.w	r3, r8, lr
 8000436:	eb64 040c 	sbc.w	r4, r4, ip
 800043a:	fa04 f606 	lsl.w	r6, r4, r6
 800043e:	40cb      	lsrs	r3, r1
 8000440:	431e      	orrs	r6, r3
 8000442:	40cc      	lsrs	r4, r1
 8000444:	e9c5 6400 	strd	r6, r4, [r5]
 8000448:	2100      	movs	r1, #0
 800044a:	e750      	b.n	80002ee <__udivmoddi4+0xa6>
 800044c:	f1c2 0320 	rsb	r3, r2, #32
 8000450:	fa20 f103 	lsr.w	r1, r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa24 f303 	lsr.w	r3, r4, r3
 800045c:	4094      	lsls	r4, r2
 800045e:	430c      	orrs	r4, r1
 8000460:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000464:	fa00 fe02 	lsl.w	lr, r0, r2
 8000468:	fa1f f78c 	uxth.w	r7, ip
 800046c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000470:	fb08 3110 	mls	r1, r8, r0, r3
 8000474:	0c23      	lsrs	r3, r4, #16
 8000476:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800047a:	fb00 f107 	mul.w	r1, r0, r7
 800047e:	4299      	cmp	r1, r3
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x24c>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 36ff 	add.w	r6, r0, #4294967295
 800048a:	d22c      	bcs.n	80004e6 <__udivmoddi4+0x29e>
 800048c:	4299      	cmp	r1, r3
 800048e:	d92a      	bls.n	80004e6 <__udivmoddi4+0x29e>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1a5b      	subs	r3, r3, r1
 8000496:	b2a4      	uxth	r4, r4
 8000498:	fbb3 f1f8 	udiv	r1, r3, r8
 800049c:	fb08 3311 	mls	r3, r8, r1, r3
 80004a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004a4:	fb01 f307 	mul.w	r3, r1, r7
 80004a8:	42a3      	cmp	r3, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x276>
 80004ac:	eb1c 0404 	adds.w	r4, ip, r4
 80004b0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004b4:	d213      	bcs.n	80004de <__udivmoddi4+0x296>
 80004b6:	42a3      	cmp	r3, r4
 80004b8:	d911      	bls.n	80004de <__udivmoddi4+0x296>
 80004ba:	3902      	subs	r1, #2
 80004bc:	4464      	add	r4, ip
 80004be:	1ae4      	subs	r4, r4, r3
 80004c0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004c4:	e739      	b.n	800033a <__udivmoddi4+0xf2>
 80004c6:	4604      	mov	r4, r0
 80004c8:	e6f0      	b.n	80002ac <__udivmoddi4+0x64>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e706      	b.n	80002dc <__udivmoddi4+0x94>
 80004ce:	45c8      	cmp	r8, r9
 80004d0:	d2ae      	bcs.n	8000430 <__udivmoddi4+0x1e8>
 80004d2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004d6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004da:	3801      	subs	r0, #1
 80004dc:	e7a8      	b.n	8000430 <__udivmoddi4+0x1e8>
 80004de:	4631      	mov	r1, r6
 80004e0:	e7ed      	b.n	80004be <__udivmoddi4+0x276>
 80004e2:	4603      	mov	r3, r0
 80004e4:	e799      	b.n	800041a <__udivmoddi4+0x1d2>
 80004e6:	4630      	mov	r0, r6
 80004e8:	e7d4      	b.n	8000494 <__udivmoddi4+0x24c>
 80004ea:	46d6      	mov	lr, sl
 80004ec:	e77f      	b.n	80003ee <__udivmoddi4+0x1a6>
 80004ee:	4463      	add	r3, ip
 80004f0:	3802      	subs	r0, #2
 80004f2:	e74d      	b.n	8000390 <__udivmoddi4+0x148>
 80004f4:	4606      	mov	r6, r0
 80004f6:	4623      	mov	r3, r4
 80004f8:	4608      	mov	r0, r1
 80004fa:	e70f      	b.n	800031c <__udivmoddi4+0xd4>
 80004fc:	3e02      	subs	r6, #2
 80004fe:	4463      	add	r3, ip
 8000500:	e730      	b.n	8000364 <__udivmoddi4+0x11c>
 8000502:	bf00      	nop

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b088      	sub	sp, #32
 800050c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800050e:	f107 030c 	add.w	r3, r7, #12
 8000512:	2200      	movs	r2, #0
 8000514:	601a      	str	r2, [r3, #0]
 8000516:	605a      	str	r2, [r3, #4]
 8000518:	609a      	str	r2, [r3, #8]
 800051a:	60da      	str	r2, [r3, #12]
 800051c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800051e:	4b18      	ldr	r3, [pc, #96]	@ (8000580 <MX_GPIO_Init+0x78>)
 8000520:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000522:	4a17      	ldr	r2, [pc, #92]	@ (8000580 <MX_GPIO_Init+0x78>)
 8000524:	f043 0301 	orr.w	r3, r3, #1
 8000528:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800052a:	4b15      	ldr	r3, [pc, #84]	@ (8000580 <MX_GPIO_Init+0x78>)
 800052c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800052e:	f003 0301 	and.w	r3, r3, #1
 8000532:	60bb      	str	r3, [r7, #8]
 8000534:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000536:	4b12      	ldr	r3, [pc, #72]	@ (8000580 <MX_GPIO_Init+0x78>)
 8000538:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800053a:	4a11      	ldr	r2, [pc, #68]	@ (8000580 <MX_GPIO_Init+0x78>)
 800053c:	f043 0302 	orr.w	r3, r3, #2
 8000540:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000542:	4b0f      	ldr	r3, [pc, #60]	@ (8000580 <MX_GPIO_Init+0x78>)
 8000544:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000546:	f003 0302 	and.w	r3, r3, #2
 800054a:	607b      	str	r3, [r7, #4]
 800054c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800054e:	2200      	movs	r2, #0
 8000550:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000554:	480b      	ldr	r0, [pc, #44]	@ (8000584 <MX_GPIO_Init+0x7c>)
 8000556:	f001 f83d 	bl	80015d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800055a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800055e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000560:	2301      	movs	r3, #1
 8000562:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000564:	2300      	movs	r3, #0
 8000566:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000568:	2300      	movs	r3, #0
 800056a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800056c:	f107 030c 	add.w	r3, r7, #12
 8000570:	4619      	mov	r1, r3
 8000572:	4804      	ldr	r0, [pc, #16]	@ (8000584 <MX_GPIO_Init+0x7c>)
 8000574:	f000 feac 	bl	80012d0 <HAL_GPIO_Init>

}
 8000578:	bf00      	nop
 800057a:	3720      	adds	r7, #32
 800057c:	46bd      	mov	sp, r7
 800057e:	bd80      	pop	{r7, pc}
 8000580:	40021000 	.word	0x40021000
 8000584:	48000400 	.word	0x48000400

08000588 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800058c:	4b1b      	ldr	r3, [pc, #108]	@ (80005fc <MX_I2C1_Init+0x74>)
 800058e:	4a1c      	ldr	r2, [pc, #112]	@ (8000600 <MX_I2C1_Init+0x78>)
 8000590:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10802D9B;
 8000592:	4b1a      	ldr	r3, [pc, #104]	@ (80005fc <MX_I2C1_Init+0x74>)
 8000594:	4a1b      	ldr	r2, [pc, #108]	@ (8000604 <MX_I2C1_Init+0x7c>)
 8000596:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000598:	4b18      	ldr	r3, [pc, #96]	@ (80005fc <MX_I2C1_Init+0x74>)
 800059a:	2200      	movs	r2, #0
 800059c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800059e:	4b17      	ldr	r3, [pc, #92]	@ (80005fc <MX_I2C1_Init+0x74>)
 80005a0:	2201      	movs	r2, #1
 80005a2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005a4:	4b15      	ldr	r3, [pc, #84]	@ (80005fc <MX_I2C1_Init+0x74>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80005aa:	4b14      	ldr	r3, [pc, #80]	@ (80005fc <MX_I2C1_Init+0x74>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80005b0:	4b12      	ldr	r3, [pc, #72]	@ (80005fc <MX_I2C1_Init+0x74>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80005b6:	4b11      	ldr	r3, [pc, #68]	@ (80005fc <MX_I2C1_Init+0x74>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80005bc:	4b0f      	ldr	r3, [pc, #60]	@ (80005fc <MX_I2C1_Init+0x74>)
 80005be:	2200      	movs	r2, #0
 80005c0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80005c2:	480e      	ldr	r0, [pc, #56]	@ (80005fc <MX_I2C1_Init+0x74>)
 80005c4:	f001 f81e 	bl	8001604 <HAL_I2C_Init>
 80005c8:	4603      	mov	r3, r0
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d001      	beq.n	80005d2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80005ce:	f000 f912 	bl	80007f6 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80005d2:	2100      	movs	r1, #0
 80005d4:	4809      	ldr	r0, [pc, #36]	@ (80005fc <MX_I2C1_Init+0x74>)
 80005d6:	f001 fc39 	bl	8001e4c <HAL_I2CEx_ConfigAnalogFilter>
 80005da:	4603      	mov	r3, r0
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d001      	beq.n	80005e4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80005e0:	f000 f909 	bl	80007f6 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80005e4:	2100      	movs	r1, #0
 80005e6:	4805      	ldr	r0, [pc, #20]	@ (80005fc <MX_I2C1_Init+0x74>)
 80005e8:	f001 fc7b 	bl	8001ee2 <HAL_I2CEx_ConfigDigitalFilter>
 80005ec:	4603      	mov	r3, r0
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d001      	beq.n	80005f6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80005f2:	f000 f900 	bl	80007f6 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80005f6:	bf00      	nop
 80005f8:	bd80      	pop	{r7, pc}
 80005fa:	bf00      	nop
 80005fc:	2000005c 	.word	0x2000005c
 8000600:	40005400 	.word	0x40005400
 8000604:	10802d9b 	.word	0x10802d9b

08000608 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b09c      	sub	sp, #112	@ 0x70
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000610:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000614:	2200      	movs	r2, #0
 8000616:	601a      	str	r2, [r3, #0]
 8000618:	605a      	str	r2, [r3, #4]
 800061a:	609a      	str	r2, [r3, #8]
 800061c:	60da      	str	r2, [r3, #12]
 800061e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000620:	f107 0318 	add.w	r3, r7, #24
 8000624:	2244      	movs	r2, #68	@ 0x44
 8000626:	2100      	movs	r1, #0
 8000628:	4618      	mov	r0, r3
 800062a:	f004 fa7d 	bl	8004b28 <memset>
  if(i2cHandle->Instance==I2C1)
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	4a2d      	ldr	r2, [pc, #180]	@ (80006e8 <HAL_I2C_MspInit+0xe0>)
 8000634:	4293      	cmp	r3, r2
 8000636:	d153      	bne.n	80006e0 <HAL_I2C_MspInit+0xd8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000638:	2340      	movs	r3, #64	@ 0x40
 800063a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800063c:	2300      	movs	r3, #0
 800063e:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000640:	f107 0318 	add.w	r3, r7, #24
 8000644:	4618      	mov	r0, r3
 8000646:	f002 fa7b 	bl	8002b40 <HAL_RCCEx_PeriphCLKConfig>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d001      	beq.n	8000654 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000650:	f000 f8d1 	bl	80007f6 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000654:	4b25      	ldr	r3, [pc, #148]	@ (80006ec <HAL_I2C_MspInit+0xe4>)
 8000656:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000658:	4a24      	ldr	r2, [pc, #144]	@ (80006ec <HAL_I2C_MspInit+0xe4>)
 800065a:	f043 0301 	orr.w	r3, r3, #1
 800065e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000660:	4b22      	ldr	r3, [pc, #136]	@ (80006ec <HAL_I2C_MspInit+0xe4>)
 8000662:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000664:	f003 0301 	and.w	r3, r3, #1
 8000668:	617b      	str	r3, [r7, #20]
 800066a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800066c:	4b1f      	ldr	r3, [pc, #124]	@ (80006ec <HAL_I2C_MspInit+0xe4>)
 800066e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000670:	4a1e      	ldr	r2, [pc, #120]	@ (80006ec <HAL_I2C_MspInit+0xe4>)
 8000672:	f043 0302 	orr.w	r3, r3, #2
 8000676:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000678:	4b1c      	ldr	r3, [pc, #112]	@ (80006ec <HAL_I2C_MspInit+0xe4>)
 800067a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800067c:	f003 0302 	and.w	r3, r3, #2
 8000680:	613b      	str	r3, [r7, #16]
 8000682:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000684:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000688:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800068a:	2312      	movs	r3, #18
 800068c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800068e:	2301      	movs	r3, #1
 8000690:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000692:	2300      	movs	r3, #0
 8000694:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000696:	2304      	movs	r3, #4
 8000698:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800069a:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800069e:	4619      	mov	r1, r3
 80006a0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006a4:	f000 fe14 	bl	80012d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80006a8:	2380      	movs	r3, #128	@ 0x80
 80006aa:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80006ac:	2312      	movs	r3, #18
 80006ae:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006b0:	2301      	movs	r3, #1
 80006b2:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006b4:	2300      	movs	r3, #0
 80006b6:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80006b8:	2304      	movs	r3, #4
 80006ba:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006bc:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80006c0:	4619      	mov	r1, r3
 80006c2:	480b      	ldr	r0, [pc, #44]	@ (80006f0 <HAL_I2C_MspInit+0xe8>)
 80006c4:	f000 fe04 	bl	80012d0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80006c8:	4b08      	ldr	r3, [pc, #32]	@ (80006ec <HAL_I2C_MspInit+0xe4>)
 80006ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80006cc:	4a07      	ldr	r2, [pc, #28]	@ (80006ec <HAL_I2C_MspInit+0xe4>)
 80006ce:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80006d2:	6593      	str	r3, [r2, #88]	@ 0x58
 80006d4:	4b05      	ldr	r3, [pc, #20]	@ (80006ec <HAL_I2C_MspInit+0xe4>)
 80006d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80006d8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80006dc:	60fb      	str	r3, [r7, #12]
 80006de:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80006e0:	bf00      	nop
 80006e2:	3770      	adds	r7, #112	@ 0x70
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	40005400 	.word	0x40005400
 80006ec:	40021000 	.word	0x40021000
 80006f0:	48000400 	.word	0x48000400

080006f4 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80006f8:	f000 fc95 	bl	8001026 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80006fc:	f000 f830 	bl	8000760 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000700:	f7ff ff02 	bl	8000508 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8000704:	f000 fb82 	bl	8000e0c <MX_USART2_UART_Init>
	MX_I2C1_Init();
 8000708:	f7ff ff3e 	bl	8000588 <MX_I2C1_Init>
	MX_TIM3_Init();
 800070c:	f000 f8e0 	bl	80008d0 <MX_TIM3_Init>
	MX_TIM4_Init();
 8000710:	f000 f934 	bl	800097c <MX_TIM4_Init>
	MX_TIM8_Init();
 8000714:	f000 f988 	bl	8000a28 <MX_TIM8_Init>
	MX_USART1_UART_Init();
 8000718:	f000 fb2c 	bl	8000d74 <MX_USART1_UART_Init>
	/* USER CODE BEGIN 2 */
	AS5600_isConnected(&as5600);
 800071c:	480c      	ldr	r0, [pc, #48]	@ (8000750 <main+0x5c>)
 800071e:	f004 f8ef 	bl	8004900 <AS5600_isConnected>
	{
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */

		Rad = AS5600_readAngle(&as5600);
 8000722:	480b      	ldr	r0, [pc, #44]	@ (8000750 <main+0x5c>)
 8000724:	f004 f948 	bl	80049b8 <AS5600_readAngle>
 8000728:	eef0 7a40 	vmov.f32	s15, s0
 800072c:	4b09      	ldr	r3, [pc, #36]	@ (8000754 <main+0x60>)
 800072e:	edc3 7a00 	vstr	s15, [r3]

		Cumulative_Rad = AS5600_getCumulativePosition(&as5600);
 8000732:	4807      	ldr	r0, [pc, #28]	@ (8000750 <main+0x5c>)
 8000734:	f004 f96c 	bl	8004a10 <AS5600_getCumulativePosition>
 8000738:	eef0 7a40 	vmov.f32	s15, s0
 800073c:	4b06      	ldr	r3, [pc, #24]	@ (8000758 <main+0x64>)
 800073e:	edc3 7a00 	vstr	s15, [r3]
//			timestamp += 100;
//			revCount = AS5600_getAngularSpeed(&hi2c1, AS5600_MODE_RADIANS);
//		}


		debug_status = AS5600_lastError();
 8000742:	f004 f9df 	bl	8004b04 <AS5600_lastError>
 8000746:	4603      	mov	r3, r0
 8000748:	4a04      	ldr	r2, [pc, #16]	@ (800075c <main+0x68>)
 800074a:	6013      	str	r3, [r2, #0]
		Rad = AS5600_readAngle(&as5600);
 800074c:	bf00      	nop
 800074e:	e7e8      	b.n	8000722 <main+0x2e>
 8000750:	20000000 	.word	0x20000000
 8000754:	200000b4 	.word	0x200000b4
 8000758:	200000b8 	.word	0x200000b8
 800075c:	200000b0 	.word	0x200000b0

08000760 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b094      	sub	sp, #80	@ 0x50
 8000764:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000766:	f107 0318 	add.w	r3, r7, #24
 800076a:	2238      	movs	r2, #56	@ 0x38
 800076c:	2100      	movs	r1, #0
 800076e:	4618      	mov	r0, r3
 8000770:	f004 f9da 	bl	8004b28 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000774:	1d3b      	adds	r3, r7, #4
 8000776:	2200      	movs	r2, #0
 8000778:	601a      	str	r2, [r3, #0]
 800077a:	605a      	str	r2, [r3, #4]
 800077c:	609a      	str	r2, [r3, #8]
 800077e:	60da      	str	r2, [r3, #12]
 8000780:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000782:	2000      	movs	r0, #0
 8000784:	f001 fbfa 	bl	8001f7c <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000788:	2302      	movs	r3, #2
 800078a:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800078c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000790:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000792:	2340      	movs	r3, #64	@ 0x40
 8000794:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000796:	2302      	movs	r3, #2
 8000798:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800079a:	2302      	movs	r3, #2
 800079c:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800079e:	2304      	movs	r3, #4
 80007a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 85;
 80007a2:	2355      	movs	r3, #85	@ 0x55
 80007a4:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007a6:	2302      	movs	r3, #2
 80007a8:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80007aa:	2302      	movs	r3, #2
 80007ac:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80007ae:	2302      	movs	r3, #2
 80007b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007b2:	f107 0318 	add.w	r3, r7, #24
 80007b6:	4618      	mov	r0, r3
 80007b8:	f001 fc94 	bl	80020e4 <HAL_RCC_OscConfig>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d001      	beq.n	80007c6 <SystemClock_Config+0x66>
	{
		Error_Handler();
 80007c2:	f000 f818 	bl	80007f6 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007c6:	230f      	movs	r3, #15
 80007c8:	607b      	str	r3, [r7, #4]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007ca:	2303      	movs	r3, #3
 80007cc:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007ce:	2300      	movs	r3, #0
 80007d0:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007d2:	2300      	movs	r3, #0
 80007d4:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007d6:	2300      	movs	r3, #0
 80007d8:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80007da:	1d3b      	adds	r3, r7, #4
 80007dc:	2104      	movs	r1, #4
 80007de:	4618      	mov	r0, r3
 80007e0:	f001 ff92 	bl	8002708 <HAL_RCC_ClockConfig>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d001      	beq.n	80007ee <SystemClock_Config+0x8e>
	{
		Error_Handler();
 80007ea:	f000 f804 	bl	80007f6 <Error_Handler>
	}
}
 80007ee:	bf00      	nop
 80007f0:	3750      	adds	r7, #80	@ 0x50
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}

080007f6 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80007f6:	b480      	push	{r7}
 80007f8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007fa:	b672      	cpsid	i
}
 80007fc:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80007fe:	bf00      	nop
 8000800:	e7fd      	b.n	80007fe <Error_Handler+0x8>
	...

08000804 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b082      	sub	sp, #8
 8000808:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800080a:	4b0f      	ldr	r3, [pc, #60]	@ (8000848 <HAL_MspInit+0x44>)
 800080c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800080e:	4a0e      	ldr	r2, [pc, #56]	@ (8000848 <HAL_MspInit+0x44>)
 8000810:	f043 0301 	orr.w	r3, r3, #1
 8000814:	6613      	str	r3, [r2, #96]	@ 0x60
 8000816:	4b0c      	ldr	r3, [pc, #48]	@ (8000848 <HAL_MspInit+0x44>)
 8000818:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800081a:	f003 0301 	and.w	r3, r3, #1
 800081e:	607b      	str	r3, [r7, #4]
 8000820:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000822:	4b09      	ldr	r3, [pc, #36]	@ (8000848 <HAL_MspInit+0x44>)
 8000824:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000826:	4a08      	ldr	r2, [pc, #32]	@ (8000848 <HAL_MspInit+0x44>)
 8000828:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800082c:	6593      	str	r3, [r2, #88]	@ 0x58
 800082e:	4b06      	ldr	r3, [pc, #24]	@ (8000848 <HAL_MspInit+0x44>)
 8000830:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000832:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000836:	603b      	str	r3, [r7, #0]
 8000838:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800083a:	f001 fc43 	bl	80020c4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800083e:	bf00      	nop
 8000840:	3708      	adds	r7, #8
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	40021000 	.word	0x40021000

0800084c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800084c:	b480      	push	{r7}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000850:	bf00      	nop
 8000852:	e7fd      	b.n	8000850 <NMI_Handler+0x4>

08000854 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000858:	bf00      	nop
 800085a:	e7fd      	b.n	8000858 <HardFault_Handler+0x4>

0800085c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800085c:	b480      	push	{r7}
 800085e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000860:	bf00      	nop
 8000862:	e7fd      	b.n	8000860 <MemManage_Handler+0x4>

08000864 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000868:	bf00      	nop
 800086a:	e7fd      	b.n	8000868 <BusFault_Handler+0x4>

0800086c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800086c:	b480      	push	{r7}
 800086e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000870:	bf00      	nop
 8000872:	e7fd      	b.n	8000870 <UsageFault_Handler+0x4>

08000874 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000874:	b480      	push	{r7}
 8000876:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000878:	bf00      	nop
 800087a:	46bd      	mov	sp, r7
 800087c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000880:	4770      	bx	lr

08000882 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000882:	b480      	push	{r7}
 8000884:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000886:	bf00      	nop
 8000888:	46bd      	mov	sp, r7
 800088a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088e:	4770      	bx	lr

08000890 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000890:	b480      	push	{r7}
 8000892:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000894:	bf00      	nop
 8000896:	46bd      	mov	sp, r7
 8000898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089c:	4770      	bx	lr

0800089e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800089e:	b580      	push	{r7, lr}
 80008a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008a2:	f000 fc13 	bl	80010cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008a6:	bf00      	nop
 80008a8:	bd80      	pop	{r7, pc}
	...

080008ac <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80008ac:	b480      	push	{r7}
 80008ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80008b0:	4b06      	ldr	r3, [pc, #24]	@ (80008cc <SystemInit+0x20>)
 80008b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80008b6:	4a05      	ldr	r2, [pc, #20]	@ (80008cc <SystemInit+0x20>)
 80008b8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80008bc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008c0:	bf00      	nop
 80008c2:	46bd      	mov	sp, r7
 80008c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c8:	4770      	bx	lr
 80008ca:	bf00      	nop
 80008cc:	e000ed00 	.word	0xe000ed00

080008d0 <MX_TIM3_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim8;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b08c      	sub	sp, #48	@ 0x30
 80008d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80008d6:	f107 030c 	add.w	r3, r7, #12
 80008da:	2224      	movs	r2, #36	@ 0x24
 80008dc:	2100      	movs	r1, #0
 80008de:	4618      	mov	r0, r3
 80008e0:	f004 f922 	bl	8004b28 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008e4:	463b      	mov	r3, r7
 80008e6:	2200      	movs	r2, #0
 80008e8:	601a      	str	r2, [r3, #0]
 80008ea:	605a      	str	r2, [r3, #4]
 80008ec:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80008ee:	4b21      	ldr	r3, [pc, #132]	@ (8000974 <MX_TIM3_Init+0xa4>)
 80008f0:	4a21      	ldr	r2, [pc, #132]	@ (8000978 <MX_TIM3_Init+0xa8>)
 80008f2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80008f4:	4b1f      	ldr	r3, [pc, #124]	@ (8000974 <MX_TIM3_Init+0xa4>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008fa:	4b1e      	ldr	r3, [pc, #120]	@ (8000974 <MX_TIM3_Init+0xa4>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000900:	4b1c      	ldr	r3, [pc, #112]	@ (8000974 <MX_TIM3_Init+0xa4>)
 8000902:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000906:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000908:	4b1a      	ldr	r3, [pc, #104]	@ (8000974 <MX_TIM3_Init+0xa4>)
 800090a:	2200      	movs	r2, #0
 800090c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800090e:	4b19      	ldr	r3, [pc, #100]	@ (8000974 <MX_TIM3_Init+0xa4>)
 8000910:	2200      	movs	r2, #0
 8000912:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000914:	2301      	movs	r3, #1
 8000916:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000918:	2300      	movs	r3, #0
 800091a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800091c:	2301      	movs	r3, #1
 800091e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000920:	2300      	movs	r3, #0
 8000922:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000924:	2300      	movs	r3, #0
 8000926:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000928:	2300      	movs	r3, #0
 800092a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800092c:	2301      	movs	r3, #1
 800092e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000930:	2300      	movs	r3, #0
 8000932:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000934:	2300      	movs	r3, #0
 8000936:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000938:	f107 030c 	add.w	r3, r7, #12
 800093c:	4619      	mov	r1, r3
 800093e:	480d      	ldr	r0, [pc, #52]	@ (8000974 <MX_TIM3_Init+0xa4>)
 8000940:	f002 fb45 	bl	8002fce <HAL_TIM_Encoder_Init>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d001      	beq.n	800094e <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 800094a:	f7ff ff54 	bl	80007f6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800094e:	2300      	movs	r3, #0
 8000950:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000952:	2300      	movs	r3, #0
 8000954:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000956:	463b      	mov	r3, r7
 8000958:	4619      	mov	r1, r3
 800095a:	4806      	ldr	r0, [pc, #24]	@ (8000974 <MX_TIM3_Init+0xa4>)
 800095c:	f003 f884 	bl	8003a68 <HAL_TIMEx_MasterConfigSynchronization>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d001      	beq.n	800096a <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8000966:	f7ff ff46 	bl	80007f6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800096a:	bf00      	nop
 800096c:	3730      	adds	r7, #48	@ 0x30
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	200000bc 	.word	0x200000bc
 8000978:	40000400 	.word	0x40000400

0800097c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b08c      	sub	sp, #48	@ 0x30
 8000980:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000982:	f107 030c 	add.w	r3, r7, #12
 8000986:	2224      	movs	r2, #36	@ 0x24
 8000988:	2100      	movs	r1, #0
 800098a:	4618      	mov	r0, r3
 800098c:	f004 f8cc 	bl	8004b28 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000990:	463b      	mov	r3, r7
 8000992:	2200      	movs	r2, #0
 8000994:	601a      	str	r2, [r3, #0]
 8000996:	605a      	str	r2, [r3, #4]
 8000998:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800099a:	4b21      	ldr	r3, [pc, #132]	@ (8000a20 <MX_TIM4_Init+0xa4>)
 800099c:	4a21      	ldr	r2, [pc, #132]	@ (8000a24 <MX_TIM4_Init+0xa8>)
 800099e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80009a0:	4b1f      	ldr	r3, [pc, #124]	@ (8000a20 <MX_TIM4_Init+0xa4>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009a6:	4b1e      	ldr	r3, [pc, #120]	@ (8000a20 <MX_TIM4_Init+0xa4>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80009ac:	4b1c      	ldr	r3, [pc, #112]	@ (8000a20 <MX_TIM4_Init+0xa4>)
 80009ae:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80009b2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009b4:	4b1a      	ldr	r3, [pc, #104]	@ (8000a20 <MX_TIM4_Init+0xa4>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009ba:	4b19      	ldr	r3, [pc, #100]	@ (8000a20 <MX_TIM4_Init+0xa4>)
 80009bc:	2200      	movs	r2, #0
 80009be:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80009c0:	2301      	movs	r3, #1
 80009c2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80009c4:	2300      	movs	r3, #0
 80009c6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80009c8:	2301      	movs	r3, #1
 80009ca:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80009cc:	2300      	movs	r3, #0
 80009ce:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80009d0:	2300      	movs	r3, #0
 80009d2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80009d4:	2300      	movs	r3, #0
 80009d6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80009d8:	2301      	movs	r3, #1
 80009da:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80009dc:	2300      	movs	r3, #0
 80009de:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80009e0:	2300      	movs	r3, #0
 80009e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80009e4:	f107 030c 	add.w	r3, r7, #12
 80009e8:	4619      	mov	r1, r3
 80009ea:	480d      	ldr	r0, [pc, #52]	@ (8000a20 <MX_TIM4_Init+0xa4>)
 80009ec:	f002 faef 	bl	8002fce <HAL_TIM_Encoder_Init>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d001      	beq.n	80009fa <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 80009f6:	f7ff fefe 	bl	80007f6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009fa:	2300      	movs	r3, #0
 80009fc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009fe:	2300      	movs	r3, #0
 8000a00:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000a02:	463b      	mov	r3, r7
 8000a04:	4619      	mov	r1, r3
 8000a06:	4806      	ldr	r0, [pc, #24]	@ (8000a20 <MX_TIM4_Init+0xa4>)
 8000a08:	f003 f82e 	bl	8003a68 <HAL_TIMEx_MasterConfigSynchronization>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d001      	beq.n	8000a16 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8000a12:	f7ff fef0 	bl	80007f6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000a16:	bf00      	nop
 8000a18:	3730      	adds	r7, #48	@ 0x30
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	20000108 	.word	0x20000108
 8000a24:	40000800 	.word	0x40000800

08000a28 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b098      	sub	sp, #96	@ 0x60
 8000a2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a2e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000a32:	2200      	movs	r2, #0
 8000a34:	601a      	str	r2, [r3, #0]
 8000a36:	605a      	str	r2, [r3, #4]
 8000a38:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a3a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000a3e:	2200      	movs	r2, #0
 8000a40:	601a      	str	r2, [r3, #0]
 8000a42:	605a      	str	r2, [r3, #4]
 8000a44:	609a      	str	r2, [r3, #8]
 8000a46:	60da      	str	r2, [r3, #12]
 8000a48:	611a      	str	r2, [r3, #16]
 8000a4a:	615a      	str	r2, [r3, #20]
 8000a4c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000a4e:	1d3b      	adds	r3, r7, #4
 8000a50:	2234      	movs	r2, #52	@ 0x34
 8000a52:	2100      	movs	r1, #0
 8000a54:	4618      	mov	r0, r3
 8000a56:	f004 f867 	bl	8004b28 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000a5a:	4b41      	ldr	r3, [pc, #260]	@ (8000b60 <MX_TIM8_Init+0x138>)
 8000a5c:	4a41      	ldr	r2, [pc, #260]	@ (8000b64 <MX_TIM8_Init+0x13c>)
 8000a5e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8000a60:	4b3f      	ldr	r3, [pc, #252]	@ (8000b60 <MX_TIM8_Init+0x138>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a66:	4b3e      	ldr	r3, [pc, #248]	@ (8000b60 <MX_TIM8_Init+0x138>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8000a6c:	4b3c      	ldr	r3, [pc, #240]	@ (8000b60 <MX_TIM8_Init+0x138>)
 8000a6e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000a72:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a74:	4b3a      	ldr	r3, [pc, #232]	@ (8000b60 <MX_TIM8_Init+0x138>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000a7a:	4b39      	ldr	r3, [pc, #228]	@ (8000b60 <MX_TIM8_Init+0x138>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a80:	4b37      	ldr	r3, [pc, #220]	@ (8000b60 <MX_TIM8_Init+0x138>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8000a86:	4836      	ldr	r0, [pc, #216]	@ (8000b60 <MX_TIM8_Init+0x138>)
 8000a88:	f002 fa4a 	bl	8002f20 <HAL_TIM_PWM_Init>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d001      	beq.n	8000a96 <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 8000a92:	f7ff feb0 	bl	80007f6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a96:	2300      	movs	r3, #0
 8000a98:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000aa2:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	482d      	ldr	r0, [pc, #180]	@ (8000b60 <MX_TIM8_Init+0x138>)
 8000aaa:	f002 ffdd 	bl	8003a68 <HAL_TIMEx_MasterConfigSynchronization>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d001      	beq.n	8000ab8 <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 8000ab4:	f7ff fe9f 	bl	80007f6 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ab8:	2360      	movs	r3, #96	@ 0x60
 8000aba:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8000abc:	2300      	movs	r3, #0
 8000abe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000acc:	2300      	movs	r3, #0
 8000ace:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ad4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000ad8:	2200      	movs	r2, #0
 8000ada:	4619      	mov	r1, r3
 8000adc:	4820      	ldr	r0, [pc, #128]	@ (8000b60 <MX_TIM8_Init+0x138>)
 8000ade:	f002 fb1d 	bl	800311c <HAL_TIM_PWM_ConfigChannel>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d001      	beq.n	8000aec <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8000ae8:	f7ff fe85 	bl	80007f6 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000aec:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000af0:	2204      	movs	r2, #4
 8000af2:	4619      	mov	r1, r3
 8000af4:	481a      	ldr	r0, [pc, #104]	@ (8000b60 <MX_TIM8_Init+0x138>)
 8000af6:	f002 fb11 	bl	800311c <HAL_TIM_PWM_ConfigChannel>
 8000afa:	4603      	mov	r3, r0
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d001      	beq.n	8000b04 <MX_TIM8_Init+0xdc>
  {
    Error_Handler();
 8000b00:	f7ff fe79 	bl	80007f6 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000b04:	2300      	movs	r3, #0
 8000b06:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000b10:	2300      	movs	r3, #0
 8000b12:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000b14:	2300      	movs	r3, #0
 8000b16:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000b18:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b1c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000b22:	2300      	movs	r3, #0
 8000b24:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000b26:	2300      	movs	r3, #0
 8000b28:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000b2a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000b2e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000b30:	2300      	movs	r3, #0
 8000b32:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000b34:	2300      	movs	r3, #0
 8000b36:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8000b3c:	1d3b      	adds	r3, r7, #4
 8000b3e:	4619      	mov	r1, r3
 8000b40:	4807      	ldr	r0, [pc, #28]	@ (8000b60 <MX_TIM8_Init+0x138>)
 8000b42:	f003 f813 	bl	8003b6c <HAL_TIMEx_ConfigBreakDeadTime>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d001      	beq.n	8000b50 <MX_TIM8_Init+0x128>
  {
    Error_Handler();
 8000b4c:	f7ff fe53 	bl	80007f6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8000b50:	4803      	ldr	r0, [pc, #12]	@ (8000b60 <MX_TIM8_Init+0x138>)
 8000b52:	f000 f8bb 	bl	8000ccc <HAL_TIM_MspPostInit>

}
 8000b56:	bf00      	nop
 8000b58:	3760      	adds	r7, #96	@ 0x60
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	20000154 	.word	0x20000154
 8000b64:	40013400 	.word	0x40013400

08000b68 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b08c      	sub	sp, #48	@ 0x30
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b70:	f107 031c 	add.w	r3, r7, #28
 8000b74:	2200      	movs	r2, #0
 8000b76:	601a      	str	r2, [r3, #0]
 8000b78:	605a      	str	r2, [r3, #4]
 8000b7a:	609a      	str	r2, [r3, #8]
 8000b7c:	60da      	str	r2, [r3, #12]
 8000b7e:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	4a3d      	ldr	r2, [pc, #244]	@ (8000c7c <HAL_TIM_Encoder_MspInit+0x114>)
 8000b86:	4293      	cmp	r3, r2
 8000b88:	d145      	bne.n	8000c16 <HAL_TIM_Encoder_MspInit+0xae>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000b8a:	4b3d      	ldr	r3, [pc, #244]	@ (8000c80 <HAL_TIM_Encoder_MspInit+0x118>)
 8000b8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b8e:	4a3c      	ldr	r2, [pc, #240]	@ (8000c80 <HAL_TIM_Encoder_MspInit+0x118>)
 8000b90:	f043 0302 	orr.w	r3, r3, #2
 8000b94:	6593      	str	r3, [r2, #88]	@ 0x58
 8000b96:	4b3a      	ldr	r3, [pc, #232]	@ (8000c80 <HAL_TIM_Encoder_MspInit+0x118>)
 8000b98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b9a:	f003 0302 	and.w	r3, r3, #2
 8000b9e:	61bb      	str	r3, [r7, #24]
 8000ba0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ba2:	4b37      	ldr	r3, [pc, #220]	@ (8000c80 <HAL_TIM_Encoder_MspInit+0x118>)
 8000ba4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ba6:	4a36      	ldr	r2, [pc, #216]	@ (8000c80 <HAL_TIM_Encoder_MspInit+0x118>)
 8000ba8:	f043 0301 	orr.w	r3, r3, #1
 8000bac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000bae:	4b34      	ldr	r3, [pc, #208]	@ (8000c80 <HAL_TIM_Encoder_MspInit+0x118>)
 8000bb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bb2:	f003 0301 	and.w	r3, r3, #1
 8000bb6:	617b      	str	r3, [r7, #20]
 8000bb8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bba:	4b31      	ldr	r3, [pc, #196]	@ (8000c80 <HAL_TIM_Encoder_MspInit+0x118>)
 8000bbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bbe:	4a30      	ldr	r2, [pc, #192]	@ (8000c80 <HAL_TIM_Encoder_MspInit+0x118>)
 8000bc0:	f043 0302 	orr.w	r3, r3, #2
 8000bc4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000bc6:	4b2e      	ldr	r3, [pc, #184]	@ (8000c80 <HAL_TIM_Encoder_MspInit+0x118>)
 8000bc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bca:	f003 0302 	and.w	r3, r3, #2
 8000bce:	613b      	str	r3, [r7, #16]
 8000bd0:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PA4     ------> TIM3_CH2
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000bd2:	2310      	movs	r3, #16
 8000bd4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd6:	2302      	movs	r3, #2
 8000bd8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bde:	2300      	movs	r3, #0
 8000be0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000be2:	2302      	movs	r3, #2
 8000be4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000be6:	f107 031c 	add.w	r3, r7, #28
 8000bea:	4619      	mov	r1, r3
 8000bec:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bf0:	f000 fb6e 	bl	80012d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000bf4:	2310      	movs	r3, #16
 8000bf6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf8:	2302      	movs	r3, #2
 8000bfa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c00:	2300      	movs	r3, #0
 8000c02:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000c04:	2302      	movs	r3, #2
 8000c06:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c08:	f107 031c 	add.w	r3, r7, #28
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	481d      	ldr	r0, [pc, #116]	@ (8000c84 <HAL_TIM_Encoder_MspInit+0x11c>)
 8000c10:	f000 fb5e 	bl	80012d0 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8000c14:	e02e      	b.n	8000c74 <HAL_TIM_Encoder_MspInit+0x10c>
  else if(tim_encoderHandle->Instance==TIM4)
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	4a1b      	ldr	r2, [pc, #108]	@ (8000c88 <HAL_TIM_Encoder_MspInit+0x120>)
 8000c1c:	4293      	cmp	r3, r2
 8000c1e:	d129      	bne.n	8000c74 <HAL_TIM_Encoder_MspInit+0x10c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000c20:	4b17      	ldr	r3, [pc, #92]	@ (8000c80 <HAL_TIM_Encoder_MspInit+0x118>)
 8000c22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c24:	4a16      	ldr	r2, [pc, #88]	@ (8000c80 <HAL_TIM_Encoder_MspInit+0x118>)
 8000c26:	f043 0304 	orr.w	r3, r3, #4
 8000c2a:	6593      	str	r3, [r2, #88]	@ 0x58
 8000c2c:	4b14      	ldr	r3, [pc, #80]	@ (8000c80 <HAL_TIM_Encoder_MspInit+0x118>)
 8000c2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c30:	f003 0304 	and.w	r3, r3, #4
 8000c34:	60fb      	str	r3, [r7, #12]
 8000c36:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c38:	4b11      	ldr	r3, [pc, #68]	@ (8000c80 <HAL_TIM_Encoder_MspInit+0x118>)
 8000c3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c3c:	4a10      	ldr	r2, [pc, #64]	@ (8000c80 <HAL_TIM_Encoder_MspInit+0x118>)
 8000c3e:	f043 0301 	orr.w	r3, r3, #1
 8000c42:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c44:	4b0e      	ldr	r3, [pc, #56]	@ (8000c80 <HAL_TIM_Encoder_MspInit+0x118>)
 8000c46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c48:	f003 0301 	and.w	r3, r3, #1
 8000c4c:	60bb      	str	r3, [r7, #8]
 8000c4e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000c50:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000c54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c56:	2302      	movs	r3, #2
 8000c58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8000c62:	230a      	movs	r3, #10
 8000c64:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c66:	f107 031c 	add.w	r3, r7, #28
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c70:	f000 fb2e 	bl	80012d0 <HAL_GPIO_Init>
}
 8000c74:	bf00      	nop
 8000c76:	3730      	adds	r7, #48	@ 0x30
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	40000400 	.word	0x40000400
 8000c80:	40021000 	.word	0x40021000
 8000c84:	48000400 	.word	0x48000400
 8000c88:	40000800 	.word	0x40000800

08000c8c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	b085      	sub	sp, #20
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM8)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	4a0a      	ldr	r2, [pc, #40]	@ (8000cc4 <HAL_TIM_PWM_MspInit+0x38>)
 8000c9a:	4293      	cmp	r3, r2
 8000c9c:	d10b      	bne.n	8000cb6 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* TIM8 clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8000c9e:	4b0a      	ldr	r3, [pc, #40]	@ (8000cc8 <HAL_TIM_PWM_MspInit+0x3c>)
 8000ca0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ca2:	4a09      	ldr	r2, [pc, #36]	@ (8000cc8 <HAL_TIM_PWM_MspInit+0x3c>)
 8000ca4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000ca8:	6613      	str	r3, [r2, #96]	@ 0x60
 8000caa:	4b07      	ldr	r3, [pc, #28]	@ (8000cc8 <HAL_TIM_PWM_MspInit+0x3c>)
 8000cac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000cae:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000cb2:	60fb      	str	r3, [r7, #12]
 8000cb4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8000cb6:	bf00      	nop
 8000cb8:	3714      	adds	r7, #20
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc0:	4770      	bx	lr
 8000cc2:	bf00      	nop
 8000cc4:	40013400 	.word	0x40013400
 8000cc8:	40021000 	.word	0x40021000

08000ccc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b08a      	sub	sp, #40	@ 0x28
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cd4:	f107 0314 	add.w	r3, r7, #20
 8000cd8:	2200      	movs	r2, #0
 8000cda:	601a      	str	r2, [r3, #0]
 8000cdc:	605a      	str	r2, [r3, #4]
 8000cde:	609a      	str	r2, [r3, #8]
 8000ce0:	60da      	str	r2, [r3, #12]
 8000ce2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM8)
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	4a1f      	ldr	r2, [pc, #124]	@ (8000d68 <HAL_TIM_MspPostInit+0x9c>)
 8000cea:	4293      	cmp	r3, r2
 8000cec:	d138      	bne.n	8000d60 <HAL_TIM_MspPostInit+0x94>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cee:	4b1f      	ldr	r3, [pc, #124]	@ (8000d6c <HAL_TIM_MspPostInit+0xa0>)
 8000cf0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cf2:	4a1e      	ldr	r2, [pc, #120]	@ (8000d6c <HAL_TIM_MspPostInit+0xa0>)
 8000cf4:	f043 0301 	orr.w	r3, r3, #1
 8000cf8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000cfa:	4b1c      	ldr	r3, [pc, #112]	@ (8000d6c <HAL_TIM_MspPostInit+0xa0>)
 8000cfc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cfe:	f003 0301 	and.w	r3, r3, #1
 8000d02:	613b      	str	r3, [r7, #16]
 8000d04:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d06:	4b19      	ldr	r3, [pc, #100]	@ (8000d6c <HAL_TIM_MspPostInit+0xa0>)
 8000d08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d0a:	4a18      	ldr	r2, [pc, #96]	@ (8000d6c <HAL_TIM_MspPostInit+0xa0>)
 8000d0c:	f043 0302 	orr.w	r3, r3, #2
 8000d10:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d12:	4b16      	ldr	r3, [pc, #88]	@ (8000d6c <HAL_TIM_MspPostInit+0xa0>)
 8000d14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d16:	f003 0302 	and.w	r3, r3, #2
 8000d1a:	60fb      	str	r3, [r7, #12]
 8000d1c:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PA7     ------> TIM8_CH1N
    PB0     ------> TIM8_CH2N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000d1e:	2380      	movs	r3, #128	@ 0x80
 8000d20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d22:	2302      	movs	r3, #2
 8000d24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d26:	2300      	movs	r3, #0
 8000d28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8000d2e:	2304      	movs	r3, #4
 8000d30:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d32:	f107 0314 	add.w	r3, r7, #20
 8000d36:	4619      	mov	r1, r3
 8000d38:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d3c:	f000 fac8 	bl	80012d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000d40:	2301      	movs	r3, #1
 8000d42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d44:	2302      	movs	r3, #2
 8000d46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8000d50:	2304      	movs	r3, #4
 8000d52:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d54:	f107 0314 	add.w	r3, r7, #20
 8000d58:	4619      	mov	r1, r3
 8000d5a:	4805      	ldr	r0, [pc, #20]	@ (8000d70 <HAL_TIM_MspPostInit+0xa4>)
 8000d5c:	f000 fab8 	bl	80012d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8000d60:	bf00      	nop
 8000d62:	3728      	adds	r7, #40	@ 0x28
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	40013400 	.word	0x40013400
 8000d6c:	40021000 	.word	0x40021000
 8000d70:	48000400 	.word	0x48000400

08000d74 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000d78:	4b22      	ldr	r3, [pc, #136]	@ (8000e04 <MX_USART1_UART_Init+0x90>)
 8000d7a:	4a23      	ldr	r2, [pc, #140]	@ (8000e08 <MX_USART1_UART_Init+0x94>)
 8000d7c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000d7e:	4b21      	ldr	r3, [pc, #132]	@ (8000e04 <MX_USART1_UART_Init+0x90>)
 8000d80:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000d84:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d86:	4b1f      	ldr	r3, [pc, #124]	@ (8000e04 <MX_USART1_UART_Init+0x90>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000d8c:	4b1d      	ldr	r3, [pc, #116]	@ (8000e04 <MX_USART1_UART_Init+0x90>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000d92:	4b1c      	ldr	r3, [pc, #112]	@ (8000e04 <MX_USART1_UART_Init+0x90>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000d98:	4b1a      	ldr	r3, [pc, #104]	@ (8000e04 <MX_USART1_UART_Init+0x90>)
 8000d9a:	220c      	movs	r2, #12
 8000d9c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d9e:	4b19      	ldr	r3, [pc, #100]	@ (8000e04 <MX_USART1_UART_Init+0x90>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000da4:	4b17      	ldr	r3, [pc, #92]	@ (8000e04 <MX_USART1_UART_Init+0x90>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000daa:	4b16      	ldr	r3, [pc, #88]	@ (8000e04 <MX_USART1_UART_Init+0x90>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000db0:	4b14      	ldr	r3, [pc, #80]	@ (8000e04 <MX_USART1_UART_Init+0x90>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000db6:	4b13      	ldr	r3, [pc, #76]	@ (8000e04 <MX_USART1_UART_Init+0x90>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000dbc:	4811      	ldr	r0, [pc, #68]	@ (8000e04 <MX_USART1_UART_Init+0x90>)
 8000dbe:	f002 ff61 	bl	8003c84 <HAL_UART_Init>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d001      	beq.n	8000dcc <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000dc8:	f7ff fd15 	bl	80007f6 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000dcc:	2100      	movs	r1, #0
 8000dce:	480d      	ldr	r0, [pc, #52]	@ (8000e04 <MX_USART1_UART_Init+0x90>)
 8000dd0:	f003 fccc 	bl	800476c <HAL_UARTEx_SetTxFifoThreshold>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d001      	beq.n	8000dde <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000dda:	f7ff fd0c 	bl	80007f6 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000dde:	2100      	movs	r1, #0
 8000de0:	4808      	ldr	r0, [pc, #32]	@ (8000e04 <MX_USART1_UART_Init+0x90>)
 8000de2:	f003 fd01 	bl	80047e8 <HAL_UARTEx_SetRxFifoThreshold>
 8000de6:	4603      	mov	r3, r0
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d001      	beq.n	8000df0 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000dec:	f7ff fd03 	bl	80007f6 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000df0:	4804      	ldr	r0, [pc, #16]	@ (8000e04 <MX_USART1_UART_Init+0x90>)
 8000df2:	f003 fc82 	bl	80046fa <HAL_UARTEx_DisableFifoMode>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d001      	beq.n	8000e00 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000dfc:	f7ff fcfb 	bl	80007f6 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000e00:	bf00      	nop
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	200001a0 	.word	0x200001a0
 8000e08:	40013800 	.word	0x40013800

08000e0c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e10:	4b22      	ldr	r3, [pc, #136]	@ (8000e9c <MX_USART2_UART_Init+0x90>)
 8000e12:	4a23      	ldr	r2, [pc, #140]	@ (8000ea0 <MX_USART2_UART_Init+0x94>)
 8000e14:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000e16:	4b21      	ldr	r3, [pc, #132]	@ (8000e9c <MX_USART2_UART_Init+0x90>)
 8000e18:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000e1c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e1e:	4b1f      	ldr	r3, [pc, #124]	@ (8000e9c <MX_USART2_UART_Init+0x90>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e24:	4b1d      	ldr	r3, [pc, #116]	@ (8000e9c <MX_USART2_UART_Init+0x90>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e2a:	4b1c      	ldr	r3, [pc, #112]	@ (8000e9c <MX_USART2_UART_Init+0x90>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e30:	4b1a      	ldr	r3, [pc, #104]	@ (8000e9c <MX_USART2_UART_Init+0x90>)
 8000e32:	220c      	movs	r2, #12
 8000e34:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e36:	4b19      	ldr	r3, [pc, #100]	@ (8000e9c <MX_USART2_UART_Init+0x90>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e3c:	4b17      	ldr	r3, [pc, #92]	@ (8000e9c <MX_USART2_UART_Init+0x90>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e42:	4b16      	ldr	r3, [pc, #88]	@ (8000e9c <MX_USART2_UART_Init+0x90>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000e48:	4b14      	ldr	r3, [pc, #80]	@ (8000e9c <MX_USART2_UART_Init+0x90>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e4e:	4b13      	ldr	r3, [pc, #76]	@ (8000e9c <MX_USART2_UART_Init+0x90>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e54:	4811      	ldr	r0, [pc, #68]	@ (8000e9c <MX_USART2_UART_Init+0x90>)
 8000e56:	f002 ff15 	bl	8003c84 <HAL_UART_Init>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d001      	beq.n	8000e64 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000e60:	f7ff fcc9 	bl	80007f6 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e64:	2100      	movs	r1, #0
 8000e66:	480d      	ldr	r0, [pc, #52]	@ (8000e9c <MX_USART2_UART_Init+0x90>)
 8000e68:	f003 fc80 	bl	800476c <HAL_UARTEx_SetTxFifoThreshold>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d001      	beq.n	8000e76 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000e72:	f7ff fcc0 	bl	80007f6 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e76:	2100      	movs	r1, #0
 8000e78:	4808      	ldr	r0, [pc, #32]	@ (8000e9c <MX_USART2_UART_Init+0x90>)
 8000e7a:	f003 fcb5 	bl	80047e8 <HAL_UARTEx_SetRxFifoThreshold>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d001      	beq.n	8000e88 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000e84:	f7ff fcb7 	bl	80007f6 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000e88:	4804      	ldr	r0, [pc, #16]	@ (8000e9c <MX_USART2_UART_Init+0x90>)
 8000e8a:	f003 fc36 	bl	80046fa <HAL_UARTEx_DisableFifoMode>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d001      	beq.n	8000e98 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000e94:	f7ff fcaf 	bl	80007f6 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e98:	bf00      	nop
 8000e9a:	bd80      	pop	{r7, pc}
 8000e9c:	20000234 	.word	0x20000234
 8000ea0:	40004400 	.word	0x40004400

08000ea4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b09c      	sub	sp, #112	@ 0x70
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eac:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	601a      	str	r2, [r3, #0]
 8000eb4:	605a      	str	r2, [r3, #4]
 8000eb6:	609a      	str	r2, [r3, #8]
 8000eb8:	60da      	str	r2, [r3, #12]
 8000eba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ebc:	f107 0318 	add.w	r3, r7, #24
 8000ec0:	2244      	movs	r2, #68	@ 0x44
 8000ec2:	2100      	movs	r1, #0
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f003 fe2f 	bl	8004b28 <memset>
  if(uartHandle->Instance==USART1)
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	4a3e      	ldr	r2, [pc, #248]	@ (8000fc8 <HAL_UART_MspInit+0x124>)
 8000ed0:	4293      	cmp	r3, r2
 8000ed2:	d138      	bne.n	8000f46 <HAL_UART_MspInit+0xa2>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000ed4:	2301      	movs	r3, #1
 8000ed6:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000edc:	f107 0318 	add.w	r3, r7, #24
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f001 fe2d 	bl	8002b40 <HAL_RCCEx_PeriphCLKConfig>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d001      	beq.n	8000ef0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000eec:	f7ff fc83 	bl	80007f6 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000ef0:	4b36      	ldr	r3, [pc, #216]	@ (8000fcc <HAL_UART_MspInit+0x128>)
 8000ef2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ef4:	4a35      	ldr	r2, [pc, #212]	@ (8000fcc <HAL_UART_MspInit+0x128>)
 8000ef6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000efa:	6613      	str	r3, [r2, #96]	@ 0x60
 8000efc:	4b33      	ldr	r3, [pc, #204]	@ (8000fcc <HAL_UART_MspInit+0x128>)
 8000efe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f00:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f04:	617b      	str	r3, [r7, #20]
 8000f06:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f08:	4b30      	ldr	r3, [pc, #192]	@ (8000fcc <HAL_UART_MspInit+0x128>)
 8000f0a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f0c:	4a2f      	ldr	r2, [pc, #188]	@ (8000fcc <HAL_UART_MspInit+0x128>)
 8000f0e:	f043 0301 	orr.w	r3, r3, #1
 8000f12:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f14:	4b2d      	ldr	r3, [pc, #180]	@ (8000fcc <HAL_UART_MspInit+0x128>)
 8000f16:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f18:	f003 0301 	and.w	r3, r3, #1
 8000f1c:	613b      	str	r3, [r7, #16]
 8000f1e:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000f20:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000f24:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f26:	2302      	movs	r3, #2
 8000f28:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000f32:	2307      	movs	r3, #7
 8000f34:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f36:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f40:	f000 f9c6 	bl	80012d0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000f44:	e03b      	b.n	8000fbe <HAL_UART_MspInit+0x11a>
  else if(uartHandle->Instance==USART2)
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	4a21      	ldr	r2, [pc, #132]	@ (8000fd0 <HAL_UART_MspInit+0x12c>)
 8000f4c:	4293      	cmp	r3, r2
 8000f4e:	d136      	bne.n	8000fbe <HAL_UART_MspInit+0x11a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000f50:	2302      	movs	r3, #2
 8000f52:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000f54:	2300      	movs	r3, #0
 8000f56:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f58:	f107 0318 	add.w	r3, r7, #24
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f001 fdef 	bl	8002b40 <HAL_RCCEx_PeriphCLKConfig>
 8000f62:	4603      	mov	r3, r0
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d001      	beq.n	8000f6c <HAL_UART_MspInit+0xc8>
      Error_Handler();
 8000f68:	f7ff fc45 	bl	80007f6 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f6c:	4b17      	ldr	r3, [pc, #92]	@ (8000fcc <HAL_UART_MspInit+0x128>)
 8000f6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f70:	4a16      	ldr	r2, [pc, #88]	@ (8000fcc <HAL_UART_MspInit+0x128>)
 8000f72:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f76:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f78:	4b14      	ldr	r3, [pc, #80]	@ (8000fcc <HAL_UART_MspInit+0x128>)
 8000f7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f80:	60fb      	str	r3, [r7, #12]
 8000f82:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f84:	4b11      	ldr	r3, [pc, #68]	@ (8000fcc <HAL_UART_MspInit+0x128>)
 8000f86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f88:	4a10      	ldr	r2, [pc, #64]	@ (8000fcc <HAL_UART_MspInit+0x128>)
 8000f8a:	f043 0301 	orr.w	r3, r3, #1
 8000f8e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f90:	4b0e      	ldr	r3, [pc, #56]	@ (8000fcc <HAL_UART_MspInit+0x128>)
 8000f92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f94:	f003 0301 	and.w	r3, r3, #1
 8000f98:	60bb      	str	r3, [r7, #8]
 8000f9a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8000f9c:	230c      	movs	r3, #12
 8000f9e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa0:	2302      	movs	r3, #2
 8000fa2:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000fac:	2307      	movs	r3, #7
 8000fae:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fb0:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fba:	f000 f989 	bl	80012d0 <HAL_GPIO_Init>
}
 8000fbe:	bf00      	nop
 8000fc0:	3770      	adds	r7, #112	@ 0x70
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	40013800 	.word	0x40013800
 8000fcc:	40021000 	.word	0x40021000
 8000fd0:	40004400 	.word	0x40004400

08000fd4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000fd4:	480d      	ldr	r0, [pc, #52]	@ (800100c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000fd6:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000fd8:	f7ff fc68 	bl	80008ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fdc:	480c      	ldr	r0, [pc, #48]	@ (8001010 <LoopForever+0x6>)
  ldr r1, =_edata
 8000fde:	490d      	ldr	r1, [pc, #52]	@ (8001014 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000fe0:	4a0d      	ldr	r2, [pc, #52]	@ (8001018 <LoopForever+0xe>)
  movs r3, #0
 8000fe2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000fe4:	e002      	b.n	8000fec <LoopCopyDataInit>

08000fe6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fe6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fe8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fea:	3304      	adds	r3, #4

08000fec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ff0:	d3f9      	bcc.n	8000fe6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ff2:	4a0a      	ldr	r2, [pc, #40]	@ (800101c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ff4:	4c0a      	ldr	r4, [pc, #40]	@ (8001020 <LoopForever+0x16>)
  movs r3, #0
 8000ff6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ff8:	e001      	b.n	8000ffe <LoopFillZerobss>

08000ffa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ffa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ffc:	3204      	adds	r2, #4

08000ffe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ffe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001000:	d3fb      	bcc.n	8000ffa <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8001002:	f003 fd99 	bl	8004b38 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001006:	f7ff fb75 	bl	80006f4 <main>

0800100a <LoopForever>:

LoopForever:
    b LoopForever
 800100a:	e7fe      	b.n	800100a <LoopForever>
  ldr   r0, =_estack
 800100c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001010:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001014:	20000040 	.word	0x20000040
  ldr r2, =_sidata
 8001018:	08004be8 	.word	0x08004be8
  ldr r2, =_sbss
 800101c:	20000040 	.word	0x20000040
  ldr r4, =_ebss
 8001020:	200002e0 	.word	0x200002e0

08001024 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001024:	e7fe      	b.n	8001024 <ADC1_2_IRQHandler>

08001026 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001026:	b580      	push	{r7, lr}
 8001028:	b082      	sub	sp, #8
 800102a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800102c:	2300      	movs	r3, #0
 800102e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001030:	2003      	movs	r0, #3
 8001032:	f000 f91b 	bl	800126c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001036:	2000      	movs	r0, #0
 8001038:	f000 f80e 	bl	8001058 <HAL_InitTick>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d002      	beq.n	8001048 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001042:	2301      	movs	r3, #1
 8001044:	71fb      	strb	r3, [r7, #7]
 8001046:	e001      	b.n	800104c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001048:	f7ff fbdc 	bl	8000804 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800104c:	79fb      	ldrb	r3, [r7, #7]

}
 800104e:	4618      	mov	r0, r3
 8001050:	3708      	adds	r7, #8
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
	...

08001058 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b084      	sub	sp, #16
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001060:	2300      	movs	r3, #0
 8001062:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001064:	4b16      	ldr	r3, [pc, #88]	@ (80010c0 <HAL_InitTick+0x68>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d022      	beq.n	80010b2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800106c:	4b15      	ldr	r3, [pc, #84]	@ (80010c4 <HAL_InitTick+0x6c>)
 800106e:	681a      	ldr	r2, [r3, #0]
 8001070:	4b13      	ldr	r3, [pc, #76]	@ (80010c0 <HAL_InitTick+0x68>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001078:	fbb1 f3f3 	udiv	r3, r1, r3
 800107c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001080:	4618      	mov	r0, r3
 8001082:	f000 f918 	bl	80012b6 <HAL_SYSTICK_Config>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d10f      	bne.n	80010ac <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	2b0f      	cmp	r3, #15
 8001090:	d809      	bhi.n	80010a6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001092:	2200      	movs	r2, #0
 8001094:	6879      	ldr	r1, [r7, #4]
 8001096:	f04f 30ff 	mov.w	r0, #4294967295
 800109a:	f000 f8f2 	bl	8001282 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800109e:	4a0a      	ldr	r2, [pc, #40]	@ (80010c8 <HAL_InitTick+0x70>)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	6013      	str	r3, [r2, #0]
 80010a4:	e007      	b.n	80010b6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80010a6:	2301      	movs	r3, #1
 80010a8:	73fb      	strb	r3, [r7, #15]
 80010aa:	e004      	b.n	80010b6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80010ac:	2301      	movs	r3, #1
 80010ae:	73fb      	strb	r3, [r7, #15]
 80010b0:	e001      	b.n	80010b6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80010b2:	2301      	movs	r3, #1
 80010b4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80010b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80010b8:	4618      	mov	r0, r3
 80010ba:	3710      	adds	r7, #16
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	2000003c 	.word	0x2000003c
 80010c4:	20000034 	.word	0x20000034
 80010c8:	20000038 	.word	0x20000038

080010cc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010d0:	4b05      	ldr	r3, [pc, #20]	@ (80010e8 <HAL_IncTick+0x1c>)
 80010d2:	681a      	ldr	r2, [r3, #0]
 80010d4:	4b05      	ldr	r3, [pc, #20]	@ (80010ec <HAL_IncTick+0x20>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4413      	add	r3, r2
 80010da:	4a03      	ldr	r2, [pc, #12]	@ (80010e8 <HAL_IncTick+0x1c>)
 80010dc:	6013      	str	r3, [r2, #0]
}
 80010de:	bf00      	nop
 80010e0:	46bd      	mov	sp, r7
 80010e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e6:	4770      	bx	lr
 80010e8:	200002c8 	.word	0x200002c8
 80010ec:	2000003c 	.word	0x2000003c

080010f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
  return uwTick;
 80010f4:	4b03      	ldr	r3, [pc, #12]	@ (8001104 <HAL_GetTick+0x14>)
 80010f6:	681b      	ldr	r3, [r3, #0]
}
 80010f8:	4618      	mov	r0, r3
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr
 8001102:	bf00      	nop
 8001104:	200002c8 	.word	0x200002c8

08001108 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001108:	b480      	push	{r7}
 800110a:	b085      	sub	sp, #20
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	f003 0307 	and.w	r3, r3, #7
 8001116:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001118:	4b0c      	ldr	r3, [pc, #48]	@ (800114c <__NVIC_SetPriorityGrouping+0x44>)
 800111a:	68db      	ldr	r3, [r3, #12]
 800111c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800111e:	68ba      	ldr	r2, [r7, #8]
 8001120:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001124:	4013      	ands	r3, r2
 8001126:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800112c:	68bb      	ldr	r3, [r7, #8]
 800112e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001130:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001134:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001138:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800113a:	4a04      	ldr	r2, [pc, #16]	@ (800114c <__NVIC_SetPriorityGrouping+0x44>)
 800113c:	68bb      	ldr	r3, [r7, #8]
 800113e:	60d3      	str	r3, [r2, #12]
}
 8001140:	bf00      	nop
 8001142:	3714      	adds	r7, #20
 8001144:	46bd      	mov	sp, r7
 8001146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114a:	4770      	bx	lr
 800114c:	e000ed00 	.word	0xe000ed00

08001150 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001154:	4b04      	ldr	r3, [pc, #16]	@ (8001168 <__NVIC_GetPriorityGrouping+0x18>)
 8001156:	68db      	ldr	r3, [r3, #12]
 8001158:	0a1b      	lsrs	r3, r3, #8
 800115a:	f003 0307 	and.w	r3, r3, #7
}
 800115e:	4618      	mov	r0, r3
 8001160:	46bd      	mov	sp, r7
 8001162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001166:	4770      	bx	lr
 8001168:	e000ed00 	.word	0xe000ed00

0800116c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800116c:	b480      	push	{r7}
 800116e:	b083      	sub	sp, #12
 8001170:	af00      	add	r7, sp, #0
 8001172:	4603      	mov	r3, r0
 8001174:	6039      	str	r1, [r7, #0]
 8001176:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001178:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800117c:	2b00      	cmp	r3, #0
 800117e:	db0a      	blt.n	8001196 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	b2da      	uxtb	r2, r3
 8001184:	490c      	ldr	r1, [pc, #48]	@ (80011b8 <__NVIC_SetPriority+0x4c>)
 8001186:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800118a:	0112      	lsls	r2, r2, #4
 800118c:	b2d2      	uxtb	r2, r2
 800118e:	440b      	add	r3, r1
 8001190:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001194:	e00a      	b.n	80011ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	b2da      	uxtb	r2, r3
 800119a:	4908      	ldr	r1, [pc, #32]	@ (80011bc <__NVIC_SetPriority+0x50>)
 800119c:	79fb      	ldrb	r3, [r7, #7]
 800119e:	f003 030f 	and.w	r3, r3, #15
 80011a2:	3b04      	subs	r3, #4
 80011a4:	0112      	lsls	r2, r2, #4
 80011a6:	b2d2      	uxtb	r2, r2
 80011a8:	440b      	add	r3, r1
 80011aa:	761a      	strb	r2, [r3, #24]
}
 80011ac:	bf00      	nop
 80011ae:	370c      	adds	r7, #12
 80011b0:	46bd      	mov	sp, r7
 80011b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b6:	4770      	bx	lr
 80011b8:	e000e100 	.word	0xe000e100
 80011bc:	e000ed00 	.word	0xe000ed00

080011c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b089      	sub	sp, #36	@ 0x24
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	60f8      	str	r0, [r7, #12]
 80011c8:	60b9      	str	r1, [r7, #8]
 80011ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	f003 0307 	and.w	r3, r3, #7
 80011d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011d4:	69fb      	ldr	r3, [r7, #28]
 80011d6:	f1c3 0307 	rsb	r3, r3, #7
 80011da:	2b04      	cmp	r3, #4
 80011dc:	bf28      	it	cs
 80011de:	2304      	movcs	r3, #4
 80011e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011e2:	69fb      	ldr	r3, [r7, #28]
 80011e4:	3304      	adds	r3, #4
 80011e6:	2b06      	cmp	r3, #6
 80011e8:	d902      	bls.n	80011f0 <NVIC_EncodePriority+0x30>
 80011ea:	69fb      	ldr	r3, [r7, #28]
 80011ec:	3b03      	subs	r3, #3
 80011ee:	e000      	b.n	80011f2 <NVIC_EncodePriority+0x32>
 80011f0:	2300      	movs	r3, #0
 80011f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011f4:	f04f 32ff 	mov.w	r2, #4294967295
 80011f8:	69bb      	ldr	r3, [r7, #24]
 80011fa:	fa02 f303 	lsl.w	r3, r2, r3
 80011fe:	43da      	mvns	r2, r3
 8001200:	68bb      	ldr	r3, [r7, #8]
 8001202:	401a      	ands	r2, r3
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001208:	f04f 31ff 	mov.w	r1, #4294967295
 800120c:	697b      	ldr	r3, [r7, #20]
 800120e:	fa01 f303 	lsl.w	r3, r1, r3
 8001212:	43d9      	mvns	r1, r3
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001218:	4313      	orrs	r3, r2
         );
}
 800121a:	4618      	mov	r0, r3
 800121c:	3724      	adds	r7, #36	@ 0x24
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr
	...

08001228 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b082      	sub	sp, #8
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	3b01      	subs	r3, #1
 8001234:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001238:	d301      	bcc.n	800123e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800123a:	2301      	movs	r3, #1
 800123c:	e00f      	b.n	800125e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800123e:	4a0a      	ldr	r2, [pc, #40]	@ (8001268 <SysTick_Config+0x40>)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	3b01      	subs	r3, #1
 8001244:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001246:	210f      	movs	r1, #15
 8001248:	f04f 30ff 	mov.w	r0, #4294967295
 800124c:	f7ff ff8e 	bl	800116c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001250:	4b05      	ldr	r3, [pc, #20]	@ (8001268 <SysTick_Config+0x40>)
 8001252:	2200      	movs	r2, #0
 8001254:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001256:	4b04      	ldr	r3, [pc, #16]	@ (8001268 <SysTick_Config+0x40>)
 8001258:	2207      	movs	r2, #7
 800125a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800125c:	2300      	movs	r3, #0
}
 800125e:	4618      	mov	r0, r3
 8001260:	3708      	adds	r7, #8
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	e000e010 	.word	0xe000e010

0800126c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001274:	6878      	ldr	r0, [r7, #4]
 8001276:	f7ff ff47 	bl	8001108 <__NVIC_SetPriorityGrouping>
}
 800127a:	bf00      	nop
 800127c:	3708      	adds	r7, #8
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}

08001282 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001282:	b580      	push	{r7, lr}
 8001284:	b086      	sub	sp, #24
 8001286:	af00      	add	r7, sp, #0
 8001288:	4603      	mov	r3, r0
 800128a:	60b9      	str	r1, [r7, #8]
 800128c:	607a      	str	r2, [r7, #4]
 800128e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001290:	f7ff ff5e 	bl	8001150 <__NVIC_GetPriorityGrouping>
 8001294:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001296:	687a      	ldr	r2, [r7, #4]
 8001298:	68b9      	ldr	r1, [r7, #8]
 800129a:	6978      	ldr	r0, [r7, #20]
 800129c:	f7ff ff90 	bl	80011c0 <NVIC_EncodePriority>
 80012a0:	4602      	mov	r2, r0
 80012a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012a6:	4611      	mov	r1, r2
 80012a8:	4618      	mov	r0, r3
 80012aa:	f7ff ff5f 	bl	800116c <__NVIC_SetPriority>
}
 80012ae:	bf00      	nop
 80012b0:	3718      	adds	r7, #24
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}

080012b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012b6:	b580      	push	{r7, lr}
 80012b8:	b082      	sub	sp, #8
 80012ba:	af00      	add	r7, sp, #0
 80012bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012be:	6878      	ldr	r0, [r7, #4]
 80012c0:	f7ff ffb2 	bl	8001228 <SysTick_Config>
 80012c4:	4603      	mov	r3, r0
}
 80012c6:	4618      	mov	r0, r3
 80012c8:	3708      	adds	r7, #8
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
	...

080012d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b087      	sub	sp, #28
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
 80012d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80012da:	2300      	movs	r3, #0
 80012dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80012de:	e15a      	b.n	8001596 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	681a      	ldr	r2, [r3, #0]
 80012e4:	2101      	movs	r1, #1
 80012e6:	697b      	ldr	r3, [r7, #20]
 80012e8:	fa01 f303 	lsl.w	r3, r1, r3
 80012ec:	4013      	ands	r3, r2
 80012ee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	f000 814c 	beq.w	8001590 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	f003 0303 	and.w	r3, r3, #3
 8001300:	2b01      	cmp	r3, #1
 8001302:	d005      	beq.n	8001310 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800130c:	2b02      	cmp	r3, #2
 800130e:	d130      	bne.n	8001372 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	689b      	ldr	r3, [r3, #8]
 8001314:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001316:	697b      	ldr	r3, [r7, #20]
 8001318:	005b      	lsls	r3, r3, #1
 800131a:	2203      	movs	r2, #3
 800131c:	fa02 f303 	lsl.w	r3, r2, r3
 8001320:	43db      	mvns	r3, r3
 8001322:	693a      	ldr	r2, [r7, #16]
 8001324:	4013      	ands	r3, r2
 8001326:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	68da      	ldr	r2, [r3, #12]
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	005b      	lsls	r3, r3, #1
 8001330:	fa02 f303 	lsl.w	r3, r2, r3
 8001334:	693a      	ldr	r2, [r7, #16]
 8001336:	4313      	orrs	r3, r2
 8001338:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	693a      	ldr	r2, [r7, #16]
 800133e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001346:	2201      	movs	r2, #1
 8001348:	697b      	ldr	r3, [r7, #20]
 800134a:	fa02 f303 	lsl.w	r3, r2, r3
 800134e:	43db      	mvns	r3, r3
 8001350:	693a      	ldr	r2, [r7, #16]
 8001352:	4013      	ands	r3, r2
 8001354:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	091b      	lsrs	r3, r3, #4
 800135c:	f003 0201 	and.w	r2, r3, #1
 8001360:	697b      	ldr	r3, [r7, #20]
 8001362:	fa02 f303 	lsl.w	r3, r2, r3
 8001366:	693a      	ldr	r2, [r7, #16]
 8001368:	4313      	orrs	r3, r2
 800136a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	693a      	ldr	r2, [r7, #16]
 8001370:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	f003 0303 	and.w	r3, r3, #3
 800137a:	2b03      	cmp	r3, #3
 800137c:	d017      	beq.n	80013ae <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	68db      	ldr	r3, [r3, #12]
 8001382:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001384:	697b      	ldr	r3, [r7, #20]
 8001386:	005b      	lsls	r3, r3, #1
 8001388:	2203      	movs	r2, #3
 800138a:	fa02 f303 	lsl.w	r3, r2, r3
 800138e:	43db      	mvns	r3, r3
 8001390:	693a      	ldr	r2, [r7, #16]
 8001392:	4013      	ands	r3, r2
 8001394:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	689a      	ldr	r2, [r3, #8]
 800139a:	697b      	ldr	r3, [r7, #20]
 800139c:	005b      	lsls	r3, r3, #1
 800139e:	fa02 f303 	lsl.w	r3, r2, r3
 80013a2:	693a      	ldr	r2, [r7, #16]
 80013a4:	4313      	orrs	r3, r2
 80013a6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	693a      	ldr	r2, [r7, #16]
 80013ac:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	f003 0303 	and.w	r3, r3, #3
 80013b6:	2b02      	cmp	r3, #2
 80013b8:	d123      	bne.n	8001402 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80013ba:	697b      	ldr	r3, [r7, #20]
 80013bc:	08da      	lsrs	r2, r3, #3
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	3208      	adds	r2, #8
 80013c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013c6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	f003 0307 	and.w	r3, r3, #7
 80013ce:	009b      	lsls	r3, r3, #2
 80013d0:	220f      	movs	r2, #15
 80013d2:	fa02 f303 	lsl.w	r3, r2, r3
 80013d6:	43db      	mvns	r3, r3
 80013d8:	693a      	ldr	r2, [r7, #16]
 80013da:	4013      	ands	r3, r2
 80013dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	691a      	ldr	r2, [r3, #16]
 80013e2:	697b      	ldr	r3, [r7, #20]
 80013e4:	f003 0307 	and.w	r3, r3, #7
 80013e8:	009b      	lsls	r3, r3, #2
 80013ea:	fa02 f303 	lsl.w	r3, r2, r3
 80013ee:	693a      	ldr	r2, [r7, #16]
 80013f0:	4313      	orrs	r3, r2
 80013f2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80013f4:	697b      	ldr	r3, [r7, #20]
 80013f6:	08da      	lsrs	r2, r3, #3
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	3208      	adds	r2, #8
 80013fc:	6939      	ldr	r1, [r7, #16]
 80013fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001408:	697b      	ldr	r3, [r7, #20]
 800140a:	005b      	lsls	r3, r3, #1
 800140c:	2203      	movs	r2, #3
 800140e:	fa02 f303 	lsl.w	r3, r2, r3
 8001412:	43db      	mvns	r3, r3
 8001414:	693a      	ldr	r2, [r7, #16]
 8001416:	4013      	ands	r3, r2
 8001418:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	f003 0203 	and.w	r2, r3, #3
 8001422:	697b      	ldr	r3, [r7, #20]
 8001424:	005b      	lsls	r3, r3, #1
 8001426:	fa02 f303 	lsl.w	r3, r2, r3
 800142a:	693a      	ldr	r2, [r7, #16]
 800142c:	4313      	orrs	r3, r2
 800142e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	693a      	ldr	r2, [r7, #16]
 8001434:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800143e:	2b00      	cmp	r3, #0
 8001440:	f000 80a6 	beq.w	8001590 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001444:	4b5b      	ldr	r3, [pc, #364]	@ (80015b4 <HAL_GPIO_Init+0x2e4>)
 8001446:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001448:	4a5a      	ldr	r2, [pc, #360]	@ (80015b4 <HAL_GPIO_Init+0x2e4>)
 800144a:	f043 0301 	orr.w	r3, r3, #1
 800144e:	6613      	str	r3, [r2, #96]	@ 0x60
 8001450:	4b58      	ldr	r3, [pc, #352]	@ (80015b4 <HAL_GPIO_Init+0x2e4>)
 8001452:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001454:	f003 0301 	and.w	r3, r3, #1
 8001458:	60bb      	str	r3, [r7, #8]
 800145a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800145c:	4a56      	ldr	r2, [pc, #344]	@ (80015b8 <HAL_GPIO_Init+0x2e8>)
 800145e:	697b      	ldr	r3, [r7, #20]
 8001460:	089b      	lsrs	r3, r3, #2
 8001462:	3302      	adds	r3, #2
 8001464:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001468:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800146a:	697b      	ldr	r3, [r7, #20]
 800146c:	f003 0303 	and.w	r3, r3, #3
 8001470:	009b      	lsls	r3, r3, #2
 8001472:	220f      	movs	r2, #15
 8001474:	fa02 f303 	lsl.w	r3, r2, r3
 8001478:	43db      	mvns	r3, r3
 800147a:	693a      	ldr	r2, [r7, #16]
 800147c:	4013      	ands	r3, r2
 800147e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001486:	d01f      	beq.n	80014c8 <HAL_GPIO_Init+0x1f8>
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	4a4c      	ldr	r2, [pc, #304]	@ (80015bc <HAL_GPIO_Init+0x2ec>)
 800148c:	4293      	cmp	r3, r2
 800148e:	d019      	beq.n	80014c4 <HAL_GPIO_Init+0x1f4>
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	4a4b      	ldr	r2, [pc, #300]	@ (80015c0 <HAL_GPIO_Init+0x2f0>)
 8001494:	4293      	cmp	r3, r2
 8001496:	d013      	beq.n	80014c0 <HAL_GPIO_Init+0x1f0>
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	4a4a      	ldr	r2, [pc, #296]	@ (80015c4 <HAL_GPIO_Init+0x2f4>)
 800149c:	4293      	cmp	r3, r2
 800149e:	d00d      	beq.n	80014bc <HAL_GPIO_Init+0x1ec>
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	4a49      	ldr	r2, [pc, #292]	@ (80015c8 <HAL_GPIO_Init+0x2f8>)
 80014a4:	4293      	cmp	r3, r2
 80014a6:	d007      	beq.n	80014b8 <HAL_GPIO_Init+0x1e8>
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	4a48      	ldr	r2, [pc, #288]	@ (80015cc <HAL_GPIO_Init+0x2fc>)
 80014ac:	4293      	cmp	r3, r2
 80014ae:	d101      	bne.n	80014b4 <HAL_GPIO_Init+0x1e4>
 80014b0:	2305      	movs	r3, #5
 80014b2:	e00a      	b.n	80014ca <HAL_GPIO_Init+0x1fa>
 80014b4:	2306      	movs	r3, #6
 80014b6:	e008      	b.n	80014ca <HAL_GPIO_Init+0x1fa>
 80014b8:	2304      	movs	r3, #4
 80014ba:	e006      	b.n	80014ca <HAL_GPIO_Init+0x1fa>
 80014bc:	2303      	movs	r3, #3
 80014be:	e004      	b.n	80014ca <HAL_GPIO_Init+0x1fa>
 80014c0:	2302      	movs	r3, #2
 80014c2:	e002      	b.n	80014ca <HAL_GPIO_Init+0x1fa>
 80014c4:	2301      	movs	r3, #1
 80014c6:	e000      	b.n	80014ca <HAL_GPIO_Init+0x1fa>
 80014c8:	2300      	movs	r3, #0
 80014ca:	697a      	ldr	r2, [r7, #20]
 80014cc:	f002 0203 	and.w	r2, r2, #3
 80014d0:	0092      	lsls	r2, r2, #2
 80014d2:	4093      	lsls	r3, r2
 80014d4:	693a      	ldr	r2, [r7, #16]
 80014d6:	4313      	orrs	r3, r2
 80014d8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80014da:	4937      	ldr	r1, [pc, #220]	@ (80015b8 <HAL_GPIO_Init+0x2e8>)
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	089b      	lsrs	r3, r3, #2
 80014e0:	3302      	adds	r3, #2
 80014e2:	693a      	ldr	r2, [r7, #16]
 80014e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80014e8:	4b39      	ldr	r3, [pc, #228]	@ (80015d0 <HAL_GPIO_Init+0x300>)
 80014ea:	689b      	ldr	r3, [r3, #8]
 80014ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	43db      	mvns	r3, r3
 80014f2:	693a      	ldr	r2, [r7, #16]
 80014f4:	4013      	ands	r3, r2
 80014f6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001500:	2b00      	cmp	r3, #0
 8001502:	d003      	beq.n	800150c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001504:	693a      	ldr	r2, [r7, #16]
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	4313      	orrs	r3, r2
 800150a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800150c:	4a30      	ldr	r2, [pc, #192]	@ (80015d0 <HAL_GPIO_Init+0x300>)
 800150e:	693b      	ldr	r3, [r7, #16]
 8001510:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001512:	4b2f      	ldr	r3, [pc, #188]	@ (80015d0 <HAL_GPIO_Init+0x300>)
 8001514:	68db      	ldr	r3, [r3, #12]
 8001516:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	43db      	mvns	r3, r3
 800151c:	693a      	ldr	r2, [r7, #16]
 800151e:	4013      	ands	r3, r2
 8001520:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800152a:	2b00      	cmp	r3, #0
 800152c:	d003      	beq.n	8001536 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800152e:	693a      	ldr	r2, [r7, #16]
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	4313      	orrs	r3, r2
 8001534:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001536:	4a26      	ldr	r2, [pc, #152]	@ (80015d0 <HAL_GPIO_Init+0x300>)
 8001538:	693b      	ldr	r3, [r7, #16]
 800153a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800153c:	4b24      	ldr	r3, [pc, #144]	@ (80015d0 <HAL_GPIO_Init+0x300>)
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	43db      	mvns	r3, r3
 8001546:	693a      	ldr	r2, [r7, #16]
 8001548:	4013      	ands	r3, r2
 800154a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001554:	2b00      	cmp	r3, #0
 8001556:	d003      	beq.n	8001560 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001558:	693a      	ldr	r2, [r7, #16]
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	4313      	orrs	r3, r2
 800155e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001560:	4a1b      	ldr	r2, [pc, #108]	@ (80015d0 <HAL_GPIO_Init+0x300>)
 8001562:	693b      	ldr	r3, [r7, #16]
 8001564:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001566:	4b1a      	ldr	r3, [pc, #104]	@ (80015d0 <HAL_GPIO_Init+0x300>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	43db      	mvns	r3, r3
 8001570:	693a      	ldr	r2, [r7, #16]
 8001572:	4013      	ands	r3, r2
 8001574:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800157e:	2b00      	cmp	r3, #0
 8001580:	d003      	beq.n	800158a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001582:	693a      	ldr	r2, [r7, #16]
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	4313      	orrs	r3, r2
 8001588:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800158a:	4a11      	ldr	r2, [pc, #68]	@ (80015d0 <HAL_GPIO_Init+0x300>)
 800158c:	693b      	ldr	r3, [r7, #16]
 800158e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001590:	697b      	ldr	r3, [r7, #20]
 8001592:	3301      	adds	r3, #1
 8001594:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	681a      	ldr	r2, [r3, #0]
 800159a:	697b      	ldr	r3, [r7, #20]
 800159c:	fa22 f303 	lsr.w	r3, r2, r3
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	f47f ae9d 	bne.w	80012e0 <HAL_GPIO_Init+0x10>
  }
}
 80015a6:	bf00      	nop
 80015a8:	bf00      	nop
 80015aa:	371c      	adds	r7, #28
 80015ac:	46bd      	mov	sp, r7
 80015ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b2:	4770      	bx	lr
 80015b4:	40021000 	.word	0x40021000
 80015b8:	40010000 	.word	0x40010000
 80015bc:	48000400 	.word	0x48000400
 80015c0:	48000800 	.word	0x48000800
 80015c4:	48000c00 	.word	0x48000c00
 80015c8:	48001000 	.word	0x48001000
 80015cc:	48001400 	.word	0x48001400
 80015d0:	40010400 	.word	0x40010400

080015d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b083      	sub	sp, #12
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
 80015dc:	460b      	mov	r3, r1
 80015de:	807b      	strh	r3, [r7, #2]
 80015e0:	4613      	mov	r3, r2
 80015e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80015e4:	787b      	ldrb	r3, [r7, #1]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d003      	beq.n	80015f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80015ea:	887a      	ldrh	r2, [r7, #2]
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80015f0:	e002      	b.n	80015f8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80015f2:	887a      	ldrh	r2, [r7, #2]
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80015f8:	bf00      	nop
 80015fa:	370c      	adds	r7, #12
 80015fc:	46bd      	mov	sp, r7
 80015fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001602:	4770      	bx	lr

08001604 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b082      	sub	sp, #8
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d101      	bne.n	8001616 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001612:	2301      	movs	r3, #1
 8001614:	e08d      	b.n	8001732 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800161c:	b2db      	uxtb	r3, r3
 800161e:	2b00      	cmp	r3, #0
 8001620:	d106      	bne.n	8001630 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	2200      	movs	r2, #0
 8001626:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800162a:	6878      	ldr	r0, [r7, #4]
 800162c:	f7fe ffec 	bl	8000608 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2224      	movs	r2, #36	@ 0x24
 8001634:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	681a      	ldr	r2, [r3, #0]
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f022 0201 	bic.w	r2, r2, #1
 8001646:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	685a      	ldr	r2, [r3, #4]
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001654:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	689a      	ldr	r2, [r3, #8]
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001664:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	68db      	ldr	r3, [r3, #12]
 800166a:	2b01      	cmp	r3, #1
 800166c:	d107      	bne.n	800167e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	689a      	ldr	r2, [r3, #8]
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800167a:	609a      	str	r2, [r3, #8]
 800167c:	e006      	b.n	800168c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	689a      	ldr	r2, [r3, #8]
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800168a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	68db      	ldr	r3, [r3, #12]
 8001690:	2b02      	cmp	r3, #2
 8001692:	d108      	bne.n	80016a6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	685a      	ldr	r2, [r3, #4]
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80016a2:	605a      	str	r2, [r3, #4]
 80016a4:	e007      	b.n	80016b6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	685a      	ldr	r2, [r3, #4]
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80016b4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	687a      	ldr	r2, [r7, #4]
 80016be:	6812      	ldr	r2, [r2, #0]
 80016c0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80016c4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80016c8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	68da      	ldr	r2, [r3, #12]
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80016d8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	691a      	ldr	r2, [r3, #16]
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	695b      	ldr	r3, [r3, #20]
 80016e2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	699b      	ldr	r3, [r3, #24]
 80016ea:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	430a      	orrs	r2, r1
 80016f2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	69d9      	ldr	r1, [r3, #28]
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6a1a      	ldr	r2, [r3, #32]
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	430a      	orrs	r2, r1
 8001702:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	681a      	ldr	r2, [r3, #0]
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f042 0201 	orr.w	r2, r2, #1
 8001712:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	2200      	movs	r2, #0
 8001718:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2220      	movs	r2, #32
 800171e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	2200      	movs	r2, #0
 8001726:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2200      	movs	r2, #0
 800172c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001730:	2300      	movs	r3, #0
}
 8001732:	4618      	mov	r0, r3
 8001734:	3708      	adds	r7, #8
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}
	...

0800173c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b088      	sub	sp, #32
 8001740:	af02      	add	r7, sp, #8
 8001742:	60f8      	str	r0, [r7, #12]
 8001744:	4608      	mov	r0, r1
 8001746:	4611      	mov	r1, r2
 8001748:	461a      	mov	r2, r3
 800174a:	4603      	mov	r3, r0
 800174c:	817b      	strh	r3, [r7, #10]
 800174e:	460b      	mov	r3, r1
 8001750:	813b      	strh	r3, [r7, #8]
 8001752:	4613      	mov	r3, r2
 8001754:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800175c:	b2db      	uxtb	r3, r3
 800175e:	2b20      	cmp	r3, #32
 8001760:	f040 80fd 	bne.w	800195e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8001764:	6a3b      	ldr	r3, [r7, #32]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d002      	beq.n	8001770 <HAL_I2C_Mem_Read+0x34>
 800176a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800176c:	2b00      	cmp	r3, #0
 800176e:	d105      	bne.n	800177c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001776:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8001778:	2301      	movs	r3, #1
 800177a:	e0f1      	b.n	8001960 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001782:	2b01      	cmp	r3, #1
 8001784:	d101      	bne.n	800178a <HAL_I2C_Mem_Read+0x4e>
 8001786:	2302      	movs	r3, #2
 8001788:	e0ea      	b.n	8001960 <HAL_I2C_Mem_Read+0x224>
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	2201      	movs	r2, #1
 800178e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001792:	f7ff fcad 	bl	80010f0 <HAL_GetTick>
 8001796:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	9300      	str	r3, [sp, #0]
 800179c:	2319      	movs	r3, #25
 800179e:	2201      	movs	r2, #1
 80017a0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80017a4:	68f8      	ldr	r0, [r7, #12]
 80017a6:	f000 f95b 	bl	8001a60 <I2C_WaitOnFlagUntilTimeout>
 80017aa:	4603      	mov	r3, r0
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d001      	beq.n	80017b4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80017b0:	2301      	movs	r3, #1
 80017b2:	e0d5      	b.n	8001960 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	2222      	movs	r2, #34	@ 0x22
 80017b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	2240      	movs	r2, #64	@ 0x40
 80017c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	2200      	movs	r2, #0
 80017c8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	6a3a      	ldr	r2, [r7, #32]
 80017ce:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80017d4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	2200      	movs	r2, #0
 80017da:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80017dc:	88f8      	ldrh	r0, [r7, #6]
 80017de:	893a      	ldrh	r2, [r7, #8]
 80017e0:	8979      	ldrh	r1, [r7, #10]
 80017e2:	697b      	ldr	r3, [r7, #20]
 80017e4:	9301      	str	r3, [sp, #4]
 80017e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80017e8:	9300      	str	r3, [sp, #0]
 80017ea:	4603      	mov	r3, r0
 80017ec:	68f8      	ldr	r0, [r7, #12]
 80017ee:	f000 f8bf 	bl	8001970 <I2C_RequestMemoryRead>
 80017f2:	4603      	mov	r3, r0
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d005      	beq.n	8001804 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	2200      	movs	r2, #0
 80017fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8001800:	2301      	movs	r3, #1
 8001802:	e0ad      	b.n	8001960 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001808:	b29b      	uxth	r3, r3
 800180a:	2bff      	cmp	r3, #255	@ 0xff
 800180c:	d90e      	bls.n	800182c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	22ff      	movs	r2, #255	@ 0xff
 8001812:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001818:	b2da      	uxtb	r2, r3
 800181a:	8979      	ldrh	r1, [r7, #10]
 800181c:	4b52      	ldr	r3, [pc, #328]	@ (8001968 <HAL_I2C_Mem_Read+0x22c>)
 800181e:	9300      	str	r3, [sp, #0]
 8001820:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001824:	68f8      	ldr	r0, [r7, #12]
 8001826:	f000 fadf 	bl	8001de8 <I2C_TransferConfig>
 800182a:	e00f      	b.n	800184c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001830:	b29a      	uxth	r2, r3
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800183a:	b2da      	uxtb	r2, r3
 800183c:	8979      	ldrh	r1, [r7, #10]
 800183e:	4b4a      	ldr	r3, [pc, #296]	@ (8001968 <HAL_I2C_Mem_Read+0x22c>)
 8001840:	9300      	str	r3, [sp, #0]
 8001842:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001846:	68f8      	ldr	r0, [r7, #12]
 8001848:	f000 face 	bl	8001de8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800184c:	697b      	ldr	r3, [r7, #20]
 800184e:	9300      	str	r3, [sp, #0]
 8001850:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001852:	2200      	movs	r2, #0
 8001854:	2104      	movs	r1, #4
 8001856:	68f8      	ldr	r0, [r7, #12]
 8001858:	f000 f902 	bl	8001a60 <I2C_WaitOnFlagUntilTimeout>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	d001      	beq.n	8001866 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8001862:	2301      	movs	r3, #1
 8001864:	e07c      	b.n	8001960 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001870:	b2d2      	uxtb	r2, r2
 8001872:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001878:	1c5a      	adds	r2, r3, #1
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001882:	3b01      	subs	r3, #1
 8001884:	b29a      	uxth	r2, r3
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800188e:	b29b      	uxth	r3, r3
 8001890:	3b01      	subs	r3, #1
 8001892:	b29a      	uxth	r2, r3
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800189c:	b29b      	uxth	r3, r3
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d034      	beq.n	800190c <HAL_I2C_Mem_Read+0x1d0>
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d130      	bne.n	800190c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80018aa:	697b      	ldr	r3, [r7, #20]
 80018ac:	9300      	str	r3, [sp, #0]
 80018ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80018b0:	2200      	movs	r2, #0
 80018b2:	2180      	movs	r1, #128	@ 0x80
 80018b4:	68f8      	ldr	r0, [r7, #12]
 80018b6:	f000 f8d3 	bl	8001a60 <I2C_WaitOnFlagUntilTimeout>
 80018ba:	4603      	mov	r3, r0
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d001      	beq.n	80018c4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80018c0:	2301      	movs	r3, #1
 80018c2:	e04d      	b.n	8001960 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80018c8:	b29b      	uxth	r3, r3
 80018ca:	2bff      	cmp	r3, #255	@ 0xff
 80018cc:	d90e      	bls.n	80018ec <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	22ff      	movs	r2, #255	@ 0xff
 80018d2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80018d8:	b2da      	uxtb	r2, r3
 80018da:	8979      	ldrh	r1, [r7, #10]
 80018dc:	2300      	movs	r3, #0
 80018de:	9300      	str	r3, [sp, #0]
 80018e0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80018e4:	68f8      	ldr	r0, [r7, #12]
 80018e6:	f000 fa7f 	bl	8001de8 <I2C_TransferConfig>
 80018ea:	e00f      	b.n	800190c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80018f0:	b29a      	uxth	r2, r3
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80018fa:	b2da      	uxtb	r2, r3
 80018fc:	8979      	ldrh	r1, [r7, #10]
 80018fe:	2300      	movs	r3, #0
 8001900:	9300      	str	r3, [sp, #0]
 8001902:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001906:	68f8      	ldr	r0, [r7, #12]
 8001908:	f000 fa6e 	bl	8001de8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001910:	b29b      	uxth	r3, r3
 8001912:	2b00      	cmp	r3, #0
 8001914:	d19a      	bne.n	800184c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001916:	697a      	ldr	r2, [r7, #20]
 8001918:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800191a:	68f8      	ldr	r0, [r7, #12]
 800191c:	f000 f940 	bl	8001ba0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001920:	4603      	mov	r3, r0
 8001922:	2b00      	cmp	r3, #0
 8001924:	d001      	beq.n	800192a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8001926:	2301      	movs	r3, #1
 8001928:	e01a      	b.n	8001960 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	2220      	movs	r2, #32
 8001930:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	6859      	ldr	r1, [r3, #4]
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	681a      	ldr	r2, [r3, #0]
 800193c:	4b0b      	ldr	r3, [pc, #44]	@ (800196c <HAL_I2C_Mem_Read+0x230>)
 800193e:	400b      	ands	r3, r1
 8001940:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	2220      	movs	r2, #32
 8001946:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	2200      	movs	r2, #0
 800194e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	2200      	movs	r2, #0
 8001956:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800195a:	2300      	movs	r3, #0
 800195c:	e000      	b.n	8001960 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800195e:	2302      	movs	r3, #2
  }
}
 8001960:	4618      	mov	r0, r3
 8001962:	3718      	adds	r7, #24
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}
 8001968:	80002400 	.word	0x80002400
 800196c:	fe00e800 	.word	0xfe00e800

08001970 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b086      	sub	sp, #24
 8001974:	af02      	add	r7, sp, #8
 8001976:	60f8      	str	r0, [r7, #12]
 8001978:	4608      	mov	r0, r1
 800197a:	4611      	mov	r1, r2
 800197c:	461a      	mov	r2, r3
 800197e:	4603      	mov	r3, r0
 8001980:	817b      	strh	r3, [r7, #10]
 8001982:	460b      	mov	r3, r1
 8001984:	813b      	strh	r3, [r7, #8]
 8001986:	4613      	mov	r3, r2
 8001988:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800198a:	88fb      	ldrh	r3, [r7, #6]
 800198c:	b2da      	uxtb	r2, r3
 800198e:	8979      	ldrh	r1, [r7, #10]
 8001990:	4b20      	ldr	r3, [pc, #128]	@ (8001a14 <I2C_RequestMemoryRead+0xa4>)
 8001992:	9300      	str	r3, [sp, #0]
 8001994:	2300      	movs	r3, #0
 8001996:	68f8      	ldr	r0, [r7, #12]
 8001998:	f000 fa26 	bl	8001de8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800199c:	69fa      	ldr	r2, [r7, #28]
 800199e:	69b9      	ldr	r1, [r7, #24]
 80019a0:	68f8      	ldr	r0, [r7, #12]
 80019a2:	f000 f8b6 	bl	8001b12 <I2C_WaitOnTXISFlagUntilTimeout>
 80019a6:	4603      	mov	r3, r0
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d001      	beq.n	80019b0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80019ac:	2301      	movs	r3, #1
 80019ae:	e02c      	b.n	8001a0a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80019b0:	88fb      	ldrh	r3, [r7, #6]
 80019b2:	2b01      	cmp	r3, #1
 80019b4:	d105      	bne.n	80019c2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80019b6:	893b      	ldrh	r3, [r7, #8]
 80019b8:	b2da      	uxtb	r2, r3
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	629a      	str	r2, [r3, #40]	@ 0x28
 80019c0:	e015      	b.n	80019ee <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80019c2:	893b      	ldrh	r3, [r7, #8]
 80019c4:	0a1b      	lsrs	r3, r3, #8
 80019c6:	b29b      	uxth	r3, r3
 80019c8:	b2da      	uxtb	r2, r3
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80019d0:	69fa      	ldr	r2, [r7, #28]
 80019d2:	69b9      	ldr	r1, [r7, #24]
 80019d4:	68f8      	ldr	r0, [r7, #12]
 80019d6:	f000 f89c 	bl	8001b12 <I2C_WaitOnTXISFlagUntilTimeout>
 80019da:	4603      	mov	r3, r0
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d001      	beq.n	80019e4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80019e0:	2301      	movs	r3, #1
 80019e2:	e012      	b.n	8001a0a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80019e4:	893b      	ldrh	r3, [r7, #8]
 80019e6:	b2da      	uxtb	r2, r3
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80019ee:	69fb      	ldr	r3, [r7, #28]
 80019f0:	9300      	str	r3, [sp, #0]
 80019f2:	69bb      	ldr	r3, [r7, #24]
 80019f4:	2200      	movs	r2, #0
 80019f6:	2140      	movs	r1, #64	@ 0x40
 80019f8:	68f8      	ldr	r0, [r7, #12]
 80019fa:	f000 f831 	bl	8001a60 <I2C_WaitOnFlagUntilTimeout>
 80019fe:	4603      	mov	r3, r0
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d001      	beq.n	8001a08 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8001a04:	2301      	movs	r3, #1
 8001a06:	e000      	b.n	8001a0a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8001a08:	2300      	movs	r3, #0
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	3710      	adds	r7, #16
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	80002000 	.word	0x80002000

08001a18 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b083      	sub	sp, #12
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	699b      	ldr	r3, [r3, #24]
 8001a26:	f003 0302 	and.w	r3, r3, #2
 8001a2a:	2b02      	cmp	r3, #2
 8001a2c:	d103      	bne.n	8001a36 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	2200      	movs	r2, #0
 8001a34:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	699b      	ldr	r3, [r3, #24]
 8001a3c:	f003 0301 	and.w	r3, r3, #1
 8001a40:	2b01      	cmp	r3, #1
 8001a42:	d007      	beq.n	8001a54 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	699a      	ldr	r2, [r3, #24]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f042 0201 	orr.w	r2, r2, #1
 8001a52:	619a      	str	r2, [r3, #24]
  }
}
 8001a54:	bf00      	nop
 8001a56:	370c      	adds	r7, #12
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5e:	4770      	bx	lr

08001a60 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b084      	sub	sp, #16
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	60f8      	str	r0, [r7, #12]
 8001a68:	60b9      	str	r1, [r7, #8]
 8001a6a:	603b      	str	r3, [r7, #0]
 8001a6c:	4613      	mov	r3, r2
 8001a6e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001a70:	e03b      	b.n	8001aea <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001a72:	69ba      	ldr	r2, [r7, #24]
 8001a74:	6839      	ldr	r1, [r7, #0]
 8001a76:	68f8      	ldr	r0, [r7, #12]
 8001a78:	f000 f8d6 	bl	8001c28 <I2C_IsErrorOccurred>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d001      	beq.n	8001a86 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8001a82:	2301      	movs	r3, #1
 8001a84:	e041      	b.n	8001b0a <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a8c:	d02d      	beq.n	8001aea <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a8e:	f7ff fb2f 	bl	80010f0 <HAL_GetTick>
 8001a92:	4602      	mov	r2, r0
 8001a94:	69bb      	ldr	r3, [r7, #24]
 8001a96:	1ad3      	subs	r3, r2, r3
 8001a98:	683a      	ldr	r2, [r7, #0]
 8001a9a:	429a      	cmp	r2, r3
 8001a9c:	d302      	bcc.n	8001aa4 <I2C_WaitOnFlagUntilTimeout+0x44>
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d122      	bne.n	8001aea <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	699a      	ldr	r2, [r3, #24]
 8001aaa:	68bb      	ldr	r3, [r7, #8]
 8001aac:	4013      	ands	r3, r2
 8001aae:	68ba      	ldr	r2, [r7, #8]
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	bf0c      	ite	eq
 8001ab4:	2301      	moveq	r3, #1
 8001ab6:	2300      	movne	r3, #0
 8001ab8:	b2db      	uxtb	r3, r3
 8001aba:	461a      	mov	r2, r3
 8001abc:	79fb      	ldrb	r3, [r7, #7]
 8001abe:	429a      	cmp	r2, r3
 8001ac0:	d113      	bne.n	8001aea <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ac6:	f043 0220 	orr.w	r2, r3, #32
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	2220      	movs	r2, #32
 8001ad2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	2200      	movs	r2, #0
 8001ada:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	e00f      	b.n	8001b0a <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	699a      	ldr	r2, [r3, #24]
 8001af0:	68bb      	ldr	r3, [r7, #8]
 8001af2:	4013      	ands	r3, r2
 8001af4:	68ba      	ldr	r2, [r7, #8]
 8001af6:	429a      	cmp	r2, r3
 8001af8:	bf0c      	ite	eq
 8001afa:	2301      	moveq	r3, #1
 8001afc:	2300      	movne	r3, #0
 8001afe:	b2db      	uxtb	r3, r3
 8001b00:	461a      	mov	r2, r3
 8001b02:	79fb      	ldrb	r3, [r7, #7]
 8001b04:	429a      	cmp	r2, r3
 8001b06:	d0b4      	beq.n	8001a72 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001b08:	2300      	movs	r3, #0
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	3710      	adds	r7, #16
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}

08001b12 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001b12:	b580      	push	{r7, lr}
 8001b14:	b084      	sub	sp, #16
 8001b16:	af00      	add	r7, sp, #0
 8001b18:	60f8      	str	r0, [r7, #12]
 8001b1a:	60b9      	str	r1, [r7, #8]
 8001b1c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001b1e:	e033      	b.n	8001b88 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b20:	687a      	ldr	r2, [r7, #4]
 8001b22:	68b9      	ldr	r1, [r7, #8]
 8001b24:	68f8      	ldr	r0, [r7, #12]
 8001b26:	f000 f87f 	bl	8001c28 <I2C_IsErrorOccurred>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d001      	beq.n	8001b34 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001b30:	2301      	movs	r3, #1
 8001b32:	e031      	b.n	8001b98 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b34:	68bb      	ldr	r3, [r7, #8]
 8001b36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b3a:	d025      	beq.n	8001b88 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b3c:	f7ff fad8 	bl	80010f0 <HAL_GetTick>
 8001b40:	4602      	mov	r2, r0
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	1ad3      	subs	r3, r2, r3
 8001b46:	68ba      	ldr	r2, [r7, #8]
 8001b48:	429a      	cmp	r2, r3
 8001b4a:	d302      	bcc.n	8001b52 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001b4c:	68bb      	ldr	r3, [r7, #8]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d11a      	bne.n	8001b88 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	699b      	ldr	r3, [r3, #24]
 8001b58:	f003 0302 	and.w	r3, r3, #2
 8001b5c:	2b02      	cmp	r3, #2
 8001b5e:	d013      	beq.n	8001b88 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b64:	f043 0220 	orr.w	r2, r3, #32
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	2220      	movs	r2, #32
 8001b70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	2200      	movs	r2, #0
 8001b78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	2200      	movs	r2, #0
 8001b80:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8001b84:	2301      	movs	r3, #1
 8001b86:	e007      	b.n	8001b98 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	699b      	ldr	r3, [r3, #24]
 8001b8e:	f003 0302 	and.w	r3, r3, #2
 8001b92:	2b02      	cmp	r3, #2
 8001b94:	d1c4      	bne.n	8001b20 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001b96:	2300      	movs	r3, #0
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	3710      	adds	r7, #16
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}

08001ba0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b084      	sub	sp, #16
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	60f8      	str	r0, [r7, #12]
 8001ba8:	60b9      	str	r1, [r7, #8]
 8001baa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001bac:	e02f      	b.n	8001c0e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001bae:	687a      	ldr	r2, [r7, #4]
 8001bb0:	68b9      	ldr	r1, [r7, #8]
 8001bb2:	68f8      	ldr	r0, [r7, #12]
 8001bb4:	f000 f838 	bl	8001c28 <I2C_IsErrorOccurred>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d001      	beq.n	8001bc2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	e02d      	b.n	8001c1e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001bc2:	f7ff fa95 	bl	80010f0 <HAL_GetTick>
 8001bc6:	4602      	mov	r2, r0
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	1ad3      	subs	r3, r2, r3
 8001bcc:	68ba      	ldr	r2, [r7, #8]
 8001bce:	429a      	cmp	r2, r3
 8001bd0:	d302      	bcc.n	8001bd8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001bd2:	68bb      	ldr	r3, [r7, #8]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d11a      	bne.n	8001c0e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	699b      	ldr	r3, [r3, #24]
 8001bde:	f003 0320 	and.w	r3, r3, #32
 8001be2:	2b20      	cmp	r3, #32
 8001be4:	d013      	beq.n	8001c0e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bea:	f043 0220 	orr.w	r2, r3, #32
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	2220      	movs	r2, #32
 8001bf6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	2200      	movs	r2, #0
 8001c06:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e007      	b.n	8001c1e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	699b      	ldr	r3, [r3, #24]
 8001c14:	f003 0320 	and.w	r3, r3, #32
 8001c18:	2b20      	cmp	r3, #32
 8001c1a:	d1c8      	bne.n	8001bae <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001c1c:	2300      	movs	r3, #0
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	3710      	adds	r7, #16
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}
	...

08001c28 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b08a      	sub	sp, #40	@ 0x28
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	60f8      	str	r0, [r7, #12]
 8001c30:	60b9      	str	r1, [r7, #8]
 8001c32:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c34:	2300      	movs	r3, #0
 8001c36:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	699b      	ldr	r3, [r3, #24]
 8001c40:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001c42:	2300      	movs	r3, #0
 8001c44:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001c4a:	69bb      	ldr	r3, [r7, #24]
 8001c4c:	f003 0310 	and.w	r3, r3, #16
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d068      	beq.n	8001d26 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	2210      	movs	r2, #16
 8001c5a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001c5c:	e049      	b.n	8001cf2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001c5e:	68bb      	ldr	r3, [r7, #8]
 8001c60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c64:	d045      	beq.n	8001cf2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001c66:	f7ff fa43 	bl	80010f0 <HAL_GetTick>
 8001c6a:	4602      	mov	r2, r0
 8001c6c:	69fb      	ldr	r3, [r7, #28]
 8001c6e:	1ad3      	subs	r3, r2, r3
 8001c70:	68ba      	ldr	r2, [r7, #8]
 8001c72:	429a      	cmp	r2, r3
 8001c74:	d302      	bcc.n	8001c7c <I2C_IsErrorOccurred+0x54>
 8001c76:	68bb      	ldr	r3, [r7, #8]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d13a      	bne.n	8001cf2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c86:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001c8e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	699b      	ldr	r3, [r3, #24]
 8001c96:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001c9a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001c9e:	d121      	bne.n	8001ce4 <I2C_IsErrorOccurred+0xbc>
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001ca6:	d01d      	beq.n	8001ce4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8001ca8:	7cfb      	ldrb	r3, [r7, #19]
 8001caa:	2b20      	cmp	r3, #32
 8001cac:	d01a      	beq.n	8001ce4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	685a      	ldr	r2, [r3, #4]
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001cbc:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001cbe:	f7ff fa17 	bl	80010f0 <HAL_GetTick>
 8001cc2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001cc4:	e00e      	b.n	8001ce4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001cc6:	f7ff fa13 	bl	80010f0 <HAL_GetTick>
 8001cca:	4602      	mov	r2, r0
 8001ccc:	69fb      	ldr	r3, [r7, #28]
 8001cce:	1ad3      	subs	r3, r2, r3
 8001cd0:	2b19      	cmp	r3, #25
 8001cd2:	d907      	bls.n	8001ce4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8001cd4:	6a3b      	ldr	r3, [r7, #32]
 8001cd6:	f043 0320 	orr.w	r3, r3, #32
 8001cda:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001cdc:	2301      	movs	r3, #1
 8001cde:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8001ce2:	e006      	b.n	8001cf2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	699b      	ldr	r3, [r3, #24]
 8001cea:	f003 0320 	and.w	r3, r3, #32
 8001cee:	2b20      	cmp	r3, #32
 8001cf0:	d1e9      	bne.n	8001cc6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	699b      	ldr	r3, [r3, #24]
 8001cf8:	f003 0320 	and.w	r3, r3, #32
 8001cfc:	2b20      	cmp	r3, #32
 8001cfe:	d003      	beq.n	8001d08 <I2C_IsErrorOccurred+0xe0>
 8001d00:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d0aa      	beq.n	8001c5e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001d08:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d103      	bne.n	8001d18 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	2220      	movs	r2, #32
 8001d16:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001d18:	6a3b      	ldr	r3, [r7, #32]
 8001d1a:	f043 0304 	orr.w	r3, r3, #4
 8001d1e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001d20:	2301      	movs	r3, #1
 8001d22:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	699b      	ldr	r3, [r3, #24]
 8001d2c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001d2e:	69bb      	ldr	r3, [r7, #24]
 8001d30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d00b      	beq.n	8001d50 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001d38:	6a3b      	ldr	r3, [r7, #32]
 8001d3a:	f043 0301 	orr.w	r3, r3, #1
 8001d3e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001d48:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001d50:	69bb      	ldr	r3, [r7, #24]
 8001d52:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d00b      	beq.n	8001d72 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001d5a:	6a3b      	ldr	r3, [r7, #32]
 8001d5c:	f043 0308 	orr.w	r3, r3, #8
 8001d60:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001d6a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001d72:	69bb      	ldr	r3, [r7, #24]
 8001d74:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d00b      	beq.n	8001d94 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001d7c:	6a3b      	ldr	r3, [r7, #32]
 8001d7e:	f043 0302 	orr.w	r3, r3, #2
 8001d82:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001d8c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8001d94:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d01c      	beq.n	8001dd6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001d9c:	68f8      	ldr	r0, [r7, #12]
 8001d9e:	f7ff fe3b 	bl	8001a18 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	6859      	ldr	r1, [r3, #4]
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	681a      	ldr	r2, [r3, #0]
 8001dac:	4b0d      	ldr	r3, [pc, #52]	@ (8001de4 <I2C_IsErrorOccurred+0x1bc>)
 8001dae:	400b      	ands	r3, r1
 8001db0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001db6:	6a3b      	ldr	r3, [r7, #32]
 8001db8:	431a      	orrs	r2, r3
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	2220      	movs	r2, #32
 8001dc2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	2200      	movs	r2, #0
 8001dca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8001dd6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	3728      	adds	r7, #40	@ 0x28
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	fe00e800 	.word	0xfe00e800

08001de8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001de8:	b480      	push	{r7}
 8001dea:	b087      	sub	sp, #28
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	60f8      	str	r0, [r7, #12]
 8001df0:	607b      	str	r3, [r7, #4]
 8001df2:	460b      	mov	r3, r1
 8001df4:	817b      	strh	r3, [r7, #10]
 8001df6:	4613      	mov	r3, r2
 8001df8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001dfa:	897b      	ldrh	r3, [r7, #10]
 8001dfc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001e00:	7a7b      	ldrb	r3, [r7, #9]
 8001e02:	041b      	lsls	r3, r3, #16
 8001e04:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001e08:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001e0e:	6a3b      	ldr	r3, [r7, #32]
 8001e10:	4313      	orrs	r3, r2
 8001e12:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001e16:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	685a      	ldr	r2, [r3, #4]
 8001e1e:	6a3b      	ldr	r3, [r7, #32]
 8001e20:	0d5b      	lsrs	r3, r3, #21
 8001e22:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8001e26:	4b08      	ldr	r3, [pc, #32]	@ (8001e48 <I2C_TransferConfig+0x60>)
 8001e28:	430b      	orrs	r3, r1
 8001e2a:	43db      	mvns	r3, r3
 8001e2c:	ea02 0103 	and.w	r1, r2, r3
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	697a      	ldr	r2, [r7, #20]
 8001e36:	430a      	orrs	r2, r1
 8001e38:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001e3a:	bf00      	nop
 8001e3c:	371c      	adds	r7, #28
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr
 8001e46:	bf00      	nop
 8001e48:	03ff63ff 	.word	0x03ff63ff

08001e4c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b083      	sub	sp, #12
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
 8001e54:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001e5c:	b2db      	uxtb	r3, r3
 8001e5e:	2b20      	cmp	r3, #32
 8001e60:	d138      	bne.n	8001ed4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001e68:	2b01      	cmp	r3, #1
 8001e6a:	d101      	bne.n	8001e70 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001e6c:	2302      	movs	r3, #2
 8001e6e:	e032      	b.n	8001ed6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2201      	movs	r2, #1
 8001e74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2224      	movs	r2, #36	@ 0x24
 8001e7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	681a      	ldr	r2, [r3, #0]
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f022 0201 	bic.w	r2, r2, #1
 8001e8e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	681a      	ldr	r2, [r3, #0]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001e9e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	6819      	ldr	r1, [r3, #0]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	683a      	ldr	r2, [r7, #0]
 8001eac:	430a      	orrs	r2, r1
 8001eae:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	681a      	ldr	r2, [r3, #0]
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f042 0201 	orr.w	r2, r2, #1
 8001ebe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2220      	movs	r2, #32
 8001ec4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2200      	movs	r2, #0
 8001ecc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	e000      	b.n	8001ed6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001ed4:	2302      	movs	r3, #2
  }
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	370c      	adds	r7, #12
 8001eda:	46bd      	mov	sp, r7
 8001edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee0:	4770      	bx	lr

08001ee2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001ee2:	b480      	push	{r7}
 8001ee4:	b085      	sub	sp, #20
 8001ee6:	af00      	add	r7, sp, #0
 8001ee8:	6078      	str	r0, [r7, #4]
 8001eea:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001ef2:	b2db      	uxtb	r3, r3
 8001ef4:	2b20      	cmp	r3, #32
 8001ef6:	d139      	bne.n	8001f6c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001efe:	2b01      	cmp	r3, #1
 8001f00:	d101      	bne.n	8001f06 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001f02:	2302      	movs	r3, #2
 8001f04:	e033      	b.n	8001f6e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2201      	movs	r2, #1
 8001f0a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2224      	movs	r2, #36	@ 0x24
 8001f12:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	681a      	ldr	r2, [r3, #0]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f022 0201 	bic.w	r2, r2, #1
 8001f24:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001f34:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	021b      	lsls	r3, r3, #8
 8001f3a:	68fa      	ldr	r2, [r7, #12]
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	68fa      	ldr	r2, [r7, #12]
 8001f46:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	681a      	ldr	r2, [r3, #0]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f042 0201 	orr.w	r2, r2, #1
 8001f56:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2220      	movs	r2, #32
 8001f5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2200      	movs	r2, #0
 8001f64:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	e000      	b.n	8001f6e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001f6c:	2302      	movs	r3, #2
  }
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	3714      	adds	r7, #20
 8001f72:	46bd      	mov	sp, r7
 8001f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f78:	4770      	bx	lr
	...

08001f7c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b085      	sub	sp, #20
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d141      	bne.n	800200e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001f8a:	4b4b      	ldr	r3, [pc, #300]	@ (80020b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001f92:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f96:	d131      	bne.n	8001ffc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001f98:	4b47      	ldr	r3, [pc, #284]	@ (80020b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001f9e:	4a46      	ldr	r2, [pc, #280]	@ (80020b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fa0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001fa4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001fa8:	4b43      	ldr	r3, [pc, #268]	@ (80020b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001fb0:	4a41      	ldr	r2, [pc, #260]	@ (80020b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fb2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001fb6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001fb8:	4b40      	ldr	r3, [pc, #256]	@ (80020bc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	2232      	movs	r2, #50	@ 0x32
 8001fbe:	fb02 f303 	mul.w	r3, r2, r3
 8001fc2:	4a3f      	ldr	r2, [pc, #252]	@ (80020c0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001fc4:	fba2 2303 	umull	r2, r3, r2, r3
 8001fc8:	0c9b      	lsrs	r3, r3, #18
 8001fca:	3301      	adds	r3, #1
 8001fcc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001fce:	e002      	b.n	8001fd6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	3b01      	subs	r3, #1
 8001fd4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001fd6:	4b38      	ldr	r3, [pc, #224]	@ (80020b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fd8:	695b      	ldr	r3, [r3, #20]
 8001fda:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001fde:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001fe2:	d102      	bne.n	8001fea <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d1f2      	bne.n	8001fd0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001fea:	4b33      	ldr	r3, [pc, #204]	@ (80020b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fec:	695b      	ldr	r3, [r3, #20]
 8001fee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ff2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001ff6:	d158      	bne.n	80020aa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001ff8:	2303      	movs	r3, #3
 8001ffa:	e057      	b.n	80020ac <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001ffc:	4b2e      	ldr	r3, [pc, #184]	@ (80020b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ffe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002002:	4a2d      	ldr	r2, [pc, #180]	@ (80020b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002004:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002008:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800200c:	e04d      	b.n	80020aa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002014:	d141      	bne.n	800209a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002016:	4b28      	ldr	r3, [pc, #160]	@ (80020b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800201e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002022:	d131      	bne.n	8002088 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002024:	4b24      	ldr	r3, [pc, #144]	@ (80020b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002026:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800202a:	4a23      	ldr	r2, [pc, #140]	@ (80020b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800202c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002030:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002034:	4b20      	ldr	r3, [pc, #128]	@ (80020b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800203c:	4a1e      	ldr	r2, [pc, #120]	@ (80020b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800203e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002042:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002044:	4b1d      	ldr	r3, [pc, #116]	@ (80020bc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	2232      	movs	r2, #50	@ 0x32
 800204a:	fb02 f303 	mul.w	r3, r2, r3
 800204e:	4a1c      	ldr	r2, [pc, #112]	@ (80020c0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002050:	fba2 2303 	umull	r2, r3, r2, r3
 8002054:	0c9b      	lsrs	r3, r3, #18
 8002056:	3301      	adds	r3, #1
 8002058:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800205a:	e002      	b.n	8002062 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	3b01      	subs	r3, #1
 8002060:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002062:	4b15      	ldr	r3, [pc, #84]	@ (80020b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002064:	695b      	ldr	r3, [r3, #20]
 8002066:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800206a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800206e:	d102      	bne.n	8002076 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d1f2      	bne.n	800205c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002076:	4b10      	ldr	r3, [pc, #64]	@ (80020b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002078:	695b      	ldr	r3, [r3, #20]
 800207a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800207e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002082:	d112      	bne.n	80020aa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002084:	2303      	movs	r3, #3
 8002086:	e011      	b.n	80020ac <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002088:	4b0b      	ldr	r3, [pc, #44]	@ (80020b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800208a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800208e:	4a0a      	ldr	r2, [pc, #40]	@ (80020b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002090:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002094:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002098:	e007      	b.n	80020aa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800209a:	4b07      	ldr	r3, [pc, #28]	@ (80020b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80020a2:	4a05      	ldr	r2, [pc, #20]	@ (80020b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020a4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80020a8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80020aa:	2300      	movs	r3, #0
}
 80020ac:	4618      	mov	r0, r3
 80020ae:	3714      	adds	r7, #20
 80020b0:	46bd      	mov	sp, r7
 80020b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b6:	4770      	bx	lr
 80020b8:	40007000 	.word	0x40007000
 80020bc:	20000034 	.word	0x20000034
 80020c0:	431bde83 	.word	0x431bde83

080020c4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80020c4:	b480      	push	{r7}
 80020c6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80020c8:	4b05      	ldr	r3, [pc, #20]	@ (80020e0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80020ca:	689b      	ldr	r3, [r3, #8]
 80020cc:	4a04      	ldr	r2, [pc, #16]	@ (80020e0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80020ce:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80020d2:	6093      	str	r3, [r2, #8]
}
 80020d4:	bf00      	nop
 80020d6:	46bd      	mov	sp, r7
 80020d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020dc:	4770      	bx	lr
 80020de:	bf00      	nop
 80020e0:	40007000 	.word	0x40007000

080020e4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b088      	sub	sp, #32
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d101      	bne.n	80020f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80020f2:	2301      	movs	r3, #1
 80020f4:	e2fe      	b.n	80026f4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f003 0301 	and.w	r3, r3, #1
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d075      	beq.n	80021ee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002102:	4b97      	ldr	r3, [pc, #604]	@ (8002360 <HAL_RCC_OscConfig+0x27c>)
 8002104:	689b      	ldr	r3, [r3, #8]
 8002106:	f003 030c 	and.w	r3, r3, #12
 800210a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800210c:	4b94      	ldr	r3, [pc, #592]	@ (8002360 <HAL_RCC_OscConfig+0x27c>)
 800210e:	68db      	ldr	r3, [r3, #12]
 8002110:	f003 0303 	and.w	r3, r3, #3
 8002114:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002116:	69bb      	ldr	r3, [r7, #24]
 8002118:	2b0c      	cmp	r3, #12
 800211a:	d102      	bne.n	8002122 <HAL_RCC_OscConfig+0x3e>
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	2b03      	cmp	r3, #3
 8002120:	d002      	beq.n	8002128 <HAL_RCC_OscConfig+0x44>
 8002122:	69bb      	ldr	r3, [r7, #24]
 8002124:	2b08      	cmp	r3, #8
 8002126:	d10b      	bne.n	8002140 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002128:	4b8d      	ldr	r3, [pc, #564]	@ (8002360 <HAL_RCC_OscConfig+0x27c>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002130:	2b00      	cmp	r3, #0
 8002132:	d05b      	beq.n	80021ec <HAL_RCC_OscConfig+0x108>
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d157      	bne.n	80021ec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800213c:	2301      	movs	r3, #1
 800213e:	e2d9      	b.n	80026f4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002148:	d106      	bne.n	8002158 <HAL_RCC_OscConfig+0x74>
 800214a:	4b85      	ldr	r3, [pc, #532]	@ (8002360 <HAL_RCC_OscConfig+0x27c>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4a84      	ldr	r2, [pc, #528]	@ (8002360 <HAL_RCC_OscConfig+0x27c>)
 8002150:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002154:	6013      	str	r3, [r2, #0]
 8002156:	e01d      	b.n	8002194 <HAL_RCC_OscConfig+0xb0>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002160:	d10c      	bne.n	800217c <HAL_RCC_OscConfig+0x98>
 8002162:	4b7f      	ldr	r3, [pc, #508]	@ (8002360 <HAL_RCC_OscConfig+0x27c>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4a7e      	ldr	r2, [pc, #504]	@ (8002360 <HAL_RCC_OscConfig+0x27c>)
 8002168:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800216c:	6013      	str	r3, [r2, #0]
 800216e:	4b7c      	ldr	r3, [pc, #496]	@ (8002360 <HAL_RCC_OscConfig+0x27c>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4a7b      	ldr	r2, [pc, #492]	@ (8002360 <HAL_RCC_OscConfig+0x27c>)
 8002174:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002178:	6013      	str	r3, [r2, #0]
 800217a:	e00b      	b.n	8002194 <HAL_RCC_OscConfig+0xb0>
 800217c:	4b78      	ldr	r3, [pc, #480]	@ (8002360 <HAL_RCC_OscConfig+0x27c>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a77      	ldr	r2, [pc, #476]	@ (8002360 <HAL_RCC_OscConfig+0x27c>)
 8002182:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002186:	6013      	str	r3, [r2, #0]
 8002188:	4b75      	ldr	r3, [pc, #468]	@ (8002360 <HAL_RCC_OscConfig+0x27c>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a74      	ldr	r2, [pc, #464]	@ (8002360 <HAL_RCC_OscConfig+0x27c>)
 800218e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002192:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d013      	beq.n	80021c4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800219c:	f7fe ffa8 	bl	80010f0 <HAL_GetTick>
 80021a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80021a2:	e008      	b.n	80021b6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021a4:	f7fe ffa4 	bl	80010f0 <HAL_GetTick>
 80021a8:	4602      	mov	r2, r0
 80021aa:	693b      	ldr	r3, [r7, #16]
 80021ac:	1ad3      	subs	r3, r2, r3
 80021ae:	2b64      	cmp	r3, #100	@ 0x64
 80021b0:	d901      	bls.n	80021b6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80021b2:	2303      	movs	r3, #3
 80021b4:	e29e      	b.n	80026f4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80021b6:	4b6a      	ldr	r3, [pc, #424]	@ (8002360 <HAL_RCC_OscConfig+0x27c>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d0f0      	beq.n	80021a4 <HAL_RCC_OscConfig+0xc0>
 80021c2:	e014      	b.n	80021ee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021c4:	f7fe ff94 	bl	80010f0 <HAL_GetTick>
 80021c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80021ca:	e008      	b.n	80021de <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021cc:	f7fe ff90 	bl	80010f0 <HAL_GetTick>
 80021d0:	4602      	mov	r2, r0
 80021d2:	693b      	ldr	r3, [r7, #16]
 80021d4:	1ad3      	subs	r3, r2, r3
 80021d6:	2b64      	cmp	r3, #100	@ 0x64
 80021d8:	d901      	bls.n	80021de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80021da:	2303      	movs	r3, #3
 80021dc:	e28a      	b.n	80026f4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80021de:	4b60      	ldr	r3, [pc, #384]	@ (8002360 <HAL_RCC_OscConfig+0x27c>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d1f0      	bne.n	80021cc <HAL_RCC_OscConfig+0xe8>
 80021ea:	e000      	b.n	80021ee <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f003 0302 	and.w	r3, r3, #2
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d075      	beq.n	80022e6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80021fa:	4b59      	ldr	r3, [pc, #356]	@ (8002360 <HAL_RCC_OscConfig+0x27c>)
 80021fc:	689b      	ldr	r3, [r3, #8]
 80021fe:	f003 030c 	and.w	r3, r3, #12
 8002202:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002204:	4b56      	ldr	r3, [pc, #344]	@ (8002360 <HAL_RCC_OscConfig+0x27c>)
 8002206:	68db      	ldr	r3, [r3, #12]
 8002208:	f003 0303 	and.w	r3, r3, #3
 800220c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800220e:	69bb      	ldr	r3, [r7, #24]
 8002210:	2b0c      	cmp	r3, #12
 8002212:	d102      	bne.n	800221a <HAL_RCC_OscConfig+0x136>
 8002214:	697b      	ldr	r3, [r7, #20]
 8002216:	2b02      	cmp	r3, #2
 8002218:	d002      	beq.n	8002220 <HAL_RCC_OscConfig+0x13c>
 800221a:	69bb      	ldr	r3, [r7, #24]
 800221c:	2b04      	cmp	r3, #4
 800221e:	d11f      	bne.n	8002260 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002220:	4b4f      	ldr	r3, [pc, #316]	@ (8002360 <HAL_RCC_OscConfig+0x27c>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002228:	2b00      	cmp	r3, #0
 800222a:	d005      	beq.n	8002238 <HAL_RCC_OscConfig+0x154>
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	68db      	ldr	r3, [r3, #12]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d101      	bne.n	8002238 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002234:	2301      	movs	r3, #1
 8002236:	e25d      	b.n	80026f4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002238:	4b49      	ldr	r3, [pc, #292]	@ (8002360 <HAL_RCC_OscConfig+0x27c>)
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	691b      	ldr	r3, [r3, #16]
 8002244:	061b      	lsls	r3, r3, #24
 8002246:	4946      	ldr	r1, [pc, #280]	@ (8002360 <HAL_RCC_OscConfig+0x27c>)
 8002248:	4313      	orrs	r3, r2
 800224a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800224c:	4b45      	ldr	r3, [pc, #276]	@ (8002364 <HAL_RCC_OscConfig+0x280>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4618      	mov	r0, r3
 8002252:	f7fe ff01 	bl	8001058 <HAL_InitTick>
 8002256:	4603      	mov	r3, r0
 8002258:	2b00      	cmp	r3, #0
 800225a:	d043      	beq.n	80022e4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800225c:	2301      	movs	r3, #1
 800225e:	e249      	b.n	80026f4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	68db      	ldr	r3, [r3, #12]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d023      	beq.n	80022b0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002268:	4b3d      	ldr	r3, [pc, #244]	@ (8002360 <HAL_RCC_OscConfig+0x27c>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a3c      	ldr	r2, [pc, #240]	@ (8002360 <HAL_RCC_OscConfig+0x27c>)
 800226e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002272:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002274:	f7fe ff3c 	bl	80010f0 <HAL_GetTick>
 8002278:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800227a:	e008      	b.n	800228e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800227c:	f7fe ff38 	bl	80010f0 <HAL_GetTick>
 8002280:	4602      	mov	r2, r0
 8002282:	693b      	ldr	r3, [r7, #16]
 8002284:	1ad3      	subs	r3, r2, r3
 8002286:	2b02      	cmp	r3, #2
 8002288:	d901      	bls.n	800228e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800228a:	2303      	movs	r3, #3
 800228c:	e232      	b.n	80026f4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800228e:	4b34      	ldr	r3, [pc, #208]	@ (8002360 <HAL_RCC_OscConfig+0x27c>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002296:	2b00      	cmp	r3, #0
 8002298:	d0f0      	beq.n	800227c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800229a:	4b31      	ldr	r3, [pc, #196]	@ (8002360 <HAL_RCC_OscConfig+0x27c>)
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	691b      	ldr	r3, [r3, #16]
 80022a6:	061b      	lsls	r3, r3, #24
 80022a8:	492d      	ldr	r1, [pc, #180]	@ (8002360 <HAL_RCC_OscConfig+0x27c>)
 80022aa:	4313      	orrs	r3, r2
 80022ac:	604b      	str	r3, [r1, #4]
 80022ae:	e01a      	b.n	80022e6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022b0:	4b2b      	ldr	r3, [pc, #172]	@ (8002360 <HAL_RCC_OscConfig+0x27c>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a2a      	ldr	r2, [pc, #168]	@ (8002360 <HAL_RCC_OscConfig+0x27c>)
 80022b6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80022ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022bc:	f7fe ff18 	bl	80010f0 <HAL_GetTick>
 80022c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80022c2:	e008      	b.n	80022d6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022c4:	f7fe ff14 	bl	80010f0 <HAL_GetTick>
 80022c8:	4602      	mov	r2, r0
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	1ad3      	subs	r3, r2, r3
 80022ce:	2b02      	cmp	r3, #2
 80022d0:	d901      	bls.n	80022d6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80022d2:	2303      	movs	r3, #3
 80022d4:	e20e      	b.n	80026f4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80022d6:	4b22      	ldr	r3, [pc, #136]	@ (8002360 <HAL_RCC_OscConfig+0x27c>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d1f0      	bne.n	80022c4 <HAL_RCC_OscConfig+0x1e0>
 80022e2:	e000      	b.n	80022e6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80022e4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f003 0308 	and.w	r3, r3, #8
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d041      	beq.n	8002376 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	695b      	ldr	r3, [r3, #20]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d01c      	beq.n	8002334 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022fa:	4b19      	ldr	r3, [pc, #100]	@ (8002360 <HAL_RCC_OscConfig+0x27c>)
 80022fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002300:	4a17      	ldr	r2, [pc, #92]	@ (8002360 <HAL_RCC_OscConfig+0x27c>)
 8002302:	f043 0301 	orr.w	r3, r3, #1
 8002306:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800230a:	f7fe fef1 	bl	80010f0 <HAL_GetTick>
 800230e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002310:	e008      	b.n	8002324 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002312:	f7fe feed 	bl	80010f0 <HAL_GetTick>
 8002316:	4602      	mov	r2, r0
 8002318:	693b      	ldr	r3, [r7, #16]
 800231a:	1ad3      	subs	r3, r2, r3
 800231c:	2b02      	cmp	r3, #2
 800231e:	d901      	bls.n	8002324 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002320:	2303      	movs	r3, #3
 8002322:	e1e7      	b.n	80026f4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002324:	4b0e      	ldr	r3, [pc, #56]	@ (8002360 <HAL_RCC_OscConfig+0x27c>)
 8002326:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800232a:	f003 0302 	and.w	r3, r3, #2
 800232e:	2b00      	cmp	r3, #0
 8002330:	d0ef      	beq.n	8002312 <HAL_RCC_OscConfig+0x22e>
 8002332:	e020      	b.n	8002376 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002334:	4b0a      	ldr	r3, [pc, #40]	@ (8002360 <HAL_RCC_OscConfig+0x27c>)
 8002336:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800233a:	4a09      	ldr	r2, [pc, #36]	@ (8002360 <HAL_RCC_OscConfig+0x27c>)
 800233c:	f023 0301 	bic.w	r3, r3, #1
 8002340:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002344:	f7fe fed4 	bl	80010f0 <HAL_GetTick>
 8002348:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800234a:	e00d      	b.n	8002368 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800234c:	f7fe fed0 	bl	80010f0 <HAL_GetTick>
 8002350:	4602      	mov	r2, r0
 8002352:	693b      	ldr	r3, [r7, #16]
 8002354:	1ad3      	subs	r3, r2, r3
 8002356:	2b02      	cmp	r3, #2
 8002358:	d906      	bls.n	8002368 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800235a:	2303      	movs	r3, #3
 800235c:	e1ca      	b.n	80026f4 <HAL_RCC_OscConfig+0x610>
 800235e:	bf00      	nop
 8002360:	40021000 	.word	0x40021000
 8002364:	20000038 	.word	0x20000038
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002368:	4b8c      	ldr	r3, [pc, #560]	@ (800259c <HAL_RCC_OscConfig+0x4b8>)
 800236a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800236e:	f003 0302 	and.w	r3, r3, #2
 8002372:	2b00      	cmp	r3, #0
 8002374:	d1ea      	bne.n	800234c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f003 0304 	and.w	r3, r3, #4
 800237e:	2b00      	cmp	r3, #0
 8002380:	f000 80a6 	beq.w	80024d0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002384:	2300      	movs	r3, #0
 8002386:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002388:	4b84      	ldr	r3, [pc, #528]	@ (800259c <HAL_RCC_OscConfig+0x4b8>)
 800238a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800238c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002390:	2b00      	cmp	r3, #0
 8002392:	d101      	bne.n	8002398 <HAL_RCC_OscConfig+0x2b4>
 8002394:	2301      	movs	r3, #1
 8002396:	e000      	b.n	800239a <HAL_RCC_OscConfig+0x2b6>
 8002398:	2300      	movs	r3, #0
 800239a:	2b00      	cmp	r3, #0
 800239c:	d00d      	beq.n	80023ba <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800239e:	4b7f      	ldr	r3, [pc, #508]	@ (800259c <HAL_RCC_OscConfig+0x4b8>)
 80023a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023a2:	4a7e      	ldr	r2, [pc, #504]	@ (800259c <HAL_RCC_OscConfig+0x4b8>)
 80023a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80023a8:	6593      	str	r3, [r2, #88]	@ 0x58
 80023aa:	4b7c      	ldr	r3, [pc, #496]	@ (800259c <HAL_RCC_OscConfig+0x4b8>)
 80023ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023b2:	60fb      	str	r3, [r7, #12]
 80023b4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80023b6:	2301      	movs	r3, #1
 80023b8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023ba:	4b79      	ldr	r3, [pc, #484]	@ (80025a0 <HAL_RCC_OscConfig+0x4bc>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d118      	bne.n	80023f8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80023c6:	4b76      	ldr	r3, [pc, #472]	@ (80025a0 <HAL_RCC_OscConfig+0x4bc>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4a75      	ldr	r2, [pc, #468]	@ (80025a0 <HAL_RCC_OscConfig+0x4bc>)
 80023cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80023d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023d2:	f7fe fe8d 	bl	80010f0 <HAL_GetTick>
 80023d6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023d8:	e008      	b.n	80023ec <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023da:	f7fe fe89 	bl	80010f0 <HAL_GetTick>
 80023de:	4602      	mov	r2, r0
 80023e0:	693b      	ldr	r3, [r7, #16]
 80023e2:	1ad3      	subs	r3, r2, r3
 80023e4:	2b02      	cmp	r3, #2
 80023e6:	d901      	bls.n	80023ec <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80023e8:	2303      	movs	r3, #3
 80023ea:	e183      	b.n	80026f4 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023ec:	4b6c      	ldr	r3, [pc, #432]	@ (80025a0 <HAL_RCC_OscConfig+0x4bc>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d0f0      	beq.n	80023da <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	689b      	ldr	r3, [r3, #8]
 80023fc:	2b01      	cmp	r3, #1
 80023fe:	d108      	bne.n	8002412 <HAL_RCC_OscConfig+0x32e>
 8002400:	4b66      	ldr	r3, [pc, #408]	@ (800259c <HAL_RCC_OscConfig+0x4b8>)
 8002402:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002406:	4a65      	ldr	r2, [pc, #404]	@ (800259c <HAL_RCC_OscConfig+0x4b8>)
 8002408:	f043 0301 	orr.w	r3, r3, #1
 800240c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002410:	e024      	b.n	800245c <HAL_RCC_OscConfig+0x378>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	689b      	ldr	r3, [r3, #8]
 8002416:	2b05      	cmp	r3, #5
 8002418:	d110      	bne.n	800243c <HAL_RCC_OscConfig+0x358>
 800241a:	4b60      	ldr	r3, [pc, #384]	@ (800259c <HAL_RCC_OscConfig+0x4b8>)
 800241c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002420:	4a5e      	ldr	r2, [pc, #376]	@ (800259c <HAL_RCC_OscConfig+0x4b8>)
 8002422:	f043 0304 	orr.w	r3, r3, #4
 8002426:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800242a:	4b5c      	ldr	r3, [pc, #368]	@ (800259c <HAL_RCC_OscConfig+0x4b8>)
 800242c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002430:	4a5a      	ldr	r2, [pc, #360]	@ (800259c <HAL_RCC_OscConfig+0x4b8>)
 8002432:	f043 0301 	orr.w	r3, r3, #1
 8002436:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800243a:	e00f      	b.n	800245c <HAL_RCC_OscConfig+0x378>
 800243c:	4b57      	ldr	r3, [pc, #348]	@ (800259c <HAL_RCC_OscConfig+0x4b8>)
 800243e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002442:	4a56      	ldr	r2, [pc, #344]	@ (800259c <HAL_RCC_OscConfig+0x4b8>)
 8002444:	f023 0301 	bic.w	r3, r3, #1
 8002448:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800244c:	4b53      	ldr	r3, [pc, #332]	@ (800259c <HAL_RCC_OscConfig+0x4b8>)
 800244e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002452:	4a52      	ldr	r2, [pc, #328]	@ (800259c <HAL_RCC_OscConfig+0x4b8>)
 8002454:	f023 0304 	bic.w	r3, r3, #4
 8002458:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	689b      	ldr	r3, [r3, #8]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d016      	beq.n	8002492 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002464:	f7fe fe44 	bl	80010f0 <HAL_GetTick>
 8002468:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800246a:	e00a      	b.n	8002482 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800246c:	f7fe fe40 	bl	80010f0 <HAL_GetTick>
 8002470:	4602      	mov	r2, r0
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	1ad3      	subs	r3, r2, r3
 8002476:	f241 3288 	movw	r2, #5000	@ 0x1388
 800247a:	4293      	cmp	r3, r2
 800247c:	d901      	bls.n	8002482 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800247e:	2303      	movs	r3, #3
 8002480:	e138      	b.n	80026f4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002482:	4b46      	ldr	r3, [pc, #280]	@ (800259c <HAL_RCC_OscConfig+0x4b8>)
 8002484:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002488:	f003 0302 	and.w	r3, r3, #2
 800248c:	2b00      	cmp	r3, #0
 800248e:	d0ed      	beq.n	800246c <HAL_RCC_OscConfig+0x388>
 8002490:	e015      	b.n	80024be <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002492:	f7fe fe2d 	bl	80010f0 <HAL_GetTick>
 8002496:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002498:	e00a      	b.n	80024b0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800249a:	f7fe fe29 	bl	80010f0 <HAL_GetTick>
 800249e:	4602      	mov	r2, r0
 80024a0:	693b      	ldr	r3, [r7, #16]
 80024a2:	1ad3      	subs	r3, r2, r3
 80024a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d901      	bls.n	80024b0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80024ac:	2303      	movs	r3, #3
 80024ae:	e121      	b.n	80026f4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80024b0:	4b3a      	ldr	r3, [pc, #232]	@ (800259c <HAL_RCC_OscConfig+0x4b8>)
 80024b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024b6:	f003 0302 	and.w	r3, r3, #2
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d1ed      	bne.n	800249a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80024be:	7ffb      	ldrb	r3, [r7, #31]
 80024c0:	2b01      	cmp	r3, #1
 80024c2:	d105      	bne.n	80024d0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024c4:	4b35      	ldr	r3, [pc, #212]	@ (800259c <HAL_RCC_OscConfig+0x4b8>)
 80024c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024c8:	4a34      	ldr	r2, [pc, #208]	@ (800259c <HAL_RCC_OscConfig+0x4b8>)
 80024ca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80024ce:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f003 0320 	and.w	r3, r3, #32
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d03c      	beq.n	8002556 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	699b      	ldr	r3, [r3, #24]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d01c      	beq.n	800251e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80024e4:	4b2d      	ldr	r3, [pc, #180]	@ (800259c <HAL_RCC_OscConfig+0x4b8>)
 80024e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80024ea:	4a2c      	ldr	r2, [pc, #176]	@ (800259c <HAL_RCC_OscConfig+0x4b8>)
 80024ec:	f043 0301 	orr.w	r3, r3, #1
 80024f0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024f4:	f7fe fdfc 	bl	80010f0 <HAL_GetTick>
 80024f8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80024fa:	e008      	b.n	800250e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80024fc:	f7fe fdf8 	bl	80010f0 <HAL_GetTick>
 8002500:	4602      	mov	r2, r0
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	1ad3      	subs	r3, r2, r3
 8002506:	2b02      	cmp	r3, #2
 8002508:	d901      	bls.n	800250e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800250a:	2303      	movs	r3, #3
 800250c:	e0f2      	b.n	80026f4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800250e:	4b23      	ldr	r3, [pc, #140]	@ (800259c <HAL_RCC_OscConfig+0x4b8>)
 8002510:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002514:	f003 0302 	and.w	r3, r3, #2
 8002518:	2b00      	cmp	r3, #0
 800251a:	d0ef      	beq.n	80024fc <HAL_RCC_OscConfig+0x418>
 800251c:	e01b      	b.n	8002556 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800251e:	4b1f      	ldr	r3, [pc, #124]	@ (800259c <HAL_RCC_OscConfig+0x4b8>)
 8002520:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002524:	4a1d      	ldr	r2, [pc, #116]	@ (800259c <HAL_RCC_OscConfig+0x4b8>)
 8002526:	f023 0301 	bic.w	r3, r3, #1
 800252a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800252e:	f7fe fddf 	bl	80010f0 <HAL_GetTick>
 8002532:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002534:	e008      	b.n	8002548 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002536:	f7fe fddb 	bl	80010f0 <HAL_GetTick>
 800253a:	4602      	mov	r2, r0
 800253c:	693b      	ldr	r3, [r7, #16]
 800253e:	1ad3      	subs	r3, r2, r3
 8002540:	2b02      	cmp	r3, #2
 8002542:	d901      	bls.n	8002548 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002544:	2303      	movs	r3, #3
 8002546:	e0d5      	b.n	80026f4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002548:	4b14      	ldr	r3, [pc, #80]	@ (800259c <HAL_RCC_OscConfig+0x4b8>)
 800254a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800254e:	f003 0302 	and.w	r3, r3, #2
 8002552:	2b00      	cmp	r3, #0
 8002554:	d1ef      	bne.n	8002536 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	69db      	ldr	r3, [r3, #28]
 800255a:	2b00      	cmp	r3, #0
 800255c:	f000 80c9 	beq.w	80026f2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002560:	4b0e      	ldr	r3, [pc, #56]	@ (800259c <HAL_RCC_OscConfig+0x4b8>)
 8002562:	689b      	ldr	r3, [r3, #8]
 8002564:	f003 030c 	and.w	r3, r3, #12
 8002568:	2b0c      	cmp	r3, #12
 800256a:	f000 8083 	beq.w	8002674 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	69db      	ldr	r3, [r3, #28]
 8002572:	2b02      	cmp	r3, #2
 8002574:	d15e      	bne.n	8002634 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002576:	4b09      	ldr	r3, [pc, #36]	@ (800259c <HAL_RCC_OscConfig+0x4b8>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a08      	ldr	r2, [pc, #32]	@ (800259c <HAL_RCC_OscConfig+0x4b8>)
 800257c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002580:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002582:	f7fe fdb5 	bl	80010f0 <HAL_GetTick>
 8002586:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002588:	e00c      	b.n	80025a4 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800258a:	f7fe fdb1 	bl	80010f0 <HAL_GetTick>
 800258e:	4602      	mov	r2, r0
 8002590:	693b      	ldr	r3, [r7, #16]
 8002592:	1ad3      	subs	r3, r2, r3
 8002594:	2b02      	cmp	r3, #2
 8002596:	d905      	bls.n	80025a4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002598:	2303      	movs	r3, #3
 800259a:	e0ab      	b.n	80026f4 <HAL_RCC_OscConfig+0x610>
 800259c:	40021000 	.word	0x40021000
 80025a0:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025a4:	4b55      	ldr	r3, [pc, #340]	@ (80026fc <HAL_RCC_OscConfig+0x618>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d1ec      	bne.n	800258a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025b0:	4b52      	ldr	r3, [pc, #328]	@ (80026fc <HAL_RCC_OscConfig+0x618>)
 80025b2:	68da      	ldr	r2, [r3, #12]
 80025b4:	4b52      	ldr	r3, [pc, #328]	@ (8002700 <HAL_RCC_OscConfig+0x61c>)
 80025b6:	4013      	ands	r3, r2
 80025b8:	687a      	ldr	r2, [r7, #4]
 80025ba:	6a11      	ldr	r1, [r2, #32]
 80025bc:	687a      	ldr	r2, [r7, #4]
 80025be:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80025c0:	3a01      	subs	r2, #1
 80025c2:	0112      	lsls	r2, r2, #4
 80025c4:	4311      	orrs	r1, r2
 80025c6:	687a      	ldr	r2, [r7, #4]
 80025c8:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80025ca:	0212      	lsls	r2, r2, #8
 80025cc:	4311      	orrs	r1, r2
 80025ce:	687a      	ldr	r2, [r7, #4]
 80025d0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80025d2:	0852      	lsrs	r2, r2, #1
 80025d4:	3a01      	subs	r2, #1
 80025d6:	0552      	lsls	r2, r2, #21
 80025d8:	4311      	orrs	r1, r2
 80025da:	687a      	ldr	r2, [r7, #4]
 80025dc:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80025de:	0852      	lsrs	r2, r2, #1
 80025e0:	3a01      	subs	r2, #1
 80025e2:	0652      	lsls	r2, r2, #25
 80025e4:	4311      	orrs	r1, r2
 80025e6:	687a      	ldr	r2, [r7, #4]
 80025e8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80025ea:	06d2      	lsls	r2, r2, #27
 80025ec:	430a      	orrs	r2, r1
 80025ee:	4943      	ldr	r1, [pc, #268]	@ (80026fc <HAL_RCC_OscConfig+0x618>)
 80025f0:	4313      	orrs	r3, r2
 80025f2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025f4:	4b41      	ldr	r3, [pc, #260]	@ (80026fc <HAL_RCC_OscConfig+0x618>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a40      	ldr	r2, [pc, #256]	@ (80026fc <HAL_RCC_OscConfig+0x618>)
 80025fa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80025fe:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002600:	4b3e      	ldr	r3, [pc, #248]	@ (80026fc <HAL_RCC_OscConfig+0x618>)
 8002602:	68db      	ldr	r3, [r3, #12]
 8002604:	4a3d      	ldr	r2, [pc, #244]	@ (80026fc <HAL_RCC_OscConfig+0x618>)
 8002606:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800260a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800260c:	f7fe fd70 	bl	80010f0 <HAL_GetTick>
 8002610:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002612:	e008      	b.n	8002626 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002614:	f7fe fd6c 	bl	80010f0 <HAL_GetTick>
 8002618:	4602      	mov	r2, r0
 800261a:	693b      	ldr	r3, [r7, #16]
 800261c:	1ad3      	subs	r3, r2, r3
 800261e:	2b02      	cmp	r3, #2
 8002620:	d901      	bls.n	8002626 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002622:	2303      	movs	r3, #3
 8002624:	e066      	b.n	80026f4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002626:	4b35      	ldr	r3, [pc, #212]	@ (80026fc <HAL_RCC_OscConfig+0x618>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800262e:	2b00      	cmp	r3, #0
 8002630:	d0f0      	beq.n	8002614 <HAL_RCC_OscConfig+0x530>
 8002632:	e05e      	b.n	80026f2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002634:	4b31      	ldr	r3, [pc, #196]	@ (80026fc <HAL_RCC_OscConfig+0x618>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a30      	ldr	r2, [pc, #192]	@ (80026fc <HAL_RCC_OscConfig+0x618>)
 800263a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800263e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002640:	f7fe fd56 	bl	80010f0 <HAL_GetTick>
 8002644:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002646:	e008      	b.n	800265a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002648:	f7fe fd52 	bl	80010f0 <HAL_GetTick>
 800264c:	4602      	mov	r2, r0
 800264e:	693b      	ldr	r3, [r7, #16]
 8002650:	1ad3      	subs	r3, r2, r3
 8002652:	2b02      	cmp	r3, #2
 8002654:	d901      	bls.n	800265a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8002656:	2303      	movs	r3, #3
 8002658:	e04c      	b.n	80026f4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800265a:	4b28      	ldr	r3, [pc, #160]	@ (80026fc <HAL_RCC_OscConfig+0x618>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002662:	2b00      	cmp	r3, #0
 8002664:	d1f0      	bne.n	8002648 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002666:	4b25      	ldr	r3, [pc, #148]	@ (80026fc <HAL_RCC_OscConfig+0x618>)
 8002668:	68da      	ldr	r2, [r3, #12]
 800266a:	4924      	ldr	r1, [pc, #144]	@ (80026fc <HAL_RCC_OscConfig+0x618>)
 800266c:	4b25      	ldr	r3, [pc, #148]	@ (8002704 <HAL_RCC_OscConfig+0x620>)
 800266e:	4013      	ands	r3, r2
 8002670:	60cb      	str	r3, [r1, #12]
 8002672:	e03e      	b.n	80026f2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	69db      	ldr	r3, [r3, #28]
 8002678:	2b01      	cmp	r3, #1
 800267a:	d101      	bne.n	8002680 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800267c:	2301      	movs	r3, #1
 800267e:	e039      	b.n	80026f4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002680:	4b1e      	ldr	r3, [pc, #120]	@ (80026fc <HAL_RCC_OscConfig+0x618>)
 8002682:	68db      	ldr	r3, [r3, #12]
 8002684:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	f003 0203 	and.w	r2, r3, #3
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6a1b      	ldr	r3, [r3, #32]
 8002690:	429a      	cmp	r2, r3
 8002692:	d12c      	bne.n	80026ee <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800269e:	3b01      	subs	r3, #1
 80026a0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026a2:	429a      	cmp	r2, r3
 80026a4:	d123      	bne.n	80026ee <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80026a6:	697b      	ldr	r3, [r7, #20]
 80026a8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026b0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80026b2:	429a      	cmp	r2, r3
 80026b4:	d11b      	bne.n	80026ee <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80026b6:	697b      	ldr	r3, [r7, #20]
 80026b8:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026c0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80026c2:	429a      	cmp	r2, r3
 80026c4:	d113      	bne.n	80026ee <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80026c6:	697b      	ldr	r3, [r7, #20]
 80026c8:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026d0:	085b      	lsrs	r3, r3, #1
 80026d2:	3b01      	subs	r3, #1
 80026d4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80026d6:	429a      	cmp	r2, r3
 80026d8:	d109      	bne.n	80026ee <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80026da:	697b      	ldr	r3, [r7, #20]
 80026dc:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80026e4:	085b      	lsrs	r3, r3, #1
 80026e6:	3b01      	subs	r3, #1
 80026e8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80026ea:	429a      	cmp	r2, r3
 80026ec:	d001      	beq.n	80026f2 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80026ee:	2301      	movs	r3, #1
 80026f0:	e000      	b.n	80026f4 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80026f2:	2300      	movs	r3, #0
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	3720      	adds	r7, #32
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bd80      	pop	{r7, pc}
 80026fc:	40021000 	.word	0x40021000
 8002700:	019f800c 	.word	0x019f800c
 8002704:	feeefffc 	.word	0xfeeefffc

08002708 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b086      	sub	sp, #24
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
 8002710:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002712:	2300      	movs	r3, #0
 8002714:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d101      	bne.n	8002720 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800271c:	2301      	movs	r3, #1
 800271e:	e11e      	b.n	800295e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002720:	4b91      	ldr	r3, [pc, #580]	@ (8002968 <HAL_RCC_ClockConfig+0x260>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f003 030f 	and.w	r3, r3, #15
 8002728:	683a      	ldr	r2, [r7, #0]
 800272a:	429a      	cmp	r2, r3
 800272c:	d910      	bls.n	8002750 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800272e:	4b8e      	ldr	r3, [pc, #568]	@ (8002968 <HAL_RCC_ClockConfig+0x260>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f023 020f 	bic.w	r2, r3, #15
 8002736:	498c      	ldr	r1, [pc, #560]	@ (8002968 <HAL_RCC_ClockConfig+0x260>)
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	4313      	orrs	r3, r2
 800273c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800273e:	4b8a      	ldr	r3, [pc, #552]	@ (8002968 <HAL_RCC_ClockConfig+0x260>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f003 030f 	and.w	r3, r3, #15
 8002746:	683a      	ldr	r2, [r7, #0]
 8002748:	429a      	cmp	r2, r3
 800274a:	d001      	beq.n	8002750 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800274c:	2301      	movs	r3, #1
 800274e:	e106      	b.n	800295e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f003 0301 	and.w	r3, r3, #1
 8002758:	2b00      	cmp	r3, #0
 800275a:	d073      	beq.n	8002844 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	2b03      	cmp	r3, #3
 8002762:	d129      	bne.n	80027b8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002764:	4b81      	ldr	r3, [pc, #516]	@ (800296c <HAL_RCC_ClockConfig+0x264>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800276c:	2b00      	cmp	r3, #0
 800276e:	d101      	bne.n	8002774 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002770:	2301      	movs	r3, #1
 8002772:	e0f4      	b.n	800295e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002774:	f000 f99e 	bl	8002ab4 <RCC_GetSysClockFreqFromPLLSource>
 8002778:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	4a7c      	ldr	r2, [pc, #496]	@ (8002970 <HAL_RCC_ClockConfig+0x268>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d93f      	bls.n	8002802 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002782:	4b7a      	ldr	r3, [pc, #488]	@ (800296c <HAL_RCC_ClockConfig+0x264>)
 8002784:	689b      	ldr	r3, [r3, #8]
 8002786:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800278a:	2b00      	cmp	r3, #0
 800278c:	d009      	beq.n	80027a2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002796:	2b00      	cmp	r3, #0
 8002798:	d033      	beq.n	8002802 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d12f      	bne.n	8002802 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80027a2:	4b72      	ldr	r3, [pc, #456]	@ (800296c <HAL_RCC_ClockConfig+0x264>)
 80027a4:	689b      	ldr	r3, [r3, #8]
 80027a6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80027aa:	4a70      	ldr	r2, [pc, #448]	@ (800296c <HAL_RCC_ClockConfig+0x264>)
 80027ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80027b0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80027b2:	2380      	movs	r3, #128	@ 0x80
 80027b4:	617b      	str	r3, [r7, #20]
 80027b6:	e024      	b.n	8002802 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	2b02      	cmp	r3, #2
 80027be:	d107      	bne.n	80027d0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80027c0:	4b6a      	ldr	r3, [pc, #424]	@ (800296c <HAL_RCC_ClockConfig+0x264>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d109      	bne.n	80027e0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80027cc:	2301      	movs	r3, #1
 80027ce:	e0c6      	b.n	800295e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80027d0:	4b66      	ldr	r3, [pc, #408]	@ (800296c <HAL_RCC_ClockConfig+0x264>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d101      	bne.n	80027e0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80027dc:	2301      	movs	r3, #1
 80027de:	e0be      	b.n	800295e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80027e0:	f000 f8ce 	bl	8002980 <HAL_RCC_GetSysClockFreq>
 80027e4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80027e6:	693b      	ldr	r3, [r7, #16]
 80027e8:	4a61      	ldr	r2, [pc, #388]	@ (8002970 <HAL_RCC_ClockConfig+0x268>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d909      	bls.n	8002802 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80027ee:	4b5f      	ldr	r3, [pc, #380]	@ (800296c <HAL_RCC_ClockConfig+0x264>)
 80027f0:	689b      	ldr	r3, [r3, #8]
 80027f2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80027f6:	4a5d      	ldr	r2, [pc, #372]	@ (800296c <HAL_RCC_ClockConfig+0x264>)
 80027f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80027fc:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80027fe:	2380      	movs	r3, #128	@ 0x80
 8002800:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002802:	4b5a      	ldr	r3, [pc, #360]	@ (800296c <HAL_RCC_ClockConfig+0x264>)
 8002804:	689b      	ldr	r3, [r3, #8]
 8002806:	f023 0203 	bic.w	r2, r3, #3
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	4957      	ldr	r1, [pc, #348]	@ (800296c <HAL_RCC_ClockConfig+0x264>)
 8002810:	4313      	orrs	r3, r2
 8002812:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002814:	f7fe fc6c 	bl	80010f0 <HAL_GetTick>
 8002818:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800281a:	e00a      	b.n	8002832 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800281c:	f7fe fc68 	bl	80010f0 <HAL_GetTick>
 8002820:	4602      	mov	r2, r0
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	1ad3      	subs	r3, r2, r3
 8002826:	f241 3288 	movw	r2, #5000	@ 0x1388
 800282a:	4293      	cmp	r3, r2
 800282c:	d901      	bls.n	8002832 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800282e:	2303      	movs	r3, #3
 8002830:	e095      	b.n	800295e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002832:	4b4e      	ldr	r3, [pc, #312]	@ (800296c <HAL_RCC_ClockConfig+0x264>)
 8002834:	689b      	ldr	r3, [r3, #8]
 8002836:	f003 020c 	and.w	r2, r3, #12
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	009b      	lsls	r3, r3, #2
 8002840:	429a      	cmp	r2, r3
 8002842:	d1eb      	bne.n	800281c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f003 0302 	and.w	r3, r3, #2
 800284c:	2b00      	cmp	r3, #0
 800284e:	d023      	beq.n	8002898 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f003 0304 	and.w	r3, r3, #4
 8002858:	2b00      	cmp	r3, #0
 800285a:	d005      	beq.n	8002868 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800285c:	4b43      	ldr	r3, [pc, #268]	@ (800296c <HAL_RCC_ClockConfig+0x264>)
 800285e:	689b      	ldr	r3, [r3, #8]
 8002860:	4a42      	ldr	r2, [pc, #264]	@ (800296c <HAL_RCC_ClockConfig+0x264>)
 8002862:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002866:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f003 0308 	and.w	r3, r3, #8
 8002870:	2b00      	cmp	r3, #0
 8002872:	d007      	beq.n	8002884 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002874:	4b3d      	ldr	r3, [pc, #244]	@ (800296c <HAL_RCC_ClockConfig+0x264>)
 8002876:	689b      	ldr	r3, [r3, #8]
 8002878:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800287c:	4a3b      	ldr	r2, [pc, #236]	@ (800296c <HAL_RCC_ClockConfig+0x264>)
 800287e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002882:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002884:	4b39      	ldr	r3, [pc, #228]	@ (800296c <HAL_RCC_ClockConfig+0x264>)
 8002886:	689b      	ldr	r3, [r3, #8]
 8002888:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	689b      	ldr	r3, [r3, #8]
 8002890:	4936      	ldr	r1, [pc, #216]	@ (800296c <HAL_RCC_ClockConfig+0x264>)
 8002892:	4313      	orrs	r3, r2
 8002894:	608b      	str	r3, [r1, #8]
 8002896:	e008      	b.n	80028aa <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	2b80      	cmp	r3, #128	@ 0x80
 800289c:	d105      	bne.n	80028aa <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800289e:	4b33      	ldr	r3, [pc, #204]	@ (800296c <HAL_RCC_ClockConfig+0x264>)
 80028a0:	689b      	ldr	r3, [r3, #8]
 80028a2:	4a32      	ldr	r2, [pc, #200]	@ (800296c <HAL_RCC_ClockConfig+0x264>)
 80028a4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80028a8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80028aa:	4b2f      	ldr	r3, [pc, #188]	@ (8002968 <HAL_RCC_ClockConfig+0x260>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f003 030f 	and.w	r3, r3, #15
 80028b2:	683a      	ldr	r2, [r7, #0]
 80028b4:	429a      	cmp	r2, r3
 80028b6:	d21d      	bcs.n	80028f4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028b8:	4b2b      	ldr	r3, [pc, #172]	@ (8002968 <HAL_RCC_ClockConfig+0x260>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f023 020f 	bic.w	r2, r3, #15
 80028c0:	4929      	ldr	r1, [pc, #164]	@ (8002968 <HAL_RCC_ClockConfig+0x260>)
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	4313      	orrs	r3, r2
 80028c6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80028c8:	f7fe fc12 	bl	80010f0 <HAL_GetTick>
 80028cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028ce:	e00a      	b.n	80028e6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028d0:	f7fe fc0e 	bl	80010f0 <HAL_GetTick>
 80028d4:	4602      	mov	r2, r0
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	1ad3      	subs	r3, r2, r3
 80028da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028de:	4293      	cmp	r3, r2
 80028e0:	d901      	bls.n	80028e6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80028e2:	2303      	movs	r3, #3
 80028e4:	e03b      	b.n	800295e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028e6:	4b20      	ldr	r3, [pc, #128]	@ (8002968 <HAL_RCC_ClockConfig+0x260>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f003 030f 	and.w	r3, r3, #15
 80028ee:	683a      	ldr	r2, [r7, #0]
 80028f0:	429a      	cmp	r2, r3
 80028f2:	d1ed      	bne.n	80028d0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f003 0304 	and.w	r3, r3, #4
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d008      	beq.n	8002912 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002900:	4b1a      	ldr	r3, [pc, #104]	@ (800296c <HAL_RCC_ClockConfig+0x264>)
 8002902:	689b      	ldr	r3, [r3, #8]
 8002904:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	68db      	ldr	r3, [r3, #12]
 800290c:	4917      	ldr	r1, [pc, #92]	@ (800296c <HAL_RCC_ClockConfig+0x264>)
 800290e:	4313      	orrs	r3, r2
 8002910:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f003 0308 	and.w	r3, r3, #8
 800291a:	2b00      	cmp	r3, #0
 800291c:	d009      	beq.n	8002932 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800291e:	4b13      	ldr	r3, [pc, #76]	@ (800296c <HAL_RCC_ClockConfig+0x264>)
 8002920:	689b      	ldr	r3, [r3, #8]
 8002922:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	691b      	ldr	r3, [r3, #16]
 800292a:	00db      	lsls	r3, r3, #3
 800292c:	490f      	ldr	r1, [pc, #60]	@ (800296c <HAL_RCC_ClockConfig+0x264>)
 800292e:	4313      	orrs	r3, r2
 8002930:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002932:	f000 f825 	bl	8002980 <HAL_RCC_GetSysClockFreq>
 8002936:	4602      	mov	r2, r0
 8002938:	4b0c      	ldr	r3, [pc, #48]	@ (800296c <HAL_RCC_ClockConfig+0x264>)
 800293a:	689b      	ldr	r3, [r3, #8]
 800293c:	091b      	lsrs	r3, r3, #4
 800293e:	f003 030f 	and.w	r3, r3, #15
 8002942:	490c      	ldr	r1, [pc, #48]	@ (8002974 <HAL_RCC_ClockConfig+0x26c>)
 8002944:	5ccb      	ldrb	r3, [r1, r3]
 8002946:	f003 031f 	and.w	r3, r3, #31
 800294a:	fa22 f303 	lsr.w	r3, r2, r3
 800294e:	4a0a      	ldr	r2, [pc, #40]	@ (8002978 <HAL_RCC_ClockConfig+0x270>)
 8002950:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002952:	4b0a      	ldr	r3, [pc, #40]	@ (800297c <HAL_RCC_ClockConfig+0x274>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4618      	mov	r0, r3
 8002958:	f7fe fb7e 	bl	8001058 <HAL_InitTick>
 800295c:	4603      	mov	r3, r0
}
 800295e:	4618      	mov	r0, r3
 8002960:	3718      	adds	r7, #24
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}
 8002966:	bf00      	nop
 8002968:	40022000 	.word	0x40022000
 800296c:	40021000 	.word	0x40021000
 8002970:	04c4b400 	.word	0x04c4b400
 8002974:	08004b98 	.word	0x08004b98
 8002978:	20000034 	.word	0x20000034
 800297c:	20000038 	.word	0x20000038

08002980 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002980:	b480      	push	{r7}
 8002982:	b087      	sub	sp, #28
 8002984:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002986:	4b2c      	ldr	r3, [pc, #176]	@ (8002a38 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002988:	689b      	ldr	r3, [r3, #8]
 800298a:	f003 030c 	and.w	r3, r3, #12
 800298e:	2b04      	cmp	r3, #4
 8002990:	d102      	bne.n	8002998 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002992:	4b2a      	ldr	r3, [pc, #168]	@ (8002a3c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002994:	613b      	str	r3, [r7, #16]
 8002996:	e047      	b.n	8002a28 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002998:	4b27      	ldr	r3, [pc, #156]	@ (8002a38 <HAL_RCC_GetSysClockFreq+0xb8>)
 800299a:	689b      	ldr	r3, [r3, #8]
 800299c:	f003 030c 	and.w	r3, r3, #12
 80029a0:	2b08      	cmp	r3, #8
 80029a2:	d102      	bne.n	80029aa <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80029a4:	4b26      	ldr	r3, [pc, #152]	@ (8002a40 <HAL_RCC_GetSysClockFreq+0xc0>)
 80029a6:	613b      	str	r3, [r7, #16]
 80029a8:	e03e      	b.n	8002a28 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80029aa:	4b23      	ldr	r3, [pc, #140]	@ (8002a38 <HAL_RCC_GetSysClockFreq+0xb8>)
 80029ac:	689b      	ldr	r3, [r3, #8]
 80029ae:	f003 030c 	and.w	r3, r3, #12
 80029b2:	2b0c      	cmp	r3, #12
 80029b4:	d136      	bne.n	8002a24 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80029b6:	4b20      	ldr	r3, [pc, #128]	@ (8002a38 <HAL_RCC_GetSysClockFreq+0xb8>)
 80029b8:	68db      	ldr	r3, [r3, #12]
 80029ba:	f003 0303 	and.w	r3, r3, #3
 80029be:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80029c0:	4b1d      	ldr	r3, [pc, #116]	@ (8002a38 <HAL_RCC_GetSysClockFreq+0xb8>)
 80029c2:	68db      	ldr	r3, [r3, #12]
 80029c4:	091b      	lsrs	r3, r3, #4
 80029c6:	f003 030f 	and.w	r3, r3, #15
 80029ca:	3301      	adds	r3, #1
 80029cc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	2b03      	cmp	r3, #3
 80029d2:	d10c      	bne.n	80029ee <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80029d4:	4a1a      	ldr	r2, [pc, #104]	@ (8002a40 <HAL_RCC_GetSysClockFreq+0xc0>)
 80029d6:	68bb      	ldr	r3, [r7, #8]
 80029d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80029dc:	4a16      	ldr	r2, [pc, #88]	@ (8002a38 <HAL_RCC_GetSysClockFreq+0xb8>)
 80029de:	68d2      	ldr	r2, [r2, #12]
 80029e0:	0a12      	lsrs	r2, r2, #8
 80029e2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80029e6:	fb02 f303 	mul.w	r3, r2, r3
 80029ea:	617b      	str	r3, [r7, #20]
      break;
 80029ec:	e00c      	b.n	8002a08 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80029ee:	4a13      	ldr	r2, [pc, #76]	@ (8002a3c <HAL_RCC_GetSysClockFreq+0xbc>)
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80029f6:	4a10      	ldr	r2, [pc, #64]	@ (8002a38 <HAL_RCC_GetSysClockFreq+0xb8>)
 80029f8:	68d2      	ldr	r2, [r2, #12]
 80029fa:	0a12      	lsrs	r2, r2, #8
 80029fc:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002a00:	fb02 f303 	mul.w	r3, r2, r3
 8002a04:	617b      	str	r3, [r7, #20]
      break;
 8002a06:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002a08:	4b0b      	ldr	r3, [pc, #44]	@ (8002a38 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a0a:	68db      	ldr	r3, [r3, #12]
 8002a0c:	0e5b      	lsrs	r3, r3, #25
 8002a0e:	f003 0303 	and.w	r3, r3, #3
 8002a12:	3301      	adds	r3, #1
 8002a14:	005b      	lsls	r3, r3, #1
 8002a16:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002a18:	697a      	ldr	r2, [r7, #20]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a20:	613b      	str	r3, [r7, #16]
 8002a22:	e001      	b.n	8002a28 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002a24:	2300      	movs	r3, #0
 8002a26:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002a28:	693b      	ldr	r3, [r7, #16]
}
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	371c      	adds	r7, #28
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a34:	4770      	bx	lr
 8002a36:	bf00      	nop
 8002a38:	40021000 	.word	0x40021000
 8002a3c:	00f42400 	.word	0x00f42400
 8002a40:	007a1200 	.word	0x007a1200

08002a44 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a44:	b480      	push	{r7}
 8002a46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a48:	4b03      	ldr	r3, [pc, #12]	@ (8002a58 <HAL_RCC_GetHCLKFreq+0x14>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
}
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a54:	4770      	bx	lr
 8002a56:	bf00      	nop
 8002a58:	20000034 	.word	0x20000034

08002a5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002a60:	f7ff fff0 	bl	8002a44 <HAL_RCC_GetHCLKFreq>
 8002a64:	4602      	mov	r2, r0
 8002a66:	4b06      	ldr	r3, [pc, #24]	@ (8002a80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a68:	689b      	ldr	r3, [r3, #8]
 8002a6a:	0a1b      	lsrs	r3, r3, #8
 8002a6c:	f003 0307 	and.w	r3, r3, #7
 8002a70:	4904      	ldr	r1, [pc, #16]	@ (8002a84 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002a72:	5ccb      	ldrb	r3, [r1, r3]
 8002a74:	f003 031f 	and.w	r3, r3, #31
 8002a78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	bd80      	pop	{r7, pc}
 8002a80:	40021000 	.word	0x40021000
 8002a84:	08004ba8 	.word	0x08004ba8

08002a88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002a8c:	f7ff ffda 	bl	8002a44 <HAL_RCC_GetHCLKFreq>
 8002a90:	4602      	mov	r2, r0
 8002a92:	4b06      	ldr	r3, [pc, #24]	@ (8002aac <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a94:	689b      	ldr	r3, [r3, #8]
 8002a96:	0adb      	lsrs	r3, r3, #11
 8002a98:	f003 0307 	and.w	r3, r3, #7
 8002a9c:	4904      	ldr	r1, [pc, #16]	@ (8002ab0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002a9e:	5ccb      	ldrb	r3, [r1, r3]
 8002aa0:	f003 031f 	and.w	r3, r3, #31
 8002aa4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	bd80      	pop	{r7, pc}
 8002aac:	40021000 	.word	0x40021000
 8002ab0:	08004ba8 	.word	0x08004ba8

08002ab4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b087      	sub	sp, #28
 8002ab8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002aba:	4b1e      	ldr	r3, [pc, #120]	@ (8002b34 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002abc:	68db      	ldr	r3, [r3, #12]
 8002abe:	f003 0303 	and.w	r3, r3, #3
 8002ac2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002ac4:	4b1b      	ldr	r3, [pc, #108]	@ (8002b34 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002ac6:	68db      	ldr	r3, [r3, #12]
 8002ac8:	091b      	lsrs	r3, r3, #4
 8002aca:	f003 030f 	and.w	r3, r3, #15
 8002ace:	3301      	adds	r3, #1
 8002ad0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002ad2:	693b      	ldr	r3, [r7, #16]
 8002ad4:	2b03      	cmp	r3, #3
 8002ad6:	d10c      	bne.n	8002af2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002ad8:	4a17      	ldr	r2, [pc, #92]	@ (8002b38 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ae0:	4a14      	ldr	r2, [pc, #80]	@ (8002b34 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002ae2:	68d2      	ldr	r2, [r2, #12]
 8002ae4:	0a12      	lsrs	r2, r2, #8
 8002ae6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002aea:	fb02 f303 	mul.w	r3, r2, r3
 8002aee:	617b      	str	r3, [r7, #20]
    break;
 8002af0:	e00c      	b.n	8002b0c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002af2:	4a12      	ldr	r2, [pc, #72]	@ (8002b3c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002afa:	4a0e      	ldr	r2, [pc, #56]	@ (8002b34 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002afc:	68d2      	ldr	r2, [r2, #12]
 8002afe:	0a12      	lsrs	r2, r2, #8
 8002b00:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002b04:	fb02 f303 	mul.w	r3, r2, r3
 8002b08:	617b      	str	r3, [r7, #20]
    break;
 8002b0a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002b0c:	4b09      	ldr	r3, [pc, #36]	@ (8002b34 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002b0e:	68db      	ldr	r3, [r3, #12]
 8002b10:	0e5b      	lsrs	r3, r3, #25
 8002b12:	f003 0303 	and.w	r3, r3, #3
 8002b16:	3301      	adds	r3, #1
 8002b18:	005b      	lsls	r3, r3, #1
 8002b1a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002b1c:	697a      	ldr	r2, [r7, #20]
 8002b1e:	68bb      	ldr	r3, [r7, #8]
 8002b20:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b24:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002b26:	687b      	ldr	r3, [r7, #4]
}
 8002b28:	4618      	mov	r0, r3
 8002b2a:	371c      	adds	r7, #28
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b32:	4770      	bx	lr
 8002b34:	40021000 	.word	0x40021000
 8002b38:	007a1200 	.word	0x007a1200
 8002b3c:	00f42400 	.word	0x00f42400

08002b40 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b086      	sub	sp, #24
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002b48:	2300      	movs	r3, #0
 8002b4a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	f000 8098 	beq.w	8002c8e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b62:	4b43      	ldr	r3, [pc, #268]	@ (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d10d      	bne.n	8002b8a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b6e:	4b40      	ldr	r3, [pc, #256]	@ (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b72:	4a3f      	ldr	r2, [pc, #252]	@ (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b74:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b78:	6593      	str	r3, [r2, #88]	@ 0x58
 8002b7a:	4b3d      	ldr	r3, [pc, #244]	@ (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b82:	60bb      	str	r3, [r7, #8]
 8002b84:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b86:	2301      	movs	r3, #1
 8002b88:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002b8a:	4b3a      	ldr	r3, [pc, #232]	@ (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4a39      	ldr	r2, [pc, #228]	@ (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002b90:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b94:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002b96:	f7fe faab 	bl	80010f0 <HAL_GetTick>
 8002b9a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002b9c:	e009      	b.n	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b9e:	f7fe faa7 	bl	80010f0 <HAL_GetTick>
 8002ba2:	4602      	mov	r2, r0
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	1ad3      	subs	r3, r2, r3
 8002ba8:	2b02      	cmp	r3, #2
 8002baa:	d902      	bls.n	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002bac:	2303      	movs	r3, #3
 8002bae:	74fb      	strb	r3, [r7, #19]
        break;
 8002bb0:	e005      	b.n	8002bbe <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002bb2:	4b30      	ldr	r3, [pc, #192]	@ (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d0ef      	beq.n	8002b9e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002bbe:	7cfb      	ldrb	r3, [r7, #19]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d159      	bne.n	8002c78 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002bc4:	4b2a      	ldr	r3, [pc, #168]	@ (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002bc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002bce:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002bd0:	697b      	ldr	r3, [r7, #20]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d01e      	beq.n	8002c14 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bda:	697a      	ldr	r2, [r7, #20]
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	d019      	beq.n	8002c14 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002be0:	4b23      	ldr	r3, [pc, #140]	@ (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002be2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002be6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002bea:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002bec:	4b20      	ldr	r3, [pc, #128]	@ (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002bee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bf2:	4a1f      	ldr	r2, [pc, #124]	@ (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002bf4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002bf8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002bfc:	4b1c      	ldr	r3, [pc, #112]	@ (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002bfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c02:	4a1b      	ldr	r2, [pc, #108]	@ (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c04:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c08:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002c0c:	4a18      	ldr	r2, [pc, #96]	@ (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c0e:	697b      	ldr	r3, [r7, #20]
 8002c10:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	f003 0301 	and.w	r3, r3, #1
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d016      	beq.n	8002c4c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c1e:	f7fe fa67 	bl	80010f0 <HAL_GetTick>
 8002c22:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c24:	e00b      	b.n	8002c3e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c26:	f7fe fa63 	bl	80010f0 <HAL_GetTick>
 8002c2a:	4602      	mov	r2, r0
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	1ad3      	subs	r3, r2, r3
 8002c30:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d902      	bls.n	8002c3e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002c38:	2303      	movs	r3, #3
 8002c3a:	74fb      	strb	r3, [r7, #19]
            break;
 8002c3c:	e006      	b.n	8002c4c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c3e:	4b0c      	ldr	r3, [pc, #48]	@ (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c44:	f003 0302 	and.w	r3, r3, #2
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d0ec      	beq.n	8002c26 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002c4c:	7cfb      	ldrb	r3, [r7, #19]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d10b      	bne.n	8002c6a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c52:	4b07      	ldr	r3, [pc, #28]	@ (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c58:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c60:	4903      	ldr	r1, [pc, #12]	@ (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c62:	4313      	orrs	r3, r2
 8002c64:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002c68:	e008      	b.n	8002c7c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002c6a:	7cfb      	ldrb	r3, [r7, #19]
 8002c6c:	74bb      	strb	r3, [r7, #18]
 8002c6e:	e005      	b.n	8002c7c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002c70:	40021000 	.word	0x40021000
 8002c74:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c78:	7cfb      	ldrb	r3, [r7, #19]
 8002c7a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c7c:	7c7b      	ldrb	r3, [r7, #17]
 8002c7e:	2b01      	cmp	r3, #1
 8002c80:	d105      	bne.n	8002c8e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c82:	4ba6      	ldr	r3, [pc, #664]	@ (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c86:	4aa5      	ldr	r2, [pc, #660]	@ (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c88:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002c8c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f003 0301 	and.w	r3, r3, #1
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d00a      	beq.n	8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002c9a:	4ba0      	ldr	r3, [pc, #640]	@ (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ca0:	f023 0203 	bic.w	r2, r3, #3
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	499c      	ldr	r1, [pc, #624]	@ (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002caa:	4313      	orrs	r3, r2
 8002cac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f003 0302 	and.w	r3, r3, #2
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d00a      	beq.n	8002cd2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002cbc:	4b97      	ldr	r3, [pc, #604]	@ (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002cbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cc2:	f023 020c 	bic.w	r2, r3, #12
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	689b      	ldr	r3, [r3, #8]
 8002cca:	4994      	ldr	r1, [pc, #592]	@ (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f003 0304 	and.w	r3, r3, #4
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d00a      	beq.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002cde:	4b8f      	ldr	r3, [pc, #572]	@ (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ce0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ce4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	68db      	ldr	r3, [r3, #12]
 8002cec:	498b      	ldr	r1, [pc, #556]	@ (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f003 0308 	and.w	r3, r3, #8
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d00a      	beq.n	8002d16 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002d00:	4b86      	ldr	r3, [pc, #536]	@ (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d06:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	691b      	ldr	r3, [r3, #16]
 8002d0e:	4983      	ldr	r1, [pc, #524]	@ (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d10:	4313      	orrs	r3, r2
 8002d12:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f003 0320 	and.w	r3, r3, #32
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d00a      	beq.n	8002d38 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002d22:	4b7e      	ldr	r3, [pc, #504]	@ (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d28:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	695b      	ldr	r3, [r3, #20]
 8002d30:	497a      	ldr	r1, [pc, #488]	@ (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d32:	4313      	orrs	r3, r2
 8002d34:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d00a      	beq.n	8002d5a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002d44:	4b75      	ldr	r3, [pc, #468]	@ (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d4a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	699b      	ldr	r3, [r3, #24]
 8002d52:	4972      	ldr	r1, [pc, #456]	@ (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d54:	4313      	orrs	r3, r2
 8002d56:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d00a      	beq.n	8002d7c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002d66:	4b6d      	ldr	r3, [pc, #436]	@ (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d6c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	69db      	ldr	r3, [r3, #28]
 8002d74:	4969      	ldr	r1, [pc, #420]	@ (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d76:	4313      	orrs	r3, r2
 8002d78:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d00a      	beq.n	8002d9e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002d88:	4b64      	ldr	r3, [pc, #400]	@ (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d8e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6a1b      	ldr	r3, [r3, #32]
 8002d96:	4961      	ldr	r1, [pc, #388]	@ (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d00a      	beq.n	8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002daa:	4b5c      	ldr	r3, [pc, #368]	@ (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002dac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002db0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002db8:	4958      	ldr	r1, [pc, #352]	@ (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d015      	beq.n	8002df8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002dcc:	4b53      	ldr	r3, [pc, #332]	@ (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002dce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002dd2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dda:	4950      	ldr	r1, [pc, #320]	@ (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002de6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002dea:	d105      	bne.n	8002df8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002dec:	4b4b      	ldr	r3, [pc, #300]	@ (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002dee:	68db      	ldr	r3, [r3, #12]
 8002df0:	4a4a      	ldr	r2, [pc, #296]	@ (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002df2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002df6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d015      	beq.n	8002e30 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002e04:	4b45      	ldr	r3, [pc, #276]	@ (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e0a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e12:	4942      	ldr	r1, [pc, #264]	@ (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e14:	4313      	orrs	r3, r2
 8002e16:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e1e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002e22:	d105      	bne.n	8002e30 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e24:	4b3d      	ldr	r3, [pc, #244]	@ (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e26:	68db      	ldr	r3, [r3, #12]
 8002e28:	4a3c      	ldr	r2, [pc, #240]	@ (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e2a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002e2e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d015      	beq.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002e3c:	4b37      	ldr	r3, [pc, #220]	@ (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e42:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e4a:	4934      	ldr	r1, [pc, #208]	@ (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e56:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002e5a:	d105      	bne.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e5c:	4b2f      	ldr	r3, [pc, #188]	@ (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e5e:	68db      	ldr	r3, [r3, #12]
 8002e60:	4a2e      	ldr	r2, [pc, #184]	@ (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e62:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002e66:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d015      	beq.n	8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002e74:	4b29      	ldr	r3, [pc, #164]	@ (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e7a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e82:	4926      	ldr	r1, [pc, #152]	@ (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e84:	4313      	orrs	r3, r2
 8002e86:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e8e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002e92:	d105      	bne.n	8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e94:	4b21      	ldr	r3, [pc, #132]	@ (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e96:	68db      	ldr	r3, [r3, #12]
 8002e98:	4a20      	ldr	r2, [pc, #128]	@ (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e9a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002e9e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d015      	beq.n	8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002eac:	4b1b      	ldr	r3, [pc, #108]	@ (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002eae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002eb2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002eba:	4918      	ldr	r1, [pc, #96]	@ (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ec6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002eca:	d105      	bne.n	8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ecc:	4b13      	ldr	r3, [pc, #76]	@ (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ece:	68db      	ldr	r3, [r3, #12]
 8002ed0:	4a12      	ldr	r2, [pc, #72]	@ (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ed2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002ed6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d015      	beq.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002ee4:	4b0d      	ldr	r3, [pc, #52]	@ (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ee6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002eea:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ef2:	490a      	ldr	r1, [pc, #40]	@ (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002efe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002f02:	d105      	bne.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002f04:	4b05      	ldr	r3, [pc, #20]	@ (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f06:	68db      	ldr	r3, [r3, #12]
 8002f08:	4a04      	ldr	r2, [pc, #16]	@ (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f0a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f0e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002f10:	7cbb      	ldrb	r3, [r7, #18]
}
 8002f12:	4618      	mov	r0, r3
 8002f14:	3718      	adds	r7, #24
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}
 8002f1a:	bf00      	nop
 8002f1c:	40021000 	.word	0x40021000

08002f20 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b082      	sub	sp, #8
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d101      	bne.n	8002f32 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e049      	b.n	8002fc6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f38:	b2db      	uxtb	r3, r3
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d106      	bne.n	8002f4c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2200      	movs	r2, #0
 8002f42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002f46:	6878      	ldr	r0, [r7, #4]
 8002f48:	f7fd fea0 	bl	8000c8c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2202      	movs	r2, #2
 8002f50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681a      	ldr	r2, [r3, #0]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	3304      	adds	r3, #4
 8002f5c:	4619      	mov	r1, r3
 8002f5e:	4610      	mov	r0, r2
 8002f60:	f000 f9f0 	bl	8003344 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2201      	movs	r2, #1
 8002f68:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2201      	movs	r2, #1
 8002f70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2201      	movs	r2, #1
 8002f78:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2201      	movs	r2, #1
 8002f80:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2201      	movs	r2, #1
 8002f88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2201      	movs	r2, #1
 8002f90:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2201      	movs	r2, #1
 8002f98:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2201      	movs	r2, #1
 8002fa0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2201      	movs	r2, #1
 8002fb0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2201      	movs	r2, #1
 8002fb8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002fc4:	2300      	movs	r3, #0
}
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	3708      	adds	r7, #8
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bd80      	pop	{r7, pc}

08002fce <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8002fce:	b580      	push	{r7, lr}
 8002fd0:	b086      	sub	sp, #24
 8002fd2:	af00      	add	r7, sp, #0
 8002fd4:	6078      	str	r0, [r7, #4]
 8002fd6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d101      	bne.n	8002fe2 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	e097      	b.n	8003112 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002fe8:	b2db      	uxtb	r3, r3
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d106      	bne.n	8002ffc <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8002ff6:	6878      	ldr	r0, [r7, #4]
 8002ff8:	f7fd fdb6 	bl	8000b68 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2202      	movs	r2, #2
 8003000:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	689b      	ldr	r3, [r3, #8]
 800300a:	687a      	ldr	r2, [r7, #4]
 800300c:	6812      	ldr	r2, [r2, #0]
 800300e:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8003012:	f023 0307 	bic.w	r3, r3, #7
 8003016:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681a      	ldr	r2, [r3, #0]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	3304      	adds	r3, #4
 8003020:	4619      	mov	r1, r3
 8003022:	4610      	mov	r0, r2
 8003024:	f000 f98e 	bl	8003344 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	689b      	ldr	r3, [r3, #8]
 800302e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	699b      	ldr	r3, [r3, #24]
 8003036:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	6a1b      	ldr	r3, [r3, #32]
 800303e:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	697a      	ldr	r2, [r7, #20]
 8003046:	4313      	orrs	r3, r2
 8003048:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003050:	f023 0303 	bic.w	r3, r3, #3
 8003054:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	689a      	ldr	r2, [r3, #8]
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	699b      	ldr	r3, [r3, #24]
 800305e:	021b      	lsls	r3, r3, #8
 8003060:	4313      	orrs	r3, r2
 8003062:	693a      	ldr	r2, [r7, #16]
 8003064:	4313      	orrs	r3, r2
 8003066:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003068:	693b      	ldr	r3, [r7, #16]
 800306a:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800306e:	f023 030c 	bic.w	r3, r3, #12
 8003072:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003074:	693b      	ldr	r3, [r7, #16]
 8003076:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800307a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800307e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	68da      	ldr	r2, [r3, #12]
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	69db      	ldr	r3, [r3, #28]
 8003088:	021b      	lsls	r3, r3, #8
 800308a:	4313      	orrs	r3, r2
 800308c:	693a      	ldr	r2, [r7, #16]
 800308e:	4313      	orrs	r3, r2
 8003090:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	691b      	ldr	r3, [r3, #16]
 8003096:	011a      	lsls	r2, r3, #4
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	6a1b      	ldr	r3, [r3, #32]
 800309c:	031b      	lsls	r3, r3, #12
 800309e:	4313      	orrs	r3, r2
 80030a0:	693a      	ldr	r2, [r7, #16]
 80030a2:	4313      	orrs	r3, r2
 80030a4:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80030ac:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 80030b4:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	685a      	ldr	r2, [r3, #4]
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	695b      	ldr	r3, [r3, #20]
 80030be:	011b      	lsls	r3, r3, #4
 80030c0:	4313      	orrs	r3, r2
 80030c2:	68fa      	ldr	r2, [r7, #12]
 80030c4:	4313      	orrs	r3, r2
 80030c6:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	697a      	ldr	r2, [r7, #20]
 80030ce:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	693a      	ldr	r2, [r7, #16]
 80030d6:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	68fa      	ldr	r2, [r7, #12]
 80030de:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2201      	movs	r2, #1
 80030e4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2201      	movs	r2, #1
 80030ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2201      	movs	r2, #1
 80030f4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2201      	movs	r2, #1
 80030fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2201      	movs	r2, #1
 8003104:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2201      	movs	r2, #1
 800310c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003110:	2300      	movs	r3, #0
}
 8003112:	4618      	mov	r0, r3
 8003114:	3718      	adds	r7, #24
 8003116:	46bd      	mov	sp, r7
 8003118:	bd80      	pop	{r7, pc}
	...

0800311c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b086      	sub	sp, #24
 8003120:	af00      	add	r7, sp, #0
 8003122:	60f8      	str	r0, [r7, #12]
 8003124:	60b9      	str	r1, [r7, #8]
 8003126:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003128:	2300      	movs	r3, #0
 800312a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003132:	2b01      	cmp	r3, #1
 8003134:	d101      	bne.n	800313a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003136:	2302      	movs	r3, #2
 8003138:	e0ff      	b.n	800333a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	2201      	movs	r2, #1
 800313e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2b14      	cmp	r3, #20
 8003146:	f200 80f0 	bhi.w	800332a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800314a:	a201      	add	r2, pc, #4	@ (adr r2, 8003150 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800314c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003150:	080031a5 	.word	0x080031a5
 8003154:	0800332b 	.word	0x0800332b
 8003158:	0800332b 	.word	0x0800332b
 800315c:	0800332b 	.word	0x0800332b
 8003160:	080031e5 	.word	0x080031e5
 8003164:	0800332b 	.word	0x0800332b
 8003168:	0800332b 	.word	0x0800332b
 800316c:	0800332b 	.word	0x0800332b
 8003170:	08003227 	.word	0x08003227
 8003174:	0800332b 	.word	0x0800332b
 8003178:	0800332b 	.word	0x0800332b
 800317c:	0800332b 	.word	0x0800332b
 8003180:	08003267 	.word	0x08003267
 8003184:	0800332b 	.word	0x0800332b
 8003188:	0800332b 	.word	0x0800332b
 800318c:	0800332b 	.word	0x0800332b
 8003190:	080032a9 	.word	0x080032a9
 8003194:	0800332b 	.word	0x0800332b
 8003198:	0800332b 	.word	0x0800332b
 800319c:	0800332b 	.word	0x0800332b
 80031a0:	080032e9 	.word	0x080032e9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	68b9      	ldr	r1, [r7, #8]
 80031aa:	4618      	mov	r0, r3
 80031ac:	f000 f966 	bl	800347c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	699a      	ldr	r2, [r3, #24]
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f042 0208 	orr.w	r2, r2, #8
 80031be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	699a      	ldr	r2, [r3, #24]
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f022 0204 	bic.w	r2, r2, #4
 80031ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	6999      	ldr	r1, [r3, #24]
 80031d6:	68bb      	ldr	r3, [r7, #8]
 80031d8:	691a      	ldr	r2, [r3, #16]
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	430a      	orrs	r2, r1
 80031e0:	619a      	str	r2, [r3, #24]
      break;
 80031e2:	e0a5      	b.n	8003330 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	68b9      	ldr	r1, [r7, #8]
 80031ea:	4618      	mov	r0, r3
 80031ec:	f000 f9d6 	bl	800359c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	699a      	ldr	r2, [r3, #24]
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80031fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	699a      	ldr	r2, [r3, #24]
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800320e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	6999      	ldr	r1, [r3, #24]
 8003216:	68bb      	ldr	r3, [r7, #8]
 8003218:	691b      	ldr	r3, [r3, #16]
 800321a:	021a      	lsls	r2, r3, #8
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	430a      	orrs	r2, r1
 8003222:	619a      	str	r2, [r3, #24]
      break;
 8003224:	e084      	b.n	8003330 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	68b9      	ldr	r1, [r7, #8]
 800322c:	4618      	mov	r0, r3
 800322e:	f000 fa3f 	bl	80036b0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	69da      	ldr	r2, [r3, #28]
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f042 0208 	orr.w	r2, r2, #8
 8003240:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	69da      	ldr	r2, [r3, #28]
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f022 0204 	bic.w	r2, r2, #4
 8003250:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	69d9      	ldr	r1, [r3, #28]
 8003258:	68bb      	ldr	r3, [r7, #8]
 800325a:	691a      	ldr	r2, [r3, #16]
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	430a      	orrs	r2, r1
 8003262:	61da      	str	r2, [r3, #28]
      break;
 8003264:	e064      	b.n	8003330 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	68b9      	ldr	r1, [r7, #8]
 800326c:	4618      	mov	r0, r3
 800326e:	f000 faa7 	bl	80037c0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	69da      	ldr	r2, [r3, #28]
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003280:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	69da      	ldr	r2, [r3, #28]
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003290:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	69d9      	ldr	r1, [r3, #28]
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	691b      	ldr	r3, [r3, #16]
 800329c:	021a      	lsls	r2, r3, #8
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	430a      	orrs	r2, r1
 80032a4:	61da      	str	r2, [r3, #28]
      break;
 80032a6:	e043      	b.n	8003330 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	68b9      	ldr	r1, [r7, #8]
 80032ae:	4618      	mov	r0, r3
 80032b0:	f000 fb10 	bl	80038d4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f042 0208 	orr.w	r2, r2, #8
 80032c2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f022 0204 	bic.w	r2, r2, #4
 80032d2:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80032da:	68bb      	ldr	r3, [r7, #8]
 80032dc:	691a      	ldr	r2, [r3, #16]
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	430a      	orrs	r2, r1
 80032e4:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80032e6:	e023      	b.n	8003330 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	68b9      	ldr	r1, [r7, #8]
 80032ee:	4618      	mov	r0, r3
 80032f0:	f000 fb54 	bl	800399c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003302:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003312:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800331a:	68bb      	ldr	r3, [r7, #8]
 800331c:	691b      	ldr	r3, [r3, #16]
 800331e:	021a      	lsls	r2, r3, #8
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	430a      	orrs	r2, r1
 8003326:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8003328:	e002      	b.n	8003330 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	75fb      	strb	r3, [r7, #23]
      break;
 800332e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	2200      	movs	r2, #0
 8003334:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003338:	7dfb      	ldrb	r3, [r7, #23]
}
 800333a:	4618      	mov	r0, r3
 800333c:	3718      	adds	r7, #24
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}
 8003342:	bf00      	nop

08003344 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003344:	b480      	push	{r7}
 8003346:	b085      	sub	sp, #20
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
 800334c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	4a42      	ldr	r2, [pc, #264]	@ (8003460 <TIM_Base_SetConfig+0x11c>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d00f      	beq.n	800337c <TIM_Base_SetConfig+0x38>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003362:	d00b      	beq.n	800337c <TIM_Base_SetConfig+0x38>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	4a3f      	ldr	r2, [pc, #252]	@ (8003464 <TIM_Base_SetConfig+0x120>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d007      	beq.n	800337c <TIM_Base_SetConfig+0x38>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	4a3e      	ldr	r2, [pc, #248]	@ (8003468 <TIM_Base_SetConfig+0x124>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d003      	beq.n	800337c <TIM_Base_SetConfig+0x38>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	4a3d      	ldr	r2, [pc, #244]	@ (800346c <TIM_Base_SetConfig+0x128>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d108      	bne.n	800338e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003382:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	68fa      	ldr	r2, [r7, #12]
 800338a:	4313      	orrs	r3, r2
 800338c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	4a33      	ldr	r2, [pc, #204]	@ (8003460 <TIM_Base_SetConfig+0x11c>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d01b      	beq.n	80033ce <TIM_Base_SetConfig+0x8a>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800339c:	d017      	beq.n	80033ce <TIM_Base_SetConfig+0x8a>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	4a30      	ldr	r2, [pc, #192]	@ (8003464 <TIM_Base_SetConfig+0x120>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d013      	beq.n	80033ce <TIM_Base_SetConfig+0x8a>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	4a2f      	ldr	r2, [pc, #188]	@ (8003468 <TIM_Base_SetConfig+0x124>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d00f      	beq.n	80033ce <TIM_Base_SetConfig+0x8a>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	4a2e      	ldr	r2, [pc, #184]	@ (800346c <TIM_Base_SetConfig+0x128>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d00b      	beq.n	80033ce <TIM_Base_SetConfig+0x8a>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	4a2d      	ldr	r2, [pc, #180]	@ (8003470 <TIM_Base_SetConfig+0x12c>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d007      	beq.n	80033ce <TIM_Base_SetConfig+0x8a>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	4a2c      	ldr	r2, [pc, #176]	@ (8003474 <TIM_Base_SetConfig+0x130>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d003      	beq.n	80033ce <TIM_Base_SetConfig+0x8a>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	4a2b      	ldr	r2, [pc, #172]	@ (8003478 <TIM_Base_SetConfig+0x134>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d108      	bne.n	80033e0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80033d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	68db      	ldr	r3, [r3, #12]
 80033da:	68fa      	ldr	r2, [r7, #12]
 80033dc:	4313      	orrs	r3, r2
 80033de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	695b      	ldr	r3, [r3, #20]
 80033ea:	4313      	orrs	r3, r2
 80033ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	68fa      	ldr	r2, [r7, #12]
 80033f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	689a      	ldr	r2, [r3, #8]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	681a      	ldr	r2, [r3, #0]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	4a16      	ldr	r2, [pc, #88]	@ (8003460 <TIM_Base_SetConfig+0x11c>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d00f      	beq.n	800342c <TIM_Base_SetConfig+0xe8>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	4a17      	ldr	r2, [pc, #92]	@ (800346c <TIM_Base_SetConfig+0x128>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d00b      	beq.n	800342c <TIM_Base_SetConfig+0xe8>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	4a16      	ldr	r2, [pc, #88]	@ (8003470 <TIM_Base_SetConfig+0x12c>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d007      	beq.n	800342c <TIM_Base_SetConfig+0xe8>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	4a15      	ldr	r2, [pc, #84]	@ (8003474 <TIM_Base_SetConfig+0x130>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d003      	beq.n	800342c <TIM_Base_SetConfig+0xe8>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	4a14      	ldr	r2, [pc, #80]	@ (8003478 <TIM_Base_SetConfig+0x134>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d103      	bne.n	8003434 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	691a      	ldr	r2, [r3, #16]
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2201      	movs	r2, #1
 8003438:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	691b      	ldr	r3, [r3, #16]
 800343e:	f003 0301 	and.w	r3, r3, #1
 8003442:	2b01      	cmp	r3, #1
 8003444:	d105      	bne.n	8003452 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	691b      	ldr	r3, [r3, #16]
 800344a:	f023 0201 	bic.w	r2, r3, #1
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	611a      	str	r2, [r3, #16]
  }
}
 8003452:	bf00      	nop
 8003454:	3714      	adds	r7, #20
 8003456:	46bd      	mov	sp, r7
 8003458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345c:	4770      	bx	lr
 800345e:	bf00      	nop
 8003460:	40012c00 	.word	0x40012c00
 8003464:	40000400 	.word	0x40000400
 8003468:	40000800 	.word	0x40000800
 800346c:	40013400 	.word	0x40013400
 8003470:	40014000 	.word	0x40014000
 8003474:	40014400 	.word	0x40014400
 8003478:	40014800 	.word	0x40014800

0800347c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800347c:	b480      	push	{r7}
 800347e:	b087      	sub	sp, #28
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
 8003484:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6a1b      	ldr	r3, [r3, #32]
 800348a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6a1b      	ldr	r3, [r3, #32]
 8003490:	f023 0201 	bic.w	r2, r3, #1
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	699b      	ldr	r3, [r3, #24]
 80034a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80034aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80034ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	f023 0303 	bic.w	r3, r3, #3
 80034b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	68fa      	ldr	r2, [r7, #12]
 80034be:	4313      	orrs	r3, r2
 80034c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80034c2:	697b      	ldr	r3, [r7, #20]
 80034c4:	f023 0302 	bic.w	r3, r3, #2
 80034c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	689b      	ldr	r3, [r3, #8]
 80034ce:	697a      	ldr	r2, [r7, #20]
 80034d0:	4313      	orrs	r3, r2
 80034d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	4a2c      	ldr	r2, [pc, #176]	@ (8003588 <TIM_OC1_SetConfig+0x10c>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d00f      	beq.n	80034fc <TIM_OC1_SetConfig+0x80>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	4a2b      	ldr	r2, [pc, #172]	@ (800358c <TIM_OC1_SetConfig+0x110>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d00b      	beq.n	80034fc <TIM_OC1_SetConfig+0x80>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	4a2a      	ldr	r2, [pc, #168]	@ (8003590 <TIM_OC1_SetConfig+0x114>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d007      	beq.n	80034fc <TIM_OC1_SetConfig+0x80>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	4a29      	ldr	r2, [pc, #164]	@ (8003594 <TIM_OC1_SetConfig+0x118>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d003      	beq.n	80034fc <TIM_OC1_SetConfig+0x80>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	4a28      	ldr	r2, [pc, #160]	@ (8003598 <TIM_OC1_SetConfig+0x11c>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d10c      	bne.n	8003516 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80034fc:	697b      	ldr	r3, [r7, #20]
 80034fe:	f023 0308 	bic.w	r3, r3, #8
 8003502:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	68db      	ldr	r3, [r3, #12]
 8003508:	697a      	ldr	r2, [r7, #20]
 800350a:	4313      	orrs	r3, r2
 800350c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800350e:	697b      	ldr	r3, [r7, #20]
 8003510:	f023 0304 	bic.w	r3, r3, #4
 8003514:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	4a1b      	ldr	r2, [pc, #108]	@ (8003588 <TIM_OC1_SetConfig+0x10c>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d00f      	beq.n	800353e <TIM_OC1_SetConfig+0xc2>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	4a1a      	ldr	r2, [pc, #104]	@ (800358c <TIM_OC1_SetConfig+0x110>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d00b      	beq.n	800353e <TIM_OC1_SetConfig+0xc2>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	4a19      	ldr	r2, [pc, #100]	@ (8003590 <TIM_OC1_SetConfig+0x114>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d007      	beq.n	800353e <TIM_OC1_SetConfig+0xc2>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	4a18      	ldr	r2, [pc, #96]	@ (8003594 <TIM_OC1_SetConfig+0x118>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d003      	beq.n	800353e <TIM_OC1_SetConfig+0xc2>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	4a17      	ldr	r2, [pc, #92]	@ (8003598 <TIM_OC1_SetConfig+0x11c>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d111      	bne.n	8003562 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800353e:	693b      	ldr	r3, [r7, #16]
 8003540:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003544:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003546:	693b      	ldr	r3, [r7, #16]
 8003548:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800354c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	695b      	ldr	r3, [r3, #20]
 8003552:	693a      	ldr	r2, [r7, #16]
 8003554:	4313      	orrs	r3, r2
 8003556:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	699b      	ldr	r3, [r3, #24]
 800355c:	693a      	ldr	r2, [r7, #16]
 800355e:	4313      	orrs	r3, r2
 8003560:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	693a      	ldr	r2, [r7, #16]
 8003566:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	68fa      	ldr	r2, [r7, #12]
 800356c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	685a      	ldr	r2, [r3, #4]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	697a      	ldr	r2, [r7, #20]
 800357a:	621a      	str	r2, [r3, #32]
}
 800357c:	bf00      	nop
 800357e:	371c      	adds	r7, #28
 8003580:	46bd      	mov	sp, r7
 8003582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003586:	4770      	bx	lr
 8003588:	40012c00 	.word	0x40012c00
 800358c:	40013400 	.word	0x40013400
 8003590:	40014000 	.word	0x40014000
 8003594:	40014400 	.word	0x40014400
 8003598:	40014800 	.word	0x40014800

0800359c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800359c:	b480      	push	{r7}
 800359e:	b087      	sub	sp, #28
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
 80035a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6a1b      	ldr	r3, [r3, #32]
 80035aa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6a1b      	ldr	r3, [r3, #32]
 80035b0:	f023 0210 	bic.w	r2, r3, #16
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	699b      	ldr	r3, [r3, #24]
 80035c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80035ca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80035ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80035d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	021b      	lsls	r3, r3, #8
 80035de:	68fa      	ldr	r2, [r7, #12]
 80035e0:	4313      	orrs	r3, r2
 80035e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80035e4:	697b      	ldr	r3, [r7, #20]
 80035e6:	f023 0320 	bic.w	r3, r3, #32
 80035ea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	689b      	ldr	r3, [r3, #8]
 80035f0:	011b      	lsls	r3, r3, #4
 80035f2:	697a      	ldr	r2, [r7, #20]
 80035f4:	4313      	orrs	r3, r2
 80035f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	4a28      	ldr	r2, [pc, #160]	@ (800369c <TIM_OC2_SetConfig+0x100>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d003      	beq.n	8003608 <TIM_OC2_SetConfig+0x6c>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	4a27      	ldr	r2, [pc, #156]	@ (80036a0 <TIM_OC2_SetConfig+0x104>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d10d      	bne.n	8003624 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003608:	697b      	ldr	r3, [r7, #20]
 800360a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800360e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	68db      	ldr	r3, [r3, #12]
 8003614:	011b      	lsls	r3, r3, #4
 8003616:	697a      	ldr	r2, [r7, #20]
 8003618:	4313      	orrs	r3, r2
 800361a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800361c:	697b      	ldr	r3, [r7, #20]
 800361e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003622:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	4a1d      	ldr	r2, [pc, #116]	@ (800369c <TIM_OC2_SetConfig+0x100>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d00f      	beq.n	800364c <TIM_OC2_SetConfig+0xb0>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	4a1c      	ldr	r2, [pc, #112]	@ (80036a0 <TIM_OC2_SetConfig+0x104>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d00b      	beq.n	800364c <TIM_OC2_SetConfig+0xb0>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	4a1b      	ldr	r2, [pc, #108]	@ (80036a4 <TIM_OC2_SetConfig+0x108>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d007      	beq.n	800364c <TIM_OC2_SetConfig+0xb0>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	4a1a      	ldr	r2, [pc, #104]	@ (80036a8 <TIM_OC2_SetConfig+0x10c>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d003      	beq.n	800364c <TIM_OC2_SetConfig+0xb0>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	4a19      	ldr	r2, [pc, #100]	@ (80036ac <TIM_OC2_SetConfig+0x110>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d113      	bne.n	8003674 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800364c:	693b      	ldr	r3, [r7, #16]
 800364e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003652:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003654:	693b      	ldr	r3, [r7, #16]
 8003656:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800365a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	695b      	ldr	r3, [r3, #20]
 8003660:	009b      	lsls	r3, r3, #2
 8003662:	693a      	ldr	r2, [r7, #16]
 8003664:	4313      	orrs	r3, r2
 8003666:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	699b      	ldr	r3, [r3, #24]
 800366c:	009b      	lsls	r3, r3, #2
 800366e:	693a      	ldr	r2, [r7, #16]
 8003670:	4313      	orrs	r3, r2
 8003672:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	693a      	ldr	r2, [r7, #16]
 8003678:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	68fa      	ldr	r2, [r7, #12]
 800367e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	685a      	ldr	r2, [r3, #4]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	697a      	ldr	r2, [r7, #20]
 800368c:	621a      	str	r2, [r3, #32]
}
 800368e:	bf00      	nop
 8003690:	371c      	adds	r7, #28
 8003692:	46bd      	mov	sp, r7
 8003694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003698:	4770      	bx	lr
 800369a:	bf00      	nop
 800369c:	40012c00 	.word	0x40012c00
 80036a0:	40013400 	.word	0x40013400
 80036a4:	40014000 	.word	0x40014000
 80036a8:	40014400 	.word	0x40014400
 80036ac:	40014800 	.word	0x40014800

080036b0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80036b0:	b480      	push	{r7}
 80036b2:	b087      	sub	sp, #28
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
 80036b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6a1b      	ldr	r3, [r3, #32]
 80036be:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6a1b      	ldr	r3, [r3, #32]
 80036c4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	69db      	ldr	r3, [r3, #28]
 80036d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80036de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80036e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	f023 0303 	bic.w	r3, r3, #3
 80036ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	68fa      	ldr	r2, [r7, #12]
 80036f2:	4313      	orrs	r3, r2
 80036f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80036f6:	697b      	ldr	r3, [r7, #20]
 80036f8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80036fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	689b      	ldr	r3, [r3, #8]
 8003702:	021b      	lsls	r3, r3, #8
 8003704:	697a      	ldr	r2, [r7, #20]
 8003706:	4313      	orrs	r3, r2
 8003708:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	4a27      	ldr	r2, [pc, #156]	@ (80037ac <TIM_OC3_SetConfig+0xfc>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d003      	beq.n	800371a <TIM_OC3_SetConfig+0x6a>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	4a26      	ldr	r2, [pc, #152]	@ (80037b0 <TIM_OC3_SetConfig+0x100>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d10d      	bne.n	8003736 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800371a:	697b      	ldr	r3, [r7, #20]
 800371c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003720:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	68db      	ldr	r3, [r3, #12]
 8003726:	021b      	lsls	r3, r3, #8
 8003728:	697a      	ldr	r2, [r7, #20]
 800372a:	4313      	orrs	r3, r2
 800372c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800372e:	697b      	ldr	r3, [r7, #20]
 8003730:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003734:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	4a1c      	ldr	r2, [pc, #112]	@ (80037ac <TIM_OC3_SetConfig+0xfc>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d00f      	beq.n	800375e <TIM_OC3_SetConfig+0xae>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	4a1b      	ldr	r2, [pc, #108]	@ (80037b0 <TIM_OC3_SetConfig+0x100>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d00b      	beq.n	800375e <TIM_OC3_SetConfig+0xae>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	4a1a      	ldr	r2, [pc, #104]	@ (80037b4 <TIM_OC3_SetConfig+0x104>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d007      	beq.n	800375e <TIM_OC3_SetConfig+0xae>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	4a19      	ldr	r2, [pc, #100]	@ (80037b8 <TIM_OC3_SetConfig+0x108>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d003      	beq.n	800375e <TIM_OC3_SetConfig+0xae>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	4a18      	ldr	r2, [pc, #96]	@ (80037bc <TIM_OC3_SetConfig+0x10c>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d113      	bne.n	8003786 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800375e:	693b      	ldr	r3, [r7, #16]
 8003760:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003764:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003766:	693b      	ldr	r3, [r7, #16]
 8003768:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800376c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	695b      	ldr	r3, [r3, #20]
 8003772:	011b      	lsls	r3, r3, #4
 8003774:	693a      	ldr	r2, [r7, #16]
 8003776:	4313      	orrs	r3, r2
 8003778:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	699b      	ldr	r3, [r3, #24]
 800377e:	011b      	lsls	r3, r3, #4
 8003780:	693a      	ldr	r2, [r7, #16]
 8003782:	4313      	orrs	r3, r2
 8003784:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	693a      	ldr	r2, [r7, #16]
 800378a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	68fa      	ldr	r2, [r7, #12]
 8003790:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	685a      	ldr	r2, [r3, #4]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	697a      	ldr	r2, [r7, #20]
 800379e:	621a      	str	r2, [r3, #32]
}
 80037a0:	bf00      	nop
 80037a2:	371c      	adds	r7, #28
 80037a4:	46bd      	mov	sp, r7
 80037a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037aa:	4770      	bx	lr
 80037ac:	40012c00 	.word	0x40012c00
 80037b0:	40013400 	.word	0x40013400
 80037b4:	40014000 	.word	0x40014000
 80037b8:	40014400 	.word	0x40014400
 80037bc:	40014800 	.word	0x40014800

080037c0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80037c0:	b480      	push	{r7}
 80037c2:	b087      	sub	sp, #28
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
 80037c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6a1b      	ldr	r3, [r3, #32]
 80037ce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6a1b      	ldr	r3, [r3, #32]
 80037d4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	69db      	ldr	r3, [r3, #28]
 80037e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80037ee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80037f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80037fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	021b      	lsls	r3, r3, #8
 8003802:	68fa      	ldr	r2, [r7, #12]
 8003804:	4313      	orrs	r3, r2
 8003806:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003808:	697b      	ldr	r3, [r7, #20]
 800380a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800380e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	031b      	lsls	r3, r3, #12
 8003816:	697a      	ldr	r2, [r7, #20]
 8003818:	4313      	orrs	r3, r2
 800381a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	4a28      	ldr	r2, [pc, #160]	@ (80038c0 <TIM_OC4_SetConfig+0x100>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d003      	beq.n	800382c <TIM_OC4_SetConfig+0x6c>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	4a27      	ldr	r2, [pc, #156]	@ (80038c4 <TIM_OC4_SetConfig+0x104>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d10d      	bne.n	8003848 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800382c:	697b      	ldr	r3, [r7, #20]
 800382e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003832:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	68db      	ldr	r3, [r3, #12]
 8003838:	031b      	lsls	r3, r3, #12
 800383a:	697a      	ldr	r2, [r7, #20]
 800383c:	4313      	orrs	r3, r2
 800383e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8003840:	697b      	ldr	r3, [r7, #20]
 8003842:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003846:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	4a1d      	ldr	r2, [pc, #116]	@ (80038c0 <TIM_OC4_SetConfig+0x100>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d00f      	beq.n	8003870 <TIM_OC4_SetConfig+0xb0>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	4a1c      	ldr	r2, [pc, #112]	@ (80038c4 <TIM_OC4_SetConfig+0x104>)
 8003854:	4293      	cmp	r3, r2
 8003856:	d00b      	beq.n	8003870 <TIM_OC4_SetConfig+0xb0>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	4a1b      	ldr	r2, [pc, #108]	@ (80038c8 <TIM_OC4_SetConfig+0x108>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d007      	beq.n	8003870 <TIM_OC4_SetConfig+0xb0>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	4a1a      	ldr	r2, [pc, #104]	@ (80038cc <TIM_OC4_SetConfig+0x10c>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d003      	beq.n	8003870 <TIM_OC4_SetConfig+0xb0>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	4a19      	ldr	r2, [pc, #100]	@ (80038d0 <TIM_OC4_SetConfig+0x110>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d113      	bne.n	8003898 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003870:	693b      	ldr	r3, [r7, #16]
 8003872:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003876:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8003878:	693b      	ldr	r3, [r7, #16]
 800387a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800387e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	695b      	ldr	r3, [r3, #20]
 8003884:	019b      	lsls	r3, r3, #6
 8003886:	693a      	ldr	r2, [r7, #16]
 8003888:	4313      	orrs	r3, r2
 800388a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	699b      	ldr	r3, [r3, #24]
 8003890:	019b      	lsls	r3, r3, #6
 8003892:	693a      	ldr	r2, [r7, #16]
 8003894:	4313      	orrs	r3, r2
 8003896:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	693a      	ldr	r2, [r7, #16]
 800389c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	68fa      	ldr	r2, [r7, #12]
 80038a2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	685a      	ldr	r2, [r3, #4]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	697a      	ldr	r2, [r7, #20]
 80038b0:	621a      	str	r2, [r3, #32]
}
 80038b2:	bf00      	nop
 80038b4:	371c      	adds	r7, #28
 80038b6:	46bd      	mov	sp, r7
 80038b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038bc:	4770      	bx	lr
 80038be:	bf00      	nop
 80038c0:	40012c00 	.word	0x40012c00
 80038c4:	40013400 	.word	0x40013400
 80038c8:	40014000 	.word	0x40014000
 80038cc:	40014400 	.word	0x40014400
 80038d0:	40014800 	.word	0x40014800

080038d4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80038d4:	b480      	push	{r7}
 80038d6:	b087      	sub	sp, #28
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
 80038dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6a1b      	ldr	r3, [r3, #32]
 80038e2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6a1b      	ldr	r3, [r3, #32]
 80038e8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003902:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003906:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	68fa      	ldr	r2, [r7, #12]
 800390e:	4313      	orrs	r3, r2
 8003910:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003912:	693b      	ldr	r3, [r7, #16]
 8003914:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8003918:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	689b      	ldr	r3, [r3, #8]
 800391e:	041b      	lsls	r3, r3, #16
 8003920:	693a      	ldr	r2, [r7, #16]
 8003922:	4313      	orrs	r3, r2
 8003924:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	4a17      	ldr	r2, [pc, #92]	@ (8003988 <TIM_OC5_SetConfig+0xb4>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d00f      	beq.n	800394e <TIM_OC5_SetConfig+0x7a>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	4a16      	ldr	r2, [pc, #88]	@ (800398c <TIM_OC5_SetConfig+0xb8>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d00b      	beq.n	800394e <TIM_OC5_SetConfig+0x7a>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	4a15      	ldr	r2, [pc, #84]	@ (8003990 <TIM_OC5_SetConfig+0xbc>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d007      	beq.n	800394e <TIM_OC5_SetConfig+0x7a>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	4a14      	ldr	r2, [pc, #80]	@ (8003994 <TIM_OC5_SetConfig+0xc0>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d003      	beq.n	800394e <TIM_OC5_SetConfig+0x7a>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	4a13      	ldr	r2, [pc, #76]	@ (8003998 <TIM_OC5_SetConfig+0xc4>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d109      	bne.n	8003962 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800394e:	697b      	ldr	r3, [r7, #20]
 8003950:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003954:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	695b      	ldr	r3, [r3, #20]
 800395a:	021b      	lsls	r3, r3, #8
 800395c:	697a      	ldr	r2, [r7, #20]
 800395e:	4313      	orrs	r3, r2
 8003960:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	697a      	ldr	r2, [r7, #20]
 8003966:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	68fa      	ldr	r2, [r7, #12]
 800396c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	685a      	ldr	r2, [r3, #4]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	693a      	ldr	r2, [r7, #16]
 800397a:	621a      	str	r2, [r3, #32]
}
 800397c:	bf00      	nop
 800397e:	371c      	adds	r7, #28
 8003980:	46bd      	mov	sp, r7
 8003982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003986:	4770      	bx	lr
 8003988:	40012c00 	.word	0x40012c00
 800398c:	40013400 	.word	0x40013400
 8003990:	40014000 	.word	0x40014000
 8003994:	40014400 	.word	0x40014400
 8003998:	40014800 	.word	0x40014800

0800399c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800399c:	b480      	push	{r7}
 800399e:	b087      	sub	sp, #28
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
 80039a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6a1b      	ldr	r3, [r3, #32]
 80039aa:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6a1b      	ldr	r3, [r3, #32]
 80039b0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80039c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80039ca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80039ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	021b      	lsls	r3, r3, #8
 80039d6:	68fa      	ldr	r2, [r7, #12]
 80039d8:	4313      	orrs	r3, r2
 80039da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80039dc:	693b      	ldr	r3, [r7, #16]
 80039de:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80039e2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	689b      	ldr	r3, [r3, #8]
 80039e8:	051b      	lsls	r3, r3, #20
 80039ea:	693a      	ldr	r2, [r7, #16]
 80039ec:	4313      	orrs	r3, r2
 80039ee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	4a18      	ldr	r2, [pc, #96]	@ (8003a54 <TIM_OC6_SetConfig+0xb8>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d00f      	beq.n	8003a18 <TIM_OC6_SetConfig+0x7c>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	4a17      	ldr	r2, [pc, #92]	@ (8003a58 <TIM_OC6_SetConfig+0xbc>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d00b      	beq.n	8003a18 <TIM_OC6_SetConfig+0x7c>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	4a16      	ldr	r2, [pc, #88]	@ (8003a5c <TIM_OC6_SetConfig+0xc0>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d007      	beq.n	8003a18 <TIM_OC6_SetConfig+0x7c>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	4a15      	ldr	r2, [pc, #84]	@ (8003a60 <TIM_OC6_SetConfig+0xc4>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d003      	beq.n	8003a18 <TIM_OC6_SetConfig+0x7c>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	4a14      	ldr	r2, [pc, #80]	@ (8003a64 <TIM_OC6_SetConfig+0xc8>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d109      	bne.n	8003a2c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003a18:	697b      	ldr	r3, [r7, #20]
 8003a1a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003a1e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	695b      	ldr	r3, [r3, #20]
 8003a24:	029b      	lsls	r3, r3, #10
 8003a26:	697a      	ldr	r2, [r7, #20]
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	697a      	ldr	r2, [r7, #20]
 8003a30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	68fa      	ldr	r2, [r7, #12]
 8003a36:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	685a      	ldr	r2, [r3, #4]
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	693a      	ldr	r2, [r7, #16]
 8003a44:	621a      	str	r2, [r3, #32]
}
 8003a46:	bf00      	nop
 8003a48:	371c      	adds	r7, #28
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a50:	4770      	bx	lr
 8003a52:	bf00      	nop
 8003a54:	40012c00 	.word	0x40012c00
 8003a58:	40013400 	.word	0x40013400
 8003a5c:	40014000 	.word	0x40014000
 8003a60:	40014400 	.word	0x40014400
 8003a64:	40014800 	.word	0x40014800

08003a68 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	b085      	sub	sp, #20
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
 8003a70:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003a78:	2b01      	cmp	r3, #1
 8003a7a:	d101      	bne.n	8003a80 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003a7c:	2302      	movs	r3, #2
 8003a7e:	e065      	b.n	8003b4c <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2201      	movs	r2, #1
 8003a84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2202      	movs	r2, #2
 8003a8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	689b      	ldr	r3, [r3, #8]
 8003a9e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a2c      	ldr	r2, [pc, #176]	@ (8003b58 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d004      	beq.n	8003ab4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a2b      	ldr	r2, [pc, #172]	@ (8003b5c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d108      	bne.n	8003ac6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8003aba:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	685b      	ldr	r3, [r3, #4]
 8003ac0:	68fa      	ldr	r2, [r7, #12]
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8003acc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ad0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	68fa      	ldr	r2, [r7, #12]
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	68fa      	ldr	r2, [r7, #12]
 8003ae2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a1b      	ldr	r2, [pc, #108]	@ (8003b58 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d018      	beq.n	8003b20 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003af6:	d013      	beq.n	8003b20 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4a18      	ldr	r2, [pc, #96]	@ (8003b60 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d00e      	beq.n	8003b20 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4a17      	ldr	r2, [pc, #92]	@ (8003b64 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d009      	beq.n	8003b20 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a12      	ldr	r2, [pc, #72]	@ (8003b5c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d004      	beq.n	8003b20 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4a13      	ldr	r2, [pc, #76]	@ (8003b68 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d10c      	bne.n	8003b3a <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003b20:	68bb      	ldr	r3, [r7, #8]
 8003b22:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003b26:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	689b      	ldr	r3, [r3, #8]
 8003b2c:	68ba      	ldr	r2, [r7, #8]
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	68ba      	ldr	r2, [r7, #8]
 8003b38:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2201      	movs	r2, #1
 8003b3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2200      	movs	r2, #0
 8003b46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003b4a:	2300      	movs	r3, #0
}
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	3714      	adds	r7, #20
 8003b50:	46bd      	mov	sp, r7
 8003b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b56:	4770      	bx	lr
 8003b58:	40012c00 	.word	0x40012c00
 8003b5c:	40013400 	.word	0x40013400
 8003b60:	40000400 	.word	0x40000400
 8003b64:	40000800 	.word	0x40000800
 8003b68:	40014000 	.word	0x40014000

08003b6c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	b085      	sub	sp, #20
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
 8003b74:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003b76:	2300      	movs	r3, #0
 8003b78:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003b80:	2b01      	cmp	r3, #1
 8003b82:	d101      	bne.n	8003b88 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003b84:	2302      	movs	r3, #2
 8003b86:	e073      	b.n	8003c70 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2201      	movs	r2, #1
 8003b8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	68db      	ldr	r3, [r3, #12]
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	689b      	ldr	r3, [r3, #8]
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	691b      	ldr	r3, [r3, #16]
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	695b      	ldr	r3, [r3, #20]
 8003be0:	4313      	orrs	r3, r2
 8003be2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	699b      	ldr	r3, [r3, #24]
 8003bfc:	041b      	lsls	r3, r3, #16
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	69db      	ldr	r3, [r3, #28]
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4a19      	ldr	r2, [pc, #100]	@ (8003c7c <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d004      	beq.n	8003c24 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4a18      	ldr	r2, [pc, #96]	@ (8003c80 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d11c      	bne.n	8003c5e <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c2e:	051b      	lsls	r3, r3, #20
 8003c30:	4313      	orrs	r3, r2
 8003c32:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	6a1b      	ldr	r3, [r3, #32]
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c4c:	4313      	orrs	r3, r2
 8003c4e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	68fa      	ldr	r2, [r7, #12]
 8003c64:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003c6e:	2300      	movs	r3, #0
}
 8003c70:	4618      	mov	r0, r3
 8003c72:	3714      	adds	r7, #20
 8003c74:	46bd      	mov	sp, r7
 8003c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7a:	4770      	bx	lr
 8003c7c:	40012c00 	.word	0x40012c00
 8003c80:	40013400 	.word	0x40013400

08003c84 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b082      	sub	sp, #8
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d101      	bne.n	8003c96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c92:	2301      	movs	r3, #1
 8003c94:	e042      	b.n	8003d1c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d106      	bne.n	8003cae <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ca8:	6878      	ldr	r0, [r7, #4]
 8003caa:	f7fd f8fb 	bl	8000ea4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2224      	movs	r2, #36	@ 0x24
 8003cb2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	681a      	ldr	r2, [r3, #0]
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f022 0201 	bic.w	r2, r2, #1
 8003cc4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d002      	beq.n	8003cd4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8003cce:	6878      	ldr	r0, [r7, #4]
 8003cd0:	f000 faf4 	bl	80042bc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003cd4:	6878      	ldr	r0, [r7, #4]
 8003cd6:	f000 f825 	bl	8003d24 <UART_SetConfig>
 8003cda:	4603      	mov	r3, r0
 8003cdc:	2b01      	cmp	r3, #1
 8003cde:	d101      	bne.n	8003ce4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	e01b      	b.n	8003d1c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	685a      	ldr	r2, [r3, #4]
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003cf2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	689a      	ldr	r2, [r3, #8]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003d02:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	681a      	ldr	r2, [r3, #0]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f042 0201 	orr.w	r2, r2, #1
 8003d12:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003d14:	6878      	ldr	r0, [r7, #4]
 8003d16:	f000 fb73 	bl	8004400 <UART_CheckIdleState>
 8003d1a:	4603      	mov	r3, r0
}
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	3708      	adds	r7, #8
 8003d20:	46bd      	mov	sp, r7
 8003d22:	bd80      	pop	{r7, pc}

08003d24 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d28:	b08c      	sub	sp, #48	@ 0x30
 8003d2a:	af00      	add	r7, sp, #0
 8003d2c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003d2e:	2300      	movs	r3, #0
 8003d30:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003d34:	697b      	ldr	r3, [r7, #20]
 8003d36:	689a      	ldr	r2, [r3, #8]
 8003d38:	697b      	ldr	r3, [r7, #20]
 8003d3a:	691b      	ldr	r3, [r3, #16]
 8003d3c:	431a      	orrs	r2, r3
 8003d3e:	697b      	ldr	r3, [r7, #20]
 8003d40:	695b      	ldr	r3, [r3, #20]
 8003d42:	431a      	orrs	r2, r3
 8003d44:	697b      	ldr	r3, [r7, #20]
 8003d46:	69db      	ldr	r3, [r3, #28]
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003d4c:	697b      	ldr	r3, [r7, #20]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	681a      	ldr	r2, [r3, #0]
 8003d52:	4bab      	ldr	r3, [pc, #684]	@ (8004000 <UART_SetConfig+0x2dc>)
 8003d54:	4013      	ands	r3, r2
 8003d56:	697a      	ldr	r2, [r7, #20]
 8003d58:	6812      	ldr	r2, [r2, #0]
 8003d5a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003d5c:	430b      	orrs	r3, r1
 8003d5e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d60:	697b      	ldr	r3, [r7, #20]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	685b      	ldr	r3, [r3, #4]
 8003d66:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003d6a:	697b      	ldr	r3, [r7, #20]
 8003d6c:	68da      	ldr	r2, [r3, #12]
 8003d6e:	697b      	ldr	r3, [r7, #20]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	430a      	orrs	r2, r1
 8003d74:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003d76:	697b      	ldr	r3, [r7, #20]
 8003d78:	699b      	ldr	r3, [r3, #24]
 8003d7a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003d7c:	697b      	ldr	r3, [r7, #20]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4aa0      	ldr	r2, [pc, #640]	@ (8004004 <UART_SetConfig+0x2e0>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d004      	beq.n	8003d90 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003d86:	697b      	ldr	r3, [r7, #20]
 8003d88:	6a1b      	ldr	r3, [r3, #32]
 8003d8a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003d8c:	4313      	orrs	r3, r2
 8003d8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003d90:	697b      	ldr	r3, [r7, #20]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	689b      	ldr	r3, [r3, #8]
 8003d96:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8003d9a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8003d9e:	697a      	ldr	r2, [r7, #20]
 8003da0:	6812      	ldr	r2, [r2, #0]
 8003da2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003da4:	430b      	orrs	r3, r1
 8003da6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003da8:	697b      	ldr	r3, [r7, #20]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dae:	f023 010f 	bic.w	r1, r3, #15
 8003db2:	697b      	ldr	r3, [r7, #20]
 8003db4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003db6:	697b      	ldr	r3, [r7, #20]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	430a      	orrs	r2, r1
 8003dbc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003dbe:	697b      	ldr	r3, [r7, #20]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4a91      	ldr	r2, [pc, #580]	@ (8004008 <UART_SetConfig+0x2e4>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d125      	bne.n	8003e14 <UART_SetConfig+0xf0>
 8003dc8:	4b90      	ldr	r3, [pc, #576]	@ (800400c <UART_SetConfig+0x2e8>)
 8003dca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003dce:	f003 0303 	and.w	r3, r3, #3
 8003dd2:	2b03      	cmp	r3, #3
 8003dd4:	d81a      	bhi.n	8003e0c <UART_SetConfig+0xe8>
 8003dd6:	a201      	add	r2, pc, #4	@ (adr r2, 8003ddc <UART_SetConfig+0xb8>)
 8003dd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ddc:	08003ded 	.word	0x08003ded
 8003de0:	08003dfd 	.word	0x08003dfd
 8003de4:	08003df5 	.word	0x08003df5
 8003de8:	08003e05 	.word	0x08003e05
 8003dec:	2301      	movs	r3, #1
 8003dee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003df2:	e0d6      	b.n	8003fa2 <UART_SetConfig+0x27e>
 8003df4:	2302      	movs	r3, #2
 8003df6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003dfa:	e0d2      	b.n	8003fa2 <UART_SetConfig+0x27e>
 8003dfc:	2304      	movs	r3, #4
 8003dfe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003e02:	e0ce      	b.n	8003fa2 <UART_SetConfig+0x27e>
 8003e04:	2308      	movs	r3, #8
 8003e06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003e0a:	e0ca      	b.n	8003fa2 <UART_SetConfig+0x27e>
 8003e0c:	2310      	movs	r3, #16
 8003e0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003e12:	e0c6      	b.n	8003fa2 <UART_SetConfig+0x27e>
 8003e14:	697b      	ldr	r3, [r7, #20]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a7d      	ldr	r2, [pc, #500]	@ (8004010 <UART_SetConfig+0x2ec>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d138      	bne.n	8003e90 <UART_SetConfig+0x16c>
 8003e1e:	4b7b      	ldr	r3, [pc, #492]	@ (800400c <UART_SetConfig+0x2e8>)
 8003e20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e24:	f003 030c 	and.w	r3, r3, #12
 8003e28:	2b0c      	cmp	r3, #12
 8003e2a:	d82d      	bhi.n	8003e88 <UART_SetConfig+0x164>
 8003e2c:	a201      	add	r2, pc, #4	@ (adr r2, 8003e34 <UART_SetConfig+0x110>)
 8003e2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e32:	bf00      	nop
 8003e34:	08003e69 	.word	0x08003e69
 8003e38:	08003e89 	.word	0x08003e89
 8003e3c:	08003e89 	.word	0x08003e89
 8003e40:	08003e89 	.word	0x08003e89
 8003e44:	08003e79 	.word	0x08003e79
 8003e48:	08003e89 	.word	0x08003e89
 8003e4c:	08003e89 	.word	0x08003e89
 8003e50:	08003e89 	.word	0x08003e89
 8003e54:	08003e71 	.word	0x08003e71
 8003e58:	08003e89 	.word	0x08003e89
 8003e5c:	08003e89 	.word	0x08003e89
 8003e60:	08003e89 	.word	0x08003e89
 8003e64:	08003e81 	.word	0x08003e81
 8003e68:	2300      	movs	r3, #0
 8003e6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003e6e:	e098      	b.n	8003fa2 <UART_SetConfig+0x27e>
 8003e70:	2302      	movs	r3, #2
 8003e72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003e76:	e094      	b.n	8003fa2 <UART_SetConfig+0x27e>
 8003e78:	2304      	movs	r3, #4
 8003e7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003e7e:	e090      	b.n	8003fa2 <UART_SetConfig+0x27e>
 8003e80:	2308      	movs	r3, #8
 8003e82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003e86:	e08c      	b.n	8003fa2 <UART_SetConfig+0x27e>
 8003e88:	2310      	movs	r3, #16
 8003e8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003e8e:	e088      	b.n	8003fa2 <UART_SetConfig+0x27e>
 8003e90:	697b      	ldr	r3, [r7, #20]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4a5f      	ldr	r2, [pc, #380]	@ (8004014 <UART_SetConfig+0x2f0>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d125      	bne.n	8003ee6 <UART_SetConfig+0x1c2>
 8003e9a:	4b5c      	ldr	r3, [pc, #368]	@ (800400c <UART_SetConfig+0x2e8>)
 8003e9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ea0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003ea4:	2b30      	cmp	r3, #48	@ 0x30
 8003ea6:	d016      	beq.n	8003ed6 <UART_SetConfig+0x1b2>
 8003ea8:	2b30      	cmp	r3, #48	@ 0x30
 8003eaa:	d818      	bhi.n	8003ede <UART_SetConfig+0x1ba>
 8003eac:	2b20      	cmp	r3, #32
 8003eae:	d00a      	beq.n	8003ec6 <UART_SetConfig+0x1a2>
 8003eb0:	2b20      	cmp	r3, #32
 8003eb2:	d814      	bhi.n	8003ede <UART_SetConfig+0x1ba>
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d002      	beq.n	8003ebe <UART_SetConfig+0x19a>
 8003eb8:	2b10      	cmp	r3, #16
 8003eba:	d008      	beq.n	8003ece <UART_SetConfig+0x1aa>
 8003ebc:	e00f      	b.n	8003ede <UART_SetConfig+0x1ba>
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003ec4:	e06d      	b.n	8003fa2 <UART_SetConfig+0x27e>
 8003ec6:	2302      	movs	r3, #2
 8003ec8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003ecc:	e069      	b.n	8003fa2 <UART_SetConfig+0x27e>
 8003ece:	2304      	movs	r3, #4
 8003ed0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003ed4:	e065      	b.n	8003fa2 <UART_SetConfig+0x27e>
 8003ed6:	2308      	movs	r3, #8
 8003ed8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003edc:	e061      	b.n	8003fa2 <UART_SetConfig+0x27e>
 8003ede:	2310      	movs	r3, #16
 8003ee0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003ee4:	e05d      	b.n	8003fa2 <UART_SetConfig+0x27e>
 8003ee6:	697b      	ldr	r3, [r7, #20]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4a4b      	ldr	r2, [pc, #300]	@ (8004018 <UART_SetConfig+0x2f4>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d125      	bne.n	8003f3c <UART_SetConfig+0x218>
 8003ef0:	4b46      	ldr	r3, [pc, #280]	@ (800400c <UART_SetConfig+0x2e8>)
 8003ef2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ef6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003efa:	2bc0      	cmp	r3, #192	@ 0xc0
 8003efc:	d016      	beq.n	8003f2c <UART_SetConfig+0x208>
 8003efe:	2bc0      	cmp	r3, #192	@ 0xc0
 8003f00:	d818      	bhi.n	8003f34 <UART_SetConfig+0x210>
 8003f02:	2b80      	cmp	r3, #128	@ 0x80
 8003f04:	d00a      	beq.n	8003f1c <UART_SetConfig+0x1f8>
 8003f06:	2b80      	cmp	r3, #128	@ 0x80
 8003f08:	d814      	bhi.n	8003f34 <UART_SetConfig+0x210>
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d002      	beq.n	8003f14 <UART_SetConfig+0x1f0>
 8003f0e:	2b40      	cmp	r3, #64	@ 0x40
 8003f10:	d008      	beq.n	8003f24 <UART_SetConfig+0x200>
 8003f12:	e00f      	b.n	8003f34 <UART_SetConfig+0x210>
 8003f14:	2300      	movs	r3, #0
 8003f16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003f1a:	e042      	b.n	8003fa2 <UART_SetConfig+0x27e>
 8003f1c:	2302      	movs	r3, #2
 8003f1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003f22:	e03e      	b.n	8003fa2 <UART_SetConfig+0x27e>
 8003f24:	2304      	movs	r3, #4
 8003f26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003f2a:	e03a      	b.n	8003fa2 <UART_SetConfig+0x27e>
 8003f2c:	2308      	movs	r3, #8
 8003f2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003f32:	e036      	b.n	8003fa2 <UART_SetConfig+0x27e>
 8003f34:	2310      	movs	r3, #16
 8003f36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003f3a:	e032      	b.n	8003fa2 <UART_SetConfig+0x27e>
 8003f3c:	697b      	ldr	r3, [r7, #20]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4a30      	ldr	r2, [pc, #192]	@ (8004004 <UART_SetConfig+0x2e0>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d12a      	bne.n	8003f9c <UART_SetConfig+0x278>
 8003f46:	4b31      	ldr	r3, [pc, #196]	@ (800400c <UART_SetConfig+0x2e8>)
 8003f48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f4c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003f50:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003f54:	d01a      	beq.n	8003f8c <UART_SetConfig+0x268>
 8003f56:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003f5a:	d81b      	bhi.n	8003f94 <UART_SetConfig+0x270>
 8003f5c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003f60:	d00c      	beq.n	8003f7c <UART_SetConfig+0x258>
 8003f62:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003f66:	d815      	bhi.n	8003f94 <UART_SetConfig+0x270>
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d003      	beq.n	8003f74 <UART_SetConfig+0x250>
 8003f6c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f70:	d008      	beq.n	8003f84 <UART_SetConfig+0x260>
 8003f72:	e00f      	b.n	8003f94 <UART_SetConfig+0x270>
 8003f74:	2300      	movs	r3, #0
 8003f76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003f7a:	e012      	b.n	8003fa2 <UART_SetConfig+0x27e>
 8003f7c:	2302      	movs	r3, #2
 8003f7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003f82:	e00e      	b.n	8003fa2 <UART_SetConfig+0x27e>
 8003f84:	2304      	movs	r3, #4
 8003f86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003f8a:	e00a      	b.n	8003fa2 <UART_SetConfig+0x27e>
 8003f8c:	2308      	movs	r3, #8
 8003f8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003f92:	e006      	b.n	8003fa2 <UART_SetConfig+0x27e>
 8003f94:	2310      	movs	r3, #16
 8003f96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003f9a:	e002      	b.n	8003fa2 <UART_SetConfig+0x27e>
 8003f9c:	2310      	movs	r3, #16
 8003f9e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003fa2:	697b      	ldr	r3, [r7, #20]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4a17      	ldr	r2, [pc, #92]	@ (8004004 <UART_SetConfig+0x2e0>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	f040 80a8 	bne.w	80040fe <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003fae:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003fb2:	2b08      	cmp	r3, #8
 8003fb4:	d834      	bhi.n	8004020 <UART_SetConfig+0x2fc>
 8003fb6:	a201      	add	r2, pc, #4	@ (adr r2, 8003fbc <UART_SetConfig+0x298>)
 8003fb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fbc:	08003fe1 	.word	0x08003fe1
 8003fc0:	08004021 	.word	0x08004021
 8003fc4:	08003fe9 	.word	0x08003fe9
 8003fc8:	08004021 	.word	0x08004021
 8003fcc:	08003fef 	.word	0x08003fef
 8003fd0:	08004021 	.word	0x08004021
 8003fd4:	08004021 	.word	0x08004021
 8003fd8:	08004021 	.word	0x08004021
 8003fdc:	08003ff7 	.word	0x08003ff7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003fe0:	f7fe fd3c 	bl	8002a5c <HAL_RCC_GetPCLK1Freq>
 8003fe4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003fe6:	e021      	b.n	800402c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003fe8:	4b0c      	ldr	r3, [pc, #48]	@ (800401c <UART_SetConfig+0x2f8>)
 8003fea:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003fec:	e01e      	b.n	800402c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003fee:	f7fe fcc7 	bl	8002980 <HAL_RCC_GetSysClockFreq>
 8003ff2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003ff4:	e01a      	b.n	800402c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ff6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003ffa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003ffc:	e016      	b.n	800402c <UART_SetConfig+0x308>
 8003ffe:	bf00      	nop
 8004000:	cfff69f3 	.word	0xcfff69f3
 8004004:	40008000 	.word	0x40008000
 8004008:	40013800 	.word	0x40013800
 800400c:	40021000 	.word	0x40021000
 8004010:	40004400 	.word	0x40004400
 8004014:	40004800 	.word	0x40004800
 8004018:	40004c00 	.word	0x40004c00
 800401c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8004020:	2300      	movs	r3, #0
 8004022:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004024:	2301      	movs	r3, #1
 8004026:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800402a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800402c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800402e:	2b00      	cmp	r3, #0
 8004030:	f000 812a 	beq.w	8004288 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004034:	697b      	ldr	r3, [r7, #20]
 8004036:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004038:	4a9e      	ldr	r2, [pc, #632]	@ (80042b4 <UART_SetConfig+0x590>)
 800403a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800403e:	461a      	mov	r2, r3
 8004040:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004042:	fbb3 f3f2 	udiv	r3, r3, r2
 8004046:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004048:	697b      	ldr	r3, [r7, #20]
 800404a:	685a      	ldr	r2, [r3, #4]
 800404c:	4613      	mov	r3, r2
 800404e:	005b      	lsls	r3, r3, #1
 8004050:	4413      	add	r3, r2
 8004052:	69ba      	ldr	r2, [r7, #24]
 8004054:	429a      	cmp	r2, r3
 8004056:	d305      	bcc.n	8004064 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004058:	697b      	ldr	r3, [r7, #20]
 800405a:	685b      	ldr	r3, [r3, #4]
 800405c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800405e:	69ba      	ldr	r2, [r7, #24]
 8004060:	429a      	cmp	r2, r3
 8004062:	d903      	bls.n	800406c <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8004064:	2301      	movs	r3, #1
 8004066:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800406a:	e10d      	b.n	8004288 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800406c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800406e:	2200      	movs	r2, #0
 8004070:	60bb      	str	r3, [r7, #8]
 8004072:	60fa      	str	r2, [r7, #12]
 8004074:	697b      	ldr	r3, [r7, #20]
 8004076:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004078:	4a8e      	ldr	r2, [pc, #568]	@ (80042b4 <UART_SetConfig+0x590>)
 800407a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800407e:	b29b      	uxth	r3, r3
 8004080:	2200      	movs	r2, #0
 8004082:	603b      	str	r3, [r7, #0]
 8004084:	607a      	str	r2, [r7, #4]
 8004086:	e9d7 2300 	ldrd	r2, r3, [r7]
 800408a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800408e:	f7fc f8c3 	bl	8000218 <__aeabi_uldivmod>
 8004092:	4602      	mov	r2, r0
 8004094:	460b      	mov	r3, r1
 8004096:	4610      	mov	r0, r2
 8004098:	4619      	mov	r1, r3
 800409a:	f04f 0200 	mov.w	r2, #0
 800409e:	f04f 0300 	mov.w	r3, #0
 80040a2:	020b      	lsls	r3, r1, #8
 80040a4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80040a8:	0202      	lsls	r2, r0, #8
 80040aa:	6979      	ldr	r1, [r7, #20]
 80040ac:	6849      	ldr	r1, [r1, #4]
 80040ae:	0849      	lsrs	r1, r1, #1
 80040b0:	2000      	movs	r0, #0
 80040b2:	460c      	mov	r4, r1
 80040b4:	4605      	mov	r5, r0
 80040b6:	eb12 0804 	adds.w	r8, r2, r4
 80040ba:	eb43 0905 	adc.w	r9, r3, r5
 80040be:	697b      	ldr	r3, [r7, #20]
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	2200      	movs	r2, #0
 80040c4:	469a      	mov	sl, r3
 80040c6:	4693      	mov	fp, r2
 80040c8:	4652      	mov	r2, sl
 80040ca:	465b      	mov	r3, fp
 80040cc:	4640      	mov	r0, r8
 80040ce:	4649      	mov	r1, r9
 80040d0:	f7fc f8a2 	bl	8000218 <__aeabi_uldivmod>
 80040d4:	4602      	mov	r2, r0
 80040d6:	460b      	mov	r3, r1
 80040d8:	4613      	mov	r3, r2
 80040da:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80040dc:	6a3b      	ldr	r3, [r7, #32]
 80040de:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80040e2:	d308      	bcc.n	80040f6 <UART_SetConfig+0x3d2>
 80040e4:	6a3b      	ldr	r3, [r7, #32]
 80040e6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80040ea:	d204      	bcs.n	80040f6 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 80040ec:	697b      	ldr	r3, [r7, #20]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	6a3a      	ldr	r2, [r7, #32]
 80040f2:	60da      	str	r2, [r3, #12]
 80040f4:	e0c8      	b.n	8004288 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 80040f6:	2301      	movs	r3, #1
 80040f8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80040fc:	e0c4      	b.n	8004288 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80040fe:	697b      	ldr	r3, [r7, #20]
 8004100:	69db      	ldr	r3, [r3, #28]
 8004102:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004106:	d167      	bne.n	80041d8 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8004108:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800410c:	2b08      	cmp	r3, #8
 800410e:	d828      	bhi.n	8004162 <UART_SetConfig+0x43e>
 8004110:	a201      	add	r2, pc, #4	@ (adr r2, 8004118 <UART_SetConfig+0x3f4>)
 8004112:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004116:	bf00      	nop
 8004118:	0800413d 	.word	0x0800413d
 800411c:	08004145 	.word	0x08004145
 8004120:	0800414d 	.word	0x0800414d
 8004124:	08004163 	.word	0x08004163
 8004128:	08004153 	.word	0x08004153
 800412c:	08004163 	.word	0x08004163
 8004130:	08004163 	.word	0x08004163
 8004134:	08004163 	.word	0x08004163
 8004138:	0800415b 	.word	0x0800415b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800413c:	f7fe fc8e 	bl	8002a5c <HAL_RCC_GetPCLK1Freq>
 8004140:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004142:	e014      	b.n	800416e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004144:	f7fe fca0 	bl	8002a88 <HAL_RCC_GetPCLK2Freq>
 8004148:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800414a:	e010      	b.n	800416e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800414c:	4b5a      	ldr	r3, [pc, #360]	@ (80042b8 <UART_SetConfig+0x594>)
 800414e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004150:	e00d      	b.n	800416e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004152:	f7fe fc15 	bl	8002980 <HAL_RCC_GetSysClockFreq>
 8004156:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004158:	e009      	b.n	800416e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800415a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800415e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004160:	e005      	b.n	800416e <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8004162:	2300      	movs	r3, #0
 8004164:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004166:	2301      	movs	r3, #1
 8004168:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800416c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800416e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004170:	2b00      	cmp	r3, #0
 8004172:	f000 8089 	beq.w	8004288 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004176:	697b      	ldr	r3, [r7, #20]
 8004178:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800417a:	4a4e      	ldr	r2, [pc, #312]	@ (80042b4 <UART_SetConfig+0x590>)
 800417c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004180:	461a      	mov	r2, r3
 8004182:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004184:	fbb3 f3f2 	udiv	r3, r3, r2
 8004188:	005a      	lsls	r2, r3, #1
 800418a:	697b      	ldr	r3, [r7, #20]
 800418c:	685b      	ldr	r3, [r3, #4]
 800418e:	085b      	lsrs	r3, r3, #1
 8004190:	441a      	add	r2, r3
 8004192:	697b      	ldr	r3, [r7, #20]
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	fbb2 f3f3 	udiv	r3, r2, r3
 800419a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800419c:	6a3b      	ldr	r3, [r7, #32]
 800419e:	2b0f      	cmp	r3, #15
 80041a0:	d916      	bls.n	80041d0 <UART_SetConfig+0x4ac>
 80041a2:	6a3b      	ldr	r3, [r7, #32]
 80041a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80041a8:	d212      	bcs.n	80041d0 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80041aa:	6a3b      	ldr	r3, [r7, #32]
 80041ac:	b29b      	uxth	r3, r3
 80041ae:	f023 030f 	bic.w	r3, r3, #15
 80041b2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80041b4:	6a3b      	ldr	r3, [r7, #32]
 80041b6:	085b      	lsrs	r3, r3, #1
 80041b8:	b29b      	uxth	r3, r3
 80041ba:	f003 0307 	and.w	r3, r3, #7
 80041be:	b29a      	uxth	r2, r3
 80041c0:	8bfb      	ldrh	r3, [r7, #30]
 80041c2:	4313      	orrs	r3, r2
 80041c4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80041c6:	697b      	ldr	r3, [r7, #20]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	8bfa      	ldrh	r2, [r7, #30]
 80041cc:	60da      	str	r2, [r3, #12]
 80041ce:	e05b      	b.n	8004288 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80041d0:	2301      	movs	r3, #1
 80041d2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80041d6:	e057      	b.n	8004288 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 80041d8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80041dc:	2b08      	cmp	r3, #8
 80041de:	d828      	bhi.n	8004232 <UART_SetConfig+0x50e>
 80041e0:	a201      	add	r2, pc, #4	@ (adr r2, 80041e8 <UART_SetConfig+0x4c4>)
 80041e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041e6:	bf00      	nop
 80041e8:	0800420d 	.word	0x0800420d
 80041ec:	08004215 	.word	0x08004215
 80041f0:	0800421d 	.word	0x0800421d
 80041f4:	08004233 	.word	0x08004233
 80041f8:	08004223 	.word	0x08004223
 80041fc:	08004233 	.word	0x08004233
 8004200:	08004233 	.word	0x08004233
 8004204:	08004233 	.word	0x08004233
 8004208:	0800422b 	.word	0x0800422b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800420c:	f7fe fc26 	bl	8002a5c <HAL_RCC_GetPCLK1Freq>
 8004210:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004212:	e014      	b.n	800423e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004214:	f7fe fc38 	bl	8002a88 <HAL_RCC_GetPCLK2Freq>
 8004218:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800421a:	e010      	b.n	800423e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800421c:	4b26      	ldr	r3, [pc, #152]	@ (80042b8 <UART_SetConfig+0x594>)
 800421e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004220:	e00d      	b.n	800423e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004222:	f7fe fbad 	bl	8002980 <HAL_RCC_GetSysClockFreq>
 8004226:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004228:	e009      	b.n	800423e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800422a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800422e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004230:	e005      	b.n	800423e <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8004232:	2300      	movs	r3, #0
 8004234:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004236:	2301      	movs	r3, #1
 8004238:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800423c:	bf00      	nop
    }

    if (pclk != 0U)
 800423e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004240:	2b00      	cmp	r3, #0
 8004242:	d021      	beq.n	8004288 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004244:	697b      	ldr	r3, [r7, #20]
 8004246:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004248:	4a1a      	ldr	r2, [pc, #104]	@ (80042b4 <UART_SetConfig+0x590>)
 800424a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800424e:	461a      	mov	r2, r3
 8004250:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004252:	fbb3 f2f2 	udiv	r2, r3, r2
 8004256:	697b      	ldr	r3, [r7, #20]
 8004258:	685b      	ldr	r3, [r3, #4]
 800425a:	085b      	lsrs	r3, r3, #1
 800425c:	441a      	add	r2, r3
 800425e:	697b      	ldr	r3, [r7, #20]
 8004260:	685b      	ldr	r3, [r3, #4]
 8004262:	fbb2 f3f3 	udiv	r3, r2, r3
 8004266:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004268:	6a3b      	ldr	r3, [r7, #32]
 800426a:	2b0f      	cmp	r3, #15
 800426c:	d909      	bls.n	8004282 <UART_SetConfig+0x55e>
 800426e:	6a3b      	ldr	r3, [r7, #32]
 8004270:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004274:	d205      	bcs.n	8004282 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004276:	6a3b      	ldr	r3, [r7, #32]
 8004278:	b29a      	uxth	r2, r3
 800427a:	697b      	ldr	r3, [r7, #20]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	60da      	str	r2, [r3, #12]
 8004280:	e002      	b.n	8004288 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8004282:	2301      	movs	r3, #1
 8004284:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004288:	697b      	ldr	r3, [r7, #20]
 800428a:	2201      	movs	r2, #1
 800428c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8004290:	697b      	ldr	r3, [r7, #20]
 8004292:	2201      	movs	r2, #1
 8004294:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004298:	697b      	ldr	r3, [r7, #20]
 800429a:	2200      	movs	r2, #0
 800429c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800429e:	697b      	ldr	r3, [r7, #20]
 80042a0:	2200      	movs	r2, #0
 80042a2:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80042a4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80042a8:	4618      	mov	r0, r3
 80042aa:	3730      	adds	r7, #48	@ 0x30
 80042ac:	46bd      	mov	sp, r7
 80042ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80042b2:	bf00      	nop
 80042b4:	08004bb0 	.word	0x08004bb0
 80042b8:	00f42400 	.word	0x00f42400

080042bc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80042bc:	b480      	push	{r7}
 80042be:	b083      	sub	sp, #12
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042c8:	f003 0308 	and.w	r3, r3, #8
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d00a      	beq.n	80042e6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	685b      	ldr	r3, [r3, #4]
 80042d6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	430a      	orrs	r2, r1
 80042e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042ea:	f003 0301 	and.w	r3, r3, #1
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d00a      	beq.n	8004308 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	430a      	orrs	r2, r1
 8004306:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800430c:	f003 0302 	and.w	r3, r3, #2
 8004310:	2b00      	cmp	r3, #0
 8004312:	d00a      	beq.n	800432a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	685b      	ldr	r3, [r3, #4]
 800431a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	430a      	orrs	r2, r1
 8004328:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800432e:	f003 0304 	and.w	r3, r3, #4
 8004332:	2b00      	cmp	r3, #0
 8004334:	d00a      	beq.n	800434c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	430a      	orrs	r2, r1
 800434a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004350:	f003 0310 	and.w	r3, r3, #16
 8004354:	2b00      	cmp	r3, #0
 8004356:	d00a      	beq.n	800436e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	689b      	ldr	r3, [r3, #8]
 800435e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	430a      	orrs	r2, r1
 800436c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004372:	f003 0320 	and.w	r3, r3, #32
 8004376:	2b00      	cmp	r3, #0
 8004378:	d00a      	beq.n	8004390 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	689b      	ldr	r3, [r3, #8]
 8004380:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	430a      	orrs	r2, r1
 800438e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004394:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004398:	2b00      	cmp	r3, #0
 800439a:	d01a      	beq.n	80043d2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	430a      	orrs	r2, r1
 80043b0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043b6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80043ba:	d10a      	bne.n	80043d2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	430a      	orrs	r2, r1
 80043d0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d00a      	beq.n	80043f4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	685b      	ldr	r3, [r3, #4]
 80043e4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	430a      	orrs	r2, r1
 80043f2:	605a      	str	r2, [r3, #4]
  }
}
 80043f4:	bf00      	nop
 80043f6:	370c      	adds	r7, #12
 80043f8:	46bd      	mov	sp, r7
 80043fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fe:	4770      	bx	lr

08004400 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b098      	sub	sp, #96	@ 0x60
 8004404:	af02      	add	r7, sp, #8
 8004406:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2200      	movs	r2, #0
 800440c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004410:	f7fc fe6e 	bl	80010f0 <HAL_GetTick>
 8004414:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f003 0308 	and.w	r3, r3, #8
 8004420:	2b08      	cmp	r3, #8
 8004422:	d12f      	bne.n	8004484 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004424:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004428:	9300      	str	r3, [sp, #0]
 800442a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800442c:	2200      	movs	r2, #0
 800442e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004432:	6878      	ldr	r0, [r7, #4]
 8004434:	f000 f88e 	bl	8004554 <UART_WaitOnFlagUntilTimeout>
 8004438:	4603      	mov	r3, r0
 800443a:	2b00      	cmp	r3, #0
 800443c:	d022      	beq.n	8004484 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004444:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004446:	e853 3f00 	ldrex	r3, [r3]
 800444a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800444c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800444e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004452:	653b      	str	r3, [r7, #80]	@ 0x50
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	461a      	mov	r2, r3
 800445a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800445c:	647b      	str	r3, [r7, #68]	@ 0x44
 800445e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004460:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004462:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004464:	e841 2300 	strex	r3, r2, [r1]
 8004468:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800446a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800446c:	2b00      	cmp	r3, #0
 800446e:	d1e6      	bne.n	800443e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2220      	movs	r2, #32
 8004474:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2200      	movs	r2, #0
 800447c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004480:	2303      	movs	r3, #3
 8004482:	e063      	b.n	800454c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f003 0304 	and.w	r3, r3, #4
 800448e:	2b04      	cmp	r3, #4
 8004490:	d149      	bne.n	8004526 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004492:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004496:	9300      	str	r3, [sp, #0]
 8004498:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800449a:	2200      	movs	r2, #0
 800449c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80044a0:	6878      	ldr	r0, [r7, #4]
 80044a2:	f000 f857 	bl	8004554 <UART_WaitOnFlagUntilTimeout>
 80044a6:	4603      	mov	r3, r0
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d03c      	beq.n	8004526 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044b4:	e853 3f00 	ldrex	r3, [r3]
 80044b8:	623b      	str	r3, [r7, #32]
   return(result);
 80044ba:	6a3b      	ldr	r3, [r7, #32]
 80044bc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80044c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	461a      	mov	r2, r3
 80044c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80044ca:	633b      	str	r3, [r7, #48]	@ 0x30
 80044cc:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044ce:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80044d0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80044d2:	e841 2300 	strex	r3, r2, [r1]
 80044d6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80044d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d1e6      	bne.n	80044ac <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	3308      	adds	r3, #8
 80044e4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044e6:	693b      	ldr	r3, [r7, #16]
 80044e8:	e853 3f00 	ldrex	r3, [r3]
 80044ec:	60fb      	str	r3, [r7, #12]
   return(result);
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	f023 0301 	bic.w	r3, r3, #1
 80044f4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	3308      	adds	r3, #8
 80044fc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80044fe:	61fa      	str	r2, [r7, #28]
 8004500:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004502:	69b9      	ldr	r1, [r7, #24]
 8004504:	69fa      	ldr	r2, [r7, #28]
 8004506:	e841 2300 	strex	r3, r2, [r1]
 800450a:	617b      	str	r3, [r7, #20]
   return(result);
 800450c:	697b      	ldr	r3, [r7, #20]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d1e5      	bne.n	80044de <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2220      	movs	r2, #32
 8004516:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2200      	movs	r2, #0
 800451e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004522:	2303      	movs	r3, #3
 8004524:	e012      	b.n	800454c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2220      	movs	r2, #32
 800452a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2220      	movs	r2, #32
 8004532:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2200      	movs	r2, #0
 800453a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2200      	movs	r2, #0
 8004540:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2200      	movs	r2, #0
 8004546:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800454a:	2300      	movs	r3, #0
}
 800454c:	4618      	mov	r0, r3
 800454e:	3758      	adds	r7, #88	@ 0x58
 8004550:	46bd      	mov	sp, r7
 8004552:	bd80      	pop	{r7, pc}

08004554 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b084      	sub	sp, #16
 8004558:	af00      	add	r7, sp, #0
 800455a:	60f8      	str	r0, [r7, #12]
 800455c:	60b9      	str	r1, [r7, #8]
 800455e:	603b      	str	r3, [r7, #0]
 8004560:	4613      	mov	r3, r2
 8004562:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004564:	e04f      	b.n	8004606 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004566:	69bb      	ldr	r3, [r7, #24]
 8004568:	f1b3 3fff 	cmp.w	r3, #4294967295
 800456c:	d04b      	beq.n	8004606 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800456e:	f7fc fdbf 	bl	80010f0 <HAL_GetTick>
 8004572:	4602      	mov	r2, r0
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	1ad3      	subs	r3, r2, r3
 8004578:	69ba      	ldr	r2, [r7, #24]
 800457a:	429a      	cmp	r2, r3
 800457c:	d302      	bcc.n	8004584 <UART_WaitOnFlagUntilTimeout+0x30>
 800457e:	69bb      	ldr	r3, [r7, #24]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d101      	bne.n	8004588 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004584:	2303      	movs	r3, #3
 8004586:	e04e      	b.n	8004626 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f003 0304 	and.w	r3, r3, #4
 8004592:	2b00      	cmp	r3, #0
 8004594:	d037      	beq.n	8004606 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004596:	68bb      	ldr	r3, [r7, #8]
 8004598:	2b80      	cmp	r3, #128	@ 0x80
 800459a:	d034      	beq.n	8004606 <UART_WaitOnFlagUntilTimeout+0xb2>
 800459c:	68bb      	ldr	r3, [r7, #8]
 800459e:	2b40      	cmp	r3, #64	@ 0x40
 80045a0:	d031      	beq.n	8004606 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	69db      	ldr	r3, [r3, #28]
 80045a8:	f003 0308 	and.w	r3, r3, #8
 80045ac:	2b08      	cmp	r3, #8
 80045ae:	d110      	bne.n	80045d2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	2208      	movs	r2, #8
 80045b6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80045b8:	68f8      	ldr	r0, [r7, #12]
 80045ba:	f000 f838 	bl	800462e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	2208      	movs	r2, #8
 80045c2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	2200      	movs	r2, #0
 80045ca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80045ce:	2301      	movs	r3, #1
 80045d0:	e029      	b.n	8004626 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	69db      	ldr	r3, [r3, #28]
 80045d8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80045dc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80045e0:	d111      	bne.n	8004606 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80045ea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80045ec:	68f8      	ldr	r0, [r7, #12]
 80045ee:	f000 f81e 	bl	800462e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	2220      	movs	r2, #32
 80045f6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	2200      	movs	r2, #0
 80045fe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8004602:	2303      	movs	r3, #3
 8004604:	e00f      	b.n	8004626 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	69da      	ldr	r2, [r3, #28]
 800460c:	68bb      	ldr	r3, [r7, #8]
 800460e:	4013      	ands	r3, r2
 8004610:	68ba      	ldr	r2, [r7, #8]
 8004612:	429a      	cmp	r2, r3
 8004614:	bf0c      	ite	eq
 8004616:	2301      	moveq	r3, #1
 8004618:	2300      	movne	r3, #0
 800461a:	b2db      	uxtb	r3, r3
 800461c:	461a      	mov	r2, r3
 800461e:	79fb      	ldrb	r3, [r7, #7]
 8004620:	429a      	cmp	r2, r3
 8004622:	d0a0      	beq.n	8004566 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004624:	2300      	movs	r3, #0
}
 8004626:	4618      	mov	r0, r3
 8004628:	3710      	adds	r7, #16
 800462a:	46bd      	mov	sp, r7
 800462c:	bd80      	pop	{r7, pc}

0800462e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800462e:	b480      	push	{r7}
 8004630:	b095      	sub	sp, #84	@ 0x54
 8004632:	af00      	add	r7, sp, #0
 8004634:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800463c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800463e:	e853 3f00 	ldrex	r3, [r3]
 8004642:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004644:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004646:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800464a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	461a      	mov	r2, r3
 8004652:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004654:	643b      	str	r3, [r7, #64]	@ 0x40
 8004656:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004658:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800465a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800465c:	e841 2300 	strex	r3, r2, [r1]
 8004660:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004662:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004664:	2b00      	cmp	r3, #0
 8004666:	d1e6      	bne.n	8004636 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	3308      	adds	r3, #8
 800466e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004670:	6a3b      	ldr	r3, [r7, #32]
 8004672:	e853 3f00 	ldrex	r3, [r3]
 8004676:	61fb      	str	r3, [r7, #28]
   return(result);
 8004678:	69fb      	ldr	r3, [r7, #28]
 800467a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800467e:	f023 0301 	bic.w	r3, r3, #1
 8004682:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	3308      	adds	r3, #8
 800468a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800468c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800468e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004690:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004692:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004694:	e841 2300 	strex	r3, r2, [r1]
 8004698:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800469a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800469c:	2b00      	cmp	r3, #0
 800469e:	d1e3      	bne.n	8004668 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80046a4:	2b01      	cmp	r3, #1
 80046a6:	d118      	bne.n	80046da <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	e853 3f00 	ldrex	r3, [r3]
 80046b4:	60bb      	str	r3, [r7, #8]
   return(result);
 80046b6:	68bb      	ldr	r3, [r7, #8]
 80046b8:	f023 0310 	bic.w	r3, r3, #16
 80046bc:	647b      	str	r3, [r7, #68]	@ 0x44
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	461a      	mov	r2, r3
 80046c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80046c6:	61bb      	str	r3, [r7, #24]
 80046c8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046ca:	6979      	ldr	r1, [r7, #20]
 80046cc:	69ba      	ldr	r2, [r7, #24]
 80046ce:	e841 2300 	strex	r3, r2, [r1]
 80046d2:	613b      	str	r3, [r7, #16]
   return(result);
 80046d4:	693b      	ldr	r3, [r7, #16]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d1e6      	bne.n	80046a8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2220      	movs	r2, #32
 80046de:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2200      	movs	r2, #0
 80046e6:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2200      	movs	r2, #0
 80046ec:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80046ee:	bf00      	nop
 80046f0:	3754      	adds	r7, #84	@ 0x54
 80046f2:	46bd      	mov	sp, r7
 80046f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f8:	4770      	bx	lr

080046fa <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80046fa:	b480      	push	{r7}
 80046fc:	b085      	sub	sp, #20
 80046fe:	af00      	add	r7, sp, #0
 8004700:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004708:	2b01      	cmp	r3, #1
 800470a:	d101      	bne.n	8004710 <HAL_UARTEx_DisableFifoMode+0x16>
 800470c:	2302      	movs	r3, #2
 800470e:	e027      	b.n	8004760 <HAL_UARTEx_DisableFifoMode+0x66>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2201      	movs	r2, #1
 8004714:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2224      	movs	r2, #36	@ 0x24
 800471c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	681a      	ldr	r2, [r3, #0]
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f022 0201 	bic.w	r2, r2, #1
 8004736:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800473e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2200      	movs	r2, #0
 8004744:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	68fa      	ldr	r2, [r7, #12]
 800474c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2220      	movs	r2, #32
 8004752:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2200      	movs	r2, #0
 800475a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800475e:	2300      	movs	r3, #0
}
 8004760:	4618      	mov	r0, r3
 8004762:	3714      	adds	r7, #20
 8004764:	46bd      	mov	sp, r7
 8004766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476a:	4770      	bx	lr

0800476c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b084      	sub	sp, #16
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
 8004774:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800477c:	2b01      	cmp	r3, #1
 800477e:	d101      	bne.n	8004784 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004780:	2302      	movs	r3, #2
 8004782:	e02d      	b.n	80047e0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2201      	movs	r2, #1
 8004788:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2224      	movs	r2, #36	@ 0x24
 8004790:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	681a      	ldr	r2, [r3, #0]
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f022 0201 	bic.w	r2, r2, #1
 80047aa:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	689b      	ldr	r3, [r3, #8]
 80047b2:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	683a      	ldr	r2, [r7, #0]
 80047bc:	430a      	orrs	r2, r1
 80047be:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80047c0:	6878      	ldr	r0, [r7, #4]
 80047c2:	f000 f84f 	bl	8004864 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	68fa      	ldr	r2, [r7, #12]
 80047cc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2220      	movs	r2, #32
 80047d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2200      	movs	r2, #0
 80047da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80047de:	2300      	movs	r3, #0
}
 80047e0:	4618      	mov	r0, r3
 80047e2:	3710      	adds	r7, #16
 80047e4:	46bd      	mov	sp, r7
 80047e6:	bd80      	pop	{r7, pc}

080047e8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b084      	sub	sp, #16
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
 80047f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80047f8:	2b01      	cmp	r3, #1
 80047fa:	d101      	bne.n	8004800 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80047fc:	2302      	movs	r3, #2
 80047fe:	e02d      	b.n	800485c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2201      	movs	r2, #1
 8004804:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2224      	movs	r2, #36	@ 0x24
 800480c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	681a      	ldr	r2, [r3, #0]
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f022 0201 	bic.w	r2, r2, #1
 8004826:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	689b      	ldr	r3, [r3, #8]
 800482e:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	683a      	ldr	r2, [r7, #0]
 8004838:	430a      	orrs	r2, r1
 800483a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800483c:	6878      	ldr	r0, [r7, #4]
 800483e:	f000 f811 	bl	8004864 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	68fa      	ldr	r2, [r7, #12]
 8004848:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2220      	movs	r2, #32
 800484e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2200      	movs	r2, #0
 8004856:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800485a:	2300      	movs	r3, #0
}
 800485c:	4618      	mov	r0, r3
 800485e:	3710      	adds	r7, #16
 8004860:	46bd      	mov	sp, r7
 8004862:	bd80      	pop	{r7, pc}

08004864 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004864:	b480      	push	{r7}
 8004866:	b085      	sub	sp, #20
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004870:	2b00      	cmp	r3, #0
 8004872:	d108      	bne.n	8004886 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2201      	movs	r2, #1
 8004878:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2201      	movs	r2, #1
 8004880:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004884:	e031      	b.n	80048ea <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004886:	2308      	movs	r3, #8
 8004888:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800488a:	2308      	movs	r3, #8
 800488c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	689b      	ldr	r3, [r3, #8]
 8004894:	0e5b      	lsrs	r3, r3, #25
 8004896:	b2db      	uxtb	r3, r3
 8004898:	f003 0307 	and.w	r3, r3, #7
 800489c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	689b      	ldr	r3, [r3, #8]
 80048a4:	0f5b      	lsrs	r3, r3, #29
 80048a6:	b2db      	uxtb	r3, r3
 80048a8:	f003 0307 	and.w	r3, r3, #7
 80048ac:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80048ae:	7bbb      	ldrb	r3, [r7, #14]
 80048b0:	7b3a      	ldrb	r2, [r7, #12]
 80048b2:	4911      	ldr	r1, [pc, #68]	@ (80048f8 <UARTEx_SetNbDataToProcess+0x94>)
 80048b4:	5c8a      	ldrb	r2, [r1, r2]
 80048b6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80048ba:	7b3a      	ldrb	r2, [r7, #12]
 80048bc:	490f      	ldr	r1, [pc, #60]	@ (80048fc <UARTEx_SetNbDataToProcess+0x98>)
 80048be:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80048c0:	fb93 f3f2 	sdiv	r3, r3, r2
 80048c4:	b29a      	uxth	r2, r3
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80048cc:	7bfb      	ldrb	r3, [r7, #15]
 80048ce:	7b7a      	ldrb	r2, [r7, #13]
 80048d0:	4909      	ldr	r1, [pc, #36]	@ (80048f8 <UARTEx_SetNbDataToProcess+0x94>)
 80048d2:	5c8a      	ldrb	r2, [r1, r2]
 80048d4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80048d8:	7b7a      	ldrb	r2, [r7, #13]
 80048da:	4908      	ldr	r1, [pc, #32]	@ (80048fc <UARTEx_SetNbDataToProcess+0x98>)
 80048dc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80048de:	fb93 f3f2 	sdiv	r3, r3, r2
 80048e2:	b29a      	uxth	r2, r3
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80048ea:	bf00      	nop
 80048ec:	3714      	adds	r7, #20
 80048ee:	46bd      	mov	sp, r7
 80048f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f4:	4770      	bx	lr
 80048f6:	bf00      	nop
 80048f8:	08004bc8 	.word	0x08004bc8
 80048fc:	08004bd0 	.word	0x08004bd0

08004900 <AS5600_isConnected>:
//uint8_t  _direction       = AS5600_CLOCK_WISE;
int      _error           = AS5600_OK;

/* USER CODE BEGIN PID */
HAL_StatusTypeDef AS5600_isConnected(AS5600_Structure *as5600)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b086      	sub	sp, #24
 8004904:	af04      	add	r7, sp, #16
 8004906:	6078      	str	r0, [r7, #4]
	_error = AS5600_OK;
 8004908:	4b12      	ldr	r3, [pc, #72]	@ (8004954 <AS5600_isConnected+0x54>)
 800490a:	2200      	movs	r2, #0
 800490c:	601a      	str	r2, [r3, #0]

	ret = HAL_I2C_Mem_Read(as5600->hi2cx, as5600->address, AS5600_ANGLE, 1, as5600->RxBuffer, 2, 10);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6818      	ldr	r0, [r3, #0]
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	791b      	ldrb	r3, [r3, #4]
 8004916:	4619      	mov	r1, r3
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	3307      	adds	r3, #7
 800491c:	220a      	movs	r2, #10
 800491e:	9202      	str	r2, [sp, #8]
 8004920:	2202      	movs	r2, #2
 8004922:	9201      	str	r2, [sp, #4]
 8004924:	9300      	str	r3, [sp, #0]
 8004926:	2301      	movs	r3, #1
 8004928:	220e      	movs	r2, #14
 800492a:	f7fc ff07 	bl	800173c <HAL_I2C_Mem_Read>
 800492e:	4603      	mov	r3, r0
 8004930:	461a      	mov	r2, r3
 8004932:	4b09      	ldr	r3, [pc, #36]	@ (8004958 <AS5600_isConnected+0x58>)
 8004934:	701a      	strb	r2, [r3, #0]
	if (ret != HAL_OK){
 8004936:	4b08      	ldr	r3, [pc, #32]	@ (8004958 <AS5600_isConnected+0x58>)
 8004938:	781b      	ldrb	r3, [r3, #0]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d005      	beq.n	800494a <AS5600_isConnected+0x4a>
		_error = AS5600_ERROR_I2C_READ_3;
 800493e:	4b05      	ldr	r3, [pc, #20]	@ (8004954 <AS5600_isConnected+0x54>)
 8004940:	f06f 0266 	mvn.w	r2, #102	@ 0x66
 8004944:	601a      	str	r2, [r3, #0]
		return HAL_ERROR;
 8004946:	2301      	movs	r3, #1
 8004948:	e000      	b.n	800494c <AS5600_isConnected+0x4c>
	}
	return HAL_OK;
 800494a:	2300      	movs	r3, #0
}
 800494c:	4618      	mov	r0, r3
 800494e:	3708      	adds	r7, #8
 8004950:	46bd      	mov	sp, r7
 8004952:	bd80      	pop	{r7, pc}
 8004954:	200002dc 	.word	0x200002dc
 8004958:	200002cc 	.word	0x200002cc

0800495c <AS5600_readRaw>:

uint16_t AS5600_readRaw(AS5600_Structure *as5600)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b088      	sub	sp, #32
 8004960:	af04      	add	r7, sp, #16
 8004962:	6078      	str	r0, [r7, #4]
	uint16_t data;

	ret = HAL_I2C_Mem_Read(as5600->hi2cx, as5600->address, AS5600_ANGLE, 1, as5600->RxBuffer, 2, 10);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6818      	ldr	r0, [r3, #0]
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	791b      	ldrb	r3, [r3, #4]
 800496c:	4619      	mov	r1, r3
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	3307      	adds	r3, #7
 8004972:	220a      	movs	r2, #10
 8004974:	9202      	str	r2, [sp, #8]
 8004976:	2202      	movs	r2, #2
 8004978:	9201      	str	r2, [sp, #4]
 800497a:	9300      	str	r3, [sp, #0]
 800497c:	2301      	movs	r3, #1
 800497e:	220e      	movs	r2, #14
 8004980:	f7fc fedc 	bl	800173c <HAL_I2C_Mem_Read>
 8004984:	4603      	mov	r3, r0
 8004986:	461a      	mov	r2, r3
 8004988:	4b09      	ldr	r3, [pc, #36]	@ (80049b0 <AS5600_readRaw+0x54>)
 800498a:	701a      	strb	r2, [r3, #0]

	data = Data_buf[0];
 800498c:	4b09      	ldr	r3, [pc, #36]	@ (80049b4 <AS5600_readRaw+0x58>)
 800498e:	781b      	ldrb	r3, [r3, #0]
 8004990:	81fb      	strh	r3, [r7, #14]
	data <<= 8;
 8004992:	89fb      	ldrh	r3, [r7, #14]
 8004994:	021b      	lsls	r3, r3, #8
 8004996:	81fb      	strh	r3, [r7, #14]
	data += Data_buf[1];
 8004998:	4b06      	ldr	r3, [pc, #24]	@ (80049b4 <AS5600_readRaw+0x58>)
 800499a:	785b      	ldrb	r3, [r3, #1]
 800499c:	461a      	mov	r2, r3
 800499e:	89fb      	ldrh	r3, [r7, #14]
 80049a0:	4413      	add	r3, r2
 80049a2:	81fb      	strh	r3, [r7, #14]
	return data ;
 80049a4:	89fb      	ldrh	r3, [r7, #14]

}
 80049a6:	4618      	mov	r0, r3
 80049a8:	3710      	adds	r7, #16
 80049aa:	46bd      	mov	sp, r7
 80049ac:	bd80      	pop	{r7, pc}
 80049ae:	bf00      	nop
 80049b0:	200002cc 	.word	0x200002cc
 80049b4:	200002d0 	.word	0x200002d0

080049b8 <AS5600_readAngle>:

float AS5600_readAngle(AS5600_Structure *as5600)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b084      	sub	sp, #16
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
	uint16_t value = AS5600_readRaw(as5600) & 0x0FFF;
 80049c0:	6878      	ldr	r0, [r7, #4]
 80049c2:	f7ff ffcb 	bl	800495c <AS5600_readRaw>
 80049c6:	4603      	mov	r3, r0
 80049c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80049cc:	81fb      	strh	r3, [r7, #14]

	uint16_t denominator = (1 << 12);
 80049ce:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80049d2:	81bb      	strh	r3, [r7, #12]
	float rad = (value / (float)(denominator - 1)) * 180;
 80049d4:	89fb      	ldrh	r3, [r7, #14]
 80049d6:	ee07 3a90 	vmov	s15, r3
 80049da:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80049de:	89bb      	ldrh	r3, [r7, #12]
 80049e0:	3b01      	subs	r3, #1
 80049e2:	ee07 3a90 	vmov	s15, r3
 80049e6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80049ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80049ee:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8004a0c <AS5600_readAngle+0x54>
 80049f2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80049f6:	edc7 7a02 	vstr	s15, [r7, #8]

	return rad;
 80049fa:	68bb      	ldr	r3, [r7, #8]
 80049fc:	ee07 3a90 	vmov	s15, r3
}
 8004a00:	eeb0 0a67 	vmov.f32	s0, s15
 8004a04:	3710      	adds	r7, #16
 8004a06:	46bd      	mov	sp, r7
 8004a08:	bd80      	pop	{r7, pc}
 8004a0a:	bf00      	nop
 8004a0c:	43340000 	.word	0x43340000

08004a10 <AS5600_getCumulativePosition>:

float AS5600_getCumulativePosition(AS5600_Structure *as5600)
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b084      	sub	sp, #16
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
	int16_t value = AS5600_readRaw(as5600) & 0x0FFF;
 8004a18:	6878      	ldr	r0, [r7, #4]
 8004a1a:	f7ff ff9f 	bl	800495c <AS5600_readRaw>
 8004a1e:	4603      	mov	r3, r0
 8004a20:	b21b      	sxth	r3, r3
 8004a22:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a26:	81fb      	strh	r3, [r7, #14]

	if ((_lastPosition > 2048) && ( value < (_lastPosition - 2048)))
 8004a28:	4b33      	ldr	r3, [pc, #204]	@ (8004af8 <AS5600_getCumulativePosition+0xe8>)
 8004a2a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004a2e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004a32:	dd16      	ble.n	8004a62 <AS5600_getCumulativePosition+0x52>
 8004a34:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8004a38:	4b2f      	ldr	r3, [pc, #188]	@ (8004af8 <AS5600_getCumulativePosition+0xe8>)
 8004a3a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004a3e:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 8004a42:	429a      	cmp	r2, r3
 8004a44:	da0d      	bge.n	8004a62 <AS5600_getCumulativePosition+0x52>
	{
		_position = _position + 4096 - _lastPosition + value;
 8004a46:	4b2d      	ldr	r3, [pc, #180]	@ (8004afc <AS5600_getCumulativePosition+0xec>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004a4e:	4a2a      	ldr	r2, [pc, #168]	@ (8004af8 <AS5600_getCumulativePosition+0xe8>)
 8004a50:	f9b2 2000 	ldrsh.w	r2, [r2]
 8004a54:	1a9a      	subs	r2, r3, r2
 8004a56:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004a5a:	4413      	add	r3, r2
 8004a5c:	4a27      	ldr	r2, [pc, #156]	@ (8004afc <AS5600_getCumulativePosition+0xec>)
 8004a5e:	6013      	str	r3, [r2, #0]
 8004a60:	e027      	b.n	8004ab2 <AS5600_getCumulativePosition+0xa2>
	}

	else if ((value > 2048) && ( _lastPosition < (value - 2048)))
 8004a62:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004a66:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004a6a:	dd17      	ble.n	8004a9c <AS5600_getCumulativePosition+0x8c>
 8004a6c:	4b22      	ldr	r3, [pc, #136]	@ (8004af8 <AS5600_getCumulativePosition+0xe8>)
 8004a6e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004a72:	461a      	mov	r2, r3
 8004a74:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004a78:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 8004a7c:	429a      	cmp	r2, r3
 8004a7e:	da0d      	bge.n	8004a9c <AS5600_getCumulativePosition+0x8c>
	{
		_position = _position - 4096 - _lastPosition + value;
 8004a80:	4b1e      	ldr	r3, [pc, #120]	@ (8004afc <AS5600_getCumulativePosition+0xec>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f5a3 5380 	sub.w	r3, r3, #4096	@ 0x1000
 8004a88:	4a1b      	ldr	r2, [pc, #108]	@ (8004af8 <AS5600_getCumulativePosition+0xe8>)
 8004a8a:	f9b2 2000 	ldrsh.w	r2, [r2]
 8004a8e:	1a9a      	subs	r2, r3, r2
 8004a90:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004a94:	4413      	add	r3, r2
 8004a96:	4a19      	ldr	r2, [pc, #100]	@ (8004afc <AS5600_getCumulativePosition+0xec>)
 8004a98:	6013      	str	r3, [r2, #0]
 8004a9a:	e00a      	b.n	8004ab2 <AS5600_getCumulativePosition+0xa2>
	}
	else _position = _position - _lastPosition + value;
 8004a9c:	4b17      	ldr	r3, [pc, #92]	@ (8004afc <AS5600_getCumulativePosition+0xec>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4a15      	ldr	r2, [pc, #84]	@ (8004af8 <AS5600_getCumulativePosition+0xe8>)
 8004aa2:	f9b2 2000 	ldrsh.w	r2, [r2]
 8004aa6:	1a9a      	subs	r2, r3, r2
 8004aa8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004aac:	4413      	add	r3, r2
 8004aae:	4a13      	ldr	r2, [pc, #76]	@ (8004afc <AS5600_getCumulativePosition+0xec>)
 8004ab0:	6013      	str	r3, [r2, #0]
	_lastPosition = value;
 8004ab2:	4a11      	ldr	r2, [pc, #68]	@ (8004af8 <AS5600_getCumulativePosition+0xe8>)
 8004ab4:	89fb      	ldrh	r3, [r7, #14]
 8004ab6:	8013      	strh	r3, [r2, #0]

	uint16_t denominator = (1 << 12);
 8004ab8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004abc:	81bb      	strh	r3, [r7, #12]
	float cumulative_rad = (_position / (float)(denominator - 1)) * 180;
 8004abe:	4b0f      	ldr	r3, [pc, #60]	@ (8004afc <AS5600_getCumulativePosition+0xec>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	ee07 3a90 	vmov	s15, r3
 8004ac6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004aca:	89bb      	ldrh	r3, [r7, #12]
 8004acc:	3b01      	subs	r3, #1
 8004ace:	ee07 3a90 	vmov	s15, r3
 8004ad2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004ad6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004ada:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8004b00 <AS5600_getCumulativePosition+0xf0>
 8004ade:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004ae2:	edc7 7a02 	vstr	s15, [r7, #8]

	return cumulative_rad;
 8004ae6:	68bb      	ldr	r3, [r7, #8]
 8004ae8:	ee07 3a90 	vmov	s15, r3
}
 8004aec:	eeb0 0a67 	vmov.f32	s0, s15
 8004af0:	3710      	adds	r7, #16
 8004af2:	46bd      	mov	sp, r7
 8004af4:	bd80      	pop	{r7, pc}
 8004af6:	bf00      	nop
 8004af8:	200002d8 	.word	0x200002d8
 8004afc:	200002d4 	.word	0x200002d4
 8004b00:	43340000 	.word	0x43340000

08004b04 <AS5600_lastError>:
	return old;
}


int AS5600_lastError()
{
 8004b04:	b480      	push	{r7}
 8004b06:	b083      	sub	sp, #12
 8004b08:	af00      	add	r7, sp, #0
	int value = _error;
 8004b0a:	4b06      	ldr	r3, [pc, #24]	@ (8004b24 <AS5600_lastError+0x20>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	607b      	str	r3, [r7, #4]
	_error = AS5600_OK;
 8004b10:	4b04      	ldr	r3, [pc, #16]	@ (8004b24 <AS5600_lastError+0x20>)
 8004b12:	2200      	movs	r2, #0
 8004b14:	601a      	str	r2, [r3, #0]
	return value;
 8004b16:	687b      	ldr	r3, [r7, #4]
}
 8004b18:	4618      	mov	r0, r3
 8004b1a:	370c      	adds	r7, #12
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b22:	4770      	bx	lr
 8004b24:	200002dc 	.word	0x200002dc

08004b28 <memset>:
 8004b28:	4402      	add	r2, r0
 8004b2a:	4603      	mov	r3, r0
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d100      	bne.n	8004b32 <memset+0xa>
 8004b30:	4770      	bx	lr
 8004b32:	f803 1b01 	strb.w	r1, [r3], #1
 8004b36:	e7f9      	b.n	8004b2c <memset+0x4>

08004b38 <__libc_init_array>:
 8004b38:	b570      	push	{r4, r5, r6, lr}
 8004b3a:	4d0d      	ldr	r5, [pc, #52]	@ (8004b70 <__libc_init_array+0x38>)
 8004b3c:	4c0d      	ldr	r4, [pc, #52]	@ (8004b74 <__libc_init_array+0x3c>)
 8004b3e:	1b64      	subs	r4, r4, r5
 8004b40:	10a4      	asrs	r4, r4, #2
 8004b42:	2600      	movs	r6, #0
 8004b44:	42a6      	cmp	r6, r4
 8004b46:	d109      	bne.n	8004b5c <__libc_init_array+0x24>
 8004b48:	4d0b      	ldr	r5, [pc, #44]	@ (8004b78 <__libc_init_array+0x40>)
 8004b4a:	4c0c      	ldr	r4, [pc, #48]	@ (8004b7c <__libc_init_array+0x44>)
 8004b4c:	f000 f818 	bl	8004b80 <_init>
 8004b50:	1b64      	subs	r4, r4, r5
 8004b52:	10a4      	asrs	r4, r4, #2
 8004b54:	2600      	movs	r6, #0
 8004b56:	42a6      	cmp	r6, r4
 8004b58:	d105      	bne.n	8004b66 <__libc_init_array+0x2e>
 8004b5a:	bd70      	pop	{r4, r5, r6, pc}
 8004b5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b60:	4798      	blx	r3
 8004b62:	3601      	adds	r6, #1
 8004b64:	e7ee      	b.n	8004b44 <__libc_init_array+0xc>
 8004b66:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b6a:	4798      	blx	r3
 8004b6c:	3601      	adds	r6, #1
 8004b6e:	e7f2      	b.n	8004b56 <__libc_init_array+0x1e>
 8004b70:	08004be0 	.word	0x08004be0
 8004b74:	08004be0 	.word	0x08004be0
 8004b78:	08004be0 	.word	0x08004be0
 8004b7c:	08004be4 	.word	0x08004be4

08004b80 <_init>:
 8004b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b82:	bf00      	nop
 8004b84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b86:	bc08      	pop	{r3}
 8004b88:	469e      	mov	lr, r3
 8004b8a:	4770      	bx	lr

08004b8c <_fini>:
 8004b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b8e:	bf00      	nop
 8004b90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b92:	bc08      	pop	{r3}
 8004b94:	469e      	mov	lr, r3
 8004b96:	4770      	bx	lr
