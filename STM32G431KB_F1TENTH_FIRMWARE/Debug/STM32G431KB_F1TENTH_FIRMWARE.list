
STM32G431KB_F1TENTH_FIRMWARE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005e34  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800600c  0800600c  0000700c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800604c  0800604c  00008010  2**0
                  CONTENTS
  4 .ARM          00000008  0800604c  0800604c  0000704c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006054  08006054  00008010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006054  08006054  00007054  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006058  08006058  00007058  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  0800605c  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003e0  20000010  0800606c  00008010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003f0  0800606c  000083f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017b29  00000000  00000000  00008040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003101  00000000  00000000  0001fb69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001450  00000000  00000000  00022c70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000fea  00000000  00000000  000240c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e7ee  00000000  00000000  000250aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ac00  00000000  00000000  00043898  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c6237  00000000  00000000  0005e498  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001246cf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005578  00000000  00000000  00124714  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000094  00000000  00000000  00129c8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000010 	.word	0x20000010
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08005ff4 	.word	0x08005ff4

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000014 	.word	0x20000014
 8000214:	08005ff4 	.word	0x08005ff4

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b96a 	b.w	8000504 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	460c      	mov	r4, r1
 8000250:	2b00      	cmp	r3, #0
 8000252:	d14e      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000254:	4694      	mov	ip, r2
 8000256:	458c      	cmp	ip, r1
 8000258:	4686      	mov	lr, r0
 800025a:	fab2 f282 	clz	r2, r2
 800025e:	d962      	bls.n	8000326 <__udivmoddi4+0xde>
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0320 	rsb	r3, r2, #32
 8000266:	4091      	lsls	r1, r2
 8000268:	fa20 f303 	lsr.w	r3, r0, r3
 800026c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000270:	4319      	orrs	r1, r3
 8000272:	fa00 fe02 	lsl.w	lr, r0, r2
 8000276:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800027a:	fa1f f68c 	uxth.w	r6, ip
 800027e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000282:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000286:	fb07 1114 	mls	r1, r7, r4, r1
 800028a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028e:	fb04 f106 	mul.w	r1, r4, r6
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f104 30ff 	add.w	r0, r4, #4294967295
 800029e:	f080 8112 	bcs.w	80004c6 <__udivmoddi4+0x27e>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 810f 	bls.w	80004c6 <__udivmoddi4+0x27e>
 80002a8:	3c02      	subs	r4, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a59      	subs	r1, r3, r1
 80002ae:	fa1f f38e 	uxth.w	r3, lr
 80002b2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002b6:	fb07 1110 	mls	r1, r7, r0, r1
 80002ba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002be:	fb00 f606 	mul.w	r6, r0, r6
 80002c2:	429e      	cmp	r6, r3
 80002c4:	d90a      	bls.n	80002dc <__udivmoddi4+0x94>
 80002c6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ca:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ce:	f080 80fc 	bcs.w	80004ca <__udivmoddi4+0x282>
 80002d2:	429e      	cmp	r6, r3
 80002d4:	f240 80f9 	bls.w	80004ca <__udivmoddi4+0x282>
 80002d8:	4463      	add	r3, ip
 80002da:	3802      	subs	r0, #2
 80002dc:	1b9b      	subs	r3, r3, r6
 80002de:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002e2:	2100      	movs	r1, #0
 80002e4:	b11d      	cbz	r5, 80002ee <__udivmoddi4+0xa6>
 80002e6:	40d3      	lsrs	r3, r2
 80002e8:	2200      	movs	r2, #0
 80002ea:	e9c5 3200 	strd	r3, r2, [r5]
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d905      	bls.n	8000302 <__udivmoddi4+0xba>
 80002f6:	b10d      	cbz	r5, 80002fc <__udivmoddi4+0xb4>
 80002f8:	e9c5 0100 	strd	r0, r1, [r5]
 80002fc:	2100      	movs	r1, #0
 80002fe:	4608      	mov	r0, r1
 8000300:	e7f5      	b.n	80002ee <__udivmoddi4+0xa6>
 8000302:	fab3 f183 	clz	r1, r3
 8000306:	2900      	cmp	r1, #0
 8000308:	d146      	bne.n	8000398 <__udivmoddi4+0x150>
 800030a:	42a3      	cmp	r3, r4
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xcc>
 800030e:	4290      	cmp	r0, r2
 8000310:	f0c0 80f0 	bcc.w	80004f4 <__udivmoddi4+0x2ac>
 8000314:	1a86      	subs	r6, r0, r2
 8000316:	eb64 0303 	sbc.w	r3, r4, r3
 800031a:	2001      	movs	r0, #1
 800031c:	2d00      	cmp	r5, #0
 800031e:	d0e6      	beq.n	80002ee <__udivmoddi4+0xa6>
 8000320:	e9c5 6300 	strd	r6, r3, [r5]
 8000324:	e7e3      	b.n	80002ee <__udivmoddi4+0xa6>
 8000326:	2a00      	cmp	r2, #0
 8000328:	f040 8090 	bne.w	800044c <__udivmoddi4+0x204>
 800032c:	eba1 040c 	sub.w	r4, r1, ip
 8000330:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000334:	fa1f f78c 	uxth.w	r7, ip
 8000338:	2101      	movs	r1, #1
 800033a:	fbb4 f6f8 	udiv	r6, r4, r8
 800033e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000342:	fb08 4416 	mls	r4, r8, r6, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb07 f006 	mul.w	r0, r7, r6
 800034e:	4298      	cmp	r0, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x11c>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f106 34ff 	add.w	r4, r6, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x11a>
 800035c:	4298      	cmp	r0, r3
 800035e:	f200 80cd 	bhi.w	80004fc <__udivmoddi4+0x2b4>
 8000362:	4626      	mov	r6, r4
 8000364:	1a1c      	subs	r4, r3, r0
 8000366:	fa1f f38e 	uxth.w	r3, lr
 800036a:	fbb4 f0f8 	udiv	r0, r4, r8
 800036e:	fb08 4410 	mls	r4, r8, r0, r4
 8000372:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000376:	fb00 f707 	mul.w	r7, r0, r7
 800037a:	429f      	cmp	r7, r3
 800037c:	d908      	bls.n	8000390 <__udivmoddi4+0x148>
 800037e:	eb1c 0303 	adds.w	r3, ip, r3
 8000382:	f100 34ff 	add.w	r4, r0, #4294967295
 8000386:	d202      	bcs.n	800038e <__udivmoddi4+0x146>
 8000388:	429f      	cmp	r7, r3
 800038a:	f200 80b0 	bhi.w	80004ee <__udivmoddi4+0x2a6>
 800038e:	4620      	mov	r0, r4
 8000390:	1bdb      	subs	r3, r3, r7
 8000392:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000396:	e7a5      	b.n	80002e4 <__udivmoddi4+0x9c>
 8000398:	f1c1 0620 	rsb	r6, r1, #32
 800039c:	408b      	lsls	r3, r1
 800039e:	fa22 f706 	lsr.w	r7, r2, r6
 80003a2:	431f      	orrs	r7, r3
 80003a4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a8:	fa04 f301 	lsl.w	r3, r4, r1
 80003ac:	ea43 030c 	orr.w	r3, r3, ip
 80003b0:	40f4      	lsrs	r4, r6
 80003b2:	fa00 f801 	lsl.w	r8, r0, r1
 80003b6:	0c38      	lsrs	r0, r7, #16
 80003b8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003bc:	fbb4 fef0 	udiv	lr, r4, r0
 80003c0:	fa1f fc87 	uxth.w	ip, r7
 80003c4:	fb00 441e 	mls	r4, r0, lr, r4
 80003c8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003cc:	fb0e f90c 	mul.w	r9, lr, ip
 80003d0:	45a1      	cmp	r9, r4
 80003d2:	fa02 f201 	lsl.w	r2, r2, r1
 80003d6:	d90a      	bls.n	80003ee <__udivmoddi4+0x1a6>
 80003d8:	193c      	adds	r4, r7, r4
 80003da:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003de:	f080 8084 	bcs.w	80004ea <__udivmoddi4+0x2a2>
 80003e2:	45a1      	cmp	r9, r4
 80003e4:	f240 8081 	bls.w	80004ea <__udivmoddi4+0x2a2>
 80003e8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	eba4 0409 	sub.w	r4, r4, r9
 80003f2:	fa1f f983 	uxth.w	r9, r3
 80003f6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003fa:	fb00 4413 	mls	r4, r0, r3, r4
 80003fe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000402:	fb03 fc0c 	mul.w	ip, r3, ip
 8000406:	45a4      	cmp	ip, r4
 8000408:	d907      	bls.n	800041a <__udivmoddi4+0x1d2>
 800040a:	193c      	adds	r4, r7, r4
 800040c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000410:	d267      	bcs.n	80004e2 <__udivmoddi4+0x29a>
 8000412:	45a4      	cmp	ip, r4
 8000414:	d965      	bls.n	80004e2 <__udivmoddi4+0x29a>
 8000416:	3b02      	subs	r3, #2
 8000418:	443c      	add	r4, r7
 800041a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800041e:	fba0 9302 	umull	r9, r3, r0, r2
 8000422:	eba4 040c 	sub.w	r4, r4, ip
 8000426:	429c      	cmp	r4, r3
 8000428:	46ce      	mov	lr, r9
 800042a:	469c      	mov	ip, r3
 800042c:	d351      	bcc.n	80004d2 <__udivmoddi4+0x28a>
 800042e:	d04e      	beq.n	80004ce <__udivmoddi4+0x286>
 8000430:	b155      	cbz	r5, 8000448 <__udivmoddi4+0x200>
 8000432:	ebb8 030e 	subs.w	r3, r8, lr
 8000436:	eb64 040c 	sbc.w	r4, r4, ip
 800043a:	fa04 f606 	lsl.w	r6, r4, r6
 800043e:	40cb      	lsrs	r3, r1
 8000440:	431e      	orrs	r6, r3
 8000442:	40cc      	lsrs	r4, r1
 8000444:	e9c5 6400 	strd	r6, r4, [r5]
 8000448:	2100      	movs	r1, #0
 800044a:	e750      	b.n	80002ee <__udivmoddi4+0xa6>
 800044c:	f1c2 0320 	rsb	r3, r2, #32
 8000450:	fa20 f103 	lsr.w	r1, r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa24 f303 	lsr.w	r3, r4, r3
 800045c:	4094      	lsls	r4, r2
 800045e:	430c      	orrs	r4, r1
 8000460:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000464:	fa00 fe02 	lsl.w	lr, r0, r2
 8000468:	fa1f f78c 	uxth.w	r7, ip
 800046c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000470:	fb08 3110 	mls	r1, r8, r0, r3
 8000474:	0c23      	lsrs	r3, r4, #16
 8000476:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800047a:	fb00 f107 	mul.w	r1, r0, r7
 800047e:	4299      	cmp	r1, r3
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x24c>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 36ff 	add.w	r6, r0, #4294967295
 800048a:	d22c      	bcs.n	80004e6 <__udivmoddi4+0x29e>
 800048c:	4299      	cmp	r1, r3
 800048e:	d92a      	bls.n	80004e6 <__udivmoddi4+0x29e>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1a5b      	subs	r3, r3, r1
 8000496:	b2a4      	uxth	r4, r4
 8000498:	fbb3 f1f8 	udiv	r1, r3, r8
 800049c:	fb08 3311 	mls	r3, r8, r1, r3
 80004a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004a4:	fb01 f307 	mul.w	r3, r1, r7
 80004a8:	42a3      	cmp	r3, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x276>
 80004ac:	eb1c 0404 	adds.w	r4, ip, r4
 80004b0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004b4:	d213      	bcs.n	80004de <__udivmoddi4+0x296>
 80004b6:	42a3      	cmp	r3, r4
 80004b8:	d911      	bls.n	80004de <__udivmoddi4+0x296>
 80004ba:	3902      	subs	r1, #2
 80004bc:	4464      	add	r4, ip
 80004be:	1ae4      	subs	r4, r4, r3
 80004c0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004c4:	e739      	b.n	800033a <__udivmoddi4+0xf2>
 80004c6:	4604      	mov	r4, r0
 80004c8:	e6f0      	b.n	80002ac <__udivmoddi4+0x64>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e706      	b.n	80002dc <__udivmoddi4+0x94>
 80004ce:	45c8      	cmp	r8, r9
 80004d0:	d2ae      	bcs.n	8000430 <__udivmoddi4+0x1e8>
 80004d2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004d6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004da:	3801      	subs	r0, #1
 80004dc:	e7a8      	b.n	8000430 <__udivmoddi4+0x1e8>
 80004de:	4631      	mov	r1, r6
 80004e0:	e7ed      	b.n	80004be <__udivmoddi4+0x276>
 80004e2:	4603      	mov	r3, r0
 80004e4:	e799      	b.n	800041a <__udivmoddi4+0x1d2>
 80004e6:	4630      	mov	r0, r6
 80004e8:	e7d4      	b.n	8000494 <__udivmoddi4+0x24c>
 80004ea:	46d6      	mov	lr, sl
 80004ec:	e77f      	b.n	80003ee <__udivmoddi4+0x1a6>
 80004ee:	4463      	add	r3, ip
 80004f0:	3802      	subs	r0, #2
 80004f2:	e74d      	b.n	8000390 <__udivmoddi4+0x148>
 80004f4:	4606      	mov	r6, r0
 80004f6:	4623      	mov	r3, r4
 80004f8:	4608      	mov	r0, r1
 80004fa:	e70f      	b.n	800031c <__udivmoddi4+0xd4>
 80004fc:	3e02      	subs	r6, #2
 80004fe:	4463      	add	r3, ip
 8000500:	e730      	b.n	8000364 <__udivmoddi4+0x11c>
 8000502:	bf00      	nop

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b082      	sub	sp, #8
 800050c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800050e:	4b16      	ldr	r3, [pc, #88]	@ (8000568 <MX_DMA_Init+0x60>)
 8000510:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000512:	4a15      	ldr	r2, [pc, #84]	@ (8000568 <MX_DMA_Init+0x60>)
 8000514:	f043 0304 	orr.w	r3, r3, #4
 8000518:	6493      	str	r3, [r2, #72]	@ 0x48
 800051a:	4b13      	ldr	r3, [pc, #76]	@ (8000568 <MX_DMA_Init+0x60>)
 800051c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800051e:	f003 0304 	and.w	r3, r3, #4
 8000522:	607b      	str	r3, [r7, #4]
 8000524:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000526:	4b10      	ldr	r3, [pc, #64]	@ (8000568 <MX_DMA_Init+0x60>)
 8000528:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800052a:	4a0f      	ldr	r2, [pc, #60]	@ (8000568 <MX_DMA_Init+0x60>)
 800052c:	f043 0301 	orr.w	r3, r3, #1
 8000530:	6493      	str	r3, [r2, #72]	@ 0x48
 8000532:	4b0d      	ldr	r3, [pc, #52]	@ (8000568 <MX_DMA_Init+0x60>)
 8000534:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000536:	f003 0301 	and.w	r3, r3, #1
 800053a:	603b      	str	r3, [r7, #0]
 800053c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800053e:	2200      	movs	r2, #0
 8000540:	2100      	movs	r1, #0
 8000542:	200b      	movs	r0, #11
 8000544:	f001 f89b 	bl	800167e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000548:	200b      	movs	r0, #11
 800054a:	f001 f8b2 	bl	80016b2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800054e:	2200      	movs	r2, #0
 8000550:	2100      	movs	r1, #0
 8000552:	200c      	movs	r0, #12
 8000554:	f001 f893 	bl	800167e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000558:	200c      	movs	r0, #12
 800055a:	f001 f8aa 	bl	80016b2 <HAL_NVIC_EnableIRQ>

}
 800055e:	bf00      	nop
 8000560:	3708      	adds	r7, #8
 8000562:	46bd      	mov	sp, r7
 8000564:	bd80      	pop	{r7, pc}
 8000566:	bf00      	nop
 8000568:	40021000 	.word	0x40021000

0800056c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b088      	sub	sp, #32
 8000570:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000572:	f107 030c 	add.w	r3, r7, #12
 8000576:	2200      	movs	r2, #0
 8000578:	601a      	str	r2, [r3, #0]
 800057a:	605a      	str	r2, [r3, #4]
 800057c:	609a      	str	r2, [r3, #8]
 800057e:	60da      	str	r2, [r3, #12]
 8000580:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000582:	4b1e      	ldr	r3, [pc, #120]	@ (80005fc <MX_GPIO_Init+0x90>)
 8000584:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000586:	4a1d      	ldr	r2, [pc, #116]	@ (80005fc <MX_GPIO_Init+0x90>)
 8000588:	f043 0320 	orr.w	r3, r3, #32
 800058c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800058e:	4b1b      	ldr	r3, [pc, #108]	@ (80005fc <MX_GPIO_Init+0x90>)
 8000590:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000592:	f003 0320 	and.w	r3, r3, #32
 8000596:	60bb      	str	r3, [r7, #8]
 8000598:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800059a:	4b18      	ldr	r3, [pc, #96]	@ (80005fc <MX_GPIO_Init+0x90>)
 800059c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800059e:	4a17      	ldr	r2, [pc, #92]	@ (80005fc <MX_GPIO_Init+0x90>)
 80005a0:	f043 0301 	orr.w	r3, r3, #1
 80005a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005a6:	4b15      	ldr	r3, [pc, #84]	@ (80005fc <MX_GPIO_Init+0x90>)
 80005a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005aa:	f003 0301 	and.w	r3, r3, #1
 80005ae:	607b      	str	r3, [r7, #4]
 80005b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005b2:	4b12      	ldr	r3, [pc, #72]	@ (80005fc <MX_GPIO_Init+0x90>)
 80005b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005b6:	4a11      	ldr	r2, [pc, #68]	@ (80005fc <MX_GPIO_Init+0x90>)
 80005b8:	f043 0302 	orr.w	r3, r3, #2
 80005bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005be:	4b0f      	ldr	r3, [pc, #60]	@ (80005fc <MX_GPIO_Init+0x90>)
 80005c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005c2:	f003 0302 	and.w	r3, r3, #2
 80005c6:	603b      	str	r3, [r7, #0]
 80005c8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80005ca:	2200      	movs	r2, #0
 80005cc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80005d0:	480b      	ldr	r0, [pc, #44]	@ (8000600 <MX_GPIO_Init+0x94>)
 80005d2:	f001 fbc5 	bl	8001d60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80005d6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80005da:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005dc:	2301      	movs	r3, #1
 80005de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e0:	2300      	movs	r3, #0
 80005e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005e4:	2300      	movs	r3, #0
 80005e6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80005e8:	f107 030c 	add.w	r3, r7, #12
 80005ec:	4619      	mov	r1, r3
 80005ee:	4804      	ldr	r0, [pc, #16]	@ (8000600 <MX_GPIO_Init+0x94>)
 80005f0:	f001 fa34 	bl	8001a5c <HAL_GPIO_Init>

}
 80005f4:	bf00      	nop
 80005f6:	3720      	adds	r7, #32
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}
 80005fc:	40021000 	.word	0x40021000
 8000600:	48000400 	.word	0x48000400

08000604 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c3_tx;
DMA_HandleTypeDef hdma_i2c3_rx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000608:	4b1b      	ldr	r3, [pc, #108]	@ (8000678 <MX_I2C1_Init+0x74>)
 800060a:	4a1c      	ldr	r2, [pc, #112]	@ (800067c <MX_I2C1_Init+0x78>)
 800060c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10802D9B;
 800060e:	4b1a      	ldr	r3, [pc, #104]	@ (8000678 <MX_I2C1_Init+0x74>)
 8000610:	4a1b      	ldr	r2, [pc, #108]	@ (8000680 <MX_I2C1_Init+0x7c>)
 8000612:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000614:	4b18      	ldr	r3, [pc, #96]	@ (8000678 <MX_I2C1_Init+0x74>)
 8000616:	2200      	movs	r2, #0
 8000618:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800061a:	4b17      	ldr	r3, [pc, #92]	@ (8000678 <MX_I2C1_Init+0x74>)
 800061c:	2201      	movs	r2, #1
 800061e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000620:	4b15      	ldr	r3, [pc, #84]	@ (8000678 <MX_I2C1_Init+0x74>)
 8000622:	2200      	movs	r2, #0
 8000624:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000626:	4b14      	ldr	r3, [pc, #80]	@ (8000678 <MX_I2C1_Init+0x74>)
 8000628:	2200      	movs	r2, #0
 800062a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800062c:	4b12      	ldr	r3, [pc, #72]	@ (8000678 <MX_I2C1_Init+0x74>)
 800062e:	2200      	movs	r2, #0
 8000630:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000632:	4b11      	ldr	r3, [pc, #68]	@ (8000678 <MX_I2C1_Init+0x74>)
 8000634:	2200      	movs	r2, #0
 8000636:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000638:	4b0f      	ldr	r3, [pc, #60]	@ (8000678 <MX_I2C1_Init+0x74>)
 800063a:	2200      	movs	r2, #0
 800063c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800063e:	480e      	ldr	r0, [pc, #56]	@ (8000678 <MX_I2C1_Init+0x74>)
 8000640:	f001 fba6 	bl	8001d90 <HAL_I2C_Init>
 8000644:	4603      	mov	r3, r0
 8000646:	2b00      	cmp	r3, #0
 8000648:	d001      	beq.n	800064e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800064a:	f000 fa48 	bl	8000ade <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800064e:	2100      	movs	r1, #0
 8000650:	4809      	ldr	r0, [pc, #36]	@ (8000678 <MX_I2C1_Init+0x74>)
 8000652:	f002 f943 	bl	80028dc <HAL_I2CEx_ConfigAnalogFilter>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	d001      	beq.n	8000660 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800065c:	f000 fa3f 	bl	8000ade <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000660:	2100      	movs	r1, #0
 8000662:	4805      	ldr	r0, [pc, #20]	@ (8000678 <MX_I2C1_Init+0x74>)
 8000664:	f002 f985 	bl	8002972 <HAL_I2CEx_ConfigDigitalFilter>
 8000668:	4603      	mov	r3, r0
 800066a:	2b00      	cmp	r3, #0
 800066c:	d001      	beq.n	8000672 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800066e:	f000 fa36 	bl	8000ade <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000672:	bf00      	nop
 8000674:	bd80      	pop	{r7, pc}
 8000676:	bf00      	nop
 8000678:	2000002c 	.word	0x2000002c
 800067c:	40005400 	.word	0x40005400
 8000680:	10802d9b 	.word	0x10802d9b

08000684 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000688:	4b1b      	ldr	r3, [pc, #108]	@ (80006f8 <MX_I2C3_Init+0x74>)
 800068a:	4a1c      	ldr	r2, [pc, #112]	@ (80006fc <MX_I2C3_Init+0x78>)
 800068c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x10802D9B;
 800068e:	4b1a      	ldr	r3, [pc, #104]	@ (80006f8 <MX_I2C3_Init+0x74>)
 8000690:	4a1b      	ldr	r2, [pc, #108]	@ (8000700 <MX_I2C3_Init+0x7c>)
 8000692:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000694:	4b18      	ldr	r3, [pc, #96]	@ (80006f8 <MX_I2C3_Init+0x74>)
 8000696:	2200      	movs	r2, #0
 8000698:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800069a:	4b17      	ldr	r3, [pc, #92]	@ (80006f8 <MX_I2C3_Init+0x74>)
 800069c:	2201      	movs	r2, #1
 800069e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006a0:	4b15      	ldr	r3, [pc, #84]	@ (80006f8 <MX_I2C3_Init+0x74>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80006a6:	4b14      	ldr	r3, [pc, #80]	@ (80006f8 <MX_I2C3_Init+0x74>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80006ac:	4b12      	ldr	r3, [pc, #72]	@ (80006f8 <MX_I2C3_Init+0x74>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006b2:	4b11      	ldr	r3, [pc, #68]	@ (80006f8 <MX_I2C3_Init+0x74>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006b8:	4b0f      	ldr	r3, [pc, #60]	@ (80006f8 <MX_I2C3_Init+0x74>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80006be:	480e      	ldr	r0, [pc, #56]	@ (80006f8 <MX_I2C3_Init+0x74>)
 80006c0:	f001 fb66 	bl	8001d90 <HAL_I2C_Init>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d001      	beq.n	80006ce <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 80006ca:	f000 fa08 	bl	8000ade <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80006ce:	2100      	movs	r1, #0
 80006d0:	4809      	ldr	r0, [pc, #36]	@ (80006f8 <MX_I2C3_Init+0x74>)
 80006d2:	f002 f903 	bl	80028dc <HAL_I2CEx_ConfigAnalogFilter>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 80006dc:	f000 f9ff 	bl	8000ade <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80006e0:	2100      	movs	r1, #0
 80006e2:	4805      	ldr	r0, [pc, #20]	@ (80006f8 <MX_I2C3_Init+0x74>)
 80006e4:	f002 f945 	bl	8002972 <HAL_I2CEx_ConfigDigitalFilter>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 80006ee:	f000 f9f6 	bl	8000ade <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80006f2:	bf00      	nop
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	20000080 	.word	0x20000080
 80006fc:	40007800 	.word	0x40007800
 8000700:	10802d9b 	.word	0x10802d9b

08000704 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b09e      	sub	sp, #120	@ 0x78
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800070c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000710:	2200      	movs	r2, #0
 8000712:	601a      	str	r2, [r3, #0]
 8000714:	605a      	str	r2, [r3, #4]
 8000716:	609a      	str	r2, [r3, #8]
 8000718:	60da      	str	r2, [r3, #12]
 800071a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800071c:	f107 0320 	add.w	r3, r7, #32
 8000720:	2244      	movs	r2, #68	@ 0x44
 8000722:	2100      	movs	r1, #0
 8000724:	4618      	mov	r0, r3
 8000726:	f005 fc38 	bl	8005f9a <memset>
  if(i2cHandle->Instance==I2C1)
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	4a88      	ldr	r2, [pc, #544]	@ (8000950 <HAL_I2C_MspInit+0x24c>)
 8000730:	4293      	cmp	r3, r2
 8000732:	d154      	bne.n	80007de <HAL_I2C_MspInit+0xda>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000734:	2340      	movs	r3, #64	@ 0x40
 8000736:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000738:	2300      	movs	r3, #0
 800073a:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800073c:	f107 0320 	add.w	r3, r7, #32
 8000740:	4618      	mov	r0, r3
 8000742:	f002 ff45 	bl	80035d0 <HAL_RCCEx_PeriphCLKConfig>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d001      	beq.n	8000750 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800074c:	f000 f9c7 	bl	8000ade <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000750:	4b80      	ldr	r3, [pc, #512]	@ (8000954 <HAL_I2C_MspInit+0x250>)
 8000752:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000754:	4a7f      	ldr	r2, [pc, #508]	@ (8000954 <HAL_I2C_MspInit+0x250>)
 8000756:	f043 0301 	orr.w	r3, r3, #1
 800075a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800075c:	4b7d      	ldr	r3, [pc, #500]	@ (8000954 <HAL_I2C_MspInit+0x250>)
 800075e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000760:	f003 0301 	and.w	r3, r3, #1
 8000764:	61fb      	str	r3, [r7, #28]
 8000766:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000768:	4b7a      	ldr	r3, [pc, #488]	@ (8000954 <HAL_I2C_MspInit+0x250>)
 800076a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800076c:	4a79      	ldr	r2, [pc, #484]	@ (8000954 <HAL_I2C_MspInit+0x250>)
 800076e:	f043 0302 	orr.w	r3, r3, #2
 8000772:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000774:	4b77      	ldr	r3, [pc, #476]	@ (8000954 <HAL_I2C_MspInit+0x250>)
 8000776:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000778:	f003 0302 	and.w	r3, r3, #2
 800077c:	61bb      	str	r3, [r7, #24]
 800077e:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000780:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000784:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000786:	2312      	movs	r3, #18
 8000788:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078a:	2300      	movs	r3, #0
 800078c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800078e:	2300      	movs	r3, #0
 8000790:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000792:	2304      	movs	r3, #4
 8000794:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000796:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800079a:	4619      	mov	r1, r3
 800079c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007a0:	f001 f95c 	bl	8001a5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80007a4:	2380      	movs	r3, #128	@ 0x80
 80007a6:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80007a8:	2312      	movs	r3, #18
 80007aa:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ac:	2300      	movs	r3, #0
 80007ae:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b0:	2300      	movs	r3, #0
 80007b2:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80007b4:	2304      	movs	r3, #4
 80007b6:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007b8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80007bc:	4619      	mov	r1, r3
 80007be:	4866      	ldr	r0, [pc, #408]	@ (8000958 <HAL_I2C_MspInit+0x254>)
 80007c0:	f001 f94c 	bl	8001a5c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80007c4:	4b63      	ldr	r3, [pc, #396]	@ (8000954 <HAL_I2C_MspInit+0x250>)
 80007c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80007c8:	4a62      	ldr	r2, [pc, #392]	@ (8000954 <HAL_I2C_MspInit+0x250>)
 80007ca:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80007ce:	6593      	str	r3, [r2, #88]	@ 0x58
 80007d0:	4b60      	ldr	r3, [pc, #384]	@ (8000954 <HAL_I2C_MspInit+0x250>)
 80007d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80007d4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80007d8:	617b      	str	r3, [r7, #20]
 80007da:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 80007dc:	e0b4      	b.n	8000948 <HAL_I2C_MspInit+0x244>
  else if(i2cHandle->Instance==I2C3)
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	4a5e      	ldr	r2, [pc, #376]	@ (800095c <HAL_I2C_MspInit+0x258>)
 80007e4:	4293      	cmp	r3, r2
 80007e6:	f040 80af 	bne.w	8000948 <HAL_I2C_MspInit+0x244>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80007ea:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80007ee:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80007f0:	2300      	movs	r3, #0
 80007f2:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007f4:	f107 0320 	add.w	r3, r7, #32
 80007f8:	4618      	mov	r0, r3
 80007fa:	f002 fee9 	bl	80035d0 <HAL_RCCEx_PeriphCLKConfig>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d001      	beq.n	8000808 <HAL_I2C_MspInit+0x104>
      Error_Handler();
 8000804:	f000 f96b 	bl	8000ade <Error_Handler>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000808:	4b52      	ldr	r3, [pc, #328]	@ (8000954 <HAL_I2C_MspInit+0x250>)
 800080a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800080c:	4a51      	ldr	r2, [pc, #324]	@ (8000954 <HAL_I2C_MspInit+0x250>)
 800080e:	f043 0301 	orr.w	r3, r3, #1
 8000812:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000814:	4b4f      	ldr	r3, [pc, #316]	@ (8000954 <HAL_I2C_MspInit+0x250>)
 8000816:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000818:	f003 0301 	and.w	r3, r3, #1
 800081c:	613b      	str	r3, [r7, #16]
 800081e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000820:	4b4c      	ldr	r3, [pc, #304]	@ (8000954 <HAL_I2C_MspInit+0x250>)
 8000822:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000824:	4a4b      	ldr	r2, [pc, #300]	@ (8000954 <HAL_I2C_MspInit+0x250>)
 8000826:	f043 0302 	orr.w	r3, r3, #2
 800082a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800082c:	4b49      	ldr	r3, [pc, #292]	@ (8000954 <HAL_I2C_MspInit+0x250>)
 800082e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000830:	f003 0302 	and.w	r3, r3, #2
 8000834:	60fb      	str	r3, [r7, #12]
 8000836:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000838:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800083c:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800083e:	2312      	movs	r3, #18
 8000840:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000842:	2301      	movs	r3, #1
 8000844:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000846:	2300      	movs	r3, #0
 8000848:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF2_I2C3;
 800084a:	2302      	movs	r3, #2
 800084c:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800084e:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000852:	4619      	mov	r1, r3
 8000854:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000858:	f001 f900 	bl	8001a5c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800085c:	2320      	movs	r3, #32
 800085e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000860:	2312      	movs	r3, #18
 8000862:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000864:	2301      	movs	r3, #1
 8000866:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000868:	2300      	movs	r3, #0
 800086a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C3;
 800086c:	2308      	movs	r3, #8
 800086e:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000870:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000874:	4619      	mov	r1, r3
 8000876:	4838      	ldr	r0, [pc, #224]	@ (8000958 <HAL_I2C_MspInit+0x254>)
 8000878:	f001 f8f0 	bl	8001a5c <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800087c:	4b35      	ldr	r3, [pc, #212]	@ (8000954 <HAL_I2C_MspInit+0x250>)
 800087e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000880:	4a34      	ldr	r2, [pc, #208]	@ (8000954 <HAL_I2C_MspInit+0x250>)
 8000882:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8000886:	6593      	str	r3, [r2, #88]	@ 0x58
 8000888:	4b32      	ldr	r3, [pc, #200]	@ (8000954 <HAL_I2C_MspInit+0x250>)
 800088a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800088c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8000890:	60bb      	str	r3, [r7, #8]
 8000892:	68bb      	ldr	r3, [r7, #8]
    hdma_i2c3_tx.Instance = DMA1_Channel1;
 8000894:	4b32      	ldr	r3, [pc, #200]	@ (8000960 <HAL_I2C_MspInit+0x25c>)
 8000896:	4a33      	ldr	r2, [pc, #204]	@ (8000964 <HAL_I2C_MspInit+0x260>)
 8000898:	601a      	str	r2, [r3, #0]
    hdma_i2c3_tx.Init.Request = DMA_REQUEST_I2C3_TX;
 800089a:	4b31      	ldr	r3, [pc, #196]	@ (8000960 <HAL_I2C_MspInit+0x25c>)
 800089c:	2215      	movs	r2, #21
 800089e:	605a      	str	r2, [r3, #4]
    hdma_i2c3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80008a0:	4b2f      	ldr	r3, [pc, #188]	@ (8000960 <HAL_I2C_MspInit+0x25c>)
 80008a2:	2210      	movs	r2, #16
 80008a4:	609a      	str	r2, [r3, #8]
    hdma_i2c3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80008a6:	4b2e      	ldr	r3, [pc, #184]	@ (8000960 <HAL_I2C_MspInit+0x25c>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	60da      	str	r2, [r3, #12]
    hdma_i2c3_tx.Init.MemInc = DMA_MINC_DISABLE;
 80008ac:	4b2c      	ldr	r3, [pc, #176]	@ (8000960 <HAL_I2C_MspInit+0x25c>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	611a      	str	r2, [r3, #16]
    hdma_i2c3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80008b2:	4b2b      	ldr	r3, [pc, #172]	@ (8000960 <HAL_I2C_MspInit+0x25c>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	615a      	str	r2, [r3, #20]
    hdma_i2c3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80008b8:	4b29      	ldr	r3, [pc, #164]	@ (8000960 <HAL_I2C_MspInit+0x25c>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	619a      	str	r2, [r3, #24]
    hdma_i2c3_tx.Init.Mode = DMA_NORMAL;
 80008be:	4b28      	ldr	r3, [pc, #160]	@ (8000960 <HAL_I2C_MspInit+0x25c>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	61da      	str	r2, [r3, #28]
    hdma_i2c3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80008c4:	4b26      	ldr	r3, [pc, #152]	@ (8000960 <HAL_I2C_MspInit+0x25c>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c3_tx) != HAL_OK)
 80008ca:	4825      	ldr	r0, [pc, #148]	@ (8000960 <HAL_I2C_MspInit+0x25c>)
 80008cc:	f000 ff0c 	bl	80016e8 <HAL_DMA_Init>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <HAL_I2C_MspInit+0x1d6>
      Error_Handler();
 80008d6:	f000 f902 	bl	8000ade <Error_Handler>
    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c3_tx);
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	4a20      	ldr	r2, [pc, #128]	@ (8000960 <HAL_I2C_MspInit+0x25c>)
 80008de:	639a      	str	r2, [r3, #56]	@ 0x38
 80008e0:	4a1f      	ldr	r2, [pc, #124]	@ (8000960 <HAL_I2C_MspInit+0x25c>)
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	6293      	str	r3, [r2, #40]	@ 0x28
    hdma_i2c3_rx.Instance = DMA1_Channel2;
 80008e6:	4b20      	ldr	r3, [pc, #128]	@ (8000968 <HAL_I2C_MspInit+0x264>)
 80008e8:	4a20      	ldr	r2, [pc, #128]	@ (800096c <HAL_I2C_MspInit+0x268>)
 80008ea:	601a      	str	r2, [r3, #0]
    hdma_i2c3_rx.Init.Request = DMA_REQUEST_I2C3_RX;
 80008ec:	4b1e      	ldr	r3, [pc, #120]	@ (8000968 <HAL_I2C_MspInit+0x264>)
 80008ee:	2214      	movs	r2, #20
 80008f0:	605a      	str	r2, [r3, #4]
    hdma_i2c3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80008f2:	4b1d      	ldr	r3, [pc, #116]	@ (8000968 <HAL_I2C_MspInit+0x264>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	609a      	str	r2, [r3, #8]
    hdma_i2c3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80008f8:	4b1b      	ldr	r3, [pc, #108]	@ (8000968 <HAL_I2C_MspInit+0x264>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	60da      	str	r2, [r3, #12]
    hdma_i2c3_rx.Init.MemInc = DMA_MINC_DISABLE;
 80008fe:	4b1a      	ldr	r3, [pc, #104]	@ (8000968 <HAL_I2C_MspInit+0x264>)
 8000900:	2200      	movs	r2, #0
 8000902:	611a      	str	r2, [r3, #16]
    hdma_i2c3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000904:	4b18      	ldr	r3, [pc, #96]	@ (8000968 <HAL_I2C_MspInit+0x264>)
 8000906:	2200      	movs	r2, #0
 8000908:	615a      	str	r2, [r3, #20]
    hdma_i2c3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800090a:	4b17      	ldr	r3, [pc, #92]	@ (8000968 <HAL_I2C_MspInit+0x264>)
 800090c:	2200      	movs	r2, #0
 800090e:	619a      	str	r2, [r3, #24]
    hdma_i2c3_rx.Init.Mode = DMA_NORMAL;
 8000910:	4b15      	ldr	r3, [pc, #84]	@ (8000968 <HAL_I2C_MspInit+0x264>)
 8000912:	2200      	movs	r2, #0
 8000914:	61da      	str	r2, [r3, #28]
    hdma_i2c3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000916:	4b14      	ldr	r3, [pc, #80]	@ (8000968 <HAL_I2C_MspInit+0x264>)
 8000918:	2200      	movs	r2, #0
 800091a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c3_rx) != HAL_OK)
 800091c:	4812      	ldr	r0, [pc, #72]	@ (8000968 <HAL_I2C_MspInit+0x264>)
 800091e:	f000 fee3 	bl	80016e8 <HAL_DMA_Init>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d001      	beq.n	800092c <HAL_I2C_MspInit+0x228>
      Error_Handler();
 8000928:	f000 f8d9 	bl	8000ade <Error_Handler>
    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c3_rx);
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	4a0e      	ldr	r2, [pc, #56]	@ (8000968 <HAL_I2C_MspInit+0x264>)
 8000930:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000932:	4a0d      	ldr	r2, [pc, #52]	@ (8000968 <HAL_I2C_MspInit+0x264>)
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 0, 0);
 8000938:	2200      	movs	r2, #0
 800093a:	2100      	movs	r1, #0
 800093c:	205c      	movs	r0, #92	@ 0x5c
 800093e:	f000 fe9e 	bl	800167e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 8000942:	205c      	movs	r0, #92	@ 0x5c
 8000944:	f000 feb5 	bl	80016b2 <HAL_NVIC_EnableIRQ>
}
 8000948:	bf00      	nop
 800094a:	3778      	adds	r7, #120	@ 0x78
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}
 8000950:	40005400 	.word	0x40005400
 8000954:	40021000 	.word	0x40021000
 8000958:	48000400 	.word	0x48000400
 800095c:	40007800 	.word	0x40007800
 8000960:	200000d4 	.word	0x200000d4
 8000964:	40020008 	.word	0x40020008
 8000968:	20000134 	.word	0x20000134
 800096c:	4002001c 	.word	0x4002001c

08000970 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b086      	sub	sp, #24
 8000974:	af04      	add	r7, sp, #16
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000976:	f000 fd14 	bl	80013a2 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800097a:	f000 f865 	bl	8000a48 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800097e:	f7ff fdf5 	bl	800056c <MX_GPIO_Init>
	MX_DMA_Init();
 8000982:	f7ff fdc1 	bl	8000508 <MX_DMA_Init>
	MX_USART2_UART_Init();
 8000986:	f000 fc3f 	bl	8001208 <MX_USART2_UART_Init>
	MX_I2C1_Init();
 800098a:	f7ff fe3b 	bl	8000604 <MX_I2C1_Init>
	MX_TIM3_Init();
 800098e:	f000 f97b 	bl	8000c88 <MX_TIM3_Init>
	MX_TIM4_Init();
 8000992:	f000 f9cf 	bl	8000d34 <MX_TIM4_Init>
	MX_I2C3_Init();
 8000996:	f7ff fe75 	bl	8000684 <MX_I2C3_Init>
	MX_TIM2_Init();
 800099a:	f000 f92b 	bl	8000bf4 <MX_TIM2_Init>
	MX_TIM8_Init();
 800099e:	f000 fa1f 	bl	8000de0 <MX_TIM8_Init>
	/* USER CODE BEGIN 2 */
	//  BNO055_Init(&bno, &hi2c3, CONFIGMODE, NDOF);

	while (BNO055_Init(&bno, &hi2c3, 0, NDOF) != HAL_OK) {
 80009a2:	e002      	b.n	80009aa <main+0x3a>
		HAL_Delay(100);
 80009a4:	2064      	movs	r0, #100	@ 0x64
 80009a6:	f000 fd6d 	bl	8001484 <HAL_Delay>
	while (BNO055_Init(&bno, &hi2c3, 0, NDOF) != HAL_OK) {
 80009aa:	230c      	movs	r3, #12
 80009ac:	2200      	movs	r2, #0
 80009ae:	4922      	ldr	r1, [pc, #136]	@ (8000a38 <main+0xc8>)
 80009b0:	4822      	ldr	r0, [pc, #136]	@ (8000a3c <main+0xcc>)
 80009b2:	f004 fffb 	bl	80059ac <BNO055_Init>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d1f3      	bne.n	80009a4 <main+0x34>
	}

	while(BNO055_isFullyCalibrated(&bno) != HAL_OK){
 80009bc:	e02f      	b.n	8000a1e <main+0xae>
		HAL_I2C_Mem_Read(bno.hi2cx, bno.address, OPR_MODE, 1, bno.RxBuffer, 1, 10);
 80009be:	4b1f      	ldr	r3, [pc, #124]	@ (8000a3c <main+0xcc>)
 80009c0:	6818      	ldr	r0, [r3, #0]
 80009c2:	4b1e      	ldr	r3, [pc, #120]	@ (8000a3c <main+0xcc>)
 80009c4:	791b      	ldrb	r3, [r3, #4]
 80009c6:	4619      	mov	r1, r3
 80009c8:	230a      	movs	r3, #10
 80009ca:	9302      	str	r3, [sp, #8]
 80009cc:	2301      	movs	r3, #1
 80009ce:	9301      	str	r3, [sp, #4]
 80009d0:	4b1b      	ldr	r3, [pc, #108]	@ (8000a40 <main+0xd0>)
 80009d2:	9300      	str	r3, [sp, #0]
 80009d4:	2301      	movs	r3, #1
 80009d6:	223d      	movs	r2, #61	@ 0x3d
 80009d8:	f001 fb8a 	bl	80020f0 <HAL_I2C_Mem_Read>
		uint8_t mode = bno.RxBuffer[0] & 0x0F;
 80009dc:	4b17      	ldr	r3, [pc, #92]	@ (8000a3c <main+0xcc>)
 80009de:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 80009e2:	f003 030f 	and.w	r3, r3, #15
 80009e6:	71fb      	strb	r3, [r7, #7]
		HAL_Delay(20);
 80009e8:	2014      	movs	r0, #20
 80009ea:	f000 fd4b 	bl	8001484 <HAL_Delay>

		HAL_I2C_Mem_Read(bno.hi2cx, bno.address, CALIB_STAT, 1, bno.RxBuffer, 1, 10);
 80009ee:	4b13      	ldr	r3, [pc, #76]	@ (8000a3c <main+0xcc>)
 80009f0:	6818      	ldr	r0, [r3, #0]
 80009f2:	4b12      	ldr	r3, [pc, #72]	@ (8000a3c <main+0xcc>)
 80009f4:	791b      	ldrb	r3, [r3, #4]
 80009f6:	4619      	mov	r1, r3
 80009f8:	230a      	movs	r3, #10
 80009fa:	9302      	str	r3, [sp, #8]
 80009fc:	2301      	movs	r3, #1
 80009fe:	9301      	str	r3, [sp, #4]
 8000a00:	4b0f      	ldr	r3, [pc, #60]	@ (8000a40 <main+0xd0>)
 8000a02:	9300      	str	r3, [sp, #0]
 8000a04:	2301      	movs	r3, #1
 8000a06:	2235      	movs	r2, #53	@ 0x35
 8000a08:	f001 fb72 	bl	80020f0 <HAL_I2C_Mem_Read>
		uint8_t calibated = bno.RxBuffer[0] & 0x03;
 8000a0c:	4b0b      	ldr	r3, [pc, #44]	@ (8000a3c <main+0xcc>)
 8000a0e:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 8000a12:	f003 0303 	and.w	r3, r3, #3
 8000a16:	71bb      	strb	r3, [r7, #6]
		HAL_Delay(20);
 8000a18:	2014      	movs	r0, #20
 8000a1a:	f000 fd33 	bl	8001484 <HAL_Delay>
	while(BNO055_isFullyCalibrated(&bno) != HAL_OK){
 8000a1e:	4807      	ldr	r0, [pc, #28]	@ (8000a3c <main+0xcc>)
 8000a20:	f005 f916 	bl	8005c50 <BNO055_isFullyCalibrated>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d1c9      	bne.n	80009be <main+0x4e>
	}
	sys = 1;
 8000a2a:	4b06      	ldr	r3, [pc, #24]	@ (8000a44 <main+0xd4>)
 8000a2c:	2201      	movs	r2, #1
 8000a2e:	701a      	strb	r2, [r3, #0]

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		HAL_Delay(100);
 8000a30:	2064      	movs	r0, #100	@ 0x64
 8000a32:	f000 fd27 	bl	8001484 <HAL_Delay>
 8000a36:	e7fb      	b.n	8000a30 <main+0xc0>
 8000a38:	20000080 	.word	0x20000080
 8000a3c:	20000194 	.word	0x20000194
 8000a40:	200001e6 	.word	0x200001e6
 8000a44:	20000224 	.word	0x20000224

08000a48 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b094      	sub	sp, #80	@ 0x50
 8000a4c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a4e:	f107 0318 	add.w	r3, r7, #24
 8000a52:	2238      	movs	r2, #56	@ 0x38
 8000a54:	2100      	movs	r1, #0
 8000a56:	4618      	mov	r0, r3
 8000a58:	f005 fa9f 	bl	8005f9a <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a5c:	1d3b      	adds	r3, r7, #4
 8000a5e:	2200      	movs	r2, #0
 8000a60:	601a      	str	r2, [r3, #0]
 8000a62:	605a      	str	r2, [r3, #4]
 8000a64:	609a      	str	r2, [r3, #8]
 8000a66:	60da      	str	r2, [r3, #12]
 8000a68:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000a6a:	2000      	movs	r0, #0
 8000a6c:	f001 ffce 	bl	8002a0c <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a70:	2302      	movs	r3, #2
 8000a72:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a74:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000a78:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a7a:	2340      	movs	r3, #64	@ 0x40
 8000a7c:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a7e:	2302      	movs	r3, #2
 8000a80:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a82:	2302      	movs	r3, #2
 8000a84:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000a86:	2304      	movs	r3, #4
 8000a88:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 85;
 8000a8a:	2355      	movs	r3, #85	@ 0x55
 8000a8c:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a8e:	2302      	movs	r3, #2
 8000a90:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000a92:	2302      	movs	r3, #2
 8000a94:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000a96:	2302      	movs	r3, #2
 8000a98:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a9a:	f107 0318 	add.w	r3, r7, #24
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	f002 f868 	bl	8002b74 <HAL_RCC_OscConfig>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d001      	beq.n	8000aae <SystemClock_Config+0x66>
	{
		Error_Handler();
 8000aaa:	f000 f818 	bl	8000ade <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000aae:	230f      	movs	r3, #15
 8000ab0:	607b      	str	r3, [r7, #4]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ab2:	2303      	movs	r3, #3
 8000ab4:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000aba:	2300      	movs	r3, #0
 8000abc:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000ac2:	1d3b      	adds	r3, r7, #4
 8000ac4:	2104      	movs	r1, #4
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	f002 fb66 	bl	8003198 <HAL_RCC_ClockConfig>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d001      	beq.n	8000ad6 <SystemClock_Config+0x8e>
	{
		Error_Handler();
 8000ad2:	f000 f804 	bl	8000ade <Error_Handler>
	}
}
 8000ad6:	bf00      	nop
 8000ad8:	3750      	adds	r7, #80	@ 0x50
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}

08000ade <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000ade:	b480      	push	{r7}
 8000ae0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ae2:	b672      	cpsid	i
}
 8000ae4:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000ae6:	bf00      	nop
 8000ae8:	e7fd      	b.n	8000ae6 <Error_Handler+0x8>
	...

08000aec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b082      	sub	sp, #8
 8000af0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000af2:	4b0f      	ldr	r3, [pc, #60]	@ (8000b30 <HAL_MspInit+0x44>)
 8000af4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000af6:	4a0e      	ldr	r2, [pc, #56]	@ (8000b30 <HAL_MspInit+0x44>)
 8000af8:	f043 0301 	orr.w	r3, r3, #1
 8000afc:	6613      	str	r3, [r2, #96]	@ 0x60
 8000afe:	4b0c      	ldr	r3, [pc, #48]	@ (8000b30 <HAL_MspInit+0x44>)
 8000b00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b02:	f003 0301 	and.w	r3, r3, #1
 8000b06:	607b      	str	r3, [r7, #4]
 8000b08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b0a:	4b09      	ldr	r3, [pc, #36]	@ (8000b30 <HAL_MspInit+0x44>)
 8000b0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b0e:	4a08      	ldr	r2, [pc, #32]	@ (8000b30 <HAL_MspInit+0x44>)
 8000b10:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b14:	6593      	str	r3, [r2, #88]	@ 0x58
 8000b16:	4b06      	ldr	r3, [pc, #24]	@ (8000b30 <HAL_MspInit+0x44>)
 8000b18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b1e:	603b      	str	r3, [r7, #0]
 8000b20:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000b22:	f002 f817 	bl	8002b54 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b26:	bf00      	nop
 8000b28:	3708      	adds	r7, #8
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	40021000 	.word	0x40021000

08000b34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b38:	bf00      	nop
 8000b3a:	e7fd      	b.n	8000b38 <NMI_Handler+0x4>

08000b3c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b40:	bf00      	nop
 8000b42:	e7fd      	b.n	8000b40 <HardFault_Handler+0x4>

08000b44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b48:	bf00      	nop
 8000b4a:	e7fd      	b.n	8000b48 <MemManage_Handler+0x4>

08000b4c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b50:	bf00      	nop
 8000b52:	e7fd      	b.n	8000b50 <BusFault_Handler+0x4>

08000b54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b58:	bf00      	nop
 8000b5a:	e7fd      	b.n	8000b58 <UsageFault_Handler+0x4>

08000b5c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b60:	bf00      	nop
 8000b62:	46bd      	mov	sp, r7
 8000b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b68:	4770      	bx	lr

08000b6a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b6a:	b480      	push	{r7}
 8000b6c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b6e:	bf00      	nop
 8000b70:	46bd      	mov	sp, r7
 8000b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b76:	4770      	bx	lr

08000b78 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b7c:	bf00      	nop
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b84:	4770      	bx	lr

08000b86 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b86:	b580      	push	{r7, lr}
 8000b88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b8a:	f000 fc5d 	bl	8001448 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b8e:	bf00      	nop
 8000b90:	bd80      	pop	{r7, pc}
	...

08000b94 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c3_tx);
 8000b98:	4802      	ldr	r0, [pc, #8]	@ (8000ba4 <DMA1_Channel1_IRQHandler+0x10>)
 8000b9a:	f000 fe4d 	bl	8001838 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000b9e:	bf00      	nop
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	200000d4 	.word	0x200000d4

08000ba8 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c3_rx);
 8000bac:	4802      	ldr	r0, [pc, #8]	@ (8000bb8 <DMA1_Channel2_IRQHandler+0x10>)
 8000bae:	f000 fe43 	bl	8001838 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8000bb2:	bf00      	nop
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	20000134 	.word	0x20000134

08000bbc <I2C3_EV_IRQHandler>:

/**
  * @brief This function handles I2C3 event interrupt / I2C3 wake-up interrupt through EXTI line 27.
  */
void I2C3_EV_IRQHandler(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c3);
 8000bc0:	4802      	ldr	r0, [pc, #8]	@ (8000bcc <I2C3_EV_IRQHandler+0x10>)
 8000bc2:	f001 fbaf 	bl	8002324 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C3_EV_IRQn 1 */

  /* USER CODE END I2C3_EV_IRQn 1 */
}
 8000bc6:	bf00      	nop
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	20000080 	.word	0x20000080

08000bd0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000bd4:	4b06      	ldr	r3, [pc, #24]	@ (8000bf0 <SystemInit+0x20>)
 8000bd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000bda:	4a05      	ldr	r2, [pc, #20]	@ (8000bf0 <SystemInit+0x20>)
 8000bdc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000be0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000be4:	bf00      	nop
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop
 8000bf0:	e000ed00 	.word	0xe000ed00

08000bf4 <MX_TIM2_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim8;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b088      	sub	sp, #32
 8000bf8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_HallSensor_InitTypeDef sConfig = {0};
 8000bfa:	f107 0310 	add.w	r3, r7, #16
 8000bfe:	2200      	movs	r2, #0
 8000c00:	601a      	str	r2, [r3, #0]
 8000c02:	605a      	str	r2, [r3, #4]
 8000c04:	609a      	str	r2, [r3, #8]
 8000c06:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c08:	1d3b      	adds	r3, r7, #4
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	601a      	str	r2, [r3, #0]
 8000c0e:	605a      	str	r2, [r3, #4]
 8000c10:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c12:	4b1c      	ldr	r3, [pc, #112]	@ (8000c84 <MX_TIM2_Init+0x90>)
 8000c14:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000c18:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000c1a:	4b1a      	ldr	r3, [pc, #104]	@ (8000c84 <MX_TIM2_Init+0x90>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c20:	4b18      	ldr	r3, [pc, #96]	@ (8000c84 <MX_TIM2_Init+0x90>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000c26:	4b17      	ldr	r3, [pc, #92]	@ (8000c84 <MX_TIM2_Init+0x90>)
 8000c28:	f04f 32ff 	mov.w	r2, #4294967295
 8000c2c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c2e:	4b15      	ldr	r3, [pc, #84]	@ (8000c84 <MX_TIM2_Init+0x90>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c34:	4b13      	ldr	r3, [pc, #76]	@ (8000c84 <MX_TIM2_Init+0x90>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	619a      	str	r2, [r3, #24]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	617b      	str	r3, [r7, #20]
  sConfig.IC1Filter = 0;
 8000c42:	2300      	movs	r3, #0
 8000c44:	61bb      	str	r3, [r7, #24]
  sConfig.Commutation_Delay = 0;
 8000c46:	2300      	movs	r3, #0
 8000c48:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_HallSensor_Init(&htim2, &sConfig) != HAL_OK)
 8000c4a:	f107 0310 	add.w	r3, r7, #16
 8000c4e:	4619      	mov	r1, r3
 8000c50:	480c      	ldr	r0, [pc, #48]	@ (8000c84 <MX_TIM2_Init+0x90>)
 8000c52:	f003 feaf 	bl	80049b4 <HAL_TIMEx_HallSensor_Init>
 8000c56:	4603      	mov	r3, r0
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d001      	beq.n	8000c60 <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 8000c5c:	f7ff ff3f 	bl	8000ade <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 8000c60:	2350      	movs	r3, #80	@ 0x50
 8000c62:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c64:	2300      	movs	r3, #0
 8000c66:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c68:	1d3b      	adds	r3, r7, #4
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	4805      	ldr	r0, [pc, #20]	@ (8000c84 <MX_TIM2_Init+0x90>)
 8000c6e:	f003 ff51 	bl	8004b14 <HAL_TIMEx_MasterConfigSynchronization>
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d001      	beq.n	8000c7c <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 8000c78:	f7ff ff31 	bl	8000ade <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000c7c:	bf00      	nop
 8000c7e:	3720      	adds	r7, #32
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	20000228 	.word	0x20000228

08000c88 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b08c      	sub	sp, #48	@ 0x30
 8000c8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000c8e:	f107 030c 	add.w	r3, r7, #12
 8000c92:	2224      	movs	r2, #36	@ 0x24
 8000c94:	2100      	movs	r1, #0
 8000c96:	4618      	mov	r0, r3
 8000c98:	f005 f97f 	bl	8005f9a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c9c:	463b      	mov	r3, r7
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	601a      	str	r2, [r3, #0]
 8000ca2:	605a      	str	r2, [r3, #4]
 8000ca4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000ca6:	4b21      	ldr	r3, [pc, #132]	@ (8000d2c <MX_TIM3_Init+0xa4>)
 8000ca8:	4a21      	ldr	r2, [pc, #132]	@ (8000d30 <MX_TIM3_Init+0xa8>)
 8000caa:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000cac:	4b1f      	ldr	r3, [pc, #124]	@ (8000d2c <MX_TIM3_Init+0xa4>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cb2:	4b1e      	ldr	r3, [pc, #120]	@ (8000d2c <MX_TIM3_Init+0xa4>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000cb8:	4b1c      	ldr	r3, [pc, #112]	@ (8000d2c <MX_TIM3_Init+0xa4>)
 8000cba:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000cbe:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cc0:	4b1a      	ldr	r3, [pc, #104]	@ (8000d2c <MX_TIM3_Init+0xa4>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cc6:	4b19      	ldr	r3, [pc, #100]	@ (8000d2c <MX_TIM3_Init+0xa4>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000ccc:	2301      	movs	r3, #1
 8000cce:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000cd4:	2301      	movs	r3, #1
 8000cd6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000ce4:	2301      	movs	r3, #1
 8000ce6:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000cec:	2300      	movs	r3, #0
 8000cee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000cf0:	f107 030c 	add.w	r3, r7, #12
 8000cf4:	4619      	mov	r1, r3
 8000cf6:	480d      	ldr	r0, [pc, #52]	@ (8000d2c <MX_TIM3_Init+0xa4>)
 8000cf8:	f002 ff12 	bl	8003b20 <HAL_TIM_Encoder_Init>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d001      	beq.n	8000d06 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8000d02:	f7ff feec 	bl	8000ade <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d06:	2300      	movs	r3, #0
 8000d08:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000d0e:	463b      	mov	r3, r7
 8000d10:	4619      	mov	r1, r3
 8000d12:	4806      	ldr	r0, [pc, #24]	@ (8000d2c <MX_TIM3_Init+0xa4>)
 8000d14:	f003 fefe 	bl	8004b14 <HAL_TIMEx_MasterConfigSynchronization>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d001      	beq.n	8000d22 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8000d1e:	f7ff fede 	bl	8000ade <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000d22:	bf00      	nop
 8000d24:	3730      	adds	r7, #48	@ 0x30
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	20000274 	.word	0x20000274
 8000d30:	40000400 	.word	0x40000400

08000d34 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b08c      	sub	sp, #48	@ 0x30
 8000d38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000d3a:	f107 030c 	add.w	r3, r7, #12
 8000d3e:	2224      	movs	r2, #36	@ 0x24
 8000d40:	2100      	movs	r1, #0
 8000d42:	4618      	mov	r0, r3
 8000d44:	f005 f929 	bl	8005f9a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d48:	463b      	mov	r3, r7
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	601a      	str	r2, [r3, #0]
 8000d4e:	605a      	str	r2, [r3, #4]
 8000d50:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000d52:	4b21      	ldr	r3, [pc, #132]	@ (8000dd8 <MX_TIM4_Init+0xa4>)
 8000d54:	4a21      	ldr	r2, [pc, #132]	@ (8000ddc <MX_TIM4_Init+0xa8>)
 8000d56:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000d58:	4b1f      	ldr	r3, [pc, #124]	@ (8000dd8 <MX_TIM4_Init+0xa4>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d5e:	4b1e      	ldr	r3, [pc, #120]	@ (8000dd8 <MX_TIM4_Init+0xa4>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000d64:	4b1c      	ldr	r3, [pc, #112]	@ (8000dd8 <MX_TIM4_Init+0xa4>)
 8000d66:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000d6a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d6c:	4b1a      	ldr	r3, [pc, #104]	@ (8000dd8 <MX_TIM4_Init+0xa4>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d72:	4b19      	ldr	r3, [pc, #100]	@ (8000dd8 <MX_TIM4_Init+0xa4>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000d78:	2301      	movs	r3, #1
 8000d7a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000d80:	2301      	movs	r3, #1
 8000d82:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000d84:	2300      	movs	r3, #0
 8000d86:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000d90:	2301      	movs	r3, #1
 8000d92:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000d94:	2300      	movs	r3, #0
 8000d96:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8000d9c:	f107 030c 	add.w	r3, r7, #12
 8000da0:	4619      	mov	r1, r3
 8000da2:	480d      	ldr	r0, [pc, #52]	@ (8000dd8 <MX_TIM4_Init+0xa4>)
 8000da4:	f002 febc 	bl	8003b20 <HAL_TIM_Encoder_Init>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d001      	beq.n	8000db2 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8000dae:	f7ff fe96 	bl	8000ade <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000db2:	2300      	movs	r3, #0
 8000db4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000db6:	2300      	movs	r3, #0
 8000db8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000dba:	463b      	mov	r3, r7
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	4806      	ldr	r0, [pc, #24]	@ (8000dd8 <MX_TIM4_Init+0xa4>)
 8000dc0:	f003 fea8 	bl	8004b14 <HAL_TIMEx_MasterConfigSynchronization>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d001      	beq.n	8000dce <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8000dca:	f7ff fe88 	bl	8000ade <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000dce:	bf00      	nop
 8000dd0:	3730      	adds	r7, #48	@ 0x30
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	200002c0 	.word	0x200002c0
 8000ddc:	40000800 	.word	0x40000800

08000de0 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b09c      	sub	sp, #112	@ 0x70
 8000de4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000de6:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000dea:	2200      	movs	r2, #0
 8000dec:	601a      	str	r2, [r3, #0]
 8000dee:	605a      	str	r2, [r3, #4]
 8000df0:	609a      	str	r2, [r3, #8]
 8000df2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000df4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000df8:	2200      	movs	r2, #0
 8000dfa:	601a      	str	r2, [r3, #0]
 8000dfc:	605a      	str	r2, [r3, #4]
 8000dfe:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e00:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000e04:	2200      	movs	r2, #0
 8000e06:	601a      	str	r2, [r3, #0]
 8000e08:	605a      	str	r2, [r3, #4]
 8000e0a:	609a      	str	r2, [r3, #8]
 8000e0c:	60da      	str	r2, [r3, #12]
 8000e0e:	611a      	str	r2, [r3, #16]
 8000e10:	615a      	str	r2, [r3, #20]
 8000e12:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000e14:	1d3b      	adds	r3, r7, #4
 8000e16:	2234      	movs	r2, #52	@ 0x34
 8000e18:	2100      	movs	r1, #0
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f005 f8bd 	bl	8005f9a <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000e20:	4b4b      	ldr	r3, [pc, #300]	@ (8000f50 <MX_TIM8_Init+0x170>)
 8000e22:	4a4c      	ldr	r2, [pc, #304]	@ (8000f54 <MX_TIM8_Init+0x174>)
 8000e24:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8000e26:	4b4a      	ldr	r3, [pc, #296]	@ (8000f50 <MX_TIM8_Init+0x170>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e2c:	4b48      	ldr	r3, [pc, #288]	@ (8000f50 <MX_TIM8_Init+0x170>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8000e32:	4b47      	ldr	r3, [pc, #284]	@ (8000f50 <MX_TIM8_Init+0x170>)
 8000e34:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000e38:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e3a:	4b45      	ldr	r3, [pc, #276]	@ (8000f50 <MX_TIM8_Init+0x170>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000e40:	4b43      	ldr	r3, [pc, #268]	@ (8000f50 <MX_TIM8_Init+0x170>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e46:	4b42      	ldr	r3, [pc, #264]	@ (8000f50 <MX_TIM8_Init+0x170>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8000e4c:	4840      	ldr	r0, [pc, #256]	@ (8000f50 <MX_TIM8_Init+0x170>)
 8000e4e:	f002 fdaf 	bl	80039b0 <HAL_TIM_Base_Init>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d001      	beq.n	8000e5c <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 8000e58:	f7ff fe41 	bl	8000ade <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e5c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e60:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8000e62:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000e66:	4619      	mov	r1, r3
 8000e68:	4839      	ldr	r0, [pc, #228]	@ (8000f50 <MX_TIM8_Init+0x170>)
 8000e6a:	f003 f813 	bl	8003e94 <HAL_TIM_ConfigClockSource>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d001      	beq.n	8000e78 <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 8000e74:	f7ff fe33 	bl	8000ade <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8000e78:	4835      	ldr	r0, [pc, #212]	@ (8000f50 <MX_TIM8_Init+0x170>)
 8000e7a:	f002 fdf0 	bl	8003a5e <HAL_TIM_PWM_Init>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d001      	beq.n	8000e88 <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 8000e84:	f7ff fe2b 	bl	8000ade <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e90:	2300      	movs	r3, #0
 8000e92:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000e94:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000e98:	4619      	mov	r1, r3
 8000e9a:	482d      	ldr	r0, [pc, #180]	@ (8000f50 <MX_TIM8_Init+0x170>)
 8000e9c:	f003 fe3a 	bl	8004b14 <HAL_TIMEx_MasterConfigSynchronization>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d001      	beq.n	8000eaa <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 8000ea6:	f7ff fe1a 	bl	8000ade <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000eaa:	2360      	movs	r3, #96	@ 0x60
 8000eac:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ec6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000eca:	2200      	movs	r2, #0
 8000ecc:	4619      	mov	r1, r3
 8000ece:	4820      	ldr	r0, [pc, #128]	@ (8000f50 <MX_TIM8_Init+0x170>)
 8000ed0:	f002 fecc 	bl	8003c6c <HAL_TIM_PWM_ConfigChannel>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d001      	beq.n	8000ede <MX_TIM8_Init+0xfe>
  {
    Error_Handler();
 8000eda:	f7ff fe00 	bl	8000ade <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000ede:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000ee2:	2204      	movs	r2, #4
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	481a      	ldr	r0, [pc, #104]	@ (8000f50 <MX_TIM8_Init+0x170>)
 8000ee8:	f002 fec0 	bl	8003c6c <HAL_TIM_PWM_ConfigChannel>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d001      	beq.n	8000ef6 <MX_TIM8_Init+0x116>
  {
    Error_Handler();
 8000ef2:	f7ff fdf4 	bl	8000ade <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000efa:	2300      	movs	r3, #0
 8000efc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000efe:	2300      	movs	r3, #0
 8000f00:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000f02:	2300      	movs	r3, #0
 8000f04:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000f06:	2300      	movs	r3, #0
 8000f08:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000f0a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f0e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000f10:	2300      	movs	r3, #0
 8000f12:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000f14:	2300      	movs	r3, #0
 8000f16:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000f1c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000f20:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000f22:	2300      	movs	r3, #0
 8000f24:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000f26:	2300      	movs	r3, #0
 8000f28:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8000f2e:	1d3b      	adds	r3, r7, #4
 8000f30:	4619      	mov	r1, r3
 8000f32:	4807      	ldr	r0, [pc, #28]	@ (8000f50 <MX_TIM8_Init+0x170>)
 8000f34:	f003 fe70 	bl	8004c18 <HAL_TIMEx_ConfigBreakDeadTime>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d001      	beq.n	8000f42 <MX_TIM8_Init+0x162>
  {
    Error_Handler();
 8000f3e:	f7ff fdce 	bl	8000ade <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8000f42:	4803      	ldr	r0, [pc, #12]	@ (8000f50 <MX_TIM8_Init+0x170>)
 8000f44:	f000 f90c 	bl	8001160 <HAL_TIM_MspPostInit>

}
 8000f48:	bf00      	nop
 8000f4a:	3770      	adds	r7, #112	@ 0x70
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	2000030c 	.word	0x2000030c
 8000f54:	40013400 	.word	0x40013400

08000f58 <HAL_TIMEx_HallSensor_MspInit>:

void HAL_TIMEx_HallSensor_MspInit(TIM_HandleTypeDef* timex_hallsensorHandle)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b08a      	sub	sp, #40	@ 0x28
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f60:	f107 0314 	add.w	r3, r7, #20
 8000f64:	2200      	movs	r2, #0
 8000f66:	601a      	str	r2, [r3, #0]
 8000f68:	605a      	str	r2, [r3, #4]
 8000f6a:	609a      	str	r2, [r3, #8]
 8000f6c:	60da      	str	r2, [r3, #12]
 8000f6e:	611a      	str	r2, [r3, #16]
  if(timex_hallsensorHandle->Instance==TIM2)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000f78:	d13a      	bne.n	8000ff0 <HAL_TIMEx_HallSensor_MspInit+0x98>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f7a:	4b1f      	ldr	r3, [pc, #124]	@ (8000ff8 <HAL_TIMEx_HallSensor_MspInit+0xa0>)
 8000f7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f7e:	4a1e      	ldr	r2, [pc, #120]	@ (8000ff8 <HAL_TIMEx_HallSensor_MspInit+0xa0>)
 8000f80:	f043 0301 	orr.w	r3, r3, #1
 8000f84:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f86:	4b1c      	ldr	r3, [pc, #112]	@ (8000ff8 <HAL_TIMEx_HallSensor_MspInit+0xa0>)
 8000f88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f8a:	f003 0301 	and.w	r3, r3, #1
 8000f8e:	613b      	str	r3, [r7, #16]
 8000f90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f92:	4b19      	ldr	r3, [pc, #100]	@ (8000ff8 <HAL_TIMEx_HallSensor_MspInit+0xa0>)
 8000f94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f96:	4a18      	ldr	r2, [pc, #96]	@ (8000ff8 <HAL_TIMEx_HallSensor_MspInit+0xa0>)
 8000f98:	f043 0301 	orr.w	r3, r3, #1
 8000f9c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f9e:	4b16      	ldr	r3, [pc, #88]	@ (8000ff8 <HAL_TIMEx_HallSensor_MspInit+0xa0>)
 8000fa0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fa2:	f003 0301 	and.w	r3, r3, #1
 8000fa6:	60fb      	str	r3, [r7, #12]
 8000fa8:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA5     ------> TIM2_CH1
    PA9     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5;
 8000faa:	2322      	movs	r3, #34	@ 0x22
 8000fac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fae:	2302      	movs	r3, #2
 8000fb0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000fba:	2301      	movs	r3, #1
 8000fbc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fbe:	f107 0314 	add.w	r3, r7, #20
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fc8:	f000 fd48 	bl	8001a5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000fcc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000fd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM2;
 8000fde:	230a      	movs	r3, #10
 8000fe0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fe2:	f107 0314 	add.w	r3, r7, #20
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fec:	f000 fd36 	bl	8001a5c <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000ff0:	bf00      	nop
 8000ff2:	3728      	adds	r7, #40	@ 0x28
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	40021000 	.word	0x40021000

08000ffc <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b08c      	sub	sp, #48	@ 0x30
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001004:	f107 031c 	add.w	r3, r7, #28
 8001008:	2200      	movs	r2, #0
 800100a:	601a      	str	r2, [r3, #0]
 800100c:	605a      	str	r2, [r3, #4]
 800100e:	609a      	str	r2, [r3, #8]
 8001010:	60da      	str	r2, [r3, #12]
 8001012:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4a3d      	ldr	r2, [pc, #244]	@ (8001110 <HAL_TIM_Encoder_MspInit+0x114>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d145      	bne.n	80010aa <HAL_TIM_Encoder_MspInit+0xae>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800101e:	4b3d      	ldr	r3, [pc, #244]	@ (8001114 <HAL_TIM_Encoder_MspInit+0x118>)
 8001020:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001022:	4a3c      	ldr	r2, [pc, #240]	@ (8001114 <HAL_TIM_Encoder_MspInit+0x118>)
 8001024:	f043 0302 	orr.w	r3, r3, #2
 8001028:	6593      	str	r3, [r2, #88]	@ 0x58
 800102a:	4b3a      	ldr	r3, [pc, #232]	@ (8001114 <HAL_TIM_Encoder_MspInit+0x118>)
 800102c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800102e:	f003 0302 	and.w	r3, r3, #2
 8001032:	61bb      	str	r3, [r7, #24]
 8001034:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001036:	4b37      	ldr	r3, [pc, #220]	@ (8001114 <HAL_TIM_Encoder_MspInit+0x118>)
 8001038:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800103a:	4a36      	ldr	r2, [pc, #216]	@ (8001114 <HAL_TIM_Encoder_MspInit+0x118>)
 800103c:	f043 0301 	orr.w	r3, r3, #1
 8001040:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001042:	4b34      	ldr	r3, [pc, #208]	@ (8001114 <HAL_TIM_Encoder_MspInit+0x118>)
 8001044:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001046:	f003 0301 	and.w	r3, r3, #1
 800104a:	617b      	str	r3, [r7, #20]
 800104c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800104e:	4b31      	ldr	r3, [pc, #196]	@ (8001114 <HAL_TIM_Encoder_MspInit+0x118>)
 8001050:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001052:	4a30      	ldr	r2, [pc, #192]	@ (8001114 <HAL_TIM_Encoder_MspInit+0x118>)
 8001054:	f043 0302 	orr.w	r3, r3, #2
 8001058:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800105a:	4b2e      	ldr	r3, [pc, #184]	@ (8001114 <HAL_TIM_Encoder_MspInit+0x118>)
 800105c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800105e:	f003 0302 	and.w	r3, r3, #2
 8001062:	613b      	str	r3, [r7, #16]
 8001064:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PA4     ------> TIM3_CH2
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001066:	2310      	movs	r3, #16
 8001068:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800106a:	2302      	movs	r3, #2
 800106c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106e:	2300      	movs	r3, #0
 8001070:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001072:	2300      	movs	r3, #0
 8001074:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001076:	2302      	movs	r3, #2
 8001078:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800107a:	f107 031c 	add.w	r3, r7, #28
 800107e:	4619      	mov	r1, r3
 8001080:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001084:	f000 fcea 	bl	8001a5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001088:	2310      	movs	r3, #16
 800108a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800108c:	2302      	movs	r3, #2
 800108e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001090:	2300      	movs	r3, #0
 8001092:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001094:	2300      	movs	r3, #0
 8001096:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001098:	2302      	movs	r3, #2
 800109a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800109c:	f107 031c 	add.w	r3, r7, #28
 80010a0:	4619      	mov	r1, r3
 80010a2:	481d      	ldr	r0, [pc, #116]	@ (8001118 <HAL_TIM_Encoder_MspInit+0x11c>)
 80010a4:	f000 fcda 	bl	8001a5c <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80010a8:	e02e      	b.n	8001108 <HAL_TIM_Encoder_MspInit+0x10c>
  else if(tim_encoderHandle->Instance==TIM4)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	4a1b      	ldr	r2, [pc, #108]	@ (800111c <HAL_TIM_Encoder_MspInit+0x120>)
 80010b0:	4293      	cmp	r3, r2
 80010b2:	d129      	bne.n	8001108 <HAL_TIM_Encoder_MspInit+0x10c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80010b4:	4b17      	ldr	r3, [pc, #92]	@ (8001114 <HAL_TIM_Encoder_MspInit+0x118>)
 80010b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010b8:	4a16      	ldr	r2, [pc, #88]	@ (8001114 <HAL_TIM_Encoder_MspInit+0x118>)
 80010ba:	f043 0304 	orr.w	r3, r3, #4
 80010be:	6593      	str	r3, [r2, #88]	@ 0x58
 80010c0:	4b14      	ldr	r3, [pc, #80]	@ (8001114 <HAL_TIM_Encoder_MspInit+0x118>)
 80010c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010c4:	f003 0304 	and.w	r3, r3, #4
 80010c8:	60fb      	str	r3, [r7, #12]
 80010ca:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010cc:	4b11      	ldr	r3, [pc, #68]	@ (8001114 <HAL_TIM_Encoder_MspInit+0x118>)
 80010ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010d0:	4a10      	ldr	r2, [pc, #64]	@ (8001114 <HAL_TIM_Encoder_MspInit+0x118>)
 80010d2:	f043 0301 	orr.w	r3, r3, #1
 80010d6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010d8:	4b0e      	ldr	r3, [pc, #56]	@ (8001114 <HAL_TIM_Encoder_MspInit+0x118>)
 80010da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010dc:	f003 0301 	and.w	r3, r3, #1
 80010e0:	60bb      	str	r3, [r7, #8]
 80010e2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80010e4:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80010e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ea:	2302      	movs	r3, #2
 80010ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ee:	2300      	movs	r3, #0
 80010f0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f2:	2300      	movs	r3, #0
 80010f4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 80010f6:	230a      	movs	r3, #10
 80010f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010fa:	f107 031c 	add.w	r3, r7, #28
 80010fe:	4619      	mov	r1, r3
 8001100:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001104:	f000 fcaa 	bl	8001a5c <HAL_GPIO_Init>
}
 8001108:	bf00      	nop
 800110a:	3730      	adds	r7, #48	@ 0x30
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	40000400 	.word	0x40000400
 8001114:	40021000 	.word	0x40021000
 8001118:	48000400 	.word	0x48000400
 800111c:	40000800 	.word	0x40000800

08001120 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001120:	b480      	push	{r7}
 8001122:	b085      	sub	sp, #20
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM8)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	4a0a      	ldr	r2, [pc, #40]	@ (8001158 <HAL_TIM_Base_MspInit+0x38>)
 800112e:	4293      	cmp	r3, r2
 8001130:	d10b      	bne.n	800114a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* TIM8 clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001132:	4b0a      	ldr	r3, [pc, #40]	@ (800115c <HAL_TIM_Base_MspInit+0x3c>)
 8001134:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001136:	4a09      	ldr	r2, [pc, #36]	@ (800115c <HAL_TIM_Base_MspInit+0x3c>)
 8001138:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800113c:	6613      	str	r3, [r2, #96]	@ 0x60
 800113e:	4b07      	ldr	r3, [pc, #28]	@ (800115c <HAL_TIM_Base_MspInit+0x3c>)
 8001140:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001142:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001146:	60fb      	str	r3, [r7, #12]
 8001148:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 800114a:	bf00      	nop
 800114c:	3714      	adds	r7, #20
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr
 8001156:	bf00      	nop
 8001158:	40013400 	.word	0x40013400
 800115c:	40021000 	.word	0x40021000

08001160 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b08a      	sub	sp, #40	@ 0x28
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001168:	f107 0314 	add.w	r3, r7, #20
 800116c:	2200      	movs	r2, #0
 800116e:	601a      	str	r2, [r3, #0]
 8001170:	605a      	str	r2, [r3, #4]
 8001172:	609a      	str	r2, [r3, #8]
 8001174:	60da      	str	r2, [r3, #12]
 8001176:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM8)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4a1f      	ldr	r2, [pc, #124]	@ (80011fc <HAL_TIM_MspPostInit+0x9c>)
 800117e:	4293      	cmp	r3, r2
 8001180:	d138      	bne.n	80011f4 <HAL_TIM_MspPostInit+0x94>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001182:	4b1f      	ldr	r3, [pc, #124]	@ (8001200 <HAL_TIM_MspPostInit+0xa0>)
 8001184:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001186:	4a1e      	ldr	r2, [pc, #120]	@ (8001200 <HAL_TIM_MspPostInit+0xa0>)
 8001188:	f043 0301 	orr.w	r3, r3, #1
 800118c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800118e:	4b1c      	ldr	r3, [pc, #112]	@ (8001200 <HAL_TIM_MspPostInit+0xa0>)
 8001190:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001192:	f003 0301 	and.w	r3, r3, #1
 8001196:	613b      	str	r3, [r7, #16]
 8001198:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800119a:	4b19      	ldr	r3, [pc, #100]	@ (8001200 <HAL_TIM_MspPostInit+0xa0>)
 800119c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800119e:	4a18      	ldr	r2, [pc, #96]	@ (8001200 <HAL_TIM_MspPostInit+0xa0>)
 80011a0:	f043 0302 	orr.w	r3, r3, #2
 80011a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011a6:	4b16      	ldr	r3, [pc, #88]	@ (8001200 <HAL_TIM_MspPostInit+0xa0>)
 80011a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011aa:	f003 0302 	and.w	r3, r3, #2
 80011ae:	60fb      	str	r3, [r7, #12]
 80011b0:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PA7     ------> TIM8_CH1N
    PB0     ------> TIM8_CH2N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80011b2:	2380      	movs	r3, #128	@ 0x80
 80011b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b6:	2302      	movs	r3, #2
 80011b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ba:	2300      	movs	r3, #0
 80011bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011be:	2300      	movs	r3, #0
 80011c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 80011c2:	2304      	movs	r3, #4
 80011c4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011c6:	f107 0314 	add.w	r3, r7, #20
 80011ca:	4619      	mov	r1, r3
 80011cc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011d0:	f000 fc44 	bl	8001a5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80011d4:	2301      	movs	r3, #1
 80011d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011d8:	2302      	movs	r3, #2
 80011da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011dc:	2300      	movs	r3, #0
 80011de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e0:	2300      	movs	r3, #0
 80011e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 80011e4:	2304      	movs	r3, #4
 80011e6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011e8:	f107 0314 	add.w	r3, r7, #20
 80011ec:	4619      	mov	r1, r3
 80011ee:	4805      	ldr	r0, [pc, #20]	@ (8001204 <HAL_TIM_MspPostInit+0xa4>)
 80011f0:	f000 fc34 	bl	8001a5c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 80011f4:	bf00      	nop
 80011f6:	3728      	adds	r7, #40	@ 0x28
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	40013400 	.word	0x40013400
 8001200:	40021000 	.word	0x40021000
 8001204:	48000400 	.word	0x48000400

08001208 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800120c:	4b22      	ldr	r3, [pc, #136]	@ (8001298 <MX_USART2_UART_Init+0x90>)
 800120e:	4a23      	ldr	r2, [pc, #140]	@ (800129c <MX_USART2_UART_Init+0x94>)
 8001210:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001212:	4b21      	ldr	r3, [pc, #132]	@ (8001298 <MX_USART2_UART_Init+0x90>)
 8001214:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001218:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800121a:	4b1f      	ldr	r3, [pc, #124]	@ (8001298 <MX_USART2_UART_Init+0x90>)
 800121c:	2200      	movs	r2, #0
 800121e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001220:	4b1d      	ldr	r3, [pc, #116]	@ (8001298 <MX_USART2_UART_Init+0x90>)
 8001222:	2200      	movs	r2, #0
 8001224:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001226:	4b1c      	ldr	r3, [pc, #112]	@ (8001298 <MX_USART2_UART_Init+0x90>)
 8001228:	2200      	movs	r2, #0
 800122a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800122c:	4b1a      	ldr	r3, [pc, #104]	@ (8001298 <MX_USART2_UART_Init+0x90>)
 800122e:	220c      	movs	r2, #12
 8001230:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001232:	4b19      	ldr	r3, [pc, #100]	@ (8001298 <MX_USART2_UART_Init+0x90>)
 8001234:	2200      	movs	r2, #0
 8001236:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001238:	4b17      	ldr	r3, [pc, #92]	@ (8001298 <MX_USART2_UART_Init+0x90>)
 800123a:	2200      	movs	r2, #0
 800123c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800123e:	4b16      	ldr	r3, [pc, #88]	@ (8001298 <MX_USART2_UART_Init+0x90>)
 8001240:	2200      	movs	r2, #0
 8001242:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001244:	4b14      	ldr	r3, [pc, #80]	@ (8001298 <MX_USART2_UART_Init+0x90>)
 8001246:	2200      	movs	r2, #0
 8001248:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800124a:	4b13      	ldr	r3, [pc, #76]	@ (8001298 <MX_USART2_UART_Init+0x90>)
 800124c:	2200      	movs	r2, #0
 800124e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001250:	4811      	ldr	r0, [pc, #68]	@ (8001298 <MX_USART2_UART_Init+0x90>)
 8001252:	f003 fd6d 	bl	8004d30 <HAL_UART_Init>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d001      	beq.n	8001260 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800125c:	f7ff fc3f 	bl	8000ade <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001260:	2100      	movs	r1, #0
 8001262:	480d      	ldr	r0, [pc, #52]	@ (8001298 <MX_USART2_UART_Init+0x90>)
 8001264:	f004 fad8 	bl	8005818 <HAL_UARTEx_SetTxFifoThreshold>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800126e:	f7ff fc36 	bl	8000ade <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001272:	2100      	movs	r1, #0
 8001274:	4808      	ldr	r0, [pc, #32]	@ (8001298 <MX_USART2_UART_Init+0x90>)
 8001276:	f004 fb0d 	bl	8005894 <HAL_UARTEx_SetRxFifoThreshold>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	d001      	beq.n	8001284 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001280:	f7ff fc2d 	bl	8000ade <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001284:	4804      	ldr	r0, [pc, #16]	@ (8001298 <MX_USART2_UART_Init+0x90>)
 8001286:	f004 fa8e 	bl	80057a6 <HAL_UARTEx_DisableFifoMode>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d001      	beq.n	8001294 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001290:	f7ff fc25 	bl	8000ade <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001294:	bf00      	nop
 8001296:	bd80      	pop	{r7, pc}
 8001298:	20000358 	.word	0x20000358
 800129c:	40004400 	.word	0x40004400

080012a0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b09a      	sub	sp, #104	@ 0x68
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80012ac:	2200      	movs	r2, #0
 80012ae:	601a      	str	r2, [r3, #0]
 80012b0:	605a      	str	r2, [r3, #4]
 80012b2:	609a      	str	r2, [r3, #8]
 80012b4:	60da      	str	r2, [r3, #12]
 80012b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012b8:	f107 0310 	add.w	r3, r7, #16
 80012bc:	2244      	movs	r2, #68	@ 0x44
 80012be:	2100      	movs	r1, #0
 80012c0:	4618      	mov	r0, r3
 80012c2:	f004 fe6a 	bl	8005f9a <memset>
  if(uartHandle->Instance==USART2)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	4a1f      	ldr	r2, [pc, #124]	@ (8001348 <HAL_UART_MspInit+0xa8>)
 80012cc:	4293      	cmp	r3, r2
 80012ce:	d136      	bne.n	800133e <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80012d0:	2302      	movs	r3, #2
 80012d2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80012d4:	2300      	movs	r3, #0
 80012d6:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012d8:	f107 0310 	add.w	r3, r7, #16
 80012dc:	4618      	mov	r0, r3
 80012de:	f002 f977 	bl	80035d0 <HAL_RCCEx_PeriphCLKConfig>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d001      	beq.n	80012ec <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80012e8:	f7ff fbf9 	bl	8000ade <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80012ec:	4b17      	ldr	r3, [pc, #92]	@ (800134c <HAL_UART_MspInit+0xac>)
 80012ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012f0:	4a16      	ldr	r2, [pc, #88]	@ (800134c <HAL_UART_MspInit+0xac>)
 80012f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80012f6:	6593      	str	r3, [r2, #88]	@ 0x58
 80012f8:	4b14      	ldr	r3, [pc, #80]	@ (800134c <HAL_UART_MspInit+0xac>)
 80012fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001300:	60fb      	str	r3, [r7, #12]
 8001302:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001304:	4b11      	ldr	r3, [pc, #68]	@ (800134c <HAL_UART_MspInit+0xac>)
 8001306:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001308:	4a10      	ldr	r2, [pc, #64]	@ (800134c <HAL_UART_MspInit+0xac>)
 800130a:	f043 0301 	orr.w	r3, r3, #1
 800130e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001310:	4b0e      	ldr	r3, [pc, #56]	@ (800134c <HAL_UART_MspInit+0xac>)
 8001312:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001314:	f003 0301 	and.w	r3, r3, #1
 8001318:	60bb      	str	r3, [r7, #8]
 800131a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 800131c:	230c      	movs	r3, #12
 800131e:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001320:	2302      	movs	r3, #2
 8001322:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001324:	2300      	movs	r3, #0
 8001326:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001328:	2300      	movs	r3, #0
 800132a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800132c:	2307      	movs	r3, #7
 800132e:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001330:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001334:	4619      	mov	r1, r3
 8001336:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800133a:	f000 fb8f 	bl	8001a5c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800133e:	bf00      	nop
 8001340:	3768      	adds	r7, #104	@ 0x68
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	40004400 	.word	0x40004400
 800134c:	40021000 	.word	0x40021000

08001350 <Reset_Handler>:
 8001350:	480d      	ldr	r0, [pc, #52]	@ (8001388 <LoopForever+0x2>)
 8001352:	4685      	mov	sp, r0
 8001354:	f7ff fc3c 	bl	8000bd0 <SystemInit>
 8001358:	480c      	ldr	r0, [pc, #48]	@ (800138c <LoopForever+0x6>)
 800135a:	490d      	ldr	r1, [pc, #52]	@ (8001390 <LoopForever+0xa>)
 800135c:	4a0d      	ldr	r2, [pc, #52]	@ (8001394 <LoopForever+0xe>)
 800135e:	2300      	movs	r3, #0
 8001360:	e002      	b.n	8001368 <LoopCopyDataInit>

08001362 <CopyDataInit>:
 8001362:	58d4      	ldr	r4, [r2, r3]
 8001364:	50c4      	str	r4, [r0, r3]
 8001366:	3304      	adds	r3, #4

08001368 <LoopCopyDataInit>:
 8001368:	18c4      	adds	r4, r0, r3
 800136a:	428c      	cmp	r4, r1
 800136c:	d3f9      	bcc.n	8001362 <CopyDataInit>
 800136e:	4a0a      	ldr	r2, [pc, #40]	@ (8001398 <LoopForever+0x12>)
 8001370:	4c0a      	ldr	r4, [pc, #40]	@ (800139c <LoopForever+0x16>)
 8001372:	2300      	movs	r3, #0
 8001374:	e001      	b.n	800137a <LoopFillZerobss>

08001376 <FillZerobss>:
 8001376:	6013      	str	r3, [r2, #0]
 8001378:	3204      	adds	r2, #4

0800137a <LoopFillZerobss>:
 800137a:	42a2      	cmp	r2, r4
 800137c:	d3fb      	bcc.n	8001376 <FillZerobss>
 800137e:	f004 fe15 	bl	8005fac <__libc_init_array>
 8001382:	f7ff faf5 	bl	8000970 <main>

08001386 <LoopForever>:
 8001386:	e7fe      	b.n	8001386 <LoopForever>
 8001388:	20008000 	.word	0x20008000
 800138c:	20000000 	.word	0x20000000
 8001390:	20000010 	.word	0x20000010
 8001394:	0800605c 	.word	0x0800605c
 8001398:	20000010 	.word	0x20000010
 800139c:	200003f0 	.word	0x200003f0

080013a0 <ADC1_2_IRQHandler>:
 80013a0:	e7fe      	b.n	80013a0 <ADC1_2_IRQHandler>

080013a2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013a2:	b580      	push	{r7, lr}
 80013a4:	b082      	sub	sp, #8
 80013a6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80013a8:	2300      	movs	r3, #0
 80013aa:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013ac:	2003      	movs	r0, #3
 80013ae:	f000 f95b 	bl	8001668 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80013b2:	2000      	movs	r0, #0
 80013b4:	f000 f80e 	bl	80013d4 <HAL_InitTick>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d002      	beq.n	80013c4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80013be:	2301      	movs	r3, #1
 80013c0:	71fb      	strb	r3, [r7, #7]
 80013c2:	e001      	b.n	80013c8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80013c4:	f7ff fb92 	bl	8000aec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80013c8:	79fb      	ldrb	r3, [r7, #7]

}
 80013ca:	4618      	mov	r0, r3
 80013cc:	3708      	adds	r7, #8
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
	...

080013d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b084      	sub	sp, #16
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80013dc:	2300      	movs	r3, #0
 80013de:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80013e0:	4b16      	ldr	r3, [pc, #88]	@ (800143c <HAL_InitTick+0x68>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d022      	beq.n	800142e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80013e8:	4b15      	ldr	r3, [pc, #84]	@ (8001440 <HAL_InitTick+0x6c>)
 80013ea:	681a      	ldr	r2, [r3, #0]
 80013ec:	4b13      	ldr	r3, [pc, #76]	@ (800143c <HAL_InitTick+0x68>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80013f4:	fbb1 f3f3 	udiv	r3, r1, r3
 80013f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80013fc:	4618      	mov	r0, r3
 80013fe:	f000 f966 	bl	80016ce <HAL_SYSTICK_Config>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d10f      	bne.n	8001428 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2b0f      	cmp	r3, #15
 800140c:	d809      	bhi.n	8001422 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800140e:	2200      	movs	r2, #0
 8001410:	6879      	ldr	r1, [r7, #4]
 8001412:	f04f 30ff 	mov.w	r0, #4294967295
 8001416:	f000 f932 	bl	800167e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800141a:	4a0a      	ldr	r2, [pc, #40]	@ (8001444 <HAL_InitTick+0x70>)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	6013      	str	r3, [r2, #0]
 8001420:	e007      	b.n	8001432 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001422:	2301      	movs	r3, #1
 8001424:	73fb      	strb	r3, [r7, #15]
 8001426:	e004      	b.n	8001432 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001428:	2301      	movs	r3, #1
 800142a:	73fb      	strb	r3, [r7, #15]
 800142c:	e001      	b.n	8001432 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800142e:	2301      	movs	r3, #1
 8001430:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001432:	7bfb      	ldrb	r3, [r7, #15]
}
 8001434:	4618      	mov	r0, r3
 8001436:	3710      	adds	r7, #16
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}
 800143c:	20000008 	.word	0x20000008
 8001440:	20000000 	.word	0x20000000
 8001444:	20000004 	.word	0x20000004

08001448 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800144c:	4b05      	ldr	r3, [pc, #20]	@ (8001464 <HAL_IncTick+0x1c>)
 800144e:	681a      	ldr	r2, [r3, #0]
 8001450:	4b05      	ldr	r3, [pc, #20]	@ (8001468 <HAL_IncTick+0x20>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4413      	add	r3, r2
 8001456:	4a03      	ldr	r2, [pc, #12]	@ (8001464 <HAL_IncTick+0x1c>)
 8001458:	6013      	str	r3, [r2, #0]
}
 800145a:	bf00      	nop
 800145c:	46bd      	mov	sp, r7
 800145e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001462:	4770      	bx	lr
 8001464:	200003ec 	.word	0x200003ec
 8001468:	20000008 	.word	0x20000008

0800146c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0
  return uwTick;
 8001470:	4b03      	ldr	r3, [pc, #12]	@ (8001480 <HAL_GetTick+0x14>)
 8001472:	681b      	ldr	r3, [r3, #0]
}
 8001474:	4618      	mov	r0, r3
 8001476:	46bd      	mov	sp, r7
 8001478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147c:	4770      	bx	lr
 800147e:	bf00      	nop
 8001480:	200003ec 	.word	0x200003ec

08001484 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b084      	sub	sp, #16
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800148c:	f7ff ffee 	bl	800146c <HAL_GetTick>
 8001490:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	f1b3 3fff 	cmp.w	r3, #4294967295
 800149c:	d004      	beq.n	80014a8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800149e:	4b09      	ldr	r3, [pc, #36]	@ (80014c4 <HAL_Delay+0x40>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	68fa      	ldr	r2, [r7, #12]
 80014a4:	4413      	add	r3, r2
 80014a6:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80014a8:	bf00      	nop
 80014aa:	f7ff ffdf 	bl	800146c <HAL_GetTick>
 80014ae:	4602      	mov	r2, r0
 80014b0:	68bb      	ldr	r3, [r7, #8]
 80014b2:	1ad3      	subs	r3, r2, r3
 80014b4:	68fa      	ldr	r2, [r7, #12]
 80014b6:	429a      	cmp	r2, r3
 80014b8:	d8f7      	bhi.n	80014aa <HAL_Delay+0x26>
  {
  }
}
 80014ba:	bf00      	nop
 80014bc:	bf00      	nop
 80014be:	3710      	adds	r7, #16
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	20000008 	.word	0x20000008

080014c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b085      	sub	sp, #20
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	f003 0307 	and.w	r3, r3, #7
 80014d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014d8:	4b0c      	ldr	r3, [pc, #48]	@ (800150c <__NVIC_SetPriorityGrouping+0x44>)
 80014da:	68db      	ldr	r3, [r3, #12]
 80014dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014de:	68ba      	ldr	r2, [r7, #8]
 80014e0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80014e4:	4013      	ands	r3, r2
 80014e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014ec:	68bb      	ldr	r3, [r7, #8]
 80014ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014f0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80014f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80014f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014fa:	4a04      	ldr	r2, [pc, #16]	@ (800150c <__NVIC_SetPriorityGrouping+0x44>)
 80014fc:	68bb      	ldr	r3, [r7, #8]
 80014fe:	60d3      	str	r3, [r2, #12]
}
 8001500:	bf00      	nop
 8001502:	3714      	adds	r7, #20
 8001504:	46bd      	mov	sp, r7
 8001506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150a:	4770      	bx	lr
 800150c:	e000ed00 	.word	0xe000ed00

08001510 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001510:	b480      	push	{r7}
 8001512:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001514:	4b04      	ldr	r3, [pc, #16]	@ (8001528 <__NVIC_GetPriorityGrouping+0x18>)
 8001516:	68db      	ldr	r3, [r3, #12]
 8001518:	0a1b      	lsrs	r3, r3, #8
 800151a:	f003 0307 	and.w	r3, r3, #7
}
 800151e:	4618      	mov	r0, r3
 8001520:	46bd      	mov	sp, r7
 8001522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001526:	4770      	bx	lr
 8001528:	e000ed00 	.word	0xe000ed00

0800152c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800152c:	b480      	push	{r7}
 800152e:	b083      	sub	sp, #12
 8001530:	af00      	add	r7, sp, #0
 8001532:	4603      	mov	r3, r0
 8001534:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001536:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800153a:	2b00      	cmp	r3, #0
 800153c:	db0b      	blt.n	8001556 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800153e:	79fb      	ldrb	r3, [r7, #7]
 8001540:	f003 021f 	and.w	r2, r3, #31
 8001544:	4907      	ldr	r1, [pc, #28]	@ (8001564 <__NVIC_EnableIRQ+0x38>)
 8001546:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800154a:	095b      	lsrs	r3, r3, #5
 800154c:	2001      	movs	r0, #1
 800154e:	fa00 f202 	lsl.w	r2, r0, r2
 8001552:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001556:	bf00      	nop
 8001558:	370c      	adds	r7, #12
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr
 8001562:	bf00      	nop
 8001564:	e000e100 	.word	0xe000e100

08001568 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001568:	b480      	push	{r7}
 800156a:	b083      	sub	sp, #12
 800156c:	af00      	add	r7, sp, #0
 800156e:	4603      	mov	r3, r0
 8001570:	6039      	str	r1, [r7, #0]
 8001572:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001574:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001578:	2b00      	cmp	r3, #0
 800157a:	db0a      	blt.n	8001592 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	b2da      	uxtb	r2, r3
 8001580:	490c      	ldr	r1, [pc, #48]	@ (80015b4 <__NVIC_SetPriority+0x4c>)
 8001582:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001586:	0112      	lsls	r2, r2, #4
 8001588:	b2d2      	uxtb	r2, r2
 800158a:	440b      	add	r3, r1
 800158c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001590:	e00a      	b.n	80015a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	b2da      	uxtb	r2, r3
 8001596:	4908      	ldr	r1, [pc, #32]	@ (80015b8 <__NVIC_SetPriority+0x50>)
 8001598:	79fb      	ldrb	r3, [r7, #7]
 800159a:	f003 030f 	and.w	r3, r3, #15
 800159e:	3b04      	subs	r3, #4
 80015a0:	0112      	lsls	r2, r2, #4
 80015a2:	b2d2      	uxtb	r2, r2
 80015a4:	440b      	add	r3, r1
 80015a6:	761a      	strb	r2, [r3, #24]
}
 80015a8:	bf00      	nop
 80015aa:	370c      	adds	r7, #12
 80015ac:	46bd      	mov	sp, r7
 80015ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b2:	4770      	bx	lr
 80015b4:	e000e100 	.word	0xe000e100
 80015b8:	e000ed00 	.word	0xe000ed00

080015bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015bc:	b480      	push	{r7}
 80015be:	b089      	sub	sp, #36	@ 0x24
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	60f8      	str	r0, [r7, #12]
 80015c4:	60b9      	str	r1, [r7, #8]
 80015c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	f003 0307 	and.w	r3, r3, #7
 80015ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015d0:	69fb      	ldr	r3, [r7, #28]
 80015d2:	f1c3 0307 	rsb	r3, r3, #7
 80015d6:	2b04      	cmp	r3, #4
 80015d8:	bf28      	it	cs
 80015da:	2304      	movcs	r3, #4
 80015dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015de:	69fb      	ldr	r3, [r7, #28]
 80015e0:	3304      	adds	r3, #4
 80015e2:	2b06      	cmp	r3, #6
 80015e4:	d902      	bls.n	80015ec <NVIC_EncodePriority+0x30>
 80015e6:	69fb      	ldr	r3, [r7, #28]
 80015e8:	3b03      	subs	r3, #3
 80015ea:	e000      	b.n	80015ee <NVIC_EncodePriority+0x32>
 80015ec:	2300      	movs	r3, #0
 80015ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015f0:	f04f 32ff 	mov.w	r2, #4294967295
 80015f4:	69bb      	ldr	r3, [r7, #24]
 80015f6:	fa02 f303 	lsl.w	r3, r2, r3
 80015fa:	43da      	mvns	r2, r3
 80015fc:	68bb      	ldr	r3, [r7, #8]
 80015fe:	401a      	ands	r2, r3
 8001600:	697b      	ldr	r3, [r7, #20]
 8001602:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001604:	f04f 31ff 	mov.w	r1, #4294967295
 8001608:	697b      	ldr	r3, [r7, #20]
 800160a:	fa01 f303 	lsl.w	r3, r1, r3
 800160e:	43d9      	mvns	r1, r3
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001614:	4313      	orrs	r3, r2
         );
}
 8001616:	4618      	mov	r0, r3
 8001618:	3724      	adds	r7, #36	@ 0x24
 800161a:	46bd      	mov	sp, r7
 800161c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001620:	4770      	bx	lr
	...

08001624 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b082      	sub	sp, #8
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	3b01      	subs	r3, #1
 8001630:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001634:	d301      	bcc.n	800163a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001636:	2301      	movs	r3, #1
 8001638:	e00f      	b.n	800165a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800163a:	4a0a      	ldr	r2, [pc, #40]	@ (8001664 <SysTick_Config+0x40>)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	3b01      	subs	r3, #1
 8001640:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001642:	210f      	movs	r1, #15
 8001644:	f04f 30ff 	mov.w	r0, #4294967295
 8001648:	f7ff ff8e 	bl	8001568 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800164c:	4b05      	ldr	r3, [pc, #20]	@ (8001664 <SysTick_Config+0x40>)
 800164e:	2200      	movs	r2, #0
 8001650:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001652:	4b04      	ldr	r3, [pc, #16]	@ (8001664 <SysTick_Config+0x40>)
 8001654:	2207      	movs	r2, #7
 8001656:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001658:	2300      	movs	r3, #0
}
 800165a:	4618      	mov	r0, r3
 800165c:	3708      	adds	r7, #8
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	e000e010 	.word	0xe000e010

08001668 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b082      	sub	sp, #8
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001670:	6878      	ldr	r0, [r7, #4]
 8001672:	f7ff ff29 	bl	80014c8 <__NVIC_SetPriorityGrouping>
}
 8001676:	bf00      	nop
 8001678:	3708      	adds	r7, #8
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}

0800167e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800167e:	b580      	push	{r7, lr}
 8001680:	b086      	sub	sp, #24
 8001682:	af00      	add	r7, sp, #0
 8001684:	4603      	mov	r3, r0
 8001686:	60b9      	str	r1, [r7, #8]
 8001688:	607a      	str	r2, [r7, #4]
 800168a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800168c:	f7ff ff40 	bl	8001510 <__NVIC_GetPriorityGrouping>
 8001690:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001692:	687a      	ldr	r2, [r7, #4]
 8001694:	68b9      	ldr	r1, [r7, #8]
 8001696:	6978      	ldr	r0, [r7, #20]
 8001698:	f7ff ff90 	bl	80015bc <NVIC_EncodePriority>
 800169c:	4602      	mov	r2, r0
 800169e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016a2:	4611      	mov	r1, r2
 80016a4:	4618      	mov	r0, r3
 80016a6:	f7ff ff5f 	bl	8001568 <__NVIC_SetPriority>
}
 80016aa:	bf00      	nop
 80016ac:	3718      	adds	r7, #24
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}

080016b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016b2:	b580      	push	{r7, lr}
 80016b4:	b082      	sub	sp, #8
 80016b6:	af00      	add	r7, sp, #0
 80016b8:	4603      	mov	r3, r0
 80016ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016c0:	4618      	mov	r0, r3
 80016c2:	f7ff ff33 	bl	800152c <__NVIC_EnableIRQ>
}
 80016c6:	bf00      	nop
 80016c8:	3708      	adds	r7, #8
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}

080016ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016ce:	b580      	push	{r7, lr}
 80016d0:	b082      	sub	sp, #8
 80016d2:	af00      	add	r7, sp, #0
 80016d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016d6:	6878      	ldr	r0, [r7, #4]
 80016d8:	f7ff ffa4 	bl	8001624 <SysTick_Config>
 80016dc:	4603      	mov	r3, r0
}
 80016de:	4618      	mov	r0, r3
 80016e0:	3708      	adds	r7, #8
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
	...

080016e8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b084      	sub	sp, #16
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d101      	bne.n	80016fa <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80016f6:	2301      	movs	r3, #1
 80016f8:	e08d      	b.n	8001816 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	461a      	mov	r2, r3
 8001700:	4b47      	ldr	r3, [pc, #284]	@ (8001820 <HAL_DMA_Init+0x138>)
 8001702:	429a      	cmp	r2, r3
 8001704:	d80f      	bhi.n	8001726 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	461a      	mov	r2, r3
 800170c:	4b45      	ldr	r3, [pc, #276]	@ (8001824 <HAL_DMA_Init+0x13c>)
 800170e:	4413      	add	r3, r2
 8001710:	4a45      	ldr	r2, [pc, #276]	@ (8001828 <HAL_DMA_Init+0x140>)
 8001712:	fba2 2303 	umull	r2, r3, r2, r3
 8001716:	091b      	lsrs	r3, r3, #4
 8001718:	009a      	lsls	r2, r3, #2
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	4a42      	ldr	r2, [pc, #264]	@ (800182c <HAL_DMA_Init+0x144>)
 8001722:	641a      	str	r2, [r3, #64]	@ 0x40
 8001724:	e00e      	b.n	8001744 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	461a      	mov	r2, r3
 800172c:	4b40      	ldr	r3, [pc, #256]	@ (8001830 <HAL_DMA_Init+0x148>)
 800172e:	4413      	add	r3, r2
 8001730:	4a3d      	ldr	r2, [pc, #244]	@ (8001828 <HAL_DMA_Init+0x140>)
 8001732:	fba2 2303 	umull	r2, r3, r2, r3
 8001736:	091b      	lsrs	r3, r3, #4
 8001738:	009a      	lsls	r2, r3, #2
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	4a3c      	ldr	r2, [pc, #240]	@ (8001834 <HAL_DMA_Init+0x14c>)
 8001742:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	2202      	movs	r2, #2
 8001748:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800175a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800175e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001768:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	691b      	ldr	r3, [r3, #16]
 800176e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001774:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	699b      	ldr	r3, [r3, #24]
 800177a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001780:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6a1b      	ldr	r3, [r3, #32]
 8001786:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001788:	68fa      	ldr	r2, [r7, #12]
 800178a:	4313      	orrs	r3, r2
 800178c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	68fa      	ldr	r2, [r7, #12]
 8001794:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001796:	6878      	ldr	r0, [r7, #4]
 8001798:	f000 f8fe 	bl	8001998 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	689b      	ldr	r3, [r3, #8]
 80017a0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80017a4:	d102      	bne.n	80017ac <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	2200      	movs	r2, #0
 80017aa:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	685a      	ldr	r2, [r3, #4]
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80017b4:	b2d2      	uxtb	r2, r2
 80017b6:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017bc:	687a      	ldr	r2, [r7, #4]
 80017be:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80017c0:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d010      	beq.n	80017ec <HAL_DMA_Init+0x104>
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	2b04      	cmp	r3, #4
 80017d0:	d80c      	bhi.n	80017ec <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80017d2:	6878      	ldr	r0, [r7, #4]
 80017d4:	f000 f91e 	bl	8001a14 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80017dc:	2200      	movs	r2, #0
 80017de:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017e4:	687a      	ldr	r2, [r7, #4]
 80017e6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80017e8:	605a      	str	r2, [r3, #4]
 80017ea:	e008      	b.n	80017fe <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2200      	movs	r2, #0
 80017f0:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	2200      	movs	r2, #0
 80017f6:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	2200      	movs	r2, #0
 80017fc:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2200      	movs	r2, #0
 8001802:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2201      	movs	r2, #1
 8001808:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2200      	movs	r2, #0
 8001810:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8001814:	2300      	movs	r3, #0
}
 8001816:	4618      	mov	r0, r3
 8001818:	3710      	adds	r7, #16
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	40020407 	.word	0x40020407
 8001824:	bffdfff8 	.word	0xbffdfff8
 8001828:	cccccccd 	.word	0xcccccccd
 800182c:	40020000 	.word	0x40020000
 8001830:	bffdfbf8 	.word	0xbffdfbf8
 8001834:	40020400 	.word	0x40020400

08001838 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b084      	sub	sp, #16
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001854:	f003 031f 	and.w	r3, r3, #31
 8001858:	2204      	movs	r2, #4
 800185a:	409a      	lsls	r2, r3
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	4013      	ands	r3, r2
 8001860:	2b00      	cmp	r3, #0
 8001862:	d026      	beq.n	80018b2 <HAL_DMA_IRQHandler+0x7a>
 8001864:	68bb      	ldr	r3, [r7, #8]
 8001866:	f003 0304 	and.w	r3, r3, #4
 800186a:	2b00      	cmp	r3, #0
 800186c:	d021      	beq.n	80018b2 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f003 0320 	and.w	r3, r3, #32
 8001878:	2b00      	cmp	r3, #0
 800187a:	d107      	bne.n	800188c <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	681a      	ldr	r2, [r3, #0]
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f022 0204 	bic.w	r2, r2, #4
 800188a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001890:	f003 021f 	and.w	r2, r3, #31
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001898:	2104      	movs	r1, #4
 800189a:	fa01 f202 	lsl.w	r2, r1, r2
 800189e:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d071      	beq.n	800198c <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ac:	6878      	ldr	r0, [r7, #4]
 80018ae:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80018b0:	e06c      	b.n	800198c <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018b6:	f003 031f 	and.w	r3, r3, #31
 80018ba:	2202      	movs	r2, #2
 80018bc:	409a      	lsls	r2, r3
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	4013      	ands	r3, r2
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d02e      	beq.n	8001924 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80018c6:	68bb      	ldr	r3, [r7, #8]
 80018c8:	f003 0302 	and.w	r3, r3, #2
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d029      	beq.n	8001924 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f003 0320 	and.w	r3, r3, #32
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d10b      	bne.n	80018f6 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	681a      	ldr	r2, [r3, #0]
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f022 020a 	bic.w	r2, r2, #10
 80018ec:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	2201      	movs	r2, #1
 80018f2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018fa:	f003 021f 	and.w	r2, r3, #31
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001902:	2102      	movs	r1, #2
 8001904:	fa01 f202 	lsl.w	r2, r1, r2
 8001908:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	2200      	movs	r2, #0
 800190e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001916:	2b00      	cmp	r3, #0
 8001918:	d038      	beq.n	800198c <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800191e:	6878      	ldr	r0, [r7, #4]
 8001920:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001922:	e033      	b.n	800198c <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001928:	f003 031f 	and.w	r3, r3, #31
 800192c:	2208      	movs	r2, #8
 800192e:	409a      	lsls	r2, r3
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	4013      	ands	r3, r2
 8001934:	2b00      	cmp	r3, #0
 8001936:	d02a      	beq.n	800198e <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8001938:	68bb      	ldr	r3, [r7, #8]
 800193a:	f003 0308 	and.w	r3, r3, #8
 800193e:	2b00      	cmp	r3, #0
 8001940:	d025      	beq.n	800198e <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	681a      	ldr	r2, [r3, #0]
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f022 020e 	bic.w	r2, r2, #14
 8001950:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001956:	f003 021f 	and.w	r2, r3, #31
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800195e:	2101      	movs	r1, #1
 8001960:	fa01 f202 	lsl.w	r2, r1, r2
 8001964:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	2201      	movs	r2, #1
 800196a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2201      	movs	r2, #1
 8001970:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2200      	movs	r2, #0
 8001978:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001980:	2b00      	cmp	r3, #0
 8001982:	d004      	beq.n	800198e <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001988:	6878      	ldr	r0, [r7, #4]
 800198a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800198c:	bf00      	nop
 800198e:	bf00      	nop
}
 8001990:	3710      	adds	r7, #16
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}
	...

08001998 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001998:	b480      	push	{r7}
 800199a:	b087      	sub	sp, #28
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	461a      	mov	r2, r3
 80019a6:	4b16      	ldr	r3, [pc, #88]	@ (8001a00 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80019a8:	429a      	cmp	r2, r3
 80019aa:	d802      	bhi.n	80019b2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80019ac:	4b15      	ldr	r3, [pc, #84]	@ (8001a04 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80019ae:	617b      	str	r3, [r7, #20]
 80019b0:	e001      	b.n	80019b6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 80019b2:	4b15      	ldr	r3, [pc, #84]	@ (8001a08 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80019b4:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80019b6:	697b      	ldr	r3, [r7, #20]
 80019b8:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	b2db      	uxtb	r3, r3
 80019c0:	3b08      	subs	r3, #8
 80019c2:	4a12      	ldr	r2, [pc, #72]	@ (8001a0c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80019c4:	fba2 2303 	umull	r2, r3, r2, r3
 80019c8:	091b      	lsrs	r3, r3, #4
 80019ca:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019d0:	089b      	lsrs	r3, r3, #2
 80019d2:	009a      	lsls	r2, r3, #2
 80019d4:	693b      	ldr	r3, [r7, #16]
 80019d6:	4413      	add	r3, r2
 80019d8:	461a      	mov	r2, r3
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	4a0b      	ldr	r2, [pc, #44]	@ (8001a10 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80019e2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	f003 031f 	and.w	r3, r3, #31
 80019ea:	2201      	movs	r2, #1
 80019ec:	409a      	lsls	r2, r3
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80019f2:	bf00      	nop
 80019f4:	371c      	adds	r7, #28
 80019f6:	46bd      	mov	sp, r7
 80019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fc:	4770      	bx	lr
 80019fe:	bf00      	nop
 8001a00:	40020407 	.word	0x40020407
 8001a04:	40020800 	.word	0x40020800
 8001a08:	40020820 	.word	0x40020820
 8001a0c:	cccccccd 	.word	0xcccccccd
 8001a10:	40020880 	.word	0x40020880

08001a14 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b085      	sub	sp, #20
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	b2db      	uxtb	r3, r3
 8001a22:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001a24:	68fa      	ldr	r2, [r7, #12]
 8001a26:	4b0b      	ldr	r3, [pc, #44]	@ (8001a54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001a28:	4413      	add	r3, r2
 8001a2a:	009b      	lsls	r3, r3, #2
 8001a2c:	461a      	mov	r2, r3
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	4a08      	ldr	r2, [pc, #32]	@ (8001a58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001a36:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	3b01      	subs	r3, #1
 8001a3c:	f003 031f 	and.w	r3, r3, #31
 8001a40:	2201      	movs	r2, #1
 8001a42:	409a      	lsls	r2, r3
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8001a48:	bf00      	nop
 8001a4a:	3714      	adds	r7, #20
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a52:	4770      	bx	lr
 8001a54:	1000823f 	.word	0x1000823f
 8001a58:	40020940 	.word	0x40020940

08001a5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b087      	sub	sp, #28
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
 8001a64:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001a66:	2300      	movs	r3, #0
 8001a68:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001a6a:	e15a      	b.n	8001d22 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	681a      	ldr	r2, [r3, #0]
 8001a70:	2101      	movs	r1, #1
 8001a72:	697b      	ldr	r3, [r7, #20]
 8001a74:	fa01 f303 	lsl.w	r3, r1, r3
 8001a78:	4013      	ands	r3, r2
 8001a7a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	f000 814c 	beq.w	8001d1c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	f003 0303 	and.w	r3, r3, #3
 8001a8c:	2b01      	cmp	r3, #1
 8001a8e:	d005      	beq.n	8001a9c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001a98:	2b02      	cmp	r3, #2
 8001a9a:	d130      	bne.n	8001afe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	689b      	ldr	r3, [r3, #8]
 8001aa0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001aa2:	697b      	ldr	r3, [r7, #20]
 8001aa4:	005b      	lsls	r3, r3, #1
 8001aa6:	2203      	movs	r2, #3
 8001aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8001aac:	43db      	mvns	r3, r3
 8001aae:	693a      	ldr	r2, [r7, #16]
 8001ab0:	4013      	ands	r3, r2
 8001ab2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	68da      	ldr	r2, [r3, #12]
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	005b      	lsls	r3, r3, #1
 8001abc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac0:	693a      	ldr	r2, [r7, #16]
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	693a      	ldr	r2, [r7, #16]
 8001aca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8001ada:	43db      	mvns	r3, r3
 8001adc:	693a      	ldr	r2, [r7, #16]
 8001ade:	4013      	ands	r3, r2
 8001ae0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	091b      	lsrs	r3, r3, #4
 8001ae8:	f003 0201 	and.w	r2, r3, #1
 8001aec:	697b      	ldr	r3, [r7, #20]
 8001aee:	fa02 f303 	lsl.w	r3, r2, r3
 8001af2:	693a      	ldr	r2, [r7, #16]
 8001af4:	4313      	orrs	r3, r2
 8001af6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	693a      	ldr	r2, [r7, #16]
 8001afc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	f003 0303 	and.w	r3, r3, #3
 8001b06:	2b03      	cmp	r3, #3
 8001b08:	d017      	beq.n	8001b3a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	68db      	ldr	r3, [r3, #12]
 8001b0e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001b10:	697b      	ldr	r3, [r7, #20]
 8001b12:	005b      	lsls	r3, r3, #1
 8001b14:	2203      	movs	r2, #3
 8001b16:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1a:	43db      	mvns	r3, r3
 8001b1c:	693a      	ldr	r2, [r7, #16]
 8001b1e:	4013      	ands	r3, r2
 8001b20:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	689a      	ldr	r2, [r3, #8]
 8001b26:	697b      	ldr	r3, [r7, #20]
 8001b28:	005b      	lsls	r3, r3, #1
 8001b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2e:	693a      	ldr	r2, [r7, #16]
 8001b30:	4313      	orrs	r3, r2
 8001b32:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	693a      	ldr	r2, [r7, #16]
 8001b38:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	f003 0303 	and.w	r3, r3, #3
 8001b42:	2b02      	cmp	r3, #2
 8001b44:	d123      	bne.n	8001b8e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b46:	697b      	ldr	r3, [r7, #20]
 8001b48:	08da      	lsrs	r2, r3, #3
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	3208      	adds	r2, #8
 8001b4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b52:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001b54:	697b      	ldr	r3, [r7, #20]
 8001b56:	f003 0307 	and.w	r3, r3, #7
 8001b5a:	009b      	lsls	r3, r3, #2
 8001b5c:	220f      	movs	r2, #15
 8001b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b62:	43db      	mvns	r3, r3
 8001b64:	693a      	ldr	r2, [r7, #16]
 8001b66:	4013      	ands	r3, r2
 8001b68:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	691a      	ldr	r2, [r3, #16]
 8001b6e:	697b      	ldr	r3, [r7, #20]
 8001b70:	f003 0307 	and.w	r3, r3, #7
 8001b74:	009b      	lsls	r3, r3, #2
 8001b76:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7a:	693a      	ldr	r2, [r7, #16]
 8001b7c:	4313      	orrs	r3, r2
 8001b7e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001b80:	697b      	ldr	r3, [r7, #20]
 8001b82:	08da      	lsrs	r2, r3, #3
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	3208      	adds	r2, #8
 8001b88:	6939      	ldr	r1, [r7, #16]
 8001b8a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001b94:	697b      	ldr	r3, [r7, #20]
 8001b96:	005b      	lsls	r3, r3, #1
 8001b98:	2203      	movs	r2, #3
 8001b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9e:	43db      	mvns	r3, r3
 8001ba0:	693a      	ldr	r2, [r7, #16]
 8001ba2:	4013      	ands	r3, r2
 8001ba4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	f003 0203 	and.w	r2, r3, #3
 8001bae:	697b      	ldr	r3, [r7, #20]
 8001bb0:	005b      	lsls	r3, r3, #1
 8001bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb6:	693a      	ldr	r2, [r7, #16]
 8001bb8:	4313      	orrs	r3, r2
 8001bba:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	693a      	ldr	r2, [r7, #16]
 8001bc0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	f000 80a6 	beq.w	8001d1c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bd0:	4b5b      	ldr	r3, [pc, #364]	@ (8001d40 <HAL_GPIO_Init+0x2e4>)
 8001bd2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001bd4:	4a5a      	ldr	r2, [pc, #360]	@ (8001d40 <HAL_GPIO_Init+0x2e4>)
 8001bd6:	f043 0301 	orr.w	r3, r3, #1
 8001bda:	6613      	str	r3, [r2, #96]	@ 0x60
 8001bdc:	4b58      	ldr	r3, [pc, #352]	@ (8001d40 <HAL_GPIO_Init+0x2e4>)
 8001bde:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001be0:	f003 0301 	and.w	r3, r3, #1
 8001be4:	60bb      	str	r3, [r7, #8]
 8001be6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001be8:	4a56      	ldr	r2, [pc, #344]	@ (8001d44 <HAL_GPIO_Init+0x2e8>)
 8001bea:	697b      	ldr	r3, [r7, #20]
 8001bec:	089b      	lsrs	r3, r3, #2
 8001bee:	3302      	adds	r3, #2
 8001bf0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bf4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	f003 0303 	and.w	r3, r3, #3
 8001bfc:	009b      	lsls	r3, r3, #2
 8001bfe:	220f      	movs	r2, #15
 8001c00:	fa02 f303 	lsl.w	r3, r2, r3
 8001c04:	43db      	mvns	r3, r3
 8001c06:	693a      	ldr	r2, [r7, #16]
 8001c08:	4013      	ands	r3, r2
 8001c0a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001c12:	d01f      	beq.n	8001c54 <HAL_GPIO_Init+0x1f8>
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	4a4c      	ldr	r2, [pc, #304]	@ (8001d48 <HAL_GPIO_Init+0x2ec>)
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d019      	beq.n	8001c50 <HAL_GPIO_Init+0x1f4>
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	4a4b      	ldr	r2, [pc, #300]	@ (8001d4c <HAL_GPIO_Init+0x2f0>)
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d013      	beq.n	8001c4c <HAL_GPIO_Init+0x1f0>
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	4a4a      	ldr	r2, [pc, #296]	@ (8001d50 <HAL_GPIO_Init+0x2f4>)
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d00d      	beq.n	8001c48 <HAL_GPIO_Init+0x1ec>
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	4a49      	ldr	r2, [pc, #292]	@ (8001d54 <HAL_GPIO_Init+0x2f8>)
 8001c30:	4293      	cmp	r3, r2
 8001c32:	d007      	beq.n	8001c44 <HAL_GPIO_Init+0x1e8>
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	4a48      	ldr	r2, [pc, #288]	@ (8001d58 <HAL_GPIO_Init+0x2fc>)
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	d101      	bne.n	8001c40 <HAL_GPIO_Init+0x1e4>
 8001c3c:	2305      	movs	r3, #5
 8001c3e:	e00a      	b.n	8001c56 <HAL_GPIO_Init+0x1fa>
 8001c40:	2306      	movs	r3, #6
 8001c42:	e008      	b.n	8001c56 <HAL_GPIO_Init+0x1fa>
 8001c44:	2304      	movs	r3, #4
 8001c46:	e006      	b.n	8001c56 <HAL_GPIO_Init+0x1fa>
 8001c48:	2303      	movs	r3, #3
 8001c4a:	e004      	b.n	8001c56 <HAL_GPIO_Init+0x1fa>
 8001c4c:	2302      	movs	r3, #2
 8001c4e:	e002      	b.n	8001c56 <HAL_GPIO_Init+0x1fa>
 8001c50:	2301      	movs	r3, #1
 8001c52:	e000      	b.n	8001c56 <HAL_GPIO_Init+0x1fa>
 8001c54:	2300      	movs	r3, #0
 8001c56:	697a      	ldr	r2, [r7, #20]
 8001c58:	f002 0203 	and.w	r2, r2, #3
 8001c5c:	0092      	lsls	r2, r2, #2
 8001c5e:	4093      	lsls	r3, r2
 8001c60:	693a      	ldr	r2, [r7, #16]
 8001c62:	4313      	orrs	r3, r2
 8001c64:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c66:	4937      	ldr	r1, [pc, #220]	@ (8001d44 <HAL_GPIO_Init+0x2e8>)
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	089b      	lsrs	r3, r3, #2
 8001c6c:	3302      	adds	r3, #2
 8001c6e:	693a      	ldr	r2, [r7, #16]
 8001c70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001c74:	4b39      	ldr	r3, [pc, #228]	@ (8001d5c <HAL_GPIO_Init+0x300>)
 8001c76:	689b      	ldr	r3, [r3, #8]
 8001c78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	43db      	mvns	r3, r3
 8001c7e:	693a      	ldr	r2, [r7, #16]
 8001c80:	4013      	ands	r3, r2
 8001c82:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d003      	beq.n	8001c98 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001c90:	693a      	ldr	r2, [r7, #16]
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	4313      	orrs	r3, r2
 8001c96:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001c98:	4a30      	ldr	r2, [pc, #192]	@ (8001d5c <HAL_GPIO_Init+0x300>)
 8001c9a:	693b      	ldr	r3, [r7, #16]
 8001c9c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001c9e:	4b2f      	ldr	r3, [pc, #188]	@ (8001d5c <HAL_GPIO_Init+0x300>)
 8001ca0:	68db      	ldr	r3, [r3, #12]
 8001ca2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	43db      	mvns	r3, r3
 8001ca8:	693a      	ldr	r2, [r7, #16]
 8001caa:	4013      	ands	r3, r2
 8001cac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d003      	beq.n	8001cc2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001cba:	693a      	ldr	r2, [r7, #16]
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001cc2:	4a26      	ldr	r2, [pc, #152]	@ (8001d5c <HAL_GPIO_Init+0x300>)
 8001cc4:	693b      	ldr	r3, [r7, #16]
 8001cc6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001cc8:	4b24      	ldr	r3, [pc, #144]	@ (8001d5c <HAL_GPIO_Init+0x300>)
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	43db      	mvns	r3, r3
 8001cd2:	693a      	ldr	r2, [r7, #16]
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d003      	beq.n	8001cec <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001ce4:	693a      	ldr	r2, [r7, #16]
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	4313      	orrs	r3, r2
 8001cea:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001cec:	4a1b      	ldr	r2, [pc, #108]	@ (8001d5c <HAL_GPIO_Init+0x300>)
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001cf2:	4b1a      	ldr	r3, [pc, #104]	@ (8001d5c <HAL_GPIO_Init+0x300>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	43db      	mvns	r3, r3
 8001cfc:	693a      	ldr	r2, [r7, #16]
 8001cfe:	4013      	ands	r3, r2
 8001d00:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d003      	beq.n	8001d16 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001d0e:	693a      	ldr	r2, [r7, #16]
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	4313      	orrs	r3, r2
 8001d14:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001d16:	4a11      	ldr	r2, [pc, #68]	@ (8001d5c <HAL_GPIO_Init+0x300>)
 8001d18:	693b      	ldr	r3, [r7, #16]
 8001d1a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	3301      	adds	r3, #1
 8001d20:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	681a      	ldr	r2, [r3, #0]
 8001d26:	697b      	ldr	r3, [r7, #20]
 8001d28:	fa22 f303 	lsr.w	r3, r2, r3
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	f47f ae9d 	bne.w	8001a6c <HAL_GPIO_Init+0x10>
  }
}
 8001d32:	bf00      	nop
 8001d34:	bf00      	nop
 8001d36:	371c      	adds	r7, #28
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3e:	4770      	bx	lr
 8001d40:	40021000 	.word	0x40021000
 8001d44:	40010000 	.word	0x40010000
 8001d48:	48000400 	.word	0x48000400
 8001d4c:	48000800 	.word	0x48000800
 8001d50:	48000c00 	.word	0x48000c00
 8001d54:	48001000 	.word	0x48001000
 8001d58:	48001400 	.word	0x48001400
 8001d5c:	40010400 	.word	0x40010400

08001d60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b083      	sub	sp, #12
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
 8001d68:	460b      	mov	r3, r1
 8001d6a:	807b      	strh	r3, [r7, #2]
 8001d6c:	4613      	mov	r3, r2
 8001d6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d70:	787b      	ldrb	r3, [r7, #1]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d003      	beq.n	8001d7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001d76:	887a      	ldrh	r2, [r7, #2]
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001d7c:	e002      	b.n	8001d84 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001d7e:	887a      	ldrh	r2, [r7, #2]
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001d84:	bf00      	nop
 8001d86:	370c      	adds	r7, #12
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8e:	4770      	bx	lr

08001d90 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b082      	sub	sp, #8
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d101      	bne.n	8001da2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	e08d      	b.n	8001ebe <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001da8:	b2db      	uxtb	r3, r3
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d106      	bne.n	8001dbc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2200      	movs	r2, #0
 8001db2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001db6:	6878      	ldr	r0, [r7, #4]
 8001db8:	f7fe fca4 	bl	8000704 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2224      	movs	r2, #36	@ 0x24
 8001dc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	681a      	ldr	r2, [r3, #0]
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f022 0201 	bic.w	r2, r2, #1
 8001dd2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	685a      	ldr	r2, [r3, #4]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001de0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	689a      	ldr	r2, [r3, #8]
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001df0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	68db      	ldr	r3, [r3, #12]
 8001df6:	2b01      	cmp	r3, #1
 8001df8:	d107      	bne.n	8001e0a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	689a      	ldr	r2, [r3, #8]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001e06:	609a      	str	r2, [r3, #8]
 8001e08:	e006      	b.n	8001e18 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	689a      	ldr	r2, [r3, #8]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001e16:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	68db      	ldr	r3, [r3, #12]
 8001e1c:	2b02      	cmp	r3, #2
 8001e1e:	d108      	bne.n	8001e32 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	685a      	ldr	r2, [r3, #4]
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001e2e:	605a      	str	r2, [r3, #4]
 8001e30:	e007      	b.n	8001e42 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	685a      	ldr	r2, [r3, #4]
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001e40:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	687a      	ldr	r2, [r7, #4]
 8001e4a:	6812      	ldr	r2, [r2, #0]
 8001e4c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001e50:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001e54:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	68da      	ldr	r2, [r3, #12]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001e64:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	691a      	ldr	r2, [r3, #16]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	695b      	ldr	r3, [r3, #20]
 8001e6e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	699b      	ldr	r3, [r3, #24]
 8001e76:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	430a      	orrs	r2, r1
 8001e7e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	69d9      	ldr	r1, [r3, #28]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6a1a      	ldr	r2, [r3, #32]
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	430a      	orrs	r2, r1
 8001e8e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	681a      	ldr	r2, [r3, #0]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f042 0201 	orr.w	r2, r2, #1
 8001e9e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2220      	movs	r2, #32
 8001eaa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001ebc:	2300      	movs	r3, #0
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	3708      	adds	r7, #8
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}
	...

08001ec8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b088      	sub	sp, #32
 8001ecc:	af02      	add	r7, sp, #8
 8001ece:	60f8      	str	r0, [r7, #12]
 8001ed0:	4608      	mov	r0, r1
 8001ed2:	4611      	mov	r1, r2
 8001ed4:	461a      	mov	r2, r3
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	817b      	strh	r3, [r7, #10]
 8001eda:	460b      	mov	r3, r1
 8001edc:	813b      	strh	r3, [r7, #8]
 8001ede:	4613      	mov	r3, r2
 8001ee0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001ee8:	b2db      	uxtb	r3, r3
 8001eea:	2b20      	cmp	r3, #32
 8001eec:	f040 80f9 	bne.w	80020e2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001ef0:	6a3b      	ldr	r3, [r7, #32]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d002      	beq.n	8001efc <HAL_I2C_Mem_Write+0x34>
 8001ef6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d105      	bne.n	8001f08 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001f02:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8001f04:	2301      	movs	r3, #1
 8001f06:	e0ed      	b.n	80020e4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001f0e:	2b01      	cmp	r3, #1
 8001f10:	d101      	bne.n	8001f16 <HAL_I2C_Mem_Write+0x4e>
 8001f12:	2302      	movs	r3, #2
 8001f14:	e0e6      	b.n	80020e4 <HAL_I2C_Mem_Write+0x21c>
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	2201      	movs	r2, #1
 8001f1a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001f1e:	f7ff faa5 	bl	800146c <HAL_GetTick>
 8001f22:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001f24:	697b      	ldr	r3, [r7, #20]
 8001f26:	9300      	str	r3, [sp, #0]
 8001f28:	2319      	movs	r3, #25
 8001f2a:	2201      	movs	r2, #1
 8001f2c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001f30:	68f8      	ldr	r0, [r7, #12]
 8001f32:	f000 fadd 	bl	80024f0 <I2C_WaitOnFlagUntilTimeout>
 8001f36:	4603      	mov	r3, r0
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d001      	beq.n	8001f40 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	e0d1      	b.n	80020e4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	2221      	movs	r2, #33	@ 0x21
 8001f44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	2240      	movs	r2, #64	@ 0x40
 8001f4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	2200      	movs	r2, #0
 8001f54:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	6a3a      	ldr	r2, [r7, #32]
 8001f5a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001f60:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	2200      	movs	r2, #0
 8001f66:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001f68:	88f8      	ldrh	r0, [r7, #6]
 8001f6a:	893a      	ldrh	r2, [r7, #8]
 8001f6c:	8979      	ldrh	r1, [r7, #10]
 8001f6e:	697b      	ldr	r3, [r7, #20]
 8001f70:	9301      	str	r3, [sp, #4]
 8001f72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f74:	9300      	str	r3, [sp, #0]
 8001f76:	4603      	mov	r3, r0
 8001f78:	68f8      	ldr	r0, [r7, #12]
 8001f7a:	f000 f9ed 	bl	8002358 <I2C_RequestMemoryWrite>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d005      	beq.n	8001f90 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	2200      	movs	r2, #0
 8001f88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	e0a9      	b.n	80020e4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f94:	b29b      	uxth	r3, r3
 8001f96:	2bff      	cmp	r3, #255	@ 0xff
 8001f98:	d90e      	bls.n	8001fb8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	22ff      	movs	r2, #255	@ 0xff
 8001f9e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001fa4:	b2da      	uxtb	r2, r3
 8001fa6:	8979      	ldrh	r1, [r7, #10]
 8001fa8:	2300      	movs	r3, #0
 8001faa:	9300      	str	r3, [sp, #0]
 8001fac:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001fb0:	68f8      	ldr	r0, [r7, #12]
 8001fb2:	f000 fc61 	bl	8002878 <I2C_TransferConfig>
 8001fb6:	e00f      	b.n	8001fd8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001fbc:	b29a      	uxth	r2, r3
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001fc6:	b2da      	uxtb	r2, r3
 8001fc8:	8979      	ldrh	r1, [r7, #10]
 8001fca:	2300      	movs	r3, #0
 8001fcc:	9300      	str	r3, [sp, #0]
 8001fce:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001fd2:	68f8      	ldr	r0, [r7, #12]
 8001fd4:	f000 fc50 	bl	8002878 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001fd8:	697a      	ldr	r2, [r7, #20]
 8001fda:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001fdc:	68f8      	ldr	r0, [r7, #12]
 8001fde:	f000 fae0 	bl	80025a2 <I2C_WaitOnTXISFlagUntilTimeout>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d001      	beq.n	8001fec <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	e07b      	b.n	80020e4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ff0:	781a      	ldrb	r2, [r3, #0]
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ffc:	1c5a      	adds	r2, r3, #1
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002006:	b29b      	uxth	r3, r3
 8002008:	3b01      	subs	r3, #1
 800200a:	b29a      	uxth	r2, r3
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002014:	3b01      	subs	r3, #1
 8002016:	b29a      	uxth	r2, r3
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002020:	b29b      	uxth	r3, r3
 8002022:	2b00      	cmp	r3, #0
 8002024:	d034      	beq.n	8002090 <HAL_I2C_Mem_Write+0x1c8>
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800202a:	2b00      	cmp	r3, #0
 800202c:	d130      	bne.n	8002090 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800202e:	697b      	ldr	r3, [r7, #20]
 8002030:	9300      	str	r3, [sp, #0]
 8002032:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002034:	2200      	movs	r2, #0
 8002036:	2180      	movs	r1, #128	@ 0x80
 8002038:	68f8      	ldr	r0, [r7, #12]
 800203a:	f000 fa59 	bl	80024f0 <I2C_WaitOnFlagUntilTimeout>
 800203e:	4603      	mov	r3, r0
 8002040:	2b00      	cmp	r3, #0
 8002042:	d001      	beq.n	8002048 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002044:	2301      	movs	r3, #1
 8002046:	e04d      	b.n	80020e4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800204c:	b29b      	uxth	r3, r3
 800204e:	2bff      	cmp	r3, #255	@ 0xff
 8002050:	d90e      	bls.n	8002070 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	22ff      	movs	r2, #255	@ 0xff
 8002056:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800205c:	b2da      	uxtb	r2, r3
 800205e:	8979      	ldrh	r1, [r7, #10]
 8002060:	2300      	movs	r3, #0
 8002062:	9300      	str	r3, [sp, #0]
 8002064:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002068:	68f8      	ldr	r0, [r7, #12]
 800206a:	f000 fc05 	bl	8002878 <I2C_TransferConfig>
 800206e:	e00f      	b.n	8002090 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002074:	b29a      	uxth	r2, r3
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800207e:	b2da      	uxtb	r2, r3
 8002080:	8979      	ldrh	r1, [r7, #10]
 8002082:	2300      	movs	r3, #0
 8002084:	9300      	str	r3, [sp, #0]
 8002086:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800208a:	68f8      	ldr	r0, [r7, #12]
 800208c:	f000 fbf4 	bl	8002878 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002094:	b29b      	uxth	r3, r3
 8002096:	2b00      	cmp	r3, #0
 8002098:	d19e      	bne.n	8001fd8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800209a:	697a      	ldr	r2, [r7, #20]
 800209c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800209e:	68f8      	ldr	r0, [r7, #12]
 80020a0:	f000 fac6 	bl	8002630 <I2C_WaitOnSTOPFlagUntilTimeout>
 80020a4:	4603      	mov	r3, r0
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d001      	beq.n	80020ae <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
 80020ac:	e01a      	b.n	80020e4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	2220      	movs	r2, #32
 80020b4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	6859      	ldr	r1, [r3, #4]
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	681a      	ldr	r2, [r3, #0]
 80020c0:	4b0a      	ldr	r3, [pc, #40]	@ (80020ec <HAL_I2C_Mem_Write+0x224>)
 80020c2:	400b      	ands	r3, r1
 80020c4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	2220      	movs	r2, #32
 80020ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	2200      	movs	r2, #0
 80020d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	2200      	movs	r2, #0
 80020da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80020de:	2300      	movs	r3, #0
 80020e0:	e000      	b.n	80020e4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80020e2:	2302      	movs	r3, #2
  }
}
 80020e4:	4618      	mov	r0, r3
 80020e6:	3718      	adds	r7, #24
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}
 80020ec:	fe00e800 	.word	0xfe00e800

080020f0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b088      	sub	sp, #32
 80020f4:	af02      	add	r7, sp, #8
 80020f6:	60f8      	str	r0, [r7, #12]
 80020f8:	4608      	mov	r0, r1
 80020fa:	4611      	mov	r1, r2
 80020fc:	461a      	mov	r2, r3
 80020fe:	4603      	mov	r3, r0
 8002100:	817b      	strh	r3, [r7, #10]
 8002102:	460b      	mov	r3, r1
 8002104:	813b      	strh	r3, [r7, #8]
 8002106:	4613      	mov	r3, r2
 8002108:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002110:	b2db      	uxtb	r3, r3
 8002112:	2b20      	cmp	r3, #32
 8002114:	f040 80fd 	bne.w	8002312 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002118:	6a3b      	ldr	r3, [r7, #32]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d002      	beq.n	8002124 <HAL_I2C_Mem_Read+0x34>
 800211e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002120:	2b00      	cmp	r3, #0
 8002122:	d105      	bne.n	8002130 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800212a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800212c:	2301      	movs	r3, #1
 800212e:	e0f1      	b.n	8002314 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002136:	2b01      	cmp	r3, #1
 8002138:	d101      	bne.n	800213e <HAL_I2C_Mem_Read+0x4e>
 800213a:	2302      	movs	r3, #2
 800213c:	e0ea      	b.n	8002314 <HAL_I2C_Mem_Read+0x224>
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	2201      	movs	r2, #1
 8002142:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002146:	f7ff f991 	bl	800146c <HAL_GetTick>
 800214a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	9300      	str	r3, [sp, #0]
 8002150:	2319      	movs	r3, #25
 8002152:	2201      	movs	r2, #1
 8002154:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002158:	68f8      	ldr	r0, [r7, #12]
 800215a:	f000 f9c9 	bl	80024f0 <I2C_WaitOnFlagUntilTimeout>
 800215e:	4603      	mov	r3, r0
 8002160:	2b00      	cmp	r3, #0
 8002162:	d001      	beq.n	8002168 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002164:	2301      	movs	r3, #1
 8002166:	e0d5      	b.n	8002314 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	2222      	movs	r2, #34	@ 0x22
 800216c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	2240      	movs	r2, #64	@ 0x40
 8002174:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	2200      	movs	r2, #0
 800217c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	6a3a      	ldr	r2, [r7, #32]
 8002182:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002188:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	2200      	movs	r2, #0
 800218e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002190:	88f8      	ldrh	r0, [r7, #6]
 8002192:	893a      	ldrh	r2, [r7, #8]
 8002194:	8979      	ldrh	r1, [r7, #10]
 8002196:	697b      	ldr	r3, [r7, #20]
 8002198:	9301      	str	r3, [sp, #4]
 800219a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800219c:	9300      	str	r3, [sp, #0]
 800219e:	4603      	mov	r3, r0
 80021a0:	68f8      	ldr	r0, [r7, #12]
 80021a2:	f000 f92d 	bl	8002400 <I2C_RequestMemoryRead>
 80021a6:	4603      	mov	r3, r0
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d005      	beq.n	80021b8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	2200      	movs	r2, #0
 80021b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80021b4:	2301      	movs	r3, #1
 80021b6:	e0ad      	b.n	8002314 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021bc:	b29b      	uxth	r3, r3
 80021be:	2bff      	cmp	r3, #255	@ 0xff
 80021c0:	d90e      	bls.n	80021e0 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	22ff      	movs	r2, #255	@ 0xff
 80021c6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021cc:	b2da      	uxtb	r2, r3
 80021ce:	8979      	ldrh	r1, [r7, #10]
 80021d0:	4b52      	ldr	r3, [pc, #328]	@ (800231c <HAL_I2C_Mem_Read+0x22c>)
 80021d2:	9300      	str	r3, [sp, #0]
 80021d4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80021d8:	68f8      	ldr	r0, [r7, #12]
 80021da:	f000 fb4d 	bl	8002878 <I2C_TransferConfig>
 80021de:	e00f      	b.n	8002200 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021e4:	b29a      	uxth	r2, r3
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021ee:	b2da      	uxtb	r2, r3
 80021f0:	8979      	ldrh	r1, [r7, #10]
 80021f2:	4b4a      	ldr	r3, [pc, #296]	@ (800231c <HAL_I2C_Mem_Read+0x22c>)
 80021f4:	9300      	str	r3, [sp, #0]
 80021f6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80021fa:	68f8      	ldr	r0, [r7, #12]
 80021fc:	f000 fb3c 	bl	8002878 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002200:	697b      	ldr	r3, [r7, #20]
 8002202:	9300      	str	r3, [sp, #0]
 8002204:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002206:	2200      	movs	r2, #0
 8002208:	2104      	movs	r1, #4
 800220a:	68f8      	ldr	r0, [r7, #12]
 800220c:	f000 f970 	bl	80024f0 <I2C_WaitOnFlagUntilTimeout>
 8002210:	4603      	mov	r3, r0
 8002212:	2b00      	cmp	r3, #0
 8002214:	d001      	beq.n	800221a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002216:	2301      	movs	r3, #1
 8002218:	e07c      	b.n	8002314 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002224:	b2d2      	uxtb	r2, r2
 8002226:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800222c:	1c5a      	adds	r2, r3, #1
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002236:	3b01      	subs	r3, #1
 8002238:	b29a      	uxth	r2, r3
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002242:	b29b      	uxth	r3, r3
 8002244:	3b01      	subs	r3, #1
 8002246:	b29a      	uxth	r2, r3
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002250:	b29b      	uxth	r3, r3
 8002252:	2b00      	cmp	r3, #0
 8002254:	d034      	beq.n	80022c0 <HAL_I2C_Mem_Read+0x1d0>
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800225a:	2b00      	cmp	r3, #0
 800225c:	d130      	bne.n	80022c0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800225e:	697b      	ldr	r3, [r7, #20]
 8002260:	9300      	str	r3, [sp, #0]
 8002262:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002264:	2200      	movs	r2, #0
 8002266:	2180      	movs	r1, #128	@ 0x80
 8002268:	68f8      	ldr	r0, [r7, #12]
 800226a:	f000 f941 	bl	80024f0 <I2C_WaitOnFlagUntilTimeout>
 800226e:	4603      	mov	r3, r0
 8002270:	2b00      	cmp	r3, #0
 8002272:	d001      	beq.n	8002278 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002274:	2301      	movs	r3, #1
 8002276:	e04d      	b.n	8002314 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800227c:	b29b      	uxth	r3, r3
 800227e:	2bff      	cmp	r3, #255	@ 0xff
 8002280:	d90e      	bls.n	80022a0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	22ff      	movs	r2, #255	@ 0xff
 8002286:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800228c:	b2da      	uxtb	r2, r3
 800228e:	8979      	ldrh	r1, [r7, #10]
 8002290:	2300      	movs	r3, #0
 8002292:	9300      	str	r3, [sp, #0]
 8002294:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002298:	68f8      	ldr	r0, [r7, #12]
 800229a:	f000 faed 	bl	8002878 <I2C_TransferConfig>
 800229e:	e00f      	b.n	80022c0 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022a4:	b29a      	uxth	r2, r3
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022ae:	b2da      	uxtb	r2, r3
 80022b0:	8979      	ldrh	r1, [r7, #10]
 80022b2:	2300      	movs	r3, #0
 80022b4:	9300      	str	r3, [sp, #0]
 80022b6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80022ba:	68f8      	ldr	r0, [r7, #12]
 80022bc:	f000 fadc 	bl	8002878 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022c4:	b29b      	uxth	r3, r3
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d19a      	bne.n	8002200 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022ca:	697a      	ldr	r2, [r7, #20]
 80022cc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80022ce:	68f8      	ldr	r0, [r7, #12]
 80022d0:	f000 f9ae 	bl	8002630 <I2C_WaitOnSTOPFlagUntilTimeout>
 80022d4:	4603      	mov	r3, r0
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d001      	beq.n	80022de <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80022da:	2301      	movs	r3, #1
 80022dc:	e01a      	b.n	8002314 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	2220      	movs	r2, #32
 80022e4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	6859      	ldr	r1, [r3, #4]
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681a      	ldr	r2, [r3, #0]
 80022f0:	4b0b      	ldr	r3, [pc, #44]	@ (8002320 <HAL_I2C_Mem_Read+0x230>)
 80022f2:	400b      	ands	r3, r1
 80022f4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	2220      	movs	r2, #32
 80022fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	2200      	movs	r2, #0
 8002302:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	2200      	movs	r2, #0
 800230a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800230e:	2300      	movs	r3, #0
 8002310:	e000      	b.n	8002314 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002312:	2302      	movs	r3, #2
  }
}
 8002314:	4618      	mov	r0, r3
 8002316:	3718      	adds	r7, #24
 8002318:	46bd      	mov	sp, r7
 800231a:	bd80      	pop	{r7, pc}
 800231c:	80002400 	.word	0x80002400
 8002320:	fe00e800 	.word	0xfe00e800

08002324 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b084      	sub	sp, #16
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	699b      	ldr	r3, [r3, #24]
 8002332:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002340:	2b00      	cmp	r3, #0
 8002342:	d005      	beq.n	8002350 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002348:	68ba      	ldr	r2, [r7, #8]
 800234a:	68f9      	ldr	r1, [r7, #12]
 800234c:	6878      	ldr	r0, [r7, #4]
 800234e:	4798      	blx	r3
  }
}
 8002350:	bf00      	nop
 8002352:	3710      	adds	r7, #16
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}

08002358 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b086      	sub	sp, #24
 800235c:	af02      	add	r7, sp, #8
 800235e:	60f8      	str	r0, [r7, #12]
 8002360:	4608      	mov	r0, r1
 8002362:	4611      	mov	r1, r2
 8002364:	461a      	mov	r2, r3
 8002366:	4603      	mov	r3, r0
 8002368:	817b      	strh	r3, [r7, #10]
 800236a:	460b      	mov	r3, r1
 800236c:	813b      	strh	r3, [r7, #8]
 800236e:	4613      	mov	r3, r2
 8002370:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002372:	88fb      	ldrh	r3, [r7, #6]
 8002374:	b2da      	uxtb	r2, r3
 8002376:	8979      	ldrh	r1, [r7, #10]
 8002378:	4b20      	ldr	r3, [pc, #128]	@ (80023fc <I2C_RequestMemoryWrite+0xa4>)
 800237a:	9300      	str	r3, [sp, #0]
 800237c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002380:	68f8      	ldr	r0, [r7, #12]
 8002382:	f000 fa79 	bl	8002878 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002386:	69fa      	ldr	r2, [r7, #28]
 8002388:	69b9      	ldr	r1, [r7, #24]
 800238a:	68f8      	ldr	r0, [r7, #12]
 800238c:	f000 f909 	bl	80025a2 <I2C_WaitOnTXISFlagUntilTimeout>
 8002390:	4603      	mov	r3, r0
 8002392:	2b00      	cmp	r3, #0
 8002394:	d001      	beq.n	800239a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002396:	2301      	movs	r3, #1
 8002398:	e02c      	b.n	80023f4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800239a:	88fb      	ldrh	r3, [r7, #6]
 800239c:	2b01      	cmp	r3, #1
 800239e:	d105      	bne.n	80023ac <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80023a0:	893b      	ldrh	r3, [r7, #8]
 80023a2:	b2da      	uxtb	r2, r3
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	629a      	str	r2, [r3, #40]	@ 0x28
 80023aa:	e015      	b.n	80023d8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80023ac:	893b      	ldrh	r3, [r7, #8]
 80023ae:	0a1b      	lsrs	r3, r3, #8
 80023b0:	b29b      	uxth	r3, r3
 80023b2:	b2da      	uxtb	r2, r3
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80023ba:	69fa      	ldr	r2, [r7, #28]
 80023bc:	69b9      	ldr	r1, [r7, #24]
 80023be:	68f8      	ldr	r0, [r7, #12]
 80023c0:	f000 f8ef 	bl	80025a2 <I2C_WaitOnTXISFlagUntilTimeout>
 80023c4:	4603      	mov	r3, r0
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d001      	beq.n	80023ce <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80023ca:	2301      	movs	r3, #1
 80023cc:	e012      	b.n	80023f4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80023ce:	893b      	ldrh	r3, [r7, #8]
 80023d0:	b2da      	uxtb	r2, r3
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80023d8:	69fb      	ldr	r3, [r7, #28]
 80023da:	9300      	str	r3, [sp, #0]
 80023dc:	69bb      	ldr	r3, [r7, #24]
 80023de:	2200      	movs	r2, #0
 80023e0:	2180      	movs	r1, #128	@ 0x80
 80023e2:	68f8      	ldr	r0, [r7, #12]
 80023e4:	f000 f884 	bl	80024f0 <I2C_WaitOnFlagUntilTimeout>
 80023e8:	4603      	mov	r3, r0
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d001      	beq.n	80023f2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80023ee:	2301      	movs	r3, #1
 80023f0:	e000      	b.n	80023f4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80023f2:	2300      	movs	r3, #0
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	3710      	adds	r7, #16
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd80      	pop	{r7, pc}
 80023fc:	80002000 	.word	0x80002000

08002400 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b086      	sub	sp, #24
 8002404:	af02      	add	r7, sp, #8
 8002406:	60f8      	str	r0, [r7, #12]
 8002408:	4608      	mov	r0, r1
 800240a:	4611      	mov	r1, r2
 800240c:	461a      	mov	r2, r3
 800240e:	4603      	mov	r3, r0
 8002410:	817b      	strh	r3, [r7, #10]
 8002412:	460b      	mov	r3, r1
 8002414:	813b      	strh	r3, [r7, #8]
 8002416:	4613      	mov	r3, r2
 8002418:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800241a:	88fb      	ldrh	r3, [r7, #6]
 800241c:	b2da      	uxtb	r2, r3
 800241e:	8979      	ldrh	r1, [r7, #10]
 8002420:	4b20      	ldr	r3, [pc, #128]	@ (80024a4 <I2C_RequestMemoryRead+0xa4>)
 8002422:	9300      	str	r3, [sp, #0]
 8002424:	2300      	movs	r3, #0
 8002426:	68f8      	ldr	r0, [r7, #12]
 8002428:	f000 fa26 	bl	8002878 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800242c:	69fa      	ldr	r2, [r7, #28]
 800242e:	69b9      	ldr	r1, [r7, #24]
 8002430:	68f8      	ldr	r0, [r7, #12]
 8002432:	f000 f8b6 	bl	80025a2 <I2C_WaitOnTXISFlagUntilTimeout>
 8002436:	4603      	mov	r3, r0
 8002438:	2b00      	cmp	r3, #0
 800243a:	d001      	beq.n	8002440 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800243c:	2301      	movs	r3, #1
 800243e:	e02c      	b.n	800249a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002440:	88fb      	ldrh	r3, [r7, #6]
 8002442:	2b01      	cmp	r3, #1
 8002444:	d105      	bne.n	8002452 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002446:	893b      	ldrh	r3, [r7, #8]
 8002448:	b2da      	uxtb	r2, r3
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	629a      	str	r2, [r3, #40]	@ 0x28
 8002450:	e015      	b.n	800247e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002452:	893b      	ldrh	r3, [r7, #8]
 8002454:	0a1b      	lsrs	r3, r3, #8
 8002456:	b29b      	uxth	r3, r3
 8002458:	b2da      	uxtb	r2, r3
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002460:	69fa      	ldr	r2, [r7, #28]
 8002462:	69b9      	ldr	r1, [r7, #24]
 8002464:	68f8      	ldr	r0, [r7, #12]
 8002466:	f000 f89c 	bl	80025a2 <I2C_WaitOnTXISFlagUntilTimeout>
 800246a:	4603      	mov	r3, r0
 800246c:	2b00      	cmp	r3, #0
 800246e:	d001      	beq.n	8002474 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002470:	2301      	movs	r3, #1
 8002472:	e012      	b.n	800249a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002474:	893b      	ldrh	r3, [r7, #8]
 8002476:	b2da      	uxtb	r2, r3
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800247e:	69fb      	ldr	r3, [r7, #28]
 8002480:	9300      	str	r3, [sp, #0]
 8002482:	69bb      	ldr	r3, [r7, #24]
 8002484:	2200      	movs	r2, #0
 8002486:	2140      	movs	r1, #64	@ 0x40
 8002488:	68f8      	ldr	r0, [r7, #12]
 800248a:	f000 f831 	bl	80024f0 <I2C_WaitOnFlagUntilTimeout>
 800248e:	4603      	mov	r3, r0
 8002490:	2b00      	cmp	r3, #0
 8002492:	d001      	beq.n	8002498 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002494:	2301      	movs	r3, #1
 8002496:	e000      	b.n	800249a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002498:	2300      	movs	r3, #0
}
 800249a:	4618      	mov	r0, r3
 800249c:	3710      	adds	r7, #16
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}
 80024a2:	bf00      	nop
 80024a4:	80002000 	.word	0x80002000

080024a8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b083      	sub	sp, #12
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	699b      	ldr	r3, [r3, #24]
 80024b6:	f003 0302 	and.w	r3, r3, #2
 80024ba:	2b02      	cmp	r3, #2
 80024bc:	d103      	bne.n	80024c6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	2200      	movs	r2, #0
 80024c4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	699b      	ldr	r3, [r3, #24]
 80024cc:	f003 0301 	and.w	r3, r3, #1
 80024d0:	2b01      	cmp	r3, #1
 80024d2:	d007      	beq.n	80024e4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	699a      	ldr	r2, [r3, #24]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f042 0201 	orr.w	r2, r2, #1
 80024e2:	619a      	str	r2, [r3, #24]
  }
}
 80024e4:	bf00      	nop
 80024e6:	370c      	adds	r7, #12
 80024e8:	46bd      	mov	sp, r7
 80024ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ee:	4770      	bx	lr

080024f0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b084      	sub	sp, #16
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	60f8      	str	r0, [r7, #12]
 80024f8:	60b9      	str	r1, [r7, #8]
 80024fa:	603b      	str	r3, [r7, #0]
 80024fc:	4613      	mov	r3, r2
 80024fe:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002500:	e03b      	b.n	800257a <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002502:	69ba      	ldr	r2, [r7, #24]
 8002504:	6839      	ldr	r1, [r7, #0]
 8002506:	68f8      	ldr	r0, [r7, #12]
 8002508:	f000 f8d6 	bl	80026b8 <I2C_IsErrorOccurred>
 800250c:	4603      	mov	r3, r0
 800250e:	2b00      	cmp	r3, #0
 8002510:	d001      	beq.n	8002516 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8002512:	2301      	movs	r3, #1
 8002514:	e041      	b.n	800259a <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	f1b3 3fff 	cmp.w	r3, #4294967295
 800251c:	d02d      	beq.n	800257a <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800251e:	f7fe ffa5 	bl	800146c <HAL_GetTick>
 8002522:	4602      	mov	r2, r0
 8002524:	69bb      	ldr	r3, [r7, #24]
 8002526:	1ad3      	subs	r3, r2, r3
 8002528:	683a      	ldr	r2, [r7, #0]
 800252a:	429a      	cmp	r2, r3
 800252c:	d302      	bcc.n	8002534 <I2C_WaitOnFlagUntilTimeout+0x44>
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d122      	bne.n	800257a <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	699a      	ldr	r2, [r3, #24]
 800253a:	68bb      	ldr	r3, [r7, #8]
 800253c:	4013      	ands	r3, r2
 800253e:	68ba      	ldr	r2, [r7, #8]
 8002540:	429a      	cmp	r2, r3
 8002542:	bf0c      	ite	eq
 8002544:	2301      	moveq	r3, #1
 8002546:	2300      	movne	r3, #0
 8002548:	b2db      	uxtb	r3, r3
 800254a:	461a      	mov	r2, r3
 800254c:	79fb      	ldrb	r3, [r7, #7]
 800254e:	429a      	cmp	r2, r3
 8002550:	d113      	bne.n	800257a <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002556:	f043 0220 	orr.w	r2, r3, #32
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	2220      	movs	r2, #32
 8002562:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	2200      	movs	r2, #0
 800256a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	2200      	movs	r2, #0
 8002572:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8002576:	2301      	movs	r3, #1
 8002578:	e00f      	b.n	800259a <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	699a      	ldr	r2, [r3, #24]
 8002580:	68bb      	ldr	r3, [r7, #8]
 8002582:	4013      	ands	r3, r2
 8002584:	68ba      	ldr	r2, [r7, #8]
 8002586:	429a      	cmp	r2, r3
 8002588:	bf0c      	ite	eq
 800258a:	2301      	moveq	r3, #1
 800258c:	2300      	movne	r3, #0
 800258e:	b2db      	uxtb	r3, r3
 8002590:	461a      	mov	r2, r3
 8002592:	79fb      	ldrb	r3, [r7, #7]
 8002594:	429a      	cmp	r2, r3
 8002596:	d0b4      	beq.n	8002502 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002598:	2300      	movs	r3, #0
}
 800259a:	4618      	mov	r0, r3
 800259c:	3710      	adds	r7, #16
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}

080025a2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80025a2:	b580      	push	{r7, lr}
 80025a4:	b084      	sub	sp, #16
 80025a6:	af00      	add	r7, sp, #0
 80025a8:	60f8      	str	r0, [r7, #12]
 80025aa:	60b9      	str	r1, [r7, #8]
 80025ac:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80025ae:	e033      	b.n	8002618 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80025b0:	687a      	ldr	r2, [r7, #4]
 80025b2:	68b9      	ldr	r1, [r7, #8]
 80025b4:	68f8      	ldr	r0, [r7, #12]
 80025b6:	f000 f87f 	bl	80026b8 <I2C_IsErrorOccurred>
 80025ba:	4603      	mov	r3, r0
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d001      	beq.n	80025c4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80025c0:	2301      	movs	r3, #1
 80025c2:	e031      	b.n	8002628 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025c4:	68bb      	ldr	r3, [r7, #8]
 80025c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025ca:	d025      	beq.n	8002618 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025cc:	f7fe ff4e 	bl	800146c <HAL_GetTick>
 80025d0:	4602      	mov	r2, r0
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	1ad3      	subs	r3, r2, r3
 80025d6:	68ba      	ldr	r2, [r7, #8]
 80025d8:	429a      	cmp	r2, r3
 80025da:	d302      	bcc.n	80025e2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80025dc:	68bb      	ldr	r3, [r7, #8]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d11a      	bne.n	8002618 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	699b      	ldr	r3, [r3, #24]
 80025e8:	f003 0302 	and.w	r3, r3, #2
 80025ec:	2b02      	cmp	r3, #2
 80025ee:	d013      	beq.n	8002618 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025f4:	f043 0220 	orr.w	r2, r3, #32
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	2220      	movs	r2, #32
 8002600:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	2200      	movs	r2, #0
 8002608:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	2200      	movs	r2, #0
 8002610:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002614:	2301      	movs	r3, #1
 8002616:	e007      	b.n	8002628 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	699b      	ldr	r3, [r3, #24]
 800261e:	f003 0302 	and.w	r3, r3, #2
 8002622:	2b02      	cmp	r3, #2
 8002624:	d1c4      	bne.n	80025b0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002626:	2300      	movs	r3, #0
}
 8002628:	4618      	mov	r0, r3
 800262a:	3710      	adds	r7, #16
 800262c:	46bd      	mov	sp, r7
 800262e:	bd80      	pop	{r7, pc}

08002630 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b084      	sub	sp, #16
 8002634:	af00      	add	r7, sp, #0
 8002636:	60f8      	str	r0, [r7, #12]
 8002638:	60b9      	str	r1, [r7, #8]
 800263a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800263c:	e02f      	b.n	800269e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800263e:	687a      	ldr	r2, [r7, #4]
 8002640:	68b9      	ldr	r1, [r7, #8]
 8002642:	68f8      	ldr	r0, [r7, #12]
 8002644:	f000 f838 	bl	80026b8 <I2C_IsErrorOccurred>
 8002648:	4603      	mov	r3, r0
 800264a:	2b00      	cmp	r3, #0
 800264c:	d001      	beq.n	8002652 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800264e:	2301      	movs	r3, #1
 8002650:	e02d      	b.n	80026ae <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002652:	f7fe ff0b 	bl	800146c <HAL_GetTick>
 8002656:	4602      	mov	r2, r0
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	1ad3      	subs	r3, r2, r3
 800265c:	68ba      	ldr	r2, [r7, #8]
 800265e:	429a      	cmp	r2, r3
 8002660:	d302      	bcc.n	8002668 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002662:	68bb      	ldr	r3, [r7, #8]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d11a      	bne.n	800269e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	699b      	ldr	r3, [r3, #24]
 800266e:	f003 0320 	and.w	r3, r3, #32
 8002672:	2b20      	cmp	r3, #32
 8002674:	d013      	beq.n	800269e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800267a:	f043 0220 	orr.w	r2, r3, #32
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	2220      	movs	r2, #32
 8002686:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	2200      	movs	r2, #0
 800268e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	2200      	movs	r2, #0
 8002696:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	e007      	b.n	80026ae <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	699b      	ldr	r3, [r3, #24]
 80026a4:	f003 0320 	and.w	r3, r3, #32
 80026a8:	2b20      	cmp	r3, #32
 80026aa:	d1c8      	bne.n	800263e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80026ac:	2300      	movs	r3, #0
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	3710      	adds	r7, #16
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}
	...

080026b8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b08a      	sub	sp, #40	@ 0x28
 80026bc:	af00      	add	r7, sp, #0
 80026be:	60f8      	str	r0, [r7, #12]
 80026c0:	60b9      	str	r1, [r7, #8]
 80026c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80026c4:	2300      	movs	r3, #0
 80026c6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	699b      	ldr	r3, [r3, #24]
 80026d0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80026d2:	2300      	movs	r3, #0
 80026d4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80026da:	69bb      	ldr	r3, [r7, #24]
 80026dc:	f003 0310 	and.w	r3, r3, #16
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d068      	beq.n	80027b6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	2210      	movs	r2, #16
 80026ea:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80026ec:	e049      	b.n	8002782 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80026ee:	68bb      	ldr	r3, [r7, #8]
 80026f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026f4:	d045      	beq.n	8002782 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80026f6:	f7fe feb9 	bl	800146c <HAL_GetTick>
 80026fa:	4602      	mov	r2, r0
 80026fc:	69fb      	ldr	r3, [r7, #28]
 80026fe:	1ad3      	subs	r3, r2, r3
 8002700:	68ba      	ldr	r2, [r7, #8]
 8002702:	429a      	cmp	r2, r3
 8002704:	d302      	bcc.n	800270c <I2C_IsErrorOccurred+0x54>
 8002706:	68bb      	ldr	r3, [r7, #8]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d13a      	bne.n	8002782 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002716:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800271e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	699b      	ldr	r3, [r3, #24]
 8002726:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800272a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800272e:	d121      	bne.n	8002774 <I2C_IsErrorOccurred+0xbc>
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002736:	d01d      	beq.n	8002774 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002738:	7cfb      	ldrb	r3, [r7, #19]
 800273a:	2b20      	cmp	r3, #32
 800273c:	d01a      	beq.n	8002774 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	685a      	ldr	r2, [r3, #4]
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800274c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800274e:	f7fe fe8d 	bl	800146c <HAL_GetTick>
 8002752:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002754:	e00e      	b.n	8002774 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002756:	f7fe fe89 	bl	800146c <HAL_GetTick>
 800275a:	4602      	mov	r2, r0
 800275c:	69fb      	ldr	r3, [r7, #28]
 800275e:	1ad3      	subs	r3, r2, r3
 8002760:	2b19      	cmp	r3, #25
 8002762:	d907      	bls.n	8002774 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002764:	6a3b      	ldr	r3, [r7, #32]
 8002766:	f043 0320 	orr.w	r3, r3, #32
 800276a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800276c:	2301      	movs	r3, #1
 800276e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8002772:	e006      	b.n	8002782 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	699b      	ldr	r3, [r3, #24]
 800277a:	f003 0320 	and.w	r3, r3, #32
 800277e:	2b20      	cmp	r3, #32
 8002780:	d1e9      	bne.n	8002756 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	699b      	ldr	r3, [r3, #24]
 8002788:	f003 0320 	and.w	r3, r3, #32
 800278c:	2b20      	cmp	r3, #32
 800278e:	d003      	beq.n	8002798 <I2C_IsErrorOccurred+0xe0>
 8002790:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002794:	2b00      	cmp	r3, #0
 8002796:	d0aa      	beq.n	80026ee <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002798:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800279c:	2b00      	cmp	r3, #0
 800279e:	d103      	bne.n	80027a8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	2220      	movs	r2, #32
 80027a6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80027a8:	6a3b      	ldr	r3, [r7, #32]
 80027aa:	f043 0304 	orr.w	r3, r3, #4
 80027ae:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80027b0:	2301      	movs	r3, #1
 80027b2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	699b      	ldr	r3, [r3, #24]
 80027bc:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80027be:	69bb      	ldr	r3, [r7, #24]
 80027c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d00b      	beq.n	80027e0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80027c8:	6a3b      	ldr	r3, [r7, #32]
 80027ca:	f043 0301 	orr.w	r3, r3, #1
 80027ce:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80027d8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80027e0:	69bb      	ldr	r3, [r7, #24]
 80027e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d00b      	beq.n	8002802 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80027ea:	6a3b      	ldr	r3, [r7, #32]
 80027ec:	f043 0308 	orr.w	r3, r3, #8
 80027f0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80027fa:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80027fc:	2301      	movs	r3, #1
 80027fe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002802:	69bb      	ldr	r3, [r7, #24]
 8002804:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002808:	2b00      	cmp	r3, #0
 800280a:	d00b      	beq.n	8002824 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800280c:	6a3b      	ldr	r3, [r7, #32]
 800280e:	f043 0302 	orr.w	r3, r3, #2
 8002812:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800281c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800281e:	2301      	movs	r3, #1
 8002820:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8002824:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002828:	2b00      	cmp	r3, #0
 800282a:	d01c      	beq.n	8002866 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800282c:	68f8      	ldr	r0, [r7, #12]
 800282e:	f7ff fe3b 	bl	80024a8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	6859      	ldr	r1, [r3, #4]
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681a      	ldr	r2, [r3, #0]
 800283c:	4b0d      	ldr	r3, [pc, #52]	@ (8002874 <I2C_IsErrorOccurred+0x1bc>)
 800283e:	400b      	ands	r3, r1
 8002840:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002846:	6a3b      	ldr	r3, [r7, #32]
 8002848:	431a      	orrs	r2, r3
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	2220      	movs	r2, #32
 8002852:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	2200      	movs	r2, #0
 800285a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	2200      	movs	r2, #0
 8002862:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8002866:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800286a:	4618      	mov	r0, r3
 800286c:	3728      	adds	r7, #40	@ 0x28
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}
 8002872:	bf00      	nop
 8002874:	fe00e800 	.word	0xfe00e800

08002878 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002878:	b480      	push	{r7}
 800287a:	b087      	sub	sp, #28
 800287c:	af00      	add	r7, sp, #0
 800287e:	60f8      	str	r0, [r7, #12]
 8002880:	607b      	str	r3, [r7, #4]
 8002882:	460b      	mov	r3, r1
 8002884:	817b      	strh	r3, [r7, #10]
 8002886:	4613      	mov	r3, r2
 8002888:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800288a:	897b      	ldrh	r3, [r7, #10]
 800288c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002890:	7a7b      	ldrb	r3, [r7, #9]
 8002892:	041b      	lsls	r3, r3, #16
 8002894:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002898:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800289e:	6a3b      	ldr	r3, [r7, #32]
 80028a0:	4313      	orrs	r3, r2
 80028a2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80028a6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	685a      	ldr	r2, [r3, #4]
 80028ae:	6a3b      	ldr	r3, [r7, #32]
 80028b0:	0d5b      	lsrs	r3, r3, #21
 80028b2:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80028b6:	4b08      	ldr	r3, [pc, #32]	@ (80028d8 <I2C_TransferConfig+0x60>)
 80028b8:	430b      	orrs	r3, r1
 80028ba:	43db      	mvns	r3, r3
 80028bc:	ea02 0103 	and.w	r1, r2, r3
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	697a      	ldr	r2, [r7, #20]
 80028c6:	430a      	orrs	r2, r1
 80028c8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80028ca:	bf00      	nop
 80028cc:	371c      	adds	r7, #28
 80028ce:	46bd      	mov	sp, r7
 80028d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d4:	4770      	bx	lr
 80028d6:	bf00      	nop
 80028d8:	03ff63ff 	.word	0x03ff63ff

080028dc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80028dc:	b480      	push	{r7}
 80028de:	b083      	sub	sp, #12
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
 80028e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80028ec:	b2db      	uxtb	r3, r3
 80028ee:	2b20      	cmp	r3, #32
 80028f0:	d138      	bne.n	8002964 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80028f8:	2b01      	cmp	r3, #1
 80028fa:	d101      	bne.n	8002900 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80028fc:	2302      	movs	r3, #2
 80028fe:	e032      	b.n	8002966 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2201      	movs	r2, #1
 8002904:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2224      	movs	r2, #36	@ 0x24
 800290c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	681a      	ldr	r2, [r3, #0]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f022 0201 	bic.w	r2, r2, #1
 800291e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	681a      	ldr	r2, [r3, #0]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800292e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	6819      	ldr	r1, [r3, #0]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	683a      	ldr	r2, [r7, #0]
 800293c:	430a      	orrs	r2, r1
 800293e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	681a      	ldr	r2, [r3, #0]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f042 0201 	orr.w	r2, r2, #1
 800294e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2220      	movs	r2, #32
 8002954:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2200      	movs	r2, #0
 800295c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002960:	2300      	movs	r3, #0
 8002962:	e000      	b.n	8002966 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002964:	2302      	movs	r3, #2
  }
}
 8002966:	4618      	mov	r0, r3
 8002968:	370c      	adds	r7, #12
 800296a:	46bd      	mov	sp, r7
 800296c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002970:	4770      	bx	lr

08002972 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002972:	b480      	push	{r7}
 8002974:	b085      	sub	sp, #20
 8002976:	af00      	add	r7, sp, #0
 8002978:	6078      	str	r0, [r7, #4]
 800297a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002982:	b2db      	uxtb	r3, r3
 8002984:	2b20      	cmp	r3, #32
 8002986:	d139      	bne.n	80029fc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800298e:	2b01      	cmp	r3, #1
 8002990:	d101      	bne.n	8002996 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002992:	2302      	movs	r3, #2
 8002994:	e033      	b.n	80029fe <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2201      	movs	r2, #1
 800299a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2224      	movs	r2, #36	@ 0x24
 80029a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	681a      	ldr	r2, [r3, #0]
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f022 0201 	bic.w	r2, r2, #1
 80029b4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80029c4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	021b      	lsls	r3, r3, #8
 80029ca:	68fa      	ldr	r2, [r7, #12]
 80029cc:	4313      	orrs	r3, r2
 80029ce:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	68fa      	ldr	r2, [r7, #12]
 80029d6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	681a      	ldr	r2, [r3, #0]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f042 0201 	orr.w	r2, r2, #1
 80029e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2220      	movs	r2, #32
 80029ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2200      	movs	r2, #0
 80029f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80029f8:	2300      	movs	r3, #0
 80029fa:	e000      	b.n	80029fe <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80029fc:	2302      	movs	r3, #2
  }
}
 80029fe:	4618      	mov	r0, r3
 8002a00:	3714      	adds	r7, #20
 8002a02:	46bd      	mov	sp, r7
 8002a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a08:	4770      	bx	lr
	...

08002a0c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b085      	sub	sp, #20
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d141      	bne.n	8002a9e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002a1a:	4b4b      	ldr	r3, [pc, #300]	@ (8002b48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002a22:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a26:	d131      	bne.n	8002a8c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002a28:	4b47      	ldr	r3, [pc, #284]	@ (8002b48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002a2e:	4a46      	ldr	r2, [pc, #280]	@ (8002b48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a30:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002a34:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002a38:	4b43      	ldr	r3, [pc, #268]	@ (8002b48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002a40:	4a41      	ldr	r2, [pc, #260]	@ (8002b48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a42:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002a46:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002a48:	4b40      	ldr	r3, [pc, #256]	@ (8002b4c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	2232      	movs	r2, #50	@ 0x32
 8002a4e:	fb02 f303 	mul.w	r3, r2, r3
 8002a52:	4a3f      	ldr	r2, [pc, #252]	@ (8002b50 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002a54:	fba2 2303 	umull	r2, r3, r2, r3
 8002a58:	0c9b      	lsrs	r3, r3, #18
 8002a5a:	3301      	adds	r3, #1
 8002a5c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002a5e:	e002      	b.n	8002a66 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	3b01      	subs	r3, #1
 8002a64:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002a66:	4b38      	ldr	r3, [pc, #224]	@ (8002b48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a68:	695b      	ldr	r3, [r3, #20]
 8002a6a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a6e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a72:	d102      	bne.n	8002a7a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d1f2      	bne.n	8002a60 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002a7a:	4b33      	ldr	r3, [pc, #204]	@ (8002b48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a7c:	695b      	ldr	r3, [r3, #20]
 8002a7e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a82:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a86:	d158      	bne.n	8002b3a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002a88:	2303      	movs	r3, #3
 8002a8a:	e057      	b.n	8002b3c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002a8c:	4b2e      	ldr	r3, [pc, #184]	@ (8002b48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002a92:	4a2d      	ldr	r2, [pc, #180]	@ (8002b48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a94:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002a98:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002a9c:	e04d      	b.n	8002b3a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002aa4:	d141      	bne.n	8002b2a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002aa6:	4b28      	ldr	r3, [pc, #160]	@ (8002b48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002aae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ab2:	d131      	bne.n	8002b18 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002ab4:	4b24      	ldr	r3, [pc, #144]	@ (8002b48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ab6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002aba:	4a23      	ldr	r2, [pc, #140]	@ (8002b48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002abc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ac0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002ac4:	4b20      	ldr	r3, [pc, #128]	@ (8002b48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002acc:	4a1e      	ldr	r2, [pc, #120]	@ (8002b48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ace:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002ad2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002ad4:	4b1d      	ldr	r3, [pc, #116]	@ (8002b4c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	2232      	movs	r2, #50	@ 0x32
 8002ada:	fb02 f303 	mul.w	r3, r2, r3
 8002ade:	4a1c      	ldr	r2, [pc, #112]	@ (8002b50 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002ae0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ae4:	0c9b      	lsrs	r3, r3, #18
 8002ae6:	3301      	adds	r3, #1
 8002ae8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002aea:	e002      	b.n	8002af2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	3b01      	subs	r3, #1
 8002af0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002af2:	4b15      	ldr	r3, [pc, #84]	@ (8002b48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002af4:	695b      	ldr	r3, [r3, #20]
 8002af6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002afa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002afe:	d102      	bne.n	8002b06 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d1f2      	bne.n	8002aec <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002b06:	4b10      	ldr	r3, [pc, #64]	@ (8002b48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b08:	695b      	ldr	r3, [r3, #20]
 8002b0a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b0e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b12:	d112      	bne.n	8002b3a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002b14:	2303      	movs	r3, #3
 8002b16:	e011      	b.n	8002b3c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002b18:	4b0b      	ldr	r3, [pc, #44]	@ (8002b48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002b1e:	4a0a      	ldr	r2, [pc, #40]	@ (8002b48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b20:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b24:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002b28:	e007      	b.n	8002b3a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002b2a:	4b07      	ldr	r3, [pc, #28]	@ (8002b48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002b32:	4a05      	ldr	r2, [pc, #20]	@ (8002b48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b34:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002b38:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002b3a:	2300      	movs	r3, #0
}
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	3714      	adds	r7, #20
 8002b40:	46bd      	mov	sp, r7
 8002b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b46:	4770      	bx	lr
 8002b48:	40007000 	.word	0x40007000
 8002b4c:	20000000 	.word	0x20000000
 8002b50:	431bde83 	.word	0x431bde83

08002b54 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002b54:	b480      	push	{r7}
 8002b56:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002b58:	4b05      	ldr	r3, [pc, #20]	@ (8002b70 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002b5a:	689b      	ldr	r3, [r3, #8]
 8002b5c:	4a04      	ldr	r2, [pc, #16]	@ (8002b70 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002b5e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002b62:	6093      	str	r3, [r2, #8]
}
 8002b64:	bf00      	nop
 8002b66:	46bd      	mov	sp, r7
 8002b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6c:	4770      	bx	lr
 8002b6e:	bf00      	nop
 8002b70:	40007000 	.word	0x40007000

08002b74 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b088      	sub	sp, #32
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d101      	bne.n	8002b86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b82:	2301      	movs	r3, #1
 8002b84:	e2fe      	b.n	8003184 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f003 0301 	and.w	r3, r3, #1
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d075      	beq.n	8002c7e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b92:	4b97      	ldr	r3, [pc, #604]	@ (8002df0 <HAL_RCC_OscConfig+0x27c>)
 8002b94:	689b      	ldr	r3, [r3, #8]
 8002b96:	f003 030c 	and.w	r3, r3, #12
 8002b9a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002b9c:	4b94      	ldr	r3, [pc, #592]	@ (8002df0 <HAL_RCC_OscConfig+0x27c>)
 8002b9e:	68db      	ldr	r3, [r3, #12]
 8002ba0:	f003 0303 	and.w	r3, r3, #3
 8002ba4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002ba6:	69bb      	ldr	r3, [r7, #24]
 8002ba8:	2b0c      	cmp	r3, #12
 8002baa:	d102      	bne.n	8002bb2 <HAL_RCC_OscConfig+0x3e>
 8002bac:	697b      	ldr	r3, [r7, #20]
 8002bae:	2b03      	cmp	r3, #3
 8002bb0:	d002      	beq.n	8002bb8 <HAL_RCC_OscConfig+0x44>
 8002bb2:	69bb      	ldr	r3, [r7, #24]
 8002bb4:	2b08      	cmp	r3, #8
 8002bb6:	d10b      	bne.n	8002bd0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bb8:	4b8d      	ldr	r3, [pc, #564]	@ (8002df0 <HAL_RCC_OscConfig+0x27c>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d05b      	beq.n	8002c7c <HAL_RCC_OscConfig+0x108>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d157      	bne.n	8002c7c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	e2d9      	b.n	8003184 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002bd8:	d106      	bne.n	8002be8 <HAL_RCC_OscConfig+0x74>
 8002bda:	4b85      	ldr	r3, [pc, #532]	@ (8002df0 <HAL_RCC_OscConfig+0x27c>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a84      	ldr	r2, [pc, #528]	@ (8002df0 <HAL_RCC_OscConfig+0x27c>)
 8002be0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002be4:	6013      	str	r3, [r2, #0]
 8002be6:	e01d      	b.n	8002c24 <HAL_RCC_OscConfig+0xb0>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002bf0:	d10c      	bne.n	8002c0c <HAL_RCC_OscConfig+0x98>
 8002bf2:	4b7f      	ldr	r3, [pc, #508]	@ (8002df0 <HAL_RCC_OscConfig+0x27c>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4a7e      	ldr	r2, [pc, #504]	@ (8002df0 <HAL_RCC_OscConfig+0x27c>)
 8002bf8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002bfc:	6013      	str	r3, [r2, #0]
 8002bfe:	4b7c      	ldr	r3, [pc, #496]	@ (8002df0 <HAL_RCC_OscConfig+0x27c>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a7b      	ldr	r2, [pc, #492]	@ (8002df0 <HAL_RCC_OscConfig+0x27c>)
 8002c04:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c08:	6013      	str	r3, [r2, #0]
 8002c0a:	e00b      	b.n	8002c24 <HAL_RCC_OscConfig+0xb0>
 8002c0c:	4b78      	ldr	r3, [pc, #480]	@ (8002df0 <HAL_RCC_OscConfig+0x27c>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a77      	ldr	r2, [pc, #476]	@ (8002df0 <HAL_RCC_OscConfig+0x27c>)
 8002c12:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c16:	6013      	str	r3, [r2, #0]
 8002c18:	4b75      	ldr	r3, [pc, #468]	@ (8002df0 <HAL_RCC_OscConfig+0x27c>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a74      	ldr	r2, [pc, #464]	@ (8002df0 <HAL_RCC_OscConfig+0x27c>)
 8002c1e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002c22:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d013      	beq.n	8002c54 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c2c:	f7fe fc1e 	bl	800146c <HAL_GetTick>
 8002c30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c32:	e008      	b.n	8002c46 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c34:	f7fe fc1a 	bl	800146c <HAL_GetTick>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	693b      	ldr	r3, [r7, #16]
 8002c3c:	1ad3      	subs	r3, r2, r3
 8002c3e:	2b64      	cmp	r3, #100	@ 0x64
 8002c40:	d901      	bls.n	8002c46 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002c42:	2303      	movs	r3, #3
 8002c44:	e29e      	b.n	8003184 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c46:	4b6a      	ldr	r3, [pc, #424]	@ (8002df0 <HAL_RCC_OscConfig+0x27c>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d0f0      	beq.n	8002c34 <HAL_RCC_OscConfig+0xc0>
 8002c52:	e014      	b.n	8002c7e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c54:	f7fe fc0a 	bl	800146c <HAL_GetTick>
 8002c58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002c5a:	e008      	b.n	8002c6e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c5c:	f7fe fc06 	bl	800146c <HAL_GetTick>
 8002c60:	4602      	mov	r2, r0
 8002c62:	693b      	ldr	r3, [r7, #16]
 8002c64:	1ad3      	subs	r3, r2, r3
 8002c66:	2b64      	cmp	r3, #100	@ 0x64
 8002c68:	d901      	bls.n	8002c6e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002c6a:	2303      	movs	r3, #3
 8002c6c:	e28a      	b.n	8003184 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002c6e:	4b60      	ldr	r3, [pc, #384]	@ (8002df0 <HAL_RCC_OscConfig+0x27c>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d1f0      	bne.n	8002c5c <HAL_RCC_OscConfig+0xe8>
 8002c7a:	e000      	b.n	8002c7e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f003 0302 	and.w	r3, r3, #2
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d075      	beq.n	8002d76 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c8a:	4b59      	ldr	r3, [pc, #356]	@ (8002df0 <HAL_RCC_OscConfig+0x27c>)
 8002c8c:	689b      	ldr	r3, [r3, #8]
 8002c8e:	f003 030c 	and.w	r3, r3, #12
 8002c92:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c94:	4b56      	ldr	r3, [pc, #344]	@ (8002df0 <HAL_RCC_OscConfig+0x27c>)
 8002c96:	68db      	ldr	r3, [r3, #12]
 8002c98:	f003 0303 	and.w	r3, r3, #3
 8002c9c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002c9e:	69bb      	ldr	r3, [r7, #24]
 8002ca0:	2b0c      	cmp	r3, #12
 8002ca2:	d102      	bne.n	8002caa <HAL_RCC_OscConfig+0x136>
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	2b02      	cmp	r3, #2
 8002ca8:	d002      	beq.n	8002cb0 <HAL_RCC_OscConfig+0x13c>
 8002caa:	69bb      	ldr	r3, [r7, #24]
 8002cac:	2b04      	cmp	r3, #4
 8002cae:	d11f      	bne.n	8002cf0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002cb0:	4b4f      	ldr	r3, [pc, #316]	@ (8002df0 <HAL_RCC_OscConfig+0x27c>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d005      	beq.n	8002cc8 <HAL_RCC_OscConfig+0x154>
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	68db      	ldr	r3, [r3, #12]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d101      	bne.n	8002cc8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	e25d      	b.n	8003184 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cc8:	4b49      	ldr	r3, [pc, #292]	@ (8002df0 <HAL_RCC_OscConfig+0x27c>)
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	691b      	ldr	r3, [r3, #16]
 8002cd4:	061b      	lsls	r3, r3, #24
 8002cd6:	4946      	ldr	r1, [pc, #280]	@ (8002df0 <HAL_RCC_OscConfig+0x27c>)
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002cdc:	4b45      	ldr	r3, [pc, #276]	@ (8002df4 <HAL_RCC_OscConfig+0x280>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	f7fe fb77 	bl	80013d4 <HAL_InitTick>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d043      	beq.n	8002d74 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002cec:	2301      	movs	r3, #1
 8002cee:	e249      	b.n	8003184 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	68db      	ldr	r3, [r3, #12]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d023      	beq.n	8002d40 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002cf8:	4b3d      	ldr	r3, [pc, #244]	@ (8002df0 <HAL_RCC_OscConfig+0x27c>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4a3c      	ldr	r2, [pc, #240]	@ (8002df0 <HAL_RCC_OscConfig+0x27c>)
 8002cfe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d02:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d04:	f7fe fbb2 	bl	800146c <HAL_GetTick>
 8002d08:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d0a:	e008      	b.n	8002d1e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d0c:	f7fe fbae 	bl	800146c <HAL_GetTick>
 8002d10:	4602      	mov	r2, r0
 8002d12:	693b      	ldr	r3, [r7, #16]
 8002d14:	1ad3      	subs	r3, r2, r3
 8002d16:	2b02      	cmp	r3, #2
 8002d18:	d901      	bls.n	8002d1e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002d1a:	2303      	movs	r3, #3
 8002d1c:	e232      	b.n	8003184 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d1e:	4b34      	ldr	r3, [pc, #208]	@ (8002df0 <HAL_RCC_OscConfig+0x27c>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d0f0      	beq.n	8002d0c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d2a:	4b31      	ldr	r3, [pc, #196]	@ (8002df0 <HAL_RCC_OscConfig+0x27c>)
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	691b      	ldr	r3, [r3, #16]
 8002d36:	061b      	lsls	r3, r3, #24
 8002d38:	492d      	ldr	r1, [pc, #180]	@ (8002df0 <HAL_RCC_OscConfig+0x27c>)
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	604b      	str	r3, [r1, #4]
 8002d3e:	e01a      	b.n	8002d76 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d40:	4b2b      	ldr	r3, [pc, #172]	@ (8002df0 <HAL_RCC_OscConfig+0x27c>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a2a      	ldr	r2, [pc, #168]	@ (8002df0 <HAL_RCC_OscConfig+0x27c>)
 8002d46:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002d4a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d4c:	f7fe fb8e 	bl	800146c <HAL_GetTick>
 8002d50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002d52:	e008      	b.n	8002d66 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d54:	f7fe fb8a 	bl	800146c <HAL_GetTick>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	693b      	ldr	r3, [r7, #16]
 8002d5c:	1ad3      	subs	r3, r2, r3
 8002d5e:	2b02      	cmp	r3, #2
 8002d60:	d901      	bls.n	8002d66 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002d62:	2303      	movs	r3, #3
 8002d64:	e20e      	b.n	8003184 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002d66:	4b22      	ldr	r3, [pc, #136]	@ (8002df0 <HAL_RCC_OscConfig+0x27c>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d1f0      	bne.n	8002d54 <HAL_RCC_OscConfig+0x1e0>
 8002d72:	e000      	b.n	8002d76 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d74:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f003 0308 	and.w	r3, r3, #8
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d041      	beq.n	8002e06 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	695b      	ldr	r3, [r3, #20]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d01c      	beq.n	8002dc4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d8a:	4b19      	ldr	r3, [pc, #100]	@ (8002df0 <HAL_RCC_OscConfig+0x27c>)
 8002d8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002d90:	4a17      	ldr	r2, [pc, #92]	@ (8002df0 <HAL_RCC_OscConfig+0x27c>)
 8002d92:	f043 0301 	orr.w	r3, r3, #1
 8002d96:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d9a:	f7fe fb67 	bl	800146c <HAL_GetTick>
 8002d9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002da0:	e008      	b.n	8002db4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002da2:	f7fe fb63 	bl	800146c <HAL_GetTick>
 8002da6:	4602      	mov	r2, r0
 8002da8:	693b      	ldr	r3, [r7, #16]
 8002daa:	1ad3      	subs	r3, r2, r3
 8002dac:	2b02      	cmp	r3, #2
 8002dae:	d901      	bls.n	8002db4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002db0:	2303      	movs	r3, #3
 8002db2:	e1e7      	b.n	8003184 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002db4:	4b0e      	ldr	r3, [pc, #56]	@ (8002df0 <HAL_RCC_OscConfig+0x27c>)
 8002db6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002dba:	f003 0302 	and.w	r3, r3, #2
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d0ef      	beq.n	8002da2 <HAL_RCC_OscConfig+0x22e>
 8002dc2:	e020      	b.n	8002e06 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002dc4:	4b0a      	ldr	r3, [pc, #40]	@ (8002df0 <HAL_RCC_OscConfig+0x27c>)
 8002dc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002dca:	4a09      	ldr	r2, [pc, #36]	@ (8002df0 <HAL_RCC_OscConfig+0x27c>)
 8002dcc:	f023 0301 	bic.w	r3, r3, #1
 8002dd0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dd4:	f7fe fb4a 	bl	800146c <HAL_GetTick>
 8002dd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002dda:	e00d      	b.n	8002df8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ddc:	f7fe fb46 	bl	800146c <HAL_GetTick>
 8002de0:	4602      	mov	r2, r0
 8002de2:	693b      	ldr	r3, [r7, #16]
 8002de4:	1ad3      	subs	r3, r2, r3
 8002de6:	2b02      	cmp	r3, #2
 8002de8:	d906      	bls.n	8002df8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002dea:	2303      	movs	r3, #3
 8002dec:	e1ca      	b.n	8003184 <HAL_RCC_OscConfig+0x610>
 8002dee:	bf00      	nop
 8002df0:	40021000 	.word	0x40021000
 8002df4:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002df8:	4b8c      	ldr	r3, [pc, #560]	@ (800302c <HAL_RCC_OscConfig+0x4b8>)
 8002dfa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002dfe:	f003 0302 	and.w	r3, r3, #2
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d1ea      	bne.n	8002ddc <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f003 0304 	and.w	r3, r3, #4
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	f000 80a6 	beq.w	8002f60 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e14:	2300      	movs	r3, #0
 8002e16:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002e18:	4b84      	ldr	r3, [pc, #528]	@ (800302c <HAL_RCC_OscConfig+0x4b8>)
 8002e1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e1c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d101      	bne.n	8002e28 <HAL_RCC_OscConfig+0x2b4>
 8002e24:	2301      	movs	r3, #1
 8002e26:	e000      	b.n	8002e2a <HAL_RCC_OscConfig+0x2b6>
 8002e28:	2300      	movs	r3, #0
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d00d      	beq.n	8002e4a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e2e:	4b7f      	ldr	r3, [pc, #508]	@ (800302c <HAL_RCC_OscConfig+0x4b8>)
 8002e30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e32:	4a7e      	ldr	r2, [pc, #504]	@ (800302c <HAL_RCC_OscConfig+0x4b8>)
 8002e34:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e38:	6593      	str	r3, [r2, #88]	@ 0x58
 8002e3a:	4b7c      	ldr	r3, [pc, #496]	@ (800302c <HAL_RCC_OscConfig+0x4b8>)
 8002e3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e42:	60fb      	str	r3, [r7, #12]
 8002e44:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002e46:	2301      	movs	r3, #1
 8002e48:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e4a:	4b79      	ldr	r3, [pc, #484]	@ (8003030 <HAL_RCC_OscConfig+0x4bc>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d118      	bne.n	8002e88 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e56:	4b76      	ldr	r3, [pc, #472]	@ (8003030 <HAL_RCC_OscConfig+0x4bc>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4a75      	ldr	r2, [pc, #468]	@ (8003030 <HAL_RCC_OscConfig+0x4bc>)
 8002e5c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e60:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e62:	f7fe fb03 	bl	800146c <HAL_GetTick>
 8002e66:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e68:	e008      	b.n	8002e7c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e6a:	f7fe faff 	bl	800146c <HAL_GetTick>
 8002e6e:	4602      	mov	r2, r0
 8002e70:	693b      	ldr	r3, [r7, #16]
 8002e72:	1ad3      	subs	r3, r2, r3
 8002e74:	2b02      	cmp	r3, #2
 8002e76:	d901      	bls.n	8002e7c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002e78:	2303      	movs	r3, #3
 8002e7a:	e183      	b.n	8003184 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e7c:	4b6c      	ldr	r3, [pc, #432]	@ (8003030 <HAL_RCC_OscConfig+0x4bc>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d0f0      	beq.n	8002e6a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	689b      	ldr	r3, [r3, #8]
 8002e8c:	2b01      	cmp	r3, #1
 8002e8e:	d108      	bne.n	8002ea2 <HAL_RCC_OscConfig+0x32e>
 8002e90:	4b66      	ldr	r3, [pc, #408]	@ (800302c <HAL_RCC_OscConfig+0x4b8>)
 8002e92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e96:	4a65      	ldr	r2, [pc, #404]	@ (800302c <HAL_RCC_OscConfig+0x4b8>)
 8002e98:	f043 0301 	orr.w	r3, r3, #1
 8002e9c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002ea0:	e024      	b.n	8002eec <HAL_RCC_OscConfig+0x378>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	689b      	ldr	r3, [r3, #8]
 8002ea6:	2b05      	cmp	r3, #5
 8002ea8:	d110      	bne.n	8002ecc <HAL_RCC_OscConfig+0x358>
 8002eaa:	4b60      	ldr	r3, [pc, #384]	@ (800302c <HAL_RCC_OscConfig+0x4b8>)
 8002eac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002eb0:	4a5e      	ldr	r2, [pc, #376]	@ (800302c <HAL_RCC_OscConfig+0x4b8>)
 8002eb2:	f043 0304 	orr.w	r3, r3, #4
 8002eb6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002eba:	4b5c      	ldr	r3, [pc, #368]	@ (800302c <HAL_RCC_OscConfig+0x4b8>)
 8002ebc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ec0:	4a5a      	ldr	r2, [pc, #360]	@ (800302c <HAL_RCC_OscConfig+0x4b8>)
 8002ec2:	f043 0301 	orr.w	r3, r3, #1
 8002ec6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002eca:	e00f      	b.n	8002eec <HAL_RCC_OscConfig+0x378>
 8002ecc:	4b57      	ldr	r3, [pc, #348]	@ (800302c <HAL_RCC_OscConfig+0x4b8>)
 8002ece:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ed2:	4a56      	ldr	r2, [pc, #344]	@ (800302c <HAL_RCC_OscConfig+0x4b8>)
 8002ed4:	f023 0301 	bic.w	r3, r3, #1
 8002ed8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002edc:	4b53      	ldr	r3, [pc, #332]	@ (800302c <HAL_RCC_OscConfig+0x4b8>)
 8002ede:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ee2:	4a52      	ldr	r2, [pc, #328]	@ (800302c <HAL_RCC_OscConfig+0x4b8>)
 8002ee4:	f023 0304 	bic.w	r3, r3, #4
 8002ee8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	689b      	ldr	r3, [r3, #8]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d016      	beq.n	8002f22 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ef4:	f7fe faba 	bl	800146c <HAL_GetTick>
 8002ef8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002efa:	e00a      	b.n	8002f12 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002efc:	f7fe fab6 	bl	800146c <HAL_GetTick>
 8002f00:	4602      	mov	r2, r0
 8002f02:	693b      	ldr	r3, [r7, #16]
 8002f04:	1ad3      	subs	r3, r2, r3
 8002f06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d901      	bls.n	8002f12 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002f0e:	2303      	movs	r3, #3
 8002f10:	e138      	b.n	8003184 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f12:	4b46      	ldr	r3, [pc, #280]	@ (800302c <HAL_RCC_OscConfig+0x4b8>)
 8002f14:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f18:	f003 0302 	and.w	r3, r3, #2
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d0ed      	beq.n	8002efc <HAL_RCC_OscConfig+0x388>
 8002f20:	e015      	b.n	8002f4e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f22:	f7fe faa3 	bl	800146c <HAL_GetTick>
 8002f26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f28:	e00a      	b.n	8002f40 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f2a:	f7fe fa9f 	bl	800146c <HAL_GetTick>
 8002f2e:	4602      	mov	r2, r0
 8002f30:	693b      	ldr	r3, [r7, #16]
 8002f32:	1ad3      	subs	r3, r2, r3
 8002f34:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d901      	bls.n	8002f40 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002f3c:	2303      	movs	r3, #3
 8002f3e:	e121      	b.n	8003184 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f40:	4b3a      	ldr	r3, [pc, #232]	@ (800302c <HAL_RCC_OscConfig+0x4b8>)
 8002f42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f46:	f003 0302 	and.w	r3, r3, #2
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d1ed      	bne.n	8002f2a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002f4e:	7ffb      	ldrb	r3, [r7, #31]
 8002f50:	2b01      	cmp	r3, #1
 8002f52:	d105      	bne.n	8002f60 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f54:	4b35      	ldr	r3, [pc, #212]	@ (800302c <HAL_RCC_OscConfig+0x4b8>)
 8002f56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f58:	4a34      	ldr	r2, [pc, #208]	@ (800302c <HAL_RCC_OscConfig+0x4b8>)
 8002f5a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002f5e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f003 0320 	and.w	r3, r3, #32
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d03c      	beq.n	8002fe6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	699b      	ldr	r3, [r3, #24]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d01c      	beq.n	8002fae <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002f74:	4b2d      	ldr	r3, [pc, #180]	@ (800302c <HAL_RCC_OscConfig+0x4b8>)
 8002f76:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002f7a:	4a2c      	ldr	r2, [pc, #176]	@ (800302c <HAL_RCC_OscConfig+0x4b8>)
 8002f7c:	f043 0301 	orr.w	r3, r3, #1
 8002f80:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f84:	f7fe fa72 	bl	800146c <HAL_GetTick>
 8002f88:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002f8a:	e008      	b.n	8002f9e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002f8c:	f7fe fa6e 	bl	800146c <HAL_GetTick>
 8002f90:	4602      	mov	r2, r0
 8002f92:	693b      	ldr	r3, [r7, #16]
 8002f94:	1ad3      	subs	r3, r2, r3
 8002f96:	2b02      	cmp	r3, #2
 8002f98:	d901      	bls.n	8002f9e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002f9a:	2303      	movs	r3, #3
 8002f9c:	e0f2      	b.n	8003184 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002f9e:	4b23      	ldr	r3, [pc, #140]	@ (800302c <HAL_RCC_OscConfig+0x4b8>)
 8002fa0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002fa4:	f003 0302 	and.w	r3, r3, #2
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d0ef      	beq.n	8002f8c <HAL_RCC_OscConfig+0x418>
 8002fac:	e01b      	b.n	8002fe6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002fae:	4b1f      	ldr	r3, [pc, #124]	@ (800302c <HAL_RCC_OscConfig+0x4b8>)
 8002fb0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002fb4:	4a1d      	ldr	r2, [pc, #116]	@ (800302c <HAL_RCC_OscConfig+0x4b8>)
 8002fb6:	f023 0301 	bic.w	r3, r3, #1
 8002fba:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fbe:	f7fe fa55 	bl	800146c <HAL_GetTick>
 8002fc2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002fc4:	e008      	b.n	8002fd8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002fc6:	f7fe fa51 	bl	800146c <HAL_GetTick>
 8002fca:	4602      	mov	r2, r0
 8002fcc:	693b      	ldr	r3, [r7, #16]
 8002fce:	1ad3      	subs	r3, r2, r3
 8002fd0:	2b02      	cmp	r3, #2
 8002fd2:	d901      	bls.n	8002fd8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002fd4:	2303      	movs	r3, #3
 8002fd6:	e0d5      	b.n	8003184 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002fd8:	4b14      	ldr	r3, [pc, #80]	@ (800302c <HAL_RCC_OscConfig+0x4b8>)
 8002fda:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002fde:	f003 0302 	and.w	r3, r3, #2
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d1ef      	bne.n	8002fc6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	69db      	ldr	r3, [r3, #28]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	f000 80c9 	beq.w	8003182 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002ff0:	4b0e      	ldr	r3, [pc, #56]	@ (800302c <HAL_RCC_OscConfig+0x4b8>)
 8002ff2:	689b      	ldr	r3, [r3, #8]
 8002ff4:	f003 030c 	and.w	r3, r3, #12
 8002ff8:	2b0c      	cmp	r3, #12
 8002ffa:	f000 8083 	beq.w	8003104 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	69db      	ldr	r3, [r3, #28]
 8003002:	2b02      	cmp	r3, #2
 8003004:	d15e      	bne.n	80030c4 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003006:	4b09      	ldr	r3, [pc, #36]	@ (800302c <HAL_RCC_OscConfig+0x4b8>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4a08      	ldr	r2, [pc, #32]	@ (800302c <HAL_RCC_OscConfig+0x4b8>)
 800300c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003010:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003012:	f7fe fa2b 	bl	800146c <HAL_GetTick>
 8003016:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003018:	e00c      	b.n	8003034 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800301a:	f7fe fa27 	bl	800146c <HAL_GetTick>
 800301e:	4602      	mov	r2, r0
 8003020:	693b      	ldr	r3, [r7, #16]
 8003022:	1ad3      	subs	r3, r2, r3
 8003024:	2b02      	cmp	r3, #2
 8003026:	d905      	bls.n	8003034 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003028:	2303      	movs	r3, #3
 800302a:	e0ab      	b.n	8003184 <HAL_RCC_OscConfig+0x610>
 800302c:	40021000 	.word	0x40021000
 8003030:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003034:	4b55      	ldr	r3, [pc, #340]	@ (800318c <HAL_RCC_OscConfig+0x618>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800303c:	2b00      	cmp	r3, #0
 800303e:	d1ec      	bne.n	800301a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003040:	4b52      	ldr	r3, [pc, #328]	@ (800318c <HAL_RCC_OscConfig+0x618>)
 8003042:	68da      	ldr	r2, [r3, #12]
 8003044:	4b52      	ldr	r3, [pc, #328]	@ (8003190 <HAL_RCC_OscConfig+0x61c>)
 8003046:	4013      	ands	r3, r2
 8003048:	687a      	ldr	r2, [r7, #4]
 800304a:	6a11      	ldr	r1, [r2, #32]
 800304c:	687a      	ldr	r2, [r7, #4]
 800304e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003050:	3a01      	subs	r2, #1
 8003052:	0112      	lsls	r2, r2, #4
 8003054:	4311      	orrs	r1, r2
 8003056:	687a      	ldr	r2, [r7, #4]
 8003058:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800305a:	0212      	lsls	r2, r2, #8
 800305c:	4311      	orrs	r1, r2
 800305e:	687a      	ldr	r2, [r7, #4]
 8003060:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003062:	0852      	lsrs	r2, r2, #1
 8003064:	3a01      	subs	r2, #1
 8003066:	0552      	lsls	r2, r2, #21
 8003068:	4311      	orrs	r1, r2
 800306a:	687a      	ldr	r2, [r7, #4]
 800306c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800306e:	0852      	lsrs	r2, r2, #1
 8003070:	3a01      	subs	r2, #1
 8003072:	0652      	lsls	r2, r2, #25
 8003074:	4311      	orrs	r1, r2
 8003076:	687a      	ldr	r2, [r7, #4]
 8003078:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800307a:	06d2      	lsls	r2, r2, #27
 800307c:	430a      	orrs	r2, r1
 800307e:	4943      	ldr	r1, [pc, #268]	@ (800318c <HAL_RCC_OscConfig+0x618>)
 8003080:	4313      	orrs	r3, r2
 8003082:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003084:	4b41      	ldr	r3, [pc, #260]	@ (800318c <HAL_RCC_OscConfig+0x618>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a40      	ldr	r2, [pc, #256]	@ (800318c <HAL_RCC_OscConfig+0x618>)
 800308a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800308e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003090:	4b3e      	ldr	r3, [pc, #248]	@ (800318c <HAL_RCC_OscConfig+0x618>)
 8003092:	68db      	ldr	r3, [r3, #12]
 8003094:	4a3d      	ldr	r2, [pc, #244]	@ (800318c <HAL_RCC_OscConfig+0x618>)
 8003096:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800309a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800309c:	f7fe f9e6 	bl	800146c <HAL_GetTick>
 80030a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030a2:	e008      	b.n	80030b6 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030a4:	f7fe f9e2 	bl	800146c <HAL_GetTick>
 80030a8:	4602      	mov	r2, r0
 80030aa:	693b      	ldr	r3, [r7, #16]
 80030ac:	1ad3      	subs	r3, r2, r3
 80030ae:	2b02      	cmp	r3, #2
 80030b0:	d901      	bls.n	80030b6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80030b2:	2303      	movs	r3, #3
 80030b4:	e066      	b.n	8003184 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030b6:	4b35      	ldr	r3, [pc, #212]	@ (800318c <HAL_RCC_OscConfig+0x618>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d0f0      	beq.n	80030a4 <HAL_RCC_OscConfig+0x530>
 80030c2:	e05e      	b.n	8003182 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030c4:	4b31      	ldr	r3, [pc, #196]	@ (800318c <HAL_RCC_OscConfig+0x618>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a30      	ldr	r2, [pc, #192]	@ (800318c <HAL_RCC_OscConfig+0x618>)
 80030ca:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80030ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030d0:	f7fe f9cc 	bl	800146c <HAL_GetTick>
 80030d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030d6:	e008      	b.n	80030ea <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030d8:	f7fe f9c8 	bl	800146c <HAL_GetTick>
 80030dc:	4602      	mov	r2, r0
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	1ad3      	subs	r3, r2, r3
 80030e2:	2b02      	cmp	r3, #2
 80030e4:	d901      	bls.n	80030ea <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80030e6:	2303      	movs	r3, #3
 80030e8:	e04c      	b.n	8003184 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030ea:	4b28      	ldr	r3, [pc, #160]	@ (800318c <HAL_RCC_OscConfig+0x618>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d1f0      	bne.n	80030d8 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80030f6:	4b25      	ldr	r3, [pc, #148]	@ (800318c <HAL_RCC_OscConfig+0x618>)
 80030f8:	68da      	ldr	r2, [r3, #12]
 80030fa:	4924      	ldr	r1, [pc, #144]	@ (800318c <HAL_RCC_OscConfig+0x618>)
 80030fc:	4b25      	ldr	r3, [pc, #148]	@ (8003194 <HAL_RCC_OscConfig+0x620>)
 80030fe:	4013      	ands	r3, r2
 8003100:	60cb      	str	r3, [r1, #12]
 8003102:	e03e      	b.n	8003182 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	69db      	ldr	r3, [r3, #28]
 8003108:	2b01      	cmp	r3, #1
 800310a:	d101      	bne.n	8003110 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800310c:	2301      	movs	r3, #1
 800310e:	e039      	b.n	8003184 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003110:	4b1e      	ldr	r3, [pc, #120]	@ (800318c <HAL_RCC_OscConfig+0x618>)
 8003112:	68db      	ldr	r3, [r3, #12]
 8003114:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003116:	697b      	ldr	r3, [r7, #20]
 8003118:	f003 0203 	and.w	r2, r3, #3
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6a1b      	ldr	r3, [r3, #32]
 8003120:	429a      	cmp	r2, r3
 8003122:	d12c      	bne.n	800317e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003124:	697b      	ldr	r3, [r7, #20]
 8003126:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800312e:	3b01      	subs	r3, #1
 8003130:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003132:	429a      	cmp	r2, r3
 8003134:	d123      	bne.n	800317e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003140:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003142:	429a      	cmp	r2, r3
 8003144:	d11b      	bne.n	800317e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003150:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003152:	429a      	cmp	r2, r3
 8003154:	d113      	bne.n	800317e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003156:	697b      	ldr	r3, [r7, #20]
 8003158:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003160:	085b      	lsrs	r3, r3, #1
 8003162:	3b01      	subs	r3, #1
 8003164:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003166:	429a      	cmp	r2, r3
 8003168:	d109      	bne.n	800317e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800316a:	697b      	ldr	r3, [r7, #20]
 800316c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003174:	085b      	lsrs	r3, r3, #1
 8003176:	3b01      	subs	r3, #1
 8003178:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800317a:	429a      	cmp	r2, r3
 800317c:	d001      	beq.n	8003182 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800317e:	2301      	movs	r3, #1
 8003180:	e000      	b.n	8003184 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8003182:	2300      	movs	r3, #0
}
 8003184:	4618      	mov	r0, r3
 8003186:	3720      	adds	r7, #32
 8003188:	46bd      	mov	sp, r7
 800318a:	bd80      	pop	{r7, pc}
 800318c:	40021000 	.word	0x40021000
 8003190:	019f800c 	.word	0x019f800c
 8003194:	feeefffc 	.word	0xfeeefffc

08003198 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b086      	sub	sp, #24
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
 80031a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80031a2:	2300      	movs	r3, #0
 80031a4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d101      	bne.n	80031b0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80031ac:	2301      	movs	r3, #1
 80031ae:	e11e      	b.n	80033ee <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80031b0:	4b91      	ldr	r3, [pc, #580]	@ (80033f8 <HAL_RCC_ClockConfig+0x260>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f003 030f 	and.w	r3, r3, #15
 80031b8:	683a      	ldr	r2, [r7, #0]
 80031ba:	429a      	cmp	r2, r3
 80031bc:	d910      	bls.n	80031e0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031be:	4b8e      	ldr	r3, [pc, #568]	@ (80033f8 <HAL_RCC_ClockConfig+0x260>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f023 020f 	bic.w	r2, r3, #15
 80031c6:	498c      	ldr	r1, [pc, #560]	@ (80033f8 <HAL_RCC_ClockConfig+0x260>)
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	4313      	orrs	r3, r2
 80031cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031ce:	4b8a      	ldr	r3, [pc, #552]	@ (80033f8 <HAL_RCC_ClockConfig+0x260>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f003 030f 	and.w	r3, r3, #15
 80031d6:	683a      	ldr	r2, [r7, #0]
 80031d8:	429a      	cmp	r2, r3
 80031da:	d001      	beq.n	80031e0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80031dc:	2301      	movs	r3, #1
 80031de:	e106      	b.n	80033ee <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f003 0301 	and.w	r3, r3, #1
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d073      	beq.n	80032d4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	2b03      	cmp	r3, #3
 80031f2:	d129      	bne.n	8003248 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031f4:	4b81      	ldr	r3, [pc, #516]	@ (80033fc <HAL_RCC_ClockConfig+0x264>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d101      	bne.n	8003204 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003200:	2301      	movs	r3, #1
 8003202:	e0f4      	b.n	80033ee <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003204:	f000 f99e 	bl	8003544 <RCC_GetSysClockFreqFromPLLSource>
 8003208:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800320a:	693b      	ldr	r3, [r7, #16]
 800320c:	4a7c      	ldr	r2, [pc, #496]	@ (8003400 <HAL_RCC_ClockConfig+0x268>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d93f      	bls.n	8003292 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003212:	4b7a      	ldr	r3, [pc, #488]	@ (80033fc <HAL_RCC_ClockConfig+0x264>)
 8003214:	689b      	ldr	r3, [r3, #8]
 8003216:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800321a:	2b00      	cmp	r3, #0
 800321c:	d009      	beq.n	8003232 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003226:	2b00      	cmp	r3, #0
 8003228:	d033      	beq.n	8003292 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800322e:	2b00      	cmp	r3, #0
 8003230:	d12f      	bne.n	8003292 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003232:	4b72      	ldr	r3, [pc, #456]	@ (80033fc <HAL_RCC_ClockConfig+0x264>)
 8003234:	689b      	ldr	r3, [r3, #8]
 8003236:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800323a:	4a70      	ldr	r2, [pc, #448]	@ (80033fc <HAL_RCC_ClockConfig+0x264>)
 800323c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003240:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003242:	2380      	movs	r3, #128	@ 0x80
 8003244:	617b      	str	r3, [r7, #20]
 8003246:	e024      	b.n	8003292 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	2b02      	cmp	r3, #2
 800324e:	d107      	bne.n	8003260 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003250:	4b6a      	ldr	r3, [pc, #424]	@ (80033fc <HAL_RCC_ClockConfig+0x264>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003258:	2b00      	cmp	r3, #0
 800325a:	d109      	bne.n	8003270 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800325c:	2301      	movs	r3, #1
 800325e:	e0c6      	b.n	80033ee <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003260:	4b66      	ldr	r3, [pc, #408]	@ (80033fc <HAL_RCC_ClockConfig+0x264>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003268:	2b00      	cmp	r3, #0
 800326a:	d101      	bne.n	8003270 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800326c:	2301      	movs	r3, #1
 800326e:	e0be      	b.n	80033ee <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003270:	f000 f8ce 	bl	8003410 <HAL_RCC_GetSysClockFreq>
 8003274:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003276:	693b      	ldr	r3, [r7, #16]
 8003278:	4a61      	ldr	r2, [pc, #388]	@ (8003400 <HAL_RCC_ClockConfig+0x268>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d909      	bls.n	8003292 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800327e:	4b5f      	ldr	r3, [pc, #380]	@ (80033fc <HAL_RCC_ClockConfig+0x264>)
 8003280:	689b      	ldr	r3, [r3, #8]
 8003282:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003286:	4a5d      	ldr	r2, [pc, #372]	@ (80033fc <HAL_RCC_ClockConfig+0x264>)
 8003288:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800328c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800328e:	2380      	movs	r3, #128	@ 0x80
 8003290:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003292:	4b5a      	ldr	r3, [pc, #360]	@ (80033fc <HAL_RCC_ClockConfig+0x264>)
 8003294:	689b      	ldr	r3, [r3, #8]
 8003296:	f023 0203 	bic.w	r2, r3, #3
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	4957      	ldr	r1, [pc, #348]	@ (80033fc <HAL_RCC_ClockConfig+0x264>)
 80032a0:	4313      	orrs	r3, r2
 80032a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032a4:	f7fe f8e2 	bl	800146c <HAL_GetTick>
 80032a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032aa:	e00a      	b.n	80032c2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032ac:	f7fe f8de 	bl	800146c <HAL_GetTick>
 80032b0:	4602      	mov	r2, r0
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	1ad3      	subs	r3, r2, r3
 80032b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d901      	bls.n	80032c2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80032be:	2303      	movs	r3, #3
 80032c0:	e095      	b.n	80033ee <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032c2:	4b4e      	ldr	r3, [pc, #312]	@ (80033fc <HAL_RCC_ClockConfig+0x264>)
 80032c4:	689b      	ldr	r3, [r3, #8]
 80032c6:	f003 020c 	and.w	r2, r3, #12
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	009b      	lsls	r3, r3, #2
 80032d0:	429a      	cmp	r2, r3
 80032d2:	d1eb      	bne.n	80032ac <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f003 0302 	and.w	r3, r3, #2
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d023      	beq.n	8003328 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f003 0304 	and.w	r3, r3, #4
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d005      	beq.n	80032f8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80032ec:	4b43      	ldr	r3, [pc, #268]	@ (80033fc <HAL_RCC_ClockConfig+0x264>)
 80032ee:	689b      	ldr	r3, [r3, #8]
 80032f0:	4a42      	ldr	r2, [pc, #264]	@ (80033fc <HAL_RCC_ClockConfig+0x264>)
 80032f2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80032f6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f003 0308 	and.w	r3, r3, #8
 8003300:	2b00      	cmp	r3, #0
 8003302:	d007      	beq.n	8003314 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003304:	4b3d      	ldr	r3, [pc, #244]	@ (80033fc <HAL_RCC_ClockConfig+0x264>)
 8003306:	689b      	ldr	r3, [r3, #8]
 8003308:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800330c:	4a3b      	ldr	r2, [pc, #236]	@ (80033fc <HAL_RCC_ClockConfig+0x264>)
 800330e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003312:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003314:	4b39      	ldr	r3, [pc, #228]	@ (80033fc <HAL_RCC_ClockConfig+0x264>)
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	689b      	ldr	r3, [r3, #8]
 8003320:	4936      	ldr	r1, [pc, #216]	@ (80033fc <HAL_RCC_ClockConfig+0x264>)
 8003322:	4313      	orrs	r3, r2
 8003324:	608b      	str	r3, [r1, #8]
 8003326:	e008      	b.n	800333a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003328:	697b      	ldr	r3, [r7, #20]
 800332a:	2b80      	cmp	r3, #128	@ 0x80
 800332c:	d105      	bne.n	800333a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800332e:	4b33      	ldr	r3, [pc, #204]	@ (80033fc <HAL_RCC_ClockConfig+0x264>)
 8003330:	689b      	ldr	r3, [r3, #8]
 8003332:	4a32      	ldr	r2, [pc, #200]	@ (80033fc <HAL_RCC_ClockConfig+0x264>)
 8003334:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003338:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800333a:	4b2f      	ldr	r3, [pc, #188]	@ (80033f8 <HAL_RCC_ClockConfig+0x260>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f003 030f 	and.w	r3, r3, #15
 8003342:	683a      	ldr	r2, [r7, #0]
 8003344:	429a      	cmp	r2, r3
 8003346:	d21d      	bcs.n	8003384 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003348:	4b2b      	ldr	r3, [pc, #172]	@ (80033f8 <HAL_RCC_ClockConfig+0x260>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f023 020f 	bic.w	r2, r3, #15
 8003350:	4929      	ldr	r1, [pc, #164]	@ (80033f8 <HAL_RCC_ClockConfig+0x260>)
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	4313      	orrs	r3, r2
 8003356:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003358:	f7fe f888 	bl	800146c <HAL_GetTick>
 800335c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800335e:	e00a      	b.n	8003376 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003360:	f7fe f884 	bl	800146c <HAL_GetTick>
 8003364:	4602      	mov	r2, r0
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	1ad3      	subs	r3, r2, r3
 800336a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800336e:	4293      	cmp	r3, r2
 8003370:	d901      	bls.n	8003376 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003372:	2303      	movs	r3, #3
 8003374:	e03b      	b.n	80033ee <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003376:	4b20      	ldr	r3, [pc, #128]	@ (80033f8 <HAL_RCC_ClockConfig+0x260>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f003 030f 	and.w	r3, r3, #15
 800337e:	683a      	ldr	r2, [r7, #0]
 8003380:	429a      	cmp	r2, r3
 8003382:	d1ed      	bne.n	8003360 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f003 0304 	and.w	r3, r3, #4
 800338c:	2b00      	cmp	r3, #0
 800338e:	d008      	beq.n	80033a2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003390:	4b1a      	ldr	r3, [pc, #104]	@ (80033fc <HAL_RCC_ClockConfig+0x264>)
 8003392:	689b      	ldr	r3, [r3, #8]
 8003394:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	68db      	ldr	r3, [r3, #12]
 800339c:	4917      	ldr	r1, [pc, #92]	@ (80033fc <HAL_RCC_ClockConfig+0x264>)
 800339e:	4313      	orrs	r3, r2
 80033a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f003 0308 	and.w	r3, r3, #8
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d009      	beq.n	80033c2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80033ae:	4b13      	ldr	r3, [pc, #76]	@ (80033fc <HAL_RCC_ClockConfig+0x264>)
 80033b0:	689b      	ldr	r3, [r3, #8]
 80033b2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	691b      	ldr	r3, [r3, #16]
 80033ba:	00db      	lsls	r3, r3, #3
 80033bc:	490f      	ldr	r1, [pc, #60]	@ (80033fc <HAL_RCC_ClockConfig+0x264>)
 80033be:	4313      	orrs	r3, r2
 80033c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80033c2:	f000 f825 	bl	8003410 <HAL_RCC_GetSysClockFreq>
 80033c6:	4602      	mov	r2, r0
 80033c8:	4b0c      	ldr	r3, [pc, #48]	@ (80033fc <HAL_RCC_ClockConfig+0x264>)
 80033ca:	689b      	ldr	r3, [r3, #8]
 80033cc:	091b      	lsrs	r3, r3, #4
 80033ce:	f003 030f 	and.w	r3, r3, #15
 80033d2:	490c      	ldr	r1, [pc, #48]	@ (8003404 <HAL_RCC_ClockConfig+0x26c>)
 80033d4:	5ccb      	ldrb	r3, [r1, r3]
 80033d6:	f003 031f 	and.w	r3, r3, #31
 80033da:	fa22 f303 	lsr.w	r3, r2, r3
 80033de:	4a0a      	ldr	r2, [pc, #40]	@ (8003408 <HAL_RCC_ClockConfig+0x270>)
 80033e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80033e2:	4b0a      	ldr	r3, [pc, #40]	@ (800340c <HAL_RCC_ClockConfig+0x274>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4618      	mov	r0, r3
 80033e8:	f7fd fff4 	bl	80013d4 <HAL_InitTick>
 80033ec:	4603      	mov	r3, r0
}
 80033ee:	4618      	mov	r0, r3
 80033f0:	3718      	adds	r7, #24
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd80      	pop	{r7, pc}
 80033f6:	bf00      	nop
 80033f8:	40022000 	.word	0x40022000
 80033fc:	40021000 	.word	0x40021000
 8003400:	04c4b400 	.word	0x04c4b400
 8003404:	0800600c 	.word	0x0800600c
 8003408:	20000000 	.word	0x20000000
 800340c:	20000004 	.word	0x20000004

08003410 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003410:	b480      	push	{r7}
 8003412:	b087      	sub	sp, #28
 8003414:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003416:	4b2c      	ldr	r3, [pc, #176]	@ (80034c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003418:	689b      	ldr	r3, [r3, #8]
 800341a:	f003 030c 	and.w	r3, r3, #12
 800341e:	2b04      	cmp	r3, #4
 8003420:	d102      	bne.n	8003428 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003422:	4b2a      	ldr	r3, [pc, #168]	@ (80034cc <HAL_RCC_GetSysClockFreq+0xbc>)
 8003424:	613b      	str	r3, [r7, #16]
 8003426:	e047      	b.n	80034b8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003428:	4b27      	ldr	r3, [pc, #156]	@ (80034c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800342a:	689b      	ldr	r3, [r3, #8]
 800342c:	f003 030c 	and.w	r3, r3, #12
 8003430:	2b08      	cmp	r3, #8
 8003432:	d102      	bne.n	800343a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003434:	4b26      	ldr	r3, [pc, #152]	@ (80034d0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003436:	613b      	str	r3, [r7, #16]
 8003438:	e03e      	b.n	80034b8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800343a:	4b23      	ldr	r3, [pc, #140]	@ (80034c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800343c:	689b      	ldr	r3, [r3, #8]
 800343e:	f003 030c 	and.w	r3, r3, #12
 8003442:	2b0c      	cmp	r3, #12
 8003444:	d136      	bne.n	80034b4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003446:	4b20      	ldr	r3, [pc, #128]	@ (80034c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003448:	68db      	ldr	r3, [r3, #12]
 800344a:	f003 0303 	and.w	r3, r3, #3
 800344e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003450:	4b1d      	ldr	r3, [pc, #116]	@ (80034c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003452:	68db      	ldr	r3, [r3, #12]
 8003454:	091b      	lsrs	r3, r3, #4
 8003456:	f003 030f 	and.w	r3, r3, #15
 800345a:	3301      	adds	r3, #1
 800345c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	2b03      	cmp	r3, #3
 8003462:	d10c      	bne.n	800347e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003464:	4a1a      	ldr	r2, [pc, #104]	@ (80034d0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003466:	68bb      	ldr	r3, [r7, #8]
 8003468:	fbb2 f3f3 	udiv	r3, r2, r3
 800346c:	4a16      	ldr	r2, [pc, #88]	@ (80034c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800346e:	68d2      	ldr	r2, [r2, #12]
 8003470:	0a12      	lsrs	r2, r2, #8
 8003472:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003476:	fb02 f303 	mul.w	r3, r2, r3
 800347a:	617b      	str	r3, [r7, #20]
      break;
 800347c:	e00c      	b.n	8003498 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800347e:	4a13      	ldr	r2, [pc, #76]	@ (80034cc <HAL_RCC_GetSysClockFreq+0xbc>)
 8003480:	68bb      	ldr	r3, [r7, #8]
 8003482:	fbb2 f3f3 	udiv	r3, r2, r3
 8003486:	4a10      	ldr	r2, [pc, #64]	@ (80034c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003488:	68d2      	ldr	r2, [r2, #12]
 800348a:	0a12      	lsrs	r2, r2, #8
 800348c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003490:	fb02 f303 	mul.w	r3, r2, r3
 8003494:	617b      	str	r3, [r7, #20]
      break;
 8003496:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003498:	4b0b      	ldr	r3, [pc, #44]	@ (80034c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800349a:	68db      	ldr	r3, [r3, #12]
 800349c:	0e5b      	lsrs	r3, r3, #25
 800349e:	f003 0303 	and.w	r3, r3, #3
 80034a2:	3301      	adds	r3, #1
 80034a4:	005b      	lsls	r3, r3, #1
 80034a6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80034a8:	697a      	ldr	r2, [r7, #20]
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80034b0:	613b      	str	r3, [r7, #16]
 80034b2:	e001      	b.n	80034b8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80034b4:	2300      	movs	r3, #0
 80034b6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80034b8:	693b      	ldr	r3, [r7, #16]
}
 80034ba:	4618      	mov	r0, r3
 80034bc:	371c      	adds	r7, #28
 80034be:	46bd      	mov	sp, r7
 80034c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c4:	4770      	bx	lr
 80034c6:	bf00      	nop
 80034c8:	40021000 	.word	0x40021000
 80034cc:	00f42400 	.word	0x00f42400
 80034d0:	007a1200 	.word	0x007a1200

080034d4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034d4:	b480      	push	{r7}
 80034d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80034d8:	4b03      	ldr	r3, [pc, #12]	@ (80034e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80034da:	681b      	ldr	r3, [r3, #0]
}
 80034dc:	4618      	mov	r0, r3
 80034de:	46bd      	mov	sp, r7
 80034e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e4:	4770      	bx	lr
 80034e6:	bf00      	nop
 80034e8:	20000000 	.word	0x20000000

080034ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80034f0:	f7ff fff0 	bl	80034d4 <HAL_RCC_GetHCLKFreq>
 80034f4:	4602      	mov	r2, r0
 80034f6:	4b06      	ldr	r3, [pc, #24]	@ (8003510 <HAL_RCC_GetPCLK1Freq+0x24>)
 80034f8:	689b      	ldr	r3, [r3, #8]
 80034fa:	0a1b      	lsrs	r3, r3, #8
 80034fc:	f003 0307 	and.w	r3, r3, #7
 8003500:	4904      	ldr	r1, [pc, #16]	@ (8003514 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003502:	5ccb      	ldrb	r3, [r1, r3]
 8003504:	f003 031f 	and.w	r3, r3, #31
 8003508:	fa22 f303 	lsr.w	r3, r2, r3
}
 800350c:	4618      	mov	r0, r3
 800350e:	bd80      	pop	{r7, pc}
 8003510:	40021000 	.word	0x40021000
 8003514:	0800601c 	.word	0x0800601c

08003518 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800351c:	f7ff ffda 	bl	80034d4 <HAL_RCC_GetHCLKFreq>
 8003520:	4602      	mov	r2, r0
 8003522:	4b06      	ldr	r3, [pc, #24]	@ (800353c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003524:	689b      	ldr	r3, [r3, #8]
 8003526:	0adb      	lsrs	r3, r3, #11
 8003528:	f003 0307 	and.w	r3, r3, #7
 800352c:	4904      	ldr	r1, [pc, #16]	@ (8003540 <HAL_RCC_GetPCLK2Freq+0x28>)
 800352e:	5ccb      	ldrb	r3, [r1, r3]
 8003530:	f003 031f 	and.w	r3, r3, #31
 8003534:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003538:	4618      	mov	r0, r3
 800353a:	bd80      	pop	{r7, pc}
 800353c:	40021000 	.word	0x40021000
 8003540:	0800601c 	.word	0x0800601c

08003544 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003544:	b480      	push	{r7}
 8003546:	b087      	sub	sp, #28
 8003548:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800354a:	4b1e      	ldr	r3, [pc, #120]	@ (80035c4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800354c:	68db      	ldr	r3, [r3, #12]
 800354e:	f003 0303 	and.w	r3, r3, #3
 8003552:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003554:	4b1b      	ldr	r3, [pc, #108]	@ (80035c4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003556:	68db      	ldr	r3, [r3, #12]
 8003558:	091b      	lsrs	r3, r3, #4
 800355a:	f003 030f 	and.w	r3, r3, #15
 800355e:	3301      	adds	r3, #1
 8003560:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003562:	693b      	ldr	r3, [r7, #16]
 8003564:	2b03      	cmp	r3, #3
 8003566:	d10c      	bne.n	8003582 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003568:	4a17      	ldr	r2, [pc, #92]	@ (80035c8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003570:	4a14      	ldr	r2, [pc, #80]	@ (80035c4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003572:	68d2      	ldr	r2, [r2, #12]
 8003574:	0a12      	lsrs	r2, r2, #8
 8003576:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800357a:	fb02 f303 	mul.w	r3, r2, r3
 800357e:	617b      	str	r3, [r7, #20]
    break;
 8003580:	e00c      	b.n	800359c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003582:	4a12      	ldr	r2, [pc, #72]	@ (80035cc <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	fbb2 f3f3 	udiv	r3, r2, r3
 800358a:	4a0e      	ldr	r2, [pc, #56]	@ (80035c4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800358c:	68d2      	ldr	r2, [r2, #12]
 800358e:	0a12      	lsrs	r2, r2, #8
 8003590:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003594:	fb02 f303 	mul.w	r3, r2, r3
 8003598:	617b      	str	r3, [r7, #20]
    break;
 800359a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800359c:	4b09      	ldr	r3, [pc, #36]	@ (80035c4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800359e:	68db      	ldr	r3, [r3, #12]
 80035a0:	0e5b      	lsrs	r3, r3, #25
 80035a2:	f003 0303 	and.w	r3, r3, #3
 80035a6:	3301      	adds	r3, #1
 80035a8:	005b      	lsls	r3, r3, #1
 80035aa:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80035ac:	697a      	ldr	r2, [r7, #20]
 80035ae:	68bb      	ldr	r3, [r7, #8]
 80035b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80035b4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80035b6:	687b      	ldr	r3, [r7, #4]
}
 80035b8:	4618      	mov	r0, r3
 80035ba:	371c      	adds	r7, #28
 80035bc:	46bd      	mov	sp, r7
 80035be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c2:	4770      	bx	lr
 80035c4:	40021000 	.word	0x40021000
 80035c8:	007a1200 	.word	0x007a1200
 80035cc:	00f42400 	.word	0x00f42400

080035d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b086      	sub	sp, #24
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80035d8:	2300      	movs	r3, #0
 80035da:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80035dc:	2300      	movs	r3, #0
 80035de:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	f000 8098 	beq.w	800371e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035ee:	2300      	movs	r3, #0
 80035f0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035f2:	4b43      	ldr	r3, [pc, #268]	@ (8003700 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80035f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d10d      	bne.n	800361a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035fe:	4b40      	ldr	r3, [pc, #256]	@ (8003700 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003600:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003602:	4a3f      	ldr	r2, [pc, #252]	@ (8003700 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003604:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003608:	6593      	str	r3, [r2, #88]	@ 0x58
 800360a:	4b3d      	ldr	r3, [pc, #244]	@ (8003700 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800360c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800360e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003612:	60bb      	str	r3, [r7, #8]
 8003614:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003616:	2301      	movs	r3, #1
 8003618:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800361a:	4b3a      	ldr	r3, [pc, #232]	@ (8003704 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4a39      	ldr	r2, [pc, #228]	@ (8003704 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003620:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003624:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003626:	f7fd ff21 	bl	800146c <HAL_GetTick>
 800362a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800362c:	e009      	b.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800362e:	f7fd ff1d 	bl	800146c <HAL_GetTick>
 8003632:	4602      	mov	r2, r0
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	1ad3      	subs	r3, r2, r3
 8003638:	2b02      	cmp	r3, #2
 800363a:	d902      	bls.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800363c:	2303      	movs	r3, #3
 800363e:	74fb      	strb	r3, [r7, #19]
        break;
 8003640:	e005      	b.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003642:	4b30      	ldr	r3, [pc, #192]	@ (8003704 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800364a:	2b00      	cmp	r3, #0
 800364c:	d0ef      	beq.n	800362e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800364e:	7cfb      	ldrb	r3, [r7, #19]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d159      	bne.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003654:	4b2a      	ldr	r3, [pc, #168]	@ (8003700 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003656:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800365a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800365e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003660:	697b      	ldr	r3, [r7, #20]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d01e      	beq.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800366a:	697a      	ldr	r2, [r7, #20]
 800366c:	429a      	cmp	r2, r3
 800366e:	d019      	beq.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003670:	4b23      	ldr	r3, [pc, #140]	@ (8003700 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003672:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003676:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800367a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800367c:	4b20      	ldr	r3, [pc, #128]	@ (8003700 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800367e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003682:	4a1f      	ldr	r2, [pc, #124]	@ (8003700 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003684:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003688:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800368c:	4b1c      	ldr	r3, [pc, #112]	@ (8003700 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800368e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003692:	4a1b      	ldr	r2, [pc, #108]	@ (8003700 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003694:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003698:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800369c:	4a18      	ldr	r2, [pc, #96]	@ (8003700 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800369e:	697b      	ldr	r3, [r7, #20]
 80036a0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80036a4:	697b      	ldr	r3, [r7, #20]
 80036a6:	f003 0301 	and.w	r3, r3, #1
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d016      	beq.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036ae:	f7fd fedd 	bl	800146c <HAL_GetTick>
 80036b2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036b4:	e00b      	b.n	80036ce <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036b6:	f7fd fed9 	bl	800146c <HAL_GetTick>
 80036ba:	4602      	mov	r2, r0
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	1ad3      	subs	r3, r2, r3
 80036c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d902      	bls.n	80036ce <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80036c8:	2303      	movs	r3, #3
 80036ca:	74fb      	strb	r3, [r7, #19]
            break;
 80036cc:	e006      	b.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036ce:	4b0c      	ldr	r3, [pc, #48]	@ (8003700 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80036d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036d4:	f003 0302 	and.w	r3, r3, #2
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d0ec      	beq.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80036dc:	7cfb      	ldrb	r3, [r7, #19]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d10b      	bne.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80036e2:	4b07      	ldr	r3, [pc, #28]	@ (8003700 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80036e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036e8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036f0:	4903      	ldr	r1, [pc, #12]	@ (8003700 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80036f2:	4313      	orrs	r3, r2
 80036f4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80036f8:	e008      	b.n	800370c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80036fa:	7cfb      	ldrb	r3, [r7, #19]
 80036fc:	74bb      	strb	r3, [r7, #18]
 80036fe:	e005      	b.n	800370c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003700:	40021000 	.word	0x40021000
 8003704:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003708:	7cfb      	ldrb	r3, [r7, #19]
 800370a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800370c:	7c7b      	ldrb	r3, [r7, #17]
 800370e:	2b01      	cmp	r3, #1
 8003710:	d105      	bne.n	800371e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003712:	4ba6      	ldr	r3, [pc, #664]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003714:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003716:	4aa5      	ldr	r2, [pc, #660]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003718:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800371c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f003 0301 	and.w	r3, r3, #1
 8003726:	2b00      	cmp	r3, #0
 8003728:	d00a      	beq.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800372a:	4ba0      	ldr	r3, [pc, #640]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800372c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003730:	f023 0203 	bic.w	r2, r3, #3
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	499c      	ldr	r1, [pc, #624]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800373a:	4313      	orrs	r3, r2
 800373c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f003 0302 	and.w	r3, r3, #2
 8003748:	2b00      	cmp	r3, #0
 800374a:	d00a      	beq.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800374c:	4b97      	ldr	r3, [pc, #604]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800374e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003752:	f023 020c 	bic.w	r2, r3, #12
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	689b      	ldr	r3, [r3, #8]
 800375a:	4994      	ldr	r1, [pc, #592]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800375c:	4313      	orrs	r3, r2
 800375e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f003 0304 	and.w	r3, r3, #4
 800376a:	2b00      	cmp	r3, #0
 800376c:	d00a      	beq.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800376e:	4b8f      	ldr	r3, [pc, #572]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003770:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003774:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	68db      	ldr	r3, [r3, #12]
 800377c:	498b      	ldr	r1, [pc, #556]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800377e:	4313      	orrs	r3, r2
 8003780:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f003 0308 	and.w	r3, r3, #8
 800378c:	2b00      	cmp	r3, #0
 800378e:	d00a      	beq.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003790:	4b86      	ldr	r3, [pc, #536]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003792:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003796:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	691b      	ldr	r3, [r3, #16]
 800379e:	4983      	ldr	r1, [pc, #524]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80037a0:	4313      	orrs	r3, r2
 80037a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f003 0320 	and.w	r3, r3, #32
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d00a      	beq.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80037b2:	4b7e      	ldr	r3, [pc, #504]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80037b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037b8:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	695b      	ldr	r3, [r3, #20]
 80037c0:	497a      	ldr	r1, [pc, #488]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80037c2:	4313      	orrs	r3, r2
 80037c4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d00a      	beq.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80037d4:	4b75      	ldr	r3, [pc, #468]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80037d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037da:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	699b      	ldr	r3, [r3, #24]
 80037e2:	4972      	ldr	r1, [pc, #456]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80037e4:	4313      	orrs	r3, r2
 80037e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d00a      	beq.n	800380c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80037f6:	4b6d      	ldr	r3, [pc, #436]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80037f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037fc:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	69db      	ldr	r3, [r3, #28]
 8003804:	4969      	ldr	r1, [pc, #420]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003806:	4313      	orrs	r3, r2
 8003808:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003814:	2b00      	cmp	r3, #0
 8003816:	d00a      	beq.n	800382e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003818:	4b64      	ldr	r3, [pc, #400]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800381a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800381e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6a1b      	ldr	r3, [r3, #32]
 8003826:	4961      	ldr	r1, [pc, #388]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003828:	4313      	orrs	r3, r2
 800382a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003836:	2b00      	cmp	r3, #0
 8003838:	d00a      	beq.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800383a:	4b5c      	ldr	r3, [pc, #368]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800383c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003840:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003848:	4958      	ldr	r1, [pc, #352]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800384a:	4313      	orrs	r3, r2
 800384c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003858:	2b00      	cmp	r3, #0
 800385a:	d015      	beq.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800385c:	4b53      	ldr	r3, [pc, #332]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800385e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003862:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800386a:	4950      	ldr	r1, [pc, #320]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800386c:	4313      	orrs	r3, r2
 800386e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003876:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800387a:	d105      	bne.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800387c:	4b4b      	ldr	r3, [pc, #300]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800387e:	68db      	ldr	r3, [r3, #12]
 8003880:	4a4a      	ldr	r2, [pc, #296]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003882:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003886:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003890:	2b00      	cmp	r3, #0
 8003892:	d015      	beq.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003894:	4b45      	ldr	r3, [pc, #276]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003896:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800389a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038a2:	4942      	ldr	r1, [pc, #264]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80038a4:	4313      	orrs	r3, r2
 80038a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038ae:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80038b2:	d105      	bne.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80038b4:	4b3d      	ldr	r3, [pc, #244]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80038b6:	68db      	ldr	r3, [r3, #12]
 80038b8:	4a3c      	ldr	r2, [pc, #240]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80038ba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80038be:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d015      	beq.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80038cc:	4b37      	ldr	r3, [pc, #220]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80038ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038d2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038da:	4934      	ldr	r1, [pc, #208]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80038dc:	4313      	orrs	r3, r2
 80038de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038e6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80038ea:	d105      	bne.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80038ec:	4b2f      	ldr	r3, [pc, #188]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80038ee:	68db      	ldr	r3, [r3, #12]
 80038f0:	4a2e      	ldr	r2, [pc, #184]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80038f2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80038f6:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003900:	2b00      	cmp	r3, #0
 8003902:	d015      	beq.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003904:	4b29      	ldr	r3, [pc, #164]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003906:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800390a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003912:	4926      	ldr	r1, [pc, #152]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003914:	4313      	orrs	r3, r2
 8003916:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800391e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003922:	d105      	bne.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003924:	4b21      	ldr	r3, [pc, #132]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003926:	68db      	ldr	r3, [r3, #12]
 8003928:	4a20      	ldr	r2, [pc, #128]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800392a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800392e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003938:	2b00      	cmp	r3, #0
 800393a:	d015      	beq.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800393c:	4b1b      	ldr	r3, [pc, #108]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800393e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003942:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800394a:	4918      	ldr	r1, [pc, #96]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800394c:	4313      	orrs	r3, r2
 800394e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003956:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800395a:	d105      	bne.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800395c:	4b13      	ldr	r3, [pc, #76]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800395e:	68db      	ldr	r3, [r3, #12]
 8003960:	4a12      	ldr	r2, [pc, #72]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003962:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003966:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003970:	2b00      	cmp	r3, #0
 8003972:	d015      	beq.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003974:	4b0d      	ldr	r3, [pc, #52]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003976:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800397a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003982:	490a      	ldr	r1, [pc, #40]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003984:	4313      	orrs	r3, r2
 8003986:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800398e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003992:	d105      	bne.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003994:	4b05      	ldr	r3, [pc, #20]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003996:	68db      	ldr	r3, [r3, #12]
 8003998:	4a04      	ldr	r2, [pc, #16]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800399a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800399e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80039a0:	7cbb      	ldrb	r3, [r7, #18]
}
 80039a2:	4618      	mov	r0, r3
 80039a4:	3718      	adds	r7, #24
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd80      	pop	{r7, pc}
 80039aa:	bf00      	nop
 80039ac:	40021000 	.word	0x40021000

080039b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b082      	sub	sp, #8
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d101      	bne.n	80039c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80039be:	2301      	movs	r3, #1
 80039c0:	e049      	b.n	8003a56 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80039c8:	b2db      	uxtb	r3, r3
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d106      	bne.n	80039dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2200      	movs	r2, #0
 80039d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80039d6:	6878      	ldr	r0, [r7, #4]
 80039d8:	f7fd fba2 	bl	8001120 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2202      	movs	r2, #2
 80039e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681a      	ldr	r2, [r3, #0]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	3304      	adds	r3, #4
 80039ec:	4619      	mov	r1, r3
 80039ee:	4610      	mov	r0, r2
 80039f0:	f000 fb4a 	bl	8004088 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2201      	movs	r2, #1
 80039f8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2201      	movs	r2, #1
 8003a00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2201      	movs	r2, #1
 8003a08:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2201      	movs	r2, #1
 8003a10:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2201      	movs	r2, #1
 8003a18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2201      	movs	r2, #1
 8003a20:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2201      	movs	r2, #1
 8003a28:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2201      	movs	r2, #1
 8003a30:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2201      	movs	r2, #1
 8003a38:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2201      	movs	r2, #1
 8003a40:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2201      	movs	r2, #1
 8003a48:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2201      	movs	r2, #1
 8003a50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003a54:	2300      	movs	r3, #0
}
 8003a56:	4618      	mov	r0, r3
 8003a58:	3708      	adds	r7, #8
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bd80      	pop	{r7, pc}

08003a5e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003a5e:	b580      	push	{r7, lr}
 8003a60:	b082      	sub	sp, #8
 8003a62:	af00      	add	r7, sp, #0
 8003a64:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d101      	bne.n	8003a70 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	e049      	b.n	8003b04 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a76:	b2db      	uxtb	r3, r3
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d106      	bne.n	8003a8a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2200      	movs	r2, #0
 8003a80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003a84:	6878      	ldr	r0, [r7, #4]
 8003a86:	f000 f841 	bl	8003b0c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2202      	movs	r2, #2
 8003a8e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681a      	ldr	r2, [r3, #0]
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	3304      	adds	r3, #4
 8003a9a:	4619      	mov	r1, r3
 8003a9c:	4610      	mov	r0, r2
 8003a9e:	f000 faf3 	bl	8004088 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2201      	movs	r2, #1
 8003aa6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2201      	movs	r2, #1
 8003aae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2201      	movs	r2, #1
 8003ab6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2201      	movs	r2, #1
 8003abe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2201      	movs	r2, #1
 8003ac6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2201      	movs	r2, #1
 8003ace:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2201      	movs	r2, #1
 8003ad6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2201      	movs	r2, #1
 8003ade:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2201      	movs	r2, #1
 8003ae6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2201      	movs	r2, #1
 8003aee:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2201      	movs	r2, #1
 8003af6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2201      	movs	r2, #1
 8003afe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003b02:	2300      	movs	r3, #0
}
 8003b04:	4618      	mov	r0, r3
 8003b06:	3708      	adds	r7, #8
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	bd80      	pop	{r7, pc}

08003b0c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	b083      	sub	sp, #12
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003b14:	bf00      	nop
 8003b16:	370c      	adds	r7, #12
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1e:	4770      	bx	lr

08003b20 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b086      	sub	sp, #24
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
 8003b28:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d101      	bne.n	8003b34 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003b30:	2301      	movs	r3, #1
 8003b32:	e097      	b.n	8003c64 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b3a:	b2db      	uxtb	r3, r3
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d106      	bne.n	8003b4e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2200      	movs	r2, #0
 8003b44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003b48:	6878      	ldr	r0, [r7, #4]
 8003b4a:	f7fd fa57 	bl	8000ffc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2202      	movs	r2, #2
 8003b52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	689b      	ldr	r3, [r3, #8]
 8003b5c:	687a      	ldr	r2, [r7, #4]
 8003b5e:	6812      	ldr	r2, [r2, #0]
 8003b60:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8003b64:	f023 0307 	bic.w	r3, r3, #7
 8003b68:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681a      	ldr	r2, [r3, #0]
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	3304      	adds	r3, #4
 8003b72:	4619      	mov	r1, r3
 8003b74:	4610      	mov	r0, r2
 8003b76:	f000 fa87 	bl	8004088 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	689b      	ldr	r3, [r3, #8]
 8003b80:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	699b      	ldr	r3, [r3, #24]
 8003b88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	6a1b      	ldr	r3, [r3, #32]
 8003b90:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	697a      	ldr	r2, [r7, #20]
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003b9c:	693b      	ldr	r3, [r7, #16]
 8003b9e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ba2:	f023 0303 	bic.w	r3, r3, #3
 8003ba6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	689a      	ldr	r2, [r3, #8]
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	699b      	ldr	r3, [r3, #24]
 8003bb0:	021b      	lsls	r3, r3, #8
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	693a      	ldr	r2, [r7, #16]
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003bba:	693b      	ldr	r3, [r7, #16]
 8003bbc:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8003bc0:	f023 030c 	bic.w	r3, r3, #12
 8003bc4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003bc6:	693b      	ldr	r3, [r7, #16]
 8003bc8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003bcc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003bd0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	68da      	ldr	r2, [r3, #12]
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	69db      	ldr	r3, [r3, #28]
 8003bda:	021b      	lsls	r3, r3, #8
 8003bdc:	4313      	orrs	r3, r2
 8003bde:	693a      	ldr	r2, [r7, #16]
 8003be0:	4313      	orrs	r3, r2
 8003be2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	691b      	ldr	r3, [r3, #16]
 8003be8:	011a      	lsls	r2, r3, #4
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	6a1b      	ldr	r3, [r3, #32]
 8003bee:	031b      	lsls	r3, r3, #12
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	693a      	ldr	r2, [r7, #16]
 8003bf4:	4313      	orrs	r3, r2
 8003bf6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8003bfe:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8003c06:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	685a      	ldr	r2, [r3, #4]
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	695b      	ldr	r3, [r3, #20]
 8003c10:	011b      	lsls	r3, r3, #4
 8003c12:	4313      	orrs	r3, r2
 8003c14:	68fa      	ldr	r2, [r7, #12]
 8003c16:	4313      	orrs	r3, r2
 8003c18:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	697a      	ldr	r2, [r7, #20]
 8003c20:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	693a      	ldr	r2, [r7, #16]
 8003c28:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	68fa      	ldr	r2, [r7, #12]
 8003c30:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2201      	movs	r2, #1
 8003c36:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2201      	movs	r2, #1
 8003c3e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2201      	movs	r2, #1
 8003c46:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2201      	movs	r2, #1
 8003c4e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2201      	movs	r2, #1
 8003c56:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2201      	movs	r2, #1
 8003c5e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003c62:	2300      	movs	r3, #0
}
 8003c64:	4618      	mov	r0, r3
 8003c66:	3718      	adds	r7, #24
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	bd80      	pop	{r7, pc}

08003c6c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b086      	sub	sp, #24
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	60f8      	str	r0, [r7, #12]
 8003c74:	60b9      	str	r1, [r7, #8]
 8003c76:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c78:	2300      	movs	r3, #0
 8003c7a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003c82:	2b01      	cmp	r3, #1
 8003c84:	d101      	bne.n	8003c8a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003c86:	2302      	movs	r3, #2
 8003c88:	e0ff      	b.n	8003e8a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	2201      	movs	r2, #1
 8003c8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2b14      	cmp	r3, #20
 8003c96:	f200 80f0 	bhi.w	8003e7a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003c9a:	a201      	add	r2, pc, #4	@ (adr r2, 8003ca0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003c9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ca0:	08003cf5 	.word	0x08003cf5
 8003ca4:	08003e7b 	.word	0x08003e7b
 8003ca8:	08003e7b 	.word	0x08003e7b
 8003cac:	08003e7b 	.word	0x08003e7b
 8003cb0:	08003d35 	.word	0x08003d35
 8003cb4:	08003e7b 	.word	0x08003e7b
 8003cb8:	08003e7b 	.word	0x08003e7b
 8003cbc:	08003e7b 	.word	0x08003e7b
 8003cc0:	08003d77 	.word	0x08003d77
 8003cc4:	08003e7b 	.word	0x08003e7b
 8003cc8:	08003e7b 	.word	0x08003e7b
 8003ccc:	08003e7b 	.word	0x08003e7b
 8003cd0:	08003db7 	.word	0x08003db7
 8003cd4:	08003e7b 	.word	0x08003e7b
 8003cd8:	08003e7b 	.word	0x08003e7b
 8003cdc:	08003e7b 	.word	0x08003e7b
 8003ce0:	08003df9 	.word	0x08003df9
 8003ce4:	08003e7b 	.word	0x08003e7b
 8003ce8:	08003e7b 	.word	0x08003e7b
 8003cec:	08003e7b 	.word	0x08003e7b
 8003cf0:	08003e39 	.word	0x08003e39
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	68b9      	ldr	r1, [r7, #8]
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	f000 fa60 	bl	80041c0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	699a      	ldr	r2, [r3, #24]
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f042 0208 	orr.w	r2, r2, #8
 8003d0e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	699a      	ldr	r2, [r3, #24]
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f022 0204 	bic.w	r2, r2, #4
 8003d1e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	6999      	ldr	r1, [r3, #24]
 8003d26:	68bb      	ldr	r3, [r7, #8]
 8003d28:	691a      	ldr	r2, [r3, #16]
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	430a      	orrs	r2, r1
 8003d30:	619a      	str	r2, [r3, #24]
      break;
 8003d32:	e0a5      	b.n	8003e80 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	68b9      	ldr	r1, [r7, #8]
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	f000 fad0 	bl	80042e0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	699a      	ldr	r2, [r3, #24]
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003d4e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	699a      	ldr	r2, [r3, #24]
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d5e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	6999      	ldr	r1, [r3, #24]
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	691b      	ldr	r3, [r3, #16]
 8003d6a:	021a      	lsls	r2, r3, #8
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	430a      	orrs	r2, r1
 8003d72:	619a      	str	r2, [r3, #24]
      break;
 8003d74:	e084      	b.n	8003e80 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	68b9      	ldr	r1, [r7, #8]
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	f000 fb39 	bl	80043f4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	69da      	ldr	r2, [r3, #28]
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f042 0208 	orr.w	r2, r2, #8
 8003d90:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	69da      	ldr	r2, [r3, #28]
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f022 0204 	bic.w	r2, r2, #4
 8003da0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	69d9      	ldr	r1, [r3, #28]
 8003da8:	68bb      	ldr	r3, [r7, #8]
 8003daa:	691a      	ldr	r2, [r3, #16]
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	430a      	orrs	r2, r1
 8003db2:	61da      	str	r2, [r3, #28]
      break;
 8003db4:	e064      	b.n	8003e80 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	68b9      	ldr	r1, [r7, #8]
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	f000 fba1 	bl	8004504 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	69da      	ldr	r2, [r3, #28]
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003dd0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	69da      	ldr	r2, [r3, #28]
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003de0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	69d9      	ldr	r1, [r3, #28]
 8003de8:	68bb      	ldr	r3, [r7, #8]
 8003dea:	691b      	ldr	r3, [r3, #16]
 8003dec:	021a      	lsls	r2, r3, #8
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	430a      	orrs	r2, r1
 8003df4:	61da      	str	r2, [r3, #28]
      break;
 8003df6:	e043      	b.n	8003e80 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	68b9      	ldr	r1, [r7, #8]
 8003dfe:	4618      	mov	r0, r3
 8003e00:	f000 fc0a 	bl	8004618 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f042 0208 	orr.w	r2, r2, #8
 8003e12:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f022 0204 	bic.w	r2, r2, #4
 8003e22:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8003e2a:	68bb      	ldr	r3, [r7, #8]
 8003e2c:	691a      	ldr	r2, [r3, #16]
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	430a      	orrs	r2, r1
 8003e34:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8003e36:	e023      	b.n	8003e80 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	68b9      	ldr	r1, [r7, #8]
 8003e3e:	4618      	mov	r0, r3
 8003e40:	f000 fc4e 	bl	80046e0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003e52:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e62:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8003e6a:	68bb      	ldr	r3, [r7, #8]
 8003e6c:	691b      	ldr	r3, [r3, #16]
 8003e6e:	021a      	lsls	r2, r3, #8
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	430a      	orrs	r2, r1
 8003e76:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8003e78:	e002      	b.n	8003e80 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	75fb      	strb	r3, [r7, #23]
      break;
 8003e7e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	2200      	movs	r2, #0
 8003e84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003e88:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	3718      	adds	r7, #24
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	bd80      	pop	{r7, pc}
 8003e92:	bf00      	nop

08003e94 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b084      	sub	sp, #16
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
 8003e9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003ea8:	2b01      	cmp	r3, #1
 8003eaa:	d101      	bne.n	8003eb0 <HAL_TIM_ConfigClockSource+0x1c>
 8003eac:	2302      	movs	r3, #2
 8003eae:	e0de      	b.n	800406e <HAL_TIM_ConfigClockSource+0x1da>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2202      	movs	r2, #2
 8003ebc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	689b      	ldr	r3, [r3, #8]
 8003ec6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003ec8:	68bb      	ldr	r3, [r7, #8]
 8003eca:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8003ece:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003ed2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003eda:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	68ba      	ldr	r2, [r7, #8]
 8003ee2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a63      	ldr	r2, [pc, #396]	@ (8004078 <HAL_TIM_ConfigClockSource+0x1e4>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	f000 80a9 	beq.w	8004042 <HAL_TIM_ConfigClockSource+0x1ae>
 8003ef0:	4a61      	ldr	r2, [pc, #388]	@ (8004078 <HAL_TIM_ConfigClockSource+0x1e4>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	f200 80ae 	bhi.w	8004054 <HAL_TIM_ConfigClockSource+0x1c0>
 8003ef8:	4a60      	ldr	r2, [pc, #384]	@ (800407c <HAL_TIM_ConfigClockSource+0x1e8>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	f000 80a1 	beq.w	8004042 <HAL_TIM_ConfigClockSource+0x1ae>
 8003f00:	4a5e      	ldr	r2, [pc, #376]	@ (800407c <HAL_TIM_ConfigClockSource+0x1e8>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	f200 80a6 	bhi.w	8004054 <HAL_TIM_ConfigClockSource+0x1c0>
 8003f08:	4a5d      	ldr	r2, [pc, #372]	@ (8004080 <HAL_TIM_ConfigClockSource+0x1ec>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	f000 8099 	beq.w	8004042 <HAL_TIM_ConfigClockSource+0x1ae>
 8003f10:	4a5b      	ldr	r2, [pc, #364]	@ (8004080 <HAL_TIM_ConfigClockSource+0x1ec>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	f200 809e 	bhi.w	8004054 <HAL_TIM_ConfigClockSource+0x1c0>
 8003f18:	4a5a      	ldr	r2, [pc, #360]	@ (8004084 <HAL_TIM_ConfigClockSource+0x1f0>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	f000 8091 	beq.w	8004042 <HAL_TIM_ConfigClockSource+0x1ae>
 8003f20:	4a58      	ldr	r2, [pc, #352]	@ (8004084 <HAL_TIM_ConfigClockSource+0x1f0>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	f200 8096 	bhi.w	8004054 <HAL_TIM_ConfigClockSource+0x1c0>
 8003f28:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8003f2c:	f000 8089 	beq.w	8004042 <HAL_TIM_ConfigClockSource+0x1ae>
 8003f30:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8003f34:	f200 808e 	bhi.w	8004054 <HAL_TIM_ConfigClockSource+0x1c0>
 8003f38:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003f3c:	d03e      	beq.n	8003fbc <HAL_TIM_ConfigClockSource+0x128>
 8003f3e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003f42:	f200 8087 	bhi.w	8004054 <HAL_TIM_ConfigClockSource+0x1c0>
 8003f46:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f4a:	f000 8086 	beq.w	800405a <HAL_TIM_ConfigClockSource+0x1c6>
 8003f4e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f52:	d87f      	bhi.n	8004054 <HAL_TIM_ConfigClockSource+0x1c0>
 8003f54:	2b70      	cmp	r3, #112	@ 0x70
 8003f56:	d01a      	beq.n	8003f8e <HAL_TIM_ConfigClockSource+0xfa>
 8003f58:	2b70      	cmp	r3, #112	@ 0x70
 8003f5a:	d87b      	bhi.n	8004054 <HAL_TIM_ConfigClockSource+0x1c0>
 8003f5c:	2b60      	cmp	r3, #96	@ 0x60
 8003f5e:	d050      	beq.n	8004002 <HAL_TIM_ConfigClockSource+0x16e>
 8003f60:	2b60      	cmp	r3, #96	@ 0x60
 8003f62:	d877      	bhi.n	8004054 <HAL_TIM_ConfigClockSource+0x1c0>
 8003f64:	2b50      	cmp	r3, #80	@ 0x50
 8003f66:	d03c      	beq.n	8003fe2 <HAL_TIM_ConfigClockSource+0x14e>
 8003f68:	2b50      	cmp	r3, #80	@ 0x50
 8003f6a:	d873      	bhi.n	8004054 <HAL_TIM_ConfigClockSource+0x1c0>
 8003f6c:	2b40      	cmp	r3, #64	@ 0x40
 8003f6e:	d058      	beq.n	8004022 <HAL_TIM_ConfigClockSource+0x18e>
 8003f70:	2b40      	cmp	r3, #64	@ 0x40
 8003f72:	d86f      	bhi.n	8004054 <HAL_TIM_ConfigClockSource+0x1c0>
 8003f74:	2b30      	cmp	r3, #48	@ 0x30
 8003f76:	d064      	beq.n	8004042 <HAL_TIM_ConfigClockSource+0x1ae>
 8003f78:	2b30      	cmp	r3, #48	@ 0x30
 8003f7a:	d86b      	bhi.n	8004054 <HAL_TIM_ConfigClockSource+0x1c0>
 8003f7c:	2b20      	cmp	r3, #32
 8003f7e:	d060      	beq.n	8004042 <HAL_TIM_ConfigClockSource+0x1ae>
 8003f80:	2b20      	cmp	r3, #32
 8003f82:	d867      	bhi.n	8004054 <HAL_TIM_ConfigClockSource+0x1c0>
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d05c      	beq.n	8004042 <HAL_TIM_ConfigClockSource+0x1ae>
 8003f88:	2b10      	cmp	r3, #16
 8003f8a:	d05a      	beq.n	8004042 <HAL_TIM_ConfigClockSource+0x1ae>
 8003f8c:	e062      	b.n	8004054 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003f9e:	f000 fce9 	bl	8004974 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	689b      	ldr	r3, [r3, #8]
 8003fa8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003faa:	68bb      	ldr	r3, [r7, #8]
 8003fac:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003fb0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	68ba      	ldr	r2, [r7, #8]
 8003fb8:	609a      	str	r2, [r3, #8]
      break;
 8003fba:	e04f      	b.n	800405c <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003fcc:	f000 fcd2 	bl	8004974 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	689a      	ldr	r2, [r3, #8]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003fde:	609a      	str	r2, [r3, #8]
      break;
 8003fe0:	e03c      	b.n	800405c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003fee:	461a      	mov	r2, r3
 8003ff0:	f000 fc44 	bl	800487c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	2150      	movs	r1, #80	@ 0x50
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	f000 fc9d 	bl	800493a <TIM_ITRx_SetConfig>
      break;
 8004000:	e02c      	b.n	800405c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800400e:	461a      	mov	r2, r3
 8004010:	f000 fc63 	bl	80048da <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	2160      	movs	r1, #96	@ 0x60
 800401a:	4618      	mov	r0, r3
 800401c:	f000 fc8d 	bl	800493a <TIM_ITRx_SetConfig>
      break;
 8004020:	e01c      	b.n	800405c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800402e:	461a      	mov	r2, r3
 8004030:	f000 fc24 	bl	800487c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	2140      	movs	r1, #64	@ 0x40
 800403a:	4618      	mov	r0, r3
 800403c:	f000 fc7d 	bl	800493a <TIM_ITRx_SetConfig>
      break;
 8004040:	e00c      	b.n	800405c <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681a      	ldr	r2, [r3, #0]
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4619      	mov	r1, r3
 800404c:	4610      	mov	r0, r2
 800404e:	f000 fc74 	bl	800493a <TIM_ITRx_SetConfig>
      break;
 8004052:	e003      	b.n	800405c <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8004054:	2301      	movs	r3, #1
 8004056:	73fb      	strb	r3, [r7, #15]
      break;
 8004058:	e000      	b.n	800405c <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 800405a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2201      	movs	r2, #1
 8004060:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2200      	movs	r2, #0
 8004068:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800406c:	7bfb      	ldrb	r3, [r7, #15]
}
 800406e:	4618      	mov	r0, r3
 8004070:	3710      	adds	r7, #16
 8004072:	46bd      	mov	sp, r7
 8004074:	bd80      	pop	{r7, pc}
 8004076:	bf00      	nop
 8004078:	00100070 	.word	0x00100070
 800407c:	00100040 	.word	0x00100040
 8004080:	00100030 	.word	0x00100030
 8004084:	00100020 	.word	0x00100020

08004088 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004088:	b480      	push	{r7}
 800408a:	b085      	sub	sp, #20
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
 8004090:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	4a42      	ldr	r2, [pc, #264]	@ (80041a4 <TIM_Base_SetConfig+0x11c>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d00f      	beq.n	80040c0 <TIM_Base_SetConfig+0x38>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80040a6:	d00b      	beq.n	80040c0 <TIM_Base_SetConfig+0x38>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	4a3f      	ldr	r2, [pc, #252]	@ (80041a8 <TIM_Base_SetConfig+0x120>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d007      	beq.n	80040c0 <TIM_Base_SetConfig+0x38>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	4a3e      	ldr	r2, [pc, #248]	@ (80041ac <TIM_Base_SetConfig+0x124>)
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d003      	beq.n	80040c0 <TIM_Base_SetConfig+0x38>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	4a3d      	ldr	r2, [pc, #244]	@ (80041b0 <TIM_Base_SetConfig+0x128>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d108      	bne.n	80040d2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80040c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	68fa      	ldr	r2, [r7, #12]
 80040ce:	4313      	orrs	r3, r2
 80040d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	4a33      	ldr	r2, [pc, #204]	@ (80041a4 <TIM_Base_SetConfig+0x11c>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d01b      	beq.n	8004112 <TIM_Base_SetConfig+0x8a>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80040e0:	d017      	beq.n	8004112 <TIM_Base_SetConfig+0x8a>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	4a30      	ldr	r2, [pc, #192]	@ (80041a8 <TIM_Base_SetConfig+0x120>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d013      	beq.n	8004112 <TIM_Base_SetConfig+0x8a>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	4a2f      	ldr	r2, [pc, #188]	@ (80041ac <TIM_Base_SetConfig+0x124>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d00f      	beq.n	8004112 <TIM_Base_SetConfig+0x8a>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	4a2e      	ldr	r2, [pc, #184]	@ (80041b0 <TIM_Base_SetConfig+0x128>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d00b      	beq.n	8004112 <TIM_Base_SetConfig+0x8a>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	4a2d      	ldr	r2, [pc, #180]	@ (80041b4 <TIM_Base_SetConfig+0x12c>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d007      	beq.n	8004112 <TIM_Base_SetConfig+0x8a>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	4a2c      	ldr	r2, [pc, #176]	@ (80041b8 <TIM_Base_SetConfig+0x130>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d003      	beq.n	8004112 <TIM_Base_SetConfig+0x8a>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	4a2b      	ldr	r2, [pc, #172]	@ (80041bc <TIM_Base_SetConfig+0x134>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d108      	bne.n	8004124 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004118:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	68db      	ldr	r3, [r3, #12]
 800411e:	68fa      	ldr	r2, [r7, #12]
 8004120:	4313      	orrs	r3, r2
 8004122:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	695b      	ldr	r3, [r3, #20]
 800412e:	4313      	orrs	r3, r2
 8004130:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	68fa      	ldr	r2, [r7, #12]
 8004136:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	689a      	ldr	r2, [r3, #8]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	681a      	ldr	r2, [r3, #0]
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	4a16      	ldr	r2, [pc, #88]	@ (80041a4 <TIM_Base_SetConfig+0x11c>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d00f      	beq.n	8004170 <TIM_Base_SetConfig+0xe8>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	4a17      	ldr	r2, [pc, #92]	@ (80041b0 <TIM_Base_SetConfig+0x128>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d00b      	beq.n	8004170 <TIM_Base_SetConfig+0xe8>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	4a16      	ldr	r2, [pc, #88]	@ (80041b4 <TIM_Base_SetConfig+0x12c>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d007      	beq.n	8004170 <TIM_Base_SetConfig+0xe8>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	4a15      	ldr	r2, [pc, #84]	@ (80041b8 <TIM_Base_SetConfig+0x130>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d003      	beq.n	8004170 <TIM_Base_SetConfig+0xe8>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	4a14      	ldr	r2, [pc, #80]	@ (80041bc <TIM_Base_SetConfig+0x134>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d103      	bne.n	8004178 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	691a      	ldr	r2, [r3, #16]
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2201      	movs	r2, #1
 800417c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	691b      	ldr	r3, [r3, #16]
 8004182:	f003 0301 	and.w	r3, r3, #1
 8004186:	2b01      	cmp	r3, #1
 8004188:	d105      	bne.n	8004196 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	691b      	ldr	r3, [r3, #16]
 800418e:	f023 0201 	bic.w	r2, r3, #1
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	611a      	str	r2, [r3, #16]
  }
}
 8004196:	bf00      	nop
 8004198:	3714      	adds	r7, #20
 800419a:	46bd      	mov	sp, r7
 800419c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a0:	4770      	bx	lr
 80041a2:	bf00      	nop
 80041a4:	40012c00 	.word	0x40012c00
 80041a8:	40000400 	.word	0x40000400
 80041ac:	40000800 	.word	0x40000800
 80041b0:	40013400 	.word	0x40013400
 80041b4:	40014000 	.word	0x40014000
 80041b8:	40014400 	.word	0x40014400
 80041bc:	40014800 	.word	0x40014800

080041c0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80041c0:	b480      	push	{r7}
 80041c2:	b087      	sub	sp, #28
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
 80041c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6a1b      	ldr	r3, [r3, #32]
 80041ce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6a1b      	ldr	r3, [r3, #32]
 80041d4:	f023 0201 	bic.w	r2, r3, #1
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	699b      	ldr	r3, [r3, #24]
 80041e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80041ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80041f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	f023 0303 	bic.w	r3, r3, #3
 80041fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	68fa      	ldr	r2, [r7, #12]
 8004202:	4313      	orrs	r3, r2
 8004204:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004206:	697b      	ldr	r3, [r7, #20]
 8004208:	f023 0302 	bic.w	r3, r3, #2
 800420c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	689b      	ldr	r3, [r3, #8]
 8004212:	697a      	ldr	r2, [r7, #20]
 8004214:	4313      	orrs	r3, r2
 8004216:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	4a2c      	ldr	r2, [pc, #176]	@ (80042cc <TIM_OC1_SetConfig+0x10c>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d00f      	beq.n	8004240 <TIM_OC1_SetConfig+0x80>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	4a2b      	ldr	r2, [pc, #172]	@ (80042d0 <TIM_OC1_SetConfig+0x110>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d00b      	beq.n	8004240 <TIM_OC1_SetConfig+0x80>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	4a2a      	ldr	r2, [pc, #168]	@ (80042d4 <TIM_OC1_SetConfig+0x114>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d007      	beq.n	8004240 <TIM_OC1_SetConfig+0x80>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	4a29      	ldr	r2, [pc, #164]	@ (80042d8 <TIM_OC1_SetConfig+0x118>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d003      	beq.n	8004240 <TIM_OC1_SetConfig+0x80>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	4a28      	ldr	r2, [pc, #160]	@ (80042dc <TIM_OC1_SetConfig+0x11c>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d10c      	bne.n	800425a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004240:	697b      	ldr	r3, [r7, #20]
 8004242:	f023 0308 	bic.w	r3, r3, #8
 8004246:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	68db      	ldr	r3, [r3, #12]
 800424c:	697a      	ldr	r2, [r7, #20]
 800424e:	4313      	orrs	r3, r2
 8004250:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004252:	697b      	ldr	r3, [r7, #20]
 8004254:	f023 0304 	bic.w	r3, r3, #4
 8004258:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	4a1b      	ldr	r2, [pc, #108]	@ (80042cc <TIM_OC1_SetConfig+0x10c>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d00f      	beq.n	8004282 <TIM_OC1_SetConfig+0xc2>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	4a1a      	ldr	r2, [pc, #104]	@ (80042d0 <TIM_OC1_SetConfig+0x110>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d00b      	beq.n	8004282 <TIM_OC1_SetConfig+0xc2>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	4a19      	ldr	r2, [pc, #100]	@ (80042d4 <TIM_OC1_SetConfig+0x114>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d007      	beq.n	8004282 <TIM_OC1_SetConfig+0xc2>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	4a18      	ldr	r2, [pc, #96]	@ (80042d8 <TIM_OC1_SetConfig+0x118>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d003      	beq.n	8004282 <TIM_OC1_SetConfig+0xc2>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	4a17      	ldr	r2, [pc, #92]	@ (80042dc <TIM_OC1_SetConfig+0x11c>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d111      	bne.n	80042a6 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004282:	693b      	ldr	r3, [r7, #16]
 8004284:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004288:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800428a:	693b      	ldr	r3, [r7, #16]
 800428c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004290:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	695b      	ldr	r3, [r3, #20]
 8004296:	693a      	ldr	r2, [r7, #16]
 8004298:	4313      	orrs	r3, r2
 800429a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	699b      	ldr	r3, [r3, #24]
 80042a0:	693a      	ldr	r2, [r7, #16]
 80042a2:	4313      	orrs	r3, r2
 80042a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	693a      	ldr	r2, [r7, #16]
 80042aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	68fa      	ldr	r2, [r7, #12]
 80042b0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	685a      	ldr	r2, [r3, #4]
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	697a      	ldr	r2, [r7, #20]
 80042be:	621a      	str	r2, [r3, #32]
}
 80042c0:	bf00      	nop
 80042c2:	371c      	adds	r7, #28
 80042c4:	46bd      	mov	sp, r7
 80042c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ca:	4770      	bx	lr
 80042cc:	40012c00 	.word	0x40012c00
 80042d0:	40013400 	.word	0x40013400
 80042d4:	40014000 	.word	0x40014000
 80042d8:	40014400 	.word	0x40014400
 80042dc:	40014800 	.word	0x40014800

080042e0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80042e0:	b480      	push	{r7}
 80042e2:	b087      	sub	sp, #28
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
 80042e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6a1b      	ldr	r3, [r3, #32]
 80042ee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6a1b      	ldr	r3, [r3, #32]
 80042f4:	f023 0210 	bic.w	r2, r3, #16
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	699b      	ldr	r3, [r3, #24]
 8004306:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800430e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004312:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800431a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	021b      	lsls	r3, r3, #8
 8004322:	68fa      	ldr	r2, [r7, #12]
 8004324:	4313      	orrs	r3, r2
 8004326:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004328:	697b      	ldr	r3, [r7, #20]
 800432a:	f023 0320 	bic.w	r3, r3, #32
 800432e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	689b      	ldr	r3, [r3, #8]
 8004334:	011b      	lsls	r3, r3, #4
 8004336:	697a      	ldr	r2, [r7, #20]
 8004338:	4313      	orrs	r3, r2
 800433a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	4a28      	ldr	r2, [pc, #160]	@ (80043e0 <TIM_OC2_SetConfig+0x100>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d003      	beq.n	800434c <TIM_OC2_SetConfig+0x6c>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	4a27      	ldr	r2, [pc, #156]	@ (80043e4 <TIM_OC2_SetConfig+0x104>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d10d      	bne.n	8004368 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800434c:	697b      	ldr	r3, [r7, #20]
 800434e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004352:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	68db      	ldr	r3, [r3, #12]
 8004358:	011b      	lsls	r3, r3, #4
 800435a:	697a      	ldr	r2, [r7, #20]
 800435c:	4313      	orrs	r3, r2
 800435e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004360:	697b      	ldr	r3, [r7, #20]
 8004362:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004366:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	4a1d      	ldr	r2, [pc, #116]	@ (80043e0 <TIM_OC2_SetConfig+0x100>)
 800436c:	4293      	cmp	r3, r2
 800436e:	d00f      	beq.n	8004390 <TIM_OC2_SetConfig+0xb0>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	4a1c      	ldr	r2, [pc, #112]	@ (80043e4 <TIM_OC2_SetConfig+0x104>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d00b      	beq.n	8004390 <TIM_OC2_SetConfig+0xb0>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	4a1b      	ldr	r2, [pc, #108]	@ (80043e8 <TIM_OC2_SetConfig+0x108>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d007      	beq.n	8004390 <TIM_OC2_SetConfig+0xb0>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	4a1a      	ldr	r2, [pc, #104]	@ (80043ec <TIM_OC2_SetConfig+0x10c>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d003      	beq.n	8004390 <TIM_OC2_SetConfig+0xb0>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	4a19      	ldr	r2, [pc, #100]	@ (80043f0 <TIM_OC2_SetConfig+0x110>)
 800438c:	4293      	cmp	r3, r2
 800438e:	d113      	bne.n	80043b8 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004390:	693b      	ldr	r3, [r7, #16]
 8004392:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004396:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004398:	693b      	ldr	r3, [r7, #16]
 800439a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800439e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	695b      	ldr	r3, [r3, #20]
 80043a4:	009b      	lsls	r3, r3, #2
 80043a6:	693a      	ldr	r2, [r7, #16]
 80043a8:	4313      	orrs	r3, r2
 80043aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	699b      	ldr	r3, [r3, #24]
 80043b0:	009b      	lsls	r3, r3, #2
 80043b2:	693a      	ldr	r2, [r7, #16]
 80043b4:	4313      	orrs	r3, r2
 80043b6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	693a      	ldr	r2, [r7, #16]
 80043bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	68fa      	ldr	r2, [r7, #12]
 80043c2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	685a      	ldr	r2, [r3, #4]
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	697a      	ldr	r2, [r7, #20]
 80043d0:	621a      	str	r2, [r3, #32]
}
 80043d2:	bf00      	nop
 80043d4:	371c      	adds	r7, #28
 80043d6:	46bd      	mov	sp, r7
 80043d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043dc:	4770      	bx	lr
 80043de:	bf00      	nop
 80043e0:	40012c00 	.word	0x40012c00
 80043e4:	40013400 	.word	0x40013400
 80043e8:	40014000 	.word	0x40014000
 80043ec:	40014400 	.word	0x40014400
 80043f0:	40014800 	.word	0x40014800

080043f4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80043f4:	b480      	push	{r7}
 80043f6:	b087      	sub	sp, #28
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
 80043fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6a1b      	ldr	r3, [r3, #32]
 8004402:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6a1b      	ldr	r3, [r3, #32]
 8004408:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	685b      	ldr	r3, [r3, #4]
 8004414:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	69db      	ldr	r3, [r3, #28]
 800441a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004422:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004426:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	f023 0303 	bic.w	r3, r3, #3
 800442e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	68fa      	ldr	r2, [r7, #12]
 8004436:	4313      	orrs	r3, r2
 8004438:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800443a:	697b      	ldr	r3, [r7, #20]
 800443c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004440:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	689b      	ldr	r3, [r3, #8]
 8004446:	021b      	lsls	r3, r3, #8
 8004448:	697a      	ldr	r2, [r7, #20]
 800444a:	4313      	orrs	r3, r2
 800444c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	4a27      	ldr	r2, [pc, #156]	@ (80044f0 <TIM_OC3_SetConfig+0xfc>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d003      	beq.n	800445e <TIM_OC3_SetConfig+0x6a>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	4a26      	ldr	r2, [pc, #152]	@ (80044f4 <TIM_OC3_SetConfig+0x100>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d10d      	bne.n	800447a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800445e:	697b      	ldr	r3, [r7, #20]
 8004460:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004464:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	68db      	ldr	r3, [r3, #12]
 800446a:	021b      	lsls	r3, r3, #8
 800446c:	697a      	ldr	r2, [r7, #20]
 800446e:	4313      	orrs	r3, r2
 8004470:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004472:	697b      	ldr	r3, [r7, #20]
 8004474:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004478:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	4a1c      	ldr	r2, [pc, #112]	@ (80044f0 <TIM_OC3_SetConfig+0xfc>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d00f      	beq.n	80044a2 <TIM_OC3_SetConfig+0xae>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	4a1b      	ldr	r2, [pc, #108]	@ (80044f4 <TIM_OC3_SetConfig+0x100>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d00b      	beq.n	80044a2 <TIM_OC3_SetConfig+0xae>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	4a1a      	ldr	r2, [pc, #104]	@ (80044f8 <TIM_OC3_SetConfig+0x104>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d007      	beq.n	80044a2 <TIM_OC3_SetConfig+0xae>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	4a19      	ldr	r2, [pc, #100]	@ (80044fc <TIM_OC3_SetConfig+0x108>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d003      	beq.n	80044a2 <TIM_OC3_SetConfig+0xae>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	4a18      	ldr	r2, [pc, #96]	@ (8004500 <TIM_OC3_SetConfig+0x10c>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d113      	bne.n	80044ca <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80044a2:	693b      	ldr	r3, [r7, #16]
 80044a4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80044a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80044aa:	693b      	ldr	r3, [r7, #16]
 80044ac:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80044b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	695b      	ldr	r3, [r3, #20]
 80044b6:	011b      	lsls	r3, r3, #4
 80044b8:	693a      	ldr	r2, [r7, #16]
 80044ba:	4313      	orrs	r3, r2
 80044bc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	699b      	ldr	r3, [r3, #24]
 80044c2:	011b      	lsls	r3, r3, #4
 80044c4:	693a      	ldr	r2, [r7, #16]
 80044c6:	4313      	orrs	r3, r2
 80044c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	693a      	ldr	r2, [r7, #16]
 80044ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	68fa      	ldr	r2, [r7, #12]
 80044d4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	685a      	ldr	r2, [r3, #4]
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	697a      	ldr	r2, [r7, #20]
 80044e2:	621a      	str	r2, [r3, #32]
}
 80044e4:	bf00      	nop
 80044e6:	371c      	adds	r7, #28
 80044e8:	46bd      	mov	sp, r7
 80044ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ee:	4770      	bx	lr
 80044f0:	40012c00 	.word	0x40012c00
 80044f4:	40013400 	.word	0x40013400
 80044f8:	40014000 	.word	0x40014000
 80044fc:	40014400 	.word	0x40014400
 8004500:	40014800 	.word	0x40014800

08004504 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004504:	b480      	push	{r7}
 8004506:	b087      	sub	sp, #28
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
 800450c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6a1b      	ldr	r3, [r3, #32]
 8004512:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6a1b      	ldr	r3, [r3, #32]
 8004518:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	685b      	ldr	r3, [r3, #4]
 8004524:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	69db      	ldr	r3, [r3, #28]
 800452a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004532:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004536:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800453e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	021b      	lsls	r3, r3, #8
 8004546:	68fa      	ldr	r2, [r7, #12]
 8004548:	4313      	orrs	r3, r2
 800454a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800454c:	697b      	ldr	r3, [r7, #20]
 800454e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004552:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	689b      	ldr	r3, [r3, #8]
 8004558:	031b      	lsls	r3, r3, #12
 800455a:	697a      	ldr	r2, [r7, #20]
 800455c:	4313      	orrs	r3, r2
 800455e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	4a28      	ldr	r2, [pc, #160]	@ (8004604 <TIM_OC4_SetConfig+0x100>)
 8004564:	4293      	cmp	r3, r2
 8004566:	d003      	beq.n	8004570 <TIM_OC4_SetConfig+0x6c>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	4a27      	ldr	r2, [pc, #156]	@ (8004608 <TIM_OC4_SetConfig+0x104>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d10d      	bne.n	800458c <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8004570:	697b      	ldr	r3, [r7, #20]
 8004572:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004576:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	68db      	ldr	r3, [r3, #12]
 800457c:	031b      	lsls	r3, r3, #12
 800457e:	697a      	ldr	r2, [r7, #20]
 8004580:	4313      	orrs	r3, r2
 8004582:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8004584:	697b      	ldr	r3, [r7, #20]
 8004586:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800458a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	4a1d      	ldr	r2, [pc, #116]	@ (8004604 <TIM_OC4_SetConfig+0x100>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d00f      	beq.n	80045b4 <TIM_OC4_SetConfig+0xb0>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	4a1c      	ldr	r2, [pc, #112]	@ (8004608 <TIM_OC4_SetConfig+0x104>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d00b      	beq.n	80045b4 <TIM_OC4_SetConfig+0xb0>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	4a1b      	ldr	r2, [pc, #108]	@ (800460c <TIM_OC4_SetConfig+0x108>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d007      	beq.n	80045b4 <TIM_OC4_SetConfig+0xb0>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	4a1a      	ldr	r2, [pc, #104]	@ (8004610 <TIM_OC4_SetConfig+0x10c>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d003      	beq.n	80045b4 <TIM_OC4_SetConfig+0xb0>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	4a19      	ldr	r2, [pc, #100]	@ (8004614 <TIM_OC4_SetConfig+0x110>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d113      	bne.n	80045dc <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80045b4:	693b      	ldr	r3, [r7, #16]
 80045b6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80045ba:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80045bc:	693b      	ldr	r3, [r7, #16]
 80045be:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80045c2:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	695b      	ldr	r3, [r3, #20]
 80045c8:	019b      	lsls	r3, r3, #6
 80045ca:	693a      	ldr	r2, [r7, #16]
 80045cc:	4313      	orrs	r3, r2
 80045ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	699b      	ldr	r3, [r3, #24]
 80045d4:	019b      	lsls	r3, r3, #6
 80045d6:	693a      	ldr	r2, [r7, #16]
 80045d8:	4313      	orrs	r3, r2
 80045da:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	693a      	ldr	r2, [r7, #16]
 80045e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	68fa      	ldr	r2, [r7, #12]
 80045e6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	685a      	ldr	r2, [r3, #4]
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	697a      	ldr	r2, [r7, #20]
 80045f4:	621a      	str	r2, [r3, #32]
}
 80045f6:	bf00      	nop
 80045f8:	371c      	adds	r7, #28
 80045fa:	46bd      	mov	sp, r7
 80045fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004600:	4770      	bx	lr
 8004602:	bf00      	nop
 8004604:	40012c00 	.word	0x40012c00
 8004608:	40013400 	.word	0x40013400
 800460c:	40014000 	.word	0x40014000
 8004610:	40014400 	.word	0x40014400
 8004614:	40014800 	.word	0x40014800

08004618 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004618:	b480      	push	{r7}
 800461a:	b087      	sub	sp, #28
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
 8004620:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6a1b      	ldr	r3, [r3, #32]
 8004626:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6a1b      	ldr	r3, [r3, #32]
 800462c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	685b      	ldr	r3, [r3, #4]
 8004638:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800463e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004646:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800464a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	68fa      	ldr	r2, [r7, #12]
 8004652:	4313      	orrs	r3, r2
 8004654:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004656:	693b      	ldr	r3, [r7, #16]
 8004658:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800465c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	689b      	ldr	r3, [r3, #8]
 8004662:	041b      	lsls	r3, r3, #16
 8004664:	693a      	ldr	r2, [r7, #16]
 8004666:	4313      	orrs	r3, r2
 8004668:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	4a17      	ldr	r2, [pc, #92]	@ (80046cc <TIM_OC5_SetConfig+0xb4>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d00f      	beq.n	8004692 <TIM_OC5_SetConfig+0x7a>
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	4a16      	ldr	r2, [pc, #88]	@ (80046d0 <TIM_OC5_SetConfig+0xb8>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d00b      	beq.n	8004692 <TIM_OC5_SetConfig+0x7a>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	4a15      	ldr	r2, [pc, #84]	@ (80046d4 <TIM_OC5_SetConfig+0xbc>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d007      	beq.n	8004692 <TIM_OC5_SetConfig+0x7a>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	4a14      	ldr	r2, [pc, #80]	@ (80046d8 <TIM_OC5_SetConfig+0xc0>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d003      	beq.n	8004692 <TIM_OC5_SetConfig+0x7a>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	4a13      	ldr	r2, [pc, #76]	@ (80046dc <TIM_OC5_SetConfig+0xc4>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d109      	bne.n	80046a6 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004692:	697b      	ldr	r3, [r7, #20]
 8004694:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004698:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	695b      	ldr	r3, [r3, #20]
 800469e:	021b      	lsls	r3, r3, #8
 80046a0:	697a      	ldr	r2, [r7, #20]
 80046a2:	4313      	orrs	r3, r2
 80046a4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	697a      	ldr	r2, [r7, #20]
 80046aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	68fa      	ldr	r2, [r7, #12]
 80046b0:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	685a      	ldr	r2, [r3, #4]
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	693a      	ldr	r2, [r7, #16]
 80046be:	621a      	str	r2, [r3, #32]
}
 80046c0:	bf00      	nop
 80046c2:	371c      	adds	r7, #28
 80046c4:	46bd      	mov	sp, r7
 80046c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ca:	4770      	bx	lr
 80046cc:	40012c00 	.word	0x40012c00
 80046d0:	40013400 	.word	0x40013400
 80046d4:	40014000 	.word	0x40014000
 80046d8:	40014400 	.word	0x40014400
 80046dc:	40014800 	.word	0x40014800

080046e0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80046e0:	b480      	push	{r7}
 80046e2:	b087      	sub	sp, #28
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
 80046e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6a1b      	ldr	r3, [r3, #32]
 80046ee:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6a1b      	ldr	r3, [r3, #32]
 80046f4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	685b      	ldr	r3, [r3, #4]
 8004700:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004706:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800470e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004712:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	021b      	lsls	r3, r3, #8
 800471a:	68fa      	ldr	r2, [r7, #12]
 800471c:	4313      	orrs	r3, r2
 800471e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004720:	693b      	ldr	r3, [r7, #16]
 8004722:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004726:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	689b      	ldr	r3, [r3, #8]
 800472c:	051b      	lsls	r3, r3, #20
 800472e:	693a      	ldr	r2, [r7, #16]
 8004730:	4313      	orrs	r3, r2
 8004732:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	4a18      	ldr	r2, [pc, #96]	@ (8004798 <TIM_OC6_SetConfig+0xb8>)
 8004738:	4293      	cmp	r3, r2
 800473a:	d00f      	beq.n	800475c <TIM_OC6_SetConfig+0x7c>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	4a17      	ldr	r2, [pc, #92]	@ (800479c <TIM_OC6_SetConfig+0xbc>)
 8004740:	4293      	cmp	r3, r2
 8004742:	d00b      	beq.n	800475c <TIM_OC6_SetConfig+0x7c>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	4a16      	ldr	r2, [pc, #88]	@ (80047a0 <TIM_OC6_SetConfig+0xc0>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d007      	beq.n	800475c <TIM_OC6_SetConfig+0x7c>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	4a15      	ldr	r2, [pc, #84]	@ (80047a4 <TIM_OC6_SetConfig+0xc4>)
 8004750:	4293      	cmp	r3, r2
 8004752:	d003      	beq.n	800475c <TIM_OC6_SetConfig+0x7c>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	4a14      	ldr	r2, [pc, #80]	@ (80047a8 <TIM_OC6_SetConfig+0xc8>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d109      	bne.n	8004770 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800475c:	697b      	ldr	r3, [r7, #20]
 800475e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004762:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	695b      	ldr	r3, [r3, #20]
 8004768:	029b      	lsls	r3, r3, #10
 800476a:	697a      	ldr	r2, [r7, #20]
 800476c:	4313      	orrs	r3, r2
 800476e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	697a      	ldr	r2, [r7, #20]
 8004774:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	68fa      	ldr	r2, [r7, #12]
 800477a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	685a      	ldr	r2, [r3, #4]
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	693a      	ldr	r2, [r7, #16]
 8004788:	621a      	str	r2, [r3, #32]
}
 800478a:	bf00      	nop
 800478c:	371c      	adds	r7, #28
 800478e:	46bd      	mov	sp, r7
 8004790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004794:	4770      	bx	lr
 8004796:	bf00      	nop
 8004798:	40012c00 	.word	0x40012c00
 800479c:	40013400 	.word	0x40013400
 80047a0:	40014000 	.word	0x40014000
 80047a4:	40014400 	.word	0x40014400
 80047a8:	40014800 	.word	0x40014800

080047ac <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80047ac:	b480      	push	{r7}
 80047ae:	b087      	sub	sp, #28
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	60f8      	str	r0, [r7, #12]
 80047b4:	60b9      	str	r1, [r7, #8]
 80047b6:	607a      	str	r2, [r7, #4]
 80047b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	6a1b      	ldr	r3, [r3, #32]
 80047be:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	6a1b      	ldr	r3, [r3, #32]
 80047c4:	f023 0201 	bic.w	r2, r3, #1
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	699b      	ldr	r3, [r3, #24]
 80047d0:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	4a24      	ldr	r2, [pc, #144]	@ (8004868 <TIM_TI1_SetConfig+0xbc>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d013      	beq.n	8004802 <TIM_TI1_SetConfig+0x56>
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80047e0:	d00f      	beq.n	8004802 <TIM_TI1_SetConfig+0x56>
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	4a21      	ldr	r2, [pc, #132]	@ (800486c <TIM_TI1_SetConfig+0xc0>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d00b      	beq.n	8004802 <TIM_TI1_SetConfig+0x56>
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	4a20      	ldr	r2, [pc, #128]	@ (8004870 <TIM_TI1_SetConfig+0xc4>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d007      	beq.n	8004802 <TIM_TI1_SetConfig+0x56>
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	4a1f      	ldr	r2, [pc, #124]	@ (8004874 <TIM_TI1_SetConfig+0xc8>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d003      	beq.n	8004802 <TIM_TI1_SetConfig+0x56>
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	4a1e      	ldr	r2, [pc, #120]	@ (8004878 <TIM_TI1_SetConfig+0xcc>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d101      	bne.n	8004806 <TIM_TI1_SetConfig+0x5a>
 8004802:	2301      	movs	r3, #1
 8004804:	e000      	b.n	8004808 <TIM_TI1_SetConfig+0x5c>
 8004806:	2300      	movs	r3, #0
 8004808:	2b00      	cmp	r3, #0
 800480a:	d008      	beq.n	800481e <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800480c:	697b      	ldr	r3, [r7, #20]
 800480e:	f023 0303 	bic.w	r3, r3, #3
 8004812:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004814:	697a      	ldr	r2, [r7, #20]
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	4313      	orrs	r3, r2
 800481a:	617b      	str	r3, [r7, #20]
 800481c:	e003      	b.n	8004826 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800481e:	697b      	ldr	r3, [r7, #20]
 8004820:	f043 0301 	orr.w	r3, r3, #1
 8004824:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004826:	697b      	ldr	r3, [r7, #20]
 8004828:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800482c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	011b      	lsls	r3, r3, #4
 8004832:	b2db      	uxtb	r3, r3
 8004834:	697a      	ldr	r2, [r7, #20]
 8004836:	4313      	orrs	r3, r2
 8004838:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800483a:	693b      	ldr	r3, [r7, #16]
 800483c:	f023 030a 	bic.w	r3, r3, #10
 8004840:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004842:	68bb      	ldr	r3, [r7, #8]
 8004844:	f003 030a 	and.w	r3, r3, #10
 8004848:	693a      	ldr	r2, [r7, #16]
 800484a:	4313      	orrs	r3, r2
 800484c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	697a      	ldr	r2, [r7, #20]
 8004852:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	693a      	ldr	r2, [r7, #16]
 8004858:	621a      	str	r2, [r3, #32]
}
 800485a:	bf00      	nop
 800485c:	371c      	adds	r7, #28
 800485e:	46bd      	mov	sp, r7
 8004860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004864:	4770      	bx	lr
 8004866:	bf00      	nop
 8004868:	40012c00 	.word	0x40012c00
 800486c:	40000400 	.word	0x40000400
 8004870:	40000800 	.word	0x40000800
 8004874:	40013400 	.word	0x40013400
 8004878:	40014000 	.word	0x40014000

0800487c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800487c:	b480      	push	{r7}
 800487e:	b087      	sub	sp, #28
 8004880:	af00      	add	r7, sp, #0
 8004882:	60f8      	str	r0, [r7, #12]
 8004884:	60b9      	str	r1, [r7, #8]
 8004886:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	6a1b      	ldr	r3, [r3, #32]
 800488c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	6a1b      	ldr	r3, [r3, #32]
 8004892:	f023 0201 	bic.w	r2, r3, #1
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	699b      	ldr	r3, [r3, #24]
 800489e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80048a0:	693b      	ldr	r3, [r7, #16]
 80048a2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80048a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	011b      	lsls	r3, r3, #4
 80048ac:	693a      	ldr	r2, [r7, #16]
 80048ae:	4313      	orrs	r3, r2
 80048b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80048b2:	697b      	ldr	r3, [r7, #20]
 80048b4:	f023 030a 	bic.w	r3, r3, #10
 80048b8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80048ba:	697a      	ldr	r2, [r7, #20]
 80048bc:	68bb      	ldr	r3, [r7, #8]
 80048be:	4313      	orrs	r3, r2
 80048c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	693a      	ldr	r2, [r7, #16]
 80048c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	697a      	ldr	r2, [r7, #20]
 80048cc:	621a      	str	r2, [r3, #32]
}
 80048ce:	bf00      	nop
 80048d0:	371c      	adds	r7, #28
 80048d2:	46bd      	mov	sp, r7
 80048d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d8:	4770      	bx	lr

080048da <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80048da:	b480      	push	{r7}
 80048dc:	b087      	sub	sp, #28
 80048de:	af00      	add	r7, sp, #0
 80048e0:	60f8      	str	r0, [r7, #12]
 80048e2:	60b9      	str	r1, [r7, #8]
 80048e4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	6a1b      	ldr	r3, [r3, #32]
 80048ea:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	6a1b      	ldr	r3, [r3, #32]
 80048f0:	f023 0210 	bic.w	r2, r3, #16
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	699b      	ldr	r3, [r3, #24]
 80048fc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80048fe:	693b      	ldr	r3, [r7, #16]
 8004900:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004904:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	031b      	lsls	r3, r3, #12
 800490a:	693a      	ldr	r2, [r7, #16]
 800490c:	4313      	orrs	r3, r2
 800490e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004910:	697b      	ldr	r3, [r7, #20]
 8004912:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004916:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004918:	68bb      	ldr	r3, [r7, #8]
 800491a:	011b      	lsls	r3, r3, #4
 800491c:	697a      	ldr	r2, [r7, #20]
 800491e:	4313      	orrs	r3, r2
 8004920:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	693a      	ldr	r2, [r7, #16]
 8004926:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	697a      	ldr	r2, [r7, #20]
 800492c:	621a      	str	r2, [r3, #32]
}
 800492e:	bf00      	nop
 8004930:	371c      	adds	r7, #28
 8004932:	46bd      	mov	sp, r7
 8004934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004938:	4770      	bx	lr

0800493a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800493a:	b480      	push	{r7}
 800493c:	b085      	sub	sp, #20
 800493e:	af00      	add	r7, sp, #0
 8004940:	6078      	str	r0, [r7, #4]
 8004942:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	689b      	ldr	r3, [r3, #8]
 8004948:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8004950:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004954:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004956:	683a      	ldr	r2, [r7, #0]
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	4313      	orrs	r3, r2
 800495c:	f043 0307 	orr.w	r3, r3, #7
 8004960:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	68fa      	ldr	r2, [r7, #12]
 8004966:	609a      	str	r2, [r3, #8]
}
 8004968:	bf00      	nop
 800496a:	3714      	adds	r7, #20
 800496c:	46bd      	mov	sp, r7
 800496e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004972:	4770      	bx	lr

08004974 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004974:	b480      	push	{r7}
 8004976:	b087      	sub	sp, #28
 8004978:	af00      	add	r7, sp, #0
 800497a:	60f8      	str	r0, [r7, #12]
 800497c:	60b9      	str	r1, [r7, #8]
 800497e:	607a      	str	r2, [r7, #4]
 8004980:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	689b      	ldr	r3, [r3, #8]
 8004986:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004988:	697b      	ldr	r3, [r7, #20]
 800498a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800498e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	021a      	lsls	r2, r3, #8
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	431a      	orrs	r2, r3
 8004998:	68bb      	ldr	r3, [r7, #8]
 800499a:	4313      	orrs	r3, r2
 800499c:	697a      	ldr	r2, [r7, #20]
 800499e:	4313      	orrs	r3, r2
 80049a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	697a      	ldr	r2, [r7, #20]
 80049a6:	609a      	str	r2, [r3, #8]
}
 80049a8:	bf00      	nop
 80049aa:	371c      	adds	r7, #28
 80049ac:	46bd      	mov	sp, r7
 80049ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b2:	4770      	bx	lr

080049b4 <HAL_TIMEx_HallSensor_Init>:
  * @param  htim TIM Hall Sensor Interface handle
  * @param  sConfig TIM Hall Sensor configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Init(TIM_HandleTypeDef *htim, const TIM_HallSensor_InitTypeDef *sConfig)
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b08a      	sub	sp, #40	@ 0x28
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
 80049bc:	6039      	str	r1, [r7, #0]
  TIM_OC_InitTypeDef OC_Config;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d101      	bne.n	80049c8 <HAL_TIMEx_HallSensor_Init+0x14>
  {
    return HAL_ERROR;
 80049c4:	2301      	movs	r3, #1
 80049c6:	e0a0      	b.n	8004b0a <HAL_TIMEx_HallSensor_Init+0x156>
  assert_param(IS_TIM_IC_POLARITY(sConfig->IC1Polarity));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80049ce:	b2db      	uxtb	r3, r3
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d106      	bne.n	80049e2 <HAL_TIMEx_HallSensor_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2200      	movs	r2, #0
 80049d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->HallSensor_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIMEx_HallSensor_MspInit(htim);
 80049dc:	6878      	ldr	r0, [r7, #4]
 80049de:	f7fc fabb 	bl	8000f58 <HAL_TIMEx_HallSensor_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2202      	movs	r2, #2
 80049e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681a      	ldr	r2, [r3, #0]
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	3304      	adds	r3, #4
 80049f2:	4619      	mov	r1, r3
 80049f4:	4610      	mov	r0, r2
 80049f6:	f7ff fb47 	bl	8004088 <TIM_Base_SetConfig>

  /* Configure the Channel 1 as Input Channel to interface with the three Outputs of the  Hall sensor */
  TIM_TI1_SetConfig(htim->Instance, sConfig->IC1Polarity, TIM_ICSELECTION_TRC, sConfig->IC1Filter);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6818      	ldr	r0, [r3, #0]
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	6819      	ldr	r1, [r3, #0]
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	689b      	ldr	r3, [r3, #8]
 8004a06:	2203      	movs	r2, #3
 8004a08:	f7ff fed0 	bl	80047ac <TIM_TI1_SetConfig>

  /* Reset the IC1PSC Bits */
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	699a      	ldr	r2, [r3, #24]
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f022 020c 	bic.w	r2, r2, #12
 8004a1a:	619a      	str	r2, [r3, #24]
  /* Set the IC1PSC value */
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	6999      	ldr	r1, [r3, #24]
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	685a      	ldr	r2, [r3, #4]
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	430a      	orrs	r2, r1
 8004a2c:	619a      	str	r2, [r3, #24]

  /* Enable the Hall sensor interface (XOR function of the three inputs) */
  htim->Instance->CR2 |= TIM_CR2_TI1S;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	685a      	ldr	r2, [r3, #4]
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004a3c:	605a      	str	r2, [r3, #4]

  /* Select the TIM_TS_TI1F_ED signal as Input trigger for the TIM */
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	689b      	ldr	r3, [r3, #8]
 8004a44:	687a      	ldr	r2, [r7, #4]
 8004a46:	6812      	ldr	r2, [r2, #0]
 8004a48:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8004a4c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a50:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_TS_TI1F_ED;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	689a      	ldr	r2, [r3, #8]
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004a60:	609a      	str	r2, [r3, #8]

  /* Use the TIM_TS_TI1F_ED signal to reset the TIM counter each edge detection */
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	689b      	ldr	r3, [r3, #8]
 8004a68:	687a      	ldr	r2, [r7, #4]
 8004a6a:	6812      	ldr	r2, [r2, #0]
 8004a6c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004a70:	f023 0307 	bic.w	r3, r3, #7
 8004a74:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_SLAVEMODE_RESET;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	689a      	ldr	r2, [r3, #8]
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f042 0204 	orr.w	r2, r2, #4
 8004a84:	609a      	str	r2, [r3, #8]

  /* Program channel 2 in PWM 2 mode with the desired Commutation_Delay*/
  OC_Config.OCFastMode = TIM_OCFAST_DISABLE;
 8004a86:	2300      	movs	r3, #0
 8004a88:	61fb      	str	r3, [r7, #28]
  OC_Config.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	623b      	str	r3, [r7, #32]
  OC_Config.OCMode = TIM_OCMODE_PWM2;
 8004a8e:	2370      	movs	r3, #112	@ 0x70
 8004a90:	60fb      	str	r3, [r7, #12]
  OC_Config.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004a92:	2300      	movs	r3, #0
 8004a94:	627b      	str	r3, [r7, #36]	@ 0x24
  OC_Config.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004a96:	2300      	movs	r3, #0
 8004a98:	61bb      	str	r3, [r7, #24]
  OC_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	617b      	str	r3, [r7, #20]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	68db      	ldr	r3, [r3, #12]
 8004aa2:	613b      	str	r3, [r7, #16]

  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f107 020c 	add.w	r2, r7, #12
 8004aac:	4611      	mov	r1, r2
 8004aae:	4618      	mov	r0, r3
 8004ab0:	f7ff fc16 	bl	80042e0 <TIM_OC2_SetConfig>

  /* Select OC2REF as trigger output on TRGO: write the MMS bits in the TIMx_CR2
    register to 101 */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	685b      	ldr	r3, [r3, #4]
 8004aba:	687a      	ldr	r2, [r7, #4]
 8004abc:	6812      	ldr	r2, [r2, #0]
 8004abe:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8004ac2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ac6:	6053      	str	r3, [r2, #4]
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	685a      	ldr	r2, [r3, #4]
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f042 0250 	orr.w	r2, r2, #80	@ 0x50
 8004ad6:	605a      	str	r2, [r3, #4]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2201      	movs	r2, #1
 8004adc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2201      	movs	r2, #1
 8004ae4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2201      	movs	r2, #1
 8004aec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2201      	movs	r2, #1
 8004af4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2201      	movs	r2, #1
 8004afc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2201      	movs	r2, #1
 8004b04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004b08:	2300      	movs	r3, #0
}
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	3728      	adds	r7, #40	@ 0x28
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	bd80      	pop	{r7, pc}
	...

08004b14 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004b14:	b480      	push	{r7}
 8004b16:	b085      	sub	sp, #20
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
 8004b1c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004b24:	2b01      	cmp	r3, #1
 8004b26:	d101      	bne.n	8004b2c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004b28:	2302      	movs	r3, #2
 8004b2a:	e065      	b.n	8004bf8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2201      	movs	r2, #1
 8004b30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2202      	movs	r2, #2
 8004b38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	689b      	ldr	r3, [r3, #8]
 8004b4a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4a2c      	ldr	r2, [pc, #176]	@ (8004c04 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d004      	beq.n	8004b60 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	4a2b      	ldr	r2, [pc, #172]	@ (8004c08 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	d108      	bne.n	8004b72 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004b66:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	685b      	ldr	r3, [r3, #4]
 8004b6c:	68fa      	ldr	r2, [r7, #12]
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8004b78:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b7c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	68fa      	ldr	r2, [r7, #12]
 8004b84:	4313      	orrs	r3, r2
 8004b86:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	68fa      	ldr	r2, [r7, #12]
 8004b8e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4a1b      	ldr	r2, [pc, #108]	@ (8004c04 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d018      	beq.n	8004bcc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ba2:	d013      	beq.n	8004bcc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	4a18      	ldr	r2, [pc, #96]	@ (8004c0c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d00e      	beq.n	8004bcc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	4a17      	ldr	r2, [pc, #92]	@ (8004c10 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d009      	beq.n	8004bcc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	4a12      	ldr	r2, [pc, #72]	@ (8004c08 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d004      	beq.n	8004bcc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	4a13      	ldr	r2, [pc, #76]	@ (8004c14 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	d10c      	bne.n	8004be6 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004bcc:	68bb      	ldr	r3, [r7, #8]
 8004bce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004bd2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	689b      	ldr	r3, [r3, #8]
 8004bd8:	68ba      	ldr	r2, [r7, #8]
 8004bda:	4313      	orrs	r3, r2
 8004bdc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	68ba      	ldr	r2, [r7, #8]
 8004be4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2201      	movs	r2, #1
 8004bea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004bf6:	2300      	movs	r3, #0
}
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	3714      	adds	r7, #20
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c02:	4770      	bx	lr
 8004c04:	40012c00 	.word	0x40012c00
 8004c08:	40013400 	.word	0x40013400
 8004c0c:	40000400 	.word	0x40000400
 8004c10:	40000800 	.word	0x40000800
 8004c14:	40014000 	.word	0x40014000

08004c18 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004c18:	b480      	push	{r7}
 8004c1a:	b085      	sub	sp, #20
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
 8004c20:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004c22:	2300      	movs	r3, #0
 8004c24:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004c2c:	2b01      	cmp	r3, #1
 8004c2e:	d101      	bne.n	8004c34 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004c30:	2302      	movs	r3, #2
 8004c32:	e073      	b.n	8004d1c <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2201      	movs	r2, #1
 8004c38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	68db      	ldr	r3, [r3, #12]
 8004c46:	4313      	orrs	r3, r2
 8004c48:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	689b      	ldr	r3, [r3, #8]
 8004c54:	4313      	orrs	r3, r2
 8004c56:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	685b      	ldr	r3, [r3, #4]
 8004c62:	4313      	orrs	r3, r2
 8004c64:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4313      	orrs	r3, r2
 8004c72:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	691b      	ldr	r3, [r3, #16]
 8004c7e:	4313      	orrs	r3, r2
 8004c80:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	695b      	ldr	r3, [r3, #20]
 8004c8c:	4313      	orrs	r3, r2
 8004c8e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c9a:	4313      	orrs	r3, r2
 8004c9c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	699b      	ldr	r3, [r3, #24]
 8004ca8:	041b      	lsls	r3, r3, #16
 8004caa:	4313      	orrs	r3, r2
 8004cac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	69db      	ldr	r3, [r3, #28]
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4a19      	ldr	r2, [pc, #100]	@ (8004d28 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d004      	beq.n	8004cd0 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4a18      	ldr	r2, [pc, #96]	@ (8004d2c <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d11c      	bne.n	8004d0a <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cda:	051b      	lsls	r3, r3, #20
 8004cdc:	4313      	orrs	r3, r2
 8004cde:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	6a1b      	ldr	r3, [r3, #32]
 8004cea:	4313      	orrs	r3, r2
 8004cec:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cf8:	4313      	orrs	r3, r2
 8004cfa:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d06:	4313      	orrs	r3, r2
 8004d08:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	68fa      	ldr	r2, [r7, #12]
 8004d10:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2200      	movs	r2, #0
 8004d16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004d1a:	2300      	movs	r3, #0
}
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	3714      	adds	r7, #20
 8004d20:	46bd      	mov	sp, r7
 8004d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d26:	4770      	bx	lr
 8004d28:	40012c00 	.word	0x40012c00
 8004d2c:	40013400 	.word	0x40013400

08004d30 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b082      	sub	sp, #8
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d101      	bne.n	8004d42 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004d3e:	2301      	movs	r3, #1
 8004d40:	e042      	b.n	8004dc8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d106      	bne.n	8004d5a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2200      	movs	r2, #0
 8004d50:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004d54:	6878      	ldr	r0, [r7, #4]
 8004d56:	f7fc faa3 	bl	80012a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2224      	movs	r2, #36	@ 0x24
 8004d5e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	681a      	ldr	r2, [r3, #0]
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f022 0201 	bic.w	r2, r2, #1
 8004d70:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d002      	beq.n	8004d80 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004d7a:	6878      	ldr	r0, [r7, #4]
 8004d7c:	f000 faf4 	bl	8005368 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004d80:	6878      	ldr	r0, [r7, #4]
 8004d82:	f000 f825 	bl	8004dd0 <UART_SetConfig>
 8004d86:	4603      	mov	r3, r0
 8004d88:	2b01      	cmp	r3, #1
 8004d8a:	d101      	bne.n	8004d90 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	e01b      	b.n	8004dc8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	685a      	ldr	r2, [r3, #4]
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004d9e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	689a      	ldr	r2, [r3, #8]
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004dae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	681a      	ldr	r2, [r3, #0]
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f042 0201 	orr.w	r2, r2, #1
 8004dbe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004dc0:	6878      	ldr	r0, [r7, #4]
 8004dc2:	f000 fb73 	bl	80054ac <UART_CheckIdleState>
 8004dc6:	4603      	mov	r3, r0
}
 8004dc8:	4618      	mov	r0, r3
 8004dca:	3708      	adds	r7, #8
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	bd80      	pop	{r7, pc}

08004dd0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004dd0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004dd4:	b08c      	sub	sp, #48	@ 0x30
 8004dd6:	af00      	add	r7, sp, #0
 8004dd8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004dda:	2300      	movs	r3, #0
 8004ddc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004de0:	697b      	ldr	r3, [r7, #20]
 8004de2:	689a      	ldr	r2, [r3, #8]
 8004de4:	697b      	ldr	r3, [r7, #20]
 8004de6:	691b      	ldr	r3, [r3, #16]
 8004de8:	431a      	orrs	r2, r3
 8004dea:	697b      	ldr	r3, [r7, #20]
 8004dec:	695b      	ldr	r3, [r3, #20]
 8004dee:	431a      	orrs	r2, r3
 8004df0:	697b      	ldr	r3, [r7, #20]
 8004df2:	69db      	ldr	r3, [r3, #28]
 8004df4:	4313      	orrs	r3, r2
 8004df6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004df8:	697b      	ldr	r3, [r7, #20]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	681a      	ldr	r2, [r3, #0]
 8004dfe:	4bab      	ldr	r3, [pc, #684]	@ (80050ac <UART_SetConfig+0x2dc>)
 8004e00:	4013      	ands	r3, r2
 8004e02:	697a      	ldr	r2, [r7, #20]
 8004e04:	6812      	ldr	r2, [r2, #0]
 8004e06:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004e08:	430b      	orrs	r3, r1
 8004e0a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e0c:	697b      	ldr	r3, [r7, #20]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	685b      	ldr	r3, [r3, #4]
 8004e12:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004e16:	697b      	ldr	r3, [r7, #20]
 8004e18:	68da      	ldr	r2, [r3, #12]
 8004e1a:	697b      	ldr	r3, [r7, #20]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	430a      	orrs	r2, r1
 8004e20:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004e22:	697b      	ldr	r3, [r7, #20]
 8004e24:	699b      	ldr	r3, [r3, #24]
 8004e26:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004e28:	697b      	ldr	r3, [r7, #20]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	4aa0      	ldr	r2, [pc, #640]	@ (80050b0 <UART_SetConfig+0x2e0>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d004      	beq.n	8004e3c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004e32:	697b      	ldr	r3, [r7, #20]
 8004e34:	6a1b      	ldr	r3, [r3, #32]
 8004e36:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004e38:	4313      	orrs	r3, r2
 8004e3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004e3c:	697b      	ldr	r3, [r7, #20]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	689b      	ldr	r3, [r3, #8]
 8004e42:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8004e46:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8004e4a:	697a      	ldr	r2, [r7, #20]
 8004e4c:	6812      	ldr	r2, [r2, #0]
 8004e4e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004e50:	430b      	orrs	r3, r1
 8004e52:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004e54:	697b      	ldr	r3, [r7, #20]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e5a:	f023 010f 	bic.w	r1, r3, #15
 8004e5e:	697b      	ldr	r3, [r7, #20]
 8004e60:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004e62:	697b      	ldr	r3, [r7, #20]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	430a      	orrs	r2, r1
 8004e68:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004e6a:	697b      	ldr	r3, [r7, #20]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	4a91      	ldr	r2, [pc, #580]	@ (80050b4 <UART_SetConfig+0x2e4>)
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d125      	bne.n	8004ec0 <UART_SetConfig+0xf0>
 8004e74:	4b90      	ldr	r3, [pc, #576]	@ (80050b8 <UART_SetConfig+0x2e8>)
 8004e76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e7a:	f003 0303 	and.w	r3, r3, #3
 8004e7e:	2b03      	cmp	r3, #3
 8004e80:	d81a      	bhi.n	8004eb8 <UART_SetConfig+0xe8>
 8004e82:	a201      	add	r2, pc, #4	@ (adr r2, 8004e88 <UART_SetConfig+0xb8>)
 8004e84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e88:	08004e99 	.word	0x08004e99
 8004e8c:	08004ea9 	.word	0x08004ea9
 8004e90:	08004ea1 	.word	0x08004ea1
 8004e94:	08004eb1 	.word	0x08004eb1
 8004e98:	2301      	movs	r3, #1
 8004e9a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004e9e:	e0d6      	b.n	800504e <UART_SetConfig+0x27e>
 8004ea0:	2302      	movs	r3, #2
 8004ea2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004ea6:	e0d2      	b.n	800504e <UART_SetConfig+0x27e>
 8004ea8:	2304      	movs	r3, #4
 8004eaa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004eae:	e0ce      	b.n	800504e <UART_SetConfig+0x27e>
 8004eb0:	2308      	movs	r3, #8
 8004eb2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004eb6:	e0ca      	b.n	800504e <UART_SetConfig+0x27e>
 8004eb8:	2310      	movs	r3, #16
 8004eba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004ebe:	e0c6      	b.n	800504e <UART_SetConfig+0x27e>
 8004ec0:	697b      	ldr	r3, [r7, #20]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4a7d      	ldr	r2, [pc, #500]	@ (80050bc <UART_SetConfig+0x2ec>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d138      	bne.n	8004f3c <UART_SetConfig+0x16c>
 8004eca:	4b7b      	ldr	r3, [pc, #492]	@ (80050b8 <UART_SetConfig+0x2e8>)
 8004ecc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ed0:	f003 030c 	and.w	r3, r3, #12
 8004ed4:	2b0c      	cmp	r3, #12
 8004ed6:	d82d      	bhi.n	8004f34 <UART_SetConfig+0x164>
 8004ed8:	a201      	add	r2, pc, #4	@ (adr r2, 8004ee0 <UART_SetConfig+0x110>)
 8004eda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ede:	bf00      	nop
 8004ee0:	08004f15 	.word	0x08004f15
 8004ee4:	08004f35 	.word	0x08004f35
 8004ee8:	08004f35 	.word	0x08004f35
 8004eec:	08004f35 	.word	0x08004f35
 8004ef0:	08004f25 	.word	0x08004f25
 8004ef4:	08004f35 	.word	0x08004f35
 8004ef8:	08004f35 	.word	0x08004f35
 8004efc:	08004f35 	.word	0x08004f35
 8004f00:	08004f1d 	.word	0x08004f1d
 8004f04:	08004f35 	.word	0x08004f35
 8004f08:	08004f35 	.word	0x08004f35
 8004f0c:	08004f35 	.word	0x08004f35
 8004f10:	08004f2d 	.word	0x08004f2d
 8004f14:	2300      	movs	r3, #0
 8004f16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f1a:	e098      	b.n	800504e <UART_SetConfig+0x27e>
 8004f1c:	2302      	movs	r3, #2
 8004f1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f22:	e094      	b.n	800504e <UART_SetConfig+0x27e>
 8004f24:	2304      	movs	r3, #4
 8004f26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f2a:	e090      	b.n	800504e <UART_SetConfig+0x27e>
 8004f2c:	2308      	movs	r3, #8
 8004f2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f32:	e08c      	b.n	800504e <UART_SetConfig+0x27e>
 8004f34:	2310      	movs	r3, #16
 8004f36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f3a:	e088      	b.n	800504e <UART_SetConfig+0x27e>
 8004f3c:	697b      	ldr	r3, [r7, #20]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4a5f      	ldr	r2, [pc, #380]	@ (80050c0 <UART_SetConfig+0x2f0>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d125      	bne.n	8004f92 <UART_SetConfig+0x1c2>
 8004f46:	4b5c      	ldr	r3, [pc, #368]	@ (80050b8 <UART_SetConfig+0x2e8>)
 8004f48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f4c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004f50:	2b30      	cmp	r3, #48	@ 0x30
 8004f52:	d016      	beq.n	8004f82 <UART_SetConfig+0x1b2>
 8004f54:	2b30      	cmp	r3, #48	@ 0x30
 8004f56:	d818      	bhi.n	8004f8a <UART_SetConfig+0x1ba>
 8004f58:	2b20      	cmp	r3, #32
 8004f5a:	d00a      	beq.n	8004f72 <UART_SetConfig+0x1a2>
 8004f5c:	2b20      	cmp	r3, #32
 8004f5e:	d814      	bhi.n	8004f8a <UART_SetConfig+0x1ba>
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d002      	beq.n	8004f6a <UART_SetConfig+0x19a>
 8004f64:	2b10      	cmp	r3, #16
 8004f66:	d008      	beq.n	8004f7a <UART_SetConfig+0x1aa>
 8004f68:	e00f      	b.n	8004f8a <UART_SetConfig+0x1ba>
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f70:	e06d      	b.n	800504e <UART_SetConfig+0x27e>
 8004f72:	2302      	movs	r3, #2
 8004f74:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f78:	e069      	b.n	800504e <UART_SetConfig+0x27e>
 8004f7a:	2304      	movs	r3, #4
 8004f7c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f80:	e065      	b.n	800504e <UART_SetConfig+0x27e>
 8004f82:	2308      	movs	r3, #8
 8004f84:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f88:	e061      	b.n	800504e <UART_SetConfig+0x27e>
 8004f8a:	2310      	movs	r3, #16
 8004f8c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f90:	e05d      	b.n	800504e <UART_SetConfig+0x27e>
 8004f92:	697b      	ldr	r3, [r7, #20]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	4a4b      	ldr	r2, [pc, #300]	@ (80050c4 <UART_SetConfig+0x2f4>)
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	d125      	bne.n	8004fe8 <UART_SetConfig+0x218>
 8004f9c:	4b46      	ldr	r3, [pc, #280]	@ (80050b8 <UART_SetConfig+0x2e8>)
 8004f9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fa2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004fa6:	2bc0      	cmp	r3, #192	@ 0xc0
 8004fa8:	d016      	beq.n	8004fd8 <UART_SetConfig+0x208>
 8004faa:	2bc0      	cmp	r3, #192	@ 0xc0
 8004fac:	d818      	bhi.n	8004fe0 <UART_SetConfig+0x210>
 8004fae:	2b80      	cmp	r3, #128	@ 0x80
 8004fb0:	d00a      	beq.n	8004fc8 <UART_SetConfig+0x1f8>
 8004fb2:	2b80      	cmp	r3, #128	@ 0x80
 8004fb4:	d814      	bhi.n	8004fe0 <UART_SetConfig+0x210>
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d002      	beq.n	8004fc0 <UART_SetConfig+0x1f0>
 8004fba:	2b40      	cmp	r3, #64	@ 0x40
 8004fbc:	d008      	beq.n	8004fd0 <UART_SetConfig+0x200>
 8004fbe:	e00f      	b.n	8004fe0 <UART_SetConfig+0x210>
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004fc6:	e042      	b.n	800504e <UART_SetConfig+0x27e>
 8004fc8:	2302      	movs	r3, #2
 8004fca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004fce:	e03e      	b.n	800504e <UART_SetConfig+0x27e>
 8004fd0:	2304      	movs	r3, #4
 8004fd2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004fd6:	e03a      	b.n	800504e <UART_SetConfig+0x27e>
 8004fd8:	2308      	movs	r3, #8
 8004fda:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004fde:	e036      	b.n	800504e <UART_SetConfig+0x27e>
 8004fe0:	2310      	movs	r3, #16
 8004fe2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004fe6:	e032      	b.n	800504e <UART_SetConfig+0x27e>
 8004fe8:	697b      	ldr	r3, [r7, #20]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	4a30      	ldr	r2, [pc, #192]	@ (80050b0 <UART_SetConfig+0x2e0>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d12a      	bne.n	8005048 <UART_SetConfig+0x278>
 8004ff2:	4b31      	ldr	r3, [pc, #196]	@ (80050b8 <UART_SetConfig+0x2e8>)
 8004ff4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ff8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004ffc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005000:	d01a      	beq.n	8005038 <UART_SetConfig+0x268>
 8005002:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005006:	d81b      	bhi.n	8005040 <UART_SetConfig+0x270>
 8005008:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800500c:	d00c      	beq.n	8005028 <UART_SetConfig+0x258>
 800500e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005012:	d815      	bhi.n	8005040 <UART_SetConfig+0x270>
 8005014:	2b00      	cmp	r3, #0
 8005016:	d003      	beq.n	8005020 <UART_SetConfig+0x250>
 8005018:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800501c:	d008      	beq.n	8005030 <UART_SetConfig+0x260>
 800501e:	e00f      	b.n	8005040 <UART_SetConfig+0x270>
 8005020:	2300      	movs	r3, #0
 8005022:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005026:	e012      	b.n	800504e <UART_SetConfig+0x27e>
 8005028:	2302      	movs	r3, #2
 800502a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800502e:	e00e      	b.n	800504e <UART_SetConfig+0x27e>
 8005030:	2304      	movs	r3, #4
 8005032:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005036:	e00a      	b.n	800504e <UART_SetConfig+0x27e>
 8005038:	2308      	movs	r3, #8
 800503a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800503e:	e006      	b.n	800504e <UART_SetConfig+0x27e>
 8005040:	2310      	movs	r3, #16
 8005042:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005046:	e002      	b.n	800504e <UART_SetConfig+0x27e>
 8005048:	2310      	movs	r3, #16
 800504a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800504e:	697b      	ldr	r3, [r7, #20]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4a17      	ldr	r2, [pc, #92]	@ (80050b0 <UART_SetConfig+0x2e0>)
 8005054:	4293      	cmp	r3, r2
 8005056:	f040 80a8 	bne.w	80051aa <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800505a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800505e:	2b08      	cmp	r3, #8
 8005060:	d834      	bhi.n	80050cc <UART_SetConfig+0x2fc>
 8005062:	a201      	add	r2, pc, #4	@ (adr r2, 8005068 <UART_SetConfig+0x298>)
 8005064:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005068:	0800508d 	.word	0x0800508d
 800506c:	080050cd 	.word	0x080050cd
 8005070:	08005095 	.word	0x08005095
 8005074:	080050cd 	.word	0x080050cd
 8005078:	0800509b 	.word	0x0800509b
 800507c:	080050cd 	.word	0x080050cd
 8005080:	080050cd 	.word	0x080050cd
 8005084:	080050cd 	.word	0x080050cd
 8005088:	080050a3 	.word	0x080050a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800508c:	f7fe fa2e 	bl	80034ec <HAL_RCC_GetPCLK1Freq>
 8005090:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005092:	e021      	b.n	80050d8 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005094:	4b0c      	ldr	r3, [pc, #48]	@ (80050c8 <UART_SetConfig+0x2f8>)
 8005096:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005098:	e01e      	b.n	80050d8 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800509a:	f7fe f9b9 	bl	8003410 <HAL_RCC_GetSysClockFreq>
 800509e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80050a0:	e01a      	b.n	80050d8 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80050a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80050a6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80050a8:	e016      	b.n	80050d8 <UART_SetConfig+0x308>
 80050aa:	bf00      	nop
 80050ac:	cfff69f3 	.word	0xcfff69f3
 80050b0:	40008000 	.word	0x40008000
 80050b4:	40013800 	.word	0x40013800
 80050b8:	40021000 	.word	0x40021000
 80050bc:	40004400 	.word	0x40004400
 80050c0:	40004800 	.word	0x40004800
 80050c4:	40004c00 	.word	0x40004c00
 80050c8:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80050cc:	2300      	movs	r3, #0
 80050ce:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80050d0:	2301      	movs	r3, #1
 80050d2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80050d6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80050d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050da:	2b00      	cmp	r3, #0
 80050dc:	f000 812a 	beq.w	8005334 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80050e0:	697b      	ldr	r3, [r7, #20]
 80050e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050e4:	4a9e      	ldr	r2, [pc, #632]	@ (8005360 <UART_SetConfig+0x590>)
 80050e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80050ea:	461a      	mov	r2, r3
 80050ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050ee:	fbb3 f3f2 	udiv	r3, r3, r2
 80050f2:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80050f4:	697b      	ldr	r3, [r7, #20]
 80050f6:	685a      	ldr	r2, [r3, #4]
 80050f8:	4613      	mov	r3, r2
 80050fa:	005b      	lsls	r3, r3, #1
 80050fc:	4413      	add	r3, r2
 80050fe:	69ba      	ldr	r2, [r7, #24]
 8005100:	429a      	cmp	r2, r3
 8005102:	d305      	bcc.n	8005110 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005104:	697b      	ldr	r3, [r7, #20]
 8005106:	685b      	ldr	r3, [r3, #4]
 8005108:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800510a:	69ba      	ldr	r2, [r7, #24]
 800510c:	429a      	cmp	r2, r3
 800510e:	d903      	bls.n	8005118 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8005110:	2301      	movs	r3, #1
 8005112:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005116:	e10d      	b.n	8005334 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005118:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800511a:	2200      	movs	r2, #0
 800511c:	60bb      	str	r3, [r7, #8]
 800511e:	60fa      	str	r2, [r7, #12]
 8005120:	697b      	ldr	r3, [r7, #20]
 8005122:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005124:	4a8e      	ldr	r2, [pc, #568]	@ (8005360 <UART_SetConfig+0x590>)
 8005126:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800512a:	b29b      	uxth	r3, r3
 800512c:	2200      	movs	r2, #0
 800512e:	603b      	str	r3, [r7, #0]
 8005130:	607a      	str	r2, [r7, #4]
 8005132:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005136:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800513a:	f7fb f86d 	bl	8000218 <__aeabi_uldivmod>
 800513e:	4602      	mov	r2, r0
 8005140:	460b      	mov	r3, r1
 8005142:	4610      	mov	r0, r2
 8005144:	4619      	mov	r1, r3
 8005146:	f04f 0200 	mov.w	r2, #0
 800514a:	f04f 0300 	mov.w	r3, #0
 800514e:	020b      	lsls	r3, r1, #8
 8005150:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005154:	0202      	lsls	r2, r0, #8
 8005156:	6979      	ldr	r1, [r7, #20]
 8005158:	6849      	ldr	r1, [r1, #4]
 800515a:	0849      	lsrs	r1, r1, #1
 800515c:	2000      	movs	r0, #0
 800515e:	460c      	mov	r4, r1
 8005160:	4605      	mov	r5, r0
 8005162:	eb12 0804 	adds.w	r8, r2, r4
 8005166:	eb43 0905 	adc.w	r9, r3, r5
 800516a:	697b      	ldr	r3, [r7, #20]
 800516c:	685b      	ldr	r3, [r3, #4]
 800516e:	2200      	movs	r2, #0
 8005170:	469a      	mov	sl, r3
 8005172:	4693      	mov	fp, r2
 8005174:	4652      	mov	r2, sl
 8005176:	465b      	mov	r3, fp
 8005178:	4640      	mov	r0, r8
 800517a:	4649      	mov	r1, r9
 800517c:	f7fb f84c 	bl	8000218 <__aeabi_uldivmod>
 8005180:	4602      	mov	r2, r0
 8005182:	460b      	mov	r3, r1
 8005184:	4613      	mov	r3, r2
 8005186:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005188:	6a3b      	ldr	r3, [r7, #32]
 800518a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800518e:	d308      	bcc.n	80051a2 <UART_SetConfig+0x3d2>
 8005190:	6a3b      	ldr	r3, [r7, #32]
 8005192:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005196:	d204      	bcs.n	80051a2 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8005198:	697b      	ldr	r3, [r7, #20]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	6a3a      	ldr	r2, [r7, #32]
 800519e:	60da      	str	r2, [r3, #12]
 80051a0:	e0c8      	b.n	8005334 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 80051a2:	2301      	movs	r3, #1
 80051a4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80051a8:	e0c4      	b.n	8005334 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80051aa:	697b      	ldr	r3, [r7, #20]
 80051ac:	69db      	ldr	r3, [r3, #28]
 80051ae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80051b2:	d167      	bne.n	8005284 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 80051b4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80051b8:	2b08      	cmp	r3, #8
 80051ba:	d828      	bhi.n	800520e <UART_SetConfig+0x43e>
 80051bc:	a201      	add	r2, pc, #4	@ (adr r2, 80051c4 <UART_SetConfig+0x3f4>)
 80051be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051c2:	bf00      	nop
 80051c4:	080051e9 	.word	0x080051e9
 80051c8:	080051f1 	.word	0x080051f1
 80051cc:	080051f9 	.word	0x080051f9
 80051d0:	0800520f 	.word	0x0800520f
 80051d4:	080051ff 	.word	0x080051ff
 80051d8:	0800520f 	.word	0x0800520f
 80051dc:	0800520f 	.word	0x0800520f
 80051e0:	0800520f 	.word	0x0800520f
 80051e4:	08005207 	.word	0x08005207
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80051e8:	f7fe f980 	bl	80034ec <HAL_RCC_GetPCLK1Freq>
 80051ec:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80051ee:	e014      	b.n	800521a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80051f0:	f7fe f992 	bl	8003518 <HAL_RCC_GetPCLK2Freq>
 80051f4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80051f6:	e010      	b.n	800521a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80051f8:	4b5a      	ldr	r3, [pc, #360]	@ (8005364 <UART_SetConfig+0x594>)
 80051fa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80051fc:	e00d      	b.n	800521a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80051fe:	f7fe f907 	bl	8003410 <HAL_RCC_GetSysClockFreq>
 8005202:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005204:	e009      	b.n	800521a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005206:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800520a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800520c:	e005      	b.n	800521a <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 800520e:	2300      	movs	r3, #0
 8005210:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005212:	2301      	movs	r3, #1
 8005214:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005218:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800521a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800521c:	2b00      	cmp	r3, #0
 800521e:	f000 8089 	beq.w	8005334 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005222:	697b      	ldr	r3, [r7, #20]
 8005224:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005226:	4a4e      	ldr	r2, [pc, #312]	@ (8005360 <UART_SetConfig+0x590>)
 8005228:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800522c:	461a      	mov	r2, r3
 800522e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005230:	fbb3 f3f2 	udiv	r3, r3, r2
 8005234:	005a      	lsls	r2, r3, #1
 8005236:	697b      	ldr	r3, [r7, #20]
 8005238:	685b      	ldr	r3, [r3, #4]
 800523a:	085b      	lsrs	r3, r3, #1
 800523c:	441a      	add	r2, r3
 800523e:	697b      	ldr	r3, [r7, #20]
 8005240:	685b      	ldr	r3, [r3, #4]
 8005242:	fbb2 f3f3 	udiv	r3, r2, r3
 8005246:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005248:	6a3b      	ldr	r3, [r7, #32]
 800524a:	2b0f      	cmp	r3, #15
 800524c:	d916      	bls.n	800527c <UART_SetConfig+0x4ac>
 800524e:	6a3b      	ldr	r3, [r7, #32]
 8005250:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005254:	d212      	bcs.n	800527c <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005256:	6a3b      	ldr	r3, [r7, #32]
 8005258:	b29b      	uxth	r3, r3
 800525a:	f023 030f 	bic.w	r3, r3, #15
 800525e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005260:	6a3b      	ldr	r3, [r7, #32]
 8005262:	085b      	lsrs	r3, r3, #1
 8005264:	b29b      	uxth	r3, r3
 8005266:	f003 0307 	and.w	r3, r3, #7
 800526a:	b29a      	uxth	r2, r3
 800526c:	8bfb      	ldrh	r3, [r7, #30]
 800526e:	4313      	orrs	r3, r2
 8005270:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005272:	697b      	ldr	r3, [r7, #20]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	8bfa      	ldrh	r2, [r7, #30]
 8005278:	60da      	str	r2, [r3, #12]
 800527a:	e05b      	b.n	8005334 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800527c:	2301      	movs	r3, #1
 800527e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005282:	e057      	b.n	8005334 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005284:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005288:	2b08      	cmp	r3, #8
 800528a:	d828      	bhi.n	80052de <UART_SetConfig+0x50e>
 800528c:	a201      	add	r2, pc, #4	@ (adr r2, 8005294 <UART_SetConfig+0x4c4>)
 800528e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005292:	bf00      	nop
 8005294:	080052b9 	.word	0x080052b9
 8005298:	080052c1 	.word	0x080052c1
 800529c:	080052c9 	.word	0x080052c9
 80052a0:	080052df 	.word	0x080052df
 80052a4:	080052cf 	.word	0x080052cf
 80052a8:	080052df 	.word	0x080052df
 80052ac:	080052df 	.word	0x080052df
 80052b0:	080052df 	.word	0x080052df
 80052b4:	080052d7 	.word	0x080052d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80052b8:	f7fe f918 	bl	80034ec <HAL_RCC_GetPCLK1Freq>
 80052bc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80052be:	e014      	b.n	80052ea <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80052c0:	f7fe f92a 	bl	8003518 <HAL_RCC_GetPCLK2Freq>
 80052c4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80052c6:	e010      	b.n	80052ea <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80052c8:	4b26      	ldr	r3, [pc, #152]	@ (8005364 <UART_SetConfig+0x594>)
 80052ca:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80052cc:	e00d      	b.n	80052ea <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80052ce:	f7fe f89f 	bl	8003410 <HAL_RCC_GetSysClockFreq>
 80052d2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80052d4:	e009      	b.n	80052ea <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80052d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80052da:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80052dc:	e005      	b.n	80052ea <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 80052de:	2300      	movs	r3, #0
 80052e0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80052e2:	2301      	movs	r3, #1
 80052e4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80052e8:	bf00      	nop
    }

    if (pclk != 0U)
 80052ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d021      	beq.n	8005334 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80052f0:	697b      	ldr	r3, [r7, #20]
 80052f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052f4:	4a1a      	ldr	r2, [pc, #104]	@ (8005360 <UART_SetConfig+0x590>)
 80052f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80052fa:	461a      	mov	r2, r3
 80052fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052fe:	fbb3 f2f2 	udiv	r2, r3, r2
 8005302:	697b      	ldr	r3, [r7, #20]
 8005304:	685b      	ldr	r3, [r3, #4]
 8005306:	085b      	lsrs	r3, r3, #1
 8005308:	441a      	add	r2, r3
 800530a:	697b      	ldr	r3, [r7, #20]
 800530c:	685b      	ldr	r3, [r3, #4]
 800530e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005312:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005314:	6a3b      	ldr	r3, [r7, #32]
 8005316:	2b0f      	cmp	r3, #15
 8005318:	d909      	bls.n	800532e <UART_SetConfig+0x55e>
 800531a:	6a3b      	ldr	r3, [r7, #32]
 800531c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005320:	d205      	bcs.n	800532e <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005322:	6a3b      	ldr	r3, [r7, #32]
 8005324:	b29a      	uxth	r2, r3
 8005326:	697b      	ldr	r3, [r7, #20]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	60da      	str	r2, [r3, #12]
 800532c:	e002      	b.n	8005334 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800532e:	2301      	movs	r3, #1
 8005330:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005334:	697b      	ldr	r3, [r7, #20]
 8005336:	2201      	movs	r2, #1
 8005338:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800533c:	697b      	ldr	r3, [r7, #20]
 800533e:	2201      	movs	r2, #1
 8005340:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005344:	697b      	ldr	r3, [r7, #20]
 8005346:	2200      	movs	r2, #0
 8005348:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800534a:	697b      	ldr	r3, [r7, #20]
 800534c:	2200      	movs	r2, #0
 800534e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005350:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8005354:	4618      	mov	r0, r3
 8005356:	3730      	adds	r7, #48	@ 0x30
 8005358:	46bd      	mov	sp, r7
 800535a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800535e:	bf00      	nop
 8005360:	08006024 	.word	0x08006024
 8005364:	00f42400 	.word	0x00f42400

08005368 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005368:	b480      	push	{r7}
 800536a:	b083      	sub	sp, #12
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005374:	f003 0308 	and.w	r3, r3, #8
 8005378:	2b00      	cmp	r3, #0
 800537a:	d00a      	beq.n	8005392 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	685b      	ldr	r3, [r3, #4]
 8005382:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	430a      	orrs	r2, r1
 8005390:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005396:	f003 0301 	and.w	r3, r3, #1
 800539a:	2b00      	cmp	r3, #0
 800539c:	d00a      	beq.n	80053b4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	685b      	ldr	r3, [r3, #4]
 80053a4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	430a      	orrs	r2, r1
 80053b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053b8:	f003 0302 	and.w	r3, r3, #2
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d00a      	beq.n	80053d6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	685b      	ldr	r3, [r3, #4]
 80053c6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	430a      	orrs	r2, r1
 80053d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053da:	f003 0304 	and.w	r3, r3, #4
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d00a      	beq.n	80053f8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	685b      	ldr	r3, [r3, #4]
 80053e8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	430a      	orrs	r2, r1
 80053f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053fc:	f003 0310 	and.w	r3, r3, #16
 8005400:	2b00      	cmp	r3, #0
 8005402:	d00a      	beq.n	800541a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	689b      	ldr	r3, [r3, #8]
 800540a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	430a      	orrs	r2, r1
 8005418:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800541e:	f003 0320 	and.w	r3, r3, #32
 8005422:	2b00      	cmp	r3, #0
 8005424:	d00a      	beq.n	800543c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	689b      	ldr	r3, [r3, #8]
 800542c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	430a      	orrs	r2, r1
 800543a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005440:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005444:	2b00      	cmp	r3, #0
 8005446:	d01a      	beq.n	800547e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	685b      	ldr	r3, [r3, #4]
 800544e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	430a      	orrs	r2, r1
 800545c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005462:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005466:	d10a      	bne.n	800547e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	685b      	ldr	r3, [r3, #4]
 800546e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	430a      	orrs	r2, r1
 800547c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005482:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005486:	2b00      	cmp	r3, #0
 8005488:	d00a      	beq.n	80054a0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	685b      	ldr	r3, [r3, #4]
 8005490:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	430a      	orrs	r2, r1
 800549e:	605a      	str	r2, [r3, #4]
  }
}
 80054a0:	bf00      	nop
 80054a2:	370c      	adds	r7, #12
 80054a4:	46bd      	mov	sp, r7
 80054a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054aa:	4770      	bx	lr

080054ac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b098      	sub	sp, #96	@ 0x60
 80054b0:	af02      	add	r7, sp, #8
 80054b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2200      	movs	r2, #0
 80054b8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80054bc:	f7fb ffd6 	bl	800146c <HAL_GetTick>
 80054c0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f003 0308 	and.w	r3, r3, #8
 80054cc:	2b08      	cmp	r3, #8
 80054ce:	d12f      	bne.n	8005530 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80054d0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80054d4:	9300      	str	r3, [sp, #0]
 80054d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80054d8:	2200      	movs	r2, #0
 80054da:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80054de:	6878      	ldr	r0, [r7, #4]
 80054e0:	f000 f88e 	bl	8005600 <UART_WaitOnFlagUntilTimeout>
 80054e4:	4603      	mov	r3, r0
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d022      	beq.n	8005530 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054f2:	e853 3f00 	ldrex	r3, [r3]
 80054f6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80054f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054fa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80054fe:	653b      	str	r3, [r7, #80]	@ 0x50
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	461a      	mov	r2, r3
 8005506:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005508:	647b      	str	r3, [r7, #68]	@ 0x44
 800550a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800550c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800550e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005510:	e841 2300 	strex	r3, r2, [r1]
 8005514:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005516:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005518:	2b00      	cmp	r3, #0
 800551a:	d1e6      	bne.n	80054ea <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2220      	movs	r2, #32
 8005520:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2200      	movs	r2, #0
 8005528:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800552c:	2303      	movs	r3, #3
 800552e:	e063      	b.n	80055f8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f003 0304 	and.w	r3, r3, #4
 800553a:	2b04      	cmp	r3, #4
 800553c:	d149      	bne.n	80055d2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800553e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005542:	9300      	str	r3, [sp, #0]
 8005544:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005546:	2200      	movs	r2, #0
 8005548:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800554c:	6878      	ldr	r0, [r7, #4]
 800554e:	f000 f857 	bl	8005600 <UART_WaitOnFlagUntilTimeout>
 8005552:	4603      	mov	r3, r0
 8005554:	2b00      	cmp	r3, #0
 8005556:	d03c      	beq.n	80055d2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800555e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005560:	e853 3f00 	ldrex	r3, [r3]
 8005564:	623b      	str	r3, [r7, #32]
   return(result);
 8005566:	6a3b      	ldr	r3, [r7, #32]
 8005568:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800556c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	461a      	mov	r2, r3
 8005574:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005576:	633b      	str	r3, [r7, #48]	@ 0x30
 8005578:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800557a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800557c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800557e:	e841 2300 	strex	r3, r2, [r1]
 8005582:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005584:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005586:	2b00      	cmp	r3, #0
 8005588:	d1e6      	bne.n	8005558 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	3308      	adds	r3, #8
 8005590:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005592:	693b      	ldr	r3, [r7, #16]
 8005594:	e853 3f00 	ldrex	r3, [r3]
 8005598:	60fb      	str	r3, [r7, #12]
   return(result);
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	f023 0301 	bic.w	r3, r3, #1
 80055a0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	3308      	adds	r3, #8
 80055a8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80055aa:	61fa      	str	r2, [r7, #28]
 80055ac:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055ae:	69b9      	ldr	r1, [r7, #24]
 80055b0:	69fa      	ldr	r2, [r7, #28]
 80055b2:	e841 2300 	strex	r3, r2, [r1]
 80055b6:	617b      	str	r3, [r7, #20]
   return(result);
 80055b8:	697b      	ldr	r3, [r7, #20]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d1e5      	bne.n	800558a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2220      	movs	r2, #32
 80055c2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2200      	movs	r2, #0
 80055ca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80055ce:	2303      	movs	r3, #3
 80055d0:	e012      	b.n	80055f8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2220      	movs	r2, #32
 80055d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2220      	movs	r2, #32
 80055de:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2200      	movs	r2, #0
 80055e6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2200      	movs	r2, #0
 80055ec:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2200      	movs	r2, #0
 80055f2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80055f6:	2300      	movs	r3, #0
}
 80055f8:	4618      	mov	r0, r3
 80055fa:	3758      	adds	r7, #88	@ 0x58
 80055fc:	46bd      	mov	sp, r7
 80055fe:	bd80      	pop	{r7, pc}

08005600 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005600:	b580      	push	{r7, lr}
 8005602:	b084      	sub	sp, #16
 8005604:	af00      	add	r7, sp, #0
 8005606:	60f8      	str	r0, [r7, #12]
 8005608:	60b9      	str	r1, [r7, #8]
 800560a:	603b      	str	r3, [r7, #0]
 800560c:	4613      	mov	r3, r2
 800560e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005610:	e04f      	b.n	80056b2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005612:	69bb      	ldr	r3, [r7, #24]
 8005614:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005618:	d04b      	beq.n	80056b2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800561a:	f7fb ff27 	bl	800146c <HAL_GetTick>
 800561e:	4602      	mov	r2, r0
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	1ad3      	subs	r3, r2, r3
 8005624:	69ba      	ldr	r2, [r7, #24]
 8005626:	429a      	cmp	r2, r3
 8005628:	d302      	bcc.n	8005630 <UART_WaitOnFlagUntilTimeout+0x30>
 800562a:	69bb      	ldr	r3, [r7, #24]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d101      	bne.n	8005634 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005630:	2303      	movs	r3, #3
 8005632:	e04e      	b.n	80056d2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f003 0304 	and.w	r3, r3, #4
 800563e:	2b00      	cmp	r3, #0
 8005640:	d037      	beq.n	80056b2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005642:	68bb      	ldr	r3, [r7, #8]
 8005644:	2b80      	cmp	r3, #128	@ 0x80
 8005646:	d034      	beq.n	80056b2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005648:	68bb      	ldr	r3, [r7, #8]
 800564a:	2b40      	cmp	r3, #64	@ 0x40
 800564c:	d031      	beq.n	80056b2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	69db      	ldr	r3, [r3, #28]
 8005654:	f003 0308 	and.w	r3, r3, #8
 8005658:	2b08      	cmp	r3, #8
 800565a:	d110      	bne.n	800567e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	2208      	movs	r2, #8
 8005662:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005664:	68f8      	ldr	r0, [r7, #12]
 8005666:	f000 f838 	bl	80056da <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	2208      	movs	r2, #8
 800566e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	2200      	movs	r2, #0
 8005676:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800567a:	2301      	movs	r3, #1
 800567c:	e029      	b.n	80056d2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	69db      	ldr	r3, [r3, #28]
 8005684:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005688:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800568c:	d111      	bne.n	80056b2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005696:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005698:	68f8      	ldr	r0, [r7, #12]
 800569a:	f000 f81e 	bl	80056da <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	2220      	movs	r2, #32
 80056a2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	2200      	movs	r2, #0
 80056aa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80056ae:	2303      	movs	r3, #3
 80056b0:	e00f      	b.n	80056d2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	69da      	ldr	r2, [r3, #28]
 80056b8:	68bb      	ldr	r3, [r7, #8]
 80056ba:	4013      	ands	r3, r2
 80056bc:	68ba      	ldr	r2, [r7, #8]
 80056be:	429a      	cmp	r2, r3
 80056c0:	bf0c      	ite	eq
 80056c2:	2301      	moveq	r3, #1
 80056c4:	2300      	movne	r3, #0
 80056c6:	b2db      	uxtb	r3, r3
 80056c8:	461a      	mov	r2, r3
 80056ca:	79fb      	ldrb	r3, [r7, #7]
 80056cc:	429a      	cmp	r2, r3
 80056ce:	d0a0      	beq.n	8005612 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80056d0:	2300      	movs	r3, #0
}
 80056d2:	4618      	mov	r0, r3
 80056d4:	3710      	adds	r7, #16
 80056d6:	46bd      	mov	sp, r7
 80056d8:	bd80      	pop	{r7, pc}

080056da <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80056da:	b480      	push	{r7}
 80056dc:	b095      	sub	sp, #84	@ 0x54
 80056de:	af00      	add	r7, sp, #0
 80056e0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056ea:	e853 3f00 	ldrex	r3, [r3]
 80056ee:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80056f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056f2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80056f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	461a      	mov	r2, r3
 80056fe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005700:	643b      	str	r3, [r7, #64]	@ 0x40
 8005702:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005704:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005706:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005708:	e841 2300 	strex	r3, r2, [r1]
 800570c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800570e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005710:	2b00      	cmp	r3, #0
 8005712:	d1e6      	bne.n	80056e2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	3308      	adds	r3, #8
 800571a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800571c:	6a3b      	ldr	r3, [r7, #32]
 800571e:	e853 3f00 	ldrex	r3, [r3]
 8005722:	61fb      	str	r3, [r7, #28]
   return(result);
 8005724:	69fb      	ldr	r3, [r7, #28]
 8005726:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800572a:	f023 0301 	bic.w	r3, r3, #1
 800572e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	3308      	adds	r3, #8
 8005736:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005738:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800573a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800573c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800573e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005740:	e841 2300 	strex	r3, r2, [r1]
 8005744:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005748:	2b00      	cmp	r3, #0
 800574a:	d1e3      	bne.n	8005714 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005750:	2b01      	cmp	r3, #1
 8005752:	d118      	bne.n	8005786 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	e853 3f00 	ldrex	r3, [r3]
 8005760:	60bb      	str	r3, [r7, #8]
   return(result);
 8005762:	68bb      	ldr	r3, [r7, #8]
 8005764:	f023 0310 	bic.w	r3, r3, #16
 8005768:	647b      	str	r3, [r7, #68]	@ 0x44
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	461a      	mov	r2, r3
 8005770:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005772:	61bb      	str	r3, [r7, #24]
 8005774:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005776:	6979      	ldr	r1, [r7, #20]
 8005778:	69ba      	ldr	r2, [r7, #24]
 800577a:	e841 2300 	strex	r3, r2, [r1]
 800577e:	613b      	str	r3, [r7, #16]
   return(result);
 8005780:	693b      	ldr	r3, [r7, #16]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d1e6      	bne.n	8005754 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2220      	movs	r2, #32
 800578a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2200      	movs	r2, #0
 8005792:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2200      	movs	r2, #0
 8005798:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800579a:	bf00      	nop
 800579c:	3754      	adds	r7, #84	@ 0x54
 800579e:	46bd      	mov	sp, r7
 80057a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a4:	4770      	bx	lr

080057a6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80057a6:	b480      	push	{r7}
 80057a8:	b085      	sub	sp, #20
 80057aa:	af00      	add	r7, sp, #0
 80057ac:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80057b4:	2b01      	cmp	r3, #1
 80057b6:	d101      	bne.n	80057bc <HAL_UARTEx_DisableFifoMode+0x16>
 80057b8:	2302      	movs	r3, #2
 80057ba:	e027      	b.n	800580c <HAL_UARTEx_DisableFifoMode+0x66>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2201      	movs	r2, #1
 80057c0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2224      	movs	r2, #36	@ 0x24
 80057c8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	681a      	ldr	r2, [r3, #0]
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f022 0201 	bic.w	r2, r2, #1
 80057e2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80057ea:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2200      	movs	r2, #0
 80057f0:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	68fa      	ldr	r2, [r7, #12]
 80057f8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2220      	movs	r2, #32
 80057fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	2200      	movs	r2, #0
 8005806:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800580a:	2300      	movs	r3, #0
}
 800580c:	4618      	mov	r0, r3
 800580e:	3714      	adds	r7, #20
 8005810:	46bd      	mov	sp, r7
 8005812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005816:	4770      	bx	lr

08005818 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005818:	b580      	push	{r7, lr}
 800581a:	b084      	sub	sp, #16
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
 8005820:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005828:	2b01      	cmp	r3, #1
 800582a:	d101      	bne.n	8005830 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800582c:	2302      	movs	r3, #2
 800582e:	e02d      	b.n	800588c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2201      	movs	r2, #1
 8005834:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2224      	movs	r2, #36	@ 0x24
 800583c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	681a      	ldr	r2, [r3, #0]
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f022 0201 	bic.w	r2, r2, #1
 8005856:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	689b      	ldr	r3, [r3, #8]
 800585e:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	683a      	ldr	r2, [r7, #0]
 8005868:	430a      	orrs	r2, r1
 800586a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800586c:	6878      	ldr	r0, [r7, #4]
 800586e:	f000 f84f 	bl	8005910 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	68fa      	ldr	r2, [r7, #12]
 8005878:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	2220      	movs	r2, #32
 800587e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2200      	movs	r2, #0
 8005886:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800588a:	2300      	movs	r3, #0
}
 800588c:	4618      	mov	r0, r3
 800588e:	3710      	adds	r7, #16
 8005890:	46bd      	mov	sp, r7
 8005892:	bd80      	pop	{r7, pc}

08005894 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b084      	sub	sp, #16
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
 800589c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80058a4:	2b01      	cmp	r3, #1
 80058a6:	d101      	bne.n	80058ac <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80058a8:	2302      	movs	r3, #2
 80058aa:	e02d      	b.n	8005908 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2201      	movs	r2, #1
 80058b0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2224      	movs	r2, #36	@ 0x24
 80058b8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	681a      	ldr	r2, [r3, #0]
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f022 0201 	bic.w	r2, r2, #1
 80058d2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	689b      	ldr	r3, [r3, #8]
 80058da:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	683a      	ldr	r2, [r7, #0]
 80058e4:	430a      	orrs	r2, r1
 80058e6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80058e8:	6878      	ldr	r0, [r7, #4]
 80058ea:	f000 f811 	bl	8005910 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	68fa      	ldr	r2, [r7, #12]
 80058f4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	2220      	movs	r2, #32
 80058fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2200      	movs	r2, #0
 8005902:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005906:	2300      	movs	r3, #0
}
 8005908:	4618      	mov	r0, r3
 800590a:	3710      	adds	r7, #16
 800590c:	46bd      	mov	sp, r7
 800590e:	bd80      	pop	{r7, pc}

08005910 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005910:	b480      	push	{r7}
 8005912:	b085      	sub	sp, #20
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800591c:	2b00      	cmp	r3, #0
 800591e:	d108      	bne.n	8005932 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2201      	movs	r2, #1
 8005924:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2201      	movs	r2, #1
 800592c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005930:	e031      	b.n	8005996 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005932:	2308      	movs	r3, #8
 8005934:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005936:	2308      	movs	r3, #8
 8005938:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	689b      	ldr	r3, [r3, #8]
 8005940:	0e5b      	lsrs	r3, r3, #25
 8005942:	b2db      	uxtb	r3, r3
 8005944:	f003 0307 	and.w	r3, r3, #7
 8005948:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	689b      	ldr	r3, [r3, #8]
 8005950:	0f5b      	lsrs	r3, r3, #29
 8005952:	b2db      	uxtb	r3, r3
 8005954:	f003 0307 	and.w	r3, r3, #7
 8005958:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800595a:	7bbb      	ldrb	r3, [r7, #14]
 800595c:	7b3a      	ldrb	r2, [r7, #12]
 800595e:	4911      	ldr	r1, [pc, #68]	@ (80059a4 <UARTEx_SetNbDataToProcess+0x94>)
 8005960:	5c8a      	ldrb	r2, [r1, r2]
 8005962:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005966:	7b3a      	ldrb	r2, [r7, #12]
 8005968:	490f      	ldr	r1, [pc, #60]	@ (80059a8 <UARTEx_SetNbDataToProcess+0x98>)
 800596a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800596c:	fb93 f3f2 	sdiv	r3, r3, r2
 8005970:	b29a      	uxth	r2, r3
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005978:	7bfb      	ldrb	r3, [r7, #15]
 800597a:	7b7a      	ldrb	r2, [r7, #13]
 800597c:	4909      	ldr	r1, [pc, #36]	@ (80059a4 <UARTEx_SetNbDataToProcess+0x94>)
 800597e:	5c8a      	ldrb	r2, [r1, r2]
 8005980:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005984:	7b7a      	ldrb	r2, [r7, #13]
 8005986:	4908      	ldr	r1, [pc, #32]	@ (80059a8 <UARTEx_SetNbDataToProcess+0x98>)
 8005988:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800598a:	fb93 f3f2 	sdiv	r3, r3, r2
 800598e:	b29a      	uxth	r2, r3
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8005996:	bf00      	nop
 8005998:	3714      	adds	r7, #20
 800599a:	46bd      	mov	sp, r7
 800599c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a0:	4770      	bx	lr
 80059a2:	bf00      	nop
 80059a4:	0800603c 	.word	0x0800603c
 80059a8:	08006044 	.word	0x08006044

080059ac <BNO055_Init>:

//Setup Offsets


HAL_StatusTypeDef BNO055_Init(BNO055_Structure *bno, I2C_HandleTypeDef *hi2cx, uint8_t addr, OPRMode mode)
{
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b08a      	sub	sp, #40	@ 0x28
 80059b0:	af04      	add	r7, sp, #16
 80059b2:	60f8      	str	r0, [r7, #12]
 80059b4:	60b9      	str	r1, [r7, #8]
 80059b6:	4611      	mov	r1, r2
 80059b8:	461a      	mov	r2, r3
 80059ba:	460b      	mov	r3, r1
 80059bc:	71fb      	strb	r3, [r7, #7]
 80059be:	4613      	mov	r3, r2
 80059c0:	71bb      	strb	r3, [r7, #6]
	uint8_t txbuffer;
	uint8_t rxbuffer;

	bno->hi2cx = hi2cx;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	68ba      	ldr	r2, [r7, #8]
 80059c6:	601a      	str	r2, [r3, #0]
	bno->address = BNO055_ADD_H;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	2252      	movs	r2, #82	@ 0x52
 80059cc:	711a      	strb	r2, [r3, #4]
	if (addr == 0) bno->address = BNO055_ADD_L;
 80059ce:	79fb      	ldrb	r3, [r7, #7]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d102      	bne.n	80059da <BNO055_Init+0x2e>
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	2250      	movs	r2, #80	@ 0x50
 80059d8:	711a      	strb	r2, [r3, #4]

	HAL_I2C_Mem_Read(bno->hi2cx, bno->address, CHIP_ID, 1, &rxbuffer, 1, 10);
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	6818      	ldr	r0, [r3, #0]
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	791b      	ldrb	r3, [r3, #4]
 80059e2:	4619      	mov	r1, r3
 80059e4:	230a      	movs	r3, #10
 80059e6:	9302      	str	r3, [sp, #8]
 80059e8:	2301      	movs	r3, #1
 80059ea:	9301      	str	r3, [sp, #4]
 80059ec:	f107 0316 	add.w	r3, r7, #22
 80059f0:	9300      	str	r3, [sp, #0]
 80059f2:	2301      	movs	r3, #1
 80059f4:	2200      	movs	r2, #0
 80059f6:	f7fc fb7b 	bl	80020f0 <HAL_I2C_Mem_Read>
	if (rxbuffer != 0xA0) {
 80059fa:	7dbb      	ldrb	r3, [r7, #22]
 80059fc:	2ba0      	cmp	r3, #160	@ 0xa0
 80059fe:	d018      	beq.n	8005a32 <BNO055_Init+0x86>
		HAL_Delay(1000);
 8005a00:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8005a04:	f7fb fd3e 	bl	8001484 <HAL_Delay>
		HAL_I2C_Mem_Read(bno->hi2cx, bno->address, CHIP_ID, 1, &rxbuffer, 1, 10);
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	6818      	ldr	r0, [r3, #0]
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	791b      	ldrb	r3, [r3, #4]
 8005a10:	4619      	mov	r1, r3
 8005a12:	230a      	movs	r3, #10
 8005a14:	9302      	str	r3, [sp, #8]
 8005a16:	2301      	movs	r3, #1
 8005a18:	9301      	str	r3, [sp, #4]
 8005a1a:	f107 0316 	add.w	r3, r7, #22
 8005a1e:	9300      	str	r3, [sp, #0]
 8005a20:	2301      	movs	r3, #1
 8005a22:	2200      	movs	r2, #0
 8005a24:	f7fc fb64 	bl	80020f0 <HAL_I2C_Mem_Read>
		if (rxbuffer != 0xA0) return HAL_ERROR;
 8005a28:	7dbb      	ldrb	r3, [r7, #22]
 8005a2a:	2ba0      	cmp	r3, #160	@ 0xa0
 8005a2c:	d001      	beq.n	8005a32 <BNO055_Init+0x86>
 8005a2e:	2301      	movs	r3, #1
 8005a30:	e0a8      	b.n	8005b84 <BNO055_Init+0x1d8>
	}

	HAL_I2C_Mem_Read(bno->hi2cx, bno->address, OPR_MODE, 1, &bno->RxBuffer[8], 1, 10);
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	6818      	ldr	r0, [r3, #0]
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	791b      	ldrb	r3, [r3, #4]
 8005a3a:	4619      	mov	r1, r3
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	335a      	adds	r3, #90	@ 0x5a
 8005a40:	220a      	movs	r2, #10
 8005a42:	9202      	str	r2, [sp, #8]
 8005a44:	2201      	movs	r2, #1
 8005a46:	9201      	str	r2, [sp, #4]
 8005a48:	9300      	str	r3, [sp, #0]
 8005a4a:	2301      	movs	r3, #1
 8005a4c:	223d      	movs	r2, #61	@ 0x3d
 8005a4e:	f7fc fb4f 	bl	80020f0 <HAL_I2C_Mem_Read>

	txbuffer = CONFIGMODE;
 8005a52:	2300      	movs	r3, #0
 8005a54:	75fb      	strb	r3, [r7, #23]
	HAL_I2C_Mem_Write(bno->hi2cx, bno->address, OPR_MODE, 1, &txbuffer, 1, 10);
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	6818      	ldr	r0, [r3, #0]
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	791b      	ldrb	r3, [r3, #4]
 8005a5e:	4619      	mov	r1, r3
 8005a60:	230a      	movs	r3, #10
 8005a62:	9302      	str	r3, [sp, #8]
 8005a64:	2301      	movs	r3, #1
 8005a66:	9301      	str	r3, [sp, #4]
 8005a68:	f107 0317 	add.w	r3, r7, #23
 8005a6c:	9300      	str	r3, [sp, #0]
 8005a6e:	2301      	movs	r3, #1
 8005a70:	223d      	movs	r2, #61	@ 0x3d
 8005a72:	f7fc fa29 	bl	8001ec8 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8005a76:	200a      	movs	r0, #10
 8005a78:	f7fb fd04 	bl	8001484 <HAL_Delay>

	txbuffer = 0x20;
 8005a7c:	2320      	movs	r3, #32
 8005a7e:	75fb      	strb	r3, [r7, #23]
	HAL_I2C_Mem_Write(bno->hi2cx, bno->address, SYS_TRIGGER, 1, &txbuffer, 1, 10);
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	6818      	ldr	r0, [r3, #0]
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	791b      	ldrb	r3, [r3, #4]
 8005a88:	4619      	mov	r1, r3
 8005a8a:	230a      	movs	r3, #10
 8005a8c:	9302      	str	r3, [sp, #8]
 8005a8e:	2301      	movs	r3, #1
 8005a90:	9301      	str	r3, [sp, #4]
 8005a92:	f107 0317 	add.w	r3, r7, #23
 8005a96:	9300      	str	r3, [sp, #0]
 8005a98:	2301      	movs	r3, #1
 8005a9a:	223f      	movs	r2, #63	@ 0x3f
 8005a9c:	f7fc fa14 	bl	8001ec8 <HAL_I2C_Mem_Write>
	HAL_Delay(30);
 8005aa0:	201e      	movs	r0, #30
 8005aa2:	f7fb fcef 	bl	8001484 <HAL_Delay>

	do {
		HAL_I2C_Mem_Read(bno->hi2cx, bno->address, CHIP_ID, 1, &rxbuffer, 1, 10);
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	6818      	ldr	r0, [r3, #0]
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	791b      	ldrb	r3, [r3, #4]
 8005aae:	4619      	mov	r1, r3
 8005ab0:	230a      	movs	r3, #10
 8005ab2:	9302      	str	r3, [sp, #8]
 8005ab4:	2301      	movs	r3, #1
 8005ab6:	9301      	str	r3, [sp, #4]
 8005ab8:	f107 0316 	add.w	r3, r7, #22
 8005abc:	9300      	str	r3, [sp, #0]
 8005abe:	2301      	movs	r3, #1
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	f7fc fb15 	bl	80020f0 <HAL_I2C_Mem_Read>
	} while (rxbuffer != 0xA0);
 8005ac6:	7dbb      	ldrb	r3, [r7, #22]
 8005ac8:	2ba0      	cmp	r3, #160	@ 0xa0
 8005aca:	d1ec      	bne.n	8005aa6 <BNO055_Init+0xfa>
	HAL_Delay(50);
 8005acc:	2032      	movs	r0, #50	@ 0x32
 8005ace:	f7fb fcd9 	bl	8001484 <HAL_Delay>

	txbuffer = Normal_Mode;
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	75fb      	strb	r3, [r7, #23]
	HAL_I2C_Mem_Write(bno->hi2cx, bno->address, PWR_MODE, 1, &txbuffer, 1, 10);
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	6818      	ldr	r0, [r3, #0]
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	791b      	ldrb	r3, [r3, #4]
 8005ade:	4619      	mov	r1, r3
 8005ae0:	230a      	movs	r3, #10
 8005ae2:	9302      	str	r3, [sp, #8]
 8005ae4:	2301      	movs	r3, #1
 8005ae6:	9301      	str	r3, [sp, #4]
 8005ae8:	f107 0317 	add.w	r3, r7, #23
 8005aec:	9300      	str	r3, [sp, #0]
 8005aee:	2301      	movs	r3, #1
 8005af0:	223e      	movs	r2, #62	@ 0x3e
 8005af2:	f7fc f9e9 	bl	8001ec8 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8005af6:	200a      	movs	r0, #10
 8005af8:	f7fb fcc4 	bl	8001484 <HAL_Delay>

	txbuffer = Page_ID_00;
 8005afc:	2300      	movs	r3, #0
 8005afe:	75fb      	strb	r3, [r7, #23]
	HAL_I2C_Mem_Write(bno->hi2cx, bno->address, PAGE_ID, 1, &txbuffer, 1, 10);
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	6818      	ldr	r0, [r3, #0]
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	791b      	ldrb	r3, [r3, #4]
 8005b08:	4619      	mov	r1, r3
 8005b0a:	230a      	movs	r3, #10
 8005b0c:	9302      	str	r3, [sp, #8]
 8005b0e:	2301      	movs	r3, #1
 8005b10:	9301      	str	r3, [sp, #4]
 8005b12:	f107 0317 	add.w	r3, r7, #23
 8005b16:	9300      	str	r3, [sp, #0]
 8005b18:	2301      	movs	r3, #1
 8005b1a:	2207      	movs	r2, #7
 8005b1c:	f7fc f9d4 	bl	8001ec8 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8005b20:	200a      	movs	r0, #10
 8005b22:	f7fb fcaf 	bl	8001484 <HAL_Delay>

	txbuffer = 0x00;
 8005b26:	2300      	movs	r3, #0
 8005b28:	75fb      	strb	r3, [r7, #23]
	HAL_I2C_Mem_Write(bno->hi2cx, bno->address, SYS_TRIGGER, 1, &txbuffer, 1, 10);
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	6818      	ldr	r0, [r3, #0]
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	791b      	ldrb	r3, [r3, #4]
 8005b32:	4619      	mov	r1, r3
 8005b34:	230a      	movs	r3, #10
 8005b36:	9302      	str	r3, [sp, #8]
 8005b38:	2301      	movs	r3, #1
 8005b3a:	9301      	str	r3, [sp, #4]
 8005b3c:	f107 0317 	add.w	r3, r7, #23
 8005b40:	9300      	str	r3, [sp, #0]
 8005b42:	2301      	movs	r3, #1
 8005b44:	223f      	movs	r2, #63	@ 0x3f
 8005b46:	f7fc f9bf 	bl	8001ec8 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8005b4a:	200a      	movs	r0, #10
 8005b4c:	f7fb fc9a 	bl	8001484 <HAL_Delay>

	txbuffer = NDOF;
 8005b50:	230c      	movs	r3, #12
 8005b52:	75fb      	strb	r3, [r7, #23]
	bno->TxBuffer[0] = mode;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	79ba      	ldrb	r2, [r7, #6]
 8005b58:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
	HAL_I2C_Mem_Write(bno->hi2cx, bno->address, OPR_MODE, 1, &txbuffer, 1, 10);
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	6818      	ldr	r0, [r3, #0]
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	791b      	ldrb	r3, [r3, #4]
 8005b64:	4619      	mov	r1, r3
 8005b66:	230a      	movs	r3, #10
 8005b68:	9302      	str	r3, [sp, #8]
 8005b6a:	2301      	movs	r3, #1
 8005b6c:	9301      	str	r3, [sp, #4]
 8005b6e:	f107 0317 	add.w	r3, r7, #23
 8005b72:	9300      	str	r3, [sp, #0]
 8005b74:	2301      	movs	r3, #1
 8005b76:	223d      	movs	r2, #61	@ 0x3d
 8005b78:	f7fc f9a6 	bl	8001ec8 <HAL_I2C_Mem_Write>
	HAL_Delay(30);
 8005b7c:	201e      	movs	r0, #30
 8005b7e:	f7fb fc81 	bl	8001484 <HAL_Delay>

	return HAL_OK;
 8005b82:	2300      	movs	r3, #0
}
 8005b84:	4618      	mov	r0, r3
 8005b86:	3718      	adds	r7, #24
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	bd80      	pop	{r7, pc}

08005b8c <BNO055_getCalibration>:

void BNO055_getCalibration(BNO055_Structure *bno, uint8_t *sys, uint8_t *gyro, uint8_t *accel, uint8_t *mag)
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b088      	sub	sp, #32
 8005b90:	af04      	add	r7, sp, #16
 8005b92:	60f8      	str	r0, [r7, #12]
 8005b94:	60b9      	str	r1, [r7, #8]
 8005b96:	607a      	str	r2, [r7, #4]
 8005b98:	603b      	str	r3, [r7, #0]
	bno->TxBuffer[0] = Page_ID_00;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70

	HAL_I2C_Mem_Write(bno->hi2cx, bno->address, PAGE_ID, 1, &bno->TxBuffer[0], 1, 10);
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	6818      	ldr	r0, [r3, #0]
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	791b      	ldrb	r3, [r3, #4]
 8005baa:	4619      	mov	r1, r3
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	3370      	adds	r3, #112	@ 0x70
 8005bb0:	220a      	movs	r2, #10
 8005bb2:	9202      	str	r2, [sp, #8]
 8005bb4:	2201      	movs	r2, #1
 8005bb6:	9201      	str	r2, [sp, #4]
 8005bb8:	9300      	str	r3, [sp, #0]
 8005bba:	2301      	movs	r3, #1
 8005bbc:	2207      	movs	r2, #7
 8005bbe:	f7fc f983 	bl	8001ec8 <HAL_I2C_Mem_Write>

	HAL_Delay(10);
 8005bc2:	200a      	movs	r0, #10
 8005bc4:	f7fb fc5e 	bl	8001484 <HAL_Delay>
	HAL_I2C_Mem_Read(bno->hi2cx, bno->address, CALIB_STAT, 1, bno->RxBuffer, 1, 10);
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	6818      	ldr	r0, [r3, #0]
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	791b      	ldrb	r3, [r3, #4]
 8005bd0:	4619      	mov	r1, r3
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	3352      	adds	r3, #82	@ 0x52
 8005bd6:	220a      	movs	r2, #10
 8005bd8:	9202      	str	r2, [sp, #8]
 8005bda:	2201      	movs	r2, #1
 8005bdc:	9201      	str	r2, [sp, #4]
 8005bde:	9300      	str	r3, [sp, #0]
 8005be0:	2301      	movs	r3, #1
 8005be2:	2235      	movs	r2, #53	@ 0x35
 8005be4:	f7fc fa84 	bl	80020f0 <HAL_I2C_Mem_Read>


	if (sys != NULL) {
 8005be8:	68bb      	ldr	r3, [r7, #8]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d006      	beq.n	8005bfc <BNO055_getCalibration+0x70>
		*sys = (bno->RxBuffer[0] >> 6) & 0x03;
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 8005bf4:	099b      	lsrs	r3, r3, #6
 8005bf6:	b2da      	uxtb	r2, r3
 8005bf8:	68bb      	ldr	r3, [r7, #8]
 8005bfa:	701a      	strb	r2, [r3, #0]
	}
	if (gyro != NULL) {
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d009      	beq.n	8005c16 <BNO055_getCalibration+0x8a>
		*gyro = (bno->RxBuffer[0] >> 4) & 0x03;
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 8005c08:	091b      	lsrs	r3, r3, #4
 8005c0a:	b2db      	uxtb	r3, r3
 8005c0c:	f003 0303 	and.w	r3, r3, #3
 8005c10:	b2da      	uxtb	r2, r3
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	701a      	strb	r2, [r3, #0]
	}
	if (accel != NULL) {
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d009      	beq.n	8005c30 <BNO055_getCalibration+0xa4>
		*accel = (bno->RxBuffer[0] >> 2) & 0x03;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 8005c22:	089b      	lsrs	r3, r3, #2
 8005c24:	b2db      	uxtb	r3, r3
 8005c26:	f003 0303 	and.w	r3, r3, #3
 8005c2a:	b2da      	uxtb	r2, r3
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	701a      	strb	r2, [r3, #0]
	}
	if (mag != NULL) {
 8005c30:	69bb      	ldr	r3, [r7, #24]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d007      	beq.n	8005c46 <BNO055_getCalibration+0xba>
		*mag = bno->RxBuffer[0] & 0x03;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 8005c3c:	f003 0303 	and.w	r3, r3, #3
 8005c40:	b2da      	uxtb	r2, r3
 8005c42:	69bb      	ldr	r3, [r7, #24]
 8005c44:	701a      	strb	r2, [r3, #0]
	}
}
 8005c46:	bf00      	nop
 8005c48:	3710      	adds	r7, #16
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	bd80      	pop	{r7, pc}
	...

08005c50 <BNO055_isFullyCalibrated>:

HAL_StatusTypeDef BNO055_isFullyCalibrated(BNO055_Structure *bno)
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b088      	sub	sp, #32
 8005c54:	af04      	add	r7, sp, #16
 8005c56:	6078      	str	r0, [r7, #4]
	uint8_t check_config = (BNO055_read8(bno, OPR_MODE) & 0x0F);
 8005c58:	213d      	movs	r1, #61	@ 0x3d
 8005c5a:	6878      	ldr	r0, [r7, #4]
 8005c5c:	f000 f976 	bl	8005f4c <BNO055_read8>
 8005c60:	4603      	mov	r3, r0
 8005c62:	f003 030f 	and.w	r3, r3, #15
 8005c66:	73fb      	strb	r3, [r7, #15]
	uint8_t txbuffer;
	txbuffer = NDOF;
 8005c68:	230c      	movs	r3, #12
 8005c6a:	737b      	strb	r3, [r7, #13]
	if (check_config != NDOF){
 8005c6c:	7bfb      	ldrb	r3, [r7, #15]
 8005c6e:	2b0c      	cmp	r3, #12
 8005c70:	d02b      	beq.n	8005cca <BNO055_isFullyCalibrated+0x7a>
		HAL_I2C_Mem_Write(bno->hi2cx, bno->address, OPR_MODE, 1, &txbuffer, 1, 10);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6818      	ldr	r0, [r3, #0]
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	791b      	ldrb	r3, [r3, #4]
 8005c7a:	4619      	mov	r1, r3
 8005c7c:	230a      	movs	r3, #10
 8005c7e:	9302      	str	r3, [sp, #8]
 8005c80:	2301      	movs	r3, #1
 8005c82:	9301      	str	r3, [sp, #4]
 8005c84:	f107 030d 	add.w	r3, r7, #13
 8005c88:	9300      	str	r3, [sp, #0]
 8005c8a:	2301      	movs	r3, #1
 8005c8c:	223d      	movs	r2, #61	@ 0x3d
 8005c8e:	f7fc f91b 	bl	8001ec8 <HAL_I2C_Mem_Write>
		HAL_Delay(20);
 8005c92:	2014      	movs	r0, #20
 8005c94:	f7fb fbf6 	bl	8001484 <HAL_Delay>

		HAL_I2C_Mem_Read(bno->hi2cx, bno->address, OPR_MODE, 1, bno->RxBuffer, 1, 10);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	6818      	ldr	r0, [r3, #0]
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	791b      	ldrb	r3, [r3, #4]
 8005ca0:	4619      	mov	r1, r3
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	3352      	adds	r3, #82	@ 0x52
 8005ca6:	220a      	movs	r2, #10
 8005ca8:	9202      	str	r2, [sp, #8]
 8005caa:	2201      	movs	r2, #1
 8005cac:	9201      	str	r2, [sp, #4]
 8005cae:	9300      	str	r3, [sp, #0]
 8005cb0:	2301      	movs	r3, #1
 8005cb2:	223d      	movs	r2, #61	@ 0x3d
 8005cb4:	f7fc fa1c 	bl	80020f0 <HAL_I2C_Mem_Read>
		uint8_t Rx = bno->RxBuffer[0] & 0x0F;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 8005cbe:	f003 030f 	and.w	r3, r3, #15
 8005cc2:	73bb      	strb	r3, [r7, #14]
		HAL_Delay(20);
 8005cc4:	2014      	movs	r0, #20
 8005cc6:	f7fb fbdd 	bl	8001484 <HAL_Delay>
	}

	bno->mode = NDOF;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	220c      	movs	r2, #12
 8005cce:	715a      	strb	r2, [r3, #5]
	uint8_t system, gyro, accel, mag;

	BNO055_getCalibration(bno, &system, &gyro, &accel, &mag);
 8005cd0:	f107 000a 	add.w	r0, r7, #10
 8005cd4:	f107 020b 	add.w	r2, r7, #11
 8005cd8:	f107 010c 	add.w	r1, r7, #12
 8005cdc:	f107 0309 	add.w	r3, r7, #9
 8005ce0:	9300      	str	r3, [sp, #0]
 8005ce2:	4603      	mov	r3, r0
 8005ce4:	6878      	ldr	r0, [r7, #4]
 8005ce6:	f7ff ff51 	bl	8005b8c <BNO055_getCalibration>

	switch(bno->mode){
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	795b      	ldrb	r3, [r3, #5]
 8005cee:	3b01      	subs	r3, #1
 8005cf0:	2b0b      	cmp	r3, #11
 8005cf2:	f200 8105 	bhi.w	8005f00 <BNO055_isFullyCalibrated+0x2b0>
 8005cf6:	a201      	add	r2, pc, #4	@ (adr r2, 8005cfc <BNO055_isFullyCalibrated+0xac>)
 8005cf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cfc:	08005d2d 	.word	0x08005d2d
 8005d00:	08005d37 	.word	0x08005d37
 8005d04:	08005d41 	.word	0x08005d41
 8005d08:	08005d4b 	.word	0x08005d4b
 8005d0c:	08005d75 	.word	0x08005d75
 8005d10:	08005d9f 	.word	0x08005d9f
 8005d14:	08005dc9 	.word	0x08005dc9
 8005d18:	08005e07 	.word	0x08005e07
 8005d1c:	08005e31 	.word	0x08005e31
 8005d20:	08005e5b 	.word	0x08005e5b
 8005d24:	08005e85 	.word	0x08005e85
 8005d28:	08005ec3 	.word	0x08005ec3
	case ACCONLY:
		if(accel == 3) return HAL_OK;
 8005d2c:	7abb      	ldrb	r3, [r7, #10]
 8005d2e:	2b03      	cmp	r3, #3
 8005d30:	d101      	bne.n	8005d36 <BNO055_isFullyCalibrated+0xe6>
 8005d32:	2300      	movs	r3, #0
 8005d34:	e104      	b.n	8005f40 <BNO055_isFullyCalibrated+0x2f0>
	case MAGONLY:
		if(mag == 3) return HAL_OK;
 8005d36:	7a7b      	ldrb	r3, [r7, #9]
 8005d38:	2b03      	cmp	r3, #3
 8005d3a:	d101      	bne.n	8005d40 <BNO055_isFullyCalibrated+0xf0>
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	e0ff      	b.n	8005f40 <BNO055_isFullyCalibrated+0x2f0>
	case GYROONLY:
		if(gyro == 3) return HAL_OK;
 8005d40:	7afb      	ldrb	r3, [r7, #11]
 8005d42:	2b03      	cmp	r3, #3
 8005d44:	d101      	bne.n	8005d4a <BNO055_isFullyCalibrated+0xfa>
 8005d46:	2300      	movs	r3, #0
 8005d48:	e0fa      	b.n	8005f40 <BNO055_isFullyCalibrated+0x2f0>
	case ACCMAG:
		if(accel == 3 && mag == 3) return HAL_OK;
 8005d4a:	7abb      	ldrb	r3, [r7, #10]
 8005d4c:	2b03      	cmp	r3, #3
 8005d4e:	d104      	bne.n	8005d5a <BNO055_isFullyCalibrated+0x10a>
 8005d50:	7a7b      	ldrb	r3, [r7, #9]
 8005d52:	2b03      	cmp	r3, #3
 8005d54:	d101      	bne.n	8005d5a <BNO055_isFullyCalibrated+0x10a>
 8005d56:	2300      	movs	r3, #0
 8005d58:	e0f2      	b.n	8005f40 <BNO055_isFullyCalibrated+0x2f0>
		else if (accel == 3) Calibrated.accel = HAL_OK;
 8005d5a:	7abb      	ldrb	r3, [r7, #10]
 8005d5c:	2b03      	cmp	r3, #3
 8005d5e:	d103      	bne.n	8005d68 <BNO055_isFullyCalibrated+0x118>
 8005d60:	4b79      	ldr	r3, [pc, #484]	@ (8005f48 <BNO055_isFullyCalibrated+0x2f8>)
 8005d62:	2200      	movs	r2, #0
 8005d64:	701a      	strb	r2, [r3, #0]
 8005d66:	e005      	b.n	8005d74 <BNO055_isFullyCalibrated+0x124>
		else if (mag == 3) Calibrated.mag = HAL_OK;
 8005d68:	7a7b      	ldrb	r3, [r7, #9]
 8005d6a:	2b03      	cmp	r3, #3
 8005d6c:	d102      	bne.n	8005d74 <BNO055_isFullyCalibrated+0x124>
 8005d6e:	4b76      	ldr	r3, [pc, #472]	@ (8005f48 <BNO055_isFullyCalibrated+0x2f8>)
 8005d70:	2200      	movs	r2, #0
 8005d72:	705a      	strb	r2, [r3, #1]
	case ACCGYRO:
		if(accel == 3 && gyro == 3) return HAL_OK;
 8005d74:	7abb      	ldrb	r3, [r7, #10]
 8005d76:	2b03      	cmp	r3, #3
 8005d78:	d104      	bne.n	8005d84 <BNO055_isFullyCalibrated+0x134>
 8005d7a:	7afb      	ldrb	r3, [r7, #11]
 8005d7c:	2b03      	cmp	r3, #3
 8005d7e:	d101      	bne.n	8005d84 <BNO055_isFullyCalibrated+0x134>
 8005d80:	2300      	movs	r3, #0
 8005d82:	e0dd      	b.n	8005f40 <BNO055_isFullyCalibrated+0x2f0>
		else if (accel == 3) Calibrated.accel = HAL_OK;
 8005d84:	7abb      	ldrb	r3, [r7, #10]
 8005d86:	2b03      	cmp	r3, #3
 8005d88:	d103      	bne.n	8005d92 <BNO055_isFullyCalibrated+0x142>
 8005d8a:	4b6f      	ldr	r3, [pc, #444]	@ (8005f48 <BNO055_isFullyCalibrated+0x2f8>)
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	701a      	strb	r2, [r3, #0]
 8005d90:	e005      	b.n	8005d9e <BNO055_isFullyCalibrated+0x14e>
		else if (gyro) Calibrated.gyro = HAL_OK;
 8005d92:	7afb      	ldrb	r3, [r7, #11]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d002      	beq.n	8005d9e <BNO055_isFullyCalibrated+0x14e>
 8005d98:	4b6b      	ldr	r3, [pc, #428]	@ (8005f48 <BNO055_isFullyCalibrated+0x2f8>)
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	709a      	strb	r2, [r3, #2]
	case MAGGYRO:
		if(mag == 3 && gyro == 3) return HAL_OK;
 8005d9e:	7a7b      	ldrb	r3, [r7, #9]
 8005da0:	2b03      	cmp	r3, #3
 8005da2:	d104      	bne.n	8005dae <BNO055_isFullyCalibrated+0x15e>
 8005da4:	7afb      	ldrb	r3, [r7, #11]
 8005da6:	2b03      	cmp	r3, #3
 8005da8:	d101      	bne.n	8005dae <BNO055_isFullyCalibrated+0x15e>
 8005daa:	2300      	movs	r3, #0
 8005dac:	e0c8      	b.n	8005f40 <BNO055_isFullyCalibrated+0x2f0>
		else if (mag == 3) Calibrated.mag = HAL_OK;
 8005dae:	7a7b      	ldrb	r3, [r7, #9]
 8005db0:	2b03      	cmp	r3, #3
 8005db2:	d103      	bne.n	8005dbc <BNO055_isFullyCalibrated+0x16c>
 8005db4:	4b64      	ldr	r3, [pc, #400]	@ (8005f48 <BNO055_isFullyCalibrated+0x2f8>)
 8005db6:	2200      	movs	r2, #0
 8005db8:	705a      	strb	r2, [r3, #1]
 8005dba:	e005      	b.n	8005dc8 <BNO055_isFullyCalibrated+0x178>
		else if (gyro == 3) Calibrated.gyro = HAL_OK;
 8005dbc:	7afb      	ldrb	r3, [r7, #11]
 8005dbe:	2b03      	cmp	r3, #3
 8005dc0:	d102      	bne.n	8005dc8 <BNO055_isFullyCalibrated+0x178>
 8005dc2:	4b61      	ldr	r3, [pc, #388]	@ (8005f48 <BNO055_isFullyCalibrated+0x2f8>)
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	709a      	strb	r2, [r3, #2]
	case AMG:
		if(accel == 3 && mag == 3 && gyro == 3) return HAL_OK;
 8005dc8:	7abb      	ldrb	r3, [r7, #10]
 8005dca:	2b03      	cmp	r3, #3
 8005dcc:	d107      	bne.n	8005dde <BNO055_isFullyCalibrated+0x18e>
 8005dce:	7a7b      	ldrb	r3, [r7, #9]
 8005dd0:	2b03      	cmp	r3, #3
 8005dd2:	d104      	bne.n	8005dde <BNO055_isFullyCalibrated+0x18e>
 8005dd4:	7afb      	ldrb	r3, [r7, #11]
 8005dd6:	2b03      	cmp	r3, #3
 8005dd8:	d101      	bne.n	8005dde <BNO055_isFullyCalibrated+0x18e>
 8005dda:	2300      	movs	r3, #0
 8005ddc:	e0b0      	b.n	8005f40 <BNO055_isFullyCalibrated+0x2f0>
		else if (accel == 3) Calibrated.accel = HAL_OK;
 8005dde:	7abb      	ldrb	r3, [r7, #10]
 8005de0:	2b03      	cmp	r3, #3
 8005de2:	d103      	bne.n	8005dec <BNO055_isFullyCalibrated+0x19c>
 8005de4:	4b58      	ldr	r3, [pc, #352]	@ (8005f48 <BNO055_isFullyCalibrated+0x2f8>)
 8005de6:	2200      	movs	r2, #0
 8005de8:	701a      	strb	r2, [r3, #0]
 8005dea:	e00c      	b.n	8005e06 <BNO055_isFullyCalibrated+0x1b6>
		else if (mag == 3) Calibrated.mag = HAL_OK;
 8005dec:	7a7b      	ldrb	r3, [r7, #9]
 8005dee:	2b03      	cmp	r3, #3
 8005df0:	d103      	bne.n	8005dfa <BNO055_isFullyCalibrated+0x1aa>
 8005df2:	4b55      	ldr	r3, [pc, #340]	@ (8005f48 <BNO055_isFullyCalibrated+0x2f8>)
 8005df4:	2200      	movs	r2, #0
 8005df6:	705a      	strb	r2, [r3, #1]
 8005df8:	e005      	b.n	8005e06 <BNO055_isFullyCalibrated+0x1b6>
		else if (gyro == 3) Calibrated.gyro = HAL_OK;
 8005dfa:	7afb      	ldrb	r3, [r7, #11]
 8005dfc:	2b03      	cmp	r3, #3
 8005dfe:	d102      	bne.n	8005e06 <BNO055_isFullyCalibrated+0x1b6>
 8005e00:	4b51      	ldr	r3, [pc, #324]	@ (8005f48 <BNO055_isFullyCalibrated+0x2f8>)
 8005e02:	2200      	movs	r2, #0
 8005e04:	709a      	strb	r2, [r3, #2]
	case IMU:
		if(accel == 3 && gyro == 3) return HAL_OK;
 8005e06:	7abb      	ldrb	r3, [r7, #10]
 8005e08:	2b03      	cmp	r3, #3
 8005e0a:	d104      	bne.n	8005e16 <BNO055_isFullyCalibrated+0x1c6>
 8005e0c:	7afb      	ldrb	r3, [r7, #11]
 8005e0e:	2b03      	cmp	r3, #3
 8005e10:	d101      	bne.n	8005e16 <BNO055_isFullyCalibrated+0x1c6>
 8005e12:	2300      	movs	r3, #0
 8005e14:	e094      	b.n	8005f40 <BNO055_isFullyCalibrated+0x2f0>
		else if (accel == 3) Calibrated.accel = HAL_OK;
 8005e16:	7abb      	ldrb	r3, [r7, #10]
 8005e18:	2b03      	cmp	r3, #3
 8005e1a:	d103      	bne.n	8005e24 <BNO055_isFullyCalibrated+0x1d4>
 8005e1c:	4b4a      	ldr	r3, [pc, #296]	@ (8005f48 <BNO055_isFullyCalibrated+0x2f8>)
 8005e1e:	2200      	movs	r2, #0
 8005e20:	701a      	strb	r2, [r3, #0]
 8005e22:	e005      	b.n	8005e30 <BNO055_isFullyCalibrated+0x1e0>
		else if (gyro == 3) Calibrated.gyro = HAL_OK;
 8005e24:	7afb      	ldrb	r3, [r7, #11]
 8005e26:	2b03      	cmp	r3, #3
 8005e28:	d102      	bne.n	8005e30 <BNO055_isFullyCalibrated+0x1e0>
 8005e2a:	4b47      	ldr	r3, [pc, #284]	@ (8005f48 <BNO055_isFullyCalibrated+0x2f8>)
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	709a      	strb	r2, [r3, #2]
	case COMPASS:
		if(accel == 3 && mag == 3) return HAL_OK;
 8005e30:	7abb      	ldrb	r3, [r7, #10]
 8005e32:	2b03      	cmp	r3, #3
 8005e34:	d104      	bne.n	8005e40 <BNO055_isFullyCalibrated+0x1f0>
 8005e36:	7a7b      	ldrb	r3, [r7, #9]
 8005e38:	2b03      	cmp	r3, #3
 8005e3a:	d101      	bne.n	8005e40 <BNO055_isFullyCalibrated+0x1f0>
 8005e3c:	2300      	movs	r3, #0
 8005e3e:	e07f      	b.n	8005f40 <BNO055_isFullyCalibrated+0x2f0>
		else if (accel == 3) Calibrated.accel = HAL_OK;
 8005e40:	7abb      	ldrb	r3, [r7, #10]
 8005e42:	2b03      	cmp	r3, #3
 8005e44:	d103      	bne.n	8005e4e <BNO055_isFullyCalibrated+0x1fe>
 8005e46:	4b40      	ldr	r3, [pc, #256]	@ (8005f48 <BNO055_isFullyCalibrated+0x2f8>)
 8005e48:	2200      	movs	r2, #0
 8005e4a:	701a      	strb	r2, [r3, #0]
 8005e4c:	e005      	b.n	8005e5a <BNO055_isFullyCalibrated+0x20a>
		else if (mag == 3) Calibrated.mag = HAL_OK;
 8005e4e:	7a7b      	ldrb	r3, [r7, #9]
 8005e50:	2b03      	cmp	r3, #3
 8005e52:	d102      	bne.n	8005e5a <BNO055_isFullyCalibrated+0x20a>
 8005e54:	4b3c      	ldr	r3, [pc, #240]	@ (8005f48 <BNO055_isFullyCalibrated+0x2f8>)
 8005e56:	2200      	movs	r2, #0
 8005e58:	705a      	strb	r2, [r3, #1]
	case M4G:
		if(accel == 3 && mag == 3) return HAL_OK;
 8005e5a:	7abb      	ldrb	r3, [r7, #10]
 8005e5c:	2b03      	cmp	r3, #3
 8005e5e:	d104      	bne.n	8005e6a <BNO055_isFullyCalibrated+0x21a>
 8005e60:	7a7b      	ldrb	r3, [r7, #9]
 8005e62:	2b03      	cmp	r3, #3
 8005e64:	d101      	bne.n	8005e6a <BNO055_isFullyCalibrated+0x21a>
 8005e66:	2300      	movs	r3, #0
 8005e68:	e06a      	b.n	8005f40 <BNO055_isFullyCalibrated+0x2f0>
		else if (accel == 3) Calibrated.accel = HAL_OK;
 8005e6a:	7abb      	ldrb	r3, [r7, #10]
 8005e6c:	2b03      	cmp	r3, #3
 8005e6e:	d103      	bne.n	8005e78 <BNO055_isFullyCalibrated+0x228>
 8005e70:	4b35      	ldr	r3, [pc, #212]	@ (8005f48 <BNO055_isFullyCalibrated+0x2f8>)
 8005e72:	2200      	movs	r2, #0
 8005e74:	701a      	strb	r2, [r3, #0]
 8005e76:	e005      	b.n	8005e84 <BNO055_isFullyCalibrated+0x234>
		else if (mag == 3) Calibrated.mag = HAL_OK;
 8005e78:	7a7b      	ldrb	r3, [r7, #9]
 8005e7a:	2b03      	cmp	r3, #3
 8005e7c:	d102      	bne.n	8005e84 <BNO055_isFullyCalibrated+0x234>
 8005e7e:	4b32      	ldr	r3, [pc, #200]	@ (8005f48 <BNO055_isFullyCalibrated+0x2f8>)
 8005e80:	2200      	movs	r2, #0
 8005e82:	705a      	strb	r2, [r3, #1]
	case NDOF_FMC_OFF:
		if(accel == 3 && mag == 3 && gyro == 3) return HAL_OK;
 8005e84:	7abb      	ldrb	r3, [r7, #10]
 8005e86:	2b03      	cmp	r3, #3
 8005e88:	d107      	bne.n	8005e9a <BNO055_isFullyCalibrated+0x24a>
 8005e8a:	7a7b      	ldrb	r3, [r7, #9]
 8005e8c:	2b03      	cmp	r3, #3
 8005e8e:	d104      	bne.n	8005e9a <BNO055_isFullyCalibrated+0x24a>
 8005e90:	7afb      	ldrb	r3, [r7, #11]
 8005e92:	2b03      	cmp	r3, #3
 8005e94:	d101      	bne.n	8005e9a <BNO055_isFullyCalibrated+0x24a>
 8005e96:	2300      	movs	r3, #0
 8005e98:	e052      	b.n	8005f40 <BNO055_isFullyCalibrated+0x2f0>
		else if (accel == 3) Calibrated.accel = HAL_OK;
 8005e9a:	7abb      	ldrb	r3, [r7, #10]
 8005e9c:	2b03      	cmp	r3, #3
 8005e9e:	d103      	bne.n	8005ea8 <BNO055_isFullyCalibrated+0x258>
 8005ea0:	4b29      	ldr	r3, [pc, #164]	@ (8005f48 <BNO055_isFullyCalibrated+0x2f8>)
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	701a      	strb	r2, [r3, #0]
 8005ea6:	e00c      	b.n	8005ec2 <BNO055_isFullyCalibrated+0x272>
		else if (mag == 3) Calibrated.mag = HAL_OK;
 8005ea8:	7a7b      	ldrb	r3, [r7, #9]
 8005eaa:	2b03      	cmp	r3, #3
 8005eac:	d103      	bne.n	8005eb6 <BNO055_isFullyCalibrated+0x266>
 8005eae:	4b26      	ldr	r3, [pc, #152]	@ (8005f48 <BNO055_isFullyCalibrated+0x2f8>)
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	705a      	strb	r2, [r3, #1]
 8005eb4:	e005      	b.n	8005ec2 <BNO055_isFullyCalibrated+0x272>
		else if (gyro == 3) Calibrated.gyro = HAL_OK;
 8005eb6:	7afb      	ldrb	r3, [r7, #11]
 8005eb8:	2b03      	cmp	r3, #3
 8005eba:	d102      	bne.n	8005ec2 <BNO055_isFullyCalibrated+0x272>
 8005ebc:	4b22      	ldr	r3, [pc, #136]	@ (8005f48 <BNO055_isFullyCalibrated+0x2f8>)
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	709a      	strb	r2, [r3, #2]
	case NDOF:
		if(accel == 3 && mag == 3 && gyro == 3) return HAL_OK;
 8005ec2:	7abb      	ldrb	r3, [r7, #10]
 8005ec4:	2b03      	cmp	r3, #3
 8005ec6:	d107      	bne.n	8005ed8 <BNO055_isFullyCalibrated+0x288>
 8005ec8:	7a7b      	ldrb	r3, [r7, #9]
 8005eca:	2b03      	cmp	r3, #3
 8005ecc:	d104      	bne.n	8005ed8 <BNO055_isFullyCalibrated+0x288>
 8005ece:	7afb      	ldrb	r3, [r7, #11]
 8005ed0:	2b03      	cmp	r3, #3
 8005ed2:	d101      	bne.n	8005ed8 <BNO055_isFullyCalibrated+0x288>
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	e033      	b.n	8005f40 <BNO055_isFullyCalibrated+0x2f0>
		else if (accel == 3) Calibrated.accel = HAL_OK;
 8005ed8:	7abb      	ldrb	r3, [r7, #10]
 8005eda:	2b03      	cmp	r3, #3
 8005edc:	d103      	bne.n	8005ee6 <BNO055_isFullyCalibrated+0x296>
 8005ede:	4b1a      	ldr	r3, [pc, #104]	@ (8005f48 <BNO055_isFullyCalibrated+0x2f8>)
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	701a      	strb	r2, [r3, #0]
 8005ee4:	e00c      	b.n	8005f00 <BNO055_isFullyCalibrated+0x2b0>
		else if (mag == 3) Calibrated.mag = HAL_OK;
 8005ee6:	7a7b      	ldrb	r3, [r7, #9]
 8005ee8:	2b03      	cmp	r3, #3
 8005eea:	d103      	bne.n	8005ef4 <BNO055_isFullyCalibrated+0x2a4>
 8005eec:	4b16      	ldr	r3, [pc, #88]	@ (8005f48 <BNO055_isFullyCalibrated+0x2f8>)
 8005eee:	2200      	movs	r2, #0
 8005ef0:	705a      	strb	r2, [r3, #1]
 8005ef2:	e005      	b.n	8005f00 <BNO055_isFullyCalibrated+0x2b0>
		else if (gyro == 3) Calibrated.gyro = HAL_OK;
 8005ef4:	7afb      	ldrb	r3, [r7, #11]
 8005ef6:	2b03      	cmp	r3, #3
 8005ef8:	d102      	bne.n	8005f00 <BNO055_isFullyCalibrated+0x2b0>
 8005efa:	4b13      	ldr	r3, [pc, #76]	@ (8005f48 <BNO055_isFullyCalibrated+0x2f8>)
 8005efc:	2200      	movs	r2, #0
 8005efe:	709a      	strb	r2, [r3, #2]
	default:
		if(accel == 3 && mag == 3 && gyro == 3) return HAL_OK;
 8005f00:	7abb      	ldrb	r3, [r7, #10]
 8005f02:	2b03      	cmp	r3, #3
 8005f04:	d107      	bne.n	8005f16 <BNO055_isFullyCalibrated+0x2c6>
 8005f06:	7a7b      	ldrb	r3, [r7, #9]
 8005f08:	2b03      	cmp	r3, #3
 8005f0a:	d104      	bne.n	8005f16 <BNO055_isFullyCalibrated+0x2c6>
 8005f0c:	7afb      	ldrb	r3, [r7, #11]
 8005f0e:	2b03      	cmp	r3, #3
 8005f10:	d101      	bne.n	8005f16 <BNO055_isFullyCalibrated+0x2c6>
 8005f12:	2300      	movs	r3, #0
 8005f14:	e014      	b.n	8005f40 <BNO055_isFullyCalibrated+0x2f0>
		else if (accel == 3) Calibrated.accel = HAL_OK;
 8005f16:	7abb      	ldrb	r3, [r7, #10]
 8005f18:	2b03      	cmp	r3, #3
 8005f1a:	d103      	bne.n	8005f24 <BNO055_isFullyCalibrated+0x2d4>
 8005f1c:	4b0a      	ldr	r3, [pc, #40]	@ (8005f48 <BNO055_isFullyCalibrated+0x2f8>)
 8005f1e:	2200      	movs	r2, #0
 8005f20:	701a      	strb	r2, [r3, #0]
 8005f22:	e00c      	b.n	8005f3e <BNO055_isFullyCalibrated+0x2ee>
		else if (mag == 3) Calibrated.mag = HAL_OK;
 8005f24:	7a7b      	ldrb	r3, [r7, #9]
 8005f26:	2b03      	cmp	r3, #3
 8005f28:	d103      	bne.n	8005f32 <BNO055_isFullyCalibrated+0x2e2>
 8005f2a:	4b07      	ldr	r3, [pc, #28]	@ (8005f48 <BNO055_isFullyCalibrated+0x2f8>)
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	705a      	strb	r2, [r3, #1]
 8005f30:	e005      	b.n	8005f3e <BNO055_isFullyCalibrated+0x2ee>
		else if (gyro == 3) Calibrated.gyro = HAL_OK;
 8005f32:	7afb      	ldrb	r3, [r7, #11]
 8005f34:	2b03      	cmp	r3, #3
 8005f36:	d102      	bne.n	8005f3e <BNO055_isFullyCalibrated+0x2ee>
 8005f38:	4b03      	ldr	r3, [pc, #12]	@ (8005f48 <BNO055_isFullyCalibrated+0x2f8>)
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	709a      	strb	r2, [r3, #2]
	}

	return HAL_ERROR;
 8005f3e:	2301      	movs	r3, #1
}
 8005f40:	4618      	mov	r0, r3
 8005f42:	3710      	adds	r7, #16
 8005f44:	46bd      	mov	sp, r7
 8005f46:	bd80      	pop	{r7, pc}
 8005f48:	2000000c 	.word	0x2000000c

08005f4c <BNO055_read8>:
	HAL_I2C_Mem_Write(bno->hi2cx, bno->address, OPR_MODE, 1, mode, 1, 10);
	HAL_Delay(20);
}

uint8_t BNO055_read8(BNO055_Structure *bno, uint8_t Register_Address)
{
 8005f4c:	b590      	push	{r4, r7, lr}
 8005f4e:	b089      	sub	sp, #36	@ 0x24
 8005f50:	af04      	add	r7, sp, #16
 8005f52:	6078      	str	r0, [r7, #4]
 8005f54:	460b      	mov	r3, r1
 8005f56:	70fb      	strb	r3, [r7, #3]
	uint16_t Register_Address_u16 = Register_Address;
 8005f58:	78fb      	ldrb	r3, [r7, #3]
 8005f5a:	81fb      	strh	r3, [r7, #14]
	HAL_I2C_Mem_Read(bno->hi2cx, bno->address, Register_Address_u16, 1, bno->RxBuffer, 1, 10);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	6818      	ldr	r0, [r3, #0]
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	791b      	ldrb	r3, [r3, #4]
 8005f64:	461c      	mov	r4, r3
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	3352      	adds	r3, #82	@ 0x52
 8005f6a:	89fa      	ldrh	r2, [r7, #14]
 8005f6c:	210a      	movs	r1, #10
 8005f6e:	9102      	str	r1, [sp, #8]
 8005f70:	2101      	movs	r1, #1
 8005f72:	9101      	str	r1, [sp, #4]
 8005f74:	9300      	str	r3, [sp, #0]
 8005f76:	2301      	movs	r3, #1
 8005f78:	4621      	mov	r1, r4
 8005f7a:	f7fc f8b9 	bl	80020f0 <HAL_I2C_Mem_Read>
	uint8_t Rx = bno->RxBuffer[0];
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 8005f84:	737b      	strb	r3, [r7, #13]
	HAL_Delay(20);
 8005f86:	2014      	movs	r0, #20
 8005f88:	f7fb fa7c 	bl	8001484 <HAL_Delay>

	return bno->RxBuffer[0];
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
}
 8005f92:	4618      	mov	r0, r3
 8005f94:	3714      	adds	r7, #20
 8005f96:	46bd      	mov	sp, r7
 8005f98:	bd90      	pop	{r4, r7, pc}

08005f9a <memset>:
 8005f9a:	4402      	add	r2, r0
 8005f9c:	4603      	mov	r3, r0
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d100      	bne.n	8005fa4 <memset+0xa>
 8005fa2:	4770      	bx	lr
 8005fa4:	f803 1b01 	strb.w	r1, [r3], #1
 8005fa8:	e7f9      	b.n	8005f9e <memset+0x4>
	...

08005fac <__libc_init_array>:
 8005fac:	b570      	push	{r4, r5, r6, lr}
 8005fae:	4d0d      	ldr	r5, [pc, #52]	@ (8005fe4 <__libc_init_array+0x38>)
 8005fb0:	4c0d      	ldr	r4, [pc, #52]	@ (8005fe8 <__libc_init_array+0x3c>)
 8005fb2:	1b64      	subs	r4, r4, r5
 8005fb4:	10a4      	asrs	r4, r4, #2
 8005fb6:	2600      	movs	r6, #0
 8005fb8:	42a6      	cmp	r6, r4
 8005fba:	d109      	bne.n	8005fd0 <__libc_init_array+0x24>
 8005fbc:	4d0b      	ldr	r5, [pc, #44]	@ (8005fec <__libc_init_array+0x40>)
 8005fbe:	4c0c      	ldr	r4, [pc, #48]	@ (8005ff0 <__libc_init_array+0x44>)
 8005fc0:	f000 f818 	bl	8005ff4 <_init>
 8005fc4:	1b64      	subs	r4, r4, r5
 8005fc6:	10a4      	asrs	r4, r4, #2
 8005fc8:	2600      	movs	r6, #0
 8005fca:	42a6      	cmp	r6, r4
 8005fcc:	d105      	bne.n	8005fda <__libc_init_array+0x2e>
 8005fce:	bd70      	pop	{r4, r5, r6, pc}
 8005fd0:	f855 3b04 	ldr.w	r3, [r5], #4
 8005fd4:	4798      	blx	r3
 8005fd6:	3601      	adds	r6, #1
 8005fd8:	e7ee      	b.n	8005fb8 <__libc_init_array+0xc>
 8005fda:	f855 3b04 	ldr.w	r3, [r5], #4
 8005fde:	4798      	blx	r3
 8005fe0:	3601      	adds	r6, #1
 8005fe2:	e7f2      	b.n	8005fca <__libc_init_array+0x1e>
 8005fe4:	08006054 	.word	0x08006054
 8005fe8:	08006054 	.word	0x08006054
 8005fec:	08006054 	.word	0x08006054
 8005ff0:	08006058 	.word	0x08006058

08005ff4 <_init>:
 8005ff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ff6:	bf00      	nop
 8005ff8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ffa:	bc08      	pop	{r3}
 8005ffc:	469e      	mov	lr, r3
 8005ffe:	4770      	bx	lr

08006000 <_fini>:
 8006000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006002:	bf00      	nop
 8006004:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006006:	bc08      	pop	{r3}
 8006008:	469e      	mov	lr, r3
 800600a:	4770      	bx	lr
