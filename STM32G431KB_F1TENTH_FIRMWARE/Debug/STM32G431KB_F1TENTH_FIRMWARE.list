
STM32G431KB_F1TENTH_FIRMWARE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000061b0  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08006388  08006388  00007388  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080063c8  080063c8  00008010  2**0
                  CONTENTS
  4 .ARM          00000008  080063c8  080063c8  000073c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080063d0  080063d0  00008010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080063d0  080063d0  000073d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080063d4  080063d4  000073d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080063d8  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000454  20000010  080063e8  00008010  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000464  080063e8  00008464  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017d66  00000000  00000000  00008040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000031d4  00000000  00000000  0001fda6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001458  00000000  00000000  00022f80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ff1  00000000  00000000  000243d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e7ee  00000000  00000000  000253c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ae89  00000000  00000000  00043bb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c6269  00000000  00000000  0005ea40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00124ca9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000055a4  00000000  00000000  00124cec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000089  00000000  00000000  0012a290  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000010 	.word	0x20000010
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08006370 	.word	0x08006370

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000014 	.word	0x20000014
 8000214:	08006370 	.word	0x08006370

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b96a 	b.w	8000504 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	460c      	mov	r4, r1
 8000250:	2b00      	cmp	r3, #0
 8000252:	d14e      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000254:	4694      	mov	ip, r2
 8000256:	458c      	cmp	ip, r1
 8000258:	4686      	mov	lr, r0
 800025a:	fab2 f282 	clz	r2, r2
 800025e:	d962      	bls.n	8000326 <__udivmoddi4+0xde>
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0320 	rsb	r3, r2, #32
 8000266:	4091      	lsls	r1, r2
 8000268:	fa20 f303 	lsr.w	r3, r0, r3
 800026c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000270:	4319      	orrs	r1, r3
 8000272:	fa00 fe02 	lsl.w	lr, r0, r2
 8000276:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800027a:	fa1f f68c 	uxth.w	r6, ip
 800027e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000282:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000286:	fb07 1114 	mls	r1, r7, r4, r1
 800028a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028e:	fb04 f106 	mul.w	r1, r4, r6
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f104 30ff 	add.w	r0, r4, #4294967295
 800029e:	f080 8112 	bcs.w	80004c6 <__udivmoddi4+0x27e>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 810f 	bls.w	80004c6 <__udivmoddi4+0x27e>
 80002a8:	3c02      	subs	r4, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a59      	subs	r1, r3, r1
 80002ae:	fa1f f38e 	uxth.w	r3, lr
 80002b2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002b6:	fb07 1110 	mls	r1, r7, r0, r1
 80002ba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002be:	fb00 f606 	mul.w	r6, r0, r6
 80002c2:	429e      	cmp	r6, r3
 80002c4:	d90a      	bls.n	80002dc <__udivmoddi4+0x94>
 80002c6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ca:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ce:	f080 80fc 	bcs.w	80004ca <__udivmoddi4+0x282>
 80002d2:	429e      	cmp	r6, r3
 80002d4:	f240 80f9 	bls.w	80004ca <__udivmoddi4+0x282>
 80002d8:	4463      	add	r3, ip
 80002da:	3802      	subs	r0, #2
 80002dc:	1b9b      	subs	r3, r3, r6
 80002de:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002e2:	2100      	movs	r1, #0
 80002e4:	b11d      	cbz	r5, 80002ee <__udivmoddi4+0xa6>
 80002e6:	40d3      	lsrs	r3, r2
 80002e8:	2200      	movs	r2, #0
 80002ea:	e9c5 3200 	strd	r3, r2, [r5]
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d905      	bls.n	8000302 <__udivmoddi4+0xba>
 80002f6:	b10d      	cbz	r5, 80002fc <__udivmoddi4+0xb4>
 80002f8:	e9c5 0100 	strd	r0, r1, [r5]
 80002fc:	2100      	movs	r1, #0
 80002fe:	4608      	mov	r0, r1
 8000300:	e7f5      	b.n	80002ee <__udivmoddi4+0xa6>
 8000302:	fab3 f183 	clz	r1, r3
 8000306:	2900      	cmp	r1, #0
 8000308:	d146      	bne.n	8000398 <__udivmoddi4+0x150>
 800030a:	42a3      	cmp	r3, r4
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xcc>
 800030e:	4290      	cmp	r0, r2
 8000310:	f0c0 80f0 	bcc.w	80004f4 <__udivmoddi4+0x2ac>
 8000314:	1a86      	subs	r6, r0, r2
 8000316:	eb64 0303 	sbc.w	r3, r4, r3
 800031a:	2001      	movs	r0, #1
 800031c:	2d00      	cmp	r5, #0
 800031e:	d0e6      	beq.n	80002ee <__udivmoddi4+0xa6>
 8000320:	e9c5 6300 	strd	r6, r3, [r5]
 8000324:	e7e3      	b.n	80002ee <__udivmoddi4+0xa6>
 8000326:	2a00      	cmp	r2, #0
 8000328:	f040 8090 	bne.w	800044c <__udivmoddi4+0x204>
 800032c:	eba1 040c 	sub.w	r4, r1, ip
 8000330:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000334:	fa1f f78c 	uxth.w	r7, ip
 8000338:	2101      	movs	r1, #1
 800033a:	fbb4 f6f8 	udiv	r6, r4, r8
 800033e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000342:	fb08 4416 	mls	r4, r8, r6, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb07 f006 	mul.w	r0, r7, r6
 800034e:	4298      	cmp	r0, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x11c>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f106 34ff 	add.w	r4, r6, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x11a>
 800035c:	4298      	cmp	r0, r3
 800035e:	f200 80cd 	bhi.w	80004fc <__udivmoddi4+0x2b4>
 8000362:	4626      	mov	r6, r4
 8000364:	1a1c      	subs	r4, r3, r0
 8000366:	fa1f f38e 	uxth.w	r3, lr
 800036a:	fbb4 f0f8 	udiv	r0, r4, r8
 800036e:	fb08 4410 	mls	r4, r8, r0, r4
 8000372:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000376:	fb00 f707 	mul.w	r7, r0, r7
 800037a:	429f      	cmp	r7, r3
 800037c:	d908      	bls.n	8000390 <__udivmoddi4+0x148>
 800037e:	eb1c 0303 	adds.w	r3, ip, r3
 8000382:	f100 34ff 	add.w	r4, r0, #4294967295
 8000386:	d202      	bcs.n	800038e <__udivmoddi4+0x146>
 8000388:	429f      	cmp	r7, r3
 800038a:	f200 80b0 	bhi.w	80004ee <__udivmoddi4+0x2a6>
 800038e:	4620      	mov	r0, r4
 8000390:	1bdb      	subs	r3, r3, r7
 8000392:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000396:	e7a5      	b.n	80002e4 <__udivmoddi4+0x9c>
 8000398:	f1c1 0620 	rsb	r6, r1, #32
 800039c:	408b      	lsls	r3, r1
 800039e:	fa22 f706 	lsr.w	r7, r2, r6
 80003a2:	431f      	orrs	r7, r3
 80003a4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a8:	fa04 f301 	lsl.w	r3, r4, r1
 80003ac:	ea43 030c 	orr.w	r3, r3, ip
 80003b0:	40f4      	lsrs	r4, r6
 80003b2:	fa00 f801 	lsl.w	r8, r0, r1
 80003b6:	0c38      	lsrs	r0, r7, #16
 80003b8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003bc:	fbb4 fef0 	udiv	lr, r4, r0
 80003c0:	fa1f fc87 	uxth.w	ip, r7
 80003c4:	fb00 441e 	mls	r4, r0, lr, r4
 80003c8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003cc:	fb0e f90c 	mul.w	r9, lr, ip
 80003d0:	45a1      	cmp	r9, r4
 80003d2:	fa02 f201 	lsl.w	r2, r2, r1
 80003d6:	d90a      	bls.n	80003ee <__udivmoddi4+0x1a6>
 80003d8:	193c      	adds	r4, r7, r4
 80003da:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003de:	f080 8084 	bcs.w	80004ea <__udivmoddi4+0x2a2>
 80003e2:	45a1      	cmp	r9, r4
 80003e4:	f240 8081 	bls.w	80004ea <__udivmoddi4+0x2a2>
 80003e8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	eba4 0409 	sub.w	r4, r4, r9
 80003f2:	fa1f f983 	uxth.w	r9, r3
 80003f6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003fa:	fb00 4413 	mls	r4, r0, r3, r4
 80003fe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000402:	fb03 fc0c 	mul.w	ip, r3, ip
 8000406:	45a4      	cmp	ip, r4
 8000408:	d907      	bls.n	800041a <__udivmoddi4+0x1d2>
 800040a:	193c      	adds	r4, r7, r4
 800040c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000410:	d267      	bcs.n	80004e2 <__udivmoddi4+0x29a>
 8000412:	45a4      	cmp	ip, r4
 8000414:	d965      	bls.n	80004e2 <__udivmoddi4+0x29a>
 8000416:	3b02      	subs	r3, #2
 8000418:	443c      	add	r4, r7
 800041a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800041e:	fba0 9302 	umull	r9, r3, r0, r2
 8000422:	eba4 040c 	sub.w	r4, r4, ip
 8000426:	429c      	cmp	r4, r3
 8000428:	46ce      	mov	lr, r9
 800042a:	469c      	mov	ip, r3
 800042c:	d351      	bcc.n	80004d2 <__udivmoddi4+0x28a>
 800042e:	d04e      	beq.n	80004ce <__udivmoddi4+0x286>
 8000430:	b155      	cbz	r5, 8000448 <__udivmoddi4+0x200>
 8000432:	ebb8 030e 	subs.w	r3, r8, lr
 8000436:	eb64 040c 	sbc.w	r4, r4, ip
 800043a:	fa04 f606 	lsl.w	r6, r4, r6
 800043e:	40cb      	lsrs	r3, r1
 8000440:	431e      	orrs	r6, r3
 8000442:	40cc      	lsrs	r4, r1
 8000444:	e9c5 6400 	strd	r6, r4, [r5]
 8000448:	2100      	movs	r1, #0
 800044a:	e750      	b.n	80002ee <__udivmoddi4+0xa6>
 800044c:	f1c2 0320 	rsb	r3, r2, #32
 8000450:	fa20 f103 	lsr.w	r1, r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa24 f303 	lsr.w	r3, r4, r3
 800045c:	4094      	lsls	r4, r2
 800045e:	430c      	orrs	r4, r1
 8000460:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000464:	fa00 fe02 	lsl.w	lr, r0, r2
 8000468:	fa1f f78c 	uxth.w	r7, ip
 800046c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000470:	fb08 3110 	mls	r1, r8, r0, r3
 8000474:	0c23      	lsrs	r3, r4, #16
 8000476:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800047a:	fb00 f107 	mul.w	r1, r0, r7
 800047e:	4299      	cmp	r1, r3
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x24c>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 36ff 	add.w	r6, r0, #4294967295
 800048a:	d22c      	bcs.n	80004e6 <__udivmoddi4+0x29e>
 800048c:	4299      	cmp	r1, r3
 800048e:	d92a      	bls.n	80004e6 <__udivmoddi4+0x29e>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1a5b      	subs	r3, r3, r1
 8000496:	b2a4      	uxth	r4, r4
 8000498:	fbb3 f1f8 	udiv	r1, r3, r8
 800049c:	fb08 3311 	mls	r3, r8, r1, r3
 80004a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004a4:	fb01 f307 	mul.w	r3, r1, r7
 80004a8:	42a3      	cmp	r3, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x276>
 80004ac:	eb1c 0404 	adds.w	r4, ip, r4
 80004b0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004b4:	d213      	bcs.n	80004de <__udivmoddi4+0x296>
 80004b6:	42a3      	cmp	r3, r4
 80004b8:	d911      	bls.n	80004de <__udivmoddi4+0x296>
 80004ba:	3902      	subs	r1, #2
 80004bc:	4464      	add	r4, ip
 80004be:	1ae4      	subs	r4, r4, r3
 80004c0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004c4:	e739      	b.n	800033a <__udivmoddi4+0xf2>
 80004c6:	4604      	mov	r4, r0
 80004c8:	e6f0      	b.n	80002ac <__udivmoddi4+0x64>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e706      	b.n	80002dc <__udivmoddi4+0x94>
 80004ce:	45c8      	cmp	r8, r9
 80004d0:	d2ae      	bcs.n	8000430 <__udivmoddi4+0x1e8>
 80004d2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004d6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004da:	3801      	subs	r0, #1
 80004dc:	e7a8      	b.n	8000430 <__udivmoddi4+0x1e8>
 80004de:	4631      	mov	r1, r6
 80004e0:	e7ed      	b.n	80004be <__udivmoddi4+0x276>
 80004e2:	4603      	mov	r3, r0
 80004e4:	e799      	b.n	800041a <__udivmoddi4+0x1d2>
 80004e6:	4630      	mov	r0, r6
 80004e8:	e7d4      	b.n	8000494 <__udivmoddi4+0x24c>
 80004ea:	46d6      	mov	lr, sl
 80004ec:	e77f      	b.n	80003ee <__udivmoddi4+0x1a6>
 80004ee:	4463      	add	r3, ip
 80004f0:	3802      	subs	r0, #2
 80004f2:	e74d      	b.n	8000390 <__udivmoddi4+0x148>
 80004f4:	4606      	mov	r6, r0
 80004f6:	4623      	mov	r3, r4
 80004f8:	4608      	mov	r0, r1
 80004fa:	e70f      	b.n	800031c <__udivmoddi4+0xd4>
 80004fc:	3e02      	subs	r6, #2
 80004fe:	4463      	add	r3, ip
 8000500:	e730      	b.n	8000364 <__udivmoddi4+0x11c>
 8000502:	bf00      	nop

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b082      	sub	sp, #8
 800050c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800050e:	4b16      	ldr	r3, [pc, #88]	@ (8000568 <MX_DMA_Init+0x60>)
 8000510:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000512:	4a15      	ldr	r2, [pc, #84]	@ (8000568 <MX_DMA_Init+0x60>)
 8000514:	f043 0304 	orr.w	r3, r3, #4
 8000518:	6493      	str	r3, [r2, #72]	@ 0x48
 800051a:	4b13      	ldr	r3, [pc, #76]	@ (8000568 <MX_DMA_Init+0x60>)
 800051c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800051e:	f003 0304 	and.w	r3, r3, #4
 8000522:	607b      	str	r3, [r7, #4]
 8000524:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000526:	4b10      	ldr	r3, [pc, #64]	@ (8000568 <MX_DMA_Init+0x60>)
 8000528:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800052a:	4a0f      	ldr	r2, [pc, #60]	@ (8000568 <MX_DMA_Init+0x60>)
 800052c:	f043 0301 	orr.w	r3, r3, #1
 8000530:	6493      	str	r3, [r2, #72]	@ 0x48
 8000532:	4b0d      	ldr	r3, [pc, #52]	@ (8000568 <MX_DMA_Init+0x60>)
 8000534:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000536:	f003 0301 	and.w	r3, r3, #1
 800053a:	603b      	str	r3, [r7, #0]
 800053c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800053e:	2200      	movs	r2, #0
 8000540:	2100      	movs	r1, #0
 8000542:	200b      	movs	r0, #11
 8000544:	f001 f8b1 	bl	80016aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000548:	200b      	movs	r0, #11
 800054a:	f001 f8c8 	bl	80016de <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800054e:	2200      	movs	r2, #0
 8000550:	2100      	movs	r1, #0
 8000552:	200c      	movs	r0, #12
 8000554:	f001 f8a9 	bl	80016aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000558:	200c      	movs	r0, #12
 800055a:	f001 f8c0 	bl	80016de <HAL_NVIC_EnableIRQ>

}
 800055e:	bf00      	nop
 8000560:	3708      	adds	r7, #8
 8000562:	46bd      	mov	sp, r7
 8000564:	bd80      	pop	{r7, pc}
 8000566:	bf00      	nop
 8000568:	40021000 	.word	0x40021000

0800056c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b088      	sub	sp, #32
 8000570:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000572:	f107 030c 	add.w	r3, r7, #12
 8000576:	2200      	movs	r2, #0
 8000578:	601a      	str	r2, [r3, #0]
 800057a:	605a      	str	r2, [r3, #4]
 800057c:	609a      	str	r2, [r3, #8]
 800057e:	60da      	str	r2, [r3, #12]
 8000580:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000582:	4b1e      	ldr	r3, [pc, #120]	@ (80005fc <MX_GPIO_Init+0x90>)
 8000584:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000586:	4a1d      	ldr	r2, [pc, #116]	@ (80005fc <MX_GPIO_Init+0x90>)
 8000588:	f043 0320 	orr.w	r3, r3, #32
 800058c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800058e:	4b1b      	ldr	r3, [pc, #108]	@ (80005fc <MX_GPIO_Init+0x90>)
 8000590:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000592:	f003 0320 	and.w	r3, r3, #32
 8000596:	60bb      	str	r3, [r7, #8]
 8000598:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800059a:	4b18      	ldr	r3, [pc, #96]	@ (80005fc <MX_GPIO_Init+0x90>)
 800059c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800059e:	4a17      	ldr	r2, [pc, #92]	@ (80005fc <MX_GPIO_Init+0x90>)
 80005a0:	f043 0301 	orr.w	r3, r3, #1
 80005a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005a6:	4b15      	ldr	r3, [pc, #84]	@ (80005fc <MX_GPIO_Init+0x90>)
 80005a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005aa:	f003 0301 	and.w	r3, r3, #1
 80005ae:	607b      	str	r3, [r7, #4]
 80005b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005b2:	4b12      	ldr	r3, [pc, #72]	@ (80005fc <MX_GPIO_Init+0x90>)
 80005b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005b6:	4a11      	ldr	r2, [pc, #68]	@ (80005fc <MX_GPIO_Init+0x90>)
 80005b8:	f043 0302 	orr.w	r3, r3, #2
 80005bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005be:	4b0f      	ldr	r3, [pc, #60]	@ (80005fc <MX_GPIO_Init+0x90>)
 80005c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005c2:	f003 0302 	and.w	r3, r3, #2
 80005c6:	603b      	str	r3, [r7, #0]
 80005c8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80005ca:	2200      	movs	r2, #0
 80005cc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80005d0:	480b      	ldr	r0, [pc, #44]	@ (8000600 <MX_GPIO_Init+0x94>)
 80005d2:	f001 fbdb 	bl	8001d8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80005d6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80005da:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005dc:	2301      	movs	r3, #1
 80005de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e0:	2300      	movs	r3, #0
 80005e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005e4:	2300      	movs	r3, #0
 80005e6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80005e8:	f107 030c 	add.w	r3, r7, #12
 80005ec:	4619      	mov	r1, r3
 80005ee:	4804      	ldr	r0, [pc, #16]	@ (8000600 <MX_GPIO_Init+0x94>)
 80005f0:	f001 fa4a 	bl	8001a88 <HAL_GPIO_Init>

}
 80005f4:	bf00      	nop
 80005f6:	3720      	adds	r7, #32
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}
 80005fc:	40021000 	.word	0x40021000
 8000600:	48000400 	.word	0x48000400

08000604 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c3_tx;
DMA_HandleTypeDef hdma_i2c3_rx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000608:	4b1b      	ldr	r3, [pc, #108]	@ (8000678 <MX_I2C1_Init+0x74>)
 800060a:	4a1c      	ldr	r2, [pc, #112]	@ (800067c <MX_I2C1_Init+0x78>)
 800060c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10802D9B;
 800060e:	4b1a      	ldr	r3, [pc, #104]	@ (8000678 <MX_I2C1_Init+0x74>)
 8000610:	4a1b      	ldr	r2, [pc, #108]	@ (8000680 <MX_I2C1_Init+0x7c>)
 8000612:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000614:	4b18      	ldr	r3, [pc, #96]	@ (8000678 <MX_I2C1_Init+0x74>)
 8000616:	2200      	movs	r2, #0
 8000618:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800061a:	4b17      	ldr	r3, [pc, #92]	@ (8000678 <MX_I2C1_Init+0x74>)
 800061c:	2201      	movs	r2, #1
 800061e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000620:	4b15      	ldr	r3, [pc, #84]	@ (8000678 <MX_I2C1_Init+0x74>)
 8000622:	2200      	movs	r2, #0
 8000624:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000626:	4b14      	ldr	r3, [pc, #80]	@ (8000678 <MX_I2C1_Init+0x74>)
 8000628:	2200      	movs	r2, #0
 800062a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800062c:	4b12      	ldr	r3, [pc, #72]	@ (8000678 <MX_I2C1_Init+0x74>)
 800062e:	2200      	movs	r2, #0
 8000630:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000632:	4b11      	ldr	r3, [pc, #68]	@ (8000678 <MX_I2C1_Init+0x74>)
 8000634:	2200      	movs	r2, #0
 8000636:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000638:	4b0f      	ldr	r3, [pc, #60]	@ (8000678 <MX_I2C1_Init+0x74>)
 800063a:	2200      	movs	r2, #0
 800063c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800063e:	480e      	ldr	r0, [pc, #56]	@ (8000678 <MX_I2C1_Init+0x74>)
 8000640:	f001 fbbc 	bl	8001dbc <HAL_I2C_Init>
 8000644:	4603      	mov	r3, r0
 8000646:	2b00      	cmp	r3, #0
 8000648:	d001      	beq.n	800064e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800064a:	f000 fa5e 	bl	8000b0a <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800064e:	2100      	movs	r1, #0
 8000650:	4809      	ldr	r0, [pc, #36]	@ (8000678 <MX_I2C1_Init+0x74>)
 8000652:	f002 f959 	bl	8002908 <HAL_I2CEx_ConfigAnalogFilter>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	d001      	beq.n	8000660 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800065c:	f000 fa55 	bl	8000b0a <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000660:	2100      	movs	r1, #0
 8000662:	4805      	ldr	r0, [pc, #20]	@ (8000678 <MX_I2C1_Init+0x74>)
 8000664:	f002 f99b 	bl	800299e <HAL_I2CEx_ConfigDigitalFilter>
 8000668:	4603      	mov	r3, r0
 800066a:	2b00      	cmp	r3, #0
 800066c:	d001      	beq.n	8000672 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800066e:	f000 fa4c 	bl	8000b0a <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000672:	bf00      	nop
 8000674:	bd80      	pop	{r7, pc}
 8000676:	bf00      	nop
 8000678:	2000002c 	.word	0x2000002c
 800067c:	40005400 	.word	0x40005400
 8000680:	10802d9b 	.word	0x10802d9b

08000684 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000688:	4b1b      	ldr	r3, [pc, #108]	@ (80006f8 <MX_I2C3_Init+0x74>)
 800068a:	4a1c      	ldr	r2, [pc, #112]	@ (80006fc <MX_I2C3_Init+0x78>)
 800068c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x10802D9B;
 800068e:	4b1a      	ldr	r3, [pc, #104]	@ (80006f8 <MX_I2C3_Init+0x74>)
 8000690:	4a1b      	ldr	r2, [pc, #108]	@ (8000700 <MX_I2C3_Init+0x7c>)
 8000692:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000694:	4b18      	ldr	r3, [pc, #96]	@ (80006f8 <MX_I2C3_Init+0x74>)
 8000696:	2200      	movs	r2, #0
 8000698:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800069a:	4b17      	ldr	r3, [pc, #92]	@ (80006f8 <MX_I2C3_Init+0x74>)
 800069c:	2201      	movs	r2, #1
 800069e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006a0:	4b15      	ldr	r3, [pc, #84]	@ (80006f8 <MX_I2C3_Init+0x74>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80006a6:	4b14      	ldr	r3, [pc, #80]	@ (80006f8 <MX_I2C3_Init+0x74>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80006ac:	4b12      	ldr	r3, [pc, #72]	@ (80006f8 <MX_I2C3_Init+0x74>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006b2:	4b11      	ldr	r3, [pc, #68]	@ (80006f8 <MX_I2C3_Init+0x74>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006b8:	4b0f      	ldr	r3, [pc, #60]	@ (80006f8 <MX_I2C3_Init+0x74>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80006be:	480e      	ldr	r0, [pc, #56]	@ (80006f8 <MX_I2C3_Init+0x74>)
 80006c0:	f001 fb7c 	bl	8001dbc <HAL_I2C_Init>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d001      	beq.n	80006ce <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 80006ca:	f000 fa1e 	bl	8000b0a <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80006ce:	2100      	movs	r1, #0
 80006d0:	4809      	ldr	r0, [pc, #36]	@ (80006f8 <MX_I2C3_Init+0x74>)
 80006d2:	f002 f919 	bl	8002908 <HAL_I2CEx_ConfigAnalogFilter>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 80006dc:	f000 fa15 	bl	8000b0a <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80006e0:	2100      	movs	r1, #0
 80006e2:	4805      	ldr	r0, [pc, #20]	@ (80006f8 <MX_I2C3_Init+0x74>)
 80006e4:	f002 f95b 	bl	800299e <HAL_I2CEx_ConfigDigitalFilter>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 80006ee:	f000 fa0c 	bl	8000b0a <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80006f2:	bf00      	nop
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	20000080 	.word	0x20000080
 80006fc:	40007800 	.word	0x40007800
 8000700:	10802d9b 	.word	0x10802d9b

08000704 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b09e      	sub	sp, #120	@ 0x78
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800070c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000710:	2200      	movs	r2, #0
 8000712:	601a      	str	r2, [r3, #0]
 8000714:	605a      	str	r2, [r3, #4]
 8000716:	609a      	str	r2, [r3, #8]
 8000718:	60da      	str	r2, [r3, #12]
 800071a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800071c:	f107 0320 	add.w	r3, r7, #32
 8000720:	2244      	movs	r2, #68	@ 0x44
 8000722:	2100      	movs	r1, #0
 8000724:	4618      	mov	r0, r3
 8000726:	f005 fdf6 	bl	8006316 <memset>
  if(i2cHandle->Instance==I2C1)
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	4a88      	ldr	r2, [pc, #544]	@ (8000950 <HAL_I2C_MspInit+0x24c>)
 8000730:	4293      	cmp	r3, r2
 8000732:	d154      	bne.n	80007de <HAL_I2C_MspInit+0xda>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000734:	2340      	movs	r3, #64	@ 0x40
 8000736:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000738:	2300      	movs	r3, #0
 800073a:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800073c:	f107 0320 	add.w	r3, r7, #32
 8000740:	4618      	mov	r0, r3
 8000742:	f002 ff5b 	bl	80035fc <HAL_RCCEx_PeriphCLKConfig>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d001      	beq.n	8000750 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800074c:	f000 f9dd 	bl	8000b0a <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000750:	4b80      	ldr	r3, [pc, #512]	@ (8000954 <HAL_I2C_MspInit+0x250>)
 8000752:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000754:	4a7f      	ldr	r2, [pc, #508]	@ (8000954 <HAL_I2C_MspInit+0x250>)
 8000756:	f043 0301 	orr.w	r3, r3, #1
 800075a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800075c:	4b7d      	ldr	r3, [pc, #500]	@ (8000954 <HAL_I2C_MspInit+0x250>)
 800075e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000760:	f003 0301 	and.w	r3, r3, #1
 8000764:	61fb      	str	r3, [r7, #28]
 8000766:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000768:	4b7a      	ldr	r3, [pc, #488]	@ (8000954 <HAL_I2C_MspInit+0x250>)
 800076a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800076c:	4a79      	ldr	r2, [pc, #484]	@ (8000954 <HAL_I2C_MspInit+0x250>)
 800076e:	f043 0302 	orr.w	r3, r3, #2
 8000772:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000774:	4b77      	ldr	r3, [pc, #476]	@ (8000954 <HAL_I2C_MspInit+0x250>)
 8000776:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000778:	f003 0302 	and.w	r3, r3, #2
 800077c:	61bb      	str	r3, [r7, #24]
 800077e:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000780:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000784:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000786:	2312      	movs	r3, #18
 8000788:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078a:	2300      	movs	r3, #0
 800078c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800078e:	2300      	movs	r3, #0
 8000790:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000792:	2304      	movs	r3, #4
 8000794:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000796:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800079a:	4619      	mov	r1, r3
 800079c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007a0:	f001 f972 	bl	8001a88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80007a4:	2380      	movs	r3, #128	@ 0x80
 80007a6:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80007a8:	2312      	movs	r3, #18
 80007aa:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ac:	2300      	movs	r3, #0
 80007ae:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b0:	2300      	movs	r3, #0
 80007b2:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80007b4:	2304      	movs	r3, #4
 80007b6:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007b8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80007bc:	4619      	mov	r1, r3
 80007be:	4866      	ldr	r0, [pc, #408]	@ (8000958 <HAL_I2C_MspInit+0x254>)
 80007c0:	f001 f962 	bl	8001a88 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80007c4:	4b63      	ldr	r3, [pc, #396]	@ (8000954 <HAL_I2C_MspInit+0x250>)
 80007c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80007c8:	4a62      	ldr	r2, [pc, #392]	@ (8000954 <HAL_I2C_MspInit+0x250>)
 80007ca:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80007ce:	6593      	str	r3, [r2, #88]	@ 0x58
 80007d0:	4b60      	ldr	r3, [pc, #384]	@ (8000954 <HAL_I2C_MspInit+0x250>)
 80007d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80007d4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80007d8:	617b      	str	r3, [r7, #20]
 80007da:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 80007dc:	e0b4      	b.n	8000948 <HAL_I2C_MspInit+0x244>
  else if(i2cHandle->Instance==I2C3)
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	4a5e      	ldr	r2, [pc, #376]	@ (800095c <HAL_I2C_MspInit+0x258>)
 80007e4:	4293      	cmp	r3, r2
 80007e6:	f040 80af 	bne.w	8000948 <HAL_I2C_MspInit+0x244>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80007ea:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80007ee:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80007f0:	2300      	movs	r3, #0
 80007f2:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007f4:	f107 0320 	add.w	r3, r7, #32
 80007f8:	4618      	mov	r0, r3
 80007fa:	f002 feff 	bl	80035fc <HAL_RCCEx_PeriphCLKConfig>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d001      	beq.n	8000808 <HAL_I2C_MspInit+0x104>
      Error_Handler();
 8000804:	f000 f981 	bl	8000b0a <Error_Handler>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000808:	4b52      	ldr	r3, [pc, #328]	@ (8000954 <HAL_I2C_MspInit+0x250>)
 800080a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800080c:	4a51      	ldr	r2, [pc, #324]	@ (8000954 <HAL_I2C_MspInit+0x250>)
 800080e:	f043 0301 	orr.w	r3, r3, #1
 8000812:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000814:	4b4f      	ldr	r3, [pc, #316]	@ (8000954 <HAL_I2C_MspInit+0x250>)
 8000816:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000818:	f003 0301 	and.w	r3, r3, #1
 800081c:	613b      	str	r3, [r7, #16]
 800081e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000820:	4b4c      	ldr	r3, [pc, #304]	@ (8000954 <HAL_I2C_MspInit+0x250>)
 8000822:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000824:	4a4b      	ldr	r2, [pc, #300]	@ (8000954 <HAL_I2C_MspInit+0x250>)
 8000826:	f043 0302 	orr.w	r3, r3, #2
 800082a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800082c:	4b49      	ldr	r3, [pc, #292]	@ (8000954 <HAL_I2C_MspInit+0x250>)
 800082e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000830:	f003 0302 	and.w	r3, r3, #2
 8000834:	60fb      	str	r3, [r7, #12]
 8000836:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000838:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800083c:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800083e:	2312      	movs	r3, #18
 8000840:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000842:	2301      	movs	r3, #1
 8000844:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000846:	2300      	movs	r3, #0
 8000848:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF2_I2C3;
 800084a:	2302      	movs	r3, #2
 800084c:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800084e:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000852:	4619      	mov	r1, r3
 8000854:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000858:	f001 f916 	bl	8001a88 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800085c:	2320      	movs	r3, #32
 800085e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000860:	2312      	movs	r3, #18
 8000862:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000864:	2301      	movs	r3, #1
 8000866:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000868:	2300      	movs	r3, #0
 800086a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C3;
 800086c:	2308      	movs	r3, #8
 800086e:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000870:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000874:	4619      	mov	r1, r3
 8000876:	4838      	ldr	r0, [pc, #224]	@ (8000958 <HAL_I2C_MspInit+0x254>)
 8000878:	f001 f906 	bl	8001a88 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800087c:	4b35      	ldr	r3, [pc, #212]	@ (8000954 <HAL_I2C_MspInit+0x250>)
 800087e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000880:	4a34      	ldr	r2, [pc, #208]	@ (8000954 <HAL_I2C_MspInit+0x250>)
 8000882:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8000886:	6593      	str	r3, [r2, #88]	@ 0x58
 8000888:	4b32      	ldr	r3, [pc, #200]	@ (8000954 <HAL_I2C_MspInit+0x250>)
 800088a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800088c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8000890:	60bb      	str	r3, [r7, #8]
 8000892:	68bb      	ldr	r3, [r7, #8]
    hdma_i2c3_tx.Instance = DMA1_Channel1;
 8000894:	4b32      	ldr	r3, [pc, #200]	@ (8000960 <HAL_I2C_MspInit+0x25c>)
 8000896:	4a33      	ldr	r2, [pc, #204]	@ (8000964 <HAL_I2C_MspInit+0x260>)
 8000898:	601a      	str	r2, [r3, #0]
    hdma_i2c3_tx.Init.Request = DMA_REQUEST_I2C3_TX;
 800089a:	4b31      	ldr	r3, [pc, #196]	@ (8000960 <HAL_I2C_MspInit+0x25c>)
 800089c:	2215      	movs	r2, #21
 800089e:	605a      	str	r2, [r3, #4]
    hdma_i2c3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80008a0:	4b2f      	ldr	r3, [pc, #188]	@ (8000960 <HAL_I2C_MspInit+0x25c>)
 80008a2:	2210      	movs	r2, #16
 80008a4:	609a      	str	r2, [r3, #8]
    hdma_i2c3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80008a6:	4b2e      	ldr	r3, [pc, #184]	@ (8000960 <HAL_I2C_MspInit+0x25c>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	60da      	str	r2, [r3, #12]
    hdma_i2c3_tx.Init.MemInc = DMA_MINC_DISABLE;
 80008ac:	4b2c      	ldr	r3, [pc, #176]	@ (8000960 <HAL_I2C_MspInit+0x25c>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	611a      	str	r2, [r3, #16]
    hdma_i2c3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80008b2:	4b2b      	ldr	r3, [pc, #172]	@ (8000960 <HAL_I2C_MspInit+0x25c>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	615a      	str	r2, [r3, #20]
    hdma_i2c3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80008b8:	4b29      	ldr	r3, [pc, #164]	@ (8000960 <HAL_I2C_MspInit+0x25c>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	619a      	str	r2, [r3, #24]
    hdma_i2c3_tx.Init.Mode = DMA_NORMAL;
 80008be:	4b28      	ldr	r3, [pc, #160]	@ (8000960 <HAL_I2C_MspInit+0x25c>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	61da      	str	r2, [r3, #28]
    hdma_i2c3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80008c4:	4b26      	ldr	r3, [pc, #152]	@ (8000960 <HAL_I2C_MspInit+0x25c>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c3_tx) != HAL_OK)
 80008ca:	4825      	ldr	r0, [pc, #148]	@ (8000960 <HAL_I2C_MspInit+0x25c>)
 80008cc:	f000 ff22 	bl	8001714 <HAL_DMA_Init>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <HAL_I2C_MspInit+0x1d6>
      Error_Handler();
 80008d6:	f000 f918 	bl	8000b0a <Error_Handler>
    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c3_tx);
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	4a20      	ldr	r2, [pc, #128]	@ (8000960 <HAL_I2C_MspInit+0x25c>)
 80008de:	639a      	str	r2, [r3, #56]	@ 0x38
 80008e0:	4a1f      	ldr	r2, [pc, #124]	@ (8000960 <HAL_I2C_MspInit+0x25c>)
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	6293      	str	r3, [r2, #40]	@ 0x28
    hdma_i2c3_rx.Instance = DMA1_Channel2;
 80008e6:	4b20      	ldr	r3, [pc, #128]	@ (8000968 <HAL_I2C_MspInit+0x264>)
 80008e8:	4a20      	ldr	r2, [pc, #128]	@ (800096c <HAL_I2C_MspInit+0x268>)
 80008ea:	601a      	str	r2, [r3, #0]
    hdma_i2c3_rx.Init.Request = DMA_REQUEST_I2C3_RX;
 80008ec:	4b1e      	ldr	r3, [pc, #120]	@ (8000968 <HAL_I2C_MspInit+0x264>)
 80008ee:	2214      	movs	r2, #20
 80008f0:	605a      	str	r2, [r3, #4]
    hdma_i2c3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80008f2:	4b1d      	ldr	r3, [pc, #116]	@ (8000968 <HAL_I2C_MspInit+0x264>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	609a      	str	r2, [r3, #8]
    hdma_i2c3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80008f8:	4b1b      	ldr	r3, [pc, #108]	@ (8000968 <HAL_I2C_MspInit+0x264>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	60da      	str	r2, [r3, #12]
    hdma_i2c3_rx.Init.MemInc = DMA_MINC_DISABLE;
 80008fe:	4b1a      	ldr	r3, [pc, #104]	@ (8000968 <HAL_I2C_MspInit+0x264>)
 8000900:	2200      	movs	r2, #0
 8000902:	611a      	str	r2, [r3, #16]
    hdma_i2c3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000904:	4b18      	ldr	r3, [pc, #96]	@ (8000968 <HAL_I2C_MspInit+0x264>)
 8000906:	2200      	movs	r2, #0
 8000908:	615a      	str	r2, [r3, #20]
    hdma_i2c3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800090a:	4b17      	ldr	r3, [pc, #92]	@ (8000968 <HAL_I2C_MspInit+0x264>)
 800090c:	2200      	movs	r2, #0
 800090e:	619a      	str	r2, [r3, #24]
    hdma_i2c3_rx.Init.Mode = DMA_NORMAL;
 8000910:	4b15      	ldr	r3, [pc, #84]	@ (8000968 <HAL_I2C_MspInit+0x264>)
 8000912:	2200      	movs	r2, #0
 8000914:	61da      	str	r2, [r3, #28]
    hdma_i2c3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000916:	4b14      	ldr	r3, [pc, #80]	@ (8000968 <HAL_I2C_MspInit+0x264>)
 8000918:	2200      	movs	r2, #0
 800091a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c3_rx) != HAL_OK)
 800091c:	4812      	ldr	r0, [pc, #72]	@ (8000968 <HAL_I2C_MspInit+0x264>)
 800091e:	f000 fef9 	bl	8001714 <HAL_DMA_Init>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d001      	beq.n	800092c <HAL_I2C_MspInit+0x228>
      Error_Handler();
 8000928:	f000 f8ef 	bl	8000b0a <Error_Handler>
    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c3_rx);
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	4a0e      	ldr	r2, [pc, #56]	@ (8000968 <HAL_I2C_MspInit+0x264>)
 8000930:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000932:	4a0d      	ldr	r2, [pc, #52]	@ (8000968 <HAL_I2C_MspInit+0x264>)
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 0, 0);
 8000938:	2200      	movs	r2, #0
 800093a:	2100      	movs	r1, #0
 800093c:	205c      	movs	r0, #92	@ 0x5c
 800093e:	f000 feb4 	bl	80016aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 8000942:	205c      	movs	r0, #92	@ 0x5c
 8000944:	f000 fecb 	bl	80016de <HAL_NVIC_EnableIRQ>
}
 8000948:	bf00      	nop
 800094a:	3778      	adds	r7, #120	@ 0x78
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}
 8000950:	40005400 	.word	0x40005400
 8000954:	40021000 	.word	0x40021000
 8000958:	48000400 	.word	0x48000400
 800095c:	40007800 	.word	0x40007800
 8000960:	200000d4 	.word	0x200000d4
 8000964:	40020008 	.word	0x40020008
 8000968:	20000134 	.word	0x20000134
 800096c:	4002001c 	.word	0x4002001c

08000970 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b084      	sub	sp, #16
 8000974:	af04      	add	r7, sp, #16
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000976:	f000 fd2a 	bl	80013ce <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800097a:	f000 f87b 	bl	8000a74 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800097e:	f7ff fdf5 	bl	800056c <MX_GPIO_Init>
	MX_DMA_Init();
 8000982:	f7ff fdc1 	bl	8000508 <MX_DMA_Init>
	MX_USART2_UART_Init();
 8000986:	f000 fc55 	bl	8001234 <MX_USART2_UART_Init>
	MX_I2C1_Init();
 800098a:	f7ff fe3b 	bl	8000604 <MX_I2C1_Init>
	MX_TIM3_Init();
 800098e:	f000 f991 	bl	8000cb4 <MX_TIM3_Init>
	MX_TIM4_Init();
 8000992:	f000 f9e5 	bl	8000d60 <MX_TIM4_Init>
	MX_I2C3_Init();
 8000996:	f7ff fe75 	bl	8000684 <MX_I2C3_Init>
	MX_TIM2_Init();
 800099a:	f000 f941 	bl	8000c20 <MX_TIM2_Init>
	MX_TIM8_Init();
 800099e:	f000 fa35 	bl	8000e0c <MX_TIM8_Init>
	/* USER CODE BEGIN 2 */
	//  BNO055_Init(&bno, &hi2c3, CONFIGMODE, NDOF);

	while (BNO055_Init(&bno, &hi2c3, 0, NDOF) != HAL_OK) {
 80009a2:	e002      	b.n	80009aa <main+0x3a>
		HAL_Delay(100);
 80009a4:	2064      	movs	r0, #100	@ 0x64
 80009a6:	f000 fd83 	bl	80014b0 <HAL_Delay>
	while (BNO055_Init(&bno, &hi2c3, 0, NDOF) != HAL_OK) {
 80009aa:	230c      	movs	r3, #12
 80009ac:	2200      	movs	r2, #0
 80009ae:	492b      	ldr	r1, [pc, #172]	@ (8000a5c <main+0xec>)
 80009b0:	482b      	ldr	r0, [pc, #172]	@ (8000a60 <main+0xf0>)
 80009b2:	f005 f811 	bl	80059d8 <BNO055_Init>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d1f3      	bne.n	80009a4 <main+0x34>
	}

	while(BNO055_isFullyCalibrated(&bno) != HAL_OK){
 80009bc:	e030      	b.n	8000a20 <main+0xb0>
		HAL_I2C_Mem_Read(bno.hi2cx, bno.address, OPR_MODE, 1, bno.RxBuffer, 1, 10);
 80009be:	4b28      	ldr	r3, [pc, #160]	@ (8000a60 <main+0xf0>)
 80009c0:	6818      	ldr	r0, [r3, #0]
 80009c2:	4b27      	ldr	r3, [pc, #156]	@ (8000a60 <main+0xf0>)
 80009c4:	791b      	ldrb	r3, [r3, #4]
 80009c6:	4619      	mov	r1, r3
 80009c8:	230a      	movs	r3, #10
 80009ca:	9302      	str	r3, [sp, #8]
 80009cc:	2301      	movs	r3, #1
 80009ce:	9301      	str	r3, [sp, #4]
 80009d0:	4b24      	ldr	r3, [pc, #144]	@ (8000a64 <main+0xf4>)
 80009d2:	9300      	str	r3, [sp, #0]
 80009d4:	2301      	movs	r3, #1
 80009d6:	223d      	movs	r2, #61	@ 0x3d
 80009d8:	f001 fba0 	bl	800211c <HAL_I2C_Mem_Read>
		mode = bno.RxBuffer[0] & 0x0F;
 80009dc:	4b20      	ldr	r3, [pc, #128]	@ (8000a60 <main+0xf0>)
 80009de:	f893 30b8 	ldrb.w	r3, [r3, #184]	@ 0xb8
 80009e2:	f003 030f 	and.w	r3, r3, #15
 80009e6:	b2da      	uxtb	r2, r3
 80009e8:	4b1f      	ldr	r3, [pc, #124]	@ (8000a68 <main+0xf8>)
 80009ea:	701a      	strb	r2, [r3, #0]
		HAL_Delay(20);
 80009ec:	2014      	movs	r0, #20
 80009ee:	f000 fd5f 	bl	80014b0 <HAL_Delay>

		HAL_I2C_Mem_Read(bno.hi2cx, bno.address, CALIB_STAT, 1, bno.RxBuffer, 1, 10);
 80009f2:	4b1b      	ldr	r3, [pc, #108]	@ (8000a60 <main+0xf0>)
 80009f4:	6818      	ldr	r0, [r3, #0]
 80009f6:	4b1a      	ldr	r3, [pc, #104]	@ (8000a60 <main+0xf0>)
 80009f8:	791b      	ldrb	r3, [r3, #4]
 80009fa:	4619      	mov	r1, r3
 80009fc:	230a      	movs	r3, #10
 80009fe:	9302      	str	r3, [sp, #8]
 8000a00:	2301      	movs	r3, #1
 8000a02:	9301      	str	r3, [sp, #4]
 8000a04:	4b17      	ldr	r3, [pc, #92]	@ (8000a64 <main+0xf4>)
 8000a06:	9300      	str	r3, [sp, #0]
 8000a08:	2301      	movs	r3, #1
 8000a0a:	2235      	movs	r2, #53	@ 0x35
 8000a0c:	f001 fb86 	bl	800211c <HAL_I2C_Mem_Read>
		calibated = bno.RxBuffer[0];
 8000a10:	4b13      	ldr	r3, [pc, #76]	@ (8000a60 <main+0xf0>)
 8000a12:	f893 20b8 	ldrb.w	r2, [r3, #184]	@ 0xb8
 8000a16:	4b15      	ldr	r3, [pc, #84]	@ (8000a6c <main+0xfc>)
 8000a18:	701a      	strb	r2, [r3, #0]
		HAL_Delay(20);
 8000a1a:	2014      	movs	r0, #20
 8000a1c:	f000 fd48 	bl	80014b0 <HAL_Delay>
	while(BNO055_isFullyCalibrated(&bno) != HAL_OK){
 8000a20:	480f      	ldr	r0, [pc, #60]	@ (8000a60 <main+0xf0>)
 8000a22:	f005 f919 	bl	8005c58 <BNO055_isFullyCalibrated>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d1c8      	bne.n	80009be <main+0x4e>
	}
	sys = 1;
 8000a2c:	4b10      	ldr	r3, [pc, #64]	@ (8000a70 <main+0x100>)
 8000a2e:	2201      	movs	r2, #1
 8000a30:	701a      	strb	r2, [r3, #0]

	while(BNO055_getSensorOffsets(&bno) != HAL_OK){
 8000a32:	e002      	b.n	8000a3a <main+0xca>
		sys = 2;
 8000a34:	4b0e      	ldr	r3, [pc, #56]	@ (8000a70 <main+0x100>)
 8000a36:	2202      	movs	r2, #2
 8000a38:	701a      	strb	r2, [r3, #0]
	while(BNO055_getSensorOffsets(&bno) != HAL_OK){
 8000a3a:	4809      	ldr	r0, [pc, #36]	@ (8000a60 <main+0xf0>)
 8000a3c:	f005 fa8b 	bl	8005f56 <BNO055_getSensorOffsets>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d1f6      	bne.n	8000a34 <main+0xc4>
	}

	BNO055_setSensoroffsets(&bno);
 8000a46:	4806      	ldr	r0, [pc, #24]	@ (8000a60 <main+0xf0>)
 8000a48:	f005 fb82 	bl	8006150 <BNO055_setSensoroffsets>
	sys = 3;
 8000a4c:	4b08      	ldr	r3, [pc, #32]	@ (8000a70 <main+0x100>)
 8000a4e:	2203      	movs	r2, #3
 8000a50:	701a      	strb	r2, [r3, #0]

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		HAL_Delay(100);
 8000a52:	2064      	movs	r0, #100	@ 0x64
 8000a54:	f000 fd2c 	bl	80014b0 <HAL_Delay>
 8000a58:	e7fb      	b.n	8000a52 <main+0xe2>
 8000a5a:	bf00      	nop
 8000a5c:	20000080 	.word	0x20000080
 8000a60:	20000198 	.word	0x20000198
 8000a64:	20000250 	.word	0x20000250
 8000a68:	20000299 	.word	0x20000299
 8000a6c:	2000029a 	.word	0x2000029a
 8000a70:	20000298 	.word	0x20000298

08000a74 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b094      	sub	sp, #80	@ 0x50
 8000a78:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a7a:	f107 0318 	add.w	r3, r7, #24
 8000a7e:	2238      	movs	r2, #56	@ 0x38
 8000a80:	2100      	movs	r1, #0
 8000a82:	4618      	mov	r0, r3
 8000a84:	f005 fc47 	bl	8006316 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a88:	1d3b      	adds	r3, r7, #4
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	601a      	str	r2, [r3, #0]
 8000a8e:	605a      	str	r2, [r3, #4]
 8000a90:	609a      	str	r2, [r3, #8]
 8000a92:	60da      	str	r2, [r3, #12]
 8000a94:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000a96:	2000      	movs	r0, #0
 8000a98:	f001 ffce 	bl	8002a38 <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a9c:	2302      	movs	r3, #2
 8000a9e:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000aa0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000aa4:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000aa6:	2340      	movs	r3, #64	@ 0x40
 8000aa8:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000aaa:	2302      	movs	r3, #2
 8000aac:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000aae:	2302      	movs	r3, #2
 8000ab0:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000ab2:	2304      	movs	r3, #4
 8000ab4:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 85;
 8000ab6:	2355      	movs	r3, #85	@ 0x55
 8000ab8:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000aba:	2302      	movs	r3, #2
 8000abc:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000abe:	2302      	movs	r3, #2
 8000ac0:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000ac2:	2302      	movs	r3, #2
 8000ac4:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ac6:	f107 0318 	add.w	r3, r7, #24
 8000aca:	4618      	mov	r0, r3
 8000acc:	f002 f868 	bl	8002ba0 <HAL_RCC_OscConfig>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d001      	beq.n	8000ada <SystemClock_Config+0x66>
	{
		Error_Handler();
 8000ad6:	f000 f818 	bl	8000b0a <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ada:	230f      	movs	r3, #15
 8000adc:	607b      	str	r3, [r7, #4]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ade:	2303      	movs	r3, #3
 8000ae0:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000aea:	2300      	movs	r3, #0
 8000aec:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000aee:	1d3b      	adds	r3, r7, #4
 8000af0:	2104      	movs	r1, #4
 8000af2:	4618      	mov	r0, r3
 8000af4:	f002 fb66 	bl	80031c4 <HAL_RCC_ClockConfig>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d001      	beq.n	8000b02 <SystemClock_Config+0x8e>
	{
		Error_Handler();
 8000afe:	f000 f804 	bl	8000b0a <Error_Handler>
	}
}
 8000b02:	bf00      	nop
 8000b04:	3750      	adds	r7, #80	@ 0x50
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}

08000b0a <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000b0a:	b480      	push	{r7}
 8000b0c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b0e:	b672      	cpsid	i
}
 8000b10:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000b12:	bf00      	nop
 8000b14:	e7fd      	b.n	8000b12 <Error_Handler+0x8>
	...

08000b18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b082      	sub	sp, #8
 8000b1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b1e:	4b0f      	ldr	r3, [pc, #60]	@ (8000b5c <HAL_MspInit+0x44>)
 8000b20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b22:	4a0e      	ldr	r2, [pc, #56]	@ (8000b5c <HAL_MspInit+0x44>)
 8000b24:	f043 0301 	orr.w	r3, r3, #1
 8000b28:	6613      	str	r3, [r2, #96]	@ 0x60
 8000b2a:	4b0c      	ldr	r3, [pc, #48]	@ (8000b5c <HAL_MspInit+0x44>)
 8000b2c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b2e:	f003 0301 	and.w	r3, r3, #1
 8000b32:	607b      	str	r3, [r7, #4]
 8000b34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b36:	4b09      	ldr	r3, [pc, #36]	@ (8000b5c <HAL_MspInit+0x44>)
 8000b38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b3a:	4a08      	ldr	r2, [pc, #32]	@ (8000b5c <HAL_MspInit+0x44>)
 8000b3c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b40:	6593      	str	r3, [r2, #88]	@ 0x58
 8000b42:	4b06      	ldr	r3, [pc, #24]	@ (8000b5c <HAL_MspInit+0x44>)
 8000b44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b4a:	603b      	str	r3, [r7, #0]
 8000b4c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000b4e:	f002 f817 	bl	8002b80 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b52:	bf00      	nop
 8000b54:	3708      	adds	r7, #8
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	40021000 	.word	0x40021000

08000b60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b64:	bf00      	nop
 8000b66:	e7fd      	b.n	8000b64 <NMI_Handler+0x4>

08000b68 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b6c:	bf00      	nop
 8000b6e:	e7fd      	b.n	8000b6c <HardFault_Handler+0x4>

08000b70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b74:	bf00      	nop
 8000b76:	e7fd      	b.n	8000b74 <MemManage_Handler+0x4>

08000b78 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b7c:	bf00      	nop
 8000b7e:	e7fd      	b.n	8000b7c <BusFault_Handler+0x4>

08000b80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b84:	bf00      	nop
 8000b86:	e7fd      	b.n	8000b84 <UsageFault_Handler+0x4>

08000b88 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b8c:	bf00      	nop
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b94:	4770      	bx	lr

08000b96 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b96:	b480      	push	{r7}
 8000b98:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b9a:	bf00      	nop
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba2:	4770      	bx	lr

08000ba4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ba8:	bf00      	nop
 8000baa:	46bd      	mov	sp, r7
 8000bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb0:	4770      	bx	lr

08000bb2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bb2:	b580      	push	{r7, lr}
 8000bb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bb6:	f000 fc5d 	bl	8001474 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bba:	bf00      	nop
 8000bbc:	bd80      	pop	{r7, pc}
	...

08000bc0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c3_tx);
 8000bc4:	4802      	ldr	r0, [pc, #8]	@ (8000bd0 <DMA1_Channel1_IRQHandler+0x10>)
 8000bc6:	f000 fe4d 	bl	8001864 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000bca:	bf00      	nop
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	200000d4 	.word	0x200000d4

08000bd4 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c3_rx);
 8000bd8:	4802      	ldr	r0, [pc, #8]	@ (8000be4 <DMA1_Channel2_IRQHandler+0x10>)
 8000bda:	f000 fe43 	bl	8001864 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8000bde:	bf00      	nop
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	20000134 	.word	0x20000134

08000be8 <I2C3_EV_IRQHandler>:

/**
  * @brief This function handles I2C3 event interrupt / I2C3 wake-up interrupt through EXTI line 27.
  */
void I2C3_EV_IRQHandler(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c3);
 8000bec:	4802      	ldr	r0, [pc, #8]	@ (8000bf8 <I2C3_EV_IRQHandler+0x10>)
 8000bee:	f001 fbaf 	bl	8002350 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C3_EV_IRQn 1 */

  /* USER CODE END I2C3_EV_IRQn 1 */
}
 8000bf2:	bf00      	nop
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	20000080 	.word	0x20000080

08000bfc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000c00:	4b06      	ldr	r3, [pc, #24]	@ (8000c1c <SystemInit+0x20>)
 8000c02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c06:	4a05      	ldr	r2, [pc, #20]	@ (8000c1c <SystemInit+0x20>)
 8000c08:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c0c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c10:	bf00      	nop
 8000c12:	46bd      	mov	sp, r7
 8000c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop
 8000c1c:	e000ed00 	.word	0xe000ed00

08000c20 <MX_TIM2_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim8;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b088      	sub	sp, #32
 8000c24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_HallSensor_InitTypeDef sConfig = {0};
 8000c26:	f107 0310 	add.w	r3, r7, #16
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	601a      	str	r2, [r3, #0]
 8000c2e:	605a      	str	r2, [r3, #4]
 8000c30:	609a      	str	r2, [r3, #8]
 8000c32:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c34:	1d3b      	adds	r3, r7, #4
 8000c36:	2200      	movs	r2, #0
 8000c38:	601a      	str	r2, [r3, #0]
 8000c3a:	605a      	str	r2, [r3, #4]
 8000c3c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c3e:	4b1c      	ldr	r3, [pc, #112]	@ (8000cb0 <MX_TIM2_Init+0x90>)
 8000c40:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000c44:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000c46:	4b1a      	ldr	r3, [pc, #104]	@ (8000cb0 <MX_TIM2_Init+0x90>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c4c:	4b18      	ldr	r3, [pc, #96]	@ (8000cb0 <MX_TIM2_Init+0x90>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000c52:	4b17      	ldr	r3, [pc, #92]	@ (8000cb0 <MX_TIM2_Init+0x90>)
 8000c54:	f04f 32ff 	mov.w	r2, #4294967295
 8000c58:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c5a:	4b15      	ldr	r3, [pc, #84]	@ (8000cb0 <MX_TIM2_Init+0x90>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c60:	4b13      	ldr	r3, [pc, #76]	@ (8000cb0 <MX_TIM2_Init+0x90>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	619a      	str	r2, [r3, #24]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000c66:	2300      	movs	r3, #0
 8000c68:	613b      	str	r3, [r7, #16]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Filter = 0;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	61bb      	str	r3, [r7, #24]
  sConfig.Commutation_Delay = 0;
 8000c72:	2300      	movs	r3, #0
 8000c74:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_HallSensor_Init(&htim2, &sConfig) != HAL_OK)
 8000c76:	f107 0310 	add.w	r3, r7, #16
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	480c      	ldr	r0, [pc, #48]	@ (8000cb0 <MX_TIM2_Init+0x90>)
 8000c7e:	f003 feaf 	bl	80049e0 <HAL_TIMEx_HallSensor_Init>
 8000c82:	4603      	mov	r3, r0
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d001      	beq.n	8000c8c <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 8000c88:	f7ff ff3f 	bl	8000b0a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 8000c8c:	2350      	movs	r3, #80	@ 0x50
 8000c8e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c90:	2300      	movs	r3, #0
 8000c92:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c94:	1d3b      	adds	r3, r7, #4
 8000c96:	4619      	mov	r1, r3
 8000c98:	4805      	ldr	r0, [pc, #20]	@ (8000cb0 <MX_TIM2_Init+0x90>)
 8000c9a:	f003 ff51 	bl	8004b40 <HAL_TIMEx_MasterConfigSynchronization>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d001      	beq.n	8000ca8 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 8000ca4:	f7ff ff31 	bl	8000b0a <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000ca8:	bf00      	nop
 8000caa:	3720      	adds	r7, #32
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	2000029c 	.word	0x2000029c

08000cb4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b08c      	sub	sp, #48	@ 0x30
 8000cb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000cba:	f107 030c 	add.w	r3, r7, #12
 8000cbe:	2224      	movs	r2, #36	@ 0x24
 8000cc0:	2100      	movs	r1, #0
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f005 fb27 	bl	8006316 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cc8:	463b      	mov	r3, r7
 8000cca:	2200      	movs	r2, #0
 8000ccc:	601a      	str	r2, [r3, #0]
 8000cce:	605a      	str	r2, [r3, #4]
 8000cd0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000cd2:	4b21      	ldr	r3, [pc, #132]	@ (8000d58 <MX_TIM3_Init+0xa4>)
 8000cd4:	4a21      	ldr	r2, [pc, #132]	@ (8000d5c <MX_TIM3_Init+0xa8>)
 8000cd6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000cd8:	4b1f      	ldr	r3, [pc, #124]	@ (8000d58 <MX_TIM3_Init+0xa4>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cde:	4b1e      	ldr	r3, [pc, #120]	@ (8000d58 <MX_TIM3_Init+0xa4>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000ce4:	4b1c      	ldr	r3, [pc, #112]	@ (8000d58 <MX_TIM3_Init+0xa4>)
 8000ce6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000cea:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cec:	4b1a      	ldr	r3, [pc, #104]	@ (8000d58 <MX_TIM3_Init+0xa4>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cf2:	4b19      	ldr	r3, [pc, #100]	@ (8000d58 <MX_TIM3_Init+0xa4>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000cf8:	2301      	movs	r3, #1
 8000cfa:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000d00:	2301      	movs	r3, #1
 8000d02:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000d04:	2300      	movs	r3, #0
 8000d06:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000d10:	2301      	movs	r3, #1
 8000d12:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000d14:	2300      	movs	r3, #0
 8000d16:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000d1c:	f107 030c 	add.w	r3, r7, #12
 8000d20:	4619      	mov	r1, r3
 8000d22:	480d      	ldr	r0, [pc, #52]	@ (8000d58 <MX_TIM3_Init+0xa4>)
 8000d24:	f002 ff12 	bl	8003b4c <HAL_TIM_Encoder_Init>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d001      	beq.n	8000d32 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8000d2e:	f7ff feec 	bl	8000b0a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d32:	2300      	movs	r3, #0
 8000d34:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d36:	2300      	movs	r3, #0
 8000d38:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000d3a:	463b      	mov	r3, r7
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	4806      	ldr	r0, [pc, #24]	@ (8000d58 <MX_TIM3_Init+0xa4>)
 8000d40:	f003 fefe 	bl	8004b40 <HAL_TIMEx_MasterConfigSynchronization>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d001      	beq.n	8000d4e <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8000d4a:	f7ff fede 	bl	8000b0a <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000d4e:	bf00      	nop
 8000d50:	3730      	adds	r7, #48	@ 0x30
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	200002e8 	.word	0x200002e8
 8000d5c:	40000400 	.word	0x40000400

08000d60 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b08c      	sub	sp, #48	@ 0x30
 8000d64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000d66:	f107 030c 	add.w	r3, r7, #12
 8000d6a:	2224      	movs	r2, #36	@ 0x24
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f005 fad1 	bl	8006316 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d74:	463b      	mov	r3, r7
 8000d76:	2200      	movs	r2, #0
 8000d78:	601a      	str	r2, [r3, #0]
 8000d7a:	605a      	str	r2, [r3, #4]
 8000d7c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000d7e:	4b21      	ldr	r3, [pc, #132]	@ (8000e04 <MX_TIM4_Init+0xa4>)
 8000d80:	4a21      	ldr	r2, [pc, #132]	@ (8000e08 <MX_TIM4_Init+0xa8>)
 8000d82:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000d84:	4b1f      	ldr	r3, [pc, #124]	@ (8000e04 <MX_TIM4_Init+0xa4>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d8a:	4b1e      	ldr	r3, [pc, #120]	@ (8000e04 <MX_TIM4_Init+0xa4>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000d90:	4b1c      	ldr	r3, [pc, #112]	@ (8000e04 <MX_TIM4_Init+0xa4>)
 8000d92:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000d96:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d98:	4b1a      	ldr	r3, [pc, #104]	@ (8000e04 <MX_TIM4_Init+0xa4>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d9e:	4b19      	ldr	r3, [pc, #100]	@ (8000e04 <MX_TIM4_Init+0xa4>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000da4:	2301      	movs	r3, #1
 8000da6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000da8:	2300      	movs	r3, #0
 8000daa:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000dac:	2301      	movs	r3, #1
 8000dae:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000db0:	2300      	movs	r3, #0
 8000db2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000db4:	2300      	movs	r3, #0
 8000db6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000db8:	2300      	movs	r3, #0
 8000dba:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000dbc:	2301      	movs	r3, #1
 8000dbe:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8000dc8:	f107 030c 	add.w	r3, r7, #12
 8000dcc:	4619      	mov	r1, r3
 8000dce:	480d      	ldr	r0, [pc, #52]	@ (8000e04 <MX_TIM4_Init+0xa4>)
 8000dd0:	f002 febc 	bl	8003b4c <HAL_TIM_Encoder_Init>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d001      	beq.n	8000dde <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8000dda:	f7ff fe96 	bl	8000b0a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dde:	2300      	movs	r3, #0
 8000de0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000de2:	2300      	movs	r3, #0
 8000de4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000de6:	463b      	mov	r3, r7
 8000de8:	4619      	mov	r1, r3
 8000dea:	4806      	ldr	r0, [pc, #24]	@ (8000e04 <MX_TIM4_Init+0xa4>)
 8000dec:	f003 fea8 	bl	8004b40 <HAL_TIMEx_MasterConfigSynchronization>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d001      	beq.n	8000dfa <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8000df6:	f7ff fe88 	bl	8000b0a <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000dfa:	bf00      	nop
 8000dfc:	3730      	adds	r7, #48	@ 0x30
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	20000334 	.word	0x20000334
 8000e08:	40000800 	.word	0x40000800

08000e0c <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b09c      	sub	sp, #112	@ 0x70
 8000e10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e12:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000e16:	2200      	movs	r2, #0
 8000e18:	601a      	str	r2, [r3, #0]
 8000e1a:	605a      	str	r2, [r3, #4]
 8000e1c:	609a      	str	r2, [r3, #8]
 8000e1e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e20:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000e24:	2200      	movs	r2, #0
 8000e26:	601a      	str	r2, [r3, #0]
 8000e28:	605a      	str	r2, [r3, #4]
 8000e2a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e2c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000e30:	2200      	movs	r2, #0
 8000e32:	601a      	str	r2, [r3, #0]
 8000e34:	605a      	str	r2, [r3, #4]
 8000e36:	609a      	str	r2, [r3, #8]
 8000e38:	60da      	str	r2, [r3, #12]
 8000e3a:	611a      	str	r2, [r3, #16]
 8000e3c:	615a      	str	r2, [r3, #20]
 8000e3e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000e40:	1d3b      	adds	r3, r7, #4
 8000e42:	2234      	movs	r2, #52	@ 0x34
 8000e44:	2100      	movs	r1, #0
 8000e46:	4618      	mov	r0, r3
 8000e48:	f005 fa65 	bl	8006316 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000e4c:	4b4b      	ldr	r3, [pc, #300]	@ (8000f7c <MX_TIM8_Init+0x170>)
 8000e4e:	4a4c      	ldr	r2, [pc, #304]	@ (8000f80 <MX_TIM8_Init+0x174>)
 8000e50:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8000e52:	4b4a      	ldr	r3, [pc, #296]	@ (8000f7c <MX_TIM8_Init+0x170>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e58:	4b48      	ldr	r3, [pc, #288]	@ (8000f7c <MX_TIM8_Init+0x170>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8000e5e:	4b47      	ldr	r3, [pc, #284]	@ (8000f7c <MX_TIM8_Init+0x170>)
 8000e60:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000e64:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e66:	4b45      	ldr	r3, [pc, #276]	@ (8000f7c <MX_TIM8_Init+0x170>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000e6c:	4b43      	ldr	r3, [pc, #268]	@ (8000f7c <MX_TIM8_Init+0x170>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e72:	4b42      	ldr	r3, [pc, #264]	@ (8000f7c <MX_TIM8_Init+0x170>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8000e78:	4840      	ldr	r0, [pc, #256]	@ (8000f7c <MX_TIM8_Init+0x170>)
 8000e7a:	f002 fdaf 	bl	80039dc <HAL_TIM_Base_Init>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d001      	beq.n	8000e88 <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 8000e84:	f7ff fe41 	bl	8000b0a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e88:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e8c:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8000e8e:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000e92:	4619      	mov	r1, r3
 8000e94:	4839      	ldr	r0, [pc, #228]	@ (8000f7c <MX_TIM8_Init+0x170>)
 8000e96:	f003 f813 	bl	8003ec0 <HAL_TIM_ConfigClockSource>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d001      	beq.n	8000ea4 <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 8000ea0:	f7ff fe33 	bl	8000b0a <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8000ea4:	4835      	ldr	r0, [pc, #212]	@ (8000f7c <MX_TIM8_Init+0x170>)
 8000ea6:	f002 fdf0 	bl	8003a8a <HAL_TIM_PWM_Init>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d001      	beq.n	8000eb4 <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 8000eb0:	f7ff fe2b 	bl	8000b0a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000ec0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	482d      	ldr	r0, [pc, #180]	@ (8000f7c <MX_TIM8_Init+0x170>)
 8000ec8:	f003 fe3a 	bl	8004b40 <HAL_TIMEx_MasterConfigSynchronization>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d001      	beq.n	8000ed6 <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 8000ed2:	f7ff fe1a 	bl	8000b0a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ed6:	2360      	movs	r3, #96	@ 0x60
 8000ed8:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8000eda:	2300      	movs	r3, #0
 8000edc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000eea:	2300      	movs	r3, #0
 8000eec:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ef2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	4619      	mov	r1, r3
 8000efa:	4820      	ldr	r0, [pc, #128]	@ (8000f7c <MX_TIM8_Init+0x170>)
 8000efc:	f002 fecc 	bl	8003c98 <HAL_TIM_PWM_ConfigChannel>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d001      	beq.n	8000f0a <MX_TIM8_Init+0xfe>
  {
    Error_Handler();
 8000f06:	f7ff fe00 	bl	8000b0a <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000f0a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000f0e:	2204      	movs	r2, #4
 8000f10:	4619      	mov	r1, r3
 8000f12:	481a      	ldr	r0, [pc, #104]	@ (8000f7c <MX_TIM8_Init+0x170>)
 8000f14:	f002 fec0 	bl	8003c98 <HAL_TIM_PWM_ConfigChannel>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d001      	beq.n	8000f22 <MX_TIM8_Init+0x116>
  {
    Error_Handler();
 8000f1e:	f7ff fdf4 	bl	8000b0a <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000f22:	2300      	movs	r3, #0
 8000f24:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000f26:	2300      	movs	r3, #0
 8000f28:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000f32:	2300      	movs	r3, #0
 8000f34:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000f36:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f3a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000f40:	2300      	movs	r3, #0
 8000f42:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000f44:	2300      	movs	r3, #0
 8000f46:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000f48:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000f4c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000f52:	2300      	movs	r3, #0
 8000f54:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000f56:	2300      	movs	r3, #0
 8000f58:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8000f5a:	1d3b      	adds	r3, r7, #4
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	4807      	ldr	r0, [pc, #28]	@ (8000f7c <MX_TIM8_Init+0x170>)
 8000f60:	f003 fe70 	bl	8004c44 <HAL_TIMEx_ConfigBreakDeadTime>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d001      	beq.n	8000f6e <MX_TIM8_Init+0x162>
  {
    Error_Handler();
 8000f6a:	f7ff fdce 	bl	8000b0a <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8000f6e:	4803      	ldr	r0, [pc, #12]	@ (8000f7c <MX_TIM8_Init+0x170>)
 8000f70:	f000 f90c 	bl	800118c <HAL_TIM_MspPostInit>

}
 8000f74:	bf00      	nop
 8000f76:	3770      	adds	r7, #112	@ 0x70
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	20000380 	.word	0x20000380
 8000f80:	40013400 	.word	0x40013400

08000f84 <HAL_TIMEx_HallSensor_MspInit>:

void HAL_TIMEx_HallSensor_MspInit(TIM_HandleTypeDef* timex_hallsensorHandle)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b08a      	sub	sp, #40	@ 0x28
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f8c:	f107 0314 	add.w	r3, r7, #20
 8000f90:	2200      	movs	r2, #0
 8000f92:	601a      	str	r2, [r3, #0]
 8000f94:	605a      	str	r2, [r3, #4]
 8000f96:	609a      	str	r2, [r3, #8]
 8000f98:	60da      	str	r2, [r3, #12]
 8000f9a:	611a      	str	r2, [r3, #16]
  if(timex_hallsensorHandle->Instance==TIM2)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000fa4:	d13a      	bne.n	800101c <HAL_TIMEx_HallSensor_MspInit+0x98>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000fa6:	4b1f      	ldr	r3, [pc, #124]	@ (8001024 <HAL_TIMEx_HallSensor_MspInit+0xa0>)
 8000fa8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000faa:	4a1e      	ldr	r2, [pc, #120]	@ (8001024 <HAL_TIMEx_HallSensor_MspInit+0xa0>)
 8000fac:	f043 0301 	orr.w	r3, r3, #1
 8000fb0:	6593      	str	r3, [r2, #88]	@ 0x58
 8000fb2:	4b1c      	ldr	r3, [pc, #112]	@ (8001024 <HAL_TIMEx_HallSensor_MspInit+0xa0>)
 8000fb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fb6:	f003 0301 	and.w	r3, r3, #1
 8000fba:	613b      	str	r3, [r7, #16]
 8000fbc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fbe:	4b19      	ldr	r3, [pc, #100]	@ (8001024 <HAL_TIMEx_HallSensor_MspInit+0xa0>)
 8000fc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fc2:	4a18      	ldr	r2, [pc, #96]	@ (8001024 <HAL_TIMEx_HallSensor_MspInit+0xa0>)
 8000fc4:	f043 0301 	orr.w	r3, r3, #1
 8000fc8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fca:	4b16      	ldr	r3, [pc, #88]	@ (8001024 <HAL_TIMEx_HallSensor_MspInit+0xa0>)
 8000fcc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fce:	f003 0301 	and.w	r3, r3, #1
 8000fd2:	60fb      	str	r3, [r7, #12]
 8000fd4:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA5     ------> TIM2_CH1
    PA9     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5;
 8000fd6:	2322      	movs	r3, #34	@ 0x22
 8000fd8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fda:	2302      	movs	r3, #2
 8000fdc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fea:	f107 0314 	add.w	r3, r7, #20
 8000fee:	4619      	mov	r1, r3
 8000ff0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ff4:	f000 fd48 	bl	8001a88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000ff8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000ffc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ffe:	2302      	movs	r3, #2
 8001000:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001002:	2300      	movs	r3, #0
 8001004:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001006:	2300      	movs	r3, #0
 8001008:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM2;
 800100a:	230a      	movs	r3, #10
 800100c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800100e:	f107 0314 	add.w	r3, r7, #20
 8001012:	4619      	mov	r1, r3
 8001014:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001018:	f000 fd36 	bl	8001a88 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800101c:	bf00      	nop
 800101e:	3728      	adds	r7, #40	@ 0x28
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}
 8001024:	40021000 	.word	0x40021000

08001028 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b08c      	sub	sp, #48	@ 0x30
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001030:	f107 031c 	add.w	r3, r7, #28
 8001034:	2200      	movs	r2, #0
 8001036:	601a      	str	r2, [r3, #0]
 8001038:	605a      	str	r2, [r3, #4]
 800103a:	609a      	str	r2, [r3, #8]
 800103c:	60da      	str	r2, [r3, #12]
 800103e:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4a3d      	ldr	r2, [pc, #244]	@ (800113c <HAL_TIM_Encoder_MspInit+0x114>)
 8001046:	4293      	cmp	r3, r2
 8001048:	d145      	bne.n	80010d6 <HAL_TIM_Encoder_MspInit+0xae>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800104a:	4b3d      	ldr	r3, [pc, #244]	@ (8001140 <HAL_TIM_Encoder_MspInit+0x118>)
 800104c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800104e:	4a3c      	ldr	r2, [pc, #240]	@ (8001140 <HAL_TIM_Encoder_MspInit+0x118>)
 8001050:	f043 0302 	orr.w	r3, r3, #2
 8001054:	6593      	str	r3, [r2, #88]	@ 0x58
 8001056:	4b3a      	ldr	r3, [pc, #232]	@ (8001140 <HAL_TIM_Encoder_MspInit+0x118>)
 8001058:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800105a:	f003 0302 	and.w	r3, r3, #2
 800105e:	61bb      	str	r3, [r7, #24]
 8001060:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001062:	4b37      	ldr	r3, [pc, #220]	@ (8001140 <HAL_TIM_Encoder_MspInit+0x118>)
 8001064:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001066:	4a36      	ldr	r2, [pc, #216]	@ (8001140 <HAL_TIM_Encoder_MspInit+0x118>)
 8001068:	f043 0301 	orr.w	r3, r3, #1
 800106c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800106e:	4b34      	ldr	r3, [pc, #208]	@ (8001140 <HAL_TIM_Encoder_MspInit+0x118>)
 8001070:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001072:	f003 0301 	and.w	r3, r3, #1
 8001076:	617b      	str	r3, [r7, #20]
 8001078:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800107a:	4b31      	ldr	r3, [pc, #196]	@ (8001140 <HAL_TIM_Encoder_MspInit+0x118>)
 800107c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800107e:	4a30      	ldr	r2, [pc, #192]	@ (8001140 <HAL_TIM_Encoder_MspInit+0x118>)
 8001080:	f043 0302 	orr.w	r3, r3, #2
 8001084:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001086:	4b2e      	ldr	r3, [pc, #184]	@ (8001140 <HAL_TIM_Encoder_MspInit+0x118>)
 8001088:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800108a:	f003 0302 	and.w	r3, r3, #2
 800108e:	613b      	str	r3, [r7, #16]
 8001090:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PA4     ------> TIM3_CH2
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001092:	2310      	movs	r3, #16
 8001094:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001096:	2302      	movs	r3, #2
 8001098:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109a:	2300      	movs	r3, #0
 800109c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800109e:	2300      	movs	r3, #0
 80010a0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80010a2:	2302      	movs	r3, #2
 80010a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010a6:	f107 031c 	add.w	r3, r7, #28
 80010aa:	4619      	mov	r1, r3
 80010ac:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010b0:	f000 fcea 	bl	8001a88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80010b4:	2310      	movs	r3, #16
 80010b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b8:	2302      	movs	r3, #2
 80010ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010bc:	2300      	movs	r3, #0
 80010be:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c0:	2300      	movs	r3, #0
 80010c2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80010c4:	2302      	movs	r3, #2
 80010c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010c8:	f107 031c 	add.w	r3, r7, #28
 80010cc:	4619      	mov	r1, r3
 80010ce:	481d      	ldr	r0, [pc, #116]	@ (8001144 <HAL_TIM_Encoder_MspInit+0x11c>)
 80010d0:	f000 fcda 	bl	8001a88 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80010d4:	e02e      	b.n	8001134 <HAL_TIM_Encoder_MspInit+0x10c>
  else if(tim_encoderHandle->Instance==TIM4)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	4a1b      	ldr	r2, [pc, #108]	@ (8001148 <HAL_TIM_Encoder_MspInit+0x120>)
 80010dc:	4293      	cmp	r3, r2
 80010de:	d129      	bne.n	8001134 <HAL_TIM_Encoder_MspInit+0x10c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80010e0:	4b17      	ldr	r3, [pc, #92]	@ (8001140 <HAL_TIM_Encoder_MspInit+0x118>)
 80010e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010e4:	4a16      	ldr	r2, [pc, #88]	@ (8001140 <HAL_TIM_Encoder_MspInit+0x118>)
 80010e6:	f043 0304 	orr.w	r3, r3, #4
 80010ea:	6593      	str	r3, [r2, #88]	@ 0x58
 80010ec:	4b14      	ldr	r3, [pc, #80]	@ (8001140 <HAL_TIM_Encoder_MspInit+0x118>)
 80010ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010f0:	f003 0304 	and.w	r3, r3, #4
 80010f4:	60fb      	str	r3, [r7, #12]
 80010f6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010f8:	4b11      	ldr	r3, [pc, #68]	@ (8001140 <HAL_TIM_Encoder_MspInit+0x118>)
 80010fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010fc:	4a10      	ldr	r2, [pc, #64]	@ (8001140 <HAL_TIM_Encoder_MspInit+0x118>)
 80010fe:	f043 0301 	orr.w	r3, r3, #1
 8001102:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001104:	4b0e      	ldr	r3, [pc, #56]	@ (8001140 <HAL_TIM_Encoder_MspInit+0x118>)
 8001106:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001108:	f003 0301 	and.w	r3, r3, #1
 800110c:	60bb      	str	r3, [r7, #8]
 800110e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001110:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001114:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001116:	2302      	movs	r3, #2
 8001118:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111a:	2300      	movs	r3, #0
 800111c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800111e:	2300      	movs	r3, #0
 8001120:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8001122:	230a      	movs	r3, #10
 8001124:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001126:	f107 031c 	add.w	r3, r7, #28
 800112a:	4619      	mov	r1, r3
 800112c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001130:	f000 fcaa 	bl	8001a88 <HAL_GPIO_Init>
}
 8001134:	bf00      	nop
 8001136:	3730      	adds	r7, #48	@ 0x30
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}
 800113c:	40000400 	.word	0x40000400
 8001140:	40021000 	.word	0x40021000
 8001144:	48000400 	.word	0x48000400
 8001148:	40000800 	.word	0x40000800

0800114c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800114c:	b480      	push	{r7}
 800114e:	b085      	sub	sp, #20
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM8)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4a0a      	ldr	r2, [pc, #40]	@ (8001184 <HAL_TIM_Base_MspInit+0x38>)
 800115a:	4293      	cmp	r3, r2
 800115c:	d10b      	bne.n	8001176 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* TIM8 clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 800115e:	4b0a      	ldr	r3, [pc, #40]	@ (8001188 <HAL_TIM_Base_MspInit+0x3c>)
 8001160:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001162:	4a09      	ldr	r2, [pc, #36]	@ (8001188 <HAL_TIM_Base_MspInit+0x3c>)
 8001164:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001168:	6613      	str	r3, [r2, #96]	@ 0x60
 800116a:	4b07      	ldr	r3, [pc, #28]	@ (8001188 <HAL_TIM_Base_MspInit+0x3c>)
 800116c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800116e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001172:	60fb      	str	r3, [r7, #12]
 8001174:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8001176:	bf00      	nop
 8001178:	3714      	adds	r7, #20
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr
 8001182:	bf00      	nop
 8001184:	40013400 	.word	0x40013400
 8001188:	40021000 	.word	0x40021000

0800118c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b08a      	sub	sp, #40	@ 0x28
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001194:	f107 0314 	add.w	r3, r7, #20
 8001198:	2200      	movs	r2, #0
 800119a:	601a      	str	r2, [r3, #0]
 800119c:	605a      	str	r2, [r3, #4]
 800119e:	609a      	str	r2, [r3, #8]
 80011a0:	60da      	str	r2, [r3, #12]
 80011a2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM8)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4a1f      	ldr	r2, [pc, #124]	@ (8001228 <HAL_TIM_MspPostInit+0x9c>)
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d138      	bne.n	8001220 <HAL_TIM_MspPostInit+0x94>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ae:	4b1f      	ldr	r3, [pc, #124]	@ (800122c <HAL_TIM_MspPostInit+0xa0>)
 80011b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011b2:	4a1e      	ldr	r2, [pc, #120]	@ (800122c <HAL_TIM_MspPostInit+0xa0>)
 80011b4:	f043 0301 	orr.w	r3, r3, #1
 80011b8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011ba:	4b1c      	ldr	r3, [pc, #112]	@ (800122c <HAL_TIM_MspPostInit+0xa0>)
 80011bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011be:	f003 0301 	and.w	r3, r3, #1
 80011c2:	613b      	str	r3, [r7, #16]
 80011c4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011c6:	4b19      	ldr	r3, [pc, #100]	@ (800122c <HAL_TIM_MspPostInit+0xa0>)
 80011c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011ca:	4a18      	ldr	r2, [pc, #96]	@ (800122c <HAL_TIM_MspPostInit+0xa0>)
 80011cc:	f043 0302 	orr.w	r3, r3, #2
 80011d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011d2:	4b16      	ldr	r3, [pc, #88]	@ (800122c <HAL_TIM_MspPostInit+0xa0>)
 80011d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011d6:	f003 0302 	and.w	r3, r3, #2
 80011da:	60fb      	str	r3, [r7, #12]
 80011dc:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PA7     ------> TIM8_CH1N
    PB0     ------> TIM8_CH2N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80011de:	2380      	movs	r3, #128	@ 0x80
 80011e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e2:	2302      	movs	r3, #2
 80011e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e6:	2300      	movs	r3, #0
 80011e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ea:	2300      	movs	r3, #0
 80011ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 80011ee:	2304      	movs	r3, #4
 80011f0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011f2:	f107 0314 	add.w	r3, r7, #20
 80011f6:	4619      	mov	r1, r3
 80011f8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011fc:	f000 fc44 	bl	8001a88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001200:	2301      	movs	r3, #1
 8001202:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001204:	2302      	movs	r3, #2
 8001206:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001208:	2300      	movs	r3, #0
 800120a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800120c:	2300      	movs	r3, #0
 800120e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8001210:	2304      	movs	r3, #4
 8001212:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001214:	f107 0314 	add.w	r3, r7, #20
 8001218:	4619      	mov	r1, r3
 800121a:	4805      	ldr	r0, [pc, #20]	@ (8001230 <HAL_TIM_MspPostInit+0xa4>)
 800121c:	f000 fc34 	bl	8001a88 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8001220:	bf00      	nop
 8001222:	3728      	adds	r7, #40	@ 0x28
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}
 8001228:	40013400 	.word	0x40013400
 800122c:	40021000 	.word	0x40021000
 8001230:	48000400 	.word	0x48000400

08001234 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001238:	4b22      	ldr	r3, [pc, #136]	@ (80012c4 <MX_USART2_UART_Init+0x90>)
 800123a:	4a23      	ldr	r2, [pc, #140]	@ (80012c8 <MX_USART2_UART_Init+0x94>)
 800123c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800123e:	4b21      	ldr	r3, [pc, #132]	@ (80012c4 <MX_USART2_UART_Init+0x90>)
 8001240:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001244:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001246:	4b1f      	ldr	r3, [pc, #124]	@ (80012c4 <MX_USART2_UART_Init+0x90>)
 8001248:	2200      	movs	r2, #0
 800124a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800124c:	4b1d      	ldr	r3, [pc, #116]	@ (80012c4 <MX_USART2_UART_Init+0x90>)
 800124e:	2200      	movs	r2, #0
 8001250:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001252:	4b1c      	ldr	r3, [pc, #112]	@ (80012c4 <MX_USART2_UART_Init+0x90>)
 8001254:	2200      	movs	r2, #0
 8001256:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001258:	4b1a      	ldr	r3, [pc, #104]	@ (80012c4 <MX_USART2_UART_Init+0x90>)
 800125a:	220c      	movs	r2, #12
 800125c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800125e:	4b19      	ldr	r3, [pc, #100]	@ (80012c4 <MX_USART2_UART_Init+0x90>)
 8001260:	2200      	movs	r2, #0
 8001262:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001264:	4b17      	ldr	r3, [pc, #92]	@ (80012c4 <MX_USART2_UART_Init+0x90>)
 8001266:	2200      	movs	r2, #0
 8001268:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800126a:	4b16      	ldr	r3, [pc, #88]	@ (80012c4 <MX_USART2_UART_Init+0x90>)
 800126c:	2200      	movs	r2, #0
 800126e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001270:	4b14      	ldr	r3, [pc, #80]	@ (80012c4 <MX_USART2_UART_Init+0x90>)
 8001272:	2200      	movs	r2, #0
 8001274:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001276:	4b13      	ldr	r3, [pc, #76]	@ (80012c4 <MX_USART2_UART_Init+0x90>)
 8001278:	2200      	movs	r2, #0
 800127a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800127c:	4811      	ldr	r0, [pc, #68]	@ (80012c4 <MX_USART2_UART_Init+0x90>)
 800127e:	f003 fd6d 	bl	8004d5c <HAL_UART_Init>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	d001      	beq.n	800128c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001288:	f7ff fc3f 	bl	8000b0a <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800128c:	2100      	movs	r1, #0
 800128e:	480d      	ldr	r0, [pc, #52]	@ (80012c4 <MX_USART2_UART_Init+0x90>)
 8001290:	f004 fad8 	bl	8005844 <HAL_UARTEx_SetTxFifoThreshold>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d001      	beq.n	800129e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800129a:	f7ff fc36 	bl	8000b0a <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800129e:	2100      	movs	r1, #0
 80012a0:	4808      	ldr	r0, [pc, #32]	@ (80012c4 <MX_USART2_UART_Init+0x90>)
 80012a2:	f004 fb0d 	bl	80058c0 <HAL_UARTEx_SetRxFifoThreshold>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d001      	beq.n	80012b0 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80012ac:	f7ff fc2d 	bl	8000b0a <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80012b0:	4804      	ldr	r0, [pc, #16]	@ (80012c4 <MX_USART2_UART_Init+0x90>)
 80012b2:	f004 fa8e 	bl	80057d2 <HAL_UARTEx_DisableFifoMode>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d001      	beq.n	80012c0 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80012bc:	f7ff fc25 	bl	8000b0a <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80012c0:	bf00      	nop
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	200003cc 	.word	0x200003cc
 80012c8:	40004400 	.word	0x40004400

080012cc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b09a      	sub	sp, #104	@ 0x68
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012d4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80012d8:	2200      	movs	r2, #0
 80012da:	601a      	str	r2, [r3, #0]
 80012dc:	605a      	str	r2, [r3, #4]
 80012de:	609a      	str	r2, [r3, #8]
 80012e0:	60da      	str	r2, [r3, #12]
 80012e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012e4:	f107 0310 	add.w	r3, r7, #16
 80012e8:	2244      	movs	r2, #68	@ 0x44
 80012ea:	2100      	movs	r1, #0
 80012ec:	4618      	mov	r0, r3
 80012ee:	f005 f812 	bl	8006316 <memset>
  if(uartHandle->Instance==USART2)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	4a1f      	ldr	r2, [pc, #124]	@ (8001374 <HAL_UART_MspInit+0xa8>)
 80012f8:	4293      	cmp	r3, r2
 80012fa:	d136      	bne.n	800136a <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80012fc:	2302      	movs	r3, #2
 80012fe:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001300:	2300      	movs	r3, #0
 8001302:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001304:	f107 0310 	add.w	r3, r7, #16
 8001308:	4618      	mov	r0, r3
 800130a:	f002 f977 	bl	80035fc <HAL_RCCEx_PeriphCLKConfig>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d001      	beq.n	8001318 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001314:	f7ff fbf9 	bl	8000b0a <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001318:	4b17      	ldr	r3, [pc, #92]	@ (8001378 <HAL_UART_MspInit+0xac>)
 800131a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800131c:	4a16      	ldr	r2, [pc, #88]	@ (8001378 <HAL_UART_MspInit+0xac>)
 800131e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001322:	6593      	str	r3, [r2, #88]	@ 0x58
 8001324:	4b14      	ldr	r3, [pc, #80]	@ (8001378 <HAL_UART_MspInit+0xac>)
 8001326:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001328:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800132c:	60fb      	str	r3, [r7, #12]
 800132e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001330:	4b11      	ldr	r3, [pc, #68]	@ (8001378 <HAL_UART_MspInit+0xac>)
 8001332:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001334:	4a10      	ldr	r2, [pc, #64]	@ (8001378 <HAL_UART_MspInit+0xac>)
 8001336:	f043 0301 	orr.w	r3, r3, #1
 800133a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800133c:	4b0e      	ldr	r3, [pc, #56]	@ (8001378 <HAL_UART_MspInit+0xac>)
 800133e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001340:	f003 0301 	and.w	r3, r3, #1
 8001344:	60bb      	str	r3, [r7, #8]
 8001346:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8001348:	230c      	movs	r3, #12
 800134a:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800134c:	2302      	movs	r3, #2
 800134e:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001350:	2300      	movs	r3, #0
 8001352:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001354:	2300      	movs	r3, #0
 8001356:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001358:	2307      	movs	r3, #7
 800135a:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800135c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001360:	4619      	mov	r1, r3
 8001362:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001366:	f000 fb8f 	bl	8001a88 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800136a:	bf00      	nop
 800136c:	3768      	adds	r7, #104	@ 0x68
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	40004400 	.word	0x40004400
 8001378:	40021000 	.word	0x40021000

0800137c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800137c:	480d      	ldr	r0, [pc, #52]	@ (80013b4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800137e:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001380:	f7ff fc3c 	bl	8000bfc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001384:	480c      	ldr	r0, [pc, #48]	@ (80013b8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001386:	490d      	ldr	r1, [pc, #52]	@ (80013bc <LoopForever+0xa>)
  ldr r2, =_sidata
 8001388:	4a0d      	ldr	r2, [pc, #52]	@ (80013c0 <LoopForever+0xe>)
  movs r3, #0
 800138a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800138c:	e002      	b.n	8001394 <LoopCopyDataInit>

0800138e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800138e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001390:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001392:	3304      	adds	r3, #4

08001394 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001394:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001396:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001398:	d3f9      	bcc.n	800138e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800139a:	4a0a      	ldr	r2, [pc, #40]	@ (80013c4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800139c:	4c0a      	ldr	r4, [pc, #40]	@ (80013c8 <LoopForever+0x16>)
  movs r3, #0
 800139e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013a0:	e001      	b.n	80013a6 <LoopFillZerobss>

080013a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013a4:	3204      	adds	r2, #4

080013a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013a8:	d3fb      	bcc.n	80013a2 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 80013aa:	f004 ffbd 	bl	8006328 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80013ae:	f7ff fadf 	bl	8000970 <main>

080013b2 <LoopForever>:

LoopForever:
    b LoopForever
 80013b2:	e7fe      	b.n	80013b2 <LoopForever>
  ldr   r0, =_estack
 80013b4:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80013b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013bc:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80013c0:	080063d8 	.word	0x080063d8
  ldr r2, =_sbss
 80013c4:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80013c8:	20000464 	.word	0x20000464

080013cc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80013cc:	e7fe      	b.n	80013cc <ADC1_2_IRQHandler>

080013ce <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013ce:	b580      	push	{r7, lr}
 80013d0:	b082      	sub	sp, #8
 80013d2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80013d4:	2300      	movs	r3, #0
 80013d6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013d8:	2003      	movs	r0, #3
 80013da:	f000 f95b 	bl	8001694 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80013de:	2000      	movs	r0, #0
 80013e0:	f000 f80e 	bl	8001400 <HAL_InitTick>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d002      	beq.n	80013f0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80013ea:	2301      	movs	r3, #1
 80013ec:	71fb      	strb	r3, [r7, #7]
 80013ee:	e001      	b.n	80013f4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80013f0:	f7ff fb92 	bl	8000b18 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80013f4:	79fb      	ldrb	r3, [r7, #7]

}
 80013f6:	4618      	mov	r0, r3
 80013f8:	3708      	adds	r7, #8
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
	...

08001400 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b084      	sub	sp, #16
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001408:	2300      	movs	r3, #0
 800140a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800140c:	4b16      	ldr	r3, [pc, #88]	@ (8001468 <HAL_InitTick+0x68>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d022      	beq.n	800145a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001414:	4b15      	ldr	r3, [pc, #84]	@ (800146c <HAL_InitTick+0x6c>)
 8001416:	681a      	ldr	r2, [r3, #0]
 8001418:	4b13      	ldr	r3, [pc, #76]	@ (8001468 <HAL_InitTick+0x68>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001420:	fbb1 f3f3 	udiv	r3, r1, r3
 8001424:	fbb2 f3f3 	udiv	r3, r2, r3
 8001428:	4618      	mov	r0, r3
 800142a:	f000 f966 	bl	80016fa <HAL_SYSTICK_Config>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d10f      	bne.n	8001454 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	2b0f      	cmp	r3, #15
 8001438:	d809      	bhi.n	800144e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800143a:	2200      	movs	r2, #0
 800143c:	6879      	ldr	r1, [r7, #4]
 800143e:	f04f 30ff 	mov.w	r0, #4294967295
 8001442:	f000 f932 	bl	80016aa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001446:	4a0a      	ldr	r2, [pc, #40]	@ (8001470 <HAL_InitTick+0x70>)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6013      	str	r3, [r2, #0]
 800144c:	e007      	b.n	800145e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800144e:	2301      	movs	r3, #1
 8001450:	73fb      	strb	r3, [r7, #15]
 8001452:	e004      	b.n	800145e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001454:	2301      	movs	r3, #1
 8001456:	73fb      	strb	r3, [r7, #15]
 8001458:	e001      	b.n	800145e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800145a:	2301      	movs	r3, #1
 800145c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800145e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001460:	4618      	mov	r0, r3
 8001462:	3710      	adds	r7, #16
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}
 8001468:	20000008 	.word	0x20000008
 800146c:	20000000 	.word	0x20000000
 8001470:	20000004 	.word	0x20000004

08001474 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001474:	b480      	push	{r7}
 8001476:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001478:	4b05      	ldr	r3, [pc, #20]	@ (8001490 <HAL_IncTick+0x1c>)
 800147a:	681a      	ldr	r2, [r3, #0]
 800147c:	4b05      	ldr	r3, [pc, #20]	@ (8001494 <HAL_IncTick+0x20>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4413      	add	r3, r2
 8001482:	4a03      	ldr	r2, [pc, #12]	@ (8001490 <HAL_IncTick+0x1c>)
 8001484:	6013      	str	r3, [r2, #0]
}
 8001486:	bf00      	nop
 8001488:	46bd      	mov	sp, r7
 800148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148e:	4770      	bx	lr
 8001490:	20000460 	.word	0x20000460
 8001494:	20000008 	.word	0x20000008

08001498 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0
  return uwTick;
 800149c:	4b03      	ldr	r3, [pc, #12]	@ (80014ac <HAL_GetTick+0x14>)
 800149e:	681b      	ldr	r3, [r3, #0]
}
 80014a0:	4618      	mov	r0, r3
 80014a2:	46bd      	mov	sp, r7
 80014a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a8:	4770      	bx	lr
 80014aa:	bf00      	nop
 80014ac:	20000460 	.word	0x20000460

080014b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b084      	sub	sp, #16
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014b8:	f7ff ffee 	bl	8001498 <HAL_GetTick>
 80014bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014c8:	d004      	beq.n	80014d4 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80014ca:	4b09      	ldr	r3, [pc, #36]	@ (80014f0 <HAL_Delay+0x40>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	68fa      	ldr	r2, [r7, #12]
 80014d0:	4413      	add	r3, r2
 80014d2:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80014d4:	bf00      	nop
 80014d6:	f7ff ffdf 	bl	8001498 <HAL_GetTick>
 80014da:	4602      	mov	r2, r0
 80014dc:	68bb      	ldr	r3, [r7, #8]
 80014de:	1ad3      	subs	r3, r2, r3
 80014e0:	68fa      	ldr	r2, [r7, #12]
 80014e2:	429a      	cmp	r2, r3
 80014e4:	d8f7      	bhi.n	80014d6 <HAL_Delay+0x26>
  {
  }
}
 80014e6:	bf00      	nop
 80014e8:	bf00      	nop
 80014ea:	3710      	adds	r7, #16
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	20000008 	.word	0x20000008

080014f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b085      	sub	sp, #20
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	f003 0307 	and.w	r3, r3, #7
 8001502:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001504:	4b0c      	ldr	r3, [pc, #48]	@ (8001538 <__NVIC_SetPriorityGrouping+0x44>)
 8001506:	68db      	ldr	r3, [r3, #12]
 8001508:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800150a:	68ba      	ldr	r2, [r7, #8]
 800150c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001510:	4013      	ands	r3, r2
 8001512:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001518:	68bb      	ldr	r3, [r7, #8]
 800151a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800151c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001520:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001524:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001526:	4a04      	ldr	r2, [pc, #16]	@ (8001538 <__NVIC_SetPriorityGrouping+0x44>)
 8001528:	68bb      	ldr	r3, [r7, #8]
 800152a:	60d3      	str	r3, [r2, #12]
}
 800152c:	bf00      	nop
 800152e:	3714      	adds	r7, #20
 8001530:	46bd      	mov	sp, r7
 8001532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001536:	4770      	bx	lr
 8001538:	e000ed00 	.word	0xe000ed00

0800153c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001540:	4b04      	ldr	r3, [pc, #16]	@ (8001554 <__NVIC_GetPriorityGrouping+0x18>)
 8001542:	68db      	ldr	r3, [r3, #12]
 8001544:	0a1b      	lsrs	r3, r3, #8
 8001546:	f003 0307 	and.w	r3, r3, #7
}
 800154a:	4618      	mov	r0, r3
 800154c:	46bd      	mov	sp, r7
 800154e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001552:	4770      	bx	lr
 8001554:	e000ed00 	.word	0xe000ed00

08001558 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001558:	b480      	push	{r7}
 800155a:	b083      	sub	sp, #12
 800155c:	af00      	add	r7, sp, #0
 800155e:	4603      	mov	r3, r0
 8001560:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001562:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001566:	2b00      	cmp	r3, #0
 8001568:	db0b      	blt.n	8001582 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800156a:	79fb      	ldrb	r3, [r7, #7]
 800156c:	f003 021f 	and.w	r2, r3, #31
 8001570:	4907      	ldr	r1, [pc, #28]	@ (8001590 <__NVIC_EnableIRQ+0x38>)
 8001572:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001576:	095b      	lsrs	r3, r3, #5
 8001578:	2001      	movs	r0, #1
 800157a:	fa00 f202 	lsl.w	r2, r0, r2
 800157e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001582:	bf00      	nop
 8001584:	370c      	adds	r7, #12
 8001586:	46bd      	mov	sp, r7
 8001588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158c:	4770      	bx	lr
 800158e:	bf00      	nop
 8001590:	e000e100 	.word	0xe000e100

08001594 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001594:	b480      	push	{r7}
 8001596:	b083      	sub	sp, #12
 8001598:	af00      	add	r7, sp, #0
 800159a:	4603      	mov	r3, r0
 800159c:	6039      	str	r1, [r7, #0]
 800159e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	db0a      	blt.n	80015be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	b2da      	uxtb	r2, r3
 80015ac:	490c      	ldr	r1, [pc, #48]	@ (80015e0 <__NVIC_SetPriority+0x4c>)
 80015ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015b2:	0112      	lsls	r2, r2, #4
 80015b4:	b2d2      	uxtb	r2, r2
 80015b6:	440b      	add	r3, r1
 80015b8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015bc:	e00a      	b.n	80015d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	b2da      	uxtb	r2, r3
 80015c2:	4908      	ldr	r1, [pc, #32]	@ (80015e4 <__NVIC_SetPriority+0x50>)
 80015c4:	79fb      	ldrb	r3, [r7, #7]
 80015c6:	f003 030f 	and.w	r3, r3, #15
 80015ca:	3b04      	subs	r3, #4
 80015cc:	0112      	lsls	r2, r2, #4
 80015ce:	b2d2      	uxtb	r2, r2
 80015d0:	440b      	add	r3, r1
 80015d2:	761a      	strb	r2, [r3, #24]
}
 80015d4:	bf00      	nop
 80015d6:	370c      	adds	r7, #12
 80015d8:	46bd      	mov	sp, r7
 80015da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015de:	4770      	bx	lr
 80015e0:	e000e100 	.word	0xe000e100
 80015e4:	e000ed00 	.word	0xe000ed00

080015e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b089      	sub	sp, #36	@ 0x24
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	60f8      	str	r0, [r7, #12]
 80015f0:	60b9      	str	r1, [r7, #8]
 80015f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	f003 0307 	and.w	r3, r3, #7
 80015fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015fc:	69fb      	ldr	r3, [r7, #28]
 80015fe:	f1c3 0307 	rsb	r3, r3, #7
 8001602:	2b04      	cmp	r3, #4
 8001604:	bf28      	it	cs
 8001606:	2304      	movcs	r3, #4
 8001608:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800160a:	69fb      	ldr	r3, [r7, #28]
 800160c:	3304      	adds	r3, #4
 800160e:	2b06      	cmp	r3, #6
 8001610:	d902      	bls.n	8001618 <NVIC_EncodePriority+0x30>
 8001612:	69fb      	ldr	r3, [r7, #28]
 8001614:	3b03      	subs	r3, #3
 8001616:	e000      	b.n	800161a <NVIC_EncodePriority+0x32>
 8001618:	2300      	movs	r3, #0
 800161a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800161c:	f04f 32ff 	mov.w	r2, #4294967295
 8001620:	69bb      	ldr	r3, [r7, #24]
 8001622:	fa02 f303 	lsl.w	r3, r2, r3
 8001626:	43da      	mvns	r2, r3
 8001628:	68bb      	ldr	r3, [r7, #8]
 800162a:	401a      	ands	r2, r3
 800162c:	697b      	ldr	r3, [r7, #20]
 800162e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001630:	f04f 31ff 	mov.w	r1, #4294967295
 8001634:	697b      	ldr	r3, [r7, #20]
 8001636:	fa01 f303 	lsl.w	r3, r1, r3
 800163a:	43d9      	mvns	r1, r3
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001640:	4313      	orrs	r3, r2
         );
}
 8001642:	4618      	mov	r0, r3
 8001644:	3724      	adds	r7, #36	@ 0x24
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr
	...

08001650 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b082      	sub	sp, #8
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	3b01      	subs	r3, #1
 800165c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001660:	d301      	bcc.n	8001666 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001662:	2301      	movs	r3, #1
 8001664:	e00f      	b.n	8001686 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001666:	4a0a      	ldr	r2, [pc, #40]	@ (8001690 <SysTick_Config+0x40>)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	3b01      	subs	r3, #1
 800166c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800166e:	210f      	movs	r1, #15
 8001670:	f04f 30ff 	mov.w	r0, #4294967295
 8001674:	f7ff ff8e 	bl	8001594 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001678:	4b05      	ldr	r3, [pc, #20]	@ (8001690 <SysTick_Config+0x40>)
 800167a:	2200      	movs	r2, #0
 800167c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800167e:	4b04      	ldr	r3, [pc, #16]	@ (8001690 <SysTick_Config+0x40>)
 8001680:	2207      	movs	r2, #7
 8001682:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001684:	2300      	movs	r3, #0
}
 8001686:	4618      	mov	r0, r3
 8001688:	3708      	adds	r7, #8
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	e000e010 	.word	0xe000e010

08001694 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b082      	sub	sp, #8
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800169c:	6878      	ldr	r0, [r7, #4]
 800169e:	f7ff ff29 	bl	80014f4 <__NVIC_SetPriorityGrouping>
}
 80016a2:	bf00      	nop
 80016a4:	3708      	adds	r7, #8
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}

080016aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016aa:	b580      	push	{r7, lr}
 80016ac:	b086      	sub	sp, #24
 80016ae:	af00      	add	r7, sp, #0
 80016b0:	4603      	mov	r3, r0
 80016b2:	60b9      	str	r1, [r7, #8]
 80016b4:	607a      	str	r2, [r7, #4]
 80016b6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80016b8:	f7ff ff40 	bl	800153c <__NVIC_GetPriorityGrouping>
 80016bc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016be:	687a      	ldr	r2, [r7, #4]
 80016c0:	68b9      	ldr	r1, [r7, #8]
 80016c2:	6978      	ldr	r0, [r7, #20]
 80016c4:	f7ff ff90 	bl	80015e8 <NVIC_EncodePriority>
 80016c8:	4602      	mov	r2, r0
 80016ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016ce:	4611      	mov	r1, r2
 80016d0:	4618      	mov	r0, r3
 80016d2:	f7ff ff5f 	bl	8001594 <__NVIC_SetPriority>
}
 80016d6:	bf00      	nop
 80016d8:	3718      	adds	r7, #24
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}

080016de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016de:	b580      	push	{r7, lr}
 80016e0:	b082      	sub	sp, #8
 80016e2:	af00      	add	r7, sp, #0
 80016e4:	4603      	mov	r3, r0
 80016e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ec:	4618      	mov	r0, r3
 80016ee:	f7ff ff33 	bl	8001558 <__NVIC_EnableIRQ>
}
 80016f2:	bf00      	nop
 80016f4:	3708      	adds	r7, #8
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}

080016fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016fa:	b580      	push	{r7, lr}
 80016fc:	b082      	sub	sp, #8
 80016fe:	af00      	add	r7, sp, #0
 8001700:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001702:	6878      	ldr	r0, [r7, #4]
 8001704:	f7ff ffa4 	bl	8001650 <SysTick_Config>
 8001708:	4603      	mov	r3, r0
}
 800170a:	4618      	mov	r0, r3
 800170c:	3708      	adds	r7, #8
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}
	...

08001714 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b084      	sub	sp, #16
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d101      	bne.n	8001726 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001722:	2301      	movs	r3, #1
 8001724:	e08d      	b.n	8001842 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	461a      	mov	r2, r3
 800172c:	4b47      	ldr	r3, [pc, #284]	@ (800184c <HAL_DMA_Init+0x138>)
 800172e:	429a      	cmp	r2, r3
 8001730:	d80f      	bhi.n	8001752 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	461a      	mov	r2, r3
 8001738:	4b45      	ldr	r3, [pc, #276]	@ (8001850 <HAL_DMA_Init+0x13c>)
 800173a:	4413      	add	r3, r2
 800173c:	4a45      	ldr	r2, [pc, #276]	@ (8001854 <HAL_DMA_Init+0x140>)
 800173e:	fba2 2303 	umull	r2, r3, r2, r3
 8001742:	091b      	lsrs	r3, r3, #4
 8001744:	009a      	lsls	r2, r3, #2
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	4a42      	ldr	r2, [pc, #264]	@ (8001858 <HAL_DMA_Init+0x144>)
 800174e:	641a      	str	r2, [r3, #64]	@ 0x40
 8001750:	e00e      	b.n	8001770 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	461a      	mov	r2, r3
 8001758:	4b40      	ldr	r3, [pc, #256]	@ (800185c <HAL_DMA_Init+0x148>)
 800175a:	4413      	add	r3, r2
 800175c:	4a3d      	ldr	r2, [pc, #244]	@ (8001854 <HAL_DMA_Init+0x140>)
 800175e:	fba2 2303 	umull	r2, r3, r2, r3
 8001762:	091b      	lsrs	r3, r3, #4
 8001764:	009a      	lsls	r2, r3, #2
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	4a3c      	ldr	r2, [pc, #240]	@ (8001860 <HAL_DMA_Init+0x14c>)
 800176e:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2202      	movs	r2, #2
 8001774:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8001786:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800178a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001794:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	691b      	ldr	r3, [r3, #16]
 800179a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	699b      	ldr	r3, [r3, #24]
 80017a6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017ac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6a1b      	ldr	r3, [r3, #32]
 80017b2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80017b4:	68fa      	ldr	r2, [r7, #12]
 80017b6:	4313      	orrs	r3, r2
 80017b8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	68fa      	ldr	r2, [r7, #12]
 80017c0:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80017c2:	6878      	ldr	r0, [r7, #4]
 80017c4:	f000 f8fe 	bl	80019c4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	689b      	ldr	r3, [r3, #8]
 80017cc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80017d0:	d102      	bne.n	80017d8 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	2200      	movs	r2, #0
 80017d6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	685a      	ldr	r2, [r3, #4]
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80017e0:	b2d2      	uxtb	r2, r2
 80017e2:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017e8:	687a      	ldr	r2, [r7, #4]
 80017ea:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80017ec:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d010      	beq.n	8001818 <HAL_DMA_Init+0x104>
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	2b04      	cmp	r3, #4
 80017fc:	d80c      	bhi.n	8001818 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80017fe:	6878      	ldr	r0, [r7, #4]
 8001800:	f000 f91e 	bl	8001a40 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001808:	2200      	movs	r2, #0
 800180a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001810:	687a      	ldr	r2, [r7, #4]
 8001812:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001814:	605a      	str	r2, [r3, #4]
 8001816:	e008      	b.n	800182a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2200      	movs	r2, #0
 800181c:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	2200      	movs	r2, #0
 8001822:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2200      	movs	r2, #0
 8001828:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2200      	movs	r2, #0
 800182e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2201      	movs	r2, #1
 8001834:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	2200      	movs	r2, #0
 800183c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8001840:	2300      	movs	r3, #0
}
 8001842:	4618      	mov	r0, r3
 8001844:	3710      	adds	r7, #16
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	40020407 	.word	0x40020407
 8001850:	bffdfff8 	.word	0xbffdfff8
 8001854:	cccccccd 	.word	0xcccccccd
 8001858:	40020000 	.word	0x40020000
 800185c:	bffdfbf8 	.word	0xbffdfbf8
 8001860:	40020400 	.word	0x40020400

08001864 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b084      	sub	sp, #16
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001880:	f003 031f 	and.w	r3, r3, #31
 8001884:	2204      	movs	r2, #4
 8001886:	409a      	lsls	r2, r3
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	4013      	ands	r3, r2
 800188c:	2b00      	cmp	r3, #0
 800188e:	d026      	beq.n	80018de <HAL_DMA_IRQHandler+0x7a>
 8001890:	68bb      	ldr	r3, [r7, #8]
 8001892:	f003 0304 	and.w	r3, r3, #4
 8001896:	2b00      	cmp	r3, #0
 8001898:	d021      	beq.n	80018de <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f003 0320 	and.w	r3, r3, #32
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d107      	bne.n	80018b8 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	681a      	ldr	r2, [r3, #0]
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f022 0204 	bic.w	r2, r2, #4
 80018b6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018bc:	f003 021f 	and.w	r2, r3, #31
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018c4:	2104      	movs	r1, #4
 80018c6:	fa01 f202 	lsl.w	r2, r1, r2
 80018ca:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d071      	beq.n	80019b8 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018d8:	6878      	ldr	r0, [r7, #4]
 80018da:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80018dc:	e06c      	b.n	80019b8 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018e2:	f003 031f 	and.w	r3, r3, #31
 80018e6:	2202      	movs	r2, #2
 80018e8:	409a      	lsls	r2, r3
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	4013      	ands	r3, r2
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d02e      	beq.n	8001950 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80018f2:	68bb      	ldr	r3, [r7, #8]
 80018f4:	f003 0302 	and.w	r3, r3, #2
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d029      	beq.n	8001950 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f003 0320 	and.w	r3, r3, #32
 8001906:	2b00      	cmp	r3, #0
 8001908:	d10b      	bne.n	8001922 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	681a      	ldr	r2, [r3, #0]
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f022 020a 	bic.w	r2, r2, #10
 8001918:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	2201      	movs	r2, #1
 800191e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001926:	f003 021f 	and.w	r2, r3, #31
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800192e:	2102      	movs	r1, #2
 8001930:	fa01 f202 	lsl.w	r2, r1, r2
 8001934:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2200      	movs	r2, #0
 800193a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001942:	2b00      	cmp	r3, #0
 8001944:	d038      	beq.n	80019b8 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800194a:	6878      	ldr	r0, [r7, #4]
 800194c:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800194e:	e033      	b.n	80019b8 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001954:	f003 031f 	and.w	r3, r3, #31
 8001958:	2208      	movs	r2, #8
 800195a:	409a      	lsls	r2, r3
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	4013      	ands	r3, r2
 8001960:	2b00      	cmp	r3, #0
 8001962:	d02a      	beq.n	80019ba <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8001964:	68bb      	ldr	r3, [r7, #8]
 8001966:	f003 0308 	and.w	r3, r3, #8
 800196a:	2b00      	cmp	r3, #0
 800196c:	d025      	beq.n	80019ba <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	681a      	ldr	r2, [r3, #0]
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f022 020e 	bic.w	r2, r2, #14
 800197c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001982:	f003 021f 	and.w	r2, r3, #31
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800198a:	2101      	movs	r1, #1
 800198c:	fa01 f202 	lsl.w	r2, r1, r2
 8001990:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	2201      	movs	r2, #1
 8001996:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	2201      	movs	r2, #1
 800199c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2200      	movs	r2, #0
 80019a4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d004      	beq.n	80019ba <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80019b4:	6878      	ldr	r0, [r7, #4]
 80019b6:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80019b8:	bf00      	nop
 80019ba:	bf00      	nop
}
 80019bc:	3710      	adds	r7, #16
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}
	...

080019c4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80019c4:	b480      	push	{r7}
 80019c6:	b087      	sub	sp, #28
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	461a      	mov	r2, r3
 80019d2:	4b16      	ldr	r3, [pc, #88]	@ (8001a2c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80019d4:	429a      	cmp	r2, r3
 80019d6:	d802      	bhi.n	80019de <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80019d8:	4b15      	ldr	r3, [pc, #84]	@ (8001a30 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80019da:	617b      	str	r3, [r7, #20]
 80019dc:	e001      	b.n	80019e2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 80019de:	4b15      	ldr	r3, [pc, #84]	@ (8001a34 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80019e0:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80019e2:	697b      	ldr	r3, [r7, #20]
 80019e4:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	b2db      	uxtb	r3, r3
 80019ec:	3b08      	subs	r3, #8
 80019ee:	4a12      	ldr	r2, [pc, #72]	@ (8001a38 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80019f0:	fba2 2303 	umull	r2, r3, r2, r3
 80019f4:	091b      	lsrs	r3, r3, #4
 80019f6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019fc:	089b      	lsrs	r3, r3, #2
 80019fe:	009a      	lsls	r2, r3, #2
 8001a00:	693b      	ldr	r3, [r7, #16]
 8001a02:	4413      	add	r3, r2
 8001a04:	461a      	mov	r2, r3
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	4a0b      	ldr	r2, [pc, #44]	@ (8001a3c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8001a0e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	f003 031f 	and.w	r3, r3, #31
 8001a16:	2201      	movs	r2, #1
 8001a18:	409a      	lsls	r2, r3
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8001a1e:	bf00      	nop
 8001a20:	371c      	adds	r7, #28
 8001a22:	46bd      	mov	sp, r7
 8001a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a28:	4770      	bx	lr
 8001a2a:	bf00      	nop
 8001a2c:	40020407 	.word	0x40020407
 8001a30:	40020800 	.word	0x40020800
 8001a34:	40020820 	.word	0x40020820
 8001a38:	cccccccd 	.word	0xcccccccd
 8001a3c:	40020880 	.word	0x40020880

08001a40 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b085      	sub	sp, #20
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	b2db      	uxtb	r3, r3
 8001a4e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001a50:	68fa      	ldr	r2, [r7, #12]
 8001a52:	4b0b      	ldr	r3, [pc, #44]	@ (8001a80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001a54:	4413      	add	r3, r2
 8001a56:	009b      	lsls	r3, r3, #2
 8001a58:	461a      	mov	r2, r3
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	4a08      	ldr	r2, [pc, #32]	@ (8001a84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001a62:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	3b01      	subs	r3, #1
 8001a68:	f003 031f 	and.w	r3, r3, #31
 8001a6c:	2201      	movs	r2, #1
 8001a6e:	409a      	lsls	r2, r3
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8001a74:	bf00      	nop
 8001a76:	3714      	adds	r7, #20
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7e:	4770      	bx	lr
 8001a80:	1000823f 	.word	0x1000823f
 8001a84:	40020940 	.word	0x40020940

08001a88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b087      	sub	sp, #28
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
 8001a90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001a92:	2300      	movs	r3, #0
 8001a94:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001a96:	e15a      	b.n	8001d4e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	681a      	ldr	r2, [r3, #0]
 8001a9c:	2101      	movs	r1, #1
 8001a9e:	697b      	ldr	r3, [r7, #20]
 8001aa0:	fa01 f303 	lsl.w	r3, r1, r3
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	f000 814c 	beq.w	8001d48 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	f003 0303 	and.w	r3, r3, #3
 8001ab8:	2b01      	cmp	r3, #1
 8001aba:	d005      	beq.n	8001ac8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001ac4:	2b02      	cmp	r3, #2
 8001ac6:	d130      	bne.n	8001b2a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	689b      	ldr	r3, [r3, #8]
 8001acc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001ace:	697b      	ldr	r3, [r7, #20]
 8001ad0:	005b      	lsls	r3, r3, #1
 8001ad2:	2203      	movs	r2, #3
 8001ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad8:	43db      	mvns	r3, r3
 8001ada:	693a      	ldr	r2, [r7, #16]
 8001adc:	4013      	ands	r3, r2
 8001ade:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	68da      	ldr	r2, [r3, #12]
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	005b      	lsls	r3, r3, #1
 8001ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8001aec:	693a      	ldr	r2, [r7, #16]
 8001aee:	4313      	orrs	r3, r2
 8001af0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	693a      	ldr	r2, [r7, #16]
 8001af6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001afe:	2201      	movs	r2, #1
 8001b00:	697b      	ldr	r3, [r7, #20]
 8001b02:	fa02 f303 	lsl.w	r3, r2, r3
 8001b06:	43db      	mvns	r3, r3
 8001b08:	693a      	ldr	r2, [r7, #16]
 8001b0a:	4013      	ands	r3, r2
 8001b0c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	091b      	lsrs	r3, r3, #4
 8001b14:	f003 0201 	and.w	r2, r3, #1
 8001b18:	697b      	ldr	r3, [r7, #20]
 8001b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1e:	693a      	ldr	r2, [r7, #16]
 8001b20:	4313      	orrs	r3, r2
 8001b22:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	693a      	ldr	r2, [r7, #16]
 8001b28:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	f003 0303 	and.w	r3, r3, #3
 8001b32:	2b03      	cmp	r3, #3
 8001b34:	d017      	beq.n	8001b66 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	68db      	ldr	r3, [r3, #12]
 8001b3a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001b3c:	697b      	ldr	r3, [r7, #20]
 8001b3e:	005b      	lsls	r3, r3, #1
 8001b40:	2203      	movs	r2, #3
 8001b42:	fa02 f303 	lsl.w	r3, r2, r3
 8001b46:	43db      	mvns	r3, r3
 8001b48:	693a      	ldr	r2, [r7, #16]
 8001b4a:	4013      	ands	r3, r2
 8001b4c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	689a      	ldr	r2, [r3, #8]
 8001b52:	697b      	ldr	r3, [r7, #20]
 8001b54:	005b      	lsls	r3, r3, #1
 8001b56:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5a:	693a      	ldr	r2, [r7, #16]
 8001b5c:	4313      	orrs	r3, r2
 8001b5e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	693a      	ldr	r2, [r7, #16]
 8001b64:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	f003 0303 	and.w	r3, r3, #3
 8001b6e:	2b02      	cmp	r3, #2
 8001b70:	d123      	bne.n	8001bba <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b72:	697b      	ldr	r3, [r7, #20]
 8001b74:	08da      	lsrs	r2, r3, #3
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	3208      	adds	r2, #8
 8001b7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b7e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001b80:	697b      	ldr	r3, [r7, #20]
 8001b82:	f003 0307 	and.w	r3, r3, #7
 8001b86:	009b      	lsls	r3, r3, #2
 8001b88:	220f      	movs	r2, #15
 8001b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8e:	43db      	mvns	r3, r3
 8001b90:	693a      	ldr	r2, [r7, #16]
 8001b92:	4013      	ands	r3, r2
 8001b94:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	691a      	ldr	r2, [r3, #16]
 8001b9a:	697b      	ldr	r3, [r7, #20]
 8001b9c:	f003 0307 	and.w	r3, r3, #7
 8001ba0:	009b      	lsls	r3, r3, #2
 8001ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba6:	693a      	ldr	r2, [r7, #16]
 8001ba8:	4313      	orrs	r3, r2
 8001baa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	08da      	lsrs	r2, r3, #3
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	3208      	adds	r2, #8
 8001bb4:	6939      	ldr	r1, [r7, #16]
 8001bb6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001bc0:	697b      	ldr	r3, [r7, #20]
 8001bc2:	005b      	lsls	r3, r3, #1
 8001bc4:	2203      	movs	r2, #3
 8001bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bca:	43db      	mvns	r3, r3
 8001bcc:	693a      	ldr	r2, [r7, #16]
 8001bce:	4013      	ands	r3, r2
 8001bd0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	f003 0203 	and.w	r2, r3, #3
 8001bda:	697b      	ldr	r3, [r7, #20]
 8001bdc:	005b      	lsls	r3, r3, #1
 8001bde:	fa02 f303 	lsl.w	r3, r2, r3
 8001be2:	693a      	ldr	r2, [r7, #16]
 8001be4:	4313      	orrs	r3, r2
 8001be6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	693a      	ldr	r2, [r7, #16]
 8001bec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	f000 80a6 	beq.w	8001d48 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bfc:	4b5b      	ldr	r3, [pc, #364]	@ (8001d6c <HAL_GPIO_Init+0x2e4>)
 8001bfe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c00:	4a5a      	ldr	r2, [pc, #360]	@ (8001d6c <HAL_GPIO_Init+0x2e4>)
 8001c02:	f043 0301 	orr.w	r3, r3, #1
 8001c06:	6613      	str	r3, [r2, #96]	@ 0x60
 8001c08:	4b58      	ldr	r3, [pc, #352]	@ (8001d6c <HAL_GPIO_Init+0x2e4>)
 8001c0a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c0c:	f003 0301 	and.w	r3, r3, #1
 8001c10:	60bb      	str	r3, [r7, #8]
 8001c12:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c14:	4a56      	ldr	r2, [pc, #344]	@ (8001d70 <HAL_GPIO_Init+0x2e8>)
 8001c16:	697b      	ldr	r3, [r7, #20]
 8001c18:	089b      	lsrs	r3, r3, #2
 8001c1a:	3302      	adds	r3, #2
 8001c1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c20:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001c22:	697b      	ldr	r3, [r7, #20]
 8001c24:	f003 0303 	and.w	r3, r3, #3
 8001c28:	009b      	lsls	r3, r3, #2
 8001c2a:	220f      	movs	r2, #15
 8001c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c30:	43db      	mvns	r3, r3
 8001c32:	693a      	ldr	r2, [r7, #16]
 8001c34:	4013      	ands	r3, r2
 8001c36:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001c3e:	d01f      	beq.n	8001c80 <HAL_GPIO_Init+0x1f8>
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	4a4c      	ldr	r2, [pc, #304]	@ (8001d74 <HAL_GPIO_Init+0x2ec>)
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d019      	beq.n	8001c7c <HAL_GPIO_Init+0x1f4>
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	4a4b      	ldr	r2, [pc, #300]	@ (8001d78 <HAL_GPIO_Init+0x2f0>)
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d013      	beq.n	8001c78 <HAL_GPIO_Init+0x1f0>
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	4a4a      	ldr	r2, [pc, #296]	@ (8001d7c <HAL_GPIO_Init+0x2f4>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d00d      	beq.n	8001c74 <HAL_GPIO_Init+0x1ec>
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	4a49      	ldr	r2, [pc, #292]	@ (8001d80 <HAL_GPIO_Init+0x2f8>)
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d007      	beq.n	8001c70 <HAL_GPIO_Init+0x1e8>
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	4a48      	ldr	r2, [pc, #288]	@ (8001d84 <HAL_GPIO_Init+0x2fc>)
 8001c64:	4293      	cmp	r3, r2
 8001c66:	d101      	bne.n	8001c6c <HAL_GPIO_Init+0x1e4>
 8001c68:	2305      	movs	r3, #5
 8001c6a:	e00a      	b.n	8001c82 <HAL_GPIO_Init+0x1fa>
 8001c6c:	2306      	movs	r3, #6
 8001c6e:	e008      	b.n	8001c82 <HAL_GPIO_Init+0x1fa>
 8001c70:	2304      	movs	r3, #4
 8001c72:	e006      	b.n	8001c82 <HAL_GPIO_Init+0x1fa>
 8001c74:	2303      	movs	r3, #3
 8001c76:	e004      	b.n	8001c82 <HAL_GPIO_Init+0x1fa>
 8001c78:	2302      	movs	r3, #2
 8001c7a:	e002      	b.n	8001c82 <HAL_GPIO_Init+0x1fa>
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	e000      	b.n	8001c82 <HAL_GPIO_Init+0x1fa>
 8001c80:	2300      	movs	r3, #0
 8001c82:	697a      	ldr	r2, [r7, #20]
 8001c84:	f002 0203 	and.w	r2, r2, #3
 8001c88:	0092      	lsls	r2, r2, #2
 8001c8a:	4093      	lsls	r3, r2
 8001c8c:	693a      	ldr	r2, [r7, #16]
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c92:	4937      	ldr	r1, [pc, #220]	@ (8001d70 <HAL_GPIO_Init+0x2e8>)
 8001c94:	697b      	ldr	r3, [r7, #20]
 8001c96:	089b      	lsrs	r3, r3, #2
 8001c98:	3302      	adds	r3, #2
 8001c9a:	693a      	ldr	r2, [r7, #16]
 8001c9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001ca0:	4b39      	ldr	r3, [pc, #228]	@ (8001d88 <HAL_GPIO_Init+0x300>)
 8001ca2:	689b      	ldr	r3, [r3, #8]
 8001ca4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	43db      	mvns	r3, r3
 8001caa:	693a      	ldr	r2, [r7, #16]
 8001cac:	4013      	ands	r3, r2
 8001cae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d003      	beq.n	8001cc4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001cbc:	693a      	ldr	r2, [r7, #16]
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001cc4:	4a30      	ldr	r2, [pc, #192]	@ (8001d88 <HAL_GPIO_Init+0x300>)
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001cca:	4b2f      	ldr	r3, [pc, #188]	@ (8001d88 <HAL_GPIO_Init+0x300>)
 8001ccc:	68db      	ldr	r3, [r3, #12]
 8001cce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	43db      	mvns	r3, r3
 8001cd4:	693a      	ldr	r2, [r7, #16]
 8001cd6:	4013      	ands	r3, r2
 8001cd8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d003      	beq.n	8001cee <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001ce6:	693a      	ldr	r2, [r7, #16]
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	4313      	orrs	r3, r2
 8001cec:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001cee:	4a26      	ldr	r2, [pc, #152]	@ (8001d88 <HAL_GPIO_Init+0x300>)
 8001cf0:	693b      	ldr	r3, [r7, #16]
 8001cf2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001cf4:	4b24      	ldr	r3, [pc, #144]	@ (8001d88 <HAL_GPIO_Init+0x300>)
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	43db      	mvns	r3, r3
 8001cfe:	693a      	ldr	r2, [r7, #16]
 8001d00:	4013      	ands	r3, r2
 8001d02:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d003      	beq.n	8001d18 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001d10:	693a      	ldr	r2, [r7, #16]
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	4313      	orrs	r3, r2
 8001d16:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001d18:	4a1b      	ldr	r2, [pc, #108]	@ (8001d88 <HAL_GPIO_Init+0x300>)
 8001d1a:	693b      	ldr	r3, [r7, #16]
 8001d1c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001d1e:	4b1a      	ldr	r3, [pc, #104]	@ (8001d88 <HAL_GPIO_Init+0x300>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	43db      	mvns	r3, r3
 8001d28:	693a      	ldr	r2, [r7, #16]
 8001d2a:	4013      	ands	r3, r2
 8001d2c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d003      	beq.n	8001d42 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001d3a:	693a      	ldr	r2, [r7, #16]
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001d42:	4a11      	ldr	r2, [pc, #68]	@ (8001d88 <HAL_GPIO_Init+0x300>)
 8001d44:	693b      	ldr	r3, [r7, #16]
 8001d46:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001d48:	697b      	ldr	r3, [r7, #20]
 8001d4a:	3301      	adds	r3, #1
 8001d4c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	681a      	ldr	r2, [r3, #0]
 8001d52:	697b      	ldr	r3, [r7, #20]
 8001d54:	fa22 f303 	lsr.w	r3, r2, r3
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	f47f ae9d 	bne.w	8001a98 <HAL_GPIO_Init+0x10>
  }
}
 8001d5e:	bf00      	nop
 8001d60:	bf00      	nop
 8001d62:	371c      	adds	r7, #28
 8001d64:	46bd      	mov	sp, r7
 8001d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6a:	4770      	bx	lr
 8001d6c:	40021000 	.word	0x40021000
 8001d70:	40010000 	.word	0x40010000
 8001d74:	48000400 	.word	0x48000400
 8001d78:	48000800 	.word	0x48000800
 8001d7c:	48000c00 	.word	0x48000c00
 8001d80:	48001000 	.word	0x48001000
 8001d84:	48001400 	.word	0x48001400
 8001d88:	40010400 	.word	0x40010400

08001d8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b083      	sub	sp, #12
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
 8001d94:	460b      	mov	r3, r1
 8001d96:	807b      	strh	r3, [r7, #2]
 8001d98:	4613      	mov	r3, r2
 8001d9a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d9c:	787b      	ldrb	r3, [r7, #1]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d003      	beq.n	8001daa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001da2:	887a      	ldrh	r2, [r7, #2]
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001da8:	e002      	b.n	8001db0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001daa:	887a      	ldrh	r2, [r7, #2]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001db0:	bf00      	nop
 8001db2:	370c      	adds	r7, #12
 8001db4:	46bd      	mov	sp, r7
 8001db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dba:	4770      	bx	lr

08001dbc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b082      	sub	sp, #8
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d101      	bne.n	8001dce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	e08d      	b.n	8001eea <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001dd4:	b2db      	uxtb	r3, r3
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d106      	bne.n	8001de8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2200      	movs	r2, #0
 8001dde:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001de2:	6878      	ldr	r0, [r7, #4]
 8001de4:	f7fe fc8e 	bl	8000704 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2224      	movs	r2, #36	@ 0x24
 8001dec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	681a      	ldr	r2, [r3, #0]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f022 0201 	bic.w	r2, r2, #1
 8001dfe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	685a      	ldr	r2, [r3, #4]
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001e0c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	689a      	ldr	r2, [r3, #8]
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001e1c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	68db      	ldr	r3, [r3, #12]
 8001e22:	2b01      	cmp	r3, #1
 8001e24:	d107      	bne.n	8001e36 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	689a      	ldr	r2, [r3, #8]
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001e32:	609a      	str	r2, [r3, #8]
 8001e34:	e006      	b.n	8001e44 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	689a      	ldr	r2, [r3, #8]
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001e42:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	68db      	ldr	r3, [r3, #12]
 8001e48:	2b02      	cmp	r3, #2
 8001e4a:	d108      	bne.n	8001e5e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	685a      	ldr	r2, [r3, #4]
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001e5a:	605a      	str	r2, [r3, #4]
 8001e5c:	e007      	b.n	8001e6e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	685a      	ldr	r2, [r3, #4]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001e6c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	687a      	ldr	r2, [r7, #4]
 8001e76:	6812      	ldr	r2, [r2, #0]
 8001e78:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001e7c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001e80:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	68da      	ldr	r2, [r3, #12]
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001e90:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	691a      	ldr	r2, [r3, #16]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	695b      	ldr	r3, [r3, #20]
 8001e9a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	699b      	ldr	r3, [r3, #24]
 8001ea2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	430a      	orrs	r2, r1
 8001eaa:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	69d9      	ldr	r1, [r3, #28]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6a1a      	ldr	r2, [r3, #32]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	430a      	orrs	r2, r1
 8001eba:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	681a      	ldr	r2, [r3, #0]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f042 0201 	orr.w	r2, r2, #1
 8001eca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2200      	movs	r2, #0
 8001ed0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2220      	movs	r2, #32
 8001ed6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2200      	movs	r2, #0
 8001ede:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001ee8:	2300      	movs	r3, #0
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	3708      	adds	r7, #8
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}
	...

08001ef4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b088      	sub	sp, #32
 8001ef8:	af02      	add	r7, sp, #8
 8001efa:	60f8      	str	r0, [r7, #12]
 8001efc:	4608      	mov	r0, r1
 8001efe:	4611      	mov	r1, r2
 8001f00:	461a      	mov	r2, r3
 8001f02:	4603      	mov	r3, r0
 8001f04:	817b      	strh	r3, [r7, #10]
 8001f06:	460b      	mov	r3, r1
 8001f08:	813b      	strh	r3, [r7, #8]
 8001f0a:	4613      	mov	r3, r2
 8001f0c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001f14:	b2db      	uxtb	r3, r3
 8001f16:	2b20      	cmp	r3, #32
 8001f18:	f040 80f9 	bne.w	800210e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001f1c:	6a3b      	ldr	r3, [r7, #32]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d002      	beq.n	8001f28 <HAL_I2C_Mem_Write+0x34>
 8001f22:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d105      	bne.n	8001f34 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001f2e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8001f30:	2301      	movs	r3, #1
 8001f32:	e0ed      	b.n	8002110 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001f3a:	2b01      	cmp	r3, #1
 8001f3c:	d101      	bne.n	8001f42 <HAL_I2C_Mem_Write+0x4e>
 8001f3e:	2302      	movs	r3, #2
 8001f40:	e0e6      	b.n	8002110 <HAL_I2C_Mem_Write+0x21c>
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	2201      	movs	r2, #1
 8001f46:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001f4a:	f7ff faa5 	bl	8001498 <HAL_GetTick>
 8001f4e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	9300      	str	r3, [sp, #0]
 8001f54:	2319      	movs	r3, #25
 8001f56:	2201      	movs	r2, #1
 8001f58:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001f5c:	68f8      	ldr	r0, [r7, #12]
 8001f5e:	f000 fadd 	bl	800251c <I2C_WaitOnFlagUntilTimeout>
 8001f62:	4603      	mov	r3, r0
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d001      	beq.n	8001f6c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	e0d1      	b.n	8002110 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	2221      	movs	r2, #33	@ 0x21
 8001f70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	2240      	movs	r2, #64	@ 0x40
 8001f78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	2200      	movs	r2, #0
 8001f80:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	6a3a      	ldr	r2, [r7, #32]
 8001f86:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001f8c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	2200      	movs	r2, #0
 8001f92:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001f94:	88f8      	ldrh	r0, [r7, #6]
 8001f96:	893a      	ldrh	r2, [r7, #8]
 8001f98:	8979      	ldrh	r1, [r7, #10]
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	9301      	str	r3, [sp, #4]
 8001f9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001fa0:	9300      	str	r3, [sp, #0]
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	68f8      	ldr	r0, [r7, #12]
 8001fa6:	f000 f9ed 	bl	8002384 <I2C_RequestMemoryWrite>
 8001faa:	4603      	mov	r3, r0
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d005      	beq.n	8001fbc <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8001fb8:	2301      	movs	r3, #1
 8001fba:	e0a9      	b.n	8002110 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001fc0:	b29b      	uxth	r3, r3
 8001fc2:	2bff      	cmp	r3, #255	@ 0xff
 8001fc4:	d90e      	bls.n	8001fe4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	22ff      	movs	r2, #255	@ 0xff
 8001fca:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001fd0:	b2da      	uxtb	r2, r3
 8001fd2:	8979      	ldrh	r1, [r7, #10]
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	9300      	str	r3, [sp, #0]
 8001fd8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001fdc:	68f8      	ldr	r0, [r7, #12]
 8001fde:	f000 fc61 	bl	80028a4 <I2C_TransferConfig>
 8001fe2:	e00f      	b.n	8002004 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001fe8:	b29a      	uxth	r2, r3
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ff2:	b2da      	uxtb	r2, r3
 8001ff4:	8979      	ldrh	r1, [r7, #10]
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	9300      	str	r3, [sp, #0]
 8001ffa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001ffe:	68f8      	ldr	r0, [r7, #12]
 8002000:	f000 fc50 	bl	80028a4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002004:	697a      	ldr	r2, [r7, #20]
 8002006:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002008:	68f8      	ldr	r0, [r7, #12]
 800200a:	f000 fae0 	bl	80025ce <I2C_WaitOnTXISFlagUntilTimeout>
 800200e:	4603      	mov	r3, r0
 8002010:	2b00      	cmp	r3, #0
 8002012:	d001      	beq.n	8002018 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002014:	2301      	movs	r3, #1
 8002016:	e07b      	b.n	8002110 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800201c:	781a      	ldrb	r2, [r3, #0]
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002028:	1c5a      	adds	r2, r3, #1
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002032:	b29b      	uxth	r3, r3
 8002034:	3b01      	subs	r3, #1
 8002036:	b29a      	uxth	r2, r3
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002040:	3b01      	subs	r3, #1
 8002042:	b29a      	uxth	r2, r3
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800204c:	b29b      	uxth	r3, r3
 800204e:	2b00      	cmp	r3, #0
 8002050:	d034      	beq.n	80020bc <HAL_I2C_Mem_Write+0x1c8>
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002056:	2b00      	cmp	r3, #0
 8002058:	d130      	bne.n	80020bc <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800205a:	697b      	ldr	r3, [r7, #20]
 800205c:	9300      	str	r3, [sp, #0]
 800205e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002060:	2200      	movs	r2, #0
 8002062:	2180      	movs	r1, #128	@ 0x80
 8002064:	68f8      	ldr	r0, [r7, #12]
 8002066:	f000 fa59 	bl	800251c <I2C_WaitOnFlagUntilTimeout>
 800206a:	4603      	mov	r3, r0
 800206c:	2b00      	cmp	r3, #0
 800206e:	d001      	beq.n	8002074 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002070:	2301      	movs	r3, #1
 8002072:	e04d      	b.n	8002110 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002078:	b29b      	uxth	r3, r3
 800207a:	2bff      	cmp	r3, #255	@ 0xff
 800207c:	d90e      	bls.n	800209c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	22ff      	movs	r2, #255	@ 0xff
 8002082:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002088:	b2da      	uxtb	r2, r3
 800208a:	8979      	ldrh	r1, [r7, #10]
 800208c:	2300      	movs	r3, #0
 800208e:	9300      	str	r3, [sp, #0]
 8002090:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002094:	68f8      	ldr	r0, [r7, #12]
 8002096:	f000 fc05 	bl	80028a4 <I2C_TransferConfig>
 800209a:	e00f      	b.n	80020bc <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020a0:	b29a      	uxth	r2, r3
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020aa:	b2da      	uxtb	r2, r3
 80020ac:	8979      	ldrh	r1, [r7, #10]
 80020ae:	2300      	movs	r3, #0
 80020b0:	9300      	str	r3, [sp, #0]
 80020b2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80020b6:	68f8      	ldr	r0, [r7, #12]
 80020b8:	f000 fbf4 	bl	80028a4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020c0:	b29b      	uxth	r3, r3
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d19e      	bne.n	8002004 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020c6:	697a      	ldr	r2, [r7, #20]
 80020c8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80020ca:	68f8      	ldr	r0, [r7, #12]
 80020cc:	f000 fac6 	bl	800265c <I2C_WaitOnSTOPFlagUntilTimeout>
 80020d0:	4603      	mov	r3, r0
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d001      	beq.n	80020da <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80020d6:	2301      	movs	r3, #1
 80020d8:	e01a      	b.n	8002110 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	2220      	movs	r2, #32
 80020e0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	6859      	ldr	r1, [r3, #4]
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	681a      	ldr	r2, [r3, #0]
 80020ec:	4b0a      	ldr	r3, [pc, #40]	@ (8002118 <HAL_I2C_Mem_Write+0x224>)
 80020ee:	400b      	ands	r3, r1
 80020f0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	2220      	movs	r2, #32
 80020f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	2200      	movs	r2, #0
 80020fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	2200      	movs	r2, #0
 8002106:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800210a:	2300      	movs	r3, #0
 800210c:	e000      	b.n	8002110 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800210e:	2302      	movs	r3, #2
  }
}
 8002110:	4618      	mov	r0, r3
 8002112:	3718      	adds	r7, #24
 8002114:	46bd      	mov	sp, r7
 8002116:	bd80      	pop	{r7, pc}
 8002118:	fe00e800 	.word	0xfe00e800

0800211c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b088      	sub	sp, #32
 8002120:	af02      	add	r7, sp, #8
 8002122:	60f8      	str	r0, [r7, #12]
 8002124:	4608      	mov	r0, r1
 8002126:	4611      	mov	r1, r2
 8002128:	461a      	mov	r2, r3
 800212a:	4603      	mov	r3, r0
 800212c:	817b      	strh	r3, [r7, #10]
 800212e:	460b      	mov	r3, r1
 8002130:	813b      	strh	r3, [r7, #8]
 8002132:	4613      	mov	r3, r2
 8002134:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800213c:	b2db      	uxtb	r3, r3
 800213e:	2b20      	cmp	r3, #32
 8002140:	f040 80fd 	bne.w	800233e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002144:	6a3b      	ldr	r3, [r7, #32]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d002      	beq.n	8002150 <HAL_I2C_Mem_Read+0x34>
 800214a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800214c:	2b00      	cmp	r3, #0
 800214e:	d105      	bne.n	800215c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002156:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002158:	2301      	movs	r3, #1
 800215a:	e0f1      	b.n	8002340 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002162:	2b01      	cmp	r3, #1
 8002164:	d101      	bne.n	800216a <HAL_I2C_Mem_Read+0x4e>
 8002166:	2302      	movs	r3, #2
 8002168:	e0ea      	b.n	8002340 <HAL_I2C_Mem_Read+0x224>
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	2201      	movs	r2, #1
 800216e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002172:	f7ff f991 	bl	8001498 <HAL_GetTick>
 8002176:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002178:	697b      	ldr	r3, [r7, #20]
 800217a:	9300      	str	r3, [sp, #0]
 800217c:	2319      	movs	r3, #25
 800217e:	2201      	movs	r2, #1
 8002180:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002184:	68f8      	ldr	r0, [r7, #12]
 8002186:	f000 f9c9 	bl	800251c <I2C_WaitOnFlagUntilTimeout>
 800218a:	4603      	mov	r3, r0
 800218c:	2b00      	cmp	r3, #0
 800218e:	d001      	beq.n	8002194 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002190:	2301      	movs	r3, #1
 8002192:	e0d5      	b.n	8002340 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	2222      	movs	r2, #34	@ 0x22
 8002198:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	2240      	movs	r2, #64	@ 0x40
 80021a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	2200      	movs	r2, #0
 80021a8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	6a3a      	ldr	r2, [r7, #32]
 80021ae:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80021b4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	2200      	movs	r2, #0
 80021ba:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80021bc:	88f8      	ldrh	r0, [r7, #6]
 80021be:	893a      	ldrh	r2, [r7, #8]
 80021c0:	8979      	ldrh	r1, [r7, #10]
 80021c2:	697b      	ldr	r3, [r7, #20]
 80021c4:	9301      	str	r3, [sp, #4]
 80021c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021c8:	9300      	str	r3, [sp, #0]
 80021ca:	4603      	mov	r3, r0
 80021cc:	68f8      	ldr	r0, [r7, #12]
 80021ce:	f000 f92d 	bl	800242c <I2C_RequestMemoryRead>
 80021d2:	4603      	mov	r3, r0
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d005      	beq.n	80021e4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	2200      	movs	r2, #0
 80021dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80021e0:	2301      	movs	r3, #1
 80021e2:	e0ad      	b.n	8002340 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021e8:	b29b      	uxth	r3, r3
 80021ea:	2bff      	cmp	r3, #255	@ 0xff
 80021ec:	d90e      	bls.n	800220c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	22ff      	movs	r2, #255	@ 0xff
 80021f2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021f8:	b2da      	uxtb	r2, r3
 80021fa:	8979      	ldrh	r1, [r7, #10]
 80021fc:	4b52      	ldr	r3, [pc, #328]	@ (8002348 <HAL_I2C_Mem_Read+0x22c>)
 80021fe:	9300      	str	r3, [sp, #0]
 8002200:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002204:	68f8      	ldr	r0, [r7, #12]
 8002206:	f000 fb4d 	bl	80028a4 <I2C_TransferConfig>
 800220a:	e00f      	b.n	800222c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002210:	b29a      	uxth	r2, r3
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800221a:	b2da      	uxtb	r2, r3
 800221c:	8979      	ldrh	r1, [r7, #10]
 800221e:	4b4a      	ldr	r3, [pc, #296]	@ (8002348 <HAL_I2C_Mem_Read+0x22c>)
 8002220:	9300      	str	r3, [sp, #0]
 8002222:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002226:	68f8      	ldr	r0, [r7, #12]
 8002228:	f000 fb3c 	bl	80028a4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	9300      	str	r3, [sp, #0]
 8002230:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002232:	2200      	movs	r2, #0
 8002234:	2104      	movs	r1, #4
 8002236:	68f8      	ldr	r0, [r7, #12]
 8002238:	f000 f970 	bl	800251c <I2C_WaitOnFlagUntilTimeout>
 800223c:	4603      	mov	r3, r0
 800223e:	2b00      	cmp	r3, #0
 8002240:	d001      	beq.n	8002246 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002242:	2301      	movs	r3, #1
 8002244:	e07c      	b.n	8002340 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002250:	b2d2      	uxtb	r2, r2
 8002252:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002258:	1c5a      	adds	r2, r3, #1
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002262:	3b01      	subs	r3, #1
 8002264:	b29a      	uxth	r2, r3
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800226e:	b29b      	uxth	r3, r3
 8002270:	3b01      	subs	r3, #1
 8002272:	b29a      	uxth	r2, r3
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800227c:	b29b      	uxth	r3, r3
 800227e:	2b00      	cmp	r3, #0
 8002280:	d034      	beq.n	80022ec <HAL_I2C_Mem_Read+0x1d0>
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002286:	2b00      	cmp	r3, #0
 8002288:	d130      	bne.n	80022ec <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800228a:	697b      	ldr	r3, [r7, #20]
 800228c:	9300      	str	r3, [sp, #0]
 800228e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002290:	2200      	movs	r2, #0
 8002292:	2180      	movs	r1, #128	@ 0x80
 8002294:	68f8      	ldr	r0, [r7, #12]
 8002296:	f000 f941 	bl	800251c <I2C_WaitOnFlagUntilTimeout>
 800229a:	4603      	mov	r3, r0
 800229c:	2b00      	cmp	r3, #0
 800229e:	d001      	beq.n	80022a4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80022a0:	2301      	movs	r3, #1
 80022a2:	e04d      	b.n	8002340 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022a8:	b29b      	uxth	r3, r3
 80022aa:	2bff      	cmp	r3, #255	@ 0xff
 80022ac:	d90e      	bls.n	80022cc <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	22ff      	movs	r2, #255	@ 0xff
 80022b2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022b8:	b2da      	uxtb	r2, r3
 80022ba:	8979      	ldrh	r1, [r7, #10]
 80022bc:	2300      	movs	r3, #0
 80022be:	9300      	str	r3, [sp, #0]
 80022c0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80022c4:	68f8      	ldr	r0, [r7, #12]
 80022c6:	f000 faed 	bl	80028a4 <I2C_TransferConfig>
 80022ca:	e00f      	b.n	80022ec <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022d0:	b29a      	uxth	r2, r3
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022da:	b2da      	uxtb	r2, r3
 80022dc:	8979      	ldrh	r1, [r7, #10]
 80022de:	2300      	movs	r3, #0
 80022e0:	9300      	str	r3, [sp, #0]
 80022e2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80022e6:	68f8      	ldr	r0, [r7, #12]
 80022e8:	f000 fadc 	bl	80028a4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022f0:	b29b      	uxth	r3, r3
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d19a      	bne.n	800222c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022f6:	697a      	ldr	r2, [r7, #20]
 80022f8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80022fa:	68f8      	ldr	r0, [r7, #12]
 80022fc:	f000 f9ae 	bl	800265c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002300:	4603      	mov	r3, r0
 8002302:	2b00      	cmp	r3, #0
 8002304:	d001      	beq.n	800230a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002306:	2301      	movs	r3, #1
 8002308:	e01a      	b.n	8002340 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	2220      	movs	r2, #32
 8002310:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	6859      	ldr	r1, [r3, #4]
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	681a      	ldr	r2, [r3, #0]
 800231c:	4b0b      	ldr	r3, [pc, #44]	@ (800234c <HAL_I2C_Mem_Read+0x230>)
 800231e:	400b      	ands	r3, r1
 8002320:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	2220      	movs	r2, #32
 8002326:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	2200      	movs	r2, #0
 800232e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	2200      	movs	r2, #0
 8002336:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800233a:	2300      	movs	r3, #0
 800233c:	e000      	b.n	8002340 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800233e:	2302      	movs	r3, #2
  }
}
 8002340:	4618      	mov	r0, r3
 8002342:	3718      	adds	r7, #24
 8002344:	46bd      	mov	sp, r7
 8002346:	bd80      	pop	{r7, pc}
 8002348:	80002400 	.word	0x80002400
 800234c:	fe00e800 	.word	0xfe00e800

08002350 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b084      	sub	sp, #16
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	699b      	ldr	r3, [r3, #24]
 800235e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800236c:	2b00      	cmp	r3, #0
 800236e:	d005      	beq.n	800237c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002374:	68ba      	ldr	r2, [r7, #8]
 8002376:	68f9      	ldr	r1, [r7, #12]
 8002378:	6878      	ldr	r0, [r7, #4]
 800237a:	4798      	blx	r3
  }
}
 800237c:	bf00      	nop
 800237e:	3710      	adds	r7, #16
 8002380:	46bd      	mov	sp, r7
 8002382:	bd80      	pop	{r7, pc}

08002384 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b086      	sub	sp, #24
 8002388:	af02      	add	r7, sp, #8
 800238a:	60f8      	str	r0, [r7, #12]
 800238c:	4608      	mov	r0, r1
 800238e:	4611      	mov	r1, r2
 8002390:	461a      	mov	r2, r3
 8002392:	4603      	mov	r3, r0
 8002394:	817b      	strh	r3, [r7, #10]
 8002396:	460b      	mov	r3, r1
 8002398:	813b      	strh	r3, [r7, #8]
 800239a:	4613      	mov	r3, r2
 800239c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800239e:	88fb      	ldrh	r3, [r7, #6]
 80023a0:	b2da      	uxtb	r2, r3
 80023a2:	8979      	ldrh	r1, [r7, #10]
 80023a4:	4b20      	ldr	r3, [pc, #128]	@ (8002428 <I2C_RequestMemoryWrite+0xa4>)
 80023a6:	9300      	str	r3, [sp, #0]
 80023a8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80023ac:	68f8      	ldr	r0, [r7, #12]
 80023ae:	f000 fa79 	bl	80028a4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80023b2:	69fa      	ldr	r2, [r7, #28]
 80023b4:	69b9      	ldr	r1, [r7, #24]
 80023b6:	68f8      	ldr	r0, [r7, #12]
 80023b8:	f000 f909 	bl	80025ce <I2C_WaitOnTXISFlagUntilTimeout>
 80023bc:	4603      	mov	r3, r0
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d001      	beq.n	80023c6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80023c2:	2301      	movs	r3, #1
 80023c4:	e02c      	b.n	8002420 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80023c6:	88fb      	ldrh	r3, [r7, #6]
 80023c8:	2b01      	cmp	r3, #1
 80023ca:	d105      	bne.n	80023d8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80023cc:	893b      	ldrh	r3, [r7, #8]
 80023ce:	b2da      	uxtb	r2, r3
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	629a      	str	r2, [r3, #40]	@ 0x28
 80023d6:	e015      	b.n	8002404 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80023d8:	893b      	ldrh	r3, [r7, #8]
 80023da:	0a1b      	lsrs	r3, r3, #8
 80023dc:	b29b      	uxth	r3, r3
 80023de:	b2da      	uxtb	r2, r3
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80023e6:	69fa      	ldr	r2, [r7, #28]
 80023e8:	69b9      	ldr	r1, [r7, #24]
 80023ea:	68f8      	ldr	r0, [r7, #12]
 80023ec:	f000 f8ef 	bl	80025ce <I2C_WaitOnTXISFlagUntilTimeout>
 80023f0:	4603      	mov	r3, r0
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d001      	beq.n	80023fa <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80023f6:	2301      	movs	r3, #1
 80023f8:	e012      	b.n	8002420 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80023fa:	893b      	ldrh	r3, [r7, #8]
 80023fc:	b2da      	uxtb	r2, r3
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002404:	69fb      	ldr	r3, [r7, #28]
 8002406:	9300      	str	r3, [sp, #0]
 8002408:	69bb      	ldr	r3, [r7, #24]
 800240a:	2200      	movs	r2, #0
 800240c:	2180      	movs	r1, #128	@ 0x80
 800240e:	68f8      	ldr	r0, [r7, #12]
 8002410:	f000 f884 	bl	800251c <I2C_WaitOnFlagUntilTimeout>
 8002414:	4603      	mov	r3, r0
 8002416:	2b00      	cmp	r3, #0
 8002418:	d001      	beq.n	800241e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	e000      	b.n	8002420 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800241e:	2300      	movs	r3, #0
}
 8002420:	4618      	mov	r0, r3
 8002422:	3710      	adds	r7, #16
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}
 8002428:	80002000 	.word	0x80002000

0800242c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b086      	sub	sp, #24
 8002430:	af02      	add	r7, sp, #8
 8002432:	60f8      	str	r0, [r7, #12]
 8002434:	4608      	mov	r0, r1
 8002436:	4611      	mov	r1, r2
 8002438:	461a      	mov	r2, r3
 800243a:	4603      	mov	r3, r0
 800243c:	817b      	strh	r3, [r7, #10]
 800243e:	460b      	mov	r3, r1
 8002440:	813b      	strh	r3, [r7, #8]
 8002442:	4613      	mov	r3, r2
 8002444:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002446:	88fb      	ldrh	r3, [r7, #6]
 8002448:	b2da      	uxtb	r2, r3
 800244a:	8979      	ldrh	r1, [r7, #10]
 800244c:	4b20      	ldr	r3, [pc, #128]	@ (80024d0 <I2C_RequestMemoryRead+0xa4>)
 800244e:	9300      	str	r3, [sp, #0]
 8002450:	2300      	movs	r3, #0
 8002452:	68f8      	ldr	r0, [r7, #12]
 8002454:	f000 fa26 	bl	80028a4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002458:	69fa      	ldr	r2, [r7, #28]
 800245a:	69b9      	ldr	r1, [r7, #24]
 800245c:	68f8      	ldr	r0, [r7, #12]
 800245e:	f000 f8b6 	bl	80025ce <I2C_WaitOnTXISFlagUntilTimeout>
 8002462:	4603      	mov	r3, r0
 8002464:	2b00      	cmp	r3, #0
 8002466:	d001      	beq.n	800246c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002468:	2301      	movs	r3, #1
 800246a:	e02c      	b.n	80024c6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800246c:	88fb      	ldrh	r3, [r7, #6]
 800246e:	2b01      	cmp	r3, #1
 8002470:	d105      	bne.n	800247e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002472:	893b      	ldrh	r3, [r7, #8]
 8002474:	b2da      	uxtb	r2, r3
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	629a      	str	r2, [r3, #40]	@ 0x28
 800247c:	e015      	b.n	80024aa <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800247e:	893b      	ldrh	r3, [r7, #8]
 8002480:	0a1b      	lsrs	r3, r3, #8
 8002482:	b29b      	uxth	r3, r3
 8002484:	b2da      	uxtb	r2, r3
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800248c:	69fa      	ldr	r2, [r7, #28]
 800248e:	69b9      	ldr	r1, [r7, #24]
 8002490:	68f8      	ldr	r0, [r7, #12]
 8002492:	f000 f89c 	bl	80025ce <I2C_WaitOnTXISFlagUntilTimeout>
 8002496:	4603      	mov	r3, r0
 8002498:	2b00      	cmp	r3, #0
 800249a:	d001      	beq.n	80024a0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800249c:	2301      	movs	r3, #1
 800249e:	e012      	b.n	80024c6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80024a0:	893b      	ldrh	r3, [r7, #8]
 80024a2:	b2da      	uxtb	r2, r3
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80024aa:	69fb      	ldr	r3, [r7, #28]
 80024ac:	9300      	str	r3, [sp, #0]
 80024ae:	69bb      	ldr	r3, [r7, #24]
 80024b0:	2200      	movs	r2, #0
 80024b2:	2140      	movs	r1, #64	@ 0x40
 80024b4:	68f8      	ldr	r0, [r7, #12]
 80024b6:	f000 f831 	bl	800251c <I2C_WaitOnFlagUntilTimeout>
 80024ba:	4603      	mov	r3, r0
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d001      	beq.n	80024c4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80024c0:	2301      	movs	r3, #1
 80024c2:	e000      	b.n	80024c6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80024c4:	2300      	movs	r3, #0
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	3710      	adds	r7, #16
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}
 80024ce:	bf00      	nop
 80024d0:	80002000 	.word	0x80002000

080024d4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b083      	sub	sp, #12
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	699b      	ldr	r3, [r3, #24]
 80024e2:	f003 0302 	and.w	r3, r3, #2
 80024e6:	2b02      	cmp	r3, #2
 80024e8:	d103      	bne.n	80024f2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	2200      	movs	r2, #0
 80024f0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	699b      	ldr	r3, [r3, #24]
 80024f8:	f003 0301 	and.w	r3, r3, #1
 80024fc:	2b01      	cmp	r3, #1
 80024fe:	d007      	beq.n	8002510 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	699a      	ldr	r2, [r3, #24]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f042 0201 	orr.w	r2, r2, #1
 800250e:	619a      	str	r2, [r3, #24]
  }
}
 8002510:	bf00      	nop
 8002512:	370c      	adds	r7, #12
 8002514:	46bd      	mov	sp, r7
 8002516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251a:	4770      	bx	lr

0800251c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b084      	sub	sp, #16
 8002520:	af00      	add	r7, sp, #0
 8002522:	60f8      	str	r0, [r7, #12]
 8002524:	60b9      	str	r1, [r7, #8]
 8002526:	603b      	str	r3, [r7, #0]
 8002528:	4613      	mov	r3, r2
 800252a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800252c:	e03b      	b.n	80025a6 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800252e:	69ba      	ldr	r2, [r7, #24]
 8002530:	6839      	ldr	r1, [r7, #0]
 8002532:	68f8      	ldr	r0, [r7, #12]
 8002534:	f000 f8d6 	bl	80026e4 <I2C_IsErrorOccurred>
 8002538:	4603      	mov	r3, r0
 800253a:	2b00      	cmp	r3, #0
 800253c:	d001      	beq.n	8002542 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800253e:	2301      	movs	r3, #1
 8002540:	e041      	b.n	80025c6 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002548:	d02d      	beq.n	80025a6 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800254a:	f7fe ffa5 	bl	8001498 <HAL_GetTick>
 800254e:	4602      	mov	r2, r0
 8002550:	69bb      	ldr	r3, [r7, #24]
 8002552:	1ad3      	subs	r3, r2, r3
 8002554:	683a      	ldr	r2, [r7, #0]
 8002556:	429a      	cmp	r2, r3
 8002558:	d302      	bcc.n	8002560 <I2C_WaitOnFlagUntilTimeout+0x44>
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d122      	bne.n	80025a6 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	699a      	ldr	r2, [r3, #24]
 8002566:	68bb      	ldr	r3, [r7, #8]
 8002568:	4013      	ands	r3, r2
 800256a:	68ba      	ldr	r2, [r7, #8]
 800256c:	429a      	cmp	r2, r3
 800256e:	bf0c      	ite	eq
 8002570:	2301      	moveq	r3, #1
 8002572:	2300      	movne	r3, #0
 8002574:	b2db      	uxtb	r3, r3
 8002576:	461a      	mov	r2, r3
 8002578:	79fb      	ldrb	r3, [r7, #7]
 800257a:	429a      	cmp	r2, r3
 800257c:	d113      	bne.n	80025a6 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002582:	f043 0220 	orr.w	r2, r3, #32
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	2220      	movs	r2, #32
 800258e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	2200      	movs	r2, #0
 8002596:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	2200      	movs	r2, #0
 800259e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
 80025a4:	e00f      	b.n	80025c6 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	699a      	ldr	r2, [r3, #24]
 80025ac:	68bb      	ldr	r3, [r7, #8]
 80025ae:	4013      	ands	r3, r2
 80025b0:	68ba      	ldr	r2, [r7, #8]
 80025b2:	429a      	cmp	r2, r3
 80025b4:	bf0c      	ite	eq
 80025b6:	2301      	moveq	r3, #1
 80025b8:	2300      	movne	r3, #0
 80025ba:	b2db      	uxtb	r3, r3
 80025bc:	461a      	mov	r2, r3
 80025be:	79fb      	ldrb	r3, [r7, #7]
 80025c0:	429a      	cmp	r2, r3
 80025c2:	d0b4      	beq.n	800252e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80025c4:	2300      	movs	r3, #0
}
 80025c6:	4618      	mov	r0, r3
 80025c8:	3710      	adds	r7, #16
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}

080025ce <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80025ce:	b580      	push	{r7, lr}
 80025d0:	b084      	sub	sp, #16
 80025d2:	af00      	add	r7, sp, #0
 80025d4:	60f8      	str	r0, [r7, #12]
 80025d6:	60b9      	str	r1, [r7, #8]
 80025d8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80025da:	e033      	b.n	8002644 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80025dc:	687a      	ldr	r2, [r7, #4]
 80025de:	68b9      	ldr	r1, [r7, #8]
 80025e0:	68f8      	ldr	r0, [r7, #12]
 80025e2:	f000 f87f 	bl	80026e4 <I2C_IsErrorOccurred>
 80025e6:	4603      	mov	r3, r0
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d001      	beq.n	80025f0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80025ec:	2301      	movs	r3, #1
 80025ee:	e031      	b.n	8002654 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025f0:	68bb      	ldr	r3, [r7, #8]
 80025f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025f6:	d025      	beq.n	8002644 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025f8:	f7fe ff4e 	bl	8001498 <HAL_GetTick>
 80025fc:	4602      	mov	r2, r0
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	1ad3      	subs	r3, r2, r3
 8002602:	68ba      	ldr	r2, [r7, #8]
 8002604:	429a      	cmp	r2, r3
 8002606:	d302      	bcc.n	800260e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002608:	68bb      	ldr	r3, [r7, #8]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d11a      	bne.n	8002644 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	699b      	ldr	r3, [r3, #24]
 8002614:	f003 0302 	and.w	r3, r3, #2
 8002618:	2b02      	cmp	r3, #2
 800261a:	d013      	beq.n	8002644 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002620:	f043 0220 	orr.w	r2, r3, #32
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	2220      	movs	r2, #32
 800262c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	2200      	movs	r2, #0
 8002634:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	2200      	movs	r2, #0
 800263c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002640:	2301      	movs	r3, #1
 8002642:	e007      	b.n	8002654 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	699b      	ldr	r3, [r3, #24]
 800264a:	f003 0302 	and.w	r3, r3, #2
 800264e:	2b02      	cmp	r3, #2
 8002650:	d1c4      	bne.n	80025dc <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002652:	2300      	movs	r3, #0
}
 8002654:	4618      	mov	r0, r3
 8002656:	3710      	adds	r7, #16
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}

0800265c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b084      	sub	sp, #16
 8002660:	af00      	add	r7, sp, #0
 8002662:	60f8      	str	r0, [r7, #12]
 8002664:	60b9      	str	r1, [r7, #8]
 8002666:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002668:	e02f      	b.n	80026ca <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800266a:	687a      	ldr	r2, [r7, #4]
 800266c:	68b9      	ldr	r1, [r7, #8]
 800266e:	68f8      	ldr	r0, [r7, #12]
 8002670:	f000 f838 	bl	80026e4 <I2C_IsErrorOccurred>
 8002674:	4603      	mov	r3, r0
 8002676:	2b00      	cmp	r3, #0
 8002678:	d001      	beq.n	800267e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800267a:	2301      	movs	r3, #1
 800267c:	e02d      	b.n	80026da <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800267e:	f7fe ff0b 	bl	8001498 <HAL_GetTick>
 8002682:	4602      	mov	r2, r0
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	1ad3      	subs	r3, r2, r3
 8002688:	68ba      	ldr	r2, [r7, #8]
 800268a:	429a      	cmp	r2, r3
 800268c:	d302      	bcc.n	8002694 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800268e:	68bb      	ldr	r3, [r7, #8]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d11a      	bne.n	80026ca <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	699b      	ldr	r3, [r3, #24]
 800269a:	f003 0320 	and.w	r3, r3, #32
 800269e:	2b20      	cmp	r3, #32
 80026a0:	d013      	beq.n	80026ca <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026a6:	f043 0220 	orr.w	r2, r3, #32
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	2220      	movs	r2, #32
 80026b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	2200      	movs	r2, #0
 80026ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	2200      	movs	r2, #0
 80026c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80026c6:	2301      	movs	r3, #1
 80026c8:	e007      	b.n	80026da <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	699b      	ldr	r3, [r3, #24]
 80026d0:	f003 0320 	and.w	r3, r3, #32
 80026d4:	2b20      	cmp	r3, #32
 80026d6:	d1c8      	bne.n	800266a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80026d8:	2300      	movs	r3, #0
}
 80026da:	4618      	mov	r0, r3
 80026dc:	3710      	adds	r7, #16
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}
	...

080026e4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b08a      	sub	sp, #40	@ 0x28
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	60f8      	str	r0, [r7, #12]
 80026ec:	60b9      	str	r1, [r7, #8]
 80026ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80026f0:	2300      	movs	r3, #0
 80026f2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	699b      	ldr	r3, [r3, #24]
 80026fc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80026fe:	2300      	movs	r3, #0
 8002700:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002706:	69bb      	ldr	r3, [r7, #24]
 8002708:	f003 0310 	and.w	r3, r3, #16
 800270c:	2b00      	cmp	r3, #0
 800270e:	d068      	beq.n	80027e2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	2210      	movs	r2, #16
 8002716:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002718:	e049      	b.n	80027ae <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800271a:	68bb      	ldr	r3, [r7, #8]
 800271c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002720:	d045      	beq.n	80027ae <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002722:	f7fe feb9 	bl	8001498 <HAL_GetTick>
 8002726:	4602      	mov	r2, r0
 8002728:	69fb      	ldr	r3, [r7, #28]
 800272a:	1ad3      	subs	r3, r2, r3
 800272c:	68ba      	ldr	r2, [r7, #8]
 800272e:	429a      	cmp	r2, r3
 8002730:	d302      	bcc.n	8002738 <I2C_IsErrorOccurred+0x54>
 8002732:	68bb      	ldr	r3, [r7, #8]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d13a      	bne.n	80027ae <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002742:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800274a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	699b      	ldr	r3, [r3, #24]
 8002752:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002756:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800275a:	d121      	bne.n	80027a0 <I2C_IsErrorOccurred+0xbc>
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002762:	d01d      	beq.n	80027a0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002764:	7cfb      	ldrb	r3, [r7, #19]
 8002766:	2b20      	cmp	r3, #32
 8002768:	d01a      	beq.n	80027a0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	685a      	ldr	r2, [r3, #4]
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002778:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800277a:	f7fe fe8d 	bl	8001498 <HAL_GetTick>
 800277e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002780:	e00e      	b.n	80027a0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002782:	f7fe fe89 	bl	8001498 <HAL_GetTick>
 8002786:	4602      	mov	r2, r0
 8002788:	69fb      	ldr	r3, [r7, #28]
 800278a:	1ad3      	subs	r3, r2, r3
 800278c:	2b19      	cmp	r3, #25
 800278e:	d907      	bls.n	80027a0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002790:	6a3b      	ldr	r3, [r7, #32]
 8002792:	f043 0320 	orr.w	r3, r3, #32
 8002796:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002798:	2301      	movs	r3, #1
 800279a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800279e:	e006      	b.n	80027ae <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	699b      	ldr	r3, [r3, #24]
 80027a6:	f003 0320 	and.w	r3, r3, #32
 80027aa:	2b20      	cmp	r3, #32
 80027ac:	d1e9      	bne.n	8002782 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	699b      	ldr	r3, [r3, #24]
 80027b4:	f003 0320 	and.w	r3, r3, #32
 80027b8:	2b20      	cmp	r3, #32
 80027ba:	d003      	beq.n	80027c4 <I2C_IsErrorOccurred+0xe0>
 80027bc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d0aa      	beq.n	800271a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80027c4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d103      	bne.n	80027d4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	2220      	movs	r2, #32
 80027d2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80027d4:	6a3b      	ldr	r3, [r7, #32]
 80027d6:	f043 0304 	orr.w	r3, r3, #4
 80027da:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80027dc:	2301      	movs	r3, #1
 80027de:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	699b      	ldr	r3, [r3, #24]
 80027e8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80027ea:	69bb      	ldr	r3, [r7, #24]
 80027ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d00b      	beq.n	800280c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80027f4:	6a3b      	ldr	r3, [r7, #32]
 80027f6:	f043 0301 	orr.w	r3, r3, #1
 80027fa:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002804:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002806:	2301      	movs	r3, #1
 8002808:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800280c:	69bb      	ldr	r3, [r7, #24]
 800280e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002812:	2b00      	cmp	r3, #0
 8002814:	d00b      	beq.n	800282e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002816:	6a3b      	ldr	r3, [r7, #32]
 8002818:	f043 0308 	orr.w	r3, r3, #8
 800281c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002826:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002828:	2301      	movs	r3, #1
 800282a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800282e:	69bb      	ldr	r3, [r7, #24]
 8002830:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002834:	2b00      	cmp	r3, #0
 8002836:	d00b      	beq.n	8002850 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002838:	6a3b      	ldr	r3, [r7, #32]
 800283a:	f043 0302 	orr.w	r3, r3, #2
 800283e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002848:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800284a:	2301      	movs	r3, #1
 800284c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8002850:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002854:	2b00      	cmp	r3, #0
 8002856:	d01c      	beq.n	8002892 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002858:	68f8      	ldr	r0, [r7, #12]
 800285a:	f7ff fe3b 	bl	80024d4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	6859      	ldr	r1, [r3, #4]
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681a      	ldr	r2, [r3, #0]
 8002868:	4b0d      	ldr	r3, [pc, #52]	@ (80028a0 <I2C_IsErrorOccurred+0x1bc>)
 800286a:	400b      	ands	r3, r1
 800286c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002872:	6a3b      	ldr	r3, [r7, #32]
 8002874:	431a      	orrs	r2, r3
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	2220      	movs	r2, #32
 800287e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	2200      	movs	r2, #0
 8002886:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	2200      	movs	r2, #0
 800288e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8002892:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002896:	4618      	mov	r0, r3
 8002898:	3728      	adds	r7, #40	@ 0x28
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}
 800289e:	bf00      	nop
 80028a0:	fe00e800 	.word	0xfe00e800

080028a4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80028a4:	b480      	push	{r7}
 80028a6:	b087      	sub	sp, #28
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	60f8      	str	r0, [r7, #12]
 80028ac:	607b      	str	r3, [r7, #4]
 80028ae:	460b      	mov	r3, r1
 80028b0:	817b      	strh	r3, [r7, #10]
 80028b2:	4613      	mov	r3, r2
 80028b4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80028b6:	897b      	ldrh	r3, [r7, #10]
 80028b8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80028bc:	7a7b      	ldrb	r3, [r7, #9]
 80028be:	041b      	lsls	r3, r3, #16
 80028c0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80028c4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80028ca:	6a3b      	ldr	r3, [r7, #32]
 80028cc:	4313      	orrs	r3, r2
 80028ce:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80028d2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	685a      	ldr	r2, [r3, #4]
 80028da:	6a3b      	ldr	r3, [r7, #32]
 80028dc:	0d5b      	lsrs	r3, r3, #21
 80028de:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80028e2:	4b08      	ldr	r3, [pc, #32]	@ (8002904 <I2C_TransferConfig+0x60>)
 80028e4:	430b      	orrs	r3, r1
 80028e6:	43db      	mvns	r3, r3
 80028e8:	ea02 0103 	and.w	r1, r2, r3
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	697a      	ldr	r2, [r7, #20]
 80028f2:	430a      	orrs	r2, r1
 80028f4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80028f6:	bf00      	nop
 80028f8:	371c      	adds	r7, #28
 80028fa:	46bd      	mov	sp, r7
 80028fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002900:	4770      	bx	lr
 8002902:	bf00      	nop
 8002904:	03ff63ff 	.word	0x03ff63ff

08002908 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002908:	b480      	push	{r7}
 800290a:	b083      	sub	sp, #12
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
 8002910:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002918:	b2db      	uxtb	r3, r3
 800291a:	2b20      	cmp	r3, #32
 800291c:	d138      	bne.n	8002990 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002924:	2b01      	cmp	r3, #1
 8002926:	d101      	bne.n	800292c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002928:	2302      	movs	r3, #2
 800292a:	e032      	b.n	8002992 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2201      	movs	r2, #1
 8002930:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2224      	movs	r2, #36	@ 0x24
 8002938:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	681a      	ldr	r2, [r3, #0]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f022 0201 	bic.w	r2, r2, #1
 800294a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	681a      	ldr	r2, [r3, #0]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800295a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	6819      	ldr	r1, [r3, #0]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	683a      	ldr	r2, [r7, #0]
 8002968:	430a      	orrs	r2, r1
 800296a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	681a      	ldr	r2, [r3, #0]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f042 0201 	orr.w	r2, r2, #1
 800297a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2220      	movs	r2, #32
 8002980:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2200      	movs	r2, #0
 8002988:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800298c:	2300      	movs	r3, #0
 800298e:	e000      	b.n	8002992 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002990:	2302      	movs	r3, #2
  }
}
 8002992:	4618      	mov	r0, r3
 8002994:	370c      	adds	r7, #12
 8002996:	46bd      	mov	sp, r7
 8002998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299c:	4770      	bx	lr

0800299e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800299e:	b480      	push	{r7}
 80029a0:	b085      	sub	sp, #20
 80029a2:	af00      	add	r7, sp, #0
 80029a4:	6078      	str	r0, [r7, #4]
 80029a6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80029ae:	b2db      	uxtb	r3, r3
 80029b0:	2b20      	cmp	r3, #32
 80029b2:	d139      	bne.n	8002a28 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80029ba:	2b01      	cmp	r3, #1
 80029bc:	d101      	bne.n	80029c2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80029be:	2302      	movs	r3, #2
 80029c0:	e033      	b.n	8002a2a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2201      	movs	r2, #1
 80029c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2224      	movs	r2, #36	@ 0x24
 80029ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	681a      	ldr	r2, [r3, #0]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f022 0201 	bic.w	r2, r2, #1
 80029e0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80029f0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	021b      	lsls	r3, r3, #8
 80029f6:	68fa      	ldr	r2, [r7, #12]
 80029f8:	4313      	orrs	r3, r2
 80029fa:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	68fa      	ldr	r2, [r7, #12]
 8002a02:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	681a      	ldr	r2, [r3, #0]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f042 0201 	orr.w	r2, r2, #1
 8002a12:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2220      	movs	r2, #32
 8002a18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2200      	movs	r2, #0
 8002a20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002a24:	2300      	movs	r3, #0
 8002a26:	e000      	b.n	8002a2a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002a28:	2302      	movs	r3, #2
  }
}
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	3714      	adds	r7, #20
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a34:	4770      	bx	lr
	...

08002a38 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	b085      	sub	sp, #20
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d141      	bne.n	8002aca <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002a46:	4b4b      	ldr	r3, [pc, #300]	@ (8002b74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002a4e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a52:	d131      	bne.n	8002ab8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002a54:	4b47      	ldr	r3, [pc, #284]	@ (8002b74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a56:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002a5a:	4a46      	ldr	r2, [pc, #280]	@ (8002b74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a5c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002a60:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002a64:	4b43      	ldr	r3, [pc, #268]	@ (8002b74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002a6c:	4a41      	ldr	r2, [pc, #260]	@ (8002b74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a6e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002a72:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002a74:	4b40      	ldr	r3, [pc, #256]	@ (8002b78 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	2232      	movs	r2, #50	@ 0x32
 8002a7a:	fb02 f303 	mul.w	r3, r2, r3
 8002a7e:	4a3f      	ldr	r2, [pc, #252]	@ (8002b7c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002a80:	fba2 2303 	umull	r2, r3, r2, r3
 8002a84:	0c9b      	lsrs	r3, r3, #18
 8002a86:	3301      	adds	r3, #1
 8002a88:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002a8a:	e002      	b.n	8002a92 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	3b01      	subs	r3, #1
 8002a90:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002a92:	4b38      	ldr	r3, [pc, #224]	@ (8002b74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a94:	695b      	ldr	r3, [r3, #20]
 8002a96:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a9a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a9e:	d102      	bne.n	8002aa6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d1f2      	bne.n	8002a8c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002aa6:	4b33      	ldr	r3, [pc, #204]	@ (8002b74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002aa8:	695b      	ldr	r3, [r3, #20]
 8002aaa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002aae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ab2:	d158      	bne.n	8002b66 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002ab4:	2303      	movs	r3, #3
 8002ab6:	e057      	b.n	8002b68 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002ab8:	4b2e      	ldr	r3, [pc, #184]	@ (8002b74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002aba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002abe:	4a2d      	ldr	r2, [pc, #180]	@ (8002b74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ac0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002ac4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002ac8:	e04d      	b.n	8002b66 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002ad0:	d141      	bne.n	8002b56 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002ad2:	4b28      	ldr	r3, [pc, #160]	@ (8002b74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002ada:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ade:	d131      	bne.n	8002b44 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002ae0:	4b24      	ldr	r3, [pc, #144]	@ (8002b74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ae2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002ae6:	4a23      	ldr	r2, [pc, #140]	@ (8002b74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ae8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002aec:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002af0:	4b20      	ldr	r3, [pc, #128]	@ (8002b74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002af8:	4a1e      	ldr	r2, [pc, #120]	@ (8002b74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002afa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002afe:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002b00:	4b1d      	ldr	r3, [pc, #116]	@ (8002b78 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	2232      	movs	r2, #50	@ 0x32
 8002b06:	fb02 f303 	mul.w	r3, r2, r3
 8002b0a:	4a1c      	ldr	r2, [pc, #112]	@ (8002b7c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002b0c:	fba2 2303 	umull	r2, r3, r2, r3
 8002b10:	0c9b      	lsrs	r3, r3, #18
 8002b12:	3301      	adds	r3, #1
 8002b14:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002b16:	e002      	b.n	8002b1e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	3b01      	subs	r3, #1
 8002b1c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002b1e:	4b15      	ldr	r3, [pc, #84]	@ (8002b74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b20:	695b      	ldr	r3, [r3, #20]
 8002b22:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b26:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b2a:	d102      	bne.n	8002b32 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d1f2      	bne.n	8002b18 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002b32:	4b10      	ldr	r3, [pc, #64]	@ (8002b74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b34:	695b      	ldr	r3, [r3, #20]
 8002b36:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b3a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b3e:	d112      	bne.n	8002b66 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002b40:	2303      	movs	r3, #3
 8002b42:	e011      	b.n	8002b68 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002b44:	4b0b      	ldr	r3, [pc, #44]	@ (8002b74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b46:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002b4a:	4a0a      	ldr	r2, [pc, #40]	@ (8002b74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b4c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b50:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002b54:	e007      	b.n	8002b66 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002b56:	4b07      	ldr	r3, [pc, #28]	@ (8002b74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002b5e:	4a05      	ldr	r2, [pc, #20]	@ (8002b74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b60:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002b64:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002b66:	2300      	movs	r3, #0
}
 8002b68:	4618      	mov	r0, r3
 8002b6a:	3714      	adds	r7, #20
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b72:	4770      	bx	lr
 8002b74:	40007000 	.word	0x40007000
 8002b78:	20000000 	.word	0x20000000
 8002b7c:	431bde83 	.word	0x431bde83

08002b80 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002b80:	b480      	push	{r7}
 8002b82:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002b84:	4b05      	ldr	r3, [pc, #20]	@ (8002b9c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002b86:	689b      	ldr	r3, [r3, #8]
 8002b88:	4a04      	ldr	r2, [pc, #16]	@ (8002b9c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002b8a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002b8e:	6093      	str	r3, [r2, #8]
}
 8002b90:	bf00      	nop
 8002b92:	46bd      	mov	sp, r7
 8002b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b98:	4770      	bx	lr
 8002b9a:	bf00      	nop
 8002b9c:	40007000 	.word	0x40007000

08002ba0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b088      	sub	sp, #32
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d101      	bne.n	8002bb2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	e2fe      	b.n	80031b0 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f003 0301 	and.w	r3, r3, #1
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d075      	beq.n	8002caa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002bbe:	4b97      	ldr	r3, [pc, #604]	@ (8002e1c <HAL_RCC_OscConfig+0x27c>)
 8002bc0:	689b      	ldr	r3, [r3, #8]
 8002bc2:	f003 030c 	and.w	r3, r3, #12
 8002bc6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002bc8:	4b94      	ldr	r3, [pc, #592]	@ (8002e1c <HAL_RCC_OscConfig+0x27c>)
 8002bca:	68db      	ldr	r3, [r3, #12]
 8002bcc:	f003 0303 	and.w	r3, r3, #3
 8002bd0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002bd2:	69bb      	ldr	r3, [r7, #24]
 8002bd4:	2b0c      	cmp	r3, #12
 8002bd6:	d102      	bne.n	8002bde <HAL_RCC_OscConfig+0x3e>
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	2b03      	cmp	r3, #3
 8002bdc:	d002      	beq.n	8002be4 <HAL_RCC_OscConfig+0x44>
 8002bde:	69bb      	ldr	r3, [r7, #24]
 8002be0:	2b08      	cmp	r3, #8
 8002be2:	d10b      	bne.n	8002bfc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002be4:	4b8d      	ldr	r3, [pc, #564]	@ (8002e1c <HAL_RCC_OscConfig+0x27c>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d05b      	beq.n	8002ca8 <HAL_RCC_OscConfig+0x108>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d157      	bne.n	8002ca8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	e2d9      	b.n	80031b0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c04:	d106      	bne.n	8002c14 <HAL_RCC_OscConfig+0x74>
 8002c06:	4b85      	ldr	r3, [pc, #532]	@ (8002e1c <HAL_RCC_OscConfig+0x27c>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4a84      	ldr	r2, [pc, #528]	@ (8002e1c <HAL_RCC_OscConfig+0x27c>)
 8002c0c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c10:	6013      	str	r3, [r2, #0]
 8002c12:	e01d      	b.n	8002c50 <HAL_RCC_OscConfig+0xb0>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002c1c:	d10c      	bne.n	8002c38 <HAL_RCC_OscConfig+0x98>
 8002c1e:	4b7f      	ldr	r3, [pc, #508]	@ (8002e1c <HAL_RCC_OscConfig+0x27c>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a7e      	ldr	r2, [pc, #504]	@ (8002e1c <HAL_RCC_OscConfig+0x27c>)
 8002c24:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002c28:	6013      	str	r3, [r2, #0]
 8002c2a:	4b7c      	ldr	r3, [pc, #496]	@ (8002e1c <HAL_RCC_OscConfig+0x27c>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a7b      	ldr	r2, [pc, #492]	@ (8002e1c <HAL_RCC_OscConfig+0x27c>)
 8002c30:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c34:	6013      	str	r3, [r2, #0]
 8002c36:	e00b      	b.n	8002c50 <HAL_RCC_OscConfig+0xb0>
 8002c38:	4b78      	ldr	r3, [pc, #480]	@ (8002e1c <HAL_RCC_OscConfig+0x27c>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a77      	ldr	r2, [pc, #476]	@ (8002e1c <HAL_RCC_OscConfig+0x27c>)
 8002c3e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c42:	6013      	str	r3, [r2, #0]
 8002c44:	4b75      	ldr	r3, [pc, #468]	@ (8002e1c <HAL_RCC_OscConfig+0x27c>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a74      	ldr	r2, [pc, #464]	@ (8002e1c <HAL_RCC_OscConfig+0x27c>)
 8002c4a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002c4e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d013      	beq.n	8002c80 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c58:	f7fe fc1e 	bl	8001498 <HAL_GetTick>
 8002c5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c5e:	e008      	b.n	8002c72 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c60:	f7fe fc1a 	bl	8001498 <HAL_GetTick>
 8002c64:	4602      	mov	r2, r0
 8002c66:	693b      	ldr	r3, [r7, #16]
 8002c68:	1ad3      	subs	r3, r2, r3
 8002c6a:	2b64      	cmp	r3, #100	@ 0x64
 8002c6c:	d901      	bls.n	8002c72 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002c6e:	2303      	movs	r3, #3
 8002c70:	e29e      	b.n	80031b0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c72:	4b6a      	ldr	r3, [pc, #424]	@ (8002e1c <HAL_RCC_OscConfig+0x27c>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d0f0      	beq.n	8002c60 <HAL_RCC_OscConfig+0xc0>
 8002c7e:	e014      	b.n	8002caa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c80:	f7fe fc0a 	bl	8001498 <HAL_GetTick>
 8002c84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002c86:	e008      	b.n	8002c9a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c88:	f7fe fc06 	bl	8001498 <HAL_GetTick>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	693b      	ldr	r3, [r7, #16]
 8002c90:	1ad3      	subs	r3, r2, r3
 8002c92:	2b64      	cmp	r3, #100	@ 0x64
 8002c94:	d901      	bls.n	8002c9a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002c96:	2303      	movs	r3, #3
 8002c98:	e28a      	b.n	80031b0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002c9a:	4b60      	ldr	r3, [pc, #384]	@ (8002e1c <HAL_RCC_OscConfig+0x27c>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d1f0      	bne.n	8002c88 <HAL_RCC_OscConfig+0xe8>
 8002ca6:	e000      	b.n	8002caa <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ca8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f003 0302 	and.w	r3, r3, #2
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d075      	beq.n	8002da2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002cb6:	4b59      	ldr	r3, [pc, #356]	@ (8002e1c <HAL_RCC_OscConfig+0x27c>)
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	f003 030c 	and.w	r3, r3, #12
 8002cbe:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002cc0:	4b56      	ldr	r3, [pc, #344]	@ (8002e1c <HAL_RCC_OscConfig+0x27c>)
 8002cc2:	68db      	ldr	r3, [r3, #12]
 8002cc4:	f003 0303 	and.w	r3, r3, #3
 8002cc8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002cca:	69bb      	ldr	r3, [r7, #24]
 8002ccc:	2b0c      	cmp	r3, #12
 8002cce:	d102      	bne.n	8002cd6 <HAL_RCC_OscConfig+0x136>
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	2b02      	cmp	r3, #2
 8002cd4:	d002      	beq.n	8002cdc <HAL_RCC_OscConfig+0x13c>
 8002cd6:	69bb      	ldr	r3, [r7, #24]
 8002cd8:	2b04      	cmp	r3, #4
 8002cda:	d11f      	bne.n	8002d1c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002cdc:	4b4f      	ldr	r3, [pc, #316]	@ (8002e1c <HAL_RCC_OscConfig+0x27c>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d005      	beq.n	8002cf4 <HAL_RCC_OscConfig+0x154>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	68db      	ldr	r3, [r3, #12]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d101      	bne.n	8002cf4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	e25d      	b.n	80031b0 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cf4:	4b49      	ldr	r3, [pc, #292]	@ (8002e1c <HAL_RCC_OscConfig+0x27c>)
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	691b      	ldr	r3, [r3, #16]
 8002d00:	061b      	lsls	r3, r3, #24
 8002d02:	4946      	ldr	r1, [pc, #280]	@ (8002e1c <HAL_RCC_OscConfig+0x27c>)
 8002d04:	4313      	orrs	r3, r2
 8002d06:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002d08:	4b45      	ldr	r3, [pc, #276]	@ (8002e20 <HAL_RCC_OscConfig+0x280>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	f7fe fb77 	bl	8001400 <HAL_InitTick>
 8002d12:	4603      	mov	r3, r0
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d043      	beq.n	8002da0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	e249      	b.n	80031b0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	68db      	ldr	r3, [r3, #12]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d023      	beq.n	8002d6c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d24:	4b3d      	ldr	r3, [pc, #244]	@ (8002e1c <HAL_RCC_OscConfig+0x27c>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a3c      	ldr	r2, [pc, #240]	@ (8002e1c <HAL_RCC_OscConfig+0x27c>)
 8002d2a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d30:	f7fe fbb2 	bl	8001498 <HAL_GetTick>
 8002d34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d36:	e008      	b.n	8002d4a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d38:	f7fe fbae 	bl	8001498 <HAL_GetTick>
 8002d3c:	4602      	mov	r2, r0
 8002d3e:	693b      	ldr	r3, [r7, #16]
 8002d40:	1ad3      	subs	r3, r2, r3
 8002d42:	2b02      	cmp	r3, #2
 8002d44:	d901      	bls.n	8002d4a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002d46:	2303      	movs	r3, #3
 8002d48:	e232      	b.n	80031b0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d4a:	4b34      	ldr	r3, [pc, #208]	@ (8002e1c <HAL_RCC_OscConfig+0x27c>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d0f0      	beq.n	8002d38 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d56:	4b31      	ldr	r3, [pc, #196]	@ (8002e1c <HAL_RCC_OscConfig+0x27c>)
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	691b      	ldr	r3, [r3, #16]
 8002d62:	061b      	lsls	r3, r3, #24
 8002d64:	492d      	ldr	r1, [pc, #180]	@ (8002e1c <HAL_RCC_OscConfig+0x27c>)
 8002d66:	4313      	orrs	r3, r2
 8002d68:	604b      	str	r3, [r1, #4]
 8002d6a:	e01a      	b.n	8002da2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d6c:	4b2b      	ldr	r3, [pc, #172]	@ (8002e1c <HAL_RCC_OscConfig+0x27c>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a2a      	ldr	r2, [pc, #168]	@ (8002e1c <HAL_RCC_OscConfig+0x27c>)
 8002d72:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002d76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d78:	f7fe fb8e 	bl	8001498 <HAL_GetTick>
 8002d7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002d7e:	e008      	b.n	8002d92 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d80:	f7fe fb8a 	bl	8001498 <HAL_GetTick>
 8002d84:	4602      	mov	r2, r0
 8002d86:	693b      	ldr	r3, [r7, #16]
 8002d88:	1ad3      	subs	r3, r2, r3
 8002d8a:	2b02      	cmp	r3, #2
 8002d8c:	d901      	bls.n	8002d92 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002d8e:	2303      	movs	r3, #3
 8002d90:	e20e      	b.n	80031b0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002d92:	4b22      	ldr	r3, [pc, #136]	@ (8002e1c <HAL_RCC_OscConfig+0x27c>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d1f0      	bne.n	8002d80 <HAL_RCC_OscConfig+0x1e0>
 8002d9e:	e000      	b.n	8002da2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002da0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f003 0308 	and.w	r3, r3, #8
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d041      	beq.n	8002e32 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	695b      	ldr	r3, [r3, #20]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d01c      	beq.n	8002df0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002db6:	4b19      	ldr	r3, [pc, #100]	@ (8002e1c <HAL_RCC_OscConfig+0x27c>)
 8002db8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002dbc:	4a17      	ldr	r2, [pc, #92]	@ (8002e1c <HAL_RCC_OscConfig+0x27c>)
 8002dbe:	f043 0301 	orr.w	r3, r3, #1
 8002dc2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dc6:	f7fe fb67 	bl	8001498 <HAL_GetTick>
 8002dca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002dcc:	e008      	b.n	8002de0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002dce:	f7fe fb63 	bl	8001498 <HAL_GetTick>
 8002dd2:	4602      	mov	r2, r0
 8002dd4:	693b      	ldr	r3, [r7, #16]
 8002dd6:	1ad3      	subs	r3, r2, r3
 8002dd8:	2b02      	cmp	r3, #2
 8002dda:	d901      	bls.n	8002de0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002ddc:	2303      	movs	r3, #3
 8002dde:	e1e7      	b.n	80031b0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002de0:	4b0e      	ldr	r3, [pc, #56]	@ (8002e1c <HAL_RCC_OscConfig+0x27c>)
 8002de2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002de6:	f003 0302 	and.w	r3, r3, #2
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d0ef      	beq.n	8002dce <HAL_RCC_OscConfig+0x22e>
 8002dee:	e020      	b.n	8002e32 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002df0:	4b0a      	ldr	r3, [pc, #40]	@ (8002e1c <HAL_RCC_OscConfig+0x27c>)
 8002df2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002df6:	4a09      	ldr	r2, [pc, #36]	@ (8002e1c <HAL_RCC_OscConfig+0x27c>)
 8002df8:	f023 0301 	bic.w	r3, r3, #1
 8002dfc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e00:	f7fe fb4a 	bl	8001498 <HAL_GetTick>
 8002e04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002e06:	e00d      	b.n	8002e24 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e08:	f7fe fb46 	bl	8001498 <HAL_GetTick>
 8002e0c:	4602      	mov	r2, r0
 8002e0e:	693b      	ldr	r3, [r7, #16]
 8002e10:	1ad3      	subs	r3, r2, r3
 8002e12:	2b02      	cmp	r3, #2
 8002e14:	d906      	bls.n	8002e24 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002e16:	2303      	movs	r3, #3
 8002e18:	e1ca      	b.n	80031b0 <HAL_RCC_OscConfig+0x610>
 8002e1a:	bf00      	nop
 8002e1c:	40021000 	.word	0x40021000
 8002e20:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002e24:	4b8c      	ldr	r3, [pc, #560]	@ (8003058 <HAL_RCC_OscConfig+0x4b8>)
 8002e26:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002e2a:	f003 0302 	and.w	r3, r3, #2
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d1ea      	bne.n	8002e08 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f003 0304 	and.w	r3, r3, #4
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	f000 80a6 	beq.w	8002f8c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e40:	2300      	movs	r3, #0
 8002e42:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002e44:	4b84      	ldr	r3, [pc, #528]	@ (8003058 <HAL_RCC_OscConfig+0x4b8>)
 8002e46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e48:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d101      	bne.n	8002e54 <HAL_RCC_OscConfig+0x2b4>
 8002e50:	2301      	movs	r3, #1
 8002e52:	e000      	b.n	8002e56 <HAL_RCC_OscConfig+0x2b6>
 8002e54:	2300      	movs	r3, #0
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d00d      	beq.n	8002e76 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e5a:	4b7f      	ldr	r3, [pc, #508]	@ (8003058 <HAL_RCC_OscConfig+0x4b8>)
 8002e5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e5e:	4a7e      	ldr	r2, [pc, #504]	@ (8003058 <HAL_RCC_OscConfig+0x4b8>)
 8002e60:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e64:	6593      	str	r3, [r2, #88]	@ 0x58
 8002e66:	4b7c      	ldr	r3, [pc, #496]	@ (8003058 <HAL_RCC_OscConfig+0x4b8>)
 8002e68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e6e:	60fb      	str	r3, [r7, #12]
 8002e70:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002e72:	2301      	movs	r3, #1
 8002e74:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e76:	4b79      	ldr	r3, [pc, #484]	@ (800305c <HAL_RCC_OscConfig+0x4bc>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d118      	bne.n	8002eb4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e82:	4b76      	ldr	r3, [pc, #472]	@ (800305c <HAL_RCC_OscConfig+0x4bc>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a75      	ldr	r2, [pc, #468]	@ (800305c <HAL_RCC_OscConfig+0x4bc>)
 8002e88:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e8c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e8e:	f7fe fb03 	bl	8001498 <HAL_GetTick>
 8002e92:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e94:	e008      	b.n	8002ea8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e96:	f7fe faff 	bl	8001498 <HAL_GetTick>
 8002e9a:	4602      	mov	r2, r0
 8002e9c:	693b      	ldr	r3, [r7, #16]
 8002e9e:	1ad3      	subs	r3, r2, r3
 8002ea0:	2b02      	cmp	r3, #2
 8002ea2:	d901      	bls.n	8002ea8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002ea4:	2303      	movs	r3, #3
 8002ea6:	e183      	b.n	80031b0 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ea8:	4b6c      	ldr	r3, [pc, #432]	@ (800305c <HAL_RCC_OscConfig+0x4bc>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d0f0      	beq.n	8002e96 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	689b      	ldr	r3, [r3, #8]
 8002eb8:	2b01      	cmp	r3, #1
 8002eba:	d108      	bne.n	8002ece <HAL_RCC_OscConfig+0x32e>
 8002ebc:	4b66      	ldr	r3, [pc, #408]	@ (8003058 <HAL_RCC_OscConfig+0x4b8>)
 8002ebe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ec2:	4a65      	ldr	r2, [pc, #404]	@ (8003058 <HAL_RCC_OscConfig+0x4b8>)
 8002ec4:	f043 0301 	orr.w	r3, r3, #1
 8002ec8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002ecc:	e024      	b.n	8002f18 <HAL_RCC_OscConfig+0x378>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	689b      	ldr	r3, [r3, #8]
 8002ed2:	2b05      	cmp	r3, #5
 8002ed4:	d110      	bne.n	8002ef8 <HAL_RCC_OscConfig+0x358>
 8002ed6:	4b60      	ldr	r3, [pc, #384]	@ (8003058 <HAL_RCC_OscConfig+0x4b8>)
 8002ed8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002edc:	4a5e      	ldr	r2, [pc, #376]	@ (8003058 <HAL_RCC_OscConfig+0x4b8>)
 8002ede:	f043 0304 	orr.w	r3, r3, #4
 8002ee2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002ee6:	4b5c      	ldr	r3, [pc, #368]	@ (8003058 <HAL_RCC_OscConfig+0x4b8>)
 8002ee8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002eec:	4a5a      	ldr	r2, [pc, #360]	@ (8003058 <HAL_RCC_OscConfig+0x4b8>)
 8002eee:	f043 0301 	orr.w	r3, r3, #1
 8002ef2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002ef6:	e00f      	b.n	8002f18 <HAL_RCC_OscConfig+0x378>
 8002ef8:	4b57      	ldr	r3, [pc, #348]	@ (8003058 <HAL_RCC_OscConfig+0x4b8>)
 8002efa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002efe:	4a56      	ldr	r2, [pc, #344]	@ (8003058 <HAL_RCC_OscConfig+0x4b8>)
 8002f00:	f023 0301 	bic.w	r3, r3, #1
 8002f04:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002f08:	4b53      	ldr	r3, [pc, #332]	@ (8003058 <HAL_RCC_OscConfig+0x4b8>)
 8002f0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f0e:	4a52      	ldr	r2, [pc, #328]	@ (8003058 <HAL_RCC_OscConfig+0x4b8>)
 8002f10:	f023 0304 	bic.w	r3, r3, #4
 8002f14:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	689b      	ldr	r3, [r3, #8]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d016      	beq.n	8002f4e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f20:	f7fe faba 	bl	8001498 <HAL_GetTick>
 8002f24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f26:	e00a      	b.n	8002f3e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f28:	f7fe fab6 	bl	8001498 <HAL_GetTick>
 8002f2c:	4602      	mov	r2, r0
 8002f2e:	693b      	ldr	r3, [r7, #16]
 8002f30:	1ad3      	subs	r3, r2, r3
 8002f32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d901      	bls.n	8002f3e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002f3a:	2303      	movs	r3, #3
 8002f3c:	e138      	b.n	80031b0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f3e:	4b46      	ldr	r3, [pc, #280]	@ (8003058 <HAL_RCC_OscConfig+0x4b8>)
 8002f40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f44:	f003 0302 	and.w	r3, r3, #2
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d0ed      	beq.n	8002f28 <HAL_RCC_OscConfig+0x388>
 8002f4c:	e015      	b.n	8002f7a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f4e:	f7fe faa3 	bl	8001498 <HAL_GetTick>
 8002f52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f54:	e00a      	b.n	8002f6c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f56:	f7fe fa9f 	bl	8001498 <HAL_GetTick>
 8002f5a:	4602      	mov	r2, r0
 8002f5c:	693b      	ldr	r3, [r7, #16]
 8002f5e:	1ad3      	subs	r3, r2, r3
 8002f60:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d901      	bls.n	8002f6c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002f68:	2303      	movs	r3, #3
 8002f6a:	e121      	b.n	80031b0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f6c:	4b3a      	ldr	r3, [pc, #232]	@ (8003058 <HAL_RCC_OscConfig+0x4b8>)
 8002f6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f72:	f003 0302 	and.w	r3, r3, #2
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d1ed      	bne.n	8002f56 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002f7a:	7ffb      	ldrb	r3, [r7, #31]
 8002f7c:	2b01      	cmp	r3, #1
 8002f7e:	d105      	bne.n	8002f8c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f80:	4b35      	ldr	r3, [pc, #212]	@ (8003058 <HAL_RCC_OscConfig+0x4b8>)
 8002f82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f84:	4a34      	ldr	r2, [pc, #208]	@ (8003058 <HAL_RCC_OscConfig+0x4b8>)
 8002f86:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002f8a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f003 0320 	and.w	r3, r3, #32
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d03c      	beq.n	8003012 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	699b      	ldr	r3, [r3, #24]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d01c      	beq.n	8002fda <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002fa0:	4b2d      	ldr	r3, [pc, #180]	@ (8003058 <HAL_RCC_OscConfig+0x4b8>)
 8002fa2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002fa6:	4a2c      	ldr	r2, [pc, #176]	@ (8003058 <HAL_RCC_OscConfig+0x4b8>)
 8002fa8:	f043 0301 	orr.w	r3, r3, #1
 8002fac:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fb0:	f7fe fa72 	bl	8001498 <HAL_GetTick>
 8002fb4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002fb6:	e008      	b.n	8002fca <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002fb8:	f7fe fa6e 	bl	8001498 <HAL_GetTick>
 8002fbc:	4602      	mov	r2, r0
 8002fbe:	693b      	ldr	r3, [r7, #16]
 8002fc0:	1ad3      	subs	r3, r2, r3
 8002fc2:	2b02      	cmp	r3, #2
 8002fc4:	d901      	bls.n	8002fca <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002fc6:	2303      	movs	r3, #3
 8002fc8:	e0f2      	b.n	80031b0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002fca:	4b23      	ldr	r3, [pc, #140]	@ (8003058 <HAL_RCC_OscConfig+0x4b8>)
 8002fcc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002fd0:	f003 0302 	and.w	r3, r3, #2
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d0ef      	beq.n	8002fb8 <HAL_RCC_OscConfig+0x418>
 8002fd8:	e01b      	b.n	8003012 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002fda:	4b1f      	ldr	r3, [pc, #124]	@ (8003058 <HAL_RCC_OscConfig+0x4b8>)
 8002fdc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002fe0:	4a1d      	ldr	r2, [pc, #116]	@ (8003058 <HAL_RCC_OscConfig+0x4b8>)
 8002fe2:	f023 0301 	bic.w	r3, r3, #1
 8002fe6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fea:	f7fe fa55 	bl	8001498 <HAL_GetTick>
 8002fee:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002ff0:	e008      	b.n	8003004 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002ff2:	f7fe fa51 	bl	8001498 <HAL_GetTick>
 8002ff6:	4602      	mov	r2, r0
 8002ff8:	693b      	ldr	r3, [r7, #16]
 8002ffa:	1ad3      	subs	r3, r2, r3
 8002ffc:	2b02      	cmp	r3, #2
 8002ffe:	d901      	bls.n	8003004 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003000:	2303      	movs	r3, #3
 8003002:	e0d5      	b.n	80031b0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003004:	4b14      	ldr	r3, [pc, #80]	@ (8003058 <HAL_RCC_OscConfig+0x4b8>)
 8003006:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800300a:	f003 0302 	and.w	r3, r3, #2
 800300e:	2b00      	cmp	r3, #0
 8003010:	d1ef      	bne.n	8002ff2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	69db      	ldr	r3, [r3, #28]
 8003016:	2b00      	cmp	r3, #0
 8003018:	f000 80c9 	beq.w	80031ae <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800301c:	4b0e      	ldr	r3, [pc, #56]	@ (8003058 <HAL_RCC_OscConfig+0x4b8>)
 800301e:	689b      	ldr	r3, [r3, #8]
 8003020:	f003 030c 	and.w	r3, r3, #12
 8003024:	2b0c      	cmp	r3, #12
 8003026:	f000 8083 	beq.w	8003130 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	69db      	ldr	r3, [r3, #28]
 800302e:	2b02      	cmp	r3, #2
 8003030:	d15e      	bne.n	80030f0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003032:	4b09      	ldr	r3, [pc, #36]	@ (8003058 <HAL_RCC_OscConfig+0x4b8>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4a08      	ldr	r2, [pc, #32]	@ (8003058 <HAL_RCC_OscConfig+0x4b8>)
 8003038:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800303c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800303e:	f7fe fa2b 	bl	8001498 <HAL_GetTick>
 8003042:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003044:	e00c      	b.n	8003060 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003046:	f7fe fa27 	bl	8001498 <HAL_GetTick>
 800304a:	4602      	mov	r2, r0
 800304c:	693b      	ldr	r3, [r7, #16]
 800304e:	1ad3      	subs	r3, r2, r3
 8003050:	2b02      	cmp	r3, #2
 8003052:	d905      	bls.n	8003060 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003054:	2303      	movs	r3, #3
 8003056:	e0ab      	b.n	80031b0 <HAL_RCC_OscConfig+0x610>
 8003058:	40021000 	.word	0x40021000
 800305c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003060:	4b55      	ldr	r3, [pc, #340]	@ (80031b8 <HAL_RCC_OscConfig+0x618>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003068:	2b00      	cmp	r3, #0
 800306a:	d1ec      	bne.n	8003046 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800306c:	4b52      	ldr	r3, [pc, #328]	@ (80031b8 <HAL_RCC_OscConfig+0x618>)
 800306e:	68da      	ldr	r2, [r3, #12]
 8003070:	4b52      	ldr	r3, [pc, #328]	@ (80031bc <HAL_RCC_OscConfig+0x61c>)
 8003072:	4013      	ands	r3, r2
 8003074:	687a      	ldr	r2, [r7, #4]
 8003076:	6a11      	ldr	r1, [r2, #32]
 8003078:	687a      	ldr	r2, [r7, #4]
 800307a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800307c:	3a01      	subs	r2, #1
 800307e:	0112      	lsls	r2, r2, #4
 8003080:	4311      	orrs	r1, r2
 8003082:	687a      	ldr	r2, [r7, #4]
 8003084:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8003086:	0212      	lsls	r2, r2, #8
 8003088:	4311      	orrs	r1, r2
 800308a:	687a      	ldr	r2, [r7, #4]
 800308c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800308e:	0852      	lsrs	r2, r2, #1
 8003090:	3a01      	subs	r2, #1
 8003092:	0552      	lsls	r2, r2, #21
 8003094:	4311      	orrs	r1, r2
 8003096:	687a      	ldr	r2, [r7, #4]
 8003098:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800309a:	0852      	lsrs	r2, r2, #1
 800309c:	3a01      	subs	r2, #1
 800309e:	0652      	lsls	r2, r2, #25
 80030a0:	4311      	orrs	r1, r2
 80030a2:	687a      	ldr	r2, [r7, #4]
 80030a4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80030a6:	06d2      	lsls	r2, r2, #27
 80030a8:	430a      	orrs	r2, r1
 80030aa:	4943      	ldr	r1, [pc, #268]	@ (80031b8 <HAL_RCC_OscConfig+0x618>)
 80030ac:	4313      	orrs	r3, r2
 80030ae:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030b0:	4b41      	ldr	r3, [pc, #260]	@ (80031b8 <HAL_RCC_OscConfig+0x618>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a40      	ldr	r2, [pc, #256]	@ (80031b8 <HAL_RCC_OscConfig+0x618>)
 80030b6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80030ba:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80030bc:	4b3e      	ldr	r3, [pc, #248]	@ (80031b8 <HAL_RCC_OscConfig+0x618>)
 80030be:	68db      	ldr	r3, [r3, #12]
 80030c0:	4a3d      	ldr	r2, [pc, #244]	@ (80031b8 <HAL_RCC_OscConfig+0x618>)
 80030c2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80030c6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030c8:	f7fe f9e6 	bl	8001498 <HAL_GetTick>
 80030cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030ce:	e008      	b.n	80030e2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030d0:	f7fe f9e2 	bl	8001498 <HAL_GetTick>
 80030d4:	4602      	mov	r2, r0
 80030d6:	693b      	ldr	r3, [r7, #16]
 80030d8:	1ad3      	subs	r3, r2, r3
 80030da:	2b02      	cmp	r3, #2
 80030dc:	d901      	bls.n	80030e2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80030de:	2303      	movs	r3, #3
 80030e0:	e066      	b.n	80031b0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030e2:	4b35      	ldr	r3, [pc, #212]	@ (80031b8 <HAL_RCC_OscConfig+0x618>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d0f0      	beq.n	80030d0 <HAL_RCC_OscConfig+0x530>
 80030ee:	e05e      	b.n	80031ae <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030f0:	4b31      	ldr	r3, [pc, #196]	@ (80031b8 <HAL_RCC_OscConfig+0x618>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a30      	ldr	r2, [pc, #192]	@ (80031b8 <HAL_RCC_OscConfig+0x618>)
 80030f6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80030fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030fc:	f7fe f9cc 	bl	8001498 <HAL_GetTick>
 8003100:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003102:	e008      	b.n	8003116 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003104:	f7fe f9c8 	bl	8001498 <HAL_GetTick>
 8003108:	4602      	mov	r2, r0
 800310a:	693b      	ldr	r3, [r7, #16]
 800310c:	1ad3      	subs	r3, r2, r3
 800310e:	2b02      	cmp	r3, #2
 8003110:	d901      	bls.n	8003116 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8003112:	2303      	movs	r3, #3
 8003114:	e04c      	b.n	80031b0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003116:	4b28      	ldr	r3, [pc, #160]	@ (80031b8 <HAL_RCC_OscConfig+0x618>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800311e:	2b00      	cmp	r3, #0
 8003120:	d1f0      	bne.n	8003104 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003122:	4b25      	ldr	r3, [pc, #148]	@ (80031b8 <HAL_RCC_OscConfig+0x618>)
 8003124:	68da      	ldr	r2, [r3, #12]
 8003126:	4924      	ldr	r1, [pc, #144]	@ (80031b8 <HAL_RCC_OscConfig+0x618>)
 8003128:	4b25      	ldr	r3, [pc, #148]	@ (80031c0 <HAL_RCC_OscConfig+0x620>)
 800312a:	4013      	ands	r3, r2
 800312c:	60cb      	str	r3, [r1, #12]
 800312e:	e03e      	b.n	80031ae <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	69db      	ldr	r3, [r3, #28]
 8003134:	2b01      	cmp	r3, #1
 8003136:	d101      	bne.n	800313c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8003138:	2301      	movs	r3, #1
 800313a:	e039      	b.n	80031b0 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800313c:	4b1e      	ldr	r3, [pc, #120]	@ (80031b8 <HAL_RCC_OscConfig+0x618>)
 800313e:	68db      	ldr	r3, [r3, #12]
 8003140:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003142:	697b      	ldr	r3, [r7, #20]
 8003144:	f003 0203 	and.w	r2, r3, #3
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6a1b      	ldr	r3, [r3, #32]
 800314c:	429a      	cmp	r2, r3
 800314e:	d12c      	bne.n	80031aa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003150:	697b      	ldr	r3, [r7, #20]
 8003152:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800315a:	3b01      	subs	r3, #1
 800315c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800315e:	429a      	cmp	r2, r3
 8003160:	d123      	bne.n	80031aa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003162:	697b      	ldr	r3, [r7, #20]
 8003164:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800316c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800316e:	429a      	cmp	r2, r3
 8003170:	d11b      	bne.n	80031aa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003172:	697b      	ldr	r3, [r7, #20]
 8003174:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800317c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800317e:	429a      	cmp	r2, r3
 8003180:	d113      	bne.n	80031aa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800318c:	085b      	lsrs	r3, r3, #1
 800318e:	3b01      	subs	r3, #1
 8003190:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003192:	429a      	cmp	r2, r3
 8003194:	d109      	bne.n	80031aa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003196:	697b      	ldr	r3, [r7, #20]
 8003198:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80031a0:	085b      	lsrs	r3, r3, #1
 80031a2:	3b01      	subs	r3, #1
 80031a4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80031a6:	429a      	cmp	r2, r3
 80031a8:	d001      	beq.n	80031ae <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80031aa:	2301      	movs	r3, #1
 80031ac:	e000      	b.n	80031b0 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80031ae:	2300      	movs	r3, #0
}
 80031b0:	4618      	mov	r0, r3
 80031b2:	3720      	adds	r7, #32
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bd80      	pop	{r7, pc}
 80031b8:	40021000 	.word	0x40021000
 80031bc:	019f800c 	.word	0x019f800c
 80031c0:	feeefffc 	.word	0xfeeefffc

080031c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b086      	sub	sp, #24
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
 80031cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80031ce:	2300      	movs	r3, #0
 80031d0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d101      	bne.n	80031dc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80031d8:	2301      	movs	r3, #1
 80031da:	e11e      	b.n	800341a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80031dc:	4b91      	ldr	r3, [pc, #580]	@ (8003424 <HAL_RCC_ClockConfig+0x260>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f003 030f 	and.w	r3, r3, #15
 80031e4:	683a      	ldr	r2, [r7, #0]
 80031e6:	429a      	cmp	r2, r3
 80031e8:	d910      	bls.n	800320c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031ea:	4b8e      	ldr	r3, [pc, #568]	@ (8003424 <HAL_RCC_ClockConfig+0x260>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f023 020f 	bic.w	r2, r3, #15
 80031f2:	498c      	ldr	r1, [pc, #560]	@ (8003424 <HAL_RCC_ClockConfig+0x260>)
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	4313      	orrs	r3, r2
 80031f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031fa:	4b8a      	ldr	r3, [pc, #552]	@ (8003424 <HAL_RCC_ClockConfig+0x260>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f003 030f 	and.w	r3, r3, #15
 8003202:	683a      	ldr	r2, [r7, #0]
 8003204:	429a      	cmp	r2, r3
 8003206:	d001      	beq.n	800320c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003208:	2301      	movs	r3, #1
 800320a:	e106      	b.n	800341a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f003 0301 	and.w	r3, r3, #1
 8003214:	2b00      	cmp	r3, #0
 8003216:	d073      	beq.n	8003300 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	2b03      	cmp	r3, #3
 800321e:	d129      	bne.n	8003274 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003220:	4b81      	ldr	r3, [pc, #516]	@ (8003428 <HAL_RCC_ClockConfig+0x264>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003228:	2b00      	cmp	r3, #0
 800322a:	d101      	bne.n	8003230 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800322c:	2301      	movs	r3, #1
 800322e:	e0f4      	b.n	800341a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003230:	f000 f99e 	bl	8003570 <RCC_GetSysClockFreqFromPLLSource>
 8003234:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003236:	693b      	ldr	r3, [r7, #16]
 8003238:	4a7c      	ldr	r2, [pc, #496]	@ (800342c <HAL_RCC_ClockConfig+0x268>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d93f      	bls.n	80032be <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800323e:	4b7a      	ldr	r3, [pc, #488]	@ (8003428 <HAL_RCC_ClockConfig+0x264>)
 8003240:	689b      	ldr	r3, [r3, #8]
 8003242:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003246:	2b00      	cmp	r3, #0
 8003248:	d009      	beq.n	800325e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003252:	2b00      	cmp	r3, #0
 8003254:	d033      	beq.n	80032be <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800325a:	2b00      	cmp	r3, #0
 800325c:	d12f      	bne.n	80032be <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800325e:	4b72      	ldr	r3, [pc, #456]	@ (8003428 <HAL_RCC_ClockConfig+0x264>)
 8003260:	689b      	ldr	r3, [r3, #8]
 8003262:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003266:	4a70      	ldr	r2, [pc, #448]	@ (8003428 <HAL_RCC_ClockConfig+0x264>)
 8003268:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800326c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800326e:	2380      	movs	r3, #128	@ 0x80
 8003270:	617b      	str	r3, [r7, #20]
 8003272:	e024      	b.n	80032be <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	2b02      	cmp	r3, #2
 800327a:	d107      	bne.n	800328c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800327c:	4b6a      	ldr	r3, [pc, #424]	@ (8003428 <HAL_RCC_ClockConfig+0x264>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003284:	2b00      	cmp	r3, #0
 8003286:	d109      	bne.n	800329c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003288:	2301      	movs	r3, #1
 800328a:	e0c6      	b.n	800341a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800328c:	4b66      	ldr	r3, [pc, #408]	@ (8003428 <HAL_RCC_ClockConfig+0x264>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003294:	2b00      	cmp	r3, #0
 8003296:	d101      	bne.n	800329c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003298:	2301      	movs	r3, #1
 800329a:	e0be      	b.n	800341a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800329c:	f000 f8ce 	bl	800343c <HAL_RCC_GetSysClockFreq>
 80032a0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	4a61      	ldr	r2, [pc, #388]	@ (800342c <HAL_RCC_ClockConfig+0x268>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d909      	bls.n	80032be <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80032aa:	4b5f      	ldr	r3, [pc, #380]	@ (8003428 <HAL_RCC_ClockConfig+0x264>)
 80032ac:	689b      	ldr	r3, [r3, #8]
 80032ae:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80032b2:	4a5d      	ldr	r2, [pc, #372]	@ (8003428 <HAL_RCC_ClockConfig+0x264>)
 80032b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80032b8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80032ba:	2380      	movs	r3, #128	@ 0x80
 80032bc:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80032be:	4b5a      	ldr	r3, [pc, #360]	@ (8003428 <HAL_RCC_ClockConfig+0x264>)
 80032c0:	689b      	ldr	r3, [r3, #8]
 80032c2:	f023 0203 	bic.w	r2, r3, #3
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	4957      	ldr	r1, [pc, #348]	@ (8003428 <HAL_RCC_ClockConfig+0x264>)
 80032cc:	4313      	orrs	r3, r2
 80032ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032d0:	f7fe f8e2 	bl	8001498 <HAL_GetTick>
 80032d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032d6:	e00a      	b.n	80032ee <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032d8:	f7fe f8de 	bl	8001498 <HAL_GetTick>
 80032dc:	4602      	mov	r2, r0
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	1ad3      	subs	r3, r2, r3
 80032e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d901      	bls.n	80032ee <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80032ea:	2303      	movs	r3, #3
 80032ec:	e095      	b.n	800341a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032ee:	4b4e      	ldr	r3, [pc, #312]	@ (8003428 <HAL_RCC_ClockConfig+0x264>)
 80032f0:	689b      	ldr	r3, [r3, #8]
 80032f2:	f003 020c 	and.w	r2, r3, #12
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	009b      	lsls	r3, r3, #2
 80032fc:	429a      	cmp	r2, r3
 80032fe:	d1eb      	bne.n	80032d8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f003 0302 	and.w	r3, r3, #2
 8003308:	2b00      	cmp	r3, #0
 800330a:	d023      	beq.n	8003354 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f003 0304 	and.w	r3, r3, #4
 8003314:	2b00      	cmp	r3, #0
 8003316:	d005      	beq.n	8003324 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003318:	4b43      	ldr	r3, [pc, #268]	@ (8003428 <HAL_RCC_ClockConfig+0x264>)
 800331a:	689b      	ldr	r3, [r3, #8]
 800331c:	4a42      	ldr	r2, [pc, #264]	@ (8003428 <HAL_RCC_ClockConfig+0x264>)
 800331e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003322:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f003 0308 	and.w	r3, r3, #8
 800332c:	2b00      	cmp	r3, #0
 800332e:	d007      	beq.n	8003340 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003330:	4b3d      	ldr	r3, [pc, #244]	@ (8003428 <HAL_RCC_ClockConfig+0x264>)
 8003332:	689b      	ldr	r3, [r3, #8]
 8003334:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003338:	4a3b      	ldr	r2, [pc, #236]	@ (8003428 <HAL_RCC_ClockConfig+0x264>)
 800333a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800333e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003340:	4b39      	ldr	r3, [pc, #228]	@ (8003428 <HAL_RCC_ClockConfig+0x264>)
 8003342:	689b      	ldr	r3, [r3, #8]
 8003344:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	689b      	ldr	r3, [r3, #8]
 800334c:	4936      	ldr	r1, [pc, #216]	@ (8003428 <HAL_RCC_ClockConfig+0x264>)
 800334e:	4313      	orrs	r3, r2
 8003350:	608b      	str	r3, [r1, #8]
 8003352:	e008      	b.n	8003366 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003354:	697b      	ldr	r3, [r7, #20]
 8003356:	2b80      	cmp	r3, #128	@ 0x80
 8003358:	d105      	bne.n	8003366 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800335a:	4b33      	ldr	r3, [pc, #204]	@ (8003428 <HAL_RCC_ClockConfig+0x264>)
 800335c:	689b      	ldr	r3, [r3, #8]
 800335e:	4a32      	ldr	r2, [pc, #200]	@ (8003428 <HAL_RCC_ClockConfig+0x264>)
 8003360:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003364:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003366:	4b2f      	ldr	r3, [pc, #188]	@ (8003424 <HAL_RCC_ClockConfig+0x260>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f003 030f 	and.w	r3, r3, #15
 800336e:	683a      	ldr	r2, [r7, #0]
 8003370:	429a      	cmp	r2, r3
 8003372:	d21d      	bcs.n	80033b0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003374:	4b2b      	ldr	r3, [pc, #172]	@ (8003424 <HAL_RCC_ClockConfig+0x260>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f023 020f 	bic.w	r2, r3, #15
 800337c:	4929      	ldr	r1, [pc, #164]	@ (8003424 <HAL_RCC_ClockConfig+0x260>)
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	4313      	orrs	r3, r2
 8003382:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003384:	f7fe f888 	bl	8001498 <HAL_GetTick>
 8003388:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800338a:	e00a      	b.n	80033a2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800338c:	f7fe f884 	bl	8001498 <HAL_GetTick>
 8003390:	4602      	mov	r2, r0
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	1ad3      	subs	r3, r2, r3
 8003396:	f241 3288 	movw	r2, #5000	@ 0x1388
 800339a:	4293      	cmp	r3, r2
 800339c:	d901      	bls.n	80033a2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800339e:	2303      	movs	r3, #3
 80033a0:	e03b      	b.n	800341a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033a2:	4b20      	ldr	r3, [pc, #128]	@ (8003424 <HAL_RCC_ClockConfig+0x260>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f003 030f 	and.w	r3, r3, #15
 80033aa:	683a      	ldr	r2, [r7, #0]
 80033ac:	429a      	cmp	r2, r3
 80033ae:	d1ed      	bne.n	800338c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f003 0304 	and.w	r3, r3, #4
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d008      	beq.n	80033ce <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033bc:	4b1a      	ldr	r3, [pc, #104]	@ (8003428 <HAL_RCC_ClockConfig+0x264>)
 80033be:	689b      	ldr	r3, [r3, #8]
 80033c0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	68db      	ldr	r3, [r3, #12]
 80033c8:	4917      	ldr	r1, [pc, #92]	@ (8003428 <HAL_RCC_ClockConfig+0x264>)
 80033ca:	4313      	orrs	r3, r2
 80033cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f003 0308 	and.w	r3, r3, #8
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d009      	beq.n	80033ee <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80033da:	4b13      	ldr	r3, [pc, #76]	@ (8003428 <HAL_RCC_ClockConfig+0x264>)
 80033dc:	689b      	ldr	r3, [r3, #8]
 80033de:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	691b      	ldr	r3, [r3, #16]
 80033e6:	00db      	lsls	r3, r3, #3
 80033e8:	490f      	ldr	r1, [pc, #60]	@ (8003428 <HAL_RCC_ClockConfig+0x264>)
 80033ea:	4313      	orrs	r3, r2
 80033ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80033ee:	f000 f825 	bl	800343c <HAL_RCC_GetSysClockFreq>
 80033f2:	4602      	mov	r2, r0
 80033f4:	4b0c      	ldr	r3, [pc, #48]	@ (8003428 <HAL_RCC_ClockConfig+0x264>)
 80033f6:	689b      	ldr	r3, [r3, #8]
 80033f8:	091b      	lsrs	r3, r3, #4
 80033fa:	f003 030f 	and.w	r3, r3, #15
 80033fe:	490c      	ldr	r1, [pc, #48]	@ (8003430 <HAL_RCC_ClockConfig+0x26c>)
 8003400:	5ccb      	ldrb	r3, [r1, r3]
 8003402:	f003 031f 	and.w	r3, r3, #31
 8003406:	fa22 f303 	lsr.w	r3, r2, r3
 800340a:	4a0a      	ldr	r2, [pc, #40]	@ (8003434 <HAL_RCC_ClockConfig+0x270>)
 800340c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800340e:	4b0a      	ldr	r3, [pc, #40]	@ (8003438 <HAL_RCC_ClockConfig+0x274>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4618      	mov	r0, r3
 8003414:	f7fd fff4 	bl	8001400 <HAL_InitTick>
 8003418:	4603      	mov	r3, r0
}
 800341a:	4618      	mov	r0, r3
 800341c:	3718      	adds	r7, #24
 800341e:	46bd      	mov	sp, r7
 8003420:	bd80      	pop	{r7, pc}
 8003422:	bf00      	nop
 8003424:	40022000 	.word	0x40022000
 8003428:	40021000 	.word	0x40021000
 800342c:	04c4b400 	.word	0x04c4b400
 8003430:	08006388 	.word	0x08006388
 8003434:	20000000 	.word	0x20000000
 8003438:	20000004 	.word	0x20000004

0800343c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800343c:	b480      	push	{r7}
 800343e:	b087      	sub	sp, #28
 8003440:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003442:	4b2c      	ldr	r3, [pc, #176]	@ (80034f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003444:	689b      	ldr	r3, [r3, #8]
 8003446:	f003 030c 	and.w	r3, r3, #12
 800344a:	2b04      	cmp	r3, #4
 800344c:	d102      	bne.n	8003454 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800344e:	4b2a      	ldr	r3, [pc, #168]	@ (80034f8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003450:	613b      	str	r3, [r7, #16]
 8003452:	e047      	b.n	80034e4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003454:	4b27      	ldr	r3, [pc, #156]	@ (80034f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003456:	689b      	ldr	r3, [r3, #8]
 8003458:	f003 030c 	and.w	r3, r3, #12
 800345c:	2b08      	cmp	r3, #8
 800345e:	d102      	bne.n	8003466 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003460:	4b26      	ldr	r3, [pc, #152]	@ (80034fc <HAL_RCC_GetSysClockFreq+0xc0>)
 8003462:	613b      	str	r3, [r7, #16]
 8003464:	e03e      	b.n	80034e4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003466:	4b23      	ldr	r3, [pc, #140]	@ (80034f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003468:	689b      	ldr	r3, [r3, #8]
 800346a:	f003 030c 	and.w	r3, r3, #12
 800346e:	2b0c      	cmp	r3, #12
 8003470:	d136      	bne.n	80034e0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003472:	4b20      	ldr	r3, [pc, #128]	@ (80034f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003474:	68db      	ldr	r3, [r3, #12]
 8003476:	f003 0303 	and.w	r3, r3, #3
 800347a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800347c:	4b1d      	ldr	r3, [pc, #116]	@ (80034f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800347e:	68db      	ldr	r3, [r3, #12]
 8003480:	091b      	lsrs	r3, r3, #4
 8003482:	f003 030f 	and.w	r3, r3, #15
 8003486:	3301      	adds	r3, #1
 8003488:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	2b03      	cmp	r3, #3
 800348e:	d10c      	bne.n	80034aa <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003490:	4a1a      	ldr	r2, [pc, #104]	@ (80034fc <HAL_RCC_GetSysClockFreq+0xc0>)
 8003492:	68bb      	ldr	r3, [r7, #8]
 8003494:	fbb2 f3f3 	udiv	r3, r2, r3
 8003498:	4a16      	ldr	r2, [pc, #88]	@ (80034f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800349a:	68d2      	ldr	r2, [r2, #12]
 800349c:	0a12      	lsrs	r2, r2, #8
 800349e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80034a2:	fb02 f303 	mul.w	r3, r2, r3
 80034a6:	617b      	str	r3, [r7, #20]
      break;
 80034a8:	e00c      	b.n	80034c4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80034aa:	4a13      	ldr	r2, [pc, #76]	@ (80034f8 <HAL_RCC_GetSysClockFreq+0xbc>)
 80034ac:	68bb      	ldr	r3, [r7, #8]
 80034ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80034b2:	4a10      	ldr	r2, [pc, #64]	@ (80034f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80034b4:	68d2      	ldr	r2, [r2, #12]
 80034b6:	0a12      	lsrs	r2, r2, #8
 80034b8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80034bc:	fb02 f303 	mul.w	r3, r2, r3
 80034c0:	617b      	str	r3, [r7, #20]
      break;
 80034c2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80034c4:	4b0b      	ldr	r3, [pc, #44]	@ (80034f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80034c6:	68db      	ldr	r3, [r3, #12]
 80034c8:	0e5b      	lsrs	r3, r3, #25
 80034ca:	f003 0303 	and.w	r3, r3, #3
 80034ce:	3301      	adds	r3, #1
 80034d0:	005b      	lsls	r3, r3, #1
 80034d2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80034d4:	697a      	ldr	r2, [r7, #20]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80034dc:	613b      	str	r3, [r7, #16]
 80034de:	e001      	b.n	80034e4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80034e0:	2300      	movs	r3, #0
 80034e2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80034e4:	693b      	ldr	r3, [r7, #16]
}
 80034e6:	4618      	mov	r0, r3
 80034e8:	371c      	adds	r7, #28
 80034ea:	46bd      	mov	sp, r7
 80034ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f0:	4770      	bx	lr
 80034f2:	bf00      	nop
 80034f4:	40021000 	.word	0x40021000
 80034f8:	00f42400 	.word	0x00f42400
 80034fc:	007a1200 	.word	0x007a1200

08003500 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003500:	b480      	push	{r7}
 8003502:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003504:	4b03      	ldr	r3, [pc, #12]	@ (8003514 <HAL_RCC_GetHCLKFreq+0x14>)
 8003506:	681b      	ldr	r3, [r3, #0]
}
 8003508:	4618      	mov	r0, r3
 800350a:	46bd      	mov	sp, r7
 800350c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003510:	4770      	bx	lr
 8003512:	bf00      	nop
 8003514:	20000000 	.word	0x20000000

08003518 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800351c:	f7ff fff0 	bl	8003500 <HAL_RCC_GetHCLKFreq>
 8003520:	4602      	mov	r2, r0
 8003522:	4b06      	ldr	r3, [pc, #24]	@ (800353c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003524:	689b      	ldr	r3, [r3, #8]
 8003526:	0a1b      	lsrs	r3, r3, #8
 8003528:	f003 0307 	and.w	r3, r3, #7
 800352c:	4904      	ldr	r1, [pc, #16]	@ (8003540 <HAL_RCC_GetPCLK1Freq+0x28>)
 800352e:	5ccb      	ldrb	r3, [r1, r3]
 8003530:	f003 031f 	and.w	r3, r3, #31
 8003534:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003538:	4618      	mov	r0, r3
 800353a:	bd80      	pop	{r7, pc}
 800353c:	40021000 	.word	0x40021000
 8003540:	08006398 	.word	0x08006398

08003544 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003548:	f7ff ffda 	bl	8003500 <HAL_RCC_GetHCLKFreq>
 800354c:	4602      	mov	r2, r0
 800354e:	4b06      	ldr	r3, [pc, #24]	@ (8003568 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003550:	689b      	ldr	r3, [r3, #8]
 8003552:	0adb      	lsrs	r3, r3, #11
 8003554:	f003 0307 	and.w	r3, r3, #7
 8003558:	4904      	ldr	r1, [pc, #16]	@ (800356c <HAL_RCC_GetPCLK2Freq+0x28>)
 800355a:	5ccb      	ldrb	r3, [r1, r3]
 800355c:	f003 031f 	and.w	r3, r3, #31
 8003560:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003564:	4618      	mov	r0, r3
 8003566:	bd80      	pop	{r7, pc}
 8003568:	40021000 	.word	0x40021000
 800356c:	08006398 	.word	0x08006398

08003570 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003570:	b480      	push	{r7}
 8003572:	b087      	sub	sp, #28
 8003574:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003576:	4b1e      	ldr	r3, [pc, #120]	@ (80035f0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003578:	68db      	ldr	r3, [r3, #12]
 800357a:	f003 0303 	and.w	r3, r3, #3
 800357e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003580:	4b1b      	ldr	r3, [pc, #108]	@ (80035f0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003582:	68db      	ldr	r3, [r3, #12]
 8003584:	091b      	lsrs	r3, r3, #4
 8003586:	f003 030f 	and.w	r3, r3, #15
 800358a:	3301      	adds	r3, #1
 800358c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800358e:	693b      	ldr	r3, [r7, #16]
 8003590:	2b03      	cmp	r3, #3
 8003592:	d10c      	bne.n	80035ae <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003594:	4a17      	ldr	r2, [pc, #92]	@ (80035f4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	fbb2 f3f3 	udiv	r3, r2, r3
 800359c:	4a14      	ldr	r2, [pc, #80]	@ (80035f0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800359e:	68d2      	ldr	r2, [r2, #12]
 80035a0:	0a12      	lsrs	r2, r2, #8
 80035a2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80035a6:	fb02 f303 	mul.w	r3, r2, r3
 80035aa:	617b      	str	r3, [r7, #20]
    break;
 80035ac:	e00c      	b.n	80035c8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80035ae:	4a12      	ldr	r2, [pc, #72]	@ (80035f8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80035b6:	4a0e      	ldr	r2, [pc, #56]	@ (80035f0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80035b8:	68d2      	ldr	r2, [r2, #12]
 80035ba:	0a12      	lsrs	r2, r2, #8
 80035bc:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80035c0:	fb02 f303 	mul.w	r3, r2, r3
 80035c4:	617b      	str	r3, [r7, #20]
    break;
 80035c6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80035c8:	4b09      	ldr	r3, [pc, #36]	@ (80035f0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80035ca:	68db      	ldr	r3, [r3, #12]
 80035cc:	0e5b      	lsrs	r3, r3, #25
 80035ce:	f003 0303 	and.w	r3, r3, #3
 80035d2:	3301      	adds	r3, #1
 80035d4:	005b      	lsls	r3, r3, #1
 80035d6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80035d8:	697a      	ldr	r2, [r7, #20]
 80035da:	68bb      	ldr	r3, [r7, #8]
 80035dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80035e0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80035e2:	687b      	ldr	r3, [r7, #4]
}
 80035e4:	4618      	mov	r0, r3
 80035e6:	371c      	adds	r7, #28
 80035e8:	46bd      	mov	sp, r7
 80035ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ee:	4770      	bx	lr
 80035f0:	40021000 	.word	0x40021000
 80035f4:	007a1200 	.word	0x007a1200
 80035f8:	00f42400 	.word	0x00f42400

080035fc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b086      	sub	sp, #24
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003604:	2300      	movs	r3, #0
 8003606:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003608:	2300      	movs	r3, #0
 800360a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003614:	2b00      	cmp	r3, #0
 8003616:	f000 8098 	beq.w	800374a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800361a:	2300      	movs	r3, #0
 800361c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800361e:	4b43      	ldr	r3, [pc, #268]	@ (800372c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003620:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003622:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003626:	2b00      	cmp	r3, #0
 8003628:	d10d      	bne.n	8003646 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800362a:	4b40      	ldr	r3, [pc, #256]	@ (800372c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800362c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800362e:	4a3f      	ldr	r2, [pc, #252]	@ (800372c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003630:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003634:	6593      	str	r3, [r2, #88]	@ 0x58
 8003636:	4b3d      	ldr	r3, [pc, #244]	@ (800372c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003638:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800363a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800363e:	60bb      	str	r3, [r7, #8]
 8003640:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003642:	2301      	movs	r3, #1
 8003644:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003646:	4b3a      	ldr	r3, [pc, #232]	@ (8003730 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a39      	ldr	r2, [pc, #228]	@ (8003730 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800364c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003650:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003652:	f7fd ff21 	bl	8001498 <HAL_GetTick>
 8003656:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003658:	e009      	b.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800365a:	f7fd ff1d 	bl	8001498 <HAL_GetTick>
 800365e:	4602      	mov	r2, r0
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	1ad3      	subs	r3, r2, r3
 8003664:	2b02      	cmp	r3, #2
 8003666:	d902      	bls.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003668:	2303      	movs	r3, #3
 800366a:	74fb      	strb	r3, [r7, #19]
        break;
 800366c:	e005      	b.n	800367a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800366e:	4b30      	ldr	r3, [pc, #192]	@ (8003730 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003676:	2b00      	cmp	r3, #0
 8003678:	d0ef      	beq.n	800365a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800367a:	7cfb      	ldrb	r3, [r7, #19]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d159      	bne.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003680:	4b2a      	ldr	r3, [pc, #168]	@ (800372c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003682:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003686:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800368a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800368c:	697b      	ldr	r3, [r7, #20]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d01e      	beq.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003696:	697a      	ldr	r2, [r7, #20]
 8003698:	429a      	cmp	r2, r3
 800369a:	d019      	beq.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800369c:	4b23      	ldr	r3, [pc, #140]	@ (800372c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800369e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036a2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80036a6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80036a8:	4b20      	ldr	r3, [pc, #128]	@ (800372c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80036aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036ae:	4a1f      	ldr	r2, [pc, #124]	@ (800372c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80036b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80036b4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80036b8:	4b1c      	ldr	r3, [pc, #112]	@ (800372c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80036ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036be:	4a1b      	ldr	r2, [pc, #108]	@ (800372c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80036c0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80036c4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80036c8:	4a18      	ldr	r2, [pc, #96]	@ (800372c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80036ca:	697b      	ldr	r3, [r7, #20]
 80036cc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80036d0:	697b      	ldr	r3, [r7, #20]
 80036d2:	f003 0301 	and.w	r3, r3, #1
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d016      	beq.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036da:	f7fd fedd 	bl	8001498 <HAL_GetTick>
 80036de:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036e0:	e00b      	b.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036e2:	f7fd fed9 	bl	8001498 <HAL_GetTick>
 80036e6:	4602      	mov	r2, r0
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	1ad3      	subs	r3, r2, r3
 80036ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d902      	bls.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80036f4:	2303      	movs	r3, #3
 80036f6:	74fb      	strb	r3, [r7, #19]
            break;
 80036f8:	e006      	b.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036fa:	4b0c      	ldr	r3, [pc, #48]	@ (800372c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80036fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003700:	f003 0302 	and.w	r3, r3, #2
 8003704:	2b00      	cmp	r3, #0
 8003706:	d0ec      	beq.n	80036e2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003708:	7cfb      	ldrb	r3, [r7, #19]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d10b      	bne.n	8003726 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800370e:	4b07      	ldr	r3, [pc, #28]	@ (800372c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003710:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003714:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800371c:	4903      	ldr	r1, [pc, #12]	@ (800372c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800371e:	4313      	orrs	r3, r2
 8003720:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003724:	e008      	b.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003726:	7cfb      	ldrb	r3, [r7, #19]
 8003728:	74bb      	strb	r3, [r7, #18]
 800372a:	e005      	b.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800372c:	40021000 	.word	0x40021000
 8003730:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003734:	7cfb      	ldrb	r3, [r7, #19]
 8003736:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003738:	7c7b      	ldrb	r3, [r7, #17]
 800373a:	2b01      	cmp	r3, #1
 800373c:	d105      	bne.n	800374a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800373e:	4ba6      	ldr	r3, [pc, #664]	@ (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003740:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003742:	4aa5      	ldr	r2, [pc, #660]	@ (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003744:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003748:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f003 0301 	and.w	r3, r3, #1
 8003752:	2b00      	cmp	r3, #0
 8003754:	d00a      	beq.n	800376c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003756:	4ba0      	ldr	r3, [pc, #640]	@ (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003758:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800375c:	f023 0203 	bic.w	r2, r3, #3
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	499c      	ldr	r1, [pc, #624]	@ (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003766:	4313      	orrs	r3, r2
 8003768:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f003 0302 	and.w	r3, r3, #2
 8003774:	2b00      	cmp	r3, #0
 8003776:	d00a      	beq.n	800378e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003778:	4b97      	ldr	r3, [pc, #604]	@ (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800377a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800377e:	f023 020c 	bic.w	r2, r3, #12
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	689b      	ldr	r3, [r3, #8]
 8003786:	4994      	ldr	r1, [pc, #592]	@ (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003788:	4313      	orrs	r3, r2
 800378a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f003 0304 	and.w	r3, r3, #4
 8003796:	2b00      	cmp	r3, #0
 8003798:	d00a      	beq.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800379a:	4b8f      	ldr	r3, [pc, #572]	@ (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800379c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037a0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	68db      	ldr	r3, [r3, #12]
 80037a8:	498b      	ldr	r1, [pc, #556]	@ (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80037aa:	4313      	orrs	r3, r2
 80037ac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f003 0308 	and.w	r3, r3, #8
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d00a      	beq.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80037bc:	4b86      	ldr	r3, [pc, #536]	@ (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80037be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037c2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	691b      	ldr	r3, [r3, #16]
 80037ca:	4983      	ldr	r1, [pc, #524]	@ (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80037cc:	4313      	orrs	r3, r2
 80037ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f003 0320 	and.w	r3, r3, #32
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d00a      	beq.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80037de:	4b7e      	ldr	r3, [pc, #504]	@ (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80037e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037e4:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	695b      	ldr	r3, [r3, #20]
 80037ec:	497a      	ldr	r1, [pc, #488]	@ (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80037ee:	4313      	orrs	r3, r2
 80037f0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d00a      	beq.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003800:	4b75      	ldr	r3, [pc, #468]	@ (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003802:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003806:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	699b      	ldr	r3, [r3, #24]
 800380e:	4972      	ldr	r1, [pc, #456]	@ (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003810:	4313      	orrs	r3, r2
 8003812:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800381e:	2b00      	cmp	r3, #0
 8003820:	d00a      	beq.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003822:	4b6d      	ldr	r3, [pc, #436]	@ (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003824:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003828:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	69db      	ldr	r3, [r3, #28]
 8003830:	4969      	ldr	r1, [pc, #420]	@ (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003832:	4313      	orrs	r3, r2
 8003834:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003840:	2b00      	cmp	r3, #0
 8003842:	d00a      	beq.n	800385a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003844:	4b64      	ldr	r3, [pc, #400]	@ (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003846:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800384a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6a1b      	ldr	r3, [r3, #32]
 8003852:	4961      	ldr	r1, [pc, #388]	@ (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003854:	4313      	orrs	r3, r2
 8003856:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003862:	2b00      	cmp	r3, #0
 8003864:	d00a      	beq.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003866:	4b5c      	ldr	r3, [pc, #368]	@ (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003868:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800386c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003874:	4958      	ldr	r1, [pc, #352]	@ (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003876:	4313      	orrs	r3, r2
 8003878:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003884:	2b00      	cmp	r3, #0
 8003886:	d015      	beq.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003888:	4b53      	ldr	r3, [pc, #332]	@ (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800388a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800388e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003896:	4950      	ldr	r1, [pc, #320]	@ (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003898:	4313      	orrs	r3, r2
 800389a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038a2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80038a6:	d105      	bne.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80038a8:	4b4b      	ldr	r3, [pc, #300]	@ (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80038aa:	68db      	ldr	r3, [r3, #12]
 80038ac:	4a4a      	ldr	r2, [pc, #296]	@ (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80038ae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80038b2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d015      	beq.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80038c0:	4b45      	ldr	r3, [pc, #276]	@ (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80038c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038c6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038ce:	4942      	ldr	r1, [pc, #264]	@ (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80038d0:	4313      	orrs	r3, r2
 80038d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038da:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80038de:	d105      	bne.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80038e0:	4b3d      	ldr	r3, [pc, #244]	@ (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80038e2:	68db      	ldr	r3, [r3, #12]
 80038e4:	4a3c      	ldr	r2, [pc, #240]	@ (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80038e6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80038ea:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d015      	beq.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80038f8:	4b37      	ldr	r3, [pc, #220]	@ (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80038fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038fe:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003906:	4934      	ldr	r1, [pc, #208]	@ (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003908:	4313      	orrs	r3, r2
 800390a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003912:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003916:	d105      	bne.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003918:	4b2f      	ldr	r3, [pc, #188]	@ (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800391a:	68db      	ldr	r3, [r3, #12]
 800391c:	4a2e      	ldr	r2, [pc, #184]	@ (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800391e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003922:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800392c:	2b00      	cmp	r3, #0
 800392e:	d015      	beq.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003930:	4b29      	ldr	r3, [pc, #164]	@ (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003932:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003936:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800393e:	4926      	ldr	r1, [pc, #152]	@ (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003940:	4313      	orrs	r3, r2
 8003942:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800394a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800394e:	d105      	bne.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003950:	4b21      	ldr	r3, [pc, #132]	@ (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003952:	68db      	ldr	r3, [r3, #12]
 8003954:	4a20      	ldr	r2, [pc, #128]	@ (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003956:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800395a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003964:	2b00      	cmp	r3, #0
 8003966:	d015      	beq.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003968:	4b1b      	ldr	r3, [pc, #108]	@ (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800396a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800396e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003976:	4918      	ldr	r1, [pc, #96]	@ (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003978:	4313      	orrs	r3, r2
 800397a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003982:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003986:	d105      	bne.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003988:	4b13      	ldr	r3, [pc, #76]	@ (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800398a:	68db      	ldr	r3, [r3, #12]
 800398c:	4a12      	ldr	r2, [pc, #72]	@ (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800398e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003992:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800399c:	2b00      	cmp	r3, #0
 800399e:	d015      	beq.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80039a0:	4b0d      	ldr	r3, [pc, #52]	@ (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80039a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039a6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039ae:	490a      	ldr	r1, [pc, #40]	@ (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80039b0:	4313      	orrs	r3, r2
 80039b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039ba:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80039be:	d105      	bne.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80039c0:	4b05      	ldr	r3, [pc, #20]	@ (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80039c2:	68db      	ldr	r3, [r3, #12]
 80039c4:	4a04      	ldr	r2, [pc, #16]	@ (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80039c6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80039ca:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80039cc:	7cbb      	ldrb	r3, [r7, #18]
}
 80039ce:	4618      	mov	r0, r3
 80039d0:	3718      	adds	r7, #24
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd80      	pop	{r7, pc}
 80039d6:	bf00      	nop
 80039d8:	40021000 	.word	0x40021000

080039dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b082      	sub	sp, #8
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d101      	bne.n	80039ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80039ea:	2301      	movs	r3, #1
 80039ec:	e049      	b.n	8003a82 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80039f4:	b2db      	uxtb	r3, r3
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d106      	bne.n	8003a08 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2200      	movs	r2, #0
 80039fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003a02:	6878      	ldr	r0, [r7, #4]
 8003a04:	f7fd fba2 	bl	800114c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2202      	movs	r2, #2
 8003a0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681a      	ldr	r2, [r3, #0]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	3304      	adds	r3, #4
 8003a18:	4619      	mov	r1, r3
 8003a1a:	4610      	mov	r0, r2
 8003a1c:	f000 fb4a 	bl	80040b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2201      	movs	r2, #1
 8003a24:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2201      	movs	r2, #1
 8003a34:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2201      	movs	r2, #1
 8003a3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2201      	movs	r2, #1
 8003a44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2201      	movs	r2, #1
 8003a54:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2201      	movs	r2, #1
 8003a5c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2201      	movs	r2, #1
 8003a64:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2201      	movs	r2, #1
 8003a74:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2201      	movs	r2, #1
 8003a7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003a80:	2300      	movs	r3, #0
}
 8003a82:	4618      	mov	r0, r3
 8003a84:	3708      	adds	r7, #8
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bd80      	pop	{r7, pc}

08003a8a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003a8a:	b580      	push	{r7, lr}
 8003a8c:	b082      	sub	sp, #8
 8003a8e:	af00      	add	r7, sp, #0
 8003a90:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d101      	bne.n	8003a9c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	e049      	b.n	8003b30 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003aa2:	b2db      	uxtb	r3, r3
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d106      	bne.n	8003ab6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2200      	movs	r2, #0
 8003aac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003ab0:	6878      	ldr	r0, [r7, #4]
 8003ab2:	f000 f841 	bl	8003b38 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2202      	movs	r2, #2
 8003aba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681a      	ldr	r2, [r3, #0]
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	3304      	adds	r3, #4
 8003ac6:	4619      	mov	r1, r3
 8003ac8:	4610      	mov	r0, r2
 8003aca:	f000 faf3 	bl	80040b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2201      	movs	r2, #1
 8003ad2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2201      	movs	r2, #1
 8003ada:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2201      	movs	r2, #1
 8003ae2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2201      	movs	r2, #1
 8003aea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2201      	movs	r2, #1
 8003af2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2201      	movs	r2, #1
 8003afa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2201      	movs	r2, #1
 8003b02:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2201      	movs	r2, #1
 8003b0a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2201      	movs	r2, #1
 8003b12:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2201      	movs	r2, #1
 8003b1a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2201      	movs	r2, #1
 8003b22:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2201      	movs	r2, #1
 8003b2a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003b2e:	2300      	movs	r3, #0
}
 8003b30:	4618      	mov	r0, r3
 8003b32:	3708      	adds	r7, #8
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bd80      	pop	{r7, pc}

08003b38 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	b083      	sub	sp, #12
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003b40:	bf00      	nop
 8003b42:	370c      	adds	r7, #12
 8003b44:	46bd      	mov	sp, r7
 8003b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4a:	4770      	bx	lr

08003b4c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b086      	sub	sp, #24
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
 8003b54:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d101      	bne.n	8003b60 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	e097      	b.n	8003c90 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b66:	b2db      	uxtb	r3, r3
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d106      	bne.n	8003b7a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2200      	movs	r2, #0
 8003b70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003b74:	6878      	ldr	r0, [r7, #4]
 8003b76:	f7fd fa57 	bl	8001028 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2202      	movs	r2, #2
 8003b7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	689b      	ldr	r3, [r3, #8]
 8003b88:	687a      	ldr	r2, [r7, #4]
 8003b8a:	6812      	ldr	r2, [r2, #0]
 8003b8c:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8003b90:	f023 0307 	bic.w	r3, r3, #7
 8003b94:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681a      	ldr	r2, [r3, #0]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	3304      	adds	r3, #4
 8003b9e:	4619      	mov	r1, r3
 8003ba0:	4610      	mov	r0, r2
 8003ba2:	f000 fa87 	bl	80040b4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	689b      	ldr	r3, [r3, #8]
 8003bac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	699b      	ldr	r3, [r3, #24]
 8003bb4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	6a1b      	ldr	r3, [r3, #32]
 8003bbc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	697a      	ldr	r2, [r7, #20]
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003bc8:	693b      	ldr	r3, [r7, #16]
 8003bca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003bce:	f023 0303 	bic.w	r3, r3, #3
 8003bd2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	689a      	ldr	r2, [r3, #8]
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	699b      	ldr	r3, [r3, #24]
 8003bdc:	021b      	lsls	r3, r3, #8
 8003bde:	4313      	orrs	r3, r2
 8003be0:	693a      	ldr	r2, [r7, #16]
 8003be2:	4313      	orrs	r3, r2
 8003be4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003be6:	693b      	ldr	r3, [r7, #16]
 8003be8:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8003bec:	f023 030c 	bic.w	r3, r3, #12
 8003bf0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003bf2:	693b      	ldr	r3, [r7, #16]
 8003bf4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003bf8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003bfc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	68da      	ldr	r2, [r3, #12]
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	69db      	ldr	r3, [r3, #28]
 8003c06:	021b      	lsls	r3, r3, #8
 8003c08:	4313      	orrs	r3, r2
 8003c0a:	693a      	ldr	r2, [r7, #16]
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	691b      	ldr	r3, [r3, #16]
 8003c14:	011a      	lsls	r2, r3, #4
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	6a1b      	ldr	r3, [r3, #32]
 8003c1a:	031b      	lsls	r3, r3, #12
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	693a      	ldr	r2, [r7, #16]
 8003c20:	4313      	orrs	r3, r2
 8003c22:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8003c2a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8003c32:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	685a      	ldr	r2, [r3, #4]
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	695b      	ldr	r3, [r3, #20]
 8003c3c:	011b      	lsls	r3, r3, #4
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	68fa      	ldr	r2, [r7, #12]
 8003c42:	4313      	orrs	r3, r2
 8003c44:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	697a      	ldr	r2, [r7, #20]
 8003c4c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	693a      	ldr	r2, [r7, #16]
 8003c54:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	68fa      	ldr	r2, [r7, #12]
 8003c5c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2201      	movs	r2, #1
 8003c62:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2201      	movs	r2, #1
 8003c6a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2201      	movs	r2, #1
 8003c72:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2201      	movs	r2, #1
 8003c7a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2201      	movs	r2, #1
 8003c82:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2201      	movs	r2, #1
 8003c8a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003c8e:	2300      	movs	r3, #0
}
 8003c90:	4618      	mov	r0, r3
 8003c92:	3718      	adds	r7, #24
 8003c94:	46bd      	mov	sp, r7
 8003c96:	bd80      	pop	{r7, pc}

08003c98 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b086      	sub	sp, #24
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	60f8      	str	r0, [r7, #12]
 8003ca0:	60b9      	str	r1, [r7, #8]
 8003ca2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003cae:	2b01      	cmp	r3, #1
 8003cb0:	d101      	bne.n	8003cb6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003cb2:	2302      	movs	r3, #2
 8003cb4:	e0ff      	b.n	8003eb6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	2201      	movs	r2, #1
 8003cba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2b14      	cmp	r3, #20
 8003cc2:	f200 80f0 	bhi.w	8003ea6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003cc6:	a201      	add	r2, pc, #4	@ (adr r2, 8003ccc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003cc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ccc:	08003d21 	.word	0x08003d21
 8003cd0:	08003ea7 	.word	0x08003ea7
 8003cd4:	08003ea7 	.word	0x08003ea7
 8003cd8:	08003ea7 	.word	0x08003ea7
 8003cdc:	08003d61 	.word	0x08003d61
 8003ce0:	08003ea7 	.word	0x08003ea7
 8003ce4:	08003ea7 	.word	0x08003ea7
 8003ce8:	08003ea7 	.word	0x08003ea7
 8003cec:	08003da3 	.word	0x08003da3
 8003cf0:	08003ea7 	.word	0x08003ea7
 8003cf4:	08003ea7 	.word	0x08003ea7
 8003cf8:	08003ea7 	.word	0x08003ea7
 8003cfc:	08003de3 	.word	0x08003de3
 8003d00:	08003ea7 	.word	0x08003ea7
 8003d04:	08003ea7 	.word	0x08003ea7
 8003d08:	08003ea7 	.word	0x08003ea7
 8003d0c:	08003e25 	.word	0x08003e25
 8003d10:	08003ea7 	.word	0x08003ea7
 8003d14:	08003ea7 	.word	0x08003ea7
 8003d18:	08003ea7 	.word	0x08003ea7
 8003d1c:	08003e65 	.word	0x08003e65
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	68b9      	ldr	r1, [r7, #8]
 8003d26:	4618      	mov	r0, r3
 8003d28:	f000 fa60 	bl	80041ec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	699a      	ldr	r2, [r3, #24]
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f042 0208 	orr.w	r2, r2, #8
 8003d3a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	699a      	ldr	r2, [r3, #24]
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f022 0204 	bic.w	r2, r2, #4
 8003d4a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	6999      	ldr	r1, [r3, #24]
 8003d52:	68bb      	ldr	r3, [r7, #8]
 8003d54:	691a      	ldr	r2, [r3, #16]
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	430a      	orrs	r2, r1
 8003d5c:	619a      	str	r2, [r3, #24]
      break;
 8003d5e:	e0a5      	b.n	8003eac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	68b9      	ldr	r1, [r7, #8]
 8003d66:	4618      	mov	r0, r3
 8003d68:	f000 fad0 	bl	800430c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	699a      	ldr	r2, [r3, #24]
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003d7a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	699a      	ldr	r2, [r3, #24]
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d8a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	6999      	ldr	r1, [r3, #24]
 8003d92:	68bb      	ldr	r3, [r7, #8]
 8003d94:	691b      	ldr	r3, [r3, #16]
 8003d96:	021a      	lsls	r2, r3, #8
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	430a      	orrs	r2, r1
 8003d9e:	619a      	str	r2, [r3, #24]
      break;
 8003da0:	e084      	b.n	8003eac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	68b9      	ldr	r1, [r7, #8]
 8003da8:	4618      	mov	r0, r3
 8003daa:	f000 fb39 	bl	8004420 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	69da      	ldr	r2, [r3, #28]
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f042 0208 	orr.w	r2, r2, #8
 8003dbc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	69da      	ldr	r2, [r3, #28]
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f022 0204 	bic.w	r2, r2, #4
 8003dcc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	69d9      	ldr	r1, [r3, #28]
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	691a      	ldr	r2, [r3, #16]
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	430a      	orrs	r2, r1
 8003dde:	61da      	str	r2, [r3, #28]
      break;
 8003de0:	e064      	b.n	8003eac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	68b9      	ldr	r1, [r7, #8]
 8003de8:	4618      	mov	r0, r3
 8003dea:	f000 fba1 	bl	8004530 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	69da      	ldr	r2, [r3, #28]
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003dfc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	69da      	ldr	r2, [r3, #28]
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e0c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	69d9      	ldr	r1, [r3, #28]
 8003e14:	68bb      	ldr	r3, [r7, #8]
 8003e16:	691b      	ldr	r3, [r3, #16]
 8003e18:	021a      	lsls	r2, r3, #8
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	430a      	orrs	r2, r1
 8003e20:	61da      	str	r2, [r3, #28]
      break;
 8003e22:	e043      	b.n	8003eac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	68b9      	ldr	r1, [r7, #8]
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	f000 fc0a 	bl	8004644 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f042 0208 	orr.w	r2, r2, #8
 8003e3e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f022 0204 	bic.w	r2, r2, #4
 8003e4e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8003e56:	68bb      	ldr	r3, [r7, #8]
 8003e58:	691a      	ldr	r2, [r3, #16]
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	430a      	orrs	r2, r1
 8003e60:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8003e62:	e023      	b.n	8003eac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	68b9      	ldr	r1, [r7, #8]
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	f000 fc4e 	bl	800470c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003e7e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e8e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8003e96:	68bb      	ldr	r3, [r7, #8]
 8003e98:	691b      	ldr	r3, [r3, #16]
 8003e9a:	021a      	lsls	r2, r3, #8
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	430a      	orrs	r2, r1
 8003ea2:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8003ea4:	e002      	b.n	8003eac <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	75fb      	strb	r3, [r7, #23]
      break;
 8003eaa:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003eb4:	7dfb      	ldrb	r3, [r7, #23]
}
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	3718      	adds	r7, #24
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bd80      	pop	{r7, pc}
 8003ebe:	bf00      	nop

08003ec0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b084      	sub	sp, #16
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
 8003ec8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003eca:	2300      	movs	r3, #0
 8003ecc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003ed4:	2b01      	cmp	r3, #1
 8003ed6:	d101      	bne.n	8003edc <HAL_TIM_ConfigClockSource+0x1c>
 8003ed8:	2302      	movs	r3, #2
 8003eda:	e0de      	b.n	800409a <HAL_TIM_ConfigClockSource+0x1da>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2201      	movs	r2, #1
 8003ee0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2202      	movs	r2, #2
 8003ee8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	689b      	ldr	r3, [r3, #8]
 8003ef2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003ef4:	68bb      	ldr	r3, [r7, #8]
 8003ef6:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8003efa:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003efe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f00:	68bb      	ldr	r3, [r7, #8]
 8003f02:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003f06:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	68ba      	ldr	r2, [r7, #8]
 8003f0e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4a63      	ldr	r2, [pc, #396]	@ (80040a4 <HAL_TIM_ConfigClockSource+0x1e4>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	f000 80a9 	beq.w	800406e <HAL_TIM_ConfigClockSource+0x1ae>
 8003f1c:	4a61      	ldr	r2, [pc, #388]	@ (80040a4 <HAL_TIM_ConfigClockSource+0x1e4>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	f200 80ae 	bhi.w	8004080 <HAL_TIM_ConfigClockSource+0x1c0>
 8003f24:	4a60      	ldr	r2, [pc, #384]	@ (80040a8 <HAL_TIM_ConfigClockSource+0x1e8>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	f000 80a1 	beq.w	800406e <HAL_TIM_ConfigClockSource+0x1ae>
 8003f2c:	4a5e      	ldr	r2, [pc, #376]	@ (80040a8 <HAL_TIM_ConfigClockSource+0x1e8>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	f200 80a6 	bhi.w	8004080 <HAL_TIM_ConfigClockSource+0x1c0>
 8003f34:	4a5d      	ldr	r2, [pc, #372]	@ (80040ac <HAL_TIM_ConfigClockSource+0x1ec>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	f000 8099 	beq.w	800406e <HAL_TIM_ConfigClockSource+0x1ae>
 8003f3c:	4a5b      	ldr	r2, [pc, #364]	@ (80040ac <HAL_TIM_ConfigClockSource+0x1ec>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	f200 809e 	bhi.w	8004080 <HAL_TIM_ConfigClockSource+0x1c0>
 8003f44:	4a5a      	ldr	r2, [pc, #360]	@ (80040b0 <HAL_TIM_ConfigClockSource+0x1f0>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	f000 8091 	beq.w	800406e <HAL_TIM_ConfigClockSource+0x1ae>
 8003f4c:	4a58      	ldr	r2, [pc, #352]	@ (80040b0 <HAL_TIM_ConfigClockSource+0x1f0>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	f200 8096 	bhi.w	8004080 <HAL_TIM_ConfigClockSource+0x1c0>
 8003f54:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8003f58:	f000 8089 	beq.w	800406e <HAL_TIM_ConfigClockSource+0x1ae>
 8003f5c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8003f60:	f200 808e 	bhi.w	8004080 <HAL_TIM_ConfigClockSource+0x1c0>
 8003f64:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003f68:	d03e      	beq.n	8003fe8 <HAL_TIM_ConfigClockSource+0x128>
 8003f6a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003f6e:	f200 8087 	bhi.w	8004080 <HAL_TIM_ConfigClockSource+0x1c0>
 8003f72:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f76:	f000 8086 	beq.w	8004086 <HAL_TIM_ConfigClockSource+0x1c6>
 8003f7a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f7e:	d87f      	bhi.n	8004080 <HAL_TIM_ConfigClockSource+0x1c0>
 8003f80:	2b70      	cmp	r3, #112	@ 0x70
 8003f82:	d01a      	beq.n	8003fba <HAL_TIM_ConfigClockSource+0xfa>
 8003f84:	2b70      	cmp	r3, #112	@ 0x70
 8003f86:	d87b      	bhi.n	8004080 <HAL_TIM_ConfigClockSource+0x1c0>
 8003f88:	2b60      	cmp	r3, #96	@ 0x60
 8003f8a:	d050      	beq.n	800402e <HAL_TIM_ConfigClockSource+0x16e>
 8003f8c:	2b60      	cmp	r3, #96	@ 0x60
 8003f8e:	d877      	bhi.n	8004080 <HAL_TIM_ConfigClockSource+0x1c0>
 8003f90:	2b50      	cmp	r3, #80	@ 0x50
 8003f92:	d03c      	beq.n	800400e <HAL_TIM_ConfigClockSource+0x14e>
 8003f94:	2b50      	cmp	r3, #80	@ 0x50
 8003f96:	d873      	bhi.n	8004080 <HAL_TIM_ConfigClockSource+0x1c0>
 8003f98:	2b40      	cmp	r3, #64	@ 0x40
 8003f9a:	d058      	beq.n	800404e <HAL_TIM_ConfigClockSource+0x18e>
 8003f9c:	2b40      	cmp	r3, #64	@ 0x40
 8003f9e:	d86f      	bhi.n	8004080 <HAL_TIM_ConfigClockSource+0x1c0>
 8003fa0:	2b30      	cmp	r3, #48	@ 0x30
 8003fa2:	d064      	beq.n	800406e <HAL_TIM_ConfigClockSource+0x1ae>
 8003fa4:	2b30      	cmp	r3, #48	@ 0x30
 8003fa6:	d86b      	bhi.n	8004080 <HAL_TIM_ConfigClockSource+0x1c0>
 8003fa8:	2b20      	cmp	r3, #32
 8003faa:	d060      	beq.n	800406e <HAL_TIM_ConfigClockSource+0x1ae>
 8003fac:	2b20      	cmp	r3, #32
 8003fae:	d867      	bhi.n	8004080 <HAL_TIM_ConfigClockSource+0x1c0>
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d05c      	beq.n	800406e <HAL_TIM_ConfigClockSource+0x1ae>
 8003fb4:	2b10      	cmp	r3, #16
 8003fb6:	d05a      	beq.n	800406e <HAL_TIM_ConfigClockSource+0x1ae>
 8003fb8:	e062      	b.n	8004080 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003fca:	f000 fce9 	bl	80049a0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	689b      	ldr	r3, [r3, #8]
 8003fd4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003fd6:	68bb      	ldr	r3, [r7, #8]
 8003fd8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003fdc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	68ba      	ldr	r2, [r7, #8]
 8003fe4:	609a      	str	r2, [r3, #8]
      break;
 8003fe6:	e04f      	b.n	8004088 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003ff8:	f000 fcd2 	bl	80049a0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	689a      	ldr	r2, [r3, #8]
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800400a:	609a      	str	r2, [r3, #8]
      break;
 800400c:	e03c      	b.n	8004088 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800401a:	461a      	mov	r2, r3
 800401c:	f000 fc44 	bl	80048a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	2150      	movs	r1, #80	@ 0x50
 8004026:	4618      	mov	r0, r3
 8004028:	f000 fc9d 	bl	8004966 <TIM_ITRx_SetConfig>
      break;
 800402c:	e02c      	b.n	8004088 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800403a:	461a      	mov	r2, r3
 800403c:	f000 fc63 	bl	8004906 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	2160      	movs	r1, #96	@ 0x60
 8004046:	4618      	mov	r0, r3
 8004048:	f000 fc8d 	bl	8004966 <TIM_ITRx_SetConfig>
      break;
 800404c:	e01c      	b.n	8004088 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800405a:	461a      	mov	r2, r3
 800405c:	f000 fc24 	bl	80048a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	2140      	movs	r1, #64	@ 0x40
 8004066:	4618      	mov	r0, r3
 8004068:	f000 fc7d 	bl	8004966 <TIM_ITRx_SetConfig>
      break;
 800406c:	e00c      	b.n	8004088 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681a      	ldr	r2, [r3, #0]
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4619      	mov	r1, r3
 8004078:	4610      	mov	r0, r2
 800407a:	f000 fc74 	bl	8004966 <TIM_ITRx_SetConfig>
      break;
 800407e:	e003      	b.n	8004088 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8004080:	2301      	movs	r3, #1
 8004082:	73fb      	strb	r3, [r7, #15]
      break;
 8004084:	e000      	b.n	8004088 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8004086:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2201      	movs	r2, #1
 800408c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2200      	movs	r2, #0
 8004094:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004098:	7bfb      	ldrb	r3, [r7, #15]
}
 800409a:	4618      	mov	r0, r3
 800409c:	3710      	adds	r7, #16
 800409e:	46bd      	mov	sp, r7
 80040a0:	bd80      	pop	{r7, pc}
 80040a2:	bf00      	nop
 80040a4:	00100070 	.word	0x00100070
 80040a8:	00100040 	.word	0x00100040
 80040ac:	00100030 	.word	0x00100030
 80040b0:	00100020 	.word	0x00100020

080040b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b085      	sub	sp, #20
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
 80040bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	4a42      	ldr	r2, [pc, #264]	@ (80041d0 <TIM_Base_SetConfig+0x11c>)
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d00f      	beq.n	80040ec <TIM_Base_SetConfig+0x38>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80040d2:	d00b      	beq.n	80040ec <TIM_Base_SetConfig+0x38>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	4a3f      	ldr	r2, [pc, #252]	@ (80041d4 <TIM_Base_SetConfig+0x120>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d007      	beq.n	80040ec <TIM_Base_SetConfig+0x38>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	4a3e      	ldr	r2, [pc, #248]	@ (80041d8 <TIM_Base_SetConfig+0x124>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d003      	beq.n	80040ec <TIM_Base_SetConfig+0x38>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	4a3d      	ldr	r2, [pc, #244]	@ (80041dc <TIM_Base_SetConfig+0x128>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d108      	bne.n	80040fe <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80040f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	68fa      	ldr	r2, [r7, #12]
 80040fa:	4313      	orrs	r3, r2
 80040fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	4a33      	ldr	r2, [pc, #204]	@ (80041d0 <TIM_Base_SetConfig+0x11c>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d01b      	beq.n	800413e <TIM_Base_SetConfig+0x8a>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800410c:	d017      	beq.n	800413e <TIM_Base_SetConfig+0x8a>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	4a30      	ldr	r2, [pc, #192]	@ (80041d4 <TIM_Base_SetConfig+0x120>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d013      	beq.n	800413e <TIM_Base_SetConfig+0x8a>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	4a2f      	ldr	r2, [pc, #188]	@ (80041d8 <TIM_Base_SetConfig+0x124>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d00f      	beq.n	800413e <TIM_Base_SetConfig+0x8a>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	4a2e      	ldr	r2, [pc, #184]	@ (80041dc <TIM_Base_SetConfig+0x128>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d00b      	beq.n	800413e <TIM_Base_SetConfig+0x8a>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	4a2d      	ldr	r2, [pc, #180]	@ (80041e0 <TIM_Base_SetConfig+0x12c>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d007      	beq.n	800413e <TIM_Base_SetConfig+0x8a>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	4a2c      	ldr	r2, [pc, #176]	@ (80041e4 <TIM_Base_SetConfig+0x130>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d003      	beq.n	800413e <TIM_Base_SetConfig+0x8a>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	4a2b      	ldr	r2, [pc, #172]	@ (80041e8 <TIM_Base_SetConfig+0x134>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d108      	bne.n	8004150 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004144:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	68db      	ldr	r3, [r3, #12]
 800414a:	68fa      	ldr	r2, [r7, #12]
 800414c:	4313      	orrs	r3, r2
 800414e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	695b      	ldr	r3, [r3, #20]
 800415a:	4313      	orrs	r3, r2
 800415c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	68fa      	ldr	r2, [r7, #12]
 8004162:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	689a      	ldr	r2, [r3, #8]
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	681a      	ldr	r2, [r3, #0]
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	4a16      	ldr	r2, [pc, #88]	@ (80041d0 <TIM_Base_SetConfig+0x11c>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d00f      	beq.n	800419c <TIM_Base_SetConfig+0xe8>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	4a17      	ldr	r2, [pc, #92]	@ (80041dc <TIM_Base_SetConfig+0x128>)
 8004180:	4293      	cmp	r3, r2
 8004182:	d00b      	beq.n	800419c <TIM_Base_SetConfig+0xe8>
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	4a16      	ldr	r2, [pc, #88]	@ (80041e0 <TIM_Base_SetConfig+0x12c>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d007      	beq.n	800419c <TIM_Base_SetConfig+0xe8>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	4a15      	ldr	r2, [pc, #84]	@ (80041e4 <TIM_Base_SetConfig+0x130>)
 8004190:	4293      	cmp	r3, r2
 8004192:	d003      	beq.n	800419c <TIM_Base_SetConfig+0xe8>
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	4a14      	ldr	r2, [pc, #80]	@ (80041e8 <TIM_Base_SetConfig+0x134>)
 8004198:	4293      	cmp	r3, r2
 800419a:	d103      	bne.n	80041a4 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	691a      	ldr	r2, [r3, #16]
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2201      	movs	r2, #1
 80041a8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	691b      	ldr	r3, [r3, #16]
 80041ae:	f003 0301 	and.w	r3, r3, #1
 80041b2:	2b01      	cmp	r3, #1
 80041b4:	d105      	bne.n	80041c2 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	691b      	ldr	r3, [r3, #16]
 80041ba:	f023 0201 	bic.w	r2, r3, #1
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	611a      	str	r2, [r3, #16]
  }
}
 80041c2:	bf00      	nop
 80041c4:	3714      	adds	r7, #20
 80041c6:	46bd      	mov	sp, r7
 80041c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041cc:	4770      	bx	lr
 80041ce:	bf00      	nop
 80041d0:	40012c00 	.word	0x40012c00
 80041d4:	40000400 	.word	0x40000400
 80041d8:	40000800 	.word	0x40000800
 80041dc:	40013400 	.word	0x40013400
 80041e0:	40014000 	.word	0x40014000
 80041e4:	40014400 	.word	0x40014400
 80041e8:	40014800 	.word	0x40014800

080041ec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80041ec:	b480      	push	{r7}
 80041ee:	b087      	sub	sp, #28
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
 80041f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6a1b      	ldr	r3, [r3, #32]
 80041fa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6a1b      	ldr	r3, [r3, #32]
 8004200:	f023 0201 	bic.w	r2, r3, #1
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	699b      	ldr	r3, [r3, #24]
 8004212:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800421a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800421e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	f023 0303 	bic.w	r3, r3, #3
 8004226:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	68fa      	ldr	r2, [r7, #12]
 800422e:	4313      	orrs	r3, r2
 8004230:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004232:	697b      	ldr	r3, [r7, #20]
 8004234:	f023 0302 	bic.w	r3, r3, #2
 8004238:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	689b      	ldr	r3, [r3, #8]
 800423e:	697a      	ldr	r2, [r7, #20]
 8004240:	4313      	orrs	r3, r2
 8004242:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	4a2c      	ldr	r2, [pc, #176]	@ (80042f8 <TIM_OC1_SetConfig+0x10c>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d00f      	beq.n	800426c <TIM_OC1_SetConfig+0x80>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	4a2b      	ldr	r2, [pc, #172]	@ (80042fc <TIM_OC1_SetConfig+0x110>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d00b      	beq.n	800426c <TIM_OC1_SetConfig+0x80>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	4a2a      	ldr	r2, [pc, #168]	@ (8004300 <TIM_OC1_SetConfig+0x114>)
 8004258:	4293      	cmp	r3, r2
 800425a:	d007      	beq.n	800426c <TIM_OC1_SetConfig+0x80>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	4a29      	ldr	r2, [pc, #164]	@ (8004304 <TIM_OC1_SetConfig+0x118>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d003      	beq.n	800426c <TIM_OC1_SetConfig+0x80>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	4a28      	ldr	r2, [pc, #160]	@ (8004308 <TIM_OC1_SetConfig+0x11c>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d10c      	bne.n	8004286 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800426c:	697b      	ldr	r3, [r7, #20]
 800426e:	f023 0308 	bic.w	r3, r3, #8
 8004272:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	68db      	ldr	r3, [r3, #12]
 8004278:	697a      	ldr	r2, [r7, #20]
 800427a:	4313      	orrs	r3, r2
 800427c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800427e:	697b      	ldr	r3, [r7, #20]
 8004280:	f023 0304 	bic.w	r3, r3, #4
 8004284:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	4a1b      	ldr	r2, [pc, #108]	@ (80042f8 <TIM_OC1_SetConfig+0x10c>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d00f      	beq.n	80042ae <TIM_OC1_SetConfig+0xc2>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	4a1a      	ldr	r2, [pc, #104]	@ (80042fc <TIM_OC1_SetConfig+0x110>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d00b      	beq.n	80042ae <TIM_OC1_SetConfig+0xc2>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	4a19      	ldr	r2, [pc, #100]	@ (8004300 <TIM_OC1_SetConfig+0x114>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d007      	beq.n	80042ae <TIM_OC1_SetConfig+0xc2>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	4a18      	ldr	r2, [pc, #96]	@ (8004304 <TIM_OC1_SetConfig+0x118>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d003      	beq.n	80042ae <TIM_OC1_SetConfig+0xc2>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	4a17      	ldr	r2, [pc, #92]	@ (8004308 <TIM_OC1_SetConfig+0x11c>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d111      	bne.n	80042d2 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80042ae:	693b      	ldr	r3, [r7, #16]
 80042b0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80042b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80042b6:	693b      	ldr	r3, [r7, #16]
 80042b8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80042bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	695b      	ldr	r3, [r3, #20]
 80042c2:	693a      	ldr	r2, [r7, #16]
 80042c4:	4313      	orrs	r3, r2
 80042c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	699b      	ldr	r3, [r3, #24]
 80042cc:	693a      	ldr	r2, [r7, #16]
 80042ce:	4313      	orrs	r3, r2
 80042d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	693a      	ldr	r2, [r7, #16]
 80042d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	68fa      	ldr	r2, [r7, #12]
 80042dc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	685a      	ldr	r2, [r3, #4]
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	697a      	ldr	r2, [r7, #20]
 80042ea:	621a      	str	r2, [r3, #32]
}
 80042ec:	bf00      	nop
 80042ee:	371c      	adds	r7, #28
 80042f0:	46bd      	mov	sp, r7
 80042f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f6:	4770      	bx	lr
 80042f8:	40012c00 	.word	0x40012c00
 80042fc:	40013400 	.word	0x40013400
 8004300:	40014000 	.word	0x40014000
 8004304:	40014400 	.word	0x40014400
 8004308:	40014800 	.word	0x40014800

0800430c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800430c:	b480      	push	{r7}
 800430e:	b087      	sub	sp, #28
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
 8004314:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6a1b      	ldr	r3, [r3, #32]
 800431a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6a1b      	ldr	r3, [r3, #32]
 8004320:	f023 0210 	bic.w	r2, r3, #16
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	699b      	ldr	r3, [r3, #24]
 8004332:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800433a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800433e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004346:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	021b      	lsls	r3, r3, #8
 800434e:	68fa      	ldr	r2, [r7, #12]
 8004350:	4313      	orrs	r3, r2
 8004352:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004354:	697b      	ldr	r3, [r7, #20]
 8004356:	f023 0320 	bic.w	r3, r3, #32
 800435a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	689b      	ldr	r3, [r3, #8]
 8004360:	011b      	lsls	r3, r3, #4
 8004362:	697a      	ldr	r2, [r7, #20]
 8004364:	4313      	orrs	r3, r2
 8004366:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	4a28      	ldr	r2, [pc, #160]	@ (800440c <TIM_OC2_SetConfig+0x100>)
 800436c:	4293      	cmp	r3, r2
 800436e:	d003      	beq.n	8004378 <TIM_OC2_SetConfig+0x6c>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	4a27      	ldr	r2, [pc, #156]	@ (8004410 <TIM_OC2_SetConfig+0x104>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d10d      	bne.n	8004394 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004378:	697b      	ldr	r3, [r7, #20]
 800437a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800437e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	68db      	ldr	r3, [r3, #12]
 8004384:	011b      	lsls	r3, r3, #4
 8004386:	697a      	ldr	r2, [r7, #20]
 8004388:	4313      	orrs	r3, r2
 800438a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800438c:	697b      	ldr	r3, [r7, #20]
 800438e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004392:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	4a1d      	ldr	r2, [pc, #116]	@ (800440c <TIM_OC2_SetConfig+0x100>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d00f      	beq.n	80043bc <TIM_OC2_SetConfig+0xb0>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	4a1c      	ldr	r2, [pc, #112]	@ (8004410 <TIM_OC2_SetConfig+0x104>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d00b      	beq.n	80043bc <TIM_OC2_SetConfig+0xb0>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	4a1b      	ldr	r2, [pc, #108]	@ (8004414 <TIM_OC2_SetConfig+0x108>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d007      	beq.n	80043bc <TIM_OC2_SetConfig+0xb0>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	4a1a      	ldr	r2, [pc, #104]	@ (8004418 <TIM_OC2_SetConfig+0x10c>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d003      	beq.n	80043bc <TIM_OC2_SetConfig+0xb0>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	4a19      	ldr	r2, [pc, #100]	@ (800441c <TIM_OC2_SetConfig+0x110>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d113      	bne.n	80043e4 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80043bc:	693b      	ldr	r3, [r7, #16]
 80043be:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80043c2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80043c4:	693b      	ldr	r3, [r7, #16]
 80043c6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80043ca:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	695b      	ldr	r3, [r3, #20]
 80043d0:	009b      	lsls	r3, r3, #2
 80043d2:	693a      	ldr	r2, [r7, #16]
 80043d4:	4313      	orrs	r3, r2
 80043d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	699b      	ldr	r3, [r3, #24]
 80043dc:	009b      	lsls	r3, r3, #2
 80043de:	693a      	ldr	r2, [r7, #16]
 80043e0:	4313      	orrs	r3, r2
 80043e2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	693a      	ldr	r2, [r7, #16]
 80043e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	68fa      	ldr	r2, [r7, #12]
 80043ee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	685a      	ldr	r2, [r3, #4]
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	697a      	ldr	r2, [r7, #20]
 80043fc:	621a      	str	r2, [r3, #32]
}
 80043fe:	bf00      	nop
 8004400:	371c      	adds	r7, #28
 8004402:	46bd      	mov	sp, r7
 8004404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004408:	4770      	bx	lr
 800440a:	bf00      	nop
 800440c:	40012c00 	.word	0x40012c00
 8004410:	40013400 	.word	0x40013400
 8004414:	40014000 	.word	0x40014000
 8004418:	40014400 	.word	0x40014400
 800441c:	40014800 	.word	0x40014800

08004420 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004420:	b480      	push	{r7}
 8004422:	b087      	sub	sp, #28
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
 8004428:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6a1b      	ldr	r3, [r3, #32]
 800442e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6a1b      	ldr	r3, [r3, #32]
 8004434:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	69db      	ldr	r3, [r3, #28]
 8004446:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800444e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004452:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	f023 0303 	bic.w	r3, r3, #3
 800445a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	68fa      	ldr	r2, [r7, #12]
 8004462:	4313      	orrs	r3, r2
 8004464:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004466:	697b      	ldr	r3, [r7, #20]
 8004468:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800446c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	689b      	ldr	r3, [r3, #8]
 8004472:	021b      	lsls	r3, r3, #8
 8004474:	697a      	ldr	r2, [r7, #20]
 8004476:	4313      	orrs	r3, r2
 8004478:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	4a27      	ldr	r2, [pc, #156]	@ (800451c <TIM_OC3_SetConfig+0xfc>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d003      	beq.n	800448a <TIM_OC3_SetConfig+0x6a>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	4a26      	ldr	r2, [pc, #152]	@ (8004520 <TIM_OC3_SetConfig+0x100>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d10d      	bne.n	80044a6 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800448a:	697b      	ldr	r3, [r7, #20]
 800448c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004490:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	68db      	ldr	r3, [r3, #12]
 8004496:	021b      	lsls	r3, r3, #8
 8004498:	697a      	ldr	r2, [r7, #20]
 800449a:	4313      	orrs	r3, r2
 800449c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800449e:	697b      	ldr	r3, [r7, #20]
 80044a0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80044a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	4a1c      	ldr	r2, [pc, #112]	@ (800451c <TIM_OC3_SetConfig+0xfc>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d00f      	beq.n	80044ce <TIM_OC3_SetConfig+0xae>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	4a1b      	ldr	r2, [pc, #108]	@ (8004520 <TIM_OC3_SetConfig+0x100>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d00b      	beq.n	80044ce <TIM_OC3_SetConfig+0xae>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	4a1a      	ldr	r2, [pc, #104]	@ (8004524 <TIM_OC3_SetConfig+0x104>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d007      	beq.n	80044ce <TIM_OC3_SetConfig+0xae>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	4a19      	ldr	r2, [pc, #100]	@ (8004528 <TIM_OC3_SetConfig+0x108>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d003      	beq.n	80044ce <TIM_OC3_SetConfig+0xae>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	4a18      	ldr	r2, [pc, #96]	@ (800452c <TIM_OC3_SetConfig+0x10c>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d113      	bne.n	80044f6 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80044ce:	693b      	ldr	r3, [r7, #16]
 80044d0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80044d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80044d6:	693b      	ldr	r3, [r7, #16]
 80044d8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80044dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	695b      	ldr	r3, [r3, #20]
 80044e2:	011b      	lsls	r3, r3, #4
 80044e4:	693a      	ldr	r2, [r7, #16]
 80044e6:	4313      	orrs	r3, r2
 80044e8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	699b      	ldr	r3, [r3, #24]
 80044ee:	011b      	lsls	r3, r3, #4
 80044f0:	693a      	ldr	r2, [r7, #16]
 80044f2:	4313      	orrs	r3, r2
 80044f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	693a      	ldr	r2, [r7, #16]
 80044fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	68fa      	ldr	r2, [r7, #12]
 8004500:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	685a      	ldr	r2, [r3, #4]
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	697a      	ldr	r2, [r7, #20]
 800450e:	621a      	str	r2, [r3, #32]
}
 8004510:	bf00      	nop
 8004512:	371c      	adds	r7, #28
 8004514:	46bd      	mov	sp, r7
 8004516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451a:	4770      	bx	lr
 800451c:	40012c00 	.word	0x40012c00
 8004520:	40013400 	.word	0x40013400
 8004524:	40014000 	.word	0x40014000
 8004528:	40014400 	.word	0x40014400
 800452c:	40014800 	.word	0x40014800

08004530 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004530:	b480      	push	{r7}
 8004532:	b087      	sub	sp, #28
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
 8004538:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6a1b      	ldr	r3, [r3, #32]
 800453e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6a1b      	ldr	r3, [r3, #32]
 8004544:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	69db      	ldr	r3, [r3, #28]
 8004556:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800455e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004562:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800456a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	021b      	lsls	r3, r3, #8
 8004572:	68fa      	ldr	r2, [r7, #12]
 8004574:	4313      	orrs	r3, r2
 8004576:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004578:	697b      	ldr	r3, [r7, #20]
 800457a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800457e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	689b      	ldr	r3, [r3, #8]
 8004584:	031b      	lsls	r3, r3, #12
 8004586:	697a      	ldr	r2, [r7, #20]
 8004588:	4313      	orrs	r3, r2
 800458a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	4a28      	ldr	r2, [pc, #160]	@ (8004630 <TIM_OC4_SetConfig+0x100>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d003      	beq.n	800459c <TIM_OC4_SetConfig+0x6c>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	4a27      	ldr	r2, [pc, #156]	@ (8004634 <TIM_OC4_SetConfig+0x104>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d10d      	bne.n	80045b8 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800459c:	697b      	ldr	r3, [r7, #20]
 800459e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80045a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	68db      	ldr	r3, [r3, #12]
 80045a8:	031b      	lsls	r3, r3, #12
 80045aa:	697a      	ldr	r2, [r7, #20]
 80045ac:	4313      	orrs	r3, r2
 80045ae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80045b0:	697b      	ldr	r3, [r7, #20]
 80045b2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80045b6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	4a1d      	ldr	r2, [pc, #116]	@ (8004630 <TIM_OC4_SetConfig+0x100>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d00f      	beq.n	80045e0 <TIM_OC4_SetConfig+0xb0>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	4a1c      	ldr	r2, [pc, #112]	@ (8004634 <TIM_OC4_SetConfig+0x104>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d00b      	beq.n	80045e0 <TIM_OC4_SetConfig+0xb0>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	4a1b      	ldr	r2, [pc, #108]	@ (8004638 <TIM_OC4_SetConfig+0x108>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d007      	beq.n	80045e0 <TIM_OC4_SetConfig+0xb0>
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	4a1a      	ldr	r2, [pc, #104]	@ (800463c <TIM_OC4_SetConfig+0x10c>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d003      	beq.n	80045e0 <TIM_OC4_SetConfig+0xb0>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	4a19      	ldr	r2, [pc, #100]	@ (8004640 <TIM_OC4_SetConfig+0x110>)
 80045dc:	4293      	cmp	r3, r2
 80045de:	d113      	bne.n	8004608 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80045e0:	693b      	ldr	r3, [r7, #16]
 80045e2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80045e6:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80045e8:	693b      	ldr	r3, [r7, #16]
 80045ea:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80045ee:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	695b      	ldr	r3, [r3, #20]
 80045f4:	019b      	lsls	r3, r3, #6
 80045f6:	693a      	ldr	r2, [r7, #16]
 80045f8:	4313      	orrs	r3, r2
 80045fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	699b      	ldr	r3, [r3, #24]
 8004600:	019b      	lsls	r3, r3, #6
 8004602:	693a      	ldr	r2, [r7, #16]
 8004604:	4313      	orrs	r3, r2
 8004606:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	693a      	ldr	r2, [r7, #16]
 800460c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	68fa      	ldr	r2, [r7, #12]
 8004612:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	685a      	ldr	r2, [r3, #4]
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	697a      	ldr	r2, [r7, #20]
 8004620:	621a      	str	r2, [r3, #32]
}
 8004622:	bf00      	nop
 8004624:	371c      	adds	r7, #28
 8004626:	46bd      	mov	sp, r7
 8004628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462c:	4770      	bx	lr
 800462e:	bf00      	nop
 8004630:	40012c00 	.word	0x40012c00
 8004634:	40013400 	.word	0x40013400
 8004638:	40014000 	.word	0x40014000
 800463c:	40014400 	.word	0x40014400
 8004640:	40014800 	.word	0x40014800

08004644 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004644:	b480      	push	{r7}
 8004646:	b087      	sub	sp, #28
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
 800464c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6a1b      	ldr	r3, [r3, #32]
 8004652:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6a1b      	ldr	r3, [r3, #32]
 8004658:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800466a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004672:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004676:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	68fa      	ldr	r2, [r7, #12]
 800467e:	4313      	orrs	r3, r2
 8004680:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004682:	693b      	ldr	r3, [r7, #16]
 8004684:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8004688:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	689b      	ldr	r3, [r3, #8]
 800468e:	041b      	lsls	r3, r3, #16
 8004690:	693a      	ldr	r2, [r7, #16]
 8004692:	4313      	orrs	r3, r2
 8004694:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	4a17      	ldr	r2, [pc, #92]	@ (80046f8 <TIM_OC5_SetConfig+0xb4>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d00f      	beq.n	80046be <TIM_OC5_SetConfig+0x7a>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	4a16      	ldr	r2, [pc, #88]	@ (80046fc <TIM_OC5_SetConfig+0xb8>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d00b      	beq.n	80046be <TIM_OC5_SetConfig+0x7a>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	4a15      	ldr	r2, [pc, #84]	@ (8004700 <TIM_OC5_SetConfig+0xbc>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d007      	beq.n	80046be <TIM_OC5_SetConfig+0x7a>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	4a14      	ldr	r2, [pc, #80]	@ (8004704 <TIM_OC5_SetConfig+0xc0>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d003      	beq.n	80046be <TIM_OC5_SetConfig+0x7a>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	4a13      	ldr	r2, [pc, #76]	@ (8004708 <TIM_OC5_SetConfig+0xc4>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d109      	bne.n	80046d2 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80046be:	697b      	ldr	r3, [r7, #20]
 80046c0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80046c4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	695b      	ldr	r3, [r3, #20]
 80046ca:	021b      	lsls	r3, r3, #8
 80046cc:	697a      	ldr	r2, [r7, #20]
 80046ce:	4313      	orrs	r3, r2
 80046d0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	697a      	ldr	r2, [r7, #20]
 80046d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	68fa      	ldr	r2, [r7, #12]
 80046dc:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	685a      	ldr	r2, [r3, #4]
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	693a      	ldr	r2, [r7, #16]
 80046ea:	621a      	str	r2, [r3, #32]
}
 80046ec:	bf00      	nop
 80046ee:	371c      	adds	r7, #28
 80046f0:	46bd      	mov	sp, r7
 80046f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f6:	4770      	bx	lr
 80046f8:	40012c00 	.word	0x40012c00
 80046fc:	40013400 	.word	0x40013400
 8004700:	40014000 	.word	0x40014000
 8004704:	40014400 	.word	0x40014400
 8004708:	40014800 	.word	0x40014800

0800470c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800470c:	b480      	push	{r7}
 800470e:	b087      	sub	sp, #28
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
 8004714:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6a1b      	ldr	r3, [r3, #32]
 800471a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6a1b      	ldr	r3, [r3, #32]
 8004720:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	685b      	ldr	r3, [r3, #4]
 800472c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004732:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800473a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800473e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	021b      	lsls	r3, r3, #8
 8004746:	68fa      	ldr	r2, [r7, #12]
 8004748:	4313      	orrs	r3, r2
 800474a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800474c:	693b      	ldr	r3, [r7, #16]
 800474e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004752:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	689b      	ldr	r3, [r3, #8]
 8004758:	051b      	lsls	r3, r3, #20
 800475a:	693a      	ldr	r2, [r7, #16]
 800475c:	4313      	orrs	r3, r2
 800475e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	4a18      	ldr	r2, [pc, #96]	@ (80047c4 <TIM_OC6_SetConfig+0xb8>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d00f      	beq.n	8004788 <TIM_OC6_SetConfig+0x7c>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	4a17      	ldr	r2, [pc, #92]	@ (80047c8 <TIM_OC6_SetConfig+0xbc>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d00b      	beq.n	8004788 <TIM_OC6_SetConfig+0x7c>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	4a16      	ldr	r2, [pc, #88]	@ (80047cc <TIM_OC6_SetConfig+0xc0>)
 8004774:	4293      	cmp	r3, r2
 8004776:	d007      	beq.n	8004788 <TIM_OC6_SetConfig+0x7c>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	4a15      	ldr	r2, [pc, #84]	@ (80047d0 <TIM_OC6_SetConfig+0xc4>)
 800477c:	4293      	cmp	r3, r2
 800477e:	d003      	beq.n	8004788 <TIM_OC6_SetConfig+0x7c>
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	4a14      	ldr	r2, [pc, #80]	@ (80047d4 <TIM_OC6_SetConfig+0xc8>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d109      	bne.n	800479c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004788:	697b      	ldr	r3, [r7, #20]
 800478a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800478e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	695b      	ldr	r3, [r3, #20]
 8004794:	029b      	lsls	r3, r3, #10
 8004796:	697a      	ldr	r2, [r7, #20]
 8004798:	4313      	orrs	r3, r2
 800479a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	697a      	ldr	r2, [r7, #20]
 80047a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	68fa      	ldr	r2, [r7, #12]
 80047a6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	685a      	ldr	r2, [r3, #4]
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	693a      	ldr	r2, [r7, #16]
 80047b4:	621a      	str	r2, [r3, #32]
}
 80047b6:	bf00      	nop
 80047b8:	371c      	adds	r7, #28
 80047ba:	46bd      	mov	sp, r7
 80047bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c0:	4770      	bx	lr
 80047c2:	bf00      	nop
 80047c4:	40012c00 	.word	0x40012c00
 80047c8:	40013400 	.word	0x40013400
 80047cc:	40014000 	.word	0x40014000
 80047d0:	40014400 	.word	0x40014400
 80047d4:	40014800 	.word	0x40014800

080047d8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80047d8:	b480      	push	{r7}
 80047da:	b087      	sub	sp, #28
 80047dc:	af00      	add	r7, sp, #0
 80047de:	60f8      	str	r0, [r7, #12]
 80047e0:	60b9      	str	r1, [r7, #8]
 80047e2:	607a      	str	r2, [r7, #4]
 80047e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	6a1b      	ldr	r3, [r3, #32]
 80047ea:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	6a1b      	ldr	r3, [r3, #32]
 80047f0:	f023 0201 	bic.w	r2, r3, #1
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	699b      	ldr	r3, [r3, #24]
 80047fc:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	4a24      	ldr	r2, [pc, #144]	@ (8004894 <TIM_TI1_SetConfig+0xbc>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d013      	beq.n	800482e <TIM_TI1_SetConfig+0x56>
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800480c:	d00f      	beq.n	800482e <TIM_TI1_SetConfig+0x56>
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	4a21      	ldr	r2, [pc, #132]	@ (8004898 <TIM_TI1_SetConfig+0xc0>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d00b      	beq.n	800482e <TIM_TI1_SetConfig+0x56>
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	4a20      	ldr	r2, [pc, #128]	@ (800489c <TIM_TI1_SetConfig+0xc4>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d007      	beq.n	800482e <TIM_TI1_SetConfig+0x56>
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	4a1f      	ldr	r2, [pc, #124]	@ (80048a0 <TIM_TI1_SetConfig+0xc8>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d003      	beq.n	800482e <TIM_TI1_SetConfig+0x56>
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	4a1e      	ldr	r2, [pc, #120]	@ (80048a4 <TIM_TI1_SetConfig+0xcc>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d101      	bne.n	8004832 <TIM_TI1_SetConfig+0x5a>
 800482e:	2301      	movs	r3, #1
 8004830:	e000      	b.n	8004834 <TIM_TI1_SetConfig+0x5c>
 8004832:	2300      	movs	r3, #0
 8004834:	2b00      	cmp	r3, #0
 8004836:	d008      	beq.n	800484a <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004838:	697b      	ldr	r3, [r7, #20]
 800483a:	f023 0303 	bic.w	r3, r3, #3
 800483e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004840:	697a      	ldr	r2, [r7, #20]
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	4313      	orrs	r3, r2
 8004846:	617b      	str	r3, [r7, #20]
 8004848:	e003      	b.n	8004852 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800484a:	697b      	ldr	r3, [r7, #20]
 800484c:	f043 0301 	orr.w	r3, r3, #1
 8004850:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004852:	697b      	ldr	r3, [r7, #20]
 8004854:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004858:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	011b      	lsls	r3, r3, #4
 800485e:	b2db      	uxtb	r3, r3
 8004860:	697a      	ldr	r2, [r7, #20]
 8004862:	4313      	orrs	r3, r2
 8004864:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004866:	693b      	ldr	r3, [r7, #16]
 8004868:	f023 030a 	bic.w	r3, r3, #10
 800486c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800486e:	68bb      	ldr	r3, [r7, #8]
 8004870:	f003 030a 	and.w	r3, r3, #10
 8004874:	693a      	ldr	r2, [r7, #16]
 8004876:	4313      	orrs	r3, r2
 8004878:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	697a      	ldr	r2, [r7, #20]
 800487e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	693a      	ldr	r2, [r7, #16]
 8004884:	621a      	str	r2, [r3, #32]
}
 8004886:	bf00      	nop
 8004888:	371c      	adds	r7, #28
 800488a:	46bd      	mov	sp, r7
 800488c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004890:	4770      	bx	lr
 8004892:	bf00      	nop
 8004894:	40012c00 	.word	0x40012c00
 8004898:	40000400 	.word	0x40000400
 800489c:	40000800 	.word	0x40000800
 80048a0:	40013400 	.word	0x40013400
 80048a4:	40014000 	.word	0x40014000

080048a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80048a8:	b480      	push	{r7}
 80048aa:	b087      	sub	sp, #28
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	60f8      	str	r0, [r7, #12]
 80048b0:	60b9      	str	r1, [r7, #8]
 80048b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	6a1b      	ldr	r3, [r3, #32]
 80048b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	6a1b      	ldr	r3, [r3, #32]
 80048be:	f023 0201 	bic.w	r2, r3, #1
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	699b      	ldr	r3, [r3, #24]
 80048ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80048cc:	693b      	ldr	r3, [r7, #16]
 80048ce:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80048d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	011b      	lsls	r3, r3, #4
 80048d8:	693a      	ldr	r2, [r7, #16]
 80048da:	4313      	orrs	r3, r2
 80048dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80048de:	697b      	ldr	r3, [r7, #20]
 80048e0:	f023 030a 	bic.w	r3, r3, #10
 80048e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80048e6:	697a      	ldr	r2, [r7, #20]
 80048e8:	68bb      	ldr	r3, [r7, #8]
 80048ea:	4313      	orrs	r3, r2
 80048ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	693a      	ldr	r2, [r7, #16]
 80048f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	697a      	ldr	r2, [r7, #20]
 80048f8:	621a      	str	r2, [r3, #32]
}
 80048fa:	bf00      	nop
 80048fc:	371c      	adds	r7, #28
 80048fe:	46bd      	mov	sp, r7
 8004900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004904:	4770      	bx	lr

08004906 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004906:	b480      	push	{r7}
 8004908:	b087      	sub	sp, #28
 800490a:	af00      	add	r7, sp, #0
 800490c:	60f8      	str	r0, [r7, #12]
 800490e:	60b9      	str	r1, [r7, #8]
 8004910:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	6a1b      	ldr	r3, [r3, #32]
 8004916:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	6a1b      	ldr	r3, [r3, #32]
 800491c:	f023 0210 	bic.w	r2, r3, #16
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	699b      	ldr	r3, [r3, #24]
 8004928:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800492a:	693b      	ldr	r3, [r7, #16]
 800492c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004930:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	031b      	lsls	r3, r3, #12
 8004936:	693a      	ldr	r2, [r7, #16]
 8004938:	4313      	orrs	r3, r2
 800493a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800493c:	697b      	ldr	r3, [r7, #20]
 800493e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004942:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004944:	68bb      	ldr	r3, [r7, #8]
 8004946:	011b      	lsls	r3, r3, #4
 8004948:	697a      	ldr	r2, [r7, #20]
 800494a:	4313      	orrs	r3, r2
 800494c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	693a      	ldr	r2, [r7, #16]
 8004952:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	697a      	ldr	r2, [r7, #20]
 8004958:	621a      	str	r2, [r3, #32]
}
 800495a:	bf00      	nop
 800495c:	371c      	adds	r7, #28
 800495e:	46bd      	mov	sp, r7
 8004960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004964:	4770      	bx	lr

08004966 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004966:	b480      	push	{r7}
 8004968:	b085      	sub	sp, #20
 800496a:	af00      	add	r7, sp, #0
 800496c:	6078      	str	r0, [r7, #4]
 800496e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	689b      	ldr	r3, [r3, #8]
 8004974:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800497c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004980:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004982:	683a      	ldr	r2, [r7, #0]
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	4313      	orrs	r3, r2
 8004988:	f043 0307 	orr.w	r3, r3, #7
 800498c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	68fa      	ldr	r2, [r7, #12]
 8004992:	609a      	str	r2, [r3, #8]
}
 8004994:	bf00      	nop
 8004996:	3714      	adds	r7, #20
 8004998:	46bd      	mov	sp, r7
 800499a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499e:	4770      	bx	lr

080049a0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80049a0:	b480      	push	{r7}
 80049a2:	b087      	sub	sp, #28
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	60f8      	str	r0, [r7, #12]
 80049a8:	60b9      	str	r1, [r7, #8]
 80049aa:	607a      	str	r2, [r7, #4]
 80049ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	689b      	ldr	r3, [r3, #8]
 80049b2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80049b4:	697b      	ldr	r3, [r7, #20]
 80049b6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80049ba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	021a      	lsls	r2, r3, #8
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	431a      	orrs	r2, r3
 80049c4:	68bb      	ldr	r3, [r7, #8]
 80049c6:	4313      	orrs	r3, r2
 80049c8:	697a      	ldr	r2, [r7, #20]
 80049ca:	4313      	orrs	r3, r2
 80049cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	697a      	ldr	r2, [r7, #20]
 80049d2:	609a      	str	r2, [r3, #8]
}
 80049d4:	bf00      	nop
 80049d6:	371c      	adds	r7, #28
 80049d8:	46bd      	mov	sp, r7
 80049da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049de:	4770      	bx	lr

080049e0 <HAL_TIMEx_HallSensor_Init>:
  * @param  htim TIM Hall Sensor Interface handle
  * @param  sConfig TIM Hall Sensor configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Init(TIM_HandleTypeDef *htim, const TIM_HallSensor_InitTypeDef *sConfig)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b08a      	sub	sp, #40	@ 0x28
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
 80049e8:	6039      	str	r1, [r7, #0]
  TIM_OC_InitTypeDef OC_Config;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d101      	bne.n	80049f4 <HAL_TIMEx_HallSensor_Init+0x14>
  {
    return HAL_ERROR;
 80049f0:	2301      	movs	r3, #1
 80049f2:	e0a0      	b.n	8004b36 <HAL_TIMEx_HallSensor_Init+0x156>
  assert_param(IS_TIM_IC_POLARITY(sConfig->IC1Polarity));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80049fa:	b2db      	uxtb	r3, r3
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d106      	bne.n	8004a0e <HAL_TIMEx_HallSensor_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2200      	movs	r2, #0
 8004a04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->HallSensor_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIMEx_HallSensor_MspInit(htim);
 8004a08:	6878      	ldr	r0, [r7, #4]
 8004a0a:	f7fc fabb 	bl	8000f84 <HAL_TIMEx_HallSensor_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2202      	movs	r2, #2
 8004a12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681a      	ldr	r2, [r3, #0]
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	3304      	adds	r3, #4
 8004a1e:	4619      	mov	r1, r3
 8004a20:	4610      	mov	r0, r2
 8004a22:	f7ff fb47 	bl	80040b4 <TIM_Base_SetConfig>

  /* Configure the Channel 1 as Input Channel to interface with the three Outputs of the  Hall sensor */
  TIM_TI1_SetConfig(htim->Instance, sConfig->IC1Polarity, TIM_ICSELECTION_TRC, sConfig->IC1Filter);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6818      	ldr	r0, [r3, #0]
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	6819      	ldr	r1, [r3, #0]
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	689b      	ldr	r3, [r3, #8]
 8004a32:	2203      	movs	r2, #3
 8004a34:	f7ff fed0 	bl	80047d8 <TIM_TI1_SetConfig>

  /* Reset the IC1PSC Bits */
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	699a      	ldr	r2, [r3, #24]
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f022 020c 	bic.w	r2, r2, #12
 8004a46:	619a      	str	r2, [r3, #24]
  /* Set the IC1PSC value */
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	6999      	ldr	r1, [r3, #24]
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	685a      	ldr	r2, [r3, #4]
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	430a      	orrs	r2, r1
 8004a58:	619a      	str	r2, [r3, #24]

  /* Enable the Hall sensor interface (XOR function of the three inputs) */
  htim->Instance->CR2 |= TIM_CR2_TI1S;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	685a      	ldr	r2, [r3, #4]
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004a68:	605a      	str	r2, [r3, #4]

  /* Select the TIM_TS_TI1F_ED signal as Input trigger for the TIM */
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	689b      	ldr	r3, [r3, #8]
 8004a70:	687a      	ldr	r2, [r7, #4]
 8004a72:	6812      	ldr	r2, [r2, #0]
 8004a74:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8004a78:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a7c:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_TS_TI1F_ED;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	689a      	ldr	r2, [r3, #8]
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004a8c:	609a      	str	r2, [r3, #8]

  /* Use the TIM_TS_TI1F_ED signal to reset the TIM counter each edge detection */
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	689b      	ldr	r3, [r3, #8]
 8004a94:	687a      	ldr	r2, [r7, #4]
 8004a96:	6812      	ldr	r2, [r2, #0]
 8004a98:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004a9c:	f023 0307 	bic.w	r3, r3, #7
 8004aa0:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_SLAVEMODE_RESET;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	689a      	ldr	r2, [r3, #8]
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f042 0204 	orr.w	r2, r2, #4
 8004ab0:	609a      	str	r2, [r3, #8]

  /* Program channel 2 in PWM 2 mode with the desired Commutation_Delay*/
  OC_Config.OCFastMode = TIM_OCFAST_DISABLE;
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	61fb      	str	r3, [r7, #28]
  OC_Config.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	623b      	str	r3, [r7, #32]
  OC_Config.OCMode = TIM_OCMODE_PWM2;
 8004aba:	2370      	movs	r3, #112	@ 0x70
 8004abc:	60fb      	str	r3, [r7, #12]
  OC_Config.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004abe:	2300      	movs	r3, #0
 8004ac0:	627b      	str	r3, [r7, #36]	@ 0x24
  OC_Config.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	61bb      	str	r3, [r7, #24]
  OC_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	617b      	str	r3, [r7, #20]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	68db      	ldr	r3, [r3, #12]
 8004ace:	613b      	str	r3, [r7, #16]

  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f107 020c 	add.w	r2, r7, #12
 8004ad8:	4611      	mov	r1, r2
 8004ada:	4618      	mov	r0, r3
 8004adc:	f7ff fc16 	bl	800430c <TIM_OC2_SetConfig>

  /* Select OC2REF as trigger output on TRGO: write the MMS bits in the TIMx_CR2
    register to 101 */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	685b      	ldr	r3, [r3, #4]
 8004ae6:	687a      	ldr	r2, [r7, #4]
 8004ae8:	6812      	ldr	r2, [r2, #0]
 8004aea:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8004aee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004af2:	6053      	str	r3, [r2, #4]
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	685a      	ldr	r2, [r3, #4]
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f042 0250 	orr.w	r2, r2, #80	@ 0x50
 8004b02:	605a      	str	r2, [r3, #4]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2201      	movs	r2, #1
 8004b08:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2201      	movs	r2, #1
 8004b10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2201      	movs	r2, #1
 8004b18:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2201      	movs	r2, #1
 8004b20:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2201      	movs	r2, #1
 8004b28:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2201      	movs	r2, #1
 8004b30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004b34:	2300      	movs	r3, #0
}
 8004b36:	4618      	mov	r0, r3
 8004b38:	3728      	adds	r7, #40	@ 0x28
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	bd80      	pop	{r7, pc}
	...

08004b40 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004b40:	b480      	push	{r7}
 8004b42:	b085      	sub	sp, #20
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
 8004b48:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004b50:	2b01      	cmp	r3, #1
 8004b52:	d101      	bne.n	8004b58 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004b54:	2302      	movs	r3, #2
 8004b56:	e065      	b.n	8004c24 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2201      	movs	r2, #1
 8004b5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2202      	movs	r2, #2
 8004b64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	685b      	ldr	r3, [r3, #4]
 8004b6e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	689b      	ldr	r3, [r3, #8]
 8004b76:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4a2c      	ldr	r2, [pc, #176]	@ (8004c30 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d004      	beq.n	8004b8c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4a2b      	ldr	r2, [pc, #172]	@ (8004c34 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d108      	bne.n	8004b9e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004b92:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	685b      	ldr	r3, [r3, #4]
 8004b98:	68fa      	ldr	r2, [r7, #12]
 8004b9a:	4313      	orrs	r3, r2
 8004b9c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8004ba4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ba8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	68fa      	ldr	r2, [r7, #12]
 8004bb0:	4313      	orrs	r3, r2
 8004bb2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	68fa      	ldr	r2, [r7, #12]
 8004bba:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4a1b      	ldr	r2, [pc, #108]	@ (8004c30 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d018      	beq.n	8004bf8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004bce:	d013      	beq.n	8004bf8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4a18      	ldr	r2, [pc, #96]	@ (8004c38 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d00e      	beq.n	8004bf8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	4a17      	ldr	r2, [pc, #92]	@ (8004c3c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d009      	beq.n	8004bf8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	4a12      	ldr	r2, [pc, #72]	@ (8004c34 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d004      	beq.n	8004bf8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4a13      	ldr	r2, [pc, #76]	@ (8004c40 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d10c      	bne.n	8004c12 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004bf8:	68bb      	ldr	r3, [r7, #8]
 8004bfa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004bfe:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	689b      	ldr	r3, [r3, #8]
 8004c04:	68ba      	ldr	r2, [r7, #8]
 8004c06:	4313      	orrs	r3, r2
 8004c08:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	68ba      	ldr	r2, [r7, #8]
 8004c10:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2201      	movs	r2, #1
 8004c16:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004c22:	2300      	movs	r3, #0
}
 8004c24:	4618      	mov	r0, r3
 8004c26:	3714      	adds	r7, #20
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2e:	4770      	bx	lr
 8004c30:	40012c00 	.word	0x40012c00
 8004c34:	40013400 	.word	0x40013400
 8004c38:	40000400 	.word	0x40000400
 8004c3c:	40000800 	.word	0x40000800
 8004c40:	40014000 	.word	0x40014000

08004c44 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004c44:	b480      	push	{r7}
 8004c46:	b085      	sub	sp, #20
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
 8004c4c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004c4e:	2300      	movs	r3, #0
 8004c50:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004c58:	2b01      	cmp	r3, #1
 8004c5a:	d101      	bne.n	8004c60 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004c5c:	2302      	movs	r3, #2
 8004c5e:	e073      	b.n	8004d48 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2201      	movs	r2, #1
 8004c64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	68db      	ldr	r3, [r3, #12]
 8004c72:	4313      	orrs	r3, r2
 8004c74:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	689b      	ldr	r3, [r3, #8]
 8004c80:	4313      	orrs	r3, r2
 8004c82:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	685b      	ldr	r3, [r3, #4]
 8004c8e:	4313      	orrs	r3, r2
 8004c90:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4313      	orrs	r3, r2
 8004c9e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	691b      	ldr	r3, [r3, #16]
 8004caa:	4313      	orrs	r3, r2
 8004cac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	695b      	ldr	r3, [r3, #20]
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cc6:	4313      	orrs	r3, r2
 8004cc8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	699b      	ldr	r3, [r3, #24]
 8004cd4:	041b      	lsls	r3, r3, #16
 8004cd6:	4313      	orrs	r3, r2
 8004cd8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	69db      	ldr	r3, [r3, #28]
 8004ce4:	4313      	orrs	r3, r2
 8004ce6:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	4a19      	ldr	r2, [pc, #100]	@ (8004d54 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d004      	beq.n	8004cfc <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4a18      	ldr	r2, [pc, #96]	@ (8004d58 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d11c      	bne.n	8004d36 <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d06:	051b      	lsls	r3, r3, #20
 8004d08:	4313      	orrs	r3, r2
 8004d0a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	6a1b      	ldr	r3, [r3, #32]
 8004d16:	4313      	orrs	r3, r2
 8004d18:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d24:	4313      	orrs	r3, r2
 8004d26:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d32:	4313      	orrs	r3, r2
 8004d34:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	68fa      	ldr	r2, [r7, #12]
 8004d3c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2200      	movs	r2, #0
 8004d42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004d46:	2300      	movs	r3, #0
}
 8004d48:	4618      	mov	r0, r3
 8004d4a:	3714      	adds	r7, #20
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d52:	4770      	bx	lr
 8004d54:	40012c00 	.word	0x40012c00
 8004d58:	40013400 	.word	0x40013400

08004d5c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b082      	sub	sp, #8
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d101      	bne.n	8004d6e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	e042      	b.n	8004df4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d106      	bne.n	8004d86 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004d80:	6878      	ldr	r0, [r7, #4]
 8004d82:	f7fc faa3 	bl	80012cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2224      	movs	r2, #36	@ 0x24
 8004d8a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	681a      	ldr	r2, [r3, #0]
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f022 0201 	bic.w	r2, r2, #1
 8004d9c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d002      	beq.n	8004dac <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004da6:	6878      	ldr	r0, [r7, #4]
 8004da8:	f000 faf4 	bl	8005394 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004dac:	6878      	ldr	r0, [r7, #4]
 8004dae:	f000 f825 	bl	8004dfc <UART_SetConfig>
 8004db2:	4603      	mov	r3, r0
 8004db4:	2b01      	cmp	r3, #1
 8004db6:	d101      	bne.n	8004dbc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004db8:	2301      	movs	r3, #1
 8004dba:	e01b      	b.n	8004df4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	685a      	ldr	r2, [r3, #4]
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004dca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	689a      	ldr	r2, [r3, #8]
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004dda:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	681a      	ldr	r2, [r3, #0]
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f042 0201 	orr.w	r2, r2, #1
 8004dea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004dec:	6878      	ldr	r0, [r7, #4]
 8004dee:	f000 fb73 	bl	80054d8 <UART_CheckIdleState>
 8004df2:	4603      	mov	r3, r0
}
 8004df4:	4618      	mov	r0, r3
 8004df6:	3708      	adds	r7, #8
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	bd80      	pop	{r7, pc}

08004dfc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004dfc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e00:	b08c      	sub	sp, #48	@ 0x30
 8004e02:	af00      	add	r7, sp, #0
 8004e04:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004e06:	2300      	movs	r3, #0
 8004e08:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004e0c:	697b      	ldr	r3, [r7, #20]
 8004e0e:	689a      	ldr	r2, [r3, #8]
 8004e10:	697b      	ldr	r3, [r7, #20]
 8004e12:	691b      	ldr	r3, [r3, #16]
 8004e14:	431a      	orrs	r2, r3
 8004e16:	697b      	ldr	r3, [r7, #20]
 8004e18:	695b      	ldr	r3, [r3, #20]
 8004e1a:	431a      	orrs	r2, r3
 8004e1c:	697b      	ldr	r3, [r7, #20]
 8004e1e:	69db      	ldr	r3, [r3, #28]
 8004e20:	4313      	orrs	r3, r2
 8004e22:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004e24:	697b      	ldr	r3, [r7, #20]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	681a      	ldr	r2, [r3, #0]
 8004e2a:	4bab      	ldr	r3, [pc, #684]	@ (80050d8 <UART_SetConfig+0x2dc>)
 8004e2c:	4013      	ands	r3, r2
 8004e2e:	697a      	ldr	r2, [r7, #20]
 8004e30:	6812      	ldr	r2, [r2, #0]
 8004e32:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004e34:	430b      	orrs	r3, r1
 8004e36:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e38:	697b      	ldr	r3, [r7, #20]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	685b      	ldr	r3, [r3, #4]
 8004e3e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004e42:	697b      	ldr	r3, [r7, #20]
 8004e44:	68da      	ldr	r2, [r3, #12]
 8004e46:	697b      	ldr	r3, [r7, #20]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	430a      	orrs	r2, r1
 8004e4c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004e4e:	697b      	ldr	r3, [r7, #20]
 8004e50:	699b      	ldr	r3, [r3, #24]
 8004e52:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004e54:	697b      	ldr	r3, [r7, #20]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	4aa0      	ldr	r2, [pc, #640]	@ (80050dc <UART_SetConfig+0x2e0>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d004      	beq.n	8004e68 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004e5e:	697b      	ldr	r3, [r7, #20]
 8004e60:	6a1b      	ldr	r3, [r3, #32]
 8004e62:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004e64:	4313      	orrs	r3, r2
 8004e66:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004e68:	697b      	ldr	r3, [r7, #20]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	689b      	ldr	r3, [r3, #8]
 8004e6e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8004e72:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8004e76:	697a      	ldr	r2, [r7, #20]
 8004e78:	6812      	ldr	r2, [r2, #0]
 8004e7a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004e7c:	430b      	orrs	r3, r1
 8004e7e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004e80:	697b      	ldr	r3, [r7, #20]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e86:	f023 010f 	bic.w	r1, r3, #15
 8004e8a:	697b      	ldr	r3, [r7, #20]
 8004e8c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004e8e:	697b      	ldr	r3, [r7, #20]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	430a      	orrs	r2, r1
 8004e94:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004e96:	697b      	ldr	r3, [r7, #20]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4a91      	ldr	r2, [pc, #580]	@ (80050e0 <UART_SetConfig+0x2e4>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d125      	bne.n	8004eec <UART_SetConfig+0xf0>
 8004ea0:	4b90      	ldr	r3, [pc, #576]	@ (80050e4 <UART_SetConfig+0x2e8>)
 8004ea2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ea6:	f003 0303 	and.w	r3, r3, #3
 8004eaa:	2b03      	cmp	r3, #3
 8004eac:	d81a      	bhi.n	8004ee4 <UART_SetConfig+0xe8>
 8004eae:	a201      	add	r2, pc, #4	@ (adr r2, 8004eb4 <UART_SetConfig+0xb8>)
 8004eb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eb4:	08004ec5 	.word	0x08004ec5
 8004eb8:	08004ed5 	.word	0x08004ed5
 8004ebc:	08004ecd 	.word	0x08004ecd
 8004ec0:	08004edd 	.word	0x08004edd
 8004ec4:	2301      	movs	r3, #1
 8004ec6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004eca:	e0d6      	b.n	800507a <UART_SetConfig+0x27e>
 8004ecc:	2302      	movs	r3, #2
 8004ece:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004ed2:	e0d2      	b.n	800507a <UART_SetConfig+0x27e>
 8004ed4:	2304      	movs	r3, #4
 8004ed6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004eda:	e0ce      	b.n	800507a <UART_SetConfig+0x27e>
 8004edc:	2308      	movs	r3, #8
 8004ede:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004ee2:	e0ca      	b.n	800507a <UART_SetConfig+0x27e>
 8004ee4:	2310      	movs	r3, #16
 8004ee6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004eea:	e0c6      	b.n	800507a <UART_SetConfig+0x27e>
 8004eec:	697b      	ldr	r3, [r7, #20]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4a7d      	ldr	r2, [pc, #500]	@ (80050e8 <UART_SetConfig+0x2ec>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d138      	bne.n	8004f68 <UART_SetConfig+0x16c>
 8004ef6:	4b7b      	ldr	r3, [pc, #492]	@ (80050e4 <UART_SetConfig+0x2e8>)
 8004ef8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004efc:	f003 030c 	and.w	r3, r3, #12
 8004f00:	2b0c      	cmp	r3, #12
 8004f02:	d82d      	bhi.n	8004f60 <UART_SetConfig+0x164>
 8004f04:	a201      	add	r2, pc, #4	@ (adr r2, 8004f0c <UART_SetConfig+0x110>)
 8004f06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f0a:	bf00      	nop
 8004f0c:	08004f41 	.word	0x08004f41
 8004f10:	08004f61 	.word	0x08004f61
 8004f14:	08004f61 	.word	0x08004f61
 8004f18:	08004f61 	.word	0x08004f61
 8004f1c:	08004f51 	.word	0x08004f51
 8004f20:	08004f61 	.word	0x08004f61
 8004f24:	08004f61 	.word	0x08004f61
 8004f28:	08004f61 	.word	0x08004f61
 8004f2c:	08004f49 	.word	0x08004f49
 8004f30:	08004f61 	.word	0x08004f61
 8004f34:	08004f61 	.word	0x08004f61
 8004f38:	08004f61 	.word	0x08004f61
 8004f3c:	08004f59 	.word	0x08004f59
 8004f40:	2300      	movs	r3, #0
 8004f42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f46:	e098      	b.n	800507a <UART_SetConfig+0x27e>
 8004f48:	2302      	movs	r3, #2
 8004f4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f4e:	e094      	b.n	800507a <UART_SetConfig+0x27e>
 8004f50:	2304      	movs	r3, #4
 8004f52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f56:	e090      	b.n	800507a <UART_SetConfig+0x27e>
 8004f58:	2308      	movs	r3, #8
 8004f5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f5e:	e08c      	b.n	800507a <UART_SetConfig+0x27e>
 8004f60:	2310      	movs	r3, #16
 8004f62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f66:	e088      	b.n	800507a <UART_SetConfig+0x27e>
 8004f68:	697b      	ldr	r3, [r7, #20]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	4a5f      	ldr	r2, [pc, #380]	@ (80050ec <UART_SetConfig+0x2f0>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d125      	bne.n	8004fbe <UART_SetConfig+0x1c2>
 8004f72:	4b5c      	ldr	r3, [pc, #368]	@ (80050e4 <UART_SetConfig+0x2e8>)
 8004f74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f78:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004f7c:	2b30      	cmp	r3, #48	@ 0x30
 8004f7e:	d016      	beq.n	8004fae <UART_SetConfig+0x1b2>
 8004f80:	2b30      	cmp	r3, #48	@ 0x30
 8004f82:	d818      	bhi.n	8004fb6 <UART_SetConfig+0x1ba>
 8004f84:	2b20      	cmp	r3, #32
 8004f86:	d00a      	beq.n	8004f9e <UART_SetConfig+0x1a2>
 8004f88:	2b20      	cmp	r3, #32
 8004f8a:	d814      	bhi.n	8004fb6 <UART_SetConfig+0x1ba>
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d002      	beq.n	8004f96 <UART_SetConfig+0x19a>
 8004f90:	2b10      	cmp	r3, #16
 8004f92:	d008      	beq.n	8004fa6 <UART_SetConfig+0x1aa>
 8004f94:	e00f      	b.n	8004fb6 <UART_SetConfig+0x1ba>
 8004f96:	2300      	movs	r3, #0
 8004f98:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f9c:	e06d      	b.n	800507a <UART_SetConfig+0x27e>
 8004f9e:	2302      	movs	r3, #2
 8004fa0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004fa4:	e069      	b.n	800507a <UART_SetConfig+0x27e>
 8004fa6:	2304      	movs	r3, #4
 8004fa8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004fac:	e065      	b.n	800507a <UART_SetConfig+0x27e>
 8004fae:	2308      	movs	r3, #8
 8004fb0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004fb4:	e061      	b.n	800507a <UART_SetConfig+0x27e>
 8004fb6:	2310      	movs	r3, #16
 8004fb8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004fbc:	e05d      	b.n	800507a <UART_SetConfig+0x27e>
 8004fbe:	697b      	ldr	r3, [r7, #20]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	4a4b      	ldr	r2, [pc, #300]	@ (80050f0 <UART_SetConfig+0x2f4>)
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d125      	bne.n	8005014 <UART_SetConfig+0x218>
 8004fc8:	4b46      	ldr	r3, [pc, #280]	@ (80050e4 <UART_SetConfig+0x2e8>)
 8004fca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fce:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004fd2:	2bc0      	cmp	r3, #192	@ 0xc0
 8004fd4:	d016      	beq.n	8005004 <UART_SetConfig+0x208>
 8004fd6:	2bc0      	cmp	r3, #192	@ 0xc0
 8004fd8:	d818      	bhi.n	800500c <UART_SetConfig+0x210>
 8004fda:	2b80      	cmp	r3, #128	@ 0x80
 8004fdc:	d00a      	beq.n	8004ff4 <UART_SetConfig+0x1f8>
 8004fde:	2b80      	cmp	r3, #128	@ 0x80
 8004fe0:	d814      	bhi.n	800500c <UART_SetConfig+0x210>
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d002      	beq.n	8004fec <UART_SetConfig+0x1f0>
 8004fe6:	2b40      	cmp	r3, #64	@ 0x40
 8004fe8:	d008      	beq.n	8004ffc <UART_SetConfig+0x200>
 8004fea:	e00f      	b.n	800500c <UART_SetConfig+0x210>
 8004fec:	2300      	movs	r3, #0
 8004fee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004ff2:	e042      	b.n	800507a <UART_SetConfig+0x27e>
 8004ff4:	2302      	movs	r3, #2
 8004ff6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004ffa:	e03e      	b.n	800507a <UART_SetConfig+0x27e>
 8004ffc:	2304      	movs	r3, #4
 8004ffe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005002:	e03a      	b.n	800507a <UART_SetConfig+0x27e>
 8005004:	2308      	movs	r3, #8
 8005006:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800500a:	e036      	b.n	800507a <UART_SetConfig+0x27e>
 800500c:	2310      	movs	r3, #16
 800500e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005012:	e032      	b.n	800507a <UART_SetConfig+0x27e>
 8005014:	697b      	ldr	r3, [r7, #20]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	4a30      	ldr	r2, [pc, #192]	@ (80050dc <UART_SetConfig+0x2e0>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d12a      	bne.n	8005074 <UART_SetConfig+0x278>
 800501e:	4b31      	ldr	r3, [pc, #196]	@ (80050e4 <UART_SetConfig+0x2e8>)
 8005020:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005024:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005028:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800502c:	d01a      	beq.n	8005064 <UART_SetConfig+0x268>
 800502e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005032:	d81b      	bhi.n	800506c <UART_SetConfig+0x270>
 8005034:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005038:	d00c      	beq.n	8005054 <UART_SetConfig+0x258>
 800503a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800503e:	d815      	bhi.n	800506c <UART_SetConfig+0x270>
 8005040:	2b00      	cmp	r3, #0
 8005042:	d003      	beq.n	800504c <UART_SetConfig+0x250>
 8005044:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005048:	d008      	beq.n	800505c <UART_SetConfig+0x260>
 800504a:	e00f      	b.n	800506c <UART_SetConfig+0x270>
 800504c:	2300      	movs	r3, #0
 800504e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005052:	e012      	b.n	800507a <UART_SetConfig+0x27e>
 8005054:	2302      	movs	r3, #2
 8005056:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800505a:	e00e      	b.n	800507a <UART_SetConfig+0x27e>
 800505c:	2304      	movs	r3, #4
 800505e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005062:	e00a      	b.n	800507a <UART_SetConfig+0x27e>
 8005064:	2308      	movs	r3, #8
 8005066:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800506a:	e006      	b.n	800507a <UART_SetConfig+0x27e>
 800506c:	2310      	movs	r3, #16
 800506e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005072:	e002      	b.n	800507a <UART_SetConfig+0x27e>
 8005074:	2310      	movs	r3, #16
 8005076:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800507a:	697b      	ldr	r3, [r7, #20]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4a17      	ldr	r2, [pc, #92]	@ (80050dc <UART_SetConfig+0x2e0>)
 8005080:	4293      	cmp	r3, r2
 8005082:	f040 80a8 	bne.w	80051d6 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005086:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800508a:	2b08      	cmp	r3, #8
 800508c:	d834      	bhi.n	80050f8 <UART_SetConfig+0x2fc>
 800508e:	a201      	add	r2, pc, #4	@ (adr r2, 8005094 <UART_SetConfig+0x298>)
 8005090:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005094:	080050b9 	.word	0x080050b9
 8005098:	080050f9 	.word	0x080050f9
 800509c:	080050c1 	.word	0x080050c1
 80050a0:	080050f9 	.word	0x080050f9
 80050a4:	080050c7 	.word	0x080050c7
 80050a8:	080050f9 	.word	0x080050f9
 80050ac:	080050f9 	.word	0x080050f9
 80050b0:	080050f9 	.word	0x080050f9
 80050b4:	080050cf 	.word	0x080050cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80050b8:	f7fe fa2e 	bl	8003518 <HAL_RCC_GetPCLK1Freq>
 80050bc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80050be:	e021      	b.n	8005104 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80050c0:	4b0c      	ldr	r3, [pc, #48]	@ (80050f4 <UART_SetConfig+0x2f8>)
 80050c2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80050c4:	e01e      	b.n	8005104 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80050c6:	f7fe f9b9 	bl	800343c <HAL_RCC_GetSysClockFreq>
 80050ca:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80050cc:	e01a      	b.n	8005104 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80050ce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80050d2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80050d4:	e016      	b.n	8005104 <UART_SetConfig+0x308>
 80050d6:	bf00      	nop
 80050d8:	cfff69f3 	.word	0xcfff69f3
 80050dc:	40008000 	.word	0x40008000
 80050e0:	40013800 	.word	0x40013800
 80050e4:	40021000 	.word	0x40021000
 80050e8:	40004400 	.word	0x40004400
 80050ec:	40004800 	.word	0x40004800
 80050f0:	40004c00 	.word	0x40004c00
 80050f4:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80050f8:	2300      	movs	r3, #0
 80050fa:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80050fc:	2301      	movs	r3, #1
 80050fe:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005102:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005104:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005106:	2b00      	cmp	r3, #0
 8005108:	f000 812a 	beq.w	8005360 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800510c:	697b      	ldr	r3, [r7, #20]
 800510e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005110:	4a9e      	ldr	r2, [pc, #632]	@ (800538c <UART_SetConfig+0x590>)
 8005112:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005116:	461a      	mov	r2, r3
 8005118:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800511a:	fbb3 f3f2 	udiv	r3, r3, r2
 800511e:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005120:	697b      	ldr	r3, [r7, #20]
 8005122:	685a      	ldr	r2, [r3, #4]
 8005124:	4613      	mov	r3, r2
 8005126:	005b      	lsls	r3, r3, #1
 8005128:	4413      	add	r3, r2
 800512a:	69ba      	ldr	r2, [r7, #24]
 800512c:	429a      	cmp	r2, r3
 800512e:	d305      	bcc.n	800513c <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005130:	697b      	ldr	r3, [r7, #20]
 8005132:	685b      	ldr	r3, [r3, #4]
 8005134:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005136:	69ba      	ldr	r2, [r7, #24]
 8005138:	429a      	cmp	r2, r3
 800513a:	d903      	bls.n	8005144 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 800513c:	2301      	movs	r3, #1
 800513e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005142:	e10d      	b.n	8005360 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005146:	2200      	movs	r2, #0
 8005148:	60bb      	str	r3, [r7, #8]
 800514a:	60fa      	str	r2, [r7, #12]
 800514c:	697b      	ldr	r3, [r7, #20]
 800514e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005150:	4a8e      	ldr	r2, [pc, #568]	@ (800538c <UART_SetConfig+0x590>)
 8005152:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005156:	b29b      	uxth	r3, r3
 8005158:	2200      	movs	r2, #0
 800515a:	603b      	str	r3, [r7, #0]
 800515c:	607a      	str	r2, [r7, #4]
 800515e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005162:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005166:	f7fb f857 	bl	8000218 <__aeabi_uldivmod>
 800516a:	4602      	mov	r2, r0
 800516c:	460b      	mov	r3, r1
 800516e:	4610      	mov	r0, r2
 8005170:	4619      	mov	r1, r3
 8005172:	f04f 0200 	mov.w	r2, #0
 8005176:	f04f 0300 	mov.w	r3, #0
 800517a:	020b      	lsls	r3, r1, #8
 800517c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005180:	0202      	lsls	r2, r0, #8
 8005182:	6979      	ldr	r1, [r7, #20]
 8005184:	6849      	ldr	r1, [r1, #4]
 8005186:	0849      	lsrs	r1, r1, #1
 8005188:	2000      	movs	r0, #0
 800518a:	460c      	mov	r4, r1
 800518c:	4605      	mov	r5, r0
 800518e:	eb12 0804 	adds.w	r8, r2, r4
 8005192:	eb43 0905 	adc.w	r9, r3, r5
 8005196:	697b      	ldr	r3, [r7, #20]
 8005198:	685b      	ldr	r3, [r3, #4]
 800519a:	2200      	movs	r2, #0
 800519c:	469a      	mov	sl, r3
 800519e:	4693      	mov	fp, r2
 80051a0:	4652      	mov	r2, sl
 80051a2:	465b      	mov	r3, fp
 80051a4:	4640      	mov	r0, r8
 80051a6:	4649      	mov	r1, r9
 80051a8:	f7fb f836 	bl	8000218 <__aeabi_uldivmod>
 80051ac:	4602      	mov	r2, r0
 80051ae:	460b      	mov	r3, r1
 80051b0:	4613      	mov	r3, r2
 80051b2:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80051b4:	6a3b      	ldr	r3, [r7, #32]
 80051b6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80051ba:	d308      	bcc.n	80051ce <UART_SetConfig+0x3d2>
 80051bc:	6a3b      	ldr	r3, [r7, #32]
 80051be:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80051c2:	d204      	bcs.n	80051ce <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 80051c4:	697b      	ldr	r3, [r7, #20]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	6a3a      	ldr	r2, [r7, #32]
 80051ca:	60da      	str	r2, [r3, #12]
 80051cc:	e0c8      	b.n	8005360 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 80051ce:	2301      	movs	r3, #1
 80051d0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80051d4:	e0c4      	b.n	8005360 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80051d6:	697b      	ldr	r3, [r7, #20]
 80051d8:	69db      	ldr	r3, [r3, #28]
 80051da:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80051de:	d167      	bne.n	80052b0 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 80051e0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80051e4:	2b08      	cmp	r3, #8
 80051e6:	d828      	bhi.n	800523a <UART_SetConfig+0x43e>
 80051e8:	a201      	add	r2, pc, #4	@ (adr r2, 80051f0 <UART_SetConfig+0x3f4>)
 80051ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051ee:	bf00      	nop
 80051f0:	08005215 	.word	0x08005215
 80051f4:	0800521d 	.word	0x0800521d
 80051f8:	08005225 	.word	0x08005225
 80051fc:	0800523b 	.word	0x0800523b
 8005200:	0800522b 	.word	0x0800522b
 8005204:	0800523b 	.word	0x0800523b
 8005208:	0800523b 	.word	0x0800523b
 800520c:	0800523b 	.word	0x0800523b
 8005210:	08005233 	.word	0x08005233
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005214:	f7fe f980 	bl	8003518 <HAL_RCC_GetPCLK1Freq>
 8005218:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800521a:	e014      	b.n	8005246 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800521c:	f7fe f992 	bl	8003544 <HAL_RCC_GetPCLK2Freq>
 8005220:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005222:	e010      	b.n	8005246 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005224:	4b5a      	ldr	r3, [pc, #360]	@ (8005390 <UART_SetConfig+0x594>)
 8005226:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005228:	e00d      	b.n	8005246 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800522a:	f7fe f907 	bl	800343c <HAL_RCC_GetSysClockFreq>
 800522e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005230:	e009      	b.n	8005246 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005232:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005236:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005238:	e005      	b.n	8005246 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 800523a:	2300      	movs	r3, #0
 800523c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800523e:	2301      	movs	r3, #1
 8005240:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005244:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005246:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005248:	2b00      	cmp	r3, #0
 800524a:	f000 8089 	beq.w	8005360 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800524e:	697b      	ldr	r3, [r7, #20]
 8005250:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005252:	4a4e      	ldr	r2, [pc, #312]	@ (800538c <UART_SetConfig+0x590>)
 8005254:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005258:	461a      	mov	r2, r3
 800525a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800525c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005260:	005a      	lsls	r2, r3, #1
 8005262:	697b      	ldr	r3, [r7, #20]
 8005264:	685b      	ldr	r3, [r3, #4]
 8005266:	085b      	lsrs	r3, r3, #1
 8005268:	441a      	add	r2, r3
 800526a:	697b      	ldr	r3, [r7, #20]
 800526c:	685b      	ldr	r3, [r3, #4]
 800526e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005272:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005274:	6a3b      	ldr	r3, [r7, #32]
 8005276:	2b0f      	cmp	r3, #15
 8005278:	d916      	bls.n	80052a8 <UART_SetConfig+0x4ac>
 800527a:	6a3b      	ldr	r3, [r7, #32]
 800527c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005280:	d212      	bcs.n	80052a8 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005282:	6a3b      	ldr	r3, [r7, #32]
 8005284:	b29b      	uxth	r3, r3
 8005286:	f023 030f 	bic.w	r3, r3, #15
 800528a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800528c:	6a3b      	ldr	r3, [r7, #32]
 800528e:	085b      	lsrs	r3, r3, #1
 8005290:	b29b      	uxth	r3, r3
 8005292:	f003 0307 	and.w	r3, r3, #7
 8005296:	b29a      	uxth	r2, r3
 8005298:	8bfb      	ldrh	r3, [r7, #30]
 800529a:	4313      	orrs	r3, r2
 800529c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800529e:	697b      	ldr	r3, [r7, #20]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	8bfa      	ldrh	r2, [r7, #30]
 80052a4:	60da      	str	r2, [r3, #12]
 80052a6:	e05b      	b.n	8005360 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80052a8:	2301      	movs	r3, #1
 80052aa:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80052ae:	e057      	b.n	8005360 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 80052b0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80052b4:	2b08      	cmp	r3, #8
 80052b6:	d828      	bhi.n	800530a <UART_SetConfig+0x50e>
 80052b8:	a201      	add	r2, pc, #4	@ (adr r2, 80052c0 <UART_SetConfig+0x4c4>)
 80052ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052be:	bf00      	nop
 80052c0:	080052e5 	.word	0x080052e5
 80052c4:	080052ed 	.word	0x080052ed
 80052c8:	080052f5 	.word	0x080052f5
 80052cc:	0800530b 	.word	0x0800530b
 80052d0:	080052fb 	.word	0x080052fb
 80052d4:	0800530b 	.word	0x0800530b
 80052d8:	0800530b 	.word	0x0800530b
 80052dc:	0800530b 	.word	0x0800530b
 80052e0:	08005303 	.word	0x08005303
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80052e4:	f7fe f918 	bl	8003518 <HAL_RCC_GetPCLK1Freq>
 80052e8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80052ea:	e014      	b.n	8005316 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80052ec:	f7fe f92a 	bl	8003544 <HAL_RCC_GetPCLK2Freq>
 80052f0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80052f2:	e010      	b.n	8005316 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80052f4:	4b26      	ldr	r3, [pc, #152]	@ (8005390 <UART_SetConfig+0x594>)
 80052f6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80052f8:	e00d      	b.n	8005316 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80052fa:	f7fe f89f 	bl	800343c <HAL_RCC_GetSysClockFreq>
 80052fe:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005300:	e009      	b.n	8005316 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005302:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005306:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005308:	e005      	b.n	8005316 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800530a:	2300      	movs	r3, #0
 800530c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800530e:	2301      	movs	r3, #1
 8005310:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005314:	bf00      	nop
    }

    if (pclk != 0U)
 8005316:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005318:	2b00      	cmp	r3, #0
 800531a:	d021      	beq.n	8005360 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800531c:	697b      	ldr	r3, [r7, #20]
 800531e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005320:	4a1a      	ldr	r2, [pc, #104]	@ (800538c <UART_SetConfig+0x590>)
 8005322:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005326:	461a      	mov	r2, r3
 8005328:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800532a:	fbb3 f2f2 	udiv	r2, r3, r2
 800532e:	697b      	ldr	r3, [r7, #20]
 8005330:	685b      	ldr	r3, [r3, #4]
 8005332:	085b      	lsrs	r3, r3, #1
 8005334:	441a      	add	r2, r3
 8005336:	697b      	ldr	r3, [r7, #20]
 8005338:	685b      	ldr	r3, [r3, #4]
 800533a:	fbb2 f3f3 	udiv	r3, r2, r3
 800533e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005340:	6a3b      	ldr	r3, [r7, #32]
 8005342:	2b0f      	cmp	r3, #15
 8005344:	d909      	bls.n	800535a <UART_SetConfig+0x55e>
 8005346:	6a3b      	ldr	r3, [r7, #32]
 8005348:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800534c:	d205      	bcs.n	800535a <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800534e:	6a3b      	ldr	r3, [r7, #32]
 8005350:	b29a      	uxth	r2, r3
 8005352:	697b      	ldr	r3, [r7, #20]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	60da      	str	r2, [r3, #12]
 8005358:	e002      	b.n	8005360 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800535a:	2301      	movs	r3, #1
 800535c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005360:	697b      	ldr	r3, [r7, #20]
 8005362:	2201      	movs	r2, #1
 8005364:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8005368:	697b      	ldr	r3, [r7, #20]
 800536a:	2201      	movs	r2, #1
 800536c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005370:	697b      	ldr	r3, [r7, #20]
 8005372:	2200      	movs	r2, #0
 8005374:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005376:	697b      	ldr	r3, [r7, #20]
 8005378:	2200      	movs	r2, #0
 800537a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800537c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8005380:	4618      	mov	r0, r3
 8005382:	3730      	adds	r7, #48	@ 0x30
 8005384:	46bd      	mov	sp, r7
 8005386:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800538a:	bf00      	nop
 800538c:	080063a0 	.word	0x080063a0
 8005390:	00f42400 	.word	0x00f42400

08005394 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005394:	b480      	push	{r7}
 8005396:	b083      	sub	sp, #12
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053a0:	f003 0308 	and.w	r3, r3, #8
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d00a      	beq.n	80053be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	685b      	ldr	r3, [r3, #4]
 80053ae:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	430a      	orrs	r2, r1
 80053bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053c2:	f003 0301 	and.w	r3, r3, #1
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d00a      	beq.n	80053e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	685b      	ldr	r3, [r3, #4]
 80053d0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	430a      	orrs	r2, r1
 80053de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053e4:	f003 0302 	and.w	r3, r3, #2
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d00a      	beq.n	8005402 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	685b      	ldr	r3, [r3, #4]
 80053f2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	430a      	orrs	r2, r1
 8005400:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005406:	f003 0304 	and.w	r3, r3, #4
 800540a:	2b00      	cmp	r3, #0
 800540c:	d00a      	beq.n	8005424 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	685b      	ldr	r3, [r3, #4]
 8005414:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	430a      	orrs	r2, r1
 8005422:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005428:	f003 0310 	and.w	r3, r3, #16
 800542c:	2b00      	cmp	r3, #0
 800542e:	d00a      	beq.n	8005446 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	689b      	ldr	r3, [r3, #8]
 8005436:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	430a      	orrs	r2, r1
 8005444:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800544a:	f003 0320 	and.w	r3, r3, #32
 800544e:	2b00      	cmp	r3, #0
 8005450:	d00a      	beq.n	8005468 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	689b      	ldr	r3, [r3, #8]
 8005458:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	430a      	orrs	r2, r1
 8005466:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800546c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005470:	2b00      	cmp	r3, #0
 8005472:	d01a      	beq.n	80054aa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	685b      	ldr	r3, [r3, #4]
 800547a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	430a      	orrs	r2, r1
 8005488:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800548e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005492:	d10a      	bne.n	80054aa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	685b      	ldr	r3, [r3, #4]
 800549a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	430a      	orrs	r2, r1
 80054a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d00a      	beq.n	80054cc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	685b      	ldr	r3, [r3, #4]
 80054bc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	430a      	orrs	r2, r1
 80054ca:	605a      	str	r2, [r3, #4]
  }
}
 80054cc:	bf00      	nop
 80054ce:	370c      	adds	r7, #12
 80054d0:	46bd      	mov	sp, r7
 80054d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d6:	4770      	bx	lr

080054d8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b098      	sub	sp, #96	@ 0x60
 80054dc:	af02      	add	r7, sp, #8
 80054de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2200      	movs	r2, #0
 80054e4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80054e8:	f7fb ffd6 	bl	8001498 <HAL_GetTick>
 80054ec:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f003 0308 	and.w	r3, r3, #8
 80054f8:	2b08      	cmp	r3, #8
 80054fa:	d12f      	bne.n	800555c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80054fc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005500:	9300      	str	r3, [sp, #0]
 8005502:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005504:	2200      	movs	r2, #0
 8005506:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800550a:	6878      	ldr	r0, [r7, #4]
 800550c:	f000 f88e 	bl	800562c <UART_WaitOnFlagUntilTimeout>
 8005510:	4603      	mov	r3, r0
 8005512:	2b00      	cmp	r3, #0
 8005514:	d022      	beq.n	800555c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800551c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800551e:	e853 3f00 	ldrex	r3, [r3]
 8005522:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005524:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005526:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800552a:	653b      	str	r3, [r7, #80]	@ 0x50
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	461a      	mov	r2, r3
 8005532:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005534:	647b      	str	r3, [r7, #68]	@ 0x44
 8005536:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005538:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800553a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800553c:	e841 2300 	strex	r3, r2, [r1]
 8005540:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005542:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005544:	2b00      	cmp	r3, #0
 8005546:	d1e6      	bne.n	8005516 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2220      	movs	r2, #32
 800554c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2200      	movs	r2, #0
 8005554:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005558:	2303      	movs	r3, #3
 800555a:	e063      	b.n	8005624 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f003 0304 	and.w	r3, r3, #4
 8005566:	2b04      	cmp	r3, #4
 8005568:	d149      	bne.n	80055fe <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800556a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800556e:	9300      	str	r3, [sp, #0]
 8005570:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005572:	2200      	movs	r2, #0
 8005574:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005578:	6878      	ldr	r0, [r7, #4]
 800557a:	f000 f857 	bl	800562c <UART_WaitOnFlagUntilTimeout>
 800557e:	4603      	mov	r3, r0
 8005580:	2b00      	cmp	r3, #0
 8005582:	d03c      	beq.n	80055fe <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800558a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800558c:	e853 3f00 	ldrex	r3, [r3]
 8005590:	623b      	str	r3, [r7, #32]
   return(result);
 8005592:	6a3b      	ldr	r3, [r7, #32]
 8005594:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005598:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	461a      	mov	r2, r3
 80055a0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80055a2:	633b      	str	r3, [r7, #48]	@ 0x30
 80055a4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055a6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80055a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80055aa:	e841 2300 	strex	r3, r2, [r1]
 80055ae:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80055b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d1e6      	bne.n	8005584 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	3308      	adds	r3, #8
 80055bc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055be:	693b      	ldr	r3, [r7, #16]
 80055c0:	e853 3f00 	ldrex	r3, [r3]
 80055c4:	60fb      	str	r3, [r7, #12]
   return(result);
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	f023 0301 	bic.w	r3, r3, #1
 80055cc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	3308      	adds	r3, #8
 80055d4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80055d6:	61fa      	str	r2, [r7, #28]
 80055d8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055da:	69b9      	ldr	r1, [r7, #24]
 80055dc:	69fa      	ldr	r2, [r7, #28]
 80055de:	e841 2300 	strex	r3, r2, [r1]
 80055e2:	617b      	str	r3, [r7, #20]
   return(result);
 80055e4:	697b      	ldr	r3, [r7, #20]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d1e5      	bne.n	80055b6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2220      	movs	r2, #32
 80055ee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2200      	movs	r2, #0
 80055f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80055fa:	2303      	movs	r3, #3
 80055fc:	e012      	b.n	8005624 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2220      	movs	r2, #32
 8005602:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2220      	movs	r2, #32
 800560a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2200      	movs	r2, #0
 8005612:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2200      	movs	r2, #0
 8005618:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2200      	movs	r2, #0
 800561e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005622:	2300      	movs	r3, #0
}
 8005624:	4618      	mov	r0, r3
 8005626:	3758      	adds	r7, #88	@ 0x58
 8005628:	46bd      	mov	sp, r7
 800562a:	bd80      	pop	{r7, pc}

0800562c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800562c:	b580      	push	{r7, lr}
 800562e:	b084      	sub	sp, #16
 8005630:	af00      	add	r7, sp, #0
 8005632:	60f8      	str	r0, [r7, #12]
 8005634:	60b9      	str	r1, [r7, #8]
 8005636:	603b      	str	r3, [r7, #0]
 8005638:	4613      	mov	r3, r2
 800563a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800563c:	e04f      	b.n	80056de <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800563e:	69bb      	ldr	r3, [r7, #24]
 8005640:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005644:	d04b      	beq.n	80056de <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005646:	f7fb ff27 	bl	8001498 <HAL_GetTick>
 800564a:	4602      	mov	r2, r0
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	1ad3      	subs	r3, r2, r3
 8005650:	69ba      	ldr	r2, [r7, #24]
 8005652:	429a      	cmp	r2, r3
 8005654:	d302      	bcc.n	800565c <UART_WaitOnFlagUntilTimeout+0x30>
 8005656:	69bb      	ldr	r3, [r7, #24]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d101      	bne.n	8005660 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800565c:	2303      	movs	r3, #3
 800565e:	e04e      	b.n	80056fe <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f003 0304 	and.w	r3, r3, #4
 800566a:	2b00      	cmp	r3, #0
 800566c:	d037      	beq.n	80056de <UART_WaitOnFlagUntilTimeout+0xb2>
 800566e:	68bb      	ldr	r3, [r7, #8]
 8005670:	2b80      	cmp	r3, #128	@ 0x80
 8005672:	d034      	beq.n	80056de <UART_WaitOnFlagUntilTimeout+0xb2>
 8005674:	68bb      	ldr	r3, [r7, #8]
 8005676:	2b40      	cmp	r3, #64	@ 0x40
 8005678:	d031      	beq.n	80056de <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	69db      	ldr	r3, [r3, #28]
 8005680:	f003 0308 	and.w	r3, r3, #8
 8005684:	2b08      	cmp	r3, #8
 8005686:	d110      	bne.n	80056aa <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	2208      	movs	r2, #8
 800568e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005690:	68f8      	ldr	r0, [r7, #12]
 8005692:	f000 f838 	bl	8005706 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	2208      	movs	r2, #8
 800569a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	2200      	movs	r2, #0
 80056a2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80056a6:	2301      	movs	r3, #1
 80056a8:	e029      	b.n	80056fe <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	69db      	ldr	r3, [r3, #28]
 80056b0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80056b4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80056b8:	d111      	bne.n	80056de <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80056c2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80056c4:	68f8      	ldr	r0, [r7, #12]
 80056c6:	f000 f81e 	bl	8005706 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	2220      	movs	r2, #32
 80056ce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	2200      	movs	r2, #0
 80056d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80056da:	2303      	movs	r3, #3
 80056dc:	e00f      	b.n	80056fe <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	69da      	ldr	r2, [r3, #28]
 80056e4:	68bb      	ldr	r3, [r7, #8]
 80056e6:	4013      	ands	r3, r2
 80056e8:	68ba      	ldr	r2, [r7, #8]
 80056ea:	429a      	cmp	r2, r3
 80056ec:	bf0c      	ite	eq
 80056ee:	2301      	moveq	r3, #1
 80056f0:	2300      	movne	r3, #0
 80056f2:	b2db      	uxtb	r3, r3
 80056f4:	461a      	mov	r2, r3
 80056f6:	79fb      	ldrb	r3, [r7, #7]
 80056f8:	429a      	cmp	r2, r3
 80056fa:	d0a0      	beq.n	800563e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80056fc:	2300      	movs	r3, #0
}
 80056fe:	4618      	mov	r0, r3
 8005700:	3710      	adds	r7, #16
 8005702:	46bd      	mov	sp, r7
 8005704:	bd80      	pop	{r7, pc}

08005706 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005706:	b480      	push	{r7}
 8005708:	b095      	sub	sp, #84	@ 0x54
 800570a:	af00      	add	r7, sp, #0
 800570c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005714:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005716:	e853 3f00 	ldrex	r3, [r3]
 800571a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800571c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800571e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005722:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	461a      	mov	r2, r3
 800572a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800572c:	643b      	str	r3, [r7, #64]	@ 0x40
 800572e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005730:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005732:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005734:	e841 2300 	strex	r3, r2, [r1]
 8005738:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800573a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800573c:	2b00      	cmp	r3, #0
 800573e:	d1e6      	bne.n	800570e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	3308      	adds	r3, #8
 8005746:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005748:	6a3b      	ldr	r3, [r7, #32]
 800574a:	e853 3f00 	ldrex	r3, [r3]
 800574e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005750:	69fb      	ldr	r3, [r7, #28]
 8005752:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005756:	f023 0301 	bic.w	r3, r3, #1
 800575a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	3308      	adds	r3, #8
 8005762:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005764:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005766:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005768:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800576a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800576c:	e841 2300 	strex	r3, r2, [r1]
 8005770:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005772:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005774:	2b00      	cmp	r3, #0
 8005776:	d1e3      	bne.n	8005740 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800577c:	2b01      	cmp	r3, #1
 800577e:	d118      	bne.n	80057b2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	e853 3f00 	ldrex	r3, [r3]
 800578c:	60bb      	str	r3, [r7, #8]
   return(result);
 800578e:	68bb      	ldr	r3, [r7, #8]
 8005790:	f023 0310 	bic.w	r3, r3, #16
 8005794:	647b      	str	r3, [r7, #68]	@ 0x44
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	461a      	mov	r2, r3
 800579c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800579e:	61bb      	str	r3, [r7, #24]
 80057a0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057a2:	6979      	ldr	r1, [r7, #20]
 80057a4:	69ba      	ldr	r2, [r7, #24]
 80057a6:	e841 2300 	strex	r3, r2, [r1]
 80057aa:	613b      	str	r3, [r7, #16]
   return(result);
 80057ac:	693b      	ldr	r3, [r7, #16]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d1e6      	bne.n	8005780 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2220      	movs	r2, #32
 80057b6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	2200      	movs	r2, #0
 80057be:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2200      	movs	r2, #0
 80057c4:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80057c6:	bf00      	nop
 80057c8:	3754      	adds	r7, #84	@ 0x54
 80057ca:	46bd      	mov	sp, r7
 80057cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d0:	4770      	bx	lr

080057d2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80057d2:	b480      	push	{r7}
 80057d4:	b085      	sub	sp, #20
 80057d6:	af00      	add	r7, sp, #0
 80057d8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80057e0:	2b01      	cmp	r3, #1
 80057e2:	d101      	bne.n	80057e8 <HAL_UARTEx_DisableFifoMode+0x16>
 80057e4:	2302      	movs	r3, #2
 80057e6:	e027      	b.n	8005838 <HAL_UARTEx_DisableFifoMode+0x66>
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2201      	movs	r2, #1
 80057ec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2224      	movs	r2, #36	@ 0x24
 80057f4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	681a      	ldr	r2, [r3, #0]
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f022 0201 	bic.w	r2, r2, #1
 800580e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005816:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2200      	movs	r2, #0
 800581c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	68fa      	ldr	r2, [r7, #12]
 8005824:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2220      	movs	r2, #32
 800582a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2200      	movs	r2, #0
 8005832:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005836:	2300      	movs	r3, #0
}
 8005838:	4618      	mov	r0, r3
 800583a:	3714      	adds	r7, #20
 800583c:	46bd      	mov	sp, r7
 800583e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005842:	4770      	bx	lr

08005844 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005844:	b580      	push	{r7, lr}
 8005846:	b084      	sub	sp, #16
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
 800584c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005854:	2b01      	cmp	r3, #1
 8005856:	d101      	bne.n	800585c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005858:	2302      	movs	r3, #2
 800585a:	e02d      	b.n	80058b8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2201      	movs	r2, #1
 8005860:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2224      	movs	r2, #36	@ 0x24
 8005868:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	681a      	ldr	r2, [r3, #0]
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f022 0201 	bic.w	r2, r2, #1
 8005882:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	689b      	ldr	r3, [r3, #8]
 800588a:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	683a      	ldr	r2, [r7, #0]
 8005894:	430a      	orrs	r2, r1
 8005896:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005898:	6878      	ldr	r0, [r7, #4]
 800589a:	f000 f84f 	bl	800593c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	68fa      	ldr	r2, [r7, #12]
 80058a4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2220      	movs	r2, #32
 80058aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	2200      	movs	r2, #0
 80058b2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80058b6:	2300      	movs	r3, #0
}
 80058b8:	4618      	mov	r0, r3
 80058ba:	3710      	adds	r7, #16
 80058bc:	46bd      	mov	sp, r7
 80058be:	bd80      	pop	{r7, pc}

080058c0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b084      	sub	sp, #16
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
 80058c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80058d0:	2b01      	cmp	r3, #1
 80058d2:	d101      	bne.n	80058d8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80058d4:	2302      	movs	r3, #2
 80058d6:	e02d      	b.n	8005934 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2201      	movs	r2, #1
 80058dc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2224      	movs	r2, #36	@ 0x24
 80058e4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	681a      	ldr	r2, [r3, #0]
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f022 0201 	bic.w	r2, r2, #1
 80058fe:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	689b      	ldr	r3, [r3, #8]
 8005906:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	683a      	ldr	r2, [r7, #0]
 8005910:	430a      	orrs	r2, r1
 8005912:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005914:	6878      	ldr	r0, [r7, #4]
 8005916:	f000 f811 	bl	800593c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	68fa      	ldr	r2, [r7, #12]
 8005920:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	2220      	movs	r2, #32
 8005926:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2200      	movs	r2, #0
 800592e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005932:	2300      	movs	r3, #0
}
 8005934:	4618      	mov	r0, r3
 8005936:	3710      	adds	r7, #16
 8005938:	46bd      	mov	sp, r7
 800593a:	bd80      	pop	{r7, pc}

0800593c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800593c:	b480      	push	{r7}
 800593e:	b085      	sub	sp, #20
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005948:	2b00      	cmp	r3, #0
 800594a:	d108      	bne.n	800595e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2201      	movs	r2, #1
 8005950:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2201      	movs	r2, #1
 8005958:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800595c:	e031      	b.n	80059c2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800595e:	2308      	movs	r3, #8
 8005960:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005962:	2308      	movs	r3, #8
 8005964:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	689b      	ldr	r3, [r3, #8]
 800596c:	0e5b      	lsrs	r3, r3, #25
 800596e:	b2db      	uxtb	r3, r3
 8005970:	f003 0307 	and.w	r3, r3, #7
 8005974:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	689b      	ldr	r3, [r3, #8]
 800597c:	0f5b      	lsrs	r3, r3, #29
 800597e:	b2db      	uxtb	r3, r3
 8005980:	f003 0307 	and.w	r3, r3, #7
 8005984:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005986:	7bbb      	ldrb	r3, [r7, #14]
 8005988:	7b3a      	ldrb	r2, [r7, #12]
 800598a:	4911      	ldr	r1, [pc, #68]	@ (80059d0 <UARTEx_SetNbDataToProcess+0x94>)
 800598c:	5c8a      	ldrb	r2, [r1, r2]
 800598e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005992:	7b3a      	ldrb	r2, [r7, #12]
 8005994:	490f      	ldr	r1, [pc, #60]	@ (80059d4 <UARTEx_SetNbDataToProcess+0x98>)
 8005996:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005998:	fb93 f3f2 	sdiv	r3, r3, r2
 800599c:	b29a      	uxth	r2, r3
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80059a4:	7bfb      	ldrb	r3, [r7, #15]
 80059a6:	7b7a      	ldrb	r2, [r7, #13]
 80059a8:	4909      	ldr	r1, [pc, #36]	@ (80059d0 <UARTEx_SetNbDataToProcess+0x94>)
 80059aa:	5c8a      	ldrb	r2, [r1, r2]
 80059ac:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80059b0:	7b7a      	ldrb	r2, [r7, #13]
 80059b2:	4908      	ldr	r1, [pc, #32]	@ (80059d4 <UARTEx_SetNbDataToProcess+0x98>)
 80059b4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80059b6:	fb93 f3f2 	sdiv	r3, r3, r2
 80059ba:	b29a      	uxth	r2, r3
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80059c2:	bf00      	nop
 80059c4:	3714      	adds	r7, #20
 80059c6:	46bd      	mov	sp, r7
 80059c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059cc:	4770      	bx	lr
 80059ce:	bf00      	nop
 80059d0:	080063b8 	.word	0x080063b8
 80059d4:	080063c0 	.word	0x080063c0

080059d8 <BNO055_Init>:

//Setup Offsets


HAL_StatusTypeDef BNO055_Init(BNO055_Structure *bno, I2C_HandleTypeDef *hi2cx, uint8_t addr, OPRMode mode)
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b08a      	sub	sp, #40	@ 0x28
 80059dc:	af04      	add	r7, sp, #16
 80059de:	60f8      	str	r0, [r7, #12]
 80059e0:	60b9      	str	r1, [r7, #8]
 80059e2:	4611      	mov	r1, r2
 80059e4:	461a      	mov	r2, r3
 80059e6:	460b      	mov	r3, r1
 80059e8:	71fb      	strb	r3, [r7, #7]
 80059ea:	4613      	mov	r3, r2
 80059ec:	71bb      	strb	r3, [r7, #6]
	uint8_t txbuffer;
	uint8_t rxbuffer;

	bno->hi2cx = hi2cx;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	68ba      	ldr	r2, [r7, #8]
 80059f2:	601a      	str	r2, [r3, #0]
	bno->address = BNO055_ADD_H;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	2252      	movs	r2, #82	@ 0x52
 80059f8:	711a      	strb	r2, [r3, #4]
	if (addr == 0) bno->address = BNO055_ADD_L;
 80059fa:	79fb      	ldrb	r3, [r7, #7]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d102      	bne.n	8005a06 <BNO055_Init+0x2e>
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	2250      	movs	r2, #80	@ 0x50
 8005a04:	711a      	strb	r2, [r3, #4]

	HAL_I2C_Mem_Read(bno->hi2cx, bno->address, CHIP_ID, 1, &rxbuffer, 1, 10);
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	6818      	ldr	r0, [r3, #0]
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	791b      	ldrb	r3, [r3, #4]
 8005a0e:	4619      	mov	r1, r3
 8005a10:	230a      	movs	r3, #10
 8005a12:	9302      	str	r3, [sp, #8]
 8005a14:	2301      	movs	r3, #1
 8005a16:	9301      	str	r3, [sp, #4]
 8005a18:	f107 0316 	add.w	r3, r7, #22
 8005a1c:	9300      	str	r3, [sp, #0]
 8005a1e:	2301      	movs	r3, #1
 8005a20:	2200      	movs	r2, #0
 8005a22:	f7fc fb7b 	bl	800211c <HAL_I2C_Mem_Read>
	if (rxbuffer != 0xA0) {
 8005a26:	7dbb      	ldrb	r3, [r7, #22]
 8005a28:	2ba0      	cmp	r3, #160	@ 0xa0
 8005a2a:	d018      	beq.n	8005a5e <BNO055_Init+0x86>
		HAL_Delay(1000);
 8005a2c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8005a30:	f7fb fd3e 	bl	80014b0 <HAL_Delay>
		HAL_I2C_Mem_Read(bno->hi2cx, bno->address, CHIP_ID, 1, &rxbuffer, 1, 10);
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	6818      	ldr	r0, [r3, #0]
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	791b      	ldrb	r3, [r3, #4]
 8005a3c:	4619      	mov	r1, r3
 8005a3e:	230a      	movs	r3, #10
 8005a40:	9302      	str	r3, [sp, #8]
 8005a42:	2301      	movs	r3, #1
 8005a44:	9301      	str	r3, [sp, #4]
 8005a46:	f107 0316 	add.w	r3, r7, #22
 8005a4a:	9300      	str	r3, [sp, #0]
 8005a4c:	2301      	movs	r3, #1
 8005a4e:	2200      	movs	r2, #0
 8005a50:	f7fc fb64 	bl	800211c <HAL_I2C_Mem_Read>
		if (rxbuffer != 0xA0) return HAL_ERROR;
 8005a54:	7dbb      	ldrb	r3, [r7, #22]
 8005a56:	2ba0      	cmp	r3, #160	@ 0xa0
 8005a58:	d001      	beq.n	8005a5e <BNO055_Init+0x86>
 8005a5a:	2301      	movs	r3, #1
 8005a5c:	e099      	b.n	8005b92 <BNO055_Init+0x1ba>
	}

	txbuffer = CONFIGMODE;
 8005a5e:	2300      	movs	r3, #0
 8005a60:	75fb      	strb	r3, [r7, #23]
	HAL_I2C_Mem_Write(bno->hi2cx, bno->address, OPR_MODE, 1, &txbuffer, 1, 10);
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	6818      	ldr	r0, [r3, #0]
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	791b      	ldrb	r3, [r3, #4]
 8005a6a:	4619      	mov	r1, r3
 8005a6c:	230a      	movs	r3, #10
 8005a6e:	9302      	str	r3, [sp, #8]
 8005a70:	2301      	movs	r3, #1
 8005a72:	9301      	str	r3, [sp, #4]
 8005a74:	f107 0317 	add.w	r3, r7, #23
 8005a78:	9300      	str	r3, [sp, #0]
 8005a7a:	2301      	movs	r3, #1
 8005a7c:	223d      	movs	r2, #61	@ 0x3d
 8005a7e:	f7fc fa39 	bl	8001ef4 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8005a82:	200a      	movs	r0, #10
 8005a84:	f7fb fd14 	bl	80014b0 <HAL_Delay>

	txbuffer = 0x20;
 8005a88:	2320      	movs	r3, #32
 8005a8a:	75fb      	strb	r3, [r7, #23]
	HAL_I2C_Mem_Write(bno->hi2cx, bno->address, SYS_TRIGGER, 1, &txbuffer, 1, 10);
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	6818      	ldr	r0, [r3, #0]
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	791b      	ldrb	r3, [r3, #4]
 8005a94:	4619      	mov	r1, r3
 8005a96:	230a      	movs	r3, #10
 8005a98:	9302      	str	r3, [sp, #8]
 8005a9a:	2301      	movs	r3, #1
 8005a9c:	9301      	str	r3, [sp, #4]
 8005a9e:	f107 0317 	add.w	r3, r7, #23
 8005aa2:	9300      	str	r3, [sp, #0]
 8005aa4:	2301      	movs	r3, #1
 8005aa6:	223f      	movs	r2, #63	@ 0x3f
 8005aa8:	f7fc fa24 	bl	8001ef4 <HAL_I2C_Mem_Write>
	HAL_Delay(30);
 8005aac:	201e      	movs	r0, #30
 8005aae:	f7fb fcff 	bl	80014b0 <HAL_Delay>

	do {
		HAL_I2C_Mem_Read(bno->hi2cx, bno->address, CHIP_ID, 1, &rxbuffer, 1, 10);
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	6818      	ldr	r0, [r3, #0]
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	791b      	ldrb	r3, [r3, #4]
 8005aba:	4619      	mov	r1, r3
 8005abc:	230a      	movs	r3, #10
 8005abe:	9302      	str	r3, [sp, #8]
 8005ac0:	2301      	movs	r3, #1
 8005ac2:	9301      	str	r3, [sp, #4]
 8005ac4:	f107 0316 	add.w	r3, r7, #22
 8005ac8:	9300      	str	r3, [sp, #0]
 8005aca:	2301      	movs	r3, #1
 8005acc:	2200      	movs	r2, #0
 8005ace:	f7fc fb25 	bl	800211c <HAL_I2C_Mem_Read>
	} while (rxbuffer != 0xA0);
 8005ad2:	7dbb      	ldrb	r3, [r7, #22]
 8005ad4:	2ba0      	cmp	r3, #160	@ 0xa0
 8005ad6:	d1ec      	bne.n	8005ab2 <BNO055_Init+0xda>
	HAL_Delay(50);
 8005ad8:	2032      	movs	r0, #50	@ 0x32
 8005ada:	f7fb fce9 	bl	80014b0 <HAL_Delay>

	txbuffer = Normal_Mode;
 8005ade:	2300      	movs	r3, #0
 8005ae0:	75fb      	strb	r3, [r7, #23]
	HAL_I2C_Mem_Write(bno->hi2cx, bno->address, PWR_MODE, 1, &txbuffer, 1, 10);
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	6818      	ldr	r0, [r3, #0]
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	791b      	ldrb	r3, [r3, #4]
 8005aea:	4619      	mov	r1, r3
 8005aec:	230a      	movs	r3, #10
 8005aee:	9302      	str	r3, [sp, #8]
 8005af0:	2301      	movs	r3, #1
 8005af2:	9301      	str	r3, [sp, #4]
 8005af4:	f107 0317 	add.w	r3, r7, #23
 8005af8:	9300      	str	r3, [sp, #0]
 8005afa:	2301      	movs	r3, #1
 8005afc:	223e      	movs	r2, #62	@ 0x3e
 8005afe:	f7fc f9f9 	bl	8001ef4 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8005b02:	200a      	movs	r0, #10
 8005b04:	f7fb fcd4 	bl	80014b0 <HAL_Delay>

	txbuffer = Page_ID_00;
 8005b08:	2300      	movs	r3, #0
 8005b0a:	75fb      	strb	r3, [r7, #23]
	HAL_I2C_Mem_Write(bno->hi2cx, bno->address, PAGE_ID, 1, &txbuffer, 1, 10);
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	6818      	ldr	r0, [r3, #0]
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	791b      	ldrb	r3, [r3, #4]
 8005b14:	4619      	mov	r1, r3
 8005b16:	230a      	movs	r3, #10
 8005b18:	9302      	str	r3, [sp, #8]
 8005b1a:	2301      	movs	r3, #1
 8005b1c:	9301      	str	r3, [sp, #4]
 8005b1e:	f107 0317 	add.w	r3, r7, #23
 8005b22:	9300      	str	r3, [sp, #0]
 8005b24:	2301      	movs	r3, #1
 8005b26:	2207      	movs	r2, #7
 8005b28:	f7fc f9e4 	bl	8001ef4 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8005b2c:	200a      	movs	r0, #10
 8005b2e:	f7fb fcbf 	bl	80014b0 <HAL_Delay>

	txbuffer = 0x00;
 8005b32:	2300      	movs	r3, #0
 8005b34:	75fb      	strb	r3, [r7, #23]
	HAL_I2C_Mem_Write(bno->hi2cx, bno->address, SYS_TRIGGER, 1, &txbuffer, 1, 10);
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	6818      	ldr	r0, [r3, #0]
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	791b      	ldrb	r3, [r3, #4]
 8005b3e:	4619      	mov	r1, r3
 8005b40:	230a      	movs	r3, #10
 8005b42:	9302      	str	r3, [sp, #8]
 8005b44:	2301      	movs	r3, #1
 8005b46:	9301      	str	r3, [sp, #4]
 8005b48:	f107 0317 	add.w	r3, r7, #23
 8005b4c:	9300      	str	r3, [sp, #0]
 8005b4e:	2301      	movs	r3, #1
 8005b50:	223f      	movs	r2, #63	@ 0x3f
 8005b52:	f7fc f9cf 	bl	8001ef4 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8005b56:	200a      	movs	r0, #10
 8005b58:	f7fb fcaa 	bl	80014b0 <HAL_Delay>

	bno->mode = mode;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	79ba      	ldrb	r2, [r7, #6]
 8005b60:	715a      	strb	r2, [r3, #5]
	HAL_I2C_Mem_Write(bno->hi2cx, bno->address, OPR_MODE, 1, &bno->mode, 1, 10);
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	6818      	ldr	r0, [r3, #0]
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	791b      	ldrb	r3, [r3, #4]
 8005b6a:	4619      	mov	r1, r3
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	3305      	adds	r3, #5
 8005b70:	220a      	movs	r2, #10
 8005b72:	9202      	str	r2, [sp, #8]
 8005b74:	2201      	movs	r2, #1
 8005b76:	9201      	str	r2, [sp, #4]
 8005b78:	9300      	str	r3, [sp, #0]
 8005b7a:	2301      	movs	r3, #1
 8005b7c:	223d      	movs	r2, #61	@ 0x3d
 8005b7e:	f7fc f9b9 	bl	8001ef4 <HAL_I2C_Mem_Write>
	HAL_Delay(1000);
 8005b82:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8005b86:	f7fb fc93 	bl	80014b0 <HAL_Delay>

	bno->flag = HAL_OK;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	719a      	strb	r2, [r3, #6]

	return HAL_OK;
 8005b90:	2300      	movs	r3, #0
}
 8005b92:	4618      	mov	r0, r3
 8005b94:	3718      	adds	r7, #24
 8005b96:	46bd      	mov	sp, r7
 8005b98:	bd80      	pop	{r7, pc}

08005b9a <BNO055_getCalibration>:

void BNO055_getCalibration(BNO055_Structure *bno, uint8_t *sys, uint8_t *gyro, uint8_t *accel, uint8_t *mag)
{
 8005b9a:	b580      	push	{r7, lr}
 8005b9c:	b08a      	sub	sp, #40	@ 0x28
 8005b9e:	af04      	add	r7, sp, #16
 8005ba0:	60f8      	str	r0, [r7, #12]
 8005ba2:	60b9      	str	r1, [r7, #8]
 8005ba4:	607a      	str	r2, [r7, #4]
 8005ba6:	603b      	str	r3, [r7, #0]
	uint8_t txbuffer;
	txbuffer = Page_ID_00;
 8005ba8:	2300      	movs	r3, #0
 8005baa:	75fb      	strb	r3, [r7, #23]

	HAL_I2C_Mem_Write(bno->hi2cx, bno->address, PAGE_ID, 1, &txbuffer, 1, 10);
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	6818      	ldr	r0, [r3, #0]
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	791b      	ldrb	r3, [r3, #4]
 8005bb4:	4619      	mov	r1, r3
 8005bb6:	230a      	movs	r3, #10
 8005bb8:	9302      	str	r3, [sp, #8]
 8005bba:	2301      	movs	r3, #1
 8005bbc:	9301      	str	r3, [sp, #4]
 8005bbe:	f107 0317 	add.w	r3, r7, #23
 8005bc2:	9300      	str	r3, [sp, #0]
 8005bc4:	2301      	movs	r3, #1
 8005bc6:	2207      	movs	r2, #7
 8005bc8:	f7fc f994 	bl	8001ef4 <HAL_I2C_Mem_Write>

	HAL_Delay(10);
 8005bcc:	200a      	movs	r0, #10
 8005bce:	f7fb fc6f 	bl	80014b0 <HAL_Delay>
	HAL_I2C_Mem_Read(bno->hi2cx, bno->address, CALIB_STAT, 1, bno->RxBuffer, 1, 10);
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	6818      	ldr	r0, [r3, #0]
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	791b      	ldrb	r3, [r3, #4]
 8005bda:	4619      	mov	r1, r3
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	33b8      	adds	r3, #184	@ 0xb8
 8005be0:	220a      	movs	r2, #10
 8005be2:	9202      	str	r2, [sp, #8]
 8005be4:	2201      	movs	r2, #1
 8005be6:	9201      	str	r2, [sp, #4]
 8005be8:	9300      	str	r3, [sp, #0]
 8005bea:	2301      	movs	r3, #1
 8005bec:	2235      	movs	r2, #53	@ 0x35
 8005bee:	f7fc fa95 	bl	800211c <HAL_I2C_Mem_Read>


	if (sys != NULL) {
 8005bf2:	68bb      	ldr	r3, [r7, #8]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d006      	beq.n	8005c06 <BNO055_getCalibration+0x6c>
		*sys = (bno->RxBuffer[0] >> 6) & 0x03;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	f893 30b8 	ldrb.w	r3, [r3, #184]	@ 0xb8
 8005bfe:	099b      	lsrs	r3, r3, #6
 8005c00:	b2da      	uxtb	r2, r3
 8005c02:	68bb      	ldr	r3, [r7, #8]
 8005c04:	701a      	strb	r2, [r3, #0]
	}
	if (gyro != NULL) {
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d009      	beq.n	8005c20 <BNO055_getCalibration+0x86>
		*gyro = (bno->RxBuffer[0] >> 4) & 0x03;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	f893 30b8 	ldrb.w	r3, [r3, #184]	@ 0xb8
 8005c12:	091b      	lsrs	r3, r3, #4
 8005c14:	b2db      	uxtb	r3, r3
 8005c16:	f003 0303 	and.w	r3, r3, #3
 8005c1a:	b2da      	uxtb	r2, r3
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	701a      	strb	r2, [r3, #0]
	}
	if (accel != NULL) {
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d009      	beq.n	8005c3a <BNO055_getCalibration+0xa0>
		*accel = (bno->RxBuffer[0] >> 2) & 0x03;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	f893 30b8 	ldrb.w	r3, [r3, #184]	@ 0xb8
 8005c2c:	089b      	lsrs	r3, r3, #2
 8005c2e:	b2db      	uxtb	r3, r3
 8005c30:	f003 0303 	and.w	r3, r3, #3
 8005c34:	b2da      	uxtb	r2, r3
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	701a      	strb	r2, [r3, #0]
	}
	if (mag != NULL) {
 8005c3a:	6a3b      	ldr	r3, [r7, #32]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d007      	beq.n	8005c50 <BNO055_getCalibration+0xb6>
		*mag = bno->RxBuffer[0] & 0x03;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	f893 30b8 	ldrb.w	r3, [r3, #184]	@ 0xb8
 8005c46:	f003 0303 	and.w	r3, r3, #3
 8005c4a:	b2da      	uxtb	r2, r3
 8005c4c:	6a3b      	ldr	r3, [r7, #32]
 8005c4e:	701a      	strb	r2, [r3, #0]
	}
}
 8005c50:	bf00      	nop
 8005c52:	3718      	adds	r7, #24
 8005c54:	46bd      	mov	sp, r7
 8005c56:	bd80      	pop	{r7, pc}

08005c58 <BNO055_isFullyCalibrated>:

HAL_StatusTypeDef BNO055_isFullyCalibrated(BNO055_Structure *bno)
{
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b088      	sub	sp, #32
 8005c5c:	af04      	add	r7, sp, #16
 8005c5e:	6078      	str	r0, [r7, #4]
	uint8_t check_config = (BNO055_read8(bno, OPR_MODE) & 0x0F);
 8005c60:	213d      	movs	r1, #61	@ 0x3d
 8005c62:	6878      	ldr	r0, [r7, #4]
 8005c64:	f000 f950 	bl	8005f08 <BNO055_read8>
 8005c68:	4603      	mov	r3, r0
 8005c6a:	f003 030f 	and.w	r3, r3, #15
 8005c6e:	73fb      	strb	r3, [r7, #15]
	uint8_t txbuffer;
	txbuffer = NDOF;
 8005c70:	230c      	movs	r3, #12
 8005c72:	73bb      	strb	r3, [r7, #14]
	if (check_config != NDOF){
 8005c74:	7bfb      	ldrb	r3, [r7, #15]
 8005c76:	2b0c      	cmp	r3, #12
 8005c78:	d012      	beq.n	8005ca0 <BNO055_isFullyCalibrated+0x48>
		HAL_I2C_Mem_Write(bno->hi2cx, bno->address, OPR_MODE, 1, &txbuffer, 1, 10);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6818      	ldr	r0, [r3, #0]
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	791b      	ldrb	r3, [r3, #4]
 8005c82:	4619      	mov	r1, r3
 8005c84:	230a      	movs	r3, #10
 8005c86:	9302      	str	r3, [sp, #8]
 8005c88:	2301      	movs	r3, #1
 8005c8a:	9301      	str	r3, [sp, #4]
 8005c8c:	f107 030e 	add.w	r3, r7, #14
 8005c90:	9300      	str	r3, [sp, #0]
 8005c92:	2301      	movs	r3, #1
 8005c94:	223d      	movs	r2, #61	@ 0x3d
 8005c96:	f7fc f92d 	bl	8001ef4 <HAL_I2C_Mem_Write>
		HAL_Delay(20);
 8005c9a:	2014      	movs	r0, #20
 8005c9c:	f7fb fc08 	bl	80014b0 <HAL_Delay>
	}

	bno->mode = NDOF;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	220c      	movs	r2, #12
 8005ca4:	715a      	strb	r2, [r3, #5]
	uint8_t system, gyro, accel, mag;

	BNO055_getCalibration(bno, &system, &gyro, &accel, &mag);
 8005ca6:	f107 000b 	add.w	r0, r7, #11
 8005caa:	f107 020c 	add.w	r2, r7, #12
 8005cae:	f107 010d 	add.w	r1, r7, #13
 8005cb2:	f107 030a 	add.w	r3, r7, #10
 8005cb6:	9300      	str	r3, [sp, #0]
 8005cb8:	4603      	mov	r3, r0
 8005cba:	6878      	ldr	r0, [r7, #4]
 8005cbc:	f7ff ff6d 	bl	8005b9a <BNO055_getCalibration>

	switch(bno->mode){
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	795b      	ldrb	r3, [r3, #5]
 8005cc4:	3b01      	subs	r3, #1
 8005cc6:	2b0b      	cmp	r3, #11
 8005cc8:	f200 80fa 	bhi.w	8005ec0 <BNO055_isFullyCalibrated+0x268>
 8005ccc:	a201      	add	r2, pc, #4	@ (adr r2, 8005cd4 <BNO055_isFullyCalibrated+0x7c>)
 8005cce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cd2:	bf00      	nop
 8005cd4:	08005d05 	.word	0x08005d05
 8005cd8:	08005d0f 	.word	0x08005d0f
 8005cdc:	08005d19 	.word	0x08005d19
 8005ce0:	08005d23 	.word	0x08005d23
 8005ce4:	08005d4b 	.word	0x08005d4b
 8005ce8:	08005d73 	.word	0x08005d73
 8005cec:	08005d9b 	.word	0x08005d9b
 8005cf0:	08005dd5 	.word	0x08005dd5
 8005cf4:	08005dfd 	.word	0x08005dfd
 8005cf8:	08005e25 	.word	0x08005e25
 8005cfc:	08005e4d 	.word	0x08005e4d
 8005d00:	08005e87 	.word	0x08005e87
	case ACCONLY:
		if(accel == 3) return HAL_OK;
 8005d04:	7afb      	ldrb	r3, [r7, #11]
 8005d06:	2b03      	cmp	r3, #3
 8005d08:	d101      	bne.n	8005d0e <BNO055_isFullyCalibrated+0xb6>
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	e0f6      	b.n	8005efc <BNO055_isFullyCalibrated+0x2a4>
	case MAGONLY:
		if(mag == 3) return HAL_OK;
 8005d0e:	7abb      	ldrb	r3, [r7, #10]
 8005d10:	2b03      	cmp	r3, #3
 8005d12:	d101      	bne.n	8005d18 <BNO055_isFullyCalibrated+0xc0>
 8005d14:	2300      	movs	r3, #0
 8005d16:	e0f1      	b.n	8005efc <BNO055_isFullyCalibrated+0x2a4>
	case GYROONLY:
		if(gyro == 3) return HAL_OK;
 8005d18:	7b3b      	ldrb	r3, [r7, #12]
 8005d1a:	2b03      	cmp	r3, #3
 8005d1c:	d101      	bne.n	8005d22 <BNO055_isFullyCalibrated+0xca>
 8005d1e:	2300      	movs	r3, #0
 8005d20:	e0ec      	b.n	8005efc <BNO055_isFullyCalibrated+0x2a4>
	case ACCMAG:
		if (accel == 3) Calibrated.accel = HAL_OK;
 8005d22:	7afb      	ldrb	r3, [r7, #11]
 8005d24:	2b03      	cmp	r3, #3
 8005d26:	d102      	bne.n	8005d2e <BNO055_isFullyCalibrated+0xd6>
 8005d28:	4b76      	ldr	r3, [pc, #472]	@ (8005f04 <BNO055_isFullyCalibrated+0x2ac>)
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	701a      	strb	r2, [r3, #0]
		if (mag == 3) Calibrated.mag = HAL_OK;
 8005d2e:	7abb      	ldrb	r3, [r7, #10]
 8005d30:	2b03      	cmp	r3, #3
 8005d32:	d102      	bne.n	8005d3a <BNO055_isFullyCalibrated+0xe2>
 8005d34:	4b73      	ldr	r3, [pc, #460]	@ (8005f04 <BNO055_isFullyCalibrated+0x2ac>)
 8005d36:	2200      	movs	r2, #0
 8005d38:	705a      	strb	r2, [r3, #1]
		if(accel == 3 && mag == 3) return HAL_OK;
 8005d3a:	7afb      	ldrb	r3, [r7, #11]
 8005d3c:	2b03      	cmp	r3, #3
 8005d3e:	d104      	bne.n	8005d4a <BNO055_isFullyCalibrated+0xf2>
 8005d40:	7abb      	ldrb	r3, [r7, #10]
 8005d42:	2b03      	cmp	r3, #3
 8005d44:	d101      	bne.n	8005d4a <BNO055_isFullyCalibrated+0xf2>
 8005d46:	2300      	movs	r3, #0
 8005d48:	e0d8      	b.n	8005efc <BNO055_isFullyCalibrated+0x2a4>
	case ACCGYRO:
		if (accel == 3) Calibrated.accel = HAL_OK;
 8005d4a:	7afb      	ldrb	r3, [r7, #11]
 8005d4c:	2b03      	cmp	r3, #3
 8005d4e:	d102      	bne.n	8005d56 <BNO055_isFullyCalibrated+0xfe>
 8005d50:	4b6c      	ldr	r3, [pc, #432]	@ (8005f04 <BNO055_isFullyCalibrated+0x2ac>)
 8005d52:	2200      	movs	r2, #0
 8005d54:	701a      	strb	r2, [r3, #0]
		if (gyro) Calibrated.gyro = HAL_OK;
 8005d56:	7b3b      	ldrb	r3, [r7, #12]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d002      	beq.n	8005d62 <BNO055_isFullyCalibrated+0x10a>
 8005d5c:	4b69      	ldr	r3, [pc, #420]	@ (8005f04 <BNO055_isFullyCalibrated+0x2ac>)
 8005d5e:	2200      	movs	r2, #0
 8005d60:	709a      	strb	r2, [r3, #2]
		if(accel == 3 && gyro == 3) return HAL_OK;
 8005d62:	7afb      	ldrb	r3, [r7, #11]
 8005d64:	2b03      	cmp	r3, #3
 8005d66:	d104      	bne.n	8005d72 <BNO055_isFullyCalibrated+0x11a>
 8005d68:	7b3b      	ldrb	r3, [r7, #12]
 8005d6a:	2b03      	cmp	r3, #3
 8005d6c:	d101      	bne.n	8005d72 <BNO055_isFullyCalibrated+0x11a>
 8005d6e:	2300      	movs	r3, #0
 8005d70:	e0c4      	b.n	8005efc <BNO055_isFullyCalibrated+0x2a4>
	case MAGGYRO:
		if (mag == 3) Calibrated.mag = HAL_OK;
 8005d72:	7abb      	ldrb	r3, [r7, #10]
 8005d74:	2b03      	cmp	r3, #3
 8005d76:	d102      	bne.n	8005d7e <BNO055_isFullyCalibrated+0x126>
 8005d78:	4b62      	ldr	r3, [pc, #392]	@ (8005f04 <BNO055_isFullyCalibrated+0x2ac>)
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	705a      	strb	r2, [r3, #1]
		if (gyro == 3) Calibrated.gyro = HAL_OK;
 8005d7e:	7b3b      	ldrb	r3, [r7, #12]
 8005d80:	2b03      	cmp	r3, #3
 8005d82:	d102      	bne.n	8005d8a <BNO055_isFullyCalibrated+0x132>
 8005d84:	4b5f      	ldr	r3, [pc, #380]	@ (8005f04 <BNO055_isFullyCalibrated+0x2ac>)
 8005d86:	2200      	movs	r2, #0
 8005d88:	709a      	strb	r2, [r3, #2]
		if(mag == 3 && gyro == 3) return HAL_OK;
 8005d8a:	7abb      	ldrb	r3, [r7, #10]
 8005d8c:	2b03      	cmp	r3, #3
 8005d8e:	d104      	bne.n	8005d9a <BNO055_isFullyCalibrated+0x142>
 8005d90:	7b3b      	ldrb	r3, [r7, #12]
 8005d92:	2b03      	cmp	r3, #3
 8005d94:	d101      	bne.n	8005d9a <BNO055_isFullyCalibrated+0x142>
 8005d96:	2300      	movs	r3, #0
 8005d98:	e0b0      	b.n	8005efc <BNO055_isFullyCalibrated+0x2a4>
	case AMG:
		if (accel == 3) Calibrated.accel = HAL_OK;
 8005d9a:	7afb      	ldrb	r3, [r7, #11]
 8005d9c:	2b03      	cmp	r3, #3
 8005d9e:	d102      	bne.n	8005da6 <BNO055_isFullyCalibrated+0x14e>
 8005da0:	4b58      	ldr	r3, [pc, #352]	@ (8005f04 <BNO055_isFullyCalibrated+0x2ac>)
 8005da2:	2200      	movs	r2, #0
 8005da4:	701a      	strb	r2, [r3, #0]
		if (mag == 3) Calibrated.mag = HAL_OK;
 8005da6:	7abb      	ldrb	r3, [r7, #10]
 8005da8:	2b03      	cmp	r3, #3
 8005daa:	d102      	bne.n	8005db2 <BNO055_isFullyCalibrated+0x15a>
 8005dac:	4b55      	ldr	r3, [pc, #340]	@ (8005f04 <BNO055_isFullyCalibrated+0x2ac>)
 8005dae:	2200      	movs	r2, #0
 8005db0:	705a      	strb	r2, [r3, #1]
		if (gyro == 3) Calibrated.gyro = HAL_OK;
 8005db2:	7b3b      	ldrb	r3, [r7, #12]
 8005db4:	2b03      	cmp	r3, #3
 8005db6:	d102      	bne.n	8005dbe <BNO055_isFullyCalibrated+0x166>
 8005db8:	4b52      	ldr	r3, [pc, #328]	@ (8005f04 <BNO055_isFullyCalibrated+0x2ac>)
 8005dba:	2200      	movs	r2, #0
 8005dbc:	709a      	strb	r2, [r3, #2]
		if(accel == 3 && mag == 3 && gyro == 3) return HAL_OK;
 8005dbe:	7afb      	ldrb	r3, [r7, #11]
 8005dc0:	2b03      	cmp	r3, #3
 8005dc2:	d107      	bne.n	8005dd4 <BNO055_isFullyCalibrated+0x17c>
 8005dc4:	7abb      	ldrb	r3, [r7, #10]
 8005dc6:	2b03      	cmp	r3, #3
 8005dc8:	d104      	bne.n	8005dd4 <BNO055_isFullyCalibrated+0x17c>
 8005dca:	7b3b      	ldrb	r3, [r7, #12]
 8005dcc:	2b03      	cmp	r3, #3
 8005dce:	d101      	bne.n	8005dd4 <BNO055_isFullyCalibrated+0x17c>
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	e093      	b.n	8005efc <BNO055_isFullyCalibrated+0x2a4>
	case IMU:
		if (accel == 3) Calibrated.accel = HAL_OK;
 8005dd4:	7afb      	ldrb	r3, [r7, #11]
 8005dd6:	2b03      	cmp	r3, #3
 8005dd8:	d102      	bne.n	8005de0 <BNO055_isFullyCalibrated+0x188>
 8005dda:	4b4a      	ldr	r3, [pc, #296]	@ (8005f04 <BNO055_isFullyCalibrated+0x2ac>)
 8005ddc:	2200      	movs	r2, #0
 8005dde:	701a      	strb	r2, [r3, #0]
		if (gyro == 3) Calibrated.gyro = HAL_OK;
 8005de0:	7b3b      	ldrb	r3, [r7, #12]
 8005de2:	2b03      	cmp	r3, #3
 8005de4:	d102      	bne.n	8005dec <BNO055_isFullyCalibrated+0x194>
 8005de6:	4b47      	ldr	r3, [pc, #284]	@ (8005f04 <BNO055_isFullyCalibrated+0x2ac>)
 8005de8:	2200      	movs	r2, #0
 8005dea:	709a      	strb	r2, [r3, #2]
		if(accel == 3 && gyro == 3) return HAL_OK;
 8005dec:	7afb      	ldrb	r3, [r7, #11]
 8005dee:	2b03      	cmp	r3, #3
 8005df0:	d104      	bne.n	8005dfc <BNO055_isFullyCalibrated+0x1a4>
 8005df2:	7b3b      	ldrb	r3, [r7, #12]
 8005df4:	2b03      	cmp	r3, #3
 8005df6:	d101      	bne.n	8005dfc <BNO055_isFullyCalibrated+0x1a4>
 8005df8:	2300      	movs	r3, #0
 8005dfa:	e07f      	b.n	8005efc <BNO055_isFullyCalibrated+0x2a4>
	case COMPASS:
		if (accel == 3) Calibrated.accel = HAL_OK;
 8005dfc:	7afb      	ldrb	r3, [r7, #11]
 8005dfe:	2b03      	cmp	r3, #3
 8005e00:	d102      	bne.n	8005e08 <BNO055_isFullyCalibrated+0x1b0>
 8005e02:	4b40      	ldr	r3, [pc, #256]	@ (8005f04 <BNO055_isFullyCalibrated+0x2ac>)
 8005e04:	2200      	movs	r2, #0
 8005e06:	701a      	strb	r2, [r3, #0]
		if (mag == 3) Calibrated.mag = HAL_OK;
 8005e08:	7abb      	ldrb	r3, [r7, #10]
 8005e0a:	2b03      	cmp	r3, #3
 8005e0c:	d102      	bne.n	8005e14 <BNO055_isFullyCalibrated+0x1bc>
 8005e0e:	4b3d      	ldr	r3, [pc, #244]	@ (8005f04 <BNO055_isFullyCalibrated+0x2ac>)
 8005e10:	2200      	movs	r2, #0
 8005e12:	705a      	strb	r2, [r3, #1]
		if(accel == 3 && mag == 3) return HAL_OK;
 8005e14:	7afb      	ldrb	r3, [r7, #11]
 8005e16:	2b03      	cmp	r3, #3
 8005e18:	d104      	bne.n	8005e24 <BNO055_isFullyCalibrated+0x1cc>
 8005e1a:	7abb      	ldrb	r3, [r7, #10]
 8005e1c:	2b03      	cmp	r3, #3
 8005e1e:	d101      	bne.n	8005e24 <BNO055_isFullyCalibrated+0x1cc>
 8005e20:	2300      	movs	r3, #0
 8005e22:	e06b      	b.n	8005efc <BNO055_isFullyCalibrated+0x2a4>
	case M4G:
		if (accel == 3) Calibrated.accel = HAL_OK;
 8005e24:	7afb      	ldrb	r3, [r7, #11]
 8005e26:	2b03      	cmp	r3, #3
 8005e28:	d102      	bne.n	8005e30 <BNO055_isFullyCalibrated+0x1d8>
 8005e2a:	4b36      	ldr	r3, [pc, #216]	@ (8005f04 <BNO055_isFullyCalibrated+0x2ac>)
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	701a      	strb	r2, [r3, #0]
		if (mag == 3) Calibrated.mag = HAL_OK;
 8005e30:	7abb      	ldrb	r3, [r7, #10]
 8005e32:	2b03      	cmp	r3, #3
 8005e34:	d102      	bne.n	8005e3c <BNO055_isFullyCalibrated+0x1e4>
 8005e36:	4b33      	ldr	r3, [pc, #204]	@ (8005f04 <BNO055_isFullyCalibrated+0x2ac>)
 8005e38:	2200      	movs	r2, #0
 8005e3a:	705a      	strb	r2, [r3, #1]
		if(accel == 3 && mag == 3) return HAL_OK;
 8005e3c:	7afb      	ldrb	r3, [r7, #11]
 8005e3e:	2b03      	cmp	r3, #3
 8005e40:	d104      	bne.n	8005e4c <BNO055_isFullyCalibrated+0x1f4>
 8005e42:	7abb      	ldrb	r3, [r7, #10]
 8005e44:	2b03      	cmp	r3, #3
 8005e46:	d101      	bne.n	8005e4c <BNO055_isFullyCalibrated+0x1f4>
 8005e48:	2300      	movs	r3, #0
 8005e4a:	e057      	b.n	8005efc <BNO055_isFullyCalibrated+0x2a4>
	case NDOF_FMC_OFF:
		if (accel == 3) Calibrated.accel = HAL_OK;
 8005e4c:	7afb      	ldrb	r3, [r7, #11]
 8005e4e:	2b03      	cmp	r3, #3
 8005e50:	d102      	bne.n	8005e58 <BNO055_isFullyCalibrated+0x200>
 8005e52:	4b2c      	ldr	r3, [pc, #176]	@ (8005f04 <BNO055_isFullyCalibrated+0x2ac>)
 8005e54:	2200      	movs	r2, #0
 8005e56:	701a      	strb	r2, [r3, #0]
		if (mag == 3) Calibrated.mag = HAL_OK;
 8005e58:	7abb      	ldrb	r3, [r7, #10]
 8005e5a:	2b03      	cmp	r3, #3
 8005e5c:	d102      	bne.n	8005e64 <BNO055_isFullyCalibrated+0x20c>
 8005e5e:	4b29      	ldr	r3, [pc, #164]	@ (8005f04 <BNO055_isFullyCalibrated+0x2ac>)
 8005e60:	2200      	movs	r2, #0
 8005e62:	705a      	strb	r2, [r3, #1]
		if (gyro == 3) Calibrated.gyro = HAL_OK;
 8005e64:	7b3b      	ldrb	r3, [r7, #12]
 8005e66:	2b03      	cmp	r3, #3
 8005e68:	d102      	bne.n	8005e70 <BNO055_isFullyCalibrated+0x218>
 8005e6a:	4b26      	ldr	r3, [pc, #152]	@ (8005f04 <BNO055_isFullyCalibrated+0x2ac>)
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	709a      	strb	r2, [r3, #2]
		if(accel == 3 && mag == 3 && gyro == 3) return HAL_OK;
 8005e70:	7afb      	ldrb	r3, [r7, #11]
 8005e72:	2b03      	cmp	r3, #3
 8005e74:	d107      	bne.n	8005e86 <BNO055_isFullyCalibrated+0x22e>
 8005e76:	7abb      	ldrb	r3, [r7, #10]
 8005e78:	2b03      	cmp	r3, #3
 8005e7a:	d104      	bne.n	8005e86 <BNO055_isFullyCalibrated+0x22e>
 8005e7c:	7b3b      	ldrb	r3, [r7, #12]
 8005e7e:	2b03      	cmp	r3, #3
 8005e80:	d101      	bne.n	8005e86 <BNO055_isFullyCalibrated+0x22e>
 8005e82:	2300      	movs	r3, #0
 8005e84:	e03a      	b.n	8005efc <BNO055_isFullyCalibrated+0x2a4>
	case NDOF:
		if (accel == 3) Calibrated.accel = HAL_OK;
 8005e86:	7afb      	ldrb	r3, [r7, #11]
 8005e88:	2b03      	cmp	r3, #3
 8005e8a:	d102      	bne.n	8005e92 <BNO055_isFullyCalibrated+0x23a>
 8005e8c:	4b1d      	ldr	r3, [pc, #116]	@ (8005f04 <BNO055_isFullyCalibrated+0x2ac>)
 8005e8e:	2200      	movs	r2, #0
 8005e90:	701a      	strb	r2, [r3, #0]
		if (mag == 3) Calibrated.mag = HAL_OK;
 8005e92:	7abb      	ldrb	r3, [r7, #10]
 8005e94:	2b03      	cmp	r3, #3
 8005e96:	d102      	bne.n	8005e9e <BNO055_isFullyCalibrated+0x246>
 8005e98:	4b1a      	ldr	r3, [pc, #104]	@ (8005f04 <BNO055_isFullyCalibrated+0x2ac>)
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	705a      	strb	r2, [r3, #1]
		if (gyro == 3) Calibrated.gyro = HAL_OK;
 8005e9e:	7b3b      	ldrb	r3, [r7, #12]
 8005ea0:	2b03      	cmp	r3, #3
 8005ea2:	d102      	bne.n	8005eaa <BNO055_isFullyCalibrated+0x252>
 8005ea4:	4b17      	ldr	r3, [pc, #92]	@ (8005f04 <BNO055_isFullyCalibrated+0x2ac>)
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	709a      	strb	r2, [r3, #2]
		if(accel == 3 && mag == 3 && gyro == 3) return HAL_OK;
 8005eaa:	7afb      	ldrb	r3, [r7, #11]
 8005eac:	2b03      	cmp	r3, #3
 8005eae:	d107      	bne.n	8005ec0 <BNO055_isFullyCalibrated+0x268>
 8005eb0:	7abb      	ldrb	r3, [r7, #10]
 8005eb2:	2b03      	cmp	r3, #3
 8005eb4:	d104      	bne.n	8005ec0 <BNO055_isFullyCalibrated+0x268>
 8005eb6:	7b3b      	ldrb	r3, [r7, #12]
 8005eb8:	2b03      	cmp	r3, #3
 8005eba:	d101      	bne.n	8005ec0 <BNO055_isFullyCalibrated+0x268>
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	e01d      	b.n	8005efc <BNO055_isFullyCalibrated+0x2a4>
	default:
		if (accel == 3) Calibrated.accel = HAL_OK;
 8005ec0:	7afb      	ldrb	r3, [r7, #11]
 8005ec2:	2b03      	cmp	r3, #3
 8005ec4:	d102      	bne.n	8005ecc <BNO055_isFullyCalibrated+0x274>
 8005ec6:	4b0f      	ldr	r3, [pc, #60]	@ (8005f04 <BNO055_isFullyCalibrated+0x2ac>)
 8005ec8:	2200      	movs	r2, #0
 8005eca:	701a      	strb	r2, [r3, #0]
		if (mag == 3) Calibrated.mag = HAL_OK;
 8005ecc:	7abb      	ldrb	r3, [r7, #10]
 8005ece:	2b03      	cmp	r3, #3
 8005ed0:	d102      	bne.n	8005ed8 <BNO055_isFullyCalibrated+0x280>
 8005ed2:	4b0c      	ldr	r3, [pc, #48]	@ (8005f04 <BNO055_isFullyCalibrated+0x2ac>)
 8005ed4:	2200      	movs	r2, #0
 8005ed6:	705a      	strb	r2, [r3, #1]
		if (gyro == 3) Calibrated.gyro = HAL_OK;
 8005ed8:	7b3b      	ldrb	r3, [r7, #12]
 8005eda:	2b03      	cmp	r3, #3
 8005edc:	d102      	bne.n	8005ee4 <BNO055_isFullyCalibrated+0x28c>
 8005ede:	4b09      	ldr	r3, [pc, #36]	@ (8005f04 <BNO055_isFullyCalibrated+0x2ac>)
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	709a      	strb	r2, [r3, #2]
		if(accel == 3 && mag == 3 && gyro == 3) return HAL_OK;
 8005ee4:	7afb      	ldrb	r3, [r7, #11]
 8005ee6:	2b03      	cmp	r3, #3
 8005ee8:	d107      	bne.n	8005efa <BNO055_isFullyCalibrated+0x2a2>
 8005eea:	7abb      	ldrb	r3, [r7, #10]
 8005eec:	2b03      	cmp	r3, #3
 8005eee:	d104      	bne.n	8005efa <BNO055_isFullyCalibrated+0x2a2>
 8005ef0:	7b3b      	ldrb	r3, [r7, #12]
 8005ef2:	2b03      	cmp	r3, #3
 8005ef4:	d101      	bne.n	8005efa <BNO055_isFullyCalibrated+0x2a2>
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	e000      	b.n	8005efc <BNO055_isFullyCalibrated+0x2a4>
	}

	return HAL_ERROR;
 8005efa:	2301      	movs	r3, #1
}
 8005efc:	4618      	mov	r0, r3
 8005efe:	3710      	adds	r7, #16
 8005f00:	46bd      	mov	sp, r7
 8005f02:	bd80      	pop	{r7, pc}
 8005f04:	2000000c 	.word	0x2000000c

08005f08 <BNO055_read8>:
	HAL_I2C_Mem_Write(bno->hi2cx, bno->address, OPR_MODE, 1, mode, 1, 10);
	HAL_Delay(20);
}

uint8_t BNO055_read8(BNO055_Structure *bno, uint8_t Register_Address)
{
 8005f08:	b590      	push	{r4, r7, lr}
 8005f0a:	b089      	sub	sp, #36	@ 0x24
 8005f0c:	af04      	add	r7, sp, #16
 8005f0e:	6078      	str	r0, [r7, #4]
 8005f10:	460b      	mov	r3, r1
 8005f12:	70fb      	strb	r3, [r7, #3]
	uint16_t Register_Address_u16 = Register_Address;
 8005f14:	78fb      	ldrb	r3, [r7, #3]
 8005f16:	81fb      	strh	r3, [r7, #14]
	HAL_I2C_Mem_Read(bno->hi2cx, bno->address, Register_Address_u16, 1, bno->RxBuffer, 1, 10);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	6818      	ldr	r0, [r3, #0]
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	791b      	ldrb	r3, [r3, #4]
 8005f20:	461c      	mov	r4, r3
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	33b8      	adds	r3, #184	@ 0xb8
 8005f26:	89fa      	ldrh	r2, [r7, #14]
 8005f28:	210a      	movs	r1, #10
 8005f2a:	9102      	str	r1, [sp, #8]
 8005f2c:	2101      	movs	r1, #1
 8005f2e:	9101      	str	r1, [sp, #4]
 8005f30:	9300      	str	r3, [sp, #0]
 8005f32:	2301      	movs	r3, #1
 8005f34:	4621      	mov	r1, r4
 8005f36:	f7fc f8f1 	bl	800211c <HAL_I2C_Mem_Read>
	uint8_t Rx = bno->RxBuffer[0];
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	f893 30b8 	ldrb.w	r3, [r3, #184]	@ 0xb8
 8005f40:	737b      	strb	r3, [r7, #13]
	HAL_Delay(20);
 8005f42:	2014      	movs	r0, #20
 8005f44:	f7fb fab4 	bl	80014b0 <HAL_Delay>

	return bno->RxBuffer[0];
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	f893 30b8 	ldrb.w	r3, [r3, #184]	@ 0xb8
}
 8005f4e:	4618      	mov	r0, r3
 8005f50:	3714      	adds	r7, #20
 8005f52:	46bd      	mov	sp, r7
 8005f54:	bd90      	pop	{r4, r7, pc}

08005f56 <BNO055_getSensorOffsets>:

	return bno->RxBuffer[0];
}

HAL_StatusTypeDef BNO055_getSensorOffsets(BNO055_Structure *bno)
{
 8005f56:	b580      	push	{r7, lr}
 8005f58:	b088      	sub	sp, #32
 8005f5a:	af04      	add	r7, sp, #16
 8005f5c:	6078      	str	r0, [r7, #4]
	if (BNO055_isFullyCalibrated(bno) == HAL_OK){
 8005f5e:	6878      	ldr	r0, [r7, #4]
 8005f60:	f7ff fe7a 	bl	8005c58 <BNO055_isFullyCalibrated>
 8005f64:	4603      	mov	r3, r0
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	f040 80ed 	bne.w	8006146 <BNO055_getSensorOffsets+0x1f0>

		uint8_t check_config = (BNO055_read8(bno, OPR_MODE) & 0x0F);
 8005f6c:	213d      	movs	r1, #61	@ 0x3d
 8005f6e:	6878      	ldr	r0, [r7, #4]
 8005f70:	f7ff ffca 	bl	8005f08 <BNO055_read8>
 8005f74:	4603      	mov	r3, r0
 8005f76:	f003 030f 	and.w	r3, r3, #15
 8005f7a:	73fb      	strb	r3, [r7, #15]
		uint8_t txbuffer;
		txbuffer = CONFIGMODE;
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	73bb      	strb	r3, [r7, #14]
		if (check_config != CONFIGMODE){
 8005f80:	7bfb      	ldrb	r3, [r7, #15]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d012      	beq.n	8005fac <BNO055_getSensorOffsets+0x56>
			HAL_I2C_Mem_Write(bno->hi2cx, bno->address, OPR_MODE, 1, &txbuffer, 1, 10);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	6818      	ldr	r0, [r3, #0]
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	791b      	ldrb	r3, [r3, #4]
 8005f8e:	4619      	mov	r1, r3
 8005f90:	230a      	movs	r3, #10
 8005f92:	9302      	str	r3, [sp, #8]
 8005f94:	2301      	movs	r3, #1
 8005f96:	9301      	str	r3, [sp, #4]
 8005f98:	f107 030e 	add.w	r3, r7, #14
 8005f9c:	9300      	str	r3, [sp, #0]
 8005f9e:	2301      	movs	r3, #1
 8005fa0:	223d      	movs	r2, #61	@ 0x3d
 8005fa2:	f7fb ffa7 	bl	8001ef4 <HAL_I2C_Mem_Write>
			HAL_Delay(20);
 8005fa6:	2014      	movs	r0, #20
 8005fa8:	f7fb fa82 	bl	80014b0 <HAL_Delay>
		}

		HAL_I2C_Mem_Read(bno->hi2cx, bno->address, ACC_OFFSET_X_LSB, 1, bno->RxBuffer, 22, 10);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	6818      	ldr	r0, [r3, #0]
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	791b      	ldrb	r3, [r3, #4]
 8005fb4:	4619      	mov	r1, r3
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	33b8      	adds	r3, #184	@ 0xb8
 8005fba:	220a      	movs	r2, #10
 8005fbc:	9202      	str	r2, [sp, #8]
 8005fbe:	2216      	movs	r2, #22
 8005fc0:	9201      	str	r2, [sp, #4]
 8005fc2:	9300      	str	r3, [sp, #0]
 8005fc4:	2301      	movs	r3, #1
 8005fc6:	2255      	movs	r2, #85	@ 0x55
 8005fc8:	f7fc f8a8 	bl	800211c <HAL_I2C_Mem_Read>

		bno->offsets.accel_offset_x = ((bno->RxBuffer[1] <<8) | bno->RxBuffer[0]);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	f893 30b9 	ldrb.w	r3, [r3, #185]	@ 0xb9
 8005fd2:	021b      	lsls	r3, r3, #8
 8005fd4:	b21a      	sxth	r2, r3
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	f893 30b8 	ldrb.w	r3, [r3, #184]	@ 0xb8
 8005fdc:	b21b      	sxth	r3, r3
 8005fde:	4313      	orrs	r3, r2
 8005fe0:	b21a      	sxth	r2, r3
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	f8a3 20e4 	strh.w	r2, [r3, #228]	@ 0xe4
		bno->offsets.accel_offset_y = (bno->RxBuffer[3] <<8 | bno->RxBuffer[2]);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	f893 30bb 	ldrb.w	r3, [r3, #187]	@ 0xbb
 8005fee:	021b      	lsls	r3, r3, #8
 8005ff0:	b21a      	sxth	r2, r3
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	f893 30ba 	ldrb.w	r3, [r3, #186]	@ 0xba
 8005ff8:	b21b      	sxth	r3, r3
 8005ffa:	4313      	orrs	r3, r2
 8005ffc:	b21a      	sxth	r2, r3
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	f8a3 20e6 	strh.w	r2, [r3, #230]	@ 0xe6
		bno->offsets.accel_offset_z = (bno->RxBuffer[5] <<8 | bno->RxBuffer[4]);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	f893 30bd 	ldrb.w	r3, [r3, #189]	@ 0xbd
 800600a:	021b      	lsls	r3, r3, #8
 800600c:	b21a      	sxth	r2, r3
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	f893 30bc 	ldrb.w	r3, [r3, #188]	@ 0xbc
 8006014:	b21b      	sxth	r3, r3
 8006016:	4313      	orrs	r3, r2
 8006018:	b21a      	sxth	r2, r3
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	f8a3 20e8 	strh.w	r2, [r3, #232]	@ 0xe8
		/* Accelerometer offset end*/

		/* Magnetometer offset Start*/
		bno->offsets.mag_offset_x = (bno->RxBuffer[7] <<8 | bno->RxBuffer[6]);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	f893 30bf 	ldrb.w	r3, [r3, #191]	@ 0xbf
 8006026:	021b      	lsls	r3, r3, #8
 8006028:	b21a      	sxth	r2, r3
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	f893 30be 	ldrb.w	r3, [r3, #190]	@ 0xbe
 8006030:	b21b      	sxth	r3, r3
 8006032:	4313      	orrs	r3, r2
 8006034:	b21a      	sxth	r2, r3
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	f8a3 20ea 	strh.w	r2, [r3, #234]	@ 0xea
		bno->offsets.mag_offset_y = (bno->RxBuffer[9] <<8 | bno->RxBuffer[8]);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	f893 30c1 	ldrb.w	r3, [r3, #193]	@ 0xc1
 8006042:	021b      	lsls	r3, r3, #8
 8006044:	b21a      	sxth	r2, r3
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 800604c:	b21b      	sxth	r3, r3
 800604e:	4313      	orrs	r3, r2
 8006050:	b21a      	sxth	r2, r3
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	f8a3 20ec 	strh.w	r2, [r3, #236]	@ 0xec
		bno->offsets.mag_offset_z = (bno->RxBuffer[11] <<8 | bno->RxBuffer[10]);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	f893 30c3 	ldrb.w	r3, [r3, #195]	@ 0xc3
 800605e:	021b      	lsls	r3, r3, #8
 8006060:	b21a      	sxth	r2, r3
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	f893 30c2 	ldrb.w	r3, [r3, #194]	@ 0xc2
 8006068:	b21b      	sxth	r3, r3
 800606a:	4313      	orrs	r3, r2
 800606c:	b21a      	sxth	r2, r3
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	f8a3 20ee 	strh.w	r2, [r3, #238]	@ 0xee
		/* Magnetometer offset end*/

		/* Gyro offset Start*/
		bno->offsets.gyro_offset_x = (bno->RxBuffer[13] <<8 | bno->RxBuffer[12]);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	f893 30c5 	ldrb.w	r3, [r3, #197]	@ 0xc5
 800607a:	021b      	lsls	r3, r3, #8
 800607c:	b21a      	sxth	r2, r3
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	f893 30c4 	ldrb.w	r3, [r3, #196]	@ 0xc4
 8006084:	b21b      	sxth	r3, r3
 8006086:	4313      	orrs	r3, r2
 8006088:	b21a      	sxth	r2, r3
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	f8a3 20f0 	strh.w	r2, [r3, #240]	@ 0xf0
		bno->offsets.gyro_offset_y = (bno->RxBuffer[15] <<8 | bno->RxBuffer[14]);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	f893 30c7 	ldrb.w	r3, [r3, #199]	@ 0xc7
 8006096:	021b      	lsls	r3, r3, #8
 8006098:	b21a      	sxth	r2, r3
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	f893 30c6 	ldrb.w	r3, [r3, #198]	@ 0xc6
 80060a0:	b21b      	sxth	r3, r3
 80060a2:	4313      	orrs	r3, r2
 80060a4:	b21a      	sxth	r2, r3
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	f8a3 20f2 	strh.w	r2, [r3, #242]	@ 0xf2
		bno->offsets.gyro_offset_z = (bno->RxBuffer[17] <<8 | bno->RxBuffer[16]);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	f893 30c9 	ldrb.w	r3, [r3, #201]	@ 0xc9
 80060b2:	021b      	lsls	r3, r3, #8
 80060b4:	b21a      	sxth	r2, r3
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	f893 30c8 	ldrb.w	r3, [r3, #200]	@ 0xc8
 80060bc:	b21b      	sxth	r3, r3
 80060be:	4313      	orrs	r3, r2
 80060c0:	b21a      	sxth	r2, r3
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	f8a3 20f4 	strh.w	r2, [r3, #244]	@ 0xf4
		/* Gyro offset end*/

		/*  Accelerometer radius Start*/
		bno->offsets.accel_radius = (bno->RxBuffer[19] <<8 | bno->RxBuffer[18]);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	f893 30cb 	ldrb.w	r3, [r3, #203]	@ 0xcb
 80060ce:	021b      	lsls	r3, r3, #8
 80060d0:	b21a      	sxth	r2, r3
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	f893 30ca 	ldrb.w	r3, [r3, #202]	@ 0xca
 80060d8:	b21b      	sxth	r3, r3
 80060da:	4313      	orrs	r3, r2
 80060dc:	b21a      	sxth	r2, r3
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	f8a3 20f6 	strh.w	r2, [r3, #246]	@ 0xf6
		/*  Accelerometer radius end*/

		/*  Magnetometer radius Start*/
		bno->offsets.mag_radius = (bno->RxBuffer[21] <<8 | bno->RxBuffer[20]);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	f893 30cd 	ldrb.w	r3, [r3, #205]	@ 0xcd
 80060ea:	021b      	lsls	r3, r3, #8
 80060ec:	b21a      	sxth	r2, r3
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	f893 30cc 	ldrb.w	r3, [r3, #204]	@ 0xcc
 80060f4:	b21b      	sxth	r3, r3
 80060f6:	4313      	orrs	r3, r2
 80060f8:	b21a      	sxth	r2, r3
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8
		/*  Magnetometer radius end*/

		check_config = (BNO055_read8(bno, OPR_MODE) & 0x0F);
 8006100:	213d      	movs	r1, #61	@ 0x3d
 8006102:	6878      	ldr	r0, [r7, #4]
 8006104:	f7ff ff00 	bl	8005f08 <BNO055_read8>
 8006108:	4603      	mov	r3, r0
 800610a:	f003 030f 	and.w	r3, r3, #15
 800610e:	73fb      	strb	r3, [r7, #15]
		txbuffer = (uint8_t)bno->mode;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	795b      	ldrb	r3, [r3, #5]
 8006114:	73bb      	strb	r3, [r7, #14]
		if (check_config != CONFIGMODE){
 8006116:	7bfb      	ldrb	r3, [r7, #15]
 8006118:	2b00      	cmp	r3, #0
 800611a:	d012      	beq.n	8006142 <BNO055_getSensorOffsets+0x1ec>
			HAL_I2C_Mem_Write(bno->hi2cx, bno->address, OPR_MODE, 1, &txbuffer, 1, 10);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	6818      	ldr	r0, [r3, #0]
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	791b      	ldrb	r3, [r3, #4]
 8006124:	4619      	mov	r1, r3
 8006126:	230a      	movs	r3, #10
 8006128:	9302      	str	r3, [sp, #8]
 800612a:	2301      	movs	r3, #1
 800612c:	9301      	str	r3, [sp, #4]
 800612e:	f107 030e 	add.w	r3, r7, #14
 8006132:	9300      	str	r3, [sp, #0]
 8006134:	2301      	movs	r3, #1
 8006136:	223d      	movs	r2, #61	@ 0x3d
 8006138:	f7fb fedc 	bl	8001ef4 <HAL_I2C_Mem_Write>
			HAL_Delay(20);
 800613c:	2014      	movs	r0, #20
 800613e:	f7fb f9b7 	bl	80014b0 <HAL_Delay>
		}
		return HAL_OK;
 8006142:	2300      	movs	r3, #0
 8006144:	e000      	b.n	8006148 <BNO055_getSensorOffsets+0x1f2>
	}
	return HAL_ERROR;
 8006146:	2301      	movs	r3, #1
}
 8006148:	4618      	mov	r0, r3
 800614a:	3710      	adds	r7, #16
 800614c:	46bd      	mov	sp, r7
 800614e:	bd80      	pop	{r7, pc}

08006150 <BNO055_setSensoroffsets>:

void BNO055_setSensoroffsets(BNO055_Structure *bno)
{
 8006150:	b580      	push	{r7, lr}
 8006152:	b092      	sub	sp, #72	@ 0x48
 8006154:	af04      	add	r7, sp, #16
 8006156:	6078      	str	r0, [r7, #4]
	uint8_t check_config = (BNO055_read8(bno, OPR_MODE) & 0x0F);
 8006158:	213d      	movs	r1, #61	@ 0x3d
 800615a:	6878      	ldr	r0, [r7, #4]
 800615c:	f7ff fed4 	bl	8005f08 <BNO055_read8>
 8006160:	4603      	mov	r3, r0
 8006162:	f003 030f 	and.w	r3, r3, #15
 8006166:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	uint8_t txbuffer[40];
	txbuffer[0] = CONFIGMODE;
 800616a:	2300      	movs	r3, #0
 800616c:	733b      	strb	r3, [r7, #12]
	if (check_config != CONFIGMODE){
 800616e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006172:	2b00      	cmp	r3, #0
 8006174:	d012      	beq.n	800619c <BNO055_setSensoroffsets+0x4c>
		HAL_I2C_Mem_Write(bno->hi2cx, bno->address, OPR_MODE, 1, txbuffer, 1, 10);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6818      	ldr	r0, [r3, #0]
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	791b      	ldrb	r3, [r3, #4]
 800617e:	4619      	mov	r1, r3
 8006180:	230a      	movs	r3, #10
 8006182:	9302      	str	r3, [sp, #8]
 8006184:	2301      	movs	r3, #1
 8006186:	9301      	str	r3, [sp, #4]
 8006188:	f107 030c 	add.w	r3, r7, #12
 800618c:	9300      	str	r3, [sp, #0]
 800618e:	2301      	movs	r3, #1
 8006190:	223d      	movs	r2, #61	@ 0x3d
 8006192:	f7fb feaf 	bl	8001ef4 <HAL_I2C_Mem_Write>
		HAL_Delay(20);
 8006196:	2014      	movs	r0, #20
 8006198:	f7fb f98a 	bl	80014b0 <HAL_Delay>
	}

	txbuffer[0] = bno->offsets.accel_offset_x & 0x0FF;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	f9b3 30e4 	ldrsh.w	r3, [r3, #228]	@ 0xe4
 80061a2:	b2db      	uxtb	r3, r3
 80061a4:	733b      	strb	r3, [r7, #12]
	txbuffer[1] = (bno->offsets.accel_offset_x >> 8) & 0x0FF;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	f9b3 30e4 	ldrsh.w	r3, [r3, #228]	@ 0xe4
 80061ac:	121b      	asrs	r3, r3, #8
 80061ae:	b21b      	sxth	r3, r3
 80061b0:	b2db      	uxtb	r3, r3
 80061b2:	737b      	strb	r3, [r7, #13]
	txbuffer[2] = bno->offsets.accel_offset_y & 0x0FF;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	f9b3 30e6 	ldrsh.w	r3, [r3, #230]	@ 0xe6
 80061ba:	b2db      	uxtb	r3, r3
 80061bc:	73bb      	strb	r3, [r7, #14]
	txbuffer[3] = (bno->offsets.accel_offset_y >> 8) & 0x0FF;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	f9b3 30e6 	ldrsh.w	r3, [r3, #230]	@ 0xe6
 80061c4:	121b      	asrs	r3, r3, #8
 80061c6:	b21b      	sxth	r3, r3
 80061c8:	b2db      	uxtb	r3, r3
 80061ca:	73fb      	strb	r3, [r7, #15]
	txbuffer[4] = bno->offsets.accel_offset_z & 0x0FF;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	f9b3 30e8 	ldrsh.w	r3, [r3, #232]	@ 0xe8
 80061d2:	b2db      	uxtb	r3, r3
 80061d4:	743b      	strb	r3, [r7, #16]
	txbuffer[5] = (bno->offsets.accel_offset_z >> 8) & 0x0FF;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	f9b3 30e8 	ldrsh.w	r3, [r3, #232]	@ 0xe8
 80061dc:	121b      	asrs	r3, r3, #8
 80061de:	b21b      	sxth	r3, r3
 80061e0:	b2db      	uxtb	r3, r3
 80061e2:	747b      	strb	r3, [r7, #17]
	txbuffer[6] = bno->offsets.mag_offset_x & 0x0FF;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	f9b3 30ea 	ldrsh.w	r3, [r3, #234]	@ 0xea
 80061ea:	b2db      	uxtb	r3, r3
 80061ec:	74bb      	strb	r3, [r7, #18]
	txbuffer[7] = (bno->offsets.mag_offset_x >> 8) & 0x0FF;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	f9b3 30ea 	ldrsh.w	r3, [r3, #234]	@ 0xea
 80061f4:	121b      	asrs	r3, r3, #8
 80061f6:	b21b      	sxth	r3, r3
 80061f8:	b2db      	uxtb	r3, r3
 80061fa:	74fb      	strb	r3, [r7, #19]
	txbuffer[8] = bno->offsets.mag_offset_y & 0x0FF;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	f9b3 30ec 	ldrsh.w	r3, [r3, #236]	@ 0xec
 8006202:	b2db      	uxtb	r3, r3
 8006204:	753b      	strb	r3, [r7, #20]
	txbuffer[9] = (bno->offsets.mag_offset_y >> 8) & 0x0FF;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	f9b3 30ec 	ldrsh.w	r3, [r3, #236]	@ 0xec
 800620c:	121b      	asrs	r3, r3, #8
 800620e:	b21b      	sxth	r3, r3
 8006210:	b2db      	uxtb	r3, r3
 8006212:	757b      	strb	r3, [r7, #21]
	txbuffer[10] = bno->offsets.mag_offset_z & 0x0FF;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	f9b3 30ee 	ldrsh.w	r3, [r3, #238]	@ 0xee
 800621a:	b2db      	uxtb	r3, r3
 800621c:	75bb      	strb	r3, [r7, #22]
	txbuffer[11] = (bno->offsets.mag_offset_z >> 8) & 0x0FF;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	f9b3 30ee 	ldrsh.w	r3, [r3, #238]	@ 0xee
 8006224:	121b      	asrs	r3, r3, #8
 8006226:	b21b      	sxth	r3, r3
 8006228:	b2db      	uxtb	r3, r3
 800622a:	75fb      	strb	r3, [r7, #23]
	txbuffer[12] = bno->offsets.gyro_offset_x & 0x0FF;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	f9b3 30f0 	ldrsh.w	r3, [r3, #240]	@ 0xf0
 8006232:	b2db      	uxtb	r3, r3
 8006234:	763b      	strb	r3, [r7, #24]
	txbuffer[13] = (bno->offsets.gyro_offset_x >> 8) & 0x0FF;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	f9b3 30f0 	ldrsh.w	r3, [r3, #240]	@ 0xf0
 800623c:	121b      	asrs	r3, r3, #8
 800623e:	b21b      	sxth	r3, r3
 8006240:	b2db      	uxtb	r3, r3
 8006242:	767b      	strb	r3, [r7, #25]
	txbuffer[14] = bno->offsets.gyro_offset_y & 0x0FF;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	f9b3 30f2 	ldrsh.w	r3, [r3, #242]	@ 0xf2
 800624a:	b2db      	uxtb	r3, r3
 800624c:	76bb      	strb	r3, [r7, #26]
	txbuffer[15] = (bno->offsets.gyro_offset_y >> 8) & 0x0FF;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	f9b3 30f2 	ldrsh.w	r3, [r3, #242]	@ 0xf2
 8006254:	121b      	asrs	r3, r3, #8
 8006256:	b21b      	sxth	r3, r3
 8006258:	b2db      	uxtb	r3, r3
 800625a:	76fb      	strb	r3, [r7, #27]
	txbuffer[16] = bno->offsets.gyro_offset_z & 0x0FF;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	f9b3 30f4 	ldrsh.w	r3, [r3, #244]	@ 0xf4
 8006262:	b2db      	uxtb	r3, r3
 8006264:	773b      	strb	r3, [r7, #28]
	txbuffer[17] = (bno->offsets.gyro_offset_z >> 8) & 0x0FF;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	f9b3 30f4 	ldrsh.w	r3, [r3, #244]	@ 0xf4
 800626c:	121b      	asrs	r3, r3, #8
 800626e:	b21b      	sxth	r3, r3
 8006270:	b2db      	uxtb	r3, r3
 8006272:	777b      	strb	r3, [r7, #29]
	txbuffer[18] = bno->offsets.accel_radius & 0x0FF;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	f9b3 30f6 	ldrsh.w	r3, [r3, #246]	@ 0xf6
 800627a:	b2db      	uxtb	r3, r3
 800627c:	77bb      	strb	r3, [r7, #30]
	txbuffer[19] = (bno->offsets.accel_radius >> 8) & 0x0FF;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	f9b3 30f6 	ldrsh.w	r3, [r3, #246]	@ 0xf6
 8006284:	121b      	asrs	r3, r3, #8
 8006286:	b21b      	sxth	r3, r3
 8006288:	b2db      	uxtb	r3, r3
 800628a:	77fb      	strb	r3, [r7, #31]
	txbuffer[20] = bno->offsets.mag_radius & 0x0FF;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	f9b3 30f8 	ldrsh.w	r3, [r3, #248]	@ 0xf8
 8006292:	b2db      	uxtb	r3, r3
 8006294:	f887 3020 	strb.w	r3, [r7, #32]
	txbuffer[21] = (bno->offsets.mag_radius >> 8) & 0x0FF;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	f9b3 30f8 	ldrsh.w	r3, [r3, #248]	@ 0xf8
 800629e:	121b      	asrs	r3, r3, #8
 80062a0:	b21b      	sxth	r3, r3
 80062a2:	b2db      	uxtb	r3, r3
 80062a4:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21

	HAL_I2C_Mem_Write(bno->hi2cx, bno->address, ACC_OFFSET_X_LSB, 1, txbuffer, 22, 10);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	6818      	ldr	r0, [r3, #0]
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	791b      	ldrb	r3, [r3, #4]
 80062b0:	4619      	mov	r1, r3
 80062b2:	230a      	movs	r3, #10
 80062b4:	9302      	str	r3, [sp, #8]
 80062b6:	2316      	movs	r3, #22
 80062b8:	9301      	str	r3, [sp, #4]
 80062ba:	f107 030c 	add.w	r3, r7, #12
 80062be:	9300      	str	r3, [sp, #0]
 80062c0:	2301      	movs	r3, #1
 80062c2:	2255      	movs	r2, #85	@ 0x55
 80062c4:	f7fb fe16 	bl	8001ef4 <HAL_I2C_Mem_Write>
//	BNO055_write8(bno, ACC_RADIUS_MSB, (bno->offsets.accel_radius >> 8) & 0x0FF);
//
//	BNO055_write8(bno, MAG_RADIUS_LSB, (bno->offsets.mag_radius) & 0x0FF);
//	BNO055_write8(bno, MAG_RADIUS_MSB, (bno->offsets.mag_radius >> 8) & 0x0FF);

	check_config = (BNO055_read8(bno, OPR_MODE) & 0x0F);
 80062c8:	213d      	movs	r1, #61	@ 0x3d
 80062ca:	6878      	ldr	r0, [r7, #4]
 80062cc:	f7ff fe1c 	bl	8005f08 <BNO055_read8>
 80062d0:	4603      	mov	r3, r0
 80062d2:	f003 030f 	and.w	r3, r3, #15
 80062d6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	txbuffer[0] = (uint8_t)bno->mode;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	795b      	ldrb	r3, [r3, #5]
 80062de:	733b      	strb	r3, [r7, #12]
	if (check_config != CONFIGMODE){
 80062e0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d012      	beq.n	800630e <BNO055_setSensoroffsets+0x1be>
		HAL_I2C_Mem_Write(bno->hi2cx, bno->address, OPR_MODE, 1, txbuffer, 1, 10);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	6818      	ldr	r0, [r3, #0]
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	791b      	ldrb	r3, [r3, #4]
 80062f0:	4619      	mov	r1, r3
 80062f2:	230a      	movs	r3, #10
 80062f4:	9302      	str	r3, [sp, #8]
 80062f6:	2301      	movs	r3, #1
 80062f8:	9301      	str	r3, [sp, #4]
 80062fa:	f107 030c 	add.w	r3, r7, #12
 80062fe:	9300      	str	r3, [sp, #0]
 8006300:	2301      	movs	r3, #1
 8006302:	223d      	movs	r2, #61	@ 0x3d
 8006304:	f7fb fdf6 	bl	8001ef4 <HAL_I2C_Mem_Write>
		HAL_Delay(20);
 8006308:	2014      	movs	r0, #20
 800630a:	f7fb f8d1 	bl	80014b0 <HAL_Delay>
	}
}
 800630e:	bf00      	nop
 8006310:	3738      	adds	r7, #56	@ 0x38
 8006312:	46bd      	mov	sp, r7
 8006314:	bd80      	pop	{r7, pc}

08006316 <memset>:
 8006316:	4402      	add	r2, r0
 8006318:	4603      	mov	r3, r0
 800631a:	4293      	cmp	r3, r2
 800631c:	d100      	bne.n	8006320 <memset+0xa>
 800631e:	4770      	bx	lr
 8006320:	f803 1b01 	strb.w	r1, [r3], #1
 8006324:	e7f9      	b.n	800631a <memset+0x4>
	...

08006328 <__libc_init_array>:
 8006328:	b570      	push	{r4, r5, r6, lr}
 800632a:	4d0d      	ldr	r5, [pc, #52]	@ (8006360 <__libc_init_array+0x38>)
 800632c:	4c0d      	ldr	r4, [pc, #52]	@ (8006364 <__libc_init_array+0x3c>)
 800632e:	1b64      	subs	r4, r4, r5
 8006330:	10a4      	asrs	r4, r4, #2
 8006332:	2600      	movs	r6, #0
 8006334:	42a6      	cmp	r6, r4
 8006336:	d109      	bne.n	800634c <__libc_init_array+0x24>
 8006338:	4d0b      	ldr	r5, [pc, #44]	@ (8006368 <__libc_init_array+0x40>)
 800633a:	4c0c      	ldr	r4, [pc, #48]	@ (800636c <__libc_init_array+0x44>)
 800633c:	f000 f818 	bl	8006370 <_init>
 8006340:	1b64      	subs	r4, r4, r5
 8006342:	10a4      	asrs	r4, r4, #2
 8006344:	2600      	movs	r6, #0
 8006346:	42a6      	cmp	r6, r4
 8006348:	d105      	bne.n	8006356 <__libc_init_array+0x2e>
 800634a:	bd70      	pop	{r4, r5, r6, pc}
 800634c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006350:	4798      	blx	r3
 8006352:	3601      	adds	r6, #1
 8006354:	e7ee      	b.n	8006334 <__libc_init_array+0xc>
 8006356:	f855 3b04 	ldr.w	r3, [r5], #4
 800635a:	4798      	blx	r3
 800635c:	3601      	adds	r6, #1
 800635e:	e7f2      	b.n	8006346 <__libc_init_array+0x1e>
 8006360:	080063d0 	.word	0x080063d0
 8006364:	080063d0 	.word	0x080063d0
 8006368:	080063d0 	.word	0x080063d0
 800636c:	080063d4 	.word	0x080063d4

08006370 <_init>:
 8006370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006372:	bf00      	nop
 8006374:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006376:	bc08      	pop	{r3}
 8006378:	469e      	mov	lr, r3
 800637a:	4770      	bx	lr

0800637c <_fini>:
 800637c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800637e:	bf00      	nop
 8006380:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006382:	bc08      	pop	{r3}
 8006384:	469e      	mov	lr, r3
 8006386:	4770      	bx	lr
