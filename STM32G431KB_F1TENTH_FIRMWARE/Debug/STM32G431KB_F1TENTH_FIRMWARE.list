
STM32G431KB_F1TENTH_FIRMWARE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006650  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08006828  08006828  00007828  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006868  08006868  0000800c  2**0
                  CONTENTS
  4 .ARM          00000008  08006868  08006868  00007868  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006870  08006870  0000800c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006870  08006870  00007870  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006874  08006874  00007874  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08006878  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003ac  2000000c  08006884  0000800c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003b8  08006884  000083b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000800c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000178a7  00000000  00000000  0000803c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000030f3  00000000  00000000  0001f8e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001420  00000000  00000000  000229d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000fc3  00000000  00000000  00023df8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e78d  00000000  00000000  00024dbb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a898  00000000  00000000  00043548  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c607a  00000000  00000000  0005dde0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00123e5a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000055b4  00000000  00000000  00123ea0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000094  00000000  00000000  00129454  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08006810 	.word	0x08006810

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08006810 	.word	0x08006810

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__aeabi_d2f>:
 80009b4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009b8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80009bc:	bf24      	itt	cs
 80009be:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 80009c2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 80009c6:	d90d      	bls.n	80009e4 <__aeabi_d2f+0x30>
 80009c8:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80009cc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009d0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009d4:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80009d8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009dc:	bf08      	it	eq
 80009de:	f020 0001 	biceq.w	r0, r0, #1
 80009e2:	4770      	bx	lr
 80009e4:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 80009e8:	d121      	bne.n	8000a2e <__aeabi_d2f+0x7a>
 80009ea:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 80009ee:	bfbc      	itt	lt
 80009f0:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80009f4:	4770      	bxlt	lr
 80009f6:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009fe:	f1c2 0218 	rsb	r2, r2, #24
 8000a02:	f1c2 0c20 	rsb	ip, r2, #32
 8000a06:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a0a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a0e:	bf18      	it	ne
 8000a10:	f040 0001 	orrne.w	r0, r0, #1
 8000a14:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a18:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a1c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a20:	ea40 000c 	orr.w	r0, r0, ip
 8000a24:	fa23 f302 	lsr.w	r3, r3, r2
 8000a28:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a2c:	e7cc      	b.n	80009c8 <__aeabi_d2f+0x14>
 8000a2e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a32:	d107      	bne.n	8000a44 <__aeabi_d2f+0x90>
 8000a34:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a38:	bf1e      	ittt	ne
 8000a3a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000a3e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000a42:	4770      	bxne	lr
 8000a44:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000a48:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a4c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop

08000a54 <__aeabi_uldivmod>:
 8000a54:	b953      	cbnz	r3, 8000a6c <__aeabi_uldivmod+0x18>
 8000a56:	b94a      	cbnz	r2, 8000a6c <__aeabi_uldivmod+0x18>
 8000a58:	2900      	cmp	r1, #0
 8000a5a:	bf08      	it	eq
 8000a5c:	2800      	cmpeq	r0, #0
 8000a5e:	bf1c      	itt	ne
 8000a60:	f04f 31ff 	movne.w	r1, #4294967295
 8000a64:	f04f 30ff 	movne.w	r0, #4294967295
 8000a68:	f000 b96a 	b.w	8000d40 <__aeabi_idiv0>
 8000a6c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a70:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a74:	f000 f806 	bl	8000a84 <__udivmoddi4>
 8000a78:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a7c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a80:	b004      	add	sp, #16
 8000a82:	4770      	bx	lr

08000a84 <__udivmoddi4>:
 8000a84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a88:	9d08      	ldr	r5, [sp, #32]
 8000a8a:	460c      	mov	r4, r1
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d14e      	bne.n	8000b2e <__udivmoddi4+0xaa>
 8000a90:	4694      	mov	ip, r2
 8000a92:	458c      	cmp	ip, r1
 8000a94:	4686      	mov	lr, r0
 8000a96:	fab2 f282 	clz	r2, r2
 8000a9a:	d962      	bls.n	8000b62 <__udivmoddi4+0xde>
 8000a9c:	b14a      	cbz	r2, 8000ab2 <__udivmoddi4+0x2e>
 8000a9e:	f1c2 0320 	rsb	r3, r2, #32
 8000aa2:	4091      	lsls	r1, r2
 8000aa4:	fa20 f303 	lsr.w	r3, r0, r3
 8000aa8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000aac:	4319      	orrs	r1, r3
 8000aae:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ab2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ab6:	fa1f f68c 	uxth.w	r6, ip
 8000aba:	fbb1 f4f7 	udiv	r4, r1, r7
 8000abe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ac2:	fb07 1114 	mls	r1, r7, r4, r1
 8000ac6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000aca:	fb04 f106 	mul.w	r1, r4, r6
 8000ace:	4299      	cmp	r1, r3
 8000ad0:	d90a      	bls.n	8000ae8 <__udivmoddi4+0x64>
 8000ad2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ad6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000ada:	f080 8112 	bcs.w	8000d02 <__udivmoddi4+0x27e>
 8000ade:	4299      	cmp	r1, r3
 8000ae0:	f240 810f 	bls.w	8000d02 <__udivmoddi4+0x27e>
 8000ae4:	3c02      	subs	r4, #2
 8000ae6:	4463      	add	r3, ip
 8000ae8:	1a59      	subs	r1, r3, r1
 8000aea:	fa1f f38e 	uxth.w	r3, lr
 8000aee:	fbb1 f0f7 	udiv	r0, r1, r7
 8000af2:	fb07 1110 	mls	r1, r7, r0, r1
 8000af6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000afa:	fb00 f606 	mul.w	r6, r0, r6
 8000afe:	429e      	cmp	r6, r3
 8000b00:	d90a      	bls.n	8000b18 <__udivmoddi4+0x94>
 8000b02:	eb1c 0303 	adds.w	r3, ip, r3
 8000b06:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b0a:	f080 80fc 	bcs.w	8000d06 <__udivmoddi4+0x282>
 8000b0e:	429e      	cmp	r6, r3
 8000b10:	f240 80f9 	bls.w	8000d06 <__udivmoddi4+0x282>
 8000b14:	4463      	add	r3, ip
 8000b16:	3802      	subs	r0, #2
 8000b18:	1b9b      	subs	r3, r3, r6
 8000b1a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b1e:	2100      	movs	r1, #0
 8000b20:	b11d      	cbz	r5, 8000b2a <__udivmoddi4+0xa6>
 8000b22:	40d3      	lsrs	r3, r2
 8000b24:	2200      	movs	r2, #0
 8000b26:	e9c5 3200 	strd	r3, r2, [r5]
 8000b2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b2e:	428b      	cmp	r3, r1
 8000b30:	d905      	bls.n	8000b3e <__udivmoddi4+0xba>
 8000b32:	b10d      	cbz	r5, 8000b38 <__udivmoddi4+0xb4>
 8000b34:	e9c5 0100 	strd	r0, r1, [r5]
 8000b38:	2100      	movs	r1, #0
 8000b3a:	4608      	mov	r0, r1
 8000b3c:	e7f5      	b.n	8000b2a <__udivmoddi4+0xa6>
 8000b3e:	fab3 f183 	clz	r1, r3
 8000b42:	2900      	cmp	r1, #0
 8000b44:	d146      	bne.n	8000bd4 <__udivmoddi4+0x150>
 8000b46:	42a3      	cmp	r3, r4
 8000b48:	d302      	bcc.n	8000b50 <__udivmoddi4+0xcc>
 8000b4a:	4290      	cmp	r0, r2
 8000b4c:	f0c0 80f0 	bcc.w	8000d30 <__udivmoddi4+0x2ac>
 8000b50:	1a86      	subs	r6, r0, r2
 8000b52:	eb64 0303 	sbc.w	r3, r4, r3
 8000b56:	2001      	movs	r0, #1
 8000b58:	2d00      	cmp	r5, #0
 8000b5a:	d0e6      	beq.n	8000b2a <__udivmoddi4+0xa6>
 8000b5c:	e9c5 6300 	strd	r6, r3, [r5]
 8000b60:	e7e3      	b.n	8000b2a <__udivmoddi4+0xa6>
 8000b62:	2a00      	cmp	r2, #0
 8000b64:	f040 8090 	bne.w	8000c88 <__udivmoddi4+0x204>
 8000b68:	eba1 040c 	sub.w	r4, r1, ip
 8000b6c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b70:	fa1f f78c 	uxth.w	r7, ip
 8000b74:	2101      	movs	r1, #1
 8000b76:	fbb4 f6f8 	udiv	r6, r4, r8
 8000b7a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b7e:	fb08 4416 	mls	r4, r8, r6, r4
 8000b82:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b86:	fb07 f006 	mul.w	r0, r7, r6
 8000b8a:	4298      	cmp	r0, r3
 8000b8c:	d908      	bls.n	8000ba0 <__udivmoddi4+0x11c>
 8000b8e:	eb1c 0303 	adds.w	r3, ip, r3
 8000b92:	f106 34ff 	add.w	r4, r6, #4294967295
 8000b96:	d202      	bcs.n	8000b9e <__udivmoddi4+0x11a>
 8000b98:	4298      	cmp	r0, r3
 8000b9a:	f200 80cd 	bhi.w	8000d38 <__udivmoddi4+0x2b4>
 8000b9e:	4626      	mov	r6, r4
 8000ba0:	1a1c      	subs	r4, r3, r0
 8000ba2:	fa1f f38e 	uxth.w	r3, lr
 8000ba6:	fbb4 f0f8 	udiv	r0, r4, r8
 8000baa:	fb08 4410 	mls	r4, r8, r0, r4
 8000bae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bb2:	fb00 f707 	mul.w	r7, r0, r7
 8000bb6:	429f      	cmp	r7, r3
 8000bb8:	d908      	bls.n	8000bcc <__udivmoddi4+0x148>
 8000bba:	eb1c 0303 	adds.w	r3, ip, r3
 8000bbe:	f100 34ff 	add.w	r4, r0, #4294967295
 8000bc2:	d202      	bcs.n	8000bca <__udivmoddi4+0x146>
 8000bc4:	429f      	cmp	r7, r3
 8000bc6:	f200 80b0 	bhi.w	8000d2a <__udivmoddi4+0x2a6>
 8000bca:	4620      	mov	r0, r4
 8000bcc:	1bdb      	subs	r3, r3, r7
 8000bce:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bd2:	e7a5      	b.n	8000b20 <__udivmoddi4+0x9c>
 8000bd4:	f1c1 0620 	rsb	r6, r1, #32
 8000bd8:	408b      	lsls	r3, r1
 8000bda:	fa22 f706 	lsr.w	r7, r2, r6
 8000bde:	431f      	orrs	r7, r3
 8000be0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000be4:	fa04 f301 	lsl.w	r3, r4, r1
 8000be8:	ea43 030c 	orr.w	r3, r3, ip
 8000bec:	40f4      	lsrs	r4, r6
 8000bee:	fa00 f801 	lsl.w	r8, r0, r1
 8000bf2:	0c38      	lsrs	r0, r7, #16
 8000bf4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000bf8:	fbb4 fef0 	udiv	lr, r4, r0
 8000bfc:	fa1f fc87 	uxth.w	ip, r7
 8000c00:	fb00 441e 	mls	r4, r0, lr, r4
 8000c04:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c08:	fb0e f90c 	mul.w	r9, lr, ip
 8000c0c:	45a1      	cmp	r9, r4
 8000c0e:	fa02 f201 	lsl.w	r2, r2, r1
 8000c12:	d90a      	bls.n	8000c2a <__udivmoddi4+0x1a6>
 8000c14:	193c      	adds	r4, r7, r4
 8000c16:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000c1a:	f080 8084 	bcs.w	8000d26 <__udivmoddi4+0x2a2>
 8000c1e:	45a1      	cmp	r9, r4
 8000c20:	f240 8081 	bls.w	8000d26 <__udivmoddi4+0x2a2>
 8000c24:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c28:	443c      	add	r4, r7
 8000c2a:	eba4 0409 	sub.w	r4, r4, r9
 8000c2e:	fa1f f983 	uxth.w	r9, r3
 8000c32:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c36:	fb00 4413 	mls	r4, r0, r3, r4
 8000c3a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c3e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c42:	45a4      	cmp	ip, r4
 8000c44:	d907      	bls.n	8000c56 <__udivmoddi4+0x1d2>
 8000c46:	193c      	adds	r4, r7, r4
 8000c48:	f103 30ff 	add.w	r0, r3, #4294967295
 8000c4c:	d267      	bcs.n	8000d1e <__udivmoddi4+0x29a>
 8000c4e:	45a4      	cmp	ip, r4
 8000c50:	d965      	bls.n	8000d1e <__udivmoddi4+0x29a>
 8000c52:	3b02      	subs	r3, #2
 8000c54:	443c      	add	r4, r7
 8000c56:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000c5a:	fba0 9302 	umull	r9, r3, r0, r2
 8000c5e:	eba4 040c 	sub.w	r4, r4, ip
 8000c62:	429c      	cmp	r4, r3
 8000c64:	46ce      	mov	lr, r9
 8000c66:	469c      	mov	ip, r3
 8000c68:	d351      	bcc.n	8000d0e <__udivmoddi4+0x28a>
 8000c6a:	d04e      	beq.n	8000d0a <__udivmoddi4+0x286>
 8000c6c:	b155      	cbz	r5, 8000c84 <__udivmoddi4+0x200>
 8000c6e:	ebb8 030e 	subs.w	r3, r8, lr
 8000c72:	eb64 040c 	sbc.w	r4, r4, ip
 8000c76:	fa04 f606 	lsl.w	r6, r4, r6
 8000c7a:	40cb      	lsrs	r3, r1
 8000c7c:	431e      	orrs	r6, r3
 8000c7e:	40cc      	lsrs	r4, r1
 8000c80:	e9c5 6400 	strd	r6, r4, [r5]
 8000c84:	2100      	movs	r1, #0
 8000c86:	e750      	b.n	8000b2a <__udivmoddi4+0xa6>
 8000c88:	f1c2 0320 	rsb	r3, r2, #32
 8000c8c:	fa20 f103 	lsr.w	r1, r0, r3
 8000c90:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c94:	fa24 f303 	lsr.w	r3, r4, r3
 8000c98:	4094      	lsls	r4, r2
 8000c9a:	430c      	orrs	r4, r1
 8000c9c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ca0:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ca4:	fa1f f78c 	uxth.w	r7, ip
 8000ca8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cac:	fb08 3110 	mls	r1, r8, r0, r3
 8000cb0:	0c23      	lsrs	r3, r4, #16
 8000cb2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cb6:	fb00 f107 	mul.w	r1, r0, r7
 8000cba:	4299      	cmp	r1, r3
 8000cbc:	d908      	bls.n	8000cd0 <__udivmoddi4+0x24c>
 8000cbe:	eb1c 0303 	adds.w	r3, ip, r3
 8000cc2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000cc6:	d22c      	bcs.n	8000d22 <__udivmoddi4+0x29e>
 8000cc8:	4299      	cmp	r1, r3
 8000cca:	d92a      	bls.n	8000d22 <__udivmoddi4+0x29e>
 8000ccc:	3802      	subs	r0, #2
 8000cce:	4463      	add	r3, ip
 8000cd0:	1a5b      	subs	r3, r3, r1
 8000cd2:	b2a4      	uxth	r4, r4
 8000cd4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000cd8:	fb08 3311 	mls	r3, r8, r1, r3
 8000cdc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ce0:	fb01 f307 	mul.w	r3, r1, r7
 8000ce4:	42a3      	cmp	r3, r4
 8000ce6:	d908      	bls.n	8000cfa <__udivmoddi4+0x276>
 8000ce8:	eb1c 0404 	adds.w	r4, ip, r4
 8000cec:	f101 36ff 	add.w	r6, r1, #4294967295
 8000cf0:	d213      	bcs.n	8000d1a <__udivmoddi4+0x296>
 8000cf2:	42a3      	cmp	r3, r4
 8000cf4:	d911      	bls.n	8000d1a <__udivmoddi4+0x296>
 8000cf6:	3902      	subs	r1, #2
 8000cf8:	4464      	add	r4, ip
 8000cfa:	1ae4      	subs	r4, r4, r3
 8000cfc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d00:	e739      	b.n	8000b76 <__udivmoddi4+0xf2>
 8000d02:	4604      	mov	r4, r0
 8000d04:	e6f0      	b.n	8000ae8 <__udivmoddi4+0x64>
 8000d06:	4608      	mov	r0, r1
 8000d08:	e706      	b.n	8000b18 <__udivmoddi4+0x94>
 8000d0a:	45c8      	cmp	r8, r9
 8000d0c:	d2ae      	bcs.n	8000c6c <__udivmoddi4+0x1e8>
 8000d0e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d12:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d16:	3801      	subs	r0, #1
 8000d18:	e7a8      	b.n	8000c6c <__udivmoddi4+0x1e8>
 8000d1a:	4631      	mov	r1, r6
 8000d1c:	e7ed      	b.n	8000cfa <__udivmoddi4+0x276>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	e799      	b.n	8000c56 <__udivmoddi4+0x1d2>
 8000d22:	4630      	mov	r0, r6
 8000d24:	e7d4      	b.n	8000cd0 <__udivmoddi4+0x24c>
 8000d26:	46d6      	mov	lr, sl
 8000d28:	e77f      	b.n	8000c2a <__udivmoddi4+0x1a6>
 8000d2a:	4463      	add	r3, ip
 8000d2c:	3802      	subs	r0, #2
 8000d2e:	e74d      	b.n	8000bcc <__udivmoddi4+0x148>
 8000d30:	4606      	mov	r6, r0
 8000d32:	4623      	mov	r3, r4
 8000d34:	4608      	mov	r0, r1
 8000d36:	e70f      	b.n	8000b58 <__udivmoddi4+0xd4>
 8000d38:	3e02      	subs	r6, #2
 8000d3a:	4463      	add	r3, ip
 8000d3c:	e730      	b.n	8000ba0 <__udivmoddi4+0x11c>
 8000d3e:	bf00      	nop

08000d40 <__aeabi_idiv0>:
 8000d40:	4770      	bx	lr
 8000d42:	bf00      	nop

08000d44 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b082      	sub	sp, #8
 8000d48:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000d4a:	4b16      	ldr	r3, [pc, #88]	@ (8000da4 <MX_DMA_Init+0x60>)
 8000d4c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000d4e:	4a15      	ldr	r2, [pc, #84]	@ (8000da4 <MX_DMA_Init+0x60>)
 8000d50:	f043 0304 	orr.w	r3, r3, #4
 8000d54:	6493      	str	r3, [r2, #72]	@ 0x48
 8000d56:	4b13      	ldr	r3, [pc, #76]	@ (8000da4 <MX_DMA_Init+0x60>)
 8000d58:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000d5a:	f003 0304 	and.w	r3, r3, #4
 8000d5e:	607b      	str	r3, [r7, #4]
 8000d60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d62:	4b10      	ldr	r3, [pc, #64]	@ (8000da4 <MX_DMA_Init+0x60>)
 8000d64:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000d66:	4a0f      	ldr	r2, [pc, #60]	@ (8000da4 <MX_DMA_Init+0x60>)
 8000d68:	f043 0301 	orr.w	r3, r3, #1
 8000d6c:	6493      	str	r3, [r2, #72]	@ 0x48
 8000d6e:	4b0d      	ldr	r3, [pc, #52]	@ (8000da4 <MX_DMA_Init+0x60>)
 8000d70:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000d72:	f003 0301 	and.w	r3, r3, #1
 8000d76:	603b      	str	r3, [r7, #0]
 8000d78:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	200b      	movs	r0, #11
 8000d80:	f001 f899 	bl	8001eb6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000d84:	200b      	movs	r0, #11
 8000d86:	f001 f8b0 	bl	8001eea <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	2100      	movs	r1, #0
 8000d8e:	200c      	movs	r0, #12
 8000d90:	f001 f891 	bl	8001eb6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000d94:	200c      	movs	r0, #12
 8000d96:	f001 f8a8 	bl	8001eea <HAL_NVIC_EnableIRQ>

}
 8000d9a:	bf00      	nop
 8000d9c:	3708      	adds	r7, #8
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	40021000 	.word	0x40021000

08000da8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b088      	sub	sp, #32
 8000dac:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dae:	f107 030c 	add.w	r3, r7, #12
 8000db2:	2200      	movs	r2, #0
 8000db4:	601a      	str	r2, [r3, #0]
 8000db6:	605a      	str	r2, [r3, #4]
 8000db8:	609a      	str	r2, [r3, #8]
 8000dba:	60da      	str	r2, [r3, #12]
 8000dbc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000dbe:	4b1e      	ldr	r3, [pc, #120]	@ (8000e38 <MX_GPIO_Init+0x90>)
 8000dc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dc2:	4a1d      	ldr	r2, [pc, #116]	@ (8000e38 <MX_GPIO_Init+0x90>)
 8000dc4:	f043 0320 	orr.w	r3, r3, #32
 8000dc8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000dca:	4b1b      	ldr	r3, [pc, #108]	@ (8000e38 <MX_GPIO_Init+0x90>)
 8000dcc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dce:	f003 0320 	and.w	r3, r3, #32
 8000dd2:	60bb      	str	r3, [r7, #8]
 8000dd4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dd6:	4b18      	ldr	r3, [pc, #96]	@ (8000e38 <MX_GPIO_Init+0x90>)
 8000dd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dda:	4a17      	ldr	r2, [pc, #92]	@ (8000e38 <MX_GPIO_Init+0x90>)
 8000ddc:	f043 0301 	orr.w	r3, r3, #1
 8000de0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000de2:	4b15      	ldr	r3, [pc, #84]	@ (8000e38 <MX_GPIO_Init+0x90>)
 8000de4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000de6:	f003 0301 	and.w	r3, r3, #1
 8000dea:	607b      	str	r3, [r7, #4]
 8000dec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dee:	4b12      	ldr	r3, [pc, #72]	@ (8000e38 <MX_GPIO_Init+0x90>)
 8000df0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000df2:	4a11      	ldr	r2, [pc, #68]	@ (8000e38 <MX_GPIO_Init+0x90>)
 8000df4:	f043 0302 	orr.w	r3, r3, #2
 8000df8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000dfa:	4b0f      	ldr	r3, [pc, #60]	@ (8000e38 <MX_GPIO_Init+0x90>)
 8000dfc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dfe:	f003 0302 	and.w	r3, r3, #2
 8000e02:	603b      	str	r3, [r7, #0]
 8000e04:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000e06:	2200      	movs	r2, #0
 8000e08:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000e0c:	480b      	ldr	r0, [pc, #44]	@ (8000e3c <MX_GPIO_Init+0x94>)
 8000e0e:	f001 fbc3 	bl	8002598 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000e12:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000e16:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e18:	2301      	movs	r3, #1
 8000e1a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e20:	2300      	movs	r3, #0
 8000e22:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000e24:	f107 030c 	add.w	r3, r7, #12
 8000e28:	4619      	mov	r1, r3
 8000e2a:	4804      	ldr	r0, [pc, #16]	@ (8000e3c <MX_GPIO_Init+0x94>)
 8000e2c:	f001 fa32 	bl	8002294 <HAL_GPIO_Init>

}
 8000e30:	bf00      	nop
 8000e32:	3720      	adds	r7, #32
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	40021000 	.word	0x40021000
 8000e3c:	48000400 	.word	0x48000400

08000e40 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c3_tx;
DMA_HandleTypeDef hdma_i2c3_rx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e44:	4b1b      	ldr	r3, [pc, #108]	@ (8000eb4 <MX_I2C1_Init+0x74>)
 8000e46:	4a1c      	ldr	r2, [pc, #112]	@ (8000eb8 <MX_I2C1_Init+0x78>)
 8000e48:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10802D9B;
 8000e4a:	4b1a      	ldr	r3, [pc, #104]	@ (8000eb4 <MX_I2C1_Init+0x74>)
 8000e4c:	4a1b      	ldr	r2, [pc, #108]	@ (8000ebc <MX_I2C1_Init+0x7c>)
 8000e4e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000e50:	4b18      	ldr	r3, [pc, #96]	@ (8000eb4 <MX_I2C1_Init+0x74>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e56:	4b17      	ldr	r3, [pc, #92]	@ (8000eb4 <MX_I2C1_Init+0x74>)
 8000e58:	2201      	movs	r2, #1
 8000e5a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e5c:	4b15      	ldr	r3, [pc, #84]	@ (8000eb4 <MX_I2C1_Init+0x74>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000e62:	4b14      	ldr	r3, [pc, #80]	@ (8000eb4 <MX_I2C1_Init+0x74>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000e68:	4b12      	ldr	r3, [pc, #72]	@ (8000eb4 <MX_I2C1_Init+0x74>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e6e:	4b11      	ldr	r3, [pc, #68]	@ (8000eb4 <MX_I2C1_Init+0x74>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e74:	4b0f      	ldr	r3, [pc, #60]	@ (8000eb4 <MX_I2C1_Init+0x74>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e7a:	480e      	ldr	r0, [pc, #56]	@ (8000eb4 <MX_I2C1_Init+0x74>)
 8000e7c:	f001 fba4 	bl	80025c8 <HAL_I2C_Init>
 8000e80:	4603      	mov	r3, r0
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d001      	beq.n	8000e8a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000e86:	f000 fa46 	bl	8001316 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000e8a:	2100      	movs	r1, #0
 8000e8c:	4809      	ldr	r0, [pc, #36]	@ (8000eb4 <MX_I2C1_Init+0x74>)
 8000e8e:	f002 f941 	bl	8003114 <HAL_I2CEx_ConfigAnalogFilter>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d001      	beq.n	8000e9c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000e98:	f000 fa3d 	bl	8001316 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000e9c:	2100      	movs	r1, #0
 8000e9e:	4805      	ldr	r0, [pc, #20]	@ (8000eb4 <MX_I2C1_Init+0x74>)
 8000ea0:	f002 f983 	bl	80031aa <HAL_I2CEx_ConfigDigitalFilter>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d001      	beq.n	8000eae <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000eaa:	f000 fa34 	bl	8001316 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000eae:	bf00      	nop
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	20000028 	.word	0x20000028
 8000eb8:	40005400 	.word	0x40005400
 8000ebc:	10802d9b 	.word	0x10802d9b

08000ec0 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000ec4:	4b1b      	ldr	r3, [pc, #108]	@ (8000f34 <MX_I2C3_Init+0x74>)
 8000ec6:	4a1c      	ldr	r2, [pc, #112]	@ (8000f38 <MX_I2C3_Init+0x78>)
 8000ec8:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x10802D9B;
 8000eca:	4b1a      	ldr	r3, [pc, #104]	@ (8000f34 <MX_I2C3_Init+0x74>)
 8000ecc:	4a1b      	ldr	r2, [pc, #108]	@ (8000f3c <MX_I2C3_Init+0x7c>)
 8000ece:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000ed0:	4b18      	ldr	r3, [pc, #96]	@ (8000f34 <MX_I2C3_Init+0x74>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ed6:	4b17      	ldr	r3, [pc, #92]	@ (8000f34 <MX_I2C3_Init+0x74>)
 8000ed8:	2201      	movs	r2, #1
 8000eda:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000edc:	4b15      	ldr	r3, [pc, #84]	@ (8000f34 <MX_I2C3_Init+0x74>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000ee2:	4b14      	ldr	r3, [pc, #80]	@ (8000f34 <MX_I2C3_Init+0x74>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ee8:	4b12      	ldr	r3, [pc, #72]	@ (8000f34 <MX_I2C3_Init+0x74>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000eee:	4b11      	ldr	r3, [pc, #68]	@ (8000f34 <MX_I2C3_Init+0x74>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ef4:	4b0f      	ldr	r3, [pc, #60]	@ (8000f34 <MX_I2C3_Init+0x74>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000efa:	480e      	ldr	r0, [pc, #56]	@ (8000f34 <MX_I2C3_Init+0x74>)
 8000efc:	f001 fb64 	bl	80025c8 <HAL_I2C_Init>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d001      	beq.n	8000f0a <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000f06:	f000 fa06 	bl	8001316 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000f0a:	2100      	movs	r1, #0
 8000f0c:	4809      	ldr	r0, [pc, #36]	@ (8000f34 <MX_I2C3_Init+0x74>)
 8000f0e:	f002 f901 	bl	8003114 <HAL_I2CEx_ConfigAnalogFilter>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d001      	beq.n	8000f1c <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000f18:	f000 f9fd 	bl	8001316 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000f1c:	2100      	movs	r1, #0
 8000f1e:	4805      	ldr	r0, [pc, #20]	@ (8000f34 <MX_I2C3_Init+0x74>)
 8000f20:	f002 f943 	bl	80031aa <HAL_I2CEx_ConfigDigitalFilter>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d001      	beq.n	8000f2e <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8000f2a:	f000 f9f4 	bl	8001316 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000f2e:	bf00      	nop
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	2000007c 	.word	0x2000007c
 8000f38:	40007800 	.word	0x40007800
 8000f3c:	10802d9b 	.word	0x10802d9b

08000f40 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b09e      	sub	sp, #120	@ 0x78
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f48:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	601a      	str	r2, [r3, #0]
 8000f50:	605a      	str	r2, [r3, #4]
 8000f52:	609a      	str	r2, [r3, #8]
 8000f54:	60da      	str	r2, [r3, #12]
 8000f56:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f58:	f107 0320 	add.w	r3, r7, #32
 8000f5c:	2244      	movs	r2, #68	@ 0x44
 8000f5e:	2100      	movs	r1, #0
 8000f60:	4618      	mov	r0, r3
 8000f62:	f005 fc29 	bl	80067b8 <memset>
  if(i2cHandle->Instance==I2C1)
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	4a88      	ldr	r2, [pc, #544]	@ (800118c <HAL_I2C_MspInit+0x24c>)
 8000f6c:	4293      	cmp	r3, r2
 8000f6e:	d154      	bne.n	800101a <HAL_I2C_MspInit+0xda>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000f70:	2340      	movs	r3, #64	@ 0x40
 8000f72:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000f74:	2300      	movs	r3, #0
 8000f76:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f78:	f107 0320 	add.w	r3, r7, #32
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f002 ff43 	bl	8003e08 <HAL_RCCEx_PeriphCLKConfig>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d001      	beq.n	8000f8c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000f88:	f000 f9c5 	bl	8001316 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f8c:	4b80      	ldr	r3, [pc, #512]	@ (8001190 <HAL_I2C_MspInit+0x250>)
 8000f8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f90:	4a7f      	ldr	r2, [pc, #508]	@ (8001190 <HAL_I2C_MspInit+0x250>)
 8000f92:	f043 0301 	orr.w	r3, r3, #1
 8000f96:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f98:	4b7d      	ldr	r3, [pc, #500]	@ (8001190 <HAL_I2C_MspInit+0x250>)
 8000f9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f9c:	f003 0301 	and.w	r3, r3, #1
 8000fa0:	61fb      	str	r3, [r7, #28]
 8000fa2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fa4:	4b7a      	ldr	r3, [pc, #488]	@ (8001190 <HAL_I2C_MspInit+0x250>)
 8000fa6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fa8:	4a79      	ldr	r2, [pc, #484]	@ (8001190 <HAL_I2C_MspInit+0x250>)
 8000faa:	f043 0302 	orr.w	r3, r3, #2
 8000fae:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fb0:	4b77      	ldr	r3, [pc, #476]	@ (8001190 <HAL_I2C_MspInit+0x250>)
 8000fb2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fb4:	f003 0302 	and.w	r3, r3, #2
 8000fb8:	61bb      	str	r3, [r7, #24]
 8000fba:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000fbc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000fc0:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fc2:	2312      	movs	r3, #18
 8000fc4:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000fce:	2304      	movs	r3, #4
 8000fd0:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fd2:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fdc:	f001 f95a 	bl	8002294 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000fe0:	2380      	movs	r3, #128	@ 0x80
 8000fe2:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fe4:	2312      	movs	r3, #18
 8000fe6:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fec:	2300      	movs	r3, #0
 8000fee:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ff0:	2304      	movs	r3, #4
 8000ff2:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ff4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	4866      	ldr	r0, [pc, #408]	@ (8001194 <HAL_I2C_MspInit+0x254>)
 8000ffc:	f001 f94a 	bl	8002294 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001000:	4b63      	ldr	r3, [pc, #396]	@ (8001190 <HAL_I2C_MspInit+0x250>)
 8001002:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001004:	4a62      	ldr	r2, [pc, #392]	@ (8001190 <HAL_I2C_MspInit+0x250>)
 8001006:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800100a:	6593      	str	r3, [r2, #88]	@ 0x58
 800100c:	4b60      	ldr	r3, [pc, #384]	@ (8001190 <HAL_I2C_MspInit+0x250>)
 800100e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001010:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001014:	617b      	str	r3, [r7, #20]
 8001016:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8001018:	e0b4      	b.n	8001184 <HAL_I2C_MspInit+0x244>
  else if(i2cHandle->Instance==I2C3)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	4a5e      	ldr	r2, [pc, #376]	@ (8001198 <HAL_I2C_MspInit+0x258>)
 8001020:	4293      	cmp	r3, r2
 8001022:	f040 80af 	bne.w	8001184 <HAL_I2C_MspInit+0x244>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8001026:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800102a:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 800102c:	2300      	movs	r3, #0
 800102e:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001030:	f107 0320 	add.w	r3, r7, #32
 8001034:	4618      	mov	r0, r3
 8001036:	f002 fee7 	bl	8003e08 <HAL_RCCEx_PeriphCLKConfig>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d001      	beq.n	8001044 <HAL_I2C_MspInit+0x104>
      Error_Handler();
 8001040:	f000 f969 	bl	8001316 <Error_Handler>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001044:	4b52      	ldr	r3, [pc, #328]	@ (8001190 <HAL_I2C_MspInit+0x250>)
 8001046:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001048:	4a51      	ldr	r2, [pc, #324]	@ (8001190 <HAL_I2C_MspInit+0x250>)
 800104a:	f043 0301 	orr.w	r3, r3, #1
 800104e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001050:	4b4f      	ldr	r3, [pc, #316]	@ (8001190 <HAL_I2C_MspInit+0x250>)
 8001052:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001054:	f003 0301 	and.w	r3, r3, #1
 8001058:	613b      	str	r3, [r7, #16]
 800105a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800105c:	4b4c      	ldr	r3, [pc, #304]	@ (8001190 <HAL_I2C_MspInit+0x250>)
 800105e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001060:	4a4b      	ldr	r2, [pc, #300]	@ (8001190 <HAL_I2C_MspInit+0x250>)
 8001062:	f043 0302 	orr.w	r3, r3, #2
 8001066:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001068:	4b49      	ldr	r3, [pc, #292]	@ (8001190 <HAL_I2C_MspInit+0x250>)
 800106a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800106c:	f003 0302 	and.w	r3, r3, #2
 8001070:	60fb      	str	r3, [r7, #12]
 8001072:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001074:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001078:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800107a:	2312      	movs	r3, #18
 800107c:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800107e:	2301      	movs	r3, #1
 8001080:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001082:	2300      	movs	r3, #0
 8001084:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF2_I2C3;
 8001086:	2302      	movs	r3, #2
 8001088:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800108a:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800108e:	4619      	mov	r1, r3
 8001090:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001094:	f001 f8fe 	bl	8002294 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001098:	2320      	movs	r3, #32
 800109a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800109c:	2312      	movs	r3, #18
 800109e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010a0:	2301      	movs	r3, #1
 80010a2:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a4:	2300      	movs	r3, #0
 80010a6:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C3;
 80010a8:	2308      	movs	r3, #8
 80010aa:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010ac:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80010b0:	4619      	mov	r1, r3
 80010b2:	4838      	ldr	r0, [pc, #224]	@ (8001194 <HAL_I2C_MspInit+0x254>)
 80010b4:	f001 f8ee 	bl	8002294 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80010b8:	4b35      	ldr	r3, [pc, #212]	@ (8001190 <HAL_I2C_MspInit+0x250>)
 80010ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010bc:	4a34      	ldr	r2, [pc, #208]	@ (8001190 <HAL_I2C_MspInit+0x250>)
 80010be:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80010c2:	6593      	str	r3, [r2, #88]	@ 0x58
 80010c4:	4b32      	ldr	r3, [pc, #200]	@ (8001190 <HAL_I2C_MspInit+0x250>)
 80010c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010c8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80010cc:	60bb      	str	r3, [r7, #8]
 80010ce:	68bb      	ldr	r3, [r7, #8]
    hdma_i2c3_tx.Instance = DMA1_Channel1;
 80010d0:	4b32      	ldr	r3, [pc, #200]	@ (800119c <HAL_I2C_MspInit+0x25c>)
 80010d2:	4a33      	ldr	r2, [pc, #204]	@ (80011a0 <HAL_I2C_MspInit+0x260>)
 80010d4:	601a      	str	r2, [r3, #0]
    hdma_i2c3_tx.Init.Request = DMA_REQUEST_I2C3_TX;
 80010d6:	4b31      	ldr	r3, [pc, #196]	@ (800119c <HAL_I2C_MspInit+0x25c>)
 80010d8:	2215      	movs	r2, #21
 80010da:	605a      	str	r2, [r3, #4]
    hdma_i2c3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80010dc:	4b2f      	ldr	r3, [pc, #188]	@ (800119c <HAL_I2C_MspInit+0x25c>)
 80010de:	2210      	movs	r2, #16
 80010e0:	609a      	str	r2, [r3, #8]
    hdma_i2c3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80010e2:	4b2e      	ldr	r3, [pc, #184]	@ (800119c <HAL_I2C_MspInit+0x25c>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	60da      	str	r2, [r3, #12]
    hdma_i2c3_tx.Init.MemInc = DMA_MINC_DISABLE;
 80010e8:	4b2c      	ldr	r3, [pc, #176]	@ (800119c <HAL_I2C_MspInit+0x25c>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	611a      	str	r2, [r3, #16]
    hdma_i2c3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80010ee:	4b2b      	ldr	r3, [pc, #172]	@ (800119c <HAL_I2C_MspInit+0x25c>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	615a      	str	r2, [r3, #20]
    hdma_i2c3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80010f4:	4b29      	ldr	r3, [pc, #164]	@ (800119c <HAL_I2C_MspInit+0x25c>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	619a      	str	r2, [r3, #24]
    hdma_i2c3_tx.Init.Mode = DMA_NORMAL;
 80010fa:	4b28      	ldr	r3, [pc, #160]	@ (800119c <HAL_I2C_MspInit+0x25c>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	61da      	str	r2, [r3, #28]
    hdma_i2c3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001100:	4b26      	ldr	r3, [pc, #152]	@ (800119c <HAL_I2C_MspInit+0x25c>)
 8001102:	2200      	movs	r2, #0
 8001104:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c3_tx) != HAL_OK)
 8001106:	4825      	ldr	r0, [pc, #148]	@ (800119c <HAL_I2C_MspInit+0x25c>)
 8001108:	f000 ff0a 	bl	8001f20 <HAL_DMA_Init>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d001      	beq.n	8001116 <HAL_I2C_MspInit+0x1d6>
      Error_Handler();
 8001112:	f000 f900 	bl	8001316 <Error_Handler>
    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c3_tx);
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	4a20      	ldr	r2, [pc, #128]	@ (800119c <HAL_I2C_MspInit+0x25c>)
 800111a:	639a      	str	r2, [r3, #56]	@ 0x38
 800111c:	4a1f      	ldr	r2, [pc, #124]	@ (800119c <HAL_I2C_MspInit+0x25c>)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	6293      	str	r3, [r2, #40]	@ 0x28
    hdma_i2c3_rx.Instance = DMA1_Channel2;
 8001122:	4b20      	ldr	r3, [pc, #128]	@ (80011a4 <HAL_I2C_MspInit+0x264>)
 8001124:	4a20      	ldr	r2, [pc, #128]	@ (80011a8 <HAL_I2C_MspInit+0x268>)
 8001126:	601a      	str	r2, [r3, #0]
    hdma_i2c3_rx.Init.Request = DMA_REQUEST_I2C3_RX;
 8001128:	4b1e      	ldr	r3, [pc, #120]	@ (80011a4 <HAL_I2C_MspInit+0x264>)
 800112a:	2214      	movs	r2, #20
 800112c:	605a      	str	r2, [r3, #4]
    hdma_i2c3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800112e:	4b1d      	ldr	r3, [pc, #116]	@ (80011a4 <HAL_I2C_MspInit+0x264>)
 8001130:	2200      	movs	r2, #0
 8001132:	609a      	str	r2, [r3, #8]
    hdma_i2c3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001134:	4b1b      	ldr	r3, [pc, #108]	@ (80011a4 <HAL_I2C_MspInit+0x264>)
 8001136:	2200      	movs	r2, #0
 8001138:	60da      	str	r2, [r3, #12]
    hdma_i2c3_rx.Init.MemInc = DMA_MINC_DISABLE;
 800113a:	4b1a      	ldr	r3, [pc, #104]	@ (80011a4 <HAL_I2C_MspInit+0x264>)
 800113c:	2200      	movs	r2, #0
 800113e:	611a      	str	r2, [r3, #16]
    hdma_i2c3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001140:	4b18      	ldr	r3, [pc, #96]	@ (80011a4 <HAL_I2C_MspInit+0x264>)
 8001142:	2200      	movs	r2, #0
 8001144:	615a      	str	r2, [r3, #20]
    hdma_i2c3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001146:	4b17      	ldr	r3, [pc, #92]	@ (80011a4 <HAL_I2C_MspInit+0x264>)
 8001148:	2200      	movs	r2, #0
 800114a:	619a      	str	r2, [r3, #24]
    hdma_i2c3_rx.Init.Mode = DMA_NORMAL;
 800114c:	4b15      	ldr	r3, [pc, #84]	@ (80011a4 <HAL_I2C_MspInit+0x264>)
 800114e:	2200      	movs	r2, #0
 8001150:	61da      	str	r2, [r3, #28]
    hdma_i2c3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001152:	4b14      	ldr	r3, [pc, #80]	@ (80011a4 <HAL_I2C_MspInit+0x264>)
 8001154:	2200      	movs	r2, #0
 8001156:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c3_rx) != HAL_OK)
 8001158:	4812      	ldr	r0, [pc, #72]	@ (80011a4 <HAL_I2C_MspInit+0x264>)
 800115a:	f000 fee1 	bl	8001f20 <HAL_DMA_Init>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d001      	beq.n	8001168 <HAL_I2C_MspInit+0x228>
      Error_Handler();
 8001164:	f000 f8d7 	bl	8001316 <Error_Handler>
    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c3_rx);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	4a0e      	ldr	r2, [pc, #56]	@ (80011a4 <HAL_I2C_MspInit+0x264>)
 800116c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800116e:	4a0d      	ldr	r2, [pc, #52]	@ (80011a4 <HAL_I2C_MspInit+0x264>)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 0, 0);
 8001174:	2200      	movs	r2, #0
 8001176:	2100      	movs	r1, #0
 8001178:	205c      	movs	r0, #92	@ 0x5c
 800117a:	f000 fe9c 	bl	8001eb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 800117e:	205c      	movs	r0, #92	@ 0x5c
 8001180:	f000 feb3 	bl	8001eea <HAL_NVIC_EnableIRQ>
}
 8001184:	bf00      	nop
 8001186:	3778      	adds	r7, #120	@ 0x78
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}
 800118c:	40005400 	.word	0x40005400
 8001190:	40021000 	.word	0x40021000
 8001194:	48000400 	.word	0x48000400
 8001198:	40007800 	.word	0x40007800
 800119c:	200000d0 	.word	0x200000d0
 80011a0:	40020008 	.word	0x40020008
 80011a4:	20000130 	.word	0x20000130
 80011a8:	4002001c 	.word	0x4002001c

080011ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b084      	sub	sp, #16
 80011b0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011b2:	f000 fd12 	bl	8001bda <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011b6:	f000 f863 	bl	8001280 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011ba:	f7ff fdf5 	bl	8000da8 <MX_GPIO_Init>
  MX_DMA_Init();
 80011be:	f7ff fdc1 	bl	8000d44 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80011c2:	f000 fc3d 	bl	8001a40 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80011c6:	f7ff fe3b 	bl	8000e40 <MX_I2C1_Init>
  MX_TIM3_Init();
 80011ca:	f000 f979 	bl	80014c0 <MX_TIM3_Init>
  MX_TIM4_Init();
 80011ce:	f000 f9cd 	bl	800156c <MX_TIM4_Init>
  MX_I2C3_Init();
 80011d2:	f7ff fe75 	bl	8000ec0 <MX_I2C3_Init>
  MX_TIM2_Init();
 80011d6:	f000 f929 	bl	800142c <MX_TIM2_Init>
  MX_TIM8_Init();
 80011da:	f000 fa1d 	bl	8001618 <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */
  CHECK(BNO055_Init(&bno, &hi2c3, 0, NDOF))
 80011de:	e002      	b.n	80011e6 <main+0x3a>
 80011e0:	2064      	movs	r0, #100	@ 0x64
 80011e2:	f000 fd6b 	bl	8001cbc <HAL_Delay>
 80011e6:	230c      	movs	r3, #12
 80011e8:	2200      	movs	r2, #0
 80011ea:	4921      	ldr	r1, [pc, #132]	@ (8001270 <main+0xc4>)
 80011ec:	4821      	ldr	r0, [pc, #132]	@ (8001274 <main+0xc8>)
 80011ee:	f004 fff9 	bl	80061e4 <BNO055_Init>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d1f3      	bne.n	80011e0 <main+0x34>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint32_t timestamp = HAL_GetTick() + 10;
 80011f8:	f000 fd54 	bl	8001ca4 <HAL_GetTick>
 80011fc:	4603      	mov	r3, r0
 80011fe:	330a      	adds	r3, #10
 8001200:	60fb      	str	r3, [r7, #12]
  while (1)
  {
	uint32_t time = HAL_GetTick();
 8001202:	f000 fd4f 	bl	8001ca4 <HAL_GetTick>
 8001206:	60b8      	str	r0, [r7, #8]

	if (time > timestamp)
 8001208:	68ba      	ldr	r2, [r7, #8]
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	429a      	cmp	r2, r3
 800120e:	d9f8      	bls.n	8001202 <main+0x56>
	{
		timestamp += 10;
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	330a      	adds	r3, #10
 8001214:	60fb      	str	r3, [r7, #12]
		uint32_t start_time = HAL_GetTick();
 8001216:	f000 fd45 	bl	8001ca4 <HAL_GetTick>
 800121a:	6078      	str	r0, [r7, #4]
		BNO055_Read(&bno, ACCELEROMETER);
 800121c:	2103      	movs	r1, #3
 800121e:	4815      	ldr	r0, [pc, #84]	@ (8001274 <main+0xc8>)
 8001220:	f005 f8ce 	bl	80063c0 <BNO055_Read>
		BNO055_Read(&bno, GYROSCOPE);
 8001224:	2101      	movs	r1, #1
 8001226:	4813      	ldr	r0, [pc, #76]	@ (8001274 <main+0xc8>)
 8001228:	f005 f8ca 	bl	80063c0 <BNO055_Read>
		BNO055_Read(&bno, EULER);
 800122c:	2102      	movs	r1, #2
 800122e:	4811      	ldr	r0, [pc, #68]	@ (8001274 <main+0xc8>)
 8001230:	f005 f8c6 	bl	80063c0 <BNO055_Read>
		BNO055_Read(&bno, QUATERNION);
 8001234:	2106      	movs	r1, #6
 8001236:	480f      	ldr	r0, [pc, #60]	@ (8001274 <main+0xc8>)
 8001238:	f005 f8c2 	bl	80063c0 <BNO055_Read>
		fps = 1000.0 / (HAL_GetTick() - start_time);
 800123c:	f000 fd32 	bl	8001ca4 <HAL_GetTick>
 8001240:	4602      	mov	r2, r0
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	1ad3      	subs	r3, r2, r3
 8001246:	4618      	mov	r0, r3
 8001248:	f7ff f928 	bl	800049c <__aeabi_ui2d>
 800124c:	4602      	mov	r2, r0
 800124e:	460b      	mov	r3, r1
 8001250:	f04f 0000 	mov.w	r0, #0
 8001254:	4908      	ldr	r1, [pc, #32]	@ (8001278 <main+0xcc>)
 8001256:	f7ff fac5 	bl	80007e4 <__aeabi_ddiv>
 800125a:	4602      	mov	r2, r0
 800125c:	460b      	mov	r3, r1
 800125e:	4610      	mov	r0, r2
 8001260:	4619      	mov	r1, r3
 8001262:	f7ff fba7 	bl	80009b4 <__aeabi_d2f>
 8001266:	4603      	mov	r3, r0
 8001268:	4a04      	ldr	r2, [pc, #16]	@ (800127c <main+0xd0>)
 800126a:	6013      	str	r3, [r2, #0]
  {
 800126c:	e7c9      	b.n	8001202 <main+0x56>
 800126e:	bf00      	nop
 8001270:	2000007c 	.word	0x2000007c
 8001274:	20000190 	.word	0x20000190
 8001278:	408f4000 	.word	0x408f4000
 800127c:	200001ec 	.word	0x200001ec

08001280 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b094      	sub	sp, #80	@ 0x50
 8001284:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001286:	f107 0318 	add.w	r3, r7, #24
 800128a:	2238      	movs	r2, #56	@ 0x38
 800128c:	2100      	movs	r1, #0
 800128e:	4618      	mov	r0, r3
 8001290:	f005 fa92 	bl	80067b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001294:	1d3b      	adds	r3, r7, #4
 8001296:	2200      	movs	r2, #0
 8001298:	601a      	str	r2, [r3, #0]
 800129a:	605a      	str	r2, [r3, #4]
 800129c:	609a      	str	r2, [r3, #8]
 800129e:	60da      	str	r2, [r3, #12]
 80012a0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80012a2:	2000      	movs	r0, #0
 80012a4:	f001 ffce 	bl	8003244 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80012a8:	2302      	movs	r3, #2
 80012aa:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012ac:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80012b0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012b2:	2340      	movs	r3, #64	@ 0x40
 80012b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012b6:	2302      	movs	r3, #2
 80012b8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80012ba:	2302      	movs	r3, #2
 80012bc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80012be:	2304      	movs	r3, #4
 80012c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80012c2:	2355      	movs	r3, #85	@ 0x55
 80012c4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80012c6:	2302      	movs	r3, #2
 80012c8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80012ca:	2302      	movs	r3, #2
 80012cc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80012ce:	2302      	movs	r3, #2
 80012d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012d2:	f107 0318 	add.w	r3, r7, #24
 80012d6:	4618      	mov	r0, r3
 80012d8:	f002 f868 	bl	80033ac <HAL_RCC_OscConfig>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d001      	beq.n	80012e6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80012e2:	f000 f818 	bl	8001316 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012e6:	230f      	movs	r3, #15
 80012e8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012ea:	2303      	movs	r3, #3
 80012ec:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012ee:	2300      	movs	r3, #0
 80012f0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80012f2:	2300      	movs	r3, #0
 80012f4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012f6:	2300      	movs	r3, #0
 80012f8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80012fa:	1d3b      	adds	r3, r7, #4
 80012fc:	2104      	movs	r1, #4
 80012fe:	4618      	mov	r0, r3
 8001300:	f002 fb66 	bl	80039d0 <HAL_RCC_ClockConfig>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d001      	beq.n	800130e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800130a:	f000 f804 	bl	8001316 <Error_Handler>
  }
}
 800130e:	bf00      	nop
 8001310:	3750      	adds	r7, #80	@ 0x50
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}

08001316 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001316:	b480      	push	{r7}
 8001318:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800131a:	b672      	cpsid	i
}
 800131c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800131e:	bf00      	nop
 8001320:	e7fd      	b.n	800131e <Error_Handler+0x8>
	...

08001324 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b082      	sub	sp, #8
 8001328:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800132a:	4b0f      	ldr	r3, [pc, #60]	@ (8001368 <HAL_MspInit+0x44>)
 800132c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800132e:	4a0e      	ldr	r2, [pc, #56]	@ (8001368 <HAL_MspInit+0x44>)
 8001330:	f043 0301 	orr.w	r3, r3, #1
 8001334:	6613      	str	r3, [r2, #96]	@ 0x60
 8001336:	4b0c      	ldr	r3, [pc, #48]	@ (8001368 <HAL_MspInit+0x44>)
 8001338:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800133a:	f003 0301 	and.w	r3, r3, #1
 800133e:	607b      	str	r3, [r7, #4]
 8001340:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001342:	4b09      	ldr	r3, [pc, #36]	@ (8001368 <HAL_MspInit+0x44>)
 8001344:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001346:	4a08      	ldr	r2, [pc, #32]	@ (8001368 <HAL_MspInit+0x44>)
 8001348:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800134c:	6593      	str	r3, [r2, #88]	@ 0x58
 800134e:	4b06      	ldr	r3, [pc, #24]	@ (8001368 <HAL_MspInit+0x44>)
 8001350:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001352:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001356:	603b      	str	r3, [r7, #0]
 8001358:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800135a:	f002 f817 	bl	800338c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800135e:	bf00      	nop
 8001360:	3708      	adds	r7, #8
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	40021000 	.word	0x40021000

0800136c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001370:	bf00      	nop
 8001372:	e7fd      	b.n	8001370 <NMI_Handler+0x4>

08001374 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001378:	bf00      	nop
 800137a:	e7fd      	b.n	8001378 <HardFault_Handler+0x4>

0800137c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800137c:	b480      	push	{r7}
 800137e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001380:	bf00      	nop
 8001382:	e7fd      	b.n	8001380 <MemManage_Handler+0x4>

08001384 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001388:	bf00      	nop
 800138a:	e7fd      	b.n	8001388 <BusFault_Handler+0x4>

0800138c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001390:	bf00      	nop
 8001392:	e7fd      	b.n	8001390 <UsageFault_Handler+0x4>

08001394 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001394:	b480      	push	{r7}
 8001396:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001398:	bf00      	nop
 800139a:	46bd      	mov	sp, r7
 800139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a0:	4770      	bx	lr

080013a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013a2:	b480      	push	{r7}
 80013a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013a6:	bf00      	nop
 80013a8:	46bd      	mov	sp, r7
 80013aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ae:	4770      	bx	lr

080013b0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013b4:	bf00      	nop
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr

080013be <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013be:	b580      	push	{r7, lr}
 80013c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013c2:	f000 fc5d 	bl	8001c80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013c6:	bf00      	nop
 80013c8:	bd80      	pop	{r7, pc}
	...

080013cc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c3_tx);
 80013d0:	4802      	ldr	r0, [pc, #8]	@ (80013dc <DMA1_Channel1_IRQHandler+0x10>)
 80013d2:	f000 fe4d 	bl	8002070 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80013d6:	bf00      	nop
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	200000d0 	.word	0x200000d0

080013e0 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c3_rx);
 80013e4:	4802      	ldr	r0, [pc, #8]	@ (80013f0 <DMA1_Channel2_IRQHandler+0x10>)
 80013e6:	f000 fe43 	bl	8002070 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80013ea:	bf00      	nop
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	20000130 	.word	0x20000130

080013f4 <I2C3_EV_IRQHandler>:

/**
  * @brief This function handles I2C3 event interrupt / I2C3 wake-up interrupt through EXTI line 27.
  */
void I2C3_EV_IRQHandler(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c3);
 80013f8:	4802      	ldr	r0, [pc, #8]	@ (8001404 <I2C3_EV_IRQHandler+0x10>)
 80013fa:	f001 fbaf 	bl	8002b5c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C3_EV_IRQn 1 */

  /* USER CODE END I2C3_EV_IRQn 1 */
}
 80013fe:	bf00      	nop
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	2000007c 	.word	0x2000007c

08001408 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800140c:	4b06      	ldr	r3, [pc, #24]	@ (8001428 <SystemInit+0x20>)
 800140e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001412:	4a05      	ldr	r2, [pc, #20]	@ (8001428 <SystemInit+0x20>)
 8001414:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001418:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800141c:	bf00      	nop
 800141e:	46bd      	mov	sp, r7
 8001420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001424:	4770      	bx	lr
 8001426:	bf00      	nop
 8001428:	e000ed00 	.word	0xe000ed00

0800142c <MX_TIM2_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim8;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b088      	sub	sp, #32
 8001430:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_HallSensor_InitTypeDef sConfig = {0};
 8001432:	f107 0310 	add.w	r3, r7, #16
 8001436:	2200      	movs	r2, #0
 8001438:	601a      	str	r2, [r3, #0]
 800143a:	605a      	str	r2, [r3, #4]
 800143c:	609a      	str	r2, [r3, #8]
 800143e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001440:	1d3b      	adds	r3, r7, #4
 8001442:	2200      	movs	r2, #0
 8001444:	601a      	str	r2, [r3, #0]
 8001446:	605a      	str	r2, [r3, #4]
 8001448:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800144a:	4b1c      	ldr	r3, [pc, #112]	@ (80014bc <MX_TIM2_Init+0x90>)
 800144c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001450:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001452:	4b1a      	ldr	r3, [pc, #104]	@ (80014bc <MX_TIM2_Init+0x90>)
 8001454:	2200      	movs	r2, #0
 8001456:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001458:	4b18      	ldr	r3, [pc, #96]	@ (80014bc <MX_TIM2_Init+0x90>)
 800145a:	2200      	movs	r2, #0
 800145c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800145e:	4b17      	ldr	r3, [pc, #92]	@ (80014bc <MX_TIM2_Init+0x90>)
 8001460:	f04f 32ff 	mov.w	r2, #4294967295
 8001464:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001466:	4b15      	ldr	r3, [pc, #84]	@ (80014bc <MX_TIM2_Init+0x90>)
 8001468:	2200      	movs	r2, #0
 800146a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800146c:	4b13      	ldr	r3, [pc, #76]	@ (80014bc <MX_TIM2_Init+0x90>)
 800146e:	2200      	movs	r2, #0
 8001470:	619a      	str	r2, [r3, #24]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001472:	2300      	movs	r3, #0
 8001474:	613b      	str	r3, [r7, #16]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001476:	2300      	movs	r3, #0
 8001478:	617b      	str	r3, [r7, #20]
  sConfig.IC1Filter = 0;
 800147a:	2300      	movs	r3, #0
 800147c:	61bb      	str	r3, [r7, #24]
  sConfig.Commutation_Delay = 0;
 800147e:	2300      	movs	r3, #0
 8001480:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_HallSensor_Init(&htim2, &sConfig) != HAL_OK)
 8001482:	f107 0310 	add.w	r3, r7, #16
 8001486:	4619      	mov	r1, r3
 8001488:	480c      	ldr	r0, [pc, #48]	@ (80014bc <MX_TIM2_Init+0x90>)
 800148a:	f003 feaf 	bl	80051ec <HAL_TIMEx_HallSensor_Init>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d001      	beq.n	8001498 <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 8001494:	f7ff ff3f 	bl	8001316 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 8001498:	2350      	movs	r3, #80	@ 0x50
 800149a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800149c:	2300      	movs	r3, #0
 800149e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80014a0:	1d3b      	adds	r3, r7, #4
 80014a2:	4619      	mov	r1, r3
 80014a4:	4805      	ldr	r0, [pc, #20]	@ (80014bc <MX_TIM2_Init+0x90>)
 80014a6:	f003 ff51 	bl	800534c <HAL_TIMEx_MasterConfigSynchronization>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d001      	beq.n	80014b4 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 80014b0:	f7ff ff31 	bl	8001316 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80014b4:	bf00      	nop
 80014b6:	3720      	adds	r7, #32
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	200001f0 	.word	0x200001f0

080014c0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b08c      	sub	sp, #48	@ 0x30
 80014c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80014c6:	f107 030c 	add.w	r3, r7, #12
 80014ca:	2224      	movs	r2, #36	@ 0x24
 80014cc:	2100      	movs	r1, #0
 80014ce:	4618      	mov	r0, r3
 80014d0:	f005 f972 	bl	80067b8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014d4:	463b      	mov	r3, r7
 80014d6:	2200      	movs	r2, #0
 80014d8:	601a      	str	r2, [r3, #0]
 80014da:	605a      	str	r2, [r3, #4]
 80014dc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80014de:	4b21      	ldr	r3, [pc, #132]	@ (8001564 <MX_TIM3_Init+0xa4>)
 80014e0:	4a21      	ldr	r2, [pc, #132]	@ (8001568 <MX_TIM3_Init+0xa8>)
 80014e2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80014e4:	4b1f      	ldr	r3, [pc, #124]	@ (8001564 <MX_TIM3_Init+0xa4>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014ea:	4b1e      	ldr	r3, [pc, #120]	@ (8001564 <MX_TIM3_Init+0xa4>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80014f0:	4b1c      	ldr	r3, [pc, #112]	@ (8001564 <MX_TIM3_Init+0xa4>)
 80014f2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80014f6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014f8:	4b1a      	ldr	r3, [pc, #104]	@ (8001564 <MX_TIM3_Init+0xa4>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014fe:	4b19      	ldr	r3, [pc, #100]	@ (8001564 <MX_TIM3_Init+0xa4>)
 8001500:	2200      	movs	r2, #0
 8001502:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001504:	2301      	movs	r3, #1
 8001506:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001508:	2300      	movs	r3, #0
 800150a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800150c:	2301      	movs	r3, #1
 800150e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001510:	2300      	movs	r3, #0
 8001512:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001514:	2300      	movs	r3, #0
 8001516:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001518:	2300      	movs	r3, #0
 800151a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800151c:	2301      	movs	r3, #1
 800151e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001520:	2300      	movs	r3, #0
 8001522:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001524:	2300      	movs	r3, #0
 8001526:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001528:	f107 030c 	add.w	r3, r7, #12
 800152c:	4619      	mov	r1, r3
 800152e:	480d      	ldr	r0, [pc, #52]	@ (8001564 <MX_TIM3_Init+0xa4>)
 8001530:	f002 ff12 	bl	8004358 <HAL_TIM_Encoder_Init>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d001      	beq.n	800153e <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 800153a:	f7ff feec 	bl	8001316 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800153e:	2300      	movs	r3, #0
 8001540:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001542:	2300      	movs	r3, #0
 8001544:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001546:	463b      	mov	r3, r7
 8001548:	4619      	mov	r1, r3
 800154a:	4806      	ldr	r0, [pc, #24]	@ (8001564 <MX_TIM3_Init+0xa4>)
 800154c:	f003 fefe 	bl	800534c <HAL_TIMEx_MasterConfigSynchronization>
 8001550:	4603      	mov	r3, r0
 8001552:	2b00      	cmp	r3, #0
 8001554:	d001      	beq.n	800155a <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8001556:	f7ff fede 	bl	8001316 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800155a:	bf00      	nop
 800155c:	3730      	adds	r7, #48	@ 0x30
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	2000023c 	.word	0x2000023c
 8001568:	40000400 	.word	0x40000400

0800156c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b08c      	sub	sp, #48	@ 0x30
 8001570:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001572:	f107 030c 	add.w	r3, r7, #12
 8001576:	2224      	movs	r2, #36	@ 0x24
 8001578:	2100      	movs	r1, #0
 800157a:	4618      	mov	r0, r3
 800157c:	f005 f91c 	bl	80067b8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001580:	463b      	mov	r3, r7
 8001582:	2200      	movs	r2, #0
 8001584:	601a      	str	r2, [r3, #0]
 8001586:	605a      	str	r2, [r3, #4]
 8001588:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800158a:	4b21      	ldr	r3, [pc, #132]	@ (8001610 <MX_TIM4_Init+0xa4>)
 800158c:	4a21      	ldr	r2, [pc, #132]	@ (8001614 <MX_TIM4_Init+0xa8>)
 800158e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001590:	4b1f      	ldr	r3, [pc, #124]	@ (8001610 <MX_TIM4_Init+0xa4>)
 8001592:	2200      	movs	r2, #0
 8001594:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001596:	4b1e      	ldr	r3, [pc, #120]	@ (8001610 <MX_TIM4_Init+0xa4>)
 8001598:	2200      	movs	r2, #0
 800159a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800159c:	4b1c      	ldr	r3, [pc, #112]	@ (8001610 <MX_TIM4_Init+0xa4>)
 800159e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80015a2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015a4:	4b1a      	ldr	r3, [pc, #104]	@ (8001610 <MX_TIM4_Init+0xa4>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015aa:	4b19      	ldr	r3, [pc, #100]	@ (8001610 <MX_TIM4_Init+0xa4>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80015b0:	2301      	movs	r3, #1
 80015b2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80015b4:	2300      	movs	r3, #0
 80015b6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80015b8:	2301      	movs	r3, #1
 80015ba:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80015bc:	2300      	movs	r3, #0
 80015be:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80015c0:	2300      	movs	r3, #0
 80015c2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80015c4:	2300      	movs	r3, #0
 80015c6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80015c8:	2301      	movs	r3, #1
 80015ca:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80015cc:	2300      	movs	r3, #0
 80015ce:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80015d0:	2300      	movs	r3, #0
 80015d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80015d4:	f107 030c 	add.w	r3, r7, #12
 80015d8:	4619      	mov	r1, r3
 80015da:	480d      	ldr	r0, [pc, #52]	@ (8001610 <MX_TIM4_Init+0xa4>)
 80015dc:	f002 febc 	bl	8004358 <HAL_TIM_Encoder_Init>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d001      	beq.n	80015ea <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 80015e6:	f7ff fe96 	bl	8001316 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015ea:	2300      	movs	r3, #0
 80015ec:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015ee:	2300      	movs	r3, #0
 80015f0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80015f2:	463b      	mov	r3, r7
 80015f4:	4619      	mov	r1, r3
 80015f6:	4806      	ldr	r0, [pc, #24]	@ (8001610 <MX_TIM4_Init+0xa4>)
 80015f8:	f003 fea8 	bl	800534c <HAL_TIMEx_MasterConfigSynchronization>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d001      	beq.n	8001606 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8001602:	f7ff fe88 	bl	8001316 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001606:	bf00      	nop
 8001608:	3730      	adds	r7, #48	@ 0x30
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	20000288 	.word	0x20000288
 8001614:	40000800 	.word	0x40000800

08001618 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b09c      	sub	sp, #112	@ 0x70
 800161c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800161e:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001622:	2200      	movs	r2, #0
 8001624:	601a      	str	r2, [r3, #0]
 8001626:	605a      	str	r2, [r3, #4]
 8001628:	609a      	str	r2, [r3, #8]
 800162a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800162c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001630:	2200      	movs	r2, #0
 8001632:	601a      	str	r2, [r3, #0]
 8001634:	605a      	str	r2, [r3, #4]
 8001636:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001638:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800163c:	2200      	movs	r2, #0
 800163e:	601a      	str	r2, [r3, #0]
 8001640:	605a      	str	r2, [r3, #4]
 8001642:	609a      	str	r2, [r3, #8]
 8001644:	60da      	str	r2, [r3, #12]
 8001646:	611a      	str	r2, [r3, #16]
 8001648:	615a      	str	r2, [r3, #20]
 800164a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800164c:	1d3b      	adds	r3, r7, #4
 800164e:	2234      	movs	r2, #52	@ 0x34
 8001650:	2100      	movs	r1, #0
 8001652:	4618      	mov	r0, r3
 8001654:	f005 f8b0 	bl	80067b8 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001658:	4b4b      	ldr	r3, [pc, #300]	@ (8001788 <MX_TIM8_Init+0x170>)
 800165a:	4a4c      	ldr	r2, [pc, #304]	@ (800178c <MX_TIM8_Init+0x174>)
 800165c:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800165e:	4b4a      	ldr	r3, [pc, #296]	@ (8001788 <MX_TIM8_Init+0x170>)
 8001660:	2200      	movs	r2, #0
 8001662:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001664:	4b48      	ldr	r3, [pc, #288]	@ (8001788 <MX_TIM8_Init+0x170>)
 8001666:	2200      	movs	r2, #0
 8001668:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 800166a:	4b47      	ldr	r3, [pc, #284]	@ (8001788 <MX_TIM8_Init+0x170>)
 800166c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001670:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001672:	4b45      	ldr	r3, [pc, #276]	@ (8001788 <MX_TIM8_Init+0x170>)
 8001674:	2200      	movs	r2, #0
 8001676:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001678:	4b43      	ldr	r3, [pc, #268]	@ (8001788 <MX_TIM8_Init+0x170>)
 800167a:	2200      	movs	r2, #0
 800167c:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800167e:	4b42      	ldr	r3, [pc, #264]	@ (8001788 <MX_TIM8_Init+0x170>)
 8001680:	2200      	movs	r2, #0
 8001682:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001684:	4840      	ldr	r0, [pc, #256]	@ (8001788 <MX_TIM8_Init+0x170>)
 8001686:	f002 fdaf 	bl	80041e8 <HAL_TIM_Base_Init>
 800168a:	4603      	mov	r3, r0
 800168c:	2b00      	cmp	r3, #0
 800168e:	d001      	beq.n	8001694 <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 8001690:	f7ff fe41 	bl	8001316 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001694:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001698:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800169a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800169e:	4619      	mov	r1, r3
 80016a0:	4839      	ldr	r0, [pc, #228]	@ (8001788 <MX_TIM8_Init+0x170>)
 80016a2:	f003 f813 	bl	80046cc <HAL_TIM_ConfigClockSource>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d001      	beq.n	80016b0 <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 80016ac:	f7ff fe33 	bl	8001316 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80016b0:	4835      	ldr	r0, [pc, #212]	@ (8001788 <MX_TIM8_Init+0x170>)
 80016b2:	f002 fdf0 	bl	8004296 <HAL_TIM_PWM_Init>
 80016b6:	4603      	mov	r3, r0
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d001      	beq.n	80016c0 <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 80016bc:	f7ff fe2b 	bl	8001316 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016c0:	2300      	movs	r3, #0
 80016c2:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80016c4:	2300      	movs	r3, #0
 80016c6:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016c8:	2300      	movs	r3, #0
 80016ca:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80016cc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80016d0:	4619      	mov	r1, r3
 80016d2:	482d      	ldr	r0, [pc, #180]	@ (8001788 <MX_TIM8_Init+0x170>)
 80016d4:	f003 fe3a 	bl	800534c <HAL_TIMEx_MasterConfigSynchronization>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d001      	beq.n	80016e2 <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 80016de:	f7ff fe1a 	bl	8001316 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016e2:	2360      	movs	r3, #96	@ 0x60
 80016e4:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 80016e6:	2300      	movs	r3, #0
 80016e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016ea:	2300      	movs	r3, #0
 80016ec:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80016ee:	2300      	movs	r3, #0
 80016f0:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016f2:	2300      	movs	r3, #0
 80016f4:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80016f6:	2300      	movs	r3, #0
 80016f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80016fa:	2300      	movs	r3, #0
 80016fc:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80016fe:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001702:	2200      	movs	r2, #0
 8001704:	4619      	mov	r1, r3
 8001706:	4820      	ldr	r0, [pc, #128]	@ (8001788 <MX_TIM8_Init+0x170>)
 8001708:	f002 fecc 	bl	80044a4 <HAL_TIM_PWM_ConfigChannel>
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	d001      	beq.n	8001716 <MX_TIM8_Init+0xfe>
  {
    Error_Handler();
 8001712:	f7ff fe00 	bl	8001316 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001716:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800171a:	2204      	movs	r2, #4
 800171c:	4619      	mov	r1, r3
 800171e:	481a      	ldr	r0, [pc, #104]	@ (8001788 <MX_TIM8_Init+0x170>)
 8001720:	f002 fec0 	bl	80044a4 <HAL_TIM_PWM_ConfigChannel>
 8001724:	4603      	mov	r3, r0
 8001726:	2b00      	cmp	r3, #0
 8001728:	d001      	beq.n	800172e <MX_TIM8_Init+0x116>
  {
    Error_Handler();
 800172a:	f7ff fdf4 	bl	8001316 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800172e:	2300      	movs	r3, #0
 8001730:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001732:	2300      	movs	r3, #0
 8001734:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001736:	2300      	movs	r3, #0
 8001738:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800173a:	2300      	movs	r3, #0
 800173c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800173e:	2300      	movs	r3, #0
 8001740:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001742:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001746:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001748:	2300      	movs	r3, #0
 800174a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800174c:	2300      	movs	r3, #0
 800174e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001750:	2300      	movs	r3, #0
 8001752:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001754:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001758:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800175a:	2300      	movs	r3, #0
 800175c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800175e:	2300      	movs	r3, #0
 8001760:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001762:	2300      	movs	r3, #0
 8001764:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001766:	1d3b      	adds	r3, r7, #4
 8001768:	4619      	mov	r1, r3
 800176a:	4807      	ldr	r0, [pc, #28]	@ (8001788 <MX_TIM8_Init+0x170>)
 800176c:	f003 fe70 	bl	8005450 <HAL_TIMEx_ConfigBreakDeadTime>
 8001770:	4603      	mov	r3, r0
 8001772:	2b00      	cmp	r3, #0
 8001774:	d001      	beq.n	800177a <MX_TIM8_Init+0x162>
  {
    Error_Handler();
 8001776:	f7ff fdce 	bl	8001316 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 800177a:	4803      	ldr	r0, [pc, #12]	@ (8001788 <MX_TIM8_Init+0x170>)
 800177c:	f000 f90c 	bl	8001998 <HAL_TIM_MspPostInit>

}
 8001780:	bf00      	nop
 8001782:	3770      	adds	r7, #112	@ 0x70
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}
 8001788:	200002d4 	.word	0x200002d4
 800178c:	40013400 	.word	0x40013400

08001790 <HAL_TIMEx_HallSensor_MspInit>:

void HAL_TIMEx_HallSensor_MspInit(TIM_HandleTypeDef* timex_hallsensorHandle)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b08a      	sub	sp, #40	@ 0x28
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001798:	f107 0314 	add.w	r3, r7, #20
 800179c:	2200      	movs	r2, #0
 800179e:	601a      	str	r2, [r3, #0]
 80017a0:	605a      	str	r2, [r3, #4]
 80017a2:	609a      	str	r2, [r3, #8]
 80017a4:	60da      	str	r2, [r3, #12]
 80017a6:	611a      	str	r2, [r3, #16]
  if(timex_hallsensorHandle->Instance==TIM2)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80017b0:	d13a      	bne.n	8001828 <HAL_TIMEx_HallSensor_MspInit+0x98>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80017b2:	4b1f      	ldr	r3, [pc, #124]	@ (8001830 <HAL_TIMEx_HallSensor_MspInit+0xa0>)
 80017b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017b6:	4a1e      	ldr	r2, [pc, #120]	@ (8001830 <HAL_TIMEx_HallSensor_MspInit+0xa0>)
 80017b8:	f043 0301 	orr.w	r3, r3, #1
 80017bc:	6593      	str	r3, [r2, #88]	@ 0x58
 80017be:	4b1c      	ldr	r3, [pc, #112]	@ (8001830 <HAL_TIMEx_HallSensor_MspInit+0xa0>)
 80017c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017c2:	f003 0301 	and.w	r3, r3, #1
 80017c6:	613b      	str	r3, [r7, #16]
 80017c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ca:	4b19      	ldr	r3, [pc, #100]	@ (8001830 <HAL_TIMEx_HallSensor_MspInit+0xa0>)
 80017cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017ce:	4a18      	ldr	r2, [pc, #96]	@ (8001830 <HAL_TIMEx_HallSensor_MspInit+0xa0>)
 80017d0:	f043 0301 	orr.w	r3, r3, #1
 80017d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017d6:	4b16      	ldr	r3, [pc, #88]	@ (8001830 <HAL_TIMEx_HallSensor_MspInit+0xa0>)
 80017d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017da:	f003 0301 	and.w	r3, r3, #1
 80017de:	60fb      	str	r3, [r7, #12]
 80017e0:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA5     ------> TIM2_CH1
    PA9     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5;
 80017e2:	2322      	movs	r3, #34	@ 0x22
 80017e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017e6:	2302      	movs	r3, #2
 80017e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ea:	2300      	movs	r3, #0
 80017ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ee:	2300      	movs	r3, #0
 80017f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80017f2:	2301      	movs	r3, #1
 80017f4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017f6:	f107 0314 	add.w	r3, r7, #20
 80017fa:	4619      	mov	r1, r3
 80017fc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001800:	f000 fd48 	bl	8002294 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001804:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001808:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800180a:	2302      	movs	r3, #2
 800180c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180e:	2300      	movs	r3, #0
 8001810:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001812:	2300      	movs	r3, #0
 8001814:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM2;
 8001816:	230a      	movs	r3, #10
 8001818:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800181a:	f107 0314 	add.w	r3, r7, #20
 800181e:	4619      	mov	r1, r3
 8001820:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001824:	f000 fd36 	bl	8002294 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001828:	bf00      	nop
 800182a:	3728      	adds	r7, #40	@ 0x28
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}
 8001830:	40021000 	.word	0x40021000

08001834 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b08c      	sub	sp, #48	@ 0x30
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800183c:	f107 031c 	add.w	r3, r7, #28
 8001840:	2200      	movs	r2, #0
 8001842:	601a      	str	r2, [r3, #0]
 8001844:	605a      	str	r2, [r3, #4]
 8001846:	609a      	str	r2, [r3, #8]
 8001848:	60da      	str	r2, [r3, #12]
 800184a:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a3d      	ldr	r2, [pc, #244]	@ (8001948 <HAL_TIM_Encoder_MspInit+0x114>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d145      	bne.n	80018e2 <HAL_TIM_Encoder_MspInit+0xae>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001856:	4b3d      	ldr	r3, [pc, #244]	@ (800194c <HAL_TIM_Encoder_MspInit+0x118>)
 8001858:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800185a:	4a3c      	ldr	r2, [pc, #240]	@ (800194c <HAL_TIM_Encoder_MspInit+0x118>)
 800185c:	f043 0302 	orr.w	r3, r3, #2
 8001860:	6593      	str	r3, [r2, #88]	@ 0x58
 8001862:	4b3a      	ldr	r3, [pc, #232]	@ (800194c <HAL_TIM_Encoder_MspInit+0x118>)
 8001864:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001866:	f003 0302 	and.w	r3, r3, #2
 800186a:	61bb      	str	r3, [r7, #24]
 800186c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800186e:	4b37      	ldr	r3, [pc, #220]	@ (800194c <HAL_TIM_Encoder_MspInit+0x118>)
 8001870:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001872:	4a36      	ldr	r2, [pc, #216]	@ (800194c <HAL_TIM_Encoder_MspInit+0x118>)
 8001874:	f043 0301 	orr.w	r3, r3, #1
 8001878:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800187a:	4b34      	ldr	r3, [pc, #208]	@ (800194c <HAL_TIM_Encoder_MspInit+0x118>)
 800187c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800187e:	f003 0301 	and.w	r3, r3, #1
 8001882:	617b      	str	r3, [r7, #20]
 8001884:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001886:	4b31      	ldr	r3, [pc, #196]	@ (800194c <HAL_TIM_Encoder_MspInit+0x118>)
 8001888:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800188a:	4a30      	ldr	r2, [pc, #192]	@ (800194c <HAL_TIM_Encoder_MspInit+0x118>)
 800188c:	f043 0302 	orr.w	r3, r3, #2
 8001890:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001892:	4b2e      	ldr	r3, [pc, #184]	@ (800194c <HAL_TIM_Encoder_MspInit+0x118>)
 8001894:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001896:	f003 0302 	and.w	r3, r3, #2
 800189a:	613b      	str	r3, [r7, #16]
 800189c:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PA4     ------> TIM3_CH2
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800189e:	2310      	movs	r3, #16
 80018a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018a2:	2302      	movs	r3, #2
 80018a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a6:	2300      	movs	r3, #0
 80018a8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018aa:	2300      	movs	r3, #0
 80018ac:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80018ae:	2302      	movs	r3, #2
 80018b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018b2:	f107 031c 	add.w	r3, r7, #28
 80018b6:	4619      	mov	r1, r3
 80018b8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80018bc:	f000 fcea 	bl	8002294 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80018c0:	2310      	movs	r3, #16
 80018c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018c4:	2302      	movs	r3, #2
 80018c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c8:	2300      	movs	r3, #0
 80018ca:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018cc:	2300      	movs	r3, #0
 80018ce:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80018d0:	2302      	movs	r3, #2
 80018d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018d4:	f107 031c 	add.w	r3, r7, #28
 80018d8:	4619      	mov	r1, r3
 80018da:	481d      	ldr	r0, [pc, #116]	@ (8001950 <HAL_TIM_Encoder_MspInit+0x11c>)
 80018dc:	f000 fcda 	bl	8002294 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80018e0:	e02e      	b.n	8001940 <HAL_TIM_Encoder_MspInit+0x10c>
  else if(tim_encoderHandle->Instance==TIM4)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4a1b      	ldr	r2, [pc, #108]	@ (8001954 <HAL_TIM_Encoder_MspInit+0x120>)
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d129      	bne.n	8001940 <HAL_TIM_Encoder_MspInit+0x10c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80018ec:	4b17      	ldr	r3, [pc, #92]	@ (800194c <HAL_TIM_Encoder_MspInit+0x118>)
 80018ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018f0:	4a16      	ldr	r2, [pc, #88]	@ (800194c <HAL_TIM_Encoder_MspInit+0x118>)
 80018f2:	f043 0304 	orr.w	r3, r3, #4
 80018f6:	6593      	str	r3, [r2, #88]	@ 0x58
 80018f8:	4b14      	ldr	r3, [pc, #80]	@ (800194c <HAL_TIM_Encoder_MspInit+0x118>)
 80018fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018fc:	f003 0304 	and.w	r3, r3, #4
 8001900:	60fb      	str	r3, [r7, #12]
 8001902:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001904:	4b11      	ldr	r3, [pc, #68]	@ (800194c <HAL_TIM_Encoder_MspInit+0x118>)
 8001906:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001908:	4a10      	ldr	r2, [pc, #64]	@ (800194c <HAL_TIM_Encoder_MspInit+0x118>)
 800190a:	f043 0301 	orr.w	r3, r3, #1
 800190e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001910:	4b0e      	ldr	r3, [pc, #56]	@ (800194c <HAL_TIM_Encoder_MspInit+0x118>)
 8001912:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001914:	f003 0301 	and.w	r3, r3, #1
 8001918:	60bb      	str	r3, [r7, #8]
 800191a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800191c:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001920:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001922:	2302      	movs	r3, #2
 8001924:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001926:	2300      	movs	r3, #0
 8001928:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800192a:	2300      	movs	r3, #0
 800192c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 800192e:	230a      	movs	r3, #10
 8001930:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001932:	f107 031c 	add.w	r3, r7, #28
 8001936:	4619      	mov	r1, r3
 8001938:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800193c:	f000 fcaa 	bl	8002294 <HAL_GPIO_Init>
}
 8001940:	bf00      	nop
 8001942:	3730      	adds	r7, #48	@ 0x30
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}
 8001948:	40000400 	.word	0x40000400
 800194c:	40021000 	.word	0x40021000
 8001950:	48000400 	.word	0x48000400
 8001954:	40000800 	.word	0x40000800

08001958 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001958:	b480      	push	{r7}
 800195a:	b085      	sub	sp, #20
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM8)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a0a      	ldr	r2, [pc, #40]	@ (8001990 <HAL_TIM_Base_MspInit+0x38>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d10b      	bne.n	8001982 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* TIM8 clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 800196a:	4b0a      	ldr	r3, [pc, #40]	@ (8001994 <HAL_TIM_Base_MspInit+0x3c>)
 800196c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800196e:	4a09      	ldr	r2, [pc, #36]	@ (8001994 <HAL_TIM_Base_MspInit+0x3c>)
 8001970:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001974:	6613      	str	r3, [r2, #96]	@ 0x60
 8001976:	4b07      	ldr	r3, [pc, #28]	@ (8001994 <HAL_TIM_Base_MspInit+0x3c>)
 8001978:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800197a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800197e:	60fb      	str	r3, [r7, #12]
 8001980:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8001982:	bf00      	nop
 8001984:	3714      	adds	r7, #20
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr
 800198e:	bf00      	nop
 8001990:	40013400 	.word	0x40013400
 8001994:	40021000 	.word	0x40021000

08001998 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b08a      	sub	sp, #40	@ 0x28
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019a0:	f107 0314 	add.w	r3, r7, #20
 80019a4:	2200      	movs	r2, #0
 80019a6:	601a      	str	r2, [r3, #0]
 80019a8:	605a      	str	r2, [r3, #4]
 80019aa:	609a      	str	r2, [r3, #8]
 80019ac:	60da      	str	r2, [r3, #12]
 80019ae:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM8)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a1f      	ldr	r2, [pc, #124]	@ (8001a34 <HAL_TIM_MspPostInit+0x9c>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d138      	bne.n	8001a2c <HAL_TIM_MspPostInit+0x94>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019ba:	4b1f      	ldr	r3, [pc, #124]	@ (8001a38 <HAL_TIM_MspPostInit+0xa0>)
 80019bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019be:	4a1e      	ldr	r2, [pc, #120]	@ (8001a38 <HAL_TIM_MspPostInit+0xa0>)
 80019c0:	f043 0301 	orr.w	r3, r3, #1
 80019c4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80019c6:	4b1c      	ldr	r3, [pc, #112]	@ (8001a38 <HAL_TIM_MspPostInit+0xa0>)
 80019c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019ca:	f003 0301 	and.w	r3, r3, #1
 80019ce:	613b      	str	r3, [r7, #16]
 80019d0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019d2:	4b19      	ldr	r3, [pc, #100]	@ (8001a38 <HAL_TIM_MspPostInit+0xa0>)
 80019d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019d6:	4a18      	ldr	r2, [pc, #96]	@ (8001a38 <HAL_TIM_MspPostInit+0xa0>)
 80019d8:	f043 0302 	orr.w	r3, r3, #2
 80019dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80019de:	4b16      	ldr	r3, [pc, #88]	@ (8001a38 <HAL_TIM_MspPostInit+0xa0>)
 80019e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019e2:	f003 0302 	and.w	r3, r3, #2
 80019e6:	60fb      	str	r3, [r7, #12]
 80019e8:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PA7     ------> TIM8_CH1N
    PB0     ------> TIM8_CH2N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80019ea:	2380      	movs	r3, #128	@ 0x80
 80019ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ee:	2302      	movs	r3, #2
 80019f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f2:	2300      	movs	r3, #0
 80019f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019f6:	2300      	movs	r3, #0
 80019f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 80019fa:	2304      	movs	r3, #4
 80019fc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019fe:	f107 0314 	add.w	r3, r7, #20
 8001a02:	4619      	mov	r1, r3
 8001a04:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a08:	f000 fc44 	bl	8002294 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a10:	2302      	movs	r3, #2
 8001a12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a14:	2300      	movs	r3, #0
 8001a16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8001a1c:	2304      	movs	r3, #4
 8001a1e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a20:	f107 0314 	add.w	r3, r7, #20
 8001a24:	4619      	mov	r1, r3
 8001a26:	4805      	ldr	r0, [pc, #20]	@ (8001a3c <HAL_TIM_MspPostInit+0xa4>)
 8001a28:	f000 fc34 	bl	8002294 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8001a2c:	bf00      	nop
 8001a2e:	3728      	adds	r7, #40	@ 0x28
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}
 8001a34:	40013400 	.word	0x40013400
 8001a38:	40021000 	.word	0x40021000
 8001a3c:	48000400 	.word	0x48000400

08001a40 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001a44:	4b22      	ldr	r3, [pc, #136]	@ (8001ad0 <MX_USART2_UART_Init+0x90>)
 8001a46:	4a23      	ldr	r2, [pc, #140]	@ (8001ad4 <MX_USART2_UART_Init+0x94>)
 8001a48:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001a4a:	4b21      	ldr	r3, [pc, #132]	@ (8001ad0 <MX_USART2_UART_Init+0x90>)
 8001a4c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001a50:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001a52:	4b1f      	ldr	r3, [pc, #124]	@ (8001ad0 <MX_USART2_UART_Init+0x90>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001a58:	4b1d      	ldr	r3, [pc, #116]	@ (8001ad0 <MX_USART2_UART_Init+0x90>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001a5e:	4b1c      	ldr	r3, [pc, #112]	@ (8001ad0 <MX_USART2_UART_Init+0x90>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001a64:	4b1a      	ldr	r3, [pc, #104]	@ (8001ad0 <MX_USART2_UART_Init+0x90>)
 8001a66:	220c      	movs	r2, #12
 8001a68:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a6a:	4b19      	ldr	r3, [pc, #100]	@ (8001ad0 <MX_USART2_UART_Init+0x90>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a70:	4b17      	ldr	r3, [pc, #92]	@ (8001ad0 <MX_USART2_UART_Init+0x90>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a76:	4b16      	ldr	r3, [pc, #88]	@ (8001ad0 <MX_USART2_UART_Init+0x90>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001a7c:	4b14      	ldr	r3, [pc, #80]	@ (8001ad0 <MX_USART2_UART_Init+0x90>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a82:	4b13      	ldr	r3, [pc, #76]	@ (8001ad0 <MX_USART2_UART_Init+0x90>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001a88:	4811      	ldr	r0, [pc, #68]	@ (8001ad0 <MX_USART2_UART_Init+0x90>)
 8001a8a:	f003 fd6d 	bl	8005568 <HAL_UART_Init>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d001      	beq.n	8001a98 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001a94:	f7ff fc3f 	bl	8001316 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a98:	2100      	movs	r1, #0
 8001a9a:	480d      	ldr	r0, [pc, #52]	@ (8001ad0 <MX_USART2_UART_Init+0x90>)
 8001a9c:	f004 fad8 	bl	8006050 <HAL_UARTEx_SetTxFifoThreshold>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d001      	beq.n	8001aaa <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001aa6:	f7ff fc36 	bl	8001316 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001aaa:	2100      	movs	r1, #0
 8001aac:	4808      	ldr	r0, [pc, #32]	@ (8001ad0 <MX_USART2_UART_Init+0x90>)
 8001aae:	f004 fb0d 	bl	80060cc <HAL_UARTEx_SetRxFifoThreshold>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d001      	beq.n	8001abc <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001ab8:	f7ff fc2d 	bl	8001316 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001abc:	4804      	ldr	r0, [pc, #16]	@ (8001ad0 <MX_USART2_UART_Init+0x90>)
 8001abe:	f004 fa8e 	bl	8005fde <HAL_UARTEx_DisableFifoMode>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d001      	beq.n	8001acc <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001ac8:	f7ff fc25 	bl	8001316 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001acc:	bf00      	nop
 8001ace:	bd80      	pop	{r7, pc}
 8001ad0:	20000320 	.word	0x20000320
 8001ad4:	40004400 	.word	0x40004400

08001ad8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b09a      	sub	sp, #104	@ 0x68
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ae0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	601a      	str	r2, [r3, #0]
 8001ae8:	605a      	str	r2, [r3, #4]
 8001aea:	609a      	str	r2, [r3, #8]
 8001aec:	60da      	str	r2, [r3, #12]
 8001aee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001af0:	f107 0310 	add.w	r3, r7, #16
 8001af4:	2244      	movs	r2, #68	@ 0x44
 8001af6:	2100      	movs	r1, #0
 8001af8:	4618      	mov	r0, r3
 8001afa:	f004 fe5d 	bl	80067b8 <memset>
  if(uartHandle->Instance==USART2)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4a1f      	ldr	r2, [pc, #124]	@ (8001b80 <HAL_UART_MspInit+0xa8>)
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d136      	bne.n	8001b76 <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001b08:	2302      	movs	r3, #2
 8001b0a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b10:	f107 0310 	add.w	r3, r7, #16
 8001b14:	4618      	mov	r0, r3
 8001b16:	f002 f977 	bl	8003e08 <HAL_RCCEx_PeriphCLKConfig>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d001      	beq.n	8001b24 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001b20:	f7ff fbf9 	bl	8001316 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b24:	4b17      	ldr	r3, [pc, #92]	@ (8001b84 <HAL_UART_MspInit+0xac>)
 8001b26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b28:	4a16      	ldr	r2, [pc, #88]	@ (8001b84 <HAL_UART_MspInit+0xac>)
 8001b2a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b2e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001b30:	4b14      	ldr	r3, [pc, #80]	@ (8001b84 <HAL_UART_MspInit+0xac>)
 8001b32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b34:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b38:	60fb      	str	r3, [r7, #12]
 8001b3a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b3c:	4b11      	ldr	r3, [pc, #68]	@ (8001b84 <HAL_UART_MspInit+0xac>)
 8001b3e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b40:	4a10      	ldr	r2, [pc, #64]	@ (8001b84 <HAL_UART_MspInit+0xac>)
 8001b42:	f043 0301 	orr.w	r3, r3, #1
 8001b46:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b48:	4b0e      	ldr	r3, [pc, #56]	@ (8001b84 <HAL_UART_MspInit+0xac>)
 8001b4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b4c:	f003 0301 	and.w	r3, r3, #1
 8001b50:	60bb      	str	r3, [r7, #8]
 8001b52:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8001b54:	230c      	movs	r3, #12
 8001b56:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b58:	2302      	movs	r3, #2
 8001b5a:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b60:	2300      	movs	r3, #0
 8001b62:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b64:	2307      	movs	r3, #7
 8001b66:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b68:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b72:	f000 fb8f 	bl	8002294 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001b76:	bf00      	nop
 8001b78:	3768      	adds	r7, #104	@ 0x68
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	40004400 	.word	0x40004400
 8001b84:	40021000 	.word	0x40021000

08001b88 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001b88:	480d      	ldr	r0, [pc, #52]	@ (8001bc0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001b8a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001b8c:	f7ff fc3c 	bl	8001408 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b90:	480c      	ldr	r0, [pc, #48]	@ (8001bc4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001b92:	490d      	ldr	r1, [pc, #52]	@ (8001bc8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001b94:	4a0d      	ldr	r2, [pc, #52]	@ (8001bcc <LoopForever+0xe>)
  movs r3, #0
 8001b96:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001b98:	e002      	b.n	8001ba0 <LoopCopyDataInit>

08001b9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b9e:	3304      	adds	r3, #4

08001ba0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ba0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ba2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ba4:	d3f9      	bcc.n	8001b9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ba6:	4a0a      	ldr	r2, [pc, #40]	@ (8001bd0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001ba8:	4c0a      	ldr	r4, [pc, #40]	@ (8001bd4 <LoopForever+0x16>)
  movs r3, #0
 8001baa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bac:	e001      	b.n	8001bb2 <LoopFillZerobss>

08001bae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bb0:	3204      	adds	r2, #4

08001bb2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bb2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bb4:	d3fb      	bcc.n	8001bae <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8001bb6:	f004 fe07 	bl	80067c8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001bba:	f7ff faf7 	bl	80011ac <main>

08001bbe <LoopForever>:

LoopForever:
    b LoopForever
 8001bbe:	e7fe      	b.n	8001bbe <LoopForever>
  ldr   r0, =_estack
 8001bc0:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001bc4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bc8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001bcc:	08006878 	.word	0x08006878
  ldr r2, =_sbss
 8001bd0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001bd4:	200003b8 	.word	0x200003b8

08001bd8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001bd8:	e7fe      	b.n	8001bd8 <ADC1_2_IRQHandler>

08001bda <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bda:	b580      	push	{r7, lr}
 8001bdc:	b082      	sub	sp, #8
 8001bde:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001be0:	2300      	movs	r3, #0
 8001be2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001be4:	2003      	movs	r0, #3
 8001be6:	f000 f95b 	bl	8001ea0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001bea:	2000      	movs	r0, #0
 8001bec:	f000 f80e 	bl	8001c0c <HAL_InitTick>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d002      	beq.n	8001bfc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	71fb      	strb	r3, [r7, #7]
 8001bfa:	e001      	b.n	8001c00 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001bfc:	f7ff fb92 	bl	8001324 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001c00:	79fb      	ldrb	r3, [r7, #7]

}
 8001c02:	4618      	mov	r0, r3
 8001c04:	3708      	adds	r7, #8
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}
	...

08001c0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b084      	sub	sp, #16
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001c14:	2300      	movs	r3, #0
 8001c16:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001c18:	4b16      	ldr	r3, [pc, #88]	@ (8001c74 <HAL_InitTick+0x68>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d022      	beq.n	8001c66 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001c20:	4b15      	ldr	r3, [pc, #84]	@ (8001c78 <HAL_InitTick+0x6c>)
 8001c22:	681a      	ldr	r2, [r3, #0]
 8001c24:	4b13      	ldr	r3, [pc, #76]	@ (8001c74 <HAL_InitTick+0x68>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001c2c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c30:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c34:	4618      	mov	r0, r3
 8001c36:	f000 f966 	bl	8001f06 <HAL_SYSTICK_Config>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d10f      	bne.n	8001c60 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2b0f      	cmp	r3, #15
 8001c44:	d809      	bhi.n	8001c5a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c46:	2200      	movs	r2, #0
 8001c48:	6879      	ldr	r1, [r7, #4]
 8001c4a:	f04f 30ff 	mov.w	r0, #4294967295
 8001c4e:	f000 f932 	bl	8001eb6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001c52:	4a0a      	ldr	r2, [pc, #40]	@ (8001c7c <HAL_InitTick+0x70>)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6013      	str	r3, [r2, #0]
 8001c58:	e007      	b.n	8001c6a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	73fb      	strb	r3, [r7, #15]
 8001c5e:	e004      	b.n	8001c6a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001c60:	2301      	movs	r3, #1
 8001c62:	73fb      	strb	r3, [r7, #15]
 8001c64:	e001      	b.n	8001c6a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001c66:	2301      	movs	r3, #1
 8001c68:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001c6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	3710      	adds	r7, #16
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	20000008 	.word	0x20000008
 8001c78:	20000000 	.word	0x20000000
 8001c7c:	20000004 	.word	0x20000004

08001c80 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c80:	b480      	push	{r7}
 8001c82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c84:	4b05      	ldr	r3, [pc, #20]	@ (8001c9c <HAL_IncTick+0x1c>)
 8001c86:	681a      	ldr	r2, [r3, #0]
 8001c88:	4b05      	ldr	r3, [pc, #20]	@ (8001ca0 <HAL_IncTick+0x20>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4413      	add	r3, r2
 8001c8e:	4a03      	ldr	r2, [pc, #12]	@ (8001c9c <HAL_IncTick+0x1c>)
 8001c90:	6013      	str	r3, [r2, #0]
}
 8001c92:	bf00      	nop
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr
 8001c9c:	200003b4 	.word	0x200003b4
 8001ca0:	20000008 	.word	0x20000008

08001ca4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	af00      	add	r7, sp, #0
  return uwTick;
 8001ca8:	4b03      	ldr	r3, [pc, #12]	@ (8001cb8 <HAL_GetTick+0x14>)
 8001caa:	681b      	ldr	r3, [r3, #0]
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb4:	4770      	bx	lr
 8001cb6:	bf00      	nop
 8001cb8:	200003b4 	.word	0x200003b4

08001cbc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b084      	sub	sp, #16
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001cc4:	f7ff ffee 	bl	8001ca4 <HAL_GetTick>
 8001cc8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cd4:	d004      	beq.n	8001ce0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001cd6:	4b09      	ldr	r3, [pc, #36]	@ (8001cfc <HAL_Delay+0x40>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	68fa      	ldr	r2, [r7, #12]
 8001cdc:	4413      	add	r3, r2
 8001cde:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001ce0:	bf00      	nop
 8001ce2:	f7ff ffdf 	bl	8001ca4 <HAL_GetTick>
 8001ce6:	4602      	mov	r2, r0
 8001ce8:	68bb      	ldr	r3, [r7, #8]
 8001cea:	1ad3      	subs	r3, r2, r3
 8001cec:	68fa      	ldr	r2, [r7, #12]
 8001cee:	429a      	cmp	r2, r3
 8001cf0:	d8f7      	bhi.n	8001ce2 <HAL_Delay+0x26>
  {
  }
}
 8001cf2:	bf00      	nop
 8001cf4:	bf00      	nop
 8001cf6:	3710      	adds	r7, #16
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}
 8001cfc:	20000008 	.word	0x20000008

08001d00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b085      	sub	sp, #20
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	f003 0307 	and.w	r3, r3, #7
 8001d0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d10:	4b0c      	ldr	r3, [pc, #48]	@ (8001d44 <__NVIC_SetPriorityGrouping+0x44>)
 8001d12:	68db      	ldr	r3, [r3, #12]
 8001d14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d16:	68ba      	ldr	r2, [r7, #8]
 8001d18:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d24:	68bb      	ldr	r3, [r7, #8]
 8001d26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d28:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001d2c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d32:	4a04      	ldr	r2, [pc, #16]	@ (8001d44 <__NVIC_SetPriorityGrouping+0x44>)
 8001d34:	68bb      	ldr	r3, [r7, #8]
 8001d36:	60d3      	str	r3, [r2, #12]
}
 8001d38:	bf00      	nop
 8001d3a:	3714      	adds	r7, #20
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d42:	4770      	bx	lr
 8001d44:	e000ed00 	.word	0xe000ed00

08001d48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d4c:	4b04      	ldr	r3, [pc, #16]	@ (8001d60 <__NVIC_GetPriorityGrouping+0x18>)
 8001d4e:	68db      	ldr	r3, [r3, #12]
 8001d50:	0a1b      	lsrs	r3, r3, #8
 8001d52:	f003 0307 	and.w	r3, r3, #7
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5e:	4770      	bx	lr
 8001d60:	e000ed00 	.word	0xe000ed00

08001d64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b083      	sub	sp, #12
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	db0b      	blt.n	8001d8e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d76:	79fb      	ldrb	r3, [r7, #7]
 8001d78:	f003 021f 	and.w	r2, r3, #31
 8001d7c:	4907      	ldr	r1, [pc, #28]	@ (8001d9c <__NVIC_EnableIRQ+0x38>)
 8001d7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d82:	095b      	lsrs	r3, r3, #5
 8001d84:	2001      	movs	r0, #1
 8001d86:	fa00 f202 	lsl.w	r2, r0, r2
 8001d8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001d8e:	bf00      	nop
 8001d90:	370c      	adds	r7, #12
 8001d92:	46bd      	mov	sp, r7
 8001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d98:	4770      	bx	lr
 8001d9a:	bf00      	nop
 8001d9c:	e000e100 	.word	0xe000e100

08001da0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b083      	sub	sp, #12
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	4603      	mov	r3, r0
 8001da8:	6039      	str	r1, [r7, #0]
 8001daa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	db0a      	blt.n	8001dca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	b2da      	uxtb	r2, r3
 8001db8:	490c      	ldr	r1, [pc, #48]	@ (8001dec <__NVIC_SetPriority+0x4c>)
 8001dba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dbe:	0112      	lsls	r2, r2, #4
 8001dc0:	b2d2      	uxtb	r2, r2
 8001dc2:	440b      	add	r3, r1
 8001dc4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001dc8:	e00a      	b.n	8001de0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	b2da      	uxtb	r2, r3
 8001dce:	4908      	ldr	r1, [pc, #32]	@ (8001df0 <__NVIC_SetPriority+0x50>)
 8001dd0:	79fb      	ldrb	r3, [r7, #7]
 8001dd2:	f003 030f 	and.w	r3, r3, #15
 8001dd6:	3b04      	subs	r3, #4
 8001dd8:	0112      	lsls	r2, r2, #4
 8001dda:	b2d2      	uxtb	r2, r2
 8001ddc:	440b      	add	r3, r1
 8001dde:	761a      	strb	r2, [r3, #24]
}
 8001de0:	bf00      	nop
 8001de2:	370c      	adds	r7, #12
 8001de4:	46bd      	mov	sp, r7
 8001de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dea:	4770      	bx	lr
 8001dec:	e000e100 	.word	0xe000e100
 8001df0:	e000ed00 	.word	0xe000ed00

08001df4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b089      	sub	sp, #36	@ 0x24
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	60f8      	str	r0, [r7, #12]
 8001dfc:	60b9      	str	r1, [r7, #8]
 8001dfe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	f003 0307 	and.w	r3, r3, #7
 8001e06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e08:	69fb      	ldr	r3, [r7, #28]
 8001e0a:	f1c3 0307 	rsb	r3, r3, #7
 8001e0e:	2b04      	cmp	r3, #4
 8001e10:	bf28      	it	cs
 8001e12:	2304      	movcs	r3, #4
 8001e14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e16:	69fb      	ldr	r3, [r7, #28]
 8001e18:	3304      	adds	r3, #4
 8001e1a:	2b06      	cmp	r3, #6
 8001e1c:	d902      	bls.n	8001e24 <NVIC_EncodePriority+0x30>
 8001e1e:	69fb      	ldr	r3, [r7, #28]
 8001e20:	3b03      	subs	r3, #3
 8001e22:	e000      	b.n	8001e26 <NVIC_EncodePriority+0x32>
 8001e24:	2300      	movs	r3, #0
 8001e26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e28:	f04f 32ff 	mov.w	r2, #4294967295
 8001e2c:	69bb      	ldr	r3, [r7, #24]
 8001e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e32:	43da      	mvns	r2, r3
 8001e34:	68bb      	ldr	r3, [r7, #8]
 8001e36:	401a      	ands	r2, r3
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e3c:	f04f 31ff 	mov.w	r1, #4294967295
 8001e40:	697b      	ldr	r3, [r7, #20]
 8001e42:	fa01 f303 	lsl.w	r3, r1, r3
 8001e46:	43d9      	mvns	r1, r3
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e4c:	4313      	orrs	r3, r2
         );
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	3724      	adds	r7, #36	@ 0x24
 8001e52:	46bd      	mov	sp, r7
 8001e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e58:	4770      	bx	lr
	...

08001e5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b082      	sub	sp, #8
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	3b01      	subs	r3, #1
 8001e68:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001e6c:	d301      	bcc.n	8001e72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e6e:	2301      	movs	r3, #1
 8001e70:	e00f      	b.n	8001e92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e72:	4a0a      	ldr	r2, [pc, #40]	@ (8001e9c <SysTick_Config+0x40>)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	3b01      	subs	r3, #1
 8001e78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e7a:	210f      	movs	r1, #15
 8001e7c:	f04f 30ff 	mov.w	r0, #4294967295
 8001e80:	f7ff ff8e 	bl	8001da0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e84:	4b05      	ldr	r3, [pc, #20]	@ (8001e9c <SysTick_Config+0x40>)
 8001e86:	2200      	movs	r2, #0
 8001e88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e8a:	4b04      	ldr	r3, [pc, #16]	@ (8001e9c <SysTick_Config+0x40>)
 8001e8c:	2207      	movs	r2, #7
 8001e8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e90:	2300      	movs	r3, #0
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	3708      	adds	r7, #8
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	e000e010 	.word	0xe000e010

08001ea0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b082      	sub	sp, #8
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ea8:	6878      	ldr	r0, [r7, #4]
 8001eaa:	f7ff ff29 	bl	8001d00 <__NVIC_SetPriorityGrouping>
}
 8001eae:	bf00      	nop
 8001eb0:	3708      	adds	r7, #8
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}

08001eb6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001eb6:	b580      	push	{r7, lr}
 8001eb8:	b086      	sub	sp, #24
 8001eba:	af00      	add	r7, sp, #0
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	60b9      	str	r1, [r7, #8]
 8001ec0:	607a      	str	r2, [r7, #4]
 8001ec2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001ec4:	f7ff ff40 	bl	8001d48 <__NVIC_GetPriorityGrouping>
 8001ec8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001eca:	687a      	ldr	r2, [r7, #4]
 8001ecc:	68b9      	ldr	r1, [r7, #8]
 8001ece:	6978      	ldr	r0, [r7, #20]
 8001ed0:	f7ff ff90 	bl	8001df4 <NVIC_EncodePriority>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001eda:	4611      	mov	r1, r2
 8001edc:	4618      	mov	r0, r3
 8001ede:	f7ff ff5f 	bl	8001da0 <__NVIC_SetPriority>
}
 8001ee2:	bf00      	nop
 8001ee4:	3718      	adds	r7, #24
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}

08001eea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001eea:	b580      	push	{r7, lr}
 8001eec:	b082      	sub	sp, #8
 8001eee:	af00      	add	r7, sp, #0
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ef4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ef8:	4618      	mov	r0, r3
 8001efa:	f7ff ff33 	bl	8001d64 <__NVIC_EnableIRQ>
}
 8001efe:	bf00      	nop
 8001f00:	3708      	adds	r7, #8
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}

08001f06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f06:	b580      	push	{r7, lr}
 8001f08:	b082      	sub	sp, #8
 8001f0a:	af00      	add	r7, sp, #0
 8001f0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f0e:	6878      	ldr	r0, [r7, #4]
 8001f10:	f7ff ffa4 	bl	8001e5c <SysTick_Config>
 8001f14:	4603      	mov	r3, r0
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	3708      	adds	r7, #8
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}
	...

08001f20 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b084      	sub	sp, #16
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d101      	bne.n	8001f32 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e08d      	b.n	800204e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	461a      	mov	r2, r3
 8001f38:	4b47      	ldr	r3, [pc, #284]	@ (8002058 <HAL_DMA_Init+0x138>)
 8001f3a:	429a      	cmp	r2, r3
 8001f3c:	d80f      	bhi.n	8001f5e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	461a      	mov	r2, r3
 8001f44:	4b45      	ldr	r3, [pc, #276]	@ (800205c <HAL_DMA_Init+0x13c>)
 8001f46:	4413      	add	r3, r2
 8001f48:	4a45      	ldr	r2, [pc, #276]	@ (8002060 <HAL_DMA_Init+0x140>)
 8001f4a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f4e:	091b      	lsrs	r3, r3, #4
 8001f50:	009a      	lsls	r2, r3, #2
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	4a42      	ldr	r2, [pc, #264]	@ (8002064 <HAL_DMA_Init+0x144>)
 8001f5a:	641a      	str	r2, [r3, #64]	@ 0x40
 8001f5c:	e00e      	b.n	8001f7c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	461a      	mov	r2, r3
 8001f64:	4b40      	ldr	r3, [pc, #256]	@ (8002068 <HAL_DMA_Init+0x148>)
 8001f66:	4413      	add	r3, r2
 8001f68:	4a3d      	ldr	r2, [pc, #244]	@ (8002060 <HAL_DMA_Init+0x140>)
 8001f6a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f6e:	091b      	lsrs	r3, r3, #4
 8001f70:	009a      	lsls	r2, r3, #2
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	4a3c      	ldr	r2, [pc, #240]	@ (800206c <HAL_DMA_Init+0x14c>)
 8001f7a:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2202      	movs	r2, #2
 8001f80:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8001f92:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001f96:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001fa0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	691b      	ldr	r3, [r3, #16]
 8001fa6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	699b      	ldr	r3, [r3, #24]
 8001fb2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fb8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6a1b      	ldr	r3, [r3, #32]
 8001fbe:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001fc0:	68fa      	ldr	r2, [r7, #12]
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	68fa      	ldr	r2, [r7, #12]
 8001fcc:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001fce:	6878      	ldr	r0, [r7, #4]
 8001fd0:	f000 f8fe 	bl	80021d0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	689b      	ldr	r3, [r3, #8]
 8001fd8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001fdc:	d102      	bne.n	8001fe4 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	685a      	ldr	r2, [r3, #4]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001fec:	b2d2      	uxtb	r2, r2
 8001fee:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ff4:	687a      	ldr	r2, [r7, #4]
 8001ff6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001ff8:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d010      	beq.n	8002024 <HAL_DMA_Init+0x104>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	2b04      	cmp	r3, #4
 8002008:	d80c      	bhi.n	8002024 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800200a:	6878      	ldr	r0, [r7, #4]
 800200c:	f000 f91e 	bl	800224c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002014:	2200      	movs	r2, #0
 8002016:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800201c:	687a      	ldr	r2, [r7, #4]
 800201e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002020:	605a      	str	r2, [r3, #4]
 8002022:	e008      	b.n	8002036 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2200      	movs	r2, #0
 8002028:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2200      	movs	r2, #0
 800202e:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2200      	movs	r2, #0
 8002034:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2200      	movs	r2, #0
 800203a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2201      	movs	r2, #1
 8002040:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2200      	movs	r2, #0
 8002048:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800204c:	2300      	movs	r3, #0
}
 800204e:	4618      	mov	r0, r3
 8002050:	3710      	adds	r7, #16
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}
 8002056:	bf00      	nop
 8002058:	40020407 	.word	0x40020407
 800205c:	bffdfff8 	.word	0xbffdfff8
 8002060:	cccccccd 	.word	0xcccccccd
 8002064:	40020000 	.word	0x40020000
 8002068:	bffdfbf8 	.word	0xbffdfbf8
 800206c:	40020400 	.word	0x40020400

08002070 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b084      	sub	sp, #16
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800208c:	f003 031f 	and.w	r3, r3, #31
 8002090:	2204      	movs	r2, #4
 8002092:	409a      	lsls	r2, r3
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	4013      	ands	r3, r2
 8002098:	2b00      	cmp	r3, #0
 800209a:	d026      	beq.n	80020ea <HAL_DMA_IRQHandler+0x7a>
 800209c:	68bb      	ldr	r3, [r7, #8]
 800209e:	f003 0304 	and.w	r3, r3, #4
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d021      	beq.n	80020ea <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f003 0320 	and.w	r3, r3, #32
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d107      	bne.n	80020c4 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	681a      	ldr	r2, [r3, #0]
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f022 0204 	bic.w	r2, r2, #4
 80020c2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020c8:	f003 021f 	and.w	r2, r3, #31
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020d0:	2104      	movs	r1, #4
 80020d2:	fa01 f202 	lsl.w	r2, r1, r2
 80020d6:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d071      	beq.n	80021c4 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020e4:	6878      	ldr	r0, [r7, #4]
 80020e6:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80020e8:	e06c      	b.n	80021c4 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020ee:	f003 031f 	and.w	r3, r3, #31
 80020f2:	2202      	movs	r2, #2
 80020f4:	409a      	lsls	r2, r3
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	4013      	ands	r3, r2
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d02e      	beq.n	800215c <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80020fe:	68bb      	ldr	r3, [r7, #8]
 8002100:	f003 0302 	and.w	r3, r3, #2
 8002104:	2b00      	cmp	r3, #0
 8002106:	d029      	beq.n	800215c <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f003 0320 	and.w	r3, r3, #32
 8002112:	2b00      	cmp	r3, #0
 8002114:	d10b      	bne.n	800212e <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	681a      	ldr	r2, [r3, #0]
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f022 020a 	bic.w	r2, r2, #10
 8002124:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2201      	movs	r2, #1
 800212a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002132:	f003 021f 	and.w	r2, r3, #31
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800213a:	2102      	movs	r1, #2
 800213c:	fa01 f202 	lsl.w	r2, r1, r2
 8002140:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2200      	movs	r2, #0
 8002146:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800214e:	2b00      	cmp	r3, #0
 8002150:	d038      	beq.n	80021c4 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002156:	6878      	ldr	r0, [r7, #4]
 8002158:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800215a:	e033      	b.n	80021c4 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002160:	f003 031f 	and.w	r3, r3, #31
 8002164:	2208      	movs	r2, #8
 8002166:	409a      	lsls	r2, r3
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	4013      	ands	r3, r2
 800216c:	2b00      	cmp	r3, #0
 800216e:	d02a      	beq.n	80021c6 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8002170:	68bb      	ldr	r3, [r7, #8]
 8002172:	f003 0308 	and.w	r3, r3, #8
 8002176:	2b00      	cmp	r3, #0
 8002178:	d025      	beq.n	80021c6 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	681a      	ldr	r2, [r3, #0]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f022 020e 	bic.w	r2, r2, #14
 8002188:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800218e:	f003 021f 	and.w	r2, r3, #31
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002196:	2101      	movs	r1, #1
 8002198:	fa01 f202 	lsl.w	r2, r1, r2
 800219c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2201      	movs	r2, #1
 80021a2:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2201      	movs	r2, #1
 80021a8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2200      	movs	r2, #0
 80021b0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d004      	beq.n	80021c6 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80021c0:	6878      	ldr	r0, [r7, #4]
 80021c2:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80021c4:	bf00      	nop
 80021c6:	bf00      	nop
}
 80021c8:	3710      	adds	r7, #16
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}
	...

080021d0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b087      	sub	sp, #28
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	461a      	mov	r2, r3
 80021de:	4b16      	ldr	r3, [pc, #88]	@ (8002238 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80021e0:	429a      	cmp	r2, r3
 80021e2:	d802      	bhi.n	80021ea <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80021e4:	4b15      	ldr	r3, [pc, #84]	@ (800223c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80021e6:	617b      	str	r3, [r7, #20]
 80021e8:	e001      	b.n	80021ee <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 80021ea:	4b15      	ldr	r3, [pc, #84]	@ (8002240 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80021ec:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80021ee:	697b      	ldr	r3, [r7, #20]
 80021f0:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	b2db      	uxtb	r3, r3
 80021f8:	3b08      	subs	r3, #8
 80021fa:	4a12      	ldr	r2, [pc, #72]	@ (8002244 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80021fc:	fba2 2303 	umull	r2, r3, r2, r3
 8002200:	091b      	lsrs	r3, r3, #4
 8002202:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002208:	089b      	lsrs	r3, r3, #2
 800220a:	009a      	lsls	r2, r3, #2
 800220c:	693b      	ldr	r3, [r7, #16]
 800220e:	4413      	add	r3, r2
 8002210:	461a      	mov	r2, r3
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	4a0b      	ldr	r2, [pc, #44]	@ (8002248 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800221a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	f003 031f 	and.w	r3, r3, #31
 8002222:	2201      	movs	r2, #1
 8002224:	409a      	lsls	r2, r3
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800222a:	bf00      	nop
 800222c:	371c      	adds	r7, #28
 800222e:	46bd      	mov	sp, r7
 8002230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002234:	4770      	bx	lr
 8002236:	bf00      	nop
 8002238:	40020407 	.word	0x40020407
 800223c:	40020800 	.word	0x40020800
 8002240:	40020820 	.word	0x40020820
 8002244:	cccccccd 	.word	0xcccccccd
 8002248:	40020880 	.word	0x40020880

0800224c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800224c:	b480      	push	{r7}
 800224e:	b085      	sub	sp, #20
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	b2db      	uxtb	r3, r3
 800225a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800225c:	68fa      	ldr	r2, [r7, #12]
 800225e:	4b0b      	ldr	r3, [pc, #44]	@ (800228c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002260:	4413      	add	r3, r2
 8002262:	009b      	lsls	r3, r3, #2
 8002264:	461a      	mov	r2, r3
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	4a08      	ldr	r2, [pc, #32]	@ (8002290 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800226e:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	3b01      	subs	r3, #1
 8002274:	f003 031f 	and.w	r3, r3, #31
 8002278:	2201      	movs	r2, #1
 800227a:	409a      	lsls	r2, r3
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8002280:	bf00      	nop
 8002282:	3714      	adds	r7, #20
 8002284:	46bd      	mov	sp, r7
 8002286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228a:	4770      	bx	lr
 800228c:	1000823f 	.word	0x1000823f
 8002290:	40020940 	.word	0x40020940

08002294 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002294:	b480      	push	{r7}
 8002296:	b087      	sub	sp, #28
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
 800229c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800229e:	2300      	movs	r3, #0
 80022a0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80022a2:	e15a      	b.n	800255a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	681a      	ldr	r2, [r3, #0]
 80022a8:	2101      	movs	r1, #1
 80022aa:	697b      	ldr	r3, [r7, #20]
 80022ac:	fa01 f303 	lsl.w	r3, r1, r3
 80022b0:	4013      	ands	r3, r2
 80022b2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	f000 814c 	beq.w	8002554 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	f003 0303 	and.w	r3, r3, #3
 80022c4:	2b01      	cmp	r3, #1
 80022c6:	d005      	beq.n	80022d4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80022d0:	2b02      	cmp	r3, #2
 80022d2:	d130      	bne.n	8002336 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	689b      	ldr	r3, [r3, #8]
 80022d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80022da:	697b      	ldr	r3, [r7, #20]
 80022dc:	005b      	lsls	r3, r3, #1
 80022de:	2203      	movs	r2, #3
 80022e0:	fa02 f303 	lsl.w	r3, r2, r3
 80022e4:	43db      	mvns	r3, r3
 80022e6:	693a      	ldr	r2, [r7, #16]
 80022e8:	4013      	ands	r3, r2
 80022ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	68da      	ldr	r2, [r3, #12]
 80022f0:	697b      	ldr	r3, [r7, #20]
 80022f2:	005b      	lsls	r3, r3, #1
 80022f4:	fa02 f303 	lsl.w	r3, r2, r3
 80022f8:	693a      	ldr	r2, [r7, #16]
 80022fa:	4313      	orrs	r3, r2
 80022fc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	693a      	ldr	r2, [r7, #16]
 8002302:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800230a:	2201      	movs	r2, #1
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	fa02 f303 	lsl.w	r3, r2, r3
 8002312:	43db      	mvns	r3, r3
 8002314:	693a      	ldr	r2, [r7, #16]
 8002316:	4013      	ands	r3, r2
 8002318:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	091b      	lsrs	r3, r3, #4
 8002320:	f003 0201 	and.w	r2, r3, #1
 8002324:	697b      	ldr	r3, [r7, #20]
 8002326:	fa02 f303 	lsl.w	r3, r2, r3
 800232a:	693a      	ldr	r2, [r7, #16]
 800232c:	4313      	orrs	r3, r2
 800232e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	693a      	ldr	r2, [r7, #16]
 8002334:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	f003 0303 	and.w	r3, r3, #3
 800233e:	2b03      	cmp	r3, #3
 8002340:	d017      	beq.n	8002372 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	68db      	ldr	r3, [r3, #12]
 8002346:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	005b      	lsls	r3, r3, #1
 800234c:	2203      	movs	r2, #3
 800234e:	fa02 f303 	lsl.w	r3, r2, r3
 8002352:	43db      	mvns	r3, r3
 8002354:	693a      	ldr	r2, [r7, #16]
 8002356:	4013      	ands	r3, r2
 8002358:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	689a      	ldr	r2, [r3, #8]
 800235e:	697b      	ldr	r3, [r7, #20]
 8002360:	005b      	lsls	r3, r3, #1
 8002362:	fa02 f303 	lsl.w	r3, r2, r3
 8002366:	693a      	ldr	r2, [r7, #16]
 8002368:	4313      	orrs	r3, r2
 800236a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	693a      	ldr	r2, [r7, #16]
 8002370:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	f003 0303 	and.w	r3, r3, #3
 800237a:	2b02      	cmp	r3, #2
 800237c:	d123      	bne.n	80023c6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800237e:	697b      	ldr	r3, [r7, #20]
 8002380:	08da      	lsrs	r2, r3, #3
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	3208      	adds	r2, #8
 8002386:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800238a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800238c:	697b      	ldr	r3, [r7, #20]
 800238e:	f003 0307 	and.w	r3, r3, #7
 8002392:	009b      	lsls	r3, r3, #2
 8002394:	220f      	movs	r2, #15
 8002396:	fa02 f303 	lsl.w	r3, r2, r3
 800239a:	43db      	mvns	r3, r3
 800239c:	693a      	ldr	r2, [r7, #16]
 800239e:	4013      	ands	r3, r2
 80023a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	691a      	ldr	r2, [r3, #16]
 80023a6:	697b      	ldr	r3, [r7, #20]
 80023a8:	f003 0307 	and.w	r3, r3, #7
 80023ac:	009b      	lsls	r3, r3, #2
 80023ae:	fa02 f303 	lsl.w	r3, r2, r3
 80023b2:	693a      	ldr	r2, [r7, #16]
 80023b4:	4313      	orrs	r3, r2
 80023b6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	08da      	lsrs	r2, r3, #3
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	3208      	adds	r2, #8
 80023c0:	6939      	ldr	r1, [r7, #16]
 80023c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80023cc:	697b      	ldr	r3, [r7, #20]
 80023ce:	005b      	lsls	r3, r3, #1
 80023d0:	2203      	movs	r2, #3
 80023d2:	fa02 f303 	lsl.w	r3, r2, r3
 80023d6:	43db      	mvns	r3, r3
 80023d8:	693a      	ldr	r2, [r7, #16]
 80023da:	4013      	ands	r3, r2
 80023dc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	f003 0203 	and.w	r2, r3, #3
 80023e6:	697b      	ldr	r3, [r7, #20]
 80023e8:	005b      	lsls	r3, r3, #1
 80023ea:	fa02 f303 	lsl.w	r3, r2, r3
 80023ee:	693a      	ldr	r2, [r7, #16]
 80023f0:	4313      	orrs	r3, r2
 80023f2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	693a      	ldr	r2, [r7, #16]
 80023f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002402:	2b00      	cmp	r3, #0
 8002404:	f000 80a6 	beq.w	8002554 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002408:	4b5b      	ldr	r3, [pc, #364]	@ (8002578 <HAL_GPIO_Init+0x2e4>)
 800240a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800240c:	4a5a      	ldr	r2, [pc, #360]	@ (8002578 <HAL_GPIO_Init+0x2e4>)
 800240e:	f043 0301 	orr.w	r3, r3, #1
 8002412:	6613      	str	r3, [r2, #96]	@ 0x60
 8002414:	4b58      	ldr	r3, [pc, #352]	@ (8002578 <HAL_GPIO_Init+0x2e4>)
 8002416:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002418:	f003 0301 	and.w	r3, r3, #1
 800241c:	60bb      	str	r3, [r7, #8]
 800241e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002420:	4a56      	ldr	r2, [pc, #344]	@ (800257c <HAL_GPIO_Init+0x2e8>)
 8002422:	697b      	ldr	r3, [r7, #20]
 8002424:	089b      	lsrs	r3, r3, #2
 8002426:	3302      	adds	r3, #2
 8002428:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800242c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800242e:	697b      	ldr	r3, [r7, #20]
 8002430:	f003 0303 	and.w	r3, r3, #3
 8002434:	009b      	lsls	r3, r3, #2
 8002436:	220f      	movs	r2, #15
 8002438:	fa02 f303 	lsl.w	r3, r2, r3
 800243c:	43db      	mvns	r3, r3
 800243e:	693a      	ldr	r2, [r7, #16]
 8002440:	4013      	ands	r3, r2
 8002442:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800244a:	d01f      	beq.n	800248c <HAL_GPIO_Init+0x1f8>
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	4a4c      	ldr	r2, [pc, #304]	@ (8002580 <HAL_GPIO_Init+0x2ec>)
 8002450:	4293      	cmp	r3, r2
 8002452:	d019      	beq.n	8002488 <HAL_GPIO_Init+0x1f4>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	4a4b      	ldr	r2, [pc, #300]	@ (8002584 <HAL_GPIO_Init+0x2f0>)
 8002458:	4293      	cmp	r3, r2
 800245a:	d013      	beq.n	8002484 <HAL_GPIO_Init+0x1f0>
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	4a4a      	ldr	r2, [pc, #296]	@ (8002588 <HAL_GPIO_Init+0x2f4>)
 8002460:	4293      	cmp	r3, r2
 8002462:	d00d      	beq.n	8002480 <HAL_GPIO_Init+0x1ec>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	4a49      	ldr	r2, [pc, #292]	@ (800258c <HAL_GPIO_Init+0x2f8>)
 8002468:	4293      	cmp	r3, r2
 800246a:	d007      	beq.n	800247c <HAL_GPIO_Init+0x1e8>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	4a48      	ldr	r2, [pc, #288]	@ (8002590 <HAL_GPIO_Init+0x2fc>)
 8002470:	4293      	cmp	r3, r2
 8002472:	d101      	bne.n	8002478 <HAL_GPIO_Init+0x1e4>
 8002474:	2305      	movs	r3, #5
 8002476:	e00a      	b.n	800248e <HAL_GPIO_Init+0x1fa>
 8002478:	2306      	movs	r3, #6
 800247a:	e008      	b.n	800248e <HAL_GPIO_Init+0x1fa>
 800247c:	2304      	movs	r3, #4
 800247e:	e006      	b.n	800248e <HAL_GPIO_Init+0x1fa>
 8002480:	2303      	movs	r3, #3
 8002482:	e004      	b.n	800248e <HAL_GPIO_Init+0x1fa>
 8002484:	2302      	movs	r3, #2
 8002486:	e002      	b.n	800248e <HAL_GPIO_Init+0x1fa>
 8002488:	2301      	movs	r3, #1
 800248a:	e000      	b.n	800248e <HAL_GPIO_Init+0x1fa>
 800248c:	2300      	movs	r3, #0
 800248e:	697a      	ldr	r2, [r7, #20]
 8002490:	f002 0203 	and.w	r2, r2, #3
 8002494:	0092      	lsls	r2, r2, #2
 8002496:	4093      	lsls	r3, r2
 8002498:	693a      	ldr	r2, [r7, #16]
 800249a:	4313      	orrs	r3, r2
 800249c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800249e:	4937      	ldr	r1, [pc, #220]	@ (800257c <HAL_GPIO_Init+0x2e8>)
 80024a0:	697b      	ldr	r3, [r7, #20]
 80024a2:	089b      	lsrs	r3, r3, #2
 80024a4:	3302      	adds	r3, #2
 80024a6:	693a      	ldr	r2, [r7, #16]
 80024a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80024ac:	4b39      	ldr	r3, [pc, #228]	@ (8002594 <HAL_GPIO_Init+0x300>)
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	43db      	mvns	r3, r3
 80024b6:	693a      	ldr	r2, [r7, #16]
 80024b8:	4013      	ands	r3, r2
 80024ba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d003      	beq.n	80024d0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80024c8:	693a      	ldr	r2, [r7, #16]
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	4313      	orrs	r3, r2
 80024ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80024d0:	4a30      	ldr	r2, [pc, #192]	@ (8002594 <HAL_GPIO_Init+0x300>)
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80024d6:	4b2f      	ldr	r3, [pc, #188]	@ (8002594 <HAL_GPIO_Init+0x300>)
 80024d8:	68db      	ldr	r3, [r3, #12]
 80024da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	43db      	mvns	r3, r3
 80024e0:	693a      	ldr	r2, [r7, #16]
 80024e2:	4013      	ands	r3, r2
 80024e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d003      	beq.n	80024fa <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80024f2:	693a      	ldr	r2, [r7, #16]
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	4313      	orrs	r3, r2
 80024f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80024fa:	4a26      	ldr	r2, [pc, #152]	@ (8002594 <HAL_GPIO_Init+0x300>)
 80024fc:	693b      	ldr	r3, [r7, #16]
 80024fe:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002500:	4b24      	ldr	r3, [pc, #144]	@ (8002594 <HAL_GPIO_Init+0x300>)
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	43db      	mvns	r3, r3
 800250a:	693a      	ldr	r2, [r7, #16]
 800250c:	4013      	ands	r3, r2
 800250e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002518:	2b00      	cmp	r3, #0
 800251a:	d003      	beq.n	8002524 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800251c:	693a      	ldr	r2, [r7, #16]
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	4313      	orrs	r3, r2
 8002522:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002524:	4a1b      	ldr	r2, [pc, #108]	@ (8002594 <HAL_GPIO_Init+0x300>)
 8002526:	693b      	ldr	r3, [r7, #16]
 8002528:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800252a:	4b1a      	ldr	r3, [pc, #104]	@ (8002594 <HAL_GPIO_Init+0x300>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	43db      	mvns	r3, r3
 8002534:	693a      	ldr	r2, [r7, #16]
 8002536:	4013      	ands	r3, r2
 8002538:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002542:	2b00      	cmp	r3, #0
 8002544:	d003      	beq.n	800254e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002546:	693a      	ldr	r2, [r7, #16]
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	4313      	orrs	r3, r2
 800254c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800254e:	4a11      	ldr	r2, [pc, #68]	@ (8002594 <HAL_GPIO_Init+0x300>)
 8002550:	693b      	ldr	r3, [r7, #16]
 8002552:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002554:	697b      	ldr	r3, [r7, #20]
 8002556:	3301      	adds	r3, #1
 8002558:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	681a      	ldr	r2, [r3, #0]
 800255e:	697b      	ldr	r3, [r7, #20]
 8002560:	fa22 f303 	lsr.w	r3, r2, r3
 8002564:	2b00      	cmp	r3, #0
 8002566:	f47f ae9d 	bne.w	80022a4 <HAL_GPIO_Init+0x10>
  }
}
 800256a:	bf00      	nop
 800256c:	bf00      	nop
 800256e:	371c      	adds	r7, #28
 8002570:	46bd      	mov	sp, r7
 8002572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002576:	4770      	bx	lr
 8002578:	40021000 	.word	0x40021000
 800257c:	40010000 	.word	0x40010000
 8002580:	48000400 	.word	0x48000400
 8002584:	48000800 	.word	0x48000800
 8002588:	48000c00 	.word	0x48000c00
 800258c:	48001000 	.word	0x48001000
 8002590:	48001400 	.word	0x48001400
 8002594:	40010400 	.word	0x40010400

08002598 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002598:	b480      	push	{r7}
 800259a:	b083      	sub	sp, #12
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
 80025a0:	460b      	mov	r3, r1
 80025a2:	807b      	strh	r3, [r7, #2]
 80025a4:	4613      	mov	r3, r2
 80025a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80025a8:	787b      	ldrb	r3, [r7, #1]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d003      	beq.n	80025b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80025ae:	887a      	ldrh	r2, [r7, #2]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80025b4:	e002      	b.n	80025bc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80025b6:	887a      	ldrh	r2, [r7, #2]
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80025bc:	bf00      	nop
 80025be:	370c      	adds	r7, #12
 80025c0:	46bd      	mov	sp, r7
 80025c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c6:	4770      	bx	lr

080025c8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b082      	sub	sp, #8
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d101      	bne.n	80025da <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	e08d      	b.n	80026f6 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80025e0:	b2db      	uxtb	r3, r3
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d106      	bne.n	80025f4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2200      	movs	r2, #0
 80025ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80025ee:	6878      	ldr	r0, [r7, #4]
 80025f0:	f7fe fca6 	bl	8000f40 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2224      	movs	r2, #36	@ 0x24
 80025f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	681a      	ldr	r2, [r3, #0]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f022 0201 	bic.w	r2, r2, #1
 800260a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	685a      	ldr	r2, [r3, #4]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002618:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	689a      	ldr	r2, [r3, #8]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002628:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	68db      	ldr	r3, [r3, #12]
 800262e:	2b01      	cmp	r3, #1
 8002630:	d107      	bne.n	8002642 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	689a      	ldr	r2, [r3, #8]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800263e:	609a      	str	r2, [r3, #8]
 8002640:	e006      	b.n	8002650 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	689a      	ldr	r2, [r3, #8]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800264e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	68db      	ldr	r3, [r3, #12]
 8002654:	2b02      	cmp	r3, #2
 8002656:	d108      	bne.n	800266a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	685a      	ldr	r2, [r3, #4]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002666:	605a      	str	r2, [r3, #4]
 8002668:	e007      	b.n	800267a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	685a      	ldr	r2, [r3, #4]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002678:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	687a      	ldr	r2, [r7, #4]
 8002682:	6812      	ldr	r2, [r2, #0]
 8002684:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002688:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800268c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	68da      	ldr	r2, [r3, #12]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800269c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	691a      	ldr	r2, [r3, #16]
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	695b      	ldr	r3, [r3, #20]
 80026a6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	699b      	ldr	r3, [r3, #24]
 80026ae:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	430a      	orrs	r2, r1
 80026b6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	69d9      	ldr	r1, [r3, #28]
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6a1a      	ldr	r2, [r3, #32]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	430a      	orrs	r2, r1
 80026c6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	681a      	ldr	r2, [r3, #0]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f042 0201 	orr.w	r2, r2, #1
 80026d6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2200      	movs	r2, #0
 80026dc:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2220      	movs	r2, #32
 80026e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2200      	movs	r2, #0
 80026ea:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2200      	movs	r2, #0
 80026f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80026f4:	2300      	movs	r3, #0
}
 80026f6:	4618      	mov	r0, r3
 80026f8:	3708      	adds	r7, #8
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}
	...

08002700 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b088      	sub	sp, #32
 8002704:	af02      	add	r7, sp, #8
 8002706:	60f8      	str	r0, [r7, #12]
 8002708:	4608      	mov	r0, r1
 800270a:	4611      	mov	r1, r2
 800270c:	461a      	mov	r2, r3
 800270e:	4603      	mov	r3, r0
 8002710:	817b      	strh	r3, [r7, #10]
 8002712:	460b      	mov	r3, r1
 8002714:	813b      	strh	r3, [r7, #8]
 8002716:	4613      	mov	r3, r2
 8002718:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002720:	b2db      	uxtb	r3, r3
 8002722:	2b20      	cmp	r3, #32
 8002724:	f040 80f9 	bne.w	800291a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002728:	6a3b      	ldr	r3, [r7, #32]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d002      	beq.n	8002734 <HAL_I2C_Mem_Write+0x34>
 800272e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002730:	2b00      	cmp	r3, #0
 8002732:	d105      	bne.n	8002740 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800273a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800273c:	2301      	movs	r3, #1
 800273e:	e0ed      	b.n	800291c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002746:	2b01      	cmp	r3, #1
 8002748:	d101      	bne.n	800274e <HAL_I2C_Mem_Write+0x4e>
 800274a:	2302      	movs	r3, #2
 800274c:	e0e6      	b.n	800291c <HAL_I2C_Mem_Write+0x21c>
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	2201      	movs	r2, #1
 8002752:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002756:	f7ff faa5 	bl	8001ca4 <HAL_GetTick>
 800275a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	9300      	str	r3, [sp, #0]
 8002760:	2319      	movs	r3, #25
 8002762:	2201      	movs	r2, #1
 8002764:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002768:	68f8      	ldr	r0, [r7, #12]
 800276a:	f000 fadd 	bl	8002d28 <I2C_WaitOnFlagUntilTimeout>
 800276e:	4603      	mov	r3, r0
 8002770:	2b00      	cmp	r3, #0
 8002772:	d001      	beq.n	8002778 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002774:	2301      	movs	r3, #1
 8002776:	e0d1      	b.n	800291c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	2221      	movs	r2, #33	@ 0x21
 800277c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	2240      	movs	r2, #64	@ 0x40
 8002784:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	2200      	movs	r2, #0
 800278c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	6a3a      	ldr	r2, [r7, #32]
 8002792:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002798:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	2200      	movs	r2, #0
 800279e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80027a0:	88f8      	ldrh	r0, [r7, #6]
 80027a2:	893a      	ldrh	r2, [r7, #8]
 80027a4:	8979      	ldrh	r1, [r7, #10]
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	9301      	str	r3, [sp, #4]
 80027aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027ac:	9300      	str	r3, [sp, #0]
 80027ae:	4603      	mov	r3, r0
 80027b0:	68f8      	ldr	r0, [r7, #12]
 80027b2:	f000 f9ed 	bl	8002b90 <I2C_RequestMemoryWrite>
 80027b6:	4603      	mov	r3, r0
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d005      	beq.n	80027c8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	2200      	movs	r2, #0
 80027c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80027c4:	2301      	movs	r3, #1
 80027c6:	e0a9      	b.n	800291c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027cc:	b29b      	uxth	r3, r3
 80027ce:	2bff      	cmp	r3, #255	@ 0xff
 80027d0:	d90e      	bls.n	80027f0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	22ff      	movs	r2, #255	@ 0xff
 80027d6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027dc:	b2da      	uxtb	r2, r3
 80027de:	8979      	ldrh	r1, [r7, #10]
 80027e0:	2300      	movs	r3, #0
 80027e2:	9300      	str	r3, [sp, #0]
 80027e4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80027e8:	68f8      	ldr	r0, [r7, #12]
 80027ea:	f000 fc61 	bl	80030b0 <I2C_TransferConfig>
 80027ee:	e00f      	b.n	8002810 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027f4:	b29a      	uxth	r2, r3
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027fe:	b2da      	uxtb	r2, r3
 8002800:	8979      	ldrh	r1, [r7, #10]
 8002802:	2300      	movs	r3, #0
 8002804:	9300      	str	r3, [sp, #0]
 8002806:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800280a:	68f8      	ldr	r0, [r7, #12]
 800280c:	f000 fc50 	bl	80030b0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002810:	697a      	ldr	r2, [r7, #20]
 8002812:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002814:	68f8      	ldr	r0, [r7, #12]
 8002816:	f000 fae0 	bl	8002dda <I2C_WaitOnTXISFlagUntilTimeout>
 800281a:	4603      	mov	r3, r0
 800281c:	2b00      	cmp	r3, #0
 800281e:	d001      	beq.n	8002824 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002820:	2301      	movs	r3, #1
 8002822:	e07b      	b.n	800291c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002828:	781a      	ldrb	r2, [r3, #0]
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002834:	1c5a      	adds	r2, r3, #1
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800283e:	b29b      	uxth	r3, r3
 8002840:	3b01      	subs	r3, #1
 8002842:	b29a      	uxth	r2, r3
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800284c:	3b01      	subs	r3, #1
 800284e:	b29a      	uxth	r2, r3
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002858:	b29b      	uxth	r3, r3
 800285a:	2b00      	cmp	r3, #0
 800285c:	d034      	beq.n	80028c8 <HAL_I2C_Mem_Write+0x1c8>
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002862:	2b00      	cmp	r3, #0
 8002864:	d130      	bne.n	80028c8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	9300      	str	r3, [sp, #0]
 800286a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800286c:	2200      	movs	r2, #0
 800286e:	2180      	movs	r1, #128	@ 0x80
 8002870:	68f8      	ldr	r0, [r7, #12]
 8002872:	f000 fa59 	bl	8002d28 <I2C_WaitOnFlagUntilTimeout>
 8002876:	4603      	mov	r3, r0
 8002878:	2b00      	cmp	r3, #0
 800287a:	d001      	beq.n	8002880 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800287c:	2301      	movs	r3, #1
 800287e:	e04d      	b.n	800291c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002884:	b29b      	uxth	r3, r3
 8002886:	2bff      	cmp	r3, #255	@ 0xff
 8002888:	d90e      	bls.n	80028a8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	22ff      	movs	r2, #255	@ 0xff
 800288e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002894:	b2da      	uxtb	r2, r3
 8002896:	8979      	ldrh	r1, [r7, #10]
 8002898:	2300      	movs	r3, #0
 800289a:	9300      	str	r3, [sp, #0]
 800289c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80028a0:	68f8      	ldr	r0, [r7, #12]
 80028a2:	f000 fc05 	bl	80030b0 <I2C_TransferConfig>
 80028a6:	e00f      	b.n	80028c8 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028ac:	b29a      	uxth	r2, r3
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028b6:	b2da      	uxtb	r2, r3
 80028b8:	8979      	ldrh	r1, [r7, #10]
 80028ba:	2300      	movs	r3, #0
 80028bc:	9300      	str	r3, [sp, #0]
 80028be:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80028c2:	68f8      	ldr	r0, [r7, #12]
 80028c4:	f000 fbf4 	bl	80030b0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028cc:	b29b      	uxth	r3, r3
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d19e      	bne.n	8002810 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028d2:	697a      	ldr	r2, [r7, #20]
 80028d4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80028d6:	68f8      	ldr	r0, [r7, #12]
 80028d8:	f000 fac6 	bl	8002e68 <I2C_WaitOnSTOPFlagUntilTimeout>
 80028dc:	4603      	mov	r3, r0
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d001      	beq.n	80028e6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80028e2:	2301      	movs	r3, #1
 80028e4:	e01a      	b.n	800291c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	2220      	movs	r2, #32
 80028ec:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	6859      	ldr	r1, [r3, #4]
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681a      	ldr	r2, [r3, #0]
 80028f8:	4b0a      	ldr	r3, [pc, #40]	@ (8002924 <HAL_I2C_Mem_Write+0x224>)
 80028fa:	400b      	ands	r3, r1
 80028fc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	2220      	movs	r2, #32
 8002902:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	2200      	movs	r2, #0
 800290a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	2200      	movs	r2, #0
 8002912:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002916:	2300      	movs	r3, #0
 8002918:	e000      	b.n	800291c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800291a:	2302      	movs	r3, #2
  }
}
 800291c:	4618      	mov	r0, r3
 800291e:	3718      	adds	r7, #24
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}
 8002924:	fe00e800 	.word	0xfe00e800

08002928 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b088      	sub	sp, #32
 800292c:	af02      	add	r7, sp, #8
 800292e:	60f8      	str	r0, [r7, #12]
 8002930:	4608      	mov	r0, r1
 8002932:	4611      	mov	r1, r2
 8002934:	461a      	mov	r2, r3
 8002936:	4603      	mov	r3, r0
 8002938:	817b      	strh	r3, [r7, #10]
 800293a:	460b      	mov	r3, r1
 800293c:	813b      	strh	r3, [r7, #8]
 800293e:	4613      	mov	r3, r2
 8002940:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002948:	b2db      	uxtb	r3, r3
 800294a:	2b20      	cmp	r3, #32
 800294c:	f040 80fd 	bne.w	8002b4a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002950:	6a3b      	ldr	r3, [r7, #32]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d002      	beq.n	800295c <HAL_I2C_Mem_Read+0x34>
 8002956:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002958:	2b00      	cmp	r3, #0
 800295a:	d105      	bne.n	8002968 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002962:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002964:	2301      	movs	r3, #1
 8002966:	e0f1      	b.n	8002b4c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800296e:	2b01      	cmp	r3, #1
 8002970:	d101      	bne.n	8002976 <HAL_I2C_Mem_Read+0x4e>
 8002972:	2302      	movs	r3, #2
 8002974:	e0ea      	b.n	8002b4c <HAL_I2C_Mem_Read+0x224>
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	2201      	movs	r2, #1
 800297a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800297e:	f7ff f991 	bl	8001ca4 <HAL_GetTick>
 8002982:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	9300      	str	r3, [sp, #0]
 8002988:	2319      	movs	r3, #25
 800298a:	2201      	movs	r2, #1
 800298c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002990:	68f8      	ldr	r0, [r7, #12]
 8002992:	f000 f9c9 	bl	8002d28 <I2C_WaitOnFlagUntilTimeout>
 8002996:	4603      	mov	r3, r0
 8002998:	2b00      	cmp	r3, #0
 800299a:	d001      	beq.n	80029a0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800299c:	2301      	movs	r3, #1
 800299e:	e0d5      	b.n	8002b4c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	2222      	movs	r2, #34	@ 0x22
 80029a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	2240      	movs	r2, #64	@ 0x40
 80029ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	2200      	movs	r2, #0
 80029b4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	6a3a      	ldr	r2, [r7, #32]
 80029ba:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80029c0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	2200      	movs	r2, #0
 80029c6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80029c8:	88f8      	ldrh	r0, [r7, #6]
 80029ca:	893a      	ldrh	r2, [r7, #8]
 80029cc:	8979      	ldrh	r1, [r7, #10]
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	9301      	str	r3, [sp, #4]
 80029d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029d4:	9300      	str	r3, [sp, #0]
 80029d6:	4603      	mov	r3, r0
 80029d8:	68f8      	ldr	r0, [r7, #12]
 80029da:	f000 f92d 	bl	8002c38 <I2C_RequestMemoryRead>
 80029de:	4603      	mov	r3, r0
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d005      	beq.n	80029f0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	2200      	movs	r2, #0
 80029e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80029ec:	2301      	movs	r3, #1
 80029ee:	e0ad      	b.n	8002b4c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029f4:	b29b      	uxth	r3, r3
 80029f6:	2bff      	cmp	r3, #255	@ 0xff
 80029f8:	d90e      	bls.n	8002a18 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	22ff      	movs	r2, #255	@ 0xff
 80029fe:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a04:	b2da      	uxtb	r2, r3
 8002a06:	8979      	ldrh	r1, [r7, #10]
 8002a08:	4b52      	ldr	r3, [pc, #328]	@ (8002b54 <HAL_I2C_Mem_Read+0x22c>)
 8002a0a:	9300      	str	r3, [sp, #0]
 8002a0c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002a10:	68f8      	ldr	r0, [r7, #12]
 8002a12:	f000 fb4d 	bl	80030b0 <I2C_TransferConfig>
 8002a16:	e00f      	b.n	8002a38 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a1c:	b29a      	uxth	r2, r3
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a26:	b2da      	uxtb	r2, r3
 8002a28:	8979      	ldrh	r1, [r7, #10]
 8002a2a:	4b4a      	ldr	r3, [pc, #296]	@ (8002b54 <HAL_I2C_Mem_Read+0x22c>)
 8002a2c:	9300      	str	r3, [sp, #0]
 8002a2e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002a32:	68f8      	ldr	r0, [r7, #12]
 8002a34:	f000 fb3c 	bl	80030b0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002a38:	697b      	ldr	r3, [r7, #20]
 8002a3a:	9300      	str	r3, [sp, #0]
 8002a3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a3e:	2200      	movs	r2, #0
 8002a40:	2104      	movs	r1, #4
 8002a42:	68f8      	ldr	r0, [r7, #12]
 8002a44:	f000 f970 	bl	8002d28 <I2C_WaitOnFlagUntilTimeout>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d001      	beq.n	8002a52 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	e07c      	b.n	8002b4c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a5c:	b2d2      	uxtb	r2, r2
 8002a5e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a64:	1c5a      	adds	r2, r3, #1
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a6e:	3b01      	subs	r3, #1
 8002a70:	b29a      	uxth	r2, r3
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a7a:	b29b      	uxth	r3, r3
 8002a7c:	3b01      	subs	r3, #1
 8002a7e:	b29a      	uxth	r2, r3
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a88:	b29b      	uxth	r3, r3
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d034      	beq.n	8002af8 <HAL_I2C_Mem_Read+0x1d0>
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d130      	bne.n	8002af8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	9300      	str	r3, [sp, #0]
 8002a9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	2180      	movs	r1, #128	@ 0x80
 8002aa0:	68f8      	ldr	r0, [r7, #12]
 8002aa2:	f000 f941 	bl	8002d28 <I2C_WaitOnFlagUntilTimeout>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d001      	beq.n	8002ab0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002aac:	2301      	movs	r3, #1
 8002aae:	e04d      	b.n	8002b4c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ab4:	b29b      	uxth	r3, r3
 8002ab6:	2bff      	cmp	r3, #255	@ 0xff
 8002ab8:	d90e      	bls.n	8002ad8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	22ff      	movs	r2, #255	@ 0xff
 8002abe:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ac4:	b2da      	uxtb	r2, r3
 8002ac6:	8979      	ldrh	r1, [r7, #10]
 8002ac8:	2300      	movs	r3, #0
 8002aca:	9300      	str	r3, [sp, #0]
 8002acc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002ad0:	68f8      	ldr	r0, [r7, #12]
 8002ad2:	f000 faed 	bl	80030b0 <I2C_TransferConfig>
 8002ad6:	e00f      	b.n	8002af8 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002adc:	b29a      	uxth	r2, r3
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ae6:	b2da      	uxtb	r2, r3
 8002ae8:	8979      	ldrh	r1, [r7, #10]
 8002aea:	2300      	movs	r3, #0
 8002aec:	9300      	str	r3, [sp, #0]
 8002aee:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002af2:	68f8      	ldr	r0, [r7, #12]
 8002af4:	f000 fadc 	bl	80030b0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002afc:	b29b      	uxth	r3, r3
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d19a      	bne.n	8002a38 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b02:	697a      	ldr	r2, [r7, #20]
 8002b04:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002b06:	68f8      	ldr	r0, [r7, #12]
 8002b08:	f000 f9ae 	bl	8002e68 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d001      	beq.n	8002b16 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002b12:	2301      	movs	r3, #1
 8002b14:	e01a      	b.n	8002b4c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	2220      	movs	r2, #32
 8002b1c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	6859      	ldr	r1, [r3, #4]
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681a      	ldr	r2, [r3, #0]
 8002b28:	4b0b      	ldr	r3, [pc, #44]	@ (8002b58 <HAL_I2C_Mem_Read+0x230>)
 8002b2a:	400b      	ands	r3, r1
 8002b2c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	2220      	movs	r2, #32
 8002b32:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	2200      	movs	r2, #0
 8002b42:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002b46:	2300      	movs	r3, #0
 8002b48:	e000      	b.n	8002b4c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002b4a:	2302      	movs	r3, #2
  }
}
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	3718      	adds	r7, #24
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bd80      	pop	{r7, pc}
 8002b54:	80002400 	.word	0x80002400
 8002b58:	fe00e800 	.word	0xfe00e800

08002b5c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b084      	sub	sp, #16
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	699b      	ldr	r3, [r3, #24]
 8002b6a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d005      	beq.n	8002b88 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b80:	68ba      	ldr	r2, [r7, #8]
 8002b82:	68f9      	ldr	r1, [r7, #12]
 8002b84:	6878      	ldr	r0, [r7, #4]
 8002b86:	4798      	blx	r3
  }
}
 8002b88:	bf00      	nop
 8002b8a:	3710      	adds	r7, #16
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bd80      	pop	{r7, pc}

08002b90 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b086      	sub	sp, #24
 8002b94:	af02      	add	r7, sp, #8
 8002b96:	60f8      	str	r0, [r7, #12]
 8002b98:	4608      	mov	r0, r1
 8002b9a:	4611      	mov	r1, r2
 8002b9c:	461a      	mov	r2, r3
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	817b      	strh	r3, [r7, #10]
 8002ba2:	460b      	mov	r3, r1
 8002ba4:	813b      	strh	r3, [r7, #8]
 8002ba6:	4613      	mov	r3, r2
 8002ba8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002baa:	88fb      	ldrh	r3, [r7, #6]
 8002bac:	b2da      	uxtb	r2, r3
 8002bae:	8979      	ldrh	r1, [r7, #10]
 8002bb0:	4b20      	ldr	r3, [pc, #128]	@ (8002c34 <I2C_RequestMemoryWrite+0xa4>)
 8002bb2:	9300      	str	r3, [sp, #0]
 8002bb4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002bb8:	68f8      	ldr	r0, [r7, #12]
 8002bba:	f000 fa79 	bl	80030b0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002bbe:	69fa      	ldr	r2, [r7, #28]
 8002bc0:	69b9      	ldr	r1, [r7, #24]
 8002bc2:	68f8      	ldr	r0, [r7, #12]
 8002bc4:	f000 f909 	bl	8002dda <I2C_WaitOnTXISFlagUntilTimeout>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d001      	beq.n	8002bd2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	e02c      	b.n	8002c2c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002bd2:	88fb      	ldrh	r3, [r7, #6]
 8002bd4:	2b01      	cmp	r3, #1
 8002bd6:	d105      	bne.n	8002be4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002bd8:	893b      	ldrh	r3, [r7, #8]
 8002bda:	b2da      	uxtb	r2, r3
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	629a      	str	r2, [r3, #40]	@ 0x28
 8002be2:	e015      	b.n	8002c10 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002be4:	893b      	ldrh	r3, [r7, #8]
 8002be6:	0a1b      	lsrs	r3, r3, #8
 8002be8:	b29b      	uxth	r3, r3
 8002bea:	b2da      	uxtb	r2, r3
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002bf2:	69fa      	ldr	r2, [r7, #28]
 8002bf4:	69b9      	ldr	r1, [r7, #24]
 8002bf6:	68f8      	ldr	r0, [r7, #12]
 8002bf8:	f000 f8ef 	bl	8002dda <I2C_WaitOnTXISFlagUntilTimeout>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d001      	beq.n	8002c06 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	e012      	b.n	8002c2c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002c06:	893b      	ldrh	r3, [r7, #8]
 8002c08:	b2da      	uxtb	r2, r3
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002c10:	69fb      	ldr	r3, [r7, #28]
 8002c12:	9300      	str	r3, [sp, #0]
 8002c14:	69bb      	ldr	r3, [r7, #24]
 8002c16:	2200      	movs	r2, #0
 8002c18:	2180      	movs	r1, #128	@ 0x80
 8002c1a:	68f8      	ldr	r0, [r7, #12]
 8002c1c:	f000 f884 	bl	8002d28 <I2C_WaitOnFlagUntilTimeout>
 8002c20:	4603      	mov	r3, r0
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d001      	beq.n	8002c2a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	e000      	b.n	8002c2c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002c2a:	2300      	movs	r3, #0
}
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	3710      	adds	r7, #16
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bd80      	pop	{r7, pc}
 8002c34:	80002000 	.word	0x80002000

08002c38 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b086      	sub	sp, #24
 8002c3c:	af02      	add	r7, sp, #8
 8002c3e:	60f8      	str	r0, [r7, #12]
 8002c40:	4608      	mov	r0, r1
 8002c42:	4611      	mov	r1, r2
 8002c44:	461a      	mov	r2, r3
 8002c46:	4603      	mov	r3, r0
 8002c48:	817b      	strh	r3, [r7, #10]
 8002c4a:	460b      	mov	r3, r1
 8002c4c:	813b      	strh	r3, [r7, #8]
 8002c4e:	4613      	mov	r3, r2
 8002c50:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002c52:	88fb      	ldrh	r3, [r7, #6]
 8002c54:	b2da      	uxtb	r2, r3
 8002c56:	8979      	ldrh	r1, [r7, #10]
 8002c58:	4b20      	ldr	r3, [pc, #128]	@ (8002cdc <I2C_RequestMemoryRead+0xa4>)
 8002c5a:	9300      	str	r3, [sp, #0]
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	68f8      	ldr	r0, [r7, #12]
 8002c60:	f000 fa26 	bl	80030b0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c64:	69fa      	ldr	r2, [r7, #28]
 8002c66:	69b9      	ldr	r1, [r7, #24]
 8002c68:	68f8      	ldr	r0, [r7, #12]
 8002c6a:	f000 f8b6 	bl	8002dda <I2C_WaitOnTXISFlagUntilTimeout>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d001      	beq.n	8002c78 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002c74:	2301      	movs	r3, #1
 8002c76:	e02c      	b.n	8002cd2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002c78:	88fb      	ldrh	r3, [r7, #6]
 8002c7a:	2b01      	cmp	r3, #1
 8002c7c:	d105      	bne.n	8002c8a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002c7e:	893b      	ldrh	r3, [r7, #8]
 8002c80:	b2da      	uxtb	r2, r3
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	629a      	str	r2, [r3, #40]	@ 0x28
 8002c88:	e015      	b.n	8002cb6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002c8a:	893b      	ldrh	r3, [r7, #8]
 8002c8c:	0a1b      	lsrs	r3, r3, #8
 8002c8e:	b29b      	uxth	r3, r3
 8002c90:	b2da      	uxtb	r2, r3
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c98:	69fa      	ldr	r2, [r7, #28]
 8002c9a:	69b9      	ldr	r1, [r7, #24]
 8002c9c:	68f8      	ldr	r0, [r7, #12]
 8002c9e:	f000 f89c 	bl	8002dda <I2C_WaitOnTXISFlagUntilTimeout>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d001      	beq.n	8002cac <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002ca8:	2301      	movs	r3, #1
 8002caa:	e012      	b.n	8002cd2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002cac:	893b      	ldrh	r3, [r7, #8]
 8002cae:	b2da      	uxtb	r2, r3
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002cb6:	69fb      	ldr	r3, [r7, #28]
 8002cb8:	9300      	str	r3, [sp, #0]
 8002cba:	69bb      	ldr	r3, [r7, #24]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	2140      	movs	r1, #64	@ 0x40
 8002cc0:	68f8      	ldr	r0, [r7, #12]
 8002cc2:	f000 f831 	bl	8002d28 <I2C_WaitOnFlagUntilTimeout>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d001      	beq.n	8002cd0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	e000      	b.n	8002cd2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002cd0:	2300      	movs	r3, #0
}
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	3710      	adds	r7, #16
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}
 8002cda:	bf00      	nop
 8002cdc:	80002000 	.word	0x80002000

08002ce0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	b083      	sub	sp, #12
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	699b      	ldr	r3, [r3, #24]
 8002cee:	f003 0302 	and.w	r3, r3, #2
 8002cf2:	2b02      	cmp	r3, #2
 8002cf4:	d103      	bne.n	8002cfe <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	699b      	ldr	r3, [r3, #24]
 8002d04:	f003 0301 	and.w	r3, r3, #1
 8002d08:	2b01      	cmp	r3, #1
 8002d0a:	d007      	beq.n	8002d1c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	699a      	ldr	r2, [r3, #24]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f042 0201 	orr.w	r2, r2, #1
 8002d1a:	619a      	str	r2, [r3, #24]
  }
}
 8002d1c:	bf00      	nop
 8002d1e:	370c      	adds	r7, #12
 8002d20:	46bd      	mov	sp, r7
 8002d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d26:	4770      	bx	lr

08002d28 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b084      	sub	sp, #16
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	60f8      	str	r0, [r7, #12]
 8002d30:	60b9      	str	r1, [r7, #8]
 8002d32:	603b      	str	r3, [r7, #0]
 8002d34:	4613      	mov	r3, r2
 8002d36:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d38:	e03b      	b.n	8002db2 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d3a:	69ba      	ldr	r2, [r7, #24]
 8002d3c:	6839      	ldr	r1, [r7, #0]
 8002d3e:	68f8      	ldr	r0, [r7, #12]
 8002d40:	f000 f8d6 	bl	8002ef0 <I2C_IsErrorOccurred>
 8002d44:	4603      	mov	r3, r0
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d001      	beq.n	8002d4e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	e041      	b.n	8002dd2 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d54:	d02d      	beq.n	8002db2 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d56:	f7fe ffa5 	bl	8001ca4 <HAL_GetTick>
 8002d5a:	4602      	mov	r2, r0
 8002d5c:	69bb      	ldr	r3, [r7, #24]
 8002d5e:	1ad3      	subs	r3, r2, r3
 8002d60:	683a      	ldr	r2, [r7, #0]
 8002d62:	429a      	cmp	r2, r3
 8002d64:	d302      	bcc.n	8002d6c <I2C_WaitOnFlagUntilTimeout+0x44>
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d122      	bne.n	8002db2 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	699a      	ldr	r2, [r3, #24]
 8002d72:	68bb      	ldr	r3, [r7, #8]
 8002d74:	4013      	ands	r3, r2
 8002d76:	68ba      	ldr	r2, [r7, #8]
 8002d78:	429a      	cmp	r2, r3
 8002d7a:	bf0c      	ite	eq
 8002d7c:	2301      	moveq	r3, #1
 8002d7e:	2300      	movne	r3, #0
 8002d80:	b2db      	uxtb	r3, r3
 8002d82:	461a      	mov	r2, r3
 8002d84:	79fb      	ldrb	r3, [r7, #7]
 8002d86:	429a      	cmp	r2, r3
 8002d88:	d113      	bne.n	8002db2 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d8e:	f043 0220 	orr.w	r2, r3, #32
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	2220      	movs	r2, #32
 8002d9a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	2200      	movs	r2, #0
 8002da2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	2200      	movs	r2, #0
 8002daa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8002dae:	2301      	movs	r3, #1
 8002db0:	e00f      	b.n	8002dd2 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	699a      	ldr	r2, [r3, #24]
 8002db8:	68bb      	ldr	r3, [r7, #8]
 8002dba:	4013      	ands	r3, r2
 8002dbc:	68ba      	ldr	r2, [r7, #8]
 8002dbe:	429a      	cmp	r2, r3
 8002dc0:	bf0c      	ite	eq
 8002dc2:	2301      	moveq	r3, #1
 8002dc4:	2300      	movne	r3, #0
 8002dc6:	b2db      	uxtb	r3, r3
 8002dc8:	461a      	mov	r2, r3
 8002dca:	79fb      	ldrb	r3, [r7, #7]
 8002dcc:	429a      	cmp	r2, r3
 8002dce:	d0b4      	beq.n	8002d3a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002dd0:	2300      	movs	r3, #0
}
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	3710      	adds	r7, #16
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}

08002dda <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002dda:	b580      	push	{r7, lr}
 8002ddc:	b084      	sub	sp, #16
 8002dde:	af00      	add	r7, sp, #0
 8002de0:	60f8      	str	r0, [r7, #12]
 8002de2:	60b9      	str	r1, [r7, #8]
 8002de4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002de6:	e033      	b.n	8002e50 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002de8:	687a      	ldr	r2, [r7, #4]
 8002dea:	68b9      	ldr	r1, [r7, #8]
 8002dec:	68f8      	ldr	r0, [r7, #12]
 8002dee:	f000 f87f 	bl	8002ef0 <I2C_IsErrorOccurred>
 8002df2:	4603      	mov	r3, r0
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d001      	beq.n	8002dfc <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002df8:	2301      	movs	r3, #1
 8002dfa:	e031      	b.n	8002e60 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e02:	d025      	beq.n	8002e50 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e04:	f7fe ff4e 	bl	8001ca4 <HAL_GetTick>
 8002e08:	4602      	mov	r2, r0
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	1ad3      	subs	r3, r2, r3
 8002e0e:	68ba      	ldr	r2, [r7, #8]
 8002e10:	429a      	cmp	r2, r3
 8002e12:	d302      	bcc.n	8002e1a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002e14:	68bb      	ldr	r3, [r7, #8]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d11a      	bne.n	8002e50 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	699b      	ldr	r3, [r3, #24]
 8002e20:	f003 0302 	and.w	r3, r3, #2
 8002e24:	2b02      	cmp	r3, #2
 8002e26:	d013      	beq.n	8002e50 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e2c:	f043 0220 	orr.w	r2, r3, #32
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	2220      	movs	r2, #32
 8002e38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	2200      	movs	r2, #0
 8002e40:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	2200      	movs	r2, #0
 8002e48:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	e007      	b.n	8002e60 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	699b      	ldr	r3, [r3, #24]
 8002e56:	f003 0302 	and.w	r3, r3, #2
 8002e5a:	2b02      	cmp	r3, #2
 8002e5c:	d1c4      	bne.n	8002de8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002e5e:	2300      	movs	r3, #0
}
 8002e60:	4618      	mov	r0, r3
 8002e62:	3710      	adds	r7, #16
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bd80      	pop	{r7, pc}

08002e68 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b084      	sub	sp, #16
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	60f8      	str	r0, [r7, #12]
 8002e70:	60b9      	str	r1, [r7, #8]
 8002e72:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002e74:	e02f      	b.n	8002ed6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e76:	687a      	ldr	r2, [r7, #4]
 8002e78:	68b9      	ldr	r1, [r7, #8]
 8002e7a:	68f8      	ldr	r0, [r7, #12]
 8002e7c:	f000 f838 	bl	8002ef0 <I2C_IsErrorOccurred>
 8002e80:	4603      	mov	r3, r0
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d001      	beq.n	8002e8a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002e86:	2301      	movs	r3, #1
 8002e88:	e02d      	b.n	8002ee6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e8a:	f7fe ff0b 	bl	8001ca4 <HAL_GetTick>
 8002e8e:	4602      	mov	r2, r0
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	1ad3      	subs	r3, r2, r3
 8002e94:	68ba      	ldr	r2, [r7, #8]
 8002e96:	429a      	cmp	r2, r3
 8002e98:	d302      	bcc.n	8002ea0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002e9a:	68bb      	ldr	r3, [r7, #8]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d11a      	bne.n	8002ed6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	699b      	ldr	r3, [r3, #24]
 8002ea6:	f003 0320 	and.w	r3, r3, #32
 8002eaa:	2b20      	cmp	r3, #32
 8002eac:	d013      	beq.n	8002ed6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002eb2:	f043 0220 	orr.w	r2, r3, #32
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	2220      	movs	r2, #32
 8002ebe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	e007      	b.n	8002ee6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	699b      	ldr	r3, [r3, #24]
 8002edc:	f003 0320 	and.w	r3, r3, #32
 8002ee0:	2b20      	cmp	r3, #32
 8002ee2:	d1c8      	bne.n	8002e76 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002ee4:	2300      	movs	r3, #0
}
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	3710      	adds	r7, #16
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}
	...

08002ef0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b08a      	sub	sp, #40	@ 0x28
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	60f8      	str	r0, [r7, #12]
 8002ef8:	60b9      	str	r1, [r7, #8]
 8002efa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002efc:	2300      	movs	r3, #0
 8002efe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	699b      	ldr	r3, [r3, #24]
 8002f08:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002f12:	69bb      	ldr	r3, [r7, #24]
 8002f14:	f003 0310 	and.w	r3, r3, #16
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d068      	beq.n	8002fee <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	2210      	movs	r2, #16
 8002f22:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002f24:	e049      	b.n	8002fba <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002f26:	68bb      	ldr	r3, [r7, #8]
 8002f28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f2c:	d045      	beq.n	8002fba <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002f2e:	f7fe feb9 	bl	8001ca4 <HAL_GetTick>
 8002f32:	4602      	mov	r2, r0
 8002f34:	69fb      	ldr	r3, [r7, #28]
 8002f36:	1ad3      	subs	r3, r2, r3
 8002f38:	68ba      	ldr	r2, [r7, #8]
 8002f3a:	429a      	cmp	r2, r3
 8002f3c:	d302      	bcc.n	8002f44 <I2C_IsErrorOccurred+0x54>
 8002f3e:	68bb      	ldr	r3, [r7, #8]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d13a      	bne.n	8002fba <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002f4e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002f56:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	699b      	ldr	r3, [r3, #24]
 8002f5e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002f62:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002f66:	d121      	bne.n	8002fac <I2C_IsErrorOccurred+0xbc>
 8002f68:	697b      	ldr	r3, [r7, #20]
 8002f6a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002f6e:	d01d      	beq.n	8002fac <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002f70:	7cfb      	ldrb	r3, [r7, #19]
 8002f72:	2b20      	cmp	r3, #32
 8002f74:	d01a      	beq.n	8002fac <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	685a      	ldr	r2, [r3, #4]
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002f84:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002f86:	f7fe fe8d 	bl	8001ca4 <HAL_GetTick>
 8002f8a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002f8c:	e00e      	b.n	8002fac <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002f8e:	f7fe fe89 	bl	8001ca4 <HAL_GetTick>
 8002f92:	4602      	mov	r2, r0
 8002f94:	69fb      	ldr	r3, [r7, #28]
 8002f96:	1ad3      	subs	r3, r2, r3
 8002f98:	2b19      	cmp	r3, #25
 8002f9a:	d907      	bls.n	8002fac <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002f9c:	6a3b      	ldr	r3, [r7, #32]
 8002f9e:	f043 0320 	orr.w	r3, r3, #32
 8002fa2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8002faa:	e006      	b.n	8002fba <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	699b      	ldr	r3, [r3, #24]
 8002fb2:	f003 0320 	and.w	r3, r3, #32
 8002fb6:	2b20      	cmp	r3, #32
 8002fb8:	d1e9      	bne.n	8002f8e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	699b      	ldr	r3, [r3, #24]
 8002fc0:	f003 0320 	and.w	r3, r3, #32
 8002fc4:	2b20      	cmp	r3, #32
 8002fc6:	d003      	beq.n	8002fd0 <I2C_IsErrorOccurred+0xe0>
 8002fc8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d0aa      	beq.n	8002f26 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002fd0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d103      	bne.n	8002fe0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	2220      	movs	r2, #32
 8002fde:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002fe0:	6a3b      	ldr	r3, [r7, #32]
 8002fe2:	f043 0304 	orr.w	r3, r3, #4
 8002fe6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002fe8:	2301      	movs	r3, #1
 8002fea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	699b      	ldr	r3, [r3, #24]
 8002ff4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002ff6:	69bb      	ldr	r3, [r7, #24]
 8002ff8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d00b      	beq.n	8003018 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003000:	6a3b      	ldr	r3, [r7, #32]
 8003002:	f043 0301 	orr.w	r3, r3, #1
 8003006:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003010:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003012:	2301      	movs	r3, #1
 8003014:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003018:	69bb      	ldr	r3, [r7, #24]
 800301a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800301e:	2b00      	cmp	r3, #0
 8003020:	d00b      	beq.n	800303a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003022:	6a3b      	ldr	r3, [r7, #32]
 8003024:	f043 0308 	orr.w	r3, r3, #8
 8003028:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003032:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003034:	2301      	movs	r3, #1
 8003036:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800303a:	69bb      	ldr	r3, [r7, #24]
 800303c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003040:	2b00      	cmp	r3, #0
 8003042:	d00b      	beq.n	800305c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003044:	6a3b      	ldr	r3, [r7, #32]
 8003046:	f043 0302 	orr.w	r3, r3, #2
 800304a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003054:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003056:	2301      	movs	r3, #1
 8003058:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800305c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003060:	2b00      	cmp	r3, #0
 8003062:	d01c      	beq.n	800309e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003064:	68f8      	ldr	r0, [r7, #12]
 8003066:	f7ff fe3b 	bl	8002ce0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	6859      	ldr	r1, [r3, #4]
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681a      	ldr	r2, [r3, #0]
 8003074:	4b0d      	ldr	r3, [pc, #52]	@ (80030ac <I2C_IsErrorOccurred+0x1bc>)
 8003076:	400b      	ands	r3, r1
 8003078:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800307e:	6a3b      	ldr	r3, [r7, #32]
 8003080:	431a      	orrs	r2, r3
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	2220      	movs	r2, #32
 800308a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	2200      	movs	r2, #0
 8003092:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	2200      	movs	r2, #0
 800309a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800309e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80030a2:	4618      	mov	r0, r3
 80030a4:	3728      	adds	r7, #40	@ 0x28
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}
 80030aa:	bf00      	nop
 80030ac:	fe00e800 	.word	0xfe00e800

080030b0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80030b0:	b480      	push	{r7}
 80030b2:	b087      	sub	sp, #28
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	60f8      	str	r0, [r7, #12]
 80030b8:	607b      	str	r3, [r7, #4]
 80030ba:	460b      	mov	r3, r1
 80030bc:	817b      	strh	r3, [r7, #10]
 80030be:	4613      	mov	r3, r2
 80030c0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80030c2:	897b      	ldrh	r3, [r7, #10]
 80030c4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80030c8:	7a7b      	ldrb	r3, [r7, #9]
 80030ca:	041b      	lsls	r3, r3, #16
 80030cc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80030d0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80030d6:	6a3b      	ldr	r3, [r7, #32]
 80030d8:	4313      	orrs	r3, r2
 80030da:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80030de:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	685a      	ldr	r2, [r3, #4]
 80030e6:	6a3b      	ldr	r3, [r7, #32]
 80030e8:	0d5b      	lsrs	r3, r3, #21
 80030ea:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80030ee:	4b08      	ldr	r3, [pc, #32]	@ (8003110 <I2C_TransferConfig+0x60>)
 80030f0:	430b      	orrs	r3, r1
 80030f2:	43db      	mvns	r3, r3
 80030f4:	ea02 0103 	and.w	r1, r2, r3
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	697a      	ldr	r2, [r7, #20]
 80030fe:	430a      	orrs	r2, r1
 8003100:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003102:	bf00      	nop
 8003104:	371c      	adds	r7, #28
 8003106:	46bd      	mov	sp, r7
 8003108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310c:	4770      	bx	lr
 800310e:	bf00      	nop
 8003110:	03ff63ff 	.word	0x03ff63ff

08003114 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003114:	b480      	push	{r7}
 8003116:	b083      	sub	sp, #12
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
 800311c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003124:	b2db      	uxtb	r3, r3
 8003126:	2b20      	cmp	r3, #32
 8003128:	d138      	bne.n	800319c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003130:	2b01      	cmp	r3, #1
 8003132:	d101      	bne.n	8003138 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003134:	2302      	movs	r3, #2
 8003136:	e032      	b.n	800319e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2201      	movs	r2, #1
 800313c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2224      	movs	r2, #36	@ 0x24
 8003144:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	681a      	ldr	r2, [r3, #0]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f022 0201 	bic.w	r2, r2, #1
 8003156:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	681a      	ldr	r2, [r3, #0]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003166:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	6819      	ldr	r1, [r3, #0]
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	683a      	ldr	r2, [r7, #0]
 8003174:	430a      	orrs	r2, r1
 8003176:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	681a      	ldr	r2, [r3, #0]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f042 0201 	orr.w	r2, r2, #1
 8003186:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2220      	movs	r2, #32
 800318c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2200      	movs	r2, #0
 8003194:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003198:	2300      	movs	r3, #0
 800319a:	e000      	b.n	800319e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800319c:	2302      	movs	r3, #2
  }
}
 800319e:	4618      	mov	r0, r3
 80031a0:	370c      	adds	r7, #12
 80031a2:	46bd      	mov	sp, r7
 80031a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a8:	4770      	bx	lr

080031aa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80031aa:	b480      	push	{r7}
 80031ac:	b085      	sub	sp, #20
 80031ae:	af00      	add	r7, sp, #0
 80031b0:	6078      	str	r0, [r7, #4]
 80031b2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80031ba:	b2db      	uxtb	r3, r3
 80031bc:	2b20      	cmp	r3, #32
 80031be:	d139      	bne.n	8003234 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80031c6:	2b01      	cmp	r3, #1
 80031c8:	d101      	bne.n	80031ce <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80031ca:	2302      	movs	r3, #2
 80031cc:	e033      	b.n	8003236 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2201      	movs	r2, #1
 80031d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2224      	movs	r2, #36	@ 0x24
 80031da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	681a      	ldr	r2, [r3, #0]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f022 0201 	bic.w	r2, r2, #1
 80031ec:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80031fc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	021b      	lsls	r3, r3, #8
 8003202:	68fa      	ldr	r2, [r7, #12]
 8003204:	4313      	orrs	r3, r2
 8003206:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	68fa      	ldr	r2, [r7, #12]
 800320e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	681a      	ldr	r2, [r3, #0]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f042 0201 	orr.w	r2, r2, #1
 800321e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2220      	movs	r2, #32
 8003224:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2200      	movs	r2, #0
 800322c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003230:	2300      	movs	r3, #0
 8003232:	e000      	b.n	8003236 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003234:	2302      	movs	r3, #2
  }
}
 8003236:	4618      	mov	r0, r3
 8003238:	3714      	adds	r7, #20
 800323a:	46bd      	mov	sp, r7
 800323c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003240:	4770      	bx	lr
	...

08003244 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003244:	b480      	push	{r7}
 8003246:	b085      	sub	sp, #20
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d141      	bne.n	80032d6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003252:	4b4b      	ldr	r3, [pc, #300]	@ (8003380 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800325a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800325e:	d131      	bne.n	80032c4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003260:	4b47      	ldr	r3, [pc, #284]	@ (8003380 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003262:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003266:	4a46      	ldr	r2, [pc, #280]	@ (8003380 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003268:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800326c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003270:	4b43      	ldr	r3, [pc, #268]	@ (8003380 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003278:	4a41      	ldr	r2, [pc, #260]	@ (8003380 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800327a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800327e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003280:	4b40      	ldr	r3, [pc, #256]	@ (8003384 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	2232      	movs	r2, #50	@ 0x32
 8003286:	fb02 f303 	mul.w	r3, r2, r3
 800328a:	4a3f      	ldr	r2, [pc, #252]	@ (8003388 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800328c:	fba2 2303 	umull	r2, r3, r2, r3
 8003290:	0c9b      	lsrs	r3, r3, #18
 8003292:	3301      	adds	r3, #1
 8003294:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003296:	e002      	b.n	800329e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	3b01      	subs	r3, #1
 800329c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800329e:	4b38      	ldr	r3, [pc, #224]	@ (8003380 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032a0:	695b      	ldr	r3, [r3, #20]
 80032a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80032aa:	d102      	bne.n	80032b2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d1f2      	bne.n	8003298 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80032b2:	4b33      	ldr	r3, [pc, #204]	@ (8003380 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032b4:	695b      	ldr	r3, [r3, #20]
 80032b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80032be:	d158      	bne.n	8003372 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80032c0:	2303      	movs	r3, #3
 80032c2:	e057      	b.n	8003374 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80032c4:	4b2e      	ldr	r3, [pc, #184]	@ (8003380 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80032ca:	4a2d      	ldr	r2, [pc, #180]	@ (8003380 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032cc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80032d0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80032d4:	e04d      	b.n	8003372 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80032dc:	d141      	bne.n	8003362 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80032de:	4b28      	ldr	r3, [pc, #160]	@ (8003380 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80032e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80032ea:	d131      	bne.n	8003350 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80032ec:	4b24      	ldr	r3, [pc, #144]	@ (8003380 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80032f2:	4a23      	ldr	r2, [pc, #140]	@ (8003380 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80032f8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80032fc:	4b20      	ldr	r3, [pc, #128]	@ (8003380 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003304:	4a1e      	ldr	r2, [pc, #120]	@ (8003380 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003306:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800330a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800330c:	4b1d      	ldr	r3, [pc, #116]	@ (8003384 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	2232      	movs	r2, #50	@ 0x32
 8003312:	fb02 f303 	mul.w	r3, r2, r3
 8003316:	4a1c      	ldr	r2, [pc, #112]	@ (8003388 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003318:	fba2 2303 	umull	r2, r3, r2, r3
 800331c:	0c9b      	lsrs	r3, r3, #18
 800331e:	3301      	adds	r3, #1
 8003320:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003322:	e002      	b.n	800332a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	3b01      	subs	r3, #1
 8003328:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800332a:	4b15      	ldr	r3, [pc, #84]	@ (8003380 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800332c:	695b      	ldr	r3, [r3, #20]
 800332e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003332:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003336:	d102      	bne.n	800333e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d1f2      	bne.n	8003324 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800333e:	4b10      	ldr	r3, [pc, #64]	@ (8003380 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003340:	695b      	ldr	r3, [r3, #20]
 8003342:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003346:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800334a:	d112      	bne.n	8003372 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800334c:	2303      	movs	r3, #3
 800334e:	e011      	b.n	8003374 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003350:	4b0b      	ldr	r3, [pc, #44]	@ (8003380 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003352:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003356:	4a0a      	ldr	r2, [pc, #40]	@ (8003380 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003358:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800335c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003360:	e007      	b.n	8003372 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003362:	4b07      	ldr	r3, [pc, #28]	@ (8003380 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800336a:	4a05      	ldr	r2, [pc, #20]	@ (8003380 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800336c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003370:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003372:	2300      	movs	r3, #0
}
 8003374:	4618      	mov	r0, r3
 8003376:	3714      	adds	r7, #20
 8003378:	46bd      	mov	sp, r7
 800337a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337e:	4770      	bx	lr
 8003380:	40007000 	.word	0x40007000
 8003384:	20000000 	.word	0x20000000
 8003388:	431bde83 	.word	0x431bde83

0800338c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800338c:	b480      	push	{r7}
 800338e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003390:	4b05      	ldr	r3, [pc, #20]	@ (80033a8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003392:	689b      	ldr	r3, [r3, #8]
 8003394:	4a04      	ldr	r2, [pc, #16]	@ (80033a8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003396:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800339a:	6093      	str	r3, [r2, #8]
}
 800339c:	bf00      	nop
 800339e:	46bd      	mov	sp, r7
 80033a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a4:	4770      	bx	lr
 80033a6:	bf00      	nop
 80033a8:	40007000 	.word	0x40007000

080033ac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b088      	sub	sp, #32
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d101      	bne.n	80033be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80033ba:	2301      	movs	r3, #1
 80033bc:	e2fe      	b.n	80039bc <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f003 0301 	and.w	r3, r3, #1
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d075      	beq.n	80034b6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80033ca:	4b97      	ldr	r3, [pc, #604]	@ (8003628 <HAL_RCC_OscConfig+0x27c>)
 80033cc:	689b      	ldr	r3, [r3, #8]
 80033ce:	f003 030c 	and.w	r3, r3, #12
 80033d2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80033d4:	4b94      	ldr	r3, [pc, #592]	@ (8003628 <HAL_RCC_OscConfig+0x27c>)
 80033d6:	68db      	ldr	r3, [r3, #12]
 80033d8:	f003 0303 	and.w	r3, r3, #3
 80033dc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80033de:	69bb      	ldr	r3, [r7, #24]
 80033e0:	2b0c      	cmp	r3, #12
 80033e2:	d102      	bne.n	80033ea <HAL_RCC_OscConfig+0x3e>
 80033e4:	697b      	ldr	r3, [r7, #20]
 80033e6:	2b03      	cmp	r3, #3
 80033e8:	d002      	beq.n	80033f0 <HAL_RCC_OscConfig+0x44>
 80033ea:	69bb      	ldr	r3, [r7, #24]
 80033ec:	2b08      	cmp	r3, #8
 80033ee:	d10b      	bne.n	8003408 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033f0:	4b8d      	ldr	r3, [pc, #564]	@ (8003628 <HAL_RCC_OscConfig+0x27c>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d05b      	beq.n	80034b4 <HAL_RCC_OscConfig+0x108>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d157      	bne.n	80034b4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003404:	2301      	movs	r3, #1
 8003406:	e2d9      	b.n	80039bc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003410:	d106      	bne.n	8003420 <HAL_RCC_OscConfig+0x74>
 8003412:	4b85      	ldr	r3, [pc, #532]	@ (8003628 <HAL_RCC_OscConfig+0x27c>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4a84      	ldr	r2, [pc, #528]	@ (8003628 <HAL_RCC_OscConfig+0x27c>)
 8003418:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800341c:	6013      	str	r3, [r2, #0]
 800341e:	e01d      	b.n	800345c <HAL_RCC_OscConfig+0xb0>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003428:	d10c      	bne.n	8003444 <HAL_RCC_OscConfig+0x98>
 800342a:	4b7f      	ldr	r3, [pc, #508]	@ (8003628 <HAL_RCC_OscConfig+0x27c>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a7e      	ldr	r2, [pc, #504]	@ (8003628 <HAL_RCC_OscConfig+0x27c>)
 8003430:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003434:	6013      	str	r3, [r2, #0]
 8003436:	4b7c      	ldr	r3, [pc, #496]	@ (8003628 <HAL_RCC_OscConfig+0x27c>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a7b      	ldr	r2, [pc, #492]	@ (8003628 <HAL_RCC_OscConfig+0x27c>)
 800343c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003440:	6013      	str	r3, [r2, #0]
 8003442:	e00b      	b.n	800345c <HAL_RCC_OscConfig+0xb0>
 8003444:	4b78      	ldr	r3, [pc, #480]	@ (8003628 <HAL_RCC_OscConfig+0x27c>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a77      	ldr	r2, [pc, #476]	@ (8003628 <HAL_RCC_OscConfig+0x27c>)
 800344a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800344e:	6013      	str	r3, [r2, #0]
 8003450:	4b75      	ldr	r3, [pc, #468]	@ (8003628 <HAL_RCC_OscConfig+0x27c>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a74      	ldr	r2, [pc, #464]	@ (8003628 <HAL_RCC_OscConfig+0x27c>)
 8003456:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800345a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d013      	beq.n	800348c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003464:	f7fe fc1e 	bl	8001ca4 <HAL_GetTick>
 8003468:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800346a:	e008      	b.n	800347e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800346c:	f7fe fc1a 	bl	8001ca4 <HAL_GetTick>
 8003470:	4602      	mov	r2, r0
 8003472:	693b      	ldr	r3, [r7, #16]
 8003474:	1ad3      	subs	r3, r2, r3
 8003476:	2b64      	cmp	r3, #100	@ 0x64
 8003478:	d901      	bls.n	800347e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800347a:	2303      	movs	r3, #3
 800347c:	e29e      	b.n	80039bc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800347e:	4b6a      	ldr	r3, [pc, #424]	@ (8003628 <HAL_RCC_OscConfig+0x27c>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003486:	2b00      	cmp	r3, #0
 8003488:	d0f0      	beq.n	800346c <HAL_RCC_OscConfig+0xc0>
 800348a:	e014      	b.n	80034b6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800348c:	f7fe fc0a 	bl	8001ca4 <HAL_GetTick>
 8003490:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003492:	e008      	b.n	80034a6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003494:	f7fe fc06 	bl	8001ca4 <HAL_GetTick>
 8003498:	4602      	mov	r2, r0
 800349a:	693b      	ldr	r3, [r7, #16]
 800349c:	1ad3      	subs	r3, r2, r3
 800349e:	2b64      	cmp	r3, #100	@ 0x64
 80034a0:	d901      	bls.n	80034a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80034a2:	2303      	movs	r3, #3
 80034a4:	e28a      	b.n	80039bc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80034a6:	4b60      	ldr	r3, [pc, #384]	@ (8003628 <HAL_RCC_OscConfig+0x27c>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d1f0      	bne.n	8003494 <HAL_RCC_OscConfig+0xe8>
 80034b2:	e000      	b.n	80034b6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f003 0302 	and.w	r3, r3, #2
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d075      	beq.n	80035ae <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80034c2:	4b59      	ldr	r3, [pc, #356]	@ (8003628 <HAL_RCC_OscConfig+0x27c>)
 80034c4:	689b      	ldr	r3, [r3, #8]
 80034c6:	f003 030c 	and.w	r3, r3, #12
 80034ca:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80034cc:	4b56      	ldr	r3, [pc, #344]	@ (8003628 <HAL_RCC_OscConfig+0x27c>)
 80034ce:	68db      	ldr	r3, [r3, #12]
 80034d0:	f003 0303 	and.w	r3, r3, #3
 80034d4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80034d6:	69bb      	ldr	r3, [r7, #24]
 80034d8:	2b0c      	cmp	r3, #12
 80034da:	d102      	bne.n	80034e2 <HAL_RCC_OscConfig+0x136>
 80034dc:	697b      	ldr	r3, [r7, #20]
 80034de:	2b02      	cmp	r3, #2
 80034e0:	d002      	beq.n	80034e8 <HAL_RCC_OscConfig+0x13c>
 80034e2:	69bb      	ldr	r3, [r7, #24]
 80034e4:	2b04      	cmp	r3, #4
 80034e6:	d11f      	bne.n	8003528 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80034e8:	4b4f      	ldr	r3, [pc, #316]	@ (8003628 <HAL_RCC_OscConfig+0x27c>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d005      	beq.n	8003500 <HAL_RCC_OscConfig+0x154>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	68db      	ldr	r3, [r3, #12]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d101      	bne.n	8003500 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80034fc:	2301      	movs	r3, #1
 80034fe:	e25d      	b.n	80039bc <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003500:	4b49      	ldr	r3, [pc, #292]	@ (8003628 <HAL_RCC_OscConfig+0x27c>)
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	691b      	ldr	r3, [r3, #16]
 800350c:	061b      	lsls	r3, r3, #24
 800350e:	4946      	ldr	r1, [pc, #280]	@ (8003628 <HAL_RCC_OscConfig+0x27c>)
 8003510:	4313      	orrs	r3, r2
 8003512:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003514:	4b45      	ldr	r3, [pc, #276]	@ (800362c <HAL_RCC_OscConfig+0x280>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4618      	mov	r0, r3
 800351a:	f7fe fb77 	bl	8001c0c <HAL_InitTick>
 800351e:	4603      	mov	r3, r0
 8003520:	2b00      	cmp	r3, #0
 8003522:	d043      	beq.n	80035ac <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003524:	2301      	movs	r3, #1
 8003526:	e249      	b.n	80039bc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	68db      	ldr	r3, [r3, #12]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d023      	beq.n	8003578 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003530:	4b3d      	ldr	r3, [pc, #244]	@ (8003628 <HAL_RCC_OscConfig+0x27c>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a3c      	ldr	r2, [pc, #240]	@ (8003628 <HAL_RCC_OscConfig+0x27c>)
 8003536:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800353a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800353c:	f7fe fbb2 	bl	8001ca4 <HAL_GetTick>
 8003540:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003542:	e008      	b.n	8003556 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003544:	f7fe fbae 	bl	8001ca4 <HAL_GetTick>
 8003548:	4602      	mov	r2, r0
 800354a:	693b      	ldr	r3, [r7, #16]
 800354c:	1ad3      	subs	r3, r2, r3
 800354e:	2b02      	cmp	r3, #2
 8003550:	d901      	bls.n	8003556 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003552:	2303      	movs	r3, #3
 8003554:	e232      	b.n	80039bc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003556:	4b34      	ldr	r3, [pc, #208]	@ (8003628 <HAL_RCC_OscConfig+0x27c>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800355e:	2b00      	cmp	r3, #0
 8003560:	d0f0      	beq.n	8003544 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003562:	4b31      	ldr	r3, [pc, #196]	@ (8003628 <HAL_RCC_OscConfig+0x27c>)
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	691b      	ldr	r3, [r3, #16]
 800356e:	061b      	lsls	r3, r3, #24
 8003570:	492d      	ldr	r1, [pc, #180]	@ (8003628 <HAL_RCC_OscConfig+0x27c>)
 8003572:	4313      	orrs	r3, r2
 8003574:	604b      	str	r3, [r1, #4]
 8003576:	e01a      	b.n	80035ae <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003578:	4b2b      	ldr	r3, [pc, #172]	@ (8003628 <HAL_RCC_OscConfig+0x27c>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a2a      	ldr	r2, [pc, #168]	@ (8003628 <HAL_RCC_OscConfig+0x27c>)
 800357e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003582:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003584:	f7fe fb8e 	bl	8001ca4 <HAL_GetTick>
 8003588:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800358a:	e008      	b.n	800359e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800358c:	f7fe fb8a 	bl	8001ca4 <HAL_GetTick>
 8003590:	4602      	mov	r2, r0
 8003592:	693b      	ldr	r3, [r7, #16]
 8003594:	1ad3      	subs	r3, r2, r3
 8003596:	2b02      	cmp	r3, #2
 8003598:	d901      	bls.n	800359e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800359a:	2303      	movs	r3, #3
 800359c:	e20e      	b.n	80039bc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800359e:	4b22      	ldr	r3, [pc, #136]	@ (8003628 <HAL_RCC_OscConfig+0x27c>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d1f0      	bne.n	800358c <HAL_RCC_OscConfig+0x1e0>
 80035aa:	e000      	b.n	80035ae <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80035ac:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f003 0308 	and.w	r3, r3, #8
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d041      	beq.n	800363e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	695b      	ldr	r3, [r3, #20]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d01c      	beq.n	80035fc <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80035c2:	4b19      	ldr	r3, [pc, #100]	@ (8003628 <HAL_RCC_OscConfig+0x27c>)
 80035c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80035c8:	4a17      	ldr	r2, [pc, #92]	@ (8003628 <HAL_RCC_OscConfig+0x27c>)
 80035ca:	f043 0301 	orr.w	r3, r3, #1
 80035ce:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035d2:	f7fe fb67 	bl	8001ca4 <HAL_GetTick>
 80035d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80035d8:	e008      	b.n	80035ec <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035da:	f7fe fb63 	bl	8001ca4 <HAL_GetTick>
 80035de:	4602      	mov	r2, r0
 80035e0:	693b      	ldr	r3, [r7, #16]
 80035e2:	1ad3      	subs	r3, r2, r3
 80035e4:	2b02      	cmp	r3, #2
 80035e6:	d901      	bls.n	80035ec <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80035e8:	2303      	movs	r3, #3
 80035ea:	e1e7      	b.n	80039bc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80035ec:	4b0e      	ldr	r3, [pc, #56]	@ (8003628 <HAL_RCC_OscConfig+0x27c>)
 80035ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80035f2:	f003 0302 	and.w	r3, r3, #2
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d0ef      	beq.n	80035da <HAL_RCC_OscConfig+0x22e>
 80035fa:	e020      	b.n	800363e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80035fc:	4b0a      	ldr	r3, [pc, #40]	@ (8003628 <HAL_RCC_OscConfig+0x27c>)
 80035fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003602:	4a09      	ldr	r2, [pc, #36]	@ (8003628 <HAL_RCC_OscConfig+0x27c>)
 8003604:	f023 0301 	bic.w	r3, r3, #1
 8003608:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800360c:	f7fe fb4a 	bl	8001ca4 <HAL_GetTick>
 8003610:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003612:	e00d      	b.n	8003630 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003614:	f7fe fb46 	bl	8001ca4 <HAL_GetTick>
 8003618:	4602      	mov	r2, r0
 800361a:	693b      	ldr	r3, [r7, #16]
 800361c:	1ad3      	subs	r3, r2, r3
 800361e:	2b02      	cmp	r3, #2
 8003620:	d906      	bls.n	8003630 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003622:	2303      	movs	r3, #3
 8003624:	e1ca      	b.n	80039bc <HAL_RCC_OscConfig+0x610>
 8003626:	bf00      	nop
 8003628:	40021000 	.word	0x40021000
 800362c:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003630:	4b8c      	ldr	r3, [pc, #560]	@ (8003864 <HAL_RCC_OscConfig+0x4b8>)
 8003632:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003636:	f003 0302 	and.w	r3, r3, #2
 800363a:	2b00      	cmp	r3, #0
 800363c:	d1ea      	bne.n	8003614 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f003 0304 	and.w	r3, r3, #4
 8003646:	2b00      	cmp	r3, #0
 8003648:	f000 80a6 	beq.w	8003798 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800364c:	2300      	movs	r3, #0
 800364e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003650:	4b84      	ldr	r3, [pc, #528]	@ (8003864 <HAL_RCC_OscConfig+0x4b8>)
 8003652:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003654:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003658:	2b00      	cmp	r3, #0
 800365a:	d101      	bne.n	8003660 <HAL_RCC_OscConfig+0x2b4>
 800365c:	2301      	movs	r3, #1
 800365e:	e000      	b.n	8003662 <HAL_RCC_OscConfig+0x2b6>
 8003660:	2300      	movs	r3, #0
 8003662:	2b00      	cmp	r3, #0
 8003664:	d00d      	beq.n	8003682 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003666:	4b7f      	ldr	r3, [pc, #508]	@ (8003864 <HAL_RCC_OscConfig+0x4b8>)
 8003668:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800366a:	4a7e      	ldr	r2, [pc, #504]	@ (8003864 <HAL_RCC_OscConfig+0x4b8>)
 800366c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003670:	6593      	str	r3, [r2, #88]	@ 0x58
 8003672:	4b7c      	ldr	r3, [pc, #496]	@ (8003864 <HAL_RCC_OscConfig+0x4b8>)
 8003674:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003676:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800367a:	60fb      	str	r3, [r7, #12]
 800367c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800367e:	2301      	movs	r3, #1
 8003680:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003682:	4b79      	ldr	r3, [pc, #484]	@ (8003868 <HAL_RCC_OscConfig+0x4bc>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800368a:	2b00      	cmp	r3, #0
 800368c:	d118      	bne.n	80036c0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800368e:	4b76      	ldr	r3, [pc, #472]	@ (8003868 <HAL_RCC_OscConfig+0x4bc>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a75      	ldr	r2, [pc, #468]	@ (8003868 <HAL_RCC_OscConfig+0x4bc>)
 8003694:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003698:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800369a:	f7fe fb03 	bl	8001ca4 <HAL_GetTick>
 800369e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80036a0:	e008      	b.n	80036b4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036a2:	f7fe faff 	bl	8001ca4 <HAL_GetTick>
 80036a6:	4602      	mov	r2, r0
 80036a8:	693b      	ldr	r3, [r7, #16]
 80036aa:	1ad3      	subs	r3, r2, r3
 80036ac:	2b02      	cmp	r3, #2
 80036ae:	d901      	bls.n	80036b4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80036b0:	2303      	movs	r3, #3
 80036b2:	e183      	b.n	80039bc <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80036b4:	4b6c      	ldr	r3, [pc, #432]	@ (8003868 <HAL_RCC_OscConfig+0x4bc>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d0f0      	beq.n	80036a2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	689b      	ldr	r3, [r3, #8]
 80036c4:	2b01      	cmp	r3, #1
 80036c6:	d108      	bne.n	80036da <HAL_RCC_OscConfig+0x32e>
 80036c8:	4b66      	ldr	r3, [pc, #408]	@ (8003864 <HAL_RCC_OscConfig+0x4b8>)
 80036ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036ce:	4a65      	ldr	r2, [pc, #404]	@ (8003864 <HAL_RCC_OscConfig+0x4b8>)
 80036d0:	f043 0301 	orr.w	r3, r3, #1
 80036d4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80036d8:	e024      	b.n	8003724 <HAL_RCC_OscConfig+0x378>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	689b      	ldr	r3, [r3, #8]
 80036de:	2b05      	cmp	r3, #5
 80036e0:	d110      	bne.n	8003704 <HAL_RCC_OscConfig+0x358>
 80036e2:	4b60      	ldr	r3, [pc, #384]	@ (8003864 <HAL_RCC_OscConfig+0x4b8>)
 80036e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036e8:	4a5e      	ldr	r2, [pc, #376]	@ (8003864 <HAL_RCC_OscConfig+0x4b8>)
 80036ea:	f043 0304 	orr.w	r3, r3, #4
 80036ee:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80036f2:	4b5c      	ldr	r3, [pc, #368]	@ (8003864 <HAL_RCC_OscConfig+0x4b8>)
 80036f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036f8:	4a5a      	ldr	r2, [pc, #360]	@ (8003864 <HAL_RCC_OscConfig+0x4b8>)
 80036fa:	f043 0301 	orr.w	r3, r3, #1
 80036fe:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003702:	e00f      	b.n	8003724 <HAL_RCC_OscConfig+0x378>
 8003704:	4b57      	ldr	r3, [pc, #348]	@ (8003864 <HAL_RCC_OscConfig+0x4b8>)
 8003706:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800370a:	4a56      	ldr	r2, [pc, #344]	@ (8003864 <HAL_RCC_OscConfig+0x4b8>)
 800370c:	f023 0301 	bic.w	r3, r3, #1
 8003710:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003714:	4b53      	ldr	r3, [pc, #332]	@ (8003864 <HAL_RCC_OscConfig+0x4b8>)
 8003716:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800371a:	4a52      	ldr	r2, [pc, #328]	@ (8003864 <HAL_RCC_OscConfig+0x4b8>)
 800371c:	f023 0304 	bic.w	r3, r3, #4
 8003720:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	689b      	ldr	r3, [r3, #8]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d016      	beq.n	800375a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800372c:	f7fe faba 	bl	8001ca4 <HAL_GetTick>
 8003730:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003732:	e00a      	b.n	800374a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003734:	f7fe fab6 	bl	8001ca4 <HAL_GetTick>
 8003738:	4602      	mov	r2, r0
 800373a:	693b      	ldr	r3, [r7, #16]
 800373c:	1ad3      	subs	r3, r2, r3
 800373e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003742:	4293      	cmp	r3, r2
 8003744:	d901      	bls.n	800374a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003746:	2303      	movs	r3, #3
 8003748:	e138      	b.n	80039bc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800374a:	4b46      	ldr	r3, [pc, #280]	@ (8003864 <HAL_RCC_OscConfig+0x4b8>)
 800374c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003750:	f003 0302 	and.w	r3, r3, #2
 8003754:	2b00      	cmp	r3, #0
 8003756:	d0ed      	beq.n	8003734 <HAL_RCC_OscConfig+0x388>
 8003758:	e015      	b.n	8003786 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800375a:	f7fe faa3 	bl	8001ca4 <HAL_GetTick>
 800375e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003760:	e00a      	b.n	8003778 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003762:	f7fe fa9f 	bl	8001ca4 <HAL_GetTick>
 8003766:	4602      	mov	r2, r0
 8003768:	693b      	ldr	r3, [r7, #16]
 800376a:	1ad3      	subs	r3, r2, r3
 800376c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003770:	4293      	cmp	r3, r2
 8003772:	d901      	bls.n	8003778 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003774:	2303      	movs	r3, #3
 8003776:	e121      	b.n	80039bc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003778:	4b3a      	ldr	r3, [pc, #232]	@ (8003864 <HAL_RCC_OscConfig+0x4b8>)
 800377a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800377e:	f003 0302 	and.w	r3, r3, #2
 8003782:	2b00      	cmp	r3, #0
 8003784:	d1ed      	bne.n	8003762 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003786:	7ffb      	ldrb	r3, [r7, #31]
 8003788:	2b01      	cmp	r3, #1
 800378a:	d105      	bne.n	8003798 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800378c:	4b35      	ldr	r3, [pc, #212]	@ (8003864 <HAL_RCC_OscConfig+0x4b8>)
 800378e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003790:	4a34      	ldr	r2, [pc, #208]	@ (8003864 <HAL_RCC_OscConfig+0x4b8>)
 8003792:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003796:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f003 0320 	and.w	r3, r3, #32
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d03c      	beq.n	800381e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	699b      	ldr	r3, [r3, #24]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d01c      	beq.n	80037e6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80037ac:	4b2d      	ldr	r3, [pc, #180]	@ (8003864 <HAL_RCC_OscConfig+0x4b8>)
 80037ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80037b2:	4a2c      	ldr	r2, [pc, #176]	@ (8003864 <HAL_RCC_OscConfig+0x4b8>)
 80037b4:	f043 0301 	orr.w	r3, r3, #1
 80037b8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037bc:	f7fe fa72 	bl	8001ca4 <HAL_GetTick>
 80037c0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80037c2:	e008      	b.n	80037d6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80037c4:	f7fe fa6e 	bl	8001ca4 <HAL_GetTick>
 80037c8:	4602      	mov	r2, r0
 80037ca:	693b      	ldr	r3, [r7, #16]
 80037cc:	1ad3      	subs	r3, r2, r3
 80037ce:	2b02      	cmp	r3, #2
 80037d0:	d901      	bls.n	80037d6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80037d2:	2303      	movs	r3, #3
 80037d4:	e0f2      	b.n	80039bc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80037d6:	4b23      	ldr	r3, [pc, #140]	@ (8003864 <HAL_RCC_OscConfig+0x4b8>)
 80037d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80037dc:	f003 0302 	and.w	r3, r3, #2
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d0ef      	beq.n	80037c4 <HAL_RCC_OscConfig+0x418>
 80037e4:	e01b      	b.n	800381e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80037e6:	4b1f      	ldr	r3, [pc, #124]	@ (8003864 <HAL_RCC_OscConfig+0x4b8>)
 80037e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80037ec:	4a1d      	ldr	r2, [pc, #116]	@ (8003864 <HAL_RCC_OscConfig+0x4b8>)
 80037ee:	f023 0301 	bic.w	r3, r3, #1
 80037f2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037f6:	f7fe fa55 	bl	8001ca4 <HAL_GetTick>
 80037fa:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80037fc:	e008      	b.n	8003810 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80037fe:	f7fe fa51 	bl	8001ca4 <HAL_GetTick>
 8003802:	4602      	mov	r2, r0
 8003804:	693b      	ldr	r3, [r7, #16]
 8003806:	1ad3      	subs	r3, r2, r3
 8003808:	2b02      	cmp	r3, #2
 800380a:	d901      	bls.n	8003810 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800380c:	2303      	movs	r3, #3
 800380e:	e0d5      	b.n	80039bc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003810:	4b14      	ldr	r3, [pc, #80]	@ (8003864 <HAL_RCC_OscConfig+0x4b8>)
 8003812:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003816:	f003 0302 	and.w	r3, r3, #2
 800381a:	2b00      	cmp	r3, #0
 800381c:	d1ef      	bne.n	80037fe <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	69db      	ldr	r3, [r3, #28]
 8003822:	2b00      	cmp	r3, #0
 8003824:	f000 80c9 	beq.w	80039ba <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003828:	4b0e      	ldr	r3, [pc, #56]	@ (8003864 <HAL_RCC_OscConfig+0x4b8>)
 800382a:	689b      	ldr	r3, [r3, #8]
 800382c:	f003 030c 	and.w	r3, r3, #12
 8003830:	2b0c      	cmp	r3, #12
 8003832:	f000 8083 	beq.w	800393c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	69db      	ldr	r3, [r3, #28]
 800383a:	2b02      	cmp	r3, #2
 800383c:	d15e      	bne.n	80038fc <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800383e:	4b09      	ldr	r3, [pc, #36]	@ (8003864 <HAL_RCC_OscConfig+0x4b8>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4a08      	ldr	r2, [pc, #32]	@ (8003864 <HAL_RCC_OscConfig+0x4b8>)
 8003844:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003848:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800384a:	f7fe fa2b 	bl	8001ca4 <HAL_GetTick>
 800384e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003850:	e00c      	b.n	800386c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003852:	f7fe fa27 	bl	8001ca4 <HAL_GetTick>
 8003856:	4602      	mov	r2, r0
 8003858:	693b      	ldr	r3, [r7, #16]
 800385a:	1ad3      	subs	r3, r2, r3
 800385c:	2b02      	cmp	r3, #2
 800385e:	d905      	bls.n	800386c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003860:	2303      	movs	r3, #3
 8003862:	e0ab      	b.n	80039bc <HAL_RCC_OscConfig+0x610>
 8003864:	40021000 	.word	0x40021000
 8003868:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800386c:	4b55      	ldr	r3, [pc, #340]	@ (80039c4 <HAL_RCC_OscConfig+0x618>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003874:	2b00      	cmp	r3, #0
 8003876:	d1ec      	bne.n	8003852 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003878:	4b52      	ldr	r3, [pc, #328]	@ (80039c4 <HAL_RCC_OscConfig+0x618>)
 800387a:	68da      	ldr	r2, [r3, #12]
 800387c:	4b52      	ldr	r3, [pc, #328]	@ (80039c8 <HAL_RCC_OscConfig+0x61c>)
 800387e:	4013      	ands	r3, r2
 8003880:	687a      	ldr	r2, [r7, #4]
 8003882:	6a11      	ldr	r1, [r2, #32]
 8003884:	687a      	ldr	r2, [r7, #4]
 8003886:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003888:	3a01      	subs	r2, #1
 800388a:	0112      	lsls	r2, r2, #4
 800388c:	4311      	orrs	r1, r2
 800388e:	687a      	ldr	r2, [r7, #4]
 8003890:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8003892:	0212      	lsls	r2, r2, #8
 8003894:	4311      	orrs	r1, r2
 8003896:	687a      	ldr	r2, [r7, #4]
 8003898:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800389a:	0852      	lsrs	r2, r2, #1
 800389c:	3a01      	subs	r2, #1
 800389e:	0552      	lsls	r2, r2, #21
 80038a0:	4311      	orrs	r1, r2
 80038a2:	687a      	ldr	r2, [r7, #4]
 80038a4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80038a6:	0852      	lsrs	r2, r2, #1
 80038a8:	3a01      	subs	r2, #1
 80038aa:	0652      	lsls	r2, r2, #25
 80038ac:	4311      	orrs	r1, r2
 80038ae:	687a      	ldr	r2, [r7, #4]
 80038b0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80038b2:	06d2      	lsls	r2, r2, #27
 80038b4:	430a      	orrs	r2, r1
 80038b6:	4943      	ldr	r1, [pc, #268]	@ (80039c4 <HAL_RCC_OscConfig+0x618>)
 80038b8:	4313      	orrs	r3, r2
 80038ba:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80038bc:	4b41      	ldr	r3, [pc, #260]	@ (80039c4 <HAL_RCC_OscConfig+0x618>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a40      	ldr	r2, [pc, #256]	@ (80039c4 <HAL_RCC_OscConfig+0x618>)
 80038c2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80038c6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80038c8:	4b3e      	ldr	r3, [pc, #248]	@ (80039c4 <HAL_RCC_OscConfig+0x618>)
 80038ca:	68db      	ldr	r3, [r3, #12]
 80038cc:	4a3d      	ldr	r2, [pc, #244]	@ (80039c4 <HAL_RCC_OscConfig+0x618>)
 80038ce:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80038d2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038d4:	f7fe f9e6 	bl	8001ca4 <HAL_GetTick>
 80038d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038da:	e008      	b.n	80038ee <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038dc:	f7fe f9e2 	bl	8001ca4 <HAL_GetTick>
 80038e0:	4602      	mov	r2, r0
 80038e2:	693b      	ldr	r3, [r7, #16]
 80038e4:	1ad3      	subs	r3, r2, r3
 80038e6:	2b02      	cmp	r3, #2
 80038e8:	d901      	bls.n	80038ee <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80038ea:	2303      	movs	r3, #3
 80038ec:	e066      	b.n	80039bc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038ee:	4b35      	ldr	r3, [pc, #212]	@ (80039c4 <HAL_RCC_OscConfig+0x618>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d0f0      	beq.n	80038dc <HAL_RCC_OscConfig+0x530>
 80038fa:	e05e      	b.n	80039ba <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038fc:	4b31      	ldr	r3, [pc, #196]	@ (80039c4 <HAL_RCC_OscConfig+0x618>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a30      	ldr	r2, [pc, #192]	@ (80039c4 <HAL_RCC_OscConfig+0x618>)
 8003902:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003906:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003908:	f7fe f9cc 	bl	8001ca4 <HAL_GetTick>
 800390c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800390e:	e008      	b.n	8003922 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003910:	f7fe f9c8 	bl	8001ca4 <HAL_GetTick>
 8003914:	4602      	mov	r2, r0
 8003916:	693b      	ldr	r3, [r7, #16]
 8003918:	1ad3      	subs	r3, r2, r3
 800391a:	2b02      	cmp	r3, #2
 800391c:	d901      	bls.n	8003922 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800391e:	2303      	movs	r3, #3
 8003920:	e04c      	b.n	80039bc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003922:	4b28      	ldr	r3, [pc, #160]	@ (80039c4 <HAL_RCC_OscConfig+0x618>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800392a:	2b00      	cmp	r3, #0
 800392c:	d1f0      	bne.n	8003910 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800392e:	4b25      	ldr	r3, [pc, #148]	@ (80039c4 <HAL_RCC_OscConfig+0x618>)
 8003930:	68da      	ldr	r2, [r3, #12]
 8003932:	4924      	ldr	r1, [pc, #144]	@ (80039c4 <HAL_RCC_OscConfig+0x618>)
 8003934:	4b25      	ldr	r3, [pc, #148]	@ (80039cc <HAL_RCC_OscConfig+0x620>)
 8003936:	4013      	ands	r3, r2
 8003938:	60cb      	str	r3, [r1, #12]
 800393a:	e03e      	b.n	80039ba <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	69db      	ldr	r3, [r3, #28]
 8003940:	2b01      	cmp	r3, #1
 8003942:	d101      	bne.n	8003948 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8003944:	2301      	movs	r3, #1
 8003946:	e039      	b.n	80039bc <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003948:	4b1e      	ldr	r3, [pc, #120]	@ (80039c4 <HAL_RCC_OscConfig+0x618>)
 800394a:	68db      	ldr	r3, [r3, #12]
 800394c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800394e:	697b      	ldr	r3, [r7, #20]
 8003950:	f003 0203 	and.w	r2, r3, #3
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6a1b      	ldr	r3, [r3, #32]
 8003958:	429a      	cmp	r2, r3
 800395a:	d12c      	bne.n	80039b6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800395c:	697b      	ldr	r3, [r7, #20]
 800395e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003966:	3b01      	subs	r3, #1
 8003968:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800396a:	429a      	cmp	r2, r3
 800396c:	d123      	bne.n	80039b6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800396e:	697b      	ldr	r3, [r7, #20]
 8003970:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003978:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800397a:	429a      	cmp	r2, r3
 800397c:	d11b      	bne.n	80039b6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800397e:	697b      	ldr	r3, [r7, #20]
 8003980:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003988:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800398a:	429a      	cmp	r2, r3
 800398c:	d113      	bne.n	80039b6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800398e:	697b      	ldr	r3, [r7, #20]
 8003990:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003998:	085b      	lsrs	r3, r3, #1
 800399a:	3b01      	subs	r3, #1
 800399c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800399e:	429a      	cmp	r2, r3
 80039a0:	d109      	bne.n	80039b6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80039a2:	697b      	ldr	r3, [r7, #20]
 80039a4:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039ac:	085b      	lsrs	r3, r3, #1
 80039ae:	3b01      	subs	r3, #1
 80039b0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80039b2:	429a      	cmp	r2, r3
 80039b4:	d001      	beq.n	80039ba <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80039b6:	2301      	movs	r3, #1
 80039b8:	e000      	b.n	80039bc <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80039ba:	2300      	movs	r3, #0
}
 80039bc:	4618      	mov	r0, r3
 80039be:	3720      	adds	r7, #32
 80039c0:	46bd      	mov	sp, r7
 80039c2:	bd80      	pop	{r7, pc}
 80039c4:	40021000 	.word	0x40021000
 80039c8:	019f800c 	.word	0x019f800c
 80039cc:	feeefffc 	.word	0xfeeefffc

080039d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b086      	sub	sp, #24
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
 80039d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80039da:	2300      	movs	r3, #0
 80039dc:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d101      	bne.n	80039e8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80039e4:	2301      	movs	r3, #1
 80039e6:	e11e      	b.n	8003c26 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80039e8:	4b91      	ldr	r3, [pc, #580]	@ (8003c30 <HAL_RCC_ClockConfig+0x260>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f003 030f 	and.w	r3, r3, #15
 80039f0:	683a      	ldr	r2, [r7, #0]
 80039f2:	429a      	cmp	r2, r3
 80039f4:	d910      	bls.n	8003a18 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039f6:	4b8e      	ldr	r3, [pc, #568]	@ (8003c30 <HAL_RCC_ClockConfig+0x260>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f023 020f 	bic.w	r2, r3, #15
 80039fe:	498c      	ldr	r1, [pc, #560]	@ (8003c30 <HAL_RCC_ClockConfig+0x260>)
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	4313      	orrs	r3, r2
 8003a04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a06:	4b8a      	ldr	r3, [pc, #552]	@ (8003c30 <HAL_RCC_ClockConfig+0x260>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f003 030f 	and.w	r3, r3, #15
 8003a0e:	683a      	ldr	r2, [r7, #0]
 8003a10:	429a      	cmp	r2, r3
 8003a12:	d001      	beq.n	8003a18 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003a14:	2301      	movs	r3, #1
 8003a16:	e106      	b.n	8003c26 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f003 0301 	and.w	r3, r3, #1
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d073      	beq.n	8003b0c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	2b03      	cmp	r3, #3
 8003a2a:	d129      	bne.n	8003a80 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a2c:	4b81      	ldr	r3, [pc, #516]	@ (8003c34 <HAL_RCC_ClockConfig+0x264>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d101      	bne.n	8003a3c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003a38:	2301      	movs	r3, #1
 8003a3a:	e0f4      	b.n	8003c26 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003a3c:	f000 f99e 	bl	8003d7c <RCC_GetSysClockFreqFromPLLSource>
 8003a40:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	4a7c      	ldr	r2, [pc, #496]	@ (8003c38 <HAL_RCC_ClockConfig+0x268>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d93f      	bls.n	8003aca <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003a4a:	4b7a      	ldr	r3, [pc, #488]	@ (8003c34 <HAL_RCC_ClockConfig+0x264>)
 8003a4c:	689b      	ldr	r3, [r3, #8]
 8003a4e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d009      	beq.n	8003a6a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d033      	beq.n	8003aca <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d12f      	bne.n	8003aca <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003a6a:	4b72      	ldr	r3, [pc, #456]	@ (8003c34 <HAL_RCC_ClockConfig+0x264>)
 8003a6c:	689b      	ldr	r3, [r3, #8]
 8003a6e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003a72:	4a70      	ldr	r2, [pc, #448]	@ (8003c34 <HAL_RCC_ClockConfig+0x264>)
 8003a74:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003a78:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003a7a:	2380      	movs	r3, #128	@ 0x80
 8003a7c:	617b      	str	r3, [r7, #20]
 8003a7e:	e024      	b.n	8003aca <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	2b02      	cmp	r3, #2
 8003a86:	d107      	bne.n	8003a98 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a88:	4b6a      	ldr	r3, [pc, #424]	@ (8003c34 <HAL_RCC_ClockConfig+0x264>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d109      	bne.n	8003aa8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003a94:	2301      	movs	r3, #1
 8003a96:	e0c6      	b.n	8003c26 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a98:	4b66      	ldr	r3, [pc, #408]	@ (8003c34 <HAL_RCC_ClockConfig+0x264>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d101      	bne.n	8003aa8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	e0be      	b.n	8003c26 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003aa8:	f000 f8ce 	bl	8003c48 <HAL_RCC_GetSysClockFreq>
 8003aac:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003aae:	693b      	ldr	r3, [r7, #16]
 8003ab0:	4a61      	ldr	r2, [pc, #388]	@ (8003c38 <HAL_RCC_ClockConfig+0x268>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d909      	bls.n	8003aca <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003ab6:	4b5f      	ldr	r3, [pc, #380]	@ (8003c34 <HAL_RCC_ClockConfig+0x264>)
 8003ab8:	689b      	ldr	r3, [r3, #8]
 8003aba:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003abe:	4a5d      	ldr	r2, [pc, #372]	@ (8003c34 <HAL_RCC_ClockConfig+0x264>)
 8003ac0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003ac4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003ac6:	2380      	movs	r3, #128	@ 0x80
 8003ac8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003aca:	4b5a      	ldr	r3, [pc, #360]	@ (8003c34 <HAL_RCC_ClockConfig+0x264>)
 8003acc:	689b      	ldr	r3, [r3, #8]
 8003ace:	f023 0203 	bic.w	r2, r3, #3
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	4957      	ldr	r1, [pc, #348]	@ (8003c34 <HAL_RCC_ClockConfig+0x264>)
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003adc:	f7fe f8e2 	bl	8001ca4 <HAL_GetTick>
 8003ae0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ae2:	e00a      	b.n	8003afa <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ae4:	f7fe f8de 	bl	8001ca4 <HAL_GetTick>
 8003ae8:	4602      	mov	r2, r0
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	1ad3      	subs	r3, r2, r3
 8003aee:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d901      	bls.n	8003afa <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003af6:	2303      	movs	r3, #3
 8003af8:	e095      	b.n	8003c26 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003afa:	4b4e      	ldr	r3, [pc, #312]	@ (8003c34 <HAL_RCC_ClockConfig+0x264>)
 8003afc:	689b      	ldr	r3, [r3, #8]
 8003afe:	f003 020c 	and.w	r2, r3, #12
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	009b      	lsls	r3, r3, #2
 8003b08:	429a      	cmp	r2, r3
 8003b0a:	d1eb      	bne.n	8003ae4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f003 0302 	and.w	r3, r3, #2
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d023      	beq.n	8003b60 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f003 0304 	and.w	r3, r3, #4
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d005      	beq.n	8003b30 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b24:	4b43      	ldr	r3, [pc, #268]	@ (8003c34 <HAL_RCC_ClockConfig+0x264>)
 8003b26:	689b      	ldr	r3, [r3, #8]
 8003b28:	4a42      	ldr	r2, [pc, #264]	@ (8003c34 <HAL_RCC_ClockConfig+0x264>)
 8003b2a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003b2e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f003 0308 	and.w	r3, r3, #8
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d007      	beq.n	8003b4c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003b3c:	4b3d      	ldr	r3, [pc, #244]	@ (8003c34 <HAL_RCC_ClockConfig+0x264>)
 8003b3e:	689b      	ldr	r3, [r3, #8]
 8003b40:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003b44:	4a3b      	ldr	r2, [pc, #236]	@ (8003c34 <HAL_RCC_ClockConfig+0x264>)
 8003b46:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003b4a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b4c:	4b39      	ldr	r3, [pc, #228]	@ (8003c34 <HAL_RCC_ClockConfig+0x264>)
 8003b4e:	689b      	ldr	r3, [r3, #8]
 8003b50:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	689b      	ldr	r3, [r3, #8]
 8003b58:	4936      	ldr	r1, [pc, #216]	@ (8003c34 <HAL_RCC_ClockConfig+0x264>)
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	608b      	str	r3, [r1, #8]
 8003b5e:	e008      	b.n	8003b72 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003b60:	697b      	ldr	r3, [r7, #20]
 8003b62:	2b80      	cmp	r3, #128	@ 0x80
 8003b64:	d105      	bne.n	8003b72 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003b66:	4b33      	ldr	r3, [pc, #204]	@ (8003c34 <HAL_RCC_ClockConfig+0x264>)
 8003b68:	689b      	ldr	r3, [r3, #8]
 8003b6a:	4a32      	ldr	r2, [pc, #200]	@ (8003c34 <HAL_RCC_ClockConfig+0x264>)
 8003b6c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003b70:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003b72:	4b2f      	ldr	r3, [pc, #188]	@ (8003c30 <HAL_RCC_ClockConfig+0x260>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f003 030f 	and.w	r3, r3, #15
 8003b7a:	683a      	ldr	r2, [r7, #0]
 8003b7c:	429a      	cmp	r2, r3
 8003b7e:	d21d      	bcs.n	8003bbc <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b80:	4b2b      	ldr	r3, [pc, #172]	@ (8003c30 <HAL_RCC_ClockConfig+0x260>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f023 020f 	bic.w	r2, r3, #15
 8003b88:	4929      	ldr	r1, [pc, #164]	@ (8003c30 <HAL_RCC_ClockConfig+0x260>)
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003b90:	f7fe f888 	bl	8001ca4 <HAL_GetTick>
 8003b94:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b96:	e00a      	b.n	8003bae <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b98:	f7fe f884 	bl	8001ca4 <HAL_GetTick>
 8003b9c:	4602      	mov	r2, r0
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	1ad3      	subs	r3, r2, r3
 8003ba2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d901      	bls.n	8003bae <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003baa:	2303      	movs	r3, #3
 8003bac:	e03b      	b.n	8003c26 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bae:	4b20      	ldr	r3, [pc, #128]	@ (8003c30 <HAL_RCC_ClockConfig+0x260>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f003 030f 	and.w	r3, r3, #15
 8003bb6:	683a      	ldr	r2, [r7, #0]
 8003bb8:	429a      	cmp	r2, r3
 8003bba:	d1ed      	bne.n	8003b98 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f003 0304 	and.w	r3, r3, #4
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d008      	beq.n	8003bda <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003bc8:	4b1a      	ldr	r3, [pc, #104]	@ (8003c34 <HAL_RCC_ClockConfig+0x264>)
 8003bca:	689b      	ldr	r3, [r3, #8]
 8003bcc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	68db      	ldr	r3, [r3, #12]
 8003bd4:	4917      	ldr	r1, [pc, #92]	@ (8003c34 <HAL_RCC_ClockConfig+0x264>)
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f003 0308 	and.w	r3, r3, #8
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d009      	beq.n	8003bfa <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003be6:	4b13      	ldr	r3, [pc, #76]	@ (8003c34 <HAL_RCC_ClockConfig+0x264>)
 8003be8:	689b      	ldr	r3, [r3, #8]
 8003bea:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	691b      	ldr	r3, [r3, #16]
 8003bf2:	00db      	lsls	r3, r3, #3
 8003bf4:	490f      	ldr	r1, [pc, #60]	@ (8003c34 <HAL_RCC_ClockConfig+0x264>)
 8003bf6:	4313      	orrs	r3, r2
 8003bf8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003bfa:	f000 f825 	bl	8003c48 <HAL_RCC_GetSysClockFreq>
 8003bfe:	4602      	mov	r2, r0
 8003c00:	4b0c      	ldr	r3, [pc, #48]	@ (8003c34 <HAL_RCC_ClockConfig+0x264>)
 8003c02:	689b      	ldr	r3, [r3, #8]
 8003c04:	091b      	lsrs	r3, r3, #4
 8003c06:	f003 030f 	and.w	r3, r3, #15
 8003c0a:	490c      	ldr	r1, [pc, #48]	@ (8003c3c <HAL_RCC_ClockConfig+0x26c>)
 8003c0c:	5ccb      	ldrb	r3, [r1, r3]
 8003c0e:	f003 031f 	and.w	r3, r3, #31
 8003c12:	fa22 f303 	lsr.w	r3, r2, r3
 8003c16:	4a0a      	ldr	r2, [pc, #40]	@ (8003c40 <HAL_RCC_ClockConfig+0x270>)
 8003c18:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003c1a:	4b0a      	ldr	r3, [pc, #40]	@ (8003c44 <HAL_RCC_ClockConfig+0x274>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4618      	mov	r0, r3
 8003c20:	f7fd fff4 	bl	8001c0c <HAL_InitTick>
 8003c24:	4603      	mov	r3, r0
}
 8003c26:	4618      	mov	r0, r3
 8003c28:	3718      	adds	r7, #24
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bd80      	pop	{r7, pc}
 8003c2e:	bf00      	nop
 8003c30:	40022000 	.word	0x40022000
 8003c34:	40021000 	.word	0x40021000
 8003c38:	04c4b400 	.word	0x04c4b400
 8003c3c:	08006828 	.word	0x08006828
 8003c40:	20000000 	.word	0x20000000
 8003c44:	20000004 	.word	0x20000004

08003c48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c48:	b480      	push	{r7}
 8003c4a:	b087      	sub	sp, #28
 8003c4c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003c4e:	4b2c      	ldr	r3, [pc, #176]	@ (8003d00 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c50:	689b      	ldr	r3, [r3, #8]
 8003c52:	f003 030c 	and.w	r3, r3, #12
 8003c56:	2b04      	cmp	r3, #4
 8003c58:	d102      	bne.n	8003c60 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003c5a:	4b2a      	ldr	r3, [pc, #168]	@ (8003d04 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003c5c:	613b      	str	r3, [r7, #16]
 8003c5e:	e047      	b.n	8003cf0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003c60:	4b27      	ldr	r3, [pc, #156]	@ (8003d00 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c62:	689b      	ldr	r3, [r3, #8]
 8003c64:	f003 030c 	and.w	r3, r3, #12
 8003c68:	2b08      	cmp	r3, #8
 8003c6a:	d102      	bne.n	8003c72 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003c6c:	4b26      	ldr	r3, [pc, #152]	@ (8003d08 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003c6e:	613b      	str	r3, [r7, #16]
 8003c70:	e03e      	b.n	8003cf0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003c72:	4b23      	ldr	r3, [pc, #140]	@ (8003d00 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c74:	689b      	ldr	r3, [r3, #8]
 8003c76:	f003 030c 	and.w	r3, r3, #12
 8003c7a:	2b0c      	cmp	r3, #12
 8003c7c:	d136      	bne.n	8003cec <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003c7e:	4b20      	ldr	r3, [pc, #128]	@ (8003d00 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c80:	68db      	ldr	r3, [r3, #12]
 8003c82:	f003 0303 	and.w	r3, r3, #3
 8003c86:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003c88:	4b1d      	ldr	r3, [pc, #116]	@ (8003d00 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c8a:	68db      	ldr	r3, [r3, #12]
 8003c8c:	091b      	lsrs	r3, r3, #4
 8003c8e:	f003 030f 	and.w	r3, r3, #15
 8003c92:	3301      	adds	r3, #1
 8003c94:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	2b03      	cmp	r3, #3
 8003c9a:	d10c      	bne.n	8003cb6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003c9c:	4a1a      	ldr	r2, [pc, #104]	@ (8003d08 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003c9e:	68bb      	ldr	r3, [r7, #8]
 8003ca0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ca4:	4a16      	ldr	r2, [pc, #88]	@ (8003d00 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003ca6:	68d2      	ldr	r2, [r2, #12]
 8003ca8:	0a12      	lsrs	r2, r2, #8
 8003caa:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003cae:	fb02 f303 	mul.w	r3, r2, r3
 8003cb2:	617b      	str	r3, [r7, #20]
      break;
 8003cb4:	e00c      	b.n	8003cd0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003cb6:	4a13      	ldr	r2, [pc, #76]	@ (8003d04 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003cb8:	68bb      	ldr	r3, [r7, #8]
 8003cba:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cbe:	4a10      	ldr	r2, [pc, #64]	@ (8003d00 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003cc0:	68d2      	ldr	r2, [r2, #12]
 8003cc2:	0a12      	lsrs	r2, r2, #8
 8003cc4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003cc8:	fb02 f303 	mul.w	r3, r2, r3
 8003ccc:	617b      	str	r3, [r7, #20]
      break;
 8003cce:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003cd0:	4b0b      	ldr	r3, [pc, #44]	@ (8003d00 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003cd2:	68db      	ldr	r3, [r3, #12]
 8003cd4:	0e5b      	lsrs	r3, r3, #25
 8003cd6:	f003 0303 	and.w	r3, r3, #3
 8003cda:	3301      	adds	r3, #1
 8003cdc:	005b      	lsls	r3, r3, #1
 8003cde:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003ce0:	697a      	ldr	r2, [r7, #20]
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ce8:	613b      	str	r3, [r7, #16]
 8003cea:	e001      	b.n	8003cf0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003cec:	2300      	movs	r3, #0
 8003cee:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003cf0:	693b      	ldr	r3, [r7, #16]
}
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	371c      	adds	r7, #28
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfc:	4770      	bx	lr
 8003cfe:	bf00      	nop
 8003d00:	40021000 	.word	0x40021000
 8003d04:	00f42400 	.word	0x00f42400
 8003d08:	007a1200 	.word	0x007a1200

08003d0c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d10:	4b03      	ldr	r3, [pc, #12]	@ (8003d20 <HAL_RCC_GetHCLKFreq+0x14>)
 8003d12:	681b      	ldr	r3, [r3, #0]
}
 8003d14:	4618      	mov	r0, r3
 8003d16:	46bd      	mov	sp, r7
 8003d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1c:	4770      	bx	lr
 8003d1e:	bf00      	nop
 8003d20:	20000000 	.word	0x20000000

08003d24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003d28:	f7ff fff0 	bl	8003d0c <HAL_RCC_GetHCLKFreq>
 8003d2c:	4602      	mov	r2, r0
 8003d2e:	4b06      	ldr	r3, [pc, #24]	@ (8003d48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d30:	689b      	ldr	r3, [r3, #8]
 8003d32:	0a1b      	lsrs	r3, r3, #8
 8003d34:	f003 0307 	and.w	r3, r3, #7
 8003d38:	4904      	ldr	r1, [pc, #16]	@ (8003d4c <HAL_RCC_GetPCLK1Freq+0x28>)
 8003d3a:	5ccb      	ldrb	r3, [r1, r3]
 8003d3c:	f003 031f 	and.w	r3, r3, #31
 8003d40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d44:	4618      	mov	r0, r3
 8003d46:	bd80      	pop	{r7, pc}
 8003d48:	40021000 	.word	0x40021000
 8003d4c:	08006838 	.word	0x08006838

08003d50 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003d54:	f7ff ffda 	bl	8003d0c <HAL_RCC_GetHCLKFreq>
 8003d58:	4602      	mov	r2, r0
 8003d5a:	4b06      	ldr	r3, [pc, #24]	@ (8003d74 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d5c:	689b      	ldr	r3, [r3, #8]
 8003d5e:	0adb      	lsrs	r3, r3, #11
 8003d60:	f003 0307 	and.w	r3, r3, #7
 8003d64:	4904      	ldr	r1, [pc, #16]	@ (8003d78 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003d66:	5ccb      	ldrb	r3, [r1, r3]
 8003d68:	f003 031f 	and.w	r3, r3, #31
 8003d6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d70:	4618      	mov	r0, r3
 8003d72:	bd80      	pop	{r7, pc}
 8003d74:	40021000 	.word	0x40021000
 8003d78:	08006838 	.word	0x08006838

08003d7c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	b087      	sub	sp, #28
 8003d80:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003d82:	4b1e      	ldr	r3, [pc, #120]	@ (8003dfc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003d84:	68db      	ldr	r3, [r3, #12]
 8003d86:	f003 0303 	and.w	r3, r3, #3
 8003d8a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003d8c:	4b1b      	ldr	r3, [pc, #108]	@ (8003dfc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003d8e:	68db      	ldr	r3, [r3, #12]
 8003d90:	091b      	lsrs	r3, r3, #4
 8003d92:	f003 030f 	and.w	r3, r3, #15
 8003d96:	3301      	adds	r3, #1
 8003d98:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003d9a:	693b      	ldr	r3, [r7, #16]
 8003d9c:	2b03      	cmp	r3, #3
 8003d9e:	d10c      	bne.n	8003dba <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003da0:	4a17      	ldr	r2, [pc, #92]	@ (8003e00 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003da8:	4a14      	ldr	r2, [pc, #80]	@ (8003dfc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003daa:	68d2      	ldr	r2, [r2, #12]
 8003dac:	0a12      	lsrs	r2, r2, #8
 8003dae:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003db2:	fb02 f303 	mul.w	r3, r2, r3
 8003db6:	617b      	str	r3, [r7, #20]
    break;
 8003db8:	e00c      	b.n	8003dd4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003dba:	4a12      	ldr	r2, [pc, #72]	@ (8003e04 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dc2:	4a0e      	ldr	r2, [pc, #56]	@ (8003dfc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003dc4:	68d2      	ldr	r2, [r2, #12]
 8003dc6:	0a12      	lsrs	r2, r2, #8
 8003dc8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003dcc:	fb02 f303 	mul.w	r3, r2, r3
 8003dd0:	617b      	str	r3, [r7, #20]
    break;
 8003dd2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003dd4:	4b09      	ldr	r3, [pc, #36]	@ (8003dfc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003dd6:	68db      	ldr	r3, [r3, #12]
 8003dd8:	0e5b      	lsrs	r3, r3, #25
 8003dda:	f003 0303 	and.w	r3, r3, #3
 8003dde:	3301      	adds	r3, #1
 8003de0:	005b      	lsls	r3, r3, #1
 8003de2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003de4:	697a      	ldr	r2, [r7, #20]
 8003de6:	68bb      	ldr	r3, [r7, #8]
 8003de8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dec:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003dee:	687b      	ldr	r3, [r7, #4]
}
 8003df0:	4618      	mov	r0, r3
 8003df2:	371c      	adds	r7, #28
 8003df4:	46bd      	mov	sp, r7
 8003df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfa:	4770      	bx	lr
 8003dfc:	40021000 	.word	0x40021000
 8003e00:	007a1200 	.word	0x007a1200
 8003e04:	00f42400 	.word	0x00f42400

08003e08 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b086      	sub	sp, #24
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003e10:	2300      	movs	r3, #0
 8003e12:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003e14:	2300      	movs	r3, #0
 8003e16:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	f000 8098 	beq.w	8003f56 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e26:	2300      	movs	r3, #0
 8003e28:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e2a:	4b43      	ldr	r3, [pc, #268]	@ (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d10d      	bne.n	8003e52 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e36:	4b40      	ldr	r3, [pc, #256]	@ (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e3a:	4a3f      	ldr	r2, [pc, #252]	@ (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e3c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003e40:	6593      	str	r3, [r2, #88]	@ 0x58
 8003e42:	4b3d      	ldr	r3, [pc, #244]	@ (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e4a:	60bb      	str	r3, [r7, #8]
 8003e4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003e52:	4b3a      	ldr	r3, [pc, #232]	@ (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4a39      	ldr	r2, [pc, #228]	@ (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003e58:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e5c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003e5e:	f7fd ff21 	bl	8001ca4 <HAL_GetTick>
 8003e62:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003e64:	e009      	b.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e66:	f7fd ff1d 	bl	8001ca4 <HAL_GetTick>
 8003e6a:	4602      	mov	r2, r0
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	1ad3      	subs	r3, r2, r3
 8003e70:	2b02      	cmp	r3, #2
 8003e72:	d902      	bls.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003e74:	2303      	movs	r3, #3
 8003e76:	74fb      	strb	r3, [r7, #19]
        break;
 8003e78:	e005      	b.n	8003e86 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003e7a:	4b30      	ldr	r3, [pc, #192]	@ (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d0ef      	beq.n	8003e66 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003e86:	7cfb      	ldrb	r3, [r7, #19]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d159      	bne.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003e8c:	4b2a      	ldr	r3, [pc, #168]	@ (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e92:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003e96:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003e98:	697b      	ldr	r3, [r7, #20]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d01e      	beq.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ea2:	697a      	ldr	r2, [r7, #20]
 8003ea4:	429a      	cmp	r2, r3
 8003ea6:	d019      	beq.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003ea8:	4b23      	ldr	r3, [pc, #140]	@ (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003eaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003eae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003eb2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003eb4:	4b20      	ldr	r3, [pc, #128]	@ (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003eb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003eba:	4a1f      	ldr	r2, [pc, #124]	@ (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ebc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ec0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003ec4:	4b1c      	ldr	r3, [pc, #112]	@ (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ec6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003eca:	4a1b      	ldr	r2, [pc, #108]	@ (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ecc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ed0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003ed4:	4a18      	ldr	r2, [pc, #96]	@ (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ed6:	697b      	ldr	r3, [r7, #20]
 8003ed8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003edc:	697b      	ldr	r3, [r7, #20]
 8003ede:	f003 0301 	and.w	r3, r3, #1
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d016      	beq.n	8003f14 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ee6:	f7fd fedd 	bl	8001ca4 <HAL_GetTick>
 8003eea:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003eec:	e00b      	b.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003eee:	f7fd fed9 	bl	8001ca4 <HAL_GetTick>
 8003ef2:	4602      	mov	r2, r0
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	1ad3      	subs	r3, r2, r3
 8003ef8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d902      	bls.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003f00:	2303      	movs	r3, #3
 8003f02:	74fb      	strb	r3, [r7, #19]
            break;
 8003f04:	e006      	b.n	8003f14 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f06:	4b0c      	ldr	r3, [pc, #48]	@ (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f08:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f0c:	f003 0302 	and.w	r3, r3, #2
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d0ec      	beq.n	8003eee <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003f14:	7cfb      	ldrb	r3, [r7, #19]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d10b      	bne.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003f1a:	4b07      	ldr	r3, [pc, #28]	@ (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f20:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f28:	4903      	ldr	r1, [pc, #12]	@ (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003f30:	e008      	b.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003f32:	7cfb      	ldrb	r3, [r7, #19]
 8003f34:	74bb      	strb	r3, [r7, #18]
 8003f36:	e005      	b.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003f38:	40021000 	.word	0x40021000
 8003f3c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f40:	7cfb      	ldrb	r3, [r7, #19]
 8003f42:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f44:	7c7b      	ldrb	r3, [r7, #17]
 8003f46:	2b01      	cmp	r3, #1
 8003f48:	d105      	bne.n	8003f56 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f4a:	4ba6      	ldr	r3, [pc, #664]	@ (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f4e:	4aa5      	ldr	r2, [pc, #660]	@ (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f50:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003f54:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f003 0301 	and.w	r3, r3, #1
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d00a      	beq.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003f62:	4ba0      	ldr	r3, [pc, #640]	@ (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f68:	f023 0203 	bic.w	r2, r3, #3
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	499c      	ldr	r1, [pc, #624]	@ (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f72:	4313      	orrs	r3, r2
 8003f74:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f003 0302 	and.w	r3, r3, #2
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d00a      	beq.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003f84:	4b97      	ldr	r3, [pc, #604]	@ (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f8a:	f023 020c 	bic.w	r2, r3, #12
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	689b      	ldr	r3, [r3, #8]
 8003f92:	4994      	ldr	r1, [pc, #592]	@ (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f94:	4313      	orrs	r3, r2
 8003f96:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f003 0304 	and.w	r3, r3, #4
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d00a      	beq.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003fa6:	4b8f      	ldr	r3, [pc, #572]	@ (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fa8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fac:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	68db      	ldr	r3, [r3, #12]
 8003fb4:	498b      	ldr	r1, [pc, #556]	@ (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f003 0308 	and.w	r3, r3, #8
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d00a      	beq.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003fc8:	4b86      	ldr	r3, [pc, #536]	@ (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fce:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	691b      	ldr	r3, [r3, #16]
 8003fd6:	4983      	ldr	r1, [pc, #524]	@ (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fd8:	4313      	orrs	r3, r2
 8003fda:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f003 0320 	and.w	r3, r3, #32
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d00a      	beq.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003fea:	4b7e      	ldr	r3, [pc, #504]	@ (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ff0:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	695b      	ldr	r3, [r3, #20]
 8003ff8:	497a      	ldr	r1, [pc, #488]	@ (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004008:	2b00      	cmp	r3, #0
 800400a:	d00a      	beq.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800400c:	4b75      	ldr	r3, [pc, #468]	@ (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800400e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004012:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	699b      	ldr	r3, [r3, #24]
 800401a:	4972      	ldr	r1, [pc, #456]	@ (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800401c:	4313      	orrs	r3, r2
 800401e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800402a:	2b00      	cmp	r3, #0
 800402c:	d00a      	beq.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800402e:	4b6d      	ldr	r3, [pc, #436]	@ (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004030:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004034:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	69db      	ldr	r3, [r3, #28]
 800403c:	4969      	ldr	r1, [pc, #420]	@ (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800403e:	4313      	orrs	r3, r2
 8004040:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800404c:	2b00      	cmp	r3, #0
 800404e:	d00a      	beq.n	8004066 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004050:	4b64      	ldr	r3, [pc, #400]	@ (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004052:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004056:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6a1b      	ldr	r3, [r3, #32]
 800405e:	4961      	ldr	r1, [pc, #388]	@ (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004060:	4313      	orrs	r3, r2
 8004062:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800406e:	2b00      	cmp	r3, #0
 8004070:	d00a      	beq.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004072:	4b5c      	ldr	r3, [pc, #368]	@ (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004074:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004078:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004080:	4958      	ldr	r1, [pc, #352]	@ (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004082:	4313      	orrs	r3, r2
 8004084:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004090:	2b00      	cmp	r3, #0
 8004092:	d015      	beq.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004094:	4b53      	ldr	r3, [pc, #332]	@ (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004096:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800409a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040a2:	4950      	ldr	r1, [pc, #320]	@ (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040a4:	4313      	orrs	r3, r2
 80040a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040ae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80040b2:	d105      	bne.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80040b4:	4b4b      	ldr	r3, [pc, #300]	@ (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040b6:	68db      	ldr	r3, [r3, #12]
 80040b8:	4a4a      	ldr	r2, [pc, #296]	@ (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040ba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80040be:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d015      	beq.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80040cc:	4b45      	ldr	r3, [pc, #276]	@ (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040d2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040da:	4942      	ldr	r1, [pc, #264]	@ (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040dc:	4313      	orrs	r3, r2
 80040de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040e6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80040ea:	d105      	bne.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80040ec:	4b3d      	ldr	r3, [pc, #244]	@ (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040ee:	68db      	ldr	r3, [r3, #12]
 80040f0:	4a3c      	ldr	r2, [pc, #240]	@ (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040f2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80040f6:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004100:	2b00      	cmp	r3, #0
 8004102:	d015      	beq.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004104:	4b37      	ldr	r3, [pc, #220]	@ (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004106:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800410a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004112:	4934      	ldr	r1, [pc, #208]	@ (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004114:	4313      	orrs	r3, r2
 8004116:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800411e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004122:	d105      	bne.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004124:	4b2f      	ldr	r3, [pc, #188]	@ (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004126:	68db      	ldr	r3, [r3, #12]
 8004128:	4a2e      	ldr	r2, [pc, #184]	@ (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800412a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800412e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004138:	2b00      	cmp	r3, #0
 800413a:	d015      	beq.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800413c:	4b29      	ldr	r3, [pc, #164]	@ (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800413e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004142:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800414a:	4926      	ldr	r1, [pc, #152]	@ (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800414c:	4313      	orrs	r3, r2
 800414e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004156:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800415a:	d105      	bne.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800415c:	4b21      	ldr	r3, [pc, #132]	@ (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800415e:	68db      	ldr	r3, [r3, #12]
 8004160:	4a20      	ldr	r2, [pc, #128]	@ (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004162:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004166:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004170:	2b00      	cmp	r3, #0
 8004172:	d015      	beq.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004174:	4b1b      	ldr	r3, [pc, #108]	@ (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004176:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800417a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004182:	4918      	ldr	r1, [pc, #96]	@ (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004184:	4313      	orrs	r3, r2
 8004186:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800418e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004192:	d105      	bne.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004194:	4b13      	ldr	r3, [pc, #76]	@ (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004196:	68db      	ldr	r3, [r3, #12]
 8004198:	4a12      	ldr	r2, [pc, #72]	@ (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800419a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800419e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d015      	beq.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80041ac:	4b0d      	ldr	r3, [pc, #52]	@ (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80041ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041b2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041ba:	490a      	ldr	r1, [pc, #40]	@ (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80041bc:	4313      	orrs	r3, r2
 80041be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041c6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80041ca:	d105      	bne.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80041cc:	4b05      	ldr	r3, [pc, #20]	@ (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80041ce:	68db      	ldr	r3, [r3, #12]
 80041d0:	4a04      	ldr	r2, [pc, #16]	@ (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80041d2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80041d6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80041d8:	7cbb      	ldrb	r3, [r7, #18]
}
 80041da:	4618      	mov	r0, r3
 80041dc:	3718      	adds	r7, #24
 80041de:	46bd      	mov	sp, r7
 80041e0:	bd80      	pop	{r7, pc}
 80041e2:	bf00      	nop
 80041e4:	40021000 	.word	0x40021000

080041e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b082      	sub	sp, #8
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d101      	bne.n	80041fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80041f6:	2301      	movs	r3, #1
 80041f8:	e049      	b.n	800428e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004200:	b2db      	uxtb	r3, r3
 8004202:	2b00      	cmp	r3, #0
 8004204:	d106      	bne.n	8004214 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2200      	movs	r2, #0
 800420a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800420e:	6878      	ldr	r0, [r7, #4]
 8004210:	f7fd fba2 	bl	8001958 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2202      	movs	r2, #2
 8004218:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681a      	ldr	r2, [r3, #0]
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	3304      	adds	r3, #4
 8004224:	4619      	mov	r1, r3
 8004226:	4610      	mov	r0, r2
 8004228:	f000 fb4a 	bl	80048c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2201      	movs	r2, #1
 8004230:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2201      	movs	r2, #1
 8004238:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2201      	movs	r2, #1
 8004240:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2201      	movs	r2, #1
 8004248:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2201      	movs	r2, #1
 8004250:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2201      	movs	r2, #1
 8004258:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2201      	movs	r2, #1
 8004260:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2201      	movs	r2, #1
 8004268:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2201      	movs	r2, #1
 8004270:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2201      	movs	r2, #1
 8004278:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2201      	movs	r2, #1
 8004280:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2201      	movs	r2, #1
 8004288:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800428c:	2300      	movs	r3, #0
}
 800428e:	4618      	mov	r0, r3
 8004290:	3708      	adds	r7, #8
 8004292:	46bd      	mov	sp, r7
 8004294:	bd80      	pop	{r7, pc}

08004296 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004296:	b580      	push	{r7, lr}
 8004298:	b082      	sub	sp, #8
 800429a:	af00      	add	r7, sp, #0
 800429c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d101      	bne.n	80042a8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80042a4:	2301      	movs	r3, #1
 80042a6:	e049      	b.n	800433c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80042ae:	b2db      	uxtb	r3, r3
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d106      	bne.n	80042c2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2200      	movs	r2, #0
 80042b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80042bc:	6878      	ldr	r0, [r7, #4]
 80042be:	f000 f841 	bl	8004344 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2202      	movs	r2, #2
 80042c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681a      	ldr	r2, [r3, #0]
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	3304      	adds	r3, #4
 80042d2:	4619      	mov	r1, r3
 80042d4:	4610      	mov	r0, r2
 80042d6:	f000 faf3 	bl	80048c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2201      	movs	r2, #1
 80042de:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2201      	movs	r2, #1
 80042e6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2201      	movs	r2, #1
 80042ee:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2201      	movs	r2, #1
 80042f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2201      	movs	r2, #1
 80042fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2201      	movs	r2, #1
 8004306:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2201      	movs	r2, #1
 800430e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2201      	movs	r2, #1
 8004316:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2201      	movs	r2, #1
 800431e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2201      	movs	r2, #1
 8004326:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2201      	movs	r2, #1
 800432e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2201      	movs	r2, #1
 8004336:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800433a:	2300      	movs	r3, #0
}
 800433c:	4618      	mov	r0, r3
 800433e:	3708      	adds	r7, #8
 8004340:	46bd      	mov	sp, r7
 8004342:	bd80      	pop	{r7, pc}

08004344 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004344:	b480      	push	{r7}
 8004346:	b083      	sub	sp, #12
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800434c:	bf00      	nop
 800434e:	370c      	adds	r7, #12
 8004350:	46bd      	mov	sp, r7
 8004352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004356:	4770      	bx	lr

08004358 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b086      	sub	sp, #24
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
 8004360:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d101      	bne.n	800436c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004368:	2301      	movs	r3, #1
 800436a:	e097      	b.n	800449c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004372:	b2db      	uxtb	r3, r3
 8004374:	2b00      	cmp	r3, #0
 8004376:	d106      	bne.n	8004386 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2200      	movs	r2, #0
 800437c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004380:	6878      	ldr	r0, [r7, #4]
 8004382:	f7fd fa57 	bl	8001834 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2202      	movs	r2, #2
 800438a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	689b      	ldr	r3, [r3, #8]
 8004394:	687a      	ldr	r2, [r7, #4]
 8004396:	6812      	ldr	r2, [r2, #0]
 8004398:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 800439c:	f023 0307 	bic.w	r3, r3, #7
 80043a0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681a      	ldr	r2, [r3, #0]
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	3304      	adds	r3, #4
 80043aa:	4619      	mov	r1, r3
 80043ac:	4610      	mov	r0, r2
 80043ae:	f000 fa87 	bl	80048c0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	689b      	ldr	r3, [r3, #8]
 80043b8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	699b      	ldr	r3, [r3, #24]
 80043c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	6a1b      	ldr	r3, [r3, #32]
 80043c8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	697a      	ldr	r2, [r7, #20]
 80043d0:	4313      	orrs	r3, r2
 80043d2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80043d4:	693b      	ldr	r3, [r7, #16]
 80043d6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80043da:	f023 0303 	bic.w	r3, r3, #3
 80043de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	689a      	ldr	r2, [r3, #8]
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	699b      	ldr	r3, [r3, #24]
 80043e8:	021b      	lsls	r3, r3, #8
 80043ea:	4313      	orrs	r3, r2
 80043ec:	693a      	ldr	r2, [r7, #16]
 80043ee:	4313      	orrs	r3, r2
 80043f0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80043f2:	693b      	ldr	r3, [r7, #16]
 80043f4:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80043f8:	f023 030c 	bic.w	r3, r3, #12
 80043fc:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80043fe:	693b      	ldr	r3, [r7, #16]
 8004400:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004404:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004408:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	68da      	ldr	r2, [r3, #12]
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	69db      	ldr	r3, [r3, #28]
 8004412:	021b      	lsls	r3, r3, #8
 8004414:	4313      	orrs	r3, r2
 8004416:	693a      	ldr	r2, [r7, #16]
 8004418:	4313      	orrs	r3, r2
 800441a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	691b      	ldr	r3, [r3, #16]
 8004420:	011a      	lsls	r2, r3, #4
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	6a1b      	ldr	r3, [r3, #32]
 8004426:	031b      	lsls	r3, r3, #12
 8004428:	4313      	orrs	r3, r2
 800442a:	693a      	ldr	r2, [r7, #16]
 800442c:	4313      	orrs	r3, r2
 800442e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8004436:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800443e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	685a      	ldr	r2, [r3, #4]
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	695b      	ldr	r3, [r3, #20]
 8004448:	011b      	lsls	r3, r3, #4
 800444a:	4313      	orrs	r3, r2
 800444c:	68fa      	ldr	r2, [r7, #12]
 800444e:	4313      	orrs	r3, r2
 8004450:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	697a      	ldr	r2, [r7, #20]
 8004458:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	693a      	ldr	r2, [r7, #16]
 8004460:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	68fa      	ldr	r2, [r7, #12]
 8004468:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2201      	movs	r2, #1
 800446e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2201      	movs	r2, #1
 8004476:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2201      	movs	r2, #1
 800447e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2201      	movs	r2, #1
 8004486:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2201      	movs	r2, #1
 800448e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2201      	movs	r2, #1
 8004496:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800449a:	2300      	movs	r3, #0
}
 800449c:	4618      	mov	r0, r3
 800449e:	3718      	adds	r7, #24
 80044a0:	46bd      	mov	sp, r7
 80044a2:	bd80      	pop	{r7, pc}

080044a4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b086      	sub	sp, #24
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	60f8      	str	r0, [r7, #12]
 80044ac:	60b9      	str	r1, [r7, #8]
 80044ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80044b0:	2300      	movs	r3, #0
 80044b2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80044ba:	2b01      	cmp	r3, #1
 80044bc:	d101      	bne.n	80044c2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80044be:	2302      	movs	r3, #2
 80044c0:	e0ff      	b.n	80046c2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	2201      	movs	r2, #1
 80044c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2b14      	cmp	r3, #20
 80044ce:	f200 80f0 	bhi.w	80046b2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80044d2:	a201      	add	r2, pc, #4	@ (adr r2, 80044d8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80044d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044d8:	0800452d 	.word	0x0800452d
 80044dc:	080046b3 	.word	0x080046b3
 80044e0:	080046b3 	.word	0x080046b3
 80044e4:	080046b3 	.word	0x080046b3
 80044e8:	0800456d 	.word	0x0800456d
 80044ec:	080046b3 	.word	0x080046b3
 80044f0:	080046b3 	.word	0x080046b3
 80044f4:	080046b3 	.word	0x080046b3
 80044f8:	080045af 	.word	0x080045af
 80044fc:	080046b3 	.word	0x080046b3
 8004500:	080046b3 	.word	0x080046b3
 8004504:	080046b3 	.word	0x080046b3
 8004508:	080045ef 	.word	0x080045ef
 800450c:	080046b3 	.word	0x080046b3
 8004510:	080046b3 	.word	0x080046b3
 8004514:	080046b3 	.word	0x080046b3
 8004518:	08004631 	.word	0x08004631
 800451c:	080046b3 	.word	0x080046b3
 8004520:	080046b3 	.word	0x080046b3
 8004524:	080046b3 	.word	0x080046b3
 8004528:	08004671 	.word	0x08004671
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	68b9      	ldr	r1, [r7, #8]
 8004532:	4618      	mov	r0, r3
 8004534:	f000 fa60 	bl	80049f8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	699a      	ldr	r2, [r3, #24]
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f042 0208 	orr.w	r2, r2, #8
 8004546:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	699a      	ldr	r2, [r3, #24]
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f022 0204 	bic.w	r2, r2, #4
 8004556:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	6999      	ldr	r1, [r3, #24]
 800455e:	68bb      	ldr	r3, [r7, #8]
 8004560:	691a      	ldr	r2, [r3, #16]
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	430a      	orrs	r2, r1
 8004568:	619a      	str	r2, [r3, #24]
      break;
 800456a:	e0a5      	b.n	80046b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	68b9      	ldr	r1, [r7, #8]
 8004572:	4618      	mov	r0, r3
 8004574:	f000 fad0 	bl	8004b18 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	699a      	ldr	r2, [r3, #24]
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004586:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	699a      	ldr	r2, [r3, #24]
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004596:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	6999      	ldr	r1, [r3, #24]
 800459e:	68bb      	ldr	r3, [r7, #8]
 80045a0:	691b      	ldr	r3, [r3, #16]
 80045a2:	021a      	lsls	r2, r3, #8
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	430a      	orrs	r2, r1
 80045aa:	619a      	str	r2, [r3, #24]
      break;
 80045ac:	e084      	b.n	80046b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	68b9      	ldr	r1, [r7, #8]
 80045b4:	4618      	mov	r0, r3
 80045b6:	f000 fb39 	bl	8004c2c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	69da      	ldr	r2, [r3, #28]
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f042 0208 	orr.w	r2, r2, #8
 80045c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	69da      	ldr	r2, [r3, #28]
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f022 0204 	bic.w	r2, r2, #4
 80045d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	69d9      	ldr	r1, [r3, #28]
 80045e0:	68bb      	ldr	r3, [r7, #8]
 80045e2:	691a      	ldr	r2, [r3, #16]
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	430a      	orrs	r2, r1
 80045ea:	61da      	str	r2, [r3, #28]
      break;
 80045ec:	e064      	b.n	80046b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	68b9      	ldr	r1, [r7, #8]
 80045f4:	4618      	mov	r0, r3
 80045f6:	f000 fba1 	bl	8004d3c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	69da      	ldr	r2, [r3, #28]
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004608:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	69da      	ldr	r2, [r3, #28]
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004618:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	69d9      	ldr	r1, [r3, #28]
 8004620:	68bb      	ldr	r3, [r7, #8]
 8004622:	691b      	ldr	r3, [r3, #16]
 8004624:	021a      	lsls	r2, r3, #8
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	430a      	orrs	r2, r1
 800462c:	61da      	str	r2, [r3, #28]
      break;
 800462e:	e043      	b.n	80046b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	68b9      	ldr	r1, [r7, #8]
 8004636:	4618      	mov	r0, r3
 8004638:	f000 fc0a 	bl	8004e50 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f042 0208 	orr.w	r2, r2, #8
 800464a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f022 0204 	bic.w	r2, r2, #4
 800465a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8004662:	68bb      	ldr	r3, [r7, #8]
 8004664:	691a      	ldr	r2, [r3, #16]
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	430a      	orrs	r2, r1
 800466c:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800466e:	e023      	b.n	80046b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	68b9      	ldr	r1, [r7, #8]
 8004676:	4618      	mov	r0, r3
 8004678:	f000 fc4e 	bl	8004f18 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800468a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800469a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80046a2:	68bb      	ldr	r3, [r7, #8]
 80046a4:	691b      	ldr	r3, [r3, #16]
 80046a6:	021a      	lsls	r2, r3, #8
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	430a      	orrs	r2, r1
 80046ae:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80046b0:	e002      	b.n	80046b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80046b2:	2301      	movs	r3, #1
 80046b4:	75fb      	strb	r3, [r7, #23]
      break;
 80046b6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	2200      	movs	r2, #0
 80046bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80046c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80046c2:	4618      	mov	r0, r3
 80046c4:	3718      	adds	r7, #24
 80046c6:	46bd      	mov	sp, r7
 80046c8:	bd80      	pop	{r7, pc}
 80046ca:	bf00      	nop

080046cc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b084      	sub	sp, #16
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
 80046d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80046d6:	2300      	movs	r3, #0
 80046d8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80046e0:	2b01      	cmp	r3, #1
 80046e2:	d101      	bne.n	80046e8 <HAL_TIM_ConfigClockSource+0x1c>
 80046e4:	2302      	movs	r3, #2
 80046e6:	e0de      	b.n	80048a6 <HAL_TIM_ConfigClockSource+0x1da>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2201      	movs	r2, #1
 80046ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2202      	movs	r2, #2
 80046f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	689b      	ldr	r3, [r3, #8]
 80046fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004700:	68bb      	ldr	r3, [r7, #8]
 8004702:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8004706:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800470a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800470c:	68bb      	ldr	r3, [r7, #8]
 800470e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004712:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	68ba      	ldr	r2, [r7, #8]
 800471a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a63      	ldr	r2, [pc, #396]	@ (80048b0 <HAL_TIM_ConfigClockSource+0x1e4>)
 8004722:	4293      	cmp	r3, r2
 8004724:	f000 80a9 	beq.w	800487a <HAL_TIM_ConfigClockSource+0x1ae>
 8004728:	4a61      	ldr	r2, [pc, #388]	@ (80048b0 <HAL_TIM_ConfigClockSource+0x1e4>)
 800472a:	4293      	cmp	r3, r2
 800472c:	f200 80ae 	bhi.w	800488c <HAL_TIM_ConfigClockSource+0x1c0>
 8004730:	4a60      	ldr	r2, [pc, #384]	@ (80048b4 <HAL_TIM_ConfigClockSource+0x1e8>)
 8004732:	4293      	cmp	r3, r2
 8004734:	f000 80a1 	beq.w	800487a <HAL_TIM_ConfigClockSource+0x1ae>
 8004738:	4a5e      	ldr	r2, [pc, #376]	@ (80048b4 <HAL_TIM_ConfigClockSource+0x1e8>)
 800473a:	4293      	cmp	r3, r2
 800473c:	f200 80a6 	bhi.w	800488c <HAL_TIM_ConfigClockSource+0x1c0>
 8004740:	4a5d      	ldr	r2, [pc, #372]	@ (80048b8 <HAL_TIM_ConfigClockSource+0x1ec>)
 8004742:	4293      	cmp	r3, r2
 8004744:	f000 8099 	beq.w	800487a <HAL_TIM_ConfigClockSource+0x1ae>
 8004748:	4a5b      	ldr	r2, [pc, #364]	@ (80048b8 <HAL_TIM_ConfigClockSource+0x1ec>)
 800474a:	4293      	cmp	r3, r2
 800474c:	f200 809e 	bhi.w	800488c <HAL_TIM_ConfigClockSource+0x1c0>
 8004750:	4a5a      	ldr	r2, [pc, #360]	@ (80048bc <HAL_TIM_ConfigClockSource+0x1f0>)
 8004752:	4293      	cmp	r3, r2
 8004754:	f000 8091 	beq.w	800487a <HAL_TIM_ConfigClockSource+0x1ae>
 8004758:	4a58      	ldr	r2, [pc, #352]	@ (80048bc <HAL_TIM_ConfigClockSource+0x1f0>)
 800475a:	4293      	cmp	r3, r2
 800475c:	f200 8096 	bhi.w	800488c <HAL_TIM_ConfigClockSource+0x1c0>
 8004760:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8004764:	f000 8089 	beq.w	800487a <HAL_TIM_ConfigClockSource+0x1ae>
 8004768:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800476c:	f200 808e 	bhi.w	800488c <HAL_TIM_ConfigClockSource+0x1c0>
 8004770:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004774:	d03e      	beq.n	80047f4 <HAL_TIM_ConfigClockSource+0x128>
 8004776:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800477a:	f200 8087 	bhi.w	800488c <HAL_TIM_ConfigClockSource+0x1c0>
 800477e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004782:	f000 8086 	beq.w	8004892 <HAL_TIM_ConfigClockSource+0x1c6>
 8004786:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800478a:	d87f      	bhi.n	800488c <HAL_TIM_ConfigClockSource+0x1c0>
 800478c:	2b70      	cmp	r3, #112	@ 0x70
 800478e:	d01a      	beq.n	80047c6 <HAL_TIM_ConfigClockSource+0xfa>
 8004790:	2b70      	cmp	r3, #112	@ 0x70
 8004792:	d87b      	bhi.n	800488c <HAL_TIM_ConfigClockSource+0x1c0>
 8004794:	2b60      	cmp	r3, #96	@ 0x60
 8004796:	d050      	beq.n	800483a <HAL_TIM_ConfigClockSource+0x16e>
 8004798:	2b60      	cmp	r3, #96	@ 0x60
 800479a:	d877      	bhi.n	800488c <HAL_TIM_ConfigClockSource+0x1c0>
 800479c:	2b50      	cmp	r3, #80	@ 0x50
 800479e:	d03c      	beq.n	800481a <HAL_TIM_ConfigClockSource+0x14e>
 80047a0:	2b50      	cmp	r3, #80	@ 0x50
 80047a2:	d873      	bhi.n	800488c <HAL_TIM_ConfigClockSource+0x1c0>
 80047a4:	2b40      	cmp	r3, #64	@ 0x40
 80047a6:	d058      	beq.n	800485a <HAL_TIM_ConfigClockSource+0x18e>
 80047a8:	2b40      	cmp	r3, #64	@ 0x40
 80047aa:	d86f      	bhi.n	800488c <HAL_TIM_ConfigClockSource+0x1c0>
 80047ac:	2b30      	cmp	r3, #48	@ 0x30
 80047ae:	d064      	beq.n	800487a <HAL_TIM_ConfigClockSource+0x1ae>
 80047b0:	2b30      	cmp	r3, #48	@ 0x30
 80047b2:	d86b      	bhi.n	800488c <HAL_TIM_ConfigClockSource+0x1c0>
 80047b4:	2b20      	cmp	r3, #32
 80047b6:	d060      	beq.n	800487a <HAL_TIM_ConfigClockSource+0x1ae>
 80047b8:	2b20      	cmp	r3, #32
 80047ba:	d867      	bhi.n	800488c <HAL_TIM_ConfigClockSource+0x1c0>
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d05c      	beq.n	800487a <HAL_TIM_ConfigClockSource+0x1ae>
 80047c0:	2b10      	cmp	r3, #16
 80047c2:	d05a      	beq.n	800487a <HAL_TIM_ConfigClockSource+0x1ae>
 80047c4:	e062      	b.n	800488c <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80047d6:	f000 fce9 	bl	80051ac <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	689b      	ldr	r3, [r3, #8]
 80047e0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80047e8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	68ba      	ldr	r2, [r7, #8]
 80047f0:	609a      	str	r2, [r3, #8]
      break;
 80047f2:	e04f      	b.n	8004894 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004804:	f000 fcd2 	bl	80051ac <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	689a      	ldr	r2, [r3, #8]
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004816:	609a      	str	r2, [r3, #8]
      break;
 8004818:	e03c      	b.n	8004894 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004826:	461a      	mov	r2, r3
 8004828:	f000 fc44 	bl	80050b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	2150      	movs	r1, #80	@ 0x50
 8004832:	4618      	mov	r0, r3
 8004834:	f000 fc9d 	bl	8005172 <TIM_ITRx_SetConfig>
      break;
 8004838:	e02c      	b.n	8004894 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004846:	461a      	mov	r2, r3
 8004848:	f000 fc63 	bl	8005112 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	2160      	movs	r1, #96	@ 0x60
 8004852:	4618      	mov	r0, r3
 8004854:	f000 fc8d 	bl	8005172 <TIM_ITRx_SetConfig>
      break;
 8004858:	e01c      	b.n	8004894 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004866:	461a      	mov	r2, r3
 8004868:	f000 fc24 	bl	80050b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	2140      	movs	r1, #64	@ 0x40
 8004872:	4618      	mov	r0, r3
 8004874:	f000 fc7d 	bl	8005172 <TIM_ITRx_SetConfig>
      break;
 8004878:	e00c      	b.n	8004894 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681a      	ldr	r2, [r3, #0]
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4619      	mov	r1, r3
 8004884:	4610      	mov	r0, r2
 8004886:	f000 fc74 	bl	8005172 <TIM_ITRx_SetConfig>
      break;
 800488a:	e003      	b.n	8004894 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 800488c:	2301      	movs	r3, #1
 800488e:	73fb      	strb	r3, [r7, #15]
      break;
 8004890:	e000      	b.n	8004894 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8004892:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2201      	movs	r2, #1
 8004898:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2200      	movs	r2, #0
 80048a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80048a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80048a6:	4618      	mov	r0, r3
 80048a8:	3710      	adds	r7, #16
 80048aa:	46bd      	mov	sp, r7
 80048ac:	bd80      	pop	{r7, pc}
 80048ae:	bf00      	nop
 80048b0:	00100070 	.word	0x00100070
 80048b4:	00100040 	.word	0x00100040
 80048b8:	00100030 	.word	0x00100030
 80048bc:	00100020 	.word	0x00100020

080048c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80048c0:	b480      	push	{r7}
 80048c2:	b085      	sub	sp, #20
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
 80048c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	4a42      	ldr	r2, [pc, #264]	@ (80049dc <TIM_Base_SetConfig+0x11c>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d00f      	beq.n	80048f8 <TIM_Base_SetConfig+0x38>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80048de:	d00b      	beq.n	80048f8 <TIM_Base_SetConfig+0x38>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	4a3f      	ldr	r2, [pc, #252]	@ (80049e0 <TIM_Base_SetConfig+0x120>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d007      	beq.n	80048f8 <TIM_Base_SetConfig+0x38>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	4a3e      	ldr	r2, [pc, #248]	@ (80049e4 <TIM_Base_SetConfig+0x124>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d003      	beq.n	80048f8 <TIM_Base_SetConfig+0x38>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	4a3d      	ldr	r2, [pc, #244]	@ (80049e8 <TIM_Base_SetConfig+0x128>)
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d108      	bne.n	800490a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80048fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	68fa      	ldr	r2, [r7, #12]
 8004906:	4313      	orrs	r3, r2
 8004908:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	4a33      	ldr	r2, [pc, #204]	@ (80049dc <TIM_Base_SetConfig+0x11c>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d01b      	beq.n	800494a <TIM_Base_SetConfig+0x8a>
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004918:	d017      	beq.n	800494a <TIM_Base_SetConfig+0x8a>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	4a30      	ldr	r2, [pc, #192]	@ (80049e0 <TIM_Base_SetConfig+0x120>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d013      	beq.n	800494a <TIM_Base_SetConfig+0x8a>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	4a2f      	ldr	r2, [pc, #188]	@ (80049e4 <TIM_Base_SetConfig+0x124>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d00f      	beq.n	800494a <TIM_Base_SetConfig+0x8a>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	4a2e      	ldr	r2, [pc, #184]	@ (80049e8 <TIM_Base_SetConfig+0x128>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d00b      	beq.n	800494a <TIM_Base_SetConfig+0x8a>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	4a2d      	ldr	r2, [pc, #180]	@ (80049ec <TIM_Base_SetConfig+0x12c>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d007      	beq.n	800494a <TIM_Base_SetConfig+0x8a>
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	4a2c      	ldr	r2, [pc, #176]	@ (80049f0 <TIM_Base_SetConfig+0x130>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d003      	beq.n	800494a <TIM_Base_SetConfig+0x8a>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	4a2b      	ldr	r2, [pc, #172]	@ (80049f4 <TIM_Base_SetConfig+0x134>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d108      	bne.n	800495c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004950:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	68db      	ldr	r3, [r3, #12]
 8004956:	68fa      	ldr	r2, [r7, #12]
 8004958:	4313      	orrs	r3, r2
 800495a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	695b      	ldr	r3, [r3, #20]
 8004966:	4313      	orrs	r3, r2
 8004968:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	68fa      	ldr	r2, [r7, #12]
 800496e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	689a      	ldr	r2, [r3, #8]
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	681a      	ldr	r2, [r3, #0]
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	4a16      	ldr	r2, [pc, #88]	@ (80049dc <TIM_Base_SetConfig+0x11c>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d00f      	beq.n	80049a8 <TIM_Base_SetConfig+0xe8>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	4a17      	ldr	r2, [pc, #92]	@ (80049e8 <TIM_Base_SetConfig+0x128>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d00b      	beq.n	80049a8 <TIM_Base_SetConfig+0xe8>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	4a16      	ldr	r2, [pc, #88]	@ (80049ec <TIM_Base_SetConfig+0x12c>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d007      	beq.n	80049a8 <TIM_Base_SetConfig+0xe8>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	4a15      	ldr	r2, [pc, #84]	@ (80049f0 <TIM_Base_SetConfig+0x130>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d003      	beq.n	80049a8 <TIM_Base_SetConfig+0xe8>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	4a14      	ldr	r2, [pc, #80]	@ (80049f4 <TIM_Base_SetConfig+0x134>)
 80049a4:	4293      	cmp	r3, r2
 80049a6:	d103      	bne.n	80049b0 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	691a      	ldr	r2, [r3, #16]
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2201      	movs	r2, #1
 80049b4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	691b      	ldr	r3, [r3, #16]
 80049ba:	f003 0301 	and.w	r3, r3, #1
 80049be:	2b01      	cmp	r3, #1
 80049c0:	d105      	bne.n	80049ce <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	691b      	ldr	r3, [r3, #16]
 80049c6:	f023 0201 	bic.w	r2, r3, #1
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	611a      	str	r2, [r3, #16]
  }
}
 80049ce:	bf00      	nop
 80049d0:	3714      	adds	r7, #20
 80049d2:	46bd      	mov	sp, r7
 80049d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d8:	4770      	bx	lr
 80049da:	bf00      	nop
 80049dc:	40012c00 	.word	0x40012c00
 80049e0:	40000400 	.word	0x40000400
 80049e4:	40000800 	.word	0x40000800
 80049e8:	40013400 	.word	0x40013400
 80049ec:	40014000 	.word	0x40014000
 80049f0:	40014400 	.word	0x40014400
 80049f4:	40014800 	.word	0x40014800

080049f8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80049f8:	b480      	push	{r7}
 80049fa:	b087      	sub	sp, #28
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
 8004a00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6a1b      	ldr	r3, [r3, #32]
 8004a06:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6a1b      	ldr	r3, [r3, #32]
 8004a0c:	f023 0201 	bic.w	r2, r3, #1
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	685b      	ldr	r3, [r3, #4]
 8004a18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	699b      	ldr	r3, [r3, #24]
 8004a1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004a26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	f023 0303 	bic.w	r3, r3, #3
 8004a32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	68fa      	ldr	r2, [r7, #12]
 8004a3a:	4313      	orrs	r3, r2
 8004a3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004a3e:	697b      	ldr	r3, [r7, #20]
 8004a40:	f023 0302 	bic.w	r3, r3, #2
 8004a44:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	689b      	ldr	r3, [r3, #8]
 8004a4a:	697a      	ldr	r2, [r7, #20]
 8004a4c:	4313      	orrs	r3, r2
 8004a4e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	4a2c      	ldr	r2, [pc, #176]	@ (8004b04 <TIM_OC1_SetConfig+0x10c>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d00f      	beq.n	8004a78 <TIM_OC1_SetConfig+0x80>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	4a2b      	ldr	r2, [pc, #172]	@ (8004b08 <TIM_OC1_SetConfig+0x110>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d00b      	beq.n	8004a78 <TIM_OC1_SetConfig+0x80>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	4a2a      	ldr	r2, [pc, #168]	@ (8004b0c <TIM_OC1_SetConfig+0x114>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d007      	beq.n	8004a78 <TIM_OC1_SetConfig+0x80>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	4a29      	ldr	r2, [pc, #164]	@ (8004b10 <TIM_OC1_SetConfig+0x118>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d003      	beq.n	8004a78 <TIM_OC1_SetConfig+0x80>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	4a28      	ldr	r2, [pc, #160]	@ (8004b14 <TIM_OC1_SetConfig+0x11c>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d10c      	bne.n	8004a92 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004a78:	697b      	ldr	r3, [r7, #20]
 8004a7a:	f023 0308 	bic.w	r3, r3, #8
 8004a7e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	68db      	ldr	r3, [r3, #12]
 8004a84:	697a      	ldr	r2, [r7, #20]
 8004a86:	4313      	orrs	r3, r2
 8004a88:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004a8a:	697b      	ldr	r3, [r7, #20]
 8004a8c:	f023 0304 	bic.w	r3, r3, #4
 8004a90:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	4a1b      	ldr	r2, [pc, #108]	@ (8004b04 <TIM_OC1_SetConfig+0x10c>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d00f      	beq.n	8004aba <TIM_OC1_SetConfig+0xc2>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	4a1a      	ldr	r2, [pc, #104]	@ (8004b08 <TIM_OC1_SetConfig+0x110>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d00b      	beq.n	8004aba <TIM_OC1_SetConfig+0xc2>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	4a19      	ldr	r2, [pc, #100]	@ (8004b0c <TIM_OC1_SetConfig+0x114>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d007      	beq.n	8004aba <TIM_OC1_SetConfig+0xc2>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	4a18      	ldr	r2, [pc, #96]	@ (8004b10 <TIM_OC1_SetConfig+0x118>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d003      	beq.n	8004aba <TIM_OC1_SetConfig+0xc2>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	4a17      	ldr	r2, [pc, #92]	@ (8004b14 <TIM_OC1_SetConfig+0x11c>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d111      	bne.n	8004ade <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004aba:	693b      	ldr	r3, [r7, #16]
 8004abc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004ac0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004ac2:	693b      	ldr	r3, [r7, #16]
 8004ac4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004ac8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	695b      	ldr	r3, [r3, #20]
 8004ace:	693a      	ldr	r2, [r7, #16]
 8004ad0:	4313      	orrs	r3, r2
 8004ad2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	699b      	ldr	r3, [r3, #24]
 8004ad8:	693a      	ldr	r2, [r7, #16]
 8004ada:	4313      	orrs	r3, r2
 8004adc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	693a      	ldr	r2, [r7, #16]
 8004ae2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	68fa      	ldr	r2, [r7, #12]
 8004ae8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	685a      	ldr	r2, [r3, #4]
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	697a      	ldr	r2, [r7, #20]
 8004af6:	621a      	str	r2, [r3, #32]
}
 8004af8:	bf00      	nop
 8004afa:	371c      	adds	r7, #28
 8004afc:	46bd      	mov	sp, r7
 8004afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b02:	4770      	bx	lr
 8004b04:	40012c00 	.word	0x40012c00
 8004b08:	40013400 	.word	0x40013400
 8004b0c:	40014000 	.word	0x40014000
 8004b10:	40014400 	.word	0x40014400
 8004b14:	40014800 	.word	0x40014800

08004b18 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	b087      	sub	sp, #28
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
 8004b20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6a1b      	ldr	r3, [r3, #32]
 8004b26:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6a1b      	ldr	r3, [r3, #32]
 8004b2c:	f023 0210 	bic.w	r2, r3, #16
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	685b      	ldr	r3, [r3, #4]
 8004b38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	699b      	ldr	r3, [r3, #24]
 8004b3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004b46:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004b4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004b52:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	021b      	lsls	r3, r3, #8
 8004b5a:	68fa      	ldr	r2, [r7, #12]
 8004b5c:	4313      	orrs	r3, r2
 8004b5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004b60:	697b      	ldr	r3, [r7, #20]
 8004b62:	f023 0320 	bic.w	r3, r3, #32
 8004b66:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	689b      	ldr	r3, [r3, #8]
 8004b6c:	011b      	lsls	r3, r3, #4
 8004b6e:	697a      	ldr	r2, [r7, #20]
 8004b70:	4313      	orrs	r3, r2
 8004b72:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	4a28      	ldr	r2, [pc, #160]	@ (8004c18 <TIM_OC2_SetConfig+0x100>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d003      	beq.n	8004b84 <TIM_OC2_SetConfig+0x6c>
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	4a27      	ldr	r2, [pc, #156]	@ (8004c1c <TIM_OC2_SetConfig+0x104>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d10d      	bne.n	8004ba0 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004b84:	697b      	ldr	r3, [r7, #20]
 8004b86:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004b8a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	68db      	ldr	r3, [r3, #12]
 8004b90:	011b      	lsls	r3, r3, #4
 8004b92:	697a      	ldr	r2, [r7, #20]
 8004b94:	4313      	orrs	r3, r2
 8004b96:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004b98:	697b      	ldr	r3, [r7, #20]
 8004b9a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004b9e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	4a1d      	ldr	r2, [pc, #116]	@ (8004c18 <TIM_OC2_SetConfig+0x100>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d00f      	beq.n	8004bc8 <TIM_OC2_SetConfig+0xb0>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	4a1c      	ldr	r2, [pc, #112]	@ (8004c1c <TIM_OC2_SetConfig+0x104>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d00b      	beq.n	8004bc8 <TIM_OC2_SetConfig+0xb0>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	4a1b      	ldr	r2, [pc, #108]	@ (8004c20 <TIM_OC2_SetConfig+0x108>)
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d007      	beq.n	8004bc8 <TIM_OC2_SetConfig+0xb0>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	4a1a      	ldr	r2, [pc, #104]	@ (8004c24 <TIM_OC2_SetConfig+0x10c>)
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d003      	beq.n	8004bc8 <TIM_OC2_SetConfig+0xb0>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	4a19      	ldr	r2, [pc, #100]	@ (8004c28 <TIM_OC2_SetConfig+0x110>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d113      	bne.n	8004bf0 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004bc8:	693b      	ldr	r3, [r7, #16]
 8004bca:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004bce:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004bd0:	693b      	ldr	r3, [r7, #16]
 8004bd2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004bd6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	695b      	ldr	r3, [r3, #20]
 8004bdc:	009b      	lsls	r3, r3, #2
 8004bde:	693a      	ldr	r2, [r7, #16]
 8004be0:	4313      	orrs	r3, r2
 8004be2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	699b      	ldr	r3, [r3, #24]
 8004be8:	009b      	lsls	r3, r3, #2
 8004bea:	693a      	ldr	r2, [r7, #16]
 8004bec:	4313      	orrs	r3, r2
 8004bee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	693a      	ldr	r2, [r7, #16]
 8004bf4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	68fa      	ldr	r2, [r7, #12]
 8004bfa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	685a      	ldr	r2, [r3, #4]
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	697a      	ldr	r2, [r7, #20]
 8004c08:	621a      	str	r2, [r3, #32]
}
 8004c0a:	bf00      	nop
 8004c0c:	371c      	adds	r7, #28
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c14:	4770      	bx	lr
 8004c16:	bf00      	nop
 8004c18:	40012c00 	.word	0x40012c00
 8004c1c:	40013400 	.word	0x40013400
 8004c20:	40014000 	.word	0x40014000
 8004c24:	40014400 	.word	0x40014400
 8004c28:	40014800 	.word	0x40014800

08004c2c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004c2c:	b480      	push	{r7}
 8004c2e:	b087      	sub	sp, #28
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
 8004c34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6a1b      	ldr	r3, [r3, #32]
 8004c3a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6a1b      	ldr	r3, [r3, #32]
 8004c40:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	685b      	ldr	r3, [r3, #4]
 8004c4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	69db      	ldr	r3, [r3, #28]
 8004c52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004c5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	f023 0303 	bic.w	r3, r3, #3
 8004c66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	68fa      	ldr	r2, [r7, #12]
 8004c6e:	4313      	orrs	r3, r2
 8004c70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004c72:	697b      	ldr	r3, [r7, #20]
 8004c74:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004c78:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	689b      	ldr	r3, [r3, #8]
 8004c7e:	021b      	lsls	r3, r3, #8
 8004c80:	697a      	ldr	r2, [r7, #20]
 8004c82:	4313      	orrs	r3, r2
 8004c84:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	4a27      	ldr	r2, [pc, #156]	@ (8004d28 <TIM_OC3_SetConfig+0xfc>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d003      	beq.n	8004c96 <TIM_OC3_SetConfig+0x6a>
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	4a26      	ldr	r2, [pc, #152]	@ (8004d2c <TIM_OC3_SetConfig+0x100>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d10d      	bne.n	8004cb2 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004c96:	697b      	ldr	r3, [r7, #20]
 8004c98:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004c9c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	68db      	ldr	r3, [r3, #12]
 8004ca2:	021b      	lsls	r3, r3, #8
 8004ca4:	697a      	ldr	r2, [r7, #20]
 8004ca6:	4313      	orrs	r3, r2
 8004ca8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004caa:	697b      	ldr	r3, [r7, #20]
 8004cac:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004cb0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	4a1c      	ldr	r2, [pc, #112]	@ (8004d28 <TIM_OC3_SetConfig+0xfc>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d00f      	beq.n	8004cda <TIM_OC3_SetConfig+0xae>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	4a1b      	ldr	r2, [pc, #108]	@ (8004d2c <TIM_OC3_SetConfig+0x100>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d00b      	beq.n	8004cda <TIM_OC3_SetConfig+0xae>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	4a1a      	ldr	r2, [pc, #104]	@ (8004d30 <TIM_OC3_SetConfig+0x104>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d007      	beq.n	8004cda <TIM_OC3_SetConfig+0xae>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	4a19      	ldr	r2, [pc, #100]	@ (8004d34 <TIM_OC3_SetConfig+0x108>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d003      	beq.n	8004cda <TIM_OC3_SetConfig+0xae>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	4a18      	ldr	r2, [pc, #96]	@ (8004d38 <TIM_OC3_SetConfig+0x10c>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d113      	bne.n	8004d02 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004cda:	693b      	ldr	r3, [r7, #16]
 8004cdc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004ce0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004ce2:	693b      	ldr	r3, [r7, #16]
 8004ce4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004ce8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	695b      	ldr	r3, [r3, #20]
 8004cee:	011b      	lsls	r3, r3, #4
 8004cf0:	693a      	ldr	r2, [r7, #16]
 8004cf2:	4313      	orrs	r3, r2
 8004cf4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	699b      	ldr	r3, [r3, #24]
 8004cfa:	011b      	lsls	r3, r3, #4
 8004cfc:	693a      	ldr	r2, [r7, #16]
 8004cfe:	4313      	orrs	r3, r2
 8004d00:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	693a      	ldr	r2, [r7, #16]
 8004d06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	68fa      	ldr	r2, [r7, #12]
 8004d0c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	685a      	ldr	r2, [r3, #4]
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	697a      	ldr	r2, [r7, #20]
 8004d1a:	621a      	str	r2, [r3, #32]
}
 8004d1c:	bf00      	nop
 8004d1e:	371c      	adds	r7, #28
 8004d20:	46bd      	mov	sp, r7
 8004d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d26:	4770      	bx	lr
 8004d28:	40012c00 	.word	0x40012c00
 8004d2c:	40013400 	.word	0x40013400
 8004d30:	40014000 	.word	0x40014000
 8004d34:	40014400 	.word	0x40014400
 8004d38:	40014800 	.word	0x40014800

08004d3c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004d3c:	b480      	push	{r7}
 8004d3e:	b087      	sub	sp, #28
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
 8004d44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6a1b      	ldr	r3, [r3, #32]
 8004d4a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6a1b      	ldr	r3, [r3, #32]
 8004d50:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	685b      	ldr	r3, [r3, #4]
 8004d5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	69db      	ldr	r3, [r3, #28]
 8004d62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004d6a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004d6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d76:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	021b      	lsls	r3, r3, #8
 8004d7e:	68fa      	ldr	r2, [r7, #12]
 8004d80:	4313      	orrs	r3, r2
 8004d82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004d84:	697b      	ldr	r3, [r7, #20]
 8004d86:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004d8a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	689b      	ldr	r3, [r3, #8]
 8004d90:	031b      	lsls	r3, r3, #12
 8004d92:	697a      	ldr	r2, [r7, #20]
 8004d94:	4313      	orrs	r3, r2
 8004d96:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	4a28      	ldr	r2, [pc, #160]	@ (8004e3c <TIM_OC4_SetConfig+0x100>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d003      	beq.n	8004da8 <TIM_OC4_SetConfig+0x6c>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	4a27      	ldr	r2, [pc, #156]	@ (8004e40 <TIM_OC4_SetConfig+0x104>)
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d10d      	bne.n	8004dc4 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8004da8:	697b      	ldr	r3, [r7, #20]
 8004daa:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004dae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	68db      	ldr	r3, [r3, #12]
 8004db4:	031b      	lsls	r3, r3, #12
 8004db6:	697a      	ldr	r2, [r7, #20]
 8004db8:	4313      	orrs	r3, r2
 8004dba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8004dbc:	697b      	ldr	r3, [r7, #20]
 8004dbe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004dc2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	4a1d      	ldr	r2, [pc, #116]	@ (8004e3c <TIM_OC4_SetConfig+0x100>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d00f      	beq.n	8004dec <TIM_OC4_SetConfig+0xb0>
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	4a1c      	ldr	r2, [pc, #112]	@ (8004e40 <TIM_OC4_SetConfig+0x104>)
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d00b      	beq.n	8004dec <TIM_OC4_SetConfig+0xb0>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	4a1b      	ldr	r2, [pc, #108]	@ (8004e44 <TIM_OC4_SetConfig+0x108>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d007      	beq.n	8004dec <TIM_OC4_SetConfig+0xb0>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	4a1a      	ldr	r2, [pc, #104]	@ (8004e48 <TIM_OC4_SetConfig+0x10c>)
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d003      	beq.n	8004dec <TIM_OC4_SetConfig+0xb0>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	4a19      	ldr	r2, [pc, #100]	@ (8004e4c <TIM_OC4_SetConfig+0x110>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d113      	bne.n	8004e14 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004dec:	693b      	ldr	r3, [r7, #16]
 8004dee:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004df2:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8004df4:	693b      	ldr	r3, [r7, #16]
 8004df6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004dfa:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	695b      	ldr	r3, [r3, #20]
 8004e00:	019b      	lsls	r3, r3, #6
 8004e02:	693a      	ldr	r2, [r7, #16]
 8004e04:	4313      	orrs	r3, r2
 8004e06:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	699b      	ldr	r3, [r3, #24]
 8004e0c:	019b      	lsls	r3, r3, #6
 8004e0e:	693a      	ldr	r2, [r7, #16]
 8004e10:	4313      	orrs	r3, r2
 8004e12:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	693a      	ldr	r2, [r7, #16]
 8004e18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	68fa      	ldr	r2, [r7, #12]
 8004e1e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	685a      	ldr	r2, [r3, #4]
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	697a      	ldr	r2, [r7, #20]
 8004e2c:	621a      	str	r2, [r3, #32]
}
 8004e2e:	bf00      	nop
 8004e30:	371c      	adds	r7, #28
 8004e32:	46bd      	mov	sp, r7
 8004e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e38:	4770      	bx	lr
 8004e3a:	bf00      	nop
 8004e3c:	40012c00 	.word	0x40012c00
 8004e40:	40013400 	.word	0x40013400
 8004e44:	40014000 	.word	0x40014000
 8004e48:	40014400 	.word	0x40014400
 8004e4c:	40014800 	.word	0x40014800

08004e50 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004e50:	b480      	push	{r7}
 8004e52:	b087      	sub	sp, #28
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
 8004e58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6a1b      	ldr	r3, [r3, #32]
 8004e5e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6a1b      	ldr	r3, [r3, #32]
 8004e64:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	685b      	ldr	r3, [r3, #4]
 8004e70:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004e7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	68fa      	ldr	r2, [r7, #12]
 8004e8a:	4313      	orrs	r3, r2
 8004e8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004e8e:	693b      	ldr	r3, [r7, #16]
 8004e90:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8004e94:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	689b      	ldr	r3, [r3, #8]
 8004e9a:	041b      	lsls	r3, r3, #16
 8004e9c:	693a      	ldr	r2, [r7, #16]
 8004e9e:	4313      	orrs	r3, r2
 8004ea0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	4a17      	ldr	r2, [pc, #92]	@ (8004f04 <TIM_OC5_SetConfig+0xb4>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d00f      	beq.n	8004eca <TIM_OC5_SetConfig+0x7a>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	4a16      	ldr	r2, [pc, #88]	@ (8004f08 <TIM_OC5_SetConfig+0xb8>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d00b      	beq.n	8004eca <TIM_OC5_SetConfig+0x7a>
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	4a15      	ldr	r2, [pc, #84]	@ (8004f0c <TIM_OC5_SetConfig+0xbc>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d007      	beq.n	8004eca <TIM_OC5_SetConfig+0x7a>
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	4a14      	ldr	r2, [pc, #80]	@ (8004f10 <TIM_OC5_SetConfig+0xc0>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d003      	beq.n	8004eca <TIM_OC5_SetConfig+0x7a>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	4a13      	ldr	r2, [pc, #76]	@ (8004f14 <TIM_OC5_SetConfig+0xc4>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d109      	bne.n	8004ede <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004eca:	697b      	ldr	r3, [r7, #20]
 8004ecc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004ed0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	695b      	ldr	r3, [r3, #20]
 8004ed6:	021b      	lsls	r3, r3, #8
 8004ed8:	697a      	ldr	r2, [r7, #20]
 8004eda:	4313      	orrs	r3, r2
 8004edc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	697a      	ldr	r2, [r7, #20]
 8004ee2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	68fa      	ldr	r2, [r7, #12]
 8004ee8:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	685a      	ldr	r2, [r3, #4]
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	693a      	ldr	r2, [r7, #16]
 8004ef6:	621a      	str	r2, [r3, #32]
}
 8004ef8:	bf00      	nop
 8004efa:	371c      	adds	r7, #28
 8004efc:	46bd      	mov	sp, r7
 8004efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f02:	4770      	bx	lr
 8004f04:	40012c00 	.word	0x40012c00
 8004f08:	40013400 	.word	0x40013400
 8004f0c:	40014000 	.word	0x40014000
 8004f10:	40014400 	.word	0x40014400
 8004f14:	40014800 	.word	0x40014800

08004f18 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004f18:	b480      	push	{r7}
 8004f1a:	b087      	sub	sp, #28
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
 8004f20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6a1b      	ldr	r3, [r3, #32]
 8004f26:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6a1b      	ldr	r3, [r3, #32]
 8004f2c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	685b      	ldr	r3, [r3, #4]
 8004f38:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004f46:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004f4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	021b      	lsls	r3, r3, #8
 8004f52:	68fa      	ldr	r2, [r7, #12]
 8004f54:	4313      	orrs	r3, r2
 8004f56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004f58:	693b      	ldr	r3, [r7, #16]
 8004f5a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004f5e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	689b      	ldr	r3, [r3, #8]
 8004f64:	051b      	lsls	r3, r3, #20
 8004f66:	693a      	ldr	r2, [r7, #16]
 8004f68:	4313      	orrs	r3, r2
 8004f6a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	4a18      	ldr	r2, [pc, #96]	@ (8004fd0 <TIM_OC6_SetConfig+0xb8>)
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d00f      	beq.n	8004f94 <TIM_OC6_SetConfig+0x7c>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	4a17      	ldr	r2, [pc, #92]	@ (8004fd4 <TIM_OC6_SetConfig+0xbc>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d00b      	beq.n	8004f94 <TIM_OC6_SetConfig+0x7c>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	4a16      	ldr	r2, [pc, #88]	@ (8004fd8 <TIM_OC6_SetConfig+0xc0>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d007      	beq.n	8004f94 <TIM_OC6_SetConfig+0x7c>
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	4a15      	ldr	r2, [pc, #84]	@ (8004fdc <TIM_OC6_SetConfig+0xc4>)
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d003      	beq.n	8004f94 <TIM_OC6_SetConfig+0x7c>
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	4a14      	ldr	r2, [pc, #80]	@ (8004fe0 <TIM_OC6_SetConfig+0xc8>)
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d109      	bne.n	8004fa8 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004f94:	697b      	ldr	r3, [r7, #20]
 8004f96:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004f9a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	695b      	ldr	r3, [r3, #20]
 8004fa0:	029b      	lsls	r3, r3, #10
 8004fa2:	697a      	ldr	r2, [r7, #20]
 8004fa4:	4313      	orrs	r3, r2
 8004fa6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	697a      	ldr	r2, [r7, #20]
 8004fac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	68fa      	ldr	r2, [r7, #12]
 8004fb2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	685a      	ldr	r2, [r3, #4]
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	693a      	ldr	r2, [r7, #16]
 8004fc0:	621a      	str	r2, [r3, #32]
}
 8004fc2:	bf00      	nop
 8004fc4:	371c      	adds	r7, #28
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fcc:	4770      	bx	lr
 8004fce:	bf00      	nop
 8004fd0:	40012c00 	.word	0x40012c00
 8004fd4:	40013400 	.word	0x40013400
 8004fd8:	40014000 	.word	0x40014000
 8004fdc:	40014400 	.word	0x40014400
 8004fe0:	40014800 	.word	0x40014800

08004fe4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004fe4:	b480      	push	{r7}
 8004fe6:	b087      	sub	sp, #28
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	60f8      	str	r0, [r7, #12]
 8004fec:	60b9      	str	r1, [r7, #8]
 8004fee:	607a      	str	r2, [r7, #4]
 8004ff0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	6a1b      	ldr	r3, [r3, #32]
 8004ff6:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	6a1b      	ldr	r3, [r3, #32]
 8004ffc:	f023 0201 	bic.w	r2, r3, #1
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	699b      	ldr	r3, [r3, #24]
 8005008:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	4a24      	ldr	r2, [pc, #144]	@ (80050a0 <TIM_TI1_SetConfig+0xbc>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d013      	beq.n	800503a <TIM_TI1_SetConfig+0x56>
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005018:	d00f      	beq.n	800503a <TIM_TI1_SetConfig+0x56>
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	4a21      	ldr	r2, [pc, #132]	@ (80050a4 <TIM_TI1_SetConfig+0xc0>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d00b      	beq.n	800503a <TIM_TI1_SetConfig+0x56>
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	4a20      	ldr	r2, [pc, #128]	@ (80050a8 <TIM_TI1_SetConfig+0xc4>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d007      	beq.n	800503a <TIM_TI1_SetConfig+0x56>
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	4a1f      	ldr	r2, [pc, #124]	@ (80050ac <TIM_TI1_SetConfig+0xc8>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d003      	beq.n	800503a <TIM_TI1_SetConfig+0x56>
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	4a1e      	ldr	r2, [pc, #120]	@ (80050b0 <TIM_TI1_SetConfig+0xcc>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d101      	bne.n	800503e <TIM_TI1_SetConfig+0x5a>
 800503a:	2301      	movs	r3, #1
 800503c:	e000      	b.n	8005040 <TIM_TI1_SetConfig+0x5c>
 800503e:	2300      	movs	r3, #0
 8005040:	2b00      	cmp	r3, #0
 8005042:	d008      	beq.n	8005056 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005044:	697b      	ldr	r3, [r7, #20]
 8005046:	f023 0303 	bic.w	r3, r3, #3
 800504a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800504c:	697a      	ldr	r2, [r7, #20]
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	4313      	orrs	r3, r2
 8005052:	617b      	str	r3, [r7, #20]
 8005054:	e003      	b.n	800505e <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005056:	697b      	ldr	r3, [r7, #20]
 8005058:	f043 0301 	orr.w	r3, r3, #1
 800505c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800505e:	697b      	ldr	r3, [r7, #20]
 8005060:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005064:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	011b      	lsls	r3, r3, #4
 800506a:	b2db      	uxtb	r3, r3
 800506c:	697a      	ldr	r2, [r7, #20]
 800506e:	4313      	orrs	r3, r2
 8005070:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005072:	693b      	ldr	r3, [r7, #16]
 8005074:	f023 030a 	bic.w	r3, r3, #10
 8005078:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800507a:	68bb      	ldr	r3, [r7, #8]
 800507c:	f003 030a 	and.w	r3, r3, #10
 8005080:	693a      	ldr	r2, [r7, #16]
 8005082:	4313      	orrs	r3, r2
 8005084:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	697a      	ldr	r2, [r7, #20]
 800508a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	693a      	ldr	r2, [r7, #16]
 8005090:	621a      	str	r2, [r3, #32]
}
 8005092:	bf00      	nop
 8005094:	371c      	adds	r7, #28
 8005096:	46bd      	mov	sp, r7
 8005098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509c:	4770      	bx	lr
 800509e:	bf00      	nop
 80050a0:	40012c00 	.word	0x40012c00
 80050a4:	40000400 	.word	0x40000400
 80050a8:	40000800 	.word	0x40000800
 80050ac:	40013400 	.word	0x40013400
 80050b0:	40014000 	.word	0x40014000

080050b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80050b4:	b480      	push	{r7}
 80050b6:	b087      	sub	sp, #28
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	60f8      	str	r0, [r7, #12]
 80050bc:	60b9      	str	r1, [r7, #8]
 80050be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	6a1b      	ldr	r3, [r3, #32]
 80050c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	6a1b      	ldr	r3, [r3, #32]
 80050ca:	f023 0201 	bic.w	r2, r3, #1
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	699b      	ldr	r3, [r3, #24]
 80050d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80050d8:	693b      	ldr	r3, [r7, #16]
 80050da:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80050de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	011b      	lsls	r3, r3, #4
 80050e4:	693a      	ldr	r2, [r7, #16]
 80050e6:	4313      	orrs	r3, r2
 80050e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80050ea:	697b      	ldr	r3, [r7, #20]
 80050ec:	f023 030a 	bic.w	r3, r3, #10
 80050f0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80050f2:	697a      	ldr	r2, [r7, #20]
 80050f4:	68bb      	ldr	r3, [r7, #8]
 80050f6:	4313      	orrs	r3, r2
 80050f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	693a      	ldr	r2, [r7, #16]
 80050fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	697a      	ldr	r2, [r7, #20]
 8005104:	621a      	str	r2, [r3, #32]
}
 8005106:	bf00      	nop
 8005108:	371c      	adds	r7, #28
 800510a:	46bd      	mov	sp, r7
 800510c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005110:	4770      	bx	lr

08005112 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005112:	b480      	push	{r7}
 8005114:	b087      	sub	sp, #28
 8005116:	af00      	add	r7, sp, #0
 8005118:	60f8      	str	r0, [r7, #12]
 800511a:	60b9      	str	r1, [r7, #8]
 800511c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	6a1b      	ldr	r3, [r3, #32]
 8005122:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	6a1b      	ldr	r3, [r3, #32]
 8005128:	f023 0210 	bic.w	r2, r3, #16
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	699b      	ldr	r3, [r3, #24]
 8005134:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005136:	693b      	ldr	r3, [r7, #16]
 8005138:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800513c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	031b      	lsls	r3, r3, #12
 8005142:	693a      	ldr	r2, [r7, #16]
 8005144:	4313      	orrs	r3, r2
 8005146:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005148:	697b      	ldr	r3, [r7, #20]
 800514a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800514e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005150:	68bb      	ldr	r3, [r7, #8]
 8005152:	011b      	lsls	r3, r3, #4
 8005154:	697a      	ldr	r2, [r7, #20]
 8005156:	4313      	orrs	r3, r2
 8005158:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	693a      	ldr	r2, [r7, #16]
 800515e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	697a      	ldr	r2, [r7, #20]
 8005164:	621a      	str	r2, [r3, #32]
}
 8005166:	bf00      	nop
 8005168:	371c      	adds	r7, #28
 800516a:	46bd      	mov	sp, r7
 800516c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005170:	4770      	bx	lr

08005172 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005172:	b480      	push	{r7}
 8005174:	b085      	sub	sp, #20
 8005176:	af00      	add	r7, sp, #0
 8005178:	6078      	str	r0, [r7, #4]
 800517a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	689b      	ldr	r3, [r3, #8]
 8005180:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8005188:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800518c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800518e:	683a      	ldr	r2, [r7, #0]
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	4313      	orrs	r3, r2
 8005194:	f043 0307 	orr.w	r3, r3, #7
 8005198:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	68fa      	ldr	r2, [r7, #12]
 800519e:	609a      	str	r2, [r3, #8]
}
 80051a0:	bf00      	nop
 80051a2:	3714      	adds	r7, #20
 80051a4:	46bd      	mov	sp, r7
 80051a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051aa:	4770      	bx	lr

080051ac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80051ac:	b480      	push	{r7}
 80051ae:	b087      	sub	sp, #28
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	60f8      	str	r0, [r7, #12]
 80051b4:	60b9      	str	r1, [r7, #8]
 80051b6:	607a      	str	r2, [r7, #4]
 80051b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	689b      	ldr	r3, [r3, #8]
 80051be:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80051c0:	697b      	ldr	r3, [r7, #20]
 80051c2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80051c6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	021a      	lsls	r2, r3, #8
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	431a      	orrs	r2, r3
 80051d0:	68bb      	ldr	r3, [r7, #8]
 80051d2:	4313      	orrs	r3, r2
 80051d4:	697a      	ldr	r2, [r7, #20]
 80051d6:	4313      	orrs	r3, r2
 80051d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	697a      	ldr	r2, [r7, #20]
 80051de:	609a      	str	r2, [r3, #8]
}
 80051e0:	bf00      	nop
 80051e2:	371c      	adds	r7, #28
 80051e4:	46bd      	mov	sp, r7
 80051e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ea:	4770      	bx	lr

080051ec <HAL_TIMEx_HallSensor_Init>:
  * @param  htim TIM Hall Sensor Interface handle
  * @param  sConfig TIM Hall Sensor configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Init(TIM_HandleTypeDef *htim, const TIM_HallSensor_InitTypeDef *sConfig)
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b08a      	sub	sp, #40	@ 0x28
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
 80051f4:	6039      	str	r1, [r7, #0]
  TIM_OC_InitTypeDef OC_Config;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d101      	bne.n	8005200 <HAL_TIMEx_HallSensor_Init+0x14>
  {
    return HAL_ERROR;
 80051fc:	2301      	movs	r3, #1
 80051fe:	e0a0      	b.n	8005342 <HAL_TIMEx_HallSensor_Init+0x156>
  assert_param(IS_TIM_IC_POLARITY(sConfig->IC1Polarity));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005206:	b2db      	uxtb	r3, r3
 8005208:	2b00      	cmp	r3, #0
 800520a:	d106      	bne.n	800521a <HAL_TIMEx_HallSensor_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2200      	movs	r2, #0
 8005210:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->HallSensor_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIMEx_HallSensor_MspInit(htim);
 8005214:	6878      	ldr	r0, [r7, #4]
 8005216:	f7fc fabb 	bl	8001790 <HAL_TIMEx_HallSensor_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2202      	movs	r2, #2
 800521e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681a      	ldr	r2, [r3, #0]
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	3304      	adds	r3, #4
 800522a:	4619      	mov	r1, r3
 800522c:	4610      	mov	r0, r2
 800522e:	f7ff fb47 	bl	80048c0 <TIM_Base_SetConfig>

  /* Configure the Channel 1 as Input Channel to interface with the three Outputs of the  Hall sensor */
  TIM_TI1_SetConfig(htim->Instance, sConfig->IC1Polarity, TIM_ICSELECTION_TRC, sConfig->IC1Filter);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6818      	ldr	r0, [r3, #0]
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	6819      	ldr	r1, [r3, #0]
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	689b      	ldr	r3, [r3, #8]
 800523e:	2203      	movs	r2, #3
 8005240:	f7ff fed0 	bl	8004fe4 <TIM_TI1_SetConfig>

  /* Reset the IC1PSC Bits */
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	699a      	ldr	r2, [r3, #24]
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f022 020c 	bic.w	r2, r2, #12
 8005252:	619a      	str	r2, [r3, #24]
  /* Set the IC1PSC value */
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	6999      	ldr	r1, [r3, #24]
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	685a      	ldr	r2, [r3, #4]
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	430a      	orrs	r2, r1
 8005264:	619a      	str	r2, [r3, #24]

  /* Enable the Hall sensor interface (XOR function of the three inputs) */
  htim->Instance->CR2 |= TIM_CR2_TI1S;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	685a      	ldr	r2, [r3, #4]
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005274:	605a      	str	r2, [r3, #4]

  /* Select the TIM_TS_TI1F_ED signal as Input trigger for the TIM */
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	689b      	ldr	r3, [r3, #8]
 800527c:	687a      	ldr	r2, [r7, #4]
 800527e:	6812      	ldr	r2, [r2, #0]
 8005280:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8005284:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005288:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_TS_TI1F_ED;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	689a      	ldr	r2, [r3, #8]
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005298:	609a      	str	r2, [r3, #8]

  /* Use the TIM_TS_TI1F_ED signal to reset the TIM counter each edge detection */
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	689b      	ldr	r3, [r3, #8]
 80052a0:	687a      	ldr	r2, [r7, #4]
 80052a2:	6812      	ldr	r2, [r2, #0]
 80052a4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80052a8:	f023 0307 	bic.w	r3, r3, #7
 80052ac:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_SLAVEMODE_RESET;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	689a      	ldr	r2, [r3, #8]
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f042 0204 	orr.w	r2, r2, #4
 80052bc:	609a      	str	r2, [r3, #8]

  /* Program channel 2 in PWM 2 mode with the desired Commutation_Delay*/
  OC_Config.OCFastMode = TIM_OCFAST_DISABLE;
 80052be:	2300      	movs	r3, #0
 80052c0:	61fb      	str	r3, [r7, #28]
  OC_Config.OCIdleState = TIM_OCIDLESTATE_RESET;
 80052c2:	2300      	movs	r3, #0
 80052c4:	623b      	str	r3, [r7, #32]
  OC_Config.OCMode = TIM_OCMODE_PWM2;
 80052c6:	2370      	movs	r3, #112	@ 0x70
 80052c8:	60fb      	str	r3, [r7, #12]
  OC_Config.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80052ca:	2300      	movs	r3, #0
 80052cc:	627b      	str	r3, [r7, #36]	@ 0x24
  OC_Config.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80052ce:	2300      	movs	r3, #0
 80052d0:	61bb      	str	r3, [r7, #24]
  OC_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
 80052d2:	2300      	movs	r3, #0
 80052d4:	617b      	str	r3, [r7, #20]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	68db      	ldr	r3, [r3, #12]
 80052da:	613b      	str	r3, [r7, #16]

  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f107 020c 	add.w	r2, r7, #12
 80052e4:	4611      	mov	r1, r2
 80052e6:	4618      	mov	r0, r3
 80052e8:	f7ff fc16 	bl	8004b18 <TIM_OC2_SetConfig>

  /* Select OC2REF as trigger output on TRGO: write the MMS bits in the TIMx_CR2
    register to 101 */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	685b      	ldr	r3, [r3, #4]
 80052f2:	687a      	ldr	r2, [r7, #4]
 80052f4:	6812      	ldr	r2, [r2, #0]
 80052f6:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80052fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80052fe:	6053      	str	r3, [r2, #4]
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	685a      	ldr	r2, [r3, #4]
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f042 0250 	orr.w	r2, r2, #80	@ 0x50
 800530e:	605a      	str	r2, [r3, #4]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2201      	movs	r2, #1
 8005314:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2201      	movs	r2, #1
 800531c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2201      	movs	r2, #1
 8005324:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2201      	movs	r2, #1
 800532c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2201      	movs	r2, #1
 8005334:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2201      	movs	r2, #1
 800533c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005340:	2300      	movs	r3, #0
}
 8005342:	4618      	mov	r0, r3
 8005344:	3728      	adds	r7, #40	@ 0x28
 8005346:	46bd      	mov	sp, r7
 8005348:	bd80      	pop	{r7, pc}
	...

0800534c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800534c:	b480      	push	{r7}
 800534e:	b085      	sub	sp, #20
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
 8005354:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800535c:	2b01      	cmp	r3, #1
 800535e:	d101      	bne.n	8005364 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005360:	2302      	movs	r3, #2
 8005362:	e065      	b.n	8005430 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2201      	movs	r2, #1
 8005368:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2202      	movs	r2, #2
 8005370:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	685b      	ldr	r3, [r3, #4]
 800537a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	689b      	ldr	r3, [r3, #8]
 8005382:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	4a2c      	ldr	r2, [pc, #176]	@ (800543c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d004      	beq.n	8005398 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	4a2b      	ldr	r2, [pc, #172]	@ (8005440 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005394:	4293      	cmp	r3, r2
 8005396:	d108      	bne.n	80053aa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800539e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	685b      	ldr	r3, [r3, #4]
 80053a4:	68fa      	ldr	r2, [r7, #12]
 80053a6:	4313      	orrs	r3, r2
 80053a8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80053b0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80053b4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	68fa      	ldr	r2, [r7, #12]
 80053bc:	4313      	orrs	r3, r2
 80053be:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	68fa      	ldr	r2, [r7, #12]
 80053c6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4a1b      	ldr	r2, [pc, #108]	@ (800543c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d018      	beq.n	8005404 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80053da:	d013      	beq.n	8005404 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	4a18      	ldr	r2, [pc, #96]	@ (8005444 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d00e      	beq.n	8005404 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	4a17      	ldr	r2, [pc, #92]	@ (8005448 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d009      	beq.n	8005404 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	4a12      	ldr	r2, [pc, #72]	@ (8005440 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d004      	beq.n	8005404 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	4a13      	ldr	r2, [pc, #76]	@ (800544c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005400:	4293      	cmp	r3, r2
 8005402:	d10c      	bne.n	800541e <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005404:	68bb      	ldr	r3, [r7, #8]
 8005406:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800540a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	689b      	ldr	r3, [r3, #8]
 8005410:	68ba      	ldr	r2, [r7, #8]
 8005412:	4313      	orrs	r3, r2
 8005414:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	68ba      	ldr	r2, [r7, #8]
 800541c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2201      	movs	r2, #1
 8005422:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2200      	movs	r2, #0
 800542a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800542e:	2300      	movs	r3, #0
}
 8005430:	4618      	mov	r0, r3
 8005432:	3714      	adds	r7, #20
 8005434:	46bd      	mov	sp, r7
 8005436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543a:	4770      	bx	lr
 800543c:	40012c00 	.word	0x40012c00
 8005440:	40013400 	.word	0x40013400
 8005444:	40000400 	.word	0x40000400
 8005448:	40000800 	.word	0x40000800
 800544c:	40014000 	.word	0x40014000

08005450 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005450:	b480      	push	{r7}
 8005452:	b085      	sub	sp, #20
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
 8005458:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800545a:	2300      	movs	r3, #0
 800545c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005464:	2b01      	cmp	r3, #1
 8005466:	d101      	bne.n	800546c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005468:	2302      	movs	r3, #2
 800546a:	e073      	b.n	8005554 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2201      	movs	r2, #1
 8005470:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	68db      	ldr	r3, [r3, #12]
 800547e:	4313      	orrs	r3, r2
 8005480:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	689b      	ldr	r3, [r3, #8]
 800548c:	4313      	orrs	r3, r2
 800548e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	685b      	ldr	r3, [r3, #4]
 800549a:	4313      	orrs	r3, r2
 800549c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	4313      	orrs	r3, r2
 80054aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	691b      	ldr	r3, [r3, #16]
 80054b6:	4313      	orrs	r3, r2
 80054b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	695b      	ldr	r3, [r3, #20]
 80054c4:	4313      	orrs	r3, r2
 80054c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054d2:	4313      	orrs	r3, r2
 80054d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	699b      	ldr	r3, [r3, #24]
 80054e0:	041b      	lsls	r3, r3, #16
 80054e2:	4313      	orrs	r3, r2
 80054e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	69db      	ldr	r3, [r3, #28]
 80054f0:	4313      	orrs	r3, r2
 80054f2:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	4a19      	ldr	r2, [pc, #100]	@ (8005560 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d004      	beq.n	8005508 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	4a18      	ldr	r2, [pc, #96]	@ (8005564 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8005504:	4293      	cmp	r3, r2
 8005506:	d11c      	bne.n	8005542 <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005512:	051b      	lsls	r3, r3, #20
 8005514:	4313      	orrs	r3, r2
 8005516:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	6a1b      	ldr	r3, [r3, #32]
 8005522:	4313      	orrs	r3, r2
 8005524:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005530:	4313      	orrs	r3, r2
 8005532:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800553e:	4313      	orrs	r3, r2
 8005540:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	68fa      	ldr	r2, [r7, #12]
 8005548:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2200      	movs	r2, #0
 800554e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005552:	2300      	movs	r3, #0
}
 8005554:	4618      	mov	r0, r3
 8005556:	3714      	adds	r7, #20
 8005558:	46bd      	mov	sp, r7
 800555a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555e:	4770      	bx	lr
 8005560:	40012c00 	.word	0x40012c00
 8005564:	40013400 	.word	0x40013400

08005568 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b082      	sub	sp, #8
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d101      	bne.n	800557a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005576:	2301      	movs	r3, #1
 8005578:	e042      	b.n	8005600 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005580:	2b00      	cmp	r3, #0
 8005582:	d106      	bne.n	8005592 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2200      	movs	r2, #0
 8005588:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800558c:	6878      	ldr	r0, [r7, #4]
 800558e:	f7fc faa3 	bl	8001ad8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2224      	movs	r2, #36	@ 0x24
 8005596:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	681a      	ldr	r2, [r3, #0]
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f022 0201 	bic.w	r2, r2, #1
 80055a8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d002      	beq.n	80055b8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80055b2:	6878      	ldr	r0, [r7, #4]
 80055b4:	f000 faf4 	bl	8005ba0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80055b8:	6878      	ldr	r0, [r7, #4]
 80055ba:	f000 f825 	bl	8005608 <UART_SetConfig>
 80055be:	4603      	mov	r3, r0
 80055c0:	2b01      	cmp	r3, #1
 80055c2:	d101      	bne.n	80055c8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80055c4:	2301      	movs	r3, #1
 80055c6:	e01b      	b.n	8005600 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	685a      	ldr	r2, [r3, #4]
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80055d6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	689a      	ldr	r2, [r3, #8]
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80055e6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	681a      	ldr	r2, [r3, #0]
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f042 0201 	orr.w	r2, r2, #1
 80055f6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80055f8:	6878      	ldr	r0, [r7, #4]
 80055fa:	f000 fb73 	bl	8005ce4 <UART_CheckIdleState>
 80055fe:	4603      	mov	r3, r0
}
 8005600:	4618      	mov	r0, r3
 8005602:	3708      	adds	r7, #8
 8005604:	46bd      	mov	sp, r7
 8005606:	bd80      	pop	{r7, pc}

08005608 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005608:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800560c:	b08c      	sub	sp, #48	@ 0x30
 800560e:	af00      	add	r7, sp, #0
 8005610:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005612:	2300      	movs	r3, #0
 8005614:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005618:	697b      	ldr	r3, [r7, #20]
 800561a:	689a      	ldr	r2, [r3, #8]
 800561c:	697b      	ldr	r3, [r7, #20]
 800561e:	691b      	ldr	r3, [r3, #16]
 8005620:	431a      	orrs	r2, r3
 8005622:	697b      	ldr	r3, [r7, #20]
 8005624:	695b      	ldr	r3, [r3, #20]
 8005626:	431a      	orrs	r2, r3
 8005628:	697b      	ldr	r3, [r7, #20]
 800562a:	69db      	ldr	r3, [r3, #28]
 800562c:	4313      	orrs	r3, r2
 800562e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005630:	697b      	ldr	r3, [r7, #20]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	681a      	ldr	r2, [r3, #0]
 8005636:	4bab      	ldr	r3, [pc, #684]	@ (80058e4 <UART_SetConfig+0x2dc>)
 8005638:	4013      	ands	r3, r2
 800563a:	697a      	ldr	r2, [r7, #20]
 800563c:	6812      	ldr	r2, [r2, #0]
 800563e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005640:	430b      	orrs	r3, r1
 8005642:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005644:	697b      	ldr	r3, [r7, #20]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	685b      	ldr	r3, [r3, #4]
 800564a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800564e:	697b      	ldr	r3, [r7, #20]
 8005650:	68da      	ldr	r2, [r3, #12]
 8005652:	697b      	ldr	r3, [r7, #20]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	430a      	orrs	r2, r1
 8005658:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800565a:	697b      	ldr	r3, [r7, #20]
 800565c:	699b      	ldr	r3, [r3, #24]
 800565e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005660:	697b      	ldr	r3, [r7, #20]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	4aa0      	ldr	r2, [pc, #640]	@ (80058e8 <UART_SetConfig+0x2e0>)
 8005666:	4293      	cmp	r3, r2
 8005668:	d004      	beq.n	8005674 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800566a:	697b      	ldr	r3, [r7, #20]
 800566c:	6a1b      	ldr	r3, [r3, #32]
 800566e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005670:	4313      	orrs	r3, r2
 8005672:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005674:	697b      	ldr	r3, [r7, #20]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	689b      	ldr	r3, [r3, #8]
 800567a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800567e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8005682:	697a      	ldr	r2, [r7, #20]
 8005684:	6812      	ldr	r2, [r2, #0]
 8005686:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005688:	430b      	orrs	r3, r1
 800568a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800568c:	697b      	ldr	r3, [r7, #20]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005692:	f023 010f 	bic.w	r1, r3, #15
 8005696:	697b      	ldr	r3, [r7, #20]
 8005698:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800569a:	697b      	ldr	r3, [r7, #20]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	430a      	orrs	r2, r1
 80056a0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80056a2:	697b      	ldr	r3, [r7, #20]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	4a91      	ldr	r2, [pc, #580]	@ (80058ec <UART_SetConfig+0x2e4>)
 80056a8:	4293      	cmp	r3, r2
 80056aa:	d125      	bne.n	80056f8 <UART_SetConfig+0xf0>
 80056ac:	4b90      	ldr	r3, [pc, #576]	@ (80058f0 <UART_SetConfig+0x2e8>)
 80056ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056b2:	f003 0303 	and.w	r3, r3, #3
 80056b6:	2b03      	cmp	r3, #3
 80056b8:	d81a      	bhi.n	80056f0 <UART_SetConfig+0xe8>
 80056ba:	a201      	add	r2, pc, #4	@ (adr r2, 80056c0 <UART_SetConfig+0xb8>)
 80056bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056c0:	080056d1 	.word	0x080056d1
 80056c4:	080056e1 	.word	0x080056e1
 80056c8:	080056d9 	.word	0x080056d9
 80056cc:	080056e9 	.word	0x080056e9
 80056d0:	2301      	movs	r3, #1
 80056d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80056d6:	e0d6      	b.n	8005886 <UART_SetConfig+0x27e>
 80056d8:	2302      	movs	r3, #2
 80056da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80056de:	e0d2      	b.n	8005886 <UART_SetConfig+0x27e>
 80056e0:	2304      	movs	r3, #4
 80056e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80056e6:	e0ce      	b.n	8005886 <UART_SetConfig+0x27e>
 80056e8:	2308      	movs	r3, #8
 80056ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80056ee:	e0ca      	b.n	8005886 <UART_SetConfig+0x27e>
 80056f0:	2310      	movs	r3, #16
 80056f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80056f6:	e0c6      	b.n	8005886 <UART_SetConfig+0x27e>
 80056f8:	697b      	ldr	r3, [r7, #20]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	4a7d      	ldr	r2, [pc, #500]	@ (80058f4 <UART_SetConfig+0x2ec>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	d138      	bne.n	8005774 <UART_SetConfig+0x16c>
 8005702:	4b7b      	ldr	r3, [pc, #492]	@ (80058f0 <UART_SetConfig+0x2e8>)
 8005704:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005708:	f003 030c 	and.w	r3, r3, #12
 800570c:	2b0c      	cmp	r3, #12
 800570e:	d82d      	bhi.n	800576c <UART_SetConfig+0x164>
 8005710:	a201      	add	r2, pc, #4	@ (adr r2, 8005718 <UART_SetConfig+0x110>)
 8005712:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005716:	bf00      	nop
 8005718:	0800574d 	.word	0x0800574d
 800571c:	0800576d 	.word	0x0800576d
 8005720:	0800576d 	.word	0x0800576d
 8005724:	0800576d 	.word	0x0800576d
 8005728:	0800575d 	.word	0x0800575d
 800572c:	0800576d 	.word	0x0800576d
 8005730:	0800576d 	.word	0x0800576d
 8005734:	0800576d 	.word	0x0800576d
 8005738:	08005755 	.word	0x08005755
 800573c:	0800576d 	.word	0x0800576d
 8005740:	0800576d 	.word	0x0800576d
 8005744:	0800576d 	.word	0x0800576d
 8005748:	08005765 	.word	0x08005765
 800574c:	2300      	movs	r3, #0
 800574e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005752:	e098      	b.n	8005886 <UART_SetConfig+0x27e>
 8005754:	2302      	movs	r3, #2
 8005756:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800575a:	e094      	b.n	8005886 <UART_SetConfig+0x27e>
 800575c:	2304      	movs	r3, #4
 800575e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005762:	e090      	b.n	8005886 <UART_SetConfig+0x27e>
 8005764:	2308      	movs	r3, #8
 8005766:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800576a:	e08c      	b.n	8005886 <UART_SetConfig+0x27e>
 800576c:	2310      	movs	r3, #16
 800576e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005772:	e088      	b.n	8005886 <UART_SetConfig+0x27e>
 8005774:	697b      	ldr	r3, [r7, #20]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	4a5f      	ldr	r2, [pc, #380]	@ (80058f8 <UART_SetConfig+0x2f0>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d125      	bne.n	80057ca <UART_SetConfig+0x1c2>
 800577e:	4b5c      	ldr	r3, [pc, #368]	@ (80058f0 <UART_SetConfig+0x2e8>)
 8005780:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005784:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005788:	2b30      	cmp	r3, #48	@ 0x30
 800578a:	d016      	beq.n	80057ba <UART_SetConfig+0x1b2>
 800578c:	2b30      	cmp	r3, #48	@ 0x30
 800578e:	d818      	bhi.n	80057c2 <UART_SetConfig+0x1ba>
 8005790:	2b20      	cmp	r3, #32
 8005792:	d00a      	beq.n	80057aa <UART_SetConfig+0x1a2>
 8005794:	2b20      	cmp	r3, #32
 8005796:	d814      	bhi.n	80057c2 <UART_SetConfig+0x1ba>
 8005798:	2b00      	cmp	r3, #0
 800579a:	d002      	beq.n	80057a2 <UART_SetConfig+0x19a>
 800579c:	2b10      	cmp	r3, #16
 800579e:	d008      	beq.n	80057b2 <UART_SetConfig+0x1aa>
 80057a0:	e00f      	b.n	80057c2 <UART_SetConfig+0x1ba>
 80057a2:	2300      	movs	r3, #0
 80057a4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80057a8:	e06d      	b.n	8005886 <UART_SetConfig+0x27e>
 80057aa:	2302      	movs	r3, #2
 80057ac:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80057b0:	e069      	b.n	8005886 <UART_SetConfig+0x27e>
 80057b2:	2304      	movs	r3, #4
 80057b4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80057b8:	e065      	b.n	8005886 <UART_SetConfig+0x27e>
 80057ba:	2308      	movs	r3, #8
 80057bc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80057c0:	e061      	b.n	8005886 <UART_SetConfig+0x27e>
 80057c2:	2310      	movs	r3, #16
 80057c4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80057c8:	e05d      	b.n	8005886 <UART_SetConfig+0x27e>
 80057ca:	697b      	ldr	r3, [r7, #20]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	4a4b      	ldr	r2, [pc, #300]	@ (80058fc <UART_SetConfig+0x2f4>)
 80057d0:	4293      	cmp	r3, r2
 80057d2:	d125      	bne.n	8005820 <UART_SetConfig+0x218>
 80057d4:	4b46      	ldr	r3, [pc, #280]	@ (80058f0 <UART_SetConfig+0x2e8>)
 80057d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057da:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80057de:	2bc0      	cmp	r3, #192	@ 0xc0
 80057e0:	d016      	beq.n	8005810 <UART_SetConfig+0x208>
 80057e2:	2bc0      	cmp	r3, #192	@ 0xc0
 80057e4:	d818      	bhi.n	8005818 <UART_SetConfig+0x210>
 80057e6:	2b80      	cmp	r3, #128	@ 0x80
 80057e8:	d00a      	beq.n	8005800 <UART_SetConfig+0x1f8>
 80057ea:	2b80      	cmp	r3, #128	@ 0x80
 80057ec:	d814      	bhi.n	8005818 <UART_SetConfig+0x210>
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d002      	beq.n	80057f8 <UART_SetConfig+0x1f0>
 80057f2:	2b40      	cmp	r3, #64	@ 0x40
 80057f4:	d008      	beq.n	8005808 <UART_SetConfig+0x200>
 80057f6:	e00f      	b.n	8005818 <UART_SetConfig+0x210>
 80057f8:	2300      	movs	r3, #0
 80057fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80057fe:	e042      	b.n	8005886 <UART_SetConfig+0x27e>
 8005800:	2302      	movs	r3, #2
 8005802:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005806:	e03e      	b.n	8005886 <UART_SetConfig+0x27e>
 8005808:	2304      	movs	r3, #4
 800580a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800580e:	e03a      	b.n	8005886 <UART_SetConfig+0x27e>
 8005810:	2308      	movs	r3, #8
 8005812:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005816:	e036      	b.n	8005886 <UART_SetConfig+0x27e>
 8005818:	2310      	movs	r3, #16
 800581a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800581e:	e032      	b.n	8005886 <UART_SetConfig+0x27e>
 8005820:	697b      	ldr	r3, [r7, #20]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	4a30      	ldr	r2, [pc, #192]	@ (80058e8 <UART_SetConfig+0x2e0>)
 8005826:	4293      	cmp	r3, r2
 8005828:	d12a      	bne.n	8005880 <UART_SetConfig+0x278>
 800582a:	4b31      	ldr	r3, [pc, #196]	@ (80058f0 <UART_SetConfig+0x2e8>)
 800582c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005830:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005834:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005838:	d01a      	beq.n	8005870 <UART_SetConfig+0x268>
 800583a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800583e:	d81b      	bhi.n	8005878 <UART_SetConfig+0x270>
 8005840:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005844:	d00c      	beq.n	8005860 <UART_SetConfig+0x258>
 8005846:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800584a:	d815      	bhi.n	8005878 <UART_SetConfig+0x270>
 800584c:	2b00      	cmp	r3, #0
 800584e:	d003      	beq.n	8005858 <UART_SetConfig+0x250>
 8005850:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005854:	d008      	beq.n	8005868 <UART_SetConfig+0x260>
 8005856:	e00f      	b.n	8005878 <UART_SetConfig+0x270>
 8005858:	2300      	movs	r3, #0
 800585a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800585e:	e012      	b.n	8005886 <UART_SetConfig+0x27e>
 8005860:	2302      	movs	r3, #2
 8005862:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005866:	e00e      	b.n	8005886 <UART_SetConfig+0x27e>
 8005868:	2304      	movs	r3, #4
 800586a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800586e:	e00a      	b.n	8005886 <UART_SetConfig+0x27e>
 8005870:	2308      	movs	r3, #8
 8005872:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005876:	e006      	b.n	8005886 <UART_SetConfig+0x27e>
 8005878:	2310      	movs	r3, #16
 800587a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800587e:	e002      	b.n	8005886 <UART_SetConfig+0x27e>
 8005880:	2310      	movs	r3, #16
 8005882:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005886:	697b      	ldr	r3, [r7, #20]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	4a17      	ldr	r2, [pc, #92]	@ (80058e8 <UART_SetConfig+0x2e0>)
 800588c:	4293      	cmp	r3, r2
 800588e:	f040 80a8 	bne.w	80059e2 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005892:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005896:	2b08      	cmp	r3, #8
 8005898:	d834      	bhi.n	8005904 <UART_SetConfig+0x2fc>
 800589a:	a201      	add	r2, pc, #4	@ (adr r2, 80058a0 <UART_SetConfig+0x298>)
 800589c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058a0:	080058c5 	.word	0x080058c5
 80058a4:	08005905 	.word	0x08005905
 80058a8:	080058cd 	.word	0x080058cd
 80058ac:	08005905 	.word	0x08005905
 80058b0:	080058d3 	.word	0x080058d3
 80058b4:	08005905 	.word	0x08005905
 80058b8:	08005905 	.word	0x08005905
 80058bc:	08005905 	.word	0x08005905
 80058c0:	080058db 	.word	0x080058db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80058c4:	f7fe fa2e 	bl	8003d24 <HAL_RCC_GetPCLK1Freq>
 80058c8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80058ca:	e021      	b.n	8005910 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80058cc:	4b0c      	ldr	r3, [pc, #48]	@ (8005900 <UART_SetConfig+0x2f8>)
 80058ce:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80058d0:	e01e      	b.n	8005910 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80058d2:	f7fe f9b9 	bl	8003c48 <HAL_RCC_GetSysClockFreq>
 80058d6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80058d8:	e01a      	b.n	8005910 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80058da:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80058de:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80058e0:	e016      	b.n	8005910 <UART_SetConfig+0x308>
 80058e2:	bf00      	nop
 80058e4:	cfff69f3 	.word	0xcfff69f3
 80058e8:	40008000 	.word	0x40008000
 80058ec:	40013800 	.word	0x40013800
 80058f0:	40021000 	.word	0x40021000
 80058f4:	40004400 	.word	0x40004400
 80058f8:	40004800 	.word	0x40004800
 80058fc:	40004c00 	.word	0x40004c00
 8005900:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8005904:	2300      	movs	r3, #0
 8005906:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005908:	2301      	movs	r3, #1
 800590a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800590e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005910:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005912:	2b00      	cmp	r3, #0
 8005914:	f000 812a 	beq.w	8005b6c <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005918:	697b      	ldr	r3, [r7, #20]
 800591a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800591c:	4a9e      	ldr	r2, [pc, #632]	@ (8005b98 <UART_SetConfig+0x590>)
 800591e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005922:	461a      	mov	r2, r3
 8005924:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005926:	fbb3 f3f2 	udiv	r3, r3, r2
 800592a:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800592c:	697b      	ldr	r3, [r7, #20]
 800592e:	685a      	ldr	r2, [r3, #4]
 8005930:	4613      	mov	r3, r2
 8005932:	005b      	lsls	r3, r3, #1
 8005934:	4413      	add	r3, r2
 8005936:	69ba      	ldr	r2, [r7, #24]
 8005938:	429a      	cmp	r2, r3
 800593a:	d305      	bcc.n	8005948 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800593c:	697b      	ldr	r3, [r7, #20]
 800593e:	685b      	ldr	r3, [r3, #4]
 8005940:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005942:	69ba      	ldr	r2, [r7, #24]
 8005944:	429a      	cmp	r2, r3
 8005946:	d903      	bls.n	8005950 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8005948:	2301      	movs	r3, #1
 800594a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800594e:	e10d      	b.n	8005b6c <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005950:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005952:	2200      	movs	r2, #0
 8005954:	60bb      	str	r3, [r7, #8]
 8005956:	60fa      	str	r2, [r7, #12]
 8005958:	697b      	ldr	r3, [r7, #20]
 800595a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800595c:	4a8e      	ldr	r2, [pc, #568]	@ (8005b98 <UART_SetConfig+0x590>)
 800595e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005962:	b29b      	uxth	r3, r3
 8005964:	2200      	movs	r2, #0
 8005966:	603b      	str	r3, [r7, #0]
 8005968:	607a      	str	r2, [r7, #4]
 800596a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800596e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005972:	f7fb f86f 	bl	8000a54 <__aeabi_uldivmod>
 8005976:	4602      	mov	r2, r0
 8005978:	460b      	mov	r3, r1
 800597a:	4610      	mov	r0, r2
 800597c:	4619      	mov	r1, r3
 800597e:	f04f 0200 	mov.w	r2, #0
 8005982:	f04f 0300 	mov.w	r3, #0
 8005986:	020b      	lsls	r3, r1, #8
 8005988:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800598c:	0202      	lsls	r2, r0, #8
 800598e:	6979      	ldr	r1, [r7, #20]
 8005990:	6849      	ldr	r1, [r1, #4]
 8005992:	0849      	lsrs	r1, r1, #1
 8005994:	2000      	movs	r0, #0
 8005996:	460c      	mov	r4, r1
 8005998:	4605      	mov	r5, r0
 800599a:	eb12 0804 	adds.w	r8, r2, r4
 800599e:	eb43 0905 	adc.w	r9, r3, r5
 80059a2:	697b      	ldr	r3, [r7, #20]
 80059a4:	685b      	ldr	r3, [r3, #4]
 80059a6:	2200      	movs	r2, #0
 80059a8:	469a      	mov	sl, r3
 80059aa:	4693      	mov	fp, r2
 80059ac:	4652      	mov	r2, sl
 80059ae:	465b      	mov	r3, fp
 80059b0:	4640      	mov	r0, r8
 80059b2:	4649      	mov	r1, r9
 80059b4:	f7fb f84e 	bl	8000a54 <__aeabi_uldivmod>
 80059b8:	4602      	mov	r2, r0
 80059ba:	460b      	mov	r3, r1
 80059bc:	4613      	mov	r3, r2
 80059be:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80059c0:	6a3b      	ldr	r3, [r7, #32]
 80059c2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80059c6:	d308      	bcc.n	80059da <UART_SetConfig+0x3d2>
 80059c8:	6a3b      	ldr	r3, [r7, #32]
 80059ca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80059ce:	d204      	bcs.n	80059da <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 80059d0:	697b      	ldr	r3, [r7, #20]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	6a3a      	ldr	r2, [r7, #32]
 80059d6:	60da      	str	r2, [r3, #12]
 80059d8:	e0c8      	b.n	8005b6c <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 80059da:	2301      	movs	r3, #1
 80059dc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80059e0:	e0c4      	b.n	8005b6c <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80059e2:	697b      	ldr	r3, [r7, #20]
 80059e4:	69db      	ldr	r3, [r3, #28]
 80059e6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80059ea:	d167      	bne.n	8005abc <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 80059ec:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80059f0:	2b08      	cmp	r3, #8
 80059f2:	d828      	bhi.n	8005a46 <UART_SetConfig+0x43e>
 80059f4:	a201      	add	r2, pc, #4	@ (adr r2, 80059fc <UART_SetConfig+0x3f4>)
 80059f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059fa:	bf00      	nop
 80059fc:	08005a21 	.word	0x08005a21
 8005a00:	08005a29 	.word	0x08005a29
 8005a04:	08005a31 	.word	0x08005a31
 8005a08:	08005a47 	.word	0x08005a47
 8005a0c:	08005a37 	.word	0x08005a37
 8005a10:	08005a47 	.word	0x08005a47
 8005a14:	08005a47 	.word	0x08005a47
 8005a18:	08005a47 	.word	0x08005a47
 8005a1c:	08005a3f 	.word	0x08005a3f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a20:	f7fe f980 	bl	8003d24 <HAL_RCC_GetPCLK1Freq>
 8005a24:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005a26:	e014      	b.n	8005a52 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005a28:	f7fe f992 	bl	8003d50 <HAL_RCC_GetPCLK2Freq>
 8005a2c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005a2e:	e010      	b.n	8005a52 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005a30:	4b5a      	ldr	r3, [pc, #360]	@ (8005b9c <UART_SetConfig+0x594>)
 8005a32:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005a34:	e00d      	b.n	8005a52 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005a36:	f7fe f907 	bl	8003c48 <HAL_RCC_GetSysClockFreq>
 8005a3a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005a3c:	e009      	b.n	8005a52 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a3e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005a42:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005a44:	e005      	b.n	8005a52 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8005a46:	2300      	movs	r3, #0
 8005a48:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005a4a:	2301      	movs	r3, #1
 8005a4c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005a50:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005a52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	f000 8089 	beq.w	8005b6c <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005a5a:	697b      	ldr	r3, [r7, #20]
 8005a5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a5e:	4a4e      	ldr	r2, [pc, #312]	@ (8005b98 <UART_SetConfig+0x590>)
 8005a60:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005a64:	461a      	mov	r2, r3
 8005a66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a68:	fbb3 f3f2 	udiv	r3, r3, r2
 8005a6c:	005a      	lsls	r2, r3, #1
 8005a6e:	697b      	ldr	r3, [r7, #20]
 8005a70:	685b      	ldr	r3, [r3, #4]
 8005a72:	085b      	lsrs	r3, r3, #1
 8005a74:	441a      	add	r2, r3
 8005a76:	697b      	ldr	r3, [r7, #20]
 8005a78:	685b      	ldr	r3, [r3, #4]
 8005a7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a7e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005a80:	6a3b      	ldr	r3, [r7, #32]
 8005a82:	2b0f      	cmp	r3, #15
 8005a84:	d916      	bls.n	8005ab4 <UART_SetConfig+0x4ac>
 8005a86:	6a3b      	ldr	r3, [r7, #32]
 8005a88:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005a8c:	d212      	bcs.n	8005ab4 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005a8e:	6a3b      	ldr	r3, [r7, #32]
 8005a90:	b29b      	uxth	r3, r3
 8005a92:	f023 030f 	bic.w	r3, r3, #15
 8005a96:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005a98:	6a3b      	ldr	r3, [r7, #32]
 8005a9a:	085b      	lsrs	r3, r3, #1
 8005a9c:	b29b      	uxth	r3, r3
 8005a9e:	f003 0307 	and.w	r3, r3, #7
 8005aa2:	b29a      	uxth	r2, r3
 8005aa4:	8bfb      	ldrh	r3, [r7, #30]
 8005aa6:	4313      	orrs	r3, r2
 8005aa8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005aaa:	697b      	ldr	r3, [r7, #20]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	8bfa      	ldrh	r2, [r7, #30]
 8005ab0:	60da      	str	r2, [r3, #12]
 8005ab2:	e05b      	b.n	8005b6c <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8005ab4:	2301      	movs	r3, #1
 8005ab6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005aba:	e057      	b.n	8005b6c <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005abc:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005ac0:	2b08      	cmp	r3, #8
 8005ac2:	d828      	bhi.n	8005b16 <UART_SetConfig+0x50e>
 8005ac4:	a201      	add	r2, pc, #4	@ (adr r2, 8005acc <UART_SetConfig+0x4c4>)
 8005ac6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005aca:	bf00      	nop
 8005acc:	08005af1 	.word	0x08005af1
 8005ad0:	08005af9 	.word	0x08005af9
 8005ad4:	08005b01 	.word	0x08005b01
 8005ad8:	08005b17 	.word	0x08005b17
 8005adc:	08005b07 	.word	0x08005b07
 8005ae0:	08005b17 	.word	0x08005b17
 8005ae4:	08005b17 	.word	0x08005b17
 8005ae8:	08005b17 	.word	0x08005b17
 8005aec:	08005b0f 	.word	0x08005b0f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005af0:	f7fe f918 	bl	8003d24 <HAL_RCC_GetPCLK1Freq>
 8005af4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005af6:	e014      	b.n	8005b22 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005af8:	f7fe f92a 	bl	8003d50 <HAL_RCC_GetPCLK2Freq>
 8005afc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005afe:	e010      	b.n	8005b22 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005b00:	4b26      	ldr	r3, [pc, #152]	@ (8005b9c <UART_SetConfig+0x594>)
 8005b02:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005b04:	e00d      	b.n	8005b22 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005b06:	f7fe f89f 	bl	8003c48 <HAL_RCC_GetSysClockFreq>
 8005b0a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005b0c:	e009      	b.n	8005b22 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b0e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005b12:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005b14:	e005      	b.n	8005b22 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8005b16:	2300      	movs	r3, #0
 8005b18:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005b1a:	2301      	movs	r3, #1
 8005b1c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005b20:	bf00      	nop
    }

    if (pclk != 0U)
 8005b22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d021      	beq.n	8005b6c <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005b28:	697b      	ldr	r3, [r7, #20]
 8005b2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b2c:	4a1a      	ldr	r2, [pc, #104]	@ (8005b98 <UART_SetConfig+0x590>)
 8005b2e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005b32:	461a      	mov	r2, r3
 8005b34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b36:	fbb3 f2f2 	udiv	r2, r3, r2
 8005b3a:	697b      	ldr	r3, [r7, #20]
 8005b3c:	685b      	ldr	r3, [r3, #4]
 8005b3e:	085b      	lsrs	r3, r3, #1
 8005b40:	441a      	add	r2, r3
 8005b42:	697b      	ldr	r3, [r7, #20]
 8005b44:	685b      	ldr	r3, [r3, #4]
 8005b46:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b4a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005b4c:	6a3b      	ldr	r3, [r7, #32]
 8005b4e:	2b0f      	cmp	r3, #15
 8005b50:	d909      	bls.n	8005b66 <UART_SetConfig+0x55e>
 8005b52:	6a3b      	ldr	r3, [r7, #32]
 8005b54:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005b58:	d205      	bcs.n	8005b66 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005b5a:	6a3b      	ldr	r3, [r7, #32]
 8005b5c:	b29a      	uxth	r2, r3
 8005b5e:	697b      	ldr	r3, [r7, #20]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	60da      	str	r2, [r3, #12]
 8005b64:	e002      	b.n	8005b6c <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8005b66:	2301      	movs	r3, #1
 8005b68:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005b6c:	697b      	ldr	r3, [r7, #20]
 8005b6e:	2201      	movs	r2, #1
 8005b70:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8005b74:	697b      	ldr	r3, [r7, #20]
 8005b76:	2201      	movs	r2, #1
 8005b78:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005b7c:	697b      	ldr	r3, [r7, #20]
 8005b7e:	2200      	movs	r2, #0
 8005b80:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005b82:	697b      	ldr	r3, [r7, #20]
 8005b84:	2200      	movs	r2, #0
 8005b86:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005b88:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	3730      	adds	r7, #48	@ 0x30
 8005b90:	46bd      	mov	sp, r7
 8005b92:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005b96:	bf00      	nop
 8005b98:	08006840 	.word	0x08006840
 8005b9c:	00f42400 	.word	0x00f42400

08005ba0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005ba0:	b480      	push	{r7}
 8005ba2:	b083      	sub	sp, #12
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bac:	f003 0308 	and.w	r3, r3, #8
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d00a      	beq.n	8005bca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	685b      	ldr	r3, [r3, #4]
 8005bba:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	430a      	orrs	r2, r1
 8005bc8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bce:	f003 0301 	and.w	r3, r3, #1
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d00a      	beq.n	8005bec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	685b      	ldr	r3, [r3, #4]
 8005bdc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	430a      	orrs	r2, r1
 8005bea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bf0:	f003 0302 	and.w	r3, r3, #2
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d00a      	beq.n	8005c0e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	685b      	ldr	r3, [r3, #4]
 8005bfe:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	430a      	orrs	r2, r1
 8005c0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c12:	f003 0304 	and.w	r3, r3, #4
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d00a      	beq.n	8005c30 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	685b      	ldr	r3, [r3, #4]
 8005c20:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	430a      	orrs	r2, r1
 8005c2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c34:	f003 0310 	and.w	r3, r3, #16
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d00a      	beq.n	8005c52 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	689b      	ldr	r3, [r3, #8]
 8005c42:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	430a      	orrs	r2, r1
 8005c50:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c56:	f003 0320 	and.w	r3, r3, #32
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d00a      	beq.n	8005c74 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	689b      	ldr	r3, [r3, #8]
 8005c64:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	430a      	orrs	r2, r1
 8005c72:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d01a      	beq.n	8005cb6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	685b      	ldr	r3, [r3, #4]
 8005c86:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	430a      	orrs	r2, r1
 8005c94:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c9a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005c9e:	d10a      	bne.n	8005cb6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	685b      	ldr	r3, [r3, #4]
 8005ca6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	430a      	orrs	r2, r1
 8005cb4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d00a      	beq.n	8005cd8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	685b      	ldr	r3, [r3, #4]
 8005cc8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	430a      	orrs	r2, r1
 8005cd6:	605a      	str	r2, [r3, #4]
  }
}
 8005cd8:	bf00      	nop
 8005cda:	370c      	adds	r7, #12
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce2:	4770      	bx	lr

08005ce4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005ce4:	b580      	push	{r7, lr}
 8005ce6:	b098      	sub	sp, #96	@ 0x60
 8005ce8:	af02      	add	r7, sp, #8
 8005cea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2200      	movs	r2, #0
 8005cf0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005cf4:	f7fb ffd6 	bl	8001ca4 <HAL_GetTick>
 8005cf8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f003 0308 	and.w	r3, r3, #8
 8005d04:	2b08      	cmp	r3, #8
 8005d06:	d12f      	bne.n	8005d68 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005d08:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005d0c:	9300      	str	r3, [sp, #0]
 8005d0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005d10:	2200      	movs	r2, #0
 8005d12:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005d16:	6878      	ldr	r0, [r7, #4]
 8005d18:	f000 f88e 	bl	8005e38 <UART_WaitOnFlagUntilTimeout>
 8005d1c:	4603      	mov	r3, r0
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d022      	beq.n	8005d68 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d2a:	e853 3f00 	ldrex	r3, [r3]
 8005d2e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005d30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d32:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005d36:	653b      	str	r3, [r7, #80]	@ 0x50
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	461a      	mov	r2, r3
 8005d3e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005d40:	647b      	str	r3, [r7, #68]	@ 0x44
 8005d42:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d44:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005d46:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005d48:	e841 2300 	strex	r3, r2, [r1]
 8005d4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005d4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d1e6      	bne.n	8005d22 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2220      	movs	r2, #32
 8005d58:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2200      	movs	r2, #0
 8005d60:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005d64:	2303      	movs	r3, #3
 8005d66:	e063      	b.n	8005e30 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f003 0304 	and.w	r3, r3, #4
 8005d72:	2b04      	cmp	r3, #4
 8005d74:	d149      	bne.n	8005e0a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005d76:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005d7a:	9300      	str	r3, [sp, #0]
 8005d7c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005d7e:	2200      	movs	r2, #0
 8005d80:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005d84:	6878      	ldr	r0, [r7, #4]
 8005d86:	f000 f857 	bl	8005e38 <UART_WaitOnFlagUntilTimeout>
 8005d8a:	4603      	mov	r3, r0
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d03c      	beq.n	8005e0a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d98:	e853 3f00 	ldrex	r3, [r3]
 8005d9c:	623b      	str	r3, [r7, #32]
   return(result);
 8005d9e:	6a3b      	ldr	r3, [r7, #32]
 8005da0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005da4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	461a      	mov	r2, r3
 8005dac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005dae:	633b      	str	r3, [r7, #48]	@ 0x30
 8005db0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005db2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005db4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005db6:	e841 2300 	strex	r3, r2, [r1]
 8005dba:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005dbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d1e6      	bne.n	8005d90 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	3308      	adds	r3, #8
 8005dc8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dca:	693b      	ldr	r3, [r7, #16]
 8005dcc:	e853 3f00 	ldrex	r3, [r3]
 8005dd0:	60fb      	str	r3, [r7, #12]
   return(result);
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	f023 0301 	bic.w	r3, r3, #1
 8005dd8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	3308      	adds	r3, #8
 8005de0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005de2:	61fa      	str	r2, [r7, #28]
 8005de4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005de6:	69b9      	ldr	r1, [r7, #24]
 8005de8:	69fa      	ldr	r2, [r7, #28]
 8005dea:	e841 2300 	strex	r3, r2, [r1]
 8005dee:	617b      	str	r3, [r7, #20]
   return(result);
 8005df0:	697b      	ldr	r3, [r7, #20]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d1e5      	bne.n	8005dc2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	2220      	movs	r2, #32
 8005dfa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2200      	movs	r2, #0
 8005e02:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005e06:	2303      	movs	r3, #3
 8005e08:	e012      	b.n	8005e30 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	2220      	movs	r2, #32
 8005e0e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	2220      	movs	r2, #32
 8005e16:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2200      	movs	r2, #0
 8005e24:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	2200      	movs	r2, #0
 8005e2a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005e2e:	2300      	movs	r3, #0
}
 8005e30:	4618      	mov	r0, r3
 8005e32:	3758      	adds	r7, #88	@ 0x58
 8005e34:	46bd      	mov	sp, r7
 8005e36:	bd80      	pop	{r7, pc}

08005e38 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	b084      	sub	sp, #16
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	60f8      	str	r0, [r7, #12]
 8005e40:	60b9      	str	r1, [r7, #8]
 8005e42:	603b      	str	r3, [r7, #0]
 8005e44:	4613      	mov	r3, r2
 8005e46:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e48:	e04f      	b.n	8005eea <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e4a:	69bb      	ldr	r3, [r7, #24]
 8005e4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e50:	d04b      	beq.n	8005eea <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e52:	f7fb ff27 	bl	8001ca4 <HAL_GetTick>
 8005e56:	4602      	mov	r2, r0
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	1ad3      	subs	r3, r2, r3
 8005e5c:	69ba      	ldr	r2, [r7, #24]
 8005e5e:	429a      	cmp	r2, r3
 8005e60:	d302      	bcc.n	8005e68 <UART_WaitOnFlagUntilTimeout+0x30>
 8005e62:	69bb      	ldr	r3, [r7, #24]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d101      	bne.n	8005e6c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005e68:	2303      	movs	r3, #3
 8005e6a:	e04e      	b.n	8005f0a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f003 0304 	and.w	r3, r3, #4
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d037      	beq.n	8005eea <UART_WaitOnFlagUntilTimeout+0xb2>
 8005e7a:	68bb      	ldr	r3, [r7, #8]
 8005e7c:	2b80      	cmp	r3, #128	@ 0x80
 8005e7e:	d034      	beq.n	8005eea <UART_WaitOnFlagUntilTimeout+0xb2>
 8005e80:	68bb      	ldr	r3, [r7, #8]
 8005e82:	2b40      	cmp	r3, #64	@ 0x40
 8005e84:	d031      	beq.n	8005eea <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	69db      	ldr	r3, [r3, #28]
 8005e8c:	f003 0308 	and.w	r3, r3, #8
 8005e90:	2b08      	cmp	r3, #8
 8005e92:	d110      	bne.n	8005eb6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	2208      	movs	r2, #8
 8005e9a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005e9c:	68f8      	ldr	r0, [r7, #12]
 8005e9e:	f000 f838 	bl	8005f12 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	2208      	movs	r2, #8
 8005ea6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	2200      	movs	r2, #0
 8005eae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8005eb2:	2301      	movs	r3, #1
 8005eb4:	e029      	b.n	8005f0a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	69db      	ldr	r3, [r3, #28]
 8005ebc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005ec0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005ec4:	d111      	bne.n	8005eea <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005ece:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005ed0:	68f8      	ldr	r0, [r7, #12]
 8005ed2:	f000 f81e 	bl	8005f12 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	2220      	movs	r2, #32
 8005eda:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8005ee6:	2303      	movs	r3, #3
 8005ee8:	e00f      	b.n	8005f0a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	69da      	ldr	r2, [r3, #28]
 8005ef0:	68bb      	ldr	r3, [r7, #8]
 8005ef2:	4013      	ands	r3, r2
 8005ef4:	68ba      	ldr	r2, [r7, #8]
 8005ef6:	429a      	cmp	r2, r3
 8005ef8:	bf0c      	ite	eq
 8005efa:	2301      	moveq	r3, #1
 8005efc:	2300      	movne	r3, #0
 8005efe:	b2db      	uxtb	r3, r3
 8005f00:	461a      	mov	r2, r3
 8005f02:	79fb      	ldrb	r3, [r7, #7]
 8005f04:	429a      	cmp	r2, r3
 8005f06:	d0a0      	beq.n	8005e4a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005f08:	2300      	movs	r3, #0
}
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	3710      	adds	r7, #16
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	bd80      	pop	{r7, pc}

08005f12 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005f12:	b480      	push	{r7}
 8005f14:	b095      	sub	sp, #84	@ 0x54
 8005f16:	af00      	add	r7, sp, #0
 8005f18:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f22:	e853 3f00 	ldrex	r3, [r3]
 8005f26:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005f28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f2a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005f2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	461a      	mov	r2, r3
 8005f36:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005f38:	643b      	str	r3, [r7, #64]	@ 0x40
 8005f3a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f3c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005f3e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005f40:	e841 2300 	strex	r3, r2, [r1]
 8005f44:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005f46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d1e6      	bne.n	8005f1a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	3308      	adds	r3, #8
 8005f52:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f54:	6a3b      	ldr	r3, [r7, #32]
 8005f56:	e853 3f00 	ldrex	r3, [r3]
 8005f5a:	61fb      	str	r3, [r7, #28]
   return(result);
 8005f5c:	69fb      	ldr	r3, [r7, #28]
 8005f5e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005f62:	f023 0301 	bic.w	r3, r3, #1
 8005f66:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	3308      	adds	r3, #8
 8005f6e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005f70:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005f72:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f74:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005f76:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005f78:	e841 2300 	strex	r3, r2, [r1]
 8005f7c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005f7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d1e3      	bne.n	8005f4c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005f88:	2b01      	cmp	r3, #1
 8005f8a:	d118      	bne.n	8005fbe <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	e853 3f00 	ldrex	r3, [r3]
 8005f98:	60bb      	str	r3, [r7, #8]
   return(result);
 8005f9a:	68bb      	ldr	r3, [r7, #8]
 8005f9c:	f023 0310 	bic.w	r3, r3, #16
 8005fa0:	647b      	str	r3, [r7, #68]	@ 0x44
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	461a      	mov	r2, r3
 8005fa8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005faa:	61bb      	str	r3, [r7, #24]
 8005fac:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fae:	6979      	ldr	r1, [r7, #20]
 8005fb0:	69ba      	ldr	r2, [r7, #24]
 8005fb2:	e841 2300 	strex	r3, r2, [r1]
 8005fb6:	613b      	str	r3, [r7, #16]
   return(result);
 8005fb8:	693b      	ldr	r3, [r7, #16]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d1e6      	bne.n	8005f8c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	2220      	movs	r2, #32
 8005fc2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	2200      	movs	r2, #0
 8005fca:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2200      	movs	r2, #0
 8005fd0:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8005fd2:	bf00      	nop
 8005fd4:	3754      	adds	r7, #84	@ 0x54
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fdc:	4770      	bx	lr

08005fde <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005fde:	b480      	push	{r7}
 8005fe0:	b085      	sub	sp, #20
 8005fe2:	af00      	add	r7, sp, #0
 8005fe4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005fec:	2b01      	cmp	r3, #1
 8005fee:	d101      	bne.n	8005ff4 <HAL_UARTEx_DisableFifoMode+0x16>
 8005ff0:	2302      	movs	r3, #2
 8005ff2:	e027      	b.n	8006044 <HAL_UARTEx_DisableFifoMode+0x66>
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2201      	movs	r2, #1
 8005ff8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2224      	movs	r2, #36	@ 0x24
 8006000:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	681a      	ldr	r2, [r3, #0]
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f022 0201 	bic.w	r2, r2, #1
 800601a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006022:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2200      	movs	r2, #0
 8006028:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	68fa      	ldr	r2, [r7, #12]
 8006030:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	2220      	movs	r2, #32
 8006036:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2200      	movs	r2, #0
 800603e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006042:	2300      	movs	r3, #0
}
 8006044:	4618      	mov	r0, r3
 8006046:	3714      	adds	r7, #20
 8006048:	46bd      	mov	sp, r7
 800604a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604e:	4770      	bx	lr

08006050 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006050:	b580      	push	{r7, lr}
 8006052:	b084      	sub	sp, #16
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
 8006058:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006060:	2b01      	cmp	r3, #1
 8006062:	d101      	bne.n	8006068 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006064:	2302      	movs	r3, #2
 8006066:	e02d      	b.n	80060c4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2201      	movs	r2, #1
 800606c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2224      	movs	r2, #36	@ 0x24
 8006074:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	681a      	ldr	r2, [r3, #0]
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f022 0201 	bic.w	r2, r2, #1
 800608e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	689b      	ldr	r3, [r3, #8]
 8006096:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	683a      	ldr	r2, [r7, #0]
 80060a0:	430a      	orrs	r2, r1
 80060a2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80060a4:	6878      	ldr	r0, [r7, #4]
 80060a6:	f000 f84f 	bl	8006148 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	68fa      	ldr	r2, [r7, #12]
 80060b0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	2220      	movs	r2, #32
 80060b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	2200      	movs	r2, #0
 80060be:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80060c2:	2300      	movs	r3, #0
}
 80060c4:	4618      	mov	r0, r3
 80060c6:	3710      	adds	r7, #16
 80060c8:	46bd      	mov	sp, r7
 80060ca:	bd80      	pop	{r7, pc}

080060cc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b084      	sub	sp, #16
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
 80060d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80060dc:	2b01      	cmp	r3, #1
 80060de:	d101      	bne.n	80060e4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80060e0:	2302      	movs	r3, #2
 80060e2:	e02d      	b.n	8006140 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2201      	movs	r2, #1
 80060e8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2224      	movs	r2, #36	@ 0x24
 80060f0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	681a      	ldr	r2, [r3, #0]
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f022 0201 	bic.w	r2, r2, #1
 800610a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	689b      	ldr	r3, [r3, #8]
 8006112:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	683a      	ldr	r2, [r7, #0]
 800611c:	430a      	orrs	r2, r1
 800611e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006120:	6878      	ldr	r0, [r7, #4]
 8006122:	f000 f811 	bl	8006148 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	68fa      	ldr	r2, [r7, #12]
 800612c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	2220      	movs	r2, #32
 8006132:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	2200      	movs	r2, #0
 800613a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800613e:	2300      	movs	r3, #0
}
 8006140:	4618      	mov	r0, r3
 8006142:	3710      	adds	r7, #16
 8006144:	46bd      	mov	sp, r7
 8006146:	bd80      	pop	{r7, pc}

08006148 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006148:	b480      	push	{r7}
 800614a:	b085      	sub	sp, #20
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006154:	2b00      	cmp	r3, #0
 8006156:	d108      	bne.n	800616a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2201      	movs	r2, #1
 800615c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2201      	movs	r2, #1
 8006164:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006168:	e031      	b.n	80061ce <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800616a:	2308      	movs	r3, #8
 800616c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800616e:	2308      	movs	r3, #8
 8006170:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	689b      	ldr	r3, [r3, #8]
 8006178:	0e5b      	lsrs	r3, r3, #25
 800617a:	b2db      	uxtb	r3, r3
 800617c:	f003 0307 	and.w	r3, r3, #7
 8006180:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	689b      	ldr	r3, [r3, #8]
 8006188:	0f5b      	lsrs	r3, r3, #29
 800618a:	b2db      	uxtb	r3, r3
 800618c:	f003 0307 	and.w	r3, r3, #7
 8006190:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006192:	7bbb      	ldrb	r3, [r7, #14]
 8006194:	7b3a      	ldrb	r2, [r7, #12]
 8006196:	4911      	ldr	r1, [pc, #68]	@ (80061dc <UARTEx_SetNbDataToProcess+0x94>)
 8006198:	5c8a      	ldrb	r2, [r1, r2]
 800619a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800619e:	7b3a      	ldrb	r2, [r7, #12]
 80061a0:	490f      	ldr	r1, [pc, #60]	@ (80061e0 <UARTEx_SetNbDataToProcess+0x98>)
 80061a2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80061a4:	fb93 f3f2 	sdiv	r3, r3, r2
 80061a8:	b29a      	uxth	r2, r3
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80061b0:	7bfb      	ldrb	r3, [r7, #15]
 80061b2:	7b7a      	ldrb	r2, [r7, #13]
 80061b4:	4909      	ldr	r1, [pc, #36]	@ (80061dc <UARTEx_SetNbDataToProcess+0x94>)
 80061b6:	5c8a      	ldrb	r2, [r1, r2]
 80061b8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80061bc:	7b7a      	ldrb	r2, [r7, #13]
 80061be:	4908      	ldr	r1, [pc, #32]	@ (80061e0 <UARTEx_SetNbDataToProcess+0x98>)
 80061c0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80061c2:	fb93 f3f2 	sdiv	r3, r3, r2
 80061c6:	b29a      	uxth	r2, r3
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80061ce:	bf00      	nop
 80061d0:	3714      	adds	r7, #20
 80061d2:	46bd      	mov	sp, r7
 80061d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d8:	4770      	bx	lr
 80061da:	bf00      	nop
 80061dc:	08006858 	.word	0x08006858
 80061e0:	08006860 	.word	0x08006860

080061e4 <BNO055_Init>:
 */

#include "BNO055.h"

HAL_StatusTypeDef BNO055_Init(BNO055_Structure *bno, I2C_HandleTypeDef *hi2cx, uint8_t addr, OPRMode mode)
{
 80061e4:	b580      	push	{r7, lr}
 80061e6:	b08a      	sub	sp, #40	@ 0x28
 80061e8:	af04      	add	r7, sp, #16
 80061ea:	60f8      	str	r0, [r7, #12]
 80061ec:	60b9      	str	r1, [r7, #8]
 80061ee:	4611      	mov	r1, r2
 80061f0:	461a      	mov	r2, r3
 80061f2:	460b      	mov	r3, r1
 80061f4:	71fb      	strb	r3, [r7, #7]
 80061f6:	4613      	mov	r3, r2
 80061f8:	71bb      	strb	r3, [r7, #6]
	uint8_t txbuffer;
	uint8_t rxbuffer;

	bno->hi2cx = hi2cx;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	68ba      	ldr	r2, [r7, #8]
 80061fe:	601a      	str	r2, [r3, #0]
	bno->address = BNO055_ADD_H;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	2252      	movs	r2, #82	@ 0x52
 8006204:	711a      	strb	r2, [r3, #4]
	if (addr == 0) bno->address = BNO055_ADD_L;
 8006206:	79fb      	ldrb	r3, [r7, #7]
 8006208:	2b00      	cmp	r3, #0
 800620a:	d102      	bne.n	8006212 <BNO055_Init+0x2e>
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	2250      	movs	r2, #80	@ 0x50
 8006210:	711a      	strb	r2, [r3, #4]

	HAL_I2C_Mem_Read(bno->hi2cx, bno->address, CHIP_ID, 1, &rxbuffer, 1, 10);
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	6818      	ldr	r0, [r3, #0]
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	791b      	ldrb	r3, [r3, #4]
 800621a:	4619      	mov	r1, r3
 800621c:	230a      	movs	r3, #10
 800621e:	9302      	str	r3, [sp, #8]
 8006220:	2301      	movs	r3, #1
 8006222:	9301      	str	r3, [sp, #4]
 8006224:	f107 0316 	add.w	r3, r7, #22
 8006228:	9300      	str	r3, [sp, #0]
 800622a:	2301      	movs	r3, #1
 800622c:	2200      	movs	r2, #0
 800622e:	f7fc fb7b 	bl	8002928 <HAL_I2C_Mem_Read>
	if (rxbuffer != 0xA0) {
 8006232:	7dbb      	ldrb	r3, [r7, #22]
 8006234:	2ba0      	cmp	r3, #160	@ 0xa0
 8006236:	d018      	beq.n	800626a <BNO055_Init+0x86>
		HAL_Delay(1000);
 8006238:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800623c:	f7fb fd3e 	bl	8001cbc <HAL_Delay>
		HAL_I2C_Mem_Read(bno->hi2cx, bno->address, CHIP_ID, 1, &rxbuffer, 1, 10);
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	6818      	ldr	r0, [r3, #0]
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	791b      	ldrb	r3, [r3, #4]
 8006248:	4619      	mov	r1, r3
 800624a:	230a      	movs	r3, #10
 800624c:	9302      	str	r3, [sp, #8]
 800624e:	2301      	movs	r3, #1
 8006250:	9301      	str	r3, [sp, #4]
 8006252:	f107 0316 	add.w	r3, r7, #22
 8006256:	9300      	str	r3, [sp, #0]
 8006258:	2301      	movs	r3, #1
 800625a:	2200      	movs	r2, #0
 800625c:	f7fc fb64 	bl	8002928 <HAL_I2C_Mem_Read>
		if (rxbuffer != 0xA0) return HAL_ERROR;
 8006260:	7dbb      	ldrb	r3, [r7, #22]
 8006262:	2ba0      	cmp	r3, #160	@ 0xa0
 8006264:	d001      	beq.n	800626a <BNO055_Init+0x86>
 8006266:	2301      	movs	r3, #1
 8006268:	e0a5      	b.n	80063b6 <BNO055_Init+0x1d2>
	}

	HAL_I2C_Mem_Read(bno->hi2cx, bno->address, OPR_MODE, 1, &bno->RxBuffer[8], 1, 10);
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	6818      	ldr	r0, [r3, #0]
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	791b      	ldrb	r3, [r3, #4]
 8006272:	4619      	mov	r1, r3
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	3350      	adds	r3, #80	@ 0x50
 8006278:	220a      	movs	r2, #10
 800627a:	9202      	str	r2, [sp, #8]
 800627c:	2201      	movs	r2, #1
 800627e:	9201      	str	r2, [sp, #4]
 8006280:	9300      	str	r3, [sp, #0]
 8006282:	2301      	movs	r3, #1
 8006284:	223d      	movs	r2, #61	@ 0x3d
 8006286:	f7fc fb4f 	bl	8002928 <HAL_I2C_Mem_Read>

	txbuffer = CONFIGMODE;
 800628a:	2300      	movs	r3, #0
 800628c:	75fb      	strb	r3, [r7, #23]
	HAL_I2C_Mem_Write(bno->hi2cx, bno->address, OPR_MODE, 1, &txbuffer, 1, 10);
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	6818      	ldr	r0, [r3, #0]
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	791b      	ldrb	r3, [r3, #4]
 8006296:	4619      	mov	r1, r3
 8006298:	230a      	movs	r3, #10
 800629a:	9302      	str	r3, [sp, #8]
 800629c:	2301      	movs	r3, #1
 800629e:	9301      	str	r3, [sp, #4]
 80062a0:	f107 0317 	add.w	r3, r7, #23
 80062a4:	9300      	str	r3, [sp, #0]
 80062a6:	2301      	movs	r3, #1
 80062a8:	223d      	movs	r2, #61	@ 0x3d
 80062aa:	f7fc fa29 	bl	8002700 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 80062ae:	200a      	movs	r0, #10
 80062b0:	f7fb fd04 	bl	8001cbc <HAL_Delay>

	txbuffer = 0x20;
 80062b4:	2320      	movs	r3, #32
 80062b6:	75fb      	strb	r3, [r7, #23]
	HAL_I2C_Mem_Write(bno->hi2cx, bno->address, SYS_TRIGGER, 1, &txbuffer, 1, 10);
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	6818      	ldr	r0, [r3, #0]
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	791b      	ldrb	r3, [r3, #4]
 80062c0:	4619      	mov	r1, r3
 80062c2:	230a      	movs	r3, #10
 80062c4:	9302      	str	r3, [sp, #8]
 80062c6:	2301      	movs	r3, #1
 80062c8:	9301      	str	r3, [sp, #4]
 80062ca:	f107 0317 	add.w	r3, r7, #23
 80062ce:	9300      	str	r3, [sp, #0]
 80062d0:	2301      	movs	r3, #1
 80062d2:	223f      	movs	r2, #63	@ 0x3f
 80062d4:	f7fc fa14 	bl	8002700 <HAL_I2C_Mem_Write>
	HAL_Delay(30);
 80062d8:	201e      	movs	r0, #30
 80062da:	f7fb fcef 	bl	8001cbc <HAL_Delay>

	do {
		HAL_I2C_Mem_Read(bno->hi2cx, bno->address, CHIP_ID, 1, &rxbuffer, 1, 10);
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	6818      	ldr	r0, [r3, #0]
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	791b      	ldrb	r3, [r3, #4]
 80062e6:	4619      	mov	r1, r3
 80062e8:	230a      	movs	r3, #10
 80062ea:	9302      	str	r3, [sp, #8]
 80062ec:	2301      	movs	r3, #1
 80062ee:	9301      	str	r3, [sp, #4]
 80062f0:	f107 0316 	add.w	r3, r7, #22
 80062f4:	9300      	str	r3, [sp, #0]
 80062f6:	2301      	movs	r3, #1
 80062f8:	2200      	movs	r2, #0
 80062fa:	f7fc fb15 	bl	8002928 <HAL_I2C_Mem_Read>
	} while (rxbuffer != 0xA0);
 80062fe:	7dbb      	ldrb	r3, [r7, #22]
 8006300:	2ba0      	cmp	r3, #160	@ 0xa0
 8006302:	d1ec      	bne.n	80062de <BNO055_Init+0xfa>
	HAL_Delay(50);
 8006304:	2032      	movs	r0, #50	@ 0x32
 8006306:	f7fb fcd9 	bl	8001cbc <HAL_Delay>

	txbuffer = Normal_Mode;
 800630a:	2300      	movs	r3, #0
 800630c:	75fb      	strb	r3, [r7, #23]
	HAL_I2C_Mem_Write(bno->hi2cx, bno->address, PWR_MODE, 1, &txbuffer, 1, 10);
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	6818      	ldr	r0, [r3, #0]
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	791b      	ldrb	r3, [r3, #4]
 8006316:	4619      	mov	r1, r3
 8006318:	230a      	movs	r3, #10
 800631a:	9302      	str	r3, [sp, #8]
 800631c:	2301      	movs	r3, #1
 800631e:	9301      	str	r3, [sp, #4]
 8006320:	f107 0317 	add.w	r3, r7, #23
 8006324:	9300      	str	r3, [sp, #0]
 8006326:	2301      	movs	r3, #1
 8006328:	223e      	movs	r2, #62	@ 0x3e
 800632a:	f7fc f9e9 	bl	8002700 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 800632e:	200a      	movs	r0, #10
 8006330:	f7fb fcc4 	bl	8001cbc <HAL_Delay>

	txbuffer = Page_ID_00;
 8006334:	2300      	movs	r3, #0
 8006336:	75fb      	strb	r3, [r7, #23]
	HAL_I2C_Mem_Write(bno->hi2cx, bno->address, PAGE_ID, 1, &txbuffer, 1, 10);
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	6818      	ldr	r0, [r3, #0]
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	791b      	ldrb	r3, [r3, #4]
 8006340:	4619      	mov	r1, r3
 8006342:	230a      	movs	r3, #10
 8006344:	9302      	str	r3, [sp, #8]
 8006346:	2301      	movs	r3, #1
 8006348:	9301      	str	r3, [sp, #4]
 800634a:	f107 0317 	add.w	r3, r7, #23
 800634e:	9300      	str	r3, [sp, #0]
 8006350:	2301      	movs	r3, #1
 8006352:	2207      	movs	r2, #7
 8006354:	f7fc f9d4 	bl	8002700 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8006358:	200a      	movs	r0, #10
 800635a:	f7fb fcaf 	bl	8001cbc <HAL_Delay>

	txbuffer = 0x00;
 800635e:	2300      	movs	r3, #0
 8006360:	75fb      	strb	r3, [r7, #23]
	HAL_I2C_Mem_Write(bno->hi2cx, bno->address, SYS_TRIGGER, 1, &txbuffer, 1, 10);
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	6818      	ldr	r0, [r3, #0]
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	791b      	ldrb	r3, [r3, #4]
 800636a:	4619      	mov	r1, r3
 800636c:	230a      	movs	r3, #10
 800636e:	9302      	str	r3, [sp, #8]
 8006370:	2301      	movs	r3, #1
 8006372:	9301      	str	r3, [sp, #4]
 8006374:	f107 0317 	add.w	r3, r7, #23
 8006378:	9300      	str	r3, [sp, #0]
 800637a:	2301      	movs	r3, #1
 800637c:	223f      	movs	r2, #63	@ 0x3f
 800637e:	f7fc f9bf 	bl	8002700 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8006382:	200a      	movs	r0, #10
 8006384:	f7fb fc9a 	bl	8001cbc <HAL_Delay>

	bno->mode = mode;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	79ba      	ldrb	r2, [r7, #6]
 800638c:	715a      	strb	r2, [r3, #5]
	HAL_I2C_Mem_Write(bno->hi2cx, bno->address, OPR_MODE, 1, &bno->mode, 1, 10);
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	6818      	ldr	r0, [r3, #0]
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	791b      	ldrb	r3, [r3, #4]
 8006396:	4619      	mov	r1, r3
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	3305      	adds	r3, #5
 800639c:	220a      	movs	r2, #10
 800639e:	9202      	str	r2, [sp, #8]
 80063a0:	2201      	movs	r2, #1
 80063a2:	9201      	str	r2, [sp, #4]
 80063a4:	9300      	str	r3, [sp, #0]
 80063a6:	2301      	movs	r3, #1
 80063a8:	223d      	movs	r2, #61	@ 0x3d
 80063aa:	f7fc f9a9 	bl	8002700 <HAL_I2C_Mem_Write>
	HAL_Delay(30);
 80063ae:	201e      	movs	r0, #30
 80063b0:	f7fb fc84 	bl	8001cbc <HAL_Delay>

	return HAL_OK;
 80063b4:	2300      	movs	r3, #0
}
 80063b6:	4618      	mov	r0, r3
 80063b8:	3718      	adds	r7, #24
 80063ba:	46bd      	mov	sp, r7
 80063bc:	bd80      	pop	{r7, pc}
	...

080063c0 <BNO055_Read>:

void BNO055_Read(BNO055_Structure *bno, Vector_Type type)
{
 80063c0:	b580      	push	{r7, lr}
 80063c2:	b092      	sub	sp, #72	@ 0x48
 80063c4:	af04      	add	r7, sp, #16
 80063c6:	6078      	str	r0, [r7, #4]
 80063c8:	460b      	mov	r3, r1
 80063ca:	70fb      	strb	r3, [r7, #3]
	uint8_t read_mode;
	HAL_I2C_Mem_Read(bno->hi2cx, bno->address, OPR_MODE, 1, &read_mode, 1, 10);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	6818      	ldr	r0, [r3, #0]
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	791b      	ldrb	r3, [r3, #4]
 80063d4:	4619      	mov	r1, r3
 80063d6:	230a      	movs	r3, #10
 80063d8:	9302      	str	r3, [sp, #8]
 80063da:	2301      	movs	r3, #1
 80063dc:	9301      	str	r3, [sp, #4]
 80063de:	f107 0319 	add.w	r3, r7, #25
 80063e2:	9300      	str	r3, [sp, #0]
 80063e4:	2301      	movs	r3, #1
 80063e6:	223d      	movs	r2, #61	@ 0x3d
 80063e8:	f7fc fa9e 	bl	8002928 <HAL_I2C_Mem_Read>
	if (read_mode != bno->mode) {
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	795a      	ldrb	r2, [r3, #5]
 80063f0:	7e7b      	ldrb	r3, [r7, #25]
 80063f2:	429a      	cmp	r2, r3
 80063f4:	d00f      	beq.n	8006416 <BNO055_Read+0x56>
		HAL_I2C_Mem_Write(bno->hi2cx, bno->address, OPR_MODE, 1, &bno->mode, 1, 10);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	6818      	ldr	r0, [r3, #0]
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	791b      	ldrb	r3, [r3, #4]
 80063fe:	4619      	mov	r1, r3
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	3305      	adds	r3, #5
 8006404:	220a      	movs	r2, #10
 8006406:	9202      	str	r2, [sp, #8]
 8006408:	2201      	movs	r2, #1
 800640a:	9201      	str	r2, [sp, #4]
 800640c:	9300      	str	r3, [sp, #0]
 800640e:	2301      	movs	r3, #1
 8006410:	223d      	movs	r2, #61	@ 0x3d
 8006412:	f7fc f975 	bl	8002700 <HAL_I2C_Mem_Write>
	}

	if (type != QUATERNION) {
 8006416:	78fb      	ldrb	r3, [r7, #3]
 8006418:	2b06      	cmp	r3, #6
 800641a:	f000 8147 	beq.w	80066ac <BNO055_Read+0x2ec>
		uint8_t rxbuffer[6];
		uint8_t data_reg;
		switch (type) {
 800641e:	78fb      	ldrb	r3, [r7, #3]
 8006420:	2b05      	cmp	r3, #5
 8006422:	d827      	bhi.n	8006474 <BNO055_Read+0xb4>
 8006424:	a201      	add	r2, pc, #4	@ (adr r2, 800642c <BNO055_Read+0x6c>)
 8006426:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800642a:	bf00      	nop
 800642c:	08006455 	.word	0x08006455
 8006430:	0800644d 	.word	0x0800644d
 8006434:	0800645d 	.word	0x0800645d
 8006438:	08006445 	.word	0x08006445
 800643c:	08006465 	.word	0x08006465
 8006440:	0800646d 	.word	0x0800646d
		case ACCELEROMETER:
			data_reg = ACC_DATA_X_LSB;
 8006444:	2308      	movs	r3, #8
 8006446:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
			break;
 800644a:	e013      	b.n	8006474 <BNO055_Read+0xb4>
		case GYROSCOPE:
			data_reg = GYR_DATA_X_LSB;
 800644c:	2314      	movs	r3, #20
 800644e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
			break;
 8006452:	e00f      	b.n	8006474 <BNO055_Read+0xb4>
		case MAGNETOMETER:
			data_reg = MAG_DATA_X_LSB;
 8006454:	230e      	movs	r3, #14
 8006456:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
			break;
 800645a:	e00b      	b.n	8006474 <BNO055_Read+0xb4>
		case EULER:
			data_reg = EUL_DATA_X_LSB;
 800645c:	231a      	movs	r3, #26
 800645e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
			break;
 8006462:	e007      	b.n	8006474 <BNO055_Read+0xb4>
		case LINEARACCEL:
			data_reg = LIA_DATA_X_LSB;
 8006464:	2328      	movs	r3, #40	@ 0x28
 8006466:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
			break;
 800646a:	e003      	b.n	8006474 <BNO055_Read+0xb4>
		case GRAVITY:
			data_reg = GRV_DATA_X_LSB;
 800646c:	232e      	movs	r3, #46	@ 0x2e
 800646e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
			break;
 8006472:	bf00      	nop
		default:
		}

		HAL_I2C_Mem_Read(bno->hi2cx, bno->address, data_reg, 1, rxbuffer, 6, 10);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	6818      	ldr	r0, [r3, #0]
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	791b      	ldrb	r3, [r3, #4]
 800647c:	4619      	mov	r1, r3
 800647e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006482:	b29a      	uxth	r2, r3
 8006484:	230a      	movs	r3, #10
 8006486:	9302      	str	r3, [sp, #8]
 8006488:	2306      	movs	r3, #6
 800648a:	9301      	str	r3, [sp, #4]
 800648c:	f107 0310 	add.w	r3, r7, #16
 8006490:	9300      	str	r3, [sp, #0]
 8006492:	2301      	movs	r3, #1
 8006494:	f7fc fa48 	bl	8002928 <HAL_I2C_Mem_Read>

		int16_t x, y, z = 0;
 8006498:	2300      	movs	r3, #0
 800649a:	83fb      	strh	r3, [r7, #30]

		x  = ((int16_t) rxbuffer[0]) | (((int16_t) rxbuffer[1]) << 8);
 800649c:	7c3b      	ldrb	r3, [r7, #16]
 800649e:	b21a      	sxth	r2, r3
 80064a0:	7c7b      	ldrb	r3, [r7, #17]
 80064a2:	021b      	lsls	r3, r3, #8
 80064a4:	b21b      	sxth	r3, r3
 80064a6:	4313      	orrs	r3, r2
 80064a8:	83bb      	strh	r3, [r7, #28]
		y  = ((int16_t) rxbuffer[2]) | (((int16_t) rxbuffer[3]) << 8);
 80064aa:	7cbb      	ldrb	r3, [r7, #18]
 80064ac:	b21a      	sxth	r2, r3
 80064ae:	7cfb      	ldrb	r3, [r7, #19]
 80064b0:	021b      	lsls	r3, r3, #8
 80064b2:	b21b      	sxth	r3, r3
 80064b4:	4313      	orrs	r3, r2
 80064b6:	837b      	strh	r3, [r7, #26]
		z  = ((int16_t) rxbuffer[4]) | (((int16_t) rxbuffer[5]) << 8);
 80064b8:	7d3b      	ldrb	r3, [r7, #20]
 80064ba:	b21a      	sxth	r2, r3
 80064bc:	7d7b      	ldrb	r3, [r7, #21]
 80064be:	021b      	lsls	r3, r3, #8
 80064c0:	b21b      	sxth	r3, r3
 80064c2:	4313      	orrs	r3, r2
 80064c4:	83fb      	strh	r3, [r7, #30]

		switch (type) {
 80064c6:	78fb      	ldrb	r3, [r7, #3]
 80064c8:	2b02      	cmp	r3, #2
 80064ca:	d07b      	beq.n	80065c4 <BNO055_Read+0x204>
 80064cc:	2b02      	cmp	r3, #2
 80064ce:	f300 80b3 	bgt.w	8006638 <BNO055_Read+0x278>
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d03c      	beq.n	8006550 <BNO055_Read+0x190>
 80064d6:	2b01      	cmp	r3, #1
 80064d8:	f040 80ae 	bne.w	8006638 <BNO055_Read+0x278>
		case GYROSCOPE:
			bno->gyro.x = ((double)x) / 16.0;
 80064dc:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80064e0:	4618      	mov	r0, r3
 80064e2:	f7f9 ffeb 	bl	80004bc <__aeabi_i2d>
 80064e6:	f04f 0200 	mov.w	r2, #0
 80064ea:	4bb0      	ldr	r3, [pc, #704]	@ (80067ac <BNO055_Read+0x3ec>)
 80064ec:	f7fa f97a 	bl	80007e4 <__aeabi_ddiv>
 80064f0:	4602      	mov	r2, r0
 80064f2:	460b      	mov	r3, r1
 80064f4:	4610      	mov	r0, r2
 80064f6:	4619      	mov	r1, r3
 80064f8:	f7fa fa5c 	bl	80009b4 <__aeabi_d2f>
 80064fc:	4602      	mov	r2, r0
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	615a      	str	r2, [r3, #20]
			bno->gyro.y = ((double)y) / 16.0;
 8006502:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8006506:	4618      	mov	r0, r3
 8006508:	f7f9 ffd8 	bl	80004bc <__aeabi_i2d>
 800650c:	f04f 0200 	mov.w	r2, #0
 8006510:	4ba6      	ldr	r3, [pc, #664]	@ (80067ac <BNO055_Read+0x3ec>)
 8006512:	f7fa f967 	bl	80007e4 <__aeabi_ddiv>
 8006516:	4602      	mov	r2, r0
 8006518:	460b      	mov	r3, r1
 800651a:	4610      	mov	r0, r2
 800651c:	4619      	mov	r1, r3
 800651e:	f7fa fa49 	bl	80009b4 <__aeabi_d2f>
 8006522:	4602      	mov	r2, r0
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	619a      	str	r2, [r3, #24]
			bno->gyro.z = ((double)z) / 16.0;
 8006528:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800652c:	4618      	mov	r0, r3
 800652e:	f7f9 ffc5 	bl	80004bc <__aeabi_i2d>
 8006532:	f04f 0200 	mov.w	r2, #0
 8006536:	4b9d      	ldr	r3, [pc, #628]	@ (80067ac <BNO055_Read+0x3ec>)
 8006538:	f7fa f954 	bl	80007e4 <__aeabi_ddiv>
 800653c:	4602      	mov	r2, r0
 800653e:	460b      	mov	r3, r1
 8006540:	4610      	mov	r0, r2
 8006542:	4619      	mov	r1, r3
 8006544:	f7fa fa36 	bl	80009b4 <__aeabi_d2f>
 8006548:	4602      	mov	r2, r0
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	61da      	str	r2, [r3, #28]
			break;
 800654e:	e129      	b.n	80067a4 <BNO055_Read+0x3e4>
		case MAGNETOMETER:
			bno->mag.x = ((double)x) / 16.0;
 8006550:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8006554:	4618      	mov	r0, r3
 8006556:	f7f9 ffb1 	bl	80004bc <__aeabi_i2d>
 800655a:	f04f 0200 	mov.w	r2, #0
 800655e:	4b93      	ldr	r3, [pc, #588]	@ (80067ac <BNO055_Read+0x3ec>)
 8006560:	f7fa f940 	bl	80007e4 <__aeabi_ddiv>
 8006564:	4602      	mov	r2, r0
 8006566:	460b      	mov	r3, r1
 8006568:	4610      	mov	r0, r2
 800656a:	4619      	mov	r1, r3
 800656c:	f7fa fa22 	bl	80009b4 <__aeabi_d2f>
 8006570:	4602      	mov	r2, r0
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	621a      	str	r2, [r3, #32]
			bno->mag.y = ((double)y) / 16.0;
 8006576:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800657a:	4618      	mov	r0, r3
 800657c:	f7f9 ff9e 	bl	80004bc <__aeabi_i2d>
 8006580:	f04f 0200 	mov.w	r2, #0
 8006584:	4b89      	ldr	r3, [pc, #548]	@ (80067ac <BNO055_Read+0x3ec>)
 8006586:	f7fa f92d 	bl	80007e4 <__aeabi_ddiv>
 800658a:	4602      	mov	r2, r0
 800658c:	460b      	mov	r3, r1
 800658e:	4610      	mov	r0, r2
 8006590:	4619      	mov	r1, r3
 8006592:	f7fa fa0f 	bl	80009b4 <__aeabi_d2f>
 8006596:	4602      	mov	r2, r0
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	625a      	str	r2, [r3, #36]	@ 0x24
			bno->mag.z = ((double)z) / 16.0;
 800659c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80065a0:	4618      	mov	r0, r3
 80065a2:	f7f9 ff8b 	bl	80004bc <__aeabi_i2d>
 80065a6:	f04f 0200 	mov.w	r2, #0
 80065aa:	4b80      	ldr	r3, [pc, #512]	@ (80067ac <BNO055_Read+0x3ec>)
 80065ac:	f7fa f91a 	bl	80007e4 <__aeabi_ddiv>
 80065b0:	4602      	mov	r2, r0
 80065b2:	460b      	mov	r3, r1
 80065b4:	4610      	mov	r0, r2
 80065b6:	4619      	mov	r1, r3
 80065b8:	f7fa f9fc 	bl	80009b4 <__aeabi_d2f>
 80065bc:	4602      	mov	r2, r0
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	629a      	str	r2, [r3, #40]	@ 0x28
			break;
 80065c2:	e0ef      	b.n	80067a4 <BNO055_Read+0x3e4>
		case EULER:
			bno->euler.roll = ((double)x) / 16.0;
 80065c4:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80065c8:	4618      	mov	r0, r3
 80065ca:	f7f9 ff77 	bl	80004bc <__aeabi_i2d>
 80065ce:	f04f 0200 	mov.w	r2, #0
 80065d2:	4b76      	ldr	r3, [pc, #472]	@ (80067ac <BNO055_Read+0x3ec>)
 80065d4:	f7fa f906 	bl	80007e4 <__aeabi_ddiv>
 80065d8:	4602      	mov	r2, r0
 80065da:	460b      	mov	r3, r1
 80065dc:	4610      	mov	r0, r2
 80065de:	4619      	mov	r1, r3
 80065e0:	f7fa f9e8 	bl	80009b4 <__aeabi_d2f>
 80065e4:	4602      	mov	r2, r0
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	63da      	str	r2, [r3, #60]	@ 0x3c
			bno->euler.pitch = ((double)y) / 16.0;
 80065ea:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80065ee:	4618      	mov	r0, r3
 80065f0:	f7f9 ff64 	bl	80004bc <__aeabi_i2d>
 80065f4:	f04f 0200 	mov.w	r2, #0
 80065f8:	4b6c      	ldr	r3, [pc, #432]	@ (80067ac <BNO055_Read+0x3ec>)
 80065fa:	f7fa f8f3 	bl	80007e4 <__aeabi_ddiv>
 80065fe:	4602      	mov	r2, r0
 8006600:	460b      	mov	r3, r1
 8006602:	4610      	mov	r0, r2
 8006604:	4619      	mov	r1, r3
 8006606:	f7fa f9d5 	bl	80009b4 <__aeabi_d2f>
 800660a:	4602      	mov	r2, r0
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	641a      	str	r2, [r3, #64]	@ 0x40
			bno->euler.yaw = ((double)z) / 16.0;
 8006610:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8006614:	4618      	mov	r0, r3
 8006616:	f7f9 ff51 	bl	80004bc <__aeabi_i2d>
 800661a:	f04f 0200 	mov.w	r2, #0
 800661e:	4b63      	ldr	r3, [pc, #396]	@ (80067ac <BNO055_Read+0x3ec>)
 8006620:	f7fa f8e0 	bl	80007e4 <__aeabi_ddiv>
 8006624:	4602      	mov	r2, r0
 8006626:	460b      	mov	r3, r1
 8006628:	4610      	mov	r0, r2
 800662a:	4619      	mov	r1, r3
 800662c:	f7fa f9c2 	bl	80009b4 <__aeabi_d2f>
 8006630:	4602      	mov	r2, r0
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	645a      	str	r2, [r3, #68]	@ 0x44
			break;
 8006636:	e0b5      	b.n	80067a4 <BNO055_Read+0x3e4>
		default:
			bno->accel.x = ((double)x) / 100.0;
 8006638:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800663c:	4618      	mov	r0, r3
 800663e:	f7f9 ff3d 	bl	80004bc <__aeabi_i2d>
 8006642:	f04f 0200 	mov.w	r2, #0
 8006646:	4b5a      	ldr	r3, [pc, #360]	@ (80067b0 <BNO055_Read+0x3f0>)
 8006648:	f7fa f8cc 	bl	80007e4 <__aeabi_ddiv>
 800664c:	4602      	mov	r2, r0
 800664e:	460b      	mov	r3, r1
 8006650:	4610      	mov	r0, r2
 8006652:	4619      	mov	r1, r3
 8006654:	f7fa f9ae 	bl	80009b4 <__aeabi_d2f>
 8006658:	4602      	mov	r2, r0
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	609a      	str	r2, [r3, #8]
			bno->accel.y = ((double)y) / 100.0;
 800665e:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8006662:	4618      	mov	r0, r3
 8006664:	f7f9 ff2a 	bl	80004bc <__aeabi_i2d>
 8006668:	f04f 0200 	mov.w	r2, #0
 800666c:	4b50      	ldr	r3, [pc, #320]	@ (80067b0 <BNO055_Read+0x3f0>)
 800666e:	f7fa f8b9 	bl	80007e4 <__aeabi_ddiv>
 8006672:	4602      	mov	r2, r0
 8006674:	460b      	mov	r3, r1
 8006676:	4610      	mov	r0, r2
 8006678:	4619      	mov	r1, r3
 800667a:	f7fa f99b 	bl	80009b4 <__aeabi_d2f>
 800667e:	4602      	mov	r2, r0
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	60da      	str	r2, [r3, #12]
			bno->accel.z = ((double)z) / 100.0;
 8006684:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8006688:	4618      	mov	r0, r3
 800668a:	f7f9 ff17 	bl	80004bc <__aeabi_i2d>
 800668e:	f04f 0200 	mov.w	r2, #0
 8006692:	4b47      	ldr	r3, [pc, #284]	@ (80067b0 <BNO055_Read+0x3f0>)
 8006694:	f7fa f8a6 	bl	80007e4 <__aeabi_ddiv>
 8006698:	4602      	mov	r2, r0
 800669a:	460b      	mov	r3, r1
 800669c:	4610      	mov	r0, r2
 800669e:	4619      	mov	r1, r3
 80066a0:	f7fa f988 	bl	80009b4 <__aeabi_d2f>
 80066a4:	4602      	mov	r2, r0
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	611a      	str	r2, [r3, #16]
		bno->quat.y = y * scale;
		bno->quat.z = z * scale;
		bno->quat.w = w * scale;
	}

}
 80066aa:	e07b      	b.n	80067a4 <BNO055_Read+0x3e4>
		HAL_I2C_Mem_Read(bno->hi2cx, bno->address, QUA_DATA_X_LSB, 1, rxbuffer, 8, 10);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	6818      	ldr	r0, [r3, #0]
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	791b      	ldrb	r3, [r3, #4]
 80066b4:	4619      	mov	r1, r3
 80066b6:	230a      	movs	r3, #10
 80066b8:	9302      	str	r3, [sp, #8]
 80066ba:	2308      	movs	r3, #8
 80066bc:	9301      	str	r3, [sp, #4]
 80066be:	f107 0308 	add.w	r3, r7, #8
 80066c2:	9300      	str	r3, [sp, #0]
 80066c4:	2301      	movs	r3, #1
 80066c6:	2222      	movs	r2, #34	@ 0x22
 80066c8:	f7fc f92e 	bl	8002928 <HAL_I2C_Mem_Read>
		int16_t x, y, z, w = 0;
 80066cc:	2300      	movs	r3, #0
 80066ce:	86bb      	strh	r3, [r7, #52]	@ 0x34
		x  = ((int16_t) rxbuffer[0]) | (((int16_t) rxbuffer[1]) << 8);
 80066d0:	7a3b      	ldrb	r3, [r7, #8]
 80066d2:	b21a      	sxth	r2, r3
 80066d4:	7a7b      	ldrb	r3, [r7, #9]
 80066d6:	021b      	lsls	r3, r3, #8
 80066d8:	b21b      	sxth	r3, r3
 80066da:	4313      	orrs	r3, r2
 80066dc:	867b      	strh	r3, [r7, #50]	@ 0x32
		y  = ((int16_t) rxbuffer[2]) | (((int16_t) rxbuffer[3]) << 8);
 80066de:	7abb      	ldrb	r3, [r7, #10]
 80066e0:	b21a      	sxth	r2, r3
 80066e2:	7afb      	ldrb	r3, [r7, #11]
 80066e4:	021b      	lsls	r3, r3, #8
 80066e6:	b21b      	sxth	r3, r3
 80066e8:	4313      	orrs	r3, r2
 80066ea:	863b      	strh	r3, [r7, #48]	@ 0x30
		z  = ((int16_t) rxbuffer[4]) | (((int16_t) rxbuffer[5]) << 8);
 80066ec:	7b3b      	ldrb	r3, [r7, #12]
 80066ee:	b21a      	sxth	r2, r3
 80066f0:	7b7b      	ldrb	r3, [r7, #13]
 80066f2:	021b      	lsls	r3, r3, #8
 80066f4:	b21b      	sxth	r3, r3
 80066f6:	4313      	orrs	r3, r2
 80066f8:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		w  = ((int16_t) rxbuffer[6]) | (((int16_t) rxbuffer[7]) << 8);
 80066fa:	7bbb      	ldrb	r3, [r7, #14]
 80066fc:	b21a      	sxth	r2, r3
 80066fe:	7bfb      	ldrb	r3, [r7, #15]
 8006700:	021b      	lsls	r3, r3, #8
 8006702:	b21b      	sxth	r3, r3
 8006704:	4313      	orrs	r3, r2
 8006706:	86bb      	strh	r3, [r7, #52]	@ 0x34
		const double scale = (1.0 / (1 << 14));
 8006708:	f04f 0200 	mov.w	r2, #0
 800670c:	4b29      	ldr	r3, [pc, #164]	@ (80067b4 <BNO055_Read+0x3f4>)
 800670e:	e9c7 2308 	strd	r2, r3, [r7, #32]
		bno->quat.x = x * scale;
 8006712:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 8006716:	4618      	mov	r0, r3
 8006718:	f7f9 fed0 	bl	80004bc <__aeabi_i2d>
 800671c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006720:	f7f9 ff36 	bl	8000590 <__aeabi_dmul>
 8006724:	4602      	mov	r2, r0
 8006726:	460b      	mov	r3, r1
 8006728:	4610      	mov	r0, r2
 800672a:	4619      	mov	r1, r3
 800672c:	f7fa f942 	bl	80009b4 <__aeabi_d2f>
 8006730:	4602      	mov	r2, r0
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	62da      	str	r2, [r3, #44]	@ 0x2c
		bno->quat.y = y * scale;
 8006736:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	@ 0x30
 800673a:	4618      	mov	r0, r3
 800673c:	f7f9 febe 	bl	80004bc <__aeabi_i2d>
 8006740:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006744:	f7f9 ff24 	bl	8000590 <__aeabi_dmul>
 8006748:	4602      	mov	r2, r0
 800674a:	460b      	mov	r3, r1
 800674c:	4610      	mov	r0, r2
 800674e:	4619      	mov	r1, r3
 8006750:	f7fa f930 	bl	80009b4 <__aeabi_d2f>
 8006754:	4602      	mov	r2, r0
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	631a      	str	r2, [r3, #48]	@ 0x30
		bno->quat.z = z * scale;
 800675a:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 800675e:	4618      	mov	r0, r3
 8006760:	f7f9 feac 	bl	80004bc <__aeabi_i2d>
 8006764:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006768:	f7f9 ff12 	bl	8000590 <__aeabi_dmul>
 800676c:	4602      	mov	r2, r0
 800676e:	460b      	mov	r3, r1
 8006770:	4610      	mov	r0, r2
 8006772:	4619      	mov	r1, r3
 8006774:	f7fa f91e 	bl	80009b4 <__aeabi_d2f>
 8006778:	4602      	mov	r2, r0
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	635a      	str	r2, [r3, #52]	@ 0x34
		bno->quat.w = w * scale;
 800677e:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	@ 0x34
 8006782:	4618      	mov	r0, r3
 8006784:	f7f9 fe9a 	bl	80004bc <__aeabi_i2d>
 8006788:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800678c:	f7f9 ff00 	bl	8000590 <__aeabi_dmul>
 8006790:	4602      	mov	r2, r0
 8006792:	460b      	mov	r3, r1
 8006794:	4610      	mov	r0, r2
 8006796:	4619      	mov	r1, r3
 8006798:	f7fa f90c 	bl	80009b4 <__aeabi_d2f>
 800679c:	4602      	mov	r2, r0
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	639a      	str	r2, [r3, #56]	@ 0x38
}
 80067a2:	e7ff      	b.n	80067a4 <BNO055_Read+0x3e4>
 80067a4:	bf00      	nop
 80067a6:	3738      	adds	r7, #56	@ 0x38
 80067a8:	46bd      	mov	sp, r7
 80067aa:	bd80      	pop	{r7, pc}
 80067ac:	40300000 	.word	0x40300000
 80067b0:	40590000 	.word	0x40590000
 80067b4:	3f100000 	.word	0x3f100000

080067b8 <memset>:
 80067b8:	4402      	add	r2, r0
 80067ba:	4603      	mov	r3, r0
 80067bc:	4293      	cmp	r3, r2
 80067be:	d100      	bne.n	80067c2 <memset+0xa>
 80067c0:	4770      	bx	lr
 80067c2:	f803 1b01 	strb.w	r1, [r3], #1
 80067c6:	e7f9      	b.n	80067bc <memset+0x4>

080067c8 <__libc_init_array>:
 80067c8:	b570      	push	{r4, r5, r6, lr}
 80067ca:	4d0d      	ldr	r5, [pc, #52]	@ (8006800 <__libc_init_array+0x38>)
 80067cc:	4c0d      	ldr	r4, [pc, #52]	@ (8006804 <__libc_init_array+0x3c>)
 80067ce:	1b64      	subs	r4, r4, r5
 80067d0:	10a4      	asrs	r4, r4, #2
 80067d2:	2600      	movs	r6, #0
 80067d4:	42a6      	cmp	r6, r4
 80067d6:	d109      	bne.n	80067ec <__libc_init_array+0x24>
 80067d8:	4d0b      	ldr	r5, [pc, #44]	@ (8006808 <__libc_init_array+0x40>)
 80067da:	4c0c      	ldr	r4, [pc, #48]	@ (800680c <__libc_init_array+0x44>)
 80067dc:	f000 f818 	bl	8006810 <_init>
 80067e0:	1b64      	subs	r4, r4, r5
 80067e2:	10a4      	asrs	r4, r4, #2
 80067e4:	2600      	movs	r6, #0
 80067e6:	42a6      	cmp	r6, r4
 80067e8:	d105      	bne.n	80067f6 <__libc_init_array+0x2e>
 80067ea:	bd70      	pop	{r4, r5, r6, pc}
 80067ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80067f0:	4798      	blx	r3
 80067f2:	3601      	adds	r6, #1
 80067f4:	e7ee      	b.n	80067d4 <__libc_init_array+0xc>
 80067f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80067fa:	4798      	blx	r3
 80067fc:	3601      	adds	r6, #1
 80067fe:	e7f2      	b.n	80067e6 <__libc_init_array+0x1e>
 8006800:	08006870 	.word	0x08006870
 8006804:	08006870 	.word	0x08006870
 8006808:	08006870 	.word	0x08006870
 800680c:	08006874 	.word	0x08006874

08006810 <_init>:
 8006810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006812:	bf00      	nop
 8006814:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006816:	bc08      	pop	{r3}
 8006818:	469e      	mov	lr, r3
 800681a:	4770      	bx	lr

0800681c <_fini>:
 800681c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800681e:	bf00      	nop
 8006820:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006822:	bc08      	pop	{r3}
 8006824:	469e      	mov	lr, r3
 8006826:	4770      	bx	lr
