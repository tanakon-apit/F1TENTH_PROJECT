
STM32G431KB_F1TENTH_FIRMWARE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008144  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800831c  0800831c  0000931c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800835c  0800835c  0000a00c  2**0
                  CONTENTS
  4 .ARM          00000008  0800835c  0800835c  0000935c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008364  08008364  0000a00c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008364  08008364  00009364  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008368  08008368  00009368  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800836c  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000044c  20000010  08008378  0000a010  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000045c  08008378  0000a45c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a00c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017aa8  00000000  00000000  0000a03c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003116  00000000  00000000  00021ae4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001440  00000000  00000000  00024c00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000fdb  00000000  00000000  00026040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e78d  00000000  00000000  0002701b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ab69  00000000  00000000  000457a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c61de  00000000  00000000  00060311  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001264ef  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005638  00000000  00000000  00126534  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000094  00000000  00000000  0012bb6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000010 	.word	0x20000010
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08008304 	.word	0x08008304

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000014 	.word	0x20000014
 8000214:	08008304 	.word	0x08008304

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__aeabi_d2f>:
 80009b4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009b8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80009bc:	bf24      	itt	cs
 80009be:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 80009c2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 80009c6:	d90d      	bls.n	80009e4 <__aeabi_d2f+0x30>
 80009c8:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80009cc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009d0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009d4:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80009d8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009dc:	bf08      	it	eq
 80009de:	f020 0001 	biceq.w	r0, r0, #1
 80009e2:	4770      	bx	lr
 80009e4:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 80009e8:	d121      	bne.n	8000a2e <__aeabi_d2f+0x7a>
 80009ea:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 80009ee:	bfbc      	itt	lt
 80009f0:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80009f4:	4770      	bxlt	lr
 80009f6:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009fe:	f1c2 0218 	rsb	r2, r2, #24
 8000a02:	f1c2 0c20 	rsb	ip, r2, #32
 8000a06:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a0a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a0e:	bf18      	it	ne
 8000a10:	f040 0001 	orrne.w	r0, r0, #1
 8000a14:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a18:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a1c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a20:	ea40 000c 	orr.w	r0, r0, ip
 8000a24:	fa23 f302 	lsr.w	r3, r3, r2
 8000a28:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a2c:	e7cc      	b.n	80009c8 <__aeabi_d2f+0x14>
 8000a2e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a32:	d107      	bne.n	8000a44 <__aeabi_d2f+0x90>
 8000a34:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a38:	bf1e      	ittt	ne
 8000a3a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000a3e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000a42:	4770      	bxne	lr
 8000a44:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000a48:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a4c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop

08000a54 <__aeabi_uldivmod>:
 8000a54:	b953      	cbnz	r3, 8000a6c <__aeabi_uldivmod+0x18>
 8000a56:	b94a      	cbnz	r2, 8000a6c <__aeabi_uldivmod+0x18>
 8000a58:	2900      	cmp	r1, #0
 8000a5a:	bf08      	it	eq
 8000a5c:	2800      	cmpeq	r0, #0
 8000a5e:	bf1c      	itt	ne
 8000a60:	f04f 31ff 	movne.w	r1, #4294967295
 8000a64:	f04f 30ff 	movne.w	r0, #4294967295
 8000a68:	f000 b96a 	b.w	8000d40 <__aeabi_idiv0>
 8000a6c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a70:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a74:	f000 f806 	bl	8000a84 <__udivmoddi4>
 8000a78:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a7c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a80:	b004      	add	sp, #16
 8000a82:	4770      	bx	lr

08000a84 <__udivmoddi4>:
 8000a84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a88:	9d08      	ldr	r5, [sp, #32]
 8000a8a:	460c      	mov	r4, r1
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d14e      	bne.n	8000b2e <__udivmoddi4+0xaa>
 8000a90:	4694      	mov	ip, r2
 8000a92:	458c      	cmp	ip, r1
 8000a94:	4686      	mov	lr, r0
 8000a96:	fab2 f282 	clz	r2, r2
 8000a9a:	d962      	bls.n	8000b62 <__udivmoddi4+0xde>
 8000a9c:	b14a      	cbz	r2, 8000ab2 <__udivmoddi4+0x2e>
 8000a9e:	f1c2 0320 	rsb	r3, r2, #32
 8000aa2:	4091      	lsls	r1, r2
 8000aa4:	fa20 f303 	lsr.w	r3, r0, r3
 8000aa8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000aac:	4319      	orrs	r1, r3
 8000aae:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ab2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ab6:	fa1f f68c 	uxth.w	r6, ip
 8000aba:	fbb1 f4f7 	udiv	r4, r1, r7
 8000abe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ac2:	fb07 1114 	mls	r1, r7, r4, r1
 8000ac6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000aca:	fb04 f106 	mul.w	r1, r4, r6
 8000ace:	4299      	cmp	r1, r3
 8000ad0:	d90a      	bls.n	8000ae8 <__udivmoddi4+0x64>
 8000ad2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ad6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000ada:	f080 8112 	bcs.w	8000d02 <__udivmoddi4+0x27e>
 8000ade:	4299      	cmp	r1, r3
 8000ae0:	f240 810f 	bls.w	8000d02 <__udivmoddi4+0x27e>
 8000ae4:	3c02      	subs	r4, #2
 8000ae6:	4463      	add	r3, ip
 8000ae8:	1a59      	subs	r1, r3, r1
 8000aea:	fa1f f38e 	uxth.w	r3, lr
 8000aee:	fbb1 f0f7 	udiv	r0, r1, r7
 8000af2:	fb07 1110 	mls	r1, r7, r0, r1
 8000af6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000afa:	fb00 f606 	mul.w	r6, r0, r6
 8000afe:	429e      	cmp	r6, r3
 8000b00:	d90a      	bls.n	8000b18 <__udivmoddi4+0x94>
 8000b02:	eb1c 0303 	adds.w	r3, ip, r3
 8000b06:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b0a:	f080 80fc 	bcs.w	8000d06 <__udivmoddi4+0x282>
 8000b0e:	429e      	cmp	r6, r3
 8000b10:	f240 80f9 	bls.w	8000d06 <__udivmoddi4+0x282>
 8000b14:	4463      	add	r3, ip
 8000b16:	3802      	subs	r0, #2
 8000b18:	1b9b      	subs	r3, r3, r6
 8000b1a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b1e:	2100      	movs	r1, #0
 8000b20:	b11d      	cbz	r5, 8000b2a <__udivmoddi4+0xa6>
 8000b22:	40d3      	lsrs	r3, r2
 8000b24:	2200      	movs	r2, #0
 8000b26:	e9c5 3200 	strd	r3, r2, [r5]
 8000b2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b2e:	428b      	cmp	r3, r1
 8000b30:	d905      	bls.n	8000b3e <__udivmoddi4+0xba>
 8000b32:	b10d      	cbz	r5, 8000b38 <__udivmoddi4+0xb4>
 8000b34:	e9c5 0100 	strd	r0, r1, [r5]
 8000b38:	2100      	movs	r1, #0
 8000b3a:	4608      	mov	r0, r1
 8000b3c:	e7f5      	b.n	8000b2a <__udivmoddi4+0xa6>
 8000b3e:	fab3 f183 	clz	r1, r3
 8000b42:	2900      	cmp	r1, #0
 8000b44:	d146      	bne.n	8000bd4 <__udivmoddi4+0x150>
 8000b46:	42a3      	cmp	r3, r4
 8000b48:	d302      	bcc.n	8000b50 <__udivmoddi4+0xcc>
 8000b4a:	4290      	cmp	r0, r2
 8000b4c:	f0c0 80f0 	bcc.w	8000d30 <__udivmoddi4+0x2ac>
 8000b50:	1a86      	subs	r6, r0, r2
 8000b52:	eb64 0303 	sbc.w	r3, r4, r3
 8000b56:	2001      	movs	r0, #1
 8000b58:	2d00      	cmp	r5, #0
 8000b5a:	d0e6      	beq.n	8000b2a <__udivmoddi4+0xa6>
 8000b5c:	e9c5 6300 	strd	r6, r3, [r5]
 8000b60:	e7e3      	b.n	8000b2a <__udivmoddi4+0xa6>
 8000b62:	2a00      	cmp	r2, #0
 8000b64:	f040 8090 	bne.w	8000c88 <__udivmoddi4+0x204>
 8000b68:	eba1 040c 	sub.w	r4, r1, ip
 8000b6c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b70:	fa1f f78c 	uxth.w	r7, ip
 8000b74:	2101      	movs	r1, #1
 8000b76:	fbb4 f6f8 	udiv	r6, r4, r8
 8000b7a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b7e:	fb08 4416 	mls	r4, r8, r6, r4
 8000b82:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b86:	fb07 f006 	mul.w	r0, r7, r6
 8000b8a:	4298      	cmp	r0, r3
 8000b8c:	d908      	bls.n	8000ba0 <__udivmoddi4+0x11c>
 8000b8e:	eb1c 0303 	adds.w	r3, ip, r3
 8000b92:	f106 34ff 	add.w	r4, r6, #4294967295
 8000b96:	d202      	bcs.n	8000b9e <__udivmoddi4+0x11a>
 8000b98:	4298      	cmp	r0, r3
 8000b9a:	f200 80cd 	bhi.w	8000d38 <__udivmoddi4+0x2b4>
 8000b9e:	4626      	mov	r6, r4
 8000ba0:	1a1c      	subs	r4, r3, r0
 8000ba2:	fa1f f38e 	uxth.w	r3, lr
 8000ba6:	fbb4 f0f8 	udiv	r0, r4, r8
 8000baa:	fb08 4410 	mls	r4, r8, r0, r4
 8000bae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bb2:	fb00 f707 	mul.w	r7, r0, r7
 8000bb6:	429f      	cmp	r7, r3
 8000bb8:	d908      	bls.n	8000bcc <__udivmoddi4+0x148>
 8000bba:	eb1c 0303 	adds.w	r3, ip, r3
 8000bbe:	f100 34ff 	add.w	r4, r0, #4294967295
 8000bc2:	d202      	bcs.n	8000bca <__udivmoddi4+0x146>
 8000bc4:	429f      	cmp	r7, r3
 8000bc6:	f200 80b0 	bhi.w	8000d2a <__udivmoddi4+0x2a6>
 8000bca:	4620      	mov	r0, r4
 8000bcc:	1bdb      	subs	r3, r3, r7
 8000bce:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bd2:	e7a5      	b.n	8000b20 <__udivmoddi4+0x9c>
 8000bd4:	f1c1 0620 	rsb	r6, r1, #32
 8000bd8:	408b      	lsls	r3, r1
 8000bda:	fa22 f706 	lsr.w	r7, r2, r6
 8000bde:	431f      	orrs	r7, r3
 8000be0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000be4:	fa04 f301 	lsl.w	r3, r4, r1
 8000be8:	ea43 030c 	orr.w	r3, r3, ip
 8000bec:	40f4      	lsrs	r4, r6
 8000bee:	fa00 f801 	lsl.w	r8, r0, r1
 8000bf2:	0c38      	lsrs	r0, r7, #16
 8000bf4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000bf8:	fbb4 fef0 	udiv	lr, r4, r0
 8000bfc:	fa1f fc87 	uxth.w	ip, r7
 8000c00:	fb00 441e 	mls	r4, r0, lr, r4
 8000c04:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c08:	fb0e f90c 	mul.w	r9, lr, ip
 8000c0c:	45a1      	cmp	r9, r4
 8000c0e:	fa02 f201 	lsl.w	r2, r2, r1
 8000c12:	d90a      	bls.n	8000c2a <__udivmoddi4+0x1a6>
 8000c14:	193c      	adds	r4, r7, r4
 8000c16:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000c1a:	f080 8084 	bcs.w	8000d26 <__udivmoddi4+0x2a2>
 8000c1e:	45a1      	cmp	r9, r4
 8000c20:	f240 8081 	bls.w	8000d26 <__udivmoddi4+0x2a2>
 8000c24:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c28:	443c      	add	r4, r7
 8000c2a:	eba4 0409 	sub.w	r4, r4, r9
 8000c2e:	fa1f f983 	uxth.w	r9, r3
 8000c32:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c36:	fb00 4413 	mls	r4, r0, r3, r4
 8000c3a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c3e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c42:	45a4      	cmp	ip, r4
 8000c44:	d907      	bls.n	8000c56 <__udivmoddi4+0x1d2>
 8000c46:	193c      	adds	r4, r7, r4
 8000c48:	f103 30ff 	add.w	r0, r3, #4294967295
 8000c4c:	d267      	bcs.n	8000d1e <__udivmoddi4+0x29a>
 8000c4e:	45a4      	cmp	ip, r4
 8000c50:	d965      	bls.n	8000d1e <__udivmoddi4+0x29a>
 8000c52:	3b02      	subs	r3, #2
 8000c54:	443c      	add	r4, r7
 8000c56:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000c5a:	fba0 9302 	umull	r9, r3, r0, r2
 8000c5e:	eba4 040c 	sub.w	r4, r4, ip
 8000c62:	429c      	cmp	r4, r3
 8000c64:	46ce      	mov	lr, r9
 8000c66:	469c      	mov	ip, r3
 8000c68:	d351      	bcc.n	8000d0e <__udivmoddi4+0x28a>
 8000c6a:	d04e      	beq.n	8000d0a <__udivmoddi4+0x286>
 8000c6c:	b155      	cbz	r5, 8000c84 <__udivmoddi4+0x200>
 8000c6e:	ebb8 030e 	subs.w	r3, r8, lr
 8000c72:	eb64 040c 	sbc.w	r4, r4, ip
 8000c76:	fa04 f606 	lsl.w	r6, r4, r6
 8000c7a:	40cb      	lsrs	r3, r1
 8000c7c:	431e      	orrs	r6, r3
 8000c7e:	40cc      	lsrs	r4, r1
 8000c80:	e9c5 6400 	strd	r6, r4, [r5]
 8000c84:	2100      	movs	r1, #0
 8000c86:	e750      	b.n	8000b2a <__udivmoddi4+0xa6>
 8000c88:	f1c2 0320 	rsb	r3, r2, #32
 8000c8c:	fa20 f103 	lsr.w	r1, r0, r3
 8000c90:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c94:	fa24 f303 	lsr.w	r3, r4, r3
 8000c98:	4094      	lsls	r4, r2
 8000c9a:	430c      	orrs	r4, r1
 8000c9c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ca0:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ca4:	fa1f f78c 	uxth.w	r7, ip
 8000ca8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cac:	fb08 3110 	mls	r1, r8, r0, r3
 8000cb0:	0c23      	lsrs	r3, r4, #16
 8000cb2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cb6:	fb00 f107 	mul.w	r1, r0, r7
 8000cba:	4299      	cmp	r1, r3
 8000cbc:	d908      	bls.n	8000cd0 <__udivmoddi4+0x24c>
 8000cbe:	eb1c 0303 	adds.w	r3, ip, r3
 8000cc2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000cc6:	d22c      	bcs.n	8000d22 <__udivmoddi4+0x29e>
 8000cc8:	4299      	cmp	r1, r3
 8000cca:	d92a      	bls.n	8000d22 <__udivmoddi4+0x29e>
 8000ccc:	3802      	subs	r0, #2
 8000cce:	4463      	add	r3, ip
 8000cd0:	1a5b      	subs	r3, r3, r1
 8000cd2:	b2a4      	uxth	r4, r4
 8000cd4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000cd8:	fb08 3311 	mls	r3, r8, r1, r3
 8000cdc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ce0:	fb01 f307 	mul.w	r3, r1, r7
 8000ce4:	42a3      	cmp	r3, r4
 8000ce6:	d908      	bls.n	8000cfa <__udivmoddi4+0x276>
 8000ce8:	eb1c 0404 	adds.w	r4, ip, r4
 8000cec:	f101 36ff 	add.w	r6, r1, #4294967295
 8000cf0:	d213      	bcs.n	8000d1a <__udivmoddi4+0x296>
 8000cf2:	42a3      	cmp	r3, r4
 8000cf4:	d911      	bls.n	8000d1a <__udivmoddi4+0x296>
 8000cf6:	3902      	subs	r1, #2
 8000cf8:	4464      	add	r4, ip
 8000cfa:	1ae4      	subs	r4, r4, r3
 8000cfc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d00:	e739      	b.n	8000b76 <__udivmoddi4+0xf2>
 8000d02:	4604      	mov	r4, r0
 8000d04:	e6f0      	b.n	8000ae8 <__udivmoddi4+0x64>
 8000d06:	4608      	mov	r0, r1
 8000d08:	e706      	b.n	8000b18 <__udivmoddi4+0x94>
 8000d0a:	45c8      	cmp	r8, r9
 8000d0c:	d2ae      	bcs.n	8000c6c <__udivmoddi4+0x1e8>
 8000d0e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d12:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d16:	3801      	subs	r0, #1
 8000d18:	e7a8      	b.n	8000c6c <__udivmoddi4+0x1e8>
 8000d1a:	4631      	mov	r1, r6
 8000d1c:	e7ed      	b.n	8000cfa <__udivmoddi4+0x276>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	e799      	b.n	8000c56 <__udivmoddi4+0x1d2>
 8000d22:	4630      	mov	r0, r6
 8000d24:	e7d4      	b.n	8000cd0 <__udivmoddi4+0x24c>
 8000d26:	46d6      	mov	lr, sl
 8000d28:	e77f      	b.n	8000c2a <__udivmoddi4+0x1a6>
 8000d2a:	4463      	add	r3, ip
 8000d2c:	3802      	subs	r0, #2
 8000d2e:	e74d      	b.n	8000bcc <__udivmoddi4+0x148>
 8000d30:	4606      	mov	r6, r0
 8000d32:	4623      	mov	r3, r4
 8000d34:	4608      	mov	r0, r1
 8000d36:	e70f      	b.n	8000b58 <__udivmoddi4+0xd4>
 8000d38:	3e02      	subs	r6, #2
 8000d3a:	4463      	add	r3, ip
 8000d3c:	e730      	b.n	8000ba0 <__udivmoddi4+0x11c>
 8000d3e:	bf00      	nop

08000d40 <__aeabi_idiv0>:
 8000d40:	4770      	bx	lr
 8000d42:	bf00      	nop

08000d44 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b082      	sub	sp, #8
 8000d48:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000d4a:	4b1a      	ldr	r3, [pc, #104]	@ (8000db4 <MX_DMA_Init+0x70>)
 8000d4c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000d4e:	4a19      	ldr	r2, [pc, #100]	@ (8000db4 <MX_DMA_Init+0x70>)
 8000d50:	f043 0304 	orr.w	r3, r3, #4
 8000d54:	6493      	str	r3, [r2, #72]	@ 0x48
 8000d56:	4b17      	ldr	r3, [pc, #92]	@ (8000db4 <MX_DMA_Init+0x70>)
 8000d58:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000d5a:	f003 0304 	and.w	r3, r3, #4
 8000d5e:	607b      	str	r3, [r7, #4]
 8000d60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d62:	4b14      	ldr	r3, [pc, #80]	@ (8000db4 <MX_DMA_Init+0x70>)
 8000d64:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000d66:	4a13      	ldr	r2, [pc, #76]	@ (8000db4 <MX_DMA_Init+0x70>)
 8000d68:	f043 0301 	orr.w	r3, r3, #1
 8000d6c:	6493      	str	r3, [r2, #72]	@ 0x48
 8000d6e:	4b11      	ldr	r3, [pc, #68]	@ (8000db4 <MX_DMA_Init+0x70>)
 8000d70:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000d72:	f003 0301 	and.w	r3, r3, #1
 8000d76:	603b      	str	r3, [r7, #0]
 8000d78:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	200b      	movs	r0, #11
 8000d80:	f001 f8c3 	bl	8001f0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000d84:	200b      	movs	r0, #11
 8000d86:	f001 f8da 	bl	8001f3e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	2100      	movs	r1, #0
 8000d8e:	200c      	movs	r0, #12
 8000d90:	f001 f8bb 	bl	8001f0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000d94:	200c      	movs	r0, #12
 8000d96:	f001 f8d2 	bl	8001f3e <HAL_NVIC_EnableIRQ>
  /* DMAMUX_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMAMUX_OVR_IRQn, 0, 0);
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	2100      	movs	r1, #0
 8000d9e:	205e      	movs	r0, #94	@ 0x5e
 8000da0:	f001 f8b3 	bl	8001f0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMAMUX_OVR_IRQn);
 8000da4:	205e      	movs	r0, #94	@ 0x5e
 8000da6:	f001 f8ca 	bl	8001f3e <HAL_NVIC_EnableIRQ>

}
 8000daa:	bf00      	nop
 8000dac:	3708      	adds	r7, #8
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	40021000 	.word	0x40021000

08000db8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b088      	sub	sp, #32
 8000dbc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dbe:	f107 030c 	add.w	r3, r7, #12
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	601a      	str	r2, [r3, #0]
 8000dc6:	605a      	str	r2, [r3, #4]
 8000dc8:	609a      	str	r2, [r3, #8]
 8000dca:	60da      	str	r2, [r3, #12]
 8000dcc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000dce:	4b1e      	ldr	r3, [pc, #120]	@ (8000e48 <MX_GPIO_Init+0x90>)
 8000dd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dd2:	4a1d      	ldr	r2, [pc, #116]	@ (8000e48 <MX_GPIO_Init+0x90>)
 8000dd4:	f043 0320 	orr.w	r3, r3, #32
 8000dd8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000dda:	4b1b      	ldr	r3, [pc, #108]	@ (8000e48 <MX_GPIO_Init+0x90>)
 8000ddc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dde:	f003 0320 	and.w	r3, r3, #32
 8000de2:	60bb      	str	r3, [r7, #8]
 8000de4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000de6:	4b18      	ldr	r3, [pc, #96]	@ (8000e48 <MX_GPIO_Init+0x90>)
 8000de8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dea:	4a17      	ldr	r2, [pc, #92]	@ (8000e48 <MX_GPIO_Init+0x90>)
 8000dec:	f043 0301 	orr.w	r3, r3, #1
 8000df0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000df2:	4b15      	ldr	r3, [pc, #84]	@ (8000e48 <MX_GPIO_Init+0x90>)
 8000df4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000df6:	f003 0301 	and.w	r3, r3, #1
 8000dfa:	607b      	str	r3, [r7, #4]
 8000dfc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dfe:	4b12      	ldr	r3, [pc, #72]	@ (8000e48 <MX_GPIO_Init+0x90>)
 8000e00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e02:	4a11      	ldr	r2, [pc, #68]	@ (8000e48 <MX_GPIO_Init+0x90>)
 8000e04:	f043 0302 	orr.w	r3, r3, #2
 8000e08:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e0a:	4b0f      	ldr	r3, [pc, #60]	@ (8000e48 <MX_GPIO_Init+0x90>)
 8000e0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e0e:	f003 0302 	and.w	r3, r3, #2
 8000e12:	603b      	str	r3, [r7, #0]
 8000e14:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000e16:	2200      	movs	r2, #0
 8000e18:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000e1c:	480b      	ldr	r0, [pc, #44]	@ (8000e4c <MX_GPIO_Init+0x94>)
 8000e1e:	f001 fd13 	bl	8002848 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000e22:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000e26:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e28:	2301      	movs	r3, #1
 8000e2a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e30:	2300      	movs	r3, #0
 8000e32:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000e34:	f107 030c 	add.w	r3, r7, #12
 8000e38:	4619      	mov	r1, r3
 8000e3a:	4804      	ldr	r0, [pc, #16]	@ (8000e4c <MX_GPIO_Init+0x94>)
 8000e3c:	f001 fb82 	bl	8002544 <HAL_GPIO_Init>

}
 8000e40:	bf00      	nop
 8000e42:	3720      	adds	r7, #32
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	40021000 	.word	0x40021000
 8000e4c:	48000400 	.word	0x48000400

08000e50 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c3_tx;
DMA_HandleTypeDef hdma_i2c3_rx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e54:	4b1b      	ldr	r3, [pc, #108]	@ (8000ec4 <MX_I2C1_Init+0x74>)
 8000e56:	4a1c      	ldr	r2, [pc, #112]	@ (8000ec8 <MX_I2C1_Init+0x78>)
 8000e58:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10802D9B;
 8000e5a:	4b1a      	ldr	r3, [pc, #104]	@ (8000ec4 <MX_I2C1_Init+0x74>)
 8000e5c:	4a1b      	ldr	r2, [pc, #108]	@ (8000ecc <MX_I2C1_Init+0x7c>)
 8000e5e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000e60:	4b18      	ldr	r3, [pc, #96]	@ (8000ec4 <MX_I2C1_Init+0x74>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e66:	4b17      	ldr	r3, [pc, #92]	@ (8000ec4 <MX_I2C1_Init+0x74>)
 8000e68:	2201      	movs	r2, #1
 8000e6a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e6c:	4b15      	ldr	r3, [pc, #84]	@ (8000ec4 <MX_I2C1_Init+0x74>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000e72:	4b14      	ldr	r3, [pc, #80]	@ (8000ec4 <MX_I2C1_Init+0x74>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000e78:	4b12      	ldr	r3, [pc, #72]	@ (8000ec4 <MX_I2C1_Init+0x74>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e7e:	4b11      	ldr	r3, [pc, #68]	@ (8000ec4 <MX_I2C1_Init+0x74>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e84:	4b0f      	ldr	r3, [pc, #60]	@ (8000ec4 <MX_I2C1_Init+0x74>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e8a:	480e      	ldr	r0, [pc, #56]	@ (8000ec4 <MX_I2C1_Init+0x74>)
 8000e8c:	f001 fcf4 	bl	8002878 <HAL_I2C_Init>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d001      	beq.n	8000e9a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000e96:	f000 fa57 	bl	8001348 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000e9a:	2100      	movs	r1, #0
 8000e9c:	4809      	ldr	r0, [pc, #36]	@ (8000ec4 <MX_I2C1_Init+0x74>)
 8000e9e:	f003 fe29 	bl	8004af4 <HAL_I2CEx_ConfigAnalogFilter>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d001      	beq.n	8000eac <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000ea8:	f000 fa4e 	bl	8001348 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000eac:	2100      	movs	r1, #0
 8000eae:	4805      	ldr	r0, [pc, #20]	@ (8000ec4 <MX_I2C1_Init+0x74>)
 8000eb0:	f003 fe6b 	bl	8004b8a <HAL_I2CEx_ConfigDigitalFilter>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d001      	beq.n	8000ebe <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000eba:	f000 fa45 	bl	8001348 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000ebe:	bf00      	nop
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	2000002c 	.word	0x2000002c
 8000ec8:	40005400 	.word	0x40005400
 8000ecc:	10802d9b 	.word	0x10802d9b

08000ed0 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000ed4:	4b1b      	ldr	r3, [pc, #108]	@ (8000f44 <MX_I2C3_Init+0x74>)
 8000ed6:	4a1c      	ldr	r2, [pc, #112]	@ (8000f48 <MX_I2C3_Init+0x78>)
 8000ed8:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x10802D9B;
 8000eda:	4b1a      	ldr	r3, [pc, #104]	@ (8000f44 <MX_I2C3_Init+0x74>)
 8000edc:	4a1b      	ldr	r2, [pc, #108]	@ (8000f4c <MX_I2C3_Init+0x7c>)
 8000ede:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000ee0:	4b18      	ldr	r3, [pc, #96]	@ (8000f44 <MX_I2C3_Init+0x74>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ee6:	4b17      	ldr	r3, [pc, #92]	@ (8000f44 <MX_I2C3_Init+0x74>)
 8000ee8:	2201      	movs	r2, #1
 8000eea:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000eec:	4b15      	ldr	r3, [pc, #84]	@ (8000f44 <MX_I2C3_Init+0x74>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000ef2:	4b14      	ldr	r3, [pc, #80]	@ (8000f44 <MX_I2C3_Init+0x74>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ef8:	4b12      	ldr	r3, [pc, #72]	@ (8000f44 <MX_I2C3_Init+0x74>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000efe:	4b11      	ldr	r3, [pc, #68]	@ (8000f44 <MX_I2C3_Init+0x74>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f04:	4b0f      	ldr	r3, [pc, #60]	@ (8000f44 <MX_I2C3_Init+0x74>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000f0a:	480e      	ldr	r0, [pc, #56]	@ (8000f44 <MX_I2C3_Init+0x74>)
 8000f0c:	f001 fcb4 	bl	8002878 <HAL_I2C_Init>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d001      	beq.n	8000f1a <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000f16:	f000 fa17 	bl	8001348 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000f1a:	2100      	movs	r1, #0
 8000f1c:	4809      	ldr	r0, [pc, #36]	@ (8000f44 <MX_I2C3_Init+0x74>)
 8000f1e:	f003 fde9 	bl	8004af4 <HAL_I2CEx_ConfigAnalogFilter>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d001      	beq.n	8000f2c <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000f28:	f000 fa0e 	bl	8001348 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000f2c:	2100      	movs	r1, #0
 8000f2e:	4805      	ldr	r0, [pc, #20]	@ (8000f44 <MX_I2C3_Init+0x74>)
 8000f30:	f003 fe2b 	bl	8004b8a <HAL_I2CEx_ConfigDigitalFilter>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d001      	beq.n	8000f3e <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8000f3a:	f000 fa05 	bl	8001348 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000f3e:	bf00      	nop
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	20000080 	.word	0x20000080
 8000f48:	40007800 	.word	0x40007800
 8000f4c:	10802d9b 	.word	0x10802d9b

08000f50 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b09e      	sub	sp, #120	@ 0x78
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f58:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	601a      	str	r2, [r3, #0]
 8000f60:	605a      	str	r2, [r3, #4]
 8000f62:	609a      	str	r2, [r3, #8]
 8000f64:	60da      	str	r2, [r3, #12]
 8000f66:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f68:	f107 0320 	add.w	r3, r7, #32
 8000f6c:	2244      	movs	r2, #68	@ 0x44
 8000f6e:	2100      	movs	r1, #0
 8000f70:	4618      	mov	r0, r3
 8000f72:	f007 f99b 	bl	80082ac <memset>
  if(i2cHandle->Instance==I2C1)
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	4a8c      	ldr	r2, [pc, #560]	@ (80011ac <HAL_I2C_MspInit+0x25c>)
 8000f7c:	4293      	cmp	r3, r2
 8000f7e:	d154      	bne.n	800102a <HAL_I2C_MspInit+0xda>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000f80:	2340      	movs	r3, #64	@ 0x40
 8000f82:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000f84:	2300      	movs	r3, #0
 8000f86:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f88:	f107 0320 	add.w	r3, r7, #32
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f004 fc2b 	bl	80057e8 <HAL_RCCEx_PeriphCLKConfig>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d001      	beq.n	8000f9c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000f98:	f000 f9d6 	bl	8001348 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f9c:	4b84      	ldr	r3, [pc, #528]	@ (80011b0 <HAL_I2C_MspInit+0x260>)
 8000f9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fa0:	4a83      	ldr	r2, [pc, #524]	@ (80011b0 <HAL_I2C_MspInit+0x260>)
 8000fa2:	f043 0301 	orr.w	r3, r3, #1
 8000fa6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fa8:	4b81      	ldr	r3, [pc, #516]	@ (80011b0 <HAL_I2C_MspInit+0x260>)
 8000faa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fac:	f003 0301 	and.w	r3, r3, #1
 8000fb0:	61fb      	str	r3, [r7, #28]
 8000fb2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fb4:	4b7e      	ldr	r3, [pc, #504]	@ (80011b0 <HAL_I2C_MspInit+0x260>)
 8000fb6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fb8:	4a7d      	ldr	r2, [pc, #500]	@ (80011b0 <HAL_I2C_MspInit+0x260>)
 8000fba:	f043 0302 	orr.w	r3, r3, #2
 8000fbe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fc0:	4b7b      	ldr	r3, [pc, #492]	@ (80011b0 <HAL_I2C_MspInit+0x260>)
 8000fc2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fc4:	f003 0302 	and.w	r3, r3, #2
 8000fc8:	61bb      	str	r3, [r7, #24]
 8000fca:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000fcc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000fd0:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fd2:	2312      	movs	r3, #18
 8000fd4:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000fde:	2304      	movs	r3, #4
 8000fe0:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fe2:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fec:	f001 faaa 	bl	8002544 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000ff0:	2380      	movs	r3, #128	@ 0x80
 8000ff2:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ff4:	2312      	movs	r3, #18
 8000ff6:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001000:	2304      	movs	r3, #4
 8001002:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001004:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001008:	4619      	mov	r1, r3
 800100a:	486a      	ldr	r0, [pc, #424]	@ (80011b4 <HAL_I2C_MspInit+0x264>)
 800100c:	f001 fa9a 	bl	8002544 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001010:	4b67      	ldr	r3, [pc, #412]	@ (80011b0 <HAL_I2C_MspInit+0x260>)
 8001012:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001014:	4a66      	ldr	r2, [pc, #408]	@ (80011b0 <HAL_I2C_MspInit+0x260>)
 8001016:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800101a:	6593      	str	r3, [r2, #88]	@ 0x58
 800101c:	4b64      	ldr	r3, [pc, #400]	@ (80011b0 <HAL_I2C_MspInit+0x260>)
 800101e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001020:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001024:	617b      	str	r3, [r7, #20]
 8001026:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8001028:	e0bc      	b.n	80011a4 <HAL_I2C_MspInit+0x254>
  else if(i2cHandle->Instance==I2C3)
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	4a62      	ldr	r2, [pc, #392]	@ (80011b8 <HAL_I2C_MspInit+0x268>)
 8001030:	4293      	cmp	r3, r2
 8001032:	f040 80b7 	bne.w	80011a4 <HAL_I2C_MspInit+0x254>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8001036:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800103a:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 800103c:	2300      	movs	r3, #0
 800103e:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001040:	f107 0320 	add.w	r3, r7, #32
 8001044:	4618      	mov	r0, r3
 8001046:	f004 fbcf 	bl	80057e8 <HAL_RCCEx_PeriphCLKConfig>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d001      	beq.n	8001054 <HAL_I2C_MspInit+0x104>
      Error_Handler();
 8001050:	f000 f97a 	bl	8001348 <Error_Handler>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001054:	4b56      	ldr	r3, [pc, #344]	@ (80011b0 <HAL_I2C_MspInit+0x260>)
 8001056:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001058:	4a55      	ldr	r2, [pc, #340]	@ (80011b0 <HAL_I2C_MspInit+0x260>)
 800105a:	f043 0301 	orr.w	r3, r3, #1
 800105e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001060:	4b53      	ldr	r3, [pc, #332]	@ (80011b0 <HAL_I2C_MspInit+0x260>)
 8001062:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001064:	f003 0301 	and.w	r3, r3, #1
 8001068:	613b      	str	r3, [r7, #16]
 800106a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800106c:	4b50      	ldr	r3, [pc, #320]	@ (80011b0 <HAL_I2C_MspInit+0x260>)
 800106e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001070:	4a4f      	ldr	r2, [pc, #316]	@ (80011b0 <HAL_I2C_MspInit+0x260>)
 8001072:	f043 0302 	orr.w	r3, r3, #2
 8001076:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001078:	4b4d      	ldr	r3, [pc, #308]	@ (80011b0 <HAL_I2C_MspInit+0x260>)
 800107a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800107c:	f003 0302 	and.w	r3, r3, #2
 8001080:	60fb      	str	r3, [r7, #12]
 8001082:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001084:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001088:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800108a:	2312      	movs	r3, #18
 800108c:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800108e:	2301      	movs	r3, #1
 8001090:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001092:	2300      	movs	r3, #0
 8001094:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF2_I2C3;
 8001096:	2302      	movs	r3, #2
 8001098:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800109a:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800109e:	4619      	mov	r1, r3
 80010a0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010a4:	f001 fa4e 	bl	8002544 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80010a8:	2320      	movs	r3, #32
 80010aa:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010ac:	2312      	movs	r3, #18
 80010ae:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010b0:	2301      	movs	r3, #1
 80010b2:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b4:	2300      	movs	r3, #0
 80010b6:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C3;
 80010b8:	2308      	movs	r3, #8
 80010ba:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010bc:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80010c0:	4619      	mov	r1, r3
 80010c2:	483c      	ldr	r0, [pc, #240]	@ (80011b4 <HAL_I2C_MspInit+0x264>)
 80010c4:	f001 fa3e 	bl	8002544 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80010c8:	4b39      	ldr	r3, [pc, #228]	@ (80011b0 <HAL_I2C_MspInit+0x260>)
 80010ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010cc:	4a38      	ldr	r2, [pc, #224]	@ (80011b0 <HAL_I2C_MspInit+0x260>)
 80010ce:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80010d2:	6593      	str	r3, [r2, #88]	@ 0x58
 80010d4:	4b36      	ldr	r3, [pc, #216]	@ (80011b0 <HAL_I2C_MspInit+0x260>)
 80010d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010d8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80010dc:	60bb      	str	r3, [r7, #8]
 80010de:	68bb      	ldr	r3, [r7, #8]
    hdma_i2c3_tx.Instance = DMA1_Channel1;
 80010e0:	4b36      	ldr	r3, [pc, #216]	@ (80011bc <HAL_I2C_MspInit+0x26c>)
 80010e2:	4a37      	ldr	r2, [pc, #220]	@ (80011c0 <HAL_I2C_MspInit+0x270>)
 80010e4:	601a      	str	r2, [r3, #0]
    hdma_i2c3_tx.Init.Request = DMA_REQUEST_I2C3_TX;
 80010e6:	4b35      	ldr	r3, [pc, #212]	@ (80011bc <HAL_I2C_MspInit+0x26c>)
 80010e8:	2215      	movs	r2, #21
 80010ea:	605a      	str	r2, [r3, #4]
    hdma_i2c3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80010ec:	4b33      	ldr	r3, [pc, #204]	@ (80011bc <HAL_I2C_MspInit+0x26c>)
 80010ee:	2210      	movs	r2, #16
 80010f0:	609a      	str	r2, [r3, #8]
    hdma_i2c3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80010f2:	4b32      	ldr	r3, [pc, #200]	@ (80011bc <HAL_I2C_MspInit+0x26c>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	60da      	str	r2, [r3, #12]
    hdma_i2c3_tx.Init.MemInc = DMA_MINC_DISABLE;
 80010f8:	4b30      	ldr	r3, [pc, #192]	@ (80011bc <HAL_I2C_MspInit+0x26c>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	611a      	str	r2, [r3, #16]
    hdma_i2c3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80010fe:	4b2f      	ldr	r3, [pc, #188]	@ (80011bc <HAL_I2C_MspInit+0x26c>)
 8001100:	2200      	movs	r2, #0
 8001102:	615a      	str	r2, [r3, #20]
    hdma_i2c3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001104:	4b2d      	ldr	r3, [pc, #180]	@ (80011bc <HAL_I2C_MspInit+0x26c>)
 8001106:	2200      	movs	r2, #0
 8001108:	619a      	str	r2, [r3, #24]
    hdma_i2c3_tx.Init.Mode = DMA_NORMAL;
 800110a:	4b2c      	ldr	r3, [pc, #176]	@ (80011bc <HAL_I2C_MspInit+0x26c>)
 800110c:	2200      	movs	r2, #0
 800110e:	61da      	str	r2, [r3, #28]
    hdma_i2c3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001110:	4b2a      	ldr	r3, [pc, #168]	@ (80011bc <HAL_I2C_MspInit+0x26c>)
 8001112:	2200      	movs	r2, #0
 8001114:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c3_tx) != HAL_OK)
 8001116:	4829      	ldr	r0, [pc, #164]	@ (80011bc <HAL_I2C_MspInit+0x26c>)
 8001118:	f000 ff2c 	bl	8001f74 <HAL_DMA_Init>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d001      	beq.n	8001126 <HAL_I2C_MspInit+0x1d6>
      Error_Handler();
 8001122:	f000 f911 	bl	8001348 <Error_Handler>
    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c3_tx);
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	4a24      	ldr	r2, [pc, #144]	@ (80011bc <HAL_I2C_MspInit+0x26c>)
 800112a:	639a      	str	r2, [r3, #56]	@ 0x38
 800112c:	4a23      	ldr	r2, [pc, #140]	@ (80011bc <HAL_I2C_MspInit+0x26c>)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	6293      	str	r3, [r2, #40]	@ 0x28
    hdma_i2c3_rx.Instance = DMA1_Channel2;
 8001132:	4b24      	ldr	r3, [pc, #144]	@ (80011c4 <HAL_I2C_MspInit+0x274>)
 8001134:	4a24      	ldr	r2, [pc, #144]	@ (80011c8 <HAL_I2C_MspInit+0x278>)
 8001136:	601a      	str	r2, [r3, #0]
    hdma_i2c3_rx.Init.Request = DMA_REQUEST_I2C3_RX;
 8001138:	4b22      	ldr	r3, [pc, #136]	@ (80011c4 <HAL_I2C_MspInit+0x274>)
 800113a:	2214      	movs	r2, #20
 800113c:	605a      	str	r2, [r3, #4]
    hdma_i2c3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800113e:	4b21      	ldr	r3, [pc, #132]	@ (80011c4 <HAL_I2C_MspInit+0x274>)
 8001140:	2200      	movs	r2, #0
 8001142:	609a      	str	r2, [r3, #8]
    hdma_i2c3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001144:	4b1f      	ldr	r3, [pc, #124]	@ (80011c4 <HAL_I2C_MspInit+0x274>)
 8001146:	2200      	movs	r2, #0
 8001148:	60da      	str	r2, [r3, #12]
    hdma_i2c3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800114a:	4b1e      	ldr	r3, [pc, #120]	@ (80011c4 <HAL_I2C_MspInit+0x274>)
 800114c:	2280      	movs	r2, #128	@ 0x80
 800114e:	611a      	str	r2, [r3, #16]
    hdma_i2c3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001150:	4b1c      	ldr	r3, [pc, #112]	@ (80011c4 <HAL_I2C_MspInit+0x274>)
 8001152:	2200      	movs	r2, #0
 8001154:	615a      	str	r2, [r3, #20]
    hdma_i2c3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001156:	4b1b      	ldr	r3, [pc, #108]	@ (80011c4 <HAL_I2C_MspInit+0x274>)
 8001158:	2200      	movs	r2, #0
 800115a:	619a      	str	r2, [r3, #24]
    hdma_i2c3_rx.Init.Mode = DMA_NORMAL;
 800115c:	4b19      	ldr	r3, [pc, #100]	@ (80011c4 <HAL_I2C_MspInit+0x274>)
 800115e:	2200      	movs	r2, #0
 8001160:	61da      	str	r2, [r3, #28]
    hdma_i2c3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001162:	4b18      	ldr	r3, [pc, #96]	@ (80011c4 <HAL_I2C_MspInit+0x274>)
 8001164:	2200      	movs	r2, #0
 8001166:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c3_rx) != HAL_OK)
 8001168:	4816      	ldr	r0, [pc, #88]	@ (80011c4 <HAL_I2C_MspInit+0x274>)
 800116a:	f000 ff03 	bl	8001f74 <HAL_DMA_Init>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d001      	beq.n	8001178 <HAL_I2C_MspInit+0x228>
      Error_Handler();
 8001174:	f000 f8e8 	bl	8001348 <Error_Handler>
    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c3_rx);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	4a12      	ldr	r2, [pc, #72]	@ (80011c4 <HAL_I2C_MspInit+0x274>)
 800117c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800117e:	4a11      	ldr	r2, [pc, #68]	@ (80011c4 <HAL_I2C_MspInit+0x274>)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 0, 0);
 8001184:	2200      	movs	r2, #0
 8001186:	2100      	movs	r1, #0
 8001188:	205c      	movs	r0, #92	@ 0x5c
 800118a:	f000 febe 	bl	8001f0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 800118e:	205c      	movs	r0, #92	@ 0x5c
 8001190:	f000 fed5 	bl	8001f3e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C3_ER_IRQn, 0, 0);
 8001194:	2200      	movs	r2, #0
 8001196:	2100      	movs	r1, #0
 8001198:	205d      	movs	r0, #93	@ 0x5d
 800119a:	f000 feb6 	bl	8001f0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
 800119e:	205d      	movs	r0, #93	@ 0x5d
 80011a0:	f000 fecd 	bl	8001f3e <HAL_NVIC_EnableIRQ>
}
 80011a4:	bf00      	nop
 80011a6:	3778      	adds	r7, #120	@ 0x78
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	40005400 	.word	0x40005400
 80011b0:	40021000 	.word	0x40021000
 80011b4:	48000400 	.word	0x48000400
 80011b8:	40007800 	.word	0x40007800
 80011bc:	200000d4 	.word	0x200000d4
 80011c0:	40020008 	.word	0x40020008
 80011c4:	20000134 	.word	0x20000134
 80011c8:	4002001c 	.word	0x4002001c

080011cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011d0:	f000 fd2d 	bl	8001c2e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011d4:	f000 f832 	bl	800123c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011d8:	f7ff fdee 	bl	8000db8 <MX_GPIO_Init>
  MX_DMA_Init();
 80011dc:	f7ff fdb2 	bl	8000d44 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80011e0:	f000 fc58 	bl	8001a94 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80011e4:	f7ff fe34 	bl	8000e50 <MX_I2C1_Init>
  MX_TIM3_Init();
 80011e8:	f000 f994 	bl	8001514 <MX_TIM3_Init>
  MX_TIM4_Init();
 80011ec:	f000 f9e8 	bl	80015c0 <MX_TIM4_Init>
  MX_I2C3_Init();
 80011f0:	f7ff fe6e 	bl	8000ed0 <MX_I2C3_Init>
  MX_TIM2_Init();
 80011f4:	f000 f944 	bl	8001480 <MX_TIM2_Init>
  MX_TIM8_Init();
 80011f8:	f000 fa38 	bl	800166c <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */
  CHECK(BNO055_Init(&bno, &hi2c3, 0, NDOF))
 80011fc:	e002      	b.n	8001204 <main+0x38>
 80011fe:	2064      	movs	r0, #100	@ 0x64
 8001200:	f000 fd86 	bl	8001d10 <HAL_Delay>
 8001204:	230c      	movs	r3, #12
 8001206:	2200      	movs	r2, #0
 8001208:	4909      	ldr	r1, [pc, #36]	@ (8001230 <main+0x64>)
 800120a:	480a      	ldr	r0, [pc, #40]	@ (8001234 <main+0x68>)
 800120c:	f006 fcda 	bl	8007bc4 <BNO055_Init>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d1f3      	bne.n	80011fe <main+0x32>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	if (bno_flag == HAL_OK)
 8001216:	4b08      	ldr	r3, [pc, #32]	@ (8001238 <main+0x6c>)
 8001218:	781b      	ldrb	r3, [r3, #0]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d1fb      	bne.n	8001216 <main+0x4a>
	{
		BNO055_Read_DMA(&bno, 0);
 800121e:	2100      	movs	r1, #0
 8001220:	4804      	ldr	r0, [pc, #16]	@ (8001234 <main+0x68>)
 8001222:	f006 fdad 	bl	8007d80 <BNO055_Read_DMA>
		bno_flag = HAL_BUSY;
 8001226:	4b04      	ldr	r3, [pc, #16]	@ (8001238 <main+0x6c>)
 8001228:	2202      	movs	r2, #2
 800122a:	701a      	strb	r2, [r3, #0]
	if (bno_flag == HAL_OK)
 800122c:	e7f3      	b.n	8001216 <main+0x4a>
 800122e:	bf00      	nop
 8001230:	20000080 	.word	0x20000080
 8001234:	20000198 	.word	0x20000198
 8001238:	20000288 	.word	0x20000288

0800123c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b094      	sub	sp, #80	@ 0x50
 8001240:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001242:	f107 0318 	add.w	r3, r7, #24
 8001246:	2238      	movs	r2, #56	@ 0x38
 8001248:	2100      	movs	r1, #0
 800124a:	4618      	mov	r0, r3
 800124c:	f007 f82e 	bl	80082ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001250:	1d3b      	adds	r3, r7, #4
 8001252:	2200      	movs	r2, #0
 8001254:	601a      	str	r2, [r3, #0]
 8001256:	605a      	str	r2, [r3, #4]
 8001258:	609a      	str	r2, [r3, #8]
 800125a:	60da      	str	r2, [r3, #12]
 800125c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800125e:	2000      	movs	r0, #0
 8001260:	f003 fce0 	bl	8004c24 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001264:	2302      	movs	r3, #2
 8001266:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001268:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800126c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800126e:	2340      	movs	r3, #64	@ 0x40
 8001270:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001272:	2302      	movs	r3, #2
 8001274:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001276:	2302      	movs	r3, #2
 8001278:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800127a:	2304      	movs	r3, #4
 800127c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800127e:	2355      	movs	r3, #85	@ 0x55
 8001280:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001282:	2302      	movs	r3, #2
 8001284:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001286:	2302      	movs	r3, #2
 8001288:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800128a:	2302      	movs	r3, #2
 800128c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800128e:	f107 0318 	add.w	r3, r7, #24
 8001292:	4618      	mov	r0, r3
 8001294:	f003 fd7a 	bl	8004d8c <HAL_RCC_OscConfig>
 8001298:	4603      	mov	r3, r0
 800129a:	2b00      	cmp	r3, #0
 800129c:	d001      	beq.n	80012a2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800129e:	f000 f853 	bl	8001348 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012a2:	230f      	movs	r3, #15
 80012a4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012a6:	2303      	movs	r3, #3
 80012a8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012aa:	2300      	movs	r3, #0
 80012ac:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80012ae:	2300      	movs	r3, #0
 80012b0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012b2:	2300      	movs	r3, #0
 80012b4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80012b6:	1d3b      	adds	r3, r7, #4
 80012b8:	2104      	movs	r1, #4
 80012ba:	4618      	mov	r0, r3
 80012bc:	f004 f878 	bl	80053b0 <HAL_RCC_ClockConfig>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d001      	beq.n	80012ca <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80012c6:	f000 f83f 	bl	8001348 <Error_Handler>
  }
}
 80012ca:	bf00      	nop
 80012cc:	3750      	adds	r7, #80	@ 0x50
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
	...

080012d4 <HAL_I2C_MemRxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b082      	sub	sp, #8
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
	static uint32_t prev_time = 0;
	if (hi2c->Instance == bno.hi2cx->Instance)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681a      	ldr	r2, [r3, #0]
 80012e0:	4b14      	ldr	r3, [pc, #80]	@ (8001334 <HAL_I2C_MemRxCpltCallback+0x60>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	429a      	cmp	r2, r3
 80012e8:	d120      	bne.n	800132c <HAL_I2C_MemRxCpltCallback+0x58>
	{
		bno_flag = HAL_OK;
 80012ea:	4b13      	ldr	r3, [pc, #76]	@ (8001338 <HAL_I2C_MemRxCpltCallback+0x64>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	701a      	strb	r2, [r3, #0]
		fps = 1000.0 / (HAL_GetTick() - prev_time);
 80012f0:	f000 fd02 	bl	8001cf8 <HAL_GetTick>
 80012f4:	4602      	mov	r2, r0
 80012f6:	4b11      	ldr	r3, [pc, #68]	@ (800133c <HAL_I2C_MemRxCpltCallback+0x68>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	1ad3      	subs	r3, r2, r3
 80012fc:	4618      	mov	r0, r3
 80012fe:	f7ff f8cd 	bl	800049c <__aeabi_ui2d>
 8001302:	4602      	mov	r2, r0
 8001304:	460b      	mov	r3, r1
 8001306:	f04f 0000 	mov.w	r0, #0
 800130a:	490d      	ldr	r1, [pc, #52]	@ (8001340 <HAL_I2C_MemRxCpltCallback+0x6c>)
 800130c:	f7ff fa6a 	bl	80007e4 <__aeabi_ddiv>
 8001310:	4602      	mov	r2, r0
 8001312:	460b      	mov	r3, r1
 8001314:	4610      	mov	r0, r2
 8001316:	4619      	mov	r1, r3
 8001318:	f7ff fb4c 	bl	80009b4 <__aeabi_d2f>
 800131c:	4603      	mov	r3, r0
 800131e:	4a09      	ldr	r2, [pc, #36]	@ (8001344 <HAL_I2C_MemRxCpltCallback+0x70>)
 8001320:	6013      	str	r3, [r2, #0]
		prev_time = HAL_GetTick();
 8001322:	f000 fce9 	bl	8001cf8 <HAL_GetTick>
 8001326:	4603      	mov	r3, r0
 8001328:	4a04      	ldr	r2, [pc, #16]	@ (800133c <HAL_I2C_MemRxCpltCallback+0x68>)
 800132a:	6013      	str	r3, [r2, #0]
	}
}
 800132c:	bf00      	nop
 800132e:	3708      	adds	r7, #8
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	20000198 	.word	0x20000198
 8001338:	20000288 	.word	0x20000288
 800133c:	20000290 	.word	0x20000290
 8001340:	408f4000 	.word	0x408f4000
 8001344:	2000028c 	.word	0x2000028c

08001348 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800134c:	b672      	cpsid	i
}
 800134e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001350:	bf00      	nop
 8001352:	e7fd      	b.n	8001350 <Error_Handler+0x8>

08001354 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b082      	sub	sp, #8
 8001358:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800135a:	4b0f      	ldr	r3, [pc, #60]	@ (8001398 <HAL_MspInit+0x44>)
 800135c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800135e:	4a0e      	ldr	r2, [pc, #56]	@ (8001398 <HAL_MspInit+0x44>)
 8001360:	f043 0301 	orr.w	r3, r3, #1
 8001364:	6613      	str	r3, [r2, #96]	@ 0x60
 8001366:	4b0c      	ldr	r3, [pc, #48]	@ (8001398 <HAL_MspInit+0x44>)
 8001368:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800136a:	f003 0301 	and.w	r3, r3, #1
 800136e:	607b      	str	r3, [r7, #4]
 8001370:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001372:	4b09      	ldr	r3, [pc, #36]	@ (8001398 <HAL_MspInit+0x44>)
 8001374:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001376:	4a08      	ldr	r2, [pc, #32]	@ (8001398 <HAL_MspInit+0x44>)
 8001378:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800137c:	6593      	str	r3, [r2, #88]	@ 0x58
 800137e:	4b06      	ldr	r3, [pc, #24]	@ (8001398 <HAL_MspInit+0x44>)
 8001380:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001382:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001386:	603b      	str	r3, [r7, #0]
 8001388:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800138a:	f003 fcef 	bl	8004d6c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800138e:	bf00      	nop
 8001390:	3708      	adds	r7, #8
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	40021000 	.word	0x40021000

0800139c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80013a0:	bf00      	nop
 80013a2:	e7fd      	b.n	80013a0 <NMI_Handler+0x4>

080013a4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013a8:	bf00      	nop
 80013aa:	e7fd      	b.n	80013a8 <HardFault_Handler+0x4>

080013ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013ac:	b480      	push	{r7}
 80013ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013b0:	bf00      	nop
 80013b2:	e7fd      	b.n	80013b0 <MemManage_Handler+0x4>

080013b4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013b8:	bf00      	nop
 80013ba:	e7fd      	b.n	80013b8 <BusFault_Handler+0x4>

080013bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013c0:	bf00      	nop
 80013c2:	e7fd      	b.n	80013c0 <UsageFault_Handler+0x4>

080013c4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013c4:	b480      	push	{r7}
 80013c6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013c8:	bf00      	nop
 80013ca:	46bd      	mov	sp, r7
 80013cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d0:	4770      	bx	lr

080013d2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013d2:	b480      	push	{r7}
 80013d4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013d6:	bf00      	nop
 80013d8:	46bd      	mov	sp, r7
 80013da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013de:	4770      	bx	lr

080013e0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013e4:	bf00      	nop
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr

080013ee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013ee:	b580      	push	{r7, lr}
 80013f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013f2:	f000 fc6f 	bl	8001cd4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013f6:	bf00      	nop
 80013f8:	bd80      	pop	{r7, pc}
	...

080013fc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c3_tx);
 8001400:	4802      	ldr	r0, [pc, #8]	@ (800140c <DMA1_Channel1_IRQHandler+0x10>)
 8001402:	f000 ff41 	bl	8002288 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001406:	bf00      	nop
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	200000d4 	.word	0x200000d4

08001410 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c3_rx);
 8001414:	4802      	ldr	r0, [pc, #8]	@ (8001420 <DMA1_Channel2_IRQHandler+0x10>)
 8001416:	f000 ff37 	bl	8002288 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800141a:	bf00      	nop
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	20000134 	.word	0x20000134

08001424 <I2C3_EV_IRQHandler>:

/**
  * @brief This function handles I2C3 event interrupt / I2C3 wake-up interrupt through EXTI line 27.
  */
void I2C3_EV_IRQHandler(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c3);
 8001428:	4802      	ldr	r0, [pc, #8]	@ (8001434 <I2C3_EV_IRQHandler+0x10>)
 800142a:	f001 fdd5 	bl	8002fd8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C3_EV_IRQn 1 */

  /* USER CODE END I2C3_EV_IRQn 1 */
}
 800142e:	bf00      	nop
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	20000080 	.word	0x20000080

08001438 <I2C3_ER_IRQHandler>:

/**
  * @brief This function handles I2C3 error interrupt.
  */
void I2C3_ER_IRQHandler(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_ER_IRQn 0 */

  /* USER CODE END I2C3_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c3);
 800143c:	4802      	ldr	r0, [pc, #8]	@ (8001448 <I2C3_ER_IRQHandler+0x10>)
 800143e:	f001 fde5 	bl	800300c <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C3_ER_IRQn 1 */

  /* USER CODE END I2C3_ER_IRQn 1 */
}
 8001442:	bf00      	nop
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	20000080 	.word	0x20000080

0800144c <DMAMUX_OVR_IRQHandler>:

/**
  * @brief This function handles DMAMUX overrun interrupt.
  */
void DMAMUX_OVR_IRQHandler(void)
{
 800144c:	b480      	push	{r7}
 800144e:	af00      	add	r7, sp, #0
  /* USER CODE END DMAMUX_OVR_IRQn 0 */

  /* USER CODE BEGIN DMAMUX_OVR_IRQn 1 */

  /* USER CODE END DMAMUX_OVR_IRQn 1 */
}
 8001450:	bf00      	nop
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr
	...

0800145c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001460:	4b06      	ldr	r3, [pc, #24]	@ (800147c <SystemInit+0x20>)
 8001462:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001466:	4a05      	ldr	r2, [pc, #20]	@ (800147c <SystemInit+0x20>)
 8001468:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800146c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001470:	bf00      	nop
 8001472:	46bd      	mov	sp, r7
 8001474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001478:	4770      	bx	lr
 800147a:	bf00      	nop
 800147c:	e000ed00 	.word	0xe000ed00

08001480 <MX_TIM2_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim8;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b088      	sub	sp, #32
 8001484:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_HallSensor_InitTypeDef sConfig = {0};
 8001486:	f107 0310 	add.w	r3, r7, #16
 800148a:	2200      	movs	r2, #0
 800148c:	601a      	str	r2, [r3, #0]
 800148e:	605a      	str	r2, [r3, #4]
 8001490:	609a      	str	r2, [r3, #8]
 8001492:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001494:	1d3b      	adds	r3, r7, #4
 8001496:	2200      	movs	r2, #0
 8001498:	601a      	str	r2, [r3, #0]
 800149a:	605a      	str	r2, [r3, #4]
 800149c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800149e:	4b1c      	ldr	r3, [pc, #112]	@ (8001510 <MX_TIM2_Init+0x90>)
 80014a0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80014a4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80014a6:	4b1a      	ldr	r3, [pc, #104]	@ (8001510 <MX_TIM2_Init+0x90>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014ac:	4b18      	ldr	r3, [pc, #96]	@ (8001510 <MX_TIM2_Init+0x90>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80014b2:	4b17      	ldr	r3, [pc, #92]	@ (8001510 <MX_TIM2_Init+0x90>)
 80014b4:	f04f 32ff 	mov.w	r2, #4294967295
 80014b8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014ba:	4b15      	ldr	r3, [pc, #84]	@ (8001510 <MX_TIM2_Init+0x90>)
 80014bc:	2200      	movs	r2, #0
 80014be:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014c0:	4b13      	ldr	r3, [pc, #76]	@ (8001510 <MX_TIM2_Init+0x90>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	619a      	str	r2, [r3, #24]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80014c6:	2300      	movs	r3, #0
 80014c8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80014ca:	2300      	movs	r3, #0
 80014cc:	617b      	str	r3, [r7, #20]
  sConfig.IC1Filter = 0;
 80014ce:	2300      	movs	r3, #0
 80014d0:	61bb      	str	r3, [r7, #24]
  sConfig.Commutation_Delay = 0;
 80014d2:	2300      	movs	r3, #0
 80014d4:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_HallSensor_Init(&htim2, &sConfig) != HAL_OK)
 80014d6:	f107 0310 	add.w	r3, r7, #16
 80014da:	4619      	mov	r1, r3
 80014dc:	480c      	ldr	r0, [pc, #48]	@ (8001510 <MX_TIM2_Init+0x90>)
 80014de:	f005 fb75 	bl	8006bcc <HAL_TIMEx_HallSensor_Init>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d001      	beq.n	80014ec <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 80014e8:	f7ff ff2e 	bl	8001348 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 80014ec:	2350      	movs	r3, #80	@ 0x50
 80014ee:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014f0:	2300      	movs	r3, #0
 80014f2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80014f4:	1d3b      	adds	r3, r7, #4
 80014f6:	4619      	mov	r1, r3
 80014f8:	4805      	ldr	r0, [pc, #20]	@ (8001510 <MX_TIM2_Init+0x90>)
 80014fa:	f005 fc17 	bl	8006d2c <HAL_TIMEx_MasterConfigSynchronization>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d001      	beq.n	8001508 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 8001504:	f7ff ff20 	bl	8001348 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001508:	bf00      	nop
 800150a:	3720      	adds	r7, #32
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}
 8001510:	20000294 	.word	0x20000294

08001514 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b08c      	sub	sp, #48	@ 0x30
 8001518:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800151a:	f107 030c 	add.w	r3, r7, #12
 800151e:	2224      	movs	r2, #36	@ 0x24
 8001520:	2100      	movs	r1, #0
 8001522:	4618      	mov	r0, r3
 8001524:	f006 fec2 	bl	80082ac <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001528:	463b      	mov	r3, r7
 800152a:	2200      	movs	r2, #0
 800152c:	601a      	str	r2, [r3, #0]
 800152e:	605a      	str	r2, [r3, #4]
 8001530:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001532:	4b21      	ldr	r3, [pc, #132]	@ (80015b8 <MX_TIM3_Init+0xa4>)
 8001534:	4a21      	ldr	r2, [pc, #132]	@ (80015bc <MX_TIM3_Init+0xa8>)
 8001536:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001538:	4b1f      	ldr	r3, [pc, #124]	@ (80015b8 <MX_TIM3_Init+0xa4>)
 800153a:	2200      	movs	r2, #0
 800153c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800153e:	4b1e      	ldr	r3, [pc, #120]	@ (80015b8 <MX_TIM3_Init+0xa4>)
 8001540:	2200      	movs	r2, #0
 8001542:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001544:	4b1c      	ldr	r3, [pc, #112]	@ (80015b8 <MX_TIM3_Init+0xa4>)
 8001546:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800154a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800154c:	4b1a      	ldr	r3, [pc, #104]	@ (80015b8 <MX_TIM3_Init+0xa4>)
 800154e:	2200      	movs	r2, #0
 8001550:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001552:	4b19      	ldr	r3, [pc, #100]	@ (80015b8 <MX_TIM3_Init+0xa4>)
 8001554:	2200      	movs	r2, #0
 8001556:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001558:	2301      	movs	r3, #1
 800155a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800155c:	2300      	movs	r3, #0
 800155e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001560:	2301      	movs	r3, #1
 8001562:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001564:	2300      	movs	r3, #0
 8001566:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001568:	2300      	movs	r3, #0
 800156a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800156c:	2300      	movs	r3, #0
 800156e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001570:	2301      	movs	r3, #1
 8001572:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001574:	2300      	movs	r3, #0
 8001576:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001578:	2300      	movs	r3, #0
 800157a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800157c:	f107 030c 	add.w	r3, r7, #12
 8001580:	4619      	mov	r1, r3
 8001582:	480d      	ldr	r0, [pc, #52]	@ (80015b8 <MX_TIM3_Init+0xa4>)
 8001584:	f004 fbd8 	bl	8005d38 <HAL_TIM_Encoder_Init>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d001      	beq.n	8001592 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 800158e:	f7ff fedb 	bl	8001348 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001592:	2300      	movs	r3, #0
 8001594:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001596:	2300      	movs	r3, #0
 8001598:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800159a:	463b      	mov	r3, r7
 800159c:	4619      	mov	r1, r3
 800159e:	4806      	ldr	r0, [pc, #24]	@ (80015b8 <MX_TIM3_Init+0xa4>)
 80015a0:	f005 fbc4 	bl	8006d2c <HAL_TIMEx_MasterConfigSynchronization>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d001      	beq.n	80015ae <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 80015aa:	f7ff fecd 	bl	8001348 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80015ae:	bf00      	nop
 80015b0:	3730      	adds	r7, #48	@ 0x30
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	200002e0 	.word	0x200002e0
 80015bc:	40000400 	.word	0x40000400

080015c0 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b08c      	sub	sp, #48	@ 0x30
 80015c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80015c6:	f107 030c 	add.w	r3, r7, #12
 80015ca:	2224      	movs	r2, #36	@ 0x24
 80015cc:	2100      	movs	r1, #0
 80015ce:	4618      	mov	r0, r3
 80015d0:	f006 fe6c 	bl	80082ac <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015d4:	463b      	mov	r3, r7
 80015d6:	2200      	movs	r2, #0
 80015d8:	601a      	str	r2, [r3, #0]
 80015da:	605a      	str	r2, [r3, #4]
 80015dc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80015de:	4b21      	ldr	r3, [pc, #132]	@ (8001664 <MX_TIM4_Init+0xa4>)
 80015e0:	4a21      	ldr	r2, [pc, #132]	@ (8001668 <MX_TIM4_Init+0xa8>)
 80015e2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80015e4:	4b1f      	ldr	r3, [pc, #124]	@ (8001664 <MX_TIM4_Init+0xa4>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015ea:	4b1e      	ldr	r3, [pc, #120]	@ (8001664 <MX_TIM4_Init+0xa4>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80015f0:	4b1c      	ldr	r3, [pc, #112]	@ (8001664 <MX_TIM4_Init+0xa4>)
 80015f2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80015f6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015f8:	4b1a      	ldr	r3, [pc, #104]	@ (8001664 <MX_TIM4_Init+0xa4>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015fe:	4b19      	ldr	r3, [pc, #100]	@ (8001664 <MX_TIM4_Init+0xa4>)
 8001600:	2200      	movs	r2, #0
 8001602:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001604:	2301      	movs	r3, #1
 8001606:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001608:	2300      	movs	r3, #0
 800160a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800160c:	2301      	movs	r3, #1
 800160e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001610:	2300      	movs	r3, #0
 8001612:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001614:	2300      	movs	r3, #0
 8001616:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001618:	2300      	movs	r3, #0
 800161a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800161c:	2301      	movs	r3, #1
 800161e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001620:	2300      	movs	r3, #0
 8001622:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001624:	2300      	movs	r3, #0
 8001626:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001628:	f107 030c 	add.w	r3, r7, #12
 800162c:	4619      	mov	r1, r3
 800162e:	480d      	ldr	r0, [pc, #52]	@ (8001664 <MX_TIM4_Init+0xa4>)
 8001630:	f004 fb82 	bl	8005d38 <HAL_TIM_Encoder_Init>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d001      	beq.n	800163e <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 800163a:	f7ff fe85 	bl	8001348 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800163e:	2300      	movs	r3, #0
 8001640:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001642:	2300      	movs	r3, #0
 8001644:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001646:	463b      	mov	r3, r7
 8001648:	4619      	mov	r1, r3
 800164a:	4806      	ldr	r0, [pc, #24]	@ (8001664 <MX_TIM4_Init+0xa4>)
 800164c:	f005 fb6e 	bl	8006d2c <HAL_TIMEx_MasterConfigSynchronization>
 8001650:	4603      	mov	r3, r0
 8001652:	2b00      	cmp	r3, #0
 8001654:	d001      	beq.n	800165a <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8001656:	f7ff fe77 	bl	8001348 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800165a:	bf00      	nop
 800165c:	3730      	adds	r7, #48	@ 0x30
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	2000032c 	.word	0x2000032c
 8001668:	40000800 	.word	0x40000800

0800166c <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b09c      	sub	sp, #112	@ 0x70
 8001670:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001672:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001676:	2200      	movs	r2, #0
 8001678:	601a      	str	r2, [r3, #0]
 800167a:	605a      	str	r2, [r3, #4]
 800167c:	609a      	str	r2, [r3, #8]
 800167e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001680:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001684:	2200      	movs	r2, #0
 8001686:	601a      	str	r2, [r3, #0]
 8001688:	605a      	str	r2, [r3, #4]
 800168a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800168c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001690:	2200      	movs	r2, #0
 8001692:	601a      	str	r2, [r3, #0]
 8001694:	605a      	str	r2, [r3, #4]
 8001696:	609a      	str	r2, [r3, #8]
 8001698:	60da      	str	r2, [r3, #12]
 800169a:	611a      	str	r2, [r3, #16]
 800169c:	615a      	str	r2, [r3, #20]
 800169e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80016a0:	1d3b      	adds	r3, r7, #4
 80016a2:	2234      	movs	r2, #52	@ 0x34
 80016a4:	2100      	movs	r1, #0
 80016a6:	4618      	mov	r0, r3
 80016a8:	f006 fe00 	bl	80082ac <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80016ac:	4b4b      	ldr	r3, [pc, #300]	@ (80017dc <MX_TIM8_Init+0x170>)
 80016ae:	4a4c      	ldr	r2, [pc, #304]	@ (80017e0 <MX_TIM8_Init+0x174>)
 80016b0:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80016b2:	4b4a      	ldr	r3, [pc, #296]	@ (80017dc <MX_TIM8_Init+0x170>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016b8:	4b48      	ldr	r3, [pc, #288]	@ (80017dc <MX_TIM8_Init+0x170>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80016be:	4b47      	ldr	r3, [pc, #284]	@ (80017dc <MX_TIM8_Init+0x170>)
 80016c0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80016c4:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016c6:	4b45      	ldr	r3, [pc, #276]	@ (80017dc <MX_TIM8_Init+0x170>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80016cc:	4b43      	ldr	r3, [pc, #268]	@ (80017dc <MX_TIM8_Init+0x170>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016d2:	4b42      	ldr	r3, [pc, #264]	@ (80017dc <MX_TIM8_Init+0x170>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80016d8:	4840      	ldr	r0, [pc, #256]	@ (80017dc <MX_TIM8_Init+0x170>)
 80016da:	f004 fa75 	bl	8005bc8 <HAL_TIM_Base_Init>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d001      	beq.n	80016e8 <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 80016e4:	f7ff fe30 	bl	8001348 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016e8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80016ec:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80016ee:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80016f2:	4619      	mov	r1, r3
 80016f4:	4839      	ldr	r0, [pc, #228]	@ (80017dc <MX_TIM8_Init+0x170>)
 80016f6:	f004 fcd9 	bl	80060ac <HAL_TIM_ConfigClockSource>
 80016fa:	4603      	mov	r3, r0
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d001      	beq.n	8001704 <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 8001700:	f7ff fe22 	bl	8001348 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001704:	4835      	ldr	r0, [pc, #212]	@ (80017dc <MX_TIM8_Init+0x170>)
 8001706:	f004 fab6 	bl	8005c76 <HAL_TIM_PWM_Init>
 800170a:	4603      	mov	r3, r0
 800170c:	2b00      	cmp	r3, #0
 800170e:	d001      	beq.n	8001714 <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 8001710:	f7ff fe1a 	bl	8001348 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001714:	2300      	movs	r3, #0
 8001716:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001718:	2300      	movs	r3, #0
 800171a:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800171c:	2300      	movs	r3, #0
 800171e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001720:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001724:	4619      	mov	r1, r3
 8001726:	482d      	ldr	r0, [pc, #180]	@ (80017dc <MX_TIM8_Init+0x170>)
 8001728:	f005 fb00 	bl	8006d2c <HAL_TIMEx_MasterConfigSynchronization>
 800172c:	4603      	mov	r3, r0
 800172e:	2b00      	cmp	r3, #0
 8001730:	d001      	beq.n	8001736 <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 8001732:	f7ff fe09 	bl	8001348 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001736:	2360      	movs	r3, #96	@ 0x60
 8001738:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 800173a:	2300      	movs	r3, #0
 800173c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800173e:	2300      	movs	r3, #0
 8001740:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001742:	2300      	movs	r3, #0
 8001744:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001746:	2300      	movs	r3, #0
 8001748:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800174a:	2300      	movs	r3, #0
 800174c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800174e:	2300      	movs	r3, #0
 8001750:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001752:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001756:	2200      	movs	r2, #0
 8001758:	4619      	mov	r1, r3
 800175a:	4820      	ldr	r0, [pc, #128]	@ (80017dc <MX_TIM8_Init+0x170>)
 800175c:	f004 fb92 	bl	8005e84 <HAL_TIM_PWM_ConfigChannel>
 8001760:	4603      	mov	r3, r0
 8001762:	2b00      	cmp	r3, #0
 8001764:	d001      	beq.n	800176a <MX_TIM8_Init+0xfe>
  {
    Error_Handler();
 8001766:	f7ff fdef 	bl	8001348 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800176a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800176e:	2204      	movs	r2, #4
 8001770:	4619      	mov	r1, r3
 8001772:	481a      	ldr	r0, [pc, #104]	@ (80017dc <MX_TIM8_Init+0x170>)
 8001774:	f004 fb86 	bl	8005e84 <HAL_TIM_PWM_ConfigChannel>
 8001778:	4603      	mov	r3, r0
 800177a:	2b00      	cmp	r3, #0
 800177c:	d001      	beq.n	8001782 <MX_TIM8_Init+0x116>
  {
    Error_Handler();
 800177e:	f7ff fde3 	bl	8001348 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001782:	2300      	movs	r3, #0
 8001784:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001786:	2300      	movs	r3, #0
 8001788:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800178a:	2300      	movs	r3, #0
 800178c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800178e:	2300      	movs	r3, #0
 8001790:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001792:	2300      	movs	r3, #0
 8001794:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001796:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800179a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800179c:	2300      	movs	r3, #0
 800179e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80017a0:	2300      	movs	r3, #0
 80017a2:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80017a4:	2300      	movs	r3, #0
 80017a6:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80017a8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80017ac:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80017ae:	2300      	movs	r3, #0
 80017b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80017b2:	2300      	movs	r3, #0
 80017b4:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80017b6:	2300      	movs	r3, #0
 80017b8:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80017ba:	1d3b      	adds	r3, r7, #4
 80017bc:	4619      	mov	r1, r3
 80017be:	4807      	ldr	r0, [pc, #28]	@ (80017dc <MX_TIM8_Init+0x170>)
 80017c0:	f005 fb36 	bl	8006e30 <HAL_TIMEx_ConfigBreakDeadTime>
 80017c4:	4603      	mov	r3, r0
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d001      	beq.n	80017ce <MX_TIM8_Init+0x162>
  {
    Error_Handler();
 80017ca:	f7ff fdbd 	bl	8001348 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80017ce:	4803      	ldr	r0, [pc, #12]	@ (80017dc <MX_TIM8_Init+0x170>)
 80017d0:	f000 f90c 	bl	80019ec <HAL_TIM_MspPostInit>

}
 80017d4:	bf00      	nop
 80017d6:	3770      	adds	r7, #112	@ 0x70
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}
 80017dc:	20000378 	.word	0x20000378
 80017e0:	40013400 	.word	0x40013400

080017e4 <HAL_TIMEx_HallSensor_MspInit>:

void HAL_TIMEx_HallSensor_MspInit(TIM_HandleTypeDef* timex_hallsensorHandle)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b08a      	sub	sp, #40	@ 0x28
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ec:	f107 0314 	add.w	r3, r7, #20
 80017f0:	2200      	movs	r2, #0
 80017f2:	601a      	str	r2, [r3, #0]
 80017f4:	605a      	str	r2, [r3, #4]
 80017f6:	609a      	str	r2, [r3, #8]
 80017f8:	60da      	str	r2, [r3, #12]
 80017fa:	611a      	str	r2, [r3, #16]
  if(timex_hallsensorHandle->Instance==TIM2)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001804:	d13a      	bne.n	800187c <HAL_TIMEx_HallSensor_MspInit+0x98>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001806:	4b1f      	ldr	r3, [pc, #124]	@ (8001884 <HAL_TIMEx_HallSensor_MspInit+0xa0>)
 8001808:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800180a:	4a1e      	ldr	r2, [pc, #120]	@ (8001884 <HAL_TIMEx_HallSensor_MspInit+0xa0>)
 800180c:	f043 0301 	orr.w	r3, r3, #1
 8001810:	6593      	str	r3, [r2, #88]	@ 0x58
 8001812:	4b1c      	ldr	r3, [pc, #112]	@ (8001884 <HAL_TIMEx_HallSensor_MspInit+0xa0>)
 8001814:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001816:	f003 0301 	and.w	r3, r3, #1
 800181a:	613b      	str	r3, [r7, #16]
 800181c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800181e:	4b19      	ldr	r3, [pc, #100]	@ (8001884 <HAL_TIMEx_HallSensor_MspInit+0xa0>)
 8001820:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001822:	4a18      	ldr	r2, [pc, #96]	@ (8001884 <HAL_TIMEx_HallSensor_MspInit+0xa0>)
 8001824:	f043 0301 	orr.w	r3, r3, #1
 8001828:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800182a:	4b16      	ldr	r3, [pc, #88]	@ (8001884 <HAL_TIMEx_HallSensor_MspInit+0xa0>)
 800182c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800182e:	f003 0301 	and.w	r3, r3, #1
 8001832:	60fb      	str	r3, [r7, #12]
 8001834:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA5     ------> TIM2_CH1
    PA9     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5;
 8001836:	2322      	movs	r3, #34	@ 0x22
 8001838:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800183a:	2302      	movs	r3, #2
 800183c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800183e:	2300      	movs	r3, #0
 8001840:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001842:	2300      	movs	r3, #0
 8001844:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001846:	2301      	movs	r3, #1
 8001848:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800184a:	f107 0314 	add.w	r3, r7, #20
 800184e:	4619      	mov	r1, r3
 8001850:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001854:	f000 fe76 	bl	8002544 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001858:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800185c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800185e:	2302      	movs	r3, #2
 8001860:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001862:	2300      	movs	r3, #0
 8001864:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001866:	2300      	movs	r3, #0
 8001868:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM2;
 800186a:	230a      	movs	r3, #10
 800186c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800186e:	f107 0314 	add.w	r3, r7, #20
 8001872:	4619      	mov	r1, r3
 8001874:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001878:	f000 fe64 	bl	8002544 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800187c:	bf00      	nop
 800187e:	3728      	adds	r7, #40	@ 0x28
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}
 8001884:	40021000 	.word	0x40021000

08001888 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b08c      	sub	sp, #48	@ 0x30
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001890:	f107 031c 	add.w	r3, r7, #28
 8001894:	2200      	movs	r2, #0
 8001896:	601a      	str	r2, [r3, #0]
 8001898:	605a      	str	r2, [r3, #4]
 800189a:	609a      	str	r2, [r3, #8]
 800189c:	60da      	str	r2, [r3, #12]
 800189e:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a3d      	ldr	r2, [pc, #244]	@ (800199c <HAL_TIM_Encoder_MspInit+0x114>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d145      	bne.n	8001936 <HAL_TIM_Encoder_MspInit+0xae>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80018aa:	4b3d      	ldr	r3, [pc, #244]	@ (80019a0 <HAL_TIM_Encoder_MspInit+0x118>)
 80018ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018ae:	4a3c      	ldr	r2, [pc, #240]	@ (80019a0 <HAL_TIM_Encoder_MspInit+0x118>)
 80018b0:	f043 0302 	orr.w	r3, r3, #2
 80018b4:	6593      	str	r3, [r2, #88]	@ 0x58
 80018b6:	4b3a      	ldr	r3, [pc, #232]	@ (80019a0 <HAL_TIM_Encoder_MspInit+0x118>)
 80018b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018ba:	f003 0302 	and.w	r3, r3, #2
 80018be:	61bb      	str	r3, [r7, #24]
 80018c0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018c2:	4b37      	ldr	r3, [pc, #220]	@ (80019a0 <HAL_TIM_Encoder_MspInit+0x118>)
 80018c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018c6:	4a36      	ldr	r2, [pc, #216]	@ (80019a0 <HAL_TIM_Encoder_MspInit+0x118>)
 80018c8:	f043 0301 	orr.w	r3, r3, #1
 80018cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80018ce:	4b34      	ldr	r3, [pc, #208]	@ (80019a0 <HAL_TIM_Encoder_MspInit+0x118>)
 80018d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018d2:	f003 0301 	and.w	r3, r3, #1
 80018d6:	617b      	str	r3, [r7, #20]
 80018d8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018da:	4b31      	ldr	r3, [pc, #196]	@ (80019a0 <HAL_TIM_Encoder_MspInit+0x118>)
 80018dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018de:	4a30      	ldr	r2, [pc, #192]	@ (80019a0 <HAL_TIM_Encoder_MspInit+0x118>)
 80018e0:	f043 0302 	orr.w	r3, r3, #2
 80018e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80018e6:	4b2e      	ldr	r3, [pc, #184]	@ (80019a0 <HAL_TIM_Encoder_MspInit+0x118>)
 80018e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018ea:	f003 0302 	and.w	r3, r3, #2
 80018ee:	613b      	str	r3, [r7, #16]
 80018f0:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PA4     ------> TIM3_CH2
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80018f2:	2310      	movs	r3, #16
 80018f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018f6:	2302      	movs	r3, #2
 80018f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018fa:	2300      	movs	r3, #0
 80018fc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018fe:	2300      	movs	r3, #0
 8001900:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001902:	2302      	movs	r3, #2
 8001904:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001906:	f107 031c 	add.w	r3, r7, #28
 800190a:	4619      	mov	r1, r3
 800190c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001910:	f000 fe18 	bl	8002544 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001914:	2310      	movs	r3, #16
 8001916:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001918:	2302      	movs	r3, #2
 800191a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800191c:	2300      	movs	r3, #0
 800191e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001920:	2300      	movs	r3, #0
 8001922:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001924:	2302      	movs	r3, #2
 8001926:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001928:	f107 031c 	add.w	r3, r7, #28
 800192c:	4619      	mov	r1, r3
 800192e:	481d      	ldr	r0, [pc, #116]	@ (80019a4 <HAL_TIM_Encoder_MspInit+0x11c>)
 8001930:	f000 fe08 	bl	8002544 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001934:	e02e      	b.n	8001994 <HAL_TIM_Encoder_MspInit+0x10c>
  else if(tim_encoderHandle->Instance==TIM4)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4a1b      	ldr	r2, [pc, #108]	@ (80019a8 <HAL_TIM_Encoder_MspInit+0x120>)
 800193c:	4293      	cmp	r3, r2
 800193e:	d129      	bne.n	8001994 <HAL_TIM_Encoder_MspInit+0x10c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001940:	4b17      	ldr	r3, [pc, #92]	@ (80019a0 <HAL_TIM_Encoder_MspInit+0x118>)
 8001942:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001944:	4a16      	ldr	r2, [pc, #88]	@ (80019a0 <HAL_TIM_Encoder_MspInit+0x118>)
 8001946:	f043 0304 	orr.w	r3, r3, #4
 800194a:	6593      	str	r3, [r2, #88]	@ 0x58
 800194c:	4b14      	ldr	r3, [pc, #80]	@ (80019a0 <HAL_TIM_Encoder_MspInit+0x118>)
 800194e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001950:	f003 0304 	and.w	r3, r3, #4
 8001954:	60fb      	str	r3, [r7, #12]
 8001956:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001958:	4b11      	ldr	r3, [pc, #68]	@ (80019a0 <HAL_TIM_Encoder_MspInit+0x118>)
 800195a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800195c:	4a10      	ldr	r2, [pc, #64]	@ (80019a0 <HAL_TIM_Encoder_MspInit+0x118>)
 800195e:	f043 0301 	orr.w	r3, r3, #1
 8001962:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001964:	4b0e      	ldr	r3, [pc, #56]	@ (80019a0 <HAL_TIM_Encoder_MspInit+0x118>)
 8001966:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001968:	f003 0301 	and.w	r3, r3, #1
 800196c:	60bb      	str	r3, [r7, #8]
 800196e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001970:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001974:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001976:	2302      	movs	r3, #2
 8001978:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800197a:	2300      	movs	r3, #0
 800197c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800197e:	2300      	movs	r3, #0
 8001980:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8001982:	230a      	movs	r3, #10
 8001984:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001986:	f107 031c 	add.w	r3, r7, #28
 800198a:	4619      	mov	r1, r3
 800198c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001990:	f000 fdd8 	bl	8002544 <HAL_GPIO_Init>
}
 8001994:	bf00      	nop
 8001996:	3730      	adds	r7, #48	@ 0x30
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}
 800199c:	40000400 	.word	0x40000400
 80019a0:	40021000 	.word	0x40021000
 80019a4:	48000400 	.word	0x48000400
 80019a8:	40000800 	.word	0x40000800

080019ac <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b085      	sub	sp, #20
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM8)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a0a      	ldr	r2, [pc, #40]	@ (80019e4 <HAL_TIM_Base_MspInit+0x38>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d10b      	bne.n	80019d6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* TIM8 clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 80019be:	4b0a      	ldr	r3, [pc, #40]	@ (80019e8 <HAL_TIM_Base_MspInit+0x3c>)
 80019c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019c2:	4a09      	ldr	r2, [pc, #36]	@ (80019e8 <HAL_TIM_Base_MspInit+0x3c>)
 80019c4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80019c8:	6613      	str	r3, [r2, #96]	@ 0x60
 80019ca:	4b07      	ldr	r3, [pc, #28]	@ (80019e8 <HAL_TIM_Base_MspInit+0x3c>)
 80019cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019ce:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80019d2:	60fb      	str	r3, [r7, #12]
 80019d4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 80019d6:	bf00      	nop
 80019d8:	3714      	adds	r7, #20
 80019da:	46bd      	mov	sp, r7
 80019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e0:	4770      	bx	lr
 80019e2:	bf00      	nop
 80019e4:	40013400 	.word	0x40013400
 80019e8:	40021000 	.word	0x40021000

080019ec <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b08a      	sub	sp, #40	@ 0x28
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019f4:	f107 0314 	add.w	r3, r7, #20
 80019f8:	2200      	movs	r2, #0
 80019fa:	601a      	str	r2, [r3, #0]
 80019fc:	605a      	str	r2, [r3, #4]
 80019fe:	609a      	str	r2, [r3, #8]
 8001a00:	60da      	str	r2, [r3, #12]
 8001a02:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM8)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4a1f      	ldr	r2, [pc, #124]	@ (8001a88 <HAL_TIM_MspPostInit+0x9c>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d138      	bne.n	8001a80 <HAL_TIM_MspPostInit+0x94>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a0e:	4b1f      	ldr	r3, [pc, #124]	@ (8001a8c <HAL_TIM_MspPostInit+0xa0>)
 8001a10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a12:	4a1e      	ldr	r2, [pc, #120]	@ (8001a8c <HAL_TIM_MspPostInit+0xa0>)
 8001a14:	f043 0301 	orr.w	r3, r3, #1
 8001a18:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a1a:	4b1c      	ldr	r3, [pc, #112]	@ (8001a8c <HAL_TIM_MspPostInit+0xa0>)
 8001a1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a1e:	f003 0301 	and.w	r3, r3, #1
 8001a22:	613b      	str	r3, [r7, #16]
 8001a24:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a26:	4b19      	ldr	r3, [pc, #100]	@ (8001a8c <HAL_TIM_MspPostInit+0xa0>)
 8001a28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a2a:	4a18      	ldr	r2, [pc, #96]	@ (8001a8c <HAL_TIM_MspPostInit+0xa0>)
 8001a2c:	f043 0302 	orr.w	r3, r3, #2
 8001a30:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a32:	4b16      	ldr	r3, [pc, #88]	@ (8001a8c <HAL_TIM_MspPostInit+0xa0>)
 8001a34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a36:	f003 0302 	and.w	r3, r3, #2
 8001a3a:	60fb      	str	r3, [r7, #12]
 8001a3c:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PA7     ------> TIM8_CH1N
    PB0     ------> TIM8_CH2N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001a3e:	2380      	movs	r3, #128	@ 0x80
 8001a40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a42:	2302      	movs	r3, #2
 8001a44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a46:	2300      	movs	r3, #0
 8001a48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8001a4e:	2304      	movs	r3, #4
 8001a50:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a52:	f107 0314 	add.w	r3, r7, #20
 8001a56:	4619      	mov	r1, r3
 8001a58:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a5c:	f000 fd72 	bl	8002544 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001a60:	2301      	movs	r3, #1
 8001a62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a64:	2302      	movs	r3, #2
 8001a66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8001a70:	2304      	movs	r3, #4
 8001a72:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a74:	f107 0314 	add.w	r3, r7, #20
 8001a78:	4619      	mov	r1, r3
 8001a7a:	4805      	ldr	r0, [pc, #20]	@ (8001a90 <HAL_TIM_MspPostInit+0xa4>)
 8001a7c:	f000 fd62 	bl	8002544 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8001a80:	bf00      	nop
 8001a82:	3728      	adds	r7, #40	@ 0x28
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}
 8001a88:	40013400 	.word	0x40013400
 8001a8c:	40021000 	.word	0x40021000
 8001a90:	48000400 	.word	0x48000400

08001a94 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001a98:	4b22      	ldr	r3, [pc, #136]	@ (8001b24 <MX_USART2_UART_Init+0x90>)
 8001a9a:	4a23      	ldr	r2, [pc, #140]	@ (8001b28 <MX_USART2_UART_Init+0x94>)
 8001a9c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001a9e:	4b21      	ldr	r3, [pc, #132]	@ (8001b24 <MX_USART2_UART_Init+0x90>)
 8001aa0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001aa4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001aa6:	4b1f      	ldr	r3, [pc, #124]	@ (8001b24 <MX_USART2_UART_Init+0x90>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001aac:	4b1d      	ldr	r3, [pc, #116]	@ (8001b24 <MX_USART2_UART_Init+0x90>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001ab2:	4b1c      	ldr	r3, [pc, #112]	@ (8001b24 <MX_USART2_UART_Init+0x90>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001ab8:	4b1a      	ldr	r3, [pc, #104]	@ (8001b24 <MX_USART2_UART_Init+0x90>)
 8001aba:	220c      	movs	r2, #12
 8001abc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001abe:	4b19      	ldr	r3, [pc, #100]	@ (8001b24 <MX_USART2_UART_Init+0x90>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ac4:	4b17      	ldr	r3, [pc, #92]	@ (8001b24 <MX_USART2_UART_Init+0x90>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001aca:	4b16      	ldr	r3, [pc, #88]	@ (8001b24 <MX_USART2_UART_Init+0x90>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001ad0:	4b14      	ldr	r3, [pc, #80]	@ (8001b24 <MX_USART2_UART_Init+0x90>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ad6:	4b13      	ldr	r3, [pc, #76]	@ (8001b24 <MX_USART2_UART_Init+0x90>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001adc:	4811      	ldr	r0, [pc, #68]	@ (8001b24 <MX_USART2_UART_Init+0x90>)
 8001ade:	f005 fa33 	bl	8006f48 <HAL_UART_Init>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d001      	beq.n	8001aec <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001ae8:	f7ff fc2e 	bl	8001348 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001aec:	2100      	movs	r1, #0
 8001aee:	480d      	ldr	r0, [pc, #52]	@ (8001b24 <MX_USART2_UART_Init+0x90>)
 8001af0:	f005 ff9e 	bl	8007a30 <HAL_UARTEx_SetTxFifoThreshold>
 8001af4:	4603      	mov	r3, r0
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d001      	beq.n	8001afe <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001afa:	f7ff fc25 	bl	8001348 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001afe:	2100      	movs	r1, #0
 8001b00:	4808      	ldr	r0, [pc, #32]	@ (8001b24 <MX_USART2_UART_Init+0x90>)
 8001b02:	f005 ffd3 	bl	8007aac <HAL_UARTEx_SetRxFifoThreshold>
 8001b06:	4603      	mov	r3, r0
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d001      	beq.n	8001b10 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001b0c:	f7ff fc1c 	bl	8001348 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001b10:	4804      	ldr	r0, [pc, #16]	@ (8001b24 <MX_USART2_UART_Init+0x90>)
 8001b12:	f005 ff54 	bl	80079be <HAL_UARTEx_DisableFifoMode>
 8001b16:	4603      	mov	r3, r0
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d001      	beq.n	8001b20 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001b1c:	f7ff fc14 	bl	8001348 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001b20:	bf00      	nop
 8001b22:	bd80      	pop	{r7, pc}
 8001b24:	200003c4 	.word	0x200003c4
 8001b28:	40004400 	.word	0x40004400

08001b2c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b09a      	sub	sp, #104	@ 0x68
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b34:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001b38:	2200      	movs	r2, #0
 8001b3a:	601a      	str	r2, [r3, #0]
 8001b3c:	605a      	str	r2, [r3, #4]
 8001b3e:	609a      	str	r2, [r3, #8]
 8001b40:	60da      	str	r2, [r3, #12]
 8001b42:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b44:	f107 0310 	add.w	r3, r7, #16
 8001b48:	2244      	movs	r2, #68	@ 0x44
 8001b4a:	2100      	movs	r1, #0
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f006 fbad 	bl	80082ac <memset>
  if(uartHandle->Instance==USART2)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4a1f      	ldr	r2, [pc, #124]	@ (8001bd4 <HAL_UART_MspInit+0xa8>)
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	d136      	bne.n	8001bca <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001b5c:	2302      	movs	r3, #2
 8001b5e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001b60:	2300      	movs	r3, #0
 8001b62:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b64:	f107 0310 	add.w	r3, r7, #16
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f003 fe3d 	bl	80057e8 <HAL_RCCEx_PeriphCLKConfig>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d001      	beq.n	8001b78 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001b74:	f7ff fbe8 	bl	8001348 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b78:	4b17      	ldr	r3, [pc, #92]	@ (8001bd8 <HAL_UART_MspInit+0xac>)
 8001b7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b7c:	4a16      	ldr	r2, [pc, #88]	@ (8001bd8 <HAL_UART_MspInit+0xac>)
 8001b7e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b82:	6593      	str	r3, [r2, #88]	@ 0x58
 8001b84:	4b14      	ldr	r3, [pc, #80]	@ (8001bd8 <HAL_UART_MspInit+0xac>)
 8001b86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b88:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b8c:	60fb      	str	r3, [r7, #12]
 8001b8e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b90:	4b11      	ldr	r3, [pc, #68]	@ (8001bd8 <HAL_UART_MspInit+0xac>)
 8001b92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b94:	4a10      	ldr	r2, [pc, #64]	@ (8001bd8 <HAL_UART_MspInit+0xac>)
 8001b96:	f043 0301 	orr.w	r3, r3, #1
 8001b9a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b9c:	4b0e      	ldr	r3, [pc, #56]	@ (8001bd8 <HAL_UART_MspInit+0xac>)
 8001b9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ba0:	f003 0301 	and.w	r3, r3, #1
 8001ba4:	60bb      	str	r3, [r7, #8]
 8001ba6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8001ba8:	230c      	movs	r3, #12
 8001baa:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bac:	2302      	movs	r3, #2
 8001bae:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001bb8:	2307      	movs	r3, #7
 8001bba:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bbc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001bc0:	4619      	mov	r1, r3
 8001bc2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001bc6:	f000 fcbd 	bl	8002544 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001bca:	bf00      	nop
 8001bcc:	3768      	adds	r7, #104	@ 0x68
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	40004400 	.word	0x40004400
 8001bd8:	40021000 	.word	0x40021000

08001bdc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001bdc:	480d      	ldr	r0, [pc, #52]	@ (8001c14 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001bde:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001be0:	f7ff fc3c 	bl	800145c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001be4:	480c      	ldr	r0, [pc, #48]	@ (8001c18 <LoopForever+0x6>)
  ldr r1, =_edata
 8001be6:	490d      	ldr	r1, [pc, #52]	@ (8001c1c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001be8:	4a0d      	ldr	r2, [pc, #52]	@ (8001c20 <LoopForever+0xe>)
  movs r3, #0
 8001bea:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001bec:	e002      	b.n	8001bf4 <LoopCopyDataInit>

08001bee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bf0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bf2:	3304      	adds	r3, #4

08001bf4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bf4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bf6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bf8:	d3f9      	bcc.n	8001bee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bfa:	4a0a      	ldr	r2, [pc, #40]	@ (8001c24 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001bfc:	4c0a      	ldr	r4, [pc, #40]	@ (8001c28 <LoopForever+0x16>)
  movs r3, #0
 8001bfe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c00:	e001      	b.n	8001c06 <LoopFillZerobss>

08001c02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c04:	3204      	adds	r2, #4

08001c06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c08:	d3fb      	bcc.n	8001c02 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8001c0a:	f006 fb57 	bl	80082bc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001c0e:	f7ff fadd 	bl	80011cc <main>

08001c12 <LoopForever>:

LoopForever:
    b LoopForever
 8001c12:	e7fe      	b.n	8001c12 <LoopForever>
  ldr   r0, =_estack
 8001c14:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001c18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c1c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001c20:	0800836c 	.word	0x0800836c
  ldr r2, =_sbss
 8001c24:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001c28:	2000045c 	.word	0x2000045c

08001c2c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001c2c:	e7fe      	b.n	8001c2c <ADC1_2_IRQHandler>

08001c2e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c2e:	b580      	push	{r7, lr}
 8001c30:	b082      	sub	sp, #8
 8001c32:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001c34:	2300      	movs	r3, #0
 8001c36:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c38:	2003      	movs	r0, #3
 8001c3a:	f000 f95b 	bl	8001ef4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c3e:	2000      	movs	r0, #0
 8001c40:	f000 f80e 	bl	8001c60 <HAL_InitTick>
 8001c44:	4603      	mov	r3, r0
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d002      	beq.n	8001c50 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	71fb      	strb	r3, [r7, #7]
 8001c4e:	e001      	b.n	8001c54 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001c50:	f7ff fb80 	bl	8001354 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001c54:	79fb      	ldrb	r3, [r7, #7]

}
 8001c56:	4618      	mov	r0, r3
 8001c58:	3708      	adds	r7, #8
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}
	...

08001c60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b084      	sub	sp, #16
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001c6c:	4b16      	ldr	r3, [pc, #88]	@ (8001cc8 <HAL_InitTick+0x68>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d022      	beq.n	8001cba <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001c74:	4b15      	ldr	r3, [pc, #84]	@ (8001ccc <HAL_InitTick+0x6c>)
 8001c76:	681a      	ldr	r2, [r3, #0]
 8001c78:	4b13      	ldr	r3, [pc, #76]	@ (8001cc8 <HAL_InitTick+0x68>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001c80:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c84:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f000 f966 	bl	8001f5a <HAL_SYSTICK_Config>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d10f      	bne.n	8001cb4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2b0f      	cmp	r3, #15
 8001c98:	d809      	bhi.n	8001cae <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	6879      	ldr	r1, [r7, #4]
 8001c9e:	f04f 30ff 	mov.w	r0, #4294967295
 8001ca2:	f000 f932 	bl	8001f0a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001ca6:	4a0a      	ldr	r2, [pc, #40]	@ (8001cd0 <HAL_InitTick+0x70>)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6013      	str	r3, [r2, #0]
 8001cac:	e007      	b.n	8001cbe <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	73fb      	strb	r3, [r7, #15]
 8001cb2:	e004      	b.n	8001cbe <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	73fb      	strb	r3, [r7, #15]
 8001cb8:	e001      	b.n	8001cbe <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001cbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	3710      	adds	r7, #16
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}
 8001cc8:	20000008 	.word	0x20000008
 8001ccc:	20000000 	.word	0x20000000
 8001cd0:	20000004 	.word	0x20000004

08001cd4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001cd8:	4b05      	ldr	r3, [pc, #20]	@ (8001cf0 <HAL_IncTick+0x1c>)
 8001cda:	681a      	ldr	r2, [r3, #0]
 8001cdc:	4b05      	ldr	r3, [pc, #20]	@ (8001cf4 <HAL_IncTick+0x20>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4413      	add	r3, r2
 8001ce2:	4a03      	ldr	r2, [pc, #12]	@ (8001cf0 <HAL_IncTick+0x1c>)
 8001ce4:	6013      	str	r3, [r2, #0]
}
 8001ce6:	bf00      	nop
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cee:	4770      	bx	lr
 8001cf0:	20000458 	.word	0x20000458
 8001cf4:	20000008 	.word	0x20000008

08001cf8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	af00      	add	r7, sp, #0
  return uwTick;
 8001cfc:	4b03      	ldr	r3, [pc, #12]	@ (8001d0c <HAL_GetTick+0x14>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	46bd      	mov	sp, r7
 8001d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d08:	4770      	bx	lr
 8001d0a:	bf00      	nop
 8001d0c:	20000458 	.word	0x20000458

08001d10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b084      	sub	sp, #16
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d18:	f7ff ffee 	bl	8001cf8 <HAL_GetTick>
 8001d1c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d28:	d004      	beq.n	8001d34 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d2a:	4b09      	ldr	r3, [pc, #36]	@ (8001d50 <HAL_Delay+0x40>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	68fa      	ldr	r2, [r7, #12]
 8001d30:	4413      	add	r3, r2
 8001d32:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d34:	bf00      	nop
 8001d36:	f7ff ffdf 	bl	8001cf8 <HAL_GetTick>
 8001d3a:	4602      	mov	r2, r0
 8001d3c:	68bb      	ldr	r3, [r7, #8]
 8001d3e:	1ad3      	subs	r3, r2, r3
 8001d40:	68fa      	ldr	r2, [r7, #12]
 8001d42:	429a      	cmp	r2, r3
 8001d44:	d8f7      	bhi.n	8001d36 <HAL_Delay+0x26>
  {
  }
}
 8001d46:	bf00      	nop
 8001d48:	bf00      	nop
 8001d4a:	3710      	adds	r7, #16
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	20000008 	.word	0x20000008

08001d54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b085      	sub	sp, #20
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	f003 0307 	and.w	r3, r3, #7
 8001d62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d64:	4b0c      	ldr	r3, [pc, #48]	@ (8001d98 <__NVIC_SetPriorityGrouping+0x44>)
 8001d66:	68db      	ldr	r3, [r3, #12]
 8001d68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d6a:	68ba      	ldr	r2, [r7, #8]
 8001d6c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001d70:	4013      	ands	r3, r2
 8001d72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d78:	68bb      	ldr	r3, [r7, #8]
 8001d7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d7c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001d80:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d86:	4a04      	ldr	r2, [pc, #16]	@ (8001d98 <__NVIC_SetPriorityGrouping+0x44>)
 8001d88:	68bb      	ldr	r3, [r7, #8]
 8001d8a:	60d3      	str	r3, [r2, #12]
}
 8001d8c:	bf00      	nop
 8001d8e:	3714      	adds	r7, #20
 8001d90:	46bd      	mov	sp, r7
 8001d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d96:	4770      	bx	lr
 8001d98:	e000ed00 	.word	0xe000ed00

08001d9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001da0:	4b04      	ldr	r3, [pc, #16]	@ (8001db4 <__NVIC_GetPriorityGrouping+0x18>)
 8001da2:	68db      	ldr	r3, [r3, #12]
 8001da4:	0a1b      	lsrs	r3, r3, #8
 8001da6:	f003 0307 	and.w	r3, r3, #7
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	46bd      	mov	sp, r7
 8001dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db2:	4770      	bx	lr
 8001db4:	e000ed00 	.word	0xe000ed00

08001db8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b083      	sub	sp, #12
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	db0b      	blt.n	8001de2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001dca:	79fb      	ldrb	r3, [r7, #7]
 8001dcc:	f003 021f 	and.w	r2, r3, #31
 8001dd0:	4907      	ldr	r1, [pc, #28]	@ (8001df0 <__NVIC_EnableIRQ+0x38>)
 8001dd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dd6:	095b      	lsrs	r3, r3, #5
 8001dd8:	2001      	movs	r0, #1
 8001dda:	fa00 f202 	lsl.w	r2, r0, r2
 8001dde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001de2:	bf00      	nop
 8001de4:	370c      	adds	r7, #12
 8001de6:	46bd      	mov	sp, r7
 8001de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dec:	4770      	bx	lr
 8001dee:	bf00      	nop
 8001df0:	e000e100 	.word	0xe000e100

08001df4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b083      	sub	sp, #12
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	6039      	str	r1, [r7, #0]
 8001dfe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	db0a      	blt.n	8001e1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	b2da      	uxtb	r2, r3
 8001e0c:	490c      	ldr	r1, [pc, #48]	@ (8001e40 <__NVIC_SetPriority+0x4c>)
 8001e0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e12:	0112      	lsls	r2, r2, #4
 8001e14:	b2d2      	uxtb	r2, r2
 8001e16:	440b      	add	r3, r1
 8001e18:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e1c:	e00a      	b.n	8001e34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	b2da      	uxtb	r2, r3
 8001e22:	4908      	ldr	r1, [pc, #32]	@ (8001e44 <__NVIC_SetPriority+0x50>)
 8001e24:	79fb      	ldrb	r3, [r7, #7]
 8001e26:	f003 030f 	and.w	r3, r3, #15
 8001e2a:	3b04      	subs	r3, #4
 8001e2c:	0112      	lsls	r2, r2, #4
 8001e2e:	b2d2      	uxtb	r2, r2
 8001e30:	440b      	add	r3, r1
 8001e32:	761a      	strb	r2, [r3, #24]
}
 8001e34:	bf00      	nop
 8001e36:	370c      	adds	r7, #12
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3e:	4770      	bx	lr
 8001e40:	e000e100 	.word	0xe000e100
 8001e44:	e000ed00 	.word	0xe000ed00

08001e48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b089      	sub	sp, #36	@ 0x24
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	60f8      	str	r0, [r7, #12]
 8001e50:	60b9      	str	r1, [r7, #8]
 8001e52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	f003 0307 	and.w	r3, r3, #7
 8001e5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e5c:	69fb      	ldr	r3, [r7, #28]
 8001e5e:	f1c3 0307 	rsb	r3, r3, #7
 8001e62:	2b04      	cmp	r3, #4
 8001e64:	bf28      	it	cs
 8001e66:	2304      	movcs	r3, #4
 8001e68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e6a:	69fb      	ldr	r3, [r7, #28]
 8001e6c:	3304      	adds	r3, #4
 8001e6e:	2b06      	cmp	r3, #6
 8001e70:	d902      	bls.n	8001e78 <NVIC_EncodePriority+0x30>
 8001e72:	69fb      	ldr	r3, [r7, #28]
 8001e74:	3b03      	subs	r3, #3
 8001e76:	e000      	b.n	8001e7a <NVIC_EncodePriority+0x32>
 8001e78:	2300      	movs	r3, #0
 8001e7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e7c:	f04f 32ff 	mov.w	r2, #4294967295
 8001e80:	69bb      	ldr	r3, [r7, #24]
 8001e82:	fa02 f303 	lsl.w	r3, r2, r3
 8001e86:	43da      	mvns	r2, r3
 8001e88:	68bb      	ldr	r3, [r7, #8]
 8001e8a:	401a      	ands	r2, r3
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e90:	f04f 31ff 	mov.w	r1, #4294967295
 8001e94:	697b      	ldr	r3, [r7, #20]
 8001e96:	fa01 f303 	lsl.w	r3, r1, r3
 8001e9a:	43d9      	mvns	r1, r3
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ea0:	4313      	orrs	r3, r2
         );
}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	3724      	adds	r7, #36	@ 0x24
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eac:	4770      	bx	lr
	...

08001eb0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b082      	sub	sp, #8
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	3b01      	subs	r3, #1
 8001ebc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001ec0:	d301      	bcc.n	8001ec6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	e00f      	b.n	8001ee6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ec6:	4a0a      	ldr	r2, [pc, #40]	@ (8001ef0 <SysTick_Config+0x40>)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	3b01      	subs	r3, #1
 8001ecc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ece:	210f      	movs	r1, #15
 8001ed0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ed4:	f7ff ff8e 	bl	8001df4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ed8:	4b05      	ldr	r3, [pc, #20]	@ (8001ef0 <SysTick_Config+0x40>)
 8001eda:	2200      	movs	r2, #0
 8001edc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ede:	4b04      	ldr	r3, [pc, #16]	@ (8001ef0 <SysTick_Config+0x40>)
 8001ee0:	2207      	movs	r2, #7
 8001ee2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ee4:	2300      	movs	r3, #0
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	3708      	adds	r7, #8
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	e000e010 	.word	0xe000e010

08001ef4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b082      	sub	sp, #8
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001efc:	6878      	ldr	r0, [r7, #4]
 8001efe:	f7ff ff29 	bl	8001d54 <__NVIC_SetPriorityGrouping>
}
 8001f02:	bf00      	nop
 8001f04:	3708      	adds	r7, #8
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}

08001f0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f0a:	b580      	push	{r7, lr}
 8001f0c:	b086      	sub	sp, #24
 8001f0e:	af00      	add	r7, sp, #0
 8001f10:	4603      	mov	r3, r0
 8001f12:	60b9      	str	r1, [r7, #8]
 8001f14:	607a      	str	r2, [r7, #4]
 8001f16:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001f18:	f7ff ff40 	bl	8001d9c <__NVIC_GetPriorityGrouping>
 8001f1c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f1e:	687a      	ldr	r2, [r7, #4]
 8001f20:	68b9      	ldr	r1, [r7, #8]
 8001f22:	6978      	ldr	r0, [r7, #20]
 8001f24:	f7ff ff90 	bl	8001e48 <NVIC_EncodePriority>
 8001f28:	4602      	mov	r2, r0
 8001f2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f2e:	4611      	mov	r1, r2
 8001f30:	4618      	mov	r0, r3
 8001f32:	f7ff ff5f 	bl	8001df4 <__NVIC_SetPriority>
}
 8001f36:	bf00      	nop
 8001f38:	3718      	adds	r7, #24
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}

08001f3e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f3e:	b580      	push	{r7, lr}
 8001f40:	b082      	sub	sp, #8
 8001f42:	af00      	add	r7, sp, #0
 8001f44:	4603      	mov	r3, r0
 8001f46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f7ff ff33 	bl	8001db8 <__NVIC_EnableIRQ>
}
 8001f52:	bf00      	nop
 8001f54:	3708      	adds	r7, #8
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}

08001f5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f5a:	b580      	push	{r7, lr}
 8001f5c:	b082      	sub	sp, #8
 8001f5e:	af00      	add	r7, sp, #0
 8001f60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f62:	6878      	ldr	r0, [r7, #4]
 8001f64:	f7ff ffa4 	bl	8001eb0 <SysTick_Config>
 8001f68:	4603      	mov	r3, r0
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	3708      	adds	r7, #8
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}
	...

08001f74 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b084      	sub	sp, #16
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d101      	bne.n	8001f86 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001f82:	2301      	movs	r3, #1
 8001f84:	e08d      	b.n	80020a2 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	461a      	mov	r2, r3
 8001f8c:	4b47      	ldr	r3, [pc, #284]	@ (80020ac <HAL_DMA_Init+0x138>)
 8001f8e:	429a      	cmp	r2, r3
 8001f90:	d80f      	bhi.n	8001fb2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	461a      	mov	r2, r3
 8001f98:	4b45      	ldr	r3, [pc, #276]	@ (80020b0 <HAL_DMA_Init+0x13c>)
 8001f9a:	4413      	add	r3, r2
 8001f9c:	4a45      	ldr	r2, [pc, #276]	@ (80020b4 <HAL_DMA_Init+0x140>)
 8001f9e:	fba2 2303 	umull	r2, r3, r2, r3
 8001fa2:	091b      	lsrs	r3, r3, #4
 8001fa4:	009a      	lsls	r2, r3, #2
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	4a42      	ldr	r2, [pc, #264]	@ (80020b8 <HAL_DMA_Init+0x144>)
 8001fae:	641a      	str	r2, [r3, #64]	@ 0x40
 8001fb0:	e00e      	b.n	8001fd0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	461a      	mov	r2, r3
 8001fb8:	4b40      	ldr	r3, [pc, #256]	@ (80020bc <HAL_DMA_Init+0x148>)
 8001fba:	4413      	add	r3, r2
 8001fbc:	4a3d      	ldr	r2, [pc, #244]	@ (80020b4 <HAL_DMA_Init+0x140>)
 8001fbe:	fba2 2303 	umull	r2, r3, r2, r3
 8001fc2:	091b      	lsrs	r3, r3, #4
 8001fc4:	009a      	lsls	r2, r3, #2
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	4a3c      	ldr	r2, [pc, #240]	@ (80020c0 <HAL_DMA_Init+0x14c>)
 8001fce:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2202      	movs	r2, #2
 8001fd4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8001fe6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001fea:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001ff4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	691b      	ldr	r3, [r3, #16]
 8001ffa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002000:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	699b      	ldr	r3, [r3, #24]
 8002006:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800200c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6a1b      	ldr	r3, [r3, #32]
 8002012:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002014:	68fa      	ldr	r2, [r7, #12]
 8002016:	4313      	orrs	r3, r2
 8002018:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	68fa      	ldr	r2, [r7, #12]
 8002020:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002022:	6878      	ldr	r0, [r7, #4]
 8002024:	f000 fa2c 	bl	8002480 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	689b      	ldr	r3, [r3, #8]
 800202c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002030:	d102      	bne.n	8002038 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2200      	movs	r2, #0
 8002036:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	685a      	ldr	r2, [r3, #4]
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002040:	b2d2      	uxtb	r2, r2
 8002042:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002048:	687a      	ldr	r2, [r7, #4]
 800204a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800204c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d010      	beq.n	8002078 <HAL_DMA_Init+0x104>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	2b04      	cmp	r3, #4
 800205c:	d80c      	bhi.n	8002078 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800205e:	6878      	ldr	r0, [r7, #4]
 8002060:	f000 fa4c 	bl	80024fc <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002068:	2200      	movs	r2, #0
 800206a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002070:	687a      	ldr	r2, [r7, #4]
 8002072:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002074:	605a      	str	r2, [r3, #4]
 8002076:	e008      	b.n	800208a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2200      	movs	r2, #0
 800207c:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2200      	movs	r2, #0
 8002082:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2200      	movs	r2, #0
 8002088:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2200      	movs	r2, #0
 800208e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2201      	movs	r2, #1
 8002094:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2200      	movs	r2, #0
 800209c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80020a0:	2300      	movs	r3, #0
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	3710      	adds	r7, #16
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}
 80020aa:	bf00      	nop
 80020ac:	40020407 	.word	0x40020407
 80020b0:	bffdfff8 	.word	0xbffdfff8
 80020b4:	cccccccd 	.word	0xcccccccd
 80020b8:	40020000 	.word	0x40020000
 80020bc:	bffdfbf8 	.word	0xbffdfbf8
 80020c0:	40020400 	.word	0x40020400

080020c4 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b086      	sub	sp, #24
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	60f8      	str	r0, [r7, #12]
 80020cc:	60b9      	str	r1, [r7, #8]
 80020ce:	607a      	str	r2, [r7, #4]
 80020d0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80020d2:	2300      	movs	r3, #0
 80020d4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80020dc:	2b01      	cmp	r3, #1
 80020de:	d101      	bne.n	80020e4 <HAL_DMA_Start_IT+0x20>
 80020e0:	2302      	movs	r3, #2
 80020e2:	e066      	b.n	80021b2 <HAL_DMA_Start_IT+0xee>
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	2201      	movs	r2, #1
 80020e8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80020f2:	b2db      	uxtb	r3, r3
 80020f4:	2b01      	cmp	r3, #1
 80020f6:	d155      	bne.n	80021a4 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	2202      	movs	r2, #2
 80020fc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	2200      	movs	r2, #0
 8002104:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	681a      	ldr	r2, [r3, #0]
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f022 0201 	bic.w	r2, r2, #1
 8002114:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	687a      	ldr	r2, [r7, #4]
 800211a:	68b9      	ldr	r1, [r7, #8]
 800211c:	68f8      	ldr	r0, [r7, #12]
 800211e:	f000 f970 	bl	8002402 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002126:	2b00      	cmp	r3, #0
 8002128:	d008      	beq.n	800213c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	681a      	ldr	r2, [r3, #0]
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f042 020e 	orr.w	r2, r2, #14
 8002138:	601a      	str	r2, [r3, #0]
 800213a:	e00f      	b.n	800215c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	681a      	ldr	r2, [r3, #0]
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f022 0204 	bic.w	r2, r2, #4
 800214a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	681a      	ldr	r2, [r3, #0]
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f042 020a 	orr.w	r2, r2, #10
 800215a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002166:	2b00      	cmp	r3, #0
 8002168:	d007      	beq.n	800217a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800216e:	681a      	ldr	r2, [r3, #0]
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002174:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002178:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800217e:	2b00      	cmp	r3, #0
 8002180:	d007      	beq.n	8002192 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002186:	681a      	ldr	r2, [r3, #0]
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800218c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002190:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	681a      	ldr	r2, [r3, #0]
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f042 0201 	orr.w	r2, r2, #1
 80021a0:	601a      	str	r2, [r3, #0]
 80021a2:	e005      	b.n	80021b0 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	2200      	movs	r2, #0
 80021a8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80021ac:	2302      	movs	r3, #2
 80021ae:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80021b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	3718      	adds	r7, #24
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}

080021ba <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80021ba:	b580      	push	{r7, lr}
 80021bc:	b084      	sub	sp, #16
 80021be:	af00      	add	r7, sp, #0
 80021c0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80021c2:	2300      	movs	r3, #0
 80021c4:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80021cc:	b2db      	uxtb	r3, r3
 80021ce:	2b02      	cmp	r3, #2
 80021d0:	d00d      	beq.n	80021ee <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2204      	movs	r2, #4
 80021d6:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2201      	movs	r2, #1
 80021dc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2200      	movs	r2, #0
 80021e4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 80021e8:	2301      	movs	r3, #1
 80021ea:	73fb      	strb	r3, [r7, #15]
 80021ec:	e047      	b.n	800227e <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	681a      	ldr	r2, [r3, #0]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f022 020e 	bic.w	r2, r2, #14
 80021fc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	681a      	ldr	r2, [r3, #0]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f022 0201 	bic.w	r2, r2, #1
 800220c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002212:	681a      	ldr	r2, [r3, #0]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002218:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800221c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002222:	f003 021f 	and.w	r2, r3, #31
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800222a:	2101      	movs	r1, #1
 800222c:	fa01 f202 	lsl.w	r2, r1, r2
 8002230:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002236:	687a      	ldr	r2, [r7, #4]
 8002238:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800223a:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002240:	2b00      	cmp	r3, #0
 8002242:	d00c      	beq.n	800225e <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002248:	681a      	ldr	r2, [r3, #0]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800224e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002252:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002258:	687a      	ldr	r2, [r7, #4]
 800225a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800225c:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2201      	movs	r2, #1
 8002262:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2200      	movs	r2, #0
 800226a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002272:	2b00      	cmp	r3, #0
 8002274:	d003      	beq.n	800227e <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800227a:	6878      	ldr	r0, [r7, #4]
 800227c:	4798      	blx	r3
    }
  }
  return status;
 800227e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002280:	4618      	mov	r0, r3
 8002282:	3710      	adds	r7, #16
 8002284:	46bd      	mov	sp, r7
 8002286:	bd80      	pop	{r7, pc}

08002288 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b084      	sub	sp, #16
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022a4:	f003 031f 	and.w	r3, r3, #31
 80022a8:	2204      	movs	r2, #4
 80022aa:	409a      	lsls	r2, r3
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	4013      	ands	r3, r2
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d026      	beq.n	8002302 <HAL_DMA_IRQHandler+0x7a>
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	f003 0304 	and.w	r3, r3, #4
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d021      	beq.n	8002302 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f003 0320 	and.w	r3, r3, #32
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d107      	bne.n	80022dc <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	681a      	ldr	r2, [r3, #0]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f022 0204 	bic.w	r2, r2, #4
 80022da:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022e0:	f003 021f 	and.w	r2, r3, #31
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022e8:	2104      	movs	r1, #4
 80022ea:	fa01 f202 	lsl.w	r2, r1, r2
 80022ee:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d071      	beq.n	80023dc <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022fc:	6878      	ldr	r0, [r7, #4]
 80022fe:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002300:	e06c      	b.n	80023dc <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002306:	f003 031f 	and.w	r3, r3, #31
 800230a:	2202      	movs	r2, #2
 800230c:	409a      	lsls	r2, r3
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	4013      	ands	r3, r2
 8002312:	2b00      	cmp	r3, #0
 8002314:	d02e      	beq.n	8002374 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8002316:	68bb      	ldr	r3, [r7, #8]
 8002318:	f003 0302 	and.w	r3, r3, #2
 800231c:	2b00      	cmp	r3, #0
 800231e:	d029      	beq.n	8002374 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f003 0320 	and.w	r3, r3, #32
 800232a:	2b00      	cmp	r3, #0
 800232c:	d10b      	bne.n	8002346 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	681a      	ldr	r2, [r3, #0]
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f022 020a 	bic.w	r2, r2, #10
 800233c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2201      	movs	r2, #1
 8002342:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800234a:	f003 021f 	and.w	r2, r3, #31
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002352:	2102      	movs	r1, #2
 8002354:	fa01 f202 	lsl.w	r2, r1, r2
 8002358:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2200      	movs	r2, #0
 800235e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002366:	2b00      	cmp	r3, #0
 8002368:	d038      	beq.n	80023dc <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800236e:	6878      	ldr	r0, [r7, #4]
 8002370:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002372:	e033      	b.n	80023dc <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002378:	f003 031f 	and.w	r3, r3, #31
 800237c:	2208      	movs	r2, #8
 800237e:	409a      	lsls	r2, r3
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	4013      	ands	r3, r2
 8002384:	2b00      	cmp	r3, #0
 8002386:	d02a      	beq.n	80023de <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	f003 0308 	and.w	r3, r3, #8
 800238e:	2b00      	cmp	r3, #0
 8002390:	d025      	beq.n	80023de <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	681a      	ldr	r2, [r3, #0]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f022 020e 	bic.w	r2, r2, #14
 80023a0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023a6:	f003 021f 	and.w	r2, r3, #31
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023ae:	2101      	movs	r1, #1
 80023b0:	fa01 f202 	lsl.w	r2, r1, r2
 80023b4:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2201      	movs	r2, #1
 80023ba:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2201      	movs	r2, #1
 80023c0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2200      	movs	r2, #0
 80023c8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d004      	beq.n	80023de <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80023d8:	6878      	ldr	r0, [r7, #4]
 80023da:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80023dc:	bf00      	nop
 80023de:	bf00      	nop
}
 80023e0:	3710      	adds	r7, #16
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}

080023e6 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80023e6:	b480      	push	{r7}
 80023e8:	b083      	sub	sp, #12
 80023ea:	af00      	add	r7, sp, #0
 80023ec:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80023f4:	b2db      	uxtb	r3, r3
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	370c      	adds	r7, #12
 80023fa:	46bd      	mov	sp, r7
 80023fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002400:	4770      	bx	lr

08002402 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002402:	b480      	push	{r7}
 8002404:	b085      	sub	sp, #20
 8002406:	af00      	add	r7, sp, #0
 8002408:	60f8      	str	r0, [r7, #12]
 800240a:	60b9      	str	r1, [r7, #8]
 800240c:	607a      	str	r2, [r7, #4]
 800240e:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002414:	68fa      	ldr	r2, [r7, #12]
 8002416:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002418:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800241e:	2b00      	cmp	r3, #0
 8002420:	d004      	beq.n	800242c <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002426:	68fa      	ldr	r2, [r7, #12]
 8002428:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800242a:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002430:	f003 021f 	and.w	r2, r3, #31
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002438:	2101      	movs	r1, #1
 800243a:	fa01 f202 	lsl.w	r2, r1, r2
 800243e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	683a      	ldr	r2, [r7, #0]
 8002446:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	689b      	ldr	r3, [r3, #8]
 800244c:	2b10      	cmp	r3, #16
 800244e:	d108      	bne.n	8002462 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	687a      	ldr	r2, [r7, #4]
 8002456:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	68ba      	ldr	r2, [r7, #8]
 800245e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002460:	e007      	b.n	8002472 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	68ba      	ldr	r2, [r7, #8]
 8002468:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	687a      	ldr	r2, [r7, #4]
 8002470:	60da      	str	r2, [r3, #12]
}
 8002472:	bf00      	nop
 8002474:	3714      	adds	r7, #20
 8002476:	46bd      	mov	sp, r7
 8002478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247c:	4770      	bx	lr
	...

08002480 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002480:	b480      	push	{r7}
 8002482:	b087      	sub	sp, #28
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	461a      	mov	r2, r3
 800248e:	4b16      	ldr	r3, [pc, #88]	@ (80024e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8002490:	429a      	cmp	r2, r3
 8002492:	d802      	bhi.n	800249a <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8002494:	4b15      	ldr	r3, [pc, #84]	@ (80024ec <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8002496:	617b      	str	r3, [r7, #20]
 8002498:	e001      	b.n	800249e <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 800249a:	4b15      	ldr	r3, [pc, #84]	@ (80024f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800249c:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800249e:	697b      	ldr	r3, [r7, #20]
 80024a0:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	b2db      	uxtb	r3, r3
 80024a8:	3b08      	subs	r3, #8
 80024aa:	4a12      	ldr	r2, [pc, #72]	@ (80024f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80024ac:	fba2 2303 	umull	r2, r3, r2, r3
 80024b0:	091b      	lsrs	r3, r3, #4
 80024b2:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024b8:	089b      	lsrs	r3, r3, #2
 80024ba:	009a      	lsls	r2, r3, #2
 80024bc:	693b      	ldr	r3, [r7, #16]
 80024be:	4413      	add	r3, r2
 80024c0:	461a      	mov	r2, r3
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	4a0b      	ldr	r2, [pc, #44]	@ (80024f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80024ca:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	f003 031f 	and.w	r3, r3, #31
 80024d2:	2201      	movs	r2, #1
 80024d4:	409a      	lsls	r2, r3
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80024da:	bf00      	nop
 80024dc:	371c      	adds	r7, #28
 80024de:	46bd      	mov	sp, r7
 80024e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e4:	4770      	bx	lr
 80024e6:	bf00      	nop
 80024e8:	40020407 	.word	0x40020407
 80024ec:	40020800 	.word	0x40020800
 80024f0:	40020820 	.word	0x40020820
 80024f4:	cccccccd 	.word	0xcccccccd
 80024f8:	40020880 	.word	0x40020880

080024fc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80024fc:	b480      	push	{r7}
 80024fe:	b085      	sub	sp, #20
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	b2db      	uxtb	r3, r3
 800250a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800250c:	68fa      	ldr	r2, [r7, #12]
 800250e:	4b0b      	ldr	r3, [pc, #44]	@ (800253c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002510:	4413      	add	r3, r2
 8002512:	009b      	lsls	r3, r3, #2
 8002514:	461a      	mov	r2, r3
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	4a08      	ldr	r2, [pc, #32]	@ (8002540 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800251e:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	3b01      	subs	r3, #1
 8002524:	f003 031f 	and.w	r3, r3, #31
 8002528:	2201      	movs	r2, #1
 800252a:	409a      	lsls	r2, r3
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8002530:	bf00      	nop
 8002532:	3714      	adds	r7, #20
 8002534:	46bd      	mov	sp, r7
 8002536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253a:	4770      	bx	lr
 800253c:	1000823f 	.word	0x1000823f
 8002540:	40020940 	.word	0x40020940

08002544 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002544:	b480      	push	{r7}
 8002546:	b087      	sub	sp, #28
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
 800254c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800254e:	2300      	movs	r3, #0
 8002550:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002552:	e15a      	b.n	800280a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	681a      	ldr	r2, [r3, #0]
 8002558:	2101      	movs	r1, #1
 800255a:	697b      	ldr	r3, [r7, #20]
 800255c:	fa01 f303 	lsl.w	r3, r1, r3
 8002560:	4013      	ands	r3, r2
 8002562:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	2b00      	cmp	r3, #0
 8002568:	f000 814c 	beq.w	8002804 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	f003 0303 	and.w	r3, r3, #3
 8002574:	2b01      	cmp	r3, #1
 8002576:	d005      	beq.n	8002584 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002580:	2b02      	cmp	r3, #2
 8002582:	d130      	bne.n	80025e6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	689b      	ldr	r3, [r3, #8]
 8002588:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800258a:	697b      	ldr	r3, [r7, #20]
 800258c:	005b      	lsls	r3, r3, #1
 800258e:	2203      	movs	r2, #3
 8002590:	fa02 f303 	lsl.w	r3, r2, r3
 8002594:	43db      	mvns	r3, r3
 8002596:	693a      	ldr	r2, [r7, #16]
 8002598:	4013      	ands	r3, r2
 800259a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	68da      	ldr	r2, [r3, #12]
 80025a0:	697b      	ldr	r3, [r7, #20]
 80025a2:	005b      	lsls	r3, r3, #1
 80025a4:	fa02 f303 	lsl.w	r3, r2, r3
 80025a8:	693a      	ldr	r2, [r7, #16]
 80025aa:	4313      	orrs	r3, r2
 80025ac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	693a      	ldr	r2, [r7, #16]
 80025b2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80025ba:	2201      	movs	r2, #1
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	fa02 f303 	lsl.w	r3, r2, r3
 80025c2:	43db      	mvns	r3, r3
 80025c4:	693a      	ldr	r2, [r7, #16]
 80025c6:	4013      	ands	r3, r2
 80025c8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	091b      	lsrs	r3, r3, #4
 80025d0:	f003 0201 	and.w	r2, r3, #1
 80025d4:	697b      	ldr	r3, [r7, #20]
 80025d6:	fa02 f303 	lsl.w	r3, r2, r3
 80025da:	693a      	ldr	r2, [r7, #16]
 80025dc:	4313      	orrs	r3, r2
 80025de:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	693a      	ldr	r2, [r7, #16]
 80025e4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	f003 0303 	and.w	r3, r3, #3
 80025ee:	2b03      	cmp	r3, #3
 80025f0:	d017      	beq.n	8002622 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	68db      	ldr	r3, [r3, #12]
 80025f6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80025f8:	697b      	ldr	r3, [r7, #20]
 80025fa:	005b      	lsls	r3, r3, #1
 80025fc:	2203      	movs	r2, #3
 80025fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002602:	43db      	mvns	r3, r3
 8002604:	693a      	ldr	r2, [r7, #16]
 8002606:	4013      	ands	r3, r2
 8002608:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	689a      	ldr	r2, [r3, #8]
 800260e:	697b      	ldr	r3, [r7, #20]
 8002610:	005b      	lsls	r3, r3, #1
 8002612:	fa02 f303 	lsl.w	r3, r2, r3
 8002616:	693a      	ldr	r2, [r7, #16]
 8002618:	4313      	orrs	r3, r2
 800261a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	693a      	ldr	r2, [r7, #16]
 8002620:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	f003 0303 	and.w	r3, r3, #3
 800262a:	2b02      	cmp	r3, #2
 800262c:	d123      	bne.n	8002676 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800262e:	697b      	ldr	r3, [r7, #20]
 8002630:	08da      	lsrs	r2, r3, #3
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	3208      	adds	r2, #8
 8002636:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800263a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	f003 0307 	and.w	r3, r3, #7
 8002642:	009b      	lsls	r3, r3, #2
 8002644:	220f      	movs	r2, #15
 8002646:	fa02 f303 	lsl.w	r3, r2, r3
 800264a:	43db      	mvns	r3, r3
 800264c:	693a      	ldr	r2, [r7, #16]
 800264e:	4013      	ands	r3, r2
 8002650:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	691a      	ldr	r2, [r3, #16]
 8002656:	697b      	ldr	r3, [r7, #20]
 8002658:	f003 0307 	and.w	r3, r3, #7
 800265c:	009b      	lsls	r3, r3, #2
 800265e:	fa02 f303 	lsl.w	r3, r2, r3
 8002662:	693a      	ldr	r2, [r7, #16]
 8002664:	4313      	orrs	r3, r2
 8002666:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002668:	697b      	ldr	r3, [r7, #20]
 800266a:	08da      	lsrs	r2, r3, #3
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	3208      	adds	r2, #8
 8002670:	6939      	ldr	r1, [r7, #16]
 8002672:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	005b      	lsls	r3, r3, #1
 8002680:	2203      	movs	r2, #3
 8002682:	fa02 f303 	lsl.w	r3, r2, r3
 8002686:	43db      	mvns	r3, r3
 8002688:	693a      	ldr	r2, [r7, #16]
 800268a:	4013      	ands	r3, r2
 800268c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	f003 0203 	and.w	r2, r3, #3
 8002696:	697b      	ldr	r3, [r7, #20]
 8002698:	005b      	lsls	r3, r3, #1
 800269a:	fa02 f303 	lsl.w	r3, r2, r3
 800269e:	693a      	ldr	r2, [r7, #16]
 80026a0:	4313      	orrs	r3, r2
 80026a2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	693a      	ldr	r2, [r7, #16]
 80026a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	f000 80a6 	beq.w	8002804 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026b8:	4b5b      	ldr	r3, [pc, #364]	@ (8002828 <HAL_GPIO_Init+0x2e4>)
 80026ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026bc:	4a5a      	ldr	r2, [pc, #360]	@ (8002828 <HAL_GPIO_Init+0x2e4>)
 80026be:	f043 0301 	orr.w	r3, r3, #1
 80026c2:	6613      	str	r3, [r2, #96]	@ 0x60
 80026c4:	4b58      	ldr	r3, [pc, #352]	@ (8002828 <HAL_GPIO_Init+0x2e4>)
 80026c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026c8:	f003 0301 	and.w	r3, r3, #1
 80026cc:	60bb      	str	r3, [r7, #8]
 80026ce:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80026d0:	4a56      	ldr	r2, [pc, #344]	@ (800282c <HAL_GPIO_Init+0x2e8>)
 80026d2:	697b      	ldr	r3, [r7, #20]
 80026d4:	089b      	lsrs	r3, r3, #2
 80026d6:	3302      	adds	r3, #2
 80026d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026dc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80026de:	697b      	ldr	r3, [r7, #20]
 80026e0:	f003 0303 	and.w	r3, r3, #3
 80026e4:	009b      	lsls	r3, r3, #2
 80026e6:	220f      	movs	r2, #15
 80026e8:	fa02 f303 	lsl.w	r3, r2, r3
 80026ec:	43db      	mvns	r3, r3
 80026ee:	693a      	ldr	r2, [r7, #16]
 80026f0:	4013      	ands	r3, r2
 80026f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80026fa:	d01f      	beq.n	800273c <HAL_GPIO_Init+0x1f8>
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	4a4c      	ldr	r2, [pc, #304]	@ (8002830 <HAL_GPIO_Init+0x2ec>)
 8002700:	4293      	cmp	r3, r2
 8002702:	d019      	beq.n	8002738 <HAL_GPIO_Init+0x1f4>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	4a4b      	ldr	r2, [pc, #300]	@ (8002834 <HAL_GPIO_Init+0x2f0>)
 8002708:	4293      	cmp	r3, r2
 800270a:	d013      	beq.n	8002734 <HAL_GPIO_Init+0x1f0>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	4a4a      	ldr	r2, [pc, #296]	@ (8002838 <HAL_GPIO_Init+0x2f4>)
 8002710:	4293      	cmp	r3, r2
 8002712:	d00d      	beq.n	8002730 <HAL_GPIO_Init+0x1ec>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	4a49      	ldr	r2, [pc, #292]	@ (800283c <HAL_GPIO_Init+0x2f8>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d007      	beq.n	800272c <HAL_GPIO_Init+0x1e8>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	4a48      	ldr	r2, [pc, #288]	@ (8002840 <HAL_GPIO_Init+0x2fc>)
 8002720:	4293      	cmp	r3, r2
 8002722:	d101      	bne.n	8002728 <HAL_GPIO_Init+0x1e4>
 8002724:	2305      	movs	r3, #5
 8002726:	e00a      	b.n	800273e <HAL_GPIO_Init+0x1fa>
 8002728:	2306      	movs	r3, #6
 800272a:	e008      	b.n	800273e <HAL_GPIO_Init+0x1fa>
 800272c:	2304      	movs	r3, #4
 800272e:	e006      	b.n	800273e <HAL_GPIO_Init+0x1fa>
 8002730:	2303      	movs	r3, #3
 8002732:	e004      	b.n	800273e <HAL_GPIO_Init+0x1fa>
 8002734:	2302      	movs	r3, #2
 8002736:	e002      	b.n	800273e <HAL_GPIO_Init+0x1fa>
 8002738:	2301      	movs	r3, #1
 800273a:	e000      	b.n	800273e <HAL_GPIO_Init+0x1fa>
 800273c:	2300      	movs	r3, #0
 800273e:	697a      	ldr	r2, [r7, #20]
 8002740:	f002 0203 	and.w	r2, r2, #3
 8002744:	0092      	lsls	r2, r2, #2
 8002746:	4093      	lsls	r3, r2
 8002748:	693a      	ldr	r2, [r7, #16]
 800274a:	4313      	orrs	r3, r2
 800274c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800274e:	4937      	ldr	r1, [pc, #220]	@ (800282c <HAL_GPIO_Init+0x2e8>)
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	089b      	lsrs	r3, r3, #2
 8002754:	3302      	adds	r3, #2
 8002756:	693a      	ldr	r2, [r7, #16]
 8002758:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800275c:	4b39      	ldr	r3, [pc, #228]	@ (8002844 <HAL_GPIO_Init+0x300>)
 800275e:	689b      	ldr	r3, [r3, #8]
 8002760:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	43db      	mvns	r3, r3
 8002766:	693a      	ldr	r2, [r7, #16]
 8002768:	4013      	ands	r3, r2
 800276a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002774:	2b00      	cmp	r3, #0
 8002776:	d003      	beq.n	8002780 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002778:	693a      	ldr	r2, [r7, #16]
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	4313      	orrs	r3, r2
 800277e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002780:	4a30      	ldr	r2, [pc, #192]	@ (8002844 <HAL_GPIO_Init+0x300>)
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002786:	4b2f      	ldr	r3, [pc, #188]	@ (8002844 <HAL_GPIO_Init+0x300>)
 8002788:	68db      	ldr	r3, [r3, #12]
 800278a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	43db      	mvns	r3, r3
 8002790:	693a      	ldr	r2, [r7, #16]
 8002792:	4013      	ands	r3, r2
 8002794:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d003      	beq.n	80027aa <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80027a2:	693a      	ldr	r2, [r7, #16]
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	4313      	orrs	r3, r2
 80027a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80027aa:	4a26      	ldr	r2, [pc, #152]	@ (8002844 <HAL_GPIO_Init+0x300>)
 80027ac:	693b      	ldr	r3, [r7, #16]
 80027ae:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80027b0:	4b24      	ldr	r3, [pc, #144]	@ (8002844 <HAL_GPIO_Init+0x300>)
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	43db      	mvns	r3, r3
 80027ba:	693a      	ldr	r2, [r7, #16]
 80027bc:	4013      	ands	r3, r2
 80027be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d003      	beq.n	80027d4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80027cc:	693a      	ldr	r2, [r7, #16]
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	4313      	orrs	r3, r2
 80027d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80027d4:	4a1b      	ldr	r2, [pc, #108]	@ (8002844 <HAL_GPIO_Init+0x300>)
 80027d6:	693b      	ldr	r3, [r7, #16]
 80027d8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80027da:	4b1a      	ldr	r3, [pc, #104]	@ (8002844 <HAL_GPIO_Init+0x300>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	43db      	mvns	r3, r3
 80027e4:	693a      	ldr	r2, [r7, #16]
 80027e6:	4013      	ands	r3, r2
 80027e8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d003      	beq.n	80027fe <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80027f6:	693a      	ldr	r2, [r7, #16]
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	4313      	orrs	r3, r2
 80027fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80027fe:	4a11      	ldr	r2, [pc, #68]	@ (8002844 <HAL_GPIO_Init+0x300>)
 8002800:	693b      	ldr	r3, [r7, #16]
 8002802:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	3301      	adds	r3, #1
 8002808:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	681a      	ldr	r2, [r3, #0]
 800280e:	697b      	ldr	r3, [r7, #20]
 8002810:	fa22 f303 	lsr.w	r3, r2, r3
 8002814:	2b00      	cmp	r3, #0
 8002816:	f47f ae9d 	bne.w	8002554 <HAL_GPIO_Init+0x10>
  }
}
 800281a:	bf00      	nop
 800281c:	bf00      	nop
 800281e:	371c      	adds	r7, #28
 8002820:	46bd      	mov	sp, r7
 8002822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002826:	4770      	bx	lr
 8002828:	40021000 	.word	0x40021000
 800282c:	40010000 	.word	0x40010000
 8002830:	48000400 	.word	0x48000400
 8002834:	48000800 	.word	0x48000800
 8002838:	48000c00 	.word	0x48000c00
 800283c:	48001000 	.word	0x48001000
 8002840:	48001400 	.word	0x48001400
 8002844:	40010400 	.word	0x40010400

08002848 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002848:	b480      	push	{r7}
 800284a:	b083      	sub	sp, #12
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
 8002850:	460b      	mov	r3, r1
 8002852:	807b      	strh	r3, [r7, #2]
 8002854:	4613      	mov	r3, r2
 8002856:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002858:	787b      	ldrb	r3, [r7, #1]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d003      	beq.n	8002866 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800285e:	887a      	ldrh	r2, [r7, #2]
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002864:	e002      	b.n	800286c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002866:	887a      	ldrh	r2, [r7, #2]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800286c:	bf00      	nop
 800286e:	370c      	adds	r7, #12
 8002870:	46bd      	mov	sp, r7
 8002872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002876:	4770      	bx	lr

08002878 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b082      	sub	sp, #8
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d101      	bne.n	800288a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002886:	2301      	movs	r3, #1
 8002888:	e08d      	b.n	80029a6 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002890:	b2db      	uxtb	r3, r3
 8002892:	2b00      	cmp	r3, #0
 8002894:	d106      	bne.n	80028a4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2200      	movs	r2, #0
 800289a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800289e:	6878      	ldr	r0, [r7, #4]
 80028a0:	f7fe fb56 	bl	8000f50 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2224      	movs	r2, #36	@ 0x24
 80028a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	681a      	ldr	r2, [r3, #0]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f022 0201 	bic.w	r2, r2, #1
 80028ba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	685a      	ldr	r2, [r3, #4]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80028c8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	689a      	ldr	r2, [r3, #8]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80028d8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	68db      	ldr	r3, [r3, #12]
 80028de:	2b01      	cmp	r3, #1
 80028e0:	d107      	bne.n	80028f2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	689a      	ldr	r2, [r3, #8]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80028ee:	609a      	str	r2, [r3, #8]
 80028f0:	e006      	b.n	8002900 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	689a      	ldr	r2, [r3, #8]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80028fe:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	68db      	ldr	r3, [r3, #12]
 8002904:	2b02      	cmp	r3, #2
 8002906:	d108      	bne.n	800291a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	685a      	ldr	r2, [r3, #4]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002916:	605a      	str	r2, [r3, #4]
 8002918:	e007      	b.n	800292a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	685a      	ldr	r2, [r3, #4]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002928:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	687a      	ldr	r2, [r7, #4]
 8002932:	6812      	ldr	r2, [r2, #0]
 8002934:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002938:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800293c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	68da      	ldr	r2, [r3, #12]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800294c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	691a      	ldr	r2, [r3, #16]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	695b      	ldr	r3, [r3, #20]
 8002956:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	699b      	ldr	r3, [r3, #24]
 800295e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	430a      	orrs	r2, r1
 8002966:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	69d9      	ldr	r1, [r3, #28]
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6a1a      	ldr	r2, [r3, #32]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	430a      	orrs	r2, r1
 8002976:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	681a      	ldr	r2, [r3, #0]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f042 0201 	orr.w	r2, r2, #1
 8002986:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2200      	movs	r2, #0
 800298c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2220      	movs	r2, #32
 8002992:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2200      	movs	r2, #0
 800299a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2200      	movs	r2, #0
 80029a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80029a4:	2300      	movs	r3, #0
}
 80029a6:	4618      	mov	r0, r3
 80029a8:	3708      	adds	r7, #8
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}
	...

080029b0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b088      	sub	sp, #32
 80029b4:	af02      	add	r7, sp, #8
 80029b6:	60f8      	str	r0, [r7, #12]
 80029b8:	4608      	mov	r0, r1
 80029ba:	4611      	mov	r1, r2
 80029bc:	461a      	mov	r2, r3
 80029be:	4603      	mov	r3, r0
 80029c0:	817b      	strh	r3, [r7, #10]
 80029c2:	460b      	mov	r3, r1
 80029c4:	813b      	strh	r3, [r7, #8]
 80029c6:	4613      	mov	r3, r2
 80029c8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80029d0:	b2db      	uxtb	r3, r3
 80029d2:	2b20      	cmp	r3, #32
 80029d4:	f040 80f9 	bne.w	8002bca <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80029d8:	6a3b      	ldr	r3, [r7, #32]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d002      	beq.n	80029e4 <HAL_I2C_Mem_Write+0x34>
 80029de:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d105      	bne.n	80029f0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80029ea:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80029ec:	2301      	movs	r3, #1
 80029ee:	e0ed      	b.n	8002bcc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80029f6:	2b01      	cmp	r3, #1
 80029f8:	d101      	bne.n	80029fe <HAL_I2C_Mem_Write+0x4e>
 80029fa:	2302      	movs	r3, #2
 80029fc:	e0e6      	b.n	8002bcc <HAL_I2C_Mem_Write+0x21c>
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	2201      	movs	r2, #1
 8002a02:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002a06:	f7ff f977 	bl	8001cf8 <HAL_GetTick>
 8002a0a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	9300      	str	r3, [sp, #0]
 8002a10:	2319      	movs	r3, #25
 8002a12:	2201      	movs	r2, #1
 8002a14:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002a18:	68f8      	ldr	r0, [r7, #12]
 8002a1a:	f001 fd94 	bl	8004546 <I2C_WaitOnFlagUntilTimeout>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d001      	beq.n	8002a28 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002a24:	2301      	movs	r3, #1
 8002a26:	e0d1      	b.n	8002bcc <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	2221      	movs	r2, #33	@ 0x21
 8002a2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	2240      	movs	r2, #64	@ 0x40
 8002a34:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	6a3a      	ldr	r2, [r7, #32]
 8002a42:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002a48:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002a50:	88f8      	ldrh	r0, [r7, #6]
 8002a52:	893a      	ldrh	r2, [r7, #8]
 8002a54:	8979      	ldrh	r1, [r7, #10]
 8002a56:	697b      	ldr	r3, [r7, #20]
 8002a58:	9301      	str	r3, [sp, #4]
 8002a5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a5c:	9300      	str	r3, [sp, #0]
 8002a5e:	4603      	mov	r3, r0
 8002a60:	68f8      	ldr	r0, [r7, #12]
 8002a62:	f000 ff6f 	bl	8003944 <I2C_RequestMemoryWrite>
 8002a66:	4603      	mov	r3, r0
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d005      	beq.n	8002a78 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	2200      	movs	r2, #0
 8002a70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002a74:	2301      	movs	r3, #1
 8002a76:	e0a9      	b.n	8002bcc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a7c:	b29b      	uxth	r3, r3
 8002a7e:	2bff      	cmp	r3, #255	@ 0xff
 8002a80:	d90e      	bls.n	8002aa0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	22ff      	movs	r2, #255	@ 0xff
 8002a86:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a8c:	b2da      	uxtb	r2, r3
 8002a8e:	8979      	ldrh	r1, [r7, #10]
 8002a90:	2300      	movs	r3, #0
 8002a92:	9300      	str	r3, [sp, #0]
 8002a94:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002a98:	68f8      	ldr	r0, [r7, #12]
 8002a9a:	f001 ff17 	bl	80048cc <I2C_TransferConfig>
 8002a9e:	e00f      	b.n	8002ac0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002aa4:	b29a      	uxth	r2, r3
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002aae:	b2da      	uxtb	r2, r3
 8002ab0:	8979      	ldrh	r1, [r7, #10]
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	9300      	str	r3, [sp, #0]
 8002ab6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002aba:	68f8      	ldr	r0, [r7, #12]
 8002abc:	f001 ff06 	bl	80048cc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ac0:	697a      	ldr	r2, [r7, #20]
 8002ac2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002ac4:	68f8      	ldr	r0, [r7, #12]
 8002ac6:	f001 fd97 	bl	80045f8 <I2C_WaitOnTXISFlagUntilTimeout>
 8002aca:	4603      	mov	r3, r0
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d001      	beq.n	8002ad4 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	e07b      	b.n	8002bcc <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ad8:	781a      	ldrb	r2, [r3, #0]
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ae4:	1c5a      	adds	r2, r3, #1
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002aee:	b29b      	uxth	r3, r3
 8002af0:	3b01      	subs	r3, #1
 8002af2:	b29a      	uxth	r2, r3
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002afc:	3b01      	subs	r3, #1
 8002afe:	b29a      	uxth	r2, r3
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b08:	b29b      	uxth	r3, r3
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d034      	beq.n	8002b78 <HAL_I2C_Mem_Write+0x1c8>
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d130      	bne.n	8002b78 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002b16:	697b      	ldr	r3, [r7, #20]
 8002b18:	9300      	str	r3, [sp, #0]
 8002b1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	2180      	movs	r1, #128	@ 0x80
 8002b20:	68f8      	ldr	r0, [r7, #12]
 8002b22:	f001 fd10 	bl	8004546 <I2C_WaitOnFlagUntilTimeout>
 8002b26:	4603      	mov	r3, r0
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d001      	beq.n	8002b30 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	e04d      	b.n	8002bcc <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b34:	b29b      	uxth	r3, r3
 8002b36:	2bff      	cmp	r3, #255	@ 0xff
 8002b38:	d90e      	bls.n	8002b58 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	22ff      	movs	r2, #255	@ 0xff
 8002b3e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b44:	b2da      	uxtb	r2, r3
 8002b46:	8979      	ldrh	r1, [r7, #10]
 8002b48:	2300      	movs	r3, #0
 8002b4a:	9300      	str	r3, [sp, #0]
 8002b4c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002b50:	68f8      	ldr	r0, [r7, #12]
 8002b52:	f001 febb 	bl	80048cc <I2C_TransferConfig>
 8002b56:	e00f      	b.n	8002b78 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b5c:	b29a      	uxth	r2, r3
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b66:	b2da      	uxtb	r2, r3
 8002b68:	8979      	ldrh	r1, [r7, #10]
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	9300      	str	r3, [sp, #0]
 8002b6e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002b72:	68f8      	ldr	r0, [r7, #12]
 8002b74:	f001 feaa 	bl	80048cc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b7c:	b29b      	uxth	r3, r3
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d19e      	bne.n	8002ac0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b82:	697a      	ldr	r2, [r7, #20]
 8002b84:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002b86:	68f8      	ldr	r0, [r7, #12]
 8002b88:	f001 fd7d 	bl	8004686 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d001      	beq.n	8002b96 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	e01a      	b.n	8002bcc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	2220      	movs	r2, #32
 8002b9c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	6859      	ldr	r1, [r3, #4]
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681a      	ldr	r2, [r3, #0]
 8002ba8:	4b0a      	ldr	r3, [pc, #40]	@ (8002bd4 <HAL_I2C_Mem_Write+0x224>)
 8002baa:	400b      	ands	r3, r1
 8002bac:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	2220      	movs	r2, #32
 8002bb2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	2200      	movs	r2, #0
 8002bba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	e000      	b.n	8002bcc <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002bca:	2302      	movs	r3, #2
  }
}
 8002bcc:	4618      	mov	r0, r3
 8002bce:	3718      	adds	r7, #24
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bd80      	pop	{r7, pc}
 8002bd4:	fe00e800 	.word	0xfe00e800

08002bd8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b088      	sub	sp, #32
 8002bdc:	af02      	add	r7, sp, #8
 8002bde:	60f8      	str	r0, [r7, #12]
 8002be0:	4608      	mov	r0, r1
 8002be2:	4611      	mov	r1, r2
 8002be4:	461a      	mov	r2, r3
 8002be6:	4603      	mov	r3, r0
 8002be8:	817b      	strh	r3, [r7, #10]
 8002bea:	460b      	mov	r3, r1
 8002bec:	813b      	strh	r3, [r7, #8]
 8002bee:	4613      	mov	r3, r2
 8002bf0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002bf8:	b2db      	uxtb	r3, r3
 8002bfa:	2b20      	cmp	r3, #32
 8002bfc:	f040 80fd 	bne.w	8002dfa <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c00:	6a3b      	ldr	r3, [r7, #32]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d002      	beq.n	8002c0c <HAL_I2C_Mem_Read+0x34>
 8002c06:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d105      	bne.n	8002c18 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002c12:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002c14:	2301      	movs	r3, #1
 8002c16:	e0f1      	b.n	8002dfc <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002c1e:	2b01      	cmp	r3, #1
 8002c20:	d101      	bne.n	8002c26 <HAL_I2C_Mem_Read+0x4e>
 8002c22:	2302      	movs	r3, #2
 8002c24:	e0ea      	b.n	8002dfc <HAL_I2C_Mem_Read+0x224>
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	2201      	movs	r2, #1
 8002c2a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002c2e:	f7ff f863 	bl	8001cf8 <HAL_GetTick>
 8002c32:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002c34:	697b      	ldr	r3, [r7, #20]
 8002c36:	9300      	str	r3, [sp, #0]
 8002c38:	2319      	movs	r3, #25
 8002c3a:	2201      	movs	r2, #1
 8002c3c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002c40:	68f8      	ldr	r0, [r7, #12]
 8002c42:	f001 fc80 	bl	8004546 <I2C_WaitOnFlagUntilTimeout>
 8002c46:	4603      	mov	r3, r0
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d001      	beq.n	8002c50 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	e0d5      	b.n	8002dfc <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	2222      	movs	r2, #34	@ 0x22
 8002c54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	2240      	movs	r2, #64	@ 0x40
 8002c5c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	2200      	movs	r2, #0
 8002c64:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	6a3a      	ldr	r2, [r7, #32]
 8002c6a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002c70:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	2200      	movs	r2, #0
 8002c76:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002c78:	88f8      	ldrh	r0, [r7, #6]
 8002c7a:	893a      	ldrh	r2, [r7, #8]
 8002c7c:	8979      	ldrh	r1, [r7, #10]
 8002c7e:	697b      	ldr	r3, [r7, #20]
 8002c80:	9301      	str	r3, [sp, #4]
 8002c82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c84:	9300      	str	r3, [sp, #0]
 8002c86:	4603      	mov	r3, r0
 8002c88:	68f8      	ldr	r0, [r7, #12]
 8002c8a:	f000 feaf 	bl	80039ec <I2C_RequestMemoryRead>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d005      	beq.n	8002ca0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	2200      	movs	r2, #0
 8002c98:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	e0ad      	b.n	8002dfc <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ca4:	b29b      	uxth	r3, r3
 8002ca6:	2bff      	cmp	r3, #255	@ 0xff
 8002ca8:	d90e      	bls.n	8002cc8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	22ff      	movs	r2, #255	@ 0xff
 8002cae:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cb4:	b2da      	uxtb	r2, r3
 8002cb6:	8979      	ldrh	r1, [r7, #10]
 8002cb8:	4b52      	ldr	r3, [pc, #328]	@ (8002e04 <HAL_I2C_Mem_Read+0x22c>)
 8002cba:	9300      	str	r3, [sp, #0]
 8002cbc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002cc0:	68f8      	ldr	r0, [r7, #12]
 8002cc2:	f001 fe03 	bl	80048cc <I2C_TransferConfig>
 8002cc6:	e00f      	b.n	8002ce8 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ccc:	b29a      	uxth	r2, r3
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cd6:	b2da      	uxtb	r2, r3
 8002cd8:	8979      	ldrh	r1, [r7, #10]
 8002cda:	4b4a      	ldr	r3, [pc, #296]	@ (8002e04 <HAL_I2C_Mem_Read+0x22c>)
 8002cdc:	9300      	str	r3, [sp, #0]
 8002cde:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002ce2:	68f8      	ldr	r0, [r7, #12]
 8002ce4:	f001 fdf2 	bl	80048cc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002ce8:	697b      	ldr	r3, [r7, #20]
 8002cea:	9300      	str	r3, [sp, #0]
 8002cec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cee:	2200      	movs	r2, #0
 8002cf0:	2104      	movs	r1, #4
 8002cf2:	68f8      	ldr	r0, [r7, #12]
 8002cf4:	f001 fc27 	bl	8004546 <I2C_WaitOnFlagUntilTimeout>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d001      	beq.n	8002d02 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	e07c      	b.n	8002dfc <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d0c:	b2d2      	uxtb	r2, r2
 8002d0e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d14:	1c5a      	adds	r2, r3, #1
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d1e:	3b01      	subs	r3, #1
 8002d20:	b29a      	uxth	r2, r3
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d2a:	b29b      	uxth	r3, r3
 8002d2c:	3b01      	subs	r3, #1
 8002d2e:	b29a      	uxth	r2, r3
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d38:	b29b      	uxth	r3, r3
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d034      	beq.n	8002da8 <HAL_I2C_Mem_Read+0x1d0>
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d130      	bne.n	8002da8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002d46:	697b      	ldr	r3, [r7, #20]
 8002d48:	9300      	str	r3, [sp, #0]
 8002d4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	2180      	movs	r1, #128	@ 0x80
 8002d50:	68f8      	ldr	r0, [r7, #12]
 8002d52:	f001 fbf8 	bl	8004546 <I2C_WaitOnFlagUntilTimeout>
 8002d56:	4603      	mov	r3, r0
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d001      	beq.n	8002d60 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	e04d      	b.n	8002dfc <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d64:	b29b      	uxth	r3, r3
 8002d66:	2bff      	cmp	r3, #255	@ 0xff
 8002d68:	d90e      	bls.n	8002d88 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	22ff      	movs	r2, #255	@ 0xff
 8002d6e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d74:	b2da      	uxtb	r2, r3
 8002d76:	8979      	ldrh	r1, [r7, #10]
 8002d78:	2300      	movs	r3, #0
 8002d7a:	9300      	str	r3, [sp, #0]
 8002d7c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002d80:	68f8      	ldr	r0, [r7, #12]
 8002d82:	f001 fda3 	bl	80048cc <I2C_TransferConfig>
 8002d86:	e00f      	b.n	8002da8 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d8c:	b29a      	uxth	r2, r3
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d96:	b2da      	uxtb	r2, r3
 8002d98:	8979      	ldrh	r1, [r7, #10]
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	9300      	str	r3, [sp, #0]
 8002d9e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002da2:	68f8      	ldr	r0, [r7, #12]
 8002da4:	f001 fd92 	bl	80048cc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002dac:	b29b      	uxth	r3, r3
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d19a      	bne.n	8002ce8 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002db2:	697a      	ldr	r2, [r7, #20]
 8002db4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002db6:	68f8      	ldr	r0, [r7, #12]
 8002db8:	f001 fc65 	bl	8004686 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d001      	beq.n	8002dc6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	e01a      	b.n	8002dfc <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	2220      	movs	r2, #32
 8002dcc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	6859      	ldr	r1, [r3, #4]
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681a      	ldr	r2, [r3, #0]
 8002dd8:	4b0b      	ldr	r3, [pc, #44]	@ (8002e08 <HAL_I2C_Mem_Read+0x230>)
 8002dda:	400b      	ands	r3, r1
 8002ddc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	2220      	movs	r2, #32
 8002de2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	2200      	movs	r2, #0
 8002dea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	2200      	movs	r2, #0
 8002df2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002df6:	2300      	movs	r3, #0
 8002df8:	e000      	b.n	8002dfc <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002dfa:	2302      	movs	r3, #2
  }
}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	3718      	adds	r7, #24
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bd80      	pop	{r7, pc}
 8002e04:	80002400 	.word	0x80002400
 8002e08:	fe00e800 	.word	0xfe00e800

08002e0c <HAL_I2C_Mem_Read_DMA>:
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                       uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b088      	sub	sp, #32
 8002e10:	af02      	add	r7, sp, #8
 8002e12:	60f8      	str	r0, [r7, #12]
 8002e14:	4608      	mov	r0, r1
 8002e16:	4611      	mov	r1, r2
 8002e18:	461a      	mov	r2, r3
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	817b      	strh	r3, [r7, #10]
 8002e1e:	460b      	mov	r3, r1
 8002e20:	813b      	strh	r3, [r7, #8]
 8002e22:	4613      	mov	r3, r2
 8002e24:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e2c:	b2db      	uxtb	r3, r3
 8002e2e:	2b20      	cmp	r3, #32
 8002e30:	f040 80c2 	bne.w	8002fb8 <HAL_I2C_Mem_Read_DMA+0x1ac>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e34:	6a3b      	ldr	r3, [r7, #32]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d002      	beq.n	8002e40 <HAL_I2C_Mem_Read_DMA+0x34>
 8002e3a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d105      	bne.n	8002e4c <HAL_I2C_Mem_Read_DMA+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002e46:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002e48:	2301      	movs	r3, #1
 8002e4a:	e0b6      	b.n	8002fba <HAL_I2C_Mem_Read_DMA+0x1ae>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	699b      	ldr	r3, [r3, #24]
 8002e52:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002e56:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002e5a:	d101      	bne.n	8002e60 <HAL_I2C_Mem_Read_DMA+0x54>
    {
      return HAL_BUSY;
 8002e5c:	2302      	movs	r3, #2
 8002e5e:	e0ac      	b.n	8002fba <HAL_I2C_Mem_Read_DMA+0x1ae>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002e66:	2b01      	cmp	r3, #1
 8002e68:	d101      	bne.n	8002e6e <HAL_I2C_Mem_Read_DMA+0x62>
 8002e6a:	2302      	movs	r3, #2
 8002e6c:	e0a5      	b.n	8002fba <HAL_I2C_Mem_Read_DMA+0x1ae>
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	2201      	movs	r2, #1
 8002e72:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	2222      	movs	r2, #34	@ 0x22
 8002e7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	2240      	movs	r2, #64	@ 0x40
 8002e82:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	2200      	movs	r2, #0
 8002e8a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	6a3a      	ldr	r2, [r7, #32]
 8002e90:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002e96:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	4a4a      	ldr	r2, [pc, #296]	@ (8002fc4 <HAL_I2C_Mem_Read_DMA+0x1b8>)
 8002e9c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_DMA;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	4a49      	ldr	r2, [pc, #292]	@ (8002fc8 <HAL_I2C_Mem_Read_DMA+0x1bc>)
 8002ea2:	635a      	str	r2, [r3, #52]	@ 0x34
    hi2c->Devaddress  = DevAddress;
 8002ea4:	897a      	ldrh	r2, [r7, #10]
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	64da      	str	r2, [r3, #76]	@ 0x4c

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002eae:	b29b      	uxth	r3, r3
 8002eb0:	2bff      	cmp	r3, #255	@ 0xff
 8002eb2:	d903      	bls.n	8002ebc <HAL_I2C_Mem_Read_DMA+0xb0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	22ff      	movs	r2, #255	@ 0xff
 8002eb8:	851a      	strh	r2, [r3, #40]	@ 0x28
 8002eba:	e004      	b.n	8002ec6 <HAL_I2C_Mem_Read_DMA+0xba>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ec0:	b29a      	uxth	r2, r3
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	851a      	strh	r2, [r3, #40]	@ 0x28
    }

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002ec6:	88fb      	ldrh	r3, [r7, #6]
 8002ec8:	2b01      	cmp	r3, #1
 8002eca:	d109      	bne.n	8002ee0 <HAL_I2C_Mem_Read_DMA+0xd4>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002ecc:	893b      	ldrh	r3, [r7, #8]
 8002ece:	b2da      	uxtb	r2, r3
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	f04f 32ff 	mov.w	r2, #4294967295
 8002edc:	651a      	str	r2, [r3, #80]	@ 0x50
 8002ede:	e00b      	b.n	8002ef8 <HAL_I2C_Mem_Read_DMA+0xec>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002ee0:	893b      	ldrh	r3, [r7, #8]
 8002ee2:	0a1b      	lsrs	r3, r3, #8
 8002ee4:	b29b      	uxth	r3, r3
 8002ee6:	b2da      	uxtb	r2, r3
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
 8002eee:	893b      	ldrh	r3, [r7, #8]
 8002ef0:	b2db      	uxtb	r3, r3
 8002ef2:	461a      	mov	r2, r3
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    if (hi2c->hdmarx != NULL)
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d020      	beq.n	8002f42 <HAL_I2C_Mem_Read_DMA+0x136>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f04:	4a31      	ldr	r2, [pc, #196]	@ (8002fcc <HAL_I2C_Mem_Read_DMA+0x1c0>)
 8002f06:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f0c:	4a30      	ldr	r2, [pc, #192]	@ (8002fd0 <HAL_I2C_Mem_Read_DMA+0x1c4>)
 8002f0e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f14:	2200      	movs	r2, #0
 8002f16:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->hdmarx->XferAbortCallback = NULL;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the DMA channel */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	3324      	adds	r3, #36	@ 0x24
 8002f2a:	4619      	mov	r1, r3
 8002f2c:	6a3a      	ldr	r2, [r7, #32]
                                       hi2c->XferSize);
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8002f32:	f7ff f8c7 	bl	80020c4 <HAL_DMA_Start_IT>
 8002f36:	4603      	mov	r3, r0
 8002f38:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 8002f3a:	7dfb      	ldrb	r3, [r7, #23]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d127      	bne.n	8002f90 <HAL_I2C_Mem_Read_DMA+0x184>
 8002f40:	e013      	b.n	8002f6a <HAL_I2C_Mem_Read_DMA+0x15e>
      hi2c->State     = HAL_I2C_STATE_READY;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	2220      	movs	r2, #32
 8002f46:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f56:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	645a      	str	r2, [r3, #68]	@ 0x44
      __HAL_UNLOCK(hi2c);
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	2200      	movs	r2, #0
 8002f62:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	e027      	b.n	8002fba <HAL_I2C_Mem_Read_DMA+0x1ae>
    {
      /* Send Slave Address and Memory Address */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002f6a:	88fb      	ldrh	r3, [r7, #6]
 8002f6c:	b2da      	uxtb	r2, r3
 8002f6e:	8979      	ldrh	r1, [r7, #10]
 8002f70:	4b18      	ldr	r3, [pc, #96]	@ (8002fd4 <HAL_I2C_Mem_Read_DMA+0x1c8>)
 8002f72:	9300      	str	r3, [sp, #0]
 8002f74:	2300      	movs	r3, #0
 8002f76:	68f8      	ldr	r0, [r7, #12]
 8002f78:	f001 fca8 	bl	80048cc <I2C_TransferConfig>

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	2200      	movs	r2, #0
 8002f80:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002f84:	2101      	movs	r1, #1
 8002f86:	68f8      	ldr	r0, [r7, #12]
 8002f88:	f001 fcd2 	bl	8004930 <I2C_Enable_IRQ>
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	e014      	b.n	8002fba <HAL_I2C_Mem_Read_DMA+0x1ae>
      hi2c->State     = HAL_I2C_STATE_READY;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	2220      	movs	r2, #32
 8002f94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fa4:	f043 0210 	orr.w	r2, r3, #16
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	645a      	str	r2, [r3, #68]	@ 0x44
      __HAL_UNLOCK(hi2c);
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	2200      	movs	r2, #0
 8002fb0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	e000      	b.n	8002fba <HAL_I2C_Mem_Read_DMA+0x1ae>
  }
  else
  {
    return HAL_BUSY;
 8002fb8:	2302      	movs	r3, #2
  }
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	3718      	adds	r7, #24
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}
 8002fc2:	bf00      	nop
 8002fc4:	ffff0000 	.word	0xffff0000
 8002fc8:	08003549 	.word	0x08003549
 8002fcc:	08004447 	.word	0x08004447
 8002fd0:	080044dd 	.word	0x080044dd
 8002fd4:	80002000 	.word	0x80002000

08002fd8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b084      	sub	sp, #16
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	699b      	ldr	r3, [r3, #24]
 8002fe6:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d005      	beq.n	8003004 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ffc:	68ba      	ldr	r2, [r7, #8]
 8002ffe:	68f9      	ldr	r1, [r7, #12]
 8003000:	6878      	ldr	r0, [r7, #4]
 8003002:	4798      	blx	r3
  }
}
 8003004:	bf00      	nop
 8003006:	3710      	adds	r7, #16
 8003008:	46bd      	mov	sp, r7
 800300a:	bd80      	pop	{r7, pc}

0800300c <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b086      	sub	sp, #24
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	699b      	ldr	r3, [r3, #24]
 800301a:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8003024:	697b      	ldr	r3, [r7, #20]
 8003026:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800302a:	2b00      	cmp	r3, #0
 800302c:	d00f      	beq.n	800304e <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800302e:	693b      	ldr	r3, [r7, #16]
 8003030:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8003034:	2b00      	cmp	r3, #0
 8003036:	d00a      	beq.n	800304e <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800303c:	f043 0201 	orr.w	r2, r3, #1
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800304c:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003054:	2b00      	cmp	r3, #0
 8003056:	d00f      	beq.n	8003078 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003058:	693b      	ldr	r3, [r7, #16]
 800305a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800305e:	2b00      	cmp	r3, #0
 8003060:	d00a      	beq.n	8003078 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003066:	f043 0208 	orr.w	r2, r3, #8
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003076:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8003078:	697b      	ldr	r3, [r7, #20]
 800307a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800307e:	2b00      	cmp	r3, #0
 8003080:	d00f      	beq.n	80030a2 <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8003088:	2b00      	cmp	r3, #0
 800308a:	d00a      	beq.n	80030a2 <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003090:	f043 0202 	orr.w	r2, r3, #2
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80030a0:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030a6:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	f003 030b 	and.w	r3, r3, #11
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d003      	beq.n	80030ba <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 80030b2:	68f9      	ldr	r1, [r7, #12]
 80030b4:	6878      	ldr	r0, [r7, #4]
 80030b6:	f001 f88b 	bl	80041d0 <I2C_ITError>
  }
}
 80030ba:	bf00      	nop
 80030bc:	3718      	adds	r7, #24
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd80      	pop	{r7, pc}

080030c2 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80030c2:	b480      	push	{r7}
 80030c4:	b083      	sub	sp, #12
 80030c6:	af00      	add	r7, sp, #0
 80030c8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80030ca:	bf00      	nop
 80030cc:	370c      	adds	r7, #12
 80030ce:	46bd      	mov	sp, r7
 80030d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d4:	4770      	bx	lr

080030d6 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80030d6:	b480      	push	{r7}
 80030d8:	b083      	sub	sp, #12
 80030da:	af00      	add	r7, sp, #0
 80030dc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80030de:	bf00      	nop
 80030e0:	370c      	adds	r7, #12
 80030e2:	46bd      	mov	sp, r7
 80030e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e8:	4770      	bx	lr

080030ea <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80030ea:	b480      	push	{r7}
 80030ec:	b083      	sub	sp, #12
 80030ee:	af00      	add	r7, sp, #0
 80030f0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80030f2:	bf00      	nop
 80030f4:	370c      	adds	r7, #12
 80030f6:	46bd      	mov	sp, r7
 80030f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fc:	4770      	bx	lr

080030fe <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80030fe:	b480      	push	{r7}
 8003100:	b083      	sub	sp, #12
 8003102:	af00      	add	r7, sp, #0
 8003104:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003106:	bf00      	nop
 8003108:	370c      	adds	r7, #12
 800310a:	46bd      	mov	sp, r7
 800310c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003110:	4770      	bx	lr

08003112 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003112:	b480      	push	{r7}
 8003114:	b083      	sub	sp, #12
 8003116:	af00      	add	r7, sp, #0
 8003118:	6078      	str	r0, [r7, #4]
 800311a:	460b      	mov	r3, r1
 800311c:	70fb      	strb	r3, [r7, #3]
 800311e:	4613      	mov	r3, r2
 8003120:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003122:	bf00      	nop
 8003124:	370c      	adds	r7, #12
 8003126:	46bd      	mov	sp, r7
 8003128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312c:	4770      	bx	lr

0800312e <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800312e:	b480      	push	{r7}
 8003130:	b083      	sub	sp, #12
 8003132:	af00      	add	r7, sp, #0
 8003134:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8003136:	bf00      	nop
 8003138:	370c      	adds	r7, #12
 800313a:	46bd      	mov	sp, r7
 800313c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003140:	4770      	bx	lr

08003142 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003142:	b480      	push	{r7}
 8003144:	b083      	sub	sp, #12
 8003146:	af00      	add	r7, sp, #0
 8003148:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800314a:	bf00      	nop
 800314c:	370c      	adds	r7, #12
 800314e:	46bd      	mov	sp, r7
 8003150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003154:	4770      	bx	lr

08003156 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003156:	b480      	push	{r7}
 8003158:	b083      	sub	sp, #12
 800315a:	af00      	add	r7, sp, #0
 800315c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800315e:	bf00      	nop
 8003160:	370c      	adds	r7, #12
 8003162:	46bd      	mov	sp, r7
 8003164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003168:	4770      	bx	lr

0800316a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800316a:	b480      	push	{r7}
 800316c:	b083      	sub	sp, #12
 800316e:	af00      	add	r7, sp, #0
 8003170:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003172:	bf00      	nop
 8003174:	370c      	adds	r7, #12
 8003176:	46bd      	mov	sp, r7
 8003178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317c:	4770      	bx	lr

0800317e <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800317e:	b580      	push	{r7, lr}
 8003180:	b086      	sub	sp, #24
 8003182:	af00      	add	r7, sp, #0
 8003184:	60f8      	str	r0, [r7, #12]
 8003186:	60b9      	str	r1, [r7, #8]
 8003188:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800318e:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8003190:	68bb      	ldr	r3, [r7, #8]
 8003192:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800319a:	2b01      	cmp	r3, #1
 800319c:	d101      	bne.n	80031a2 <I2C_Slave_ISR_IT+0x24>
 800319e:	2302      	movs	r3, #2
 80031a0:	e0e2      	b.n	8003368 <I2C_Slave_ISR_IT+0x1ea>
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	2201      	movs	r2, #1
 80031a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80031aa:	693b      	ldr	r3, [r7, #16]
 80031ac:	f003 0320 	and.w	r3, r3, #32
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d009      	beq.n	80031c8 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d004      	beq.n	80031c8 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80031be:	6939      	ldr	r1, [r7, #16]
 80031c0:	68f8      	ldr	r0, [r7, #12]
 80031c2:	f000 fe4d 	bl	8003e60 <I2C_ITSlaveCplt>
 80031c6:	e0ca      	b.n	800335e <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80031c8:	693b      	ldr	r3, [r7, #16]
 80031ca:	f003 0310 	and.w	r3, r3, #16
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d04b      	beq.n	800326a <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d046      	beq.n	800326a <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031e0:	b29b      	uxth	r3, r3
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d128      	bne.n	8003238 <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80031ec:	b2db      	uxtb	r3, r3
 80031ee:	2b28      	cmp	r3, #40	@ 0x28
 80031f0:	d108      	bne.n	8003204 <I2C_Slave_ISR_IT+0x86>
 80031f2:	697b      	ldr	r3, [r7, #20]
 80031f4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80031f8:	d104      	bne.n	8003204 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80031fa:	6939      	ldr	r1, [r7, #16]
 80031fc:	68f8      	ldr	r0, [r7, #12]
 80031fe:	f000 ff93 	bl	8004128 <I2C_ITListenCplt>
 8003202:	e031      	b.n	8003268 <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800320a:	b2db      	uxtb	r3, r3
 800320c:	2b29      	cmp	r3, #41	@ 0x29
 800320e:	d10e      	bne.n	800322e <I2C_Slave_ISR_IT+0xb0>
 8003210:	697b      	ldr	r3, [r7, #20]
 8003212:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003216:	d00a      	beq.n	800322e <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	2210      	movs	r2, #16
 800321e:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8003220:	68f8      	ldr	r0, [r7, #12]
 8003222:	f001 f8ec 	bl	80043fe <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003226:	68f8      	ldr	r0, [r7, #12]
 8003228:	f000 fcf5 	bl	8003c16 <I2C_ITSlaveSeqCplt>
 800322c:	e01c      	b.n	8003268 <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	2210      	movs	r2, #16
 8003234:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8003236:	e08f      	b.n	8003358 <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	2210      	movs	r2, #16
 800323e:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003244:	f043 0204 	orr.w	r2, r3, #4
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800324c:	697b      	ldr	r3, [r7, #20]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d003      	beq.n	800325a <I2C_Slave_ISR_IT+0xdc>
 8003252:	697b      	ldr	r3, [r7, #20]
 8003254:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003258:	d17e      	bne.n	8003358 <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800325e:	4619      	mov	r1, r3
 8003260:	68f8      	ldr	r0, [r7, #12]
 8003262:	f000 ffb5 	bl	80041d0 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8003266:	e077      	b.n	8003358 <I2C_Slave_ISR_IT+0x1da>
 8003268:	e076      	b.n	8003358 <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	f003 0304 	and.w	r3, r3, #4
 8003270:	2b00      	cmp	r3, #0
 8003272:	d02f      	beq.n	80032d4 <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800327a:	2b00      	cmp	r3, #0
 800327c:	d02a      	beq.n	80032d4 <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003282:	b29b      	uxth	r3, r3
 8003284:	2b00      	cmp	r3, #0
 8003286:	d018      	beq.n	80032ba <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003292:	b2d2      	uxtb	r2, r2
 8003294:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800329a:	1c5a      	adds	r2, r3, #1
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032a4:	3b01      	subs	r3, #1
 80032a6:	b29a      	uxth	r2, r3
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032b0:	b29b      	uxth	r3, r3
 80032b2:	3b01      	subs	r3, #1
 80032b4:	b29a      	uxth	r2, r3
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032be:	b29b      	uxth	r3, r3
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d14b      	bne.n	800335c <I2C_Slave_ISR_IT+0x1de>
 80032c4:	697b      	ldr	r3, [r7, #20]
 80032c6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80032ca:	d047      	beq.n	800335c <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80032cc:	68f8      	ldr	r0, [r7, #12]
 80032ce:	f000 fca2 	bl	8003c16 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80032d2:	e043      	b.n	800335c <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80032d4:	693b      	ldr	r3, [r7, #16]
 80032d6:	f003 0308 	and.w	r3, r3, #8
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d009      	beq.n	80032f2 <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d004      	beq.n	80032f2 <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80032e8:	6939      	ldr	r1, [r7, #16]
 80032ea:	68f8      	ldr	r0, [r7, #12]
 80032ec:	f000 fbd2 	bl	8003a94 <I2C_ITAddrCplt>
 80032f0:	e035      	b.n	800335e <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80032f2:	693b      	ldr	r3, [r7, #16]
 80032f4:	f003 0302 	and.w	r3, r3, #2
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d030      	beq.n	800335e <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003302:	2b00      	cmp	r3, #0
 8003304:	d02b      	beq.n	800335e <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800330a:	b29b      	uxth	r3, r3
 800330c:	2b00      	cmp	r3, #0
 800330e:	d018      	beq.n	8003342 <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003314:	781a      	ldrb	r2, [r3, #0]
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003320:	1c5a      	adds	r2, r3, #1
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800332a:	b29b      	uxth	r3, r3
 800332c:	3b01      	subs	r3, #1
 800332e:	b29a      	uxth	r2, r3
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003338:	3b01      	subs	r3, #1
 800333a:	b29a      	uxth	r2, r3
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	851a      	strh	r2, [r3, #40]	@ 0x28
 8003340:	e00d      	b.n	800335e <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8003342:	697b      	ldr	r3, [r7, #20]
 8003344:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003348:	d002      	beq.n	8003350 <I2C_Slave_ISR_IT+0x1d2>
 800334a:	697b      	ldr	r3, [r7, #20]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d106      	bne.n	800335e <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003350:	68f8      	ldr	r0, [r7, #12]
 8003352:	f000 fc60 	bl	8003c16 <I2C_ITSlaveSeqCplt>
 8003356:	e002      	b.n	800335e <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 8003358:	bf00      	nop
 800335a:	e000      	b.n	800335e <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 800335c:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	2200      	movs	r2, #0
 8003362:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8003366:	2300      	movs	r3, #0
}
 8003368:	4618      	mov	r0, r3
 800336a:	3718      	adds	r7, #24
 800336c:	46bd      	mov	sp, r7
 800336e:	bd80      	pop	{r7, pc}

08003370 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b088      	sub	sp, #32
 8003374:	af02      	add	r7, sp, #8
 8003376:	60f8      	str	r0, [r7, #12]
 8003378:	60b9      	str	r1, [r7, #8]
 800337a:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003382:	2b01      	cmp	r3, #1
 8003384:	d101      	bne.n	800338a <I2C_Master_ISR_DMA+0x1a>
 8003386:	2302      	movs	r3, #2
 8003388:	e0d9      	b.n	800353e <I2C_Master_ISR_DMA+0x1ce>
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	2201      	movs	r2, #1
 800338e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003392:	68bb      	ldr	r3, [r7, #8]
 8003394:	f003 0310 	and.w	r3, r3, #16
 8003398:	2b00      	cmp	r3, #0
 800339a:	d016      	beq.n	80033ca <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d011      	beq.n	80033ca <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	2210      	movs	r2, #16
 80033ac:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033b2:	f043 0204 	orr.w	r2, r3, #4
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80033ba:	2120      	movs	r1, #32
 80033bc:	68f8      	ldr	r0, [r7, #12]
 80033be:	f001 fab7 	bl	8004930 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80033c2:	68f8      	ldr	r0, [r7, #12]
 80033c4:	f001 f81b 	bl	80043fe <I2C_Flush_TXDR>
 80033c8:	e0b4      	b.n	8003534 <I2C_Master_ISR_DMA+0x1c4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80033ca:	68bb      	ldr	r3, [r7, #8]
 80033cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d071      	beq.n	80034b8 <I2C_Master_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d06c      	beq.n	80034b8 <I2C_Master_ISR_DMA+0x148>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	681a      	ldr	r2, [r3, #0]
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80033ec:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033f2:	b29b      	uxth	r3, r3
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d04e      	beq.n	8003496 <I2C_Master_ISR_DMA+0x126>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	b29b      	uxth	r3, r3
 8003400:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003404:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800340a:	b29b      	uxth	r3, r3
 800340c:	2bff      	cmp	r3, #255	@ 0xff
 800340e:	d906      	bls.n	800341e <I2C_Master_ISR_DMA+0xae>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	22ff      	movs	r2, #255	@ 0xff
 8003414:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 8003416:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800341a:	617b      	str	r3, [r7, #20]
 800341c:	e010      	b.n	8003440 <I2C_Master_ISR_DMA+0xd0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003422:	b29a      	uxth	r2, r3
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800342c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003430:	d003      	beq.n	800343a <I2C_Master_ISR_DMA+0xca>
        {
          xfermode = hi2c->XferOptions;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003436:	617b      	str	r3, [r7, #20]
 8003438:	e002      	b.n	8003440 <I2C_Master_ISR_DMA+0xd0>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 800343a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800343e:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003444:	b2da      	uxtb	r2, r3
 8003446:	8a79      	ldrh	r1, [r7, #18]
 8003448:	2300      	movs	r3, #0
 800344a:	9300      	str	r3, [sp, #0]
 800344c:	697b      	ldr	r3, [r7, #20]
 800344e:	68f8      	ldr	r0, [r7, #12]
 8003450:	f001 fa3c 	bl	80048cc <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003458:	b29a      	uxth	r2, r3
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800345e:	1ad3      	subs	r3, r2, r3
 8003460:	b29a      	uxth	r2, r3
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800346c:	b2db      	uxtb	r3, r3
 800346e:	2b22      	cmp	r3, #34	@ 0x22
 8003470:	d108      	bne.n	8003484 <I2C_Master_ISR_DMA+0x114>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	681a      	ldr	r2, [r3, #0]
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003480:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8003482:	e057      	b.n	8003534 <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	681a      	ldr	r2, [r3, #0]
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003492:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8003494:	e04e      	b.n	8003534 <I2C_Master_ISR_DMA+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034a0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80034a4:	d003      	beq.n	80034ae <I2C_Master_ISR_DMA+0x13e>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 80034a6:	68f8      	ldr	r0, [r7, #12]
 80034a8:	f000 fb78 	bl	8003b9c <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 80034ac:	e042      	b.n	8003534 <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80034ae:	2140      	movs	r1, #64	@ 0x40
 80034b0:	68f8      	ldr	r0, [r7, #12]
 80034b2:	f000 fe8d 	bl	80041d0 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 80034b6:	e03d      	b.n	8003534 <I2C_Master_ISR_DMA+0x1c4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d028      	beq.n	8003514 <I2C_Master_ISR_DMA+0x1a4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d023      	beq.n	8003514 <I2C_Master_ISR_DMA+0x1a4>
  {
    if (hi2c->XferCount == 0U)
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034d0:	b29b      	uxth	r3, r3
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d119      	bne.n	800350a <I2C_Master_ISR_DMA+0x19a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034e0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80034e4:	d025      	beq.n	8003532 <I2C_Master_ISR_DMA+0x1c2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034ea:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80034ee:	d108      	bne.n	8003502 <I2C_Master_ISR_DMA+0x192>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	685a      	ldr	r2, [r3, #4]
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80034fe:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8003500:	e017      	b.n	8003532 <I2C_Master_ISR_DMA+0x1c2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8003502:	68f8      	ldr	r0, [r7, #12]
 8003504:	f000 fb4a 	bl	8003b9c <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8003508:	e013      	b.n	8003532 <I2C_Master_ISR_DMA+0x1c2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800350a:	2140      	movs	r1, #64	@ 0x40
 800350c:	68f8      	ldr	r0, [r7, #12]
 800350e:	f000 fe5f 	bl	80041d0 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8003512:	e00e      	b.n	8003532 <I2C_Master_ISR_DMA+0x1c2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003514:	68bb      	ldr	r3, [r7, #8]
 8003516:	f003 0320 	and.w	r3, r3, #32
 800351a:	2b00      	cmp	r3, #0
 800351c:	d00a      	beq.n	8003534 <I2C_Master_ISR_DMA+0x1c4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003524:	2b00      	cmp	r3, #0
 8003526:	d005      	beq.n	8003534 <I2C_Master_ISR_DMA+0x1c4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8003528:	68b9      	ldr	r1, [r7, #8]
 800352a:	68f8      	ldr	r0, [r7, #12]
 800352c:	f000 fbd0 	bl	8003cd0 <I2C_ITMasterCplt>
 8003530:	e000      	b.n	8003534 <I2C_Master_ISR_DMA+0x1c4>
    if (hi2c->XferCount == 0U)
 8003532:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	2200      	movs	r2, #0
 8003538:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800353c:	2300      	movs	r3, #0
}
 800353e:	4618      	mov	r0, r3
 8003540:	3718      	adds	r7, #24
 8003542:	46bd      	mov	sp, r7
 8003544:	bd80      	pop	{r7, pc}
	...

08003548 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b088      	sub	sp, #32
 800354c:	af02      	add	r7, sp, #8
 800354e:	60f8      	str	r0, [r7, #12]
 8003550:	60b9      	str	r1, [r7, #8]
 8003552:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8003554:	4b8d      	ldr	r3, [pc, #564]	@ (800378c <I2C_Mem_ISR_DMA+0x244>)
 8003556:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800355e:	2b01      	cmp	r3, #1
 8003560:	d101      	bne.n	8003566 <I2C_Mem_ISR_DMA+0x1e>
 8003562:	2302      	movs	r3, #2
 8003564:	e10e      	b.n	8003784 <I2C_Mem_ISR_DMA+0x23c>
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	2201      	movs	r2, #1
 800356a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800356e:	68bb      	ldr	r3, [r7, #8]
 8003570:	f003 0310 	and.w	r3, r3, #16
 8003574:	2b00      	cmp	r3, #0
 8003576:	d016      	beq.n	80035a6 <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800357e:	2b00      	cmp	r3, #0
 8003580:	d011      	beq.n	80035a6 <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	2210      	movs	r2, #16
 8003588:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800358e:	f043 0204 	orr.w	r2, r3, #4
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8003596:	2120      	movs	r1, #32
 8003598:	68f8      	ldr	r0, [r7, #12]
 800359a:	f001 f9c9 	bl	8004930 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800359e:	68f8      	ldr	r0, [r7, #12]
 80035a0:	f000 ff2d 	bl	80043fe <I2C_Flush_TXDR>
 80035a4:	e0e9      	b.n	800377a <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 80035a6:	68bb      	ldr	r3, [r7, #8]
 80035a8:	f003 0302 	and.w	r3, r3, #2
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d00e      	beq.n	80035ce <I2C_Mem_ISR_DMA+0x86>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d009      	beq.n	80035ce <I2C_Mem_ISR_DMA+0x86>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	68fa      	ldr	r2, [r7, #12]
 80035c0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80035c2:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	f04f 32ff 	mov.w	r2, #4294967295
 80035ca:	651a      	str	r2, [r3, #80]	@ 0x50
 80035cc:	e0d5      	b.n	800377a <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80035ce:	68bb      	ldr	r3, [r7, #8]
 80035d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d05f      	beq.n	8003698 <I2C_Mem_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d05a      	beq.n	8003698 <I2C_Mem_ISR_DMA+0x150>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80035e2:	2101      	movs	r1, #1
 80035e4:	68f8      	ldr	r0, [r7, #12]
 80035e6:	f001 fa27 	bl	8004a38 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80035ea:	2110      	movs	r1, #16
 80035ec:	68f8      	ldr	r0, [r7, #12]
 80035ee:	f001 f99f 	bl	8004930 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035f6:	b29b      	uxth	r3, r3
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d048      	beq.n	800368e <I2C_Mem_ISR_DMA+0x146>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003600:	b29b      	uxth	r3, r3
 8003602:	2bff      	cmp	r3, #255	@ 0xff
 8003604:	d910      	bls.n	8003628 <I2C_Mem_ISR_DMA+0xe0>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	22ff      	movs	r2, #255	@ 0xff
 800360a:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003610:	b299      	uxth	r1, r3
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003616:	b2da      	uxtb	r2, r3
 8003618:	2300      	movs	r3, #0
 800361a:	9300      	str	r3, [sp, #0]
 800361c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003620:	68f8      	ldr	r0, [r7, #12]
 8003622:	f001 f953 	bl	80048cc <I2C_TransferConfig>
 8003626:	e011      	b.n	800364c <I2C_Mem_ISR_DMA+0x104>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800362c:	b29a      	uxth	r2, r3
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003636:	b299      	uxth	r1, r3
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800363c:	b2da      	uxtb	r2, r3
 800363e:	2300      	movs	r3, #0
 8003640:	9300      	str	r3, [sp, #0]
 8003642:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003646:	68f8      	ldr	r0, [r7, #12]
 8003648:	f001 f940 	bl	80048cc <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003650:	b29a      	uxth	r2, r3
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003656:	1ad3      	subs	r3, r2, r3
 8003658:	b29a      	uxth	r2, r3
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003664:	b2db      	uxtb	r3, r3
 8003666:	2b22      	cmp	r3, #34	@ 0x22
 8003668:	d108      	bne.n	800367c <I2C_Mem_ISR_DMA+0x134>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	681a      	ldr	r2, [r3, #0]
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003678:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800367a:	e07e      	b.n	800377a <I2C_Mem_ISR_DMA+0x232>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	681a      	ldr	r2, [r3, #0]
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800368a:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800368c:	e075      	b.n	800377a <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800368e:	2140      	movs	r1, #64	@ 0x40
 8003690:	68f8      	ldr	r0, [r7, #12]
 8003692:	f000 fd9d 	bl	80041d0 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8003696:	e070      	b.n	800377a <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d05d      	beq.n	800375e <I2C_Mem_ISR_DMA+0x216>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d058      	beq.n	800375e <I2C_Mem_ISR_DMA+0x216>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80036ac:	2101      	movs	r1, #1
 80036ae:	68f8      	ldr	r0, [r7, #12]
 80036b0:	f001 f9c2 	bl	8004a38 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80036b4:	2110      	movs	r1, #16
 80036b6:	68f8      	ldr	r0, [r7, #12]
 80036b8:	f001 f93a 	bl	8004930 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80036c2:	b2db      	uxtb	r3, r3
 80036c4:	2b22      	cmp	r3, #34	@ 0x22
 80036c6:	d101      	bne.n	80036cc <I2C_Mem_ISR_DMA+0x184>
    {
      direction = I2C_GENERATE_START_READ;
 80036c8:	4b31      	ldr	r3, [pc, #196]	@ (8003790 <I2C_Mem_ISR_DMA+0x248>)
 80036ca:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036d0:	b29b      	uxth	r3, r3
 80036d2:	2bff      	cmp	r3, #255	@ 0xff
 80036d4:	d910      	bls.n	80036f8 <I2C_Mem_ISR_DMA+0x1b0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	22ff      	movs	r2, #255	@ 0xff
 80036da:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036e0:	b299      	uxth	r1, r3
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036e6:	b2da      	uxtb	r2, r3
 80036e8:	697b      	ldr	r3, [r7, #20]
 80036ea:	9300      	str	r3, [sp, #0]
 80036ec:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80036f0:	68f8      	ldr	r0, [r7, #12]
 80036f2:	f001 f8eb 	bl	80048cc <I2C_TransferConfig>
 80036f6:	e011      	b.n	800371c <I2C_Mem_ISR_DMA+0x1d4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036fc:	b29a      	uxth	r2, r3
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003706:	b299      	uxth	r1, r3
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800370c:	b2da      	uxtb	r2, r3
 800370e:	697b      	ldr	r3, [r7, #20]
 8003710:	9300      	str	r3, [sp, #0]
 8003712:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003716:	68f8      	ldr	r0, [r7, #12]
 8003718:	f001 f8d8 	bl	80048cc <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003720:	b29a      	uxth	r2, r3
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003726:	1ad3      	subs	r3, r2, r3
 8003728:	b29a      	uxth	r2, r3
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003734:	b2db      	uxtb	r3, r3
 8003736:	2b22      	cmp	r3, #34	@ 0x22
 8003738:	d108      	bne.n	800374c <I2C_Mem_ISR_DMA+0x204>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	681a      	ldr	r2, [r3, #0]
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003748:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800374a:	e016      	b.n	800377a <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	681a      	ldr	r2, [r3, #0]
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800375a:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800375c:	e00d      	b.n	800377a <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800375e:	68bb      	ldr	r3, [r7, #8]
 8003760:	f003 0320 	and.w	r3, r3, #32
 8003764:	2b00      	cmp	r3, #0
 8003766:	d008      	beq.n	800377a <I2C_Mem_ISR_DMA+0x232>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800376e:	2b00      	cmp	r3, #0
 8003770:	d003      	beq.n	800377a <I2C_Mem_ISR_DMA+0x232>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8003772:	68b9      	ldr	r1, [r7, #8]
 8003774:	68f8      	ldr	r0, [r7, #12]
 8003776:	f000 faab 	bl	8003cd0 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	2200      	movs	r2, #0
 800377e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8003782:	2300      	movs	r3, #0
}
 8003784:	4618      	mov	r0, r3
 8003786:	3718      	adds	r7, #24
 8003788:	46bd      	mov	sp, r7
 800378a:	bd80      	pop	{r7, pc}
 800378c:	80002000 	.word	0x80002000
 8003790:	80002400 	.word	0x80002400

08003794 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b088      	sub	sp, #32
 8003798:	af00      	add	r7, sp, #0
 800379a:	60f8      	str	r0, [r7, #12]
 800379c:	60b9      	str	r1, [r7, #8]
 800379e:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037a4:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 80037a6:	2300      	movs	r3, #0
 80037a8:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80037b0:	2b01      	cmp	r3, #1
 80037b2:	d101      	bne.n	80037b8 <I2C_Slave_ISR_DMA+0x24>
 80037b4:	2302      	movs	r3, #2
 80037b6:	e0c0      	b.n	800393a <I2C_Slave_ISR_DMA+0x1a6>
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	2201      	movs	r2, #1
 80037bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80037c0:	68bb      	ldr	r3, [r7, #8]
 80037c2:	f003 0320 	and.w	r3, r3, #32
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d009      	beq.n	80037de <I2C_Slave_ISR_DMA+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d004      	beq.n	80037de <I2C_Slave_ISR_DMA+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 80037d4:	68b9      	ldr	r1, [r7, #8]
 80037d6:	68f8      	ldr	r0, [r7, #12]
 80037d8:	f000 fb42 	bl	8003e60 <I2C_ITSlaveCplt>
 80037dc:	e0a8      	b.n	8003930 <I2C_Slave_ISR_DMA+0x19c>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80037de:	68bb      	ldr	r3, [r7, #8]
 80037e0:	f003 0310 	and.w	r3, r3, #16
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	f000 8095 	beq.w	8003914 <I2C_Slave_ISR_DMA+0x180>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	f000 808f 	beq.w	8003914 <I2C_Slave_ISR_DMA+0x180>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d104      	bne.n	800380a <I2C_Slave_ISR_DMA+0x76>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8003806:	2b00      	cmp	r3, #0
 8003808:	d07d      	beq.n	8003906 <I2C_Slave_ISR_DMA+0x172>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800380e:	2b00      	cmp	r3, #0
 8003810:	d00c      	beq.n	800382c <I2C_Slave_ISR_DMA+0x98>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003818:	2b00      	cmp	r3, #0
 800381a:	d007      	beq.n	800382c <I2C_Slave_ISR_DMA+0x98>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d101      	bne.n	800382c <I2C_Slave_ISR_DMA+0x98>
          {
            treatdmanack = 1U;
 8003828:	2301      	movs	r3, #1
 800382a:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003830:	2b00      	cmp	r3, #0
 8003832:	d00c      	beq.n	800384e <I2C_Slave_ISR_DMA+0xba>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800383a:	2b00      	cmp	r3, #0
 800383c:	d007      	beq.n	800384e <I2C_Slave_ISR_DMA+0xba>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d101      	bne.n	800384e <I2C_Slave_ISR_DMA+0xba>
          {
            treatdmanack = 1U;
 800384a:	2301      	movs	r3, #1
 800384c:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 800384e:	69fb      	ldr	r3, [r7, #28]
 8003850:	2b01      	cmp	r3, #1
 8003852:	d128      	bne.n	80038a6 <I2C_Slave_ISR_DMA+0x112>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800385a:	b2db      	uxtb	r3, r3
 800385c:	2b28      	cmp	r3, #40	@ 0x28
 800385e:	d108      	bne.n	8003872 <I2C_Slave_ISR_DMA+0xde>
 8003860:	69bb      	ldr	r3, [r7, #24]
 8003862:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003866:	d104      	bne.n	8003872 <I2C_Slave_ISR_DMA+0xde>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8003868:	68b9      	ldr	r1, [r7, #8]
 800386a:	68f8      	ldr	r0, [r7, #12]
 800386c:	f000 fc5c 	bl	8004128 <I2C_ITListenCplt>
 8003870:	e048      	b.n	8003904 <I2C_Slave_ISR_DMA+0x170>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003878:	b2db      	uxtb	r3, r3
 800387a:	2b29      	cmp	r3, #41	@ 0x29
 800387c:	d10e      	bne.n	800389c <I2C_Slave_ISR_DMA+0x108>
 800387e:	69bb      	ldr	r3, [r7, #24]
 8003880:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003884:	d00a      	beq.n	800389c <I2C_Slave_ISR_DMA+0x108>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	2210      	movs	r2, #16
 800388c:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 800388e:	68f8      	ldr	r0, [r7, #12]
 8003890:	f000 fdb5 	bl	80043fe <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8003894:	68f8      	ldr	r0, [r7, #12]
 8003896:	f000 f9be 	bl	8003c16 <I2C_ITSlaveSeqCplt>
 800389a:	e033      	b.n	8003904 <I2C_Slave_ISR_DMA+0x170>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	2210      	movs	r2, #16
 80038a2:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 80038a4:	e034      	b.n	8003910 <I2C_Slave_ISR_DMA+0x17c>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	2210      	movs	r2, #16
 80038ac:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038b2:	f043 0204 	orr.w	r2, r3, #4
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80038c0:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80038c2:	69bb      	ldr	r3, [r7, #24]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d003      	beq.n	80038d0 <I2C_Slave_ISR_DMA+0x13c>
 80038c8:	69bb      	ldr	r3, [r7, #24]
 80038ca:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80038ce:	d11f      	bne.n	8003910 <I2C_Slave_ISR_DMA+0x17c>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80038d0:	7dfb      	ldrb	r3, [r7, #23]
 80038d2:	2b21      	cmp	r3, #33	@ 0x21
 80038d4:	d002      	beq.n	80038dc <I2C_Slave_ISR_DMA+0x148>
 80038d6:	7dfb      	ldrb	r3, [r7, #23]
 80038d8:	2b29      	cmp	r3, #41	@ 0x29
 80038da:	d103      	bne.n	80038e4 <I2C_Slave_ISR_DMA+0x150>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	2221      	movs	r2, #33	@ 0x21
 80038e0:	631a      	str	r2, [r3, #48]	@ 0x30
 80038e2:	e008      	b.n	80038f6 <I2C_Slave_ISR_DMA+0x162>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80038e4:	7dfb      	ldrb	r3, [r7, #23]
 80038e6:	2b22      	cmp	r3, #34	@ 0x22
 80038e8:	d002      	beq.n	80038f0 <I2C_Slave_ISR_DMA+0x15c>
 80038ea:	7dfb      	ldrb	r3, [r7, #23]
 80038ec:	2b2a      	cmp	r3, #42	@ 0x2a
 80038ee:	d102      	bne.n	80038f6 <I2C_Slave_ISR_DMA+0x162>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	2222      	movs	r2, #34	@ 0x22
 80038f4:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038fa:	4619      	mov	r1, r3
 80038fc:	68f8      	ldr	r0, [r7, #12]
 80038fe:	f000 fc67 	bl	80041d0 <I2C_ITError>
      if (treatdmanack == 1U)
 8003902:	e005      	b.n	8003910 <I2C_Slave_ISR_DMA+0x17c>
 8003904:	e004      	b.n	8003910 <I2C_Slave_ISR_DMA+0x17c>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	2210      	movs	r2, #16
 800390c:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800390e:	e00f      	b.n	8003930 <I2C_Slave_ISR_DMA+0x19c>
      if (treatdmanack == 1U)
 8003910:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8003912:	e00d      	b.n	8003930 <I2C_Slave_ISR_DMA+0x19c>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003914:	68bb      	ldr	r3, [r7, #8]
 8003916:	f003 0308 	and.w	r3, r3, #8
 800391a:	2b00      	cmp	r3, #0
 800391c:	d008      	beq.n	8003930 <I2C_Slave_ISR_DMA+0x19c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003924:	2b00      	cmp	r3, #0
 8003926:	d003      	beq.n	8003930 <I2C_Slave_ISR_DMA+0x19c>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8003928:	68b9      	ldr	r1, [r7, #8]
 800392a:	68f8      	ldr	r0, [r7, #12]
 800392c:	f000 f8b2 	bl	8003a94 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	2200      	movs	r2, #0
 8003934:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8003938:	2300      	movs	r3, #0
}
 800393a:	4618      	mov	r0, r3
 800393c:	3720      	adds	r7, #32
 800393e:	46bd      	mov	sp, r7
 8003940:	bd80      	pop	{r7, pc}
	...

08003944 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b086      	sub	sp, #24
 8003948:	af02      	add	r7, sp, #8
 800394a:	60f8      	str	r0, [r7, #12]
 800394c:	4608      	mov	r0, r1
 800394e:	4611      	mov	r1, r2
 8003950:	461a      	mov	r2, r3
 8003952:	4603      	mov	r3, r0
 8003954:	817b      	strh	r3, [r7, #10]
 8003956:	460b      	mov	r3, r1
 8003958:	813b      	strh	r3, [r7, #8]
 800395a:	4613      	mov	r3, r2
 800395c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800395e:	88fb      	ldrh	r3, [r7, #6]
 8003960:	b2da      	uxtb	r2, r3
 8003962:	8979      	ldrh	r1, [r7, #10]
 8003964:	4b20      	ldr	r3, [pc, #128]	@ (80039e8 <I2C_RequestMemoryWrite+0xa4>)
 8003966:	9300      	str	r3, [sp, #0]
 8003968:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800396c:	68f8      	ldr	r0, [r7, #12]
 800396e:	f000 ffad 	bl	80048cc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003972:	69fa      	ldr	r2, [r7, #28]
 8003974:	69b9      	ldr	r1, [r7, #24]
 8003976:	68f8      	ldr	r0, [r7, #12]
 8003978:	f000 fe3e 	bl	80045f8 <I2C_WaitOnTXISFlagUntilTimeout>
 800397c:	4603      	mov	r3, r0
 800397e:	2b00      	cmp	r3, #0
 8003980:	d001      	beq.n	8003986 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003982:	2301      	movs	r3, #1
 8003984:	e02c      	b.n	80039e0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003986:	88fb      	ldrh	r3, [r7, #6]
 8003988:	2b01      	cmp	r3, #1
 800398a:	d105      	bne.n	8003998 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800398c:	893b      	ldrh	r3, [r7, #8]
 800398e:	b2da      	uxtb	r2, r3
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	629a      	str	r2, [r3, #40]	@ 0x28
 8003996:	e015      	b.n	80039c4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003998:	893b      	ldrh	r3, [r7, #8]
 800399a:	0a1b      	lsrs	r3, r3, #8
 800399c:	b29b      	uxth	r3, r3
 800399e:	b2da      	uxtb	r2, r3
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80039a6:	69fa      	ldr	r2, [r7, #28]
 80039a8:	69b9      	ldr	r1, [r7, #24]
 80039aa:	68f8      	ldr	r0, [r7, #12]
 80039ac:	f000 fe24 	bl	80045f8 <I2C_WaitOnTXISFlagUntilTimeout>
 80039b0:	4603      	mov	r3, r0
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d001      	beq.n	80039ba <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80039b6:	2301      	movs	r3, #1
 80039b8:	e012      	b.n	80039e0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80039ba:	893b      	ldrh	r3, [r7, #8]
 80039bc:	b2da      	uxtb	r2, r3
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80039c4:	69fb      	ldr	r3, [r7, #28]
 80039c6:	9300      	str	r3, [sp, #0]
 80039c8:	69bb      	ldr	r3, [r7, #24]
 80039ca:	2200      	movs	r2, #0
 80039cc:	2180      	movs	r1, #128	@ 0x80
 80039ce:	68f8      	ldr	r0, [r7, #12]
 80039d0:	f000 fdb9 	bl	8004546 <I2C_WaitOnFlagUntilTimeout>
 80039d4:	4603      	mov	r3, r0
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d001      	beq.n	80039de <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80039da:	2301      	movs	r3, #1
 80039dc:	e000      	b.n	80039e0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80039de:	2300      	movs	r3, #0
}
 80039e0:	4618      	mov	r0, r3
 80039e2:	3710      	adds	r7, #16
 80039e4:	46bd      	mov	sp, r7
 80039e6:	bd80      	pop	{r7, pc}
 80039e8:	80002000 	.word	0x80002000

080039ec <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b086      	sub	sp, #24
 80039f0:	af02      	add	r7, sp, #8
 80039f2:	60f8      	str	r0, [r7, #12]
 80039f4:	4608      	mov	r0, r1
 80039f6:	4611      	mov	r1, r2
 80039f8:	461a      	mov	r2, r3
 80039fa:	4603      	mov	r3, r0
 80039fc:	817b      	strh	r3, [r7, #10]
 80039fe:	460b      	mov	r3, r1
 8003a00:	813b      	strh	r3, [r7, #8]
 8003a02:	4613      	mov	r3, r2
 8003a04:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003a06:	88fb      	ldrh	r3, [r7, #6]
 8003a08:	b2da      	uxtb	r2, r3
 8003a0a:	8979      	ldrh	r1, [r7, #10]
 8003a0c:	4b20      	ldr	r3, [pc, #128]	@ (8003a90 <I2C_RequestMemoryRead+0xa4>)
 8003a0e:	9300      	str	r3, [sp, #0]
 8003a10:	2300      	movs	r3, #0
 8003a12:	68f8      	ldr	r0, [r7, #12]
 8003a14:	f000 ff5a 	bl	80048cc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a18:	69fa      	ldr	r2, [r7, #28]
 8003a1a:	69b9      	ldr	r1, [r7, #24]
 8003a1c:	68f8      	ldr	r0, [r7, #12]
 8003a1e:	f000 fdeb 	bl	80045f8 <I2C_WaitOnTXISFlagUntilTimeout>
 8003a22:	4603      	mov	r3, r0
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d001      	beq.n	8003a2c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003a28:	2301      	movs	r3, #1
 8003a2a:	e02c      	b.n	8003a86 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003a2c:	88fb      	ldrh	r3, [r7, #6]
 8003a2e:	2b01      	cmp	r3, #1
 8003a30:	d105      	bne.n	8003a3e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003a32:	893b      	ldrh	r3, [r7, #8]
 8003a34:	b2da      	uxtb	r2, r3
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	629a      	str	r2, [r3, #40]	@ 0x28
 8003a3c:	e015      	b.n	8003a6a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003a3e:	893b      	ldrh	r3, [r7, #8]
 8003a40:	0a1b      	lsrs	r3, r3, #8
 8003a42:	b29b      	uxth	r3, r3
 8003a44:	b2da      	uxtb	r2, r3
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a4c:	69fa      	ldr	r2, [r7, #28]
 8003a4e:	69b9      	ldr	r1, [r7, #24]
 8003a50:	68f8      	ldr	r0, [r7, #12]
 8003a52:	f000 fdd1 	bl	80045f8 <I2C_WaitOnTXISFlagUntilTimeout>
 8003a56:	4603      	mov	r3, r0
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d001      	beq.n	8003a60 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	e012      	b.n	8003a86 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003a60:	893b      	ldrh	r3, [r7, #8]
 8003a62:	b2da      	uxtb	r2, r3
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003a6a:	69fb      	ldr	r3, [r7, #28]
 8003a6c:	9300      	str	r3, [sp, #0]
 8003a6e:	69bb      	ldr	r3, [r7, #24]
 8003a70:	2200      	movs	r2, #0
 8003a72:	2140      	movs	r1, #64	@ 0x40
 8003a74:	68f8      	ldr	r0, [r7, #12]
 8003a76:	f000 fd66 	bl	8004546 <I2C_WaitOnFlagUntilTimeout>
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d001      	beq.n	8003a84 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003a80:	2301      	movs	r3, #1
 8003a82:	e000      	b.n	8003a86 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003a84:	2300      	movs	r3, #0
}
 8003a86:	4618      	mov	r0, r3
 8003a88:	3710      	adds	r7, #16
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bd80      	pop	{r7, pc}
 8003a8e:	bf00      	nop
 8003a90:	80002000 	.word	0x80002000

08003a94 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b084      	sub	sp, #16
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
 8003a9c:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003aa4:	b2db      	uxtb	r3, r3
 8003aa6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003aaa:	2b28      	cmp	r3, #40	@ 0x28
 8003aac:	d16a      	bne.n	8003b84 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	699b      	ldr	r3, [r3, #24]
 8003ab4:	0c1b      	lsrs	r3, r3, #16
 8003ab6:	b2db      	uxtb	r3, r3
 8003ab8:	f003 0301 	and.w	r3, r3, #1
 8003abc:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	699b      	ldr	r3, [r3, #24]
 8003ac4:	0c1b      	lsrs	r3, r3, #16
 8003ac6:	b29b      	uxth	r3, r3
 8003ac8:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8003acc:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	689b      	ldr	r3, [r3, #8]
 8003ad4:	b29b      	uxth	r3, r3
 8003ad6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ada:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	68db      	ldr	r3, [r3, #12]
 8003ae2:	b29b      	uxth	r3, r3
 8003ae4:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8003ae8:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	68db      	ldr	r3, [r3, #12]
 8003aee:	2b02      	cmp	r3, #2
 8003af0:	d138      	bne.n	8003b64 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8003af2:	897b      	ldrh	r3, [r7, #10]
 8003af4:	09db      	lsrs	r3, r3, #7
 8003af6:	b29a      	uxth	r2, r3
 8003af8:	89bb      	ldrh	r3, [r7, #12]
 8003afa:	4053      	eors	r3, r2
 8003afc:	b29b      	uxth	r3, r3
 8003afe:	f003 0306 	and.w	r3, r3, #6
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d11c      	bne.n	8003b40 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8003b06:	897b      	ldrh	r3, [r7, #10]
 8003b08:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b0e:	1c5a      	adds	r2, r3, #1
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b18:	2b02      	cmp	r3, #2
 8003b1a:	d13b      	bne.n	8003b94 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	2208      	movs	r2, #8
 8003b28:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003b32:	89ba      	ldrh	r2, [r7, #12]
 8003b34:	7bfb      	ldrb	r3, [r7, #15]
 8003b36:	4619      	mov	r1, r3
 8003b38:	6878      	ldr	r0, [r7, #4]
 8003b3a:	f7ff faea 	bl	8003112 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003b3e:	e029      	b.n	8003b94 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8003b40:	893b      	ldrh	r3, [r7, #8]
 8003b42:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003b44:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003b48:	6878      	ldr	r0, [r7, #4]
 8003b4a:	f000 ff75 	bl	8004a38 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2200      	movs	r2, #0
 8003b52:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003b56:	89ba      	ldrh	r2, [r7, #12]
 8003b58:	7bfb      	ldrb	r3, [r7, #15]
 8003b5a:	4619      	mov	r1, r3
 8003b5c:	6878      	ldr	r0, [r7, #4]
 8003b5e:	f7ff fad8 	bl	8003112 <HAL_I2C_AddrCallback>
}
 8003b62:	e017      	b.n	8003b94 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003b64:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003b68:	6878      	ldr	r0, [r7, #4]
 8003b6a:	f000 ff65 	bl	8004a38 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2200      	movs	r2, #0
 8003b72:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003b76:	89ba      	ldrh	r2, [r7, #12]
 8003b78:	7bfb      	ldrb	r3, [r7, #15]
 8003b7a:	4619      	mov	r1, r3
 8003b7c:	6878      	ldr	r0, [r7, #4]
 8003b7e:	f7ff fac8 	bl	8003112 <HAL_I2C_AddrCallback>
}
 8003b82:	e007      	b.n	8003b94 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	2208      	movs	r2, #8
 8003b8a:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2200      	movs	r2, #0
 8003b90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8003b94:	bf00      	nop
 8003b96:	3710      	adds	r7, #16
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	bd80      	pop	{r7, pc}

08003b9c <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b082      	sub	sp, #8
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003bb2:	b2db      	uxtb	r3, r3
 8003bb4:	2b21      	cmp	r3, #33	@ 0x21
 8003bb6:	d115      	bne.n	8003be4 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2220      	movs	r2, #32
 8003bbc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2211      	movs	r2, #17
 8003bc4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2200      	movs	r2, #0
 8003bca:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003bcc:	2101      	movs	r1, #1
 8003bce:	6878      	ldr	r0, [r7, #4]
 8003bd0:	f000 ff32 	bl	8004a38 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8003bdc:	6878      	ldr	r0, [r7, #4]
 8003bde:	f7ff fa70 	bl	80030c2 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003be2:	e014      	b.n	8003c0e <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2220      	movs	r2, #32
 8003be8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2212      	movs	r2, #18
 8003bf0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003bf8:	2102      	movs	r1, #2
 8003bfa:	6878      	ldr	r0, [r7, #4]
 8003bfc:	f000 ff1c 	bl	8004a38 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2200      	movs	r2, #0
 8003c04:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8003c08:	6878      	ldr	r0, [r7, #4]
 8003c0a:	f7ff fa64 	bl	80030d6 <HAL_I2C_MasterRxCpltCallback>
}
 8003c0e:	bf00      	nop
 8003c10:	3708      	adds	r7, #8
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bd80      	pop	{r7, pc}

08003c16 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8003c16:	b580      	push	{r7, lr}
 8003c18:	b084      	sub	sp, #16
 8003c1a:	af00      	add	r7, sp, #0
 8003c1c:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d008      	beq.n	8003c4a <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	681a      	ldr	r2, [r3, #0]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003c46:	601a      	str	r2, [r3, #0]
 8003c48:	e00c      	b.n	8003c64 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d007      	beq.n	8003c64 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	681a      	ldr	r2, [r3, #0]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003c62:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c6a:	b2db      	uxtb	r3, r3
 8003c6c:	2b29      	cmp	r3, #41	@ 0x29
 8003c6e:	d112      	bne.n	8003c96 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2228      	movs	r2, #40	@ 0x28
 8003c74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2221      	movs	r2, #33	@ 0x21
 8003c7c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003c7e:	2101      	movs	r1, #1
 8003c80:	6878      	ldr	r0, [r7, #4]
 8003c82:	f000 fed9 	bl	8004a38 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003c8e:	6878      	ldr	r0, [r7, #4]
 8003c90:	f7ff fa2b 	bl	80030ea <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003c94:	e017      	b.n	8003cc6 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c9c:	b2db      	uxtb	r3, r3
 8003c9e:	2b2a      	cmp	r3, #42	@ 0x2a
 8003ca0:	d111      	bne.n	8003cc6 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2228      	movs	r2, #40	@ 0x28
 8003ca6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2222      	movs	r2, #34	@ 0x22
 8003cae:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003cb0:	2102      	movs	r1, #2
 8003cb2:	6878      	ldr	r0, [r7, #4]
 8003cb4:	f000 fec0 	bl	8004a38 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003cc0:	6878      	ldr	r0, [r7, #4]
 8003cc2:	f7ff fa1c 	bl	80030fe <HAL_I2C_SlaveRxCpltCallback>
}
 8003cc6:	bf00      	nop
 8003cc8:	3710      	adds	r7, #16
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bd80      	pop	{r7, pc}
	...

08003cd0 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b086      	sub	sp, #24
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
 8003cd8:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	2220      	movs	r2, #32
 8003ce4:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003cec:	b2db      	uxtb	r3, r3
 8003cee:	2b21      	cmp	r3, #33	@ 0x21
 8003cf0:	d107      	bne.n	8003d02 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003cf2:	2101      	movs	r1, #1
 8003cf4:	6878      	ldr	r0, [r7, #4]
 8003cf6:	f000 fe9f 	bl	8004a38 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2211      	movs	r2, #17
 8003cfe:	631a      	str	r2, [r3, #48]	@ 0x30
 8003d00:	e00c      	b.n	8003d1c <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d08:	b2db      	uxtb	r3, r3
 8003d0a:	2b22      	cmp	r3, #34	@ 0x22
 8003d0c:	d106      	bne.n	8003d1c <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003d0e:	2102      	movs	r1, #2
 8003d10:	6878      	ldr	r0, [r7, #4]
 8003d12:	f000 fe91 	bl	8004a38 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2212      	movs	r2, #18
 8003d1a:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	6859      	ldr	r1, [r3, #4]
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681a      	ldr	r2, [r3, #0]
 8003d26:	4b4c      	ldr	r3, [pc, #304]	@ (8003e58 <I2C_ITMasterCplt+0x188>)
 8003d28:	400b      	ands	r3, r1
 8003d2a:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	4a49      	ldr	r2, [pc, #292]	@ (8003e5c <I2C_ITMasterCplt+0x18c>)
 8003d36:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8003d38:	697b      	ldr	r3, [r7, #20]
 8003d3a:	f003 0310 	and.w	r3, r3, #16
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d009      	beq.n	8003d56 <I2C_ITMasterCplt+0x86>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	2210      	movs	r2, #16
 8003d48:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d4e:	f043 0204 	orr.w	r2, r3, #4
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d5c:	b2db      	uxtb	r3, r3
 8003d5e:	2b60      	cmp	r3, #96	@ 0x60
 8003d60:	d10a      	bne.n	8003d78 <I2C_ITMasterCplt+0xa8>
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	f003 0304 	and.w	r3, r3, #4
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d005      	beq.n	8003d78 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d72:	b2db      	uxtb	r3, r3
 8003d74:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8003d76:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8003d78:	6878      	ldr	r0, [r7, #4]
 8003d7a:	f000 fb40 	bl	80043fe <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d82:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d8a:	b2db      	uxtb	r3, r3
 8003d8c:	2b60      	cmp	r3, #96	@ 0x60
 8003d8e:	d002      	beq.n	8003d96 <I2C_ITMasterCplt+0xc6>
 8003d90:	693b      	ldr	r3, [r7, #16]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d006      	beq.n	8003da4 <I2C_ITMasterCplt+0xd4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d9a:	4619      	mov	r1, r3
 8003d9c:	6878      	ldr	r0, [r7, #4]
 8003d9e:	f000 fa17 	bl	80041d0 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003da2:	e054      	b.n	8003e4e <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003daa:	b2db      	uxtb	r3, r3
 8003dac:	2b21      	cmp	r3, #33	@ 0x21
 8003dae:	d124      	bne.n	8003dfa <I2C_ITMasterCplt+0x12a>
    hi2c->State = HAL_I2C_STATE_READY;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2220      	movs	r2, #32
 8003db4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003dc4:	b2db      	uxtb	r3, r3
 8003dc6:	2b40      	cmp	r3, #64	@ 0x40
 8003dc8:	d10b      	bne.n	8003de2 <I2C_ITMasterCplt+0x112>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2200      	movs	r2, #0
 8003dce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003dda:	6878      	ldr	r0, [r7, #4]
 8003ddc:	f7ff f9b1 	bl	8003142 <HAL_I2C_MemTxCpltCallback>
}
 8003de0:	e035      	b.n	8003e4e <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2200      	movs	r2, #0
 8003de6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2200      	movs	r2, #0
 8003dee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003df2:	6878      	ldr	r0, [r7, #4]
 8003df4:	f7ff f965 	bl	80030c2 <HAL_I2C_MasterTxCpltCallback>
}
 8003df8:	e029      	b.n	8003e4e <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e00:	b2db      	uxtb	r3, r3
 8003e02:	2b22      	cmp	r3, #34	@ 0x22
 8003e04:	d123      	bne.n	8003e4e <I2C_ITMasterCplt+0x17e>
    hi2c->State = HAL_I2C_STATE_READY;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2220      	movs	r2, #32
 8003e0a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2200      	movs	r2, #0
 8003e12:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003e1a:	b2db      	uxtb	r3, r3
 8003e1c:	2b40      	cmp	r3, #64	@ 0x40
 8003e1e:	d10b      	bne.n	8003e38 <I2C_ITMasterCplt+0x168>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2200      	movs	r2, #0
 8003e24:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003e30:	6878      	ldr	r0, [r7, #4]
 8003e32:	f7fd fa4f 	bl	80012d4 <HAL_I2C_MemRxCpltCallback>
}
 8003e36:	e00a      	b.n	8003e4e <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2200      	movs	r2, #0
 8003e44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003e48:	6878      	ldr	r0, [r7, #4]
 8003e4a:	f7ff f944 	bl	80030d6 <HAL_I2C_MasterRxCpltCallback>
}
 8003e4e:	bf00      	nop
 8003e50:	3718      	adds	r7, #24
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bd80      	pop	{r7, pc}
 8003e56:	bf00      	nop
 8003e58:	fe00e800 	.word	0xfe00e800
 8003e5c:	ffff0000 	.word	0xffff0000

08003e60 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b086      	sub	sp, #24
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
 8003e68:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e7a:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e82:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	2220      	movs	r2, #32
 8003e8a:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003e8c:	7afb      	ldrb	r3, [r7, #11]
 8003e8e:	2b21      	cmp	r3, #33	@ 0x21
 8003e90:	d002      	beq.n	8003e98 <I2C_ITSlaveCplt+0x38>
 8003e92:	7afb      	ldrb	r3, [r7, #11]
 8003e94:	2b29      	cmp	r3, #41	@ 0x29
 8003e96:	d108      	bne.n	8003eaa <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8003e98:	f248 0101 	movw	r1, #32769	@ 0x8001
 8003e9c:	6878      	ldr	r0, [r7, #4]
 8003e9e:	f000 fdcb 	bl	8004a38 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2221      	movs	r2, #33	@ 0x21
 8003ea6:	631a      	str	r2, [r3, #48]	@ 0x30
 8003ea8:	e019      	b.n	8003ede <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003eaa:	7afb      	ldrb	r3, [r7, #11]
 8003eac:	2b22      	cmp	r3, #34	@ 0x22
 8003eae:	d002      	beq.n	8003eb6 <I2C_ITSlaveCplt+0x56>
 8003eb0:	7afb      	ldrb	r3, [r7, #11]
 8003eb2:	2b2a      	cmp	r3, #42	@ 0x2a
 8003eb4:	d108      	bne.n	8003ec8 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8003eb6:	f248 0102 	movw	r1, #32770	@ 0x8002
 8003eba:	6878      	ldr	r0, [r7, #4]
 8003ebc:	f000 fdbc 	bl	8004a38 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2222      	movs	r2, #34	@ 0x22
 8003ec4:	631a      	str	r2, [r3, #48]	@ 0x30
 8003ec6:	e00a      	b.n	8003ede <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8003ec8:	7afb      	ldrb	r3, [r7, #11]
 8003eca:	2b28      	cmp	r3, #40	@ 0x28
 8003ecc:	d107      	bne.n	8003ede <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8003ece:	f248 0103 	movw	r1, #32771	@ 0x8003
 8003ed2:	6878      	ldr	r0, [r7, #4]
 8003ed4:	f000 fdb0 	bl	8004a38 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2200      	movs	r2, #0
 8003edc:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	685a      	ldr	r2, [r3, #4]
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003eec:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	6859      	ldr	r1, [r3, #4]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681a      	ldr	r2, [r3, #0]
 8003ef8:	4b89      	ldr	r3, [pc, #548]	@ (8004120 <I2C_ITSlaveCplt+0x2c0>)
 8003efa:	400b      	ands	r3, r1
 8003efc:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8003efe:	6878      	ldr	r0, [r7, #4]
 8003f00:	f000 fa7d 	bl	80043fe <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003f04:	693b      	ldr	r3, [r7, #16]
 8003f06:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d013      	beq.n	8003f36 <I2C_ITSlaveCplt+0xd6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	681a      	ldr	r2, [r3, #0]
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003f1c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d01f      	beq.n	8003f66 <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	685b      	ldr	r3, [r3, #4]
 8003f2e:	b29a      	uxth	r2, r3
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003f34:	e017      	b.n	8003f66 <I2C_ITSlaveCplt+0x106>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003f36:	693b      	ldr	r3, [r7, #16]
 8003f38:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d012      	beq.n	8003f66 <I2C_ITSlaveCplt+0x106>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	681a      	ldr	r2, [r3, #0]
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003f4e:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d006      	beq.n	8003f66 <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	b29a      	uxth	r2, r3
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8003f66:	697b      	ldr	r3, [r7, #20]
 8003f68:	f003 0304 	and.w	r3, r3, #4
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d020      	beq.n	8003fb2 <I2C_ITSlaveCplt+0x152>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8003f70:	697b      	ldr	r3, [r7, #20]
 8003f72:	f023 0304 	bic.w	r3, r3, #4
 8003f76:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f82:	b2d2      	uxtb	r2, r2
 8003f84:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f8a:	1c5a      	adds	r2, r3, #1
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d00c      	beq.n	8003fb2 <I2C_ITSlaveCplt+0x152>
    {
      hi2c->XferSize--;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f9c:	3b01      	subs	r3, #1
 8003f9e:	b29a      	uxth	r2, r3
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fa8:	b29b      	uxth	r3, r3
 8003faa:	3b01      	subs	r3, #1
 8003fac:	b29a      	uxth	r2, r3
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fb6:	b29b      	uxth	r3, r3
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d005      	beq.n	8003fc8 <I2C_ITSlaveCplt+0x168>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fc0:	f043 0204 	orr.w	r2, r3, #4
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003fc8:	697b      	ldr	r3, [r7, #20]
 8003fca:	f003 0310 	and.w	r3, r3, #16
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d049      	beq.n	8004066 <I2C_ITSlaveCplt+0x206>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8003fd2:	693b      	ldr	r3, [r7, #16]
 8003fd4:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d044      	beq.n	8004066 <I2C_ITSlaveCplt+0x206>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fe0:	b29b      	uxth	r3, r3
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d128      	bne.n	8004038 <I2C_ITSlaveCplt+0x1d8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003fec:	b2db      	uxtb	r3, r3
 8003fee:	2b28      	cmp	r3, #40	@ 0x28
 8003ff0:	d108      	bne.n	8004004 <I2C_ITSlaveCplt+0x1a4>
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003ff8:	d104      	bne.n	8004004 <I2C_ITSlaveCplt+0x1a4>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8003ffa:	6979      	ldr	r1, [r7, #20]
 8003ffc:	6878      	ldr	r0, [r7, #4]
 8003ffe:	f000 f893 	bl	8004128 <I2C_ITListenCplt>
 8004002:	e030      	b.n	8004066 <I2C_ITSlaveCplt+0x206>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800400a:	b2db      	uxtb	r3, r3
 800400c:	2b29      	cmp	r3, #41	@ 0x29
 800400e:	d10e      	bne.n	800402e <I2C_ITSlaveCplt+0x1ce>
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004016:	d00a      	beq.n	800402e <I2C_ITSlaveCplt+0x1ce>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	2210      	movs	r2, #16
 800401e:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8004020:	6878      	ldr	r0, [r7, #4]
 8004022:	f000 f9ec 	bl	80043fe <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8004026:	6878      	ldr	r0, [r7, #4]
 8004028:	f7ff fdf5 	bl	8003c16 <I2C_ITSlaveSeqCplt>
 800402c:	e01b      	b.n	8004066 <I2C_ITSlaveCplt+0x206>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	2210      	movs	r2, #16
 8004034:	61da      	str	r2, [r3, #28]
 8004036:	e016      	b.n	8004066 <I2C_ITSlaveCplt+0x206>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	2210      	movs	r2, #16
 800403e:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004044:	f043 0204 	orr.w	r2, r3, #4
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d003      	beq.n	800405a <I2C_ITSlaveCplt+0x1fa>
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004058:	d105      	bne.n	8004066 <I2C_ITSlaveCplt+0x206>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800405e:	4619      	mov	r1, r3
 8004060:	6878      	ldr	r0, [r7, #4]
 8004062:	f000 f8b5 	bl	80041d0 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2200      	movs	r2, #0
 800406a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2200      	movs	r2, #0
 8004072:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004078:	2b00      	cmp	r3, #0
 800407a:	d010      	beq.n	800409e <I2C_ITSlaveCplt+0x23e>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004080:	4619      	mov	r1, r3
 8004082:	6878      	ldr	r0, [r7, #4]
 8004084:	f000 f8a4 	bl	80041d0 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800408e:	b2db      	uxtb	r3, r3
 8004090:	2b28      	cmp	r3, #40	@ 0x28
 8004092:	d141      	bne.n	8004118 <I2C_ITSlaveCplt+0x2b8>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8004094:	6979      	ldr	r1, [r7, #20]
 8004096:	6878      	ldr	r0, [r7, #4]
 8004098:	f000 f846 	bl	8004128 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800409c:	e03c      	b.n	8004118 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040a2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80040a6:	d014      	beq.n	80040d2 <I2C_ITSlaveCplt+0x272>
    I2C_ITSlaveSeqCplt(hi2c);
 80040a8:	6878      	ldr	r0, [r7, #4]
 80040aa:	f7ff fdb4 	bl	8003c16 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	4a1c      	ldr	r2, [pc, #112]	@ (8004124 <I2C_ITSlaveCplt+0x2c4>)
 80040b2:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2220      	movs	r2, #32
 80040b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2200      	movs	r2, #0
 80040c0:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2200      	movs	r2, #0
 80040c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 80040ca:	6878      	ldr	r0, [r7, #4]
 80040cc:	f7ff f82f 	bl	800312e <HAL_I2C_ListenCpltCallback>
}
 80040d0:	e022      	b.n	8004118 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80040d8:	b2db      	uxtb	r3, r3
 80040da:	2b22      	cmp	r3, #34	@ 0x22
 80040dc:	d10e      	bne.n	80040fc <I2C_ITSlaveCplt+0x29c>
    hi2c->State = HAL_I2C_STATE_READY;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2220      	movs	r2, #32
 80040e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2200      	movs	r2, #0
 80040ea:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2200      	movs	r2, #0
 80040f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80040f4:	6878      	ldr	r0, [r7, #4]
 80040f6:	f7ff f802 	bl	80030fe <HAL_I2C_SlaveRxCpltCallback>
}
 80040fa:	e00d      	b.n	8004118 <I2C_ITSlaveCplt+0x2b8>
    hi2c->State = HAL_I2C_STATE_READY;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2220      	movs	r2, #32
 8004100:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2200      	movs	r2, #0
 8004108:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2200      	movs	r2, #0
 800410e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004112:	6878      	ldr	r0, [r7, #4]
 8004114:	f7fe ffe9 	bl	80030ea <HAL_I2C_SlaveTxCpltCallback>
}
 8004118:	bf00      	nop
 800411a:	3718      	adds	r7, #24
 800411c:	46bd      	mov	sp, r7
 800411e:	bd80      	pop	{r7, pc}
 8004120:	fe00e800 	.word	0xfe00e800
 8004124:	ffff0000 	.word	0xffff0000

08004128 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b082      	sub	sp, #8
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
 8004130:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	4a25      	ldr	r2, [pc, #148]	@ (80041cc <I2C_ITListenCplt+0xa4>)
 8004136:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2200      	movs	r2, #0
 800413c:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2220      	movs	r2, #32
 8004142:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2200      	movs	r2, #0
 800414a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2200      	movs	r2, #0
 8004152:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	f003 0304 	and.w	r3, r3, #4
 800415a:	2b00      	cmp	r3, #0
 800415c:	d022      	beq.n	80041a4 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004168:	b2d2      	uxtb	r2, r2
 800416a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004170:	1c5a      	adds	r2, r3, #1
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800417a:	2b00      	cmp	r3, #0
 800417c:	d012      	beq.n	80041a4 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004182:	3b01      	subs	r3, #1
 8004184:	b29a      	uxth	r2, r3
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800418e:	b29b      	uxth	r3, r3
 8004190:	3b01      	subs	r3, #1
 8004192:	b29a      	uxth	r2, r3
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800419c:	f043 0204 	orr.w	r2, r3, #4
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80041a4:	f248 0103 	movw	r1, #32771	@ 0x8003
 80041a8:	6878      	ldr	r0, [r7, #4]
 80041aa:	f000 fc45 	bl	8004a38 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	2210      	movs	r2, #16
 80041b4:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2200      	movs	r2, #0
 80041ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80041be:	6878      	ldr	r0, [r7, #4]
 80041c0:	f7fe ffb5 	bl	800312e <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80041c4:	bf00      	nop
 80041c6:	3708      	adds	r7, #8
 80041c8:	46bd      	mov	sp, r7
 80041ca:	bd80      	pop	{r7, pc}
 80041cc:	ffff0000 	.word	0xffff0000

080041d0 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b084      	sub	sp, #16
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
 80041d8:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80041e0:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2200      	movs	r2, #0
 80041e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	4a6d      	ldr	r2, [pc, #436]	@ (80043a4 <I2C_ITError+0x1d4>)
 80041ee:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2200      	movs	r2, #0
 80041f4:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	431a      	orrs	r2, r3
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8004202:	7bfb      	ldrb	r3, [r7, #15]
 8004204:	2b28      	cmp	r3, #40	@ 0x28
 8004206:	d005      	beq.n	8004214 <I2C_ITError+0x44>
 8004208:	7bfb      	ldrb	r3, [r7, #15]
 800420a:	2b29      	cmp	r3, #41	@ 0x29
 800420c:	d002      	beq.n	8004214 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800420e:	7bfb      	ldrb	r3, [r7, #15]
 8004210:	2b2a      	cmp	r3, #42	@ 0x2a
 8004212:	d10b      	bne.n	800422c <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004214:	2103      	movs	r1, #3
 8004216:	6878      	ldr	r0, [r7, #4]
 8004218:	f000 fc0e 	bl	8004a38 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2228      	movs	r2, #40	@ 0x28
 8004220:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	4a60      	ldr	r2, [pc, #384]	@ (80043a8 <I2C_ITError+0x1d8>)
 8004228:	635a      	str	r2, [r3, #52]	@ 0x34
 800422a:	e030      	b.n	800428e <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800422c:	f248 0103 	movw	r1, #32771	@ 0x8003
 8004230:	6878      	ldr	r0, [r7, #4]
 8004232:	f000 fc01 	bl	8004a38 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004236:	6878      	ldr	r0, [r7, #4]
 8004238:	f000 f8e1 	bl	80043fe <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004242:	b2db      	uxtb	r3, r3
 8004244:	2b60      	cmp	r3, #96	@ 0x60
 8004246:	d01f      	beq.n	8004288 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2220      	movs	r2, #32
 800424c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	699b      	ldr	r3, [r3, #24]
 8004256:	f003 0320 	and.w	r3, r3, #32
 800425a:	2b20      	cmp	r3, #32
 800425c:	d114      	bne.n	8004288 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	699b      	ldr	r3, [r3, #24]
 8004264:	f003 0310 	and.w	r3, r3, #16
 8004268:	2b10      	cmp	r3, #16
 800426a:	d109      	bne.n	8004280 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	2210      	movs	r2, #16
 8004272:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004278:	f043 0204 	orr.w	r2, r3, #4
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	2220      	movs	r2, #32
 8004286:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2200      	movs	r2, #0
 800428c:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004292:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004298:	2b00      	cmp	r3, #0
 800429a:	d039      	beq.n	8004310 <I2C_ITError+0x140>
 800429c:	68bb      	ldr	r3, [r7, #8]
 800429e:	2b11      	cmp	r3, #17
 80042a0:	d002      	beq.n	80042a8 <I2C_ITError+0xd8>
 80042a2:	68bb      	ldr	r3, [r7, #8]
 80042a4:	2b21      	cmp	r3, #33	@ 0x21
 80042a6:	d133      	bne.n	8004310 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80042b2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80042b6:	d107      	bne.n	80042c8 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	681a      	ldr	r2, [r3, #0]
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80042c6:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042cc:	4618      	mov	r0, r3
 80042ce:	f7fe f88a 	bl	80023e6 <HAL_DMA_GetState>
 80042d2:	4603      	mov	r3, r0
 80042d4:	2b01      	cmp	r3, #1
 80042d6:	d017      	beq.n	8004308 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042dc:	4a33      	ldr	r2, [pc, #204]	@ (80043ac <I2C_ITError+0x1dc>)
 80042de:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2200      	movs	r2, #0
 80042e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042ec:	4618      	mov	r0, r3
 80042ee:	f7fd ff64 	bl	80021ba <HAL_DMA_Abort_IT>
 80042f2:	4603      	mov	r3, r0
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d04d      	beq.n	8004394 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042fe:	687a      	ldr	r2, [r7, #4]
 8004300:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004302:	4610      	mov	r0, r2
 8004304:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004306:	e045      	b.n	8004394 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004308:	6878      	ldr	r0, [r7, #4]
 800430a:	f000 f851 	bl	80043b0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800430e:	e041      	b.n	8004394 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004314:	2b00      	cmp	r3, #0
 8004316:	d039      	beq.n	800438c <I2C_ITError+0x1bc>
 8004318:	68bb      	ldr	r3, [r7, #8]
 800431a:	2b12      	cmp	r3, #18
 800431c:	d002      	beq.n	8004324 <I2C_ITError+0x154>
 800431e:	68bb      	ldr	r3, [r7, #8]
 8004320:	2b22      	cmp	r3, #34	@ 0x22
 8004322:	d133      	bne.n	800438c <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800432e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004332:	d107      	bne.n	8004344 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	681a      	ldr	r2, [r3, #0]
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004342:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004348:	4618      	mov	r0, r3
 800434a:	f7fe f84c 	bl	80023e6 <HAL_DMA_GetState>
 800434e:	4603      	mov	r3, r0
 8004350:	2b01      	cmp	r3, #1
 8004352:	d017      	beq.n	8004384 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004358:	4a14      	ldr	r2, [pc, #80]	@ (80043ac <I2C_ITError+0x1dc>)
 800435a:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2200      	movs	r2, #0
 8004360:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004368:	4618      	mov	r0, r3
 800436a:	f7fd ff26 	bl	80021ba <HAL_DMA_Abort_IT>
 800436e:	4603      	mov	r3, r0
 8004370:	2b00      	cmp	r3, #0
 8004372:	d011      	beq.n	8004398 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004378:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800437a:	687a      	ldr	r2, [r7, #4]
 800437c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800437e:	4610      	mov	r0, r2
 8004380:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004382:	e009      	b.n	8004398 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004384:	6878      	ldr	r0, [r7, #4]
 8004386:	f000 f813 	bl	80043b0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800438a:	e005      	b.n	8004398 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800438c:	6878      	ldr	r0, [r7, #4]
 800438e:	f000 f80f 	bl	80043b0 <I2C_TreatErrorCallback>
  }
}
 8004392:	e002      	b.n	800439a <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004394:	bf00      	nop
 8004396:	e000      	b.n	800439a <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004398:	bf00      	nop
}
 800439a:	bf00      	nop
 800439c:	3710      	adds	r7, #16
 800439e:	46bd      	mov	sp, r7
 80043a0:	bd80      	pop	{r7, pc}
 80043a2:	bf00      	nop
 80043a4:	ffff0000 	.word	0xffff0000
 80043a8:	0800317f 	.word	0x0800317f
 80043ac:	0800450b 	.word	0x0800450b

080043b0 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b082      	sub	sp, #8
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80043be:	b2db      	uxtb	r3, r3
 80043c0:	2b60      	cmp	r3, #96	@ 0x60
 80043c2:	d10e      	bne.n	80043e2 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2220      	movs	r2, #32
 80043c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2200      	movs	r2, #0
 80043d0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2200      	movs	r2, #0
 80043d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80043da:	6878      	ldr	r0, [r7, #4]
 80043dc:	f7fe fec5 	bl	800316a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80043e0:	e009      	b.n	80043f6 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2200      	movs	r2, #0
 80043e6:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2200      	movs	r2, #0
 80043ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80043f0:	6878      	ldr	r0, [r7, #4]
 80043f2:	f7fe feb0 	bl	8003156 <HAL_I2C_ErrorCallback>
}
 80043f6:	bf00      	nop
 80043f8:	3708      	adds	r7, #8
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bd80      	pop	{r7, pc}

080043fe <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80043fe:	b480      	push	{r7}
 8004400:	b083      	sub	sp, #12
 8004402:	af00      	add	r7, sp, #0
 8004404:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	699b      	ldr	r3, [r3, #24]
 800440c:	f003 0302 	and.w	r3, r3, #2
 8004410:	2b02      	cmp	r3, #2
 8004412:	d103      	bne.n	800441c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	2200      	movs	r2, #0
 800441a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	699b      	ldr	r3, [r3, #24]
 8004422:	f003 0301 	and.w	r3, r3, #1
 8004426:	2b01      	cmp	r3, #1
 8004428:	d007      	beq.n	800443a <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	699a      	ldr	r2, [r3, #24]
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f042 0201 	orr.w	r2, r2, #1
 8004438:	619a      	str	r2, [r3, #24]
  }
}
 800443a:	bf00      	nop
 800443c:	370c      	adds	r7, #12
 800443e:	46bd      	mov	sp, r7
 8004440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004444:	4770      	bx	lr

08004446 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004446:	b580      	push	{r7, lr}
 8004448:	b084      	sub	sp, #16
 800444a:	af00      	add	r7, sp, #0
 800444c:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004452:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	681a      	ldr	r2, [r3, #0]
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004462:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004468:	b29b      	uxth	r3, r3
 800446a:	2b00      	cmp	r3, #0
 800446c:	d104      	bne.n	8004478 <I2C_DMAMasterReceiveCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800446e:	2120      	movs	r1, #32
 8004470:	68f8      	ldr	r0, [r7, #12]
 8004472:	f000 fa5d 	bl	8004930 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8004476:	e02d      	b.n	80044d4 <I2C_DMAMasterReceiveCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800447c:	68fa      	ldr	r2, [r7, #12]
 800447e:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8004480:	441a      	add	r2, r3
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800448a:	b29b      	uxth	r3, r3
 800448c:	2bff      	cmp	r3, #255	@ 0xff
 800448e:	d903      	bls.n	8004498 <I2C_DMAMasterReceiveCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	22ff      	movs	r2, #255	@ 0xff
 8004494:	851a      	strh	r2, [r3, #40]	@ 0x28
 8004496:	e004      	b.n	80044a2 <I2C_DMAMasterReceiveCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800449c:	b29a      	uxth	r2, r3
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	3324      	adds	r3, #36	@ 0x24
 80044ac:	4619      	mov	r1, r3
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044b2:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 80044b8:	f7fd fe04 	bl	80020c4 <HAL_DMA_Start_IT>
 80044bc:	4603      	mov	r3, r0
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d004      	beq.n	80044cc <I2C_DMAMasterReceiveCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 80044c2:	2110      	movs	r1, #16
 80044c4:	68f8      	ldr	r0, [r7, #12]
 80044c6:	f7ff fe83 	bl	80041d0 <I2C_ITError>
}
 80044ca:	e003      	b.n	80044d4 <I2C_DMAMasterReceiveCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 80044cc:	2140      	movs	r1, #64	@ 0x40
 80044ce:	68f8      	ldr	r0, [r7, #12]
 80044d0:	f000 fa2e 	bl	8004930 <I2C_Enable_IRQ>
}
 80044d4:	bf00      	nop
 80044d6:	3710      	adds	r7, #16
 80044d8:	46bd      	mov	sp, r7
 80044da:	bd80      	pop	{r7, pc}

080044dc <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b084      	sub	sp, #16
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044e8:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	685a      	ldr	r2, [r3, #4]
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80044f8:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 80044fa:	2110      	movs	r1, #16
 80044fc:	68f8      	ldr	r0, [r7, #12]
 80044fe:	f7ff fe67 	bl	80041d0 <I2C_ITError>
}
 8004502:	bf00      	nop
 8004504:	3710      	adds	r7, #16
 8004506:	46bd      	mov	sp, r7
 8004508:	bd80      	pop	{r7, pc}

0800450a <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800450a:	b580      	push	{r7, lr}
 800450c:	b084      	sub	sp, #16
 800450e:	af00      	add	r7, sp, #0
 8004510:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004516:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800451c:	2b00      	cmp	r3, #0
 800451e:	d003      	beq.n	8004528 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004524:	2200      	movs	r2, #0
 8004526:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800452c:	2b00      	cmp	r3, #0
 800452e:	d003      	beq.n	8004538 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004534:	2200      	movs	r2, #0
 8004536:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8004538:	68f8      	ldr	r0, [r7, #12]
 800453a:	f7ff ff39 	bl	80043b0 <I2C_TreatErrorCallback>
}
 800453e:	bf00      	nop
 8004540:	3710      	adds	r7, #16
 8004542:	46bd      	mov	sp, r7
 8004544:	bd80      	pop	{r7, pc}

08004546 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004546:	b580      	push	{r7, lr}
 8004548:	b084      	sub	sp, #16
 800454a:	af00      	add	r7, sp, #0
 800454c:	60f8      	str	r0, [r7, #12]
 800454e:	60b9      	str	r1, [r7, #8]
 8004550:	603b      	str	r3, [r7, #0]
 8004552:	4613      	mov	r3, r2
 8004554:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004556:	e03b      	b.n	80045d0 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004558:	69ba      	ldr	r2, [r7, #24]
 800455a:	6839      	ldr	r1, [r7, #0]
 800455c:	68f8      	ldr	r0, [r7, #12]
 800455e:	f000 f8d5 	bl	800470c <I2C_IsErrorOccurred>
 8004562:	4603      	mov	r3, r0
 8004564:	2b00      	cmp	r3, #0
 8004566:	d001      	beq.n	800456c <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8004568:	2301      	movs	r3, #1
 800456a:	e041      	b.n	80045f0 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004572:	d02d      	beq.n	80045d0 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004574:	f7fd fbc0 	bl	8001cf8 <HAL_GetTick>
 8004578:	4602      	mov	r2, r0
 800457a:	69bb      	ldr	r3, [r7, #24]
 800457c:	1ad3      	subs	r3, r2, r3
 800457e:	683a      	ldr	r2, [r7, #0]
 8004580:	429a      	cmp	r2, r3
 8004582:	d302      	bcc.n	800458a <I2C_WaitOnFlagUntilTimeout+0x44>
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d122      	bne.n	80045d0 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	699a      	ldr	r2, [r3, #24]
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	4013      	ands	r3, r2
 8004594:	68ba      	ldr	r2, [r7, #8]
 8004596:	429a      	cmp	r2, r3
 8004598:	bf0c      	ite	eq
 800459a:	2301      	moveq	r3, #1
 800459c:	2300      	movne	r3, #0
 800459e:	b2db      	uxtb	r3, r3
 80045a0:	461a      	mov	r2, r3
 80045a2:	79fb      	ldrb	r3, [r7, #7]
 80045a4:	429a      	cmp	r2, r3
 80045a6:	d113      	bne.n	80045d0 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045ac:	f043 0220 	orr.w	r2, r3, #32
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	2220      	movs	r2, #32
 80045b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	2200      	movs	r2, #0
 80045c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	2200      	movs	r2, #0
 80045c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80045cc:	2301      	movs	r3, #1
 80045ce:	e00f      	b.n	80045f0 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	699a      	ldr	r2, [r3, #24]
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	4013      	ands	r3, r2
 80045da:	68ba      	ldr	r2, [r7, #8]
 80045dc:	429a      	cmp	r2, r3
 80045de:	bf0c      	ite	eq
 80045e0:	2301      	moveq	r3, #1
 80045e2:	2300      	movne	r3, #0
 80045e4:	b2db      	uxtb	r3, r3
 80045e6:	461a      	mov	r2, r3
 80045e8:	79fb      	ldrb	r3, [r7, #7]
 80045ea:	429a      	cmp	r2, r3
 80045ec:	d0b4      	beq.n	8004558 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80045ee:	2300      	movs	r3, #0
}
 80045f0:	4618      	mov	r0, r3
 80045f2:	3710      	adds	r7, #16
 80045f4:	46bd      	mov	sp, r7
 80045f6:	bd80      	pop	{r7, pc}

080045f8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b084      	sub	sp, #16
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	60f8      	str	r0, [r7, #12]
 8004600:	60b9      	str	r1, [r7, #8]
 8004602:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004604:	e033      	b.n	800466e <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004606:	687a      	ldr	r2, [r7, #4]
 8004608:	68b9      	ldr	r1, [r7, #8]
 800460a:	68f8      	ldr	r0, [r7, #12]
 800460c:	f000 f87e 	bl	800470c <I2C_IsErrorOccurred>
 8004610:	4603      	mov	r3, r0
 8004612:	2b00      	cmp	r3, #0
 8004614:	d001      	beq.n	800461a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004616:	2301      	movs	r3, #1
 8004618:	e031      	b.n	800467e <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800461a:	68bb      	ldr	r3, [r7, #8]
 800461c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004620:	d025      	beq.n	800466e <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004622:	f7fd fb69 	bl	8001cf8 <HAL_GetTick>
 8004626:	4602      	mov	r2, r0
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	1ad3      	subs	r3, r2, r3
 800462c:	68ba      	ldr	r2, [r7, #8]
 800462e:	429a      	cmp	r2, r3
 8004630:	d302      	bcc.n	8004638 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004632:	68bb      	ldr	r3, [r7, #8]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d11a      	bne.n	800466e <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	699b      	ldr	r3, [r3, #24]
 800463e:	f003 0302 	and.w	r3, r3, #2
 8004642:	2b02      	cmp	r3, #2
 8004644:	d013      	beq.n	800466e <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800464a:	f043 0220 	orr.w	r2, r3, #32
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	2220      	movs	r2, #32
 8004656:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	2200      	movs	r2, #0
 800465e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	2200      	movs	r2, #0
 8004666:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800466a:	2301      	movs	r3, #1
 800466c:	e007      	b.n	800467e <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	699b      	ldr	r3, [r3, #24]
 8004674:	f003 0302 	and.w	r3, r3, #2
 8004678:	2b02      	cmp	r3, #2
 800467a:	d1c4      	bne.n	8004606 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800467c:	2300      	movs	r3, #0
}
 800467e:	4618      	mov	r0, r3
 8004680:	3710      	adds	r7, #16
 8004682:	46bd      	mov	sp, r7
 8004684:	bd80      	pop	{r7, pc}

08004686 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004686:	b580      	push	{r7, lr}
 8004688:	b084      	sub	sp, #16
 800468a:	af00      	add	r7, sp, #0
 800468c:	60f8      	str	r0, [r7, #12]
 800468e:	60b9      	str	r1, [r7, #8]
 8004690:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004692:	e02f      	b.n	80046f4 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004694:	687a      	ldr	r2, [r7, #4]
 8004696:	68b9      	ldr	r1, [r7, #8]
 8004698:	68f8      	ldr	r0, [r7, #12]
 800469a:	f000 f837 	bl	800470c <I2C_IsErrorOccurred>
 800469e:	4603      	mov	r3, r0
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d001      	beq.n	80046a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80046a4:	2301      	movs	r3, #1
 80046a6:	e02d      	b.n	8004704 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046a8:	f7fd fb26 	bl	8001cf8 <HAL_GetTick>
 80046ac:	4602      	mov	r2, r0
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	1ad3      	subs	r3, r2, r3
 80046b2:	68ba      	ldr	r2, [r7, #8]
 80046b4:	429a      	cmp	r2, r3
 80046b6:	d302      	bcc.n	80046be <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80046b8:	68bb      	ldr	r3, [r7, #8]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d11a      	bne.n	80046f4 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	699b      	ldr	r3, [r3, #24]
 80046c4:	f003 0320 	and.w	r3, r3, #32
 80046c8:	2b20      	cmp	r3, #32
 80046ca:	d013      	beq.n	80046f4 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046d0:	f043 0220 	orr.w	r2, r3, #32
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	2220      	movs	r2, #32
 80046dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	2200      	movs	r2, #0
 80046e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	2200      	movs	r2, #0
 80046ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80046f0:	2301      	movs	r3, #1
 80046f2:	e007      	b.n	8004704 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	699b      	ldr	r3, [r3, #24]
 80046fa:	f003 0320 	and.w	r3, r3, #32
 80046fe:	2b20      	cmp	r3, #32
 8004700:	d1c8      	bne.n	8004694 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004702:	2300      	movs	r3, #0
}
 8004704:	4618      	mov	r0, r3
 8004706:	3710      	adds	r7, #16
 8004708:	46bd      	mov	sp, r7
 800470a:	bd80      	pop	{r7, pc}

0800470c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b08a      	sub	sp, #40	@ 0x28
 8004710:	af00      	add	r7, sp, #0
 8004712:	60f8      	str	r0, [r7, #12]
 8004714:	60b9      	str	r1, [r7, #8]
 8004716:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004718:	2300      	movs	r3, #0
 800471a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	699b      	ldr	r3, [r3, #24]
 8004724:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004726:	2300      	movs	r3, #0
 8004728:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800472e:	69bb      	ldr	r3, [r7, #24]
 8004730:	f003 0310 	and.w	r3, r3, #16
 8004734:	2b00      	cmp	r3, #0
 8004736:	d068      	beq.n	800480a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	2210      	movs	r2, #16
 800473e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004740:	e049      	b.n	80047d6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004742:	68bb      	ldr	r3, [r7, #8]
 8004744:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004748:	d045      	beq.n	80047d6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800474a:	f7fd fad5 	bl	8001cf8 <HAL_GetTick>
 800474e:	4602      	mov	r2, r0
 8004750:	69fb      	ldr	r3, [r7, #28]
 8004752:	1ad3      	subs	r3, r2, r3
 8004754:	68ba      	ldr	r2, [r7, #8]
 8004756:	429a      	cmp	r2, r3
 8004758:	d302      	bcc.n	8004760 <I2C_IsErrorOccurred+0x54>
 800475a:	68bb      	ldr	r3, [r7, #8]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d13a      	bne.n	80047d6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	685b      	ldr	r3, [r3, #4]
 8004766:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800476a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004772:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	699b      	ldr	r3, [r3, #24]
 800477a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800477e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004782:	d121      	bne.n	80047c8 <I2C_IsErrorOccurred+0xbc>
 8004784:	697b      	ldr	r3, [r7, #20]
 8004786:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800478a:	d01d      	beq.n	80047c8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800478c:	7cfb      	ldrb	r3, [r7, #19]
 800478e:	2b20      	cmp	r3, #32
 8004790:	d01a      	beq.n	80047c8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	685a      	ldr	r2, [r3, #4]
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80047a0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80047a2:	f7fd faa9 	bl	8001cf8 <HAL_GetTick>
 80047a6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80047a8:	e00e      	b.n	80047c8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80047aa:	f7fd faa5 	bl	8001cf8 <HAL_GetTick>
 80047ae:	4602      	mov	r2, r0
 80047b0:	69fb      	ldr	r3, [r7, #28]
 80047b2:	1ad3      	subs	r3, r2, r3
 80047b4:	2b19      	cmp	r3, #25
 80047b6:	d907      	bls.n	80047c8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80047b8:	6a3b      	ldr	r3, [r7, #32]
 80047ba:	f043 0320 	orr.w	r3, r3, #32
 80047be:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80047c0:	2301      	movs	r3, #1
 80047c2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80047c6:	e006      	b.n	80047d6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	699b      	ldr	r3, [r3, #24]
 80047ce:	f003 0320 	and.w	r3, r3, #32
 80047d2:	2b20      	cmp	r3, #32
 80047d4:	d1e9      	bne.n	80047aa <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	699b      	ldr	r3, [r3, #24]
 80047dc:	f003 0320 	and.w	r3, r3, #32
 80047e0:	2b20      	cmp	r3, #32
 80047e2:	d003      	beq.n	80047ec <I2C_IsErrorOccurred+0xe0>
 80047e4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d0aa      	beq.n	8004742 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80047ec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d103      	bne.n	80047fc <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	2220      	movs	r2, #32
 80047fa:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80047fc:	6a3b      	ldr	r3, [r7, #32]
 80047fe:	f043 0304 	orr.w	r3, r3, #4
 8004802:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004804:	2301      	movs	r3, #1
 8004806:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	699b      	ldr	r3, [r3, #24]
 8004810:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004812:	69bb      	ldr	r3, [r7, #24]
 8004814:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004818:	2b00      	cmp	r3, #0
 800481a:	d00b      	beq.n	8004834 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800481c:	6a3b      	ldr	r3, [r7, #32]
 800481e:	f043 0301 	orr.w	r3, r3, #1
 8004822:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800482c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800482e:	2301      	movs	r3, #1
 8004830:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004834:	69bb      	ldr	r3, [r7, #24]
 8004836:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800483a:	2b00      	cmp	r3, #0
 800483c:	d00b      	beq.n	8004856 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800483e:	6a3b      	ldr	r3, [r7, #32]
 8004840:	f043 0308 	orr.w	r3, r3, #8
 8004844:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800484e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004850:	2301      	movs	r3, #1
 8004852:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004856:	69bb      	ldr	r3, [r7, #24]
 8004858:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800485c:	2b00      	cmp	r3, #0
 800485e:	d00b      	beq.n	8004878 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004860:	6a3b      	ldr	r3, [r7, #32]
 8004862:	f043 0302 	orr.w	r3, r3, #2
 8004866:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004870:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004872:	2301      	movs	r3, #1
 8004874:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8004878:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800487c:	2b00      	cmp	r3, #0
 800487e:	d01c      	beq.n	80048ba <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004880:	68f8      	ldr	r0, [r7, #12]
 8004882:	f7ff fdbc 	bl	80043fe <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	6859      	ldr	r1, [r3, #4]
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681a      	ldr	r2, [r3, #0]
 8004890:	4b0d      	ldr	r3, [pc, #52]	@ (80048c8 <I2C_IsErrorOccurred+0x1bc>)
 8004892:	400b      	ands	r3, r1
 8004894:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800489a:	6a3b      	ldr	r3, [r7, #32]
 800489c:	431a      	orrs	r2, r3
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	2220      	movs	r2, #32
 80048a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	2200      	movs	r2, #0
 80048ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	2200      	movs	r2, #0
 80048b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80048ba:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80048be:	4618      	mov	r0, r3
 80048c0:	3728      	adds	r7, #40	@ 0x28
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bd80      	pop	{r7, pc}
 80048c6:	bf00      	nop
 80048c8:	fe00e800 	.word	0xfe00e800

080048cc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80048cc:	b480      	push	{r7}
 80048ce:	b087      	sub	sp, #28
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	60f8      	str	r0, [r7, #12]
 80048d4:	607b      	str	r3, [r7, #4]
 80048d6:	460b      	mov	r3, r1
 80048d8:	817b      	strh	r3, [r7, #10]
 80048da:	4613      	mov	r3, r2
 80048dc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80048de:	897b      	ldrh	r3, [r7, #10]
 80048e0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80048e4:	7a7b      	ldrb	r3, [r7, #9]
 80048e6:	041b      	lsls	r3, r3, #16
 80048e8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80048ec:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80048f2:	6a3b      	ldr	r3, [r7, #32]
 80048f4:	4313      	orrs	r3, r2
 80048f6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80048fa:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	685a      	ldr	r2, [r3, #4]
 8004902:	6a3b      	ldr	r3, [r7, #32]
 8004904:	0d5b      	lsrs	r3, r3, #21
 8004906:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800490a:	4b08      	ldr	r3, [pc, #32]	@ (800492c <I2C_TransferConfig+0x60>)
 800490c:	430b      	orrs	r3, r1
 800490e:	43db      	mvns	r3, r3
 8004910:	ea02 0103 	and.w	r1, r2, r3
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	697a      	ldr	r2, [r7, #20]
 800491a:	430a      	orrs	r2, r1
 800491c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800491e:	bf00      	nop
 8004920:	371c      	adds	r7, #28
 8004922:	46bd      	mov	sp, r7
 8004924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004928:	4770      	bx	lr
 800492a:	bf00      	nop
 800492c:	03ff63ff 	.word	0x03ff63ff

08004930 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8004930:	b480      	push	{r7}
 8004932:	b085      	sub	sp, #20
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
 8004938:	460b      	mov	r3, r1
 800493a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800493c:	2300      	movs	r3, #0
 800493e:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004944:	4a39      	ldr	r2, [pc, #228]	@ (8004a2c <I2C_Enable_IRQ+0xfc>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d032      	beq.n	80049b0 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800494e:	4a38      	ldr	r2, [pc, #224]	@ (8004a30 <I2C_Enable_IRQ+0x100>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d02d      	beq.n	80049b0 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8004958:	4a36      	ldr	r2, [pc, #216]	@ (8004a34 <I2C_Enable_IRQ+0x104>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d028      	beq.n	80049b0 <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800495e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004962:	2b00      	cmp	r3, #0
 8004964:	da03      	bge.n	800496e <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 800496c:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800496e:	887b      	ldrh	r3, [r7, #2]
 8004970:	f003 0301 	and.w	r3, r3, #1
 8004974:	2b00      	cmp	r3, #0
 8004976:	d003      	beq.n	8004980 <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 800497e:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8004980:	887b      	ldrh	r3, [r7, #2]
 8004982:	f003 0302 	and.w	r3, r3, #2
 8004986:	2b00      	cmp	r3, #0
 8004988:	d003      	beq.n	8004992 <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8004990:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8004992:	887b      	ldrh	r3, [r7, #2]
 8004994:	2b10      	cmp	r3, #16
 8004996:	d103      	bne.n	80049a0 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 800499e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80049a0:	887b      	ldrh	r3, [r7, #2]
 80049a2:	2b20      	cmp	r3, #32
 80049a4:	d133      	bne.n	8004a0e <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	f043 0320 	orr.w	r3, r3, #32
 80049ac:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80049ae:	e02e      	b.n	8004a0e <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80049b0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	da03      	bge.n	80049c0 <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 80049be:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80049c0:	887b      	ldrh	r3, [r7, #2]
 80049c2:	f003 0301 	and.w	r3, r3, #1
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d003      	beq.n	80049d2 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 80049d0:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80049d2:	887b      	ldrh	r3, [r7, #2]
 80049d4:	f003 0302 	and.w	r3, r3, #2
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d003      	beq.n	80049e4 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 80049e2:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 80049e4:	887b      	ldrh	r3, [r7, #2]
 80049e6:	2b10      	cmp	r3, #16
 80049e8:	d103      	bne.n	80049f2 <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 80049f0:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80049f2:	887b      	ldrh	r3, [r7, #2]
 80049f4:	2b20      	cmp	r3, #32
 80049f6:	d103      	bne.n	8004a00 <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80049fe:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8004a00:	887b      	ldrh	r3, [r7, #2]
 8004a02:	2b40      	cmp	r3, #64	@ 0x40
 8004a04:	d103      	bne.n	8004a0e <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004a0c:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	6819      	ldr	r1, [r3, #0]
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	68fa      	ldr	r2, [r7, #12]
 8004a1a:	430a      	orrs	r2, r1
 8004a1c:	601a      	str	r2, [r3, #0]
}
 8004a1e:	bf00      	nop
 8004a20:	3714      	adds	r7, #20
 8004a22:	46bd      	mov	sp, r7
 8004a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a28:	4770      	bx	lr
 8004a2a:	bf00      	nop
 8004a2c:	08003371 	.word	0x08003371
 8004a30:	08003795 	.word	0x08003795
 8004a34:	08003549 	.word	0x08003549

08004a38 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8004a38:	b480      	push	{r7}
 8004a3a:	b085      	sub	sp, #20
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
 8004a40:	460b      	mov	r3, r1
 8004a42:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8004a44:	2300      	movs	r3, #0
 8004a46:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8004a48:	887b      	ldrh	r3, [r7, #2]
 8004a4a:	f003 0301 	and.w	r3, r3, #1
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d00f      	beq.n	8004a72 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8004a58:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a60:	b2db      	uxtb	r3, r3
 8004a62:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004a66:	2b28      	cmp	r3, #40	@ 0x28
 8004a68:	d003      	beq.n	8004a72 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8004a70:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8004a72:	887b      	ldrh	r3, [r7, #2]
 8004a74:	f003 0302 	and.w	r3, r3, #2
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d00f      	beq.n	8004a9c <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8004a82:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a8a:	b2db      	uxtb	r3, r3
 8004a8c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004a90:	2b28      	cmp	r3, #40	@ 0x28
 8004a92:	d003      	beq.n	8004a9c <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8004a9a:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8004a9c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	da03      	bge.n	8004aac <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8004aaa:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8004aac:	887b      	ldrh	r3, [r7, #2]
 8004aae:	2b10      	cmp	r3, #16
 8004ab0:	d103      	bne.n	8004aba <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8004ab8:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8004aba:	887b      	ldrh	r3, [r7, #2]
 8004abc:	2b20      	cmp	r3, #32
 8004abe:	d103      	bne.n	8004ac8 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	f043 0320 	orr.w	r3, r3, #32
 8004ac6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8004ac8:	887b      	ldrh	r3, [r7, #2]
 8004aca:	2b40      	cmp	r3, #64	@ 0x40
 8004acc:	d103      	bne.n	8004ad6 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004ad4:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	6819      	ldr	r1, [r3, #0]
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	43da      	mvns	r2, r3
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	400a      	ands	r2, r1
 8004ae6:	601a      	str	r2, [r3, #0]
}
 8004ae8:	bf00      	nop
 8004aea:	3714      	adds	r7, #20
 8004aec:	46bd      	mov	sp, r7
 8004aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af2:	4770      	bx	lr

08004af4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004af4:	b480      	push	{r7}
 8004af6:	b083      	sub	sp, #12
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
 8004afc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b04:	b2db      	uxtb	r3, r3
 8004b06:	2b20      	cmp	r3, #32
 8004b08:	d138      	bne.n	8004b7c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004b10:	2b01      	cmp	r3, #1
 8004b12:	d101      	bne.n	8004b18 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004b14:	2302      	movs	r3, #2
 8004b16:	e032      	b.n	8004b7e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2201      	movs	r2, #1
 8004b1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2224      	movs	r2, #36	@ 0x24
 8004b24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	681a      	ldr	r2, [r3, #0]
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f022 0201 	bic.w	r2, r2, #1
 8004b36:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	681a      	ldr	r2, [r3, #0]
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004b46:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	6819      	ldr	r1, [r3, #0]
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	683a      	ldr	r2, [r7, #0]
 8004b54:	430a      	orrs	r2, r1
 8004b56:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	681a      	ldr	r2, [r3, #0]
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f042 0201 	orr.w	r2, r2, #1
 8004b66:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2220      	movs	r2, #32
 8004b6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2200      	movs	r2, #0
 8004b74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004b78:	2300      	movs	r3, #0
 8004b7a:	e000      	b.n	8004b7e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004b7c:	2302      	movs	r3, #2
  }
}
 8004b7e:	4618      	mov	r0, r3
 8004b80:	370c      	adds	r7, #12
 8004b82:	46bd      	mov	sp, r7
 8004b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b88:	4770      	bx	lr

08004b8a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004b8a:	b480      	push	{r7}
 8004b8c:	b085      	sub	sp, #20
 8004b8e:	af00      	add	r7, sp, #0
 8004b90:	6078      	str	r0, [r7, #4]
 8004b92:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b9a:	b2db      	uxtb	r3, r3
 8004b9c:	2b20      	cmp	r3, #32
 8004b9e:	d139      	bne.n	8004c14 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004ba6:	2b01      	cmp	r3, #1
 8004ba8:	d101      	bne.n	8004bae <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004baa:	2302      	movs	r3, #2
 8004bac:	e033      	b.n	8004c16 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2201      	movs	r2, #1
 8004bb2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2224      	movs	r2, #36	@ 0x24
 8004bba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	681a      	ldr	r2, [r3, #0]
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f022 0201 	bic.w	r2, r2, #1
 8004bcc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004bdc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	021b      	lsls	r3, r3, #8
 8004be2:	68fa      	ldr	r2, [r7, #12]
 8004be4:	4313      	orrs	r3, r2
 8004be6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	68fa      	ldr	r2, [r7, #12]
 8004bee:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	681a      	ldr	r2, [r3, #0]
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f042 0201 	orr.w	r2, r2, #1
 8004bfe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2220      	movs	r2, #32
 8004c04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004c10:	2300      	movs	r3, #0
 8004c12:	e000      	b.n	8004c16 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004c14:	2302      	movs	r3, #2
  }
}
 8004c16:	4618      	mov	r0, r3
 8004c18:	3714      	adds	r7, #20
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c20:	4770      	bx	lr
	...

08004c24 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004c24:	b480      	push	{r7}
 8004c26:	b085      	sub	sp, #20
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d141      	bne.n	8004cb6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004c32:	4b4b      	ldr	r3, [pc, #300]	@ (8004d60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004c3a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c3e:	d131      	bne.n	8004ca4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004c40:	4b47      	ldr	r3, [pc, #284]	@ (8004d60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c42:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004c46:	4a46      	ldr	r2, [pc, #280]	@ (8004d60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c48:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004c4c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004c50:	4b43      	ldr	r3, [pc, #268]	@ (8004d60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004c58:	4a41      	ldr	r2, [pc, #260]	@ (8004d60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c5a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004c5e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004c60:	4b40      	ldr	r3, [pc, #256]	@ (8004d64 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	2232      	movs	r2, #50	@ 0x32
 8004c66:	fb02 f303 	mul.w	r3, r2, r3
 8004c6a:	4a3f      	ldr	r2, [pc, #252]	@ (8004d68 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004c6c:	fba2 2303 	umull	r2, r3, r2, r3
 8004c70:	0c9b      	lsrs	r3, r3, #18
 8004c72:	3301      	adds	r3, #1
 8004c74:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004c76:	e002      	b.n	8004c7e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	3b01      	subs	r3, #1
 8004c7c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004c7e:	4b38      	ldr	r3, [pc, #224]	@ (8004d60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c80:	695b      	ldr	r3, [r3, #20]
 8004c82:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c86:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c8a:	d102      	bne.n	8004c92 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d1f2      	bne.n	8004c78 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004c92:	4b33      	ldr	r3, [pc, #204]	@ (8004d60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c94:	695b      	ldr	r3, [r3, #20]
 8004c96:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c9a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c9e:	d158      	bne.n	8004d52 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004ca0:	2303      	movs	r3, #3
 8004ca2:	e057      	b.n	8004d54 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004ca4:	4b2e      	ldr	r3, [pc, #184]	@ (8004d60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ca6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004caa:	4a2d      	ldr	r2, [pc, #180]	@ (8004d60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004cac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004cb0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004cb4:	e04d      	b.n	8004d52 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004cbc:	d141      	bne.n	8004d42 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004cbe:	4b28      	ldr	r3, [pc, #160]	@ (8004d60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004cc6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004cca:	d131      	bne.n	8004d30 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004ccc:	4b24      	ldr	r3, [pc, #144]	@ (8004d60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004cce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004cd2:	4a23      	ldr	r2, [pc, #140]	@ (8004d60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004cd4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004cd8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004cdc:	4b20      	ldr	r3, [pc, #128]	@ (8004d60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004ce4:	4a1e      	ldr	r2, [pc, #120]	@ (8004d60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ce6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004cea:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004cec:	4b1d      	ldr	r3, [pc, #116]	@ (8004d64 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	2232      	movs	r2, #50	@ 0x32
 8004cf2:	fb02 f303 	mul.w	r3, r2, r3
 8004cf6:	4a1c      	ldr	r2, [pc, #112]	@ (8004d68 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004cf8:	fba2 2303 	umull	r2, r3, r2, r3
 8004cfc:	0c9b      	lsrs	r3, r3, #18
 8004cfe:	3301      	adds	r3, #1
 8004d00:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004d02:	e002      	b.n	8004d0a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	3b01      	subs	r3, #1
 8004d08:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004d0a:	4b15      	ldr	r3, [pc, #84]	@ (8004d60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d0c:	695b      	ldr	r3, [r3, #20]
 8004d0e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d12:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d16:	d102      	bne.n	8004d1e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d1f2      	bne.n	8004d04 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004d1e:	4b10      	ldr	r3, [pc, #64]	@ (8004d60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d20:	695b      	ldr	r3, [r3, #20]
 8004d22:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d26:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d2a:	d112      	bne.n	8004d52 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004d2c:	2303      	movs	r3, #3
 8004d2e:	e011      	b.n	8004d54 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004d30:	4b0b      	ldr	r3, [pc, #44]	@ (8004d60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d32:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004d36:	4a0a      	ldr	r2, [pc, #40]	@ (8004d60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d38:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004d3c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004d40:	e007      	b.n	8004d52 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004d42:	4b07      	ldr	r3, [pc, #28]	@ (8004d60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004d4a:	4a05      	ldr	r2, [pc, #20]	@ (8004d60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d4c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004d50:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004d52:	2300      	movs	r3, #0
}
 8004d54:	4618      	mov	r0, r3
 8004d56:	3714      	adds	r7, #20
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5e:	4770      	bx	lr
 8004d60:	40007000 	.word	0x40007000
 8004d64:	20000000 	.word	0x20000000
 8004d68:	431bde83 	.word	0x431bde83

08004d6c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004d6c:	b480      	push	{r7}
 8004d6e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004d70:	4b05      	ldr	r3, [pc, #20]	@ (8004d88 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004d72:	689b      	ldr	r3, [r3, #8]
 8004d74:	4a04      	ldr	r2, [pc, #16]	@ (8004d88 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004d76:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004d7a:	6093      	str	r3, [r2, #8]
}
 8004d7c:	bf00      	nop
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d84:	4770      	bx	lr
 8004d86:	bf00      	nop
 8004d88:	40007000 	.word	0x40007000

08004d8c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b088      	sub	sp, #32
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d101      	bne.n	8004d9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	e2fe      	b.n	800539c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f003 0301 	and.w	r3, r3, #1
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d075      	beq.n	8004e96 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004daa:	4b97      	ldr	r3, [pc, #604]	@ (8005008 <HAL_RCC_OscConfig+0x27c>)
 8004dac:	689b      	ldr	r3, [r3, #8]
 8004dae:	f003 030c 	and.w	r3, r3, #12
 8004db2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004db4:	4b94      	ldr	r3, [pc, #592]	@ (8005008 <HAL_RCC_OscConfig+0x27c>)
 8004db6:	68db      	ldr	r3, [r3, #12]
 8004db8:	f003 0303 	and.w	r3, r3, #3
 8004dbc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004dbe:	69bb      	ldr	r3, [r7, #24]
 8004dc0:	2b0c      	cmp	r3, #12
 8004dc2:	d102      	bne.n	8004dca <HAL_RCC_OscConfig+0x3e>
 8004dc4:	697b      	ldr	r3, [r7, #20]
 8004dc6:	2b03      	cmp	r3, #3
 8004dc8:	d002      	beq.n	8004dd0 <HAL_RCC_OscConfig+0x44>
 8004dca:	69bb      	ldr	r3, [r7, #24]
 8004dcc:	2b08      	cmp	r3, #8
 8004dce:	d10b      	bne.n	8004de8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004dd0:	4b8d      	ldr	r3, [pc, #564]	@ (8005008 <HAL_RCC_OscConfig+0x27c>)
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d05b      	beq.n	8004e94 <HAL_RCC_OscConfig+0x108>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	685b      	ldr	r3, [r3, #4]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d157      	bne.n	8004e94 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004de4:	2301      	movs	r3, #1
 8004de6:	e2d9      	b.n	800539c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	685b      	ldr	r3, [r3, #4]
 8004dec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004df0:	d106      	bne.n	8004e00 <HAL_RCC_OscConfig+0x74>
 8004df2:	4b85      	ldr	r3, [pc, #532]	@ (8005008 <HAL_RCC_OscConfig+0x27c>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4a84      	ldr	r2, [pc, #528]	@ (8005008 <HAL_RCC_OscConfig+0x27c>)
 8004df8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004dfc:	6013      	str	r3, [r2, #0]
 8004dfe:	e01d      	b.n	8004e3c <HAL_RCC_OscConfig+0xb0>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	685b      	ldr	r3, [r3, #4]
 8004e04:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004e08:	d10c      	bne.n	8004e24 <HAL_RCC_OscConfig+0x98>
 8004e0a:	4b7f      	ldr	r3, [pc, #508]	@ (8005008 <HAL_RCC_OscConfig+0x27c>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	4a7e      	ldr	r2, [pc, #504]	@ (8005008 <HAL_RCC_OscConfig+0x27c>)
 8004e10:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004e14:	6013      	str	r3, [r2, #0]
 8004e16:	4b7c      	ldr	r3, [pc, #496]	@ (8005008 <HAL_RCC_OscConfig+0x27c>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	4a7b      	ldr	r2, [pc, #492]	@ (8005008 <HAL_RCC_OscConfig+0x27c>)
 8004e1c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004e20:	6013      	str	r3, [r2, #0]
 8004e22:	e00b      	b.n	8004e3c <HAL_RCC_OscConfig+0xb0>
 8004e24:	4b78      	ldr	r3, [pc, #480]	@ (8005008 <HAL_RCC_OscConfig+0x27c>)
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	4a77      	ldr	r2, [pc, #476]	@ (8005008 <HAL_RCC_OscConfig+0x27c>)
 8004e2a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004e2e:	6013      	str	r3, [r2, #0]
 8004e30:	4b75      	ldr	r3, [pc, #468]	@ (8005008 <HAL_RCC_OscConfig+0x27c>)
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	4a74      	ldr	r2, [pc, #464]	@ (8005008 <HAL_RCC_OscConfig+0x27c>)
 8004e36:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004e3a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	685b      	ldr	r3, [r3, #4]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d013      	beq.n	8004e6c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e44:	f7fc ff58 	bl	8001cf8 <HAL_GetTick>
 8004e48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004e4a:	e008      	b.n	8004e5e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e4c:	f7fc ff54 	bl	8001cf8 <HAL_GetTick>
 8004e50:	4602      	mov	r2, r0
 8004e52:	693b      	ldr	r3, [r7, #16]
 8004e54:	1ad3      	subs	r3, r2, r3
 8004e56:	2b64      	cmp	r3, #100	@ 0x64
 8004e58:	d901      	bls.n	8004e5e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004e5a:	2303      	movs	r3, #3
 8004e5c:	e29e      	b.n	800539c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004e5e:	4b6a      	ldr	r3, [pc, #424]	@ (8005008 <HAL_RCC_OscConfig+0x27c>)
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d0f0      	beq.n	8004e4c <HAL_RCC_OscConfig+0xc0>
 8004e6a:	e014      	b.n	8004e96 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e6c:	f7fc ff44 	bl	8001cf8 <HAL_GetTick>
 8004e70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004e72:	e008      	b.n	8004e86 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e74:	f7fc ff40 	bl	8001cf8 <HAL_GetTick>
 8004e78:	4602      	mov	r2, r0
 8004e7a:	693b      	ldr	r3, [r7, #16]
 8004e7c:	1ad3      	subs	r3, r2, r3
 8004e7e:	2b64      	cmp	r3, #100	@ 0x64
 8004e80:	d901      	bls.n	8004e86 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004e82:	2303      	movs	r3, #3
 8004e84:	e28a      	b.n	800539c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004e86:	4b60      	ldr	r3, [pc, #384]	@ (8005008 <HAL_RCC_OscConfig+0x27c>)
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d1f0      	bne.n	8004e74 <HAL_RCC_OscConfig+0xe8>
 8004e92:	e000      	b.n	8004e96 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f003 0302 	and.w	r3, r3, #2
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d075      	beq.n	8004f8e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004ea2:	4b59      	ldr	r3, [pc, #356]	@ (8005008 <HAL_RCC_OscConfig+0x27c>)
 8004ea4:	689b      	ldr	r3, [r3, #8]
 8004ea6:	f003 030c 	and.w	r3, r3, #12
 8004eaa:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004eac:	4b56      	ldr	r3, [pc, #344]	@ (8005008 <HAL_RCC_OscConfig+0x27c>)
 8004eae:	68db      	ldr	r3, [r3, #12]
 8004eb0:	f003 0303 	and.w	r3, r3, #3
 8004eb4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004eb6:	69bb      	ldr	r3, [r7, #24]
 8004eb8:	2b0c      	cmp	r3, #12
 8004eba:	d102      	bne.n	8004ec2 <HAL_RCC_OscConfig+0x136>
 8004ebc:	697b      	ldr	r3, [r7, #20]
 8004ebe:	2b02      	cmp	r3, #2
 8004ec0:	d002      	beq.n	8004ec8 <HAL_RCC_OscConfig+0x13c>
 8004ec2:	69bb      	ldr	r3, [r7, #24]
 8004ec4:	2b04      	cmp	r3, #4
 8004ec6:	d11f      	bne.n	8004f08 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004ec8:	4b4f      	ldr	r3, [pc, #316]	@ (8005008 <HAL_RCC_OscConfig+0x27c>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d005      	beq.n	8004ee0 <HAL_RCC_OscConfig+0x154>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	68db      	ldr	r3, [r3, #12]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d101      	bne.n	8004ee0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004edc:	2301      	movs	r3, #1
 8004ede:	e25d      	b.n	800539c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ee0:	4b49      	ldr	r3, [pc, #292]	@ (8005008 <HAL_RCC_OscConfig+0x27c>)
 8004ee2:	685b      	ldr	r3, [r3, #4]
 8004ee4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	691b      	ldr	r3, [r3, #16]
 8004eec:	061b      	lsls	r3, r3, #24
 8004eee:	4946      	ldr	r1, [pc, #280]	@ (8005008 <HAL_RCC_OscConfig+0x27c>)
 8004ef0:	4313      	orrs	r3, r2
 8004ef2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004ef4:	4b45      	ldr	r3, [pc, #276]	@ (800500c <HAL_RCC_OscConfig+0x280>)
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4618      	mov	r0, r3
 8004efa:	f7fc feb1 	bl	8001c60 <HAL_InitTick>
 8004efe:	4603      	mov	r3, r0
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d043      	beq.n	8004f8c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004f04:	2301      	movs	r3, #1
 8004f06:	e249      	b.n	800539c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	68db      	ldr	r3, [r3, #12]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d023      	beq.n	8004f58 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004f10:	4b3d      	ldr	r3, [pc, #244]	@ (8005008 <HAL_RCC_OscConfig+0x27c>)
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	4a3c      	ldr	r2, [pc, #240]	@ (8005008 <HAL_RCC_OscConfig+0x27c>)
 8004f16:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004f1a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f1c:	f7fc feec 	bl	8001cf8 <HAL_GetTick>
 8004f20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004f22:	e008      	b.n	8004f36 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f24:	f7fc fee8 	bl	8001cf8 <HAL_GetTick>
 8004f28:	4602      	mov	r2, r0
 8004f2a:	693b      	ldr	r3, [r7, #16]
 8004f2c:	1ad3      	subs	r3, r2, r3
 8004f2e:	2b02      	cmp	r3, #2
 8004f30:	d901      	bls.n	8004f36 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004f32:	2303      	movs	r3, #3
 8004f34:	e232      	b.n	800539c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004f36:	4b34      	ldr	r3, [pc, #208]	@ (8005008 <HAL_RCC_OscConfig+0x27c>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d0f0      	beq.n	8004f24 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f42:	4b31      	ldr	r3, [pc, #196]	@ (8005008 <HAL_RCC_OscConfig+0x27c>)
 8004f44:	685b      	ldr	r3, [r3, #4]
 8004f46:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	691b      	ldr	r3, [r3, #16]
 8004f4e:	061b      	lsls	r3, r3, #24
 8004f50:	492d      	ldr	r1, [pc, #180]	@ (8005008 <HAL_RCC_OscConfig+0x27c>)
 8004f52:	4313      	orrs	r3, r2
 8004f54:	604b      	str	r3, [r1, #4]
 8004f56:	e01a      	b.n	8004f8e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004f58:	4b2b      	ldr	r3, [pc, #172]	@ (8005008 <HAL_RCC_OscConfig+0x27c>)
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	4a2a      	ldr	r2, [pc, #168]	@ (8005008 <HAL_RCC_OscConfig+0x27c>)
 8004f5e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004f62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f64:	f7fc fec8 	bl	8001cf8 <HAL_GetTick>
 8004f68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004f6a:	e008      	b.n	8004f7e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f6c:	f7fc fec4 	bl	8001cf8 <HAL_GetTick>
 8004f70:	4602      	mov	r2, r0
 8004f72:	693b      	ldr	r3, [r7, #16]
 8004f74:	1ad3      	subs	r3, r2, r3
 8004f76:	2b02      	cmp	r3, #2
 8004f78:	d901      	bls.n	8004f7e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004f7a:	2303      	movs	r3, #3
 8004f7c:	e20e      	b.n	800539c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004f7e:	4b22      	ldr	r3, [pc, #136]	@ (8005008 <HAL_RCC_OscConfig+0x27c>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d1f0      	bne.n	8004f6c <HAL_RCC_OscConfig+0x1e0>
 8004f8a:	e000      	b.n	8004f8e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004f8c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f003 0308 	and.w	r3, r3, #8
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d041      	beq.n	800501e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	695b      	ldr	r3, [r3, #20]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d01c      	beq.n	8004fdc <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004fa2:	4b19      	ldr	r3, [pc, #100]	@ (8005008 <HAL_RCC_OscConfig+0x27c>)
 8004fa4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004fa8:	4a17      	ldr	r2, [pc, #92]	@ (8005008 <HAL_RCC_OscConfig+0x27c>)
 8004faa:	f043 0301 	orr.w	r3, r3, #1
 8004fae:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fb2:	f7fc fea1 	bl	8001cf8 <HAL_GetTick>
 8004fb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004fb8:	e008      	b.n	8004fcc <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004fba:	f7fc fe9d 	bl	8001cf8 <HAL_GetTick>
 8004fbe:	4602      	mov	r2, r0
 8004fc0:	693b      	ldr	r3, [r7, #16]
 8004fc2:	1ad3      	subs	r3, r2, r3
 8004fc4:	2b02      	cmp	r3, #2
 8004fc6:	d901      	bls.n	8004fcc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004fc8:	2303      	movs	r3, #3
 8004fca:	e1e7      	b.n	800539c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004fcc:	4b0e      	ldr	r3, [pc, #56]	@ (8005008 <HAL_RCC_OscConfig+0x27c>)
 8004fce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004fd2:	f003 0302 	and.w	r3, r3, #2
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d0ef      	beq.n	8004fba <HAL_RCC_OscConfig+0x22e>
 8004fda:	e020      	b.n	800501e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004fdc:	4b0a      	ldr	r3, [pc, #40]	@ (8005008 <HAL_RCC_OscConfig+0x27c>)
 8004fde:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004fe2:	4a09      	ldr	r2, [pc, #36]	@ (8005008 <HAL_RCC_OscConfig+0x27c>)
 8004fe4:	f023 0301 	bic.w	r3, r3, #1
 8004fe8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fec:	f7fc fe84 	bl	8001cf8 <HAL_GetTick>
 8004ff0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004ff2:	e00d      	b.n	8005010 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ff4:	f7fc fe80 	bl	8001cf8 <HAL_GetTick>
 8004ff8:	4602      	mov	r2, r0
 8004ffa:	693b      	ldr	r3, [r7, #16]
 8004ffc:	1ad3      	subs	r3, r2, r3
 8004ffe:	2b02      	cmp	r3, #2
 8005000:	d906      	bls.n	8005010 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005002:	2303      	movs	r3, #3
 8005004:	e1ca      	b.n	800539c <HAL_RCC_OscConfig+0x610>
 8005006:	bf00      	nop
 8005008:	40021000 	.word	0x40021000
 800500c:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005010:	4b8c      	ldr	r3, [pc, #560]	@ (8005244 <HAL_RCC_OscConfig+0x4b8>)
 8005012:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005016:	f003 0302 	and.w	r3, r3, #2
 800501a:	2b00      	cmp	r3, #0
 800501c:	d1ea      	bne.n	8004ff4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f003 0304 	and.w	r3, r3, #4
 8005026:	2b00      	cmp	r3, #0
 8005028:	f000 80a6 	beq.w	8005178 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800502c:	2300      	movs	r3, #0
 800502e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005030:	4b84      	ldr	r3, [pc, #528]	@ (8005244 <HAL_RCC_OscConfig+0x4b8>)
 8005032:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005034:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005038:	2b00      	cmp	r3, #0
 800503a:	d101      	bne.n	8005040 <HAL_RCC_OscConfig+0x2b4>
 800503c:	2301      	movs	r3, #1
 800503e:	e000      	b.n	8005042 <HAL_RCC_OscConfig+0x2b6>
 8005040:	2300      	movs	r3, #0
 8005042:	2b00      	cmp	r3, #0
 8005044:	d00d      	beq.n	8005062 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005046:	4b7f      	ldr	r3, [pc, #508]	@ (8005244 <HAL_RCC_OscConfig+0x4b8>)
 8005048:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800504a:	4a7e      	ldr	r2, [pc, #504]	@ (8005244 <HAL_RCC_OscConfig+0x4b8>)
 800504c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005050:	6593      	str	r3, [r2, #88]	@ 0x58
 8005052:	4b7c      	ldr	r3, [pc, #496]	@ (8005244 <HAL_RCC_OscConfig+0x4b8>)
 8005054:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005056:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800505a:	60fb      	str	r3, [r7, #12]
 800505c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800505e:	2301      	movs	r3, #1
 8005060:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005062:	4b79      	ldr	r3, [pc, #484]	@ (8005248 <HAL_RCC_OscConfig+0x4bc>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800506a:	2b00      	cmp	r3, #0
 800506c:	d118      	bne.n	80050a0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800506e:	4b76      	ldr	r3, [pc, #472]	@ (8005248 <HAL_RCC_OscConfig+0x4bc>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	4a75      	ldr	r2, [pc, #468]	@ (8005248 <HAL_RCC_OscConfig+0x4bc>)
 8005074:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005078:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800507a:	f7fc fe3d 	bl	8001cf8 <HAL_GetTick>
 800507e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005080:	e008      	b.n	8005094 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005082:	f7fc fe39 	bl	8001cf8 <HAL_GetTick>
 8005086:	4602      	mov	r2, r0
 8005088:	693b      	ldr	r3, [r7, #16]
 800508a:	1ad3      	subs	r3, r2, r3
 800508c:	2b02      	cmp	r3, #2
 800508e:	d901      	bls.n	8005094 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8005090:	2303      	movs	r3, #3
 8005092:	e183      	b.n	800539c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005094:	4b6c      	ldr	r3, [pc, #432]	@ (8005248 <HAL_RCC_OscConfig+0x4bc>)
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800509c:	2b00      	cmp	r3, #0
 800509e:	d0f0      	beq.n	8005082 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	689b      	ldr	r3, [r3, #8]
 80050a4:	2b01      	cmp	r3, #1
 80050a6:	d108      	bne.n	80050ba <HAL_RCC_OscConfig+0x32e>
 80050a8:	4b66      	ldr	r3, [pc, #408]	@ (8005244 <HAL_RCC_OscConfig+0x4b8>)
 80050aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050ae:	4a65      	ldr	r2, [pc, #404]	@ (8005244 <HAL_RCC_OscConfig+0x4b8>)
 80050b0:	f043 0301 	orr.w	r3, r3, #1
 80050b4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80050b8:	e024      	b.n	8005104 <HAL_RCC_OscConfig+0x378>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	689b      	ldr	r3, [r3, #8]
 80050be:	2b05      	cmp	r3, #5
 80050c0:	d110      	bne.n	80050e4 <HAL_RCC_OscConfig+0x358>
 80050c2:	4b60      	ldr	r3, [pc, #384]	@ (8005244 <HAL_RCC_OscConfig+0x4b8>)
 80050c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050c8:	4a5e      	ldr	r2, [pc, #376]	@ (8005244 <HAL_RCC_OscConfig+0x4b8>)
 80050ca:	f043 0304 	orr.w	r3, r3, #4
 80050ce:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80050d2:	4b5c      	ldr	r3, [pc, #368]	@ (8005244 <HAL_RCC_OscConfig+0x4b8>)
 80050d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050d8:	4a5a      	ldr	r2, [pc, #360]	@ (8005244 <HAL_RCC_OscConfig+0x4b8>)
 80050da:	f043 0301 	orr.w	r3, r3, #1
 80050de:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80050e2:	e00f      	b.n	8005104 <HAL_RCC_OscConfig+0x378>
 80050e4:	4b57      	ldr	r3, [pc, #348]	@ (8005244 <HAL_RCC_OscConfig+0x4b8>)
 80050e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050ea:	4a56      	ldr	r2, [pc, #344]	@ (8005244 <HAL_RCC_OscConfig+0x4b8>)
 80050ec:	f023 0301 	bic.w	r3, r3, #1
 80050f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80050f4:	4b53      	ldr	r3, [pc, #332]	@ (8005244 <HAL_RCC_OscConfig+0x4b8>)
 80050f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050fa:	4a52      	ldr	r2, [pc, #328]	@ (8005244 <HAL_RCC_OscConfig+0x4b8>)
 80050fc:	f023 0304 	bic.w	r3, r3, #4
 8005100:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	689b      	ldr	r3, [r3, #8]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d016      	beq.n	800513a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800510c:	f7fc fdf4 	bl	8001cf8 <HAL_GetTick>
 8005110:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005112:	e00a      	b.n	800512a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005114:	f7fc fdf0 	bl	8001cf8 <HAL_GetTick>
 8005118:	4602      	mov	r2, r0
 800511a:	693b      	ldr	r3, [r7, #16]
 800511c:	1ad3      	subs	r3, r2, r3
 800511e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005122:	4293      	cmp	r3, r2
 8005124:	d901      	bls.n	800512a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8005126:	2303      	movs	r3, #3
 8005128:	e138      	b.n	800539c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800512a:	4b46      	ldr	r3, [pc, #280]	@ (8005244 <HAL_RCC_OscConfig+0x4b8>)
 800512c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005130:	f003 0302 	and.w	r3, r3, #2
 8005134:	2b00      	cmp	r3, #0
 8005136:	d0ed      	beq.n	8005114 <HAL_RCC_OscConfig+0x388>
 8005138:	e015      	b.n	8005166 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800513a:	f7fc fddd 	bl	8001cf8 <HAL_GetTick>
 800513e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005140:	e00a      	b.n	8005158 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005142:	f7fc fdd9 	bl	8001cf8 <HAL_GetTick>
 8005146:	4602      	mov	r2, r0
 8005148:	693b      	ldr	r3, [r7, #16]
 800514a:	1ad3      	subs	r3, r2, r3
 800514c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005150:	4293      	cmp	r3, r2
 8005152:	d901      	bls.n	8005158 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005154:	2303      	movs	r3, #3
 8005156:	e121      	b.n	800539c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005158:	4b3a      	ldr	r3, [pc, #232]	@ (8005244 <HAL_RCC_OscConfig+0x4b8>)
 800515a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800515e:	f003 0302 	and.w	r3, r3, #2
 8005162:	2b00      	cmp	r3, #0
 8005164:	d1ed      	bne.n	8005142 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005166:	7ffb      	ldrb	r3, [r7, #31]
 8005168:	2b01      	cmp	r3, #1
 800516a:	d105      	bne.n	8005178 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800516c:	4b35      	ldr	r3, [pc, #212]	@ (8005244 <HAL_RCC_OscConfig+0x4b8>)
 800516e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005170:	4a34      	ldr	r2, [pc, #208]	@ (8005244 <HAL_RCC_OscConfig+0x4b8>)
 8005172:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005176:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f003 0320 	and.w	r3, r3, #32
 8005180:	2b00      	cmp	r3, #0
 8005182:	d03c      	beq.n	80051fe <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	699b      	ldr	r3, [r3, #24]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d01c      	beq.n	80051c6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800518c:	4b2d      	ldr	r3, [pc, #180]	@ (8005244 <HAL_RCC_OscConfig+0x4b8>)
 800518e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005192:	4a2c      	ldr	r2, [pc, #176]	@ (8005244 <HAL_RCC_OscConfig+0x4b8>)
 8005194:	f043 0301 	orr.w	r3, r3, #1
 8005198:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800519c:	f7fc fdac 	bl	8001cf8 <HAL_GetTick>
 80051a0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80051a2:	e008      	b.n	80051b6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80051a4:	f7fc fda8 	bl	8001cf8 <HAL_GetTick>
 80051a8:	4602      	mov	r2, r0
 80051aa:	693b      	ldr	r3, [r7, #16]
 80051ac:	1ad3      	subs	r3, r2, r3
 80051ae:	2b02      	cmp	r3, #2
 80051b0:	d901      	bls.n	80051b6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80051b2:	2303      	movs	r3, #3
 80051b4:	e0f2      	b.n	800539c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80051b6:	4b23      	ldr	r3, [pc, #140]	@ (8005244 <HAL_RCC_OscConfig+0x4b8>)
 80051b8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80051bc:	f003 0302 	and.w	r3, r3, #2
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d0ef      	beq.n	80051a4 <HAL_RCC_OscConfig+0x418>
 80051c4:	e01b      	b.n	80051fe <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80051c6:	4b1f      	ldr	r3, [pc, #124]	@ (8005244 <HAL_RCC_OscConfig+0x4b8>)
 80051c8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80051cc:	4a1d      	ldr	r2, [pc, #116]	@ (8005244 <HAL_RCC_OscConfig+0x4b8>)
 80051ce:	f023 0301 	bic.w	r3, r3, #1
 80051d2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051d6:	f7fc fd8f 	bl	8001cf8 <HAL_GetTick>
 80051da:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80051dc:	e008      	b.n	80051f0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80051de:	f7fc fd8b 	bl	8001cf8 <HAL_GetTick>
 80051e2:	4602      	mov	r2, r0
 80051e4:	693b      	ldr	r3, [r7, #16]
 80051e6:	1ad3      	subs	r3, r2, r3
 80051e8:	2b02      	cmp	r3, #2
 80051ea:	d901      	bls.n	80051f0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80051ec:	2303      	movs	r3, #3
 80051ee:	e0d5      	b.n	800539c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80051f0:	4b14      	ldr	r3, [pc, #80]	@ (8005244 <HAL_RCC_OscConfig+0x4b8>)
 80051f2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80051f6:	f003 0302 	and.w	r3, r3, #2
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d1ef      	bne.n	80051de <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	69db      	ldr	r3, [r3, #28]
 8005202:	2b00      	cmp	r3, #0
 8005204:	f000 80c9 	beq.w	800539a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005208:	4b0e      	ldr	r3, [pc, #56]	@ (8005244 <HAL_RCC_OscConfig+0x4b8>)
 800520a:	689b      	ldr	r3, [r3, #8]
 800520c:	f003 030c 	and.w	r3, r3, #12
 8005210:	2b0c      	cmp	r3, #12
 8005212:	f000 8083 	beq.w	800531c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	69db      	ldr	r3, [r3, #28]
 800521a:	2b02      	cmp	r3, #2
 800521c:	d15e      	bne.n	80052dc <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800521e:	4b09      	ldr	r3, [pc, #36]	@ (8005244 <HAL_RCC_OscConfig+0x4b8>)
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	4a08      	ldr	r2, [pc, #32]	@ (8005244 <HAL_RCC_OscConfig+0x4b8>)
 8005224:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005228:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800522a:	f7fc fd65 	bl	8001cf8 <HAL_GetTick>
 800522e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005230:	e00c      	b.n	800524c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005232:	f7fc fd61 	bl	8001cf8 <HAL_GetTick>
 8005236:	4602      	mov	r2, r0
 8005238:	693b      	ldr	r3, [r7, #16]
 800523a:	1ad3      	subs	r3, r2, r3
 800523c:	2b02      	cmp	r3, #2
 800523e:	d905      	bls.n	800524c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8005240:	2303      	movs	r3, #3
 8005242:	e0ab      	b.n	800539c <HAL_RCC_OscConfig+0x610>
 8005244:	40021000 	.word	0x40021000
 8005248:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800524c:	4b55      	ldr	r3, [pc, #340]	@ (80053a4 <HAL_RCC_OscConfig+0x618>)
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005254:	2b00      	cmp	r3, #0
 8005256:	d1ec      	bne.n	8005232 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005258:	4b52      	ldr	r3, [pc, #328]	@ (80053a4 <HAL_RCC_OscConfig+0x618>)
 800525a:	68da      	ldr	r2, [r3, #12]
 800525c:	4b52      	ldr	r3, [pc, #328]	@ (80053a8 <HAL_RCC_OscConfig+0x61c>)
 800525e:	4013      	ands	r3, r2
 8005260:	687a      	ldr	r2, [r7, #4]
 8005262:	6a11      	ldr	r1, [r2, #32]
 8005264:	687a      	ldr	r2, [r7, #4]
 8005266:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005268:	3a01      	subs	r2, #1
 800526a:	0112      	lsls	r2, r2, #4
 800526c:	4311      	orrs	r1, r2
 800526e:	687a      	ldr	r2, [r7, #4]
 8005270:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8005272:	0212      	lsls	r2, r2, #8
 8005274:	4311      	orrs	r1, r2
 8005276:	687a      	ldr	r2, [r7, #4]
 8005278:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800527a:	0852      	lsrs	r2, r2, #1
 800527c:	3a01      	subs	r2, #1
 800527e:	0552      	lsls	r2, r2, #21
 8005280:	4311      	orrs	r1, r2
 8005282:	687a      	ldr	r2, [r7, #4]
 8005284:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005286:	0852      	lsrs	r2, r2, #1
 8005288:	3a01      	subs	r2, #1
 800528a:	0652      	lsls	r2, r2, #25
 800528c:	4311      	orrs	r1, r2
 800528e:	687a      	ldr	r2, [r7, #4]
 8005290:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005292:	06d2      	lsls	r2, r2, #27
 8005294:	430a      	orrs	r2, r1
 8005296:	4943      	ldr	r1, [pc, #268]	@ (80053a4 <HAL_RCC_OscConfig+0x618>)
 8005298:	4313      	orrs	r3, r2
 800529a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800529c:	4b41      	ldr	r3, [pc, #260]	@ (80053a4 <HAL_RCC_OscConfig+0x618>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4a40      	ldr	r2, [pc, #256]	@ (80053a4 <HAL_RCC_OscConfig+0x618>)
 80052a2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80052a6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80052a8:	4b3e      	ldr	r3, [pc, #248]	@ (80053a4 <HAL_RCC_OscConfig+0x618>)
 80052aa:	68db      	ldr	r3, [r3, #12]
 80052ac:	4a3d      	ldr	r2, [pc, #244]	@ (80053a4 <HAL_RCC_OscConfig+0x618>)
 80052ae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80052b2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052b4:	f7fc fd20 	bl	8001cf8 <HAL_GetTick>
 80052b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80052ba:	e008      	b.n	80052ce <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052bc:	f7fc fd1c 	bl	8001cf8 <HAL_GetTick>
 80052c0:	4602      	mov	r2, r0
 80052c2:	693b      	ldr	r3, [r7, #16]
 80052c4:	1ad3      	subs	r3, r2, r3
 80052c6:	2b02      	cmp	r3, #2
 80052c8:	d901      	bls.n	80052ce <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80052ca:	2303      	movs	r3, #3
 80052cc:	e066      	b.n	800539c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80052ce:	4b35      	ldr	r3, [pc, #212]	@ (80053a4 <HAL_RCC_OscConfig+0x618>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d0f0      	beq.n	80052bc <HAL_RCC_OscConfig+0x530>
 80052da:	e05e      	b.n	800539a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052dc:	4b31      	ldr	r3, [pc, #196]	@ (80053a4 <HAL_RCC_OscConfig+0x618>)
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	4a30      	ldr	r2, [pc, #192]	@ (80053a4 <HAL_RCC_OscConfig+0x618>)
 80052e2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80052e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052e8:	f7fc fd06 	bl	8001cf8 <HAL_GetTick>
 80052ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80052ee:	e008      	b.n	8005302 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052f0:	f7fc fd02 	bl	8001cf8 <HAL_GetTick>
 80052f4:	4602      	mov	r2, r0
 80052f6:	693b      	ldr	r3, [r7, #16]
 80052f8:	1ad3      	subs	r3, r2, r3
 80052fa:	2b02      	cmp	r3, #2
 80052fc:	d901      	bls.n	8005302 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80052fe:	2303      	movs	r3, #3
 8005300:	e04c      	b.n	800539c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005302:	4b28      	ldr	r3, [pc, #160]	@ (80053a4 <HAL_RCC_OscConfig+0x618>)
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800530a:	2b00      	cmp	r3, #0
 800530c:	d1f0      	bne.n	80052f0 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800530e:	4b25      	ldr	r3, [pc, #148]	@ (80053a4 <HAL_RCC_OscConfig+0x618>)
 8005310:	68da      	ldr	r2, [r3, #12]
 8005312:	4924      	ldr	r1, [pc, #144]	@ (80053a4 <HAL_RCC_OscConfig+0x618>)
 8005314:	4b25      	ldr	r3, [pc, #148]	@ (80053ac <HAL_RCC_OscConfig+0x620>)
 8005316:	4013      	ands	r3, r2
 8005318:	60cb      	str	r3, [r1, #12]
 800531a:	e03e      	b.n	800539a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	69db      	ldr	r3, [r3, #28]
 8005320:	2b01      	cmp	r3, #1
 8005322:	d101      	bne.n	8005328 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8005324:	2301      	movs	r3, #1
 8005326:	e039      	b.n	800539c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005328:	4b1e      	ldr	r3, [pc, #120]	@ (80053a4 <HAL_RCC_OscConfig+0x618>)
 800532a:	68db      	ldr	r3, [r3, #12]
 800532c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800532e:	697b      	ldr	r3, [r7, #20]
 8005330:	f003 0203 	and.w	r2, r3, #3
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6a1b      	ldr	r3, [r3, #32]
 8005338:	429a      	cmp	r2, r3
 800533a:	d12c      	bne.n	8005396 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800533c:	697b      	ldr	r3, [r7, #20]
 800533e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005346:	3b01      	subs	r3, #1
 8005348:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800534a:	429a      	cmp	r2, r3
 800534c:	d123      	bne.n	8005396 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800534e:	697b      	ldr	r3, [r7, #20]
 8005350:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005358:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800535a:	429a      	cmp	r2, r3
 800535c:	d11b      	bne.n	8005396 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800535e:	697b      	ldr	r3, [r7, #20]
 8005360:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005368:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800536a:	429a      	cmp	r2, r3
 800536c:	d113      	bne.n	8005396 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800536e:	697b      	ldr	r3, [r7, #20]
 8005370:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005378:	085b      	lsrs	r3, r3, #1
 800537a:	3b01      	subs	r3, #1
 800537c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800537e:	429a      	cmp	r2, r3
 8005380:	d109      	bne.n	8005396 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005382:	697b      	ldr	r3, [r7, #20]
 8005384:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800538c:	085b      	lsrs	r3, r3, #1
 800538e:	3b01      	subs	r3, #1
 8005390:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005392:	429a      	cmp	r2, r3
 8005394:	d001      	beq.n	800539a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8005396:	2301      	movs	r3, #1
 8005398:	e000      	b.n	800539c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800539a:	2300      	movs	r3, #0
}
 800539c:	4618      	mov	r0, r3
 800539e:	3720      	adds	r7, #32
 80053a0:	46bd      	mov	sp, r7
 80053a2:	bd80      	pop	{r7, pc}
 80053a4:	40021000 	.word	0x40021000
 80053a8:	019f800c 	.word	0x019f800c
 80053ac:	feeefffc 	.word	0xfeeefffc

080053b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b086      	sub	sp, #24
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
 80053b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80053ba:	2300      	movs	r3, #0
 80053bc:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d101      	bne.n	80053c8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80053c4:	2301      	movs	r3, #1
 80053c6:	e11e      	b.n	8005606 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80053c8:	4b91      	ldr	r3, [pc, #580]	@ (8005610 <HAL_RCC_ClockConfig+0x260>)
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f003 030f 	and.w	r3, r3, #15
 80053d0:	683a      	ldr	r2, [r7, #0]
 80053d2:	429a      	cmp	r2, r3
 80053d4:	d910      	bls.n	80053f8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053d6:	4b8e      	ldr	r3, [pc, #568]	@ (8005610 <HAL_RCC_ClockConfig+0x260>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f023 020f 	bic.w	r2, r3, #15
 80053de:	498c      	ldr	r1, [pc, #560]	@ (8005610 <HAL_RCC_ClockConfig+0x260>)
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	4313      	orrs	r3, r2
 80053e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80053e6:	4b8a      	ldr	r3, [pc, #552]	@ (8005610 <HAL_RCC_ClockConfig+0x260>)
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f003 030f 	and.w	r3, r3, #15
 80053ee:	683a      	ldr	r2, [r7, #0]
 80053f0:	429a      	cmp	r2, r3
 80053f2:	d001      	beq.n	80053f8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80053f4:	2301      	movs	r3, #1
 80053f6:	e106      	b.n	8005606 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f003 0301 	and.w	r3, r3, #1
 8005400:	2b00      	cmp	r3, #0
 8005402:	d073      	beq.n	80054ec <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	685b      	ldr	r3, [r3, #4]
 8005408:	2b03      	cmp	r3, #3
 800540a:	d129      	bne.n	8005460 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800540c:	4b81      	ldr	r3, [pc, #516]	@ (8005614 <HAL_RCC_ClockConfig+0x264>)
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005414:	2b00      	cmp	r3, #0
 8005416:	d101      	bne.n	800541c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005418:	2301      	movs	r3, #1
 800541a:	e0f4      	b.n	8005606 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800541c:	f000 f99e 	bl	800575c <RCC_GetSysClockFreqFromPLLSource>
 8005420:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8005422:	693b      	ldr	r3, [r7, #16]
 8005424:	4a7c      	ldr	r2, [pc, #496]	@ (8005618 <HAL_RCC_ClockConfig+0x268>)
 8005426:	4293      	cmp	r3, r2
 8005428:	d93f      	bls.n	80054aa <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800542a:	4b7a      	ldr	r3, [pc, #488]	@ (8005614 <HAL_RCC_ClockConfig+0x264>)
 800542c:	689b      	ldr	r3, [r3, #8]
 800542e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005432:	2b00      	cmp	r3, #0
 8005434:	d009      	beq.n	800544a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800543e:	2b00      	cmp	r3, #0
 8005440:	d033      	beq.n	80054aa <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005446:	2b00      	cmp	r3, #0
 8005448:	d12f      	bne.n	80054aa <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800544a:	4b72      	ldr	r3, [pc, #456]	@ (8005614 <HAL_RCC_ClockConfig+0x264>)
 800544c:	689b      	ldr	r3, [r3, #8]
 800544e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005452:	4a70      	ldr	r2, [pc, #448]	@ (8005614 <HAL_RCC_ClockConfig+0x264>)
 8005454:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005458:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800545a:	2380      	movs	r3, #128	@ 0x80
 800545c:	617b      	str	r3, [r7, #20]
 800545e:	e024      	b.n	80054aa <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	685b      	ldr	r3, [r3, #4]
 8005464:	2b02      	cmp	r3, #2
 8005466:	d107      	bne.n	8005478 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005468:	4b6a      	ldr	r3, [pc, #424]	@ (8005614 <HAL_RCC_ClockConfig+0x264>)
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005470:	2b00      	cmp	r3, #0
 8005472:	d109      	bne.n	8005488 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005474:	2301      	movs	r3, #1
 8005476:	e0c6      	b.n	8005606 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005478:	4b66      	ldr	r3, [pc, #408]	@ (8005614 <HAL_RCC_ClockConfig+0x264>)
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005480:	2b00      	cmp	r3, #0
 8005482:	d101      	bne.n	8005488 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005484:	2301      	movs	r3, #1
 8005486:	e0be      	b.n	8005606 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005488:	f000 f8ce 	bl	8005628 <HAL_RCC_GetSysClockFreq>
 800548c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800548e:	693b      	ldr	r3, [r7, #16]
 8005490:	4a61      	ldr	r2, [pc, #388]	@ (8005618 <HAL_RCC_ClockConfig+0x268>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d909      	bls.n	80054aa <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005496:	4b5f      	ldr	r3, [pc, #380]	@ (8005614 <HAL_RCC_ClockConfig+0x264>)
 8005498:	689b      	ldr	r3, [r3, #8]
 800549a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800549e:	4a5d      	ldr	r2, [pc, #372]	@ (8005614 <HAL_RCC_ClockConfig+0x264>)
 80054a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80054a4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80054a6:	2380      	movs	r3, #128	@ 0x80
 80054a8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80054aa:	4b5a      	ldr	r3, [pc, #360]	@ (8005614 <HAL_RCC_ClockConfig+0x264>)
 80054ac:	689b      	ldr	r3, [r3, #8]
 80054ae:	f023 0203 	bic.w	r2, r3, #3
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	685b      	ldr	r3, [r3, #4]
 80054b6:	4957      	ldr	r1, [pc, #348]	@ (8005614 <HAL_RCC_ClockConfig+0x264>)
 80054b8:	4313      	orrs	r3, r2
 80054ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80054bc:	f7fc fc1c 	bl	8001cf8 <HAL_GetTick>
 80054c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80054c2:	e00a      	b.n	80054da <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80054c4:	f7fc fc18 	bl	8001cf8 <HAL_GetTick>
 80054c8:	4602      	mov	r2, r0
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	1ad3      	subs	r3, r2, r3
 80054ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d901      	bls.n	80054da <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80054d6:	2303      	movs	r3, #3
 80054d8:	e095      	b.n	8005606 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80054da:	4b4e      	ldr	r3, [pc, #312]	@ (8005614 <HAL_RCC_ClockConfig+0x264>)
 80054dc:	689b      	ldr	r3, [r3, #8]
 80054de:	f003 020c 	and.w	r2, r3, #12
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	685b      	ldr	r3, [r3, #4]
 80054e6:	009b      	lsls	r3, r3, #2
 80054e8:	429a      	cmp	r2, r3
 80054ea:	d1eb      	bne.n	80054c4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f003 0302 	and.w	r3, r3, #2
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d023      	beq.n	8005540 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f003 0304 	and.w	r3, r3, #4
 8005500:	2b00      	cmp	r3, #0
 8005502:	d005      	beq.n	8005510 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005504:	4b43      	ldr	r3, [pc, #268]	@ (8005614 <HAL_RCC_ClockConfig+0x264>)
 8005506:	689b      	ldr	r3, [r3, #8]
 8005508:	4a42      	ldr	r2, [pc, #264]	@ (8005614 <HAL_RCC_ClockConfig+0x264>)
 800550a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800550e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f003 0308 	and.w	r3, r3, #8
 8005518:	2b00      	cmp	r3, #0
 800551a:	d007      	beq.n	800552c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800551c:	4b3d      	ldr	r3, [pc, #244]	@ (8005614 <HAL_RCC_ClockConfig+0x264>)
 800551e:	689b      	ldr	r3, [r3, #8]
 8005520:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005524:	4a3b      	ldr	r2, [pc, #236]	@ (8005614 <HAL_RCC_ClockConfig+0x264>)
 8005526:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800552a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800552c:	4b39      	ldr	r3, [pc, #228]	@ (8005614 <HAL_RCC_ClockConfig+0x264>)
 800552e:	689b      	ldr	r3, [r3, #8]
 8005530:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	689b      	ldr	r3, [r3, #8]
 8005538:	4936      	ldr	r1, [pc, #216]	@ (8005614 <HAL_RCC_ClockConfig+0x264>)
 800553a:	4313      	orrs	r3, r2
 800553c:	608b      	str	r3, [r1, #8]
 800553e:	e008      	b.n	8005552 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005540:	697b      	ldr	r3, [r7, #20]
 8005542:	2b80      	cmp	r3, #128	@ 0x80
 8005544:	d105      	bne.n	8005552 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005546:	4b33      	ldr	r3, [pc, #204]	@ (8005614 <HAL_RCC_ClockConfig+0x264>)
 8005548:	689b      	ldr	r3, [r3, #8]
 800554a:	4a32      	ldr	r2, [pc, #200]	@ (8005614 <HAL_RCC_ClockConfig+0x264>)
 800554c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005550:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005552:	4b2f      	ldr	r3, [pc, #188]	@ (8005610 <HAL_RCC_ClockConfig+0x260>)
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f003 030f 	and.w	r3, r3, #15
 800555a:	683a      	ldr	r2, [r7, #0]
 800555c:	429a      	cmp	r2, r3
 800555e:	d21d      	bcs.n	800559c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005560:	4b2b      	ldr	r3, [pc, #172]	@ (8005610 <HAL_RCC_ClockConfig+0x260>)
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f023 020f 	bic.w	r2, r3, #15
 8005568:	4929      	ldr	r1, [pc, #164]	@ (8005610 <HAL_RCC_ClockConfig+0x260>)
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	4313      	orrs	r3, r2
 800556e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005570:	f7fc fbc2 	bl	8001cf8 <HAL_GetTick>
 8005574:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005576:	e00a      	b.n	800558e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005578:	f7fc fbbe 	bl	8001cf8 <HAL_GetTick>
 800557c:	4602      	mov	r2, r0
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	1ad3      	subs	r3, r2, r3
 8005582:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005586:	4293      	cmp	r3, r2
 8005588:	d901      	bls.n	800558e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800558a:	2303      	movs	r3, #3
 800558c:	e03b      	b.n	8005606 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800558e:	4b20      	ldr	r3, [pc, #128]	@ (8005610 <HAL_RCC_ClockConfig+0x260>)
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f003 030f 	and.w	r3, r3, #15
 8005596:	683a      	ldr	r2, [r7, #0]
 8005598:	429a      	cmp	r2, r3
 800559a:	d1ed      	bne.n	8005578 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f003 0304 	and.w	r3, r3, #4
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d008      	beq.n	80055ba <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80055a8:	4b1a      	ldr	r3, [pc, #104]	@ (8005614 <HAL_RCC_ClockConfig+0x264>)
 80055aa:	689b      	ldr	r3, [r3, #8]
 80055ac:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	68db      	ldr	r3, [r3, #12]
 80055b4:	4917      	ldr	r1, [pc, #92]	@ (8005614 <HAL_RCC_ClockConfig+0x264>)
 80055b6:	4313      	orrs	r3, r2
 80055b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f003 0308 	and.w	r3, r3, #8
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d009      	beq.n	80055da <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80055c6:	4b13      	ldr	r3, [pc, #76]	@ (8005614 <HAL_RCC_ClockConfig+0x264>)
 80055c8:	689b      	ldr	r3, [r3, #8]
 80055ca:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	691b      	ldr	r3, [r3, #16]
 80055d2:	00db      	lsls	r3, r3, #3
 80055d4:	490f      	ldr	r1, [pc, #60]	@ (8005614 <HAL_RCC_ClockConfig+0x264>)
 80055d6:	4313      	orrs	r3, r2
 80055d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80055da:	f000 f825 	bl	8005628 <HAL_RCC_GetSysClockFreq>
 80055de:	4602      	mov	r2, r0
 80055e0:	4b0c      	ldr	r3, [pc, #48]	@ (8005614 <HAL_RCC_ClockConfig+0x264>)
 80055e2:	689b      	ldr	r3, [r3, #8]
 80055e4:	091b      	lsrs	r3, r3, #4
 80055e6:	f003 030f 	and.w	r3, r3, #15
 80055ea:	490c      	ldr	r1, [pc, #48]	@ (800561c <HAL_RCC_ClockConfig+0x26c>)
 80055ec:	5ccb      	ldrb	r3, [r1, r3]
 80055ee:	f003 031f 	and.w	r3, r3, #31
 80055f2:	fa22 f303 	lsr.w	r3, r2, r3
 80055f6:	4a0a      	ldr	r2, [pc, #40]	@ (8005620 <HAL_RCC_ClockConfig+0x270>)
 80055f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80055fa:	4b0a      	ldr	r3, [pc, #40]	@ (8005624 <HAL_RCC_ClockConfig+0x274>)
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	4618      	mov	r0, r3
 8005600:	f7fc fb2e 	bl	8001c60 <HAL_InitTick>
 8005604:	4603      	mov	r3, r0
}
 8005606:	4618      	mov	r0, r3
 8005608:	3718      	adds	r7, #24
 800560a:	46bd      	mov	sp, r7
 800560c:	bd80      	pop	{r7, pc}
 800560e:	bf00      	nop
 8005610:	40022000 	.word	0x40022000
 8005614:	40021000 	.word	0x40021000
 8005618:	04c4b400 	.word	0x04c4b400
 800561c:	0800831c 	.word	0x0800831c
 8005620:	20000000 	.word	0x20000000
 8005624:	20000004 	.word	0x20000004

08005628 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005628:	b480      	push	{r7}
 800562a:	b087      	sub	sp, #28
 800562c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800562e:	4b2c      	ldr	r3, [pc, #176]	@ (80056e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005630:	689b      	ldr	r3, [r3, #8]
 8005632:	f003 030c 	and.w	r3, r3, #12
 8005636:	2b04      	cmp	r3, #4
 8005638:	d102      	bne.n	8005640 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800563a:	4b2a      	ldr	r3, [pc, #168]	@ (80056e4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800563c:	613b      	str	r3, [r7, #16]
 800563e:	e047      	b.n	80056d0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005640:	4b27      	ldr	r3, [pc, #156]	@ (80056e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005642:	689b      	ldr	r3, [r3, #8]
 8005644:	f003 030c 	and.w	r3, r3, #12
 8005648:	2b08      	cmp	r3, #8
 800564a:	d102      	bne.n	8005652 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800564c:	4b26      	ldr	r3, [pc, #152]	@ (80056e8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800564e:	613b      	str	r3, [r7, #16]
 8005650:	e03e      	b.n	80056d0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005652:	4b23      	ldr	r3, [pc, #140]	@ (80056e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005654:	689b      	ldr	r3, [r3, #8]
 8005656:	f003 030c 	and.w	r3, r3, #12
 800565a:	2b0c      	cmp	r3, #12
 800565c:	d136      	bne.n	80056cc <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800565e:	4b20      	ldr	r3, [pc, #128]	@ (80056e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005660:	68db      	ldr	r3, [r3, #12]
 8005662:	f003 0303 	and.w	r3, r3, #3
 8005666:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005668:	4b1d      	ldr	r3, [pc, #116]	@ (80056e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800566a:	68db      	ldr	r3, [r3, #12]
 800566c:	091b      	lsrs	r3, r3, #4
 800566e:	f003 030f 	and.w	r3, r3, #15
 8005672:	3301      	adds	r3, #1
 8005674:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	2b03      	cmp	r3, #3
 800567a:	d10c      	bne.n	8005696 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800567c:	4a1a      	ldr	r2, [pc, #104]	@ (80056e8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800567e:	68bb      	ldr	r3, [r7, #8]
 8005680:	fbb2 f3f3 	udiv	r3, r2, r3
 8005684:	4a16      	ldr	r2, [pc, #88]	@ (80056e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005686:	68d2      	ldr	r2, [r2, #12]
 8005688:	0a12      	lsrs	r2, r2, #8
 800568a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800568e:	fb02 f303 	mul.w	r3, r2, r3
 8005692:	617b      	str	r3, [r7, #20]
      break;
 8005694:	e00c      	b.n	80056b0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005696:	4a13      	ldr	r2, [pc, #76]	@ (80056e4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005698:	68bb      	ldr	r3, [r7, #8]
 800569a:	fbb2 f3f3 	udiv	r3, r2, r3
 800569e:	4a10      	ldr	r2, [pc, #64]	@ (80056e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80056a0:	68d2      	ldr	r2, [r2, #12]
 80056a2:	0a12      	lsrs	r2, r2, #8
 80056a4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80056a8:	fb02 f303 	mul.w	r3, r2, r3
 80056ac:	617b      	str	r3, [r7, #20]
      break;
 80056ae:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80056b0:	4b0b      	ldr	r3, [pc, #44]	@ (80056e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80056b2:	68db      	ldr	r3, [r3, #12]
 80056b4:	0e5b      	lsrs	r3, r3, #25
 80056b6:	f003 0303 	and.w	r3, r3, #3
 80056ba:	3301      	adds	r3, #1
 80056bc:	005b      	lsls	r3, r3, #1
 80056be:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80056c0:	697a      	ldr	r2, [r7, #20]
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80056c8:	613b      	str	r3, [r7, #16]
 80056ca:	e001      	b.n	80056d0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80056cc:	2300      	movs	r3, #0
 80056ce:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80056d0:	693b      	ldr	r3, [r7, #16]
}
 80056d2:	4618      	mov	r0, r3
 80056d4:	371c      	adds	r7, #28
 80056d6:	46bd      	mov	sp, r7
 80056d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056dc:	4770      	bx	lr
 80056de:	bf00      	nop
 80056e0:	40021000 	.word	0x40021000
 80056e4:	00f42400 	.word	0x00f42400
 80056e8:	007a1200 	.word	0x007a1200

080056ec <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80056ec:	b480      	push	{r7}
 80056ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80056f0:	4b03      	ldr	r3, [pc, #12]	@ (8005700 <HAL_RCC_GetHCLKFreq+0x14>)
 80056f2:	681b      	ldr	r3, [r3, #0]
}
 80056f4:	4618      	mov	r0, r3
 80056f6:	46bd      	mov	sp, r7
 80056f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fc:	4770      	bx	lr
 80056fe:	bf00      	nop
 8005700:	20000000 	.word	0x20000000

08005704 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005704:	b580      	push	{r7, lr}
 8005706:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005708:	f7ff fff0 	bl	80056ec <HAL_RCC_GetHCLKFreq>
 800570c:	4602      	mov	r2, r0
 800570e:	4b06      	ldr	r3, [pc, #24]	@ (8005728 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005710:	689b      	ldr	r3, [r3, #8]
 8005712:	0a1b      	lsrs	r3, r3, #8
 8005714:	f003 0307 	and.w	r3, r3, #7
 8005718:	4904      	ldr	r1, [pc, #16]	@ (800572c <HAL_RCC_GetPCLK1Freq+0x28>)
 800571a:	5ccb      	ldrb	r3, [r1, r3]
 800571c:	f003 031f 	and.w	r3, r3, #31
 8005720:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005724:	4618      	mov	r0, r3
 8005726:	bd80      	pop	{r7, pc}
 8005728:	40021000 	.word	0x40021000
 800572c:	0800832c 	.word	0x0800832c

08005730 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005730:	b580      	push	{r7, lr}
 8005732:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005734:	f7ff ffda 	bl	80056ec <HAL_RCC_GetHCLKFreq>
 8005738:	4602      	mov	r2, r0
 800573a:	4b06      	ldr	r3, [pc, #24]	@ (8005754 <HAL_RCC_GetPCLK2Freq+0x24>)
 800573c:	689b      	ldr	r3, [r3, #8]
 800573e:	0adb      	lsrs	r3, r3, #11
 8005740:	f003 0307 	and.w	r3, r3, #7
 8005744:	4904      	ldr	r1, [pc, #16]	@ (8005758 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005746:	5ccb      	ldrb	r3, [r1, r3]
 8005748:	f003 031f 	and.w	r3, r3, #31
 800574c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005750:	4618      	mov	r0, r3
 8005752:	bd80      	pop	{r7, pc}
 8005754:	40021000 	.word	0x40021000
 8005758:	0800832c 	.word	0x0800832c

0800575c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800575c:	b480      	push	{r7}
 800575e:	b087      	sub	sp, #28
 8005760:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005762:	4b1e      	ldr	r3, [pc, #120]	@ (80057dc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005764:	68db      	ldr	r3, [r3, #12]
 8005766:	f003 0303 	and.w	r3, r3, #3
 800576a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800576c:	4b1b      	ldr	r3, [pc, #108]	@ (80057dc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800576e:	68db      	ldr	r3, [r3, #12]
 8005770:	091b      	lsrs	r3, r3, #4
 8005772:	f003 030f 	and.w	r3, r3, #15
 8005776:	3301      	adds	r3, #1
 8005778:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800577a:	693b      	ldr	r3, [r7, #16]
 800577c:	2b03      	cmp	r3, #3
 800577e:	d10c      	bne.n	800579a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005780:	4a17      	ldr	r2, [pc, #92]	@ (80057e0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	fbb2 f3f3 	udiv	r3, r2, r3
 8005788:	4a14      	ldr	r2, [pc, #80]	@ (80057dc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800578a:	68d2      	ldr	r2, [r2, #12]
 800578c:	0a12      	lsrs	r2, r2, #8
 800578e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005792:	fb02 f303 	mul.w	r3, r2, r3
 8005796:	617b      	str	r3, [r7, #20]
    break;
 8005798:	e00c      	b.n	80057b4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800579a:	4a12      	ldr	r2, [pc, #72]	@ (80057e4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	fbb2 f3f3 	udiv	r3, r2, r3
 80057a2:	4a0e      	ldr	r2, [pc, #56]	@ (80057dc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80057a4:	68d2      	ldr	r2, [r2, #12]
 80057a6:	0a12      	lsrs	r2, r2, #8
 80057a8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80057ac:	fb02 f303 	mul.w	r3, r2, r3
 80057b0:	617b      	str	r3, [r7, #20]
    break;
 80057b2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80057b4:	4b09      	ldr	r3, [pc, #36]	@ (80057dc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80057b6:	68db      	ldr	r3, [r3, #12]
 80057b8:	0e5b      	lsrs	r3, r3, #25
 80057ba:	f003 0303 	and.w	r3, r3, #3
 80057be:	3301      	adds	r3, #1
 80057c0:	005b      	lsls	r3, r3, #1
 80057c2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80057c4:	697a      	ldr	r2, [r7, #20]
 80057c6:	68bb      	ldr	r3, [r7, #8]
 80057c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80057cc:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80057ce:	687b      	ldr	r3, [r7, #4]
}
 80057d0:	4618      	mov	r0, r3
 80057d2:	371c      	adds	r7, #28
 80057d4:	46bd      	mov	sp, r7
 80057d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057da:	4770      	bx	lr
 80057dc:	40021000 	.word	0x40021000
 80057e0:	007a1200 	.word	0x007a1200
 80057e4:	00f42400 	.word	0x00f42400

080057e8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b086      	sub	sp, #24
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80057f0:	2300      	movs	r3, #0
 80057f2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80057f4:	2300      	movs	r3, #0
 80057f6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005800:	2b00      	cmp	r3, #0
 8005802:	f000 8098 	beq.w	8005936 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005806:	2300      	movs	r3, #0
 8005808:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800580a:	4b43      	ldr	r3, [pc, #268]	@ (8005918 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800580c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800580e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005812:	2b00      	cmp	r3, #0
 8005814:	d10d      	bne.n	8005832 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005816:	4b40      	ldr	r3, [pc, #256]	@ (8005918 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005818:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800581a:	4a3f      	ldr	r2, [pc, #252]	@ (8005918 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800581c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005820:	6593      	str	r3, [r2, #88]	@ 0x58
 8005822:	4b3d      	ldr	r3, [pc, #244]	@ (8005918 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005824:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005826:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800582a:	60bb      	str	r3, [r7, #8]
 800582c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800582e:	2301      	movs	r3, #1
 8005830:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005832:	4b3a      	ldr	r3, [pc, #232]	@ (800591c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	4a39      	ldr	r2, [pc, #228]	@ (800591c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005838:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800583c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800583e:	f7fc fa5b 	bl	8001cf8 <HAL_GetTick>
 8005842:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005844:	e009      	b.n	800585a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005846:	f7fc fa57 	bl	8001cf8 <HAL_GetTick>
 800584a:	4602      	mov	r2, r0
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	1ad3      	subs	r3, r2, r3
 8005850:	2b02      	cmp	r3, #2
 8005852:	d902      	bls.n	800585a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005854:	2303      	movs	r3, #3
 8005856:	74fb      	strb	r3, [r7, #19]
        break;
 8005858:	e005      	b.n	8005866 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800585a:	4b30      	ldr	r3, [pc, #192]	@ (800591c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005862:	2b00      	cmp	r3, #0
 8005864:	d0ef      	beq.n	8005846 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8005866:	7cfb      	ldrb	r3, [r7, #19]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d159      	bne.n	8005920 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800586c:	4b2a      	ldr	r3, [pc, #168]	@ (8005918 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800586e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005872:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005876:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005878:	697b      	ldr	r3, [r7, #20]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d01e      	beq.n	80058bc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005882:	697a      	ldr	r2, [r7, #20]
 8005884:	429a      	cmp	r2, r3
 8005886:	d019      	beq.n	80058bc <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005888:	4b23      	ldr	r3, [pc, #140]	@ (8005918 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800588a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800588e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005892:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005894:	4b20      	ldr	r3, [pc, #128]	@ (8005918 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005896:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800589a:	4a1f      	ldr	r2, [pc, #124]	@ (8005918 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800589c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80058a0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80058a4:	4b1c      	ldr	r3, [pc, #112]	@ (8005918 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80058a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80058aa:	4a1b      	ldr	r2, [pc, #108]	@ (8005918 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80058ac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80058b0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80058b4:	4a18      	ldr	r2, [pc, #96]	@ (8005918 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80058b6:	697b      	ldr	r3, [r7, #20]
 80058b8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80058bc:	697b      	ldr	r3, [r7, #20]
 80058be:	f003 0301 	and.w	r3, r3, #1
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d016      	beq.n	80058f4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058c6:	f7fc fa17 	bl	8001cf8 <HAL_GetTick>
 80058ca:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80058cc:	e00b      	b.n	80058e6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058ce:	f7fc fa13 	bl	8001cf8 <HAL_GetTick>
 80058d2:	4602      	mov	r2, r0
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	1ad3      	subs	r3, r2, r3
 80058d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80058dc:	4293      	cmp	r3, r2
 80058de:	d902      	bls.n	80058e6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80058e0:	2303      	movs	r3, #3
 80058e2:	74fb      	strb	r3, [r7, #19]
            break;
 80058e4:	e006      	b.n	80058f4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80058e6:	4b0c      	ldr	r3, [pc, #48]	@ (8005918 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80058e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80058ec:	f003 0302 	and.w	r3, r3, #2
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d0ec      	beq.n	80058ce <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80058f4:	7cfb      	ldrb	r3, [r7, #19]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d10b      	bne.n	8005912 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80058fa:	4b07      	ldr	r3, [pc, #28]	@ (8005918 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80058fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005900:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005908:	4903      	ldr	r1, [pc, #12]	@ (8005918 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800590a:	4313      	orrs	r3, r2
 800590c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005910:	e008      	b.n	8005924 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005912:	7cfb      	ldrb	r3, [r7, #19]
 8005914:	74bb      	strb	r3, [r7, #18]
 8005916:	e005      	b.n	8005924 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005918:	40021000 	.word	0x40021000
 800591c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005920:	7cfb      	ldrb	r3, [r7, #19]
 8005922:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005924:	7c7b      	ldrb	r3, [r7, #17]
 8005926:	2b01      	cmp	r3, #1
 8005928:	d105      	bne.n	8005936 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800592a:	4ba6      	ldr	r3, [pc, #664]	@ (8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800592c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800592e:	4aa5      	ldr	r2, [pc, #660]	@ (8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005930:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005934:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f003 0301 	and.w	r3, r3, #1
 800593e:	2b00      	cmp	r3, #0
 8005940:	d00a      	beq.n	8005958 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005942:	4ba0      	ldr	r3, [pc, #640]	@ (8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005944:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005948:	f023 0203 	bic.w	r2, r3, #3
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	685b      	ldr	r3, [r3, #4]
 8005950:	499c      	ldr	r1, [pc, #624]	@ (8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005952:	4313      	orrs	r3, r2
 8005954:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f003 0302 	and.w	r3, r3, #2
 8005960:	2b00      	cmp	r3, #0
 8005962:	d00a      	beq.n	800597a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005964:	4b97      	ldr	r3, [pc, #604]	@ (8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005966:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800596a:	f023 020c 	bic.w	r2, r3, #12
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	689b      	ldr	r3, [r3, #8]
 8005972:	4994      	ldr	r1, [pc, #592]	@ (8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005974:	4313      	orrs	r3, r2
 8005976:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f003 0304 	and.w	r3, r3, #4
 8005982:	2b00      	cmp	r3, #0
 8005984:	d00a      	beq.n	800599c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005986:	4b8f      	ldr	r3, [pc, #572]	@ (8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005988:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800598c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	68db      	ldr	r3, [r3, #12]
 8005994:	498b      	ldr	r1, [pc, #556]	@ (8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005996:	4313      	orrs	r3, r2
 8005998:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f003 0308 	and.w	r3, r3, #8
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d00a      	beq.n	80059be <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80059a8:	4b86      	ldr	r3, [pc, #536]	@ (8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80059aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059ae:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	691b      	ldr	r3, [r3, #16]
 80059b6:	4983      	ldr	r1, [pc, #524]	@ (8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80059b8:	4313      	orrs	r3, r2
 80059ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f003 0320 	and.w	r3, r3, #32
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d00a      	beq.n	80059e0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80059ca:	4b7e      	ldr	r3, [pc, #504]	@ (8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80059cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059d0:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	695b      	ldr	r3, [r3, #20]
 80059d8:	497a      	ldr	r1, [pc, #488]	@ (8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80059da:	4313      	orrs	r3, r2
 80059dc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d00a      	beq.n	8005a02 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80059ec:	4b75      	ldr	r3, [pc, #468]	@ (8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80059ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059f2:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	699b      	ldr	r3, [r3, #24]
 80059fa:	4972      	ldr	r1, [pc, #456]	@ (8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80059fc:	4313      	orrs	r3, r2
 80059fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d00a      	beq.n	8005a24 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005a0e:	4b6d      	ldr	r3, [pc, #436]	@ (8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a14:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	69db      	ldr	r3, [r3, #28]
 8005a1c:	4969      	ldr	r1, [pc, #420]	@ (8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a1e:	4313      	orrs	r3, r2
 8005a20:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d00a      	beq.n	8005a46 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005a30:	4b64      	ldr	r3, [pc, #400]	@ (8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a36:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6a1b      	ldr	r3, [r3, #32]
 8005a3e:	4961      	ldr	r1, [pc, #388]	@ (8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a40:	4313      	orrs	r3, r2
 8005a42:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d00a      	beq.n	8005a68 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005a52:	4b5c      	ldr	r3, [pc, #368]	@ (8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a58:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a60:	4958      	ldr	r1, [pc, #352]	@ (8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a62:	4313      	orrs	r3, r2
 8005a64:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d015      	beq.n	8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005a74:	4b53      	ldr	r3, [pc, #332]	@ (8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a7a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a82:	4950      	ldr	r1, [pc, #320]	@ (8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a84:	4313      	orrs	r3, r2
 8005a86:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a8e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005a92:	d105      	bne.n	8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005a94:	4b4b      	ldr	r3, [pc, #300]	@ (8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a96:	68db      	ldr	r3, [r3, #12]
 8005a98:	4a4a      	ldr	r2, [pc, #296]	@ (8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a9a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005a9e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d015      	beq.n	8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005aac:	4b45      	ldr	r3, [pc, #276]	@ (8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005aae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ab2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005aba:	4942      	ldr	r1, [pc, #264]	@ (8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005abc:	4313      	orrs	r3, r2
 8005abe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ac6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005aca:	d105      	bne.n	8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005acc:	4b3d      	ldr	r3, [pc, #244]	@ (8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ace:	68db      	ldr	r3, [r3, #12]
 8005ad0:	4a3c      	ldr	r2, [pc, #240]	@ (8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ad2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005ad6:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d015      	beq.n	8005b10 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005ae4:	4b37      	ldr	r3, [pc, #220]	@ (8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ae6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005aea:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005af2:	4934      	ldr	r1, [pc, #208]	@ (8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005af4:	4313      	orrs	r3, r2
 8005af6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005afe:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005b02:	d105      	bne.n	8005b10 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005b04:	4b2f      	ldr	r3, [pc, #188]	@ (8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b06:	68db      	ldr	r3, [r3, #12]
 8005b08:	4a2e      	ldr	r2, [pc, #184]	@ (8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b0a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005b0e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d015      	beq.n	8005b48 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005b1c:	4b29      	ldr	r3, [pc, #164]	@ (8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b22:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b2a:	4926      	ldr	r1, [pc, #152]	@ (8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b2c:	4313      	orrs	r3, r2
 8005b2e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b36:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005b3a:	d105      	bne.n	8005b48 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005b3c:	4b21      	ldr	r3, [pc, #132]	@ (8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b3e:	68db      	ldr	r3, [r3, #12]
 8005b40:	4a20      	ldr	r2, [pc, #128]	@ (8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b42:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005b46:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d015      	beq.n	8005b80 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005b54:	4b1b      	ldr	r3, [pc, #108]	@ (8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b5a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b62:	4918      	ldr	r1, [pc, #96]	@ (8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b64:	4313      	orrs	r3, r2
 8005b66:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b6e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005b72:	d105      	bne.n	8005b80 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005b74:	4b13      	ldr	r3, [pc, #76]	@ (8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b76:	68db      	ldr	r3, [r3, #12]
 8005b78:	4a12      	ldr	r2, [pc, #72]	@ (8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b7a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005b7e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d015      	beq.n	8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005b8c:	4b0d      	ldr	r3, [pc, #52]	@ (8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b92:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b9a:	490a      	ldr	r1, [pc, #40]	@ (8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b9c:	4313      	orrs	r3, r2
 8005b9e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ba6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005baa:	d105      	bne.n	8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005bac:	4b05      	ldr	r3, [pc, #20]	@ (8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005bae:	68db      	ldr	r3, [r3, #12]
 8005bb0:	4a04      	ldr	r2, [pc, #16]	@ (8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005bb2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005bb6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005bb8:	7cbb      	ldrb	r3, [r7, #18]
}
 8005bba:	4618      	mov	r0, r3
 8005bbc:	3718      	adds	r7, #24
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	bd80      	pop	{r7, pc}
 8005bc2:	bf00      	nop
 8005bc4:	40021000 	.word	0x40021000

08005bc8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b082      	sub	sp, #8
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d101      	bne.n	8005bda <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005bd6:	2301      	movs	r3, #1
 8005bd8:	e049      	b.n	8005c6e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005be0:	b2db      	uxtb	r3, r3
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d106      	bne.n	8005bf4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	2200      	movs	r2, #0
 8005bea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005bee:	6878      	ldr	r0, [r7, #4]
 8005bf0:	f7fb fedc 	bl	80019ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2202      	movs	r2, #2
 8005bf8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681a      	ldr	r2, [r3, #0]
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	3304      	adds	r3, #4
 8005c04:	4619      	mov	r1, r3
 8005c06:	4610      	mov	r0, r2
 8005c08:	f000 fb4a 	bl	80062a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2201      	movs	r2, #1
 8005c10:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2201      	movs	r2, #1
 8005c18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2201      	movs	r2, #1
 8005c20:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2201      	movs	r2, #1
 8005c28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2201      	movs	r2, #1
 8005c30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2201      	movs	r2, #1
 8005c38:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2201      	movs	r2, #1
 8005c40:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2201      	movs	r2, #1
 8005c48:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2201      	movs	r2, #1
 8005c50:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2201      	movs	r2, #1
 8005c58:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2201      	movs	r2, #1
 8005c60:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2201      	movs	r2, #1
 8005c68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005c6c:	2300      	movs	r3, #0
}
 8005c6e:	4618      	mov	r0, r3
 8005c70:	3708      	adds	r7, #8
 8005c72:	46bd      	mov	sp, r7
 8005c74:	bd80      	pop	{r7, pc}

08005c76 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005c76:	b580      	push	{r7, lr}
 8005c78:	b082      	sub	sp, #8
 8005c7a:	af00      	add	r7, sp, #0
 8005c7c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d101      	bne.n	8005c88 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005c84:	2301      	movs	r3, #1
 8005c86:	e049      	b.n	8005d1c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005c8e:	b2db      	uxtb	r3, r3
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d106      	bne.n	8005ca2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2200      	movs	r2, #0
 8005c98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005c9c:	6878      	ldr	r0, [r7, #4]
 8005c9e:	f000 f841 	bl	8005d24 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	2202      	movs	r2, #2
 8005ca6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681a      	ldr	r2, [r3, #0]
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	3304      	adds	r3, #4
 8005cb2:	4619      	mov	r1, r3
 8005cb4:	4610      	mov	r0, r2
 8005cb6:	f000 faf3 	bl	80062a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2201      	movs	r2, #1
 8005cbe:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	2201      	movs	r2, #1
 8005cc6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2201      	movs	r2, #1
 8005cce:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2201      	movs	r2, #1
 8005cd6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2201      	movs	r2, #1
 8005cde:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2201      	movs	r2, #1
 8005ce6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2201      	movs	r2, #1
 8005cee:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	2201      	movs	r2, #1
 8005cf6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2201      	movs	r2, #1
 8005cfe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	2201      	movs	r2, #1
 8005d06:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	2201      	movs	r2, #1
 8005d0e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	2201      	movs	r2, #1
 8005d16:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005d1a:	2300      	movs	r3, #0
}
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	3708      	adds	r7, #8
 8005d20:	46bd      	mov	sp, r7
 8005d22:	bd80      	pop	{r7, pc}

08005d24 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005d24:	b480      	push	{r7}
 8005d26:	b083      	sub	sp, #12
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005d2c:	bf00      	nop
 8005d2e:	370c      	adds	r7, #12
 8005d30:	46bd      	mov	sp, r7
 8005d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d36:	4770      	bx	lr

08005d38 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b086      	sub	sp, #24
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
 8005d40:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d101      	bne.n	8005d4c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005d48:	2301      	movs	r3, #1
 8005d4a:	e097      	b.n	8005e7c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005d52:	b2db      	uxtb	r3, r3
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d106      	bne.n	8005d66 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005d60:	6878      	ldr	r0, [r7, #4]
 8005d62:	f7fb fd91 	bl	8001888 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	2202      	movs	r2, #2
 8005d6a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	689b      	ldr	r3, [r3, #8]
 8005d74:	687a      	ldr	r2, [r7, #4]
 8005d76:	6812      	ldr	r2, [r2, #0]
 8005d78:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8005d7c:	f023 0307 	bic.w	r3, r3, #7
 8005d80:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681a      	ldr	r2, [r3, #0]
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	3304      	adds	r3, #4
 8005d8a:	4619      	mov	r1, r3
 8005d8c:	4610      	mov	r0, r2
 8005d8e:	f000 fa87 	bl	80062a0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	689b      	ldr	r3, [r3, #8]
 8005d98:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	699b      	ldr	r3, [r3, #24]
 8005da0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	6a1b      	ldr	r3, [r3, #32]
 8005da8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	697a      	ldr	r2, [r7, #20]
 8005db0:	4313      	orrs	r3, r2
 8005db2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005db4:	693b      	ldr	r3, [r7, #16]
 8005db6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005dba:	f023 0303 	bic.w	r3, r3, #3
 8005dbe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	689a      	ldr	r2, [r3, #8]
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	699b      	ldr	r3, [r3, #24]
 8005dc8:	021b      	lsls	r3, r3, #8
 8005dca:	4313      	orrs	r3, r2
 8005dcc:	693a      	ldr	r2, [r7, #16]
 8005dce:	4313      	orrs	r3, r2
 8005dd0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005dd2:	693b      	ldr	r3, [r7, #16]
 8005dd4:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8005dd8:	f023 030c 	bic.w	r3, r3, #12
 8005ddc:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005dde:	693b      	ldr	r3, [r7, #16]
 8005de0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005de4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005de8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	68da      	ldr	r2, [r3, #12]
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	69db      	ldr	r3, [r3, #28]
 8005df2:	021b      	lsls	r3, r3, #8
 8005df4:	4313      	orrs	r3, r2
 8005df6:	693a      	ldr	r2, [r7, #16]
 8005df8:	4313      	orrs	r3, r2
 8005dfa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	691b      	ldr	r3, [r3, #16]
 8005e00:	011a      	lsls	r2, r3, #4
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	6a1b      	ldr	r3, [r3, #32]
 8005e06:	031b      	lsls	r3, r3, #12
 8005e08:	4313      	orrs	r3, r2
 8005e0a:	693a      	ldr	r2, [r7, #16]
 8005e0c:	4313      	orrs	r3, r2
 8005e0e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8005e16:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8005e1e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	685a      	ldr	r2, [r3, #4]
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	695b      	ldr	r3, [r3, #20]
 8005e28:	011b      	lsls	r3, r3, #4
 8005e2a:	4313      	orrs	r3, r2
 8005e2c:	68fa      	ldr	r2, [r7, #12]
 8005e2e:	4313      	orrs	r3, r2
 8005e30:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	697a      	ldr	r2, [r7, #20]
 8005e38:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	693a      	ldr	r2, [r7, #16]
 8005e40:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	68fa      	ldr	r2, [r7, #12]
 8005e48:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	2201      	movs	r2, #1
 8005e4e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	2201      	movs	r2, #1
 8005e56:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	2201      	movs	r2, #1
 8005e5e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	2201      	movs	r2, #1
 8005e66:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	2201      	movs	r2, #1
 8005e6e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	2201      	movs	r2, #1
 8005e76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005e7a:	2300      	movs	r3, #0
}
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	3718      	adds	r7, #24
 8005e80:	46bd      	mov	sp, r7
 8005e82:	bd80      	pop	{r7, pc}

08005e84 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005e84:	b580      	push	{r7, lr}
 8005e86:	b086      	sub	sp, #24
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	60f8      	str	r0, [r7, #12]
 8005e8c:	60b9      	str	r1, [r7, #8]
 8005e8e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005e90:	2300      	movs	r3, #0
 8005e92:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005e9a:	2b01      	cmp	r3, #1
 8005e9c:	d101      	bne.n	8005ea2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005e9e:	2302      	movs	r3, #2
 8005ea0:	e0ff      	b.n	80060a2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	2201      	movs	r2, #1
 8005ea6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2b14      	cmp	r3, #20
 8005eae:	f200 80f0 	bhi.w	8006092 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005eb2:	a201      	add	r2, pc, #4	@ (adr r2, 8005eb8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005eb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005eb8:	08005f0d 	.word	0x08005f0d
 8005ebc:	08006093 	.word	0x08006093
 8005ec0:	08006093 	.word	0x08006093
 8005ec4:	08006093 	.word	0x08006093
 8005ec8:	08005f4d 	.word	0x08005f4d
 8005ecc:	08006093 	.word	0x08006093
 8005ed0:	08006093 	.word	0x08006093
 8005ed4:	08006093 	.word	0x08006093
 8005ed8:	08005f8f 	.word	0x08005f8f
 8005edc:	08006093 	.word	0x08006093
 8005ee0:	08006093 	.word	0x08006093
 8005ee4:	08006093 	.word	0x08006093
 8005ee8:	08005fcf 	.word	0x08005fcf
 8005eec:	08006093 	.word	0x08006093
 8005ef0:	08006093 	.word	0x08006093
 8005ef4:	08006093 	.word	0x08006093
 8005ef8:	08006011 	.word	0x08006011
 8005efc:	08006093 	.word	0x08006093
 8005f00:	08006093 	.word	0x08006093
 8005f04:	08006093 	.word	0x08006093
 8005f08:	08006051 	.word	0x08006051
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	68b9      	ldr	r1, [r7, #8]
 8005f12:	4618      	mov	r0, r3
 8005f14:	f000 fa60 	bl	80063d8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	699a      	ldr	r2, [r3, #24]
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f042 0208 	orr.w	r2, r2, #8
 8005f26:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	699a      	ldr	r2, [r3, #24]
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f022 0204 	bic.w	r2, r2, #4
 8005f36:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	6999      	ldr	r1, [r3, #24]
 8005f3e:	68bb      	ldr	r3, [r7, #8]
 8005f40:	691a      	ldr	r2, [r3, #16]
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	430a      	orrs	r2, r1
 8005f48:	619a      	str	r2, [r3, #24]
      break;
 8005f4a:	e0a5      	b.n	8006098 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	68b9      	ldr	r1, [r7, #8]
 8005f52:	4618      	mov	r0, r3
 8005f54:	f000 fad0 	bl	80064f8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	699a      	ldr	r2, [r3, #24]
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005f66:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	699a      	ldr	r2, [r3, #24]
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005f76:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	6999      	ldr	r1, [r3, #24]
 8005f7e:	68bb      	ldr	r3, [r7, #8]
 8005f80:	691b      	ldr	r3, [r3, #16]
 8005f82:	021a      	lsls	r2, r3, #8
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	430a      	orrs	r2, r1
 8005f8a:	619a      	str	r2, [r3, #24]
      break;
 8005f8c:	e084      	b.n	8006098 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	68b9      	ldr	r1, [r7, #8]
 8005f94:	4618      	mov	r0, r3
 8005f96:	f000 fb39 	bl	800660c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	69da      	ldr	r2, [r3, #28]
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f042 0208 	orr.w	r2, r2, #8
 8005fa8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	69da      	ldr	r2, [r3, #28]
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f022 0204 	bic.w	r2, r2, #4
 8005fb8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	69d9      	ldr	r1, [r3, #28]
 8005fc0:	68bb      	ldr	r3, [r7, #8]
 8005fc2:	691a      	ldr	r2, [r3, #16]
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	430a      	orrs	r2, r1
 8005fca:	61da      	str	r2, [r3, #28]
      break;
 8005fcc:	e064      	b.n	8006098 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	68b9      	ldr	r1, [r7, #8]
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	f000 fba1 	bl	800671c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	69da      	ldr	r2, [r3, #28]
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005fe8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	69da      	ldr	r2, [r3, #28]
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005ff8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	69d9      	ldr	r1, [r3, #28]
 8006000:	68bb      	ldr	r3, [r7, #8]
 8006002:	691b      	ldr	r3, [r3, #16]
 8006004:	021a      	lsls	r2, r3, #8
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	430a      	orrs	r2, r1
 800600c:	61da      	str	r2, [r3, #28]
      break;
 800600e:	e043      	b.n	8006098 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	68b9      	ldr	r1, [r7, #8]
 8006016:	4618      	mov	r0, r3
 8006018:	f000 fc0a 	bl	8006830 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f042 0208 	orr.w	r2, r2, #8
 800602a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f022 0204 	bic.w	r2, r2, #4
 800603a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8006042:	68bb      	ldr	r3, [r7, #8]
 8006044:	691a      	ldr	r2, [r3, #16]
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	430a      	orrs	r2, r1
 800604c:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800604e:	e023      	b.n	8006098 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	68b9      	ldr	r1, [r7, #8]
 8006056:	4618      	mov	r0, r3
 8006058:	f000 fc4e 	bl	80068f8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800606a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800607a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8006082:	68bb      	ldr	r3, [r7, #8]
 8006084:	691b      	ldr	r3, [r3, #16]
 8006086:	021a      	lsls	r2, r3, #8
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	430a      	orrs	r2, r1
 800608e:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8006090:	e002      	b.n	8006098 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006092:	2301      	movs	r3, #1
 8006094:	75fb      	strb	r3, [r7, #23]
      break;
 8006096:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	2200      	movs	r2, #0
 800609c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80060a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80060a2:	4618      	mov	r0, r3
 80060a4:	3718      	adds	r7, #24
 80060a6:	46bd      	mov	sp, r7
 80060a8:	bd80      	pop	{r7, pc}
 80060aa:	bf00      	nop

080060ac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b084      	sub	sp, #16
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
 80060b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80060b6:	2300      	movs	r3, #0
 80060b8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80060c0:	2b01      	cmp	r3, #1
 80060c2:	d101      	bne.n	80060c8 <HAL_TIM_ConfigClockSource+0x1c>
 80060c4:	2302      	movs	r3, #2
 80060c6:	e0de      	b.n	8006286 <HAL_TIM_ConfigClockSource+0x1da>
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2201      	movs	r2, #1
 80060cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2202      	movs	r2, #2
 80060d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	689b      	ldr	r3, [r3, #8]
 80060de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80060e0:	68bb      	ldr	r3, [r7, #8]
 80060e2:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 80060e6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80060ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80060ec:	68bb      	ldr	r3, [r7, #8]
 80060ee:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80060f2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	68ba      	ldr	r2, [r7, #8]
 80060fa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	4a63      	ldr	r2, [pc, #396]	@ (8006290 <HAL_TIM_ConfigClockSource+0x1e4>)
 8006102:	4293      	cmp	r3, r2
 8006104:	f000 80a9 	beq.w	800625a <HAL_TIM_ConfigClockSource+0x1ae>
 8006108:	4a61      	ldr	r2, [pc, #388]	@ (8006290 <HAL_TIM_ConfigClockSource+0x1e4>)
 800610a:	4293      	cmp	r3, r2
 800610c:	f200 80ae 	bhi.w	800626c <HAL_TIM_ConfigClockSource+0x1c0>
 8006110:	4a60      	ldr	r2, [pc, #384]	@ (8006294 <HAL_TIM_ConfigClockSource+0x1e8>)
 8006112:	4293      	cmp	r3, r2
 8006114:	f000 80a1 	beq.w	800625a <HAL_TIM_ConfigClockSource+0x1ae>
 8006118:	4a5e      	ldr	r2, [pc, #376]	@ (8006294 <HAL_TIM_ConfigClockSource+0x1e8>)
 800611a:	4293      	cmp	r3, r2
 800611c:	f200 80a6 	bhi.w	800626c <HAL_TIM_ConfigClockSource+0x1c0>
 8006120:	4a5d      	ldr	r2, [pc, #372]	@ (8006298 <HAL_TIM_ConfigClockSource+0x1ec>)
 8006122:	4293      	cmp	r3, r2
 8006124:	f000 8099 	beq.w	800625a <HAL_TIM_ConfigClockSource+0x1ae>
 8006128:	4a5b      	ldr	r2, [pc, #364]	@ (8006298 <HAL_TIM_ConfigClockSource+0x1ec>)
 800612a:	4293      	cmp	r3, r2
 800612c:	f200 809e 	bhi.w	800626c <HAL_TIM_ConfigClockSource+0x1c0>
 8006130:	4a5a      	ldr	r2, [pc, #360]	@ (800629c <HAL_TIM_ConfigClockSource+0x1f0>)
 8006132:	4293      	cmp	r3, r2
 8006134:	f000 8091 	beq.w	800625a <HAL_TIM_ConfigClockSource+0x1ae>
 8006138:	4a58      	ldr	r2, [pc, #352]	@ (800629c <HAL_TIM_ConfigClockSource+0x1f0>)
 800613a:	4293      	cmp	r3, r2
 800613c:	f200 8096 	bhi.w	800626c <HAL_TIM_ConfigClockSource+0x1c0>
 8006140:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8006144:	f000 8089 	beq.w	800625a <HAL_TIM_ConfigClockSource+0x1ae>
 8006148:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800614c:	f200 808e 	bhi.w	800626c <HAL_TIM_ConfigClockSource+0x1c0>
 8006150:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006154:	d03e      	beq.n	80061d4 <HAL_TIM_ConfigClockSource+0x128>
 8006156:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800615a:	f200 8087 	bhi.w	800626c <HAL_TIM_ConfigClockSource+0x1c0>
 800615e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006162:	f000 8086 	beq.w	8006272 <HAL_TIM_ConfigClockSource+0x1c6>
 8006166:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800616a:	d87f      	bhi.n	800626c <HAL_TIM_ConfigClockSource+0x1c0>
 800616c:	2b70      	cmp	r3, #112	@ 0x70
 800616e:	d01a      	beq.n	80061a6 <HAL_TIM_ConfigClockSource+0xfa>
 8006170:	2b70      	cmp	r3, #112	@ 0x70
 8006172:	d87b      	bhi.n	800626c <HAL_TIM_ConfigClockSource+0x1c0>
 8006174:	2b60      	cmp	r3, #96	@ 0x60
 8006176:	d050      	beq.n	800621a <HAL_TIM_ConfigClockSource+0x16e>
 8006178:	2b60      	cmp	r3, #96	@ 0x60
 800617a:	d877      	bhi.n	800626c <HAL_TIM_ConfigClockSource+0x1c0>
 800617c:	2b50      	cmp	r3, #80	@ 0x50
 800617e:	d03c      	beq.n	80061fa <HAL_TIM_ConfigClockSource+0x14e>
 8006180:	2b50      	cmp	r3, #80	@ 0x50
 8006182:	d873      	bhi.n	800626c <HAL_TIM_ConfigClockSource+0x1c0>
 8006184:	2b40      	cmp	r3, #64	@ 0x40
 8006186:	d058      	beq.n	800623a <HAL_TIM_ConfigClockSource+0x18e>
 8006188:	2b40      	cmp	r3, #64	@ 0x40
 800618a:	d86f      	bhi.n	800626c <HAL_TIM_ConfigClockSource+0x1c0>
 800618c:	2b30      	cmp	r3, #48	@ 0x30
 800618e:	d064      	beq.n	800625a <HAL_TIM_ConfigClockSource+0x1ae>
 8006190:	2b30      	cmp	r3, #48	@ 0x30
 8006192:	d86b      	bhi.n	800626c <HAL_TIM_ConfigClockSource+0x1c0>
 8006194:	2b20      	cmp	r3, #32
 8006196:	d060      	beq.n	800625a <HAL_TIM_ConfigClockSource+0x1ae>
 8006198:	2b20      	cmp	r3, #32
 800619a:	d867      	bhi.n	800626c <HAL_TIM_ConfigClockSource+0x1c0>
 800619c:	2b00      	cmp	r3, #0
 800619e:	d05c      	beq.n	800625a <HAL_TIM_ConfigClockSource+0x1ae>
 80061a0:	2b10      	cmp	r3, #16
 80061a2:	d05a      	beq.n	800625a <HAL_TIM_ConfigClockSource+0x1ae>
 80061a4:	e062      	b.n	800626c <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80061ae:	683b      	ldr	r3, [r7, #0]
 80061b0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80061b6:	f000 fce9 	bl	8006b8c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	689b      	ldr	r3, [r3, #8]
 80061c0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80061c2:	68bb      	ldr	r3, [r7, #8]
 80061c4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80061c8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	68ba      	ldr	r2, [r7, #8]
 80061d0:	609a      	str	r2, [r3, #8]
      break;
 80061d2:	e04f      	b.n	8006274 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80061e4:	f000 fcd2 	bl	8006b8c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	689a      	ldr	r2, [r3, #8]
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80061f6:	609a      	str	r2, [r3, #8]
      break;
 80061f8:	e03c      	b.n	8006274 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006202:	683b      	ldr	r3, [r7, #0]
 8006204:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006206:	461a      	mov	r2, r3
 8006208:	f000 fc44 	bl	8006a94 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	2150      	movs	r1, #80	@ 0x50
 8006212:	4618      	mov	r0, r3
 8006214:	f000 fc9d 	bl	8006b52 <TIM_ITRx_SetConfig>
      break;
 8006218:	e02c      	b.n	8006274 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006226:	461a      	mov	r2, r3
 8006228:	f000 fc63 	bl	8006af2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	2160      	movs	r1, #96	@ 0x60
 8006232:	4618      	mov	r0, r3
 8006234:	f000 fc8d 	bl	8006b52 <TIM_ITRx_SetConfig>
      break;
 8006238:	e01c      	b.n	8006274 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006242:	683b      	ldr	r3, [r7, #0]
 8006244:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006246:	461a      	mov	r2, r3
 8006248:	f000 fc24 	bl	8006a94 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	2140      	movs	r1, #64	@ 0x40
 8006252:	4618      	mov	r0, r3
 8006254:	f000 fc7d 	bl	8006b52 <TIM_ITRx_SetConfig>
      break;
 8006258:	e00c      	b.n	8006274 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681a      	ldr	r2, [r3, #0]
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	4619      	mov	r1, r3
 8006264:	4610      	mov	r0, r2
 8006266:	f000 fc74 	bl	8006b52 <TIM_ITRx_SetConfig>
      break;
 800626a:	e003      	b.n	8006274 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 800626c:	2301      	movs	r3, #1
 800626e:	73fb      	strb	r3, [r7, #15]
      break;
 8006270:	e000      	b.n	8006274 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8006272:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2201      	movs	r2, #1
 8006278:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2200      	movs	r2, #0
 8006280:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006284:	7bfb      	ldrb	r3, [r7, #15]
}
 8006286:	4618      	mov	r0, r3
 8006288:	3710      	adds	r7, #16
 800628a:	46bd      	mov	sp, r7
 800628c:	bd80      	pop	{r7, pc}
 800628e:	bf00      	nop
 8006290:	00100070 	.word	0x00100070
 8006294:	00100040 	.word	0x00100040
 8006298:	00100030 	.word	0x00100030
 800629c:	00100020 	.word	0x00100020

080062a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80062a0:	b480      	push	{r7}
 80062a2:	b085      	sub	sp, #20
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
 80062a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	4a42      	ldr	r2, [pc, #264]	@ (80063bc <TIM_Base_SetConfig+0x11c>)
 80062b4:	4293      	cmp	r3, r2
 80062b6:	d00f      	beq.n	80062d8 <TIM_Base_SetConfig+0x38>
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80062be:	d00b      	beq.n	80062d8 <TIM_Base_SetConfig+0x38>
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	4a3f      	ldr	r2, [pc, #252]	@ (80063c0 <TIM_Base_SetConfig+0x120>)
 80062c4:	4293      	cmp	r3, r2
 80062c6:	d007      	beq.n	80062d8 <TIM_Base_SetConfig+0x38>
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	4a3e      	ldr	r2, [pc, #248]	@ (80063c4 <TIM_Base_SetConfig+0x124>)
 80062cc:	4293      	cmp	r3, r2
 80062ce:	d003      	beq.n	80062d8 <TIM_Base_SetConfig+0x38>
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	4a3d      	ldr	r2, [pc, #244]	@ (80063c8 <TIM_Base_SetConfig+0x128>)
 80062d4:	4293      	cmp	r3, r2
 80062d6:	d108      	bne.n	80062ea <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80062de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	685b      	ldr	r3, [r3, #4]
 80062e4:	68fa      	ldr	r2, [r7, #12]
 80062e6:	4313      	orrs	r3, r2
 80062e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	4a33      	ldr	r2, [pc, #204]	@ (80063bc <TIM_Base_SetConfig+0x11c>)
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d01b      	beq.n	800632a <TIM_Base_SetConfig+0x8a>
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80062f8:	d017      	beq.n	800632a <TIM_Base_SetConfig+0x8a>
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	4a30      	ldr	r2, [pc, #192]	@ (80063c0 <TIM_Base_SetConfig+0x120>)
 80062fe:	4293      	cmp	r3, r2
 8006300:	d013      	beq.n	800632a <TIM_Base_SetConfig+0x8a>
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	4a2f      	ldr	r2, [pc, #188]	@ (80063c4 <TIM_Base_SetConfig+0x124>)
 8006306:	4293      	cmp	r3, r2
 8006308:	d00f      	beq.n	800632a <TIM_Base_SetConfig+0x8a>
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	4a2e      	ldr	r2, [pc, #184]	@ (80063c8 <TIM_Base_SetConfig+0x128>)
 800630e:	4293      	cmp	r3, r2
 8006310:	d00b      	beq.n	800632a <TIM_Base_SetConfig+0x8a>
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	4a2d      	ldr	r2, [pc, #180]	@ (80063cc <TIM_Base_SetConfig+0x12c>)
 8006316:	4293      	cmp	r3, r2
 8006318:	d007      	beq.n	800632a <TIM_Base_SetConfig+0x8a>
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	4a2c      	ldr	r2, [pc, #176]	@ (80063d0 <TIM_Base_SetConfig+0x130>)
 800631e:	4293      	cmp	r3, r2
 8006320:	d003      	beq.n	800632a <TIM_Base_SetConfig+0x8a>
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	4a2b      	ldr	r2, [pc, #172]	@ (80063d4 <TIM_Base_SetConfig+0x134>)
 8006326:	4293      	cmp	r3, r2
 8006328:	d108      	bne.n	800633c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006330:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006332:	683b      	ldr	r3, [r7, #0]
 8006334:	68db      	ldr	r3, [r3, #12]
 8006336:	68fa      	ldr	r2, [r7, #12]
 8006338:	4313      	orrs	r3, r2
 800633a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006342:	683b      	ldr	r3, [r7, #0]
 8006344:	695b      	ldr	r3, [r3, #20]
 8006346:	4313      	orrs	r3, r2
 8006348:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	68fa      	ldr	r2, [r7, #12]
 800634e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	689a      	ldr	r2, [r3, #8]
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	681a      	ldr	r2, [r3, #0]
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	4a16      	ldr	r2, [pc, #88]	@ (80063bc <TIM_Base_SetConfig+0x11c>)
 8006364:	4293      	cmp	r3, r2
 8006366:	d00f      	beq.n	8006388 <TIM_Base_SetConfig+0xe8>
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	4a17      	ldr	r2, [pc, #92]	@ (80063c8 <TIM_Base_SetConfig+0x128>)
 800636c:	4293      	cmp	r3, r2
 800636e:	d00b      	beq.n	8006388 <TIM_Base_SetConfig+0xe8>
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	4a16      	ldr	r2, [pc, #88]	@ (80063cc <TIM_Base_SetConfig+0x12c>)
 8006374:	4293      	cmp	r3, r2
 8006376:	d007      	beq.n	8006388 <TIM_Base_SetConfig+0xe8>
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	4a15      	ldr	r2, [pc, #84]	@ (80063d0 <TIM_Base_SetConfig+0x130>)
 800637c:	4293      	cmp	r3, r2
 800637e:	d003      	beq.n	8006388 <TIM_Base_SetConfig+0xe8>
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	4a14      	ldr	r2, [pc, #80]	@ (80063d4 <TIM_Base_SetConfig+0x134>)
 8006384:	4293      	cmp	r3, r2
 8006386:	d103      	bne.n	8006390 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	691a      	ldr	r2, [r3, #16]
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2201      	movs	r2, #1
 8006394:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	691b      	ldr	r3, [r3, #16]
 800639a:	f003 0301 	and.w	r3, r3, #1
 800639e:	2b01      	cmp	r3, #1
 80063a0:	d105      	bne.n	80063ae <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	691b      	ldr	r3, [r3, #16]
 80063a6:	f023 0201 	bic.w	r2, r3, #1
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	611a      	str	r2, [r3, #16]
  }
}
 80063ae:	bf00      	nop
 80063b0:	3714      	adds	r7, #20
 80063b2:	46bd      	mov	sp, r7
 80063b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b8:	4770      	bx	lr
 80063ba:	bf00      	nop
 80063bc:	40012c00 	.word	0x40012c00
 80063c0:	40000400 	.word	0x40000400
 80063c4:	40000800 	.word	0x40000800
 80063c8:	40013400 	.word	0x40013400
 80063cc:	40014000 	.word	0x40014000
 80063d0:	40014400 	.word	0x40014400
 80063d4:	40014800 	.word	0x40014800

080063d8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80063d8:	b480      	push	{r7}
 80063da:	b087      	sub	sp, #28
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]
 80063e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6a1b      	ldr	r3, [r3, #32]
 80063e6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	6a1b      	ldr	r3, [r3, #32]
 80063ec:	f023 0201 	bic.w	r2, r3, #1
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	685b      	ldr	r3, [r3, #4]
 80063f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	699b      	ldr	r3, [r3, #24]
 80063fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006406:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800640a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	f023 0303 	bic.w	r3, r3, #3
 8006412:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006414:	683b      	ldr	r3, [r7, #0]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	68fa      	ldr	r2, [r7, #12]
 800641a:	4313      	orrs	r3, r2
 800641c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800641e:	697b      	ldr	r3, [r7, #20]
 8006420:	f023 0302 	bic.w	r3, r3, #2
 8006424:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	689b      	ldr	r3, [r3, #8]
 800642a:	697a      	ldr	r2, [r7, #20]
 800642c:	4313      	orrs	r3, r2
 800642e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	4a2c      	ldr	r2, [pc, #176]	@ (80064e4 <TIM_OC1_SetConfig+0x10c>)
 8006434:	4293      	cmp	r3, r2
 8006436:	d00f      	beq.n	8006458 <TIM_OC1_SetConfig+0x80>
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	4a2b      	ldr	r2, [pc, #172]	@ (80064e8 <TIM_OC1_SetConfig+0x110>)
 800643c:	4293      	cmp	r3, r2
 800643e:	d00b      	beq.n	8006458 <TIM_OC1_SetConfig+0x80>
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	4a2a      	ldr	r2, [pc, #168]	@ (80064ec <TIM_OC1_SetConfig+0x114>)
 8006444:	4293      	cmp	r3, r2
 8006446:	d007      	beq.n	8006458 <TIM_OC1_SetConfig+0x80>
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	4a29      	ldr	r2, [pc, #164]	@ (80064f0 <TIM_OC1_SetConfig+0x118>)
 800644c:	4293      	cmp	r3, r2
 800644e:	d003      	beq.n	8006458 <TIM_OC1_SetConfig+0x80>
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	4a28      	ldr	r2, [pc, #160]	@ (80064f4 <TIM_OC1_SetConfig+0x11c>)
 8006454:	4293      	cmp	r3, r2
 8006456:	d10c      	bne.n	8006472 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006458:	697b      	ldr	r3, [r7, #20]
 800645a:	f023 0308 	bic.w	r3, r3, #8
 800645e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	68db      	ldr	r3, [r3, #12]
 8006464:	697a      	ldr	r2, [r7, #20]
 8006466:	4313      	orrs	r3, r2
 8006468:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800646a:	697b      	ldr	r3, [r7, #20]
 800646c:	f023 0304 	bic.w	r3, r3, #4
 8006470:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	4a1b      	ldr	r2, [pc, #108]	@ (80064e4 <TIM_OC1_SetConfig+0x10c>)
 8006476:	4293      	cmp	r3, r2
 8006478:	d00f      	beq.n	800649a <TIM_OC1_SetConfig+0xc2>
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	4a1a      	ldr	r2, [pc, #104]	@ (80064e8 <TIM_OC1_SetConfig+0x110>)
 800647e:	4293      	cmp	r3, r2
 8006480:	d00b      	beq.n	800649a <TIM_OC1_SetConfig+0xc2>
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	4a19      	ldr	r2, [pc, #100]	@ (80064ec <TIM_OC1_SetConfig+0x114>)
 8006486:	4293      	cmp	r3, r2
 8006488:	d007      	beq.n	800649a <TIM_OC1_SetConfig+0xc2>
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	4a18      	ldr	r2, [pc, #96]	@ (80064f0 <TIM_OC1_SetConfig+0x118>)
 800648e:	4293      	cmp	r3, r2
 8006490:	d003      	beq.n	800649a <TIM_OC1_SetConfig+0xc2>
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	4a17      	ldr	r2, [pc, #92]	@ (80064f4 <TIM_OC1_SetConfig+0x11c>)
 8006496:	4293      	cmp	r3, r2
 8006498:	d111      	bne.n	80064be <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800649a:	693b      	ldr	r3, [r7, #16]
 800649c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80064a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80064a2:	693b      	ldr	r3, [r7, #16]
 80064a4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80064a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80064aa:	683b      	ldr	r3, [r7, #0]
 80064ac:	695b      	ldr	r3, [r3, #20]
 80064ae:	693a      	ldr	r2, [r7, #16]
 80064b0:	4313      	orrs	r3, r2
 80064b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80064b4:	683b      	ldr	r3, [r7, #0]
 80064b6:	699b      	ldr	r3, [r3, #24]
 80064b8:	693a      	ldr	r2, [r7, #16]
 80064ba:	4313      	orrs	r3, r2
 80064bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	693a      	ldr	r2, [r7, #16]
 80064c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	68fa      	ldr	r2, [r7, #12]
 80064c8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80064ca:	683b      	ldr	r3, [r7, #0]
 80064cc:	685a      	ldr	r2, [r3, #4]
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	697a      	ldr	r2, [r7, #20]
 80064d6:	621a      	str	r2, [r3, #32]
}
 80064d8:	bf00      	nop
 80064da:	371c      	adds	r7, #28
 80064dc:	46bd      	mov	sp, r7
 80064de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e2:	4770      	bx	lr
 80064e4:	40012c00 	.word	0x40012c00
 80064e8:	40013400 	.word	0x40013400
 80064ec:	40014000 	.word	0x40014000
 80064f0:	40014400 	.word	0x40014400
 80064f4:	40014800 	.word	0x40014800

080064f8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80064f8:	b480      	push	{r7}
 80064fa:	b087      	sub	sp, #28
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
 8006500:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	6a1b      	ldr	r3, [r3, #32]
 8006506:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	6a1b      	ldr	r3, [r3, #32]
 800650c:	f023 0210 	bic.w	r2, r3, #16
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	685b      	ldr	r3, [r3, #4]
 8006518:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	699b      	ldr	r3, [r3, #24]
 800651e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006526:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800652a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006532:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	021b      	lsls	r3, r3, #8
 800653a:	68fa      	ldr	r2, [r7, #12]
 800653c:	4313      	orrs	r3, r2
 800653e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006540:	697b      	ldr	r3, [r7, #20]
 8006542:	f023 0320 	bic.w	r3, r3, #32
 8006546:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006548:	683b      	ldr	r3, [r7, #0]
 800654a:	689b      	ldr	r3, [r3, #8]
 800654c:	011b      	lsls	r3, r3, #4
 800654e:	697a      	ldr	r2, [r7, #20]
 8006550:	4313      	orrs	r3, r2
 8006552:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	4a28      	ldr	r2, [pc, #160]	@ (80065f8 <TIM_OC2_SetConfig+0x100>)
 8006558:	4293      	cmp	r3, r2
 800655a:	d003      	beq.n	8006564 <TIM_OC2_SetConfig+0x6c>
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	4a27      	ldr	r2, [pc, #156]	@ (80065fc <TIM_OC2_SetConfig+0x104>)
 8006560:	4293      	cmp	r3, r2
 8006562:	d10d      	bne.n	8006580 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006564:	697b      	ldr	r3, [r7, #20]
 8006566:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800656a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	68db      	ldr	r3, [r3, #12]
 8006570:	011b      	lsls	r3, r3, #4
 8006572:	697a      	ldr	r2, [r7, #20]
 8006574:	4313      	orrs	r3, r2
 8006576:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006578:	697b      	ldr	r3, [r7, #20]
 800657a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800657e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	4a1d      	ldr	r2, [pc, #116]	@ (80065f8 <TIM_OC2_SetConfig+0x100>)
 8006584:	4293      	cmp	r3, r2
 8006586:	d00f      	beq.n	80065a8 <TIM_OC2_SetConfig+0xb0>
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	4a1c      	ldr	r2, [pc, #112]	@ (80065fc <TIM_OC2_SetConfig+0x104>)
 800658c:	4293      	cmp	r3, r2
 800658e:	d00b      	beq.n	80065a8 <TIM_OC2_SetConfig+0xb0>
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	4a1b      	ldr	r2, [pc, #108]	@ (8006600 <TIM_OC2_SetConfig+0x108>)
 8006594:	4293      	cmp	r3, r2
 8006596:	d007      	beq.n	80065a8 <TIM_OC2_SetConfig+0xb0>
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	4a1a      	ldr	r2, [pc, #104]	@ (8006604 <TIM_OC2_SetConfig+0x10c>)
 800659c:	4293      	cmp	r3, r2
 800659e:	d003      	beq.n	80065a8 <TIM_OC2_SetConfig+0xb0>
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	4a19      	ldr	r2, [pc, #100]	@ (8006608 <TIM_OC2_SetConfig+0x110>)
 80065a4:	4293      	cmp	r3, r2
 80065a6:	d113      	bne.n	80065d0 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80065a8:	693b      	ldr	r3, [r7, #16]
 80065aa:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80065ae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80065b0:	693b      	ldr	r3, [r7, #16]
 80065b2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80065b6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80065b8:	683b      	ldr	r3, [r7, #0]
 80065ba:	695b      	ldr	r3, [r3, #20]
 80065bc:	009b      	lsls	r3, r3, #2
 80065be:	693a      	ldr	r2, [r7, #16]
 80065c0:	4313      	orrs	r3, r2
 80065c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80065c4:	683b      	ldr	r3, [r7, #0]
 80065c6:	699b      	ldr	r3, [r3, #24]
 80065c8:	009b      	lsls	r3, r3, #2
 80065ca:	693a      	ldr	r2, [r7, #16]
 80065cc:	4313      	orrs	r3, r2
 80065ce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	693a      	ldr	r2, [r7, #16]
 80065d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	68fa      	ldr	r2, [r7, #12]
 80065da:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	685a      	ldr	r2, [r3, #4]
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	697a      	ldr	r2, [r7, #20]
 80065e8:	621a      	str	r2, [r3, #32]
}
 80065ea:	bf00      	nop
 80065ec:	371c      	adds	r7, #28
 80065ee:	46bd      	mov	sp, r7
 80065f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f4:	4770      	bx	lr
 80065f6:	bf00      	nop
 80065f8:	40012c00 	.word	0x40012c00
 80065fc:	40013400 	.word	0x40013400
 8006600:	40014000 	.word	0x40014000
 8006604:	40014400 	.word	0x40014400
 8006608:	40014800 	.word	0x40014800

0800660c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800660c:	b480      	push	{r7}
 800660e:	b087      	sub	sp, #28
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
 8006614:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	6a1b      	ldr	r3, [r3, #32]
 800661a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	6a1b      	ldr	r3, [r3, #32]
 8006620:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	685b      	ldr	r3, [r3, #4]
 800662c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	69db      	ldr	r3, [r3, #28]
 8006632:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800663a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800663e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	f023 0303 	bic.w	r3, r3, #3
 8006646:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006648:	683b      	ldr	r3, [r7, #0]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	68fa      	ldr	r2, [r7, #12]
 800664e:	4313      	orrs	r3, r2
 8006650:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006652:	697b      	ldr	r3, [r7, #20]
 8006654:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006658:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800665a:	683b      	ldr	r3, [r7, #0]
 800665c:	689b      	ldr	r3, [r3, #8]
 800665e:	021b      	lsls	r3, r3, #8
 8006660:	697a      	ldr	r2, [r7, #20]
 8006662:	4313      	orrs	r3, r2
 8006664:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	4a27      	ldr	r2, [pc, #156]	@ (8006708 <TIM_OC3_SetConfig+0xfc>)
 800666a:	4293      	cmp	r3, r2
 800666c:	d003      	beq.n	8006676 <TIM_OC3_SetConfig+0x6a>
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	4a26      	ldr	r2, [pc, #152]	@ (800670c <TIM_OC3_SetConfig+0x100>)
 8006672:	4293      	cmp	r3, r2
 8006674:	d10d      	bne.n	8006692 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006676:	697b      	ldr	r3, [r7, #20]
 8006678:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800667c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800667e:	683b      	ldr	r3, [r7, #0]
 8006680:	68db      	ldr	r3, [r3, #12]
 8006682:	021b      	lsls	r3, r3, #8
 8006684:	697a      	ldr	r2, [r7, #20]
 8006686:	4313      	orrs	r3, r2
 8006688:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800668a:	697b      	ldr	r3, [r7, #20]
 800668c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006690:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	4a1c      	ldr	r2, [pc, #112]	@ (8006708 <TIM_OC3_SetConfig+0xfc>)
 8006696:	4293      	cmp	r3, r2
 8006698:	d00f      	beq.n	80066ba <TIM_OC3_SetConfig+0xae>
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	4a1b      	ldr	r2, [pc, #108]	@ (800670c <TIM_OC3_SetConfig+0x100>)
 800669e:	4293      	cmp	r3, r2
 80066a0:	d00b      	beq.n	80066ba <TIM_OC3_SetConfig+0xae>
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	4a1a      	ldr	r2, [pc, #104]	@ (8006710 <TIM_OC3_SetConfig+0x104>)
 80066a6:	4293      	cmp	r3, r2
 80066a8:	d007      	beq.n	80066ba <TIM_OC3_SetConfig+0xae>
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	4a19      	ldr	r2, [pc, #100]	@ (8006714 <TIM_OC3_SetConfig+0x108>)
 80066ae:	4293      	cmp	r3, r2
 80066b0:	d003      	beq.n	80066ba <TIM_OC3_SetConfig+0xae>
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	4a18      	ldr	r2, [pc, #96]	@ (8006718 <TIM_OC3_SetConfig+0x10c>)
 80066b6:	4293      	cmp	r3, r2
 80066b8:	d113      	bne.n	80066e2 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80066ba:	693b      	ldr	r3, [r7, #16]
 80066bc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80066c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80066c2:	693b      	ldr	r3, [r7, #16]
 80066c4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80066c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	695b      	ldr	r3, [r3, #20]
 80066ce:	011b      	lsls	r3, r3, #4
 80066d0:	693a      	ldr	r2, [r7, #16]
 80066d2:	4313      	orrs	r3, r2
 80066d4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	699b      	ldr	r3, [r3, #24]
 80066da:	011b      	lsls	r3, r3, #4
 80066dc:	693a      	ldr	r2, [r7, #16]
 80066de:	4313      	orrs	r3, r2
 80066e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	693a      	ldr	r2, [r7, #16]
 80066e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	68fa      	ldr	r2, [r7, #12]
 80066ec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80066ee:	683b      	ldr	r3, [r7, #0]
 80066f0:	685a      	ldr	r2, [r3, #4]
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	697a      	ldr	r2, [r7, #20]
 80066fa:	621a      	str	r2, [r3, #32]
}
 80066fc:	bf00      	nop
 80066fe:	371c      	adds	r7, #28
 8006700:	46bd      	mov	sp, r7
 8006702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006706:	4770      	bx	lr
 8006708:	40012c00 	.word	0x40012c00
 800670c:	40013400 	.word	0x40013400
 8006710:	40014000 	.word	0x40014000
 8006714:	40014400 	.word	0x40014400
 8006718:	40014800 	.word	0x40014800

0800671c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800671c:	b480      	push	{r7}
 800671e:	b087      	sub	sp, #28
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
 8006724:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	6a1b      	ldr	r3, [r3, #32]
 800672a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	6a1b      	ldr	r3, [r3, #32]
 8006730:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	685b      	ldr	r3, [r3, #4]
 800673c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	69db      	ldr	r3, [r3, #28]
 8006742:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800674a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800674e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006756:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	021b      	lsls	r3, r3, #8
 800675e:	68fa      	ldr	r2, [r7, #12]
 8006760:	4313      	orrs	r3, r2
 8006762:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006764:	697b      	ldr	r3, [r7, #20]
 8006766:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800676a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800676c:	683b      	ldr	r3, [r7, #0]
 800676e:	689b      	ldr	r3, [r3, #8]
 8006770:	031b      	lsls	r3, r3, #12
 8006772:	697a      	ldr	r2, [r7, #20]
 8006774:	4313      	orrs	r3, r2
 8006776:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	4a28      	ldr	r2, [pc, #160]	@ (800681c <TIM_OC4_SetConfig+0x100>)
 800677c:	4293      	cmp	r3, r2
 800677e:	d003      	beq.n	8006788 <TIM_OC4_SetConfig+0x6c>
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	4a27      	ldr	r2, [pc, #156]	@ (8006820 <TIM_OC4_SetConfig+0x104>)
 8006784:	4293      	cmp	r3, r2
 8006786:	d10d      	bne.n	80067a4 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8006788:	697b      	ldr	r3, [r7, #20]
 800678a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800678e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	68db      	ldr	r3, [r3, #12]
 8006794:	031b      	lsls	r3, r3, #12
 8006796:	697a      	ldr	r2, [r7, #20]
 8006798:	4313      	orrs	r3, r2
 800679a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800679c:	697b      	ldr	r3, [r7, #20]
 800679e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80067a2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	4a1d      	ldr	r2, [pc, #116]	@ (800681c <TIM_OC4_SetConfig+0x100>)
 80067a8:	4293      	cmp	r3, r2
 80067aa:	d00f      	beq.n	80067cc <TIM_OC4_SetConfig+0xb0>
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	4a1c      	ldr	r2, [pc, #112]	@ (8006820 <TIM_OC4_SetConfig+0x104>)
 80067b0:	4293      	cmp	r3, r2
 80067b2:	d00b      	beq.n	80067cc <TIM_OC4_SetConfig+0xb0>
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	4a1b      	ldr	r2, [pc, #108]	@ (8006824 <TIM_OC4_SetConfig+0x108>)
 80067b8:	4293      	cmp	r3, r2
 80067ba:	d007      	beq.n	80067cc <TIM_OC4_SetConfig+0xb0>
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	4a1a      	ldr	r2, [pc, #104]	@ (8006828 <TIM_OC4_SetConfig+0x10c>)
 80067c0:	4293      	cmp	r3, r2
 80067c2:	d003      	beq.n	80067cc <TIM_OC4_SetConfig+0xb0>
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	4a19      	ldr	r2, [pc, #100]	@ (800682c <TIM_OC4_SetConfig+0x110>)
 80067c8:	4293      	cmp	r3, r2
 80067ca:	d113      	bne.n	80067f4 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80067cc:	693b      	ldr	r3, [r7, #16]
 80067ce:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80067d2:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80067d4:	693b      	ldr	r3, [r7, #16]
 80067d6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80067da:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80067dc:	683b      	ldr	r3, [r7, #0]
 80067de:	695b      	ldr	r3, [r3, #20]
 80067e0:	019b      	lsls	r3, r3, #6
 80067e2:	693a      	ldr	r2, [r7, #16]
 80067e4:	4313      	orrs	r3, r2
 80067e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80067e8:	683b      	ldr	r3, [r7, #0]
 80067ea:	699b      	ldr	r3, [r3, #24]
 80067ec:	019b      	lsls	r3, r3, #6
 80067ee:	693a      	ldr	r2, [r7, #16]
 80067f0:	4313      	orrs	r3, r2
 80067f2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	693a      	ldr	r2, [r7, #16]
 80067f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	68fa      	ldr	r2, [r7, #12]
 80067fe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006800:	683b      	ldr	r3, [r7, #0]
 8006802:	685a      	ldr	r2, [r3, #4]
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	697a      	ldr	r2, [r7, #20]
 800680c:	621a      	str	r2, [r3, #32]
}
 800680e:	bf00      	nop
 8006810:	371c      	adds	r7, #28
 8006812:	46bd      	mov	sp, r7
 8006814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006818:	4770      	bx	lr
 800681a:	bf00      	nop
 800681c:	40012c00 	.word	0x40012c00
 8006820:	40013400 	.word	0x40013400
 8006824:	40014000 	.word	0x40014000
 8006828:	40014400 	.word	0x40014400
 800682c:	40014800 	.word	0x40014800

08006830 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006830:	b480      	push	{r7}
 8006832:	b087      	sub	sp, #28
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
 8006838:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	6a1b      	ldr	r3, [r3, #32]
 800683e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	6a1b      	ldr	r3, [r3, #32]
 8006844:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	685b      	ldr	r3, [r3, #4]
 8006850:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006856:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800685e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006862:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	68fa      	ldr	r2, [r7, #12]
 800686a:	4313      	orrs	r3, r2
 800686c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800686e:	693b      	ldr	r3, [r7, #16]
 8006870:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8006874:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	689b      	ldr	r3, [r3, #8]
 800687a:	041b      	lsls	r3, r3, #16
 800687c:	693a      	ldr	r2, [r7, #16]
 800687e:	4313      	orrs	r3, r2
 8006880:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	4a17      	ldr	r2, [pc, #92]	@ (80068e4 <TIM_OC5_SetConfig+0xb4>)
 8006886:	4293      	cmp	r3, r2
 8006888:	d00f      	beq.n	80068aa <TIM_OC5_SetConfig+0x7a>
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	4a16      	ldr	r2, [pc, #88]	@ (80068e8 <TIM_OC5_SetConfig+0xb8>)
 800688e:	4293      	cmp	r3, r2
 8006890:	d00b      	beq.n	80068aa <TIM_OC5_SetConfig+0x7a>
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	4a15      	ldr	r2, [pc, #84]	@ (80068ec <TIM_OC5_SetConfig+0xbc>)
 8006896:	4293      	cmp	r3, r2
 8006898:	d007      	beq.n	80068aa <TIM_OC5_SetConfig+0x7a>
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	4a14      	ldr	r2, [pc, #80]	@ (80068f0 <TIM_OC5_SetConfig+0xc0>)
 800689e:	4293      	cmp	r3, r2
 80068a0:	d003      	beq.n	80068aa <TIM_OC5_SetConfig+0x7a>
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	4a13      	ldr	r2, [pc, #76]	@ (80068f4 <TIM_OC5_SetConfig+0xc4>)
 80068a6:	4293      	cmp	r3, r2
 80068a8:	d109      	bne.n	80068be <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80068aa:	697b      	ldr	r3, [r7, #20]
 80068ac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80068b0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80068b2:	683b      	ldr	r3, [r7, #0]
 80068b4:	695b      	ldr	r3, [r3, #20]
 80068b6:	021b      	lsls	r3, r3, #8
 80068b8:	697a      	ldr	r2, [r7, #20]
 80068ba:	4313      	orrs	r3, r2
 80068bc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	697a      	ldr	r2, [r7, #20]
 80068c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	68fa      	ldr	r2, [r7, #12]
 80068c8:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80068ca:	683b      	ldr	r3, [r7, #0]
 80068cc:	685a      	ldr	r2, [r3, #4]
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	693a      	ldr	r2, [r7, #16]
 80068d6:	621a      	str	r2, [r3, #32]
}
 80068d8:	bf00      	nop
 80068da:	371c      	adds	r7, #28
 80068dc:	46bd      	mov	sp, r7
 80068de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e2:	4770      	bx	lr
 80068e4:	40012c00 	.word	0x40012c00
 80068e8:	40013400 	.word	0x40013400
 80068ec:	40014000 	.word	0x40014000
 80068f0:	40014400 	.word	0x40014400
 80068f4:	40014800 	.word	0x40014800

080068f8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80068f8:	b480      	push	{r7}
 80068fa:	b087      	sub	sp, #28
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
 8006900:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	6a1b      	ldr	r3, [r3, #32]
 8006906:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	6a1b      	ldr	r3, [r3, #32]
 800690c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	685b      	ldr	r3, [r3, #4]
 8006918:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800691e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006926:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800692a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	021b      	lsls	r3, r3, #8
 8006932:	68fa      	ldr	r2, [r7, #12]
 8006934:	4313      	orrs	r3, r2
 8006936:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006938:	693b      	ldr	r3, [r7, #16]
 800693a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800693e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	689b      	ldr	r3, [r3, #8]
 8006944:	051b      	lsls	r3, r3, #20
 8006946:	693a      	ldr	r2, [r7, #16]
 8006948:	4313      	orrs	r3, r2
 800694a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	4a18      	ldr	r2, [pc, #96]	@ (80069b0 <TIM_OC6_SetConfig+0xb8>)
 8006950:	4293      	cmp	r3, r2
 8006952:	d00f      	beq.n	8006974 <TIM_OC6_SetConfig+0x7c>
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	4a17      	ldr	r2, [pc, #92]	@ (80069b4 <TIM_OC6_SetConfig+0xbc>)
 8006958:	4293      	cmp	r3, r2
 800695a:	d00b      	beq.n	8006974 <TIM_OC6_SetConfig+0x7c>
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	4a16      	ldr	r2, [pc, #88]	@ (80069b8 <TIM_OC6_SetConfig+0xc0>)
 8006960:	4293      	cmp	r3, r2
 8006962:	d007      	beq.n	8006974 <TIM_OC6_SetConfig+0x7c>
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	4a15      	ldr	r2, [pc, #84]	@ (80069bc <TIM_OC6_SetConfig+0xc4>)
 8006968:	4293      	cmp	r3, r2
 800696a:	d003      	beq.n	8006974 <TIM_OC6_SetConfig+0x7c>
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	4a14      	ldr	r2, [pc, #80]	@ (80069c0 <TIM_OC6_SetConfig+0xc8>)
 8006970:	4293      	cmp	r3, r2
 8006972:	d109      	bne.n	8006988 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006974:	697b      	ldr	r3, [r7, #20]
 8006976:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800697a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800697c:	683b      	ldr	r3, [r7, #0]
 800697e:	695b      	ldr	r3, [r3, #20]
 8006980:	029b      	lsls	r3, r3, #10
 8006982:	697a      	ldr	r2, [r7, #20]
 8006984:	4313      	orrs	r3, r2
 8006986:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	697a      	ldr	r2, [r7, #20]
 800698c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	68fa      	ldr	r2, [r7, #12]
 8006992:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006994:	683b      	ldr	r3, [r7, #0]
 8006996:	685a      	ldr	r2, [r3, #4]
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	693a      	ldr	r2, [r7, #16]
 80069a0:	621a      	str	r2, [r3, #32]
}
 80069a2:	bf00      	nop
 80069a4:	371c      	adds	r7, #28
 80069a6:	46bd      	mov	sp, r7
 80069a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ac:	4770      	bx	lr
 80069ae:	bf00      	nop
 80069b0:	40012c00 	.word	0x40012c00
 80069b4:	40013400 	.word	0x40013400
 80069b8:	40014000 	.word	0x40014000
 80069bc:	40014400 	.word	0x40014400
 80069c0:	40014800 	.word	0x40014800

080069c4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80069c4:	b480      	push	{r7}
 80069c6:	b087      	sub	sp, #28
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	60f8      	str	r0, [r7, #12]
 80069cc:	60b9      	str	r1, [r7, #8]
 80069ce:	607a      	str	r2, [r7, #4]
 80069d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	6a1b      	ldr	r3, [r3, #32]
 80069d6:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	6a1b      	ldr	r3, [r3, #32]
 80069dc:	f023 0201 	bic.w	r2, r3, #1
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	699b      	ldr	r3, [r3, #24]
 80069e8:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	4a24      	ldr	r2, [pc, #144]	@ (8006a80 <TIM_TI1_SetConfig+0xbc>)
 80069ee:	4293      	cmp	r3, r2
 80069f0:	d013      	beq.n	8006a1a <TIM_TI1_SetConfig+0x56>
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80069f8:	d00f      	beq.n	8006a1a <TIM_TI1_SetConfig+0x56>
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	4a21      	ldr	r2, [pc, #132]	@ (8006a84 <TIM_TI1_SetConfig+0xc0>)
 80069fe:	4293      	cmp	r3, r2
 8006a00:	d00b      	beq.n	8006a1a <TIM_TI1_SetConfig+0x56>
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	4a20      	ldr	r2, [pc, #128]	@ (8006a88 <TIM_TI1_SetConfig+0xc4>)
 8006a06:	4293      	cmp	r3, r2
 8006a08:	d007      	beq.n	8006a1a <TIM_TI1_SetConfig+0x56>
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	4a1f      	ldr	r2, [pc, #124]	@ (8006a8c <TIM_TI1_SetConfig+0xc8>)
 8006a0e:	4293      	cmp	r3, r2
 8006a10:	d003      	beq.n	8006a1a <TIM_TI1_SetConfig+0x56>
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	4a1e      	ldr	r2, [pc, #120]	@ (8006a90 <TIM_TI1_SetConfig+0xcc>)
 8006a16:	4293      	cmp	r3, r2
 8006a18:	d101      	bne.n	8006a1e <TIM_TI1_SetConfig+0x5a>
 8006a1a:	2301      	movs	r3, #1
 8006a1c:	e000      	b.n	8006a20 <TIM_TI1_SetConfig+0x5c>
 8006a1e:	2300      	movs	r3, #0
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d008      	beq.n	8006a36 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006a24:	697b      	ldr	r3, [r7, #20]
 8006a26:	f023 0303 	bic.w	r3, r3, #3
 8006a2a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006a2c:	697a      	ldr	r2, [r7, #20]
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	4313      	orrs	r3, r2
 8006a32:	617b      	str	r3, [r7, #20]
 8006a34:	e003      	b.n	8006a3e <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006a36:	697b      	ldr	r3, [r7, #20]
 8006a38:	f043 0301 	orr.w	r3, r3, #1
 8006a3c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006a3e:	697b      	ldr	r3, [r7, #20]
 8006a40:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006a44:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006a46:	683b      	ldr	r3, [r7, #0]
 8006a48:	011b      	lsls	r3, r3, #4
 8006a4a:	b2db      	uxtb	r3, r3
 8006a4c:	697a      	ldr	r2, [r7, #20]
 8006a4e:	4313      	orrs	r3, r2
 8006a50:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006a52:	693b      	ldr	r3, [r7, #16]
 8006a54:	f023 030a 	bic.w	r3, r3, #10
 8006a58:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006a5a:	68bb      	ldr	r3, [r7, #8]
 8006a5c:	f003 030a 	and.w	r3, r3, #10
 8006a60:	693a      	ldr	r2, [r7, #16]
 8006a62:	4313      	orrs	r3, r2
 8006a64:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	697a      	ldr	r2, [r7, #20]
 8006a6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	693a      	ldr	r2, [r7, #16]
 8006a70:	621a      	str	r2, [r3, #32]
}
 8006a72:	bf00      	nop
 8006a74:	371c      	adds	r7, #28
 8006a76:	46bd      	mov	sp, r7
 8006a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7c:	4770      	bx	lr
 8006a7e:	bf00      	nop
 8006a80:	40012c00 	.word	0x40012c00
 8006a84:	40000400 	.word	0x40000400
 8006a88:	40000800 	.word	0x40000800
 8006a8c:	40013400 	.word	0x40013400
 8006a90:	40014000 	.word	0x40014000

08006a94 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006a94:	b480      	push	{r7}
 8006a96:	b087      	sub	sp, #28
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	60f8      	str	r0, [r7, #12]
 8006a9c:	60b9      	str	r1, [r7, #8]
 8006a9e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	6a1b      	ldr	r3, [r3, #32]
 8006aa4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	6a1b      	ldr	r3, [r3, #32]
 8006aaa:	f023 0201 	bic.w	r2, r3, #1
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	699b      	ldr	r3, [r3, #24]
 8006ab6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006ab8:	693b      	ldr	r3, [r7, #16]
 8006aba:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006abe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	011b      	lsls	r3, r3, #4
 8006ac4:	693a      	ldr	r2, [r7, #16]
 8006ac6:	4313      	orrs	r3, r2
 8006ac8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006aca:	697b      	ldr	r3, [r7, #20]
 8006acc:	f023 030a 	bic.w	r3, r3, #10
 8006ad0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006ad2:	697a      	ldr	r2, [r7, #20]
 8006ad4:	68bb      	ldr	r3, [r7, #8]
 8006ad6:	4313      	orrs	r3, r2
 8006ad8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	693a      	ldr	r2, [r7, #16]
 8006ade:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	697a      	ldr	r2, [r7, #20]
 8006ae4:	621a      	str	r2, [r3, #32]
}
 8006ae6:	bf00      	nop
 8006ae8:	371c      	adds	r7, #28
 8006aea:	46bd      	mov	sp, r7
 8006aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af0:	4770      	bx	lr

08006af2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006af2:	b480      	push	{r7}
 8006af4:	b087      	sub	sp, #28
 8006af6:	af00      	add	r7, sp, #0
 8006af8:	60f8      	str	r0, [r7, #12]
 8006afa:	60b9      	str	r1, [r7, #8]
 8006afc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	6a1b      	ldr	r3, [r3, #32]
 8006b02:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	6a1b      	ldr	r3, [r3, #32]
 8006b08:	f023 0210 	bic.w	r2, r3, #16
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	699b      	ldr	r3, [r3, #24]
 8006b14:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006b16:	693b      	ldr	r3, [r7, #16]
 8006b18:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006b1c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	031b      	lsls	r3, r3, #12
 8006b22:	693a      	ldr	r2, [r7, #16]
 8006b24:	4313      	orrs	r3, r2
 8006b26:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006b28:	697b      	ldr	r3, [r7, #20]
 8006b2a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006b2e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006b30:	68bb      	ldr	r3, [r7, #8]
 8006b32:	011b      	lsls	r3, r3, #4
 8006b34:	697a      	ldr	r2, [r7, #20]
 8006b36:	4313      	orrs	r3, r2
 8006b38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	693a      	ldr	r2, [r7, #16]
 8006b3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	697a      	ldr	r2, [r7, #20]
 8006b44:	621a      	str	r2, [r3, #32]
}
 8006b46:	bf00      	nop
 8006b48:	371c      	adds	r7, #28
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b50:	4770      	bx	lr

08006b52 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006b52:	b480      	push	{r7}
 8006b54:	b085      	sub	sp, #20
 8006b56:	af00      	add	r7, sp, #0
 8006b58:	6078      	str	r0, [r7, #4]
 8006b5a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	689b      	ldr	r3, [r3, #8]
 8006b60:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8006b68:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b6c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006b6e:	683a      	ldr	r2, [r7, #0]
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	4313      	orrs	r3, r2
 8006b74:	f043 0307 	orr.w	r3, r3, #7
 8006b78:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	68fa      	ldr	r2, [r7, #12]
 8006b7e:	609a      	str	r2, [r3, #8]
}
 8006b80:	bf00      	nop
 8006b82:	3714      	adds	r7, #20
 8006b84:	46bd      	mov	sp, r7
 8006b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8a:	4770      	bx	lr

08006b8c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006b8c:	b480      	push	{r7}
 8006b8e:	b087      	sub	sp, #28
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	60f8      	str	r0, [r7, #12]
 8006b94:	60b9      	str	r1, [r7, #8]
 8006b96:	607a      	str	r2, [r7, #4]
 8006b98:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	689b      	ldr	r3, [r3, #8]
 8006b9e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006ba0:	697b      	ldr	r3, [r7, #20]
 8006ba2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006ba6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006ba8:	683b      	ldr	r3, [r7, #0]
 8006baa:	021a      	lsls	r2, r3, #8
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	431a      	orrs	r2, r3
 8006bb0:	68bb      	ldr	r3, [r7, #8]
 8006bb2:	4313      	orrs	r3, r2
 8006bb4:	697a      	ldr	r2, [r7, #20]
 8006bb6:	4313      	orrs	r3, r2
 8006bb8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	697a      	ldr	r2, [r7, #20]
 8006bbe:	609a      	str	r2, [r3, #8]
}
 8006bc0:	bf00      	nop
 8006bc2:	371c      	adds	r7, #28
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bca:	4770      	bx	lr

08006bcc <HAL_TIMEx_HallSensor_Init>:
  * @param  htim TIM Hall Sensor Interface handle
  * @param  sConfig TIM Hall Sensor configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Init(TIM_HandleTypeDef *htim, const TIM_HallSensor_InitTypeDef *sConfig)
{
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b08a      	sub	sp, #40	@ 0x28
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
 8006bd4:	6039      	str	r1, [r7, #0]
  TIM_OC_InitTypeDef OC_Config;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d101      	bne.n	8006be0 <HAL_TIMEx_HallSensor_Init+0x14>
  {
    return HAL_ERROR;
 8006bdc:	2301      	movs	r3, #1
 8006bde:	e0a0      	b.n	8006d22 <HAL_TIMEx_HallSensor_Init+0x156>
  assert_param(IS_TIM_IC_POLARITY(sConfig->IC1Polarity));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006be6:	b2db      	uxtb	r3, r3
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d106      	bne.n	8006bfa <HAL_TIMEx_HallSensor_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2200      	movs	r2, #0
 8006bf0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->HallSensor_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIMEx_HallSensor_MspInit(htim);
 8006bf4:	6878      	ldr	r0, [r7, #4]
 8006bf6:	f7fa fdf5 	bl	80017e4 <HAL_TIMEx_HallSensor_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	2202      	movs	r2, #2
 8006bfe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681a      	ldr	r2, [r3, #0]
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	3304      	adds	r3, #4
 8006c0a:	4619      	mov	r1, r3
 8006c0c:	4610      	mov	r0, r2
 8006c0e:	f7ff fb47 	bl	80062a0 <TIM_Base_SetConfig>

  /* Configure the Channel 1 as Input Channel to interface with the three Outputs of the  Hall sensor */
  TIM_TI1_SetConfig(htim->Instance, sConfig->IC1Polarity, TIM_ICSELECTION_TRC, sConfig->IC1Filter);
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	6818      	ldr	r0, [r3, #0]
 8006c16:	683b      	ldr	r3, [r7, #0]
 8006c18:	6819      	ldr	r1, [r3, #0]
 8006c1a:	683b      	ldr	r3, [r7, #0]
 8006c1c:	689b      	ldr	r3, [r3, #8]
 8006c1e:	2203      	movs	r2, #3
 8006c20:	f7ff fed0 	bl	80069c4 <TIM_TI1_SetConfig>

  /* Reset the IC1PSC Bits */
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	699a      	ldr	r2, [r3, #24]
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	f022 020c 	bic.w	r2, r2, #12
 8006c32:	619a      	str	r2, [r3, #24]
  /* Set the IC1PSC value */
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	6999      	ldr	r1, [r3, #24]
 8006c3a:	683b      	ldr	r3, [r7, #0]
 8006c3c:	685a      	ldr	r2, [r3, #4]
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	430a      	orrs	r2, r1
 8006c44:	619a      	str	r2, [r3, #24]

  /* Enable the Hall sensor interface (XOR function of the three inputs) */
  htim->Instance->CR2 |= TIM_CR2_TI1S;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	685a      	ldr	r2, [r3, #4]
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006c54:	605a      	str	r2, [r3, #4]

  /* Select the TIM_TS_TI1F_ED signal as Input trigger for the TIM */
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	689b      	ldr	r3, [r3, #8]
 8006c5c:	687a      	ldr	r2, [r7, #4]
 8006c5e:	6812      	ldr	r2, [r2, #0]
 8006c60:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8006c64:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c68:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_TS_TI1F_ED;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	689a      	ldr	r2, [r3, #8]
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006c78:	609a      	str	r2, [r3, #8]

  /* Use the TIM_TS_TI1F_ED signal to reset the TIM counter each edge detection */
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	689b      	ldr	r3, [r3, #8]
 8006c80:	687a      	ldr	r2, [r7, #4]
 8006c82:	6812      	ldr	r2, [r2, #0]
 8006c84:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006c88:	f023 0307 	bic.w	r3, r3, #7
 8006c8c:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_SLAVEMODE_RESET;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	689a      	ldr	r2, [r3, #8]
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	f042 0204 	orr.w	r2, r2, #4
 8006c9c:	609a      	str	r2, [r3, #8]

  /* Program channel 2 in PWM 2 mode with the desired Commutation_Delay*/
  OC_Config.OCFastMode = TIM_OCFAST_DISABLE;
 8006c9e:	2300      	movs	r3, #0
 8006ca0:	61fb      	str	r3, [r7, #28]
  OC_Config.OCIdleState = TIM_OCIDLESTATE_RESET;
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	623b      	str	r3, [r7, #32]
  OC_Config.OCMode = TIM_OCMODE_PWM2;
 8006ca6:	2370      	movs	r3, #112	@ 0x70
 8006ca8:	60fb      	str	r3, [r7, #12]
  OC_Config.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8006caa:	2300      	movs	r3, #0
 8006cac:	627b      	str	r3, [r7, #36]	@ 0x24
  OC_Config.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8006cae:	2300      	movs	r3, #0
 8006cb0:	61bb      	str	r3, [r7, #24]
  OC_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	617b      	str	r3, [r7, #20]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 8006cb6:	683b      	ldr	r3, [r7, #0]
 8006cb8:	68db      	ldr	r3, [r3, #12]
 8006cba:	613b      	str	r3, [r7, #16]

  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	f107 020c 	add.w	r2, r7, #12
 8006cc4:	4611      	mov	r1, r2
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	f7ff fc16 	bl	80064f8 <TIM_OC2_SetConfig>

  /* Select OC2REF as trigger output on TRGO: write the MMS bits in the TIMx_CR2
    register to 101 */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	685b      	ldr	r3, [r3, #4]
 8006cd2:	687a      	ldr	r2, [r7, #4]
 8006cd4:	6812      	ldr	r2, [r2, #0]
 8006cd6:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8006cda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006cde:	6053      	str	r3, [r2, #4]
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	685a      	ldr	r2, [r3, #4]
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	f042 0250 	orr.w	r2, r2, #80	@ 0x50
 8006cee:	605a      	str	r2, [r3, #4]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2201      	movs	r2, #1
 8006cf4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2201      	movs	r2, #1
 8006cfc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2201      	movs	r2, #1
 8006d04:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2201      	movs	r2, #1
 8006d0c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2201      	movs	r2, #1
 8006d14:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	2201      	movs	r2, #1
 8006d1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006d20:	2300      	movs	r3, #0
}
 8006d22:	4618      	mov	r0, r3
 8006d24:	3728      	adds	r7, #40	@ 0x28
 8006d26:	46bd      	mov	sp, r7
 8006d28:	bd80      	pop	{r7, pc}
	...

08006d2c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006d2c:	b480      	push	{r7}
 8006d2e:	b085      	sub	sp, #20
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	6078      	str	r0, [r7, #4]
 8006d34:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006d3c:	2b01      	cmp	r3, #1
 8006d3e:	d101      	bne.n	8006d44 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006d40:	2302      	movs	r3, #2
 8006d42:	e065      	b.n	8006e10 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	2201      	movs	r2, #1
 8006d48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	2202      	movs	r2, #2
 8006d50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	685b      	ldr	r3, [r3, #4]
 8006d5a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	689b      	ldr	r3, [r3, #8]
 8006d62:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	4a2c      	ldr	r2, [pc, #176]	@ (8006e1c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006d6a:	4293      	cmp	r3, r2
 8006d6c:	d004      	beq.n	8006d78 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	4a2b      	ldr	r2, [pc, #172]	@ (8006e20 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006d74:	4293      	cmp	r3, r2
 8006d76:	d108      	bne.n	8006d8a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006d7e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006d80:	683b      	ldr	r3, [r7, #0]
 8006d82:	685b      	ldr	r3, [r3, #4]
 8006d84:	68fa      	ldr	r2, [r7, #12]
 8006d86:	4313      	orrs	r3, r2
 8006d88:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8006d90:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d94:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	68fa      	ldr	r2, [r7, #12]
 8006d9c:	4313      	orrs	r3, r2
 8006d9e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	68fa      	ldr	r2, [r7, #12]
 8006da6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	4a1b      	ldr	r2, [pc, #108]	@ (8006e1c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006dae:	4293      	cmp	r3, r2
 8006db0:	d018      	beq.n	8006de4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006dba:	d013      	beq.n	8006de4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	4a18      	ldr	r2, [pc, #96]	@ (8006e24 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006dc2:	4293      	cmp	r3, r2
 8006dc4:	d00e      	beq.n	8006de4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	4a17      	ldr	r2, [pc, #92]	@ (8006e28 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006dcc:	4293      	cmp	r3, r2
 8006dce:	d009      	beq.n	8006de4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	4a12      	ldr	r2, [pc, #72]	@ (8006e20 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006dd6:	4293      	cmp	r3, r2
 8006dd8:	d004      	beq.n	8006de4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	4a13      	ldr	r2, [pc, #76]	@ (8006e2c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006de0:	4293      	cmp	r3, r2
 8006de2:	d10c      	bne.n	8006dfe <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006de4:	68bb      	ldr	r3, [r7, #8]
 8006de6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006dea:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	689b      	ldr	r3, [r3, #8]
 8006df0:	68ba      	ldr	r2, [r7, #8]
 8006df2:	4313      	orrs	r3, r2
 8006df4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	68ba      	ldr	r2, [r7, #8]
 8006dfc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	2201      	movs	r2, #1
 8006e02:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	2200      	movs	r2, #0
 8006e0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006e0e:	2300      	movs	r3, #0
}
 8006e10:	4618      	mov	r0, r3
 8006e12:	3714      	adds	r7, #20
 8006e14:	46bd      	mov	sp, r7
 8006e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1a:	4770      	bx	lr
 8006e1c:	40012c00 	.word	0x40012c00
 8006e20:	40013400 	.word	0x40013400
 8006e24:	40000400 	.word	0x40000400
 8006e28:	40000800 	.word	0x40000800
 8006e2c:	40014000 	.word	0x40014000

08006e30 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006e30:	b480      	push	{r7}
 8006e32:	b085      	sub	sp, #20
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	6078      	str	r0, [r7, #4]
 8006e38:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006e44:	2b01      	cmp	r3, #1
 8006e46:	d101      	bne.n	8006e4c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006e48:	2302      	movs	r3, #2
 8006e4a:	e073      	b.n	8006f34 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2201      	movs	r2, #1
 8006e50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006e5a:	683b      	ldr	r3, [r7, #0]
 8006e5c:	68db      	ldr	r3, [r3, #12]
 8006e5e:	4313      	orrs	r3, r2
 8006e60:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006e68:	683b      	ldr	r3, [r7, #0]
 8006e6a:	689b      	ldr	r3, [r3, #8]
 8006e6c:	4313      	orrs	r3, r2
 8006e6e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006e76:	683b      	ldr	r3, [r7, #0]
 8006e78:	685b      	ldr	r3, [r3, #4]
 8006e7a:	4313      	orrs	r3, r2
 8006e7c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006e84:	683b      	ldr	r3, [r7, #0]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	4313      	orrs	r3, r2
 8006e8a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006e92:	683b      	ldr	r3, [r7, #0]
 8006e94:	691b      	ldr	r3, [r3, #16]
 8006e96:	4313      	orrs	r3, r2
 8006e98:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006ea0:	683b      	ldr	r3, [r7, #0]
 8006ea2:	695b      	ldr	r3, [r3, #20]
 8006ea4:	4313      	orrs	r3, r2
 8006ea6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8006eae:	683b      	ldr	r3, [r7, #0]
 8006eb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006eb2:	4313      	orrs	r3, r2
 8006eb4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8006ebc:	683b      	ldr	r3, [r7, #0]
 8006ebe:	699b      	ldr	r3, [r3, #24]
 8006ec0:	041b      	lsls	r3, r3, #16
 8006ec2:	4313      	orrs	r3, r2
 8006ec4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8006ecc:	683b      	ldr	r3, [r7, #0]
 8006ece:	69db      	ldr	r3, [r3, #28]
 8006ed0:	4313      	orrs	r3, r2
 8006ed2:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	4a19      	ldr	r2, [pc, #100]	@ (8006f40 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8006eda:	4293      	cmp	r3, r2
 8006edc:	d004      	beq.n	8006ee8 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	4a18      	ldr	r2, [pc, #96]	@ (8006f44 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8006ee4:	4293      	cmp	r3, r2
 8006ee6:	d11c      	bne.n	8006f22 <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8006eee:	683b      	ldr	r3, [r7, #0]
 8006ef0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ef2:	051b      	lsls	r3, r3, #20
 8006ef4:	4313      	orrs	r3, r2
 8006ef6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	6a1b      	ldr	r3, [r3, #32]
 8006f02:	4313      	orrs	r3, r2
 8006f04:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8006f0c:	683b      	ldr	r3, [r7, #0]
 8006f0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f10:	4313      	orrs	r3, r2
 8006f12:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8006f1a:	683b      	ldr	r3, [r7, #0]
 8006f1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f1e:	4313      	orrs	r3, r2
 8006f20:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	68fa      	ldr	r2, [r7, #12]
 8006f28:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006f32:	2300      	movs	r3, #0
}
 8006f34:	4618      	mov	r0, r3
 8006f36:	3714      	adds	r7, #20
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3e:	4770      	bx	lr
 8006f40:	40012c00 	.word	0x40012c00
 8006f44:	40013400 	.word	0x40013400

08006f48 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	b082      	sub	sp, #8
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d101      	bne.n	8006f5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006f56:	2301      	movs	r3, #1
 8006f58:	e042      	b.n	8006fe0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d106      	bne.n	8006f72 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	2200      	movs	r2, #0
 8006f68:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006f6c:	6878      	ldr	r0, [r7, #4]
 8006f6e:	f7fa fddd 	bl	8001b2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	2224      	movs	r2, #36	@ 0x24
 8006f76:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	681a      	ldr	r2, [r3, #0]
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	f022 0201 	bic.w	r2, r2, #1
 8006f88:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d002      	beq.n	8006f98 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006f92:	6878      	ldr	r0, [r7, #4]
 8006f94:	f000 faf4 	bl	8007580 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006f98:	6878      	ldr	r0, [r7, #4]
 8006f9a:	f000 f825 	bl	8006fe8 <UART_SetConfig>
 8006f9e:	4603      	mov	r3, r0
 8006fa0:	2b01      	cmp	r3, #1
 8006fa2:	d101      	bne.n	8006fa8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006fa4:	2301      	movs	r3, #1
 8006fa6:	e01b      	b.n	8006fe0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	685a      	ldr	r2, [r3, #4]
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006fb6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	689a      	ldr	r2, [r3, #8]
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006fc6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	681a      	ldr	r2, [r3, #0]
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	f042 0201 	orr.w	r2, r2, #1
 8006fd6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006fd8:	6878      	ldr	r0, [r7, #4]
 8006fda:	f000 fb73 	bl	80076c4 <UART_CheckIdleState>
 8006fde:	4603      	mov	r3, r0
}
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	3708      	adds	r7, #8
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	bd80      	pop	{r7, pc}

08006fe8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006fe8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006fec:	b08c      	sub	sp, #48	@ 0x30
 8006fee:	af00      	add	r7, sp, #0
 8006ff0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006ff8:	697b      	ldr	r3, [r7, #20]
 8006ffa:	689a      	ldr	r2, [r3, #8]
 8006ffc:	697b      	ldr	r3, [r7, #20]
 8006ffe:	691b      	ldr	r3, [r3, #16]
 8007000:	431a      	orrs	r2, r3
 8007002:	697b      	ldr	r3, [r7, #20]
 8007004:	695b      	ldr	r3, [r3, #20]
 8007006:	431a      	orrs	r2, r3
 8007008:	697b      	ldr	r3, [r7, #20]
 800700a:	69db      	ldr	r3, [r3, #28]
 800700c:	4313      	orrs	r3, r2
 800700e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007010:	697b      	ldr	r3, [r7, #20]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	681a      	ldr	r2, [r3, #0]
 8007016:	4bab      	ldr	r3, [pc, #684]	@ (80072c4 <UART_SetConfig+0x2dc>)
 8007018:	4013      	ands	r3, r2
 800701a:	697a      	ldr	r2, [r7, #20]
 800701c:	6812      	ldr	r2, [r2, #0]
 800701e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007020:	430b      	orrs	r3, r1
 8007022:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007024:	697b      	ldr	r3, [r7, #20]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	685b      	ldr	r3, [r3, #4]
 800702a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800702e:	697b      	ldr	r3, [r7, #20]
 8007030:	68da      	ldr	r2, [r3, #12]
 8007032:	697b      	ldr	r3, [r7, #20]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	430a      	orrs	r2, r1
 8007038:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800703a:	697b      	ldr	r3, [r7, #20]
 800703c:	699b      	ldr	r3, [r3, #24]
 800703e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007040:	697b      	ldr	r3, [r7, #20]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	4aa0      	ldr	r2, [pc, #640]	@ (80072c8 <UART_SetConfig+0x2e0>)
 8007046:	4293      	cmp	r3, r2
 8007048:	d004      	beq.n	8007054 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800704a:	697b      	ldr	r3, [r7, #20]
 800704c:	6a1b      	ldr	r3, [r3, #32]
 800704e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007050:	4313      	orrs	r3, r2
 8007052:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007054:	697b      	ldr	r3, [r7, #20]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	689b      	ldr	r3, [r3, #8]
 800705a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800705e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8007062:	697a      	ldr	r2, [r7, #20]
 8007064:	6812      	ldr	r2, [r2, #0]
 8007066:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007068:	430b      	orrs	r3, r1
 800706a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800706c:	697b      	ldr	r3, [r7, #20]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007072:	f023 010f 	bic.w	r1, r3, #15
 8007076:	697b      	ldr	r3, [r7, #20]
 8007078:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800707a:	697b      	ldr	r3, [r7, #20]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	430a      	orrs	r2, r1
 8007080:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007082:	697b      	ldr	r3, [r7, #20]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	4a91      	ldr	r2, [pc, #580]	@ (80072cc <UART_SetConfig+0x2e4>)
 8007088:	4293      	cmp	r3, r2
 800708a:	d125      	bne.n	80070d8 <UART_SetConfig+0xf0>
 800708c:	4b90      	ldr	r3, [pc, #576]	@ (80072d0 <UART_SetConfig+0x2e8>)
 800708e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007092:	f003 0303 	and.w	r3, r3, #3
 8007096:	2b03      	cmp	r3, #3
 8007098:	d81a      	bhi.n	80070d0 <UART_SetConfig+0xe8>
 800709a:	a201      	add	r2, pc, #4	@ (adr r2, 80070a0 <UART_SetConfig+0xb8>)
 800709c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070a0:	080070b1 	.word	0x080070b1
 80070a4:	080070c1 	.word	0x080070c1
 80070a8:	080070b9 	.word	0x080070b9
 80070ac:	080070c9 	.word	0x080070c9
 80070b0:	2301      	movs	r3, #1
 80070b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80070b6:	e0d6      	b.n	8007266 <UART_SetConfig+0x27e>
 80070b8:	2302      	movs	r3, #2
 80070ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80070be:	e0d2      	b.n	8007266 <UART_SetConfig+0x27e>
 80070c0:	2304      	movs	r3, #4
 80070c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80070c6:	e0ce      	b.n	8007266 <UART_SetConfig+0x27e>
 80070c8:	2308      	movs	r3, #8
 80070ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80070ce:	e0ca      	b.n	8007266 <UART_SetConfig+0x27e>
 80070d0:	2310      	movs	r3, #16
 80070d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80070d6:	e0c6      	b.n	8007266 <UART_SetConfig+0x27e>
 80070d8:	697b      	ldr	r3, [r7, #20]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	4a7d      	ldr	r2, [pc, #500]	@ (80072d4 <UART_SetConfig+0x2ec>)
 80070de:	4293      	cmp	r3, r2
 80070e0:	d138      	bne.n	8007154 <UART_SetConfig+0x16c>
 80070e2:	4b7b      	ldr	r3, [pc, #492]	@ (80072d0 <UART_SetConfig+0x2e8>)
 80070e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80070e8:	f003 030c 	and.w	r3, r3, #12
 80070ec:	2b0c      	cmp	r3, #12
 80070ee:	d82d      	bhi.n	800714c <UART_SetConfig+0x164>
 80070f0:	a201      	add	r2, pc, #4	@ (adr r2, 80070f8 <UART_SetConfig+0x110>)
 80070f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070f6:	bf00      	nop
 80070f8:	0800712d 	.word	0x0800712d
 80070fc:	0800714d 	.word	0x0800714d
 8007100:	0800714d 	.word	0x0800714d
 8007104:	0800714d 	.word	0x0800714d
 8007108:	0800713d 	.word	0x0800713d
 800710c:	0800714d 	.word	0x0800714d
 8007110:	0800714d 	.word	0x0800714d
 8007114:	0800714d 	.word	0x0800714d
 8007118:	08007135 	.word	0x08007135
 800711c:	0800714d 	.word	0x0800714d
 8007120:	0800714d 	.word	0x0800714d
 8007124:	0800714d 	.word	0x0800714d
 8007128:	08007145 	.word	0x08007145
 800712c:	2300      	movs	r3, #0
 800712e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007132:	e098      	b.n	8007266 <UART_SetConfig+0x27e>
 8007134:	2302      	movs	r3, #2
 8007136:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800713a:	e094      	b.n	8007266 <UART_SetConfig+0x27e>
 800713c:	2304      	movs	r3, #4
 800713e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007142:	e090      	b.n	8007266 <UART_SetConfig+0x27e>
 8007144:	2308      	movs	r3, #8
 8007146:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800714a:	e08c      	b.n	8007266 <UART_SetConfig+0x27e>
 800714c:	2310      	movs	r3, #16
 800714e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007152:	e088      	b.n	8007266 <UART_SetConfig+0x27e>
 8007154:	697b      	ldr	r3, [r7, #20]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	4a5f      	ldr	r2, [pc, #380]	@ (80072d8 <UART_SetConfig+0x2f0>)
 800715a:	4293      	cmp	r3, r2
 800715c:	d125      	bne.n	80071aa <UART_SetConfig+0x1c2>
 800715e:	4b5c      	ldr	r3, [pc, #368]	@ (80072d0 <UART_SetConfig+0x2e8>)
 8007160:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007164:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007168:	2b30      	cmp	r3, #48	@ 0x30
 800716a:	d016      	beq.n	800719a <UART_SetConfig+0x1b2>
 800716c:	2b30      	cmp	r3, #48	@ 0x30
 800716e:	d818      	bhi.n	80071a2 <UART_SetConfig+0x1ba>
 8007170:	2b20      	cmp	r3, #32
 8007172:	d00a      	beq.n	800718a <UART_SetConfig+0x1a2>
 8007174:	2b20      	cmp	r3, #32
 8007176:	d814      	bhi.n	80071a2 <UART_SetConfig+0x1ba>
 8007178:	2b00      	cmp	r3, #0
 800717a:	d002      	beq.n	8007182 <UART_SetConfig+0x19a>
 800717c:	2b10      	cmp	r3, #16
 800717e:	d008      	beq.n	8007192 <UART_SetConfig+0x1aa>
 8007180:	e00f      	b.n	80071a2 <UART_SetConfig+0x1ba>
 8007182:	2300      	movs	r3, #0
 8007184:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007188:	e06d      	b.n	8007266 <UART_SetConfig+0x27e>
 800718a:	2302      	movs	r3, #2
 800718c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007190:	e069      	b.n	8007266 <UART_SetConfig+0x27e>
 8007192:	2304      	movs	r3, #4
 8007194:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007198:	e065      	b.n	8007266 <UART_SetConfig+0x27e>
 800719a:	2308      	movs	r3, #8
 800719c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80071a0:	e061      	b.n	8007266 <UART_SetConfig+0x27e>
 80071a2:	2310      	movs	r3, #16
 80071a4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80071a8:	e05d      	b.n	8007266 <UART_SetConfig+0x27e>
 80071aa:	697b      	ldr	r3, [r7, #20]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	4a4b      	ldr	r2, [pc, #300]	@ (80072dc <UART_SetConfig+0x2f4>)
 80071b0:	4293      	cmp	r3, r2
 80071b2:	d125      	bne.n	8007200 <UART_SetConfig+0x218>
 80071b4:	4b46      	ldr	r3, [pc, #280]	@ (80072d0 <UART_SetConfig+0x2e8>)
 80071b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80071ba:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80071be:	2bc0      	cmp	r3, #192	@ 0xc0
 80071c0:	d016      	beq.n	80071f0 <UART_SetConfig+0x208>
 80071c2:	2bc0      	cmp	r3, #192	@ 0xc0
 80071c4:	d818      	bhi.n	80071f8 <UART_SetConfig+0x210>
 80071c6:	2b80      	cmp	r3, #128	@ 0x80
 80071c8:	d00a      	beq.n	80071e0 <UART_SetConfig+0x1f8>
 80071ca:	2b80      	cmp	r3, #128	@ 0x80
 80071cc:	d814      	bhi.n	80071f8 <UART_SetConfig+0x210>
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d002      	beq.n	80071d8 <UART_SetConfig+0x1f0>
 80071d2:	2b40      	cmp	r3, #64	@ 0x40
 80071d4:	d008      	beq.n	80071e8 <UART_SetConfig+0x200>
 80071d6:	e00f      	b.n	80071f8 <UART_SetConfig+0x210>
 80071d8:	2300      	movs	r3, #0
 80071da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80071de:	e042      	b.n	8007266 <UART_SetConfig+0x27e>
 80071e0:	2302      	movs	r3, #2
 80071e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80071e6:	e03e      	b.n	8007266 <UART_SetConfig+0x27e>
 80071e8:	2304      	movs	r3, #4
 80071ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80071ee:	e03a      	b.n	8007266 <UART_SetConfig+0x27e>
 80071f0:	2308      	movs	r3, #8
 80071f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80071f6:	e036      	b.n	8007266 <UART_SetConfig+0x27e>
 80071f8:	2310      	movs	r3, #16
 80071fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80071fe:	e032      	b.n	8007266 <UART_SetConfig+0x27e>
 8007200:	697b      	ldr	r3, [r7, #20]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	4a30      	ldr	r2, [pc, #192]	@ (80072c8 <UART_SetConfig+0x2e0>)
 8007206:	4293      	cmp	r3, r2
 8007208:	d12a      	bne.n	8007260 <UART_SetConfig+0x278>
 800720a:	4b31      	ldr	r3, [pc, #196]	@ (80072d0 <UART_SetConfig+0x2e8>)
 800720c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007210:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007214:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007218:	d01a      	beq.n	8007250 <UART_SetConfig+0x268>
 800721a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800721e:	d81b      	bhi.n	8007258 <UART_SetConfig+0x270>
 8007220:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007224:	d00c      	beq.n	8007240 <UART_SetConfig+0x258>
 8007226:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800722a:	d815      	bhi.n	8007258 <UART_SetConfig+0x270>
 800722c:	2b00      	cmp	r3, #0
 800722e:	d003      	beq.n	8007238 <UART_SetConfig+0x250>
 8007230:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007234:	d008      	beq.n	8007248 <UART_SetConfig+0x260>
 8007236:	e00f      	b.n	8007258 <UART_SetConfig+0x270>
 8007238:	2300      	movs	r3, #0
 800723a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800723e:	e012      	b.n	8007266 <UART_SetConfig+0x27e>
 8007240:	2302      	movs	r3, #2
 8007242:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007246:	e00e      	b.n	8007266 <UART_SetConfig+0x27e>
 8007248:	2304      	movs	r3, #4
 800724a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800724e:	e00a      	b.n	8007266 <UART_SetConfig+0x27e>
 8007250:	2308      	movs	r3, #8
 8007252:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007256:	e006      	b.n	8007266 <UART_SetConfig+0x27e>
 8007258:	2310      	movs	r3, #16
 800725a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800725e:	e002      	b.n	8007266 <UART_SetConfig+0x27e>
 8007260:	2310      	movs	r3, #16
 8007262:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007266:	697b      	ldr	r3, [r7, #20]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	4a17      	ldr	r2, [pc, #92]	@ (80072c8 <UART_SetConfig+0x2e0>)
 800726c:	4293      	cmp	r3, r2
 800726e:	f040 80a8 	bne.w	80073c2 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007272:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007276:	2b08      	cmp	r3, #8
 8007278:	d834      	bhi.n	80072e4 <UART_SetConfig+0x2fc>
 800727a:	a201      	add	r2, pc, #4	@ (adr r2, 8007280 <UART_SetConfig+0x298>)
 800727c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007280:	080072a5 	.word	0x080072a5
 8007284:	080072e5 	.word	0x080072e5
 8007288:	080072ad 	.word	0x080072ad
 800728c:	080072e5 	.word	0x080072e5
 8007290:	080072b3 	.word	0x080072b3
 8007294:	080072e5 	.word	0x080072e5
 8007298:	080072e5 	.word	0x080072e5
 800729c:	080072e5 	.word	0x080072e5
 80072a0:	080072bb 	.word	0x080072bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80072a4:	f7fe fa2e 	bl	8005704 <HAL_RCC_GetPCLK1Freq>
 80072a8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80072aa:	e021      	b.n	80072f0 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80072ac:	4b0c      	ldr	r3, [pc, #48]	@ (80072e0 <UART_SetConfig+0x2f8>)
 80072ae:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80072b0:	e01e      	b.n	80072f0 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80072b2:	f7fe f9b9 	bl	8005628 <HAL_RCC_GetSysClockFreq>
 80072b6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80072b8:	e01a      	b.n	80072f0 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80072ba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80072be:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80072c0:	e016      	b.n	80072f0 <UART_SetConfig+0x308>
 80072c2:	bf00      	nop
 80072c4:	cfff69f3 	.word	0xcfff69f3
 80072c8:	40008000 	.word	0x40008000
 80072cc:	40013800 	.word	0x40013800
 80072d0:	40021000 	.word	0x40021000
 80072d4:	40004400 	.word	0x40004400
 80072d8:	40004800 	.word	0x40004800
 80072dc:	40004c00 	.word	0x40004c00
 80072e0:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80072e4:	2300      	movs	r3, #0
 80072e6:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80072e8:	2301      	movs	r3, #1
 80072ea:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80072ee:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80072f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	f000 812a 	beq.w	800754c <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80072f8:	697b      	ldr	r3, [r7, #20]
 80072fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072fc:	4a9e      	ldr	r2, [pc, #632]	@ (8007578 <UART_SetConfig+0x590>)
 80072fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007302:	461a      	mov	r2, r3
 8007304:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007306:	fbb3 f3f2 	udiv	r3, r3, r2
 800730a:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800730c:	697b      	ldr	r3, [r7, #20]
 800730e:	685a      	ldr	r2, [r3, #4]
 8007310:	4613      	mov	r3, r2
 8007312:	005b      	lsls	r3, r3, #1
 8007314:	4413      	add	r3, r2
 8007316:	69ba      	ldr	r2, [r7, #24]
 8007318:	429a      	cmp	r2, r3
 800731a:	d305      	bcc.n	8007328 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800731c:	697b      	ldr	r3, [r7, #20]
 800731e:	685b      	ldr	r3, [r3, #4]
 8007320:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007322:	69ba      	ldr	r2, [r7, #24]
 8007324:	429a      	cmp	r2, r3
 8007326:	d903      	bls.n	8007330 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8007328:	2301      	movs	r3, #1
 800732a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800732e:	e10d      	b.n	800754c <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007330:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007332:	2200      	movs	r2, #0
 8007334:	60bb      	str	r3, [r7, #8]
 8007336:	60fa      	str	r2, [r7, #12]
 8007338:	697b      	ldr	r3, [r7, #20]
 800733a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800733c:	4a8e      	ldr	r2, [pc, #568]	@ (8007578 <UART_SetConfig+0x590>)
 800733e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007342:	b29b      	uxth	r3, r3
 8007344:	2200      	movs	r2, #0
 8007346:	603b      	str	r3, [r7, #0]
 8007348:	607a      	str	r2, [r7, #4]
 800734a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800734e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007352:	f7f9 fb7f 	bl	8000a54 <__aeabi_uldivmod>
 8007356:	4602      	mov	r2, r0
 8007358:	460b      	mov	r3, r1
 800735a:	4610      	mov	r0, r2
 800735c:	4619      	mov	r1, r3
 800735e:	f04f 0200 	mov.w	r2, #0
 8007362:	f04f 0300 	mov.w	r3, #0
 8007366:	020b      	lsls	r3, r1, #8
 8007368:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800736c:	0202      	lsls	r2, r0, #8
 800736e:	6979      	ldr	r1, [r7, #20]
 8007370:	6849      	ldr	r1, [r1, #4]
 8007372:	0849      	lsrs	r1, r1, #1
 8007374:	2000      	movs	r0, #0
 8007376:	460c      	mov	r4, r1
 8007378:	4605      	mov	r5, r0
 800737a:	eb12 0804 	adds.w	r8, r2, r4
 800737e:	eb43 0905 	adc.w	r9, r3, r5
 8007382:	697b      	ldr	r3, [r7, #20]
 8007384:	685b      	ldr	r3, [r3, #4]
 8007386:	2200      	movs	r2, #0
 8007388:	469a      	mov	sl, r3
 800738a:	4693      	mov	fp, r2
 800738c:	4652      	mov	r2, sl
 800738e:	465b      	mov	r3, fp
 8007390:	4640      	mov	r0, r8
 8007392:	4649      	mov	r1, r9
 8007394:	f7f9 fb5e 	bl	8000a54 <__aeabi_uldivmod>
 8007398:	4602      	mov	r2, r0
 800739a:	460b      	mov	r3, r1
 800739c:	4613      	mov	r3, r2
 800739e:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80073a0:	6a3b      	ldr	r3, [r7, #32]
 80073a2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80073a6:	d308      	bcc.n	80073ba <UART_SetConfig+0x3d2>
 80073a8:	6a3b      	ldr	r3, [r7, #32]
 80073aa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80073ae:	d204      	bcs.n	80073ba <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 80073b0:	697b      	ldr	r3, [r7, #20]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	6a3a      	ldr	r2, [r7, #32]
 80073b6:	60da      	str	r2, [r3, #12]
 80073b8:	e0c8      	b.n	800754c <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 80073ba:	2301      	movs	r3, #1
 80073bc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80073c0:	e0c4      	b.n	800754c <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80073c2:	697b      	ldr	r3, [r7, #20]
 80073c4:	69db      	ldr	r3, [r3, #28]
 80073c6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80073ca:	d167      	bne.n	800749c <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 80073cc:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80073d0:	2b08      	cmp	r3, #8
 80073d2:	d828      	bhi.n	8007426 <UART_SetConfig+0x43e>
 80073d4:	a201      	add	r2, pc, #4	@ (adr r2, 80073dc <UART_SetConfig+0x3f4>)
 80073d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073da:	bf00      	nop
 80073dc:	08007401 	.word	0x08007401
 80073e0:	08007409 	.word	0x08007409
 80073e4:	08007411 	.word	0x08007411
 80073e8:	08007427 	.word	0x08007427
 80073ec:	08007417 	.word	0x08007417
 80073f0:	08007427 	.word	0x08007427
 80073f4:	08007427 	.word	0x08007427
 80073f8:	08007427 	.word	0x08007427
 80073fc:	0800741f 	.word	0x0800741f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007400:	f7fe f980 	bl	8005704 <HAL_RCC_GetPCLK1Freq>
 8007404:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007406:	e014      	b.n	8007432 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007408:	f7fe f992 	bl	8005730 <HAL_RCC_GetPCLK2Freq>
 800740c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800740e:	e010      	b.n	8007432 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007410:	4b5a      	ldr	r3, [pc, #360]	@ (800757c <UART_SetConfig+0x594>)
 8007412:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007414:	e00d      	b.n	8007432 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007416:	f7fe f907 	bl	8005628 <HAL_RCC_GetSysClockFreq>
 800741a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800741c:	e009      	b.n	8007432 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800741e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007422:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007424:	e005      	b.n	8007432 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8007426:	2300      	movs	r3, #0
 8007428:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800742a:	2301      	movs	r3, #1
 800742c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007430:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007432:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007434:	2b00      	cmp	r3, #0
 8007436:	f000 8089 	beq.w	800754c <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800743a:	697b      	ldr	r3, [r7, #20]
 800743c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800743e:	4a4e      	ldr	r2, [pc, #312]	@ (8007578 <UART_SetConfig+0x590>)
 8007440:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007444:	461a      	mov	r2, r3
 8007446:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007448:	fbb3 f3f2 	udiv	r3, r3, r2
 800744c:	005a      	lsls	r2, r3, #1
 800744e:	697b      	ldr	r3, [r7, #20]
 8007450:	685b      	ldr	r3, [r3, #4]
 8007452:	085b      	lsrs	r3, r3, #1
 8007454:	441a      	add	r2, r3
 8007456:	697b      	ldr	r3, [r7, #20]
 8007458:	685b      	ldr	r3, [r3, #4]
 800745a:	fbb2 f3f3 	udiv	r3, r2, r3
 800745e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007460:	6a3b      	ldr	r3, [r7, #32]
 8007462:	2b0f      	cmp	r3, #15
 8007464:	d916      	bls.n	8007494 <UART_SetConfig+0x4ac>
 8007466:	6a3b      	ldr	r3, [r7, #32]
 8007468:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800746c:	d212      	bcs.n	8007494 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800746e:	6a3b      	ldr	r3, [r7, #32]
 8007470:	b29b      	uxth	r3, r3
 8007472:	f023 030f 	bic.w	r3, r3, #15
 8007476:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007478:	6a3b      	ldr	r3, [r7, #32]
 800747a:	085b      	lsrs	r3, r3, #1
 800747c:	b29b      	uxth	r3, r3
 800747e:	f003 0307 	and.w	r3, r3, #7
 8007482:	b29a      	uxth	r2, r3
 8007484:	8bfb      	ldrh	r3, [r7, #30]
 8007486:	4313      	orrs	r3, r2
 8007488:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800748a:	697b      	ldr	r3, [r7, #20]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	8bfa      	ldrh	r2, [r7, #30]
 8007490:	60da      	str	r2, [r3, #12]
 8007492:	e05b      	b.n	800754c <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8007494:	2301      	movs	r3, #1
 8007496:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800749a:	e057      	b.n	800754c <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 800749c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80074a0:	2b08      	cmp	r3, #8
 80074a2:	d828      	bhi.n	80074f6 <UART_SetConfig+0x50e>
 80074a4:	a201      	add	r2, pc, #4	@ (adr r2, 80074ac <UART_SetConfig+0x4c4>)
 80074a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074aa:	bf00      	nop
 80074ac:	080074d1 	.word	0x080074d1
 80074b0:	080074d9 	.word	0x080074d9
 80074b4:	080074e1 	.word	0x080074e1
 80074b8:	080074f7 	.word	0x080074f7
 80074bc:	080074e7 	.word	0x080074e7
 80074c0:	080074f7 	.word	0x080074f7
 80074c4:	080074f7 	.word	0x080074f7
 80074c8:	080074f7 	.word	0x080074f7
 80074cc:	080074ef 	.word	0x080074ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80074d0:	f7fe f918 	bl	8005704 <HAL_RCC_GetPCLK1Freq>
 80074d4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80074d6:	e014      	b.n	8007502 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80074d8:	f7fe f92a 	bl	8005730 <HAL_RCC_GetPCLK2Freq>
 80074dc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80074de:	e010      	b.n	8007502 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80074e0:	4b26      	ldr	r3, [pc, #152]	@ (800757c <UART_SetConfig+0x594>)
 80074e2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80074e4:	e00d      	b.n	8007502 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80074e6:	f7fe f89f 	bl	8005628 <HAL_RCC_GetSysClockFreq>
 80074ea:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80074ec:	e009      	b.n	8007502 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80074ee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80074f2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80074f4:	e005      	b.n	8007502 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 80074f6:	2300      	movs	r3, #0
 80074f8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80074fa:	2301      	movs	r3, #1
 80074fc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007500:	bf00      	nop
    }

    if (pclk != 0U)
 8007502:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007504:	2b00      	cmp	r3, #0
 8007506:	d021      	beq.n	800754c <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007508:	697b      	ldr	r3, [r7, #20]
 800750a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800750c:	4a1a      	ldr	r2, [pc, #104]	@ (8007578 <UART_SetConfig+0x590>)
 800750e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007512:	461a      	mov	r2, r3
 8007514:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007516:	fbb3 f2f2 	udiv	r2, r3, r2
 800751a:	697b      	ldr	r3, [r7, #20]
 800751c:	685b      	ldr	r3, [r3, #4]
 800751e:	085b      	lsrs	r3, r3, #1
 8007520:	441a      	add	r2, r3
 8007522:	697b      	ldr	r3, [r7, #20]
 8007524:	685b      	ldr	r3, [r3, #4]
 8007526:	fbb2 f3f3 	udiv	r3, r2, r3
 800752a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800752c:	6a3b      	ldr	r3, [r7, #32]
 800752e:	2b0f      	cmp	r3, #15
 8007530:	d909      	bls.n	8007546 <UART_SetConfig+0x55e>
 8007532:	6a3b      	ldr	r3, [r7, #32]
 8007534:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007538:	d205      	bcs.n	8007546 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800753a:	6a3b      	ldr	r3, [r7, #32]
 800753c:	b29a      	uxth	r2, r3
 800753e:	697b      	ldr	r3, [r7, #20]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	60da      	str	r2, [r3, #12]
 8007544:	e002      	b.n	800754c <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8007546:	2301      	movs	r3, #1
 8007548:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800754c:	697b      	ldr	r3, [r7, #20]
 800754e:	2201      	movs	r2, #1
 8007550:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8007554:	697b      	ldr	r3, [r7, #20]
 8007556:	2201      	movs	r2, #1
 8007558:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800755c:	697b      	ldr	r3, [r7, #20]
 800755e:	2200      	movs	r2, #0
 8007560:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007562:	697b      	ldr	r3, [r7, #20]
 8007564:	2200      	movs	r2, #0
 8007566:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8007568:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800756c:	4618      	mov	r0, r3
 800756e:	3730      	adds	r7, #48	@ 0x30
 8007570:	46bd      	mov	sp, r7
 8007572:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007576:	bf00      	nop
 8007578:	08008334 	.word	0x08008334
 800757c:	00f42400 	.word	0x00f42400

08007580 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007580:	b480      	push	{r7}
 8007582:	b083      	sub	sp, #12
 8007584:	af00      	add	r7, sp, #0
 8007586:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800758c:	f003 0308 	and.w	r3, r3, #8
 8007590:	2b00      	cmp	r3, #0
 8007592:	d00a      	beq.n	80075aa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	685b      	ldr	r3, [r3, #4]
 800759a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	430a      	orrs	r2, r1
 80075a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075ae:	f003 0301 	and.w	r3, r3, #1
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d00a      	beq.n	80075cc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	685b      	ldr	r3, [r3, #4]
 80075bc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	430a      	orrs	r2, r1
 80075ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075d0:	f003 0302 	and.w	r3, r3, #2
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d00a      	beq.n	80075ee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	685b      	ldr	r3, [r3, #4]
 80075de:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	430a      	orrs	r2, r1
 80075ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075f2:	f003 0304 	and.w	r3, r3, #4
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d00a      	beq.n	8007610 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	685b      	ldr	r3, [r3, #4]
 8007600:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	430a      	orrs	r2, r1
 800760e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007614:	f003 0310 	and.w	r3, r3, #16
 8007618:	2b00      	cmp	r3, #0
 800761a:	d00a      	beq.n	8007632 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	689b      	ldr	r3, [r3, #8]
 8007622:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	430a      	orrs	r2, r1
 8007630:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007636:	f003 0320 	and.w	r3, r3, #32
 800763a:	2b00      	cmp	r3, #0
 800763c:	d00a      	beq.n	8007654 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	689b      	ldr	r3, [r3, #8]
 8007644:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	430a      	orrs	r2, r1
 8007652:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007658:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800765c:	2b00      	cmp	r3, #0
 800765e:	d01a      	beq.n	8007696 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	685b      	ldr	r3, [r3, #4]
 8007666:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	430a      	orrs	r2, r1
 8007674:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800767a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800767e:	d10a      	bne.n	8007696 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	685b      	ldr	r3, [r3, #4]
 8007686:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	430a      	orrs	r2, r1
 8007694:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800769a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d00a      	beq.n	80076b8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	685b      	ldr	r3, [r3, #4]
 80076a8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	430a      	orrs	r2, r1
 80076b6:	605a      	str	r2, [r3, #4]
  }
}
 80076b8:	bf00      	nop
 80076ba:	370c      	adds	r7, #12
 80076bc:	46bd      	mov	sp, r7
 80076be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c2:	4770      	bx	lr

080076c4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80076c4:	b580      	push	{r7, lr}
 80076c6:	b098      	sub	sp, #96	@ 0x60
 80076c8:	af02      	add	r7, sp, #8
 80076ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	2200      	movs	r2, #0
 80076d0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80076d4:	f7fa fb10 	bl	8001cf8 <HAL_GetTick>
 80076d8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	f003 0308 	and.w	r3, r3, #8
 80076e4:	2b08      	cmp	r3, #8
 80076e6:	d12f      	bne.n	8007748 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80076e8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80076ec:	9300      	str	r3, [sp, #0]
 80076ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80076f0:	2200      	movs	r2, #0
 80076f2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80076f6:	6878      	ldr	r0, [r7, #4]
 80076f8:	f000 f88e 	bl	8007818 <UART_WaitOnFlagUntilTimeout>
 80076fc:	4603      	mov	r3, r0
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d022      	beq.n	8007748 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007708:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800770a:	e853 3f00 	ldrex	r3, [r3]
 800770e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007710:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007712:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007716:	653b      	str	r3, [r7, #80]	@ 0x50
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	461a      	mov	r2, r3
 800771e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007720:	647b      	str	r3, [r7, #68]	@ 0x44
 8007722:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007724:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007726:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007728:	e841 2300 	strex	r3, r2, [r1]
 800772c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800772e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007730:	2b00      	cmp	r3, #0
 8007732:	d1e6      	bne.n	8007702 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	2220      	movs	r2, #32
 8007738:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	2200      	movs	r2, #0
 8007740:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007744:	2303      	movs	r3, #3
 8007746:	e063      	b.n	8007810 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	f003 0304 	and.w	r3, r3, #4
 8007752:	2b04      	cmp	r3, #4
 8007754:	d149      	bne.n	80077ea <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007756:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800775a:	9300      	str	r3, [sp, #0]
 800775c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800775e:	2200      	movs	r2, #0
 8007760:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007764:	6878      	ldr	r0, [r7, #4]
 8007766:	f000 f857 	bl	8007818 <UART_WaitOnFlagUntilTimeout>
 800776a:	4603      	mov	r3, r0
 800776c:	2b00      	cmp	r3, #0
 800776e:	d03c      	beq.n	80077ea <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007776:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007778:	e853 3f00 	ldrex	r3, [r3]
 800777c:	623b      	str	r3, [r7, #32]
   return(result);
 800777e:	6a3b      	ldr	r3, [r7, #32]
 8007780:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007784:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	461a      	mov	r2, r3
 800778c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800778e:	633b      	str	r3, [r7, #48]	@ 0x30
 8007790:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007792:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007794:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007796:	e841 2300 	strex	r3, r2, [r1]
 800779a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800779c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d1e6      	bne.n	8007770 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	3308      	adds	r3, #8
 80077a8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077aa:	693b      	ldr	r3, [r7, #16]
 80077ac:	e853 3f00 	ldrex	r3, [r3]
 80077b0:	60fb      	str	r3, [r7, #12]
   return(result);
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	f023 0301 	bic.w	r3, r3, #1
 80077b8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	3308      	adds	r3, #8
 80077c0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80077c2:	61fa      	str	r2, [r7, #28]
 80077c4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077c6:	69b9      	ldr	r1, [r7, #24]
 80077c8:	69fa      	ldr	r2, [r7, #28]
 80077ca:	e841 2300 	strex	r3, r2, [r1]
 80077ce:	617b      	str	r3, [r7, #20]
   return(result);
 80077d0:	697b      	ldr	r3, [r7, #20]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d1e5      	bne.n	80077a2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	2220      	movs	r2, #32
 80077da:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	2200      	movs	r2, #0
 80077e2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80077e6:	2303      	movs	r3, #3
 80077e8:	e012      	b.n	8007810 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	2220      	movs	r2, #32
 80077ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	2220      	movs	r2, #32
 80077f6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	2200      	movs	r2, #0
 80077fe:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	2200      	movs	r2, #0
 8007804:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	2200      	movs	r2, #0
 800780a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800780e:	2300      	movs	r3, #0
}
 8007810:	4618      	mov	r0, r3
 8007812:	3758      	adds	r7, #88	@ 0x58
 8007814:	46bd      	mov	sp, r7
 8007816:	bd80      	pop	{r7, pc}

08007818 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007818:	b580      	push	{r7, lr}
 800781a:	b084      	sub	sp, #16
 800781c:	af00      	add	r7, sp, #0
 800781e:	60f8      	str	r0, [r7, #12]
 8007820:	60b9      	str	r1, [r7, #8]
 8007822:	603b      	str	r3, [r7, #0]
 8007824:	4613      	mov	r3, r2
 8007826:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007828:	e04f      	b.n	80078ca <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800782a:	69bb      	ldr	r3, [r7, #24]
 800782c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007830:	d04b      	beq.n	80078ca <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007832:	f7fa fa61 	bl	8001cf8 <HAL_GetTick>
 8007836:	4602      	mov	r2, r0
 8007838:	683b      	ldr	r3, [r7, #0]
 800783a:	1ad3      	subs	r3, r2, r3
 800783c:	69ba      	ldr	r2, [r7, #24]
 800783e:	429a      	cmp	r2, r3
 8007840:	d302      	bcc.n	8007848 <UART_WaitOnFlagUntilTimeout+0x30>
 8007842:	69bb      	ldr	r3, [r7, #24]
 8007844:	2b00      	cmp	r3, #0
 8007846:	d101      	bne.n	800784c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007848:	2303      	movs	r3, #3
 800784a:	e04e      	b.n	80078ea <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	f003 0304 	and.w	r3, r3, #4
 8007856:	2b00      	cmp	r3, #0
 8007858:	d037      	beq.n	80078ca <UART_WaitOnFlagUntilTimeout+0xb2>
 800785a:	68bb      	ldr	r3, [r7, #8]
 800785c:	2b80      	cmp	r3, #128	@ 0x80
 800785e:	d034      	beq.n	80078ca <UART_WaitOnFlagUntilTimeout+0xb2>
 8007860:	68bb      	ldr	r3, [r7, #8]
 8007862:	2b40      	cmp	r3, #64	@ 0x40
 8007864:	d031      	beq.n	80078ca <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	69db      	ldr	r3, [r3, #28]
 800786c:	f003 0308 	and.w	r3, r3, #8
 8007870:	2b08      	cmp	r3, #8
 8007872:	d110      	bne.n	8007896 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	2208      	movs	r2, #8
 800787a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800787c:	68f8      	ldr	r0, [r7, #12]
 800787e:	f000 f838 	bl	80078f2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	2208      	movs	r2, #8
 8007886:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	2200      	movs	r2, #0
 800788e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8007892:	2301      	movs	r3, #1
 8007894:	e029      	b.n	80078ea <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	69db      	ldr	r3, [r3, #28]
 800789c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80078a0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80078a4:	d111      	bne.n	80078ca <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80078ae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80078b0:	68f8      	ldr	r0, [r7, #12]
 80078b2:	f000 f81e 	bl	80078f2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	2220      	movs	r2, #32
 80078ba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	2200      	movs	r2, #0
 80078c2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80078c6:	2303      	movs	r3, #3
 80078c8:	e00f      	b.n	80078ea <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	69da      	ldr	r2, [r3, #28]
 80078d0:	68bb      	ldr	r3, [r7, #8]
 80078d2:	4013      	ands	r3, r2
 80078d4:	68ba      	ldr	r2, [r7, #8]
 80078d6:	429a      	cmp	r2, r3
 80078d8:	bf0c      	ite	eq
 80078da:	2301      	moveq	r3, #1
 80078dc:	2300      	movne	r3, #0
 80078de:	b2db      	uxtb	r3, r3
 80078e0:	461a      	mov	r2, r3
 80078e2:	79fb      	ldrb	r3, [r7, #7]
 80078e4:	429a      	cmp	r2, r3
 80078e6:	d0a0      	beq.n	800782a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80078e8:	2300      	movs	r3, #0
}
 80078ea:	4618      	mov	r0, r3
 80078ec:	3710      	adds	r7, #16
 80078ee:	46bd      	mov	sp, r7
 80078f0:	bd80      	pop	{r7, pc}

080078f2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80078f2:	b480      	push	{r7}
 80078f4:	b095      	sub	sp, #84	@ 0x54
 80078f6:	af00      	add	r7, sp, #0
 80078f8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007900:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007902:	e853 3f00 	ldrex	r3, [r3]
 8007906:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007908:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800790a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800790e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	461a      	mov	r2, r3
 8007916:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007918:	643b      	str	r3, [r7, #64]	@ 0x40
 800791a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800791c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800791e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007920:	e841 2300 	strex	r3, r2, [r1]
 8007924:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007926:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007928:	2b00      	cmp	r3, #0
 800792a:	d1e6      	bne.n	80078fa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	3308      	adds	r3, #8
 8007932:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007934:	6a3b      	ldr	r3, [r7, #32]
 8007936:	e853 3f00 	ldrex	r3, [r3]
 800793a:	61fb      	str	r3, [r7, #28]
   return(result);
 800793c:	69fb      	ldr	r3, [r7, #28]
 800793e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007942:	f023 0301 	bic.w	r3, r3, #1
 8007946:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	3308      	adds	r3, #8
 800794e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007950:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007952:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007954:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007956:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007958:	e841 2300 	strex	r3, r2, [r1]
 800795c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800795e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007960:	2b00      	cmp	r3, #0
 8007962:	d1e3      	bne.n	800792c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007968:	2b01      	cmp	r3, #1
 800796a:	d118      	bne.n	800799e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	e853 3f00 	ldrex	r3, [r3]
 8007978:	60bb      	str	r3, [r7, #8]
   return(result);
 800797a:	68bb      	ldr	r3, [r7, #8]
 800797c:	f023 0310 	bic.w	r3, r3, #16
 8007980:	647b      	str	r3, [r7, #68]	@ 0x44
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	461a      	mov	r2, r3
 8007988:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800798a:	61bb      	str	r3, [r7, #24]
 800798c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800798e:	6979      	ldr	r1, [r7, #20]
 8007990:	69ba      	ldr	r2, [r7, #24]
 8007992:	e841 2300 	strex	r3, r2, [r1]
 8007996:	613b      	str	r3, [r7, #16]
   return(result);
 8007998:	693b      	ldr	r3, [r7, #16]
 800799a:	2b00      	cmp	r3, #0
 800799c:	d1e6      	bne.n	800796c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	2220      	movs	r2, #32
 80079a2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	2200      	movs	r2, #0
 80079aa:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	2200      	movs	r2, #0
 80079b0:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80079b2:	bf00      	nop
 80079b4:	3754      	adds	r7, #84	@ 0x54
 80079b6:	46bd      	mov	sp, r7
 80079b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079bc:	4770      	bx	lr

080079be <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80079be:	b480      	push	{r7}
 80079c0:	b085      	sub	sp, #20
 80079c2:	af00      	add	r7, sp, #0
 80079c4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80079cc:	2b01      	cmp	r3, #1
 80079ce:	d101      	bne.n	80079d4 <HAL_UARTEx_DisableFifoMode+0x16>
 80079d0:	2302      	movs	r3, #2
 80079d2:	e027      	b.n	8007a24 <HAL_UARTEx_DisableFifoMode+0x66>
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	2201      	movs	r2, #1
 80079d8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	2224      	movs	r2, #36	@ 0x24
 80079e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	681a      	ldr	r2, [r3, #0]
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	f022 0201 	bic.w	r2, r2, #1
 80079fa:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007a02:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	2200      	movs	r2, #0
 8007a08:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	68fa      	ldr	r2, [r7, #12]
 8007a10:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	2220      	movs	r2, #32
 8007a16:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	2200      	movs	r2, #0
 8007a1e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007a22:	2300      	movs	r3, #0
}
 8007a24:	4618      	mov	r0, r3
 8007a26:	3714      	adds	r7, #20
 8007a28:	46bd      	mov	sp, r7
 8007a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2e:	4770      	bx	lr

08007a30 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007a30:	b580      	push	{r7, lr}
 8007a32:	b084      	sub	sp, #16
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]
 8007a38:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007a40:	2b01      	cmp	r3, #1
 8007a42:	d101      	bne.n	8007a48 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007a44:	2302      	movs	r3, #2
 8007a46:	e02d      	b.n	8007aa4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	2201      	movs	r2, #1
 8007a4c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	2224      	movs	r2, #36	@ 0x24
 8007a54:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	681a      	ldr	r2, [r3, #0]
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	f022 0201 	bic.w	r2, r2, #1
 8007a6e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	689b      	ldr	r3, [r3, #8]
 8007a76:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	683a      	ldr	r2, [r7, #0]
 8007a80:	430a      	orrs	r2, r1
 8007a82:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007a84:	6878      	ldr	r0, [r7, #4]
 8007a86:	f000 f84f 	bl	8007b28 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	68fa      	ldr	r2, [r7, #12]
 8007a90:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	2220      	movs	r2, #32
 8007a96:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	2200      	movs	r2, #0
 8007a9e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007aa2:	2300      	movs	r3, #0
}
 8007aa4:	4618      	mov	r0, r3
 8007aa6:	3710      	adds	r7, #16
 8007aa8:	46bd      	mov	sp, r7
 8007aaa:	bd80      	pop	{r7, pc}

08007aac <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007aac:	b580      	push	{r7, lr}
 8007aae:	b084      	sub	sp, #16
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	6078      	str	r0, [r7, #4]
 8007ab4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007abc:	2b01      	cmp	r3, #1
 8007abe:	d101      	bne.n	8007ac4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007ac0:	2302      	movs	r3, #2
 8007ac2:	e02d      	b.n	8007b20 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	2201      	movs	r2, #1
 8007ac8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	2224      	movs	r2, #36	@ 0x24
 8007ad0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	681a      	ldr	r2, [r3, #0]
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	f022 0201 	bic.w	r2, r2, #1
 8007aea:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	689b      	ldr	r3, [r3, #8]
 8007af2:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	683a      	ldr	r2, [r7, #0]
 8007afc:	430a      	orrs	r2, r1
 8007afe:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007b00:	6878      	ldr	r0, [r7, #4]
 8007b02:	f000 f811 	bl	8007b28 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	68fa      	ldr	r2, [r7, #12]
 8007b0c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	2220      	movs	r2, #32
 8007b12:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	2200      	movs	r2, #0
 8007b1a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007b1e:	2300      	movs	r3, #0
}
 8007b20:	4618      	mov	r0, r3
 8007b22:	3710      	adds	r7, #16
 8007b24:	46bd      	mov	sp, r7
 8007b26:	bd80      	pop	{r7, pc}

08007b28 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007b28:	b480      	push	{r7}
 8007b2a:	b085      	sub	sp, #20
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d108      	bne.n	8007b4a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	2201      	movs	r2, #1
 8007b3c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	2201      	movs	r2, #1
 8007b44:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007b48:	e031      	b.n	8007bae <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007b4a:	2308      	movs	r3, #8
 8007b4c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007b4e:	2308      	movs	r3, #8
 8007b50:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	689b      	ldr	r3, [r3, #8]
 8007b58:	0e5b      	lsrs	r3, r3, #25
 8007b5a:	b2db      	uxtb	r3, r3
 8007b5c:	f003 0307 	and.w	r3, r3, #7
 8007b60:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	689b      	ldr	r3, [r3, #8]
 8007b68:	0f5b      	lsrs	r3, r3, #29
 8007b6a:	b2db      	uxtb	r3, r3
 8007b6c:	f003 0307 	and.w	r3, r3, #7
 8007b70:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007b72:	7bbb      	ldrb	r3, [r7, #14]
 8007b74:	7b3a      	ldrb	r2, [r7, #12]
 8007b76:	4911      	ldr	r1, [pc, #68]	@ (8007bbc <UARTEx_SetNbDataToProcess+0x94>)
 8007b78:	5c8a      	ldrb	r2, [r1, r2]
 8007b7a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007b7e:	7b3a      	ldrb	r2, [r7, #12]
 8007b80:	490f      	ldr	r1, [pc, #60]	@ (8007bc0 <UARTEx_SetNbDataToProcess+0x98>)
 8007b82:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007b84:	fb93 f3f2 	sdiv	r3, r3, r2
 8007b88:	b29a      	uxth	r2, r3
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007b90:	7bfb      	ldrb	r3, [r7, #15]
 8007b92:	7b7a      	ldrb	r2, [r7, #13]
 8007b94:	4909      	ldr	r1, [pc, #36]	@ (8007bbc <UARTEx_SetNbDataToProcess+0x94>)
 8007b96:	5c8a      	ldrb	r2, [r1, r2]
 8007b98:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007b9c:	7b7a      	ldrb	r2, [r7, #13]
 8007b9e:	4908      	ldr	r1, [pc, #32]	@ (8007bc0 <UARTEx_SetNbDataToProcess+0x98>)
 8007ba0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007ba2:	fb93 f3f2 	sdiv	r3, r3, r2
 8007ba6:	b29a      	uxth	r2, r3
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8007bae:	bf00      	nop
 8007bb0:	3714      	adds	r7, #20
 8007bb2:	46bd      	mov	sp, r7
 8007bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb8:	4770      	bx	lr
 8007bba:	bf00      	nop
 8007bbc:	0800834c 	.word	0x0800834c
 8007bc0:	08008354 	.word	0x08008354

08007bc4 <BNO055_Init>:
 */

#include "BNO055.h"

HAL_StatusTypeDef BNO055_Init(BNO055_Structure *bno, I2C_HandleTypeDef *hi2cx, uint8_t addr, OPRMode mode)
{
 8007bc4:	b580      	push	{r7, lr}
 8007bc6:	b08a      	sub	sp, #40	@ 0x28
 8007bc8:	af04      	add	r7, sp, #16
 8007bca:	60f8      	str	r0, [r7, #12]
 8007bcc:	60b9      	str	r1, [r7, #8]
 8007bce:	4611      	mov	r1, r2
 8007bd0:	461a      	mov	r2, r3
 8007bd2:	460b      	mov	r3, r1
 8007bd4:	71fb      	strb	r3, [r7, #7]
 8007bd6:	4613      	mov	r3, r2
 8007bd8:	71bb      	strb	r3, [r7, #6]
	uint8_t txbuffer;
	uint8_t rxbuffer;

	bno->hi2cx = hi2cx;
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	68ba      	ldr	r2, [r7, #8]
 8007bde:	601a      	str	r2, [r3, #0]
	bno->address = BNO055_ADD_H;
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	2252      	movs	r2, #82	@ 0x52
 8007be4:	711a      	strb	r2, [r3, #4]
	if (addr == 0) bno->address = BNO055_ADD_L;
 8007be6:	79fb      	ldrb	r3, [r7, #7]
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d102      	bne.n	8007bf2 <BNO055_Init+0x2e>
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	2250      	movs	r2, #80	@ 0x50
 8007bf0:	711a      	strb	r2, [r3, #4]

	HAL_I2C_Mem_Read(bno->hi2cx, bno->address, CHIP_ID, 1, &rxbuffer, 1, 10);
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	6818      	ldr	r0, [r3, #0]
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	791b      	ldrb	r3, [r3, #4]
 8007bfa:	4619      	mov	r1, r3
 8007bfc:	230a      	movs	r3, #10
 8007bfe:	9302      	str	r3, [sp, #8]
 8007c00:	2301      	movs	r3, #1
 8007c02:	9301      	str	r3, [sp, #4]
 8007c04:	f107 0316 	add.w	r3, r7, #22
 8007c08:	9300      	str	r3, [sp, #0]
 8007c0a:	2301      	movs	r3, #1
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	f7fa ffe3 	bl	8002bd8 <HAL_I2C_Mem_Read>
	if (rxbuffer != 0xA0) {
 8007c12:	7dbb      	ldrb	r3, [r7, #22]
 8007c14:	2ba0      	cmp	r3, #160	@ 0xa0
 8007c16:	d018      	beq.n	8007c4a <BNO055_Init+0x86>
		HAL_Delay(1000);
 8007c18:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8007c1c:	f7fa f878 	bl	8001d10 <HAL_Delay>
		HAL_I2C_Mem_Read(bno->hi2cx, bno->address, CHIP_ID, 1, &rxbuffer, 1, 10);
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	6818      	ldr	r0, [r3, #0]
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	791b      	ldrb	r3, [r3, #4]
 8007c28:	4619      	mov	r1, r3
 8007c2a:	230a      	movs	r3, #10
 8007c2c:	9302      	str	r3, [sp, #8]
 8007c2e:	2301      	movs	r3, #1
 8007c30:	9301      	str	r3, [sp, #4]
 8007c32:	f107 0316 	add.w	r3, r7, #22
 8007c36:	9300      	str	r3, [sp, #0]
 8007c38:	2301      	movs	r3, #1
 8007c3a:	2200      	movs	r2, #0
 8007c3c:	f7fa ffcc 	bl	8002bd8 <HAL_I2C_Mem_Read>
		if (rxbuffer != 0xA0) return HAL_ERROR;
 8007c40:	7dbb      	ldrb	r3, [r7, #22]
 8007c42:	2ba0      	cmp	r3, #160	@ 0xa0
 8007c44:	d001      	beq.n	8007c4a <BNO055_Init+0x86>
 8007c46:	2301      	movs	r3, #1
 8007c48:	e096      	b.n	8007d78 <BNO055_Init+0x1b4>
	}

	txbuffer = CONFIGMODE;
 8007c4a:	2300      	movs	r3, #0
 8007c4c:	75fb      	strb	r3, [r7, #23]
	HAL_I2C_Mem_Write(bno->hi2cx, bno->address, OPR_MODE, 1, &txbuffer, 1, 10);
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	6818      	ldr	r0, [r3, #0]
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	791b      	ldrb	r3, [r3, #4]
 8007c56:	4619      	mov	r1, r3
 8007c58:	230a      	movs	r3, #10
 8007c5a:	9302      	str	r3, [sp, #8]
 8007c5c:	2301      	movs	r3, #1
 8007c5e:	9301      	str	r3, [sp, #4]
 8007c60:	f107 0317 	add.w	r3, r7, #23
 8007c64:	9300      	str	r3, [sp, #0]
 8007c66:	2301      	movs	r3, #1
 8007c68:	223d      	movs	r2, #61	@ 0x3d
 8007c6a:	f7fa fea1 	bl	80029b0 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8007c6e:	200a      	movs	r0, #10
 8007c70:	f7fa f84e 	bl	8001d10 <HAL_Delay>

	txbuffer = 0x20;
 8007c74:	2320      	movs	r3, #32
 8007c76:	75fb      	strb	r3, [r7, #23]
	HAL_I2C_Mem_Write(bno->hi2cx, bno->address, SYS_TRIGGER, 1, &txbuffer, 1, 10);
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	6818      	ldr	r0, [r3, #0]
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	791b      	ldrb	r3, [r3, #4]
 8007c80:	4619      	mov	r1, r3
 8007c82:	230a      	movs	r3, #10
 8007c84:	9302      	str	r3, [sp, #8]
 8007c86:	2301      	movs	r3, #1
 8007c88:	9301      	str	r3, [sp, #4]
 8007c8a:	f107 0317 	add.w	r3, r7, #23
 8007c8e:	9300      	str	r3, [sp, #0]
 8007c90:	2301      	movs	r3, #1
 8007c92:	223f      	movs	r2, #63	@ 0x3f
 8007c94:	f7fa fe8c 	bl	80029b0 <HAL_I2C_Mem_Write>
	HAL_Delay(30);
 8007c98:	201e      	movs	r0, #30
 8007c9a:	f7fa f839 	bl	8001d10 <HAL_Delay>

	do {
		HAL_I2C_Mem_Read(bno->hi2cx, bno->address, CHIP_ID, 1, &rxbuffer, 1, 10);
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	6818      	ldr	r0, [r3, #0]
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	791b      	ldrb	r3, [r3, #4]
 8007ca6:	4619      	mov	r1, r3
 8007ca8:	230a      	movs	r3, #10
 8007caa:	9302      	str	r3, [sp, #8]
 8007cac:	2301      	movs	r3, #1
 8007cae:	9301      	str	r3, [sp, #4]
 8007cb0:	f107 0316 	add.w	r3, r7, #22
 8007cb4:	9300      	str	r3, [sp, #0]
 8007cb6:	2301      	movs	r3, #1
 8007cb8:	2200      	movs	r2, #0
 8007cba:	f7fa ff8d 	bl	8002bd8 <HAL_I2C_Mem_Read>
	} while (rxbuffer != 0xA0);
 8007cbe:	7dbb      	ldrb	r3, [r7, #22]
 8007cc0:	2ba0      	cmp	r3, #160	@ 0xa0
 8007cc2:	d1ec      	bne.n	8007c9e <BNO055_Init+0xda>
	HAL_Delay(50);
 8007cc4:	2032      	movs	r0, #50	@ 0x32
 8007cc6:	f7fa f823 	bl	8001d10 <HAL_Delay>

	txbuffer = Normal_Mode;
 8007cca:	2300      	movs	r3, #0
 8007ccc:	75fb      	strb	r3, [r7, #23]
	HAL_I2C_Mem_Write(bno->hi2cx, bno->address, PWR_MODE, 1, &txbuffer, 1, 10);
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	6818      	ldr	r0, [r3, #0]
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	791b      	ldrb	r3, [r3, #4]
 8007cd6:	4619      	mov	r1, r3
 8007cd8:	230a      	movs	r3, #10
 8007cda:	9302      	str	r3, [sp, #8]
 8007cdc:	2301      	movs	r3, #1
 8007cde:	9301      	str	r3, [sp, #4]
 8007ce0:	f107 0317 	add.w	r3, r7, #23
 8007ce4:	9300      	str	r3, [sp, #0]
 8007ce6:	2301      	movs	r3, #1
 8007ce8:	223e      	movs	r2, #62	@ 0x3e
 8007cea:	f7fa fe61 	bl	80029b0 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8007cee:	200a      	movs	r0, #10
 8007cf0:	f7fa f80e 	bl	8001d10 <HAL_Delay>

	txbuffer = Page_ID_00;
 8007cf4:	2300      	movs	r3, #0
 8007cf6:	75fb      	strb	r3, [r7, #23]
	HAL_I2C_Mem_Write(bno->hi2cx, bno->address, PAGE_ID, 1, &txbuffer, 1, 10);
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	6818      	ldr	r0, [r3, #0]
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	791b      	ldrb	r3, [r3, #4]
 8007d00:	4619      	mov	r1, r3
 8007d02:	230a      	movs	r3, #10
 8007d04:	9302      	str	r3, [sp, #8]
 8007d06:	2301      	movs	r3, #1
 8007d08:	9301      	str	r3, [sp, #4]
 8007d0a:	f107 0317 	add.w	r3, r7, #23
 8007d0e:	9300      	str	r3, [sp, #0]
 8007d10:	2301      	movs	r3, #1
 8007d12:	2207      	movs	r2, #7
 8007d14:	f7fa fe4c 	bl	80029b0 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8007d18:	200a      	movs	r0, #10
 8007d1a:	f7f9 fff9 	bl	8001d10 <HAL_Delay>

	txbuffer = 0x00;
 8007d1e:	2300      	movs	r3, #0
 8007d20:	75fb      	strb	r3, [r7, #23]
	HAL_I2C_Mem_Write(bno->hi2cx, bno->address, SYS_TRIGGER, 1, &txbuffer, 1, 10);
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	6818      	ldr	r0, [r3, #0]
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	791b      	ldrb	r3, [r3, #4]
 8007d2a:	4619      	mov	r1, r3
 8007d2c:	230a      	movs	r3, #10
 8007d2e:	9302      	str	r3, [sp, #8]
 8007d30:	2301      	movs	r3, #1
 8007d32:	9301      	str	r3, [sp, #4]
 8007d34:	f107 0317 	add.w	r3, r7, #23
 8007d38:	9300      	str	r3, [sp, #0]
 8007d3a:	2301      	movs	r3, #1
 8007d3c:	223f      	movs	r2, #63	@ 0x3f
 8007d3e:	f7fa fe37 	bl	80029b0 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8007d42:	200a      	movs	r0, #10
 8007d44:	f7f9 ffe4 	bl	8001d10 <HAL_Delay>

	bno->mode = mode;
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	79ba      	ldrb	r2, [r7, #6]
 8007d4c:	715a      	strb	r2, [r3, #5]
	HAL_I2C_Mem_Write(bno->hi2cx, bno->address, OPR_MODE, 1, &bno->mode, 1, 10);
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	6818      	ldr	r0, [r3, #0]
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	791b      	ldrb	r3, [r3, #4]
 8007d56:	4619      	mov	r1, r3
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	3305      	adds	r3, #5
 8007d5c:	220a      	movs	r2, #10
 8007d5e:	9202      	str	r2, [sp, #8]
 8007d60:	2201      	movs	r2, #1
 8007d62:	9201      	str	r2, [sp, #4]
 8007d64:	9300      	str	r3, [sp, #0]
 8007d66:	2301      	movs	r3, #1
 8007d68:	223d      	movs	r2, #61	@ 0x3d
 8007d6a:	f7fa fe21 	bl	80029b0 <HAL_I2C_Mem_Write>
	HAL_Delay(1000);
 8007d6e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8007d72:	f7f9 ffcd 	bl	8001d10 <HAL_Delay>

	return HAL_OK;
 8007d76:	2300      	movs	r3, #0
}
 8007d78:	4618      	mov	r0, r3
 8007d7a:	3718      	adds	r7, #24
 8007d7c:	46bd      	mov	sp, r7
 8007d7e:	bd80      	pop	{r7, pc}

08007d80 <BNO055_Read_DMA>:
	}

}

void BNO055_Read_DMA(BNO055_Structure *bno, uint8_t fast_mode)
{
 8007d80:	b580      	push	{r7, lr}
 8007d82:	b094      	sub	sp, #80	@ 0x50
 8007d84:	af04      	add	r7, sp, #16
 8007d86:	6078      	str	r0, [r7, #4]
 8007d88:	460b      	mov	r3, r1
 8007d8a:	70fb      	strb	r3, [r7, #3]
	uint8_t read_mode;
	HAL_I2C_Mem_Read(bno->hi2cx, bno->address, OPR_MODE, 1, &read_mode, 1, 10);
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	6818      	ldr	r0, [r3, #0]
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	791b      	ldrb	r3, [r3, #4]
 8007d94:	4619      	mov	r1, r3
 8007d96:	230a      	movs	r3, #10
 8007d98:	9302      	str	r3, [sp, #8]
 8007d9a:	2301      	movs	r3, #1
 8007d9c:	9301      	str	r3, [sp, #4]
 8007d9e:	f107 030b 	add.w	r3, r7, #11
 8007da2:	9300      	str	r3, [sp, #0]
 8007da4:	2301      	movs	r3, #1
 8007da6:	223d      	movs	r2, #61	@ 0x3d
 8007da8:	f7fa ff16 	bl	8002bd8 <HAL_I2C_Mem_Read>
	if (read_mode != bno->mode) {
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	795a      	ldrb	r2, [r3, #5]
 8007db0:	7afb      	ldrb	r3, [r7, #11]
 8007db2:	429a      	cmp	r2, r3
 8007db4:	d00f      	beq.n	8007dd6 <BNO055_Read_DMA+0x56>
		HAL_I2C_Mem_Write(bno->hi2cx, bno->address, OPR_MODE, 1, &bno->mode, 1, 10);
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	6818      	ldr	r0, [r3, #0]
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	791b      	ldrb	r3, [r3, #4]
 8007dbe:	4619      	mov	r1, r3
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	3305      	adds	r3, #5
 8007dc4:	220a      	movs	r2, #10
 8007dc6:	9202      	str	r2, [sp, #8]
 8007dc8:	2201      	movs	r2, #1
 8007dca:	9201      	str	r2, [sp, #4]
 8007dcc:	9300      	str	r3, [sp, #0]
 8007dce:	2301      	movs	r3, #1
 8007dd0:	223d      	movs	r2, #61	@ 0x3d
 8007dd2:	f7fa fded 	bl	80029b0 <HAL_I2C_Mem_Write>
	}

	int16_t raw_accel_x = ((int16_t) bno->RxBuffer[0]) | (((int16_t) bno->RxBuffer[1]) << 8);
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	f893 30b8 	ldrb.w	r3, [r3, #184]	@ 0xb8
 8007ddc:	b21a      	sxth	r2, r3
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	f893 30b9 	ldrb.w	r3, [r3, #185]	@ 0xb9
 8007de4:	021b      	lsls	r3, r3, #8
 8007de6:	b21b      	sxth	r3, r3
 8007de8:	4313      	orrs	r3, r2
 8007dea:	87fb      	strh	r3, [r7, #62]	@ 0x3e
	int16_t raw_accel_y = ((int16_t) bno->RxBuffer[2]) | (((int16_t) bno->RxBuffer[3]) << 8);
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	f893 30ba 	ldrb.w	r3, [r3, #186]	@ 0xba
 8007df2:	b21a      	sxth	r2, r3
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	f893 30bb 	ldrb.w	r3, [r3, #187]	@ 0xbb
 8007dfa:	021b      	lsls	r3, r3, #8
 8007dfc:	b21b      	sxth	r3, r3
 8007dfe:	4313      	orrs	r3, r2
 8007e00:	87bb      	strh	r3, [r7, #60]	@ 0x3c
	int16_t raw_accel_z = ((int16_t) bno->RxBuffer[4]) | (((int16_t) bno->RxBuffer[5]) << 8);
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	f893 30bc 	ldrb.w	r3, [r3, #188]	@ 0xbc
 8007e08:	b21a      	sxth	r2, r3
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	f893 30bd 	ldrb.w	r3, [r3, #189]	@ 0xbd
 8007e10:	021b      	lsls	r3, r3, #8
 8007e12:	b21b      	sxth	r3, r3
 8007e14:	4313      	orrs	r3, r2
 8007e16:	877b      	strh	r3, [r7, #58]	@ 0x3a

	int16_t raw_mag_x = ((int16_t) bno->RxBuffer[6]) | (((int16_t) bno->RxBuffer[7]) << 8);
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	f893 30be 	ldrb.w	r3, [r3, #190]	@ 0xbe
 8007e1e:	b21a      	sxth	r2, r3
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	f893 30bf 	ldrb.w	r3, [r3, #191]	@ 0xbf
 8007e26:	021b      	lsls	r3, r3, #8
 8007e28:	b21b      	sxth	r3, r3
 8007e2a:	4313      	orrs	r3, r2
 8007e2c:	873b      	strh	r3, [r7, #56]	@ 0x38
	int16_t raw_mag_y = ((int16_t) bno->RxBuffer[8]) | (((int16_t) bno->RxBuffer[9]) << 8);
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 8007e34:	b21a      	sxth	r2, r3
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	f893 30c1 	ldrb.w	r3, [r3, #193]	@ 0xc1
 8007e3c:	021b      	lsls	r3, r3, #8
 8007e3e:	b21b      	sxth	r3, r3
 8007e40:	4313      	orrs	r3, r2
 8007e42:	86fb      	strh	r3, [r7, #54]	@ 0x36
	int16_t raw_mag_z = ((int16_t) bno->RxBuffer[10]) | (((int16_t) bno->RxBuffer[11]) << 8);
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	f893 30c2 	ldrb.w	r3, [r3, #194]	@ 0xc2
 8007e4a:	b21a      	sxth	r2, r3
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	f893 30c3 	ldrb.w	r3, [r3, #195]	@ 0xc3
 8007e52:	021b      	lsls	r3, r3, #8
 8007e54:	b21b      	sxth	r3, r3
 8007e56:	4313      	orrs	r3, r2
 8007e58:	86bb      	strh	r3, [r7, #52]	@ 0x34

	int16_t raw_gyro_x = ((int16_t) bno->RxBuffer[12]) | (((int16_t) bno->RxBuffer[13]) << 8);
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	f893 30c4 	ldrb.w	r3, [r3, #196]	@ 0xc4
 8007e60:	b21a      	sxth	r2, r3
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	f893 30c5 	ldrb.w	r3, [r3, #197]	@ 0xc5
 8007e68:	021b      	lsls	r3, r3, #8
 8007e6a:	b21b      	sxth	r3, r3
 8007e6c:	4313      	orrs	r3, r2
 8007e6e:	867b      	strh	r3, [r7, #50]	@ 0x32
	int16_t raw_gyro_y = ((int16_t) bno->RxBuffer[14]) | (((int16_t) bno->RxBuffer[15]) << 8);
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	f893 30c6 	ldrb.w	r3, [r3, #198]	@ 0xc6
 8007e76:	b21a      	sxth	r2, r3
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	f893 30c7 	ldrb.w	r3, [r3, #199]	@ 0xc7
 8007e7e:	021b      	lsls	r3, r3, #8
 8007e80:	b21b      	sxth	r3, r3
 8007e82:	4313      	orrs	r3, r2
 8007e84:	863b      	strh	r3, [r7, #48]	@ 0x30
	int16_t raw_gyro_z = ((int16_t) bno->RxBuffer[16]) | (((int16_t) bno->RxBuffer[17]) << 8);
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	f893 30c8 	ldrb.w	r3, [r3, #200]	@ 0xc8
 8007e8c:	b21a      	sxth	r2, r3
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	f893 30c9 	ldrb.w	r3, [r3, #201]	@ 0xc9
 8007e94:	021b      	lsls	r3, r3, #8
 8007e96:	b21b      	sxth	r3, r3
 8007e98:	4313      	orrs	r3, r2
 8007e9a:	85fb      	strh	r3, [r7, #46]	@ 0x2e

	int16_t raw_euler_yaw = ((int16_t) bno->RxBuffer[18]) | (((int16_t) bno->RxBuffer[19]) << 8);
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	f893 30ca 	ldrb.w	r3, [r3, #202]	@ 0xca
 8007ea2:	b21a      	sxth	r2, r3
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	f893 30cb 	ldrb.w	r3, [r3, #203]	@ 0xcb
 8007eaa:	021b      	lsls	r3, r3, #8
 8007eac:	b21b      	sxth	r3, r3
 8007eae:	4313      	orrs	r3, r2
 8007eb0:	85bb      	strh	r3, [r7, #44]	@ 0x2c
	int16_t raw_euler_roll = ((int16_t) bno->RxBuffer[20]) | (((int16_t) bno->RxBuffer[21]) << 8);
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	f893 30cc 	ldrb.w	r3, [r3, #204]	@ 0xcc
 8007eb8:	b21a      	sxth	r2, r3
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	f893 30cd 	ldrb.w	r3, [r3, #205]	@ 0xcd
 8007ec0:	021b      	lsls	r3, r3, #8
 8007ec2:	b21b      	sxth	r3, r3
 8007ec4:	4313      	orrs	r3, r2
 8007ec6:	857b      	strh	r3, [r7, #42]	@ 0x2a
	int16_t raw_euler_pitch = ((int16_t) bno->RxBuffer[22]) | (((int16_t) bno->RxBuffer[23]) << 8);
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	f893 30ce 	ldrb.w	r3, [r3, #206]	@ 0xce
 8007ece:	b21a      	sxth	r2, r3
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	f893 30cf 	ldrb.w	r3, [r3, #207]	@ 0xcf
 8007ed6:	021b      	lsls	r3, r3, #8
 8007ed8:	b21b      	sxth	r3, r3
 8007eda:	4313      	orrs	r3, r2
 8007edc:	853b      	strh	r3, [r7, #40]	@ 0x28

	int16_t raw_quat_x = ((int16_t) bno->RxBuffer[24]) | (((int16_t) bno->RxBuffer[25]) << 8);
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	f893 30d0 	ldrb.w	r3, [r3, #208]	@ 0xd0
 8007ee4:	b21a      	sxth	r2, r3
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	f893 30d1 	ldrb.w	r3, [r3, #209]	@ 0xd1
 8007eec:	021b      	lsls	r3, r3, #8
 8007eee:	b21b      	sxth	r3, r3
 8007ef0:	4313      	orrs	r3, r2
 8007ef2:	84fb      	strh	r3, [r7, #38]	@ 0x26
	int16_t raw_quat_y = ((int16_t) bno->RxBuffer[26]) | (((int16_t) bno->RxBuffer[27]) << 8);
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	f893 30d2 	ldrb.w	r3, [r3, #210]	@ 0xd2
 8007efa:	b21a      	sxth	r2, r3
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	f893 30d3 	ldrb.w	r3, [r3, #211]	@ 0xd3
 8007f02:	021b      	lsls	r3, r3, #8
 8007f04:	b21b      	sxth	r3, r3
 8007f06:	4313      	orrs	r3, r2
 8007f08:	84bb      	strh	r3, [r7, #36]	@ 0x24
	int16_t raw_quat_z = ((int16_t) bno->RxBuffer[28]) | (((int16_t) bno->RxBuffer[29]) << 8);
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	f893 30d4 	ldrb.w	r3, [r3, #212]	@ 0xd4
 8007f10:	b21a      	sxth	r2, r3
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	f893 30d5 	ldrb.w	r3, [r3, #213]	@ 0xd5
 8007f18:	021b      	lsls	r3, r3, #8
 8007f1a:	b21b      	sxth	r3, r3
 8007f1c:	4313      	orrs	r3, r2
 8007f1e:	847b      	strh	r3, [r7, #34]	@ 0x22
	int16_t raw_quat_w = ((int16_t) bno->RxBuffer[30]) | (((int16_t) bno->RxBuffer[31]) << 8);
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	f893 30d6 	ldrb.w	r3, [r3, #214]	@ 0xd6
 8007f26:	b21a      	sxth	r2, r3
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	f893 30d7 	ldrb.w	r3, [r3, #215]	@ 0xd7
 8007f2e:	021b      	lsls	r3, r3, #8
 8007f30:	b21b      	sxth	r3, r3
 8007f32:	4313      	orrs	r3, r2
 8007f34:	843b      	strh	r3, [r7, #32]

	const double scale = (1.0 / (1 << 14));
 8007f36:	f04f 0200 	mov.w	r2, #0
 8007f3a:	4bc0      	ldr	r3, [pc, #768]	@ (800823c <BNO055_Read_DMA+0x4bc>)
 8007f3c:	e9c7 2306 	strd	r2, r3, [r7, #24]

	bno->accel.x = ((double) raw_accel_x) / 100.0;
 8007f40:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	@ 0x3e
 8007f44:	4618      	mov	r0, r3
 8007f46:	f7f8 fab9 	bl	80004bc <__aeabi_i2d>
 8007f4a:	f04f 0200 	mov.w	r2, #0
 8007f4e:	4bbc      	ldr	r3, [pc, #752]	@ (8008240 <BNO055_Read_DMA+0x4c0>)
 8007f50:	f7f8 fc48 	bl	80007e4 <__aeabi_ddiv>
 8007f54:	4602      	mov	r2, r0
 8007f56:	460b      	mov	r3, r1
 8007f58:	6879      	ldr	r1, [r7, #4]
 8007f5a:	e9c1 2302 	strd	r2, r3, [r1, #8]
	bno->accel.y = ((double) raw_accel_y) / 100.0;
 8007f5e:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	@ 0x3c
 8007f62:	4618      	mov	r0, r3
 8007f64:	f7f8 faaa 	bl	80004bc <__aeabi_i2d>
 8007f68:	f04f 0200 	mov.w	r2, #0
 8007f6c:	4bb4      	ldr	r3, [pc, #720]	@ (8008240 <BNO055_Read_DMA+0x4c0>)
 8007f6e:	f7f8 fc39 	bl	80007e4 <__aeabi_ddiv>
 8007f72:	4602      	mov	r2, r0
 8007f74:	460b      	mov	r3, r1
 8007f76:	6879      	ldr	r1, [r7, #4]
 8007f78:	e9c1 2304 	strd	r2, r3, [r1, #16]
	bno->accel.z = ((double) raw_accel_z) / 100.0;
 8007f7c:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	@ 0x3a
 8007f80:	4618      	mov	r0, r3
 8007f82:	f7f8 fa9b 	bl	80004bc <__aeabi_i2d>
 8007f86:	f04f 0200 	mov.w	r2, #0
 8007f8a:	4bad      	ldr	r3, [pc, #692]	@ (8008240 <BNO055_Read_DMA+0x4c0>)
 8007f8c:	f7f8 fc2a 	bl	80007e4 <__aeabi_ddiv>
 8007f90:	4602      	mov	r2, r0
 8007f92:	460b      	mov	r3, r1
 8007f94:	6879      	ldr	r1, [r7, #4]
 8007f96:	e9c1 2306 	strd	r2, r3, [r1, #24]

	bno->mag.x = ((double) raw_mag_x) / 16.0;
 8007f9a:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	@ 0x38
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	f7f8 fa8c 	bl	80004bc <__aeabi_i2d>
 8007fa4:	f04f 0200 	mov.w	r2, #0
 8007fa8:	4ba6      	ldr	r3, [pc, #664]	@ (8008244 <BNO055_Read_DMA+0x4c4>)
 8007faa:	f7f8 fc1b 	bl	80007e4 <__aeabi_ddiv>
 8007fae:	4602      	mov	r2, r0
 8007fb0:	460b      	mov	r3, r1
 8007fb2:	6879      	ldr	r1, [r7, #4]
 8007fb4:	e9c1 2308 	strd	r2, r3, [r1, #32]
	bno->mag.y = ((double) raw_mag_y) / 16.0;
 8007fb8:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8007fbc:	4618      	mov	r0, r3
 8007fbe:	f7f8 fa7d 	bl	80004bc <__aeabi_i2d>
 8007fc2:	f04f 0200 	mov.w	r2, #0
 8007fc6:	4b9f      	ldr	r3, [pc, #636]	@ (8008244 <BNO055_Read_DMA+0x4c4>)
 8007fc8:	f7f8 fc0c 	bl	80007e4 <__aeabi_ddiv>
 8007fcc:	4602      	mov	r2, r0
 8007fce:	460b      	mov	r3, r1
 8007fd0:	6879      	ldr	r1, [r7, #4]
 8007fd2:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
	bno->mag.z = ((double) raw_mag_z) / 16.0;
 8007fd6:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	@ 0x34
 8007fda:	4618      	mov	r0, r3
 8007fdc:	f7f8 fa6e 	bl	80004bc <__aeabi_i2d>
 8007fe0:	f04f 0200 	mov.w	r2, #0
 8007fe4:	4b97      	ldr	r3, [pc, #604]	@ (8008244 <BNO055_Read_DMA+0x4c4>)
 8007fe6:	f7f8 fbfd 	bl	80007e4 <__aeabi_ddiv>
 8007fea:	4602      	mov	r2, r0
 8007fec:	460b      	mov	r3, r1
 8007fee:	6879      	ldr	r1, [r7, #4]
 8007ff0:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30

	bno->gyro.x = ((double) raw_gyro_x) / 16.0;
 8007ff4:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 8007ff8:	4618      	mov	r0, r3
 8007ffa:	f7f8 fa5f 	bl	80004bc <__aeabi_i2d>
 8007ffe:	f04f 0200 	mov.w	r2, #0
 8008002:	4b90      	ldr	r3, [pc, #576]	@ (8008244 <BNO055_Read_DMA+0x4c4>)
 8008004:	f7f8 fbee 	bl	80007e4 <__aeabi_ddiv>
 8008008:	4602      	mov	r2, r0
 800800a:	460b      	mov	r3, r1
 800800c:	6879      	ldr	r1, [r7, #4]
 800800e:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
	bno->gyro.y = ((double) raw_gyro_y) / 16.0;
 8008012:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	@ 0x30
 8008016:	4618      	mov	r0, r3
 8008018:	f7f8 fa50 	bl	80004bc <__aeabi_i2d>
 800801c:	f04f 0200 	mov.w	r2, #0
 8008020:	4b88      	ldr	r3, [pc, #544]	@ (8008244 <BNO055_Read_DMA+0x4c4>)
 8008022:	f7f8 fbdf 	bl	80007e4 <__aeabi_ddiv>
 8008026:	4602      	mov	r2, r0
 8008028:	460b      	mov	r3, r1
 800802a:	6879      	ldr	r1, [r7, #4]
 800802c:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40
	bno->gyro.z = ((double) raw_gyro_z) / 16.0;
 8008030:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 8008034:	4618      	mov	r0, r3
 8008036:	f7f8 fa41 	bl	80004bc <__aeabi_i2d>
 800803a:	f04f 0200 	mov.w	r2, #0
 800803e:	4b81      	ldr	r3, [pc, #516]	@ (8008244 <BNO055_Read_DMA+0x4c4>)
 8008040:	f7f8 fbd0 	bl	80007e4 <__aeabi_ddiv>
 8008044:	4602      	mov	r2, r0
 8008046:	460b      	mov	r3, r1
 8008048:	6879      	ldr	r1, [r7, #4]
 800804a:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48

	bno->euler.yaw = ((double) raw_euler_yaw) / 16.0;
 800804e:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 8008052:	4618      	mov	r0, r3
 8008054:	f7f8 fa32 	bl	80004bc <__aeabi_i2d>
 8008058:	f04f 0200 	mov.w	r2, #0
 800805c:	4b79      	ldr	r3, [pc, #484]	@ (8008244 <BNO055_Read_DMA+0x4c4>)
 800805e:	f7f8 fbc1 	bl	80007e4 <__aeabi_ddiv>
 8008062:	4602      	mov	r2, r0
 8008064:	460b      	mov	r3, r1
 8008066:	6879      	ldr	r1, [r7, #4]
 8008068:	e9c1 2318 	strd	r2, r3, [r1, #96]	@ 0x60
	bno->euler.roll = ((double) raw_euler_roll) / 16.0;
 800806c:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 8008070:	4618      	mov	r0, r3
 8008072:	f7f8 fa23 	bl	80004bc <__aeabi_i2d>
 8008076:	f04f 0200 	mov.w	r2, #0
 800807a:	4b72      	ldr	r3, [pc, #456]	@ (8008244 <BNO055_Read_DMA+0x4c4>)
 800807c:	f7f8 fbb2 	bl	80007e4 <__aeabi_ddiv>
 8008080:	4602      	mov	r2, r0
 8008082:	460b      	mov	r3, r1
 8008084:	6879      	ldr	r1, [r7, #4]
 8008086:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
	bno->euler.pitch = ((double) raw_euler_pitch) / 16.0;
 800808a:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 800808e:	4618      	mov	r0, r3
 8008090:	f7f8 fa14 	bl	80004bc <__aeabi_i2d>
 8008094:	f04f 0200 	mov.w	r2, #0
 8008098:	4b6a      	ldr	r3, [pc, #424]	@ (8008244 <BNO055_Read_DMA+0x4c4>)
 800809a:	f7f8 fba3 	bl	80007e4 <__aeabi_ddiv>
 800809e:	4602      	mov	r2, r0
 80080a0:	460b      	mov	r3, r1
 80080a2:	6879      	ldr	r1, [r7, #4]
 80080a4:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58

	bno->quat.x = raw_quat_x * scale;
 80080a8:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 80080ac:	4618      	mov	r0, r3
 80080ae:	f7f8 fa05 	bl	80004bc <__aeabi_i2d>
 80080b2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80080b6:	f7f8 fa6b 	bl	8000590 <__aeabi_dmul>
 80080ba:	4602      	mov	r2, r0
 80080bc:	460b      	mov	r3, r1
 80080be:	6879      	ldr	r1, [r7, #4]
 80080c0:	e9c1 231a 	strd	r2, r3, [r1, #104]	@ 0x68
	bno->quat.y = raw_quat_y * scale;
 80080c4:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 80080c8:	4618      	mov	r0, r3
 80080ca:	f7f8 f9f7 	bl	80004bc <__aeabi_i2d>
 80080ce:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80080d2:	f7f8 fa5d 	bl	8000590 <__aeabi_dmul>
 80080d6:	4602      	mov	r2, r0
 80080d8:	460b      	mov	r3, r1
 80080da:	6879      	ldr	r1, [r7, #4]
 80080dc:	e9c1 231c 	strd	r2, r3, [r1, #112]	@ 0x70
	bno->quat.z = raw_quat_z * scale;
 80080e0:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 80080e4:	4618      	mov	r0, r3
 80080e6:	f7f8 f9e9 	bl	80004bc <__aeabi_i2d>
 80080ea:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80080ee:	f7f8 fa4f 	bl	8000590 <__aeabi_dmul>
 80080f2:	4602      	mov	r2, r0
 80080f4:	460b      	mov	r3, r1
 80080f6:	6879      	ldr	r1, [r7, #4]
 80080f8:	e9c1 231e 	strd	r2, r3, [r1, #120]	@ 0x78
	bno->quat.w = raw_quat_w * scale;
 80080fc:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8008100:	4618      	mov	r0, r3
 8008102:	f7f8 f9db 	bl	80004bc <__aeabi_i2d>
 8008106:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800810a:	f7f8 fa41 	bl	8000590 <__aeabi_dmul>
 800810e:	4602      	mov	r2, r0
 8008110:	460b      	mov	r3, r1
 8008112:	6879      	ldr	r1, [r7, #4]
 8008114:	e9c1 2320 	strd	r2, r3, [r1, #128]	@ 0x80

	if (!fast_mode) {
 8008118:	78fb      	ldrb	r3, [r7, #3]
 800811a:	2b00      	cmp	r3, #0
 800811c:	f040 80b2 	bne.w	8008284 <BNO055_Read_DMA+0x504>
		int16_t raw_lin_acc_x = ((int16_t) bno->RxBuffer[32]) | (((int16_t) bno->RxBuffer[33]) << 8);
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	f893 30d8 	ldrb.w	r3, [r3, #216]	@ 0xd8
 8008126:	b21a      	sxth	r2, r3
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	f893 30d9 	ldrb.w	r3, [r3, #217]	@ 0xd9
 800812e:	021b      	lsls	r3, r3, #8
 8008130:	b21b      	sxth	r3, r3
 8008132:	4313      	orrs	r3, r2
 8008134:	82fb      	strh	r3, [r7, #22]
		int16_t raw_lin_acc_y = ((int16_t) bno->RxBuffer[34]) | (((int16_t) bno->RxBuffer[35]) << 8);
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	f893 30da 	ldrb.w	r3, [r3, #218]	@ 0xda
 800813c:	b21a      	sxth	r2, r3
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	f893 30db 	ldrb.w	r3, [r3, #219]	@ 0xdb
 8008144:	021b      	lsls	r3, r3, #8
 8008146:	b21b      	sxth	r3, r3
 8008148:	4313      	orrs	r3, r2
 800814a:	82bb      	strh	r3, [r7, #20]
		int16_t raw_lin_acc_z = ((int16_t) bno->RxBuffer[36]) | (((int16_t) bno->RxBuffer[37]) << 8);
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	f893 30dc 	ldrb.w	r3, [r3, #220]	@ 0xdc
 8008152:	b21a      	sxth	r2, r3
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	f893 30dd 	ldrb.w	r3, [r3, #221]	@ 0xdd
 800815a:	021b      	lsls	r3, r3, #8
 800815c:	b21b      	sxth	r3, r3
 800815e:	4313      	orrs	r3, r2
 8008160:	827b      	strh	r3, [r7, #18]

		int16_t raw_grav_x = ((int16_t) bno->RxBuffer[38]) | (((int16_t) bno->RxBuffer[39]) << 8);
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	f893 30de 	ldrb.w	r3, [r3, #222]	@ 0xde
 8008168:	b21a      	sxth	r2, r3
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	f893 30df 	ldrb.w	r3, [r3, #223]	@ 0xdf
 8008170:	021b      	lsls	r3, r3, #8
 8008172:	b21b      	sxth	r3, r3
 8008174:	4313      	orrs	r3, r2
 8008176:	823b      	strh	r3, [r7, #16]
		int16_t raw_grav_y = ((int16_t) bno->RxBuffer[40]) | (((int16_t) bno->RxBuffer[41]) << 8);
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	f893 30e0 	ldrb.w	r3, [r3, #224]	@ 0xe0
 800817e:	b21a      	sxth	r2, r3
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	f893 30e1 	ldrb.w	r3, [r3, #225]	@ 0xe1
 8008186:	021b      	lsls	r3, r3, #8
 8008188:	b21b      	sxth	r3, r3
 800818a:	4313      	orrs	r3, r2
 800818c:	81fb      	strh	r3, [r7, #14]
		int16_t raw_grav_z = ((int16_t) bno->RxBuffer[42]) | (((int16_t) bno->RxBuffer[43]) << 8);
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	f893 30e2 	ldrb.w	r3, [r3, #226]	@ 0xe2
 8008194:	b21a      	sxth	r2, r3
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	f893 30e3 	ldrb.w	r3, [r3, #227]	@ 0xe3
 800819c:	021b      	lsls	r3, r3, #8
 800819e:	b21b      	sxth	r3, r3
 80081a0:	4313      	orrs	r3, r2
 80081a2:	81bb      	strh	r3, [r7, #12]

		bno->lin_acc.x = ((double) raw_lin_acc_x) / 100.0;
 80081a4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80081a8:	4618      	mov	r0, r3
 80081aa:	f7f8 f987 	bl	80004bc <__aeabi_i2d>
 80081ae:	f04f 0200 	mov.w	r2, #0
 80081b2:	4b23      	ldr	r3, [pc, #140]	@ (8008240 <BNO055_Read_DMA+0x4c0>)
 80081b4:	f7f8 fb16 	bl	80007e4 <__aeabi_ddiv>
 80081b8:	4602      	mov	r2, r0
 80081ba:	460b      	mov	r3, r1
 80081bc:	6879      	ldr	r1, [r7, #4]
 80081be:	e9c1 2322 	strd	r2, r3, [r1, #136]	@ 0x88
		bno->lin_acc.y = ((double) raw_lin_acc_y) / 100.0;
 80081c2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80081c6:	4618      	mov	r0, r3
 80081c8:	f7f8 f978 	bl	80004bc <__aeabi_i2d>
 80081cc:	f04f 0200 	mov.w	r2, #0
 80081d0:	4b1b      	ldr	r3, [pc, #108]	@ (8008240 <BNO055_Read_DMA+0x4c0>)
 80081d2:	f7f8 fb07 	bl	80007e4 <__aeabi_ddiv>
 80081d6:	4602      	mov	r2, r0
 80081d8:	460b      	mov	r3, r1
 80081da:	6879      	ldr	r1, [r7, #4]
 80081dc:	e9c1 2324 	strd	r2, r3, [r1, #144]	@ 0x90
		bno->lin_acc.z = ((double) raw_lin_acc_z) / 100.0;
 80081e0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80081e4:	4618      	mov	r0, r3
 80081e6:	f7f8 f969 	bl	80004bc <__aeabi_i2d>
 80081ea:	f04f 0200 	mov.w	r2, #0
 80081ee:	4b14      	ldr	r3, [pc, #80]	@ (8008240 <BNO055_Read_DMA+0x4c0>)
 80081f0:	f7f8 faf8 	bl	80007e4 <__aeabi_ddiv>
 80081f4:	4602      	mov	r2, r0
 80081f6:	460b      	mov	r3, r1
 80081f8:	6879      	ldr	r1, [r7, #4]
 80081fa:	e9c1 2326 	strd	r2, r3, [r1, #152]	@ 0x98

		bno->grav.x = ((double) raw_grav_x) / 100.0;
 80081fe:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8008202:	4618      	mov	r0, r3
 8008204:	f7f8 f95a 	bl	80004bc <__aeabi_i2d>
 8008208:	f04f 0200 	mov.w	r2, #0
 800820c:	4b0c      	ldr	r3, [pc, #48]	@ (8008240 <BNO055_Read_DMA+0x4c0>)
 800820e:	f7f8 fae9 	bl	80007e4 <__aeabi_ddiv>
 8008212:	4602      	mov	r2, r0
 8008214:	460b      	mov	r3, r1
 8008216:	6879      	ldr	r1, [r7, #4]
 8008218:	e9c1 2328 	strd	r2, r3, [r1, #160]	@ 0xa0
		bno->grav.y = ((double) raw_grav_y) / 100.0;
 800821c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8008220:	4618      	mov	r0, r3
 8008222:	f7f8 f94b 	bl	80004bc <__aeabi_i2d>
 8008226:	f04f 0200 	mov.w	r2, #0
 800822a:	4b05      	ldr	r3, [pc, #20]	@ (8008240 <BNO055_Read_DMA+0x4c0>)
 800822c:	f7f8 fada 	bl	80007e4 <__aeabi_ddiv>
 8008230:	4602      	mov	r2, r0
 8008232:	460b      	mov	r3, r1
 8008234:	6879      	ldr	r1, [r7, #4]
 8008236:	e9c1 232a 	strd	r2, r3, [r1, #168]	@ 0xa8
 800823a:	e005      	b.n	8008248 <BNO055_Read_DMA+0x4c8>
 800823c:	3f100000 	.word	0x3f100000
 8008240:	40590000 	.word	0x40590000
 8008244:	40300000 	.word	0x40300000
		bno->grav.z = ((double) raw_grav_z) / 100.0;
 8008248:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800824c:	4618      	mov	r0, r3
 800824e:	f7f8 f935 	bl	80004bc <__aeabi_i2d>
 8008252:	f04f 0200 	mov.w	r2, #0
 8008256:	4b14      	ldr	r3, [pc, #80]	@ (80082a8 <BNO055_Read_DMA+0x528>)
 8008258:	f7f8 fac4 	bl	80007e4 <__aeabi_ddiv>
 800825c:	4602      	mov	r2, r0
 800825e:	460b      	mov	r3, r1
 8008260:	6879      	ldr	r1, [r7, #4]
 8008262:	e9c1 232c 	strd	r2, r3, [r1, #176]	@ 0xb0

		HAL_I2C_Mem_Read_DMA(bno->hi2cx, bno->address, ACC_DATA_X_LSB, 1, bno->RxBuffer, 44);
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	6818      	ldr	r0, [r3, #0]
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	791b      	ldrb	r3, [r3, #4]
 800826e:	4619      	mov	r1, r3
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	33b8      	adds	r3, #184	@ 0xb8
 8008274:	222c      	movs	r2, #44	@ 0x2c
 8008276:	9201      	str	r2, [sp, #4]
 8008278:	9300      	str	r3, [sp, #0]
 800827a:	2301      	movs	r3, #1
 800827c:	2208      	movs	r2, #8
 800827e:	f7fa fdc5 	bl	8002e0c <HAL_I2C_Mem_Read_DMA>
	} else {
		HAL_I2C_Mem_Read_DMA(bno->hi2cx, bno->address, ACC_DATA_X_LSB, 1, bno->RxBuffer, 32);
	}
}
 8008282:	e00d      	b.n	80082a0 <BNO055_Read_DMA+0x520>
		HAL_I2C_Mem_Read_DMA(bno->hi2cx, bno->address, ACC_DATA_X_LSB, 1, bno->RxBuffer, 32);
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	6818      	ldr	r0, [r3, #0]
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	791b      	ldrb	r3, [r3, #4]
 800828c:	4619      	mov	r1, r3
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	33b8      	adds	r3, #184	@ 0xb8
 8008292:	2220      	movs	r2, #32
 8008294:	9201      	str	r2, [sp, #4]
 8008296:	9300      	str	r3, [sp, #0]
 8008298:	2301      	movs	r3, #1
 800829a:	2208      	movs	r2, #8
 800829c:	f7fa fdb6 	bl	8002e0c <HAL_I2C_Mem_Read_DMA>
}
 80082a0:	bf00      	nop
 80082a2:	3740      	adds	r7, #64	@ 0x40
 80082a4:	46bd      	mov	sp, r7
 80082a6:	bd80      	pop	{r7, pc}
 80082a8:	40590000 	.word	0x40590000

080082ac <memset>:
 80082ac:	4402      	add	r2, r0
 80082ae:	4603      	mov	r3, r0
 80082b0:	4293      	cmp	r3, r2
 80082b2:	d100      	bne.n	80082b6 <memset+0xa>
 80082b4:	4770      	bx	lr
 80082b6:	f803 1b01 	strb.w	r1, [r3], #1
 80082ba:	e7f9      	b.n	80082b0 <memset+0x4>

080082bc <__libc_init_array>:
 80082bc:	b570      	push	{r4, r5, r6, lr}
 80082be:	4d0d      	ldr	r5, [pc, #52]	@ (80082f4 <__libc_init_array+0x38>)
 80082c0:	4c0d      	ldr	r4, [pc, #52]	@ (80082f8 <__libc_init_array+0x3c>)
 80082c2:	1b64      	subs	r4, r4, r5
 80082c4:	10a4      	asrs	r4, r4, #2
 80082c6:	2600      	movs	r6, #0
 80082c8:	42a6      	cmp	r6, r4
 80082ca:	d109      	bne.n	80082e0 <__libc_init_array+0x24>
 80082cc:	4d0b      	ldr	r5, [pc, #44]	@ (80082fc <__libc_init_array+0x40>)
 80082ce:	4c0c      	ldr	r4, [pc, #48]	@ (8008300 <__libc_init_array+0x44>)
 80082d0:	f000 f818 	bl	8008304 <_init>
 80082d4:	1b64      	subs	r4, r4, r5
 80082d6:	10a4      	asrs	r4, r4, #2
 80082d8:	2600      	movs	r6, #0
 80082da:	42a6      	cmp	r6, r4
 80082dc:	d105      	bne.n	80082ea <__libc_init_array+0x2e>
 80082de:	bd70      	pop	{r4, r5, r6, pc}
 80082e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80082e4:	4798      	blx	r3
 80082e6:	3601      	adds	r6, #1
 80082e8:	e7ee      	b.n	80082c8 <__libc_init_array+0xc>
 80082ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80082ee:	4798      	blx	r3
 80082f0:	3601      	adds	r6, #1
 80082f2:	e7f2      	b.n	80082da <__libc_init_array+0x1e>
 80082f4:	08008364 	.word	0x08008364
 80082f8:	08008364 	.word	0x08008364
 80082fc:	08008364 	.word	0x08008364
 8008300:	08008368 	.word	0x08008368

08008304 <_init>:
 8008304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008306:	bf00      	nop
 8008308:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800830a:	bc08      	pop	{r3}
 800830c:	469e      	mov	lr, r3
 800830e:	4770      	bx	lr

08008310 <_fini>:
 8008310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008312:	bf00      	nop
 8008314:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008316:	bc08      	pop	{r3}
 8008318:	469e      	mov	lr, r3
 800831a:	4770      	bx	lr
