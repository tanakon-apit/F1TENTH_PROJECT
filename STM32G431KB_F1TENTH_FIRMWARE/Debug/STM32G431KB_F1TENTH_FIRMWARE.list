
STM32G431KB_F1TENTH_FIRMWARE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005f5c  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08006134  08006134  00007134  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006174  08006174  00008024  2**0
                  CONTENTS
  4 .ARM          00000008  08006174  08006174  00007174  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800617c  0800617c  00008024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800617c  0800617c  0000717c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006180  08006180  00007180  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  08006184  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002e8  20000024  080061a8  00008024  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000030c  080061a8  0000830c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008024  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018bfb  00000000  00000000  00008054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000334e  00000000  00000000  00020c4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001588  00000000  00000000  00023fa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000010de  00000000  00000000  00025528  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f395  00000000  00000000  00026606  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c822  00000000  00000000  0004599b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cb07d  00000000  00000000  000621bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012d23a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005cfc  00000000  00000000  0012d280  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000091  00000000  00000000  00132f7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000024 	.word	0x20000024
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800611c 	.word	0x0800611c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000028 	.word	0x20000028
 8000214:	0800611c 	.word	0x0800611c

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2uiz>:
 8000ac4:	004a      	lsls	r2, r1, #1
 8000ac6:	d211      	bcs.n	8000aec <__aeabi_d2uiz+0x28>
 8000ac8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000acc:	d211      	bcs.n	8000af2 <__aeabi_d2uiz+0x2e>
 8000ace:	d50d      	bpl.n	8000aec <__aeabi_d2uiz+0x28>
 8000ad0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ad4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad8:	d40e      	bmi.n	8000af8 <__aeabi_d2uiz+0x34>
 8000ada:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ade:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ae2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aea:	4770      	bx	lr
 8000aec:	f04f 0000 	mov.w	r0, #0
 8000af0:	4770      	bx	lr
 8000af2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000af6:	d102      	bne.n	8000afe <__aeabi_d2uiz+0x3a>
 8000af8:	f04f 30ff 	mov.w	r0, #4294967295
 8000afc:	4770      	bx	lr
 8000afe:	f04f 0000 	mov.w	r0, #0
 8000b02:	4770      	bx	lr

08000b04 <__aeabi_d2f>:
 8000b04:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b08:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b0c:	bf24      	itt	cs
 8000b0e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b12:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b16:	d90d      	bls.n	8000b34 <__aeabi_d2f+0x30>
 8000b18:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b1c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b20:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b24:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b28:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b2c:	bf08      	it	eq
 8000b2e:	f020 0001 	biceq.w	r0, r0, #1
 8000b32:	4770      	bx	lr
 8000b34:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b38:	d121      	bne.n	8000b7e <__aeabi_d2f+0x7a>
 8000b3a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b3e:	bfbc      	itt	lt
 8000b40:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b44:	4770      	bxlt	lr
 8000b46:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b4a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b4e:	f1c2 0218 	rsb	r2, r2, #24
 8000b52:	f1c2 0c20 	rsb	ip, r2, #32
 8000b56:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b5a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b5e:	bf18      	it	ne
 8000b60:	f040 0001 	orrne.w	r0, r0, #1
 8000b64:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b68:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b6c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b70:	ea40 000c 	orr.w	r0, r0, ip
 8000b74:	fa23 f302 	lsr.w	r3, r3, r2
 8000b78:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b7c:	e7cc      	b.n	8000b18 <__aeabi_d2f+0x14>
 8000b7e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b82:	d107      	bne.n	8000b94 <__aeabi_d2f+0x90>
 8000b84:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b88:	bf1e      	ittt	ne
 8000b8a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b8e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b92:	4770      	bxne	lr
 8000b94:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b9c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop

08000ba4 <__aeabi_uldivmod>:
 8000ba4:	b953      	cbnz	r3, 8000bbc <__aeabi_uldivmod+0x18>
 8000ba6:	b94a      	cbnz	r2, 8000bbc <__aeabi_uldivmod+0x18>
 8000ba8:	2900      	cmp	r1, #0
 8000baa:	bf08      	it	eq
 8000bac:	2800      	cmpeq	r0, #0
 8000bae:	bf1c      	itt	ne
 8000bb0:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb4:	f04f 30ff 	movne.w	r0, #4294967295
 8000bb8:	f000 b96a 	b.w	8000e90 <__aeabi_idiv0>
 8000bbc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc4:	f000 f806 	bl	8000bd4 <__udivmoddi4>
 8000bc8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bcc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd0:	b004      	add	sp, #16
 8000bd2:	4770      	bx	lr

08000bd4 <__udivmoddi4>:
 8000bd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bd8:	9d08      	ldr	r5, [sp, #32]
 8000bda:	460c      	mov	r4, r1
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d14e      	bne.n	8000c7e <__udivmoddi4+0xaa>
 8000be0:	4694      	mov	ip, r2
 8000be2:	458c      	cmp	ip, r1
 8000be4:	4686      	mov	lr, r0
 8000be6:	fab2 f282 	clz	r2, r2
 8000bea:	d962      	bls.n	8000cb2 <__udivmoddi4+0xde>
 8000bec:	b14a      	cbz	r2, 8000c02 <__udivmoddi4+0x2e>
 8000bee:	f1c2 0320 	rsb	r3, r2, #32
 8000bf2:	4091      	lsls	r1, r2
 8000bf4:	fa20 f303 	lsr.w	r3, r0, r3
 8000bf8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bfc:	4319      	orrs	r1, r3
 8000bfe:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c02:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c06:	fa1f f68c 	uxth.w	r6, ip
 8000c0a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c0e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c12:	fb07 1114 	mls	r1, r7, r4, r1
 8000c16:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1a:	fb04 f106 	mul.w	r1, r4, r6
 8000c1e:	4299      	cmp	r1, r3
 8000c20:	d90a      	bls.n	8000c38 <__udivmoddi4+0x64>
 8000c22:	eb1c 0303 	adds.w	r3, ip, r3
 8000c26:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c2a:	f080 8112 	bcs.w	8000e52 <__udivmoddi4+0x27e>
 8000c2e:	4299      	cmp	r1, r3
 8000c30:	f240 810f 	bls.w	8000e52 <__udivmoddi4+0x27e>
 8000c34:	3c02      	subs	r4, #2
 8000c36:	4463      	add	r3, ip
 8000c38:	1a59      	subs	r1, r3, r1
 8000c3a:	fa1f f38e 	uxth.w	r3, lr
 8000c3e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c42:	fb07 1110 	mls	r1, r7, r0, r1
 8000c46:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c4a:	fb00 f606 	mul.w	r6, r0, r6
 8000c4e:	429e      	cmp	r6, r3
 8000c50:	d90a      	bls.n	8000c68 <__udivmoddi4+0x94>
 8000c52:	eb1c 0303 	adds.w	r3, ip, r3
 8000c56:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c5a:	f080 80fc 	bcs.w	8000e56 <__udivmoddi4+0x282>
 8000c5e:	429e      	cmp	r6, r3
 8000c60:	f240 80f9 	bls.w	8000e56 <__udivmoddi4+0x282>
 8000c64:	4463      	add	r3, ip
 8000c66:	3802      	subs	r0, #2
 8000c68:	1b9b      	subs	r3, r3, r6
 8000c6a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c6e:	2100      	movs	r1, #0
 8000c70:	b11d      	cbz	r5, 8000c7a <__udivmoddi4+0xa6>
 8000c72:	40d3      	lsrs	r3, r2
 8000c74:	2200      	movs	r2, #0
 8000c76:	e9c5 3200 	strd	r3, r2, [r5]
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d905      	bls.n	8000c8e <__udivmoddi4+0xba>
 8000c82:	b10d      	cbz	r5, 8000c88 <__udivmoddi4+0xb4>
 8000c84:	e9c5 0100 	strd	r0, r1, [r5]
 8000c88:	2100      	movs	r1, #0
 8000c8a:	4608      	mov	r0, r1
 8000c8c:	e7f5      	b.n	8000c7a <__udivmoddi4+0xa6>
 8000c8e:	fab3 f183 	clz	r1, r3
 8000c92:	2900      	cmp	r1, #0
 8000c94:	d146      	bne.n	8000d24 <__udivmoddi4+0x150>
 8000c96:	42a3      	cmp	r3, r4
 8000c98:	d302      	bcc.n	8000ca0 <__udivmoddi4+0xcc>
 8000c9a:	4290      	cmp	r0, r2
 8000c9c:	f0c0 80f0 	bcc.w	8000e80 <__udivmoddi4+0x2ac>
 8000ca0:	1a86      	subs	r6, r0, r2
 8000ca2:	eb64 0303 	sbc.w	r3, r4, r3
 8000ca6:	2001      	movs	r0, #1
 8000ca8:	2d00      	cmp	r5, #0
 8000caa:	d0e6      	beq.n	8000c7a <__udivmoddi4+0xa6>
 8000cac:	e9c5 6300 	strd	r6, r3, [r5]
 8000cb0:	e7e3      	b.n	8000c7a <__udivmoddi4+0xa6>
 8000cb2:	2a00      	cmp	r2, #0
 8000cb4:	f040 8090 	bne.w	8000dd8 <__udivmoddi4+0x204>
 8000cb8:	eba1 040c 	sub.w	r4, r1, ip
 8000cbc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cc0:	fa1f f78c 	uxth.w	r7, ip
 8000cc4:	2101      	movs	r1, #1
 8000cc6:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cca:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cce:	fb08 4416 	mls	r4, r8, r6, r4
 8000cd2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cd6:	fb07 f006 	mul.w	r0, r7, r6
 8000cda:	4298      	cmp	r0, r3
 8000cdc:	d908      	bls.n	8000cf0 <__udivmoddi4+0x11c>
 8000cde:	eb1c 0303 	adds.w	r3, ip, r3
 8000ce2:	f106 34ff 	add.w	r4, r6, #4294967295
 8000ce6:	d202      	bcs.n	8000cee <__udivmoddi4+0x11a>
 8000ce8:	4298      	cmp	r0, r3
 8000cea:	f200 80cd 	bhi.w	8000e88 <__udivmoddi4+0x2b4>
 8000cee:	4626      	mov	r6, r4
 8000cf0:	1a1c      	subs	r4, r3, r0
 8000cf2:	fa1f f38e 	uxth.w	r3, lr
 8000cf6:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cfa:	fb08 4410 	mls	r4, r8, r0, r4
 8000cfe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d02:	fb00 f707 	mul.w	r7, r0, r7
 8000d06:	429f      	cmp	r7, r3
 8000d08:	d908      	bls.n	8000d1c <__udivmoddi4+0x148>
 8000d0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d12:	d202      	bcs.n	8000d1a <__udivmoddi4+0x146>
 8000d14:	429f      	cmp	r7, r3
 8000d16:	f200 80b0 	bhi.w	8000e7a <__udivmoddi4+0x2a6>
 8000d1a:	4620      	mov	r0, r4
 8000d1c:	1bdb      	subs	r3, r3, r7
 8000d1e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d22:	e7a5      	b.n	8000c70 <__udivmoddi4+0x9c>
 8000d24:	f1c1 0620 	rsb	r6, r1, #32
 8000d28:	408b      	lsls	r3, r1
 8000d2a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d2e:	431f      	orrs	r7, r3
 8000d30:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d34:	fa04 f301 	lsl.w	r3, r4, r1
 8000d38:	ea43 030c 	orr.w	r3, r3, ip
 8000d3c:	40f4      	lsrs	r4, r6
 8000d3e:	fa00 f801 	lsl.w	r8, r0, r1
 8000d42:	0c38      	lsrs	r0, r7, #16
 8000d44:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d48:	fbb4 fef0 	udiv	lr, r4, r0
 8000d4c:	fa1f fc87 	uxth.w	ip, r7
 8000d50:	fb00 441e 	mls	r4, r0, lr, r4
 8000d54:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d58:	fb0e f90c 	mul.w	r9, lr, ip
 8000d5c:	45a1      	cmp	r9, r4
 8000d5e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d62:	d90a      	bls.n	8000d7a <__udivmoddi4+0x1a6>
 8000d64:	193c      	adds	r4, r7, r4
 8000d66:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d6a:	f080 8084 	bcs.w	8000e76 <__udivmoddi4+0x2a2>
 8000d6e:	45a1      	cmp	r9, r4
 8000d70:	f240 8081 	bls.w	8000e76 <__udivmoddi4+0x2a2>
 8000d74:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d78:	443c      	add	r4, r7
 8000d7a:	eba4 0409 	sub.w	r4, r4, r9
 8000d7e:	fa1f f983 	uxth.w	r9, r3
 8000d82:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d86:	fb00 4413 	mls	r4, r0, r3, r4
 8000d8a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d8e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d92:	45a4      	cmp	ip, r4
 8000d94:	d907      	bls.n	8000da6 <__udivmoddi4+0x1d2>
 8000d96:	193c      	adds	r4, r7, r4
 8000d98:	f103 30ff 	add.w	r0, r3, #4294967295
 8000d9c:	d267      	bcs.n	8000e6e <__udivmoddi4+0x29a>
 8000d9e:	45a4      	cmp	ip, r4
 8000da0:	d965      	bls.n	8000e6e <__udivmoddi4+0x29a>
 8000da2:	3b02      	subs	r3, #2
 8000da4:	443c      	add	r4, r7
 8000da6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000daa:	fba0 9302 	umull	r9, r3, r0, r2
 8000dae:	eba4 040c 	sub.w	r4, r4, ip
 8000db2:	429c      	cmp	r4, r3
 8000db4:	46ce      	mov	lr, r9
 8000db6:	469c      	mov	ip, r3
 8000db8:	d351      	bcc.n	8000e5e <__udivmoddi4+0x28a>
 8000dba:	d04e      	beq.n	8000e5a <__udivmoddi4+0x286>
 8000dbc:	b155      	cbz	r5, 8000dd4 <__udivmoddi4+0x200>
 8000dbe:	ebb8 030e 	subs.w	r3, r8, lr
 8000dc2:	eb64 040c 	sbc.w	r4, r4, ip
 8000dc6:	fa04 f606 	lsl.w	r6, r4, r6
 8000dca:	40cb      	lsrs	r3, r1
 8000dcc:	431e      	orrs	r6, r3
 8000dce:	40cc      	lsrs	r4, r1
 8000dd0:	e9c5 6400 	strd	r6, r4, [r5]
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	e750      	b.n	8000c7a <__udivmoddi4+0xa6>
 8000dd8:	f1c2 0320 	rsb	r3, r2, #32
 8000ddc:	fa20 f103 	lsr.w	r1, r0, r3
 8000de0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000de4:	fa24 f303 	lsr.w	r3, r4, r3
 8000de8:	4094      	lsls	r4, r2
 8000dea:	430c      	orrs	r4, r1
 8000dec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000df0:	fa00 fe02 	lsl.w	lr, r0, r2
 8000df4:	fa1f f78c 	uxth.w	r7, ip
 8000df8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dfc:	fb08 3110 	mls	r1, r8, r0, r3
 8000e00:	0c23      	lsrs	r3, r4, #16
 8000e02:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e06:	fb00 f107 	mul.w	r1, r0, r7
 8000e0a:	4299      	cmp	r1, r3
 8000e0c:	d908      	bls.n	8000e20 <__udivmoddi4+0x24c>
 8000e0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e12:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e16:	d22c      	bcs.n	8000e72 <__udivmoddi4+0x29e>
 8000e18:	4299      	cmp	r1, r3
 8000e1a:	d92a      	bls.n	8000e72 <__udivmoddi4+0x29e>
 8000e1c:	3802      	subs	r0, #2
 8000e1e:	4463      	add	r3, ip
 8000e20:	1a5b      	subs	r3, r3, r1
 8000e22:	b2a4      	uxth	r4, r4
 8000e24:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e28:	fb08 3311 	mls	r3, r8, r1, r3
 8000e2c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e30:	fb01 f307 	mul.w	r3, r1, r7
 8000e34:	42a3      	cmp	r3, r4
 8000e36:	d908      	bls.n	8000e4a <__udivmoddi4+0x276>
 8000e38:	eb1c 0404 	adds.w	r4, ip, r4
 8000e3c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e40:	d213      	bcs.n	8000e6a <__udivmoddi4+0x296>
 8000e42:	42a3      	cmp	r3, r4
 8000e44:	d911      	bls.n	8000e6a <__udivmoddi4+0x296>
 8000e46:	3902      	subs	r1, #2
 8000e48:	4464      	add	r4, ip
 8000e4a:	1ae4      	subs	r4, r4, r3
 8000e4c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e50:	e739      	b.n	8000cc6 <__udivmoddi4+0xf2>
 8000e52:	4604      	mov	r4, r0
 8000e54:	e6f0      	b.n	8000c38 <__udivmoddi4+0x64>
 8000e56:	4608      	mov	r0, r1
 8000e58:	e706      	b.n	8000c68 <__udivmoddi4+0x94>
 8000e5a:	45c8      	cmp	r8, r9
 8000e5c:	d2ae      	bcs.n	8000dbc <__udivmoddi4+0x1e8>
 8000e5e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e62:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e66:	3801      	subs	r0, #1
 8000e68:	e7a8      	b.n	8000dbc <__udivmoddi4+0x1e8>
 8000e6a:	4631      	mov	r1, r6
 8000e6c:	e7ed      	b.n	8000e4a <__udivmoddi4+0x276>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	e799      	b.n	8000da6 <__udivmoddi4+0x1d2>
 8000e72:	4630      	mov	r0, r6
 8000e74:	e7d4      	b.n	8000e20 <__udivmoddi4+0x24c>
 8000e76:	46d6      	mov	lr, sl
 8000e78:	e77f      	b.n	8000d7a <__udivmoddi4+0x1a6>
 8000e7a:	4463      	add	r3, ip
 8000e7c:	3802      	subs	r0, #2
 8000e7e:	e74d      	b.n	8000d1c <__udivmoddi4+0x148>
 8000e80:	4606      	mov	r6, r0
 8000e82:	4623      	mov	r3, r4
 8000e84:	4608      	mov	r0, r1
 8000e86:	e70f      	b.n	8000ca8 <__udivmoddi4+0xd4>
 8000e88:	3e02      	subs	r6, #2
 8000e8a:	4463      	add	r3, ip
 8000e8c:	e730      	b.n	8000cf0 <__udivmoddi4+0x11c>
 8000e8e:	bf00      	nop

08000e90 <__aeabi_idiv0>:
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop

08000e94 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b088      	sub	sp, #32
 8000e98:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e9a:	f107 030c 	add.w	r3, r7, #12
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	601a      	str	r2, [r3, #0]
 8000ea2:	605a      	str	r2, [r3, #4]
 8000ea4:	609a      	str	r2, [r3, #8]
 8000ea6:	60da      	str	r2, [r3, #12]
 8000ea8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eaa:	4b1f      	ldr	r3, [pc, #124]	@ (8000f28 <MX_GPIO_Init+0x94>)
 8000eac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eae:	4a1e      	ldr	r2, [pc, #120]	@ (8000f28 <MX_GPIO_Init+0x94>)
 8000eb0:	f043 0301 	orr.w	r3, r3, #1
 8000eb4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000eb6:	4b1c      	ldr	r3, [pc, #112]	@ (8000f28 <MX_GPIO_Init+0x94>)
 8000eb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eba:	f003 0301 	and.w	r3, r3, #1
 8000ebe:	60bb      	str	r3, [r7, #8]
 8000ec0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ec2:	4b19      	ldr	r3, [pc, #100]	@ (8000f28 <MX_GPIO_Init+0x94>)
 8000ec4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ec6:	4a18      	ldr	r2, [pc, #96]	@ (8000f28 <MX_GPIO_Init+0x94>)
 8000ec8:	f043 0302 	orr.w	r3, r3, #2
 8000ecc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ece:	4b16      	ldr	r3, [pc, #88]	@ (8000f28 <MX_GPIO_Init+0x94>)
 8000ed0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ed2:	f003 0302 	and.w	r3, r3, #2
 8000ed6:	607b      	str	r3, [r7, #4]
 8000ed8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000eda:	2200      	movs	r2, #0
 8000edc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000ee0:	4812      	ldr	r0, [pc, #72]	@ (8000f2c <MX_GPIO_Init+0x98>)
 8000ee2:	f001 f9bb 	bl	800225c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000eea:	2300      	movs	r3, #0
 8000eec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8000ef2:	f107 030c 	add.w	r3, r7, #12
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000efc:	f001 f82c 	bl	8001f58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000f00:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000f04:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f06:	2301      	movs	r3, #1
 8000f08:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000f12:	f107 030c 	add.w	r3, r7, #12
 8000f16:	4619      	mov	r1, r3
 8000f18:	4804      	ldr	r0, [pc, #16]	@ (8000f2c <MX_GPIO_Init+0x98>)
 8000f1a:	f001 f81d 	bl	8001f58 <HAL_GPIO_Init>

}
 8000f1e:	bf00      	nop
 8000f20:	3720      	adds	r7, #32
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	40021000 	.word	0x40021000
 8000f2c:	48000400 	.word	0x48000400

08000f30 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000f34:	4b1b      	ldr	r3, [pc, #108]	@ (8000fa4 <MX_I2C1_Init+0x74>)
 8000f36:	4a1c      	ldr	r2, [pc, #112]	@ (8000fa8 <MX_I2C1_Init+0x78>)
 8000f38:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10802D9B;
 8000f3a:	4b1a      	ldr	r3, [pc, #104]	@ (8000fa4 <MX_I2C1_Init+0x74>)
 8000f3c:	4a1b      	ldr	r2, [pc, #108]	@ (8000fac <MX_I2C1_Init+0x7c>)
 8000f3e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000f40:	4b18      	ldr	r3, [pc, #96]	@ (8000fa4 <MX_I2C1_Init+0x74>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f46:	4b17      	ldr	r3, [pc, #92]	@ (8000fa4 <MX_I2C1_Init+0x74>)
 8000f48:	2201      	movs	r2, #1
 8000f4a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f4c:	4b15      	ldr	r3, [pc, #84]	@ (8000fa4 <MX_I2C1_Init+0x74>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000f52:	4b14      	ldr	r3, [pc, #80]	@ (8000fa4 <MX_I2C1_Init+0x74>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000f58:	4b12      	ldr	r3, [pc, #72]	@ (8000fa4 <MX_I2C1_Init+0x74>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f5e:	4b11      	ldr	r3, [pc, #68]	@ (8000fa4 <MX_I2C1_Init+0x74>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f64:	4b0f      	ldr	r3, [pc, #60]	@ (8000fa4 <MX_I2C1_Init+0x74>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f6a:	480e      	ldr	r0, [pc, #56]	@ (8000fa4 <MX_I2C1_Init+0x74>)
 8000f6c:	f001 f9a8 	bl	80022c0 <HAL_I2C_Init>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d001      	beq.n	8000f7a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000f76:	f000 f93e 	bl	80011f6 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000f7a:	2100      	movs	r1, #0
 8000f7c:	4809      	ldr	r0, [pc, #36]	@ (8000fa4 <MX_I2C1_Init+0x74>)
 8000f7e:	f001 fa3a 	bl	80023f6 <HAL_I2CEx_ConfigAnalogFilter>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d001      	beq.n	8000f8c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000f88:	f000 f935 	bl	80011f6 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000f8c:	2100      	movs	r1, #0
 8000f8e:	4805      	ldr	r0, [pc, #20]	@ (8000fa4 <MX_I2C1_Init+0x74>)
 8000f90:	f001 fa7c 	bl	800248c <HAL_I2CEx_ConfigDigitalFilter>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d001      	beq.n	8000f9e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000f9a:	f000 f92c 	bl	80011f6 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000f9e:	bf00      	nop
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	20000040 	.word	0x20000040
 8000fa8:	40005400 	.word	0x40005400
 8000fac:	10802d9b 	.word	0x10802d9b

08000fb0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b09c      	sub	sp, #112	@ 0x70
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb8:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	601a      	str	r2, [r3, #0]
 8000fc0:	605a      	str	r2, [r3, #4]
 8000fc2:	609a      	str	r2, [r3, #8]
 8000fc4:	60da      	str	r2, [r3, #12]
 8000fc6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fc8:	f107 0318 	add.w	r3, r7, #24
 8000fcc:	2244      	movs	r2, #68	@ 0x44
 8000fce:	2100      	movs	r1, #0
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f005 f877 	bl	80060c4 <memset>
  if(i2cHandle->Instance==I2C1)
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	4a2d      	ldr	r2, [pc, #180]	@ (8001090 <HAL_I2C_MspInit+0xe0>)
 8000fdc:	4293      	cmp	r3, r2
 8000fde:	d153      	bne.n	8001088 <HAL_I2C_MspInit+0xd8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000fe0:	2340      	movs	r3, #64	@ 0x40
 8000fe2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fe8:	f107 0318 	add.w	r3, r7, #24
 8000fec:	4618      	mov	r0, r3
 8000fee:	f002 f87b 	bl	80030e8 <HAL_RCCEx_PeriphCLKConfig>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d001      	beq.n	8000ffc <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000ff8:	f000 f8fd 	bl	80011f6 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ffc:	4b25      	ldr	r3, [pc, #148]	@ (8001094 <HAL_I2C_MspInit+0xe4>)
 8000ffe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001000:	4a24      	ldr	r2, [pc, #144]	@ (8001094 <HAL_I2C_MspInit+0xe4>)
 8001002:	f043 0301 	orr.w	r3, r3, #1
 8001006:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001008:	4b22      	ldr	r3, [pc, #136]	@ (8001094 <HAL_I2C_MspInit+0xe4>)
 800100a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800100c:	f003 0301 	and.w	r3, r3, #1
 8001010:	617b      	str	r3, [r7, #20]
 8001012:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001014:	4b1f      	ldr	r3, [pc, #124]	@ (8001094 <HAL_I2C_MspInit+0xe4>)
 8001016:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001018:	4a1e      	ldr	r2, [pc, #120]	@ (8001094 <HAL_I2C_MspInit+0xe4>)
 800101a:	f043 0302 	orr.w	r3, r3, #2
 800101e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001020:	4b1c      	ldr	r3, [pc, #112]	@ (8001094 <HAL_I2C_MspInit+0xe4>)
 8001022:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001024:	f003 0302 	and.w	r3, r3, #2
 8001028:	613b      	str	r3, [r7, #16]
 800102a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800102c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001030:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001032:	2312      	movs	r3, #18
 8001034:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001036:	2300      	movs	r3, #0
 8001038:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800103a:	2300      	movs	r3, #0
 800103c:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800103e:	2304      	movs	r3, #4
 8001040:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001042:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001046:	4619      	mov	r1, r3
 8001048:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800104c:	f000 ff84 	bl	8001f58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001050:	2380      	movs	r3, #128	@ 0x80
 8001052:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001054:	2312      	movs	r3, #18
 8001056:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001058:	2300      	movs	r3, #0
 800105a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800105c:	2300      	movs	r3, #0
 800105e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001060:	2304      	movs	r3, #4
 8001062:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001064:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001068:	4619      	mov	r1, r3
 800106a:	480b      	ldr	r0, [pc, #44]	@ (8001098 <HAL_I2C_MspInit+0xe8>)
 800106c:	f000 ff74 	bl	8001f58 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001070:	4b08      	ldr	r3, [pc, #32]	@ (8001094 <HAL_I2C_MspInit+0xe4>)
 8001072:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001074:	4a07      	ldr	r2, [pc, #28]	@ (8001094 <HAL_I2C_MspInit+0xe4>)
 8001076:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800107a:	6593      	str	r3, [r2, #88]	@ 0x58
 800107c:	4b05      	ldr	r3, [pc, #20]	@ (8001094 <HAL_I2C_MspInit+0xe4>)
 800107e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001080:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001084:	60fb      	str	r3, [r7, #12]
 8001086:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001088:	bf00      	nop
 800108a:	3770      	adds	r7, #112	@ 0x70
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	40005400 	.word	0x40005400
 8001094:	40021000 	.word	0x40021000
 8001098:	48000400 	.word	0x48000400

0800109c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010a0:	f000 fde3 	bl	8001c6a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010a4:	f000 f85c 	bl	8001160 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010a8:	f7ff fef4 	bl	8000e94 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80010ac:	f000 fd10 	bl	8001ad0 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80010b0:	f7ff ff3e 	bl	8000f30 <MX_I2C1_Init>
  MX_TIM1_Init();
 80010b4:	f000 f98c 	bl	80013d0 <MX_TIM1_Init>
  MX_TIM3_Init();
 80010b8:	f000 f9da 	bl	8001470 <MX_TIM3_Init>
  MX_TIM4_Init();
 80010bc:	f000 fa2e 	bl	800151c <MX_TIM4_Init>
  MX_SPI1_Init();
 80010c0:	f000 f8a0 	bl	8001204 <MX_SPI1_Init>
  MX_TIM15_Init();
 80010c4:	f000 fa80 	bl	80015c8 <MX_TIM15_Init>
  MX_TIM16_Init();
 80010c8:	f000 fb22 	bl	8001710 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */
//  HAL_TIM_Base_Start(&htim16); // Start Timer
//  HAL_TIMEx_PWMN_Start(&htim16, TIM_CHANNEL_1); // Start PWM Mode

  MotorDriver_Init(&M1, 170*1.0e6, 50.0, True);
 80010cc:	2101      	movs	r1, #1
 80010ce:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 8001140 <main+0xa4>
 80010d2:	ed9f 0a1c 	vldr	s0, [pc, #112]	@ 8001144 <main+0xa8>
 80010d6:	481c      	ldr	r0, [pc, #112]	@ (8001148 <main+0xac>)
 80010d8:	f004 fd00 	bl	8005adc <MotorDriver_Init>
//	  uint32_t = M1.channelx;
    /* USER CODE BEGIN 3 */

//	  __HAL_TIM_SET_COMPARE(&htim16, TIM_CHANNEL_1, duty);

	  MotorDriver_Write(&M1, 50.0, False);
 80010dc:	2100      	movs	r1, #0
 80010de:	ed9f 0a18 	vldr	s0, [pc, #96]	@ 8001140 <main+0xa4>
 80010e2:	4819      	ldr	r0, [pc, #100]	@ (8001148 <main+0xac>)
 80010e4:	f004 fdbc 	bl	8005c60 <MotorDriver_Write>

	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_6);
 80010e8:	2140      	movs	r1, #64	@ 0x40
 80010ea:	4818      	ldr	r0, [pc, #96]	@ (800114c <main+0xb0>)
 80010ec:	f001 f8ce 	bl	800228c <HAL_GPIO_TogglePin>

	  PWMWrite(&htim16, TIM_CHANNEL_1, 50.0, duty * 100.0 / 20.0);
 80010f0:	4b17      	ldr	r3, [pc, #92]	@ (8001150 <main+0xb4>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4618      	mov	r0, r3
 80010f6:	f7ff f9f3 	bl	80004e0 <__aeabi_f2d>
 80010fa:	f04f 0200 	mov.w	r2, #0
 80010fe:	4b15      	ldr	r3, [pc, #84]	@ (8001154 <main+0xb8>)
 8001100:	f7ff fa46 	bl	8000590 <__aeabi_dmul>
 8001104:	4602      	mov	r2, r0
 8001106:	460b      	mov	r3, r1
 8001108:	4610      	mov	r0, r2
 800110a:	4619      	mov	r1, r3
 800110c:	f04f 0200 	mov.w	r2, #0
 8001110:	4b11      	ldr	r3, [pc, #68]	@ (8001158 <main+0xbc>)
 8001112:	f7ff fb67 	bl	80007e4 <__aeabi_ddiv>
 8001116:	4602      	mov	r2, r0
 8001118:	460b      	mov	r3, r1
 800111a:	4610      	mov	r0, r2
 800111c:	4619      	mov	r1, r3
 800111e:	f7ff fcf1 	bl	8000b04 <__aeabi_d2f>
 8001122:	4603      	mov	r3, r0
 8001124:	ee00 3a90 	vmov	s1, r3
 8001128:	ed9f 0a05 	vldr	s0, [pc, #20]	@ 8001140 <main+0xa4>
 800112c:	2100      	movs	r1, #0
 800112e:	480b      	ldr	r0, [pc, #44]	@ (800115c <main+0xc0>)
 8001130:	f004 fe36 	bl	8005da0 <PWMWrite>
//
	  HAL_Delay(1000);
 8001134:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001138:	f000 fe08 	bl	8001d4c <HAL_Delay>
	  MotorDriver_Write(&M1, 50.0, False);
 800113c:	bf00      	nop
 800113e:	e7cd      	b.n	80010dc <main+0x40>
 8001140:	42480000 	.word	0x42480000
 8001144:	4d221fe8 	.word	0x4d221fe8
 8001148:	20000004 	.word	0x20000004
 800114c:	48000400 	.word	0x48000400
 8001150:	20000000 	.word	0x20000000
 8001154:	40590000 	.word	0x40590000
 8001158:	40340000 	.word	0x40340000
 800115c:	20000228 	.word	0x20000228

08001160 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b094      	sub	sp, #80	@ 0x50
 8001164:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001166:	f107 0318 	add.w	r3, r7, #24
 800116a:	2238      	movs	r2, #56	@ 0x38
 800116c:	2100      	movs	r1, #0
 800116e:	4618      	mov	r0, r3
 8001170:	f004 ffa8 	bl	80060c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001174:	1d3b      	adds	r3, r7, #4
 8001176:	2200      	movs	r2, #0
 8001178:	601a      	str	r2, [r3, #0]
 800117a:	605a      	str	r2, [r3, #4]
 800117c:	609a      	str	r2, [r3, #8]
 800117e:	60da      	str	r2, [r3, #12]
 8001180:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001182:	2000      	movs	r0, #0
 8001184:	f001 f9ce 	bl	8002524 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001188:	2302      	movs	r3, #2
 800118a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800118c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001190:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001192:	2340      	movs	r3, #64	@ 0x40
 8001194:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001196:	2302      	movs	r3, #2
 8001198:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800119a:	2302      	movs	r3, #2
 800119c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800119e:	2304      	movs	r3, #4
 80011a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80011a2:	2355      	movs	r3, #85	@ 0x55
 80011a4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011a6:	2302      	movs	r3, #2
 80011a8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80011aa:	2302      	movs	r3, #2
 80011ac:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80011ae:	2302      	movs	r3, #2
 80011b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011b2:	f107 0318 	add.w	r3, r7, #24
 80011b6:	4618      	mov	r0, r3
 80011b8:	f001 fa68 	bl	800268c <HAL_RCC_OscConfig>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d001      	beq.n	80011c6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80011c2:	f000 f818 	bl	80011f6 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011c6:	230f      	movs	r3, #15
 80011c8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011ca:	2303      	movs	r3, #3
 80011cc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011ce:	2300      	movs	r3, #0
 80011d0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80011d2:	2300      	movs	r3, #0
 80011d4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011d6:	2300      	movs	r3, #0
 80011d8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80011da:	1d3b      	adds	r3, r7, #4
 80011dc:	2104      	movs	r1, #4
 80011de:	4618      	mov	r0, r3
 80011e0:	f001 fd66 	bl	8002cb0 <HAL_RCC_ClockConfig>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d001      	beq.n	80011ee <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80011ea:	f000 f804 	bl	80011f6 <Error_Handler>
  }
}
 80011ee:	bf00      	nop
 80011f0:	3750      	adds	r7, #80	@ 0x50
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}

080011f6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011f6:	b480      	push	{r7}
 80011f8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011fa:	b672      	cpsid	i
}
 80011fc:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011fe:	bf00      	nop
 8001200:	e7fd      	b.n	80011fe <Error_Handler+0x8>
	...

08001204 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001208:	4b1b      	ldr	r3, [pc, #108]	@ (8001278 <MX_SPI1_Init+0x74>)
 800120a:	4a1c      	ldr	r2, [pc, #112]	@ (800127c <MX_SPI1_Init+0x78>)
 800120c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800120e:	4b1a      	ldr	r3, [pc, #104]	@ (8001278 <MX_SPI1_Init+0x74>)
 8001210:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001214:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001216:	4b18      	ldr	r3, [pc, #96]	@ (8001278 <MX_SPI1_Init+0x74>)
 8001218:	2200      	movs	r2, #0
 800121a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800121c:	4b16      	ldr	r3, [pc, #88]	@ (8001278 <MX_SPI1_Init+0x74>)
 800121e:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001222:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001224:	4b14      	ldr	r3, [pc, #80]	@ (8001278 <MX_SPI1_Init+0x74>)
 8001226:	2200      	movs	r2, #0
 8001228:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800122a:	4b13      	ldr	r3, [pc, #76]	@ (8001278 <MX_SPI1_Init+0x74>)
 800122c:	2200      	movs	r2, #0
 800122e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001230:	4b11      	ldr	r3, [pc, #68]	@ (8001278 <MX_SPI1_Init+0x74>)
 8001232:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001236:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001238:	4b0f      	ldr	r3, [pc, #60]	@ (8001278 <MX_SPI1_Init+0x74>)
 800123a:	2220      	movs	r2, #32
 800123c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800123e:	4b0e      	ldr	r3, [pc, #56]	@ (8001278 <MX_SPI1_Init+0x74>)
 8001240:	2200      	movs	r2, #0
 8001242:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001244:	4b0c      	ldr	r3, [pc, #48]	@ (8001278 <MX_SPI1_Init+0x74>)
 8001246:	2200      	movs	r2, #0
 8001248:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800124a:	4b0b      	ldr	r3, [pc, #44]	@ (8001278 <MX_SPI1_Init+0x74>)
 800124c:	2200      	movs	r2, #0
 800124e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001250:	4b09      	ldr	r3, [pc, #36]	@ (8001278 <MX_SPI1_Init+0x74>)
 8001252:	2207      	movs	r2, #7
 8001254:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001256:	4b08      	ldr	r3, [pc, #32]	@ (8001278 <MX_SPI1_Init+0x74>)
 8001258:	2200      	movs	r2, #0
 800125a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800125c:	4b06      	ldr	r3, [pc, #24]	@ (8001278 <MX_SPI1_Init+0x74>)
 800125e:	2208      	movs	r2, #8
 8001260:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001262:	4805      	ldr	r0, [pc, #20]	@ (8001278 <MX_SPI1_Init+0x74>)
 8001264:	f002 f930 	bl	80034c8 <HAL_SPI_Init>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800126e:	f7ff ffc2 	bl	80011f6 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001272:	bf00      	nop
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	20000094 	.word	0x20000094
 800127c:	40013000 	.word	0x40013000

08001280 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b08a      	sub	sp, #40	@ 0x28
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001288:	f107 0314 	add.w	r3, r7, #20
 800128c:	2200      	movs	r2, #0
 800128e:	601a      	str	r2, [r3, #0]
 8001290:	605a      	str	r2, [r3, #4]
 8001292:	609a      	str	r2, [r3, #8]
 8001294:	60da      	str	r2, [r3, #12]
 8001296:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4a17      	ldr	r2, [pc, #92]	@ (80012fc <HAL_SPI_MspInit+0x7c>)
 800129e:	4293      	cmp	r3, r2
 80012a0:	d128      	bne.n	80012f4 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80012a2:	4b17      	ldr	r3, [pc, #92]	@ (8001300 <HAL_SPI_MspInit+0x80>)
 80012a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012a6:	4a16      	ldr	r2, [pc, #88]	@ (8001300 <HAL_SPI_MspInit+0x80>)
 80012a8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80012ac:	6613      	str	r3, [r2, #96]	@ 0x60
 80012ae:	4b14      	ldr	r3, [pc, #80]	@ (8001300 <HAL_SPI_MspInit+0x80>)
 80012b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012b2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80012b6:	613b      	str	r3, [r7, #16]
 80012b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ba:	4b11      	ldr	r3, [pc, #68]	@ (8001300 <HAL_SPI_MspInit+0x80>)
 80012bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012be:	4a10      	ldr	r2, [pc, #64]	@ (8001300 <HAL_SPI_MspInit+0x80>)
 80012c0:	f043 0301 	orr.w	r3, r3, #1
 80012c4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012c6:	4b0e      	ldr	r3, [pc, #56]	@ (8001300 <HAL_SPI_MspInit+0x80>)
 80012c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012ca:	f003 0301 	and.w	r3, r3, #1
 80012ce:	60fb      	str	r3, [r7, #12]
 80012d0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80012d2:	23e0      	movs	r3, #224	@ 0xe0
 80012d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d6:	2302      	movs	r3, #2
 80012d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012da:	2300      	movs	r3, #0
 80012dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012de:	2300      	movs	r3, #0
 80012e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80012e2:	2305      	movs	r3, #5
 80012e4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012e6:	f107 0314 	add.w	r3, r7, #20
 80012ea:	4619      	mov	r1, r3
 80012ec:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012f0:	f000 fe32 	bl	8001f58 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80012f4:	bf00      	nop
 80012f6:	3728      	adds	r7, #40	@ 0x28
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	40013000 	.word	0x40013000
 8001300:	40021000 	.word	0x40021000

08001304 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b082      	sub	sp, #8
 8001308:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800130a:	4b0f      	ldr	r3, [pc, #60]	@ (8001348 <HAL_MspInit+0x44>)
 800130c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800130e:	4a0e      	ldr	r2, [pc, #56]	@ (8001348 <HAL_MspInit+0x44>)
 8001310:	f043 0301 	orr.w	r3, r3, #1
 8001314:	6613      	str	r3, [r2, #96]	@ 0x60
 8001316:	4b0c      	ldr	r3, [pc, #48]	@ (8001348 <HAL_MspInit+0x44>)
 8001318:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800131a:	f003 0301 	and.w	r3, r3, #1
 800131e:	607b      	str	r3, [r7, #4]
 8001320:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001322:	4b09      	ldr	r3, [pc, #36]	@ (8001348 <HAL_MspInit+0x44>)
 8001324:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001326:	4a08      	ldr	r2, [pc, #32]	@ (8001348 <HAL_MspInit+0x44>)
 8001328:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800132c:	6593      	str	r3, [r2, #88]	@ 0x58
 800132e:	4b06      	ldr	r3, [pc, #24]	@ (8001348 <HAL_MspInit+0x44>)
 8001330:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001332:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001336:	603b      	str	r3, [r7, #0]
 8001338:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800133a:	f001 f997 	bl	800266c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800133e:	bf00      	nop
 8001340:	3708      	adds	r7, #8
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	40021000 	.word	0x40021000

0800134c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001350:	bf00      	nop
 8001352:	e7fd      	b.n	8001350 <NMI_Handler+0x4>

08001354 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001358:	bf00      	nop
 800135a:	e7fd      	b.n	8001358 <HardFault_Handler+0x4>

0800135c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001360:	bf00      	nop
 8001362:	e7fd      	b.n	8001360 <MemManage_Handler+0x4>

08001364 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001368:	bf00      	nop
 800136a:	e7fd      	b.n	8001368 <BusFault_Handler+0x4>

0800136c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001370:	bf00      	nop
 8001372:	e7fd      	b.n	8001370 <UsageFault_Handler+0x4>

08001374 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001378:	bf00      	nop
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr

08001382 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001382:	b480      	push	{r7}
 8001384:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001386:	bf00      	nop
 8001388:	46bd      	mov	sp, r7
 800138a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138e:	4770      	bx	lr

08001390 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001394:	bf00      	nop
 8001396:	46bd      	mov	sp, r7
 8001398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139c:	4770      	bx	lr

0800139e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800139e:	b580      	push	{r7, lr}
 80013a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013a2:	f000 fcb5 	bl	8001d10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013a6:	bf00      	nop
 80013a8:	bd80      	pop	{r7, pc}
	...

080013ac <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80013ac:	b480      	push	{r7}
 80013ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80013b0:	4b06      	ldr	r3, [pc, #24]	@ (80013cc <SystemInit+0x20>)
 80013b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80013b6:	4a05      	ldr	r2, [pc, #20]	@ (80013cc <SystemInit+0x20>)
 80013b8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80013bc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013c0:	bf00      	nop
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr
 80013ca:	bf00      	nop
 80013cc:	e000ed00 	.word	0xe000ed00

080013d0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim15;
TIM_HandleTypeDef htim16;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b088      	sub	sp, #32
 80013d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_HallSensor_InitTypeDef sConfig = {0};
 80013d6:	f107 0310 	add.w	r3, r7, #16
 80013da:	2200      	movs	r2, #0
 80013dc:	601a      	str	r2, [r3, #0]
 80013de:	605a      	str	r2, [r3, #4]
 80013e0:	609a      	str	r2, [r3, #8]
 80013e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013e4:	1d3b      	adds	r3, r7, #4
 80013e6:	2200      	movs	r2, #0
 80013e8:	601a      	str	r2, [r3, #0]
 80013ea:	605a      	str	r2, [r3, #4]
 80013ec:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80013ee:	4b1e      	ldr	r3, [pc, #120]	@ (8001468 <MX_TIM1_Init+0x98>)
 80013f0:	4a1e      	ldr	r2, [pc, #120]	@ (800146c <MX_TIM1_Init+0x9c>)
 80013f2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80013f4:	4b1c      	ldr	r3, [pc, #112]	@ (8001468 <MX_TIM1_Init+0x98>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013fa:	4b1b      	ldr	r3, [pc, #108]	@ (8001468 <MX_TIM1_Init+0x98>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001400:	4b19      	ldr	r3, [pc, #100]	@ (8001468 <MX_TIM1_Init+0x98>)
 8001402:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001406:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001408:	4b17      	ldr	r3, [pc, #92]	@ (8001468 <MX_TIM1_Init+0x98>)
 800140a:	2200      	movs	r2, #0
 800140c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800140e:	4b16      	ldr	r3, [pc, #88]	@ (8001468 <MX_TIM1_Init+0x98>)
 8001410:	2200      	movs	r2, #0
 8001412:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001414:	4b14      	ldr	r3, [pc, #80]	@ (8001468 <MX_TIM1_Init+0x98>)
 8001416:	2200      	movs	r2, #0
 8001418:	619a      	str	r2, [r3, #24]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800141a:	2300      	movs	r3, #0
 800141c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800141e:	2300      	movs	r3, #0
 8001420:	617b      	str	r3, [r7, #20]
  sConfig.IC1Filter = 0;
 8001422:	2300      	movs	r3, #0
 8001424:	61bb      	str	r3, [r7, #24]
  sConfig.Commutation_Delay = 0;
 8001426:	2300      	movs	r3, #0
 8001428:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_HallSensor_Init(&htim1, &sConfig) != HAL_OK)
 800142a:	f107 0310 	add.w	r3, r7, #16
 800142e:	4619      	mov	r1, r3
 8001430:	480d      	ldr	r0, [pc, #52]	@ (8001468 <MX_TIM1_Init+0x98>)
 8001432:	f003 fa7e 	bl	8004932 <HAL_TIMEx_HallSensor_Init>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d001      	beq.n	8001440 <MX_TIM1_Init+0x70>
  {
    Error_Handler();
 800143c:	f7ff fedb 	bl	80011f6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 8001440:	2350      	movs	r3, #80	@ 0x50
 8001442:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001444:	2300      	movs	r3, #0
 8001446:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001448:	2300      	movs	r3, #0
 800144a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800144c:	1d3b      	adds	r3, r7, #4
 800144e:	4619      	mov	r1, r3
 8001450:	4805      	ldr	r0, [pc, #20]	@ (8001468 <MX_TIM1_Init+0x98>)
 8001452:	f003 fbd1 	bl	8004bf8 <HAL_TIMEx_MasterConfigSynchronization>
 8001456:	4603      	mov	r3, r0
 8001458:	2b00      	cmp	r3, #0
 800145a:	d001      	beq.n	8001460 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800145c:	f7ff fecb 	bl	80011f6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001460:	bf00      	nop
 8001462:	3720      	adds	r7, #32
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}
 8001468:	200000f8 	.word	0x200000f8
 800146c:	40012c00 	.word	0x40012c00

08001470 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b08c      	sub	sp, #48	@ 0x30
 8001474:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001476:	f107 030c 	add.w	r3, r7, #12
 800147a:	2224      	movs	r2, #36	@ 0x24
 800147c:	2100      	movs	r1, #0
 800147e:	4618      	mov	r0, r3
 8001480:	f004 fe20 	bl	80060c4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001484:	463b      	mov	r3, r7
 8001486:	2200      	movs	r2, #0
 8001488:	601a      	str	r2, [r3, #0]
 800148a:	605a      	str	r2, [r3, #4]
 800148c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800148e:	4b21      	ldr	r3, [pc, #132]	@ (8001514 <MX_TIM3_Init+0xa4>)
 8001490:	4a21      	ldr	r2, [pc, #132]	@ (8001518 <MX_TIM3_Init+0xa8>)
 8001492:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001494:	4b1f      	ldr	r3, [pc, #124]	@ (8001514 <MX_TIM3_Init+0xa4>)
 8001496:	2200      	movs	r2, #0
 8001498:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800149a:	4b1e      	ldr	r3, [pc, #120]	@ (8001514 <MX_TIM3_Init+0xa4>)
 800149c:	2200      	movs	r2, #0
 800149e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80014a0:	4b1c      	ldr	r3, [pc, #112]	@ (8001514 <MX_TIM3_Init+0xa4>)
 80014a2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80014a6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014a8:	4b1a      	ldr	r3, [pc, #104]	@ (8001514 <MX_TIM3_Init+0xa4>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014ae:	4b19      	ldr	r3, [pc, #100]	@ (8001514 <MX_TIM3_Init+0xa4>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80014b4:	2301      	movs	r3, #1
 80014b6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80014b8:	2300      	movs	r3, #0
 80014ba:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80014bc:	2301      	movs	r3, #1
 80014be:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80014c0:	2300      	movs	r3, #0
 80014c2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80014c4:	2300      	movs	r3, #0
 80014c6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80014c8:	2300      	movs	r3, #0
 80014ca:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80014cc:	2301      	movs	r3, #1
 80014ce:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80014d0:	2300      	movs	r3, #0
 80014d2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80014d4:	2300      	movs	r3, #0
 80014d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80014d8:	f107 030c 	add.w	r3, r7, #12
 80014dc:	4619      	mov	r1, r3
 80014de:	480d      	ldr	r0, [pc, #52]	@ (8001514 <MX_TIM3_Init+0xa4>)
 80014e0:	f002 fab8 	bl	8003a54 <HAL_TIM_Encoder_Init>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d001      	beq.n	80014ee <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 80014ea:	f7ff fe84 	bl	80011f6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014ee:	2300      	movs	r3, #0
 80014f0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014f2:	2300      	movs	r3, #0
 80014f4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80014f6:	463b      	mov	r3, r7
 80014f8:	4619      	mov	r1, r3
 80014fa:	4806      	ldr	r0, [pc, #24]	@ (8001514 <MX_TIM3_Init+0xa4>)
 80014fc:	f003 fb7c 	bl	8004bf8 <HAL_TIMEx_MasterConfigSynchronization>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d001      	beq.n	800150a <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8001506:	f7ff fe76 	bl	80011f6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800150a:	bf00      	nop
 800150c:	3730      	adds	r7, #48	@ 0x30
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	20000144 	.word	0x20000144
 8001518:	40000400 	.word	0x40000400

0800151c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b08c      	sub	sp, #48	@ 0x30
 8001520:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001522:	f107 030c 	add.w	r3, r7, #12
 8001526:	2224      	movs	r2, #36	@ 0x24
 8001528:	2100      	movs	r1, #0
 800152a:	4618      	mov	r0, r3
 800152c:	f004 fdca 	bl	80060c4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001530:	463b      	mov	r3, r7
 8001532:	2200      	movs	r2, #0
 8001534:	601a      	str	r2, [r3, #0]
 8001536:	605a      	str	r2, [r3, #4]
 8001538:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800153a:	4b21      	ldr	r3, [pc, #132]	@ (80015c0 <MX_TIM4_Init+0xa4>)
 800153c:	4a21      	ldr	r2, [pc, #132]	@ (80015c4 <MX_TIM4_Init+0xa8>)
 800153e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001540:	4b1f      	ldr	r3, [pc, #124]	@ (80015c0 <MX_TIM4_Init+0xa4>)
 8001542:	2200      	movs	r2, #0
 8001544:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001546:	4b1e      	ldr	r3, [pc, #120]	@ (80015c0 <MX_TIM4_Init+0xa4>)
 8001548:	2200      	movs	r2, #0
 800154a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800154c:	4b1c      	ldr	r3, [pc, #112]	@ (80015c0 <MX_TIM4_Init+0xa4>)
 800154e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001552:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001554:	4b1a      	ldr	r3, [pc, #104]	@ (80015c0 <MX_TIM4_Init+0xa4>)
 8001556:	2200      	movs	r2, #0
 8001558:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800155a:	4b19      	ldr	r3, [pc, #100]	@ (80015c0 <MX_TIM4_Init+0xa4>)
 800155c:	2200      	movs	r2, #0
 800155e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001560:	2301      	movs	r3, #1
 8001562:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001564:	2300      	movs	r3, #0
 8001566:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001568:	2301      	movs	r3, #1
 800156a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800156c:	2300      	movs	r3, #0
 800156e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001570:	2300      	movs	r3, #0
 8001572:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001574:	2300      	movs	r3, #0
 8001576:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001578:	2301      	movs	r3, #1
 800157a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800157c:	2300      	movs	r3, #0
 800157e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001580:	2300      	movs	r3, #0
 8001582:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001584:	f107 030c 	add.w	r3, r7, #12
 8001588:	4619      	mov	r1, r3
 800158a:	480d      	ldr	r0, [pc, #52]	@ (80015c0 <MX_TIM4_Init+0xa4>)
 800158c:	f002 fa62 	bl	8003a54 <HAL_TIM_Encoder_Init>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d001      	beq.n	800159a <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8001596:	f7ff fe2e 	bl	80011f6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800159a:	2300      	movs	r3, #0
 800159c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800159e:	2300      	movs	r3, #0
 80015a0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80015a2:	463b      	mov	r3, r7
 80015a4:	4619      	mov	r1, r3
 80015a6:	4806      	ldr	r0, [pc, #24]	@ (80015c0 <MX_TIM4_Init+0xa4>)
 80015a8:	f003 fb26 	bl	8004bf8 <HAL_TIMEx_MasterConfigSynchronization>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d001      	beq.n	80015b6 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 80015b2:	f7ff fe20 	bl	80011f6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80015b6:	bf00      	nop
 80015b8:	3730      	adds	r7, #48	@ 0x30
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	20000190 	.word	0x20000190
 80015c4:	40000800 	.word	0x40000800

080015c8 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b09c      	sub	sp, #112	@ 0x70
 80015cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015ce:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80015d2:	2200      	movs	r2, #0
 80015d4:	601a      	str	r2, [r3, #0]
 80015d6:	605a      	str	r2, [r3, #4]
 80015d8:	609a      	str	r2, [r3, #8]
 80015da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015dc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80015e0:	2200      	movs	r2, #0
 80015e2:	601a      	str	r2, [r3, #0]
 80015e4:	605a      	str	r2, [r3, #4]
 80015e6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015e8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80015ec:	2200      	movs	r2, #0
 80015ee:	601a      	str	r2, [r3, #0]
 80015f0:	605a      	str	r2, [r3, #4]
 80015f2:	609a      	str	r2, [r3, #8]
 80015f4:	60da      	str	r2, [r3, #12]
 80015f6:	611a      	str	r2, [r3, #16]
 80015f8:	615a      	str	r2, [r3, #20]
 80015fa:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80015fc:	1d3b      	adds	r3, r7, #4
 80015fe:	2234      	movs	r2, #52	@ 0x34
 8001600:	2100      	movs	r1, #0
 8001602:	4618      	mov	r0, r3
 8001604:	f004 fd5e 	bl	80060c4 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8001608:	4b3f      	ldr	r3, [pc, #252]	@ (8001708 <MX_TIM15_Init+0x140>)
 800160a:	4a40      	ldr	r2, [pc, #256]	@ (800170c <MX_TIM15_Init+0x144>)
 800160c:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 800160e:	4b3e      	ldr	r3, [pc, #248]	@ (8001708 <MX_TIM15_Init+0x140>)
 8001610:	2200      	movs	r2, #0
 8001612:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001614:	4b3c      	ldr	r3, [pc, #240]	@ (8001708 <MX_TIM15_Init+0x140>)
 8001616:	2200      	movs	r2, #0
 8001618:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 800161a:	4b3b      	ldr	r3, [pc, #236]	@ (8001708 <MX_TIM15_Init+0x140>)
 800161c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001620:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001622:	4b39      	ldr	r3, [pc, #228]	@ (8001708 <MX_TIM15_Init+0x140>)
 8001624:	2200      	movs	r2, #0
 8001626:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8001628:	4b37      	ldr	r3, [pc, #220]	@ (8001708 <MX_TIM15_Init+0x140>)
 800162a:	2200      	movs	r2, #0
 800162c:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800162e:	4b36      	ldr	r3, [pc, #216]	@ (8001708 <MX_TIM15_Init+0x140>)
 8001630:	2200      	movs	r2, #0
 8001632:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8001634:	4834      	ldr	r0, [pc, #208]	@ (8001708 <MX_TIM15_Init+0x140>)
 8001636:	f001 fff2 	bl	800361e <HAL_TIM_Base_Init>
 800163a:	4603      	mov	r3, r0
 800163c:	2b00      	cmp	r3, #0
 800163e:	d001      	beq.n	8001644 <MX_TIM15_Init+0x7c>
  {
    Error_Handler();
 8001640:	f7ff fdd9 	bl	80011f6 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001644:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001648:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 800164a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800164e:	4619      	mov	r1, r3
 8001650:	482d      	ldr	r0, [pc, #180]	@ (8001708 <MX_TIM15_Init+0x140>)
 8001652:	f002 fbb9 	bl	8003dc8 <HAL_TIM_ConfigClockSource>
 8001656:	4603      	mov	r3, r0
 8001658:	2b00      	cmp	r3, #0
 800165a:	d001      	beq.n	8001660 <MX_TIM15_Init+0x98>
  {
    Error_Handler();
 800165c:	f7ff fdcb 	bl	80011f6 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8001660:	4829      	ldr	r0, [pc, #164]	@ (8001708 <MX_TIM15_Init+0x140>)
 8001662:	f002 f895 	bl	8003790 <HAL_TIM_PWM_Init>
 8001666:	4603      	mov	r3, r0
 8001668:	2b00      	cmp	r3, #0
 800166a:	d001      	beq.n	8001670 <MX_TIM15_Init+0xa8>
  {
    Error_Handler();
 800166c:	f7ff fdc3 	bl	80011f6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001670:	2300      	movs	r3, #0
 8001672:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001674:	2300      	movs	r3, #0
 8001676:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8001678:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800167c:	4619      	mov	r1, r3
 800167e:	4822      	ldr	r0, [pc, #136]	@ (8001708 <MX_TIM15_Init+0x140>)
 8001680:	f003 faba 	bl	8004bf8 <HAL_TIMEx_MasterConfigSynchronization>
 8001684:	4603      	mov	r3, r0
 8001686:	2b00      	cmp	r3, #0
 8001688:	d001      	beq.n	800168e <MX_TIM15_Init+0xc6>
  {
    Error_Handler();
 800168a:	f7ff fdb4 	bl	80011f6 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800168e:	2360      	movs	r3, #96	@ 0x60
 8001690:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8001692:	2300      	movs	r3, #0
 8001694:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001696:	2300      	movs	r3, #0
 8001698:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800169a:	2300      	movs	r3, #0
 800169c:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800169e:	2300      	movs	r3, #0
 80016a0:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80016a2:	2300      	movs	r3, #0
 80016a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80016a6:	2300      	movs	r3, #0
 80016a8:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80016aa:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80016ae:	2200      	movs	r2, #0
 80016b0:	4619      	mov	r1, r3
 80016b2:	4815      	ldr	r0, [pc, #84]	@ (8001708 <MX_TIM15_Init+0x140>)
 80016b4:	f002 fa74 	bl	8003ba0 <HAL_TIM_PWM_ConfigChannel>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d001      	beq.n	80016c2 <MX_TIM15_Init+0xfa>
  {
    Error_Handler();
 80016be:	f7ff fd9a 	bl	80011f6 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80016c2:	2300      	movs	r3, #0
 80016c4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80016c6:	2300      	movs	r3, #0
 80016c8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80016ca:	2300      	movs	r3, #0
 80016cc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80016ce:	2300      	movs	r3, #0
 80016d0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80016d2:	2300      	movs	r3, #0
 80016d4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80016d6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80016da:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80016dc:	2300      	movs	r3, #0
 80016de:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80016e0:	2300      	movs	r3, #0
 80016e2:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 80016e4:	1d3b      	adds	r3, r7, #4
 80016e6:	4619      	mov	r1, r3
 80016e8:	4807      	ldr	r0, [pc, #28]	@ (8001708 <MX_TIM15_Init+0x140>)
 80016ea:	f003 fb07 	bl	8004cfc <HAL_TIMEx_ConfigBreakDeadTime>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d001      	beq.n	80016f8 <MX_TIM15_Init+0x130>
  {
    Error_Handler();
 80016f4:	f7ff fd7f 	bl	80011f6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 80016f8:	4803      	ldr	r0, [pc, #12]	@ (8001708 <MX_TIM15_Init+0x140>)
 80016fa:	f000 f98d 	bl	8001a18 <HAL_TIM_MspPostInit>

}
 80016fe:	bf00      	nop
 8001700:	3770      	adds	r7, #112	@ 0x70
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	200001dc 	.word	0x200001dc
 800170c:	40014000 	.word	0x40014000

08001710 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b094      	sub	sp, #80	@ 0x50
 8001714:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001716:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800171a:	2200      	movs	r2, #0
 800171c:	601a      	str	r2, [r3, #0]
 800171e:	605a      	str	r2, [r3, #4]
 8001720:	609a      	str	r2, [r3, #8]
 8001722:	60da      	str	r2, [r3, #12]
 8001724:	611a      	str	r2, [r3, #16]
 8001726:	615a      	str	r2, [r3, #20]
 8001728:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800172a:	463b      	mov	r3, r7
 800172c:	2234      	movs	r2, #52	@ 0x34
 800172e:	2100      	movs	r1, #0
 8001730:	4618      	mov	r0, r3
 8001732:	f004 fcc7 	bl	80060c4 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001736:	4b31      	ldr	r3, [pc, #196]	@ (80017fc <MX_TIM16_Init+0xec>)
 8001738:	4a31      	ldr	r2, [pc, #196]	@ (8001800 <MX_TIM16_Init+0xf0>)
 800173a:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 170 - 1;
 800173c:	4b2f      	ldr	r3, [pc, #188]	@ (80017fc <MX_TIM16_Init+0xec>)
 800173e:	22a9      	movs	r2, #169	@ 0xa9
 8001740:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001742:	4b2e      	ldr	r3, [pc, #184]	@ (80017fc <MX_TIM16_Init+0xec>)
 8001744:	2200      	movs	r2, #0
 8001746:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 999;
 8001748:	4b2c      	ldr	r3, [pc, #176]	@ (80017fc <MX_TIM16_Init+0xec>)
 800174a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800174e:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001750:	4b2a      	ldr	r3, [pc, #168]	@ (80017fc <MX_TIM16_Init+0xec>)
 8001752:	2200      	movs	r2, #0
 8001754:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001756:	4b29      	ldr	r3, [pc, #164]	@ (80017fc <MX_TIM16_Init+0xec>)
 8001758:	2200      	movs	r2, #0
 800175a:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800175c:	4b27      	ldr	r3, [pc, #156]	@ (80017fc <MX_TIM16_Init+0xec>)
 800175e:	2200      	movs	r2, #0
 8001760:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001762:	4826      	ldr	r0, [pc, #152]	@ (80017fc <MX_TIM16_Init+0xec>)
 8001764:	f001 ff5b 	bl	800361e <HAL_TIM_Base_Init>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	d001      	beq.n	8001772 <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 800176e:	f7ff fd42 	bl	80011f6 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8001772:	4822      	ldr	r0, [pc, #136]	@ (80017fc <MX_TIM16_Init+0xec>)
 8001774:	f002 f80c 	bl	8003790 <HAL_TIM_PWM_Init>
 8001778:	4603      	mov	r3, r0
 800177a:	2b00      	cmp	r3, #0
 800177c:	d001      	beq.n	8001782 <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 800177e:	f7ff fd3a 	bl	80011f6 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001782:	2360      	movs	r3, #96	@ 0x60
 8001784:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.Pulse = 499;
 8001786:	f240 13f3 	movw	r3, #499	@ 0x1f3
 800178a:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800178c:	2300      	movs	r3, #0
 800178e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001790:	2300      	movs	r3, #0
 8001792:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001794:	2300      	movs	r3, #0
 8001796:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001798:	2300      	movs	r3, #0
 800179a:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800179c:	2300      	movs	r3, #0
 800179e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80017a0:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80017a4:	2200      	movs	r2, #0
 80017a6:	4619      	mov	r1, r3
 80017a8:	4814      	ldr	r0, [pc, #80]	@ (80017fc <MX_TIM16_Init+0xec>)
 80017aa:	f002 f9f9 	bl	8003ba0 <HAL_TIM_PWM_ConfigChannel>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d001      	beq.n	80017b8 <MX_TIM16_Init+0xa8>
  {
    Error_Handler();
 80017b4:	f7ff fd1f 	bl	80011f6 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80017b8:	2300      	movs	r3, #0
 80017ba:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80017bc:	2300      	movs	r3, #0
 80017be:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80017c0:	2300      	movs	r3, #0
 80017c2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80017c4:	2300      	movs	r3, #0
 80017c6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80017c8:	2300      	movs	r3, #0
 80017ca:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80017cc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80017d0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80017d2:	2300      	movs	r3, #0
 80017d4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80017d6:	2300      	movs	r3, #0
 80017d8:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 80017da:	463b      	mov	r3, r7
 80017dc:	4619      	mov	r1, r3
 80017de:	4807      	ldr	r0, [pc, #28]	@ (80017fc <MX_TIM16_Init+0xec>)
 80017e0:	f003 fa8c 	bl	8004cfc <HAL_TIMEx_ConfigBreakDeadTime>
 80017e4:	4603      	mov	r3, r0
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d001      	beq.n	80017ee <MX_TIM16_Init+0xde>
  {
    Error_Handler();
 80017ea:	f7ff fd04 	bl	80011f6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 80017ee:	4803      	ldr	r0, [pc, #12]	@ (80017fc <MX_TIM16_Init+0xec>)
 80017f0:	f000 f912 	bl	8001a18 <HAL_TIM_MspPostInit>

}
 80017f4:	bf00      	nop
 80017f6:	3750      	adds	r7, #80	@ 0x50
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	20000228 	.word	0x20000228
 8001800:	40014400 	.word	0x40014400

08001804 <HAL_TIMEx_HallSensor_MspInit>:

void HAL_TIMEx_HallSensor_MspInit(TIM_HandleTypeDef* timex_hallsensorHandle)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b08a      	sub	sp, #40	@ 0x28
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800180c:	f107 0314 	add.w	r3, r7, #20
 8001810:	2200      	movs	r2, #0
 8001812:	601a      	str	r2, [r3, #0]
 8001814:	605a      	str	r2, [r3, #4]
 8001816:	609a      	str	r2, [r3, #8]
 8001818:	60da      	str	r2, [r3, #12]
 800181a:	611a      	str	r2, [r3, #16]
  if(timex_hallsensorHandle->Instance==TIM1)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a18      	ldr	r2, [pc, #96]	@ (8001884 <HAL_TIMEx_HallSensor_MspInit+0x80>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d129      	bne.n	800187a <HAL_TIMEx_HallSensor_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001826:	4b18      	ldr	r3, [pc, #96]	@ (8001888 <HAL_TIMEx_HallSensor_MspInit+0x84>)
 8001828:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800182a:	4a17      	ldr	r2, [pc, #92]	@ (8001888 <HAL_TIMEx_HallSensor_MspInit+0x84>)
 800182c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001830:	6613      	str	r3, [r2, #96]	@ 0x60
 8001832:	4b15      	ldr	r3, [pc, #84]	@ (8001888 <HAL_TIMEx_HallSensor_MspInit+0x84>)
 8001834:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001836:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800183a:	613b      	str	r3, [r7, #16]
 800183c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800183e:	4b12      	ldr	r3, [pc, #72]	@ (8001888 <HAL_TIMEx_HallSensor_MspInit+0x84>)
 8001840:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001842:	4a11      	ldr	r2, [pc, #68]	@ (8001888 <HAL_TIMEx_HallSensor_MspInit+0x84>)
 8001844:	f043 0301 	orr.w	r3, r3, #1
 8001848:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800184a:	4b0f      	ldr	r3, [pc, #60]	@ (8001888 <HAL_TIMEx_HallSensor_MspInit+0x84>)
 800184c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800184e:	f003 0301 	and.w	r3, r3, #1
 8001852:	60fb      	str	r3, [r7, #12]
 8001854:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8001856:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 800185a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800185c:	2302      	movs	r3, #2
 800185e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001860:	2300      	movs	r3, #0
 8001862:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001864:	2300      	movs	r3, #0
 8001866:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001868:	2306      	movs	r3, #6
 800186a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800186c:	f107 0314 	add.w	r3, r7, #20
 8001870:	4619      	mov	r1, r3
 8001872:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001876:	f000 fb6f 	bl	8001f58 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800187a:	bf00      	nop
 800187c:	3728      	adds	r7, #40	@ 0x28
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	40012c00 	.word	0x40012c00
 8001888:	40021000 	.word	0x40021000

0800188c <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b08c      	sub	sp, #48	@ 0x30
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001894:	f107 031c 	add.w	r3, r7, #28
 8001898:	2200      	movs	r2, #0
 800189a:	601a      	str	r2, [r3, #0]
 800189c:	605a      	str	r2, [r3, #4]
 800189e:	609a      	str	r2, [r3, #8]
 80018a0:	60da      	str	r2, [r3, #12]
 80018a2:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a3d      	ldr	r2, [pc, #244]	@ (80019a0 <HAL_TIM_Encoder_MspInit+0x114>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d145      	bne.n	800193a <HAL_TIM_Encoder_MspInit+0xae>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80018ae:	4b3d      	ldr	r3, [pc, #244]	@ (80019a4 <HAL_TIM_Encoder_MspInit+0x118>)
 80018b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018b2:	4a3c      	ldr	r2, [pc, #240]	@ (80019a4 <HAL_TIM_Encoder_MspInit+0x118>)
 80018b4:	f043 0302 	orr.w	r3, r3, #2
 80018b8:	6593      	str	r3, [r2, #88]	@ 0x58
 80018ba:	4b3a      	ldr	r3, [pc, #232]	@ (80019a4 <HAL_TIM_Encoder_MspInit+0x118>)
 80018bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018be:	f003 0302 	and.w	r3, r3, #2
 80018c2:	61bb      	str	r3, [r7, #24]
 80018c4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018c6:	4b37      	ldr	r3, [pc, #220]	@ (80019a4 <HAL_TIM_Encoder_MspInit+0x118>)
 80018c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018ca:	4a36      	ldr	r2, [pc, #216]	@ (80019a4 <HAL_TIM_Encoder_MspInit+0x118>)
 80018cc:	f043 0301 	orr.w	r3, r3, #1
 80018d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80018d2:	4b34      	ldr	r3, [pc, #208]	@ (80019a4 <HAL_TIM_Encoder_MspInit+0x118>)
 80018d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018d6:	f003 0301 	and.w	r3, r3, #1
 80018da:	617b      	str	r3, [r7, #20]
 80018dc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018de:	4b31      	ldr	r3, [pc, #196]	@ (80019a4 <HAL_TIM_Encoder_MspInit+0x118>)
 80018e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018e2:	4a30      	ldr	r2, [pc, #192]	@ (80019a4 <HAL_TIM_Encoder_MspInit+0x118>)
 80018e4:	f043 0302 	orr.w	r3, r3, #2
 80018e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80018ea:	4b2e      	ldr	r3, [pc, #184]	@ (80019a4 <HAL_TIM_Encoder_MspInit+0x118>)
 80018ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018ee:	f003 0302 	and.w	r3, r3, #2
 80018f2:	613b      	str	r3, [r7, #16]
 80018f4:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PA4     ------> TIM3_CH2
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80018f6:	2310      	movs	r3, #16
 80018f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018fa:	2302      	movs	r3, #2
 80018fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018fe:	2300      	movs	r3, #0
 8001900:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001902:	2300      	movs	r3, #0
 8001904:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001906:	2302      	movs	r3, #2
 8001908:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800190a:	f107 031c 	add.w	r3, r7, #28
 800190e:	4619      	mov	r1, r3
 8001910:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001914:	f000 fb20 	bl	8001f58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001918:	2310      	movs	r3, #16
 800191a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800191c:	2302      	movs	r3, #2
 800191e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001920:	2300      	movs	r3, #0
 8001922:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001924:	2300      	movs	r3, #0
 8001926:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001928:	2302      	movs	r3, #2
 800192a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800192c:	f107 031c 	add.w	r3, r7, #28
 8001930:	4619      	mov	r1, r3
 8001932:	481d      	ldr	r0, [pc, #116]	@ (80019a8 <HAL_TIM_Encoder_MspInit+0x11c>)
 8001934:	f000 fb10 	bl	8001f58 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001938:	e02e      	b.n	8001998 <HAL_TIM_Encoder_MspInit+0x10c>
  else if(tim_encoderHandle->Instance==TIM4)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4a1b      	ldr	r2, [pc, #108]	@ (80019ac <HAL_TIM_Encoder_MspInit+0x120>)
 8001940:	4293      	cmp	r3, r2
 8001942:	d129      	bne.n	8001998 <HAL_TIM_Encoder_MspInit+0x10c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001944:	4b17      	ldr	r3, [pc, #92]	@ (80019a4 <HAL_TIM_Encoder_MspInit+0x118>)
 8001946:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001948:	4a16      	ldr	r2, [pc, #88]	@ (80019a4 <HAL_TIM_Encoder_MspInit+0x118>)
 800194a:	f043 0304 	orr.w	r3, r3, #4
 800194e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001950:	4b14      	ldr	r3, [pc, #80]	@ (80019a4 <HAL_TIM_Encoder_MspInit+0x118>)
 8001952:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001954:	f003 0304 	and.w	r3, r3, #4
 8001958:	60fb      	str	r3, [r7, #12]
 800195a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800195c:	4b11      	ldr	r3, [pc, #68]	@ (80019a4 <HAL_TIM_Encoder_MspInit+0x118>)
 800195e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001960:	4a10      	ldr	r2, [pc, #64]	@ (80019a4 <HAL_TIM_Encoder_MspInit+0x118>)
 8001962:	f043 0301 	orr.w	r3, r3, #1
 8001966:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001968:	4b0e      	ldr	r3, [pc, #56]	@ (80019a4 <HAL_TIM_Encoder_MspInit+0x118>)
 800196a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800196c:	f003 0301 	and.w	r3, r3, #1
 8001970:	60bb      	str	r3, [r7, #8]
 8001972:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001974:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001978:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800197a:	2302      	movs	r3, #2
 800197c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800197e:	2300      	movs	r3, #0
 8001980:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001982:	2300      	movs	r3, #0
 8001984:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8001986:	230a      	movs	r3, #10
 8001988:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800198a:	f107 031c 	add.w	r3, r7, #28
 800198e:	4619      	mov	r1, r3
 8001990:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001994:	f000 fae0 	bl	8001f58 <HAL_GPIO_Init>
}
 8001998:	bf00      	nop
 800199a:	3730      	adds	r7, #48	@ 0x30
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}
 80019a0:	40000400 	.word	0x40000400
 80019a4:	40021000 	.word	0x40021000
 80019a8:	48000400 	.word	0x48000400
 80019ac:	40000800 	.word	0x40000800

080019b0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b085      	sub	sp, #20
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM15)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a13      	ldr	r2, [pc, #76]	@ (8001a0c <HAL_TIM_Base_MspInit+0x5c>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d10c      	bne.n	80019dc <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM15_MspInit 0 */

  /* USER CODE END TIM15_MspInit 0 */
    /* TIM15 clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 80019c2:	4b13      	ldr	r3, [pc, #76]	@ (8001a10 <HAL_TIM_Base_MspInit+0x60>)
 80019c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019c6:	4a12      	ldr	r2, [pc, #72]	@ (8001a10 <HAL_TIM_Base_MspInit+0x60>)
 80019c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80019cc:	6613      	str	r3, [r2, #96]	@ 0x60
 80019ce:	4b10      	ldr	r3, [pc, #64]	@ (8001a10 <HAL_TIM_Base_MspInit+0x60>)
 80019d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019d2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80019d6:	60fb      	str	r3, [r7, #12]
 80019d8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM16_CLK_ENABLE();
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 80019da:	e010      	b.n	80019fe <HAL_TIM_Base_MspInit+0x4e>
  else if(tim_baseHandle->Instance==TIM16)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a0c      	ldr	r2, [pc, #48]	@ (8001a14 <HAL_TIM_Base_MspInit+0x64>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d10b      	bne.n	80019fe <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80019e6:	4b0a      	ldr	r3, [pc, #40]	@ (8001a10 <HAL_TIM_Base_MspInit+0x60>)
 80019e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019ea:	4a09      	ldr	r2, [pc, #36]	@ (8001a10 <HAL_TIM_Base_MspInit+0x60>)
 80019ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80019f0:	6613      	str	r3, [r2, #96]	@ 0x60
 80019f2:	4b07      	ldr	r3, [pc, #28]	@ (8001a10 <HAL_TIM_Base_MspInit+0x60>)
 80019f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019fa:	60bb      	str	r3, [r7, #8]
 80019fc:	68bb      	ldr	r3, [r7, #8]
}
 80019fe:	bf00      	nop
 8001a00:	3714      	adds	r7, #20
 8001a02:	46bd      	mov	sp, r7
 8001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a08:	4770      	bx	lr
 8001a0a:	bf00      	nop
 8001a0c:	40014000 	.word	0x40014000
 8001a10:	40021000 	.word	0x40021000
 8001a14:	40014400 	.word	0x40014400

08001a18 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b08a      	sub	sp, #40	@ 0x28
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a20:	f107 0314 	add.w	r3, r7, #20
 8001a24:	2200      	movs	r2, #0
 8001a26:	601a      	str	r2, [r3, #0]
 8001a28:	605a      	str	r2, [r3, #4]
 8001a2a:	609a      	str	r2, [r3, #8]
 8001a2c:	60da      	str	r2, [r3, #12]
 8001a2e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM15)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a22      	ldr	r2, [pc, #136]	@ (8001ac0 <HAL_TIM_MspPostInit+0xa8>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d11d      	bne.n	8001a76 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM15_MspPostInit 0 */

  /* USER CODE END TIM15_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a3a:	4b22      	ldr	r3, [pc, #136]	@ (8001ac4 <HAL_TIM_MspPostInit+0xac>)
 8001a3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a3e:	4a21      	ldr	r2, [pc, #132]	@ (8001ac4 <HAL_TIM_MspPostInit+0xac>)
 8001a40:	f043 0301 	orr.w	r3, r3, #1
 8001a44:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a46:	4b1f      	ldr	r3, [pc, #124]	@ (8001ac4 <HAL_TIM_MspPostInit+0xac>)
 8001a48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a4a:	f003 0301 	and.w	r3, r3, #1
 8001a4e:	613b      	str	r3, [r7, #16]
 8001a50:	693b      	ldr	r3, [r7, #16]
    /**TIM15 GPIO Configuration
    PA1     ------> TIM15_CH1N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001a52:	2302      	movs	r3, #2
 8001a54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a56:	2302      	movs	r3, #2
 8001a58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM15;
 8001a62:	2309      	movs	r3, #9
 8001a64:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a66:	f107 0314 	add.w	r3, r7, #20
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a70:	f000 fa72 	bl	8001f58 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 8001a74:	e020      	b.n	8001ab8 <HAL_TIM_MspPostInit+0xa0>
  else if(timHandle->Instance==TIM16)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4a13      	ldr	r2, [pc, #76]	@ (8001ac8 <HAL_TIM_MspPostInit+0xb0>)
 8001a7c:	4293      	cmp	r3, r2
 8001a7e:	d11b      	bne.n	8001ab8 <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a80:	4b10      	ldr	r3, [pc, #64]	@ (8001ac4 <HAL_TIM_MspPostInit+0xac>)
 8001a82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a84:	4a0f      	ldr	r2, [pc, #60]	@ (8001ac4 <HAL_TIM_MspPostInit+0xac>)
 8001a86:	f043 0302 	orr.w	r3, r3, #2
 8001a8a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a8c:	4b0d      	ldr	r3, [pc, #52]	@ (8001ac4 <HAL_TIM_MspPostInit+0xac>)
 8001a8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a90:	f003 0302 	and.w	r3, r3, #2
 8001a94:	60fb      	str	r3, [r7, #12]
 8001a96:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001a98:	2340      	movs	r3, #64	@ 0x40
 8001a9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a9c:	2302      	movs	r3, #2
 8001a9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001aac:	f107 0314 	add.w	r3, r7, #20
 8001ab0:	4619      	mov	r1, r3
 8001ab2:	4806      	ldr	r0, [pc, #24]	@ (8001acc <HAL_TIM_MspPostInit+0xb4>)
 8001ab4:	f000 fa50 	bl	8001f58 <HAL_GPIO_Init>
}
 8001ab8:	bf00      	nop
 8001aba:	3728      	adds	r7, #40	@ 0x28
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}
 8001ac0:	40014000 	.word	0x40014000
 8001ac4:	40021000 	.word	0x40021000
 8001ac8:	40014400 	.word	0x40014400
 8001acc:	48000400 	.word	0x48000400

08001ad0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001ad4:	4b22      	ldr	r3, [pc, #136]	@ (8001b60 <MX_USART2_UART_Init+0x90>)
 8001ad6:	4a23      	ldr	r2, [pc, #140]	@ (8001b64 <MX_USART2_UART_Init+0x94>)
 8001ad8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001ada:	4b21      	ldr	r3, [pc, #132]	@ (8001b60 <MX_USART2_UART_Init+0x90>)
 8001adc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001ae0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001ae2:	4b1f      	ldr	r3, [pc, #124]	@ (8001b60 <MX_USART2_UART_Init+0x90>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001ae8:	4b1d      	ldr	r3, [pc, #116]	@ (8001b60 <MX_USART2_UART_Init+0x90>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001aee:	4b1c      	ldr	r3, [pc, #112]	@ (8001b60 <MX_USART2_UART_Init+0x90>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001af4:	4b1a      	ldr	r3, [pc, #104]	@ (8001b60 <MX_USART2_UART_Init+0x90>)
 8001af6:	220c      	movs	r2, #12
 8001af8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001afa:	4b19      	ldr	r3, [pc, #100]	@ (8001b60 <MX_USART2_UART_Init+0x90>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b00:	4b17      	ldr	r3, [pc, #92]	@ (8001b60 <MX_USART2_UART_Init+0x90>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b06:	4b16      	ldr	r3, [pc, #88]	@ (8001b60 <MX_USART2_UART_Init+0x90>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001b0c:	4b14      	ldr	r3, [pc, #80]	@ (8001b60 <MX_USART2_UART_Init+0x90>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b12:	4b13      	ldr	r3, [pc, #76]	@ (8001b60 <MX_USART2_UART_Init+0x90>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001b18:	4811      	ldr	r0, [pc, #68]	@ (8001b60 <MX_USART2_UART_Init+0x90>)
 8001b1a:	f003 f9a0 	bl	8004e5e <HAL_UART_Init>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d001      	beq.n	8001b28 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001b24:	f7ff fb67 	bl	80011f6 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b28:	2100      	movs	r1, #0
 8001b2a:	480d      	ldr	r0, [pc, #52]	@ (8001b60 <MX_USART2_UART_Init+0x90>)
 8001b2c:	f003 ff0c 	bl	8005948 <HAL_UARTEx_SetTxFifoThreshold>
 8001b30:	4603      	mov	r3, r0
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d001      	beq.n	8001b3a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001b36:	f7ff fb5e 	bl	80011f6 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b3a:	2100      	movs	r1, #0
 8001b3c:	4808      	ldr	r0, [pc, #32]	@ (8001b60 <MX_USART2_UART_Init+0x90>)
 8001b3e:	f003 ff41 	bl	80059c4 <HAL_UARTEx_SetRxFifoThreshold>
 8001b42:	4603      	mov	r3, r0
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d001      	beq.n	8001b4c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001b48:	f7ff fb55 	bl	80011f6 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001b4c:	4804      	ldr	r0, [pc, #16]	@ (8001b60 <MX_USART2_UART_Init+0x90>)
 8001b4e:	f003 fec2 	bl	80058d6 <HAL_UARTEx_DisableFifoMode>
 8001b52:	4603      	mov	r3, r0
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d001      	beq.n	8001b5c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001b58:	f7ff fb4d 	bl	80011f6 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001b5c:	bf00      	nop
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	20000274 	.word	0x20000274
 8001b64:	40004400 	.word	0x40004400

08001b68 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b09a      	sub	sp, #104	@ 0x68
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b70:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001b74:	2200      	movs	r2, #0
 8001b76:	601a      	str	r2, [r3, #0]
 8001b78:	605a      	str	r2, [r3, #4]
 8001b7a:	609a      	str	r2, [r3, #8]
 8001b7c:	60da      	str	r2, [r3, #12]
 8001b7e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b80:	f107 0310 	add.w	r3, r7, #16
 8001b84:	2244      	movs	r2, #68	@ 0x44
 8001b86:	2100      	movs	r1, #0
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f004 fa9b 	bl	80060c4 <memset>
  if(uartHandle->Instance==USART2)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4a1f      	ldr	r2, [pc, #124]	@ (8001c10 <HAL_UART_MspInit+0xa8>)
 8001b94:	4293      	cmp	r3, r2
 8001b96:	d136      	bne.n	8001c06 <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001b98:	2302      	movs	r3, #2
 8001b9a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ba0:	f107 0310 	add.w	r3, r7, #16
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f001 fa9f 	bl	80030e8 <HAL_RCCEx_PeriphCLKConfig>
 8001baa:	4603      	mov	r3, r0
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d001      	beq.n	8001bb4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001bb0:	f7ff fb21 	bl	80011f6 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001bb4:	4b17      	ldr	r3, [pc, #92]	@ (8001c14 <HAL_UART_MspInit+0xac>)
 8001bb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bb8:	4a16      	ldr	r2, [pc, #88]	@ (8001c14 <HAL_UART_MspInit+0xac>)
 8001bba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001bbe:	6593      	str	r3, [r2, #88]	@ 0x58
 8001bc0:	4b14      	ldr	r3, [pc, #80]	@ (8001c14 <HAL_UART_MspInit+0xac>)
 8001bc2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bc4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bc8:	60fb      	str	r3, [r7, #12]
 8001bca:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bcc:	4b11      	ldr	r3, [pc, #68]	@ (8001c14 <HAL_UART_MspInit+0xac>)
 8001bce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bd0:	4a10      	ldr	r2, [pc, #64]	@ (8001c14 <HAL_UART_MspInit+0xac>)
 8001bd2:	f043 0301 	orr.w	r3, r3, #1
 8001bd6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001bd8:	4b0e      	ldr	r3, [pc, #56]	@ (8001c14 <HAL_UART_MspInit+0xac>)
 8001bda:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bdc:	f003 0301 	and.w	r3, r3, #1
 8001be0:	60bb      	str	r3, [r7, #8]
 8001be2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8001be4:	230c      	movs	r3, #12
 8001be6:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001be8:	2302      	movs	r3, #2
 8001bea:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bec:	2300      	movs	r3, #0
 8001bee:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001bf4:	2307      	movs	r3, #7
 8001bf6:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bf8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001bfc:	4619      	mov	r1, r3
 8001bfe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c02:	f000 f9a9 	bl	8001f58 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001c06:	bf00      	nop
 8001c08:	3768      	adds	r7, #104	@ 0x68
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	40004400 	.word	0x40004400
 8001c14:	40021000 	.word	0x40021000

08001c18 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001c18:	480d      	ldr	r0, [pc, #52]	@ (8001c50 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001c1a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001c1c:	f7ff fbc6 	bl	80013ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c20:	480c      	ldr	r0, [pc, #48]	@ (8001c54 <LoopForever+0x6>)
  ldr r1, =_edata
 8001c22:	490d      	ldr	r1, [pc, #52]	@ (8001c58 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001c24:	4a0d      	ldr	r2, [pc, #52]	@ (8001c5c <LoopForever+0xe>)
  movs r3, #0
 8001c26:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001c28:	e002      	b.n	8001c30 <LoopCopyDataInit>

08001c2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c2e:	3304      	adds	r3, #4

08001c30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c34:	d3f9      	bcc.n	8001c2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c36:	4a0a      	ldr	r2, [pc, #40]	@ (8001c60 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001c38:	4c0a      	ldr	r4, [pc, #40]	@ (8001c64 <LoopForever+0x16>)
  movs r3, #0
 8001c3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c3c:	e001      	b.n	8001c42 <LoopFillZerobss>

08001c3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c40:	3204      	adds	r2, #4

08001c42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c44:	d3fb      	bcc.n	8001c3e <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8001c46:	f004 fa45 	bl	80060d4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001c4a:	f7ff fa27 	bl	800109c <main>

08001c4e <LoopForever>:

LoopForever:
    b LoopForever
 8001c4e:	e7fe      	b.n	8001c4e <LoopForever>
  ldr   r0, =_estack
 8001c50:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001c54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c58:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 8001c5c:	08006184 	.word	0x08006184
  ldr r2, =_sbss
 8001c60:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 8001c64:	2000030c 	.word	0x2000030c

08001c68 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001c68:	e7fe      	b.n	8001c68 <ADC1_2_IRQHandler>

08001c6a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c6a:	b580      	push	{r7, lr}
 8001c6c:	b082      	sub	sp, #8
 8001c6e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001c70:	2300      	movs	r3, #0
 8001c72:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c74:	2003      	movs	r0, #3
 8001c76:	f000 f93d 	bl	8001ef4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c7a:	2000      	movs	r0, #0
 8001c7c:	f000 f80e 	bl	8001c9c <HAL_InitTick>
 8001c80:	4603      	mov	r3, r0
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d002      	beq.n	8001c8c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001c86:	2301      	movs	r3, #1
 8001c88:	71fb      	strb	r3, [r7, #7]
 8001c8a:	e001      	b.n	8001c90 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001c8c:	f7ff fb3a 	bl	8001304 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001c90:	79fb      	ldrb	r3, [r7, #7]

}
 8001c92:	4618      	mov	r0, r3
 8001c94:	3708      	adds	r7, #8
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}
	...

08001c9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b084      	sub	sp, #16
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001ca8:	4b16      	ldr	r3, [pc, #88]	@ (8001d04 <HAL_InitTick+0x68>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d022      	beq.n	8001cf6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001cb0:	4b15      	ldr	r3, [pc, #84]	@ (8001d08 <HAL_InitTick+0x6c>)
 8001cb2:	681a      	ldr	r2, [r3, #0]
 8001cb4:	4b13      	ldr	r3, [pc, #76]	@ (8001d04 <HAL_InitTick+0x68>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001cbc:	fbb1 f3f3 	udiv	r3, r1, r3
 8001cc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f000 f93a 	bl	8001f3e <HAL_SYSTICK_Config>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d10f      	bne.n	8001cf0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2b0f      	cmp	r3, #15
 8001cd4:	d809      	bhi.n	8001cea <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	6879      	ldr	r1, [r7, #4]
 8001cda:	f04f 30ff 	mov.w	r0, #4294967295
 8001cde:	f000 f914 	bl	8001f0a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001ce2:	4a0a      	ldr	r2, [pc, #40]	@ (8001d0c <HAL_InitTick+0x70>)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6013      	str	r3, [r2, #0]
 8001ce8:	e007      	b.n	8001cfa <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001cea:	2301      	movs	r3, #1
 8001cec:	73fb      	strb	r3, [r7, #15]
 8001cee:	e004      	b.n	8001cfa <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	73fb      	strb	r3, [r7, #15]
 8001cf4:	e001      	b.n	8001cfa <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001cfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	3710      	adds	r7, #16
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}
 8001d04:	20000020 	.word	0x20000020
 8001d08:	20000018 	.word	0x20000018
 8001d0c:	2000001c 	.word	0x2000001c

08001d10 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d10:	b480      	push	{r7}
 8001d12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d14:	4b05      	ldr	r3, [pc, #20]	@ (8001d2c <HAL_IncTick+0x1c>)
 8001d16:	681a      	ldr	r2, [r3, #0]
 8001d18:	4b05      	ldr	r3, [pc, #20]	@ (8001d30 <HAL_IncTick+0x20>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4413      	add	r3, r2
 8001d1e:	4a03      	ldr	r2, [pc, #12]	@ (8001d2c <HAL_IncTick+0x1c>)
 8001d20:	6013      	str	r3, [r2, #0]
}
 8001d22:	bf00      	nop
 8001d24:	46bd      	mov	sp, r7
 8001d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2a:	4770      	bx	lr
 8001d2c:	20000308 	.word	0x20000308
 8001d30:	20000020 	.word	0x20000020

08001d34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d34:	b480      	push	{r7}
 8001d36:	af00      	add	r7, sp, #0
  return uwTick;
 8001d38:	4b03      	ldr	r3, [pc, #12]	@ (8001d48 <HAL_GetTick+0x14>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
}
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr
 8001d46:	bf00      	nop
 8001d48:	20000308 	.word	0x20000308

08001d4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b084      	sub	sp, #16
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d54:	f7ff ffee 	bl	8001d34 <HAL_GetTick>
 8001d58:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d64:	d004      	beq.n	8001d70 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d66:	4b09      	ldr	r3, [pc, #36]	@ (8001d8c <HAL_Delay+0x40>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	68fa      	ldr	r2, [r7, #12]
 8001d6c:	4413      	add	r3, r2
 8001d6e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d70:	bf00      	nop
 8001d72:	f7ff ffdf 	bl	8001d34 <HAL_GetTick>
 8001d76:	4602      	mov	r2, r0
 8001d78:	68bb      	ldr	r3, [r7, #8]
 8001d7a:	1ad3      	subs	r3, r2, r3
 8001d7c:	68fa      	ldr	r2, [r7, #12]
 8001d7e:	429a      	cmp	r2, r3
 8001d80:	d8f7      	bhi.n	8001d72 <HAL_Delay+0x26>
  {
  }
}
 8001d82:	bf00      	nop
 8001d84:	bf00      	nop
 8001d86:	3710      	adds	r7, #16
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd80      	pop	{r7, pc}
 8001d8c:	20000020 	.word	0x20000020

08001d90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b085      	sub	sp, #20
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	f003 0307 	and.w	r3, r3, #7
 8001d9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001da0:	4b0c      	ldr	r3, [pc, #48]	@ (8001dd4 <__NVIC_SetPriorityGrouping+0x44>)
 8001da2:	68db      	ldr	r3, [r3, #12]
 8001da4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001da6:	68ba      	ldr	r2, [r7, #8]
 8001da8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001dac:	4013      	ands	r3, r2
 8001dae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001db4:	68bb      	ldr	r3, [r7, #8]
 8001db6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001db8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001dbc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001dc0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001dc2:	4a04      	ldr	r2, [pc, #16]	@ (8001dd4 <__NVIC_SetPriorityGrouping+0x44>)
 8001dc4:	68bb      	ldr	r3, [r7, #8]
 8001dc6:	60d3      	str	r3, [r2, #12]
}
 8001dc8:	bf00      	nop
 8001dca:	3714      	adds	r7, #20
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd2:	4770      	bx	lr
 8001dd4:	e000ed00 	.word	0xe000ed00

08001dd8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ddc:	4b04      	ldr	r3, [pc, #16]	@ (8001df0 <__NVIC_GetPriorityGrouping+0x18>)
 8001dde:	68db      	ldr	r3, [r3, #12]
 8001de0:	0a1b      	lsrs	r3, r3, #8
 8001de2:	f003 0307 	and.w	r3, r3, #7
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	46bd      	mov	sp, r7
 8001dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dee:	4770      	bx	lr
 8001df0:	e000ed00 	.word	0xe000ed00

08001df4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b083      	sub	sp, #12
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	6039      	str	r1, [r7, #0]
 8001dfe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	db0a      	blt.n	8001e1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	b2da      	uxtb	r2, r3
 8001e0c:	490c      	ldr	r1, [pc, #48]	@ (8001e40 <__NVIC_SetPriority+0x4c>)
 8001e0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e12:	0112      	lsls	r2, r2, #4
 8001e14:	b2d2      	uxtb	r2, r2
 8001e16:	440b      	add	r3, r1
 8001e18:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e1c:	e00a      	b.n	8001e34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	b2da      	uxtb	r2, r3
 8001e22:	4908      	ldr	r1, [pc, #32]	@ (8001e44 <__NVIC_SetPriority+0x50>)
 8001e24:	79fb      	ldrb	r3, [r7, #7]
 8001e26:	f003 030f 	and.w	r3, r3, #15
 8001e2a:	3b04      	subs	r3, #4
 8001e2c:	0112      	lsls	r2, r2, #4
 8001e2e:	b2d2      	uxtb	r2, r2
 8001e30:	440b      	add	r3, r1
 8001e32:	761a      	strb	r2, [r3, #24]
}
 8001e34:	bf00      	nop
 8001e36:	370c      	adds	r7, #12
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3e:	4770      	bx	lr
 8001e40:	e000e100 	.word	0xe000e100
 8001e44:	e000ed00 	.word	0xe000ed00

08001e48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b089      	sub	sp, #36	@ 0x24
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	60f8      	str	r0, [r7, #12]
 8001e50:	60b9      	str	r1, [r7, #8]
 8001e52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	f003 0307 	and.w	r3, r3, #7
 8001e5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e5c:	69fb      	ldr	r3, [r7, #28]
 8001e5e:	f1c3 0307 	rsb	r3, r3, #7
 8001e62:	2b04      	cmp	r3, #4
 8001e64:	bf28      	it	cs
 8001e66:	2304      	movcs	r3, #4
 8001e68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e6a:	69fb      	ldr	r3, [r7, #28]
 8001e6c:	3304      	adds	r3, #4
 8001e6e:	2b06      	cmp	r3, #6
 8001e70:	d902      	bls.n	8001e78 <NVIC_EncodePriority+0x30>
 8001e72:	69fb      	ldr	r3, [r7, #28]
 8001e74:	3b03      	subs	r3, #3
 8001e76:	e000      	b.n	8001e7a <NVIC_EncodePriority+0x32>
 8001e78:	2300      	movs	r3, #0
 8001e7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e7c:	f04f 32ff 	mov.w	r2, #4294967295
 8001e80:	69bb      	ldr	r3, [r7, #24]
 8001e82:	fa02 f303 	lsl.w	r3, r2, r3
 8001e86:	43da      	mvns	r2, r3
 8001e88:	68bb      	ldr	r3, [r7, #8]
 8001e8a:	401a      	ands	r2, r3
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e90:	f04f 31ff 	mov.w	r1, #4294967295
 8001e94:	697b      	ldr	r3, [r7, #20]
 8001e96:	fa01 f303 	lsl.w	r3, r1, r3
 8001e9a:	43d9      	mvns	r1, r3
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ea0:	4313      	orrs	r3, r2
         );
}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	3724      	adds	r7, #36	@ 0x24
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eac:	4770      	bx	lr
	...

08001eb0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b082      	sub	sp, #8
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	3b01      	subs	r3, #1
 8001ebc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001ec0:	d301      	bcc.n	8001ec6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	e00f      	b.n	8001ee6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ec6:	4a0a      	ldr	r2, [pc, #40]	@ (8001ef0 <SysTick_Config+0x40>)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	3b01      	subs	r3, #1
 8001ecc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ece:	210f      	movs	r1, #15
 8001ed0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ed4:	f7ff ff8e 	bl	8001df4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ed8:	4b05      	ldr	r3, [pc, #20]	@ (8001ef0 <SysTick_Config+0x40>)
 8001eda:	2200      	movs	r2, #0
 8001edc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ede:	4b04      	ldr	r3, [pc, #16]	@ (8001ef0 <SysTick_Config+0x40>)
 8001ee0:	2207      	movs	r2, #7
 8001ee2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ee4:	2300      	movs	r3, #0
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	3708      	adds	r7, #8
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	e000e010 	.word	0xe000e010

08001ef4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b082      	sub	sp, #8
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001efc:	6878      	ldr	r0, [r7, #4]
 8001efe:	f7ff ff47 	bl	8001d90 <__NVIC_SetPriorityGrouping>
}
 8001f02:	bf00      	nop
 8001f04:	3708      	adds	r7, #8
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}

08001f0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f0a:	b580      	push	{r7, lr}
 8001f0c:	b086      	sub	sp, #24
 8001f0e:	af00      	add	r7, sp, #0
 8001f10:	4603      	mov	r3, r0
 8001f12:	60b9      	str	r1, [r7, #8]
 8001f14:	607a      	str	r2, [r7, #4]
 8001f16:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001f18:	f7ff ff5e 	bl	8001dd8 <__NVIC_GetPriorityGrouping>
 8001f1c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f1e:	687a      	ldr	r2, [r7, #4]
 8001f20:	68b9      	ldr	r1, [r7, #8]
 8001f22:	6978      	ldr	r0, [r7, #20]
 8001f24:	f7ff ff90 	bl	8001e48 <NVIC_EncodePriority>
 8001f28:	4602      	mov	r2, r0
 8001f2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f2e:	4611      	mov	r1, r2
 8001f30:	4618      	mov	r0, r3
 8001f32:	f7ff ff5f 	bl	8001df4 <__NVIC_SetPriority>
}
 8001f36:	bf00      	nop
 8001f38:	3718      	adds	r7, #24
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}

08001f3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f3e:	b580      	push	{r7, lr}
 8001f40:	b082      	sub	sp, #8
 8001f42:	af00      	add	r7, sp, #0
 8001f44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f46:	6878      	ldr	r0, [r7, #4]
 8001f48:	f7ff ffb2 	bl	8001eb0 <SysTick_Config>
 8001f4c:	4603      	mov	r3, r0
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	3708      	adds	r7, #8
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}
	...

08001f58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b087      	sub	sp, #28
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
 8001f60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001f62:	2300      	movs	r3, #0
 8001f64:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001f66:	e15a      	b.n	800221e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	681a      	ldr	r2, [r3, #0]
 8001f6c:	2101      	movs	r1, #1
 8001f6e:	697b      	ldr	r3, [r7, #20]
 8001f70:	fa01 f303 	lsl.w	r3, r1, r3
 8001f74:	4013      	ands	r3, r2
 8001f76:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	f000 814c 	beq.w	8002218 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	f003 0303 	and.w	r3, r3, #3
 8001f88:	2b01      	cmp	r3, #1
 8001f8a:	d005      	beq.n	8001f98 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001f94:	2b02      	cmp	r3, #2
 8001f96:	d130      	bne.n	8001ffa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	689b      	ldr	r3, [r3, #8]
 8001f9c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001f9e:	697b      	ldr	r3, [r7, #20]
 8001fa0:	005b      	lsls	r3, r3, #1
 8001fa2:	2203      	movs	r2, #3
 8001fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa8:	43db      	mvns	r3, r3
 8001faa:	693a      	ldr	r2, [r7, #16]
 8001fac:	4013      	ands	r3, r2
 8001fae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	68da      	ldr	r2, [r3, #12]
 8001fb4:	697b      	ldr	r3, [r7, #20]
 8001fb6:	005b      	lsls	r3, r3, #1
 8001fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fbc:	693a      	ldr	r2, [r7, #16]
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	693a      	ldr	r2, [r7, #16]
 8001fc6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001fce:	2201      	movs	r2, #1
 8001fd0:	697b      	ldr	r3, [r7, #20]
 8001fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd6:	43db      	mvns	r3, r3
 8001fd8:	693a      	ldr	r2, [r7, #16]
 8001fda:	4013      	ands	r3, r2
 8001fdc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	091b      	lsrs	r3, r3, #4
 8001fe4:	f003 0201 	and.w	r2, r3, #1
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	fa02 f303 	lsl.w	r3, r2, r3
 8001fee:	693a      	ldr	r2, [r7, #16]
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	693a      	ldr	r2, [r7, #16]
 8001ff8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	f003 0303 	and.w	r3, r3, #3
 8002002:	2b03      	cmp	r3, #3
 8002004:	d017      	beq.n	8002036 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	68db      	ldr	r3, [r3, #12]
 800200a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	005b      	lsls	r3, r3, #1
 8002010:	2203      	movs	r2, #3
 8002012:	fa02 f303 	lsl.w	r3, r2, r3
 8002016:	43db      	mvns	r3, r3
 8002018:	693a      	ldr	r2, [r7, #16]
 800201a:	4013      	ands	r3, r2
 800201c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	689a      	ldr	r2, [r3, #8]
 8002022:	697b      	ldr	r3, [r7, #20]
 8002024:	005b      	lsls	r3, r3, #1
 8002026:	fa02 f303 	lsl.w	r3, r2, r3
 800202a:	693a      	ldr	r2, [r7, #16]
 800202c:	4313      	orrs	r3, r2
 800202e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	693a      	ldr	r2, [r7, #16]
 8002034:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	f003 0303 	and.w	r3, r3, #3
 800203e:	2b02      	cmp	r3, #2
 8002040:	d123      	bne.n	800208a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002042:	697b      	ldr	r3, [r7, #20]
 8002044:	08da      	lsrs	r2, r3, #3
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	3208      	adds	r2, #8
 800204a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800204e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002050:	697b      	ldr	r3, [r7, #20]
 8002052:	f003 0307 	and.w	r3, r3, #7
 8002056:	009b      	lsls	r3, r3, #2
 8002058:	220f      	movs	r2, #15
 800205a:	fa02 f303 	lsl.w	r3, r2, r3
 800205e:	43db      	mvns	r3, r3
 8002060:	693a      	ldr	r2, [r7, #16]
 8002062:	4013      	ands	r3, r2
 8002064:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	691a      	ldr	r2, [r3, #16]
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	f003 0307 	and.w	r3, r3, #7
 8002070:	009b      	lsls	r3, r3, #2
 8002072:	fa02 f303 	lsl.w	r3, r2, r3
 8002076:	693a      	ldr	r2, [r7, #16]
 8002078:	4313      	orrs	r3, r2
 800207a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	08da      	lsrs	r2, r3, #3
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	3208      	adds	r2, #8
 8002084:	6939      	ldr	r1, [r7, #16]
 8002086:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	005b      	lsls	r3, r3, #1
 8002094:	2203      	movs	r2, #3
 8002096:	fa02 f303 	lsl.w	r3, r2, r3
 800209a:	43db      	mvns	r3, r3
 800209c:	693a      	ldr	r2, [r7, #16]
 800209e:	4013      	ands	r3, r2
 80020a0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	f003 0203 	and.w	r2, r3, #3
 80020aa:	697b      	ldr	r3, [r7, #20]
 80020ac:	005b      	lsls	r3, r3, #1
 80020ae:	fa02 f303 	lsl.w	r3, r2, r3
 80020b2:	693a      	ldr	r2, [r7, #16]
 80020b4:	4313      	orrs	r3, r2
 80020b6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	693a      	ldr	r2, [r7, #16]
 80020bc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	f000 80a6 	beq.w	8002218 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020cc:	4b5b      	ldr	r3, [pc, #364]	@ (800223c <HAL_GPIO_Init+0x2e4>)
 80020ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020d0:	4a5a      	ldr	r2, [pc, #360]	@ (800223c <HAL_GPIO_Init+0x2e4>)
 80020d2:	f043 0301 	orr.w	r3, r3, #1
 80020d6:	6613      	str	r3, [r2, #96]	@ 0x60
 80020d8:	4b58      	ldr	r3, [pc, #352]	@ (800223c <HAL_GPIO_Init+0x2e4>)
 80020da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020dc:	f003 0301 	and.w	r3, r3, #1
 80020e0:	60bb      	str	r3, [r7, #8]
 80020e2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80020e4:	4a56      	ldr	r2, [pc, #344]	@ (8002240 <HAL_GPIO_Init+0x2e8>)
 80020e6:	697b      	ldr	r3, [r7, #20]
 80020e8:	089b      	lsrs	r3, r3, #2
 80020ea:	3302      	adds	r3, #2
 80020ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020f0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80020f2:	697b      	ldr	r3, [r7, #20]
 80020f4:	f003 0303 	and.w	r3, r3, #3
 80020f8:	009b      	lsls	r3, r3, #2
 80020fa:	220f      	movs	r2, #15
 80020fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002100:	43db      	mvns	r3, r3
 8002102:	693a      	ldr	r2, [r7, #16]
 8002104:	4013      	ands	r3, r2
 8002106:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800210e:	d01f      	beq.n	8002150 <HAL_GPIO_Init+0x1f8>
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	4a4c      	ldr	r2, [pc, #304]	@ (8002244 <HAL_GPIO_Init+0x2ec>)
 8002114:	4293      	cmp	r3, r2
 8002116:	d019      	beq.n	800214c <HAL_GPIO_Init+0x1f4>
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	4a4b      	ldr	r2, [pc, #300]	@ (8002248 <HAL_GPIO_Init+0x2f0>)
 800211c:	4293      	cmp	r3, r2
 800211e:	d013      	beq.n	8002148 <HAL_GPIO_Init+0x1f0>
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	4a4a      	ldr	r2, [pc, #296]	@ (800224c <HAL_GPIO_Init+0x2f4>)
 8002124:	4293      	cmp	r3, r2
 8002126:	d00d      	beq.n	8002144 <HAL_GPIO_Init+0x1ec>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	4a49      	ldr	r2, [pc, #292]	@ (8002250 <HAL_GPIO_Init+0x2f8>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d007      	beq.n	8002140 <HAL_GPIO_Init+0x1e8>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	4a48      	ldr	r2, [pc, #288]	@ (8002254 <HAL_GPIO_Init+0x2fc>)
 8002134:	4293      	cmp	r3, r2
 8002136:	d101      	bne.n	800213c <HAL_GPIO_Init+0x1e4>
 8002138:	2305      	movs	r3, #5
 800213a:	e00a      	b.n	8002152 <HAL_GPIO_Init+0x1fa>
 800213c:	2306      	movs	r3, #6
 800213e:	e008      	b.n	8002152 <HAL_GPIO_Init+0x1fa>
 8002140:	2304      	movs	r3, #4
 8002142:	e006      	b.n	8002152 <HAL_GPIO_Init+0x1fa>
 8002144:	2303      	movs	r3, #3
 8002146:	e004      	b.n	8002152 <HAL_GPIO_Init+0x1fa>
 8002148:	2302      	movs	r3, #2
 800214a:	e002      	b.n	8002152 <HAL_GPIO_Init+0x1fa>
 800214c:	2301      	movs	r3, #1
 800214e:	e000      	b.n	8002152 <HAL_GPIO_Init+0x1fa>
 8002150:	2300      	movs	r3, #0
 8002152:	697a      	ldr	r2, [r7, #20]
 8002154:	f002 0203 	and.w	r2, r2, #3
 8002158:	0092      	lsls	r2, r2, #2
 800215a:	4093      	lsls	r3, r2
 800215c:	693a      	ldr	r2, [r7, #16]
 800215e:	4313      	orrs	r3, r2
 8002160:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002162:	4937      	ldr	r1, [pc, #220]	@ (8002240 <HAL_GPIO_Init+0x2e8>)
 8002164:	697b      	ldr	r3, [r7, #20]
 8002166:	089b      	lsrs	r3, r3, #2
 8002168:	3302      	adds	r3, #2
 800216a:	693a      	ldr	r2, [r7, #16]
 800216c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002170:	4b39      	ldr	r3, [pc, #228]	@ (8002258 <HAL_GPIO_Init+0x300>)
 8002172:	689b      	ldr	r3, [r3, #8]
 8002174:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	43db      	mvns	r3, r3
 800217a:	693a      	ldr	r2, [r7, #16]
 800217c:	4013      	ands	r3, r2
 800217e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002188:	2b00      	cmp	r3, #0
 800218a:	d003      	beq.n	8002194 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800218c:	693a      	ldr	r2, [r7, #16]
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	4313      	orrs	r3, r2
 8002192:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002194:	4a30      	ldr	r2, [pc, #192]	@ (8002258 <HAL_GPIO_Init+0x300>)
 8002196:	693b      	ldr	r3, [r7, #16]
 8002198:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800219a:	4b2f      	ldr	r3, [pc, #188]	@ (8002258 <HAL_GPIO_Init+0x300>)
 800219c:	68db      	ldr	r3, [r3, #12]
 800219e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	43db      	mvns	r3, r3
 80021a4:	693a      	ldr	r2, [r7, #16]
 80021a6:	4013      	ands	r3, r2
 80021a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d003      	beq.n	80021be <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80021b6:	693a      	ldr	r2, [r7, #16]
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	4313      	orrs	r3, r2
 80021bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80021be:	4a26      	ldr	r2, [pc, #152]	@ (8002258 <HAL_GPIO_Init+0x300>)
 80021c0:	693b      	ldr	r3, [r7, #16]
 80021c2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80021c4:	4b24      	ldr	r3, [pc, #144]	@ (8002258 <HAL_GPIO_Init+0x300>)
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	43db      	mvns	r3, r3
 80021ce:	693a      	ldr	r2, [r7, #16]
 80021d0:	4013      	ands	r3, r2
 80021d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d003      	beq.n	80021e8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80021e0:	693a      	ldr	r2, [r7, #16]
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	4313      	orrs	r3, r2
 80021e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80021e8:	4a1b      	ldr	r2, [pc, #108]	@ (8002258 <HAL_GPIO_Init+0x300>)
 80021ea:	693b      	ldr	r3, [r7, #16]
 80021ec:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80021ee:	4b1a      	ldr	r3, [pc, #104]	@ (8002258 <HAL_GPIO_Init+0x300>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	43db      	mvns	r3, r3
 80021f8:	693a      	ldr	r2, [r7, #16]
 80021fa:	4013      	ands	r3, r2
 80021fc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002206:	2b00      	cmp	r3, #0
 8002208:	d003      	beq.n	8002212 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800220a:	693a      	ldr	r2, [r7, #16]
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	4313      	orrs	r3, r2
 8002210:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002212:	4a11      	ldr	r2, [pc, #68]	@ (8002258 <HAL_GPIO_Init+0x300>)
 8002214:	693b      	ldr	r3, [r7, #16]
 8002216:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002218:	697b      	ldr	r3, [r7, #20]
 800221a:	3301      	adds	r3, #1
 800221c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	681a      	ldr	r2, [r3, #0]
 8002222:	697b      	ldr	r3, [r7, #20]
 8002224:	fa22 f303 	lsr.w	r3, r2, r3
 8002228:	2b00      	cmp	r3, #0
 800222a:	f47f ae9d 	bne.w	8001f68 <HAL_GPIO_Init+0x10>
  }
}
 800222e:	bf00      	nop
 8002230:	bf00      	nop
 8002232:	371c      	adds	r7, #28
 8002234:	46bd      	mov	sp, r7
 8002236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223a:	4770      	bx	lr
 800223c:	40021000 	.word	0x40021000
 8002240:	40010000 	.word	0x40010000
 8002244:	48000400 	.word	0x48000400
 8002248:	48000800 	.word	0x48000800
 800224c:	48000c00 	.word	0x48000c00
 8002250:	48001000 	.word	0x48001000
 8002254:	48001400 	.word	0x48001400
 8002258:	40010400 	.word	0x40010400

0800225c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800225c:	b480      	push	{r7}
 800225e:	b083      	sub	sp, #12
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
 8002264:	460b      	mov	r3, r1
 8002266:	807b      	strh	r3, [r7, #2]
 8002268:	4613      	mov	r3, r2
 800226a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800226c:	787b      	ldrb	r3, [r7, #1]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d003      	beq.n	800227a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002272:	887a      	ldrh	r2, [r7, #2]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002278:	e002      	b.n	8002280 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800227a:	887a      	ldrh	r2, [r7, #2]
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002280:	bf00      	nop
 8002282:	370c      	adds	r7, #12
 8002284:	46bd      	mov	sp, r7
 8002286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228a:	4770      	bx	lr

0800228c <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800228c:	b480      	push	{r7}
 800228e:	b085      	sub	sp, #20
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
 8002294:	460b      	mov	r3, r1
 8002296:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	695b      	ldr	r3, [r3, #20]
 800229c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800229e:	887a      	ldrh	r2, [r7, #2]
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	4013      	ands	r3, r2
 80022a4:	041a      	lsls	r2, r3, #16
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	43d9      	mvns	r1, r3
 80022aa:	887b      	ldrh	r3, [r7, #2]
 80022ac:	400b      	ands	r3, r1
 80022ae:	431a      	orrs	r2, r3
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	619a      	str	r2, [r3, #24]
}
 80022b4:	bf00      	nop
 80022b6:	3714      	adds	r7, #20
 80022b8:	46bd      	mov	sp, r7
 80022ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022be:	4770      	bx	lr

080022c0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b082      	sub	sp, #8
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d101      	bne.n	80022d2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
 80022d0:	e08d      	b.n	80023ee <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80022d8:	b2db      	uxtb	r3, r3
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d106      	bne.n	80022ec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2200      	movs	r2, #0
 80022e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80022e6:	6878      	ldr	r0, [r7, #4]
 80022e8:	f7fe fe62 	bl	8000fb0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2224      	movs	r2, #36	@ 0x24
 80022f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	681a      	ldr	r2, [r3, #0]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f022 0201 	bic.w	r2, r2, #1
 8002302:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	685a      	ldr	r2, [r3, #4]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002310:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	689a      	ldr	r2, [r3, #8]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002320:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	68db      	ldr	r3, [r3, #12]
 8002326:	2b01      	cmp	r3, #1
 8002328:	d107      	bne.n	800233a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	689a      	ldr	r2, [r3, #8]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002336:	609a      	str	r2, [r3, #8]
 8002338:	e006      	b.n	8002348 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	689a      	ldr	r2, [r3, #8]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002346:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	68db      	ldr	r3, [r3, #12]
 800234c:	2b02      	cmp	r3, #2
 800234e:	d108      	bne.n	8002362 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	685a      	ldr	r2, [r3, #4]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800235e:	605a      	str	r2, [r3, #4]
 8002360:	e007      	b.n	8002372 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	685a      	ldr	r2, [r3, #4]
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002370:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	687a      	ldr	r2, [r7, #4]
 800237a:	6812      	ldr	r2, [r2, #0]
 800237c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002380:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002384:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	68da      	ldr	r2, [r3, #12]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002394:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	691a      	ldr	r2, [r3, #16]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	695b      	ldr	r3, [r3, #20]
 800239e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	699b      	ldr	r3, [r3, #24]
 80023a6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	430a      	orrs	r2, r1
 80023ae:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	69d9      	ldr	r1, [r3, #28]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6a1a      	ldr	r2, [r3, #32]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	430a      	orrs	r2, r1
 80023be:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	681a      	ldr	r2, [r3, #0]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f042 0201 	orr.w	r2, r2, #1
 80023ce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2200      	movs	r2, #0
 80023d4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2220      	movs	r2, #32
 80023da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2200      	movs	r2, #0
 80023e2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2200      	movs	r2, #0
 80023e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80023ec:	2300      	movs	r3, #0
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	3708      	adds	r7, #8
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}

080023f6 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80023f6:	b480      	push	{r7}
 80023f8:	b083      	sub	sp, #12
 80023fa:	af00      	add	r7, sp, #0
 80023fc:	6078      	str	r0, [r7, #4]
 80023fe:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002406:	b2db      	uxtb	r3, r3
 8002408:	2b20      	cmp	r3, #32
 800240a:	d138      	bne.n	800247e <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002412:	2b01      	cmp	r3, #1
 8002414:	d101      	bne.n	800241a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002416:	2302      	movs	r3, #2
 8002418:	e032      	b.n	8002480 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2201      	movs	r2, #1
 800241e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2224      	movs	r2, #36	@ 0x24
 8002426:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	681a      	ldr	r2, [r3, #0]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f022 0201 	bic.w	r2, r2, #1
 8002438:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	681a      	ldr	r2, [r3, #0]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002448:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	6819      	ldr	r1, [r3, #0]
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	683a      	ldr	r2, [r7, #0]
 8002456:	430a      	orrs	r2, r1
 8002458:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	681a      	ldr	r2, [r3, #0]
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f042 0201 	orr.w	r2, r2, #1
 8002468:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2220      	movs	r2, #32
 800246e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2200      	movs	r2, #0
 8002476:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800247a:	2300      	movs	r3, #0
 800247c:	e000      	b.n	8002480 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800247e:	2302      	movs	r3, #2
  }
}
 8002480:	4618      	mov	r0, r3
 8002482:	370c      	adds	r7, #12
 8002484:	46bd      	mov	sp, r7
 8002486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248a:	4770      	bx	lr

0800248c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800248c:	b480      	push	{r7}
 800248e:	b085      	sub	sp, #20
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
 8002494:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800249c:	b2db      	uxtb	r3, r3
 800249e:	2b20      	cmp	r3, #32
 80024a0:	d139      	bne.n	8002516 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80024a8:	2b01      	cmp	r3, #1
 80024aa:	d101      	bne.n	80024b0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80024ac:	2302      	movs	r3, #2
 80024ae:	e033      	b.n	8002518 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2201      	movs	r2, #1
 80024b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2224      	movs	r2, #36	@ 0x24
 80024bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	681a      	ldr	r2, [r3, #0]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f022 0201 	bic.w	r2, r2, #1
 80024ce:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80024de:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	021b      	lsls	r3, r3, #8
 80024e4:	68fa      	ldr	r2, [r7, #12]
 80024e6:	4313      	orrs	r3, r2
 80024e8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	68fa      	ldr	r2, [r7, #12]
 80024f0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	681a      	ldr	r2, [r3, #0]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f042 0201 	orr.w	r2, r2, #1
 8002500:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2220      	movs	r2, #32
 8002506:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2200      	movs	r2, #0
 800250e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002512:	2300      	movs	r3, #0
 8002514:	e000      	b.n	8002518 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002516:	2302      	movs	r3, #2
  }
}
 8002518:	4618      	mov	r0, r3
 800251a:	3714      	adds	r7, #20
 800251c:	46bd      	mov	sp, r7
 800251e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002522:	4770      	bx	lr

08002524 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002524:	b480      	push	{r7}
 8002526:	b085      	sub	sp, #20
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d141      	bne.n	80025b6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002532:	4b4b      	ldr	r3, [pc, #300]	@ (8002660 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800253a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800253e:	d131      	bne.n	80025a4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002540:	4b47      	ldr	r3, [pc, #284]	@ (8002660 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002542:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002546:	4a46      	ldr	r2, [pc, #280]	@ (8002660 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002548:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800254c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002550:	4b43      	ldr	r3, [pc, #268]	@ (8002660 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002558:	4a41      	ldr	r2, [pc, #260]	@ (8002660 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800255a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800255e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002560:	4b40      	ldr	r3, [pc, #256]	@ (8002664 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	2232      	movs	r2, #50	@ 0x32
 8002566:	fb02 f303 	mul.w	r3, r2, r3
 800256a:	4a3f      	ldr	r2, [pc, #252]	@ (8002668 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800256c:	fba2 2303 	umull	r2, r3, r2, r3
 8002570:	0c9b      	lsrs	r3, r3, #18
 8002572:	3301      	adds	r3, #1
 8002574:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002576:	e002      	b.n	800257e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	3b01      	subs	r3, #1
 800257c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800257e:	4b38      	ldr	r3, [pc, #224]	@ (8002660 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002580:	695b      	ldr	r3, [r3, #20]
 8002582:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002586:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800258a:	d102      	bne.n	8002592 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d1f2      	bne.n	8002578 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002592:	4b33      	ldr	r3, [pc, #204]	@ (8002660 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002594:	695b      	ldr	r3, [r3, #20]
 8002596:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800259a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800259e:	d158      	bne.n	8002652 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80025a0:	2303      	movs	r3, #3
 80025a2:	e057      	b.n	8002654 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80025a4:	4b2e      	ldr	r3, [pc, #184]	@ (8002660 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80025aa:	4a2d      	ldr	r2, [pc, #180]	@ (8002660 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025ac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80025b0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80025b4:	e04d      	b.n	8002652 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80025bc:	d141      	bne.n	8002642 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80025be:	4b28      	ldr	r3, [pc, #160]	@ (8002660 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80025c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80025ca:	d131      	bne.n	8002630 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80025cc:	4b24      	ldr	r3, [pc, #144]	@ (8002660 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80025d2:	4a23      	ldr	r2, [pc, #140]	@ (8002660 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80025d8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80025dc:	4b20      	ldr	r3, [pc, #128]	@ (8002660 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80025e4:	4a1e      	ldr	r2, [pc, #120]	@ (8002660 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025e6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80025ea:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80025ec:	4b1d      	ldr	r3, [pc, #116]	@ (8002664 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	2232      	movs	r2, #50	@ 0x32
 80025f2:	fb02 f303 	mul.w	r3, r2, r3
 80025f6:	4a1c      	ldr	r2, [pc, #112]	@ (8002668 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80025f8:	fba2 2303 	umull	r2, r3, r2, r3
 80025fc:	0c9b      	lsrs	r3, r3, #18
 80025fe:	3301      	adds	r3, #1
 8002600:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002602:	e002      	b.n	800260a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	3b01      	subs	r3, #1
 8002608:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800260a:	4b15      	ldr	r3, [pc, #84]	@ (8002660 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800260c:	695b      	ldr	r3, [r3, #20]
 800260e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002612:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002616:	d102      	bne.n	800261e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d1f2      	bne.n	8002604 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800261e:	4b10      	ldr	r3, [pc, #64]	@ (8002660 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002620:	695b      	ldr	r3, [r3, #20]
 8002622:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002626:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800262a:	d112      	bne.n	8002652 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800262c:	2303      	movs	r3, #3
 800262e:	e011      	b.n	8002654 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002630:	4b0b      	ldr	r3, [pc, #44]	@ (8002660 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002632:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002636:	4a0a      	ldr	r2, [pc, #40]	@ (8002660 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002638:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800263c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002640:	e007      	b.n	8002652 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002642:	4b07      	ldr	r3, [pc, #28]	@ (8002660 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800264a:	4a05      	ldr	r2, [pc, #20]	@ (8002660 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800264c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002650:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002652:	2300      	movs	r3, #0
}
 8002654:	4618      	mov	r0, r3
 8002656:	3714      	adds	r7, #20
 8002658:	46bd      	mov	sp, r7
 800265a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265e:	4770      	bx	lr
 8002660:	40007000 	.word	0x40007000
 8002664:	20000018 	.word	0x20000018
 8002668:	431bde83 	.word	0x431bde83

0800266c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800266c:	b480      	push	{r7}
 800266e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002670:	4b05      	ldr	r3, [pc, #20]	@ (8002688 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002672:	689b      	ldr	r3, [r3, #8]
 8002674:	4a04      	ldr	r2, [pc, #16]	@ (8002688 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002676:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800267a:	6093      	str	r3, [r2, #8]
}
 800267c:	bf00      	nop
 800267e:	46bd      	mov	sp, r7
 8002680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002684:	4770      	bx	lr
 8002686:	bf00      	nop
 8002688:	40007000 	.word	0x40007000

0800268c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b088      	sub	sp, #32
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d101      	bne.n	800269e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	e2fe      	b.n	8002c9c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f003 0301 	and.w	r3, r3, #1
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d075      	beq.n	8002796 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026aa:	4b97      	ldr	r3, [pc, #604]	@ (8002908 <HAL_RCC_OscConfig+0x27c>)
 80026ac:	689b      	ldr	r3, [r3, #8]
 80026ae:	f003 030c 	and.w	r3, r3, #12
 80026b2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80026b4:	4b94      	ldr	r3, [pc, #592]	@ (8002908 <HAL_RCC_OscConfig+0x27c>)
 80026b6:	68db      	ldr	r3, [r3, #12]
 80026b8:	f003 0303 	and.w	r3, r3, #3
 80026bc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80026be:	69bb      	ldr	r3, [r7, #24]
 80026c0:	2b0c      	cmp	r3, #12
 80026c2:	d102      	bne.n	80026ca <HAL_RCC_OscConfig+0x3e>
 80026c4:	697b      	ldr	r3, [r7, #20]
 80026c6:	2b03      	cmp	r3, #3
 80026c8:	d002      	beq.n	80026d0 <HAL_RCC_OscConfig+0x44>
 80026ca:	69bb      	ldr	r3, [r7, #24]
 80026cc:	2b08      	cmp	r3, #8
 80026ce:	d10b      	bne.n	80026e8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026d0:	4b8d      	ldr	r3, [pc, #564]	@ (8002908 <HAL_RCC_OscConfig+0x27c>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d05b      	beq.n	8002794 <HAL_RCC_OscConfig+0x108>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d157      	bne.n	8002794 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80026e4:	2301      	movs	r3, #1
 80026e6:	e2d9      	b.n	8002c9c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80026f0:	d106      	bne.n	8002700 <HAL_RCC_OscConfig+0x74>
 80026f2:	4b85      	ldr	r3, [pc, #532]	@ (8002908 <HAL_RCC_OscConfig+0x27c>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4a84      	ldr	r2, [pc, #528]	@ (8002908 <HAL_RCC_OscConfig+0x27c>)
 80026f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026fc:	6013      	str	r3, [r2, #0]
 80026fe:	e01d      	b.n	800273c <HAL_RCC_OscConfig+0xb0>
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002708:	d10c      	bne.n	8002724 <HAL_RCC_OscConfig+0x98>
 800270a:	4b7f      	ldr	r3, [pc, #508]	@ (8002908 <HAL_RCC_OscConfig+0x27c>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4a7e      	ldr	r2, [pc, #504]	@ (8002908 <HAL_RCC_OscConfig+0x27c>)
 8002710:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002714:	6013      	str	r3, [r2, #0]
 8002716:	4b7c      	ldr	r3, [pc, #496]	@ (8002908 <HAL_RCC_OscConfig+0x27c>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4a7b      	ldr	r2, [pc, #492]	@ (8002908 <HAL_RCC_OscConfig+0x27c>)
 800271c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002720:	6013      	str	r3, [r2, #0]
 8002722:	e00b      	b.n	800273c <HAL_RCC_OscConfig+0xb0>
 8002724:	4b78      	ldr	r3, [pc, #480]	@ (8002908 <HAL_RCC_OscConfig+0x27c>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a77      	ldr	r2, [pc, #476]	@ (8002908 <HAL_RCC_OscConfig+0x27c>)
 800272a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800272e:	6013      	str	r3, [r2, #0]
 8002730:	4b75      	ldr	r3, [pc, #468]	@ (8002908 <HAL_RCC_OscConfig+0x27c>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a74      	ldr	r2, [pc, #464]	@ (8002908 <HAL_RCC_OscConfig+0x27c>)
 8002736:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800273a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d013      	beq.n	800276c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002744:	f7ff faf6 	bl	8001d34 <HAL_GetTick>
 8002748:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800274a:	e008      	b.n	800275e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800274c:	f7ff faf2 	bl	8001d34 <HAL_GetTick>
 8002750:	4602      	mov	r2, r0
 8002752:	693b      	ldr	r3, [r7, #16]
 8002754:	1ad3      	subs	r3, r2, r3
 8002756:	2b64      	cmp	r3, #100	@ 0x64
 8002758:	d901      	bls.n	800275e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800275a:	2303      	movs	r3, #3
 800275c:	e29e      	b.n	8002c9c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800275e:	4b6a      	ldr	r3, [pc, #424]	@ (8002908 <HAL_RCC_OscConfig+0x27c>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002766:	2b00      	cmp	r3, #0
 8002768:	d0f0      	beq.n	800274c <HAL_RCC_OscConfig+0xc0>
 800276a:	e014      	b.n	8002796 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800276c:	f7ff fae2 	bl	8001d34 <HAL_GetTick>
 8002770:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002772:	e008      	b.n	8002786 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002774:	f7ff fade 	bl	8001d34 <HAL_GetTick>
 8002778:	4602      	mov	r2, r0
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	1ad3      	subs	r3, r2, r3
 800277e:	2b64      	cmp	r3, #100	@ 0x64
 8002780:	d901      	bls.n	8002786 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002782:	2303      	movs	r3, #3
 8002784:	e28a      	b.n	8002c9c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002786:	4b60      	ldr	r3, [pc, #384]	@ (8002908 <HAL_RCC_OscConfig+0x27c>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800278e:	2b00      	cmp	r3, #0
 8002790:	d1f0      	bne.n	8002774 <HAL_RCC_OscConfig+0xe8>
 8002792:	e000      	b.n	8002796 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002794:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f003 0302 	and.w	r3, r3, #2
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d075      	beq.n	800288e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80027a2:	4b59      	ldr	r3, [pc, #356]	@ (8002908 <HAL_RCC_OscConfig+0x27c>)
 80027a4:	689b      	ldr	r3, [r3, #8]
 80027a6:	f003 030c 	and.w	r3, r3, #12
 80027aa:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80027ac:	4b56      	ldr	r3, [pc, #344]	@ (8002908 <HAL_RCC_OscConfig+0x27c>)
 80027ae:	68db      	ldr	r3, [r3, #12]
 80027b0:	f003 0303 	and.w	r3, r3, #3
 80027b4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80027b6:	69bb      	ldr	r3, [r7, #24]
 80027b8:	2b0c      	cmp	r3, #12
 80027ba:	d102      	bne.n	80027c2 <HAL_RCC_OscConfig+0x136>
 80027bc:	697b      	ldr	r3, [r7, #20]
 80027be:	2b02      	cmp	r3, #2
 80027c0:	d002      	beq.n	80027c8 <HAL_RCC_OscConfig+0x13c>
 80027c2:	69bb      	ldr	r3, [r7, #24]
 80027c4:	2b04      	cmp	r3, #4
 80027c6:	d11f      	bne.n	8002808 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80027c8:	4b4f      	ldr	r3, [pc, #316]	@ (8002908 <HAL_RCC_OscConfig+0x27c>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d005      	beq.n	80027e0 <HAL_RCC_OscConfig+0x154>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	68db      	ldr	r3, [r3, #12]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d101      	bne.n	80027e0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80027dc:	2301      	movs	r3, #1
 80027de:	e25d      	b.n	8002c9c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027e0:	4b49      	ldr	r3, [pc, #292]	@ (8002908 <HAL_RCC_OscConfig+0x27c>)
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	691b      	ldr	r3, [r3, #16]
 80027ec:	061b      	lsls	r3, r3, #24
 80027ee:	4946      	ldr	r1, [pc, #280]	@ (8002908 <HAL_RCC_OscConfig+0x27c>)
 80027f0:	4313      	orrs	r3, r2
 80027f2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80027f4:	4b45      	ldr	r3, [pc, #276]	@ (800290c <HAL_RCC_OscConfig+0x280>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4618      	mov	r0, r3
 80027fa:	f7ff fa4f 	bl	8001c9c <HAL_InitTick>
 80027fe:	4603      	mov	r3, r0
 8002800:	2b00      	cmp	r3, #0
 8002802:	d043      	beq.n	800288c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002804:	2301      	movs	r3, #1
 8002806:	e249      	b.n	8002c9c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	68db      	ldr	r3, [r3, #12]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d023      	beq.n	8002858 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002810:	4b3d      	ldr	r3, [pc, #244]	@ (8002908 <HAL_RCC_OscConfig+0x27c>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a3c      	ldr	r2, [pc, #240]	@ (8002908 <HAL_RCC_OscConfig+0x27c>)
 8002816:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800281a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800281c:	f7ff fa8a 	bl	8001d34 <HAL_GetTick>
 8002820:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002822:	e008      	b.n	8002836 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002824:	f7ff fa86 	bl	8001d34 <HAL_GetTick>
 8002828:	4602      	mov	r2, r0
 800282a:	693b      	ldr	r3, [r7, #16]
 800282c:	1ad3      	subs	r3, r2, r3
 800282e:	2b02      	cmp	r3, #2
 8002830:	d901      	bls.n	8002836 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002832:	2303      	movs	r3, #3
 8002834:	e232      	b.n	8002c9c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002836:	4b34      	ldr	r3, [pc, #208]	@ (8002908 <HAL_RCC_OscConfig+0x27c>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800283e:	2b00      	cmp	r3, #0
 8002840:	d0f0      	beq.n	8002824 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002842:	4b31      	ldr	r3, [pc, #196]	@ (8002908 <HAL_RCC_OscConfig+0x27c>)
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	691b      	ldr	r3, [r3, #16]
 800284e:	061b      	lsls	r3, r3, #24
 8002850:	492d      	ldr	r1, [pc, #180]	@ (8002908 <HAL_RCC_OscConfig+0x27c>)
 8002852:	4313      	orrs	r3, r2
 8002854:	604b      	str	r3, [r1, #4]
 8002856:	e01a      	b.n	800288e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002858:	4b2b      	ldr	r3, [pc, #172]	@ (8002908 <HAL_RCC_OscConfig+0x27c>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a2a      	ldr	r2, [pc, #168]	@ (8002908 <HAL_RCC_OscConfig+0x27c>)
 800285e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002862:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002864:	f7ff fa66 	bl	8001d34 <HAL_GetTick>
 8002868:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800286a:	e008      	b.n	800287e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800286c:	f7ff fa62 	bl	8001d34 <HAL_GetTick>
 8002870:	4602      	mov	r2, r0
 8002872:	693b      	ldr	r3, [r7, #16]
 8002874:	1ad3      	subs	r3, r2, r3
 8002876:	2b02      	cmp	r3, #2
 8002878:	d901      	bls.n	800287e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800287a:	2303      	movs	r3, #3
 800287c:	e20e      	b.n	8002c9c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800287e:	4b22      	ldr	r3, [pc, #136]	@ (8002908 <HAL_RCC_OscConfig+0x27c>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002886:	2b00      	cmp	r3, #0
 8002888:	d1f0      	bne.n	800286c <HAL_RCC_OscConfig+0x1e0>
 800288a:	e000      	b.n	800288e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800288c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f003 0308 	and.w	r3, r3, #8
 8002896:	2b00      	cmp	r3, #0
 8002898:	d041      	beq.n	800291e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	695b      	ldr	r3, [r3, #20]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d01c      	beq.n	80028dc <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028a2:	4b19      	ldr	r3, [pc, #100]	@ (8002908 <HAL_RCC_OscConfig+0x27c>)
 80028a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80028a8:	4a17      	ldr	r2, [pc, #92]	@ (8002908 <HAL_RCC_OscConfig+0x27c>)
 80028aa:	f043 0301 	orr.w	r3, r3, #1
 80028ae:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028b2:	f7ff fa3f 	bl	8001d34 <HAL_GetTick>
 80028b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80028b8:	e008      	b.n	80028cc <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028ba:	f7ff fa3b 	bl	8001d34 <HAL_GetTick>
 80028be:	4602      	mov	r2, r0
 80028c0:	693b      	ldr	r3, [r7, #16]
 80028c2:	1ad3      	subs	r3, r2, r3
 80028c4:	2b02      	cmp	r3, #2
 80028c6:	d901      	bls.n	80028cc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80028c8:	2303      	movs	r3, #3
 80028ca:	e1e7      	b.n	8002c9c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80028cc:	4b0e      	ldr	r3, [pc, #56]	@ (8002908 <HAL_RCC_OscConfig+0x27c>)
 80028ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80028d2:	f003 0302 	and.w	r3, r3, #2
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d0ef      	beq.n	80028ba <HAL_RCC_OscConfig+0x22e>
 80028da:	e020      	b.n	800291e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028dc:	4b0a      	ldr	r3, [pc, #40]	@ (8002908 <HAL_RCC_OscConfig+0x27c>)
 80028de:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80028e2:	4a09      	ldr	r2, [pc, #36]	@ (8002908 <HAL_RCC_OscConfig+0x27c>)
 80028e4:	f023 0301 	bic.w	r3, r3, #1
 80028e8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028ec:	f7ff fa22 	bl	8001d34 <HAL_GetTick>
 80028f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80028f2:	e00d      	b.n	8002910 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028f4:	f7ff fa1e 	bl	8001d34 <HAL_GetTick>
 80028f8:	4602      	mov	r2, r0
 80028fa:	693b      	ldr	r3, [r7, #16]
 80028fc:	1ad3      	subs	r3, r2, r3
 80028fe:	2b02      	cmp	r3, #2
 8002900:	d906      	bls.n	8002910 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002902:	2303      	movs	r3, #3
 8002904:	e1ca      	b.n	8002c9c <HAL_RCC_OscConfig+0x610>
 8002906:	bf00      	nop
 8002908:	40021000 	.word	0x40021000
 800290c:	2000001c 	.word	0x2000001c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002910:	4b8c      	ldr	r3, [pc, #560]	@ (8002b44 <HAL_RCC_OscConfig+0x4b8>)
 8002912:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002916:	f003 0302 	and.w	r3, r3, #2
 800291a:	2b00      	cmp	r3, #0
 800291c:	d1ea      	bne.n	80028f4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f003 0304 	and.w	r3, r3, #4
 8002926:	2b00      	cmp	r3, #0
 8002928:	f000 80a6 	beq.w	8002a78 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800292c:	2300      	movs	r3, #0
 800292e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002930:	4b84      	ldr	r3, [pc, #528]	@ (8002b44 <HAL_RCC_OscConfig+0x4b8>)
 8002932:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002934:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002938:	2b00      	cmp	r3, #0
 800293a:	d101      	bne.n	8002940 <HAL_RCC_OscConfig+0x2b4>
 800293c:	2301      	movs	r3, #1
 800293e:	e000      	b.n	8002942 <HAL_RCC_OscConfig+0x2b6>
 8002940:	2300      	movs	r3, #0
 8002942:	2b00      	cmp	r3, #0
 8002944:	d00d      	beq.n	8002962 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002946:	4b7f      	ldr	r3, [pc, #508]	@ (8002b44 <HAL_RCC_OscConfig+0x4b8>)
 8002948:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800294a:	4a7e      	ldr	r2, [pc, #504]	@ (8002b44 <HAL_RCC_OscConfig+0x4b8>)
 800294c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002950:	6593      	str	r3, [r2, #88]	@ 0x58
 8002952:	4b7c      	ldr	r3, [pc, #496]	@ (8002b44 <HAL_RCC_OscConfig+0x4b8>)
 8002954:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002956:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800295a:	60fb      	str	r3, [r7, #12]
 800295c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800295e:	2301      	movs	r3, #1
 8002960:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002962:	4b79      	ldr	r3, [pc, #484]	@ (8002b48 <HAL_RCC_OscConfig+0x4bc>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800296a:	2b00      	cmp	r3, #0
 800296c:	d118      	bne.n	80029a0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800296e:	4b76      	ldr	r3, [pc, #472]	@ (8002b48 <HAL_RCC_OscConfig+0x4bc>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a75      	ldr	r2, [pc, #468]	@ (8002b48 <HAL_RCC_OscConfig+0x4bc>)
 8002974:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002978:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800297a:	f7ff f9db 	bl	8001d34 <HAL_GetTick>
 800297e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002980:	e008      	b.n	8002994 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002982:	f7ff f9d7 	bl	8001d34 <HAL_GetTick>
 8002986:	4602      	mov	r2, r0
 8002988:	693b      	ldr	r3, [r7, #16]
 800298a:	1ad3      	subs	r3, r2, r3
 800298c:	2b02      	cmp	r3, #2
 800298e:	d901      	bls.n	8002994 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002990:	2303      	movs	r3, #3
 8002992:	e183      	b.n	8002c9c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002994:	4b6c      	ldr	r3, [pc, #432]	@ (8002b48 <HAL_RCC_OscConfig+0x4bc>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800299c:	2b00      	cmp	r3, #0
 800299e:	d0f0      	beq.n	8002982 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	2b01      	cmp	r3, #1
 80029a6:	d108      	bne.n	80029ba <HAL_RCC_OscConfig+0x32e>
 80029a8:	4b66      	ldr	r3, [pc, #408]	@ (8002b44 <HAL_RCC_OscConfig+0x4b8>)
 80029aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029ae:	4a65      	ldr	r2, [pc, #404]	@ (8002b44 <HAL_RCC_OscConfig+0x4b8>)
 80029b0:	f043 0301 	orr.w	r3, r3, #1
 80029b4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80029b8:	e024      	b.n	8002a04 <HAL_RCC_OscConfig+0x378>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	689b      	ldr	r3, [r3, #8]
 80029be:	2b05      	cmp	r3, #5
 80029c0:	d110      	bne.n	80029e4 <HAL_RCC_OscConfig+0x358>
 80029c2:	4b60      	ldr	r3, [pc, #384]	@ (8002b44 <HAL_RCC_OscConfig+0x4b8>)
 80029c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029c8:	4a5e      	ldr	r2, [pc, #376]	@ (8002b44 <HAL_RCC_OscConfig+0x4b8>)
 80029ca:	f043 0304 	orr.w	r3, r3, #4
 80029ce:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80029d2:	4b5c      	ldr	r3, [pc, #368]	@ (8002b44 <HAL_RCC_OscConfig+0x4b8>)
 80029d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029d8:	4a5a      	ldr	r2, [pc, #360]	@ (8002b44 <HAL_RCC_OscConfig+0x4b8>)
 80029da:	f043 0301 	orr.w	r3, r3, #1
 80029de:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80029e2:	e00f      	b.n	8002a04 <HAL_RCC_OscConfig+0x378>
 80029e4:	4b57      	ldr	r3, [pc, #348]	@ (8002b44 <HAL_RCC_OscConfig+0x4b8>)
 80029e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029ea:	4a56      	ldr	r2, [pc, #344]	@ (8002b44 <HAL_RCC_OscConfig+0x4b8>)
 80029ec:	f023 0301 	bic.w	r3, r3, #1
 80029f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80029f4:	4b53      	ldr	r3, [pc, #332]	@ (8002b44 <HAL_RCC_OscConfig+0x4b8>)
 80029f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029fa:	4a52      	ldr	r2, [pc, #328]	@ (8002b44 <HAL_RCC_OscConfig+0x4b8>)
 80029fc:	f023 0304 	bic.w	r3, r3, #4
 8002a00:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	689b      	ldr	r3, [r3, #8]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d016      	beq.n	8002a3a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a0c:	f7ff f992 	bl	8001d34 <HAL_GetTick>
 8002a10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a12:	e00a      	b.n	8002a2a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a14:	f7ff f98e 	bl	8001d34 <HAL_GetTick>
 8002a18:	4602      	mov	r2, r0
 8002a1a:	693b      	ldr	r3, [r7, #16]
 8002a1c:	1ad3      	subs	r3, r2, r3
 8002a1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d901      	bls.n	8002a2a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002a26:	2303      	movs	r3, #3
 8002a28:	e138      	b.n	8002c9c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a2a:	4b46      	ldr	r3, [pc, #280]	@ (8002b44 <HAL_RCC_OscConfig+0x4b8>)
 8002a2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a30:	f003 0302 	and.w	r3, r3, #2
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d0ed      	beq.n	8002a14 <HAL_RCC_OscConfig+0x388>
 8002a38:	e015      	b.n	8002a66 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a3a:	f7ff f97b 	bl	8001d34 <HAL_GetTick>
 8002a3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002a40:	e00a      	b.n	8002a58 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a42:	f7ff f977 	bl	8001d34 <HAL_GetTick>
 8002a46:	4602      	mov	r2, r0
 8002a48:	693b      	ldr	r3, [r7, #16]
 8002a4a:	1ad3      	subs	r3, r2, r3
 8002a4c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d901      	bls.n	8002a58 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002a54:	2303      	movs	r3, #3
 8002a56:	e121      	b.n	8002c9c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002a58:	4b3a      	ldr	r3, [pc, #232]	@ (8002b44 <HAL_RCC_OscConfig+0x4b8>)
 8002a5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a5e:	f003 0302 	and.w	r3, r3, #2
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d1ed      	bne.n	8002a42 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002a66:	7ffb      	ldrb	r3, [r7, #31]
 8002a68:	2b01      	cmp	r3, #1
 8002a6a:	d105      	bne.n	8002a78 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a6c:	4b35      	ldr	r3, [pc, #212]	@ (8002b44 <HAL_RCC_OscConfig+0x4b8>)
 8002a6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a70:	4a34      	ldr	r2, [pc, #208]	@ (8002b44 <HAL_RCC_OscConfig+0x4b8>)
 8002a72:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002a76:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f003 0320 	and.w	r3, r3, #32
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d03c      	beq.n	8002afe <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	699b      	ldr	r3, [r3, #24]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d01c      	beq.n	8002ac6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002a8c:	4b2d      	ldr	r3, [pc, #180]	@ (8002b44 <HAL_RCC_OscConfig+0x4b8>)
 8002a8e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002a92:	4a2c      	ldr	r2, [pc, #176]	@ (8002b44 <HAL_RCC_OscConfig+0x4b8>)
 8002a94:	f043 0301 	orr.w	r3, r3, #1
 8002a98:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a9c:	f7ff f94a 	bl	8001d34 <HAL_GetTick>
 8002aa0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002aa2:	e008      	b.n	8002ab6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002aa4:	f7ff f946 	bl	8001d34 <HAL_GetTick>
 8002aa8:	4602      	mov	r2, r0
 8002aaa:	693b      	ldr	r3, [r7, #16]
 8002aac:	1ad3      	subs	r3, r2, r3
 8002aae:	2b02      	cmp	r3, #2
 8002ab0:	d901      	bls.n	8002ab6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002ab2:	2303      	movs	r3, #3
 8002ab4:	e0f2      	b.n	8002c9c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002ab6:	4b23      	ldr	r3, [pc, #140]	@ (8002b44 <HAL_RCC_OscConfig+0x4b8>)
 8002ab8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002abc:	f003 0302 	and.w	r3, r3, #2
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d0ef      	beq.n	8002aa4 <HAL_RCC_OscConfig+0x418>
 8002ac4:	e01b      	b.n	8002afe <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002ac6:	4b1f      	ldr	r3, [pc, #124]	@ (8002b44 <HAL_RCC_OscConfig+0x4b8>)
 8002ac8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002acc:	4a1d      	ldr	r2, [pc, #116]	@ (8002b44 <HAL_RCC_OscConfig+0x4b8>)
 8002ace:	f023 0301 	bic.w	r3, r3, #1
 8002ad2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ad6:	f7ff f92d 	bl	8001d34 <HAL_GetTick>
 8002ada:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002adc:	e008      	b.n	8002af0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002ade:	f7ff f929 	bl	8001d34 <HAL_GetTick>
 8002ae2:	4602      	mov	r2, r0
 8002ae4:	693b      	ldr	r3, [r7, #16]
 8002ae6:	1ad3      	subs	r3, r2, r3
 8002ae8:	2b02      	cmp	r3, #2
 8002aea:	d901      	bls.n	8002af0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002aec:	2303      	movs	r3, #3
 8002aee:	e0d5      	b.n	8002c9c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002af0:	4b14      	ldr	r3, [pc, #80]	@ (8002b44 <HAL_RCC_OscConfig+0x4b8>)
 8002af2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002af6:	f003 0302 	and.w	r3, r3, #2
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d1ef      	bne.n	8002ade <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	69db      	ldr	r3, [r3, #28]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	f000 80c9 	beq.w	8002c9a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002b08:	4b0e      	ldr	r3, [pc, #56]	@ (8002b44 <HAL_RCC_OscConfig+0x4b8>)
 8002b0a:	689b      	ldr	r3, [r3, #8]
 8002b0c:	f003 030c 	and.w	r3, r3, #12
 8002b10:	2b0c      	cmp	r3, #12
 8002b12:	f000 8083 	beq.w	8002c1c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	69db      	ldr	r3, [r3, #28]
 8002b1a:	2b02      	cmp	r3, #2
 8002b1c:	d15e      	bne.n	8002bdc <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b1e:	4b09      	ldr	r3, [pc, #36]	@ (8002b44 <HAL_RCC_OscConfig+0x4b8>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a08      	ldr	r2, [pc, #32]	@ (8002b44 <HAL_RCC_OscConfig+0x4b8>)
 8002b24:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002b28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b2a:	f7ff f903 	bl	8001d34 <HAL_GetTick>
 8002b2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b30:	e00c      	b.n	8002b4c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b32:	f7ff f8ff 	bl	8001d34 <HAL_GetTick>
 8002b36:	4602      	mov	r2, r0
 8002b38:	693b      	ldr	r3, [r7, #16]
 8002b3a:	1ad3      	subs	r3, r2, r3
 8002b3c:	2b02      	cmp	r3, #2
 8002b3e:	d905      	bls.n	8002b4c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002b40:	2303      	movs	r3, #3
 8002b42:	e0ab      	b.n	8002c9c <HAL_RCC_OscConfig+0x610>
 8002b44:	40021000 	.word	0x40021000
 8002b48:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b4c:	4b55      	ldr	r3, [pc, #340]	@ (8002ca4 <HAL_RCC_OscConfig+0x618>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d1ec      	bne.n	8002b32 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b58:	4b52      	ldr	r3, [pc, #328]	@ (8002ca4 <HAL_RCC_OscConfig+0x618>)
 8002b5a:	68da      	ldr	r2, [r3, #12]
 8002b5c:	4b52      	ldr	r3, [pc, #328]	@ (8002ca8 <HAL_RCC_OscConfig+0x61c>)
 8002b5e:	4013      	ands	r3, r2
 8002b60:	687a      	ldr	r2, [r7, #4]
 8002b62:	6a11      	ldr	r1, [r2, #32]
 8002b64:	687a      	ldr	r2, [r7, #4]
 8002b66:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002b68:	3a01      	subs	r2, #1
 8002b6a:	0112      	lsls	r2, r2, #4
 8002b6c:	4311      	orrs	r1, r2
 8002b6e:	687a      	ldr	r2, [r7, #4]
 8002b70:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8002b72:	0212      	lsls	r2, r2, #8
 8002b74:	4311      	orrs	r1, r2
 8002b76:	687a      	ldr	r2, [r7, #4]
 8002b78:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002b7a:	0852      	lsrs	r2, r2, #1
 8002b7c:	3a01      	subs	r2, #1
 8002b7e:	0552      	lsls	r2, r2, #21
 8002b80:	4311      	orrs	r1, r2
 8002b82:	687a      	ldr	r2, [r7, #4]
 8002b84:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002b86:	0852      	lsrs	r2, r2, #1
 8002b88:	3a01      	subs	r2, #1
 8002b8a:	0652      	lsls	r2, r2, #25
 8002b8c:	4311      	orrs	r1, r2
 8002b8e:	687a      	ldr	r2, [r7, #4]
 8002b90:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002b92:	06d2      	lsls	r2, r2, #27
 8002b94:	430a      	orrs	r2, r1
 8002b96:	4943      	ldr	r1, [pc, #268]	@ (8002ca4 <HAL_RCC_OscConfig+0x618>)
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b9c:	4b41      	ldr	r3, [pc, #260]	@ (8002ca4 <HAL_RCC_OscConfig+0x618>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a40      	ldr	r2, [pc, #256]	@ (8002ca4 <HAL_RCC_OscConfig+0x618>)
 8002ba2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002ba6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002ba8:	4b3e      	ldr	r3, [pc, #248]	@ (8002ca4 <HAL_RCC_OscConfig+0x618>)
 8002baa:	68db      	ldr	r3, [r3, #12]
 8002bac:	4a3d      	ldr	r2, [pc, #244]	@ (8002ca4 <HAL_RCC_OscConfig+0x618>)
 8002bae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002bb2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bb4:	f7ff f8be 	bl	8001d34 <HAL_GetTick>
 8002bb8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bba:	e008      	b.n	8002bce <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bbc:	f7ff f8ba 	bl	8001d34 <HAL_GetTick>
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	693b      	ldr	r3, [r7, #16]
 8002bc4:	1ad3      	subs	r3, r2, r3
 8002bc6:	2b02      	cmp	r3, #2
 8002bc8:	d901      	bls.n	8002bce <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002bca:	2303      	movs	r3, #3
 8002bcc:	e066      	b.n	8002c9c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bce:	4b35      	ldr	r3, [pc, #212]	@ (8002ca4 <HAL_RCC_OscConfig+0x618>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d0f0      	beq.n	8002bbc <HAL_RCC_OscConfig+0x530>
 8002bda:	e05e      	b.n	8002c9a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bdc:	4b31      	ldr	r3, [pc, #196]	@ (8002ca4 <HAL_RCC_OscConfig+0x618>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a30      	ldr	r2, [pc, #192]	@ (8002ca4 <HAL_RCC_OscConfig+0x618>)
 8002be2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002be6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002be8:	f7ff f8a4 	bl	8001d34 <HAL_GetTick>
 8002bec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002bee:	e008      	b.n	8002c02 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bf0:	f7ff f8a0 	bl	8001d34 <HAL_GetTick>
 8002bf4:	4602      	mov	r2, r0
 8002bf6:	693b      	ldr	r3, [r7, #16]
 8002bf8:	1ad3      	subs	r3, r2, r3
 8002bfa:	2b02      	cmp	r3, #2
 8002bfc:	d901      	bls.n	8002c02 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8002bfe:	2303      	movs	r3, #3
 8002c00:	e04c      	b.n	8002c9c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c02:	4b28      	ldr	r3, [pc, #160]	@ (8002ca4 <HAL_RCC_OscConfig+0x618>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d1f0      	bne.n	8002bf0 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002c0e:	4b25      	ldr	r3, [pc, #148]	@ (8002ca4 <HAL_RCC_OscConfig+0x618>)
 8002c10:	68da      	ldr	r2, [r3, #12]
 8002c12:	4924      	ldr	r1, [pc, #144]	@ (8002ca4 <HAL_RCC_OscConfig+0x618>)
 8002c14:	4b25      	ldr	r3, [pc, #148]	@ (8002cac <HAL_RCC_OscConfig+0x620>)
 8002c16:	4013      	ands	r3, r2
 8002c18:	60cb      	str	r3, [r1, #12]
 8002c1a:	e03e      	b.n	8002c9a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	69db      	ldr	r3, [r3, #28]
 8002c20:	2b01      	cmp	r3, #1
 8002c22:	d101      	bne.n	8002c28 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8002c24:	2301      	movs	r3, #1
 8002c26:	e039      	b.n	8002c9c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002c28:	4b1e      	ldr	r3, [pc, #120]	@ (8002ca4 <HAL_RCC_OscConfig+0x618>)
 8002c2a:	68db      	ldr	r3, [r3, #12]
 8002c2c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c2e:	697b      	ldr	r3, [r7, #20]
 8002c30:	f003 0203 	and.w	r2, r3, #3
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6a1b      	ldr	r3, [r3, #32]
 8002c38:	429a      	cmp	r2, r3
 8002c3a:	d12c      	bne.n	8002c96 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002c3c:	697b      	ldr	r3, [r7, #20]
 8002c3e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c46:	3b01      	subs	r3, #1
 8002c48:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c4a:	429a      	cmp	r2, r3
 8002c4c:	d123      	bne.n	8002c96 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c58:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002c5a:	429a      	cmp	r2, r3
 8002c5c:	d11b      	bne.n	8002c96 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002c5e:	697b      	ldr	r3, [r7, #20]
 8002c60:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c68:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c6a:	429a      	cmp	r2, r3
 8002c6c:	d113      	bne.n	8002c96 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c78:	085b      	lsrs	r3, r3, #1
 8002c7a:	3b01      	subs	r3, #1
 8002c7c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002c7e:	429a      	cmp	r2, r3
 8002c80:	d109      	bne.n	8002c96 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002c82:	697b      	ldr	r3, [r7, #20]
 8002c84:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c8c:	085b      	lsrs	r3, r3, #1
 8002c8e:	3b01      	subs	r3, #1
 8002c90:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c92:	429a      	cmp	r2, r3
 8002c94:	d001      	beq.n	8002c9a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
 8002c98:	e000      	b.n	8002c9c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8002c9a:	2300      	movs	r3, #0
}
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	3720      	adds	r7, #32
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bd80      	pop	{r7, pc}
 8002ca4:	40021000 	.word	0x40021000
 8002ca8:	019f800c 	.word	0x019f800c
 8002cac:	feeefffc 	.word	0xfeeefffc

08002cb0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b086      	sub	sp, #24
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
 8002cb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d101      	bne.n	8002cc8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	e11e      	b.n	8002f06 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002cc8:	4b91      	ldr	r3, [pc, #580]	@ (8002f10 <HAL_RCC_ClockConfig+0x260>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f003 030f 	and.w	r3, r3, #15
 8002cd0:	683a      	ldr	r2, [r7, #0]
 8002cd2:	429a      	cmp	r2, r3
 8002cd4:	d910      	bls.n	8002cf8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cd6:	4b8e      	ldr	r3, [pc, #568]	@ (8002f10 <HAL_RCC_ClockConfig+0x260>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f023 020f 	bic.w	r2, r3, #15
 8002cde:	498c      	ldr	r1, [pc, #560]	@ (8002f10 <HAL_RCC_ClockConfig+0x260>)
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ce6:	4b8a      	ldr	r3, [pc, #552]	@ (8002f10 <HAL_RCC_ClockConfig+0x260>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f003 030f 	and.w	r3, r3, #15
 8002cee:	683a      	ldr	r2, [r7, #0]
 8002cf0:	429a      	cmp	r2, r3
 8002cf2:	d001      	beq.n	8002cf8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	e106      	b.n	8002f06 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f003 0301 	and.w	r3, r3, #1
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d073      	beq.n	8002dec <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	2b03      	cmp	r3, #3
 8002d0a:	d129      	bne.n	8002d60 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d0c:	4b81      	ldr	r3, [pc, #516]	@ (8002f14 <HAL_RCC_ClockConfig+0x264>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d101      	bne.n	8002d1c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	e0f4      	b.n	8002f06 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002d1c:	f000 f99e 	bl	800305c <RCC_GetSysClockFreqFromPLLSource>
 8002d20:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002d22:	693b      	ldr	r3, [r7, #16]
 8002d24:	4a7c      	ldr	r2, [pc, #496]	@ (8002f18 <HAL_RCC_ClockConfig+0x268>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d93f      	bls.n	8002daa <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002d2a:	4b7a      	ldr	r3, [pc, #488]	@ (8002f14 <HAL_RCC_ClockConfig+0x264>)
 8002d2c:	689b      	ldr	r3, [r3, #8]
 8002d2e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d009      	beq.n	8002d4a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d033      	beq.n	8002daa <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d12f      	bne.n	8002daa <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002d4a:	4b72      	ldr	r3, [pc, #456]	@ (8002f14 <HAL_RCC_ClockConfig+0x264>)
 8002d4c:	689b      	ldr	r3, [r3, #8]
 8002d4e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002d52:	4a70      	ldr	r2, [pc, #448]	@ (8002f14 <HAL_RCC_ClockConfig+0x264>)
 8002d54:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002d58:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002d5a:	2380      	movs	r3, #128	@ 0x80
 8002d5c:	617b      	str	r3, [r7, #20]
 8002d5e:	e024      	b.n	8002daa <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	2b02      	cmp	r3, #2
 8002d66:	d107      	bne.n	8002d78 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d68:	4b6a      	ldr	r3, [pc, #424]	@ (8002f14 <HAL_RCC_ClockConfig+0x264>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d109      	bne.n	8002d88 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002d74:	2301      	movs	r3, #1
 8002d76:	e0c6      	b.n	8002f06 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d78:	4b66      	ldr	r3, [pc, #408]	@ (8002f14 <HAL_RCC_ClockConfig+0x264>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d101      	bne.n	8002d88 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002d84:	2301      	movs	r3, #1
 8002d86:	e0be      	b.n	8002f06 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002d88:	f000 f8ce 	bl	8002f28 <HAL_RCC_GetSysClockFreq>
 8002d8c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002d8e:	693b      	ldr	r3, [r7, #16]
 8002d90:	4a61      	ldr	r2, [pc, #388]	@ (8002f18 <HAL_RCC_ClockConfig+0x268>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d909      	bls.n	8002daa <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002d96:	4b5f      	ldr	r3, [pc, #380]	@ (8002f14 <HAL_RCC_ClockConfig+0x264>)
 8002d98:	689b      	ldr	r3, [r3, #8]
 8002d9a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002d9e:	4a5d      	ldr	r2, [pc, #372]	@ (8002f14 <HAL_RCC_ClockConfig+0x264>)
 8002da0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002da4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002da6:	2380      	movs	r3, #128	@ 0x80
 8002da8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002daa:	4b5a      	ldr	r3, [pc, #360]	@ (8002f14 <HAL_RCC_ClockConfig+0x264>)
 8002dac:	689b      	ldr	r3, [r3, #8]
 8002dae:	f023 0203 	bic.w	r2, r3, #3
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	4957      	ldr	r1, [pc, #348]	@ (8002f14 <HAL_RCC_ClockConfig+0x264>)
 8002db8:	4313      	orrs	r3, r2
 8002dba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002dbc:	f7fe ffba 	bl	8001d34 <HAL_GetTick>
 8002dc0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dc2:	e00a      	b.n	8002dda <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002dc4:	f7fe ffb6 	bl	8001d34 <HAL_GetTick>
 8002dc8:	4602      	mov	r2, r0
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	1ad3      	subs	r3, r2, r3
 8002dce:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d901      	bls.n	8002dda <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002dd6:	2303      	movs	r3, #3
 8002dd8:	e095      	b.n	8002f06 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dda:	4b4e      	ldr	r3, [pc, #312]	@ (8002f14 <HAL_RCC_ClockConfig+0x264>)
 8002ddc:	689b      	ldr	r3, [r3, #8]
 8002dde:	f003 020c 	and.w	r2, r3, #12
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	009b      	lsls	r3, r3, #2
 8002de8:	429a      	cmp	r2, r3
 8002dea:	d1eb      	bne.n	8002dc4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f003 0302 	and.w	r3, r3, #2
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d023      	beq.n	8002e40 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f003 0304 	and.w	r3, r3, #4
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d005      	beq.n	8002e10 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e04:	4b43      	ldr	r3, [pc, #268]	@ (8002f14 <HAL_RCC_ClockConfig+0x264>)
 8002e06:	689b      	ldr	r3, [r3, #8]
 8002e08:	4a42      	ldr	r2, [pc, #264]	@ (8002f14 <HAL_RCC_ClockConfig+0x264>)
 8002e0a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002e0e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f003 0308 	and.w	r3, r3, #8
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d007      	beq.n	8002e2c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002e1c:	4b3d      	ldr	r3, [pc, #244]	@ (8002f14 <HAL_RCC_ClockConfig+0x264>)
 8002e1e:	689b      	ldr	r3, [r3, #8]
 8002e20:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002e24:	4a3b      	ldr	r2, [pc, #236]	@ (8002f14 <HAL_RCC_ClockConfig+0x264>)
 8002e26:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002e2a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e2c:	4b39      	ldr	r3, [pc, #228]	@ (8002f14 <HAL_RCC_ClockConfig+0x264>)
 8002e2e:	689b      	ldr	r3, [r3, #8]
 8002e30:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	689b      	ldr	r3, [r3, #8]
 8002e38:	4936      	ldr	r1, [pc, #216]	@ (8002f14 <HAL_RCC_ClockConfig+0x264>)
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	608b      	str	r3, [r1, #8]
 8002e3e:	e008      	b.n	8002e52 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002e40:	697b      	ldr	r3, [r7, #20]
 8002e42:	2b80      	cmp	r3, #128	@ 0x80
 8002e44:	d105      	bne.n	8002e52 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002e46:	4b33      	ldr	r3, [pc, #204]	@ (8002f14 <HAL_RCC_ClockConfig+0x264>)
 8002e48:	689b      	ldr	r3, [r3, #8]
 8002e4a:	4a32      	ldr	r2, [pc, #200]	@ (8002f14 <HAL_RCC_ClockConfig+0x264>)
 8002e4c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002e50:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e52:	4b2f      	ldr	r3, [pc, #188]	@ (8002f10 <HAL_RCC_ClockConfig+0x260>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f003 030f 	and.w	r3, r3, #15
 8002e5a:	683a      	ldr	r2, [r7, #0]
 8002e5c:	429a      	cmp	r2, r3
 8002e5e:	d21d      	bcs.n	8002e9c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e60:	4b2b      	ldr	r3, [pc, #172]	@ (8002f10 <HAL_RCC_ClockConfig+0x260>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f023 020f 	bic.w	r2, r3, #15
 8002e68:	4929      	ldr	r1, [pc, #164]	@ (8002f10 <HAL_RCC_ClockConfig+0x260>)
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002e70:	f7fe ff60 	bl	8001d34 <HAL_GetTick>
 8002e74:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e76:	e00a      	b.n	8002e8e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e78:	f7fe ff5c 	bl	8001d34 <HAL_GetTick>
 8002e7c:	4602      	mov	r2, r0
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	1ad3      	subs	r3, r2, r3
 8002e82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d901      	bls.n	8002e8e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002e8a:	2303      	movs	r3, #3
 8002e8c:	e03b      	b.n	8002f06 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e8e:	4b20      	ldr	r3, [pc, #128]	@ (8002f10 <HAL_RCC_ClockConfig+0x260>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f003 030f 	and.w	r3, r3, #15
 8002e96:	683a      	ldr	r2, [r7, #0]
 8002e98:	429a      	cmp	r2, r3
 8002e9a:	d1ed      	bne.n	8002e78 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f003 0304 	and.w	r3, r3, #4
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d008      	beq.n	8002eba <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ea8:	4b1a      	ldr	r3, [pc, #104]	@ (8002f14 <HAL_RCC_ClockConfig+0x264>)
 8002eaa:	689b      	ldr	r3, [r3, #8]
 8002eac:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	68db      	ldr	r3, [r3, #12]
 8002eb4:	4917      	ldr	r1, [pc, #92]	@ (8002f14 <HAL_RCC_ClockConfig+0x264>)
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f003 0308 	and.w	r3, r3, #8
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d009      	beq.n	8002eda <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ec6:	4b13      	ldr	r3, [pc, #76]	@ (8002f14 <HAL_RCC_ClockConfig+0x264>)
 8002ec8:	689b      	ldr	r3, [r3, #8]
 8002eca:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	691b      	ldr	r3, [r3, #16]
 8002ed2:	00db      	lsls	r3, r3, #3
 8002ed4:	490f      	ldr	r1, [pc, #60]	@ (8002f14 <HAL_RCC_ClockConfig+0x264>)
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002eda:	f000 f825 	bl	8002f28 <HAL_RCC_GetSysClockFreq>
 8002ede:	4602      	mov	r2, r0
 8002ee0:	4b0c      	ldr	r3, [pc, #48]	@ (8002f14 <HAL_RCC_ClockConfig+0x264>)
 8002ee2:	689b      	ldr	r3, [r3, #8]
 8002ee4:	091b      	lsrs	r3, r3, #4
 8002ee6:	f003 030f 	and.w	r3, r3, #15
 8002eea:	490c      	ldr	r1, [pc, #48]	@ (8002f1c <HAL_RCC_ClockConfig+0x26c>)
 8002eec:	5ccb      	ldrb	r3, [r1, r3]
 8002eee:	f003 031f 	and.w	r3, r3, #31
 8002ef2:	fa22 f303 	lsr.w	r3, r2, r3
 8002ef6:	4a0a      	ldr	r2, [pc, #40]	@ (8002f20 <HAL_RCC_ClockConfig+0x270>)
 8002ef8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002efa:	4b0a      	ldr	r3, [pc, #40]	@ (8002f24 <HAL_RCC_ClockConfig+0x274>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4618      	mov	r0, r3
 8002f00:	f7fe fecc 	bl	8001c9c <HAL_InitTick>
 8002f04:	4603      	mov	r3, r0
}
 8002f06:	4618      	mov	r0, r3
 8002f08:	3718      	adds	r7, #24
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bd80      	pop	{r7, pc}
 8002f0e:	bf00      	nop
 8002f10:	40022000 	.word	0x40022000
 8002f14:	40021000 	.word	0x40021000
 8002f18:	04c4b400 	.word	0x04c4b400
 8002f1c:	08006134 	.word	0x08006134
 8002f20:	20000018 	.word	0x20000018
 8002f24:	2000001c 	.word	0x2000001c

08002f28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b087      	sub	sp, #28
 8002f2c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002f2e:	4b2c      	ldr	r3, [pc, #176]	@ (8002fe0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f30:	689b      	ldr	r3, [r3, #8]
 8002f32:	f003 030c 	and.w	r3, r3, #12
 8002f36:	2b04      	cmp	r3, #4
 8002f38:	d102      	bne.n	8002f40 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002f3a:	4b2a      	ldr	r3, [pc, #168]	@ (8002fe4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002f3c:	613b      	str	r3, [r7, #16]
 8002f3e:	e047      	b.n	8002fd0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002f40:	4b27      	ldr	r3, [pc, #156]	@ (8002fe0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f42:	689b      	ldr	r3, [r3, #8]
 8002f44:	f003 030c 	and.w	r3, r3, #12
 8002f48:	2b08      	cmp	r3, #8
 8002f4a:	d102      	bne.n	8002f52 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002f4c:	4b26      	ldr	r3, [pc, #152]	@ (8002fe8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002f4e:	613b      	str	r3, [r7, #16]
 8002f50:	e03e      	b.n	8002fd0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002f52:	4b23      	ldr	r3, [pc, #140]	@ (8002fe0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f54:	689b      	ldr	r3, [r3, #8]
 8002f56:	f003 030c 	and.w	r3, r3, #12
 8002f5a:	2b0c      	cmp	r3, #12
 8002f5c:	d136      	bne.n	8002fcc <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002f5e:	4b20      	ldr	r3, [pc, #128]	@ (8002fe0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f60:	68db      	ldr	r3, [r3, #12]
 8002f62:	f003 0303 	and.w	r3, r3, #3
 8002f66:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002f68:	4b1d      	ldr	r3, [pc, #116]	@ (8002fe0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f6a:	68db      	ldr	r3, [r3, #12]
 8002f6c:	091b      	lsrs	r3, r3, #4
 8002f6e:	f003 030f 	and.w	r3, r3, #15
 8002f72:	3301      	adds	r3, #1
 8002f74:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	2b03      	cmp	r3, #3
 8002f7a:	d10c      	bne.n	8002f96 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002f7c:	4a1a      	ldr	r2, [pc, #104]	@ (8002fe8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002f7e:	68bb      	ldr	r3, [r7, #8]
 8002f80:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f84:	4a16      	ldr	r2, [pc, #88]	@ (8002fe0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f86:	68d2      	ldr	r2, [r2, #12]
 8002f88:	0a12      	lsrs	r2, r2, #8
 8002f8a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002f8e:	fb02 f303 	mul.w	r3, r2, r3
 8002f92:	617b      	str	r3, [r7, #20]
      break;
 8002f94:	e00c      	b.n	8002fb0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002f96:	4a13      	ldr	r2, [pc, #76]	@ (8002fe4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002f98:	68bb      	ldr	r3, [r7, #8]
 8002f9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f9e:	4a10      	ldr	r2, [pc, #64]	@ (8002fe0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002fa0:	68d2      	ldr	r2, [r2, #12]
 8002fa2:	0a12      	lsrs	r2, r2, #8
 8002fa4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002fa8:	fb02 f303 	mul.w	r3, r2, r3
 8002fac:	617b      	str	r3, [r7, #20]
      break;
 8002fae:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002fb0:	4b0b      	ldr	r3, [pc, #44]	@ (8002fe0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002fb2:	68db      	ldr	r3, [r3, #12]
 8002fb4:	0e5b      	lsrs	r3, r3, #25
 8002fb6:	f003 0303 	and.w	r3, r3, #3
 8002fba:	3301      	adds	r3, #1
 8002fbc:	005b      	lsls	r3, r3, #1
 8002fbe:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002fc0:	697a      	ldr	r2, [r7, #20]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fc8:	613b      	str	r3, [r7, #16]
 8002fca:	e001      	b.n	8002fd0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002fcc:	2300      	movs	r3, #0
 8002fce:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002fd0:	693b      	ldr	r3, [r7, #16]
}
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	371c      	adds	r7, #28
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fdc:	4770      	bx	lr
 8002fde:	bf00      	nop
 8002fe0:	40021000 	.word	0x40021000
 8002fe4:	00f42400 	.word	0x00f42400
 8002fe8:	007a1200 	.word	0x007a1200

08002fec <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002fec:	b480      	push	{r7}
 8002fee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ff0:	4b03      	ldr	r3, [pc, #12]	@ (8003000 <HAL_RCC_GetHCLKFreq+0x14>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
}
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffc:	4770      	bx	lr
 8002ffe:	bf00      	nop
 8003000:	20000018 	.word	0x20000018

08003004 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003008:	f7ff fff0 	bl	8002fec <HAL_RCC_GetHCLKFreq>
 800300c:	4602      	mov	r2, r0
 800300e:	4b06      	ldr	r3, [pc, #24]	@ (8003028 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003010:	689b      	ldr	r3, [r3, #8]
 8003012:	0a1b      	lsrs	r3, r3, #8
 8003014:	f003 0307 	and.w	r3, r3, #7
 8003018:	4904      	ldr	r1, [pc, #16]	@ (800302c <HAL_RCC_GetPCLK1Freq+0x28>)
 800301a:	5ccb      	ldrb	r3, [r1, r3]
 800301c:	f003 031f 	and.w	r3, r3, #31
 8003020:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003024:	4618      	mov	r0, r3
 8003026:	bd80      	pop	{r7, pc}
 8003028:	40021000 	.word	0x40021000
 800302c:	08006144 	.word	0x08006144

08003030 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003034:	f7ff ffda 	bl	8002fec <HAL_RCC_GetHCLKFreq>
 8003038:	4602      	mov	r2, r0
 800303a:	4b06      	ldr	r3, [pc, #24]	@ (8003054 <HAL_RCC_GetPCLK2Freq+0x24>)
 800303c:	689b      	ldr	r3, [r3, #8]
 800303e:	0adb      	lsrs	r3, r3, #11
 8003040:	f003 0307 	and.w	r3, r3, #7
 8003044:	4904      	ldr	r1, [pc, #16]	@ (8003058 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003046:	5ccb      	ldrb	r3, [r1, r3]
 8003048:	f003 031f 	and.w	r3, r3, #31
 800304c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003050:	4618      	mov	r0, r3
 8003052:	bd80      	pop	{r7, pc}
 8003054:	40021000 	.word	0x40021000
 8003058:	08006144 	.word	0x08006144

0800305c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800305c:	b480      	push	{r7}
 800305e:	b087      	sub	sp, #28
 8003060:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003062:	4b1e      	ldr	r3, [pc, #120]	@ (80030dc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003064:	68db      	ldr	r3, [r3, #12]
 8003066:	f003 0303 	and.w	r3, r3, #3
 800306a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800306c:	4b1b      	ldr	r3, [pc, #108]	@ (80030dc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800306e:	68db      	ldr	r3, [r3, #12]
 8003070:	091b      	lsrs	r3, r3, #4
 8003072:	f003 030f 	and.w	r3, r3, #15
 8003076:	3301      	adds	r3, #1
 8003078:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	2b03      	cmp	r3, #3
 800307e:	d10c      	bne.n	800309a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003080:	4a17      	ldr	r2, [pc, #92]	@ (80030e0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	fbb2 f3f3 	udiv	r3, r2, r3
 8003088:	4a14      	ldr	r2, [pc, #80]	@ (80030dc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800308a:	68d2      	ldr	r2, [r2, #12]
 800308c:	0a12      	lsrs	r2, r2, #8
 800308e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003092:	fb02 f303 	mul.w	r3, r2, r3
 8003096:	617b      	str	r3, [r7, #20]
    break;
 8003098:	e00c      	b.n	80030b4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800309a:	4a12      	ldr	r2, [pc, #72]	@ (80030e4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	fbb2 f3f3 	udiv	r3, r2, r3
 80030a2:	4a0e      	ldr	r2, [pc, #56]	@ (80030dc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80030a4:	68d2      	ldr	r2, [r2, #12]
 80030a6:	0a12      	lsrs	r2, r2, #8
 80030a8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80030ac:	fb02 f303 	mul.w	r3, r2, r3
 80030b0:	617b      	str	r3, [r7, #20]
    break;
 80030b2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80030b4:	4b09      	ldr	r3, [pc, #36]	@ (80030dc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80030b6:	68db      	ldr	r3, [r3, #12]
 80030b8:	0e5b      	lsrs	r3, r3, #25
 80030ba:	f003 0303 	and.w	r3, r3, #3
 80030be:	3301      	adds	r3, #1
 80030c0:	005b      	lsls	r3, r3, #1
 80030c2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80030c4:	697a      	ldr	r2, [r7, #20]
 80030c6:	68bb      	ldr	r3, [r7, #8]
 80030c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80030cc:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80030ce:	687b      	ldr	r3, [r7, #4]
}
 80030d0:	4618      	mov	r0, r3
 80030d2:	371c      	adds	r7, #28
 80030d4:	46bd      	mov	sp, r7
 80030d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030da:	4770      	bx	lr
 80030dc:	40021000 	.word	0x40021000
 80030e0:	007a1200 	.word	0x007a1200
 80030e4:	00f42400 	.word	0x00f42400

080030e8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b086      	sub	sp, #24
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80030f0:	2300      	movs	r3, #0
 80030f2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80030f4:	2300      	movs	r3, #0
 80030f6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003100:	2b00      	cmp	r3, #0
 8003102:	f000 8098 	beq.w	8003236 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003106:	2300      	movs	r3, #0
 8003108:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800310a:	4b43      	ldr	r3, [pc, #268]	@ (8003218 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800310c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800310e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003112:	2b00      	cmp	r3, #0
 8003114:	d10d      	bne.n	8003132 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003116:	4b40      	ldr	r3, [pc, #256]	@ (8003218 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003118:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800311a:	4a3f      	ldr	r2, [pc, #252]	@ (8003218 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800311c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003120:	6593      	str	r3, [r2, #88]	@ 0x58
 8003122:	4b3d      	ldr	r3, [pc, #244]	@ (8003218 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003124:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003126:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800312a:	60bb      	str	r3, [r7, #8]
 800312c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800312e:	2301      	movs	r3, #1
 8003130:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003132:	4b3a      	ldr	r3, [pc, #232]	@ (800321c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4a39      	ldr	r2, [pc, #228]	@ (800321c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003138:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800313c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800313e:	f7fe fdf9 	bl	8001d34 <HAL_GetTick>
 8003142:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003144:	e009      	b.n	800315a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003146:	f7fe fdf5 	bl	8001d34 <HAL_GetTick>
 800314a:	4602      	mov	r2, r0
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	1ad3      	subs	r3, r2, r3
 8003150:	2b02      	cmp	r3, #2
 8003152:	d902      	bls.n	800315a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003154:	2303      	movs	r3, #3
 8003156:	74fb      	strb	r3, [r7, #19]
        break;
 8003158:	e005      	b.n	8003166 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800315a:	4b30      	ldr	r3, [pc, #192]	@ (800321c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003162:	2b00      	cmp	r3, #0
 8003164:	d0ef      	beq.n	8003146 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003166:	7cfb      	ldrb	r3, [r7, #19]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d159      	bne.n	8003220 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800316c:	4b2a      	ldr	r3, [pc, #168]	@ (8003218 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800316e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003172:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003176:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003178:	697b      	ldr	r3, [r7, #20]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d01e      	beq.n	80031bc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003182:	697a      	ldr	r2, [r7, #20]
 8003184:	429a      	cmp	r2, r3
 8003186:	d019      	beq.n	80031bc <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003188:	4b23      	ldr	r3, [pc, #140]	@ (8003218 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800318a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800318e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003192:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003194:	4b20      	ldr	r3, [pc, #128]	@ (8003218 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003196:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800319a:	4a1f      	ldr	r2, [pc, #124]	@ (8003218 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800319c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031a0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80031a4:	4b1c      	ldr	r3, [pc, #112]	@ (8003218 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80031a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031aa:	4a1b      	ldr	r2, [pc, #108]	@ (8003218 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80031ac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80031b0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80031b4:	4a18      	ldr	r2, [pc, #96]	@ (8003218 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80031b6:	697b      	ldr	r3, [r7, #20]
 80031b8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	f003 0301 	and.w	r3, r3, #1
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d016      	beq.n	80031f4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031c6:	f7fe fdb5 	bl	8001d34 <HAL_GetTick>
 80031ca:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80031cc:	e00b      	b.n	80031e6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031ce:	f7fe fdb1 	bl	8001d34 <HAL_GetTick>
 80031d2:	4602      	mov	r2, r0
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	1ad3      	subs	r3, r2, r3
 80031d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031dc:	4293      	cmp	r3, r2
 80031de:	d902      	bls.n	80031e6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80031e0:	2303      	movs	r3, #3
 80031e2:	74fb      	strb	r3, [r7, #19]
            break;
 80031e4:	e006      	b.n	80031f4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80031e6:	4b0c      	ldr	r3, [pc, #48]	@ (8003218 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80031e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031ec:	f003 0302 	and.w	r3, r3, #2
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d0ec      	beq.n	80031ce <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80031f4:	7cfb      	ldrb	r3, [r7, #19]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d10b      	bne.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80031fa:	4b07      	ldr	r3, [pc, #28]	@ (8003218 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80031fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003200:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003208:	4903      	ldr	r1, [pc, #12]	@ (8003218 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800320a:	4313      	orrs	r3, r2
 800320c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003210:	e008      	b.n	8003224 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003212:	7cfb      	ldrb	r3, [r7, #19]
 8003214:	74bb      	strb	r3, [r7, #18]
 8003216:	e005      	b.n	8003224 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003218:	40021000 	.word	0x40021000
 800321c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003220:	7cfb      	ldrb	r3, [r7, #19]
 8003222:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003224:	7c7b      	ldrb	r3, [r7, #17]
 8003226:	2b01      	cmp	r3, #1
 8003228:	d105      	bne.n	8003236 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800322a:	4ba6      	ldr	r3, [pc, #664]	@ (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800322c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800322e:	4aa5      	ldr	r2, [pc, #660]	@ (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003230:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003234:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f003 0301 	and.w	r3, r3, #1
 800323e:	2b00      	cmp	r3, #0
 8003240:	d00a      	beq.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003242:	4ba0      	ldr	r3, [pc, #640]	@ (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003244:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003248:	f023 0203 	bic.w	r2, r3, #3
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	499c      	ldr	r1, [pc, #624]	@ (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003252:	4313      	orrs	r3, r2
 8003254:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f003 0302 	and.w	r3, r3, #2
 8003260:	2b00      	cmp	r3, #0
 8003262:	d00a      	beq.n	800327a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003264:	4b97      	ldr	r3, [pc, #604]	@ (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003266:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800326a:	f023 020c 	bic.w	r2, r3, #12
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	689b      	ldr	r3, [r3, #8]
 8003272:	4994      	ldr	r1, [pc, #592]	@ (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003274:	4313      	orrs	r3, r2
 8003276:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f003 0304 	and.w	r3, r3, #4
 8003282:	2b00      	cmp	r3, #0
 8003284:	d00a      	beq.n	800329c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003286:	4b8f      	ldr	r3, [pc, #572]	@ (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003288:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800328c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	68db      	ldr	r3, [r3, #12]
 8003294:	498b      	ldr	r1, [pc, #556]	@ (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003296:	4313      	orrs	r3, r2
 8003298:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f003 0308 	and.w	r3, r3, #8
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d00a      	beq.n	80032be <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80032a8:	4b86      	ldr	r3, [pc, #536]	@ (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80032aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032ae:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	691b      	ldr	r3, [r3, #16]
 80032b6:	4983      	ldr	r1, [pc, #524]	@ (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80032b8:	4313      	orrs	r3, r2
 80032ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f003 0320 	and.w	r3, r3, #32
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d00a      	beq.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80032ca:	4b7e      	ldr	r3, [pc, #504]	@ (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80032cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032d0:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	695b      	ldr	r3, [r3, #20]
 80032d8:	497a      	ldr	r1, [pc, #488]	@ (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80032da:	4313      	orrs	r3, r2
 80032dc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d00a      	beq.n	8003302 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80032ec:	4b75      	ldr	r3, [pc, #468]	@ (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80032ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032f2:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	699b      	ldr	r3, [r3, #24]
 80032fa:	4972      	ldr	r1, [pc, #456]	@ (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80032fc:	4313      	orrs	r3, r2
 80032fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800330a:	2b00      	cmp	r3, #0
 800330c:	d00a      	beq.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800330e:	4b6d      	ldr	r3, [pc, #436]	@ (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003310:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003314:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	69db      	ldr	r3, [r3, #28]
 800331c:	4969      	ldr	r1, [pc, #420]	@ (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800331e:	4313      	orrs	r3, r2
 8003320:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800332c:	2b00      	cmp	r3, #0
 800332e:	d00a      	beq.n	8003346 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003330:	4b64      	ldr	r3, [pc, #400]	@ (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003332:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003336:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6a1b      	ldr	r3, [r3, #32]
 800333e:	4961      	ldr	r1, [pc, #388]	@ (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003340:	4313      	orrs	r3, r2
 8003342:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800334e:	2b00      	cmp	r3, #0
 8003350:	d00a      	beq.n	8003368 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003352:	4b5c      	ldr	r3, [pc, #368]	@ (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003354:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003358:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003360:	4958      	ldr	r1, [pc, #352]	@ (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003362:	4313      	orrs	r3, r2
 8003364:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003370:	2b00      	cmp	r3, #0
 8003372:	d015      	beq.n	80033a0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003374:	4b53      	ldr	r3, [pc, #332]	@ (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003376:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800337a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003382:	4950      	ldr	r1, [pc, #320]	@ (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003384:	4313      	orrs	r3, r2
 8003386:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800338e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003392:	d105      	bne.n	80033a0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003394:	4b4b      	ldr	r3, [pc, #300]	@ (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003396:	68db      	ldr	r3, [r3, #12]
 8003398:	4a4a      	ldr	r2, [pc, #296]	@ (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800339a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800339e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d015      	beq.n	80033d8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80033ac:	4b45      	ldr	r3, [pc, #276]	@ (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033b2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033ba:	4942      	ldr	r1, [pc, #264]	@ (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033bc:	4313      	orrs	r3, r2
 80033be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033c6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80033ca:	d105      	bne.n	80033d8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80033cc:	4b3d      	ldr	r3, [pc, #244]	@ (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033ce:	68db      	ldr	r3, [r3, #12]
 80033d0:	4a3c      	ldr	r2, [pc, #240]	@ (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033d2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80033d6:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d015      	beq.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80033e4:	4b37      	ldr	r3, [pc, #220]	@ (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033ea:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033f2:	4934      	ldr	r1, [pc, #208]	@ (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033f4:	4313      	orrs	r3, r2
 80033f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033fe:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003402:	d105      	bne.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003404:	4b2f      	ldr	r3, [pc, #188]	@ (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003406:	68db      	ldr	r3, [r3, #12]
 8003408:	4a2e      	ldr	r2, [pc, #184]	@ (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800340a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800340e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003418:	2b00      	cmp	r3, #0
 800341a:	d015      	beq.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800341c:	4b29      	ldr	r3, [pc, #164]	@ (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800341e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003422:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800342a:	4926      	ldr	r1, [pc, #152]	@ (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800342c:	4313      	orrs	r3, r2
 800342e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003436:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800343a:	d105      	bne.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800343c:	4b21      	ldr	r3, [pc, #132]	@ (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800343e:	68db      	ldr	r3, [r3, #12]
 8003440:	4a20      	ldr	r2, [pc, #128]	@ (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003442:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003446:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003450:	2b00      	cmp	r3, #0
 8003452:	d015      	beq.n	8003480 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003454:	4b1b      	ldr	r3, [pc, #108]	@ (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003456:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800345a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003462:	4918      	ldr	r1, [pc, #96]	@ (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003464:	4313      	orrs	r3, r2
 8003466:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800346e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003472:	d105      	bne.n	8003480 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003474:	4b13      	ldr	r3, [pc, #76]	@ (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003476:	68db      	ldr	r3, [r3, #12]
 8003478:	4a12      	ldr	r2, [pc, #72]	@ (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800347a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800347e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003488:	2b00      	cmp	r3, #0
 800348a:	d015      	beq.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800348c:	4b0d      	ldr	r3, [pc, #52]	@ (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800348e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003492:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800349a:	490a      	ldr	r1, [pc, #40]	@ (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800349c:	4313      	orrs	r3, r2
 800349e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034a6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80034aa:	d105      	bne.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80034ac:	4b05      	ldr	r3, [pc, #20]	@ (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80034ae:	68db      	ldr	r3, [r3, #12]
 80034b0:	4a04      	ldr	r2, [pc, #16]	@ (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80034b2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80034b6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80034b8:	7cbb      	ldrb	r3, [r7, #18]
}
 80034ba:	4618      	mov	r0, r3
 80034bc:	3718      	adds	r7, #24
 80034be:	46bd      	mov	sp, r7
 80034c0:	bd80      	pop	{r7, pc}
 80034c2:	bf00      	nop
 80034c4:	40021000 	.word	0x40021000

080034c8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b084      	sub	sp, #16
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d101      	bne.n	80034da <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80034d6:	2301      	movs	r3, #1
 80034d8:	e09d      	b.n	8003616 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d108      	bne.n	80034f4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80034ea:	d009      	beq.n	8003500 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2200      	movs	r2, #0
 80034f0:	61da      	str	r2, [r3, #28]
 80034f2:	e005      	b.n	8003500 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2200      	movs	r2, #0
 80034f8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2200      	movs	r2, #0
 80034fe:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2200      	movs	r2, #0
 8003504:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800350c:	b2db      	uxtb	r3, r3
 800350e:	2b00      	cmp	r3, #0
 8003510:	d106      	bne.n	8003520 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2200      	movs	r2, #0
 8003516:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800351a:	6878      	ldr	r0, [r7, #4]
 800351c:	f7fd feb0 	bl	8001280 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2202      	movs	r2, #2
 8003524:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	681a      	ldr	r2, [r3, #0]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003536:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	68db      	ldr	r3, [r3, #12]
 800353c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003540:	d902      	bls.n	8003548 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003542:	2300      	movs	r3, #0
 8003544:	60fb      	str	r3, [r7, #12]
 8003546:	e002      	b.n	800354e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003548:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800354c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	68db      	ldr	r3, [r3, #12]
 8003552:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8003556:	d007      	beq.n	8003568 <HAL_SPI_Init+0xa0>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	68db      	ldr	r3, [r3, #12]
 800355c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003560:	d002      	beq.n	8003568 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2200      	movs	r2, #0
 8003566:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	689b      	ldr	r3, [r3, #8]
 8003574:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003578:	431a      	orrs	r2, r3
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	691b      	ldr	r3, [r3, #16]
 800357e:	f003 0302 	and.w	r3, r3, #2
 8003582:	431a      	orrs	r2, r3
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	695b      	ldr	r3, [r3, #20]
 8003588:	f003 0301 	and.w	r3, r3, #1
 800358c:	431a      	orrs	r2, r3
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	699b      	ldr	r3, [r3, #24]
 8003592:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003596:	431a      	orrs	r2, r3
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	69db      	ldr	r3, [r3, #28]
 800359c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80035a0:	431a      	orrs	r2, r3
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6a1b      	ldr	r3, [r3, #32]
 80035a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035aa:	ea42 0103 	orr.w	r1, r2, r3
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035b2:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	430a      	orrs	r2, r1
 80035bc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	699b      	ldr	r3, [r3, #24]
 80035c2:	0c1b      	lsrs	r3, r3, #16
 80035c4:	f003 0204 	and.w	r2, r3, #4
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035cc:	f003 0310 	and.w	r3, r3, #16
 80035d0:	431a      	orrs	r2, r3
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035d6:	f003 0308 	and.w	r3, r3, #8
 80035da:	431a      	orrs	r2, r3
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	68db      	ldr	r3, [r3, #12]
 80035e0:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80035e4:	ea42 0103 	orr.w	r1, r2, r3
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	430a      	orrs	r2, r1
 80035f4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	69da      	ldr	r2, [r3, #28]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003604:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2200      	movs	r2, #0
 800360a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2201      	movs	r2, #1
 8003610:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8003614:	2300      	movs	r3, #0
}
 8003616:	4618      	mov	r0, r3
 8003618:	3710      	adds	r7, #16
 800361a:	46bd      	mov	sp, r7
 800361c:	bd80      	pop	{r7, pc}

0800361e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800361e:	b580      	push	{r7, lr}
 8003620:	b082      	sub	sp, #8
 8003622:	af00      	add	r7, sp, #0
 8003624:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d101      	bne.n	8003630 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800362c:	2301      	movs	r3, #1
 800362e:	e049      	b.n	80036c4 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003636:	b2db      	uxtb	r3, r3
 8003638:	2b00      	cmp	r3, #0
 800363a:	d106      	bne.n	800364a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2200      	movs	r2, #0
 8003640:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003644:	6878      	ldr	r0, [r7, #4]
 8003646:	f7fe f9b3 	bl	80019b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2202      	movs	r2, #2
 800364e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681a      	ldr	r2, [r3, #0]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	3304      	adds	r3, #4
 800365a:	4619      	mov	r1, r3
 800365c:	4610      	mov	r0, r2
 800365e:	f000 fcad 	bl	8003fbc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2201      	movs	r2, #1
 8003666:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2201      	movs	r2, #1
 800366e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2201      	movs	r2, #1
 8003676:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2201      	movs	r2, #1
 800367e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2201      	movs	r2, #1
 8003686:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2201      	movs	r2, #1
 800368e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2201      	movs	r2, #1
 8003696:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2201      	movs	r2, #1
 800369e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2201      	movs	r2, #1
 80036a6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2201      	movs	r2, #1
 80036ae:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2201      	movs	r2, #1
 80036b6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2201      	movs	r2, #1
 80036be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80036c2:	2300      	movs	r3, #0
}
 80036c4:	4618      	mov	r0, r3
 80036c6:	3708      	adds	r7, #8
 80036c8:	46bd      	mov	sp, r7
 80036ca:	bd80      	pop	{r7, pc}

080036cc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80036cc:	b480      	push	{r7}
 80036ce:	b085      	sub	sp, #20
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80036da:	b2db      	uxtb	r3, r3
 80036dc:	2b01      	cmp	r3, #1
 80036de:	d001      	beq.n	80036e4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80036e0:	2301      	movs	r3, #1
 80036e2:	e042      	b.n	800376a <HAL_TIM_Base_Start+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2202      	movs	r2, #2
 80036e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a21      	ldr	r2, [pc, #132]	@ (8003778 <HAL_TIM_Base_Start+0xac>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d018      	beq.n	8003728 <HAL_TIM_Base_Start+0x5c>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80036fe:	d013      	beq.n	8003728 <HAL_TIM_Base_Start+0x5c>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a1d      	ldr	r2, [pc, #116]	@ (800377c <HAL_TIM_Base_Start+0xb0>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d00e      	beq.n	8003728 <HAL_TIM_Base_Start+0x5c>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4a1c      	ldr	r2, [pc, #112]	@ (8003780 <HAL_TIM_Base_Start+0xb4>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d009      	beq.n	8003728 <HAL_TIM_Base_Start+0x5c>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a1a      	ldr	r2, [pc, #104]	@ (8003784 <HAL_TIM_Base_Start+0xb8>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d004      	beq.n	8003728 <HAL_TIM_Base_Start+0x5c>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4a19      	ldr	r2, [pc, #100]	@ (8003788 <HAL_TIM_Base_Start+0xbc>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d115      	bne.n	8003754 <HAL_TIM_Base_Start+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	689a      	ldr	r2, [r3, #8]
 800372e:	4b17      	ldr	r3, [pc, #92]	@ (800378c <HAL_TIM_Base_Start+0xc0>)
 8003730:	4013      	ands	r3, r2
 8003732:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	2b06      	cmp	r3, #6
 8003738:	d015      	beq.n	8003766 <HAL_TIM_Base_Start+0x9a>
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003740:	d011      	beq.n	8003766 <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	681a      	ldr	r2, [r3, #0]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f042 0201 	orr.w	r2, r2, #1
 8003750:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003752:	e008      	b.n	8003766 <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	681a      	ldr	r2, [r3, #0]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f042 0201 	orr.w	r2, r2, #1
 8003762:	601a      	str	r2, [r3, #0]
 8003764:	e000      	b.n	8003768 <HAL_TIM_Base_Start+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003766:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003768:	2300      	movs	r3, #0
}
 800376a:	4618      	mov	r0, r3
 800376c:	3714      	adds	r7, #20
 800376e:	46bd      	mov	sp, r7
 8003770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003774:	4770      	bx	lr
 8003776:	bf00      	nop
 8003778:	40012c00 	.word	0x40012c00
 800377c:	40000400 	.word	0x40000400
 8003780:	40000800 	.word	0x40000800
 8003784:	40013400 	.word	0x40013400
 8003788:	40014000 	.word	0x40014000
 800378c:	00010007 	.word	0x00010007

08003790 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b082      	sub	sp, #8
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d101      	bne.n	80037a2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800379e:	2301      	movs	r3, #1
 80037a0:	e049      	b.n	8003836 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80037a8:	b2db      	uxtb	r3, r3
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d106      	bne.n	80037bc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2200      	movs	r2, #0
 80037b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80037b6:	6878      	ldr	r0, [r7, #4]
 80037b8:	f000 f841 	bl	800383e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2202      	movs	r2, #2
 80037c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681a      	ldr	r2, [r3, #0]
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	3304      	adds	r3, #4
 80037cc:	4619      	mov	r1, r3
 80037ce:	4610      	mov	r0, r2
 80037d0:	f000 fbf4 	bl	8003fbc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2201      	movs	r2, #1
 80037d8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2201      	movs	r2, #1
 80037e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2201      	movs	r2, #1
 80037e8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2201      	movs	r2, #1
 80037f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2201      	movs	r2, #1
 80037f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2201      	movs	r2, #1
 8003800:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2201      	movs	r2, #1
 8003808:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2201      	movs	r2, #1
 8003810:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2201      	movs	r2, #1
 8003818:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2201      	movs	r2, #1
 8003820:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2201      	movs	r2, #1
 8003828:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2201      	movs	r2, #1
 8003830:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003834:	2300      	movs	r3, #0
}
 8003836:	4618      	mov	r0, r3
 8003838:	3708      	adds	r7, #8
 800383a:	46bd      	mov	sp, r7
 800383c:	bd80      	pop	{r7, pc}

0800383e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800383e:	b480      	push	{r7}
 8003840:	b083      	sub	sp, #12
 8003842:	af00      	add	r7, sp, #0
 8003844:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003846:	bf00      	nop
 8003848:	370c      	adds	r7, #12
 800384a:	46bd      	mov	sp, r7
 800384c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003850:	4770      	bx	lr
	...

08003854 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b084      	sub	sp, #16
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
 800385c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d109      	bne.n	8003878 <HAL_TIM_PWM_Start+0x24>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800386a:	b2db      	uxtb	r3, r3
 800386c:	2b01      	cmp	r3, #1
 800386e:	bf14      	ite	ne
 8003870:	2301      	movne	r3, #1
 8003872:	2300      	moveq	r3, #0
 8003874:	b2db      	uxtb	r3, r3
 8003876:	e03c      	b.n	80038f2 <HAL_TIM_PWM_Start+0x9e>
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	2b04      	cmp	r3, #4
 800387c:	d109      	bne.n	8003892 <HAL_TIM_PWM_Start+0x3e>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003884:	b2db      	uxtb	r3, r3
 8003886:	2b01      	cmp	r3, #1
 8003888:	bf14      	ite	ne
 800388a:	2301      	movne	r3, #1
 800388c:	2300      	moveq	r3, #0
 800388e:	b2db      	uxtb	r3, r3
 8003890:	e02f      	b.n	80038f2 <HAL_TIM_PWM_Start+0x9e>
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	2b08      	cmp	r3, #8
 8003896:	d109      	bne.n	80038ac <HAL_TIM_PWM_Start+0x58>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800389e:	b2db      	uxtb	r3, r3
 80038a0:	2b01      	cmp	r3, #1
 80038a2:	bf14      	ite	ne
 80038a4:	2301      	movne	r3, #1
 80038a6:	2300      	moveq	r3, #0
 80038a8:	b2db      	uxtb	r3, r3
 80038aa:	e022      	b.n	80038f2 <HAL_TIM_PWM_Start+0x9e>
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	2b0c      	cmp	r3, #12
 80038b0:	d109      	bne.n	80038c6 <HAL_TIM_PWM_Start+0x72>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80038b8:	b2db      	uxtb	r3, r3
 80038ba:	2b01      	cmp	r3, #1
 80038bc:	bf14      	ite	ne
 80038be:	2301      	movne	r3, #1
 80038c0:	2300      	moveq	r3, #0
 80038c2:	b2db      	uxtb	r3, r3
 80038c4:	e015      	b.n	80038f2 <HAL_TIM_PWM_Start+0x9e>
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	2b10      	cmp	r3, #16
 80038ca:	d109      	bne.n	80038e0 <HAL_TIM_PWM_Start+0x8c>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80038d2:	b2db      	uxtb	r3, r3
 80038d4:	2b01      	cmp	r3, #1
 80038d6:	bf14      	ite	ne
 80038d8:	2301      	movne	r3, #1
 80038da:	2300      	moveq	r3, #0
 80038dc:	b2db      	uxtb	r3, r3
 80038de:	e008      	b.n	80038f2 <HAL_TIM_PWM_Start+0x9e>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80038e6:	b2db      	uxtb	r3, r3
 80038e8:	2b01      	cmp	r3, #1
 80038ea:	bf14      	ite	ne
 80038ec:	2301      	movne	r3, #1
 80038ee:	2300      	moveq	r3, #0
 80038f0:	b2db      	uxtb	r3, r3
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d001      	beq.n	80038fa <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80038f6:	2301      	movs	r3, #1
 80038f8:	e097      	b.n	8003a2a <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d104      	bne.n	800390a <HAL_TIM_PWM_Start+0xb6>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2202      	movs	r2, #2
 8003904:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003908:	e023      	b.n	8003952 <HAL_TIM_PWM_Start+0xfe>
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	2b04      	cmp	r3, #4
 800390e:	d104      	bne.n	800391a <HAL_TIM_PWM_Start+0xc6>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2202      	movs	r2, #2
 8003914:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003918:	e01b      	b.n	8003952 <HAL_TIM_PWM_Start+0xfe>
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	2b08      	cmp	r3, #8
 800391e:	d104      	bne.n	800392a <HAL_TIM_PWM_Start+0xd6>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2202      	movs	r2, #2
 8003924:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003928:	e013      	b.n	8003952 <HAL_TIM_PWM_Start+0xfe>
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	2b0c      	cmp	r3, #12
 800392e:	d104      	bne.n	800393a <HAL_TIM_PWM_Start+0xe6>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2202      	movs	r2, #2
 8003934:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003938:	e00b      	b.n	8003952 <HAL_TIM_PWM_Start+0xfe>
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	2b10      	cmp	r3, #16
 800393e:	d104      	bne.n	800394a <HAL_TIM_PWM_Start+0xf6>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2202      	movs	r2, #2
 8003944:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003948:	e003      	b.n	8003952 <HAL_TIM_PWM_Start+0xfe>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2202      	movs	r2, #2
 800394e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	2201      	movs	r2, #1
 8003958:	6839      	ldr	r1, [r7, #0]
 800395a:	4618      	mov	r0, r3
 800395c:	f000 ffc4 	bl	80048e8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a33      	ldr	r2, [pc, #204]	@ (8003a34 <HAL_TIM_PWM_Start+0x1e0>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d013      	beq.n	8003992 <HAL_TIM_PWM_Start+0x13e>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4a32      	ldr	r2, [pc, #200]	@ (8003a38 <HAL_TIM_PWM_Start+0x1e4>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d00e      	beq.n	8003992 <HAL_TIM_PWM_Start+0x13e>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a30      	ldr	r2, [pc, #192]	@ (8003a3c <HAL_TIM_PWM_Start+0x1e8>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d009      	beq.n	8003992 <HAL_TIM_PWM_Start+0x13e>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4a2f      	ldr	r2, [pc, #188]	@ (8003a40 <HAL_TIM_PWM_Start+0x1ec>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d004      	beq.n	8003992 <HAL_TIM_PWM_Start+0x13e>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a2d      	ldr	r2, [pc, #180]	@ (8003a44 <HAL_TIM_PWM_Start+0x1f0>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d101      	bne.n	8003996 <HAL_TIM_PWM_Start+0x142>
 8003992:	2301      	movs	r3, #1
 8003994:	e000      	b.n	8003998 <HAL_TIM_PWM_Start+0x144>
 8003996:	2300      	movs	r3, #0
 8003998:	2b00      	cmp	r3, #0
 800399a:	d007      	beq.n	80039ac <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80039aa:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a20      	ldr	r2, [pc, #128]	@ (8003a34 <HAL_TIM_PWM_Start+0x1e0>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d018      	beq.n	80039e8 <HAL_TIM_PWM_Start+0x194>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80039be:	d013      	beq.n	80039e8 <HAL_TIM_PWM_Start+0x194>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a20      	ldr	r2, [pc, #128]	@ (8003a48 <HAL_TIM_PWM_Start+0x1f4>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d00e      	beq.n	80039e8 <HAL_TIM_PWM_Start+0x194>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4a1f      	ldr	r2, [pc, #124]	@ (8003a4c <HAL_TIM_PWM_Start+0x1f8>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d009      	beq.n	80039e8 <HAL_TIM_PWM_Start+0x194>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4a17      	ldr	r2, [pc, #92]	@ (8003a38 <HAL_TIM_PWM_Start+0x1e4>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d004      	beq.n	80039e8 <HAL_TIM_PWM_Start+0x194>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4a16      	ldr	r2, [pc, #88]	@ (8003a3c <HAL_TIM_PWM_Start+0x1e8>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d115      	bne.n	8003a14 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	689a      	ldr	r2, [r3, #8]
 80039ee:	4b18      	ldr	r3, [pc, #96]	@ (8003a50 <HAL_TIM_PWM_Start+0x1fc>)
 80039f0:	4013      	ands	r3, r2
 80039f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	2b06      	cmp	r3, #6
 80039f8:	d015      	beq.n	8003a26 <HAL_TIM_PWM_Start+0x1d2>
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a00:	d011      	beq.n	8003a26 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	681a      	ldr	r2, [r3, #0]
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f042 0201 	orr.w	r2, r2, #1
 8003a10:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a12:	e008      	b.n	8003a26 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	681a      	ldr	r2, [r3, #0]
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f042 0201 	orr.w	r2, r2, #1
 8003a22:	601a      	str	r2, [r3, #0]
 8003a24:	e000      	b.n	8003a28 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a26:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003a28:	2300      	movs	r3, #0
}
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	3710      	adds	r7, #16
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bd80      	pop	{r7, pc}
 8003a32:	bf00      	nop
 8003a34:	40012c00 	.word	0x40012c00
 8003a38:	40013400 	.word	0x40013400
 8003a3c:	40014000 	.word	0x40014000
 8003a40:	40014400 	.word	0x40014400
 8003a44:	40014800 	.word	0x40014800
 8003a48:	40000400 	.word	0x40000400
 8003a4c:	40000800 	.word	0x40000800
 8003a50:	00010007 	.word	0x00010007

08003a54 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b086      	sub	sp, #24
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
 8003a5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d101      	bne.n	8003a68 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003a64:	2301      	movs	r3, #1
 8003a66:	e097      	b.n	8003b98 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a6e:	b2db      	uxtb	r3, r3
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d106      	bne.n	8003a82 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2200      	movs	r2, #0
 8003a78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003a7c:	6878      	ldr	r0, [r7, #4]
 8003a7e:	f7fd ff05 	bl	800188c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2202      	movs	r2, #2
 8003a86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	689b      	ldr	r3, [r3, #8]
 8003a90:	687a      	ldr	r2, [r7, #4]
 8003a92:	6812      	ldr	r2, [r2, #0]
 8003a94:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8003a98:	f023 0307 	bic.w	r3, r3, #7
 8003a9c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681a      	ldr	r2, [r3, #0]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	3304      	adds	r3, #4
 8003aa6:	4619      	mov	r1, r3
 8003aa8:	4610      	mov	r0, r2
 8003aaa:	f000 fa87 	bl	8003fbc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	689b      	ldr	r3, [r3, #8]
 8003ab4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	699b      	ldr	r3, [r3, #24]
 8003abc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	6a1b      	ldr	r3, [r3, #32]
 8003ac4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	697a      	ldr	r2, [r7, #20]
 8003acc:	4313      	orrs	r3, r2
 8003ace:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003ad0:	693b      	ldr	r3, [r7, #16]
 8003ad2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ad6:	f023 0303 	bic.w	r3, r3, #3
 8003ada:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	689a      	ldr	r2, [r3, #8]
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	699b      	ldr	r3, [r3, #24]
 8003ae4:	021b      	lsls	r3, r3, #8
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	693a      	ldr	r2, [r7, #16]
 8003aea:	4313      	orrs	r3, r2
 8003aec:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003aee:	693b      	ldr	r3, [r7, #16]
 8003af0:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8003af4:	f023 030c 	bic.w	r3, r3, #12
 8003af8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003afa:	693b      	ldr	r3, [r7, #16]
 8003afc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003b00:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003b04:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	68da      	ldr	r2, [r3, #12]
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	69db      	ldr	r3, [r3, #28]
 8003b0e:	021b      	lsls	r3, r3, #8
 8003b10:	4313      	orrs	r3, r2
 8003b12:	693a      	ldr	r2, [r7, #16]
 8003b14:	4313      	orrs	r3, r2
 8003b16:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	691b      	ldr	r3, [r3, #16]
 8003b1c:	011a      	lsls	r2, r3, #4
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	6a1b      	ldr	r3, [r3, #32]
 8003b22:	031b      	lsls	r3, r3, #12
 8003b24:	4313      	orrs	r3, r2
 8003b26:	693a      	ldr	r2, [r7, #16]
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8003b32:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8003b3a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	685a      	ldr	r2, [r3, #4]
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	695b      	ldr	r3, [r3, #20]
 8003b44:	011b      	lsls	r3, r3, #4
 8003b46:	4313      	orrs	r3, r2
 8003b48:	68fa      	ldr	r2, [r7, #12]
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	697a      	ldr	r2, [r7, #20]
 8003b54:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	693a      	ldr	r2, [r7, #16]
 8003b5c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	68fa      	ldr	r2, [r7, #12]
 8003b64:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2201      	movs	r2, #1
 8003b6a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2201      	movs	r2, #1
 8003b72:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2201      	movs	r2, #1
 8003b7a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2201      	movs	r2, #1
 8003b82:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2201      	movs	r2, #1
 8003b8a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2201      	movs	r2, #1
 8003b92:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003b96:	2300      	movs	r3, #0
}
 8003b98:	4618      	mov	r0, r3
 8003b9a:	3718      	adds	r7, #24
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	bd80      	pop	{r7, pc}

08003ba0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b086      	sub	sp, #24
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	60f8      	str	r0, [r7, #12]
 8003ba8:	60b9      	str	r1, [r7, #8]
 8003baa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003bac:	2300      	movs	r3, #0
 8003bae:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003bb6:	2b01      	cmp	r3, #1
 8003bb8:	d101      	bne.n	8003bbe <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003bba:	2302      	movs	r3, #2
 8003bbc:	e0ff      	b.n	8003dbe <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	2201      	movs	r2, #1
 8003bc2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2b14      	cmp	r3, #20
 8003bca:	f200 80f0 	bhi.w	8003dae <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003bce:	a201      	add	r2, pc, #4	@ (adr r2, 8003bd4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003bd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bd4:	08003c29 	.word	0x08003c29
 8003bd8:	08003daf 	.word	0x08003daf
 8003bdc:	08003daf 	.word	0x08003daf
 8003be0:	08003daf 	.word	0x08003daf
 8003be4:	08003c69 	.word	0x08003c69
 8003be8:	08003daf 	.word	0x08003daf
 8003bec:	08003daf 	.word	0x08003daf
 8003bf0:	08003daf 	.word	0x08003daf
 8003bf4:	08003cab 	.word	0x08003cab
 8003bf8:	08003daf 	.word	0x08003daf
 8003bfc:	08003daf 	.word	0x08003daf
 8003c00:	08003daf 	.word	0x08003daf
 8003c04:	08003ceb 	.word	0x08003ceb
 8003c08:	08003daf 	.word	0x08003daf
 8003c0c:	08003daf 	.word	0x08003daf
 8003c10:	08003daf 	.word	0x08003daf
 8003c14:	08003d2d 	.word	0x08003d2d
 8003c18:	08003daf 	.word	0x08003daf
 8003c1c:	08003daf 	.word	0x08003daf
 8003c20:	08003daf 	.word	0x08003daf
 8003c24:	08003d6d 	.word	0x08003d6d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	68b9      	ldr	r1, [r7, #8]
 8003c2e:	4618      	mov	r0, r3
 8003c30:	f000 fa60 	bl	80040f4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	699a      	ldr	r2, [r3, #24]
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f042 0208 	orr.w	r2, r2, #8
 8003c42:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	699a      	ldr	r2, [r3, #24]
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f022 0204 	bic.w	r2, r2, #4
 8003c52:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	6999      	ldr	r1, [r3, #24]
 8003c5a:	68bb      	ldr	r3, [r7, #8]
 8003c5c:	691a      	ldr	r2, [r3, #16]
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	430a      	orrs	r2, r1
 8003c64:	619a      	str	r2, [r3, #24]
      break;
 8003c66:	e0a5      	b.n	8003db4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	68b9      	ldr	r1, [r7, #8]
 8003c6e:	4618      	mov	r0, r3
 8003c70:	f000 fad0 	bl	8004214 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	699a      	ldr	r2, [r3, #24]
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003c82:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	699a      	ldr	r2, [r3, #24]
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c92:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	6999      	ldr	r1, [r3, #24]
 8003c9a:	68bb      	ldr	r3, [r7, #8]
 8003c9c:	691b      	ldr	r3, [r3, #16]
 8003c9e:	021a      	lsls	r2, r3, #8
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	430a      	orrs	r2, r1
 8003ca6:	619a      	str	r2, [r3, #24]
      break;
 8003ca8:	e084      	b.n	8003db4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	68b9      	ldr	r1, [r7, #8]
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	f000 fb39 	bl	8004328 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	69da      	ldr	r2, [r3, #28]
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f042 0208 	orr.w	r2, r2, #8
 8003cc4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	69da      	ldr	r2, [r3, #28]
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f022 0204 	bic.w	r2, r2, #4
 8003cd4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	69d9      	ldr	r1, [r3, #28]
 8003cdc:	68bb      	ldr	r3, [r7, #8]
 8003cde:	691a      	ldr	r2, [r3, #16]
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	430a      	orrs	r2, r1
 8003ce6:	61da      	str	r2, [r3, #28]
      break;
 8003ce8:	e064      	b.n	8003db4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	68b9      	ldr	r1, [r7, #8]
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	f000 fba1 	bl	8004438 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	69da      	ldr	r2, [r3, #28]
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003d04:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	69da      	ldr	r2, [r3, #28]
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d14:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	69d9      	ldr	r1, [r3, #28]
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	691b      	ldr	r3, [r3, #16]
 8003d20:	021a      	lsls	r2, r3, #8
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	430a      	orrs	r2, r1
 8003d28:	61da      	str	r2, [r3, #28]
      break;
 8003d2a:	e043      	b.n	8003db4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	68b9      	ldr	r1, [r7, #8]
 8003d32:	4618      	mov	r0, r3
 8003d34:	f000 fc0a 	bl	800454c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f042 0208 	orr.w	r2, r2, #8
 8003d46:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f022 0204 	bic.w	r2, r2, #4
 8003d56:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8003d5e:	68bb      	ldr	r3, [r7, #8]
 8003d60:	691a      	ldr	r2, [r3, #16]
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	430a      	orrs	r2, r1
 8003d68:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8003d6a:	e023      	b.n	8003db4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	68b9      	ldr	r1, [r7, #8]
 8003d72:	4618      	mov	r0, r3
 8003d74:	f000 fc4e 	bl	8004614 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003d86:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d96:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8003d9e:	68bb      	ldr	r3, [r7, #8]
 8003da0:	691b      	ldr	r3, [r3, #16]
 8003da2:	021a      	lsls	r2, r3, #8
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	430a      	orrs	r2, r1
 8003daa:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8003dac:	e002      	b.n	8003db4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8003dae:	2301      	movs	r3, #1
 8003db0:	75fb      	strb	r3, [r7, #23]
      break;
 8003db2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	2200      	movs	r2, #0
 8003db8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003dbc:	7dfb      	ldrb	r3, [r7, #23]
}
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	3718      	adds	r7, #24
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}
 8003dc6:	bf00      	nop

08003dc8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b084      	sub	sp, #16
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
 8003dd0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003ddc:	2b01      	cmp	r3, #1
 8003dde:	d101      	bne.n	8003de4 <HAL_TIM_ConfigClockSource+0x1c>
 8003de0:	2302      	movs	r3, #2
 8003de2:	e0de      	b.n	8003fa2 <HAL_TIM_ConfigClockSource+0x1da>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2201      	movs	r2, #1
 8003de8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2202      	movs	r2, #2
 8003df0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	689b      	ldr	r3, [r3, #8]
 8003dfa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8003e02:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003e06:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003e0e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	68ba      	ldr	r2, [r7, #8]
 8003e16:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a63      	ldr	r2, [pc, #396]	@ (8003fac <HAL_TIM_ConfigClockSource+0x1e4>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	f000 80a9 	beq.w	8003f76 <HAL_TIM_ConfigClockSource+0x1ae>
 8003e24:	4a61      	ldr	r2, [pc, #388]	@ (8003fac <HAL_TIM_ConfigClockSource+0x1e4>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	f200 80ae 	bhi.w	8003f88 <HAL_TIM_ConfigClockSource+0x1c0>
 8003e2c:	4a60      	ldr	r2, [pc, #384]	@ (8003fb0 <HAL_TIM_ConfigClockSource+0x1e8>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	f000 80a1 	beq.w	8003f76 <HAL_TIM_ConfigClockSource+0x1ae>
 8003e34:	4a5e      	ldr	r2, [pc, #376]	@ (8003fb0 <HAL_TIM_ConfigClockSource+0x1e8>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	f200 80a6 	bhi.w	8003f88 <HAL_TIM_ConfigClockSource+0x1c0>
 8003e3c:	4a5d      	ldr	r2, [pc, #372]	@ (8003fb4 <HAL_TIM_ConfigClockSource+0x1ec>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	f000 8099 	beq.w	8003f76 <HAL_TIM_ConfigClockSource+0x1ae>
 8003e44:	4a5b      	ldr	r2, [pc, #364]	@ (8003fb4 <HAL_TIM_ConfigClockSource+0x1ec>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	f200 809e 	bhi.w	8003f88 <HAL_TIM_ConfigClockSource+0x1c0>
 8003e4c:	4a5a      	ldr	r2, [pc, #360]	@ (8003fb8 <HAL_TIM_ConfigClockSource+0x1f0>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	f000 8091 	beq.w	8003f76 <HAL_TIM_ConfigClockSource+0x1ae>
 8003e54:	4a58      	ldr	r2, [pc, #352]	@ (8003fb8 <HAL_TIM_ConfigClockSource+0x1f0>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	f200 8096 	bhi.w	8003f88 <HAL_TIM_ConfigClockSource+0x1c0>
 8003e5c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8003e60:	f000 8089 	beq.w	8003f76 <HAL_TIM_ConfigClockSource+0x1ae>
 8003e64:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8003e68:	f200 808e 	bhi.w	8003f88 <HAL_TIM_ConfigClockSource+0x1c0>
 8003e6c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003e70:	d03e      	beq.n	8003ef0 <HAL_TIM_ConfigClockSource+0x128>
 8003e72:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003e76:	f200 8087 	bhi.w	8003f88 <HAL_TIM_ConfigClockSource+0x1c0>
 8003e7a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e7e:	f000 8086 	beq.w	8003f8e <HAL_TIM_ConfigClockSource+0x1c6>
 8003e82:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e86:	d87f      	bhi.n	8003f88 <HAL_TIM_ConfigClockSource+0x1c0>
 8003e88:	2b70      	cmp	r3, #112	@ 0x70
 8003e8a:	d01a      	beq.n	8003ec2 <HAL_TIM_ConfigClockSource+0xfa>
 8003e8c:	2b70      	cmp	r3, #112	@ 0x70
 8003e8e:	d87b      	bhi.n	8003f88 <HAL_TIM_ConfigClockSource+0x1c0>
 8003e90:	2b60      	cmp	r3, #96	@ 0x60
 8003e92:	d050      	beq.n	8003f36 <HAL_TIM_ConfigClockSource+0x16e>
 8003e94:	2b60      	cmp	r3, #96	@ 0x60
 8003e96:	d877      	bhi.n	8003f88 <HAL_TIM_ConfigClockSource+0x1c0>
 8003e98:	2b50      	cmp	r3, #80	@ 0x50
 8003e9a:	d03c      	beq.n	8003f16 <HAL_TIM_ConfigClockSource+0x14e>
 8003e9c:	2b50      	cmp	r3, #80	@ 0x50
 8003e9e:	d873      	bhi.n	8003f88 <HAL_TIM_ConfigClockSource+0x1c0>
 8003ea0:	2b40      	cmp	r3, #64	@ 0x40
 8003ea2:	d058      	beq.n	8003f56 <HAL_TIM_ConfigClockSource+0x18e>
 8003ea4:	2b40      	cmp	r3, #64	@ 0x40
 8003ea6:	d86f      	bhi.n	8003f88 <HAL_TIM_ConfigClockSource+0x1c0>
 8003ea8:	2b30      	cmp	r3, #48	@ 0x30
 8003eaa:	d064      	beq.n	8003f76 <HAL_TIM_ConfigClockSource+0x1ae>
 8003eac:	2b30      	cmp	r3, #48	@ 0x30
 8003eae:	d86b      	bhi.n	8003f88 <HAL_TIM_ConfigClockSource+0x1c0>
 8003eb0:	2b20      	cmp	r3, #32
 8003eb2:	d060      	beq.n	8003f76 <HAL_TIM_ConfigClockSource+0x1ae>
 8003eb4:	2b20      	cmp	r3, #32
 8003eb6:	d867      	bhi.n	8003f88 <HAL_TIM_ConfigClockSource+0x1c0>
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d05c      	beq.n	8003f76 <HAL_TIM_ConfigClockSource+0x1ae>
 8003ebc:	2b10      	cmp	r3, #16
 8003ebe:	d05a      	beq.n	8003f76 <HAL_TIM_ConfigClockSource+0x1ae>
 8003ec0:	e062      	b.n	8003f88 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003ed2:	f000 fce9 	bl	80048a8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	689b      	ldr	r3, [r3, #8]
 8003edc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003ede:	68bb      	ldr	r3, [r7, #8]
 8003ee0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003ee4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	68ba      	ldr	r2, [r7, #8]
 8003eec:	609a      	str	r2, [r3, #8]
      break;
 8003eee:	e04f      	b.n	8003f90 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003f00:	f000 fcd2 	bl	80048a8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	689a      	ldr	r2, [r3, #8]
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003f12:	609a      	str	r2, [r3, #8]
      break;
 8003f14:	e03c      	b.n	8003f90 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f22:	461a      	mov	r2, r3
 8003f24:	f000 fc44 	bl	80047b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	2150      	movs	r1, #80	@ 0x50
 8003f2e:	4618      	mov	r0, r3
 8003f30:	f000 fc9d 	bl	800486e <TIM_ITRx_SetConfig>
      break;
 8003f34:	e02c      	b.n	8003f90 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003f42:	461a      	mov	r2, r3
 8003f44:	f000 fc63 	bl	800480e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	2160      	movs	r1, #96	@ 0x60
 8003f4e:	4618      	mov	r0, r3
 8003f50:	f000 fc8d 	bl	800486e <TIM_ITRx_SetConfig>
      break;
 8003f54:	e01c      	b.n	8003f90 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f62:	461a      	mov	r2, r3
 8003f64:	f000 fc24 	bl	80047b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	2140      	movs	r1, #64	@ 0x40
 8003f6e:	4618      	mov	r0, r3
 8003f70:	f000 fc7d 	bl	800486e <TIM_ITRx_SetConfig>
      break;
 8003f74:	e00c      	b.n	8003f90 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681a      	ldr	r2, [r3, #0]
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4619      	mov	r1, r3
 8003f80:	4610      	mov	r0, r2
 8003f82:	f000 fc74 	bl	800486e <TIM_ITRx_SetConfig>
      break;
 8003f86:	e003      	b.n	8003f90 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8003f88:	2301      	movs	r3, #1
 8003f8a:	73fb      	strb	r3, [r7, #15]
      break;
 8003f8c:	e000      	b.n	8003f90 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8003f8e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2201      	movs	r2, #1
 8003f94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003fa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	3710      	adds	r7, #16
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	bd80      	pop	{r7, pc}
 8003faa:	bf00      	nop
 8003fac:	00100070 	.word	0x00100070
 8003fb0:	00100040 	.word	0x00100040
 8003fb4:	00100030 	.word	0x00100030
 8003fb8:	00100020 	.word	0x00100020

08003fbc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	b085      	sub	sp, #20
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
 8003fc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	4a42      	ldr	r2, [pc, #264]	@ (80040d8 <TIM_Base_SetConfig+0x11c>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d00f      	beq.n	8003ff4 <TIM_Base_SetConfig+0x38>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003fda:	d00b      	beq.n	8003ff4 <TIM_Base_SetConfig+0x38>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	4a3f      	ldr	r2, [pc, #252]	@ (80040dc <TIM_Base_SetConfig+0x120>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d007      	beq.n	8003ff4 <TIM_Base_SetConfig+0x38>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	4a3e      	ldr	r2, [pc, #248]	@ (80040e0 <TIM_Base_SetConfig+0x124>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d003      	beq.n	8003ff4 <TIM_Base_SetConfig+0x38>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	4a3d      	ldr	r2, [pc, #244]	@ (80040e4 <TIM_Base_SetConfig+0x128>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d108      	bne.n	8004006 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ffa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	68fa      	ldr	r2, [r7, #12]
 8004002:	4313      	orrs	r3, r2
 8004004:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	4a33      	ldr	r2, [pc, #204]	@ (80040d8 <TIM_Base_SetConfig+0x11c>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d01b      	beq.n	8004046 <TIM_Base_SetConfig+0x8a>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004014:	d017      	beq.n	8004046 <TIM_Base_SetConfig+0x8a>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	4a30      	ldr	r2, [pc, #192]	@ (80040dc <TIM_Base_SetConfig+0x120>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d013      	beq.n	8004046 <TIM_Base_SetConfig+0x8a>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	4a2f      	ldr	r2, [pc, #188]	@ (80040e0 <TIM_Base_SetConfig+0x124>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d00f      	beq.n	8004046 <TIM_Base_SetConfig+0x8a>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	4a2e      	ldr	r2, [pc, #184]	@ (80040e4 <TIM_Base_SetConfig+0x128>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d00b      	beq.n	8004046 <TIM_Base_SetConfig+0x8a>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	4a2d      	ldr	r2, [pc, #180]	@ (80040e8 <TIM_Base_SetConfig+0x12c>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d007      	beq.n	8004046 <TIM_Base_SetConfig+0x8a>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	4a2c      	ldr	r2, [pc, #176]	@ (80040ec <TIM_Base_SetConfig+0x130>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d003      	beq.n	8004046 <TIM_Base_SetConfig+0x8a>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	4a2b      	ldr	r2, [pc, #172]	@ (80040f0 <TIM_Base_SetConfig+0x134>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d108      	bne.n	8004058 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800404c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	68db      	ldr	r3, [r3, #12]
 8004052:	68fa      	ldr	r2, [r7, #12]
 8004054:	4313      	orrs	r3, r2
 8004056:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	695b      	ldr	r3, [r3, #20]
 8004062:	4313      	orrs	r3, r2
 8004064:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	68fa      	ldr	r2, [r7, #12]
 800406a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	689a      	ldr	r2, [r3, #8]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	681a      	ldr	r2, [r3, #0]
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	4a16      	ldr	r2, [pc, #88]	@ (80040d8 <TIM_Base_SetConfig+0x11c>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d00f      	beq.n	80040a4 <TIM_Base_SetConfig+0xe8>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	4a17      	ldr	r2, [pc, #92]	@ (80040e4 <TIM_Base_SetConfig+0x128>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d00b      	beq.n	80040a4 <TIM_Base_SetConfig+0xe8>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	4a16      	ldr	r2, [pc, #88]	@ (80040e8 <TIM_Base_SetConfig+0x12c>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d007      	beq.n	80040a4 <TIM_Base_SetConfig+0xe8>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	4a15      	ldr	r2, [pc, #84]	@ (80040ec <TIM_Base_SetConfig+0x130>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d003      	beq.n	80040a4 <TIM_Base_SetConfig+0xe8>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	4a14      	ldr	r2, [pc, #80]	@ (80040f0 <TIM_Base_SetConfig+0x134>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d103      	bne.n	80040ac <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	691a      	ldr	r2, [r3, #16]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2201      	movs	r2, #1
 80040b0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	691b      	ldr	r3, [r3, #16]
 80040b6:	f003 0301 	and.w	r3, r3, #1
 80040ba:	2b01      	cmp	r3, #1
 80040bc:	d105      	bne.n	80040ca <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	691b      	ldr	r3, [r3, #16]
 80040c2:	f023 0201 	bic.w	r2, r3, #1
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	611a      	str	r2, [r3, #16]
  }
}
 80040ca:	bf00      	nop
 80040cc:	3714      	adds	r7, #20
 80040ce:	46bd      	mov	sp, r7
 80040d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d4:	4770      	bx	lr
 80040d6:	bf00      	nop
 80040d8:	40012c00 	.word	0x40012c00
 80040dc:	40000400 	.word	0x40000400
 80040e0:	40000800 	.word	0x40000800
 80040e4:	40013400 	.word	0x40013400
 80040e8:	40014000 	.word	0x40014000
 80040ec:	40014400 	.word	0x40014400
 80040f0:	40014800 	.word	0x40014800

080040f4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80040f4:	b480      	push	{r7}
 80040f6:	b087      	sub	sp, #28
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
 80040fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6a1b      	ldr	r3, [r3, #32]
 8004102:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6a1b      	ldr	r3, [r3, #32]
 8004108:	f023 0201 	bic.w	r2, r3, #1
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	685b      	ldr	r3, [r3, #4]
 8004114:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	699b      	ldr	r3, [r3, #24]
 800411a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004122:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004126:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	f023 0303 	bic.w	r3, r3, #3
 800412e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	68fa      	ldr	r2, [r7, #12]
 8004136:	4313      	orrs	r3, r2
 8004138:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800413a:	697b      	ldr	r3, [r7, #20]
 800413c:	f023 0302 	bic.w	r3, r3, #2
 8004140:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	689b      	ldr	r3, [r3, #8]
 8004146:	697a      	ldr	r2, [r7, #20]
 8004148:	4313      	orrs	r3, r2
 800414a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	4a2c      	ldr	r2, [pc, #176]	@ (8004200 <TIM_OC1_SetConfig+0x10c>)
 8004150:	4293      	cmp	r3, r2
 8004152:	d00f      	beq.n	8004174 <TIM_OC1_SetConfig+0x80>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	4a2b      	ldr	r2, [pc, #172]	@ (8004204 <TIM_OC1_SetConfig+0x110>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d00b      	beq.n	8004174 <TIM_OC1_SetConfig+0x80>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	4a2a      	ldr	r2, [pc, #168]	@ (8004208 <TIM_OC1_SetConfig+0x114>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d007      	beq.n	8004174 <TIM_OC1_SetConfig+0x80>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	4a29      	ldr	r2, [pc, #164]	@ (800420c <TIM_OC1_SetConfig+0x118>)
 8004168:	4293      	cmp	r3, r2
 800416a:	d003      	beq.n	8004174 <TIM_OC1_SetConfig+0x80>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	4a28      	ldr	r2, [pc, #160]	@ (8004210 <TIM_OC1_SetConfig+0x11c>)
 8004170:	4293      	cmp	r3, r2
 8004172:	d10c      	bne.n	800418e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004174:	697b      	ldr	r3, [r7, #20]
 8004176:	f023 0308 	bic.w	r3, r3, #8
 800417a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	68db      	ldr	r3, [r3, #12]
 8004180:	697a      	ldr	r2, [r7, #20]
 8004182:	4313      	orrs	r3, r2
 8004184:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004186:	697b      	ldr	r3, [r7, #20]
 8004188:	f023 0304 	bic.w	r3, r3, #4
 800418c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	4a1b      	ldr	r2, [pc, #108]	@ (8004200 <TIM_OC1_SetConfig+0x10c>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d00f      	beq.n	80041b6 <TIM_OC1_SetConfig+0xc2>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	4a1a      	ldr	r2, [pc, #104]	@ (8004204 <TIM_OC1_SetConfig+0x110>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d00b      	beq.n	80041b6 <TIM_OC1_SetConfig+0xc2>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	4a19      	ldr	r2, [pc, #100]	@ (8004208 <TIM_OC1_SetConfig+0x114>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d007      	beq.n	80041b6 <TIM_OC1_SetConfig+0xc2>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	4a18      	ldr	r2, [pc, #96]	@ (800420c <TIM_OC1_SetConfig+0x118>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d003      	beq.n	80041b6 <TIM_OC1_SetConfig+0xc2>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	4a17      	ldr	r2, [pc, #92]	@ (8004210 <TIM_OC1_SetConfig+0x11c>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d111      	bne.n	80041da <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80041b6:	693b      	ldr	r3, [r7, #16]
 80041b8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80041bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80041be:	693b      	ldr	r3, [r7, #16]
 80041c0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80041c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	695b      	ldr	r3, [r3, #20]
 80041ca:	693a      	ldr	r2, [r7, #16]
 80041cc:	4313      	orrs	r3, r2
 80041ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	699b      	ldr	r3, [r3, #24]
 80041d4:	693a      	ldr	r2, [r7, #16]
 80041d6:	4313      	orrs	r3, r2
 80041d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	693a      	ldr	r2, [r7, #16]
 80041de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	68fa      	ldr	r2, [r7, #12]
 80041e4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	685a      	ldr	r2, [r3, #4]
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	697a      	ldr	r2, [r7, #20]
 80041f2:	621a      	str	r2, [r3, #32]
}
 80041f4:	bf00      	nop
 80041f6:	371c      	adds	r7, #28
 80041f8:	46bd      	mov	sp, r7
 80041fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fe:	4770      	bx	lr
 8004200:	40012c00 	.word	0x40012c00
 8004204:	40013400 	.word	0x40013400
 8004208:	40014000 	.word	0x40014000
 800420c:	40014400 	.word	0x40014400
 8004210:	40014800 	.word	0x40014800

08004214 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004214:	b480      	push	{r7}
 8004216:	b087      	sub	sp, #28
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
 800421c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6a1b      	ldr	r3, [r3, #32]
 8004222:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6a1b      	ldr	r3, [r3, #32]
 8004228:	f023 0210 	bic.w	r2, r3, #16
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	699b      	ldr	r3, [r3, #24]
 800423a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004242:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004246:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800424e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	021b      	lsls	r3, r3, #8
 8004256:	68fa      	ldr	r2, [r7, #12]
 8004258:	4313      	orrs	r3, r2
 800425a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800425c:	697b      	ldr	r3, [r7, #20]
 800425e:	f023 0320 	bic.w	r3, r3, #32
 8004262:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	689b      	ldr	r3, [r3, #8]
 8004268:	011b      	lsls	r3, r3, #4
 800426a:	697a      	ldr	r2, [r7, #20]
 800426c:	4313      	orrs	r3, r2
 800426e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	4a28      	ldr	r2, [pc, #160]	@ (8004314 <TIM_OC2_SetConfig+0x100>)
 8004274:	4293      	cmp	r3, r2
 8004276:	d003      	beq.n	8004280 <TIM_OC2_SetConfig+0x6c>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	4a27      	ldr	r2, [pc, #156]	@ (8004318 <TIM_OC2_SetConfig+0x104>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d10d      	bne.n	800429c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004280:	697b      	ldr	r3, [r7, #20]
 8004282:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004286:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	68db      	ldr	r3, [r3, #12]
 800428c:	011b      	lsls	r3, r3, #4
 800428e:	697a      	ldr	r2, [r7, #20]
 8004290:	4313      	orrs	r3, r2
 8004292:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004294:	697b      	ldr	r3, [r7, #20]
 8004296:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800429a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	4a1d      	ldr	r2, [pc, #116]	@ (8004314 <TIM_OC2_SetConfig+0x100>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d00f      	beq.n	80042c4 <TIM_OC2_SetConfig+0xb0>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	4a1c      	ldr	r2, [pc, #112]	@ (8004318 <TIM_OC2_SetConfig+0x104>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d00b      	beq.n	80042c4 <TIM_OC2_SetConfig+0xb0>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	4a1b      	ldr	r2, [pc, #108]	@ (800431c <TIM_OC2_SetConfig+0x108>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d007      	beq.n	80042c4 <TIM_OC2_SetConfig+0xb0>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	4a1a      	ldr	r2, [pc, #104]	@ (8004320 <TIM_OC2_SetConfig+0x10c>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d003      	beq.n	80042c4 <TIM_OC2_SetConfig+0xb0>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	4a19      	ldr	r2, [pc, #100]	@ (8004324 <TIM_OC2_SetConfig+0x110>)
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d113      	bne.n	80042ec <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80042c4:	693b      	ldr	r3, [r7, #16]
 80042c6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80042ca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80042cc:	693b      	ldr	r3, [r7, #16]
 80042ce:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80042d2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	695b      	ldr	r3, [r3, #20]
 80042d8:	009b      	lsls	r3, r3, #2
 80042da:	693a      	ldr	r2, [r7, #16]
 80042dc:	4313      	orrs	r3, r2
 80042de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	699b      	ldr	r3, [r3, #24]
 80042e4:	009b      	lsls	r3, r3, #2
 80042e6:	693a      	ldr	r2, [r7, #16]
 80042e8:	4313      	orrs	r3, r2
 80042ea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	693a      	ldr	r2, [r7, #16]
 80042f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	68fa      	ldr	r2, [r7, #12]
 80042f6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	685a      	ldr	r2, [r3, #4]
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	697a      	ldr	r2, [r7, #20]
 8004304:	621a      	str	r2, [r3, #32]
}
 8004306:	bf00      	nop
 8004308:	371c      	adds	r7, #28
 800430a:	46bd      	mov	sp, r7
 800430c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004310:	4770      	bx	lr
 8004312:	bf00      	nop
 8004314:	40012c00 	.word	0x40012c00
 8004318:	40013400 	.word	0x40013400
 800431c:	40014000 	.word	0x40014000
 8004320:	40014400 	.word	0x40014400
 8004324:	40014800 	.word	0x40014800

08004328 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004328:	b480      	push	{r7}
 800432a:	b087      	sub	sp, #28
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
 8004330:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6a1b      	ldr	r3, [r3, #32]
 8004336:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6a1b      	ldr	r3, [r3, #32]
 800433c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	685b      	ldr	r3, [r3, #4]
 8004348:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	69db      	ldr	r3, [r3, #28]
 800434e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004356:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800435a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	f023 0303 	bic.w	r3, r3, #3
 8004362:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	68fa      	ldr	r2, [r7, #12]
 800436a:	4313      	orrs	r3, r2
 800436c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800436e:	697b      	ldr	r3, [r7, #20]
 8004370:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004374:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	689b      	ldr	r3, [r3, #8]
 800437a:	021b      	lsls	r3, r3, #8
 800437c:	697a      	ldr	r2, [r7, #20]
 800437e:	4313      	orrs	r3, r2
 8004380:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	4a27      	ldr	r2, [pc, #156]	@ (8004424 <TIM_OC3_SetConfig+0xfc>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d003      	beq.n	8004392 <TIM_OC3_SetConfig+0x6a>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	4a26      	ldr	r2, [pc, #152]	@ (8004428 <TIM_OC3_SetConfig+0x100>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d10d      	bne.n	80043ae <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004392:	697b      	ldr	r3, [r7, #20]
 8004394:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004398:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	68db      	ldr	r3, [r3, #12]
 800439e:	021b      	lsls	r3, r3, #8
 80043a0:	697a      	ldr	r2, [r7, #20]
 80043a2:	4313      	orrs	r3, r2
 80043a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80043a6:	697b      	ldr	r3, [r7, #20]
 80043a8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80043ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	4a1c      	ldr	r2, [pc, #112]	@ (8004424 <TIM_OC3_SetConfig+0xfc>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d00f      	beq.n	80043d6 <TIM_OC3_SetConfig+0xae>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	4a1b      	ldr	r2, [pc, #108]	@ (8004428 <TIM_OC3_SetConfig+0x100>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d00b      	beq.n	80043d6 <TIM_OC3_SetConfig+0xae>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	4a1a      	ldr	r2, [pc, #104]	@ (800442c <TIM_OC3_SetConfig+0x104>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d007      	beq.n	80043d6 <TIM_OC3_SetConfig+0xae>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	4a19      	ldr	r2, [pc, #100]	@ (8004430 <TIM_OC3_SetConfig+0x108>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d003      	beq.n	80043d6 <TIM_OC3_SetConfig+0xae>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	4a18      	ldr	r2, [pc, #96]	@ (8004434 <TIM_OC3_SetConfig+0x10c>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d113      	bne.n	80043fe <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80043d6:	693b      	ldr	r3, [r7, #16]
 80043d8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80043dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80043de:	693b      	ldr	r3, [r7, #16]
 80043e0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80043e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	695b      	ldr	r3, [r3, #20]
 80043ea:	011b      	lsls	r3, r3, #4
 80043ec:	693a      	ldr	r2, [r7, #16]
 80043ee:	4313      	orrs	r3, r2
 80043f0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	699b      	ldr	r3, [r3, #24]
 80043f6:	011b      	lsls	r3, r3, #4
 80043f8:	693a      	ldr	r2, [r7, #16]
 80043fa:	4313      	orrs	r3, r2
 80043fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	693a      	ldr	r2, [r7, #16]
 8004402:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	68fa      	ldr	r2, [r7, #12]
 8004408:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	685a      	ldr	r2, [r3, #4]
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	697a      	ldr	r2, [r7, #20]
 8004416:	621a      	str	r2, [r3, #32]
}
 8004418:	bf00      	nop
 800441a:	371c      	adds	r7, #28
 800441c:	46bd      	mov	sp, r7
 800441e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004422:	4770      	bx	lr
 8004424:	40012c00 	.word	0x40012c00
 8004428:	40013400 	.word	0x40013400
 800442c:	40014000 	.word	0x40014000
 8004430:	40014400 	.word	0x40014400
 8004434:	40014800 	.word	0x40014800

08004438 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004438:	b480      	push	{r7}
 800443a:	b087      	sub	sp, #28
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
 8004440:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6a1b      	ldr	r3, [r3, #32]
 8004446:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6a1b      	ldr	r3, [r3, #32]
 800444c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	69db      	ldr	r3, [r3, #28]
 800445e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004466:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800446a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004472:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	021b      	lsls	r3, r3, #8
 800447a:	68fa      	ldr	r2, [r7, #12]
 800447c:	4313      	orrs	r3, r2
 800447e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004480:	697b      	ldr	r3, [r7, #20]
 8004482:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004486:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	689b      	ldr	r3, [r3, #8]
 800448c:	031b      	lsls	r3, r3, #12
 800448e:	697a      	ldr	r2, [r7, #20]
 8004490:	4313      	orrs	r3, r2
 8004492:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	4a28      	ldr	r2, [pc, #160]	@ (8004538 <TIM_OC4_SetConfig+0x100>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d003      	beq.n	80044a4 <TIM_OC4_SetConfig+0x6c>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	4a27      	ldr	r2, [pc, #156]	@ (800453c <TIM_OC4_SetConfig+0x104>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d10d      	bne.n	80044c0 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80044a4:	697b      	ldr	r3, [r7, #20]
 80044a6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80044aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	68db      	ldr	r3, [r3, #12]
 80044b0:	031b      	lsls	r3, r3, #12
 80044b2:	697a      	ldr	r2, [r7, #20]
 80044b4:	4313      	orrs	r3, r2
 80044b6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80044b8:	697b      	ldr	r3, [r7, #20]
 80044ba:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80044be:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	4a1d      	ldr	r2, [pc, #116]	@ (8004538 <TIM_OC4_SetConfig+0x100>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d00f      	beq.n	80044e8 <TIM_OC4_SetConfig+0xb0>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	4a1c      	ldr	r2, [pc, #112]	@ (800453c <TIM_OC4_SetConfig+0x104>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d00b      	beq.n	80044e8 <TIM_OC4_SetConfig+0xb0>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	4a1b      	ldr	r2, [pc, #108]	@ (8004540 <TIM_OC4_SetConfig+0x108>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d007      	beq.n	80044e8 <TIM_OC4_SetConfig+0xb0>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	4a1a      	ldr	r2, [pc, #104]	@ (8004544 <TIM_OC4_SetConfig+0x10c>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	d003      	beq.n	80044e8 <TIM_OC4_SetConfig+0xb0>
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	4a19      	ldr	r2, [pc, #100]	@ (8004548 <TIM_OC4_SetConfig+0x110>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d113      	bne.n	8004510 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80044e8:	693b      	ldr	r3, [r7, #16]
 80044ea:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80044ee:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80044f0:	693b      	ldr	r3, [r7, #16]
 80044f2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80044f6:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	695b      	ldr	r3, [r3, #20]
 80044fc:	019b      	lsls	r3, r3, #6
 80044fe:	693a      	ldr	r2, [r7, #16]
 8004500:	4313      	orrs	r3, r2
 8004502:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	699b      	ldr	r3, [r3, #24]
 8004508:	019b      	lsls	r3, r3, #6
 800450a:	693a      	ldr	r2, [r7, #16]
 800450c:	4313      	orrs	r3, r2
 800450e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	693a      	ldr	r2, [r7, #16]
 8004514:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	68fa      	ldr	r2, [r7, #12]
 800451a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	685a      	ldr	r2, [r3, #4]
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	697a      	ldr	r2, [r7, #20]
 8004528:	621a      	str	r2, [r3, #32]
}
 800452a:	bf00      	nop
 800452c:	371c      	adds	r7, #28
 800452e:	46bd      	mov	sp, r7
 8004530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004534:	4770      	bx	lr
 8004536:	bf00      	nop
 8004538:	40012c00 	.word	0x40012c00
 800453c:	40013400 	.word	0x40013400
 8004540:	40014000 	.word	0x40014000
 8004544:	40014400 	.word	0x40014400
 8004548:	40014800 	.word	0x40014800

0800454c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800454c:	b480      	push	{r7}
 800454e:	b087      	sub	sp, #28
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
 8004554:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6a1b      	ldr	r3, [r3, #32]
 800455a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6a1b      	ldr	r3, [r3, #32]
 8004560:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	685b      	ldr	r3, [r3, #4]
 800456c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004572:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800457a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800457e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	68fa      	ldr	r2, [r7, #12]
 8004586:	4313      	orrs	r3, r2
 8004588:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800458a:	693b      	ldr	r3, [r7, #16]
 800458c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8004590:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	689b      	ldr	r3, [r3, #8]
 8004596:	041b      	lsls	r3, r3, #16
 8004598:	693a      	ldr	r2, [r7, #16]
 800459a:	4313      	orrs	r3, r2
 800459c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	4a17      	ldr	r2, [pc, #92]	@ (8004600 <TIM_OC5_SetConfig+0xb4>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d00f      	beq.n	80045c6 <TIM_OC5_SetConfig+0x7a>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	4a16      	ldr	r2, [pc, #88]	@ (8004604 <TIM_OC5_SetConfig+0xb8>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d00b      	beq.n	80045c6 <TIM_OC5_SetConfig+0x7a>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	4a15      	ldr	r2, [pc, #84]	@ (8004608 <TIM_OC5_SetConfig+0xbc>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d007      	beq.n	80045c6 <TIM_OC5_SetConfig+0x7a>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	4a14      	ldr	r2, [pc, #80]	@ (800460c <TIM_OC5_SetConfig+0xc0>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d003      	beq.n	80045c6 <TIM_OC5_SetConfig+0x7a>
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	4a13      	ldr	r2, [pc, #76]	@ (8004610 <TIM_OC5_SetConfig+0xc4>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d109      	bne.n	80045da <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80045c6:	697b      	ldr	r3, [r7, #20]
 80045c8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80045cc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	695b      	ldr	r3, [r3, #20]
 80045d2:	021b      	lsls	r3, r3, #8
 80045d4:	697a      	ldr	r2, [r7, #20]
 80045d6:	4313      	orrs	r3, r2
 80045d8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	697a      	ldr	r2, [r7, #20]
 80045de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	68fa      	ldr	r2, [r7, #12]
 80045e4:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	685a      	ldr	r2, [r3, #4]
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	693a      	ldr	r2, [r7, #16]
 80045f2:	621a      	str	r2, [r3, #32]
}
 80045f4:	bf00      	nop
 80045f6:	371c      	adds	r7, #28
 80045f8:	46bd      	mov	sp, r7
 80045fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fe:	4770      	bx	lr
 8004600:	40012c00 	.word	0x40012c00
 8004604:	40013400 	.word	0x40013400
 8004608:	40014000 	.word	0x40014000
 800460c:	40014400 	.word	0x40014400
 8004610:	40014800 	.word	0x40014800

08004614 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004614:	b480      	push	{r7}
 8004616:	b087      	sub	sp, #28
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
 800461c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6a1b      	ldr	r3, [r3, #32]
 8004622:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6a1b      	ldr	r3, [r3, #32]
 8004628:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	685b      	ldr	r3, [r3, #4]
 8004634:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800463a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004642:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004646:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	021b      	lsls	r3, r3, #8
 800464e:	68fa      	ldr	r2, [r7, #12]
 8004650:	4313      	orrs	r3, r2
 8004652:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004654:	693b      	ldr	r3, [r7, #16]
 8004656:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800465a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	689b      	ldr	r3, [r3, #8]
 8004660:	051b      	lsls	r3, r3, #20
 8004662:	693a      	ldr	r2, [r7, #16]
 8004664:	4313      	orrs	r3, r2
 8004666:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	4a18      	ldr	r2, [pc, #96]	@ (80046cc <TIM_OC6_SetConfig+0xb8>)
 800466c:	4293      	cmp	r3, r2
 800466e:	d00f      	beq.n	8004690 <TIM_OC6_SetConfig+0x7c>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	4a17      	ldr	r2, [pc, #92]	@ (80046d0 <TIM_OC6_SetConfig+0xbc>)
 8004674:	4293      	cmp	r3, r2
 8004676:	d00b      	beq.n	8004690 <TIM_OC6_SetConfig+0x7c>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	4a16      	ldr	r2, [pc, #88]	@ (80046d4 <TIM_OC6_SetConfig+0xc0>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d007      	beq.n	8004690 <TIM_OC6_SetConfig+0x7c>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	4a15      	ldr	r2, [pc, #84]	@ (80046d8 <TIM_OC6_SetConfig+0xc4>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d003      	beq.n	8004690 <TIM_OC6_SetConfig+0x7c>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	4a14      	ldr	r2, [pc, #80]	@ (80046dc <TIM_OC6_SetConfig+0xc8>)
 800468c:	4293      	cmp	r3, r2
 800468e:	d109      	bne.n	80046a4 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004690:	697b      	ldr	r3, [r7, #20]
 8004692:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004696:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	695b      	ldr	r3, [r3, #20]
 800469c:	029b      	lsls	r3, r3, #10
 800469e:	697a      	ldr	r2, [r7, #20]
 80046a0:	4313      	orrs	r3, r2
 80046a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	697a      	ldr	r2, [r7, #20]
 80046a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	68fa      	ldr	r2, [r7, #12]
 80046ae:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	685a      	ldr	r2, [r3, #4]
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	693a      	ldr	r2, [r7, #16]
 80046bc:	621a      	str	r2, [r3, #32]
}
 80046be:	bf00      	nop
 80046c0:	371c      	adds	r7, #28
 80046c2:	46bd      	mov	sp, r7
 80046c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c8:	4770      	bx	lr
 80046ca:	bf00      	nop
 80046cc:	40012c00 	.word	0x40012c00
 80046d0:	40013400 	.word	0x40013400
 80046d4:	40014000 	.word	0x40014000
 80046d8:	40014400 	.word	0x40014400
 80046dc:	40014800 	.word	0x40014800

080046e0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80046e0:	b480      	push	{r7}
 80046e2:	b087      	sub	sp, #28
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	60f8      	str	r0, [r7, #12]
 80046e8:	60b9      	str	r1, [r7, #8]
 80046ea:	607a      	str	r2, [r7, #4]
 80046ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	6a1b      	ldr	r3, [r3, #32]
 80046f2:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	6a1b      	ldr	r3, [r3, #32]
 80046f8:	f023 0201 	bic.w	r2, r3, #1
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	699b      	ldr	r3, [r3, #24]
 8004704:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	4a24      	ldr	r2, [pc, #144]	@ (800479c <TIM_TI1_SetConfig+0xbc>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d013      	beq.n	8004736 <TIM_TI1_SetConfig+0x56>
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004714:	d00f      	beq.n	8004736 <TIM_TI1_SetConfig+0x56>
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	4a21      	ldr	r2, [pc, #132]	@ (80047a0 <TIM_TI1_SetConfig+0xc0>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d00b      	beq.n	8004736 <TIM_TI1_SetConfig+0x56>
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	4a20      	ldr	r2, [pc, #128]	@ (80047a4 <TIM_TI1_SetConfig+0xc4>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d007      	beq.n	8004736 <TIM_TI1_SetConfig+0x56>
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	4a1f      	ldr	r2, [pc, #124]	@ (80047a8 <TIM_TI1_SetConfig+0xc8>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d003      	beq.n	8004736 <TIM_TI1_SetConfig+0x56>
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	4a1e      	ldr	r2, [pc, #120]	@ (80047ac <TIM_TI1_SetConfig+0xcc>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d101      	bne.n	800473a <TIM_TI1_SetConfig+0x5a>
 8004736:	2301      	movs	r3, #1
 8004738:	e000      	b.n	800473c <TIM_TI1_SetConfig+0x5c>
 800473a:	2300      	movs	r3, #0
 800473c:	2b00      	cmp	r3, #0
 800473e:	d008      	beq.n	8004752 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004740:	697b      	ldr	r3, [r7, #20]
 8004742:	f023 0303 	bic.w	r3, r3, #3
 8004746:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004748:	697a      	ldr	r2, [r7, #20]
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	4313      	orrs	r3, r2
 800474e:	617b      	str	r3, [r7, #20]
 8004750:	e003      	b.n	800475a <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004752:	697b      	ldr	r3, [r7, #20]
 8004754:	f043 0301 	orr.w	r3, r3, #1
 8004758:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800475a:	697b      	ldr	r3, [r7, #20]
 800475c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004760:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	011b      	lsls	r3, r3, #4
 8004766:	b2db      	uxtb	r3, r3
 8004768:	697a      	ldr	r2, [r7, #20]
 800476a:	4313      	orrs	r3, r2
 800476c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800476e:	693b      	ldr	r3, [r7, #16]
 8004770:	f023 030a 	bic.w	r3, r3, #10
 8004774:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004776:	68bb      	ldr	r3, [r7, #8]
 8004778:	f003 030a 	and.w	r3, r3, #10
 800477c:	693a      	ldr	r2, [r7, #16]
 800477e:	4313      	orrs	r3, r2
 8004780:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	697a      	ldr	r2, [r7, #20]
 8004786:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	693a      	ldr	r2, [r7, #16]
 800478c:	621a      	str	r2, [r3, #32]
}
 800478e:	bf00      	nop
 8004790:	371c      	adds	r7, #28
 8004792:	46bd      	mov	sp, r7
 8004794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004798:	4770      	bx	lr
 800479a:	bf00      	nop
 800479c:	40012c00 	.word	0x40012c00
 80047a0:	40000400 	.word	0x40000400
 80047a4:	40000800 	.word	0x40000800
 80047a8:	40013400 	.word	0x40013400
 80047ac:	40014000 	.word	0x40014000

080047b0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80047b0:	b480      	push	{r7}
 80047b2:	b087      	sub	sp, #28
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	60f8      	str	r0, [r7, #12]
 80047b8:	60b9      	str	r1, [r7, #8]
 80047ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	6a1b      	ldr	r3, [r3, #32]
 80047c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	6a1b      	ldr	r3, [r3, #32]
 80047c6:	f023 0201 	bic.w	r2, r3, #1
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	699b      	ldr	r3, [r3, #24]
 80047d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80047d4:	693b      	ldr	r3, [r7, #16]
 80047d6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80047da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	011b      	lsls	r3, r3, #4
 80047e0:	693a      	ldr	r2, [r7, #16]
 80047e2:	4313      	orrs	r3, r2
 80047e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80047e6:	697b      	ldr	r3, [r7, #20]
 80047e8:	f023 030a 	bic.w	r3, r3, #10
 80047ec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80047ee:	697a      	ldr	r2, [r7, #20]
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	4313      	orrs	r3, r2
 80047f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	693a      	ldr	r2, [r7, #16]
 80047fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	697a      	ldr	r2, [r7, #20]
 8004800:	621a      	str	r2, [r3, #32]
}
 8004802:	bf00      	nop
 8004804:	371c      	adds	r7, #28
 8004806:	46bd      	mov	sp, r7
 8004808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480c:	4770      	bx	lr

0800480e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800480e:	b480      	push	{r7}
 8004810:	b087      	sub	sp, #28
 8004812:	af00      	add	r7, sp, #0
 8004814:	60f8      	str	r0, [r7, #12]
 8004816:	60b9      	str	r1, [r7, #8]
 8004818:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	6a1b      	ldr	r3, [r3, #32]
 800481e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	6a1b      	ldr	r3, [r3, #32]
 8004824:	f023 0210 	bic.w	r2, r3, #16
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	699b      	ldr	r3, [r3, #24]
 8004830:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004832:	693b      	ldr	r3, [r7, #16]
 8004834:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004838:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	031b      	lsls	r3, r3, #12
 800483e:	693a      	ldr	r2, [r7, #16]
 8004840:	4313      	orrs	r3, r2
 8004842:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004844:	697b      	ldr	r3, [r7, #20]
 8004846:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800484a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800484c:	68bb      	ldr	r3, [r7, #8]
 800484e:	011b      	lsls	r3, r3, #4
 8004850:	697a      	ldr	r2, [r7, #20]
 8004852:	4313      	orrs	r3, r2
 8004854:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	693a      	ldr	r2, [r7, #16]
 800485a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	697a      	ldr	r2, [r7, #20]
 8004860:	621a      	str	r2, [r3, #32]
}
 8004862:	bf00      	nop
 8004864:	371c      	adds	r7, #28
 8004866:	46bd      	mov	sp, r7
 8004868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486c:	4770      	bx	lr

0800486e <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800486e:	b480      	push	{r7}
 8004870:	b085      	sub	sp, #20
 8004872:	af00      	add	r7, sp, #0
 8004874:	6078      	str	r0, [r7, #4]
 8004876:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	689b      	ldr	r3, [r3, #8]
 800487c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8004884:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004888:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800488a:	683a      	ldr	r2, [r7, #0]
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	4313      	orrs	r3, r2
 8004890:	f043 0307 	orr.w	r3, r3, #7
 8004894:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	68fa      	ldr	r2, [r7, #12]
 800489a:	609a      	str	r2, [r3, #8]
}
 800489c:	bf00      	nop
 800489e:	3714      	adds	r7, #20
 80048a0:	46bd      	mov	sp, r7
 80048a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a6:	4770      	bx	lr

080048a8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80048a8:	b480      	push	{r7}
 80048aa:	b087      	sub	sp, #28
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	60f8      	str	r0, [r7, #12]
 80048b0:	60b9      	str	r1, [r7, #8]
 80048b2:	607a      	str	r2, [r7, #4]
 80048b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	689b      	ldr	r3, [r3, #8]
 80048ba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80048bc:	697b      	ldr	r3, [r7, #20]
 80048be:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80048c2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	021a      	lsls	r2, r3, #8
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	431a      	orrs	r2, r3
 80048cc:	68bb      	ldr	r3, [r7, #8]
 80048ce:	4313      	orrs	r3, r2
 80048d0:	697a      	ldr	r2, [r7, #20]
 80048d2:	4313      	orrs	r3, r2
 80048d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	697a      	ldr	r2, [r7, #20]
 80048da:	609a      	str	r2, [r3, #8]
}
 80048dc:	bf00      	nop
 80048de:	371c      	adds	r7, #28
 80048e0:	46bd      	mov	sp, r7
 80048e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e6:	4770      	bx	lr

080048e8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80048e8:	b480      	push	{r7}
 80048ea:	b087      	sub	sp, #28
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	60f8      	str	r0, [r7, #12]
 80048f0:	60b9      	str	r1, [r7, #8]
 80048f2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80048f4:	68bb      	ldr	r3, [r7, #8]
 80048f6:	f003 031f 	and.w	r3, r3, #31
 80048fa:	2201      	movs	r2, #1
 80048fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004900:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	6a1a      	ldr	r2, [r3, #32]
 8004906:	697b      	ldr	r3, [r7, #20]
 8004908:	43db      	mvns	r3, r3
 800490a:	401a      	ands	r2, r3
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	6a1a      	ldr	r2, [r3, #32]
 8004914:	68bb      	ldr	r3, [r7, #8]
 8004916:	f003 031f 	and.w	r3, r3, #31
 800491a:	6879      	ldr	r1, [r7, #4]
 800491c:	fa01 f303 	lsl.w	r3, r1, r3
 8004920:	431a      	orrs	r2, r3
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	621a      	str	r2, [r3, #32]
}
 8004926:	bf00      	nop
 8004928:	371c      	adds	r7, #28
 800492a:	46bd      	mov	sp, r7
 800492c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004930:	4770      	bx	lr

08004932 <HAL_TIMEx_HallSensor_Init>:
  * @param  htim TIM Hall Sensor Interface handle
  * @param  sConfig TIM Hall Sensor configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Init(TIM_HandleTypeDef *htim, const TIM_HallSensor_InitTypeDef *sConfig)
{
 8004932:	b580      	push	{r7, lr}
 8004934:	b08a      	sub	sp, #40	@ 0x28
 8004936:	af00      	add	r7, sp, #0
 8004938:	6078      	str	r0, [r7, #4]
 800493a:	6039      	str	r1, [r7, #0]
  TIM_OC_InitTypeDef OC_Config;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d101      	bne.n	8004946 <HAL_TIMEx_HallSensor_Init+0x14>
  {
    return HAL_ERROR;
 8004942:	2301      	movs	r3, #1
 8004944:	e0a0      	b.n	8004a88 <HAL_TIMEx_HallSensor_Init+0x156>
  assert_param(IS_TIM_IC_POLARITY(sConfig->IC1Polarity));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800494c:	b2db      	uxtb	r3, r3
 800494e:	2b00      	cmp	r3, #0
 8004950:	d106      	bne.n	8004960 <HAL_TIMEx_HallSensor_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2200      	movs	r2, #0
 8004956:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->HallSensor_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIMEx_HallSensor_MspInit(htim);
 800495a:	6878      	ldr	r0, [r7, #4]
 800495c:	f7fc ff52 	bl	8001804 <HAL_TIMEx_HallSensor_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2202      	movs	r2, #2
 8004964:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681a      	ldr	r2, [r3, #0]
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	3304      	adds	r3, #4
 8004970:	4619      	mov	r1, r3
 8004972:	4610      	mov	r0, r2
 8004974:	f7ff fb22 	bl	8003fbc <TIM_Base_SetConfig>

  /* Configure the Channel 1 as Input Channel to interface with the three Outputs of the  Hall sensor */
  TIM_TI1_SetConfig(htim->Instance, sConfig->IC1Polarity, TIM_ICSELECTION_TRC, sConfig->IC1Filter);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6818      	ldr	r0, [r3, #0]
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	6819      	ldr	r1, [r3, #0]
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	689b      	ldr	r3, [r3, #8]
 8004984:	2203      	movs	r2, #3
 8004986:	f7ff feab 	bl	80046e0 <TIM_TI1_SetConfig>

  /* Reset the IC1PSC Bits */
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	699a      	ldr	r2, [r3, #24]
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f022 020c 	bic.w	r2, r2, #12
 8004998:	619a      	str	r2, [r3, #24]
  /* Set the IC1PSC value */
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	6999      	ldr	r1, [r3, #24]
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	685a      	ldr	r2, [r3, #4]
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	430a      	orrs	r2, r1
 80049aa:	619a      	str	r2, [r3, #24]

  /* Enable the Hall sensor interface (XOR function of the three inputs) */
  htim->Instance->CR2 |= TIM_CR2_TI1S;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	685a      	ldr	r2, [r3, #4]
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80049ba:	605a      	str	r2, [r3, #4]

  /* Select the TIM_TS_TI1F_ED signal as Input trigger for the TIM */
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	689b      	ldr	r3, [r3, #8]
 80049c2:	687a      	ldr	r2, [r7, #4]
 80049c4:	6812      	ldr	r2, [r2, #0]
 80049c6:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80049ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80049ce:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_TS_TI1F_ED;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	689a      	ldr	r2, [r3, #8]
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80049de:	609a      	str	r2, [r3, #8]

  /* Use the TIM_TS_TI1F_ED signal to reset the TIM counter each edge detection */
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	689b      	ldr	r3, [r3, #8]
 80049e6:	687a      	ldr	r2, [r7, #4]
 80049e8:	6812      	ldr	r2, [r2, #0]
 80049ea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80049ee:	f023 0307 	bic.w	r3, r3, #7
 80049f2:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_SLAVEMODE_RESET;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	689a      	ldr	r2, [r3, #8]
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f042 0204 	orr.w	r2, r2, #4
 8004a02:	609a      	str	r2, [r3, #8]

  /* Program channel 2 in PWM 2 mode with the desired Commutation_Delay*/
  OC_Config.OCFastMode = TIM_OCFAST_DISABLE;
 8004a04:	2300      	movs	r3, #0
 8004a06:	61fb      	str	r3, [r7, #28]
  OC_Config.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004a08:	2300      	movs	r3, #0
 8004a0a:	623b      	str	r3, [r7, #32]
  OC_Config.OCMode = TIM_OCMODE_PWM2;
 8004a0c:	2370      	movs	r3, #112	@ 0x70
 8004a0e:	60fb      	str	r3, [r7, #12]
  OC_Config.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004a10:	2300      	movs	r3, #0
 8004a12:	627b      	str	r3, [r7, #36]	@ 0x24
  OC_Config.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004a14:	2300      	movs	r3, #0
 8004a16:	61bb      	str	r3, [r7, #24]
  OC_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004a18:	2300      	movs	r3, #0
 8004a1a:	617b      	str	r3, [r7, #20]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	68db      	ldr	r3, [r3, #12]
 8004a20:	613b      	str	r3, [r7, #16]

  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f107 020c 	add.w	r2, r7, #12
 8004a2a:	4611      	mov	r1, r2
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	f7ff fbf1 	bl	8004214 <TIM_OC2_SetConfig>

  /* Select OC2REF as trigger output on TRGO: write the MMS bits in the TIMx_CR2
    register to 101 */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	685b      	ldr	r3, [r3, #4]
 8004a38:	687a      	ldr	r2, [r7, #4]
 8004a3a:	6812      	ldr	r2, [r2, #0]
 8004a3c:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8004a40:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a44:	6053      	str	r3, [r2, #4]
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	685a      	ldr	r2, [r3, #4]
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f042 0250 	orr.w	r2, r2, #80	@ 0x50
 8004a54:	605a      	str	r2, [r3, #4]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2201      	movs	r2, #1
 8004a5a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2201      	movs	r2, #1
 8004a62:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2201      	movs	r2, #1
 8004a6a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2201      	movs	r2, #1
 8004a72:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2201      	movs	r2, #1
 8004a7a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2201      	movs	r2, #1
 8004a82:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004a86:	2300      	movs	r3, #0
}
 8004a88:	4618      	mov	r0, r3
 8004a8a:	3728      	adds	r7, #40	@ 0x28
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	bd80      	pop	{r7, pc}

08004a90 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b084      	sub	sp, #16
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
 8004a98:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d109      	bne.n	8004ab4 <HAL_TIMEx_PWMN_Start+0x24>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004aa6:	b2db      	uxtb	r3, r3
 8004aa8:	2b01      	cmp	r3, #1
 8004aaa:	bf14      	ite	ne
 8004aac:	2301      	movne	r3, #1
 8004aae:	2300      	moveq	r3, #0
 8004ab0:	b2db      	uxtb	r3, r3
 8004ab2:	e022      	b.n	8004afa <HAL_TIMEx_PWMN_Start+0x6a>
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	2b04      	cmp	r3, #4
 8004ab8:	d109      	bne.n	8004ace <HAL_TIMEx_PWMN_Start+0x3e>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004ac0:	b2db      	uxtb	r3, r3
 8004ac2:	2b01      	cmp	r3, #1
 8004ac4:	bf14      	ite	ne
 8004ac6:	2301      	movne	r3, #1
 8004ac8:	2300      	moveq	r3, #0
 8004aca:	b2db      	uxtb	r3, r3
 8004acc:	e015      	b.n	8004afa <HAL_TIMEx_PWMN_Start+0x6a>
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	2b08      	cmp	r3, #8
 8004ad2:	d109      	bne.n	8004ae8 <HAL_TIMEx_PWMN_Start+0x58>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8004ada:	b2db      	uxtb	r3, r3
 8004adc:	2b01      	cmp	r3, #1
 8004ade:	bf14      	ite	ne
 8004ae0:	2301      	movne	r3, #1
 8004ae2:	2300      	moveq	r3, #0
 8004ae4:	b2db      	uxtb	r3, r3
 8004ae6:	e008      	b.n	8004afa <HAL_TIMEx_PWMN_Start+0x6a>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8004aee:	b2db      	uxtb	r3, r3
 8004af0:	2b01      	cmp	r3, #1
 8004af2:	bf14      	ite	ne
 8004af4:	2301      	movne	r3, #1
 8004af6:	2300      	moveq	r3, #0
 8004af8:	b2db      	uxtb	r3, r3
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d001      	beq.n	8004b02 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8004afe:	2301      	movs	r3, #1
 8004b00:	e069      	b.n	8004bd6 <HAL_TIMEx_PWMN_Start+0x146>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d104      	bne.n	8004b12 <HAL_TIMEx_PWMN_Start+0x82>
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2202      	movs	r2, #2
 8004b0c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004b10:	e013      	b.n	8004b3a <HAL_TIMEx_PWMN_Start+0xaa>
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	2b04      	cmp	r3, #4
 8004b16:	d104      	bne.n	8004b22 <HAL_TIMEx_PWMN_Start+0x92>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2202      	movs	r2, #2
 8004b1c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004b20:	e00b      	b.n	8004b3a <HAL_TIMEx_PWMN_Start+0xaa>
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	2b08      	cmp	r3, #8
 8004b26:	d104      	bne.n	8004b32 <HAL_TIMEx_PWMN_Start+0xa2>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2202      	movs	r2, #2
 8004b2c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004b30:	e003      	b.n	8004b3a <HAL_TIMEx_PWMN_Start+0xaa>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2202      	movs	r2, #2
 8004b36:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	2204      	movs	r2, #4
 8004b40:	6839      	ldr	r1, [r7, #0]
 8004b42:	4618      	mov	r0, r3
 8004b44:	f000 f966 	bl	8004e14 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004b56:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4a20      	ldr	r2, [pc, #128]	@ (8004be0 <HAL_TIMEx_PWMN_Start+0x150>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d018      	beq.n	8004b94 <HAL_TIMEx_PWMN_Start+0x104>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b6a:	d013      	beq.n	8004b94 <HAL_TIMEx_PWMN_Start+0x104>
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4a1c      	ldr	r2, [pc, #112]	@ (8004be4 <HAL_TIMEx_PWMN_Start+0x154>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d00e      	beq.n	8004b94 <HAL_TIMEx_PWMN_Start+0x104>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4a1b      	ldr	r2, [pc, #108]	@ (8004be8 <HAL_TIMEx_PWMN_Start+0x158>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d009      	beq.n	8004b94 <HAL_TIMEx_PWMN_Start+0x104>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4a19      	ldr	r2, [pc, #100]	@ (8004bec <HAL_TIMEx_PWMN_Start+0x15c>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d004      	beq.n	8004b94 <HAL_TIMEx_PWMN_Start+0x104>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4a18      	ldr	r2, [pc, #96]	@ (8004bf0 <HAL_TIMEx_PWMN_Start+0x160>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d115      	bne.n	8004bc0 <HAL_TIMEx_PWMN_Start+0x130>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	689a      	ldr	r2, [r3, #8]
 8004b9a:	4b16      	ldr	r3, [pc, #88]	@ (8004bf4 <HAL_TIMEx_PWMN_Start+0x164>)
 8004b9c:	4013      	ands	r3, r2
 8004b9e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	2b06      	cmp	r3, #6
 8004ba4:	d015      	beq.n	8004bd2 <HAL_TIMEx_PWMN_Start+0x142>
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004bac:	d011      	beq.n	8004bd2 <HAL_TIMEx_PWMN_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	681a      	ldr	r2, [r3, #0]
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f042 0201 	orr.w	r2, r2, #1
 8004bbc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bbe:	e008      	b.n	8004bd2 <HAL_TIMEx_PWMN_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	681a      	ldr	r2, [r3, #0]
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f042 0201 	orr.w	r2, r2, #1
 8004bce:	601a      	str	r2, [r3, #0]
 8004bd0:	e000      	b.n	8004bd4 <HAL_TIMEx_PWMN_Start+0x144>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bd2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004bd4:	2300      	movs	r3, #0
}
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	3710      	adds	r7, #16
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	bd80      	pop	{r7, pc}
 8004bde:	bf00      	nop
 8004be0:	40012c00 	.word	0x40012c00
 8004be4:	40000400 	.word	0x40000400
 8004be8:	40000800 	.word	0x40000800
 8004bec:	40013400 	.word	0x40013400
 8004bf0:	40014000 	.word	0x40014000
 8004bf4:	00010007 	.word	0x00010007

08004bf8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004bf8:	b480      	push	{r7}
 8004bfa:	b085      	sub	sp, #20
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
 8004c00:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004c08:	2b01      	cmp	r3, #1
 8004c0a:	d101      	bne.n	8004c10 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004c0c:	2302      	movs	r3, #2
 8004c0e:	e065      	b.n	8004cdc <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2201      	movs	r2, #1
 8004c14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2202      	movs	r2, #2
 8004c1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	685b      	ldr	r3, [r3, #4]
 8004c26:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	689b      	ldr	r3, [r3, #8]
 8004c2e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4a2c      	ldr	r2, [pc, #176]	@ (8004ce8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d004      	beq.n	8004c44 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	4a2b      	ldr	r2, [pc, #172]	@ (8004cec <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d108      	bne.n	8004c56 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004c4a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	685b      	ldr	r3, [r3, #4]
 8004c50:	68fa      	ldr	r2, [r7, #12]
 8004c52:	4313      	orrs	r3, r2
 8004c54:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8004c5c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c60:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	68fa      	ldr	r2, [r7, #12]
 8004c68:	4313      	orrs	r3, r2
 8004c6a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	68fa      	ldr	r2, [r7, #12]
 8004c72:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	4a1b      	ldr	r2, [pc, #108]	@ (8004ce8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d018      	beq.n	8004cb0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c86:	d013      	beq.n	8004cb0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	4a18      	ldr	r2, [pc, #96]	@ (8004cf0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d00e      	beq.n	8004cb0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	4a17      	ldr	r2, [pc, #92]	@ (8004cf4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d009      	beq.n	8004cb0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4a12      	ldr	r2, [pc, #72]	@ (8004cec <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d004      	beq.n	8004cb0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	4a13      	ldr	r2, [pc, #76]	@ (8004cf8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d10c      	bne.n	8004cca <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004cb0:	68bb      	ldr	r3, [r7, #8]
 8004cb2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004cb6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	689b      	ldr	r3, [r3, #8]
 8004cbc:	68ba      	ldr	r2, [r7, #8]
 8004cbe:	4313      	orrs	r3, r2
 8004cc0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	68ba      	ldr	r2, [r7, #8]
 8004cc8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2201      	movs	r2, #1
 8004cce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004cda:	2300      	movs	r3, #0
}
 8004cdc:	4618      	mov	r0, r3
 8004cde:	3714      	adds	r7, #20
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce6:	4770      	bx	lr
 8004ce8:	40012c00 	.word	0x40012c00
 8004cec:	40013400 	.word	0x40013400
 8004cf0:	40000400 	.word	0x40000400
 8004cf4:	40000800 	.word	0x40000800
 8004cf8:	40014000 	.word	0x40014000

08004cfc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004cfc:	b480      	push	{r7}
 8004cfe:	b085      	sub	sp, #20
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
 8004d04:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004d06:	2300      	movs	r3, #0
 8004d08:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004d10:	2b01      	cmp	r3, #1
 8004d12:	d101      	bne.n	8004d18 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004d14:	2302      	movs	r3, #2
 8004d16:	e073      	b.n	8004e00 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2201      	movs	r2, #1
 8004d1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	68db      	ldr	r3, [r3, #12]
 8004d2a:	4313      	orrs	r3, r2
 8004d2c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	689b      	ldr	r3, [r3, #8]
 8004d38:	4313      	orrs	r3, r2
 8004d3a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	685b      	ldr	r3, [r3, #4]
 8004d46:	4313      	orrs	r3, r2
 8004d48:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	4313      	orrs	r3, r2
 8004d56:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	691b      	ldr	r3, [r3, #16]
 8004d62:	4313      	orrs	r3, r2
 8004d64:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	695b      	ldr	r3, [r3, #20]
 8004d70:	4313      	orrs	r3, r2
 8004d72:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	699b      	ldr	r3, [r3, #24]
 8004d8c:	041b      	lsls	r3, r3, #16
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	69db      	ldr	r3, [r3, #28]
 8004d9c:	4313      	orrs	r3, r2
 8004d9e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	4a19      	ldr	r2, [pc, #100]	@ (8004e0c <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d004      	beq.n	8004db4 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	4a18      	ldr	r2, [pc, #96]	@ (8004e10 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d11c      	bne.n	8004dee <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dbe:	051b      	lsls	r3, r3, #20
 8004dc0:	4313      	orrs	r3, r2
 8004dc2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	6a1b      	ldr	r3, [r3, #32]
 8004dce:	4313      	orrs	r3, r2
 8004dd0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ddc:	4313      	orrs	r3, r2
 8004dde:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dea:	4313      	orrs	r3, r2
 8004dec:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	68fa      	ldr	r2, [r7, #12]
 8004df4:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2200      	movs	r2, #0
 8004dfa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004dfe:	2300      	movs	r3, #0
}
 8004e00:	4618      	mov	r0, r3
 8004e02:	3714      	adds	r7, #20
 8004e04:	46bd      	mov	sp, r7
 8004e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0a:	4770      	bx	lr
 8004e0c:	40012c00 	.word	0x40012c00
 8004e10:	40013400 	.word	0x40013400

08004e14 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8004e14:	b480      	push	{r7}
 8004e16:	b087      	sub	sp, #28
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	60f8      	str	r0, [r7, #12]
 8004e1c:	60b9      	str	r1, [r7, #8]
 8004e1e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 8004e20:	68bb      	ldr	r3, [r7, #8]
 8004e22:	f003 030f 	and.w	r3, r3, #15
 8004e26:	2204      	movs	r2, #4
 8004e28:	fa02 f303 	lsl.w	r3, r2, r3
 8004e2c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	6a1a      	ldr	r2, [r3, #32]
 8004e32:	697b      	ldr	r3, [r7, #20]
 8004e34:	43db      	mvns	r3, r3
 8004e36:	401a      	ands	r2, r3
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	6a1a      	ldr	r2, [r3, #32]
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	f003 030f 	and.w	r3, r3, #15
 8004e46:	6879      	ldr	r1, [r7, #4]
 8004e48:	fa01 f303 	lsl.w	r3, r1, r3
 8004e4c:	431a      	orrs	r2, r3
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	621a      	str	r2, [r3, #32]
}
 8004e52:	bf00      	nop
 8004e54:	371c      	adds	r7, #28
 8004e56:	46bd      	mov	sp, r7
 8004e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5c:	4770      	bx	lr

08004e5e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004e5e:	b580      	push	{r7, lr}
 8004e60:	b082      	sub	sp, #8
 8004e62:	af00      	add	r7, sp, #0
 8004e64:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d101      	bne.n	8004e70 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004e6c:	2301      	movs	r3, #1
 8004e6e:	e042      	b.n	8004ef6 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d106      	bne.n	8004e88 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e82:	6878      	ldr	r0, [r7, #4]
 8004e84:	f7fc fe70 	bl	8001b68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2224      	movs	r2, #36	@ 0x24
 8004e8c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	681a      	ldr	r2, [r3, #0]
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f022 0201 	bic.w	r2, r2, #1
 8004e9e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d002      	beq.n	8004eae <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004ea8:	6878      	ldr	r0, [r7, #4]
 8004eaa:	f000 faf5 	bl	8005498 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004eae:	6878      	ldr	r0, [r7, #4]
 8004eb0:	f000 f826 	bl	8004f00 <UART_SetConfig>
 8004eb4:	4603      	mov	r3, r0
 8004eb6:	2b01      	cmp	r3, #1
 8004eb8:	d101      	bne.n	8004ebe <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004eba:	2301      	movs	r3, #1
 8004ebc:	e01b      	b.n	8004ef6 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	685a      	ldr	r2, [r3, #4]
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004ecc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	689a      	ldr	r2, [r3, #8]
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004edc:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	681a      	ldr	r2, [r3, #0]
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f042 0201 	orr.w	r2, r2, #1
 8004eec:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004eee:	6878      	ldr	r0, [r7, #4]
 8004ef0:	f000 fb74 	bl	80055dc <UART_CheckIdleState>
 8004ef4:	4603      	mov	r3, r0
}
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	3708      	adds	r7, #8
 8004efa:	46bd      	mov	sp, r7
 8004efc:	bd80      	pop	{r7, pc}
	...

08004f00 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004f00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004f04:	b08c      	sub	sp, #48	@ 0x30
 8004f06:	af00      	add	r7, sp, #0
 8004f08:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004f10:	697b      	ldr	r3, [r7, #20]
 8004f12:	689a      	ldr	r2, [r3, #8]
 8004f14:	697b      	ldr	r3, [r7, #20]
 8004f16:	691b      	ldr	r3, [r3, #16]
 8004f18:	431a      	orrs	r2, r3
 8004f1a:	697b      	ldr	r3, [r7, #20]
 8004f1c:	695b      	ldr	r3, [r3, #20]
 8004f1e:	431a      	orrs	r2, r3
 8004f20:	697b      	ldr	r3, [r7, #20]
 8004f22:	69db      	ldr	r3, [r3, #28]
 8004f24:	4313      	orrs	r3, r2
 8004f26:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004f28:	697b      	ldr	r3, [r7, #20]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	681a      	ldr	r2, [r3, #0]
 8004f2e:	4bab      	ldr	r3, [pc, #684]	@ (80051dc <UART_SetConfig+0x2dc>)
 8004f30:	4013      	ands	r3, r2
 8004f32:	697a      	ldr	r2, [r7, #20]
 8004f34:	6812      	ldr	r2, [r2, #0]
 8004f36:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004f38:	430b      	orrs	r3, r1
 8004f3a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f3c:	697b      	ldr	r3, [r7, #20]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	685b      	ldr	r3, [r3, #4]
 8004f42:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004f46:	697b      	ldr	r3, [r7, #20]
 8004f48:	68da      	ldr	r2, [r3, #12]
 8004f4a:	697b      	ldr	r3, [r7, #20]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	430a      	orrs	r2, r1
 8004f50:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004f52:	697b      	ldr	r3, [r7, #20]
 8004f54:	699b      	ldr	r3, [r3, #24]
 8004f56:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004f58:	697b      	ldr	r3, [r7, #20]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	4aa0      	ldr	r2, [pc, #640]	@ (80051e0 <UART_SetConfig+0x2e0>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d004      	beq.n	8004f6c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004f62:	697b      	ldr	r3, [r7, #20]
 8004f64:	6a1b      	ldr	r3, [r3, #32]
 8004f66:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004f68:	4313      	orrs	r3, r2
 8004f6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004f6c:	697b      	ldr	r3, [r7, #20]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	689b      	ldr	r3, [r3, #8]
 8004f72:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8004f76:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8004f7a:	697a      	ldr	r2, [r7, #20]
 8004f7c:	6812      	ldr	r2, [r2, #0]
 8004f7e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004f80:	430b      	orrs	r3, r1
 8004f82:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004f84:	697b      	ldr	r3, [r7, #20]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f8a:	f023 010f 	bic.w	r1, r3, #15
 8004f8e:	697b      	ldr	r3, [r7, #20]
 8004f90:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004f92:	697b      	ldr	r3, [r7, #20]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	430a      	orrs	r2, r1
 8004f98:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004f9a:	697b      	ldr	r3, [r7, #20]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	4a91      	ldr	r2, [pc, #580]	@ (80051e4 <UART_SetConfig+0x2e4>)
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d125      	bne.n	8004ff0 <UART_SetConfig+0xf0>
 8004fa4:	4b90      	ldr	r3, [pc, #576]	@ (80051e8 <UART_SetConfig+0x2e8>)
 8004fa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004faa:	f003 0303 	and.w	r3, r3, #3
 8004fae:	2b03      	cmp	r3, #3
 8004fb0:	d81a      	bhi.n	8004fe8 <UART_SetConfig+0xe8>
 8004fb2:	a201      	add	r2, pc, #4	@ (adr r2, 8004fb8 <UART_SetConfig+0xb8>)
 8004fb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fb8:	08004fc9 	.word	0x08004fc9
 8004fbc:	08004fd9 	.word	0x08004fd9
 8004fc0:	08004fd1 	.word	0x08004fd1
 8004fc4:	08004fe1 	.word	0x08004fe1
 8004fc8:	2301      	movs	r3, #1
 8004fca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004fce:	e0d6      	b.n	800517e <UART_SetConfig+0x27e>
 8004fd0:	2302      	movs	r3, #2
 8004fd2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004fd6:	e0d2      	b.n	800517e <UART_SetConfig+0x27e>
 8004fd8:	2304      	movs	r3, #4
 8004fda:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004fde:	e0ce      	b.n	800517e <UART_SetConfig+0x27e>
 8004fe0:	2308      	movs	r3, #8
 8004fe2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004fe6:	e0ca      	b.n	800517e <UART_SetConfig+0x27e>
 8004fe8:	2310      	movs	r3, #16
 8004fea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004fee:	e0c6      	b.n	800517e <UART_SetConfig+0x27e>
 8004ff0:	697b      	ldr	r3, [r7, #20]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	4a7d      	ldr	r2, [pc, #500]	@ (80051ec <UART_SetConfig+0x2ec>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d138      	bne.n	800506c <UART_SetConfig+0x16c>
 8004ffa:	4b7b      	ldr	r3, [pc, #492]	@ (80051e8 <UART_SetConfig+0x2e8>)
 8004ffc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005000:	f003 030c 	and.w	r3, r3, #12
 8005004:	2b0c      	cmp	r3, #12
 8005006:	d82d      	bhi.n	8005064 <UART_SetConfig+0x164>
 8005008:	a201      	add	r2, pc, #4	@ (adr r2, 8005010 <UART_SetConfig+0x110>)
 800500a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800500e:	bf00      	nop
 8005010:	08005045 	.word	0x08005045
 8005014:	08005065 	.word	0x08005065
 8005018:	08005065 	.word	0x08005065
 800501c:	08005065 	.word	0x08005065
 8005020:	08005055 	.word	0x08005055
 8005024:	08005065 	.word	0x08005065
 8005028:	08005065 	.word	0x08005065
 800502c:	08005065 	.word	0x08005065
 8005030:	0800504d 	.word	0x0800504d
 8005034:	08005065 	.word	0x08005065
 8005038:	08005065 	.word	0x08005065
 800503c:	08005065 	.word	0x08005065
 8005040:	0800505d 	.word	0x0800505d
 8005044:	2300      	movs	r3, #0
 8005046:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800504a:	e098      	b.n	800517e <UART_SetConfig+0x27e>
 800504c:	2302      	movs	r3, #2
 800504e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005052:	e094      	b.n	800517e <UART_SetConfig+0x27e>
 8005054:	2304      	movs	r3, #4
 8005056:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800505a:	e090      	b.n	800517e <UART_SetConfig+0x27e>
 800505c:	2308      	movs	r3, #8
 800505e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005062:	e08c      	b.n	800517e <UART_SetConfig+0x27e>
 8005064:	2310      	movs	r3, #16
 8005066:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800506a:	e088      	b.n	800517e <UART_SetConfig+0x27e>
 800506c:	697b      	ldr	r3, [r7, #20]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4a5f      	ldr	r2, [pc, #380]	@ (80051f0 <UART_SetConfig+0x2f0>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d125      	bne.n	80050c2 <UART_SetConfig+0x1c2>
 8005076:	4b5c      	ldr	r3, [pc, #368]	@ (80051e8 <UART_SetConfig+0x2e8>)
 8005078:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800507c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005080:	2b30      	cmp	r3, #48	@ 0x30
 8005082:	d016      	beq.n	80050b2 <UART_SetConfig+0x1b2>
 8005084:	2b30      	cmp	r3, #48	@ 0x30
 8005086:	d818      	bhi.n	80050ba <UART_SetConfig+0x1ba>
 8005088:	2b20      	cmp	r3, #32
 800508a:	d00a      	beq.n	80050a2 <UART_SetConfig+0x1a2>
 800508c:	2b20      	cmp	r3, #32
 800508e:	d814      	bhi.n	80050ba <UART_SetConfig+0x1ba>
 8005090:	2b00      	cmp	r3, #0
 8005092:	d002      	beq.n	800509a <UART_SetConfig+0x19a>
 8005094:	2b10      	cmp	r3, #16
 8005096:	d008      	beq.n	80050aa <UART_SetConfig+0x1aa>
 8005098:	e00f      	b.n	80050ba <UART_SetConfig+0x1ba>
 800509a:	2300      	movs	r3, #0
 800509c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80050a0:	e06d      	b.n	800517e <UART_SetConfig+0x27e>
 80050a2:	2302      	movs	r3, #2
 80050a4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80050a8:	e069      	b.n	800517e <UART_SetConfig+0x27e>
 80050aa:	2304      	movs	r3, #4
 80050ac:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80050b0:	e065      	b.n	800517e <UART_SetConfig+0x27e>
 80050b2:	2308      	movs	r3, #8
 80050b4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80050b8:	e061      	b.n	800517e <UART_SetConfig+0x27e>
 80050ba:	2310      	movs	r3, #16
 80050bc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80050c0:	e05d      	b.n	800517e <UART_SetConfig+0x27e>
 80050c2:	697b      	ldr	r3, [r7, #20]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	4a4b      	ldr	r2, [pc, #300]	@ (80051f4 <UART_SetConfig+0x2f4>)
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d125      	bne.n	8005118 <UART_SetConfig+0x218>
 80050cc:	4b46      	ldr	r3, [pc, #280]	@ (80051e8 <UART_SetConfig+0x2e8>)
 80050ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050d2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80050d6:	2bc0      	cmp	r3, #192	@ 0xc0
 80050d8:	d016      	beq.n	8005108 <UART_SetConfig+0x208>
 80050da:	2bc0      	cmp	r3, #192	@ 0xc0
 80050dc:	d818      	bhi.n	8005110 <UART_SetConfig+0x210>
 80050de:	2b80      	cmp	r3, #128	@ 0x80
 80050e0:	d00a      	beq.n	80050f8 <UART_SetConfig+0x1f8>
 80050e2:	2b80      	cmp	r3, #128	@ 0x80
 80050e4:	d814      	bhi.n	8005110 <UART_SetConfig+0x210>
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d002      	beq.n	80050f0 <UART_SetConfig+0x1f0>
 80050ea:	2b40      	cmp	r3, #64	@ 0x40
 80050ec:	d008      	beq.n	8005100 <UART_SetConfig+0x200>
 80050ee:	e00f      	b.n	8005110 <UART_SetConfig+0x210>
 80050f0:	2300      	movs	r3, #0
 80050f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80050f6:	e042      	b.n	800517e <UART_SetConfig+0x27e>
 80050f8:	2302      	movs	r3, #2
 80050fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80050fe:	e03e      	b.n	800517e <UART_SetConfig+0x27e>
 8005100:	2304      	movs	r3, #4
 8005102:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005106:	e03a      	b.n	800517e <UART_SetConfig+0x27e>
 8005108:	2308      	movs	r3, #8
 800510a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800510e:	e036      	b.n	800517e <UART_SetConfig+0x27e>
 8005110:	2310      	movs	r3, #16
 8005112:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005116:	e032      	b.n	800517e <UART_SetConfig+0x27e>
 8005118:	697b      	ldr	r3, [r7, #20]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	4a30      	ldr	r2, [pc, #192]	@ (80051e0 <UART_SetConfig+0x2e0>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d12a      	bne.n	8005178 <UART_SetConfig+0x278>
 8005122:	4b31      	ldr	r3, [pc, #196]	@ (80051e8 <UART_SetConfig+0x2e8>)
 8005124:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005128:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800512c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005130:	d01a      	beq.n	8005168 <UART_SetConfig+0x268>
 8005132:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005136:	d81b      	bhi.n	8005170 <UART_SetConfig+0x270>
 8005138:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800513c:	d00c      	beq.n	8005158 <UART_SetConfig+0x258>
 800513e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005142:	d815      	bhi.n	8005170 <UART_SetConfig+0x270>
 8005144:	2b00      	cmp	r3, #0
 8005146:	d003      	beq.n	8005150 <UART_SetConfig+0x250>
 8005148:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800514c:	d008      	beq.n	8005160 <UART_SetConfig+0x260>
 800514e:	e00f      	b.n	8005170 <UART_SetConfig+0x270>
 8005150:	2300      	movs	r3, #0
 8005152:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005156:	e012      	b.n	800517e <UART_SetConfig+0x27e>
 8005158:	2302      	movs	r3, #2
 800515a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800515e:	e00e      	b.n	800517e <UART_SetConfig+0x27e>
 8005160:	2304      	movs	r3, #4
 8005162:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005166:	e00a      	b.n	800517e <UART_SetConfig+0x27e>
 8005168:	2308      	movs	r3, #8
 800516a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800516e:	e006      	b.n	800517e <UART_SetConfig+0x27e>
 8005170:	2310      	movs	r3, #16
 8005172:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005176:	e002      	b.n	800517e <UART_SetConfig+0x27e>
 8005178:	2310      	movs	r3, #16
 800517a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800517e:	697b      	ldr	r3, [r7, #20]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	4a17      	ldr	r2, [pc, #92]	@ (80051e0 <UART_SetConfig+0x2e0>)
 8005184:	4293      	cmp	r3, r2
 8005186:	f040 80a8 	bne.w	80052da <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800518a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800518e:	2b08      	cmp	r3, #8
 8005190:	d834      	bhi.n	80051fc <UART_SetConfig+0x2fc>
 8005192:	a201      	add	r2, pc, #4	@ (adr r2, 8005198 <UART_SetConfig+0x298>)
 8005194:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005198:	080051bd 	.word	0x080051bd
 800519c:	080051fd 	.word	0x080051fd
 80051a0:	080051c5 	.word	0x080051c5
 80051a4:	080051fd 	.word	0x080051fd
 80051a8:	080051cb 	.word	0x080051cb
 80051ac:	080051fd 	.word	0x080051fd
 80051b0:	080051fd 	.word	0x080051fd
 80051b4:	080051fd 	.word	0x080051fd
 80051b8:	080051d3 	.word	0x080051d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80051bc:	f7fd ff22 	bl	8003004 <HAL_RCC_GetPCLK1Freq>
 80051c0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80051c2:	e021      	b.n	8005208 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80051c4:	4b0c      	ldr	r3, [pc, #48]	@ (80051f8 <UART_SetConfig+0x2f8>)
 80051c6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80051c8:	e01e      	b.n	8005208 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80051ca:	f7fd fead 	bl	8002f28 <HAL_RCC_GetSysClockFreq>
 80051ce:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80051d0:	e01a      	b.n	8005208 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80051d2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80051d6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80051d8:	e016      	b.n	8005208 <UART_SetConfig+0x308>
 80051da:	bf00      	nop
 80051dc:	cfff69f3 	.word	0xcfff69f3
 80051e0:	40008000 	.word	0x40008000
 80051e4:	40013800 	.word	0x40013800
 80051e8:	40021000 	.word	0x40021000
 80051ec:	40004400 	.word	0x40004400
 80051f0:	40004800 	.word	0x40004800
 80051f4:	40004c00 	.word	0x40004c00
 80051f8:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80051fc:	2300      	movs	r3, #0
 80051fe:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005200:	2301      	movs	r3, #1
 8005202:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005206:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005208:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800520a:	2b00      	cmp	r3, #0
 800520c:	f000 812a 	beq.w	8005464 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005210:	697b      	ldr	r3, [r7, #20]
 8005212:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005214:	4a9e      	ldr	r2, [pc, #632]	@ (8005490 <UART_SetConfig+0x590>)
 8005216:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800521a:	461a      	mov	r2, r3
 800521c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800521e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005222:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005224:	697b      	ldr	r3, [r7, #20]
 8005226:	685a      	ldr	r2, [r3, #4]
 8005228:	4613      	mov	r3, r2
 800522a:	005b      	lsls	r3, r3, #1
 800522c:	4413      	add	r3, r2
 800522e:	69ba      	ldr	r2, [r7, #24]
 8005230:	429a      	cmp	r2, r3
 8005232:	d305      	bcc.n	8005240 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005234:	697b      	ldr	r3, [r7, #20]
 8005236:	685b      	ldr	r3, [r3, #4]
 8005238:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800523a:	69ba      	ldr	r2, [r7, #24]
 800523c:	429a      	cmp	r2, r3
 800523e:	d903      	bls.n	8005248 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8005240:	2301      	movs	r3, #1
 8005242:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005246:	e10d      	b.n	8005464 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005248:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800524a:	2200      	movs	r2, #0
 800524c:	60bb      	str	r3, [r7, #8]
 800524e:	60fa      	str	r2, [r7, #12]
 8005250:	697b      	ldr	r3, [r7, #20]
 8005252:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005254:	4a8e      	ldr	r2, [pc, #568]	@ (8005490 <UART_SetConfig+0x590>)
 8005256:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800525a:	b29b      	uxth	r3, r3
 800525c:	2200      	movs	r2, #0
 800525e:	603b      	str	r3, [r7, #0]
 8005260:	607a      	str	r2, [r7, #4]
 8005262:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005266:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800526a:	f7fb fc9b 	bl	8000ba4 <__aeabi_uldivmod>
 800526e:	4602      	mov	r2, r0
 8005270:	460b      	mov	r3, r1
 8005272:	4610      	mov	r0, r2
 8005274:	4619      	mov	r1, r3
 8005276:	f04f 0200 	mov.w	r2, #0
 800527a:	f04f 0300 	mov.w	r3, #0
 800527e:	020b      	lsls	r3, r1, #8
 8005280:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005284:	0202      	lsls	r2, r0, #8
 8005286:	6979      	ldr	r1, [r7, #20]
 8005288:	6849      	ldr	r1, [r1, #4]
 800528a:	0849      	lsrs	r1, r1, #1
 800528c:	2000      	movs	r0, #0
 800528e:	460c      	mov	r4, r1
 8005290:	4605      	mov	r5, r0
 8005292:	eb12 0804 	adds.w	r8, r2, r4
 8005296:	eb43 0905 	adc.w	r9, r3, r5
 800529a:	697b      	ldr	r3, [r7, #20]
 800529c:	685b      	ldr	r3, [r3, #4]
 800529e:	2200      	movs	r2, #0
 80052a0:	469a      	mov	sl, r3
 80052a2:	4693      	mov	fp, r2
 80052a4:	4652      	mov	r2, sl
 80052a6:	465b      	mov	r3, fp
 80052a8:	4640      	mov	r0, r8
 80052aa:	4649      	mov	r1, r9
 80052ac:	f7fb fc7a 	bl	8000ba4 <__aeabi_uldivmod>
 80052b0:	4602      	mov	r2, r0
 80052b2:	460b      	mov	r3, r1
 80052b4:	4613      	mov	r3, r2
 80052b6:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80052b8:	6a3b      	ldr	r3, [r7, #32]
 80052ba:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80052be:	d308      	bcc.n	80052d2 <UART_SetConfig+0x3d2>
 80052c0:	6a3b      	ldr	r3, [r7, #32]
 80052c2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80052c6:	d204      	bcs.n	80052d2 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 80052c8:	697b      	ldr	r3, [r7, #20]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	6a3a      	ldr	r2, [r7, #32]
 80052ce:	60da      	str	r2, [r3, #12]
 80052d0:	e0c8      	b.n	8005464 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 80052d2:	2301      	movs	r3, #1
 80052d4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80052d8:	e0c4      	b.n	8005464 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80052da:	697b      	ldr	r3, [r7, #20]
 80052dc:	69db      	ldr	r3, [r3, #28]
 80052de:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80052e2:	d167      	bne.n	80053b4 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 80052e4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80052e8:	2b08      	cmp	r3, #8
 80052ea:	d828      	bhi.n	800533e <UART_SetConfig+0x43e>
 80052ec:	a201      	add	r2, pc, #4	@ (adr r2, 80052f4 <UART_SetConfig+0x3f4>)
 80052ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052f2:	bf00      	nop
 80052f4:	08005319 	.word	0x08005319
 80052f8:	08005321 	.word	0x08005321
 80052fc:	08005329 	.word	0x08005329
 8005300:	0800533f 	.word	0x0800533f
 8005304:	0800532f 	.word	0x0800532f
 8005308:	0800533f 	.word	0x0800533f
 800530c:	0800533f 	.word	0x0800533f
 8005310:	0800533f 	.word	0x0800533f
 8005314:	08005337 	.word	0x08005337
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005318:	f7fd fe74 	bl	8003004 <HAL_RCC_GetPCLK1Freq>
 800531c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800531e:	e014      	b.n	800534a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005320:	f7fd fe86 	bl	8003030 <HAL_RCC_GetPCLK2Freq>
 8005324:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005326:	e010      	b.n	800534a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005328:	4b5a      	ldr	r3, [pc, #360]	@ (8005494 <UART_SetConfig+0x594>)
 800532a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800532c:	e00d      	b.n	800534a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800532e:	f7fd fdfb 	bl	8002f28 <HAL_RCC_GetSysClockFreq>
 8005332:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005334:	e009      	b.n	800534a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005336:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800533a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800533c:	e005      	b.n	800534a <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 800533e:	2300      	movs	r3, #0
 8005340:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005342:	2301      	movs	r3, #1
 8005344:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005348:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800534a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800534c:	2b00      	cmp	r3, #0
 800534e:	f000 8089 	beq.w	8005464 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005352:	697b      	ldr	r3, [r7, #20]
 8005354:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005356:	4a4e      	ldr	r2, [pc, #312]	@ (8005490 <UART_SetConfig+0x590>)
 8005358:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800535c:	461a      	mov	r2, r3
 800535e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005360:	fbb3 f3f2 	udiv	r3, r3, r2
 8005364:	005a      	lsls	r2, r3, #1
 8005366:	697b      	ldr	r3, [r7, #20]
 8005368:	685b      	ldr	r3, [r3, #4]
 800536a:	085b      	lsrs	r3, r3, #1
 800536c:	441a      	add	r2, r3
 800536e:	697b      	ldr	r3, [r7, #20]
 8005370:	685b      	ldr	r3, [r3, #4]
 8005372:	fbb2 f3f3 	udiv	r3, r2, r3
 8005376:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005378:	6a3b      	ldr	r3, [r7, #32]
 800537a:	2b0f      	cmp	r3, #15
 800537c:	d916      	bls.n	80053ac <UART_SetConfig+0x4ac>
 800537e:	6a3b      	ldr	r3, [r7, #32]
 8005380:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005384:	d212      	bcs.n	80053ac <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005386:	6a3b      	ldr	r3, [r7, #32]
 8005388:	b29b      	uxth	r3, r3
 800538a:	f023 030f 	bic.w	r3, r3, #15
 800538e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005390:	6a3b      	ldr	r3, [r7, #32]
 8005392:	085b      	lsrs	r3, r3, #1
 8005394:	b29b      	uxth	r3, r3
 8005396:	f003 0307 	and.w	r3, r3, #7
 800539a:	b29a      	uxth	r2, r3
 800539c:	8bfb      	ldrh	r3, [r7, #30]
 800539e:	4313      	orrs	r3, r2
 80053a0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80053a2:	697b      	ldr	r3, [r7, #20]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	8bfa      	ldrh	r2, [r7, #30]
 80053a8:	60da      	str	r2, [r3, #12]
 80053aa:	e05b      	b.n	8005464 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80053ac:	2301      	movs	r3, #1
 80053ae:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80053b2:	e057      	b.n	8005464 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 80053b4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80053b8:	2b08      	cmp	r3, #8
 80053ba:	d828      	bhi.n	800540e <UART_SetConfig+0x50e>
 80053bc:	a201      	add	r2, pc, #4	@ (adr r2, 80053c4 <UART_SetConfig+0x4c4>)
 80053be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053c2:	bf00      	nop
 80053c4:	080053e9 	.word	0x080053e9
 80053c8:	080053f1 	.word	0x080053f1
 80053cc:	080053f9 	.word	0x080053f9
 80053d0:	0800540f 	.word	0x0800540f
 80053d4:	080053ff 	.word	0x080053ff
 80053d8:	0800540f 	.word	0x0800540f
 80053dc:	0800540f 	.word	0x0800540f
 80053e0:	0800540f 	.word	0x0800540f
 80053e4:	08005407 	.word	0x08005407
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80053e8:	f7fd fe0c 	bl	8003004 <HAL_RCC_GetPCLK1Freq>
 80053ec:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80053ee:	e014      	b.n	800541a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80053f0:	f7fd fe1e 	bl	8003030 <HAL_RCC_GetPCLK2Freq>
 80053f4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80053f6:	e010      	b.n	800541a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80053f8:	4b26      	ldr	r3, [pc, #152]	@ (8005494 <UART_SetConfig+0x594>)
 80053fa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80053fc:	e00d      	b.n	800541a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80053fe:	f7fd fd93 	bl	8002f28 <HAL_RCC_GetSysClockFreq>
 8005402:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005404:	e009      	b.n	800541a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005406:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800540a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800540c:	e005      	b.n	800541a <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800540e:	2300      	movs	r3, #0
 8005410:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005412:	2301      	movs	r3, #1
 8005414:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005418:	bf00      	nop
    }

    if (pclk != 0U)
 800541a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800541c:	2b00      	cmp	r3, #0
 800541e:	d021      	beq.n	8005464 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005420:	697b      	ldr	r3, [r7, #20]
 8005422:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005424:	4a1a      	ldr	r2, [pc, #104]	@ (8005490 <UART_SetConfig+0x590>)
 8005426:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800542a:	461a      	mov	r2, r3
 800542c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800542e:	fbb3 f2f2 	udiv	r2, r3, r2
 8005432:	697b      	ldr	r3, [r7, #20]
 8005434:	685b      	ldr	r3, [r3, #4]
 8005436:	085b      	lsrs	r3, r3, #1
 8005438:	441a      	add	r2, r3
 800543a:	697b      	ldr	r3, [r7, #20]
 800543c:	685b      	ldr	r3, [r3, #4]
 800543e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005442:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005444:	6a3b      	ldr	r3, [r7, #32]
 8005446:	2b0f      	cmp	r3, #15
 8005448:	d909      	bls.n	800545e <UART_SetConfig+0x55e>
 800544a:	6a3b      	ldr	r3, [r7, #32]
 800544c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005450:	d205      	bcs.n	800545e <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005452:	6a3b      	ldr	r3, [r7, #32]
 8005454:	b29a      	uxth	r2, r3
 8005456:	697b      	ldr	r3, [r7, #20]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	60da      	str	r2, [r3, #12]
 800545c:	e002      	b.n	8005464 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800545e:	2301      	movs	r3, #1
 8005460:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005464:	697b      	ldr	r3, [r7, #20]
 8005466:	2201      	movs	r2, #1
 8005468:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800546c:	697b      	ldr	r3, [r7, #20]
 800546e:	2201      	movs	r2, #1
 8005470:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005474:	697b      	ldr	r3, [r7, #20]
 8005476:	2200      	movs	r2, #0
 8005478:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800547a:	697b      	ldr	r3, [r7, #20]
 800547c:	2200      	movs	r2, #0
 800547e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005480:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8005484:	4618      	mov	r0, r3
 8005486:	3730      	adds	r7, #48	@ 0x30
 8005488:	46bd      	mov	sp, r7
 800548a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800548e:	bf00      	nop
 8005490:	0800614c 	.word	0x0800614c
 8005494:	00f42400 	.word	0x00f42400

08005498 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005498:	b480      	push	{r7}
 800549a:	b083      	sub	sp, #12
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054a4:	f003 0308 	and.w	r3, r3, #8
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d00a      	beq.n	80054c2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	685b      	ldr	r3, [r3, #4]
 80054b2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	430a      	orrs	r2, r1
 80054c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054c6:	f003 0301 	and.w	r3, r3, #1
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d00a      	beq.n	80054e4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	685b      	ldr	r3, [r3, #4]
 80054d4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	430a      	orrs	r2, r1
 80054e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054e8:	f003 0302 	and.w	r3, r3, #2
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d00a      	beq.n	8005506 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	685b      	ldr	r3, [r3, #4]
 80054f6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	430a      	orrs	r2, r1
 8005504:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800550a:	f003 0304 	and.w	r3, r3, #4
 800550e:	2b00      	cmp	r3, #0
 8005510:	d00a      	beq.n	8005528 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	685b      	ldr	r3, [r3, #4]
 8005518:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	430a      	orrs	r2, r1
 8005526:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800552c:	f003 0310 	and.w	r3, r3, #16
 8005530:	2b00      	cmp	r3, #0
 8005532:	d00a      	beq.n	800554a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	689b      	ldr	r3, [r3, #8]
 800553a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	430a      	orrs	r2, r1
 8005548:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800554e:	f003 0320 	and.w	r3, r3, #32
 8005552:	2b00      	cmp	r3, #0
 8005554:	d00a      	beq.n	800556c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	689b      	ldr	r3, [r3, #8]
 800555c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	430a      	orrs	r2, r1
 800556a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005570:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005574:	2b00      	cmp	r3, #0
 8005576:	d01a      	beq.n	80055ae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	685b      	ldr	r3, [r3, #4]
 800557e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	430a      	orrs	r2, r1
 800558c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005592:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005596:	d10a      	bne.n	80055ae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	685b      	ldr	r3, [r3, #4]
 800559e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	430a      	orrs	r2, r1
 80055ac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d00a      	beq.n	80055d0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	685b      	ldr	r3, [r3, #4]
 80055c0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	430a      	orrs	r2, r1
 80055ce:	605a      	str	r2, [r3, #4]
  }
}
 80055d0:	bf00      	nop
 80055d2:	370c      	adds	r7, #12
 80055d4:	46bd      	mov	sp, r7
 80055d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055da:	4770      	bx	lr

080055dc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	b098      	sub	sp, #96	@ 0x60
 80055e0:	af02      	add	r7, sp, #8
 80055e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2200      	movs	r2, #0
 80055e8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80055ec:	f7fc fba2 	bl	8001d34 <HAL_GetTick>
 80055f0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f003 0308 	and.w	r3, r3, #8
 80055fc:	2b08      	cmp	r3, #8
 80055fe:	d12f      	bne.n	8005660 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005600:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005604:	9300      	str	r3, [sp, #0]
 8005606:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005608:	2200      	movs	r2, #0
 800560a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800560e:	6878      	ldr	r0, [r7, #4]
 8005610:	f000 f88e 	bl	8005730 <UART_WaitOnFlagUntilTimeout>
 8005614:	4603      	mov	r3, r0
 8005616:	2b00      	cmp	r3, #0
 8005618:	d022      	beq.n	8005660 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005620:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005622:	e853 3f00 	ldrex	r3, [r3]
 8005626:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005628:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800562a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800562e:	653b      	str	r3, [r7, #80]	@ 0x50
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	461a      	mov	r2, r3
 8005636:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005638:	647b      	str	r3, [r7, #68]	@ 0x44
 800563a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800563c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800563e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005640:	e841 2300 	strex	r3, r2, [r1]
 8005644:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005646:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005648:	2b00      	cmp	r3, #0
 800564a:	d1e6      	bne.n	800561a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2220      	movs	r2, #32
 8005650:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2200      	movs	r2, #0
 8005658:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800565c:	2303      	movs	r3, #3
 800565e:	e063      	b.n	8005728 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f003 0304 	and.w	r3, r3, #4
 800566a:	2b04      	cmp	r3, #4
 800566c:	d149      	bne.n	8005702 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800566e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005672:	9300      	str	r3, [sp, #0]
 8005674:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005676:	2200      	movs	r2, #0
 8005678:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800567c:	6878      	ldr	r0, [r7, #4]
 800567e:	f000 f857 	bl	8005730 <UART_WaitOnFlagUntilTimeout>
 8005682:	4603      	mov	r3, r0
 8005684:	2b00      	cmp	r3, #0
 8005686:	d03c      	beq.n	8005702 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800568e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005690:	e853 3f00 	ldrex	r3, [r3]
 8005694:	623b      	str	r3, [r7, #32]
   return(result);
 8005696:	6a3b      	ldr	r3, [r7, #32]
 8005698:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800569c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	461a      	mov	r2, r3
 80056a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80056a6:	633b      	str	r3, [r7, #48]	@ 0x30
 80056a8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056aa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80056ac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80056ae:	e841 2300 	strex	r3, r2, [r1]
 80056b2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80056b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d1e6      	bne.n	8005688 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	3308      	adds	r3, #8
 80056c0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056c2:	693b      	ldr	r3, [r7, #16]
 80056c4:	e853 3f00 	ldrex	r3, [r3]
 80056c8:	60fb      	str	r3, [r7, #12]
   return(result);
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	f023 0301 	bic.w	r3, r3, #1
 80056d0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	3308      	adds	r3, #8
 80056d8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80056da:	61fa      	str	r2, [r7, #28]
 80056dc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056de:	69b9      	ldr	r1, [r7, #24]
 80056e0:	69fa      	ldr	r2, [r7, #28]
 80056e2:	e841 2300 	strex	r3, r2, [r1]
 80056e6:	617b      	str	r3, [r7, #20]
   return(result);
 80056e8:	697b      	ldr	r3, [r7, #20]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d1e5      	bne.n	80056ba <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2220      	movs	r2, #32
 80056f2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2200      	movs	r2, #0
 80056fa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80056fe:	2303      	movs	r3, #3
 8005700:	e012      	b.n	8005728 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	2220      	movs	r2, #32
 8005706:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	2220      	movs	r2, #32
 800570e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2200      	movs	r2, #0
 8005716:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2200      	movs	r2, #0
 800571c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2200      	movs	r2, #0
 8005722:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005726:	2300      	movs	r3, #0
}
 8005728:	4618      	mov	r0, r3
 800572a:	3758      	adds	r7, #88	@ 0x58
 800572c:	46bd      	mov	sp, r7
 800572e:	bd80      	pop	{r7, pc}

08005730 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005730:	b580      	push	{r7, lr}
 8005732:	b084      	sub	sp, #16
 8005734:	af00      	add	r7, sp, #0
 8005736:	60f8      	str	r0, [r7, #12]
 8005738:	60b9      	str	r1, [r7, #8]
 800573a:	603b      	str	r3, [r7, #0]
 800573c:	4613      	mov	r3, r2
 800573e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005740:	e04f      	b.n	80057e2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005742:	69bb      	ldr	r3, [r7, #24]
 8005744:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005748:	d04b      	beq.n	80057e2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800574a:	f7fc faf3 	bl	8001d34 <HAL_GetTick>
 800574e:	4602      	mov	r2, r0
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	1ad3      	subs	r3, r2, r3
 8005754:	69ba      	ldr	r2, [r7, #24]
 8005756:	429a      	cmp	r2, r3
 8005758:	d302      	bcc.n	8005760 <UART_WaitOnFlagUntilTimeout+0x30>
 800575a:	69bb      	ldr	r3, [r7, #24]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d101      	bne.n	8005764 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005760:	2303      	movs	r3, #3
 8005762:	e04e      	b.n	8005802 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f003 0304 	and.w	r3, r3, #4
 800576e:	2b00      	cmp	r3, #0
 8005770:	d037      	beq.n	80057e2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005772:	68bb      	ldr	r3, [r7, #8]
 8005774:	2b80      	cmp	r3, #128	@ 0x80
 8005776:	d034      	beq.n	80057e2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005778:	68bb      	ldr	r3, [r7, #8]
 800577a:	2b40      	cmp	r3, #64	@ 0x40
 800577c:	d031      	beq.n	80057e2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	69db      	ldr	r3, [r3, #28]
 8005784:	f003 0308 	and.w	r3, r3, #8
 8005788:	2b08      	cmp	r3, #8
 800578a:	d110      	bne.n	80057ae <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	2208      	movs	r2, #8
 8005792:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005794:	68f8      	ldr	r0, [r7, #12]
 8005796:	f000 f838 	bl	800580a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	2208      	movs	r2, #8
 800579e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	2200      	movs	r2, #0
 80057a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80057aa:	2301      	movs	r3, #1
 80057ac:	e029      	b.n	8005802 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	69db      	ldr	r3, [r3, #28]
 80057b4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80057b8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80057bc:	d111      	bne.n	80057e2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80057c6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80057c8:	68f8      	ldr	r0, [r7, #12]
 80057ca:	f000 f81e 	bl	800580a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	2220      	movs	r2, #32
 80057d2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	2200      	movs	r2, #0
 80057da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80057de:	2303      	movs	r3, #3
 80057e0:	e00f      	b.n	8005802 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	69da      	ldr	r2, [r3, #28]
 80057e8:	68bb      	ldr	r3, [r7, #8]
 80057ea:	4013      	ands	r3, r2
 80057ec:	68ba      	ldr	r2, [r7, #8]
 80057ee:	429a      	cmp	r2, r3
 80057f0:	bf0c      	ite	eq
 80057f2:	2301      	moveq	r3, #1
 80057f4:	2300      	movne	r3, #0
 80057f6:	b2db      	uxtb	r3, r3
 80057f8:	461a      	mov	r2, r3
 80057fa:	79fb      	ldrb	r3, [r7, #7]
 80057fc:	429a      	cmp	r2, r3
 80057fe:	d0a0      	beq.n	8005742 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005800:	2300      	movs	r3, #0
}
 8005802:	4618      	mov	r0, r3
 8005804:	3710      	adds	r7, #16
 8005806:	46bd      	mov	sp, r7
 8005808:	bd80      	pop	{r7, pc}

0800580a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800580a:	b480      	push	{r7}
 800580c:	b095      	sub	sp, #84	@ 0x54
 800580e:	af00      	add	r7, sp, #0
 8005810:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005818:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800581a:	e853 3f00 	ldrex	r3, [r3]
 800581e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005820:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005822:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005826:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	461a      	mov	r2, r3
 800582e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005830:	643b      	str	r3, [r7, #64]	@ 0x40
 8005832:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005834:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005836:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005838:	e841 2300 	strex	r3, r2, [r1]
 800583c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800583e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005840:	2b00      	cmp	r3, #0
 8005842:	d1e6      	bne.n	8005812 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	3308      	adds	r3, #8
 800584a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800584c:	6a3b      	ldr	r3, [r7, #32]
 800584e:	e853 3f00 	ldrex	r3, [r3]
 8005852:	61fb      	str	r3, [r7, #28]
   return(result);
 8005854:	69fb      	ldr	r3, [r7, #28]
 8005856:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800585a:	f023 0301 	bic.w	r3, r3, #1
 800585e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	3308      	adds	r3, #8
 8005866:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005868:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800586a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800586c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800586e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005870:	e841 2300 	strex	r3, r2, [r1]
 8005874:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005876:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005878:	2b00      	cmp	r3, #0
 800587a:	d1e3      	bne.n	8005844 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005880:	2b01      	cmp	r3, #1
 8005882:	d118      	bne.n	80058b6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	e853 3f00 	ldrex	r3, [r3]
 8005890:	60bb      	str	r3, [r7, #8]
   return(result);
 8005892:	68bb      	ldr	r3, [r7, #8]
 8005894:	f023 0310 	bic.w	r3, r3, #16
 8005898:	647b      	str	r3, [r7, #68]	@ 0x44
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	461a      	mov	r2, r3
 80058a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80058a2:	61bb      	str	r3, [r7, #24]
 80058a4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058a6:	6979      	ldr	r1, [r7, #20]
 80058a8:	69ba      	ldr	r2, [r7, #24]
 80058aa:	e841 2300 	strex	r3, r2, [r1]
 80058ae:	613b      	str	r3, [r7, #16]
   return(result);
 80058b0:	693b      	ldr	r3, [r7, #16]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d1e6      	bne.n	8005884 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2220      	movs	r2, #32
 80058ba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2200      	movs	r2, #0
 80058c2:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2200      	movs	r2, #0
 80058c8:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80058ca:	bf00      	nop
 80058cc:	3754      	adds	r7, #84	@ 0x54
 80058ce:	46bd      	mov	sp, r7
 80058d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d4:	4770      	bx	lr

080058d6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80058d6:	b480      	push	{r7}
 80058d8:	b085      	sub	sp, #20
 80058da:	af00      	add	r7, sp, #0
 80058dc:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80058e4:	2b01      	cmp	r3, #1
 80058e6:	d101      	bne.n	80058ec <HAL_UARTEx_DisableFifoMode+0x16>
 80058e8:	2302      	movs	r3, #2
 80058ea:	e027      	b.n	800593c <HAL_UARTEx_DisableFifoMode+0x66>
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2201      	movs	r2, #1
 80058f0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2224      	movs	r2, #36	@ 0x24
 80058f8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	681a      	ldr	r2, [r3, #0]
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f022 0201 	bic.w	r2, r2, #1
 8005912:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800591a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2200      	movs	r2, #0
 8005920:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	68fa      	ldr	r2, [r7, #12]
 8005928:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2220      	movs	r2, #32
 800592e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	2200      	movs	r2, #0
 8005936:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800593a:	2300      	movs	r3, #0
}
 800593c:	4618      	mov	r0, r3
 800593e:	3714      	adds	r7, #20
 8005940:	46bd      	mov	sp, r7
 8005942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005946:	4770      	bx	lr

08005948 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005948:	b580      	push	{r7, lr}
 800594a:	b084      	sub	sp, #16
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
 8005950:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005958:	2b01      	cmp	r3, #1
 800595a:	d101      	bne.n	8005960 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800595c:	2302      	movs	r3, #2
 800595e:	e02d      	b.n	80059bc <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2201      	movs	r2, #1
 8005964:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2224      	movs	r2, #36	@ 0x24
 800596c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	681a      	ldr	r2, [r3, #0]
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f022 0201 	bic.w	r2, r2, #1
 8005986:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	689b      	ldr	r3, [r3, #8]
 800598e:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	683a      	ldr	r2, [r7, #0]
 8005998:	430a      	orrs	r2, r1
 800599a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800599c:	6878      	ldr	r0, [r7, #4]
 800599e:	f000 f84f 	bl	8005a40 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	68fa      	ldr	r2, [r7, #12]
 80059a8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	2220      	movs	r2, #32
 80059ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2200      	movs	r2, #0
 80059b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80059ba:	2300      	movs	r3, #0
}
 80059bc:	4618      	mov	r0, r3
 80059be:	3710      	adds	r7, #16
 80059c0:	46bd      	mov	sp, r7
 80059c2:	bd80      	pop	{r7, pc}

080059c4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b084      	sub	sp, #16
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
 80059cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80059d4:	2b01      	cmp	r3, #1
 80059d6:	d101      	bne.n	80059dc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80059d8:	2302      	movs	r3, #2
 80059da:	e02d      	b.n	8005a38 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2201      	movs	r2, #1
 80059e0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2224      	movs	r2, #36	@ 0x24
 80059e8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	681a      	ldr	r2, [r3, #0]
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f022 0201 	bic.w	r2, r2, #1
 8005a02:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	689b      	ldr	r3, [r3, #8]
 8005a0a:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	683a      	ldr	r2, [r7, #0]
 8005a14:	430a      	orrs	r2, r1
 8005a16:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005a18:	6878      	ldr	r0, [r7, #4]
 8005a1a:	f000 f811 	bl	8005a40 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	68fa      	ldr	r2, [r7, #12]
 8005a24:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2220      	movs	r2, #32
 8005a2a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2200      	movs	r2, #0
 8005a32:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005a36:	2300      	movs	r3, #0
}
 8005a38:	4618      	mov	r0, r3
 8005a3a:	3710      	adds	r7, #16
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	bd80      	pop	{r7, pc}

08005a40 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005a40:	b480      	push	{r7}
 8005a42:	b085      	sub	sp, #20
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d108      	bne.n	8005a62 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2201      	movs	r2, #1
 8005a54:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2201      	movs	r2, #1
 8005a5c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005a60:	e031      	b.n	8005ac6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005a62:	2308      	movs	r3, #8
 8005a64:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005a66:	2308      	movs	r3, #8
 8005a68:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	689b      	ldr	r3, [r3, #8]
 8005a70:	0e5b      	lsrs	r3, r3, #25
 8005a72:	b2db      	uxtb	r3, r3
 8005a74:	f003 0307 	and.w	r3, r3, #7
 8005a78:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	689b      	ldr	r3, [r3, #8]
 8005a80:	0f5b      	lsrs	r3, r3, #29
 8005a82:	b2db      	uxtb	r3, r3
 8005a84:	f003 0307 	and.w	r3, r3, #7
 8005a88:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005a8a:	7bbb      	ldrb	r3, [r7, #14]
 8005a8c:	7b3a      	ldrb	r2, [r7, #12]
 8005a8e:	4911      	ldr	r1, [pc, #68]	@ (8005ad4 <UARTEx_SetNbDataToProcess+0x94>)
 8005a90:	5c8a      	ldrb	r2, [r1, r2]
 8005a92:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005a96:	7b3a      	ldrb	r2, [r7, #12]
 8005a98:	490f      	ldr	r1, [pc, #60]	@ (8005ad8 <UARTEx_SetNbDataToProcess+0x98>)
 8005a9a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005a9c:	fb93 f3f2 	sdiv	r3, r3, r2
 8005aa0:	b29a      	uxth	r2, r3
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005aa8:	7bfb      	ldrb	r3, [r7, #15]
 8005aaa:	7b7a      	ldrb	r2, [r7, #13]
 8005aac:	4909      	ldr	r1, [pc, #36]	@ (8005ad4 <UARTEx_SetNbDataToProcess+0x94>)
 8005aae:	5c8a      	ldrb	r2, [r1, r2]
 8005ab0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005ab4:	7b7a      	ldrb	r2, [r7, #13]
 8005ab6:	4908      	ldr	r1, [pc, #32]	@ (8005ad8 <UARTEx_SetNbDataToProcess+0x98>)
 8005ab8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005aba:	fb93 f3f2 	sdiv	r3, r3, r2
 8005abe:	b29a      	uxth	r2, r3
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8005ac6:	bf00      	nop
 8005ac8:	3714      	adds	r7, #20
 8005aca:	46bd      	mov	sp, r7
 8005acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad0:	4770      	bx	lr
 8005ad2:	bf00      	nop
 8005ad4:	08006164 	.word	0x08006164
 8005ad8:	0800616c 	.word	0x0800616c

08005adc <MotorDriver_Init>:
		MotorDriver_Structure *Mx,
		float cpu_freq,
		float pwm_freq,
		bool isCHN
)
{
 8005adc:	b5b0      	push	{r4, r5, r7, lr}
 8005ade:	b086      	sub	sp, #24
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	60f8      	str	r0, [r7, #12]
 8005ae4:	ed87 0a02 	vstr	s0, [r7, #8]
 8005ae8:	edc7 0a01 	vstr	s1, [r7, #4]
 8005aec:	460b      	mov	r3, r1
 8005aee:	70fb      	strb	r3, [r7, #3]
	HAL_TIM_Base_Start(Mx->htimx);
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	4618      	mov	r0, r3
 8005af6:	f7fd fde9 	bl	80036cc <HAL_TIM_Base_Start>
	if (isCHN) HAL_TIMEx_PWMN_Start(Mx->htimx, Mx->channelx);
 8005afa:	78fb      	ldrb	r3, [r7, #3]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d008      	beq.n	8005b12 <MotorDriver_Init+0x36>
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	681a      	ldr	r2, [r3, #0]
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	685b      	ldr	r3, [r3, #4]
 8005b08:	4619      	mov	r1, r3
 8005b0a:	4610      	mov	r0, r2
 8005b0c:	f7fe ffc0 	bl	8004a90 <HAL_TIMEx_PWMN_Start>
 8005b10:	e007      	b.n	8005b22 <MotorDriver_Init+0x46>
	else HAL_TIM_PWM_Start(Mx->htimx, Mx->channelx);
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681a      	ldr	r2, [r3, #0]
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	685b      	ldr	r3, [r3, #4]
 8005b1a:	4619      	mov	r1, r3
 8005b1c:	4610      	mov	r0, r2
 8005b1e:	f7fd fe99 	bl	8003854 <HAL_TIM_PWM_Start>

	if (pwm_freq == 0)
 8005b22:	edd7 7a01 	vldr	s15, [r7, #4]
 8005b26:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005b2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b2e:	d138      	bne.n	8005ba2 <MotorDriver_Init+0xc6>
	{
		__HAL_TIM_SET_COMPARE(Mx->htimx, Mx->channelx, 0);
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	685b      	ldr	r3, [r3, #4]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d105      	bne.n	8005b44 <MotorDriver_Init+0x68>
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	2200      	movs	r2, #0
 8005b40:	635a      	str	r2, [r3, #52]	@ 0x34
 8005b42:	e02c      	b.n	8005b9e <MotorDriver_Init+0xc2>
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	685b      	ldr	r3, [r3, #4]
 8005b48:	2b04      	cmp	r3, #4
 8005b4a:	d105      	bne.n	8005b58 <MotorDriver_Init+0x7c>
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	681a      	ldr	r2, [r3, #0]
 8005b52:	2300      	movs	r3, #0
 8005b54:	6393      	str	r3, [r2, #56]	@ 0x38
 8005b56:	e022      	b.n	8005b9e <MotorDriver_Init+0xc2>
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	685b      	ldr	r3, [r3, #4]
 8005b5c:	2b08      	cmp	r3, #8
 8005b5e:	d105      	bne.n	8005b6c <MotorDriver_Init+0x90>
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	681a      	ldr	r2, [r3, #0]
 8005b66:	2300      	movs	r3, #0
 8005b68:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8005b6a:	e018      	b.n	8005b9e <MotorDriver_Init+0xc2>
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	685b      	ldr	r3, [r3, #4]
 8005b70:	2b0c      	cmp	r3, #12
 8005b72:	d105      	bne.n	8005b80 <MotorDriver_Init+0xa4>
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	681a      	ldr	r2, [r3, #0]
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	6413      	str	r3, [r2, #64]	@ 0x40
 8005b7e:	e00e      	b.n	8005b9e <MotorDriver_Init+0xc2>
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	685b      	ldr	r3, [r3, #4]
 8005b84:	2b10      	cmp	r3, #16
 8005b86:	d105      	bne.n	8005b94 <MotorDriver_Init+0xb8>
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	681a      	ldr	r2, [r3, #0]
 8005b8e:	2300      	movs	r3, #0
 8005b90:	6493      	str	r3, [r2, #72]	@ 0x48
 8005b92:	e004      	b.n	8005b9e <MotorDriver_Init+0xc2>
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	681a      	ldr	r2, [r3, #0]
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	64d3      	str	r3, [r2, #76]	@ 0x4c
		return -1;
 8005b9e:	23ff      	movs	r3, #255	@ 0xff
 8005ba0:	e056      	b.n	8005c50 <MotorDriver_Init+0x174>
	} else if (pwm_freq >= cpu_freq / 2.0) return -1;
 8005ba2:	6878      	ldr	r0, [r7, #4]
 8005ba4:	f7fa fc9c 	bl	80004e0 <__aeabi_f2d>
 8005ba8:	4604      	mov	r4, r0
 8005baa:	460d      	mov	r5, r1
 8005bac:	68b8      	ldr	r0, [r7, #8]
 8005bae:	f7fa fc97 	bl	80004e0 <__aeabi_f2d>
 8005bb2:	f04f 0200 	mov.w	r2, #0
 8005bb6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8005bba:	f7fa fe13 	bl	80007e4 <__aeabi_ddiv>
 8005bbe:	4602      	mov	r2, r0
 8005bc0:	460b      	mov	r3, r1
 8005bc2:	4620      	mov	r0, r4
 8005bc4:	4629      	mov	r1, r5
 8005bc6:	f7fa ff69 	bl	8000a9c <__aeabi_dcmpge>
 8005bca:	4603      	mov	r3, r0
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d001      	beq.n	8005bd4 <MotorDriver_Init+0xf8>
 8005bd0:	23ff      	movs	r3, #255	@ 0xff
 8005bd2:	e03d      	b.n	8005c50 <MotorDriver_Init+0x174>
	uint32_t period_cyc = (uint32_t) (cpu_freq / pwm_freq);
 8005bd4:	edd7 6a02 	vldr	s13, [r7, #8]
 8005bd8:	ed97 7a01 	vldr	s14, [r7, #4]
 8005bdc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005be0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005be4:	ee17 3a90 	vmov	r3, s15
 8005be8:	617b      	str	r3, [r7, #20]
	uint16_t prescaler = (uint16_t) (period_cyc / 65535 + 1);
 8005bea:	697b      	ldr	r3, [r7, #20]
 8005bec:	4a1a      	ldr	r2, [pc, #104]	@ (8005c58 <MotorDriver_Init+0x17c>)
 8005bee:	fba2 2303 	umull	r2, r3, r2, r3
 8005bf2:	0bdb      	lsrs	r3, r3, #15
 8005bf4:	b29b      	uxth	r3, r3
 8005bf6:	3301      	adds	r3, #1
 8005bf8:	827b      	strh	r3, [r7, #18]
	uint16_t overflow = (uint16_t) ((period_cyc + (prescaler / 2)) / prescaler);
 8005bfa:	8a7b      	ldrh	r3, [r7, #18]
 8005bfc:	085b      	lsrs	r3, r3, #1
 8005bfe:	b29b      	uxth	r3, r3
 8005c00:	461a      	mov	r2, r3
 8005c02:	697b      	ldr	r3, [r7, #20]
 8005c04:	441a      	add	r2, r3
 8005c06:	8a7b      	ldrh	r3, [r7, #18]
 8005c08:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c0c:	823b      	strh	r3, [r7, #16]
	__HAL_TIM_SET_PRESCALER(Mx->htimx, prescaler);
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	8a7a      	ldrh	r2, [r7, #18]
 8005c16:	629a      	str	r2, [r3, #40]	@ 0x28
	__HAL_TIM_SET_AUTORELOAD(Mx->htimx, overflow);
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	8a3a      	ldrh	r2, [r7, #16]
 8005c20:	62da      	str	r2, [r3, #44]	@ 0x2c
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	8a3a      	ldrh	r2, [r7, #16]
 8005c28:	60da      	str	r2, [r3, #12]
	Mx->gain = overflow / 100.0;
 8005c2a:	8a3b      	ldrh	r3, [r7, #16]
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	f7fa fc45 	bl	80004bc <__aeabi_i2d>
 8005c32:	f04f 0200 	mov.w	r2, #0
 8005c36:	4b09      	ldr	r3, [pc, #36]	@ (8005c5c <MotorDriver_Init+0x180>)
 8005c38:	f7fa fdd4 	bl	80007e4 <__aeabi_ddiv>
 8005c3c:	4602      	mov	r2, r0
 8005c3e:	460b      	mov	r3, r1
 8005c40:	4610      	mov	r0, r2
 8005c42:	4619      	mov	r1, r3
 8005c44:	f7fa ff5e 	bl	8000b04 <__aeabi_d2f>
 8005c48:	4602      	mov	r2, r0
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	611a      	str	r2, [r3, #16]
	return 0;
 8005c4e:	2300      	movs	r3, #0
}
 8005c50:	4618      	mov	r0, r3
 8005c52:	3718      	adds	r7, #24
 8005c54:	46bd      	mov	sp, r7
 8005c56:	bdb0      	pop	{r4, r5, r7, pc}
 8005c58:	80008001 	.word	0x80008001
 8005c5c:	40590000 	.word	0x40590000

08005c60 <MotorDriver_Write>:
void MotorDriver_Write(
		MotorDriver_Structure *Mx,
		float duty,
		bool reverse
)
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b086      	sub	sp, #24
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	60f8      	str	r0, [r7, #12]
 8005c68:	ed87 0a02 	vstr	s0, [r7, #8]
 8005c6c:	460b      	mov	r3, r1
 8005c6e:	71fb      	strb	r3, [r7, #7]
	GPIO_PinState dir_state = GPIO_PIN_RESET;
 8005c70:	2300      	movs	r3, #0
 8005c72:	75fb      	strb	r3, [r7, #23]
	float pwm_duty = Mx->gain * duty;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	edd3 7a04 	vldr	s15, [r3, #16]
 8005c7a:	ed97 7a02 	vldr	s14, [r7, #8]
 8005c7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c82:	edc7 7a04 	vstr	s15, [r7, #16]
	if (duty < 0)
 8005c86:	edd7 7a02 	vldr	s15, [r7, #8]
 8005c8a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005c8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c92:	d50c      	bpl.n	8005cae <MotorDriver_Write+0x4e>
	{
		pwm_duty *= -1;
 8005c94:	edd7 7a04 	vldr	s15, [r7, #16]
 8005c98:	eef1 7a67 	vneg.f32	s15, s15
 8005c9c:	edc7 7a04 	vstr	s15, [r7, #16]
		dir_state = !dir_state;
 8005ca0:	7dfb      	ldrb	r3, [r7, #23]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	bf0c      	ite	eq
 8005ca6:	2301      	moveq	r3, #1
 8005ca8:	2300      	movne	r3, #0
 8005caa:	b2db      	uxtb	r3, r3
 8005cac:	75fb      	strb	r3, [r7, #23]
	}
	if (reverse) dir_state = !dir_state;
 8005cae:	79fb      	ldrb	r3, [r7, #7]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d006      	beq.n	8005cc2 <MotorDriver_Write+0x62>
 8005cb4:	7dfb      	ldrb	r3, [r7, #23]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	bf0c      	ite	eq
 8005cba:	2301      	moveq	r3, #1
 8005cbc:	2300      	movne	r3, #0
 8005cbe:	b2db      	uxtb	r3, r3
 8005cc0:	75fb      	strb	r3, [r7, #23]
	__HAL_TIM_SET_COMPARE(Mx->htimx, Mx->htimx, (uint16_t) (pwm_duty));
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d10b      	bne.n	8005ce2 <MotorDriver_Write+0x82>
 8005cca:	edd7 7a04 	vldr	s15, [r7, #16]
 8005cce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005cd2:	ee17 3a90 	vmov	r3, s15
 8005cd6:	b29a      	uxth	r2, r3
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	635a      	str	r2, [r3, #52]	@ 0x34
 8005ce0:	e04f      	b.n	8005d82 <MotorDriver_Write+0x122>
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	2b04      	cmp	r3, #4
 8005ce8:	d10c      	bne.n	8005d04 <MotorDriver_Write+0xa4>
 8005cea:	edd7 7a04 	vldr	s15, [r7, #16]
 8005cee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005cf2:	ee17 3a90 	vmov	r3, s15
 8005cf6:	b299      	uxth	r1, r3
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	681a      	ldr	r2, [r3, #0]
 8005cfe:	460b      	mov	r3, r1
 8005d00:	6393      	str	r3, [r2, #56]	@ 0x38
 8005d02:	e03e      	b.n	8005d82 <MotorDriver_Write+0x122>
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	2b08      	cmp	r3, #8
 8005d0a:	d10c      	bne.n	8005d26 <MotorDriver_Write+0xc6>
 8005d0c:	edd7 7a04 	vldr	s15, [r7, #16]
 8005d10:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005d14:	ee17 3a90 	vmov	r3, s15
 8005d18:	b299      	uxth	r1, r3
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	681a      	ldr	r2, [r3, #0]
 8005d20:	460b      	mov	r3, r1
 8005d22:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8005d24:	e02d      	b.n	8005d82 <MotorDriver_Write+0x122>
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	2b0c      	cmp	r3, #12
 8005d2c:	d10c      	bne.n	8005d48 <MotorDriver_Write+0xe8>
 8005d2e:	edd7 7a04 	vldr	s15, [r7, #16]
 8005d32:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005d36:	ee17 3a90 	vmov	r3, s15
 8005d3a:	b299      	uxth	r1, r3
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	681a      	ldr	r2, [r3, #0]
 8005d42:	460b      	mov	r3, r1
 8005d44:	6413      	str	r3, [r2, #64]	@ 0x40
 8005d46:	e01c      	b.n	8005d82 <MotorDriver_Write+0x122>
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	2b10      	cmp	r3, #16
 8005d4e:	d10c      	bne.n	8005d6a <MotorDriver_Write+0x10a>
 8005d50:	edd7 7a04 	vldr	s15, [r7, #16]
 8005d54:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005d58:	ee17 3a90 	vmov	r3, s15
 8005d5c:	b299      	uxth	r1, r3
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	681a      	ldr	r2, [r3, #0]
 8005d64:	460b      	mov	r3, r1
 8005d66:	6493      	str	r3, [r2, #72]	@ 0x48
 8005d68:	e00b      	b.n	8005d82 <MotorDriver_Write+0x122>
 8005d6a:	edd7 7a04 	vldr	s15, [r7, #16]
 8005d6e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005d72:	ee17 3a90 	vmov	r3, s15
 8005d76:	b299      	uxth	r1, r3
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	681a      	ldr	r2, [r3, #0]
 8005d7e:	460b      	mov	r3, r1
 8005d80:	64d3      	str	r3, [r2, #76]	@ 0x4c
	HAL_GPIO_WritePin(Mx->port, Mx->pin, dir_state);
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	6898      	ldr	r0, [r3, #8]
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	899b      	ldrh	r3, [r3, #12]
 8005d8a:	7dfa      	ldrb	r2, [r7, #23]
 8005d8c:	4619      	mov	r1, r3
 8005d8e:	f7fc fa65 	bl	800225c <HAL_GPIO_WritePin>
}
 8005d92:	bf00      	nop
 8005d94:	3718      	adds	r7, #24
 8005d96:	46bd      	mov	sp, r7
 8005d98:	bd80      	pop	{r7, pc}
 8005d9a:	0000      	movs	r0, r0
 8005d9c:	0000      	movs	r0, r0
	...

08005da0 <PWMWrite>:
#include "pwm_freq.h"

#define CPU_FREQ 170.0 * 1.0e6

uint8_t PWMWrite(TIM_HandleTypeDef* htimx, uint16_t tim_chx, float freq, float percent_duty)
{
 8005da0:	b5b0      	push	{r4, r5, r7, lr}
 8005da2:	b086      	sub	sp, #24
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	60f8      	str	r0, [r7, #12]
 8005da8:	460b      	mov	r3, r1
 8005daa:	ed87 0a01 	vstr	s0, [r7, #4]
 8005dae:	edc7 0a00 	vstr	s1, [r7]
 8005db2:	817b      	strh	r3, [r7, #10]
	if (freq == 0)
 8005db4:	edd7 7a01 	vldr	s15, [r7, #4]
 8005db8:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005dbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005dc0:	d12d      	bne.n	8005e1e <PWMWrite+0x7e>
	{
		__HAL_TIM_SET_COMPARE(htimx, tim_chx, 0);
 8005dc2:	897b      	ldrh	r3, [r7, #10]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d104      	bne.n	8005dd2 <PWMWrite+0x32>
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	2200      	movs	r2, #0
 8005dce:	635a      	str	r2, [r3, #52]	@ 0x34
 8005dd0:	e023      	b.n	8005e1a <PWMWrite+0x7a>
 8005dd2:	897b      	ldrh	r3, [r7, #10]
 8005dd4:	2b04      	cmp	r3, #4
 8005dd6:	d104      	bne.n	8005de2 <PWMWrite+0x42>
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	681a      	ldr	r2, [r3, #0]
 8005ddc:	2300      	movs	r3, #0
 8005dde:	6393      	str	r3, [r2, #56]	@ 0x38
 8005de0:	e01b      	b.n	8005e1a <PWMWrite+0x7a>
 8005de2:	897b      	ldrh	r3, [r7, #10]
 8005de4:	2b08      	cmp	r3, #8
 8005de6:	d104      	bne.n	8005df2 <PWMWrite+0x52>
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	681a      	ldr	r2, [r3, #0]
 8005dec:	2300      	movs	r3, #0
 8005dee:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8005df0:	e013      	b.n	8005e1a <PWMWrite+0x7a>
 8005df2:	897b      	ldrh	r3, [r7, #10]
 8005df4:	2b0c      	cmp	r3, #12
 8005df6:	d104      	bne.n	8005e02 <PWMWrite+0x62>
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	681a      	ldr	r2, [r3, #0]
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	6413      	str	r3, [r2, #64]	@ 0x40
 8005e00:	e00b      	b.n	8005e1a <PWMWrite+0x7a>
 8005e02:	897b      	ldrh	r3, [r7, #10]
 8005e04:	2b10      	cmp	r3, #16
 8005e06:	d104      	bne.n	8005e12 <PWMWrite+0x72>
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	681a      	ldr	r2, [r3, #0]
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	6493      	str	r3, [r2, #72]	@ 0x48
 8005e10:	e003      	b.n	8005e1a <PWMWrite+0x7a>
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681a      	ldr	r2, [r3, #0]
 8005e16:	2300      	movs	r3, #0
 8005e18:	64d3      	str	r3, [r2, #76]	@ 0x4c
		return 0;
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	e143      	b.n	80060a6 <PWMWrite+0x306>
	} else if (freq >= CPU_FREQ / 2.0) return -1;
 8005e1e:	edd7 7a01 	vldr	s15, [r7, #4]
 8005e22:	ed9f 7aa5 	vldr	s14, [pc, #660]	@ 80060b8 <PWMWrite+0x318>
 8005e26:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005e2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e2e:	db01      	blt.n	8005e34 <PWMWrite+0x94>
 8005e30:	23ff      	movs	r3, #255	@ 0xff
 8005e32:	e138      	b.n	80060a6 <PWMWrite+0x306>
	uint32_t period_cyc = (uint32_t) (CPU_FREQ / freq);
 8005e34:	6878      	ldr	r0, [r7, #4]
 8005e36:	f7fa fb53 	bl	80004e0 <__aeabi_f2d>
 8005e3a:	4602      	mov	r2, r0
 8005e3c:	460b      	mov	r3, r1
 8005e3e:	a19c      	add	r1, pc, #624	@ (adr r1, 80060b0 <PWMWrite+0x310>)
 8005e40:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005e44:	f7fa fcce 	bl	80007e4 <__aeabi_ddiv>
 8005e48:	4602      	mov	r2, r0
 8005e4a:	460b      	mov	r3, r1
 8005e4c:	4610      	mov	r0, r2
 8005e4e:	4619      	mov	r1, r3
 8005e50:	f7fa fe38 	bl	8000ac4 <__aeabi_d2uiz>
 8005e54:	4603      	mov	r3, r0
 8005e56:	617b      	str	r3, [r7, #20]
	uint16_t prescaler = (uint16_t) (period_cyc / 65535 + 1);
 8005e58:	697b      	ldr	r3, [r7, #20]
 8005e5a:	4a98      	ldr	r2, [pc, #608]	@ (80060bc <PWMWrite+0x31c>)
 8005e5c:	fba2 2303 	umull	r2, r3, r2, r3
 8005e60:	0bdb      	lsrs	r3, r3, #15
 8005e62:	b29b      	uxth	r3, r3
 8005e64:	3301      	adds	r3, #1
 8005e66:	827b      	strh	r3, [r7, #18]
	uint16_t overflow = (uint16_t) ((period_cyc + (prescaler / 2)) / prescaler);
 8005e68:	8a7b      	ldrh	r3, [r7, #18]
 8005e6a:	085b      	lsrs	r3, r3, #1
 8005e6c:	b29b      	uxth	r3, r3
 8005e6e:	461a      	mov	r2, r3
 8005e70:	697b      	ldr	r3, [r7, #20]
 8005e72:	441a      	add	r2, r3
 8005e74:	8a7b      	ldrh	r3, [r7, #18]
 8005e76:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e7a:	823b      	strh	r3, [r7, #16]
	__HAL_TIM_SET_PRESCALER(htimx, prescaler);
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	8a7a      	ldrh	r2, [r7, #18]
 8005e82:	629a      	str	r2, [r3, #40]	@ 0x28
	__HAL_TIM_SET_AUTORELOAD(htimx, overflow);
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	8a3a      	ldrh	r2, [r7, #16]
 8005e8a:	62da      	str	r2, [r3, #44]	@ 0x2c
 8005e8c:	8a3a      	ldrh	r2, [r7, #16]
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(htimx, tim_chx, (uint16_t) (overflow * fabs(percent_duty) / 100.0));
 8005e92:	897b      	ldrh	r3, [r7, #10]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d128      	bne.n	8005eea <PWMWrite+0x14a>
 8005e98:	8a3b      	ldrh	r3, [r7, #16]
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	f7fa fb0e 	bl	80004bc <__aeabi_i2d>
 8005ea0:	4604      	mov	r4, r0
 8005ea2:	460d      	mov	r5, r1
 8005ea4:	edd7 7a00 	vldr	s15, [r7]
 8005ea8:	eef0 7ae7 	vabs.f32	s15, s15
 8005eac:	ee17 0a90 	vmov	r0, s15
 8005eb0:	f7fa fb16 	bl	80004e0 <__aeabi_f2d>
 8005eb4:	4602      	mov	r2, r0
 8005eb6:	460b      	mov	r3, r1
 8005eb8:	4620      	mov	r0, r4
 8005eba:	4629      	mov	r1, r5
 8005ebc:	f7fa fb68 	bl	8000590 <__aeabi_dmul>
 8005ec0:	4602      	mov	r2, r0
 8005ec2:	460b      	mov	r3, r1
 8005ec4:	4610      	mov	r0, r2
 8005ec6:	4619      	mov	r1, r3
 8005ec8:	f04f 0200 	mov.w	r2, #0
 8005ecc:	4b7c      	ldr	r3, [pc, #496]	@ (80060c0 <PWMWrite+0x320>)
 8005ece:	f7fa fc89 	bl	80007e4 <__aeabi_ddiv>
 8005ed2:	4602      	mov	r2, r0
 8005ed4:	460b      	mov	r3, r1
 8005ed6:	4610      	mov	r0, r2
 8005ed8:	4619      	mov	r1, r3
 8005eda:	f7fa fdf3 	bl	8000ac4 <__aeabi_d2uiz>
 8005ede:	4603      	mov	r3, r0
 8005ee0:	b29a      	uxth	r2, r3
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	635a      	str	r2, [r3, #52]	@ 0x34
 8005ee8:	e0dc      	b.n	80060a4 <PWMWrite+0x304>
 8005eea:	897b      	ldrh	r3, [r7, #10]
 8005eec:	2b04      	cmp	r3, #4
 8005eee:	d129      	bne.n	8005f44 <PWMWrite+0x1a4>
 8005ef0:	8a3b      	ldrh	r3, [r7, #16]
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	f7fa fae2 	bl	80004bc <__aeabi_i2d>
 8005ef8:	4604      	mov	r4, r0
 8005efa:	460d      	mov	r5, r1
 8005efc:	edd7 7a00 	vldr	s15, [r7]
 8005f00:	eef0 7ae7 	vabs.f32	s15, s15
 8005f04:	ee17 0a90 	vmov	r0, s15
 8005f08:	f7fa faea 	bl	80004e0 <__aeabi_f2d>
 8005f0c:	4602      	mov	r2, r0
 8005f0e:	460b      	mov	r3, r1
 8005f10:	4620      	mov	r0, r4
 8005f12:	4629      	mov	r1, r5
 8005f14:	f7fa fb3c 	bl	8000590 <__aeabi_dmul>
 8005f18:	4602      	mov	r2, r0
 8005f1a:	460b      	mov	r3, r1
 8005f1c:	4610      	mov	r0, r2
 8005f1e:	4619      	mov	r1, r3
 8005f20:	f04f 0200 	mov.w	r2, #0
 8005f24:	4b66      	ldr	r3, [pc, #408]	@ (80060c0 <PWMWrite+0x320>)
 8005f26:	f7fa fc5d 	bl	80007e4 <__aeabi_ddiv>
 8005f2a:	4602      	mov	r2, r0
 8005f2c:	460b      	mov	r3, r1
 8005f2e:	4610      	mov	r0, r2
 8005f30:	4619      	mov	r1, r3
 8005f32:	f7fa fdc7 	bl	8000ac4 <__aeabi_d2uiz>
 8005f36:	4603      	mov	r3, r0
 8005f38:	b299      	uxth	r1, r3
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	681a      	ldr	r2, [r3, #0]
 8005f3e:	460b      	mov	r3, r1
 8005f40:	6393      	str	r3, [r2, #56]	@ 0x38
 8005f42:	e0af      	b.n	80060a4 <PWMWrite+0x304>
 8005f44:	897b      	ldrh	r3, [r7, #10]
 8005f46:	2b08      	cmp	r3, #8
 8005f48:	d129      	bne.n	8005f9e <PWMWrite+0x1fe>
 8005f4a:	8a3b      	ldrh	r3, [r7, #16]
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	f7fa fab5 	bl	80004bc <__aeabi_i2d>
 8005f52:	4604      	mov	r4, r0
 8005f54:	460d      	mov	r5, r1
 8005f56:	edd7 7a00 	vldr	s15, [r7]
 8005f5a:	eef0 7ae7 	vabs.f32	s15, s15
 8005f5e:	ee17 0a90 	vmov	r0, s15
 8005f62:	f7fa fabd 	bl	80004e0 <__aeabi_f2d>
 8005f66:	4602      	mov	r2, r0
 8005f68:	460b      	mov	r3, r1
 8005f6a:	4620      	mov	r0, r4
 8005f6c:	4629      	mov	r1, r5
 8005f6e:	f7fa fb0f 	bl	8000590 <__aeabi_dmul>
 8005f72:	4602      	mov	r2, r0
 8005f74:	460b      	mov	r3, r1
 8005f76:	4610      	mov	r0, r2
 8005f78:	4619      	mov	r1, r3
 8005f7a:	f04f 0200 	mov.w	r2, #0
 8005f7e:	4b50      	ldr	r3, [pc, #320]	@ (80060c0 <PWMWrite+0x320>)
 8005f80:	f7fa fc30 	bl	80007e4 <__aeabi_ddiv>
 8005f84:	4602      	mov	r2, r0
 8005f86:	460b      	mov	r3, r1
 8005f88:	4610      	mov	r0, r2
 8005f8a:	4619      	mov	r1, r3
 8005f8c:	f7fa fd9a 	bl	8000ac4 <__aeabi_d2uiz>
 8005f90:	4603      	mov	r3, r0
 8005f92:	b299      	uxth	r1, r3
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	681a      	ldr	r2, [r3, #0]
 8005f98:	460b      	mov	r3, r1
 8005f9a:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8005f9c:	e082      	b.n	80060a4 <PWMWrite+0x304>
 8005f9e:	897b      	ldrh	r3, [r7, #10]
 8005fa0:	2b0c      	cmp	r3, #12
 8005fa2:	d129      	bne.n	8005ff8 <PWMWrite+0x258>
 8005fa4:	8a3b      	ldrh	r3, [r7, #16]
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	f7fa fa88 	bl	80004bc <__aeabi_i2d>
 8005fac:	4604      	mov	r4, r0
 8005fae:	460d      	mov	r5, r1
 8005fb0:	edd7 7a00 	vldr	s15, [r7]
 8005fb4:	eef0 7ae7 	vabs.f32	s15, s15
 8005fb8:	ee17 0a90 	vmov	r0, s15
 8005fbc:	f7fa fa90 	bl	80004e0 <__aeabi_f2d>
 8005fc0:	4602      	mov	r2, r0
 8005fc2:	460b      	mov	r3, r1
 8005fc4:	4620      	mov	r0, r4
 8005fc6:	4629      	mov	r1, r5
 8005fc8:	f7fa fae2 	bl	8000590 <__aeabi_dmul>
 8005fcc:	4602      	mov	r2, r0
 8005fce:	460b      	mov	r3, r1
 8005fd0:	4610      	mov	r0, r2
 8005fd2:	4619      	mov	r1, r3
 8005fd4:	f04f 0200 	mov.w	r2, #0
 8005fd8:	4b39      	ldr	r3, [pc, #228]	@ (80060c0 <PWMWrite+0x320>)
 8005fda:	f7fa fc03 	bl	80007e4 <__aeabi_ddiv>
 8005fde:	4602      	mov	r2, r0
 8005fe0:	460b      	mov	r3, r1
 8005fe2:	4610      	mov	r0, r2
 8005fe4:	4619      	mov	r1, r3
 8005fe6:	f7fa fd6d 	bl	8000ac4 <__aeabi_d2uiz>
 8005fea:	4603      	mov	r3, r0
 8005fec:	b299      	uxth	r1, r3
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	681a      	ldr	r2, [r3, #0]
 8005ff2:	460b      	mov	r3, r1
 8005ff4:	6413      	str	r3, [r2, #64]	@ 0x40
 8005ff6:	e055      	b.n	80060a4 <PWMWrite+0x304>
 8005ff8:	897b      	ldrh	r3, [r7, #10]
 8005ffa:	2b10      	cmp	r3, #16
 8005ffc:	d129      	bne.n	8006052 <PWMWrite+0x2b2>
 8005ffe:	8a3b      	ldrh	r3, [r7, #16]
 8006000:	4618      	mov	r0, r3
 8006002:	f7fa fa5b 	bl	80004bc <__aeabi_i2d>
 8006006:	4604      	mov	r4, r0
 8006008:	460d      	mov	r5, r1
 800600a:	edd7 7a00 	vldr	s15, [r7]
 800600e:	eef0 7ae7 	vabs.f32	s15, s15
 8006012:	ee17 0a90 	vmov	r0, s15
 8006016:	f7fa fa63 	bl	80004e0 <__aeabi_f2d>
 800601a:	4602      	mov	r2, r0
 800601c:	460b      	mov	r3, r1
 800601e:	4620      	mov	r0, r4
 8006020:	4629      	mov	r1, r5
 8006022:	f7fa fab5 	bl	8000590 <__aeabi_dmul>
 8006026:	4602      	mov	r2, r0
 8006028:	460b      	mov	r3, r1
 800602a:	4610      	mov	r0, r2
 800602c:	4619      	mov	r1, r3
 800602e:	f04f 0200 	mov.w	r2, #0
 8006032:	4b23      	ldr	r3, [pc, #140]	@ (80060c0 <PWMWrite+0x320>)
 8006034:	f7fa fbd6 	bl	80007e4 <__aeabi_ddiv>
 8006038:	4602      	mov	r2, r0
 800603a:	460b      	mov	r3, r1
 800603c:	4610      	mov	r0, r2
 800603e:	4619      	mov	r1, r3
 8006040:	f7fa fd40 	bl	8000ac4 <__aeabi_d2uiz>
 8006044:	4603      	mov	r3, r0
 8006046:	b299      	uxth	r1, r3
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	681a      	ldr	r2, [r3, #0]
 800604c:	460b      	mov	r3, r1
 800604e:	6493      	str	r3, [r2, #72]	@ 0x48
 8006050:	e028      	b.n	80060a4 <PWMWrite+0x304>
 8006052:	8a3b      	ldrh	r3, [r7, #16]
 8006054:	4618      	mov	r0, r3
 8006056:	f7fa fa31 	bl	80004bc <__aeabi_i2d>
 800605a:	4604      	mov	r4, r0
 800605c:	460d      	mov	r5, r1
 800605e:	edd7 7a00 	vldr	s15, [r7]
 8006062:	eef0 7ae7 	vabs.f32	s15, s15
 8006066:	ee17 0a90 	vmov	r0, s15
 800606a:	f7fa fa39 	bl	80004e0 <__aeabi_f2d>
 800606e:	4602      	mov	r2, r0
 8006070:	460b      	mov	r3, r1
 8006072:	4620      	mov	r0, r4
 8006074:	4629      	mov	r1, r5
 8006076:	f7fa fa8b 	bl	8000590 <__aeabi_dmul>
 800607a:	4602      	mov	r2, r0
 800607c:	460b      	mov	r3, r1
 800607e:	4610      	mov	r0, r2
 8006080:	4619      	mov	r1, r3
 8006082:	f04f 0200 	mov.w	r2, #0
 8006086:	4b0e      	ldr	r3, [pc, #56]	@ (80060c0 <PWMWrite+0x320>)
 8006088:	f7fa fbac 	bl	80007e4 <__aeabi_ddiv>
 800608c:	4602      	mov	r2, r0
 800608e:	460b      	mov	r3, r1
 8006090:	4610      	mov	r0, r2
 8006092:	4619      	mov	r1, r3
 8006094:	f7fa fd16 	bl	8000ac4 <__aeabi_d2uiz>
 8006098:	4603      	mov	r3, r0
 800609a:	b299      	uxth	r1, r3
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	681a      	ldr	r2, [r3, #0]
 80060a0:	460b      	mov	r3, r1
 80060a2:	64d3      	str	r3, [r2, #76]	@ 0x4c
	return 0;
 80060a4:	2300      	movs	r3, #0
}
 80060a6:	4618      	mov	r0, r3
 80060a8:	3718      	adds	r7, #24
 80060aa:	46bd      	mov	sp, r7
 80060ac:	bdb0      	pop	{r4, r5, r7, pc}
 80060ae:	bf00      	nop
 80060b0:	00000000 	.word	0x00000000
 80060b4:	41a443fd 	.word	0x41a443fd
 80060b8:	4ca21fe8 	.word	0x4ca21fe8
 80060bc:	80008001 	.word	0x80008001
 80060c0:	40590000 	.word	0x40590000

080060c4 <memset>:
 80060c4:	4402      	add	r2, r0
 80060c6:	4603      	mov	r3, r0
 80060c8:	4293      	cmp	r3, r2
 80060ca:	d100      	bne.n	80060ce <memset+0xa>
 80060cc:	4770      	bx	lr
 80060ce:	f803 1b01 	strb.w	r1, [r3], #1
 80060d2:	e7f9      	b.n	80060c8 <memset+0x4>

080060d4 <__libc_init_array>:
 80060d4:	b570      	push	{r4, r5, r6, lr}
 80060d6:	4d0d      	ldr	r5, [pc, #52]	@ (800610c <__libc_init_array+0x38>)
 80060d8:	4c0d      	ldr	r4, [pc, #52]	@ (8006110 <__libc_init_array+0x3c>)
 80060da:	1b64      	subs	r4, r4, r5
 80060dc:	10a4      	asrs	r4, r4, #2
 80060de:	2600      	movs	r6, #0
 80060e0:	42a6      	cmp	r6, r4
 80060e2:	d109      	bne.n	80060f8 <__libc_init_array+0x24>
 80060e4:	4d0b      	ldr	r5, [pc, #44]	@ (8006114 <__libc_init_array+0x40>)
 80060e6:	4c0c      	ldr	r4, [pc, #48]	@ (8006118 <__libc_init_array+0x44>)
 80060e8:	f000 f818 	bl	800611c <_init>
 80060ec:	1b64      	subs	r4, r4, r5
 80060ee:	10a4      	asrs	r4, r4, #2
 80060f0:	2600      	movs	r6, #0
 80060f2:	42a6      	cmp	r6, r4
 80060f4:	d105      	bne.n	8006102 <__libc_init_array+0x2e>
 80060f6:	bd70      	pop	{r4, r5, r6, pc}
 80060f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80060fc:	4798      	blx	r3
 80060fe:	3601      	adds	r6, #1
 8006100:	e7ee      	b.n	80060e0 <__libc_init_array+0xc>
 8006102:	f855 3b04 	ldr.w	r3, [r5], #4
 8006106:	4798      	blx	r3
 8006108:	3601      	adds	r6, #1
 800610a:	e7f2      	b.n	80060f2 <__libc_init_array+0x1e>
 800610c:	0800617c 	.word	0x0800617c
 8006110:	0800617c 	.word	0x0800617c
 8006114:	0800617c 	.word	0x0800617c
 8006118:	08006180 	.word	0x08006180

0800611c <_init>:
 800611c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800611e:	bf00      	nop
 8006120:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006122:	bc08      	pop	{r3}
 8006124:	469e      	mov	lr, r3
 8006126:	4770      	bx	lr

08006128 <_fini>:
 8006128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800612a:	bf00      	nop
 800612c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800612e:	bc08      	pop	{r3}
 8006130:	469e      	mov	lr, r3
 8006132:	4770      	bx	lr
