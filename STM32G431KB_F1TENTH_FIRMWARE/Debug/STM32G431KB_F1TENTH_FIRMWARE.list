
STM32G431KB_F1TENTH_FIRMWARE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005b1c  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08005cf4  08005cf4  00006cf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005d34  08005d34  0000701c  2**0
                  CONTENTS
  4 .ARM          00000008  08005d34  08005d34  00006d34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005d3c  08005d3c  0000701c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005d3c  08005d3c  00006d3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005d40  08005d40  00006d40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08005d44  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002ec  2000001c  08005d60  0000701c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000308  08005d60  00007308  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000701c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001813a  00000000  00000000  0000704c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003158  00000000  00000000  0001f186  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001568  00000000  00000000  000222e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000010c9  00000000  00000000  00023848  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f0d3  00000000  00000000  00024911  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001bda0  00000000  00000000  000439e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000caff5  00000000  00000000  0005f784  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012a779  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005cc0  00000000  00000000  0012a7bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000091  00000000  00000000  0013047c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000001c 	.word	0x2000001c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08005cdc 	.word	0x08005cdc

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000020 	.word	0x20000020
 8000214:	08005cdc 	.word	0x08005cdc

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2uiz>:
 8000ac4:	004a      	lsls	r2, r1, #1
 8000ac6:	d211      	bcs.n	8000aec <__aeabi_d2uiz+0x28>
 8000ac8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000acc:	d211      	bcs.n	8000af2 <__aeabi_d2uiz+0x2e>
 8000ace:	d50d      	bpl.n	8000aec <__aeabi_d2uiz+0x28>
 8000ad0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ad4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad8:	d40e      	bmi.n	8000af8 <__aeabi_d2uiz+0x34>
 8000ada:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ade:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ae2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aea:	4770      	bx	lr
 8000aec:	f04f 0000 	mov.w	r0, #0
 8000af0:	4770      	bx	lr
 8000af2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000af6:	d102      	bne.n	8000afe <__aeabi_d2uiz+0x3a>
 8000af8:	f04f 30ff 	mov.w	r0, #4294967295
 8000afc:	4770      	bx	lr
 8000afe:	f04f 0000 	mov.w	r0, #0
 8000b02:	4770      	bx	lr

08000b04 <__aeabi_d2f>:
 8000b04:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b08:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b0c:	bf24      	itt	cs
 8000b0e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b12:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b16:	d90d      	bls.n	8000b34 <__aeabi_d2f+0x30>
 8000b18:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b1c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b20:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b24:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b28:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b2c:	bf08      	it	eq
 8000b2e:	f020 0001 	biceq.w	r0, r0, #1
 8000b32:	4770      	bx	lr
 8000b34:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b38:	d121      	bne.n	8000b7e <__aeabi_d2f+0x7a>
 8000b3a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b3e:	bfbc      	itt	lt
 8000b40:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b44:	4770      	bxlt	lr
 8000b46:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b4a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b4e:	f1c2 0218 	rsb	r2, r2, #24
 8000b52:	f1c2 0c20 	rsb	ip, r2, #32
 8000b56:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b5a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b5e:	bf18      	it	ne
 8000b60:	f040 0001 	orrne.w	r0, r0, #1
 8000b64:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b68:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b6c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b70:	ea40 000c 	orr.w	r0, r0, ip
 8000b74:	fa23 f302 	lsr.w	r3, r3, r2
 8000b78:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b7c:	e7cc      	b.n	8000b18 <__aeabi_d2f+0x14>
 8000b7e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b82:	d107      	bne.n	8000b94 <__aeabi_d2f+0x90>
 8000b84:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b88:	bf1e      	ittt	ne
 8000b8a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b8e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b92:	4770      	bxne	lr
 8000b94:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b9c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop

08000ba4 <__aeabi_uldivmod>:
 8000ba4:	b953      	cbnz	r3, 8000bbc <__aeabi_uldivmod+0x18>
 8000ba6:	b94a      	cbnz	r2, 8000bbc <__aeabi_uldivmod+0x18>
 8000ba8:	2900      	cmp	r1, #0
 8000baa:	bf08      	it	eq
 8000bac:	2800      	cmpeq	r0, #0
 8000bae:	bf1c      	itt	ne
 8000bb0:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb4:	f04f 30ff 	movne.w	r0, #4294967295
 8000bb8:	f000 b96a 	b.w	8000e90 <__aeabi_idiv0>
 8000bbc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc4:	f000 f806 	bl	8000bd4 <__udivmoddi4>
 8000bc8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bcc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd0:	b004      	add	sp, #16
 8000bd2:	4770      	bx	lr

08000bd4 <__udivmoddi4>:
 8000bd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bd8:	9d08      	ldr	r5, [sp, #32]
 8000bda:	460c      	mov	r4, r1
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d14e      	bne.n	8000c7e <__udivmoddi4+0xaa>
 8000be0:	4694      	mov	ip, r2
 8000be2:	458c      	cmp	ip, r1
 8000be4:	4686      	mov	lr, r0
 8000be6:	fab2 f282 	clz	r2, r2
 8000bea:	d962      	bls.n	8000cb2 <__udivmoddi4+0xde>
 8000bec:	b14a      	cbz	r2, 8000c02 <__udivmoddi4+0x2e>
 8000bee:	f1c2 0320 	rsb	r3, r2, #32
 8000bf2:	4091      	lsls	r1, r2
 8000bf4:	fa20 f303 	lsr.w	r3, r0, r3
 8000bf8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bfc:	4319      	orrs	r1, r3
 8000bfe:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c02:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c06:	fa1f f68c 	uxth.w	r6, ip
 8000c0a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c0e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c12:	fb07 1114 	mls	r1, r7, r4, r1
 8000c16:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1a:	fb04 f106 	mul.w	r1, r4, r6
 8000c1e:	4299      	cmp	r1, r3
 8000c20:	d90a      	bls.n	8000c38 <__udivmoddi4+0x64>
 8000c22:	eb1c 0303 	adds.w	r3, ip, r3
 8000c26:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c2a:	f080 8112 	bcs.w	8000e52 <__udivmoddi4+0x27e>
 8000c2e:	4299      	cmp	r1, r3
 8000c30:	f240 810f 	bls.w	8000e52 <__udivmoddi4+0x27e>
 8000c34:	3c02      	subs	r4, #2
 8000c36:	4463      	add	r3, ip
 8000c38:	1a59      	subs	r1, r3, r1
 8000c3a:	fa1f f38e 	uxth.w	r3, lr
 8000c3e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c42:	fb07 1110 	mls	r1, r7, r0, r1
 8000c46:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c4a:	fb00 f606 	mul.w	r6, r0, r6
 8000c4e:	429e      	cmp	r6, r3
 8000c50:	d90a      	bls.n	8000c68 <__udivmoddi4+0x94>
 8000c52:	eb1c 0303 	adds.w	r3, ip, r3
 8000c56:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c5a:	f080 80fc 	bcs.w	8000e56 <__udivmoddi4+0x282>
 8000c5e:	429e      	cmp	r6, r3
 8000c60:	f240 80f9 	bls.w	8000e56 <__udivmoddi4+0x282>
 8000c64:	4463      	add	r3, ip
 8000c66:	3802      	subs	r0, #2
 8000c68:	1b9b      	subs	r3, r3, r6
 8000c6a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c6e:	2100      	movs	r1, #0
 8000c70:	b11d      	cbz	r5, 8000c7a <__udivmoddi4+0xa6>
 8000c72:	40d3      	lsrs	r3, r2
 8000c74:	2200      	movs	r2, #0
 8000c76:	e9c5 3200 	strd	r3, r2, [r5]
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d905      	bls.n	8000c8e <__udivmoddi4+0xba>
 8000c82:	b10d      	cbz	r5, 8000c88 <__udivmoddi4+0xb4>
 8000c84:	e9c5 0100 	strd	r0, r1, [r5]
 8000c88:	2100      	movs	r1, #0
 8000c8a:	4608      	mov	r0, r1
 8000c8c:	e7f5      	b.n	8000c7a <__udivmoddi4+0xa6>
 8000c8e:	fab3 f183 	clz	r1, r3
 8000c92:	2900      	cmp	r1, #0
 8000c94:	d146      	bne.n	8000d24 <__udivmoddi4+0x150>
 8000c96:	42a3      	cmp	r3, r4
 8000c98:	d302      	bcc.n	8000ca0 <__udivmoddi4+0xcc>
 8000c9a:	4290      	cmp	r0, r2
 8000c9c:	f0c0 80f0 	bcc.w	8000e80 <__udivmoddi4+0x2ac>
 8000ca0:	1a86      	subs	r6, r0, r2
 8000ca2:	eb64 0303 	sbc.w	r3, r4, r3
 8000ca6:	2001      	movs	r0, #1
 8000ca8:	2d00      	cmp	r5, #0
 8000caa:	d0e6      	beq.n	8000c7a <__udivmoddi4+0xa6>
 8000cac:	e9c5 6300 	strd	r6, r3, [r5]
 8000cb0:	e7e3      	b.n	8000c7a <__udivmoddi4+0xa6>
 8000cb2:	2a00      	cmp	r2, #0
 8000cb4:	f040 8090 	bne.w	8000dd8 <__udivmoddi4+0x204>
 8000cb8:	eba1 040c 	sub.w	r4, r1, ip
 8000cbc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cc0:	fa1f f78c 	uxth.w	r7, ip
 8000cc4:	2101      	movs	r1, #1
 8000cc6:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cca:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cce:	fb08 4416 	mls	r4, r8, r6, r4
 8000cd2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cd6:	fb07 f006 	mul.w	r0, r7, r6
 8000cda:	4298      	cmp	r0, r3
 8000cdc:	d908      	bls.n	8000cf0 <__udivmoddi4+0x11c>
 8000cde:	eb1c 0303 	adds.w	r3, ip, r3
 8000ce2:	f106 34ff 	add.w	r4, r6, #4294967295
 8000ce6:	d202      	bcs.n	8000cee <__udivmoddi4+0x11a>
 8000ce8:	4298      	cmp	r0, r3
 8000cea:	f200 80cd 	bhi.w	8000e88 <__udivmoddi4+0x2b4>
 8000cee:	4626      	mov	r6, r4
 8000cf0:	1a1c      	subs	r4, r3, r0
 8000cf2:	fa1f f38e 	uxth.w	r3, lr
 8000cf6:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cfa:	fb08 4410 	mls	r4, r8, r0, r4
 8000cfe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d02:	fb00 f707 	mul.w	r7, r0, r7
 8000d06:	429f      	cmp	r7, r3
 8000d08:	d908      	bls.n	8000d1c <__udivmoddi4+0x148>
 8000d0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d12:	d202      	bcs.n	8000d1a <__udivmoddi4+0x146>
 8000d14:	429f      	cmp	r7, r3
 8000d16:	f200 80b0 	bhi.w	8000e7a <__udivmoddi4+0x2a6>
 8000d1a:	4620      	mov	r0, r4
 8000d1c:	1bdb      	subs	r3, r3, r7
 8000d1e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d22:	e7a5      	b.n	8000c70 <__udivmoddi4+0x9c>
 8000d24:	f1c1 0620 	rsb	r6, r1, #32
 8000d28:	408b      	lsls	r3, r1
 8000d2a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d2e:	431f      	orrs	r7, r3
 8000d30:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d34:	fa04 f301 	lsl.w	r3, r4, r1
 8000d38:	ea43 030c 	orr.w	r3, r3, ip
 8000d3c:	40f4      	lsrs	r4, r6
 8000d3e:	fa00 f801 	lsl.w	r8, r0, r1
 8000d42:	0c38      	lsrs	r0, r7, #16
 8000d44:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d48:	fbb4 fef0 	udiv	lr, r4, r0
 8000d4c:	fa1f fc87 	uxth.w	ip, r7
 8000d50:	fb00 441e 	mls	r4, r0, lr, r4
 8000d54:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d58:	fb0e f90c 	mul.w	r9, lr, ip
 8000d5c:	45a1      	cmp	r9, r4
 8000d5e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d62:	d90a      	bls.n	8000d7a <__udivmoddi4+0x1a6>
 8000d64:	193c      	adds	r4, r7, r4
 8000d66:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d6a:	f080 8084 	bcs.w	8000e76 <__udivmoddi4+0x2a2>
 8000d6e:	45a1      	cmp	r9, r4
 8000d70:	f240 8081 	bls.w	8000e76 <__udivmoddi4+0x2a2>
 8000d74:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d78:	443c      	add	r4, r7
 8000d7a:	eba4 0409 	sub.w	r4, r4, r9
 8000d7e:	fa1f f983 	uxth.w	r9, r3
 8000d82:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d86:	fb00 4413 	mls	r4, r0, r3, r4
 8000d8a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d8e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d92:	45a4      	cmp	ip, r4
 8000d94:	d907      	bls.n	8000da6 <__udivmoddi4+0x1d2>
 8000d96:	193c      	adds	r4, r7, r4
 8000d98:	f103 30ff 	add.w	r0, r3, #4294967295
 8000d9c:	d267      	bcs.n	8000e6e <__udivmoddi4+0x29a>
 8000d9e:	45a4      	cmp	ip, r4
 8000da0:	d965      	bls.n	8000e6e <__udivmoddi4+0x29a>
 8000da2:	3b02      	subs	r3, #2
 8000da4:	443c      	add	r4, r7
 8000da6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000daa:	fba0 9302 	umull	r9, r3, r0, r2
 8000dae:	eba4 040c 	sub.w	r4, r4, ip
 8000db2:	429c      	cmp	r4, r3
 8000db4:	46ce      	mov	lr, r9
 8000db6:	469c      	mov	ip, r3
 8000db8:	d351      	bcc.n	8000e5e <__udivmoddi4+0x28a>
 8000dba:	d04e      	beq.n	8000e5a <__udivmoddi4+0x286>
 8000dbc:	b155      	cbz	r5, 8000dd4 <__udivmoddi4+0x200>
 8000dbe:	ebb8 030e 	subs.w	r3, r8, lr
 8000dc2:	eb64 040c 	sbc.w	r4, r4, ip
 8000dc6:	fa04 f606 	lsl.w	r6, r4, r6
 8000dca:	40cb      	lsrs	r3, r1
 8000dcc:	431e      	orrs	r6, r3
 8000dce:	40cc      	lsrs	r4, r1
 8000dd0:	e9c5 6400 	strd	r6, r4, [r5]
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	e750      	b.n	8000c7a <__udivmoddi4+0xa6>
 8000dd8:	f1c2 0320 	rsb	r3, r2, #32
 8000ddc:	fa20 f103 	lsr.w	r1, r0, r3
 8000de0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000de4:	fa24 f303 	lsr.w	r3, r4, r3
 8000de8:	4094      	lsls	r4, r2
 8000dea:	430c      	orrs	r4, r1
 8000dec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000df0:	fa00 fe02 	lsl.w	lr, r0, r2
 8000df4:	fa1f f78c 	uxth.w	r7, ip
 8000df8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dfc:	fb08 3110 	mls	r1, r8, r0, r3
 8000e00:	0c23      	lsrs	r3, r4, #16
 8000e02:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e06:	fb00 f107 	mul.w	r1, r0, r7
 8000e0a:	4299      	cmp	r1, r3
 8000e0c:	d908      	bls.n	8000e20 <__udivmoddi4+0x24c>
 8000e0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e12:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e16:	d22c      	bcs.n	8000e72 <__udivmoddi4+0x29e>
 8000e18:	4299      	cmp	r1, r3
 8000e1a:	d92a      	bls.n	8000e72 <__udivmoddi4+0x29e>
 8000e1c:	3802      	subs	r0, #2
 8000e1e:	4463      	add	r3, ip
 8000e20:	1a5b      	subs	r3, r3, r1
 8000e22:	b2a4      	uxth	r4, r4
 8000e24:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e28:	fb08 3311 	mls	r3, r8, r1, r3
 8000e2c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e30:	fb01 f307 	mul.w	r3, r1, r7
 8000e34:	42a3      	cmp	r3, r4
 8000e36:	d908      	bls.n	8000e4a <__udivmoddi4+0x276>
 8000e38:	eb1c 0404 	adds.w	r4, ip, r4
 8000e3c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e40:	d213      	bcs.n	8000e6a <__udivmoddi4+0x296>
 8000e42:	42a3      	cmp	r3, r4
 8000e44:	d911      	bls.n	8000e6a <__udivmoddi4+0x296>
 8000e46:	3902      	subs	r1, #2
 8000e48:	4464      	add	r4, ip
 8000e4a:	1ae4      	subs	r4, r4, r3
 8000e4c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e50:	e739      	b.n	8000cc6 <__udivmoddi4+0xf2>
 8000e52:	4604      	mov	r4, r0
 8000e54:	e6f0      	b.n	8000c38 <__udivmoddi4+0x64>
 8000e56:	4608      	mov	r0, r1
 8000e58:	e706      	b.n	8000c68 <__udivmoddi4+0x94>
 8000e5a:	45c8      	cmp	r8, r9
 8000e5c:	d2ae      	bcs.n	8000dbc <__udivmoddi4+0x1e8>
 8000e5e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e62:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e66:	3801      	subs	r0, #1
 8000e68:	e7a8      	b.n	8000dbc <__udivmoddi4+0x1e8>
 8000e6a:	4631      	mov	r1, r6
 8000e6c:	e7ed      	b.n	8000e4a <__udivmoddi4+0x276>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	e799      	b.n	8000da6 <__udivmoddi4+0x1d2>
 8000e72:	4630      	mov	r0, r6
 8000e74:	e7d4      	b.n	8000e20 <__udivmoddi4+0x24c>
 8000e76:	46d6      	mov	lr, sl
 8000e78:	e77f      	b.n	8000d7a <__udivmoddi4+0x1a6>
 8000e7a:	4463      	add	r3, ip
 8000e7c:	3802      	subs	r0, #2
 8000e7e:	e74d      	b.n	8000d1c <__udivmoddi4+0x148>
 8000e80:	4606      	mov	r6, r0
 8000e82:	4623      	mov	r3, r4
 8000e84:	4608      	mov	r0, r1
 8000e86:	e70f      	b.n	8000ca8 <__udivmoddi4+0xd4>
 8000e88:	3e02      	subs	r6, #2
 8000e8a:	4463      	add	r3, ip
 8000e8c:	e730      	b.n	8000cf0 <__udivmoddi4+0x11c>
 8000e8e:	bf00      	nop

08000e90 <__aeabi_idiv0>:
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop

08000e94 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b088      	sub	sp, #32
 8000e98:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e9a:	f107 030c 	add.w	r3, r7, #12
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	601a      	str	r2, [r3, #0]
 8000ea2:	605a      	str	r2, [r3, #4]
 8000ea4:	609a      	str	r2, [r3, #8]
 8000ea6:	60da      	str	r2, [r3, #12]
 8000ea8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eaa:	4b1f      	ldr	r3, [pc, #124]	@ (8000f28 <MX_GPIO_Init+0x94>)
 8000eac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eae:	4a1e      	ldr	r2, [pc, #120]	@ (8000f28 <MX_GPIO_Init+0x94>)
 8000eb0:	f043 0301 	orr.w	r3, r3, #1
 8000eb4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000eb6:	4b1c      	ldr	r3, [pc, #112]	@ (8000f28 <MX_GPIO_Init+0x94>)
 8000eb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eba:	f003 0301 	and.w	r3, r3, #1
 8000ebe:	60bb      	str	r3, [r7, #8]
 8000ec0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ec2:	4b19      	ldr	r3, [pc, #100]	@ (8000f28 <MX_GPIO_Init+0x94>)
 8000ec4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ec6:	4a18      	ldr	r2, [pc, #96]	@ (8000f28 <MX_GPIO_Init+0x94>)
 8000ec8:	f043 0302 	orr.w	r3, r3, #2
 8000ecc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ece:	4b16      	ldr	r3, [pc, #88]	@ (8000f28 <MX_GPIO_Init+0x94>)
 8000ed0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ed2:	f003 0302 	and.w	r3, r3, #2
 8000ed6:	607b      	str	r3, [r7, #4]
 8000ed8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000eda:	2200      	movs	r2, #0
 8000edc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000ee0:	4812      	ldr	r0, [pc, #72]	@ (8000f2c <MX_GPIO_Init+0x98>)
 8000ee2:	f001 f96d 	bl	80021c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000eea:	2300      	movs	r3, #0
 8000eec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8000ef2:	f107 030c 	add.w	r3, r7, #12
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000efc:	f000 ffde 	bl	8001ebc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000f00:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000f04:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f06:	2301      	movs	r3, #1
 8000f08:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000f12:	f107 030c 	add.w	r3, r7, #12
 8000f16:	4619      	mov	r1, r3
 8000f18:	4804      	ldr	r0, [pc, #16]	@ (8000f2c <MX_GPIO_Init+0x98>)
 8000f1a:	f000 ffcf 	bl	8001ebc <HAL_GPIO_Init>

}
 8000f1e:	bf00      	nop
 8000f20:	3720      	adds	r7, #32
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	40021000 	.word	0x40021000
 8000f2c:	48000400 	.word	0x48000400

08000f30 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000f34:	4b1b      	ldr	r3, [pc, #108]	@ (8000fa4 <MX_I2C1_Init+0x74>)
 8000f36:	4a1c      	ldr	r2, [pc, #112]	@ (8000fa8 <MX_I2C1_Init+0x78>)
 8000f38:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10802D9B;
 8000f3a:	4b1a      	ldr	r3, [pc, #104]	@ (8000fa4 <MX_I2C1_Init+0x74>)
 8000f3c:	4a1b      	ldr	r2, [pc, #108]	@ (8000fac <MX_I2C1_Init+0x7c>)
 8000f3e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000f40:	4b18      	ldr	r3, [pc, #96]	@ (8000fa4 <MX_I2C1_Init+0x74>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f46:	4b17      	ldr	r3, [pc, #92]	@ (8000fa4 <MX_I2C1_Init+0x74>)
 8000f48:	2201      	movs	r2, #1
 8000f4a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f4c:	4b15      	ldr	r3, [pc, #84]	@ (8000fa4 <MX_I2C1_Init+0x74>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000f52:	4b14      	ldr	r3, [pc, #80]	@ (8000fa4 <MX_I2C1_Init+0x74>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000f58:	4b12      	ldr	r3, [pc, #72]	@ (8000fa4 <MX_I2C1_Init+0x74>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f5e:	4b11      	ldr	r3, [pc, #68]	@ (8000fa4 <MX_I2C1_Init+0x74>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f64:	4b0f      	ldr	r3, [pc, #60]	@ (8000fa4 <MX_I2C1_Init+0x74>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f6a:	480e      	ldr	r0, [pc, #56]	@ (8000fa4 <MX_I2C1_Init+0x74>)
 8000f6c:	f001 f940 	bl	80021f0 <HAL_I2C_Init>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d001      	beq.n	8000f7a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000f76:	f000 f912 	bl	800119e <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000f7a:	2100      	movs	r1, #0
 8000f7c:	4809      	ldr	r0, [pc, #36]	@ (8000fa4 <MX_I2C1_Init+0x74>)
 8000f7e:	f001 f9d2 	bl	8002326 <HAL_I2CEx_ConfigAnalogFilter>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d001      	beq.n	8000f8c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000f88:	f000 f909 	bl	800119e <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000f8c:	2100      	movs	r1, #0
 8000f8e:	4805      	ldr	r0, [pc, #20]	@ (8000fa4 <MX_I2C1_Init+0x74>)
 8000f90:	f001 fa14 	bl	80023bc <HAL_I2CEx_ConfigDigitalFilter>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d001      	beq.n	8000f9e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000f9a:	f000 f900 	bl	800119e <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000f9e:	bf00      	nop
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	20000038 	.word	0x20000038
 8000fa8:	40005400 	.word	0x40005400
 8000fac:	10802d9b 	.word	0x10802d9b

08000fb0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b09c      	sub	sp, #112	@ 0x70
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb8:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	601a      	str	r2, [r3, #0]
 8000fc0:	605a      	str	r2, [r3, #4]
 8000fc2:	609a      	str	r2, [r3, #8]
 8000fc4:	60da      	str	r2, [r3, #12]
 8000fc6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fc8:	f107 0318 	add.w	r3, r7, #24
 8000fcc:	2244      	movs	r2, #68	@ 0x44
 8000fce:	2100      	movs	r1, #0
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f004 fe57 	bl	8005c84 <memset>
  if(i2cHandle->Instance==I2C1)
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	4a2d      	ldr	r2, [pc, #180]	@ (8001090 <HAL_I2C_MspInit+0xe0>)
 8000fdc:	4293      	cmp	r3, r2
 8000fde:	d153      	bne.n	8001088 <HAL_I2C_MspInit+0xd8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000fe0:	2340      	movs	r3, #64	@ 0x40
 8000fe2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fe8:	f107 0318 	add.w	r3, r7, #24
 8000fec:	4618      	mov	r0, r3
 8000fee:	f002 f813 	bl	8003018 <HAL_RCCEx_PeriphCLKConfig>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d001      	beq.n	8000ffc <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000ff8:	f000 f8d1 	bl	800119e <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ffc:	4b25      	ldr	r3, [pc, #148]	@ (8001094 <HAL_I2C_MspInit+0xe4>)
 8000ffe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001000:	4a24      	ldr	r2, [pc, #144]	@ (8001094 <HAL_I2C_MspInit+0xe4>)
 8001002:	f043 0301 	orr.w	r3, r3, #1
 8001006:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001008:	4b22      	ldr	r3, [pc, #136]	@ (8001094 <HAL_I2C_MspInit+0xe4>)
 800100a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800100c:	f003 0301 	and.w	r3, r3, #1
 8001010:	617b      	str	r3, [r7, #20]
 8001012:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001014:	4b1f      	ldr	r3, [pc, #124]	@ (8001094 <HAL_I2C_MspInit+0xe4>)
 8001016:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001018:	4a1e      	ldr	r2, [pc, #120]	@ (8001094 <HAL_I2C_MspInit+0xe4>)
 800101a:	f043 0302 	orr.w	r3, r3, #2
 800101e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001020:	4b1c      	ldr	r3, [pc, #112]	@ (8001094 <HAL_I2C_MspInit+0xe4>)
 8001022:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001024:	f003 0302 	and.w	r3, r3, #2
 8001028:	613b      	str	r3, [r7, #16]
 800102a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800102c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001030:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001032:	2312      	movs	r3, #18
 8001034:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001036:	2300      	movs	r3, #0
 8001038:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800103a:	2300      	movs	r3, #0
 800103c:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800103e:	2304      	movs	r3, #4
 8001040:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001042:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001046:	4619      	mov	r1, r3
 8001048:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800104c:	f000 ff36 	bl	8001ebc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001050:	2380      	movs	r3, #128	@ 0x80
 8001052:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001054:	2312      	movs	r3, #18
 8001056:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001058:	2300      	movs	r3, #0
 800105a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800105c:	2300      	movs	r3, #0
 800105e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001060:	2304      	movs	r3, #4
 8001062:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001064:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001068:	4619      	mov	r1, r3
 800106a:	480b      	ldr	r0, [pc, #44]	@ (8001098 <HAL_I2C_MspInit+0xe8>)
 800106c:	f000 ff26 	bl	8001ebc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001070:	4b08      	ldr	r3, [pc, #32]	@ (8001094 <HAL_I2C_MspInit+0xe4>)
 8001072:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001074:	4a07      	ldr	r2, [pc, #28]	@ (8001094 <HAL_I2C_MspInit+0xe4>)
 8001076:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800107a:	6593      	str	r3, [r2, #88]	@ 0x58
 800107c:	4b05      	ldr	r3, [pc, #20]	@ (8001094 <HAL_I2C_MspInit+0xe4>)
 800107e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001080:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001084:	60fb      	str	r3, [r7, #12]
 8001086:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001088:	bf00      	nop
 800108a:	3770      	adds	r7, #112	@ 0x70
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	40005400 	.word	0x40005400
 8001094:	40021000 	.word	0x40021000
 8001098:	48000400 	.word	0x48000400

0800109c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010a0:	f000 fdb7 	bl	8001c12 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010a4:	f000 f830 	bl	8001108 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010a8:	f7ff fef4 	bl	8000e94 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80010ac:	f000 fce4 	bl	8001a78 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80010b0:	f7ff ff3e 	bl	8000f30 <MX_I2C1_Init>
  MX_TIM1_Init();
 80010b4:	f000 f960 	bl	8001378 <MX_TIM1_Init>
  MX_TIM3_Init();
 80010b8:	f000 f9ae 	bl	8001418 <MX_TIM3_Init>
  MX_TIM4_Init();
 80010bc:	f000 fa02 	bl	80014c4 <MX_TIM4_Init>
  MX_SPI1_Init();
 80010c0:	f000 f874 	bl	80011ac <MX_SPI1_Init>
  MX_TIM15_Init();
 80010c4:	f000 fa54 	bl	8001570 <MX_TIM15_Init>
  MX_TIM16_Init();
 80010c8:	f000 faf6 	bl	80016b8 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */

//  HAL_TIM_Base_Start(&htim16); // Start Timer
//  HAL_TIMEx_PWMN_Start(&htim16, TIM_CHANNEL_1); // Start PWM Mode

  Servo_Init(&S1, 170*1.0e6, True);
 80010cc:	2101      	movs	r1, #1
 80010ce:	ed9f 0a09 	vldr	s0, [pc, #36]	@ 80010f4 <main+0x58>
 80010d2:	4809      	ldr	r0, [pc, #36]	@ (80010f8 <main+0x5c>)
 80010d4:	f004 fc9a 	bl	8005a0c <Servo_Init>
  RC_Set_Input_Range(&S1, -90, 90);
 80010d8:	eddf 0a08 	vldr	s1, [pc, #32]	@ 80010fc <main+0x60>
 80010dc:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8001100 <main+0x64>
 80010e0:	4805      	ldr	r0, [pc, #20]	@ (80010f8 <main+0x5c>)
 80010e2:	f004 fd19 	bl	8005b18 <RC_Set_Input_Range>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  RC_Signal_Write(&S1, degree);
 80010e6:	4b07      	ldr	r3, [pc, #28]	@ (8001104 <main+0x68>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	4619      	mov	r1, r3
 80010ec:	4802      	ldr	r0, [pc, #8]	@ (80010f8 <main+0x5c>)
 80010ee:	f004 fd4d 	bl	8005b8c <RC_Signal_Write>
 80010f2:	e7f8      	b.n	80010e6 <main+0x4a>
 80010f4:	4d221fe8 	.word	0x4d221fe8
 80010f8:	20000000 	.word	0x20000000
 80010fc:	42b40000 	.word	0x42b40000
 8001100:	c2b40000 	.word	0xc2b40000
 8001104:	2000008c 	.word	0x2000008c

08001108 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b094      	sub	sp, #80	@ 0x50
 800110c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800110e:	f107 0318 	add.w	r3, r7, #24
 8001112:	2238      	movs	r2, #56	@ 0x38
 8001114:	2100      	movs	r1, #0
 8001116:	4618      	mov	r0, r3
 8001118:	f004 fdb4 	bl	8005c84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800111c:	1d3b      	adds	r3, r7, #4
 800111e:	2200      	movs	r2, #0
 8001120:	601a      	str	r2, [r3, #0]
 8001122:	605a      	str	r2, [r3, #4]
 8001124:	609a      	str	r2, [r3, #8]
 8001126:	60da      	str	r2, [r3, #12]
 8001128:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800112a:	2000      	movs	r0, #0
 800112c:	f001 f992 	bl	8002454 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001130:	2302      	movs	r3, #2
 8001132:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001134:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001138:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800113a:	2340      	movs	r3, #64	@ 0x40
 800113c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800113e:	2302      	movs	r3, #2
 8001140:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001142:	2302      	movs	r3, #2
 8001144:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001146:	2304      	movs	r3, #4
 8001148:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800114a:	2355      	movs	r3, #85	@ 0x55
 800114c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800114e:	2302      	movs	r3, #2
 8001150:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001152:	2302      	movs	r3, #2
 8001154:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001156:	2302      	movs	r3, #2
 8001158:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800115a:	f107 0318 	add.w	r3, r7, #24
 800115e:	4618      	mov	r0, r3
 8001160:	f001 fa2c 	bl	80025bc <HAL_RCC_OscConfig>
 8001164:	4603      	mov	r3, r0
 8001166:	2b00      	cmp	r3, #0
 8001168:	d001      	beq.n	800116e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800116a:	f000 f818 	bl	800119e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800116e:	230f      	movs	r3, #15
 8001170:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001172:	2303      	movs	r3, #3
 8001174:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001176:	2300      	movs	r3, #0
 8001178:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800117a:	2300      	movs	r3, #0
 800117c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800117e:	2300      	movs	r3, #0
 8001180:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001182:	1d3b      	adds	r3, r7, #4
 8001184:	2104      	movs	r1, #4
 8001186:	4618      	mov	r0, r3
 8001188:	f001 fd2a 	bl	8002be0 <HAL_RCC_ClockConfig>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d001      	beq.n	8001196 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001192:	f000 f804 	bl	800119e <Error_Handler>
  }
}
 8001196:	bf00      	nop
 8001198:	3750      	adds	r7, #80	@ 0x50
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}

0800119e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800119e:	b480      	push	{r7}
 80011a0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011a2:	b672      	cpsid	i
}
 80011a4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011a6:	bf00      	nop
 80011a8:	e7fd      	b.n	80011a6 <Error_Handler+0x8>
	...

080011ac <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80011b0:	4b1b      	ldr	r3, [pc, #108]	@ (8001220 <MX_SPI1_Init+0x74>)
 80011b2:	4a1c      	ldr	r2, [pc, #112]	@ (8001224 <MX_SPI1_Init+0x78>)
 80011b4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80011b6:	4b1a      	ldr	r3, [pc, #104]	@ (8001220 <MX_SPI1_Init+0x74>)
 80011b8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80011bc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80011be:	4b18      	ldr	r3, [pc, #96]	@ (8001220 <MX_SPI1_Init+0x74>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80011c4:	4b16      	ldr	r3, [pc, #88]	@ (8001220 <MX_SPI1_Init+0x74>)
 80011c6:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80011ca:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011cc:	4b14      	ldr	r3, [pc, #80]	@ (8001220 <MX_SPI1_Init+0x74>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011d2:	4b13      	ldr	r3, [pc, #76]	@ (8001220 <MX_SPI1_Init+0x74>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80011d8:	4b11      	ldr	r3, [pc, #68]	@ (8001220 <MX_SPI1_Init+0x74>)
 80011da:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80011de:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80011e0:	4b0f      	ldr	r3, [pc, #60]	@ (8001220 <MX_SPI1_Init+0x74>)
 80011e2:	2220      	movs	r2, #32
 80011e4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011e6:	4b0e      	ldr	r3, [pc, #56]	@ (8001220 <MX_SPI1_Init+0x74>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80011ec:	4b0c      	ldr	r3, [pc, #48]	@ (8001220 <MX_SPI1_Init+0x74>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011f2:	4b0b      	ldr	r3, [pc, #44]	@ (8001220 <MX_SPI1_Init+0x74>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80011f8:	4b09      	ldr	r3, [pc, #36]	@ (8001220 <MX_SPI1_Init+0x74>)
 80011fa:	2207      	movs	r2, #7
 80011fc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80011fe:	4b08      	ldr	r3, [pc, #32]	@ (8001220 <MX_SPI1_Init+0x74>)
 8001200:	2200      	movs	r2, #0
 8001202:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001204:	4b06      	ldr	r3, [pc, #24]	@ (8001220 <MX_SPI1_Init+0x74>)
 8001206:	2208      	movs	r2, #8
 8001208:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800120a:	4805      	ldr	r0, [pc, #20]	@ (8001220 <MX_SPI1_Init+0x74>)
 800120c:	f002 f8f4 	bl	80033f8 <HAL_SPI_Init>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d001      	beq.n	800121a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001216:	f7ff ffc2 	bl	800119e <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800121a:	bf00      	nop
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	20000090 	.word	0x20000090
 8001224:	40013000 	.word	0x40013000

08001228 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b08a      	sub	sp, #40	@ 0x28
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001230:	f107 0314 	add.w	r3, r7, #20
 8001234:	2200      	movs	r2, #0
 8001236:	601a      	str	r2, [r3, #0]
 8001238:	605a      	str	r2, [r3, #4]
 800123a:	609a      	str	r2, [r3, #8]
 800123c:	60da      	str	r2, [r3, #12]
 800123e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4a17      	ldr	r2, [pc, #92]	@ (80012a4 <HAL_SPI_MspInit+0x7c>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d128      	bne.n	800129c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800124a:	4b17      	ldr	r3, [pc, #92]	@ (80012a8 <HAL_SPI_MspInit+0x80>)
 800124c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800124e:	4a16      	ldr	r2, [pc, #88]	@ (80012a8 <HAL_SPI_MspInit+0x80>)
 8001250:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001254:	6613      	str	r3, [r2, #96]	@ 0x60
 8001256:	4b14      	ldr	r3, [pc, #80]	@ (80012a8 <HAL_SPI_MspInit+0x80>)
 8001258:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800125a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800125e:	613b      	str	r3, [r7, #16]
 8001260:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001262:	4b11      	ldr	r3, [pc, #68]	@ (80012a8 <HAL_SPI_MspInit+0x80>)
 8001264:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001266:	4a10      	ldr	r2, [pc, #64]	@ (80012a8 <HAL_SPI_MspInit+0x80>)
 8001268:	f043 0301 	orr.w	r3, r3, #1
 800126c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800126e:	4b0e      	ldr	r3, [pc, #56]	@ (80012a8 <HAL_SPI_MspInit+0x80>)
 8001270:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001272:	f003 0301 	and.w	r3, r3, #1
 8001276:	60fb      	str	r3, [r7, #12]
 8001278:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800127a:	23e0      	movs	r3, #224	@ 0xe0
 800127c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800127e:	2302      	movs	r3, #2
 8001280:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001282:	2300      	movs	r3, #0
 8001284:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001286:	2300      	movs	r3, #0
 8001288:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800128a:	2305      	movs	r3, #5
 800128c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800128e:	f107 0314 	add.w	r3, r7, #20
 8001292:	4619      	mov	r1, r3
 8001294:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001298:	f000 fe10 	bl	8001ebc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800129c:	bf00      	nop
 800129e:	3728      	adds	r7, #40	@ 0x28
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	40013000 	.word	0x40013000
 80012a8:	40021000 	.word	0x40021000

080012ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b082      	sub	sp, #8
 80012b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012b2:	4b0f      	ldr	r3, [pc, #60]	@ (80012f0 <HAL_MspInit+0x44>)
 80012b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012b6:	4a0e      	ldr	r2, [pc, #56]	@ (80012f0 <HAL_MspInit+0x44>)
 80012b8:	f043 0301 	orr.w	r3, r3, #1
 80012bc:	6613      	str	r3, [r2, #96]	@ 0x60
 80012be:	4b0c      	ldr	r3, [pc, #48]	@ (80012f0 <HAL_MspInit+0x44>)
 80012c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012c2:	f003 0301 	and.w	r3, r3, #1
 80012c6:	607b      	str	r3, [r7, #4]
 80012c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012ca:	4b09      	ldr	r3, [pc, #36]	@ (80012f0 <HAL_MspInit+0x44>)
 80012cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012ce:	4a08      	ldr	r2, [pc, #32]	@ (80012f0 <HAL_MspInit+0x44>)
 80012d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012d4:	6593      	str	r3, [r2, #88]	@ 0x58
 80012d6:	4b06      	ldr	r3, [pc, #24]	@ (80012f0 <HAL_MspInit+0x44>)
 80012d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012de:	603b      	str	r3, [r7, #0]
 80012e0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80012e2:	f001 f95b 	bl	800259c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012e6:	bf00      	nop
 80012e8:	3708      	adds	r7, #8
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	40021000 	.word	0x40021000

080012f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80012f8:	bf00      	nop
 80012fa:	e7fd      	b.n	80012f8 <NMI_Handler+0x4>

080012fc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001300:	bf00      	nop
 8001302:	e7fd      	b.n	8001300 <HardFault_Handler+0x4>

08001304 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001308:	bf00      	nop
 800130a:	e7fd      	b.n	8001308 <MemManage_Handler+0x4>

0800130c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800130c:	b480      	push	{r7}
 800130e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001310:	bf00      	nop
 8001312:	e7fd      	b.n	8001310 <BusFault_Handler+0x4>

08001314 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001318:	bf00      	nop
 800131a:	e7fd      	b.n	8001318 <UsageFault_Handler+0x4>

0800131c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001320:	bf00      	nop
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr

0800132a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800132a:	b480      	push	{r7}
 800132c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800132e:	bf00      	nop
 8001330:	46bd      	mov	sp, r7
 8001332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001336:	4770      	bx	lr

08001338 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800133c:	bf00      	nop
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr

08001346 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001346:	b580      	push	{r7, lr}
 8001348:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800134a:	f000 fcb5 	bl	8001cb8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800134e:	bf00      	nop
 8001350:	bd80      	pop	{r7, pc}
	...

08001354 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001358:	4b06      	ldr	r3, [pc, #24]	@ (8001374 <SystemInit+0x20>)
 800135a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800135e:	4a05      	ldr	r2, [pc, #20]	@ (8001374 <SystemInit+0x20>)
 8001360:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001364:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001368:	bf00      	nop
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr
 8001372:	bf00      	nop
 8001374:	e000ed00 	.word	0xe000ed00

08001378 <MX_TIM1_Init>:
TIM_HandleTypeDef htim15;
TIM_HandleTypeDef htim16;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b088      	sub	sp, #32
 800137c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_HallSensor_InitTypeDef sConfig = {0};
 800137e:	f107 0310 	add.w	r3, r7, #16
 8001382:	2200      	movs	r2, #0
 8001384:	601a      	str	r2, [r3, #0]
 8001386:	605a      	str	r2, [r3, #4]
 8001388:	609a      	str	r2, [r3, #8]
 800138a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800138c:	1d3b      	adds	r3, r7, #4
 800138e:	2200      	movs	r2, #0
 8001390:	601a      	str	r2, [r3, #0]
 8001392:	605a      	str	r2, [r3, #4]
 8001394:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001396:	4b1e      	ldr	r3, [pc, #120]	@ (8001410 <MX_TIM1_Init+0x98>)
 8001398:	4a1e      	ldr	r2, [pc, #120]	@ (8001414 <MX_TIM1_Init+0x9c>)
 800139a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800139c:	4b1c      	ldr	r3, [pc, #112]	@ (8001410 <MX_TIM1_Init+0x98>)
 800139e:	2200      	movs	r2, #0
 80013a0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013a2:	4b1b      	ldr	r3, [pc, #108]	@ (8001410 <MX_TIM1_Init+0x98>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80013a8:	4b19      	ldr	r3, [pc, #100]	@ (8001410 <MX_TIM1_Init+0x98>)
 80013aa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80013ae:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013b0:	4b17      	ldr	r3, [pc, #92]	@ (8001410 <MX_TIM1_Init+0x98>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80013b6:	4b16      	ldr	r3, [pc, #88]	@ (8001410 <MX_TIM1_Init+0x98>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013bc:	4b14      	ldr	r3, [pc, #80]	@ (8001410 <MX_TIM1_Init+0x98>)
 80013be:	2200      	movs	r2, #0
 80013c0:	619a      	str	r2, [r3, #24]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80013c2:	2300      	movs	r3, #0
 80013c4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80013c6:	2300      	movs	r3, #0
 80013c8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Filter = 0;
 80013ca:	2300      	movs	r3, #0
 80013cc:	61bb      	str	r3, [r7, #24]
  sConfig.Commutation_Delay = 0;
 80013ce:	2300      	movs	r3, #0
 80013d0:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_HallSensor_Init(&htim1, &sConfig) != HAL_OK)
 80013d2:	f107 0310 	add.w	r3, r7, #16
 80013d6:	4619      	mov	r1, r3
 80013d8:	480d      	ldr	r0, [pc, #52]	@ (8001410 <MX_TIM1_Init+0x98>)
 80013da:	f003 fa42 	bl	8004862 <HAL_TIMEx_HallSensor_Init>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d001      	beq.n	80013e8 <MX_TIM1_Init+0x70>
  {
    Error_Handler();
 80013e4:	f7ff fedb 	bl	800119e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 80013e8:	2350      	movs	r3, #80	@ 0x50
 80013ea:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80013ec:	2300      	movs	r3, #0
 80013ee:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013f0:	2300      	movs	r3, #0
 80013f2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80013f4:	1d3b      	adds	r3, r7, #4
 80013f6:	4619      	mov	r1, r3
 80013f8:	4805      	ldr	r0, [pc, #20]	@ (8001410 <MX_TIM1_Init+0x98>)
 80013fa:	f003 fb95 	bl	8004b28 <HAL_TIMEx_MasterConfigSynchronization>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d001      	beq.n	8001408 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001404:	f7ff fecb 	bl	800119e <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001408:	bf00      	nop
 800140a:	3720      	adds	r7, #32
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}
 8001410:	200000f4 	.word	0x200000f4
 8001414:	40012c00 	.word	0x40012c00

08001418 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b08c      	sub	sp, #48	@ 0x30
 800141c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800141e:	f107 030c 	add.w	r3, r7, #12
 8001422:	2224      	movs	r2, #36	@ 0x24
 8001424:	2100      	movs	r1, #0
 8001426:	4618      	mov	r0, r3
 8001428:	f004 fc2c 	bl	8005c84 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800142c:	463b      	mov	r3, r7
 800142e:	2200      	movs	r2, #0
 8001430:	601a      	str	r2, [r3, #0]
 8001432:	605a      	str	r2, [r3, #4]
 8001434:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001436:	4b21      	ldr	r3, [pc, #132]	@ (80014bc <MX_TIM3_Init+0xa4>)
 8001438:	4a21      	ldr	r2, [pc, #132]	@ (80014c0 <MX_TIM3_Init+0xa8>)
 800143a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800143c:	4b1f      	ldr	r3, [pc, #124]	@ (80014bc <MX_TIM3_Init+0xa4>)
 800143e:	2200      	movs	r2, #0
 8001440:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001442:	4b1e      	ldr	r3, [pc, #120]	@ (80014bc <MX_TIM3_Init+0xa4>)
 8001444:	2200      	movs	r2, #0
 8001446:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001448:	4b1c      	ldr	r3, [pc, #112]	@ (80014bc <MX_TIM3_Init+0xa4>)
 800144a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800144e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001450:	4b1a      	ldr	r3, [pc, #104]	@ (80014bc <MX_TIM3_Init+0xa4>)
 8001452:	2200      	movs	r2, #0
 8001454:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001456:	4b19      	ldr	r3, [pc, #100]	@ (80014bc <MX_TIM3_Init+0xa4>)
 8001458:	2200      	movs	r2, #0
 800145a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800145c:	2301      	movs	r3, #1
 800145e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001460:	2300      	movs	r3, #0
 8001462:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001464:	2301      	movs	r3, #1
 8001466:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001468:	2300      	movs	r3, #0
 800146a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800146c:	2300      	movs	r3, #0
 800146e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001470:	2300      	movs	r3, #0
 8001472:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001474:	2301      	movs	r3, #1
 8001476:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001478:	2300      	movs	r3, #0
 800147a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800147c:	2300      	movs	r3, #0
 800147e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001480:	f107 030c 	add.w	r3, r7, #12
 8001484:	4619      	mov	r1, r3
 8001486:	480d      	ldr	r0, [pc, #52]	@ (80014bc <MX_TIM3_Init+0xa4>)
 8001488:	f002 fa7c 	bl	8003984 <HAL_TIM_Encoder_Init>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d001      	beq.n	8001496 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8001492:	f7ff fe84 	bl	800119e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001496:	2300      	movs	r3, #0
 8001498:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800149a:	2300      	movs	r3, #0
 800149c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800149e:	463b      	mov	r3, r7
 80014a0:	4619      	mov	r1, r3
 80014a2:	4806      	ldr	r0, [pc, #24]	@ (80014bc <MX_TIM3_Init+0xa4>)
 80014a4:	f003 fb40 	bl	8004b28 <HAL_TIMEx_MasterConfigSynchronization>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d001      	beq.n	80014b2 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 80014ae:	f7ff fe76 	bl	800119e <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80014b2:	bf00      	nop
 80014b4:	3730      	adds	r7, #48	@ 0x30
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	20000140 	.word	0x20000140
 80014c0:	40000400 	.word	0x40000400

080014c4 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b08c      	sub	sp, #48	@ 0x30
 80014c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80014ca:	f107 030c 	add.w	r3, r7, #12
 80014ce:	2224      	movs	r2, #36	@ 0x24
 80014d0:	2100      	movs	r1, #0
 80014d2:	4618      	mov	r0, r3
 80014d4:	f004 fbd6 	bl	8005c84 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014d8:	463b      	mov	r3, r7
 80014da:	2200      	movs	r2, #0
 80014dc:	601a      	str	r2, [r3, #0]
 80014de:	605a      	str	r2, [r3, #4]
 80014e0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80014e2:	4b21      	ldr	r3, [pc, #132]	@ (8001568 <MX_TIM4_Init+0xa4>)
 80014e4:	4a21      	ldr	r2, [pc, #132]	@ (800156c <MX_TIM4_Init+0xa8>)
 80014e6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80014e8:	4b1f      	ldr	r3, [pc, #124]	@ (8001568 <MX_TIM4_Init+0xa4>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014ee:	4b1e      	ldr	r3, [pc, #120]	@ (8001568 <MX_TIM4_Init+0xa4>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80014f4:	4b1c      	ldr	r3, [pc, #112]	@ (8001568 <MX_TIM4_Init+0xa4>)
 80014f6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80014fa:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014fc:	4b1a      	ldr	r3, [pc, #104]	@ (8001568 <MX_TIM4_Init+0xa4>)
 80014fe:	2200      	movs	r2, #0
 8001500:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001502:	4b19      	ldr	r3, [pc, #100]	@ (8001568 <MX_TIM4_Init+0xa4>)
 8001504:	2200      	movs	r2, #0
 8001506:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001508:	2301      	movs	r3, #1
 800150a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800150c:	2300      	movs	r3, #0
 800150e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001510:	2301      	movs	r3, #1
 8001512:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001514:	2300      	movs	r3, #0
 8001516:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001518:	2300      	movs	r3, #0
 800151a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800151c:	2300      	movs	r3, #0
 800151e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001520:	2301      	movs	r3, #1
 8001522:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001524:	2300      	movs	r3, #0
 8001526:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001528:	2300      	movs	r3, #0
 800152a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800152c:	f107 030c 	add.w	r3, r7, #12
 8001530:	4619      	mov	r1, r3
 8001532:	480d      	ldr	r0, [pc, #52]	@ (8001568 <MX_TIM4_Init+0xa4>)
 8001534:	f002 fa26 	bl	8003984 <HAL_TIM_Encoder_Init>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	d001      	beq.n	8001542 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 800153e:	f7ff fe2e 	bl	800119e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001542:	2300      	movs	r3, #0
 8001544:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001546:	2300      	movs	r3, #0
 8001548:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800154a:	463b      	mov	r3, r7
 800154c:	4619      	mov	r1, r3
 800154e:	4806      	ldr	r0, [pc, #24]	@ (8001568 <MX_TIM4_Init+0xa4>)
 8001550:	f003 faea 	bl	8004b28 <HAL_TIMEx_MasterConfigSynchronization>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d001      	beq.n	800155e <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 800155a:	f7ff fe20 	bl	800119e <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800155e:	bf00      	nop
 8001560:	3730      	adds	r7, #48	@ 0x30
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	2000018c 	.word	0x2000018c
 800156c:	40000800 	.word	0x40000800

08001570 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b09c      	sub	sp, #112	@ 0x70
 8001574:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001576:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800157a:	2200      	movs	r2, #0
 800157c:	601a      	str	r2, [r3, #0]
 800157e:	605a      	str	r2, [r3, #4]
 8001580:	609a      	str	r2, [r3, #8]
 8001582:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001584:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001588:	2200      	movs	r2, #0
 800158a:	601a      	str	r2, [r3, #0]
 800158c:	605a      	str	r2, [r3, #4]
 800158e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001590:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001594:	2200      	movs	r2, #0
 8001596:	601a      	str	r2, [r3, #0]
 8001598:	605a      	str	r2, [r3, #4]
 800159a:	609a      	str	r2, [r3, #8]
 800159c:	60da      	str	r2, [r3, #12]
 800159e:	611a      	str	r2, [r3, #16]
 80015a0:	615a      	str	r2, [r3, #20]
 80015a2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80015a4:	1d3b      	adds	r3, r7, #4
 80015a6:	2234      	movs	r2, #52	@ 0x34
 80015a8:	2100      	movs	r1, #0
 80015aa:	4618      	mov	r0, r3
 80015ac:	f004 fb6a 	bl	8005c84 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80015b0:	4b3f      	ldr	r3, [pc, #252]	@ (80016b0 <MX_TIM15_Init+0x140>)
 80015b2:	4a40      	ldr	r2, [pc, #256]	@ (80016b4 <MX_TIM15_Init+0x144>)
 80015b4:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 80015b6:	4b3e      	ldr	r3, [pc, #248]	@ (80016b0 <MX_TIM15_Init+0x140>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015bc:	4b3c      	ldr	r3, [pc, #240]	@ (80016b0 <MX_TIM15_Init+0x140>)
 80015be:	2200      	movs	r2, #0
 80015c0:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 80015c2:	4b3b      	ldr	r3, [pc, #236]	@ (80016b0 <MX_TIM15_Init+0x140>)
 80015c4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80015c8:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015ca:	4b39      	ldr	r3, [pc, #228]	@ (80016b0 <MX_TIM15_Init+0x140>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80015d0:	4b37      	ldr	r3, [pc, #220]	@ (80016b0 <MX_TIM15_Init+0x140>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015d6:	4b36      	ldr	r3, [pc, #216]	@ (80016b0 <MX_TIM15_Init+0x140>)
 80015d8:	2200      	movs	r2, #0
 80015da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 80015dc:	4834      	ldr	r0, [pc, #208]	@ (80016b0 <MX_TIM15_Init+0x140>)
 80015de:	f001 ffb6 	bl	800354e <HAL_TIM_Base_Init>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d001      	beq.n	80015ec <MX_TIM15_Init+0x7c>
  {
    Error_Handler();
 80015e8:	f7ff fdd9 	bl	800119e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015ec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80015f0:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 80015f2:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80015f6:	4619      	mov	r1, r3
 80015f8:	482d      	ldr	r0, [pc, #180]	@ (80016b0 <MX_TIM15_Init+0x140>)
 80015fa:	f002 fb7d 	bl	8003cf8 <HAL_TIM_ConfigClockSource>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b00      	cmp	r3, #0
 8001602:	d001      	beq.n	8001608 <MX_TIM15_Init+0x98>
  {
    Error_Handler();
 8001604:	f7ff fdcb 	bl	800119e <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8001608:	4829      	ldr	r0, [pc, #164]	@ (80016b0 <MX_TIM15_Init+0x140>)
 800160a:	f002 f859 	bl	80036c0 <HAL_TIM_PWM_Init>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	d001      	beq.n	8001618 <MX_TIM15_Init+0xa8>
  {
    Error_Handler();
 8001614:	f7ff fdc3 	bl	800119e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001618:	2300      	movs	r3, #0
 800161a:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800161c:	2300      	movs	r3, #0
 800161e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8001620:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001624:	4619      	mov	r1, r3
 8001626:	4822      	ldr	r0, [pc, #136]	@ (80016b0 <MX_TIM15_Init+0x140>)
 8001628:	f003 fa7e 	bl	8004b28 <HAL_TIMEx_MasterConfigSynchronization>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d001      	beq.n	8001636 <MX_TIM15_Init+0xc6>
  {
    Error_Handler();
 8001632:	f7ff fdb4 	bl	800119e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001636:	2360      	movs	r3, #96	@ 0x60
 8001638:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 800163a:	2300      	movs	r3, #0
 800163c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800163e:	2300      	movs	r3, #0
 8001640:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001642:	2300      	movs	r3, #0
 8001644:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001646:	2300      	movs	r3, #0
 8001648:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800164a:	2300      	movs	r3, #0
 800164c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800164e:	2300      	movs	r3, #0
 8001650:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001652:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001656:	2200      	movs	r2, #0
 8001658:	4619      	mov	r1, r3
 800165a:	4815      	ldr	r0, [pc, #84]	@ (80016b0 <MX_TIM15_Init+0x140>)
 800165c:	f002 fa38 	bl	8003ad0 <HAL_TIM_PWM_ConfigChannel>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d001      	beq.n	800166a <MX_TIM15_Init+0xfa>
  {
    Error_Handler();
 8001666:	f7ff fd9a 	bl	800119e <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800166a:	2300      	movs	r3, #0
 800166c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800166e:	2300      	movs	r3, #0
 8001670:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001672:	2300      	movs	r3, #0
 8001674:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001676:	2300      	movs	r3, #0
 8001678:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800167a:	2300      	movs	r3, #0
 800167c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800167e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001682:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001684:	2300      	movs	r3, #0
 8001686:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001688:	2300      	movs	r3, #0
 800168a:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 800168c:	1d3b      	adds	r3, r7, #4
 800168e:	4619      	mov	r1, r3
 8001690:	4807      	ldr	r0, [pc, #28]	@ (80016b0 <MX_TIM15_Init+0x140>)
 8001692:	f003 facb 	bl	8004c2c <HAL_TIMEx_ConfigBreakDeadTime>
 8001696:	4603      	mov	r3, r0
 8001698:	2b00      	cmp	r3, #0
 800169a:	d001      	beq.n	80016a0 <MX_TIM15_Init+0x130>
  {
    Error_Handler();
 800169c:	f7ff fd7f 	bl	800119e <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 80016a0:	4803      	ldr	r0, [pc, #12]	@ (80016b0 <MX_TIM15_Init+0x140>)
 80016a2:	f000 f98d 	bl	80019c0 <HAL_TIM_MspPostInit>

}
 80016a6:	bf00      	nop
 80016a8:	3770      	adds	r7, #112	@ 0x70
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	200001d8 	.word	0x200001d8
 80016b4:	40014000 	.word	0x40014000

080016b8 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b094      	sub	sp, #80	@ 0x50
 80016bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80016be:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80016c2:	2200      	movs	r2, #0
 80016c4:	601a      	str	r2, [r3, #0]
 80016c6:	605a      	str	r2, [r3, #4]
 80016c8:	609a      	str	r2, [r3, #8]
 80016ca:	60da      	str	r2, [r3, #12]
 80016cc:	611a      	str	r2, [r3, #16]
 80016ce:	615a      	str	r2, [r3, #20]
 80016d0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80016d2:	463b      	mov	r3, r7
 80016d4:	2234      	movs	r2, #52	@ 0x34
 80016d6:	2100      	movs	r1, #0
 80016d8:	4618      	mov	r0, r3
 80016da:	f004 fad3 	bl	8005c84 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80016de:	4b31      	ldr	r3, [pc, #196]	@ (80017a4 <MX_TIM16_Init+0xec>)
 80016e0:	4a31      	ldr	r2, [pc, #196]	@ (80017a8 <MX_TIM16_Init+0xf0>)
 80016e2:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 170 - 1;
 80016e4:	4b2f      	ldr	r3, [pc, #188]	@ (80017a4 <MX_TIM16_Init+0xec>)
 80016e6:	22a9      	movs	r2, #169	@ 0xa9
 80016e8:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016ea:	4b2e      	ldr	r3, [pc, #184]	@ (80017a4 <MX_TIM16_Init+0xec>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 999;
 80016f0:	4b2c      	ldr	r3, [pc, #176]	@ (80017a4 <MX_TIM16_Init+0xec>)
 80016f2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80016f6:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016f8:	4b2a      	ldr	r3, [pc, #168]	@ (80017a4 <MX_TIM16_Init+0xec>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80016fe:	4b29      	ldr	r3, [pc, #164]	@ (80017a4 <MX_TIM16_Init+0xec>)
 8001700:	2200      	movs	r2, #0
 8001702:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001704:	4b27      	ldr	r3, [pc, #156]	@ (80017a4 <MX_TIM16_Init+0xec>)
 8001706:	2200      	movs	r2, #0
 8001708:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800170a:	4826      	ldr	r0, [pc, #152]	@ (80017a4 <MX_TIM16_Init+0xec>)
 800170c:	f001 ff1f 	bl	800354e <HAL_TIM_Base_Init>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d001      	beq.n	800171a <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 8001716:	f7ff fd42 	bl	800119e <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 800171a:	4822      	ldr	r0, [pc, #136]	@ (80017a4 <MX_TIM16_Init+0xec>)
 800171c:	f001 ffd0 	bl	80036c0 <HAL_TIM_PWM_Init>
 8001720:	4603      	mov	r3, r0
 8001722:	2b00      	cmp	r3, #0
 8001724:	d001      	beq.n	800172a <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 8001726:	f7ff fd3a 	bl	800119e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800172a:	2360      	movs	r3, #96	@ 0x60
 800172c:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.Pulse = 499;
 800172e:	f240 13f3 	movw	r3, #499	@ 0x1f3
 8001732:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001734:	2300      	movs	r3, #0
 8001736:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001738:	2300      	movs	r3, #0
 800173a:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800173c:	2300      	movs	r3, #0
 800173e:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001740:	2300      	movs	r3, #0
 8001742:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001744:	2300      	movs	r3, #0
 8001746:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001748:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800174c:	2200      	movs	r2, #0
 800174e:	4619      	mov	r1, r3
 8001750:	4814      	ldr	r0, [pc, #80]	@ (80017a4 <MX_TIM16_Init+0xec>)
 8001752:	f002 f9bd 	bl	8003ad0 <HAL_TIM_PWM_ConfigChannel>
 8001756:	4603      	mov	r3, r0
 8001758:	2b00      	cmp	r3, #0
 800175a:	d001      	beq.n	8001760 <MX_TIM16_Init+0xa8>
  {
    Error_Handler();
 800175c:	f7ff fd1f 	bl	800119e <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001760:	2300      	movs	r3, #0
 8001762:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001764:	2300      	movs	r3, #0
 8001766:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001768:	2300      	movs	r3, #0
 800176a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800176c:	2300      	movs	r3, #0
 800176e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001770:	2300      	movs	r3, #0
 8001772:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001774:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001778:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800177a:	2300      	movs	r3, #0
 800177c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800177e:	2300      	movs	r3, #0
 8001780:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8001782:	463b      	mov	r3, r7
 8001784:	4619      	mov	r1, r3
 8001786:	4807      	ldr	r0, [pc, #28]	@ (80017a4 <MX_TIM16_Init+0xec>)
 8001788:	f003 fa50 	bl	8004c2c <HAL_TIMEx_ConfigBreakDeadTime>
 800178c:	4603      	mov	r3, r0
 800178e:	2b00      	cmp	r3, #0
 8001790:	d001      	beq.n	8001796 <MX_TIM16_Init+0xde>
  {
    Error_Handler();
 8001792:	f7ff fd04 	bl	800119e <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8001796:	4803      	ldr	r0, [pc, #12]	@ (80017a4 <MX_TIM16_Init+0xec>)
 8001798:	f000 f912 	bl	80019c0 <HAL_TIM_MspPostInit>

}
 800179c:	bf00      	nop
 800179e:	3750      	adds	r7, #80	@ 0x50
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	20000224 	.word	0x20000224
 80017a8:	40014400 	.word	0x40014400

080017ac <HAL_TIMEx_HallSensor_MspInit>:

void HAL_TIMEx_HallSensor_MspInit(TIM_HandleTypeDef* timex_hallsensorHandle)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b08a      	sub	sp, #40	@ 0x28
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017b4:	f107 0314 	add.w	r3, r7, #20
 80017b8:	2200      	movs	r2, #0
 80017ba:	601a      	str	r2, [r3, #0]
 80017bc:	605a      	str	r2, [r3, #4]
 80017be:	609a      	str	r2, [r3, #8]
 80017c0:	60da      	str	r2, [r3, #12]
 80017c2:	611a      	str	r2, [r3, #16]
  if(timex_hallsensorHandle->Instance==TIM1)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a18      	ldr	r2, [pc, #96]	@ (800182c <HAL_TIMEx_HallSensor_MspInit+0x80>)
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d129      	bne.n	8001822 <HAL_TIMEx_HallSensor_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80017ce:	4b18      	ldr	r3, [pc, #96]	@ (8001830 <HAL_TIMEx_HallSensor_MspInit+0x84>)
 80017d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017d2:	4a17      	ldr	r2, [pc, #92]	@ (8001830 <HAL_TIMEx_HallSensor_MspInit+0x84>)
 80017d4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80017d8:	6613      	str	r3, [r2, #96]	@ 0x60
 80017da:	4b15      	ldr	r3, [pc, #84]	@ (8001830 <HAL_TIMEx_HallSensor_MspInit+0x84>)
 80017dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017de:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80017e2:	613b      	str	r3, [r7, #16]
 80017e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017e6:	4b12      	ldr	r3, [pc, #72]	@ (8001830 <HAL_TIMEx_HallSensor_MspInit+0x84>)
 80017e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017ea:	4a11      	ldr	r2, [pc, #68]	@ (8001830 <HAL_TIMEx_HallSensor_MspInit+0x84>)
 80017ec:	f043 0301 	orr.w	r3, r3, #1
 80017f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017f2:	4b0f      	ldr	r3, [pc, #60]	@ (8001830 <HAL_TIMEx_HallSensor_MspInit+0x84>)
 80017f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017f6:	f003 0301 	and.w	r3, r3, #1
 80017fa:	60fb      	str	r3, [r7, #12]
 80017fc:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 80017fe:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8001802:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001804:	2302      	movs	r3, #2
 8001806:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001808:	2300      	movs	r3, #0
 800180a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800180c:	2300      	movs	r3, #0
 800180e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001810:	2306      	movs	r3, #6
 8001812:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001814:	f107 0314 	add.w	r3, r7, #20
 8001818:	4619      	mov	r1, r3
 800181a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800181e:	f000 fb4d 	bl	8001ebc <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001822:	bf00      	nop
 8001824:	3728      	adds	r7, #40	@ 0x28
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	40012c00 	.word	0x40012c00
 8001830:	40021000 	.word	0x40021000

08001834 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b08c      	sub	sp, #48	@ 0x30
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800183c:	f107 031c 	add.w	r3, r7, #28
 8001840:	2200      	movs	r2, #0
 8001842:	601a      	str	r2, [r3, #0]
 8001844:	605a      	str	r2, [r3, #4]
 8001846:	609a      	str	r2, [r3, #8]
 8001848:	60da      	str	r2, [r3, #12]
 800184a:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a3d      	ldr	r2, [pc, #244]	@ (8001948 <HAL_TIM_Encoder_MspInit+0x114>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d145      	bne.n	80018e2 <HAL_TIM_Encoder_MspInit+0xae>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001856:	4b3d      	ldr	r3, [pc, #244]	@ (800194c <HAL_TIM_Encoder_MspInit+0x118>)
 8001858:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800185a:	4a3c      	ldr	r2, [pc, #240]	@ (800194c <HAL_TIM_Encoder_MspInit+0x118>)
 800185c:	f043 0302 	orr.w	r3, r3, #2
 8001860:	6593      	str	r3, [r2, #88]	@ 0x58
 8001862:	4b3a      	ldr	r3, [pc, #232]	@ (800194c <HAL_TIM_Encoder_MspInit+0x118>)
 8001864:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001866:	f003 0302 	and.w	r3, r3, #2
 800186a:	61bb      	str	r3, [r7, #24]
 800186c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800186e:	4b37      	ldr	r3, [pc, #220]	@ (800194c <HAL_TIM_Encoder_MspInit+0x118>)
 8001870:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001872:	4a36      	ldr	r2, [pc, #216]	@ (800194c <HAL_TIM_Encoder_MspInit+0x118>)
 8001874:	f043 0301 	orr.w	r3, r3, #1
 8001878:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800187a:	4b34      	ldr	r3, [pc, #208]	@ (800194c <HAL_TIM_Encoder_MspInit+0x118>)
 800187c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800187e:	f003 0301 	and.w	r3, r3, #1
 8001882:	617b      	str	r3, [r7, #20]
 8001884:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001886:	4b31      	ldr	r3, [pc, #196]	@ (800194c <HAL_TIM_Encoder_MspInit+0x118>)
 8001888:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800188a:	4a30      	ldr	r2, [pc, #192]	@ (800194c <HAL_TIM_Encoder_MspInit+0x118>)
 800188c:	f043 0302 	orr.w	r3, r3, #2
 8001890:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001892:	4b2e      	ldr	r3, [pc, #184]	@ (800194c <HAL_TIM_Encoder_MspInit+0x118>)
 8001894:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001896:	f003 0302 	and.w	r3, r3, #2
 800189a:	613b      	str	r3, [r7, #16]
 800189c:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PA4     ------> TIM3_CH2
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800189e:	2310      	movs	r3, #16
 80018a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018a2:	2302      	movs	r3, #2
 80018a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a6:	2300      	movs	r3, #0
 80018a8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018aa:	2300      	movs	r3, #0
 80018ac:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80018ae:	2302      	movs	r3, #2
 80018b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018b2:	f107 031c 	add.w	r3, r7, #28
 80018b6:	4619      	mov	r1, r3
 80018b8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80018bc:	f000 fafe 	bl	8001ebc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80018c0:	2310      	movs	r3, #16
 80018c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018c4:	2302      	movs	r3, #2
 80018c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c8:	2300      	movs	r3, #0
 80018ca:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018cc:	2300      	movs	r3, #0
 80018ce:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80018d0:	2302      	movs	r3, #2
 80018d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018d4:	f107 031c 	add.w	r3, r7, #28
 80018d8:	4619      	mov	r1, r3
 80018da:	481d      	ldr	r0, [pc, #116]	@ (8001950 <HAL_TIM_Encoder_MspInit+0x11c>)
 80018dc:	f000 faee 	bl	8001ebc <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80018e0:	e02e      	b.n	8001940 <HAL_TIM_Encoder_MspInit+0x10c>
  else if(tim_encoderHandle->Instance==TIM4)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4a1b      	ldr	r2, [pc, #108]	@ (8001954 <HAL_TIM_Encoder_MspInit+0x120>)
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d129      	bne.n	8001940 <HAL_TIM_Encoder_MspInit+0x10c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80018ec:	4b17      	ldr	r3, [pc, #92]	@ (800194c <HAL_TIM_Encoder_MspInit+0x118>)
 80018ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018f0:	4a16      	ldr	r2, [pc, #88]	@ (800194c <HAL_TIM_Encoder_MspInit+0x118>)
 80018f2:	f043 0304 	orr.w	r3, r3, #4
 80018f6:	6593      	str	r3, [r2, #88]	@ 0x58
 80018f8:	4b14      	ldr	r3, [pc, #80]	@ (800194c <HAL_TIM_Encoder_MspInit+0x118>)
 80018fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018fc:	f003 0304 	and.w	r3, r3, #4
 8001900:	60fb      	str	r3, [r7, #12]
 8001902:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001904:	4b11      	ldr	r3, [pc, #68]	@ (800194c <HAL_TIM_Encoder_MspInit+0x118>)
 8001906:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001908:	4a10      	ldr	r2, [pc, #64]	@ (800194c <HAL_TIM_Encoder_MspInit+0x118>)
 800190a:	f043 0301 	orr.w	r3, r3, #1
 800190e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001910:	4b0e      	ldr	r3, [pc, #56]	@ (800194c <HAL_TIM_Encoder_MspInit+0x118>)
 8001912:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001914:	f003 0301 	and.w	r3, r3, #1
 8001918:	60bb      	str	r3, [r7, #8]
 800191a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800191c:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001920:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001922:	2302      	movs	r3, #2
 8001924:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001926:	2300      	movs	r3, #0
 8001928:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800192a:	2300      	movs	r3, #0
 800192c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 800192e:	230a      	movs	r3, #10
 8001930:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001932:	f107 031c 	add.w	r3, r7, #28
 8001936:	4619      	mov	r1, r3
 8001938:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800193c:	f000 fabe 	bl	8001ebc <HAL_GPIO_Init>
}
 8001940:	bf00      	nop
 8001942:	3730      	adds	r7, #48	@ 0x30
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}
 8001948:	40000400 	.word	0x40000400
 800194c:	40021000 	.word	0x40021000
 8001950:	48000400 	.word	0x48000400
 8001954:	40000800 	.word	0x40000800

08001958 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001958:	b480      	push	{r7}
 800195a:	b085      	sub	sp, #20
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM15)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a13      	ldr	r2, [pc, #76]	@ (80019b4 <HAL_TIM_Base_MspInit+0x5c>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d10c      	bne.n	8001984 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM15_MspInit 0 */

  /* USER CODE END TIM15_MspInit 0 */
    /* TIM15 clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 800196a:	4b13      	ldr	r3, [pc, #76]	@ (80019b8 <HAL_TIM_Base_MspInit+0x60>)
 800196c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800196e:	4a12      	ldr	r2, [pc, #72]	@ (80019b8 <HAL_TIM_Base_MspInit+0x60>)
 8001970:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001974:	6613      	str	r3, [r2, #96]	@ 0x60
 8001976:	4b10      	ldr	r3, [pc, #64]	@ (80019b8 <HAL_TIM_Base_MspInit+0x60>)
 8001978:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800197a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800197e:	60fb      	str	r3, [r7, #12]
 8001980:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM16_CLK_ENABLE();
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 8001982:	e010      	b.n	80019a6 <HAL_TIM_Base_MspInit+0x4e>
  else if(tim_baseHandle->Instance==TIM16)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a0c      	ldr	r2, [pc, #48]	@ (80019bc <HAL_TIM_Base_MspInit+0x64>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d10b      	bne.n	80019a6 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800198e:	4b0a      	ldr	r3, [pc, #40]	@ (80019b8 <HAL_TIM_Base_MspInit+0x60>)
 8001990:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001992:	4a09      	ldr	r2, [pc, #36]	@ (80019b8 <HAL_TIM_Base_MspInit+0x60>)
 8001994:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001998:	6613      	str	r3, [r2, #96]	@ 0x60
 800199a:	4b07      	ldr	r3, [pc, #28]	@ (80019b8 <HAL_TIM_Base_MspInit+0x60>)
 800199c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800199e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019a2:	60bb      	str	r3, [r7, #8]
 80019a4:	68bb      	ldr	r3, [r7, #8]
}
 80019a6:	bf00      	nop
 80019a8:	3714      	adds	r7, #20
 80019aa:	46bd      	mov	sp, r7
 80019ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b0:	4770      	bx	lr
 80019b2:	bf00      	nop
 80019b4:	40014000 	.word	0x40014000
 80019b8:	40021000 	.word	0x40021000
 80019bc:	40014400 	.word	0x40014400

080019c0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b08a      	sub	sp, #40	@ 0x28
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019c8:	f107 0314 	add.w	r3, r7, #20
 80019cc:	2200      	movs	r2, #0
 80019ce:	601a      	str	r2, [r3, #0]
 80019d0:	605a      	str	r2, [r3, #4]
 80019d2:	609a      	str	r2, [r3, #8]
 80019d4:	60da      	str	r2, [r3, #12]
 80019d6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM15)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a22      	ldr	r2, [pc, #136]	@ (8001a68 <HAL_TIM_MspPostInit+0xa8>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d11d      	bne.n	8001a1e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM15_MspPostInit 0 */

  /* USER CODE END TIM15_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019e2:	4b22      	ldr	r3, [pc, #136]	@ (8001a6c <HAL_TIM_MspPostInit+0xac>)
 80019e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019e6:	4a21      	ldr	r2, [pc, #132]	@ (8001a6c <HAL_TIM_MspPostInit+0xac>)
 80019e8:	f043 0301 	orr.w	r3, r3, #1
 80019ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80019ee:	4b1f      	ldr	r3, [pc, #124]	@ (8001a6c <HAL_TIM_MspPostInit+0xac>)
 80019f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019f2:	f003 0301 	and.w	r3, r3, #1
 80019f6:	613b      	str	r3, [r7, #16]
 80019f8:	693b      	ldr	r3, [r7, #16]
    /**TIM15 GPIO Configuration
    PA1     ------> TIM15_CH1N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80019fa:	2302      	movs	r3, #2
 80019fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019fe:	2302      	movs	r3, #2
 8001a00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a02:	2300      	movs	r3, #0
 8001a04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a06:	2300      	movs	r3, #0
 8001a08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM15;
 8001a0a:	2309      	movs	r3, #9
 8001a0c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a0e:	f107 0314 	add.w	r3, r7, #20
 8001a12:	4619      	mov	r1, r3
 8001a14:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a18:	f000 fa50 	bl	8001ebc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 8001a1c:	e020      	b.n	8001a60 <HAL_TIM_MspPostInit+0xa0>
  else if(timHandle->Instance==TIM16)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4a13      	ldr	r2, [pc, #76]	@ (8001a70 <HAL_TIM_MspPostInit+0xb0>)
 8001a24:	4293      	cmp	r3, r2
 8001a26:	d11b      	bne.n	8001a60 <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a28:	4b10      	ldr	r3, [pc, #64]	@ (8001a6c <HAL_TIM_MspPostInit+0xac>)
 8001a2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a2c:	4a0f      	ldr	r2, [pc, #60]	@ (8001a6c <HAL_TIM_MspPostInit+0xac>)
 8001a2e:	f043 0302 	orr.w	r3, r3, #2
 8001a32:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a34:	4b0d      	ldr	r3, [pc, #52]	@ (8001a6c <HAL_TIM_MspPostInit+0xac>)
 8001a36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a38:	f003 0302 	and.w	r3, r3, #2
 8001a3c:	60fb      	str	r3, [r7, #12]
 8001a3e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001a40:	2340      	movs	r3, #64	@ 0x40
 8001a42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a44:	2302      	movs	r3, #2
 8001a46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 8001a50:	2301      	movs	r3, #1
 8001a52:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a54:	f107 0314 	add.w	r3, r7, #20
 8001a58:	4619      	mov	r1, r3
 8001a5a:	4806      	ldr	r0, [pc, #24]	@ (8001a74 <HAL_TIM_MspPostInit+0xb4>)
 8001a5c:	f000 fa2e 	bl	8001ebc <HAL_GPIO_Init>
}
 8001a60:	bf00      	nop
 8001a62:	3728      	adds	r7, #40	@ 0x28
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	40014000 	.word	0x40014000
 8001a6c:	40021000 	.word	0x40021000
 8001a70:	40014400 	.word	0x40014400
 8001a74:	48000400 	.word	0x48000400

08001a78 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001a7c:	4b22      	ldr	r3, [pc, #136]	@ (8001b08 <MX_USART2_UART_Init+0x90>)
 8001a7e:	4a23      	ldr	r2, [pc, #140]	@ (8001b0c <MX_USART2_UART_Init+0x94>)
 8001a80:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001a82:	4b21      	ldr	r3, [pc, #132]	@ (8001b08 <MX_USART2_UART_Init+0x90>)
 8001a84:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001a88:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001a8a:	4b1f      	ldr	r3, [pc, #124]	@ (8001b08 <MX_USART2_UART_Init+0x90>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001a90:	4b1d      	ldr	r3, [pc, #116]	@ (8001b08 <MX_USART2_UART_Init+0x90>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001a96:	4b1c      	ldr	r3, [pc, #112]	@ (8001b08 <MX_USART2_UART_Init+0x90>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001a9c:	4b1a      	ldr	r3, [pc, #104]	@ (8001b08 <MX_USART2_UART_Init+0x90>)
 8001a9e:	220c      	movs	r2, #12
 8001aa0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001aa2:	4b19      	ldr	r3, [pc, #100]	@ (8001b08 <MX_USART2_UART_Init+0x90>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001aa8:	4b17      	ldr	r3, [pc, #92]	@ (8001b08 <MX_USART2_UART_Init+0x90>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001aae:	4b16      	ldr	r3, [pc, #88]	@ (8001b08 <MX_USART2_UART_Init+0x90>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001ab4:	4b14      	ldr	r3, [pc, #80]	@ (8001b08 <MX_USART2_UART_Init+0x90>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001aba:	4b13      	ldr	r3, [pc, #76]	@ (8001b08 <MX_USART2_UART_Init+0x90>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001ac0:	4811      	ldr	r0, [pc, #68]	@ (8001b08 <MX_USART2_UART_Init+0x90>)
 8001ac2:	f003 f964 	bl	8004d8e <HAL_UART_Init>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d001      	beq.n	8001ad0 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001acc:	f7ff fb67 	bl	800119e <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001ad0:	2100      	movs	r1, #0
 8001ad2:	480d      	ldr	r0, [pc, #52]	@ (8001b08 <MX_USART2_UART_Init+0x90>)
 8001ad4:	f003 fed0 	bl	8005878 <HAL_UARTEx_SetTxFifoThreshold>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d001      	beq.n	8001ae2 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001ade:	f7ff fb5e 	bl	800119e <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001ae2:	2100      	movs	r1, #0
 8001ae4:	4808      	ldr	r0, [pc, #32]	@ (8001b08 <MX_USART2_UART_Init+0x90>)
 8001ae6:	f003 ff05 	bl	80058f4 <HAL_UARTEx_SetRxFifoThreshold>
 8001aea:	4603      	mov	r3, r0
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d001      	beq.n	8001af4 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001af0:	f7ff fb55 	bl	800119e <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001af4:	4804      	ldr	r0, [pc, #16]	@ (8001b08 <MX_USART2_UART_Init+0x90>)
 8001af6:	f003 fe86 	bl	8005806 <HAL_UARTEx_DisableFifoMode>
 8001afa:	4603      	mov	r3, r0
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d001      	beq.n	8001b04 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001b00:	f7ff fb4d 	bl	800119e <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001b04:	bf00      	nop
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	20000270 	.word	0x20000270
 8001b0c:	40004400 	.word	0x40004400

08001b10 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b09a      	sub	sp, #104	@ 0x68
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b18:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	601a      	str	r2, [r3, #0]
 8001b20:	605a      	str	r2, [r3, #4]
 8001b22:	609a      	str	r2, [r3, #8]
 8001b24:	60da      	str	r2, [r3, #12]
 8001b26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b28:	f107 0310 	add.w	r3, r7, #16
 8001b2c:	2244      	movs	r2, #68	@ 0x44
 8001b2e:	2100      	movs	r1, #0
 8001b30:	4618      	mov	r0, r3
 8001b32:	f004 f8a7 	bl	8005c84 <memset>
  if(uartHandle->Instance==USART2)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4a1f      	ldr	r2, [pc, #124]	@ (8001bb8 <HAL_UART_MspInit+0xa8>)
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d136      	bne.n	8001bae <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001b40:	2302      	movs	r3, #2
 8001b42:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001b44:	2300      	movs	r3, #0
 8001b46:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b48:	f107 0310 	add.w	r3, r7, #16
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f001 fa63 	bl	8003018 <HAL_RCCEx_PeriphCLKConfig>
 8001b52:	4603      	mov	r3, r0
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d001      	beq.n	8001b5c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001b58:	f7ff fb21 	bl	800119e <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b5c:	4b17      	ldr	r3, [pc, #92]	@ (8001bbc <HAL_UART_MspInit+0xac>)
 8001b5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b60:	4a16      	ldr	r2, [pc, #88]	@ (8001bbc <HAL_UART_MspInit+0xac>)
 8001b62:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b66:	6593      	str	r3, [r2, #88]	@ 0x58
 8001b68:	4b14      	ldr	r3, [pc, #80]	@ (8001bbc <HAL_UART_MspInit+0xac>)
 8001b6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b70:	60fb      	str	r3, [r7, #12]
 8001b72:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b74:	4b11      	ldr	r3, [pc, #68]	@ (8001bbc <HAL_UART_MspInit+0xac>)
 8001b76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b78:	4a10      	ldr	r2, [pc, #64]	@ (8001bbc <HAL_UART_MspInit+0xac>)
 8001b7a:	f043 0301 	orr.w	r3, r3, #1
 8001b7e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b80:	4b0e      	ldr	r3, [pc, #56]	@ (8001bbc <HAL_UART_MspInit+0xac>)
 8001b82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b84:	f003 0301 	and.w	r3, r3, #1
 8001b88:	60bb      	str	r3, [r7, #8]
 8001b8a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8001b8c:	230c      	movs	r3, #12
 8001b8e:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b90:	2302      	movs	r3, #2
 8001b92:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b94:	2300      	movs	r3, #0
 8001b96:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b9c:	2307      	movs	r3, #7
 8001b9e:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ba0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001baa:	f000 f987 	bl	8001ebc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001bae:	bf00      	nop
 8001bb0:	3768      	adds	r7, #104	@ 0x68
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	40004400 	.word	0x40004400
 8001bbc:	40021000 	.word	0x40021000

08001bc0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001bc0:	480d      	ldr	r0, [pc, #52]	@ (8001bf8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001bc2:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001bc4:	f7ff fbc6 	bl	8001354 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001bc8:	480c      	ldr	r0, [pc, #48]	@ (8001bfc <LoopForever+0x6>)
  ldr r1, =_edata
 8001bca:	490d      	ldr	r1, [pc, #52]	@ (8001c00 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001bcc:	4a0d      	ldr	r2, [pc, #52]	@ (8001c04 <LoopForever+0xe>)
  movs r3, #0
 8001bce:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001bd0:	e002      	b.n	8001bd8 <LoopCopyDataInit>

08001bd2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bd2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bd4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bd6:	3304      	adds	r3, #4

08001bd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bd8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bdc:	d3f9      	bcc.n	8001bd2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bde:	4a0a      	ldr	r2, [pc, #40]	@ (8001c08 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001be0:	4c0a      	ldr	r4, [pc, #40]	@ (8001c0c <LoopForever+0x16>)
  movs r3, #0
 8001be2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001be4:	e001      	b.n	8001bea <LoopFillZerobss>

08001be6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001be6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001be8:	3204      	adds	r2, #4

08001bea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bec:	d3fb      	bcc.n	8001be6 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8001bee:	f004 f851 	bl	8005c94 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001bf2:	f7ff fa53 	bl	800109c <main>

08001bf6 <LoopForever>:

LoopForever:
    b LoopForever
 8001bf6:	e7fe      	b.n	8001bf6 <LoopForever>
  ldr   r0, =_estack
 8001bf8:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001bfc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c00:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8001c04:	08005d44 	.word	0x08005d44
  ldr r2, =_sbss
 8001c08:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8001c0c:	20000308 	.word	0x20000308

08001c10 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001c10:	e7fe      	b.n	8001c10 <ADC1_2_IRQHandler>

08001c12 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c12:	b580      	push	{r7, lr}
 8001c14:	b082      	sub	sp, #8
 8001c16:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c1c:	2003      	movs	r0, #3
 8001c1e:	f000 f91b 	bl	8001e58 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c22:	2000      	movs	r0, #0
 8001c24:	f000 f80e 	bl	8001c44 <HAL_InitTick>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d002      	beq.n	8001c34 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	71fb      	strb	r3, [r7, #7]
 8001c32:	e001      	b.n	8001c38 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001c34:	f7ff fb3a 	bl	80012ac <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001c38:	79fb      	ldrb	r3, [r7, #7]

}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	3708      	adds	r7, #8
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}
	...

08001c44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b084      	sub	sp, #16
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001c50:	4b16      	ldr	r3, [pc, #88]	@ (8001cac <HAL_InitTick+0x68>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d022      	beq.n	8001c9e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001c58:	4b15      	ldr	r3, [pc, #84]	@ (8001cb0 <HAL_InitTick+0x6c>)
 8001c5a:	681a      	ldr	r2, [r3, #0]
 8001c5c:	4b13      	ldr	r3, [pc, #76]	@ (8001cac <HAL_InitTick+0x68>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001c64:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c68:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f000 f918 	bl	8001ea2 <HAL_SYSTICK_Config>
 8001c72:	4603      	mov	r3, r0
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d10f      	bne.n	8001c98 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2b0f      	cmp	r3, #15
 8001c7c:	d809      	bhi.n	8001c92 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c7e:	2200      	movs	r2, #0
 8001c80:	6879      	ldr	r1, [r7, #4]
 8001c82:	f04f 30ff 	mov.w	r0, #4294967295
 8001c86:	f000 f8f2 	bl	8001e6e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001c8a:	4a0a      	ldr	r2, [pc, #40]	@ (8001cb4 <HAL_InitTick+0x70>)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6013      	str	r3, [r2, #0]
 8001c90:	e007      	b.n	8001ca2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001c92:	2301      	movs	r3, #1
 8001c94:	73fb      	strb	r3, [r7, #15]
 8001c96:	e004      	b.n	8001ca2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	73fb      	strb	r3, [r7, #15]
 8001c9c:	e001      	b.n	8001ca2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001ca2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	3710      	adds	r7, #16
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}
 8001cac:	20000018 	.word	0x20000018
 8001cb0:	20000010 	.word	0x20000010
 8001cb4:	20000014 	.word	0x20000014

08001cb8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001cbc:	4b05      	ldr	r3, [pc, #20]	@ (8001cd4 <HAL_IncTick+0x1c>)
 8001cbe:	681a      	ldr	r2, [r3, #0]
 8001cc0:	4b05      	ldr	r3, [pc, #20]	@ (8001cd8 <HAL_IncTick+0x20>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4413      	add	r3, r2
 8001cc6:	4a03      	ldr	r2, [pc, #12]	@ (8001cd4 <HAL_IncTick+0x1c>)
 8001cc8:	6013      	str	r3, [r2, #0]
}
 8001cca:	bf00      	nop
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd2:	4770      	bx	lr
 8001cd4:	20000304 	.word	0x20000304
 8001cd8:	20000018 	.word	0x20000018

08001cdc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	af00      	add	r7, sp, #0
  return uwTick;
 8001ce0:	4b03      	ldr	r3, [pc, #12]	@ (8001cf0 <HAL_GetTick+0x14>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cec:	4770      	bx	lr
 8001cee:	bf00      	nop
 8001cf0:	20000304 	.word	0x20000304

08001cf4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b085      	sub	sp, #20
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	f003 0307 	and.w	r3, r3, #7
 8001d02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d04:	4b0c      	ldr	r3, [pc, #48]	@ (8001d38 <__NVIC_SetPriorityGrouping+0x44>)
 8001d06:	68db      	ldr	r3, [r3, #12]
 8001d08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d0a:	68ba      	ldr	r2, [r7, #8]
 8001d0c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001d10:	4013      	ands	r3, r2
 8001d12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d18:	68bb      	ldr	r3, [r7, #8]
 8001d1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d1c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001d20:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d26:	4a04      	ldr	r2, [pc, #16]	@ (8001d38 <__NVIC_SetPriorityGrouping+0x44>)
 8001d28:	68bb      	ldr	r3, [r7, #8]
 8001d2a:	60d3      	str	r3, [r2, #12]
}
 8001d2c:	bf00      	nop
 8001d2e:	3714      	adds	r7, #20
 8001d30:	46bd      	mov	sp, r7
 8001d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d36:	4770      	bx	lr
 8001d38:	e000ed00 	.word	0xe000ed00

08001d3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d40:	4b04      	ldr	r3, [pc, #16]	@ (8001d54 <__NVIC_GetPriorityGrouping+0x18>)
 8001d42:	68db      	ldr	r3, [r3, #12]
 8001d44:	0a1b      	lsrs	r3, r3, #8
 8001d46:	f003 0307 	and.w	r3, r3, #7
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d52:	4770      	bx	lr
 8001d54:	e000ed00 	.word	0xe000ed00

08001d58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b083      	sub	sp, #12
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	4603      	mov	r3, r0
 8001d60:	6039      	str	r1, [r7, #0]
 8001d62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	db0a      	blt.n	8001d82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	b2da      	uxtb	r2, r3
 8001d70:	490c      	ldr	r1, [pc, #48]	@ (8001da4 <__NVIC_SetPriority+0x4c>)
 8001d72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d76:	0112      	lsls	r2, r2, #4
 8001d78:	b2d2      	uxtb	r2, r2
 8001d7a:	440b      	add	r3, r1
 8001d7c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d80:	e00a      	b.n	8001d98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	b2da      	uxtb	r2, r3
 8001d86:	4908      	ldr	r1, [pc, #32]	@ (8001da8 <__NVIC_SetPriority+0x50>)
 8001d88:	79fb      	ldrb	r3, [r7, #7]
 8001d8a:	f003 030f 	and.w	r3, r3, #15
 8001d8e:	3b04      	subs	r3, #4
 8001d90:	0112      	lsls	r2, r2, #4
 8001d92:	b2d2      	uxtb	r2, r2
 8001d94:	440b      	add	r3, r1
 8001d96:	761a      	strb	r2, [r3, #24]
}
 8001d98:	bf00      	nop
 8001d9a:	370c      	adds	r7, #12
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da2:	4770      	bx	lr
 8001da4:	e000e100 	.word	0xe000e100
 8001da8:	e000ed00 	.word	0xe000ed00

08001dac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b089      	sub	sp, #36	@ 0x24
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	60f8      	str	r0, [r7, #12]
 8001db4:	60b9      	str	r1, [r7, #8]
 8001db6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	f003 0307 	and.w	r3, r3, #7
 8001dbe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001dc0:	69fb      	ldr	r3, [r7, #28]
 8001dc2:	f1c3 0307 	rsb	r3, r3, #7
 8001dc6:	2b04      	cmp	r3, #4
 8001dc8:	bf28      	it	cs
 8001dca:	2304      	movcs	r3, #4
 8001dcc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dce:	69fb      	ldr	r3, [r7, #28]
 8001dd0:	3304      	adds	r3, #4
 8001dd2:	2b06      	cmp	r3, #6
 8001dd4:	d902      	bls.n	8001ddc <NVIC_EncodePriority+0x30>
 8001dd6:	69fb      	ldr	r3, [r7, #28]
 8001dd8:	3b03      	subs	r3, #3
 8001dda:	e000      	b.n	8001dde <NVIC_EncodePriority+0x32>
 8001ddc:	2300      	movs	r3, #0
 8001dde:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001de0:	f04f 32ff 	mov.w	r2, #4294967295
 8001de4:	69bb      	ldr	r3, [r7, #24]
 8001de6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dea:	43da      	mvns	r2, r3
 8001dec:	68bb      	ldr	r3, [r7, #8]
 8001dee:	401a      	ands	r2, r3
 8001df0:	697b      	ldr	r3, [r7, #20]
 8001df2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001df4:	f04f 31ff 	mov.w	r1, #4294967295
 8001df8:	697b      	ldr	r3, [r7, #20]
 8001dfa:	fa01 f303 	lsl.w	r3, r1, r3
 8001dfe:	43d9      	mvns	r1, r3
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e04:	4313      	orrs	r3, r2
         );
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	3724      	adds	r7, #36	@ 0x24
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e10:	4770      	bx	lr
	...

08001e14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b082      	sub	sp, #8
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	3b01      	subs	r3, #1
 8001e20:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001e24:	d301      	bcc.n	8001e2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e26:	2301      	movs	r3, #1
 8001e28:	e00f      	b.n	8001e4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e2a:	4a0a      	ldr	r2, [pc, #40]	@ (8001e54 <SysTick_Config+0x40>)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	3b01      	subs	r3, #1
 8001e30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e32:	210f      	movs	r1, #15
 8001e34:	f04f 30ff 	mov.w	r0, #4294967295
 8001e38:	f7ff ff8e 	bl	8001d58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e3c:	4b05      	ldr	r3, [pc, #20]	@ (8001e54 <SysTick_Config+0x40>)
 8001e3e:	2200      	movs	r2, #0
 8001e40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e42:	4b04      	ldr	r3, [pc, #16]	@ (8001e54 <SysTick_Config+0x40>)
 8001e44:	2207      	movs	r2, #7
 8001e46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e48:	2300      	movs	r3, #0
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	3708      	adds	r7, #8
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	e000e010 	.word	0xe000e010

08001e58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b082      	sub	sp, #8
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e60:	6878      	ldr	r0, [r7, #4]
 8001e62:	f7ff ff47 	bl	8001cf4 <__NVIC_SetPriorityGrouping>
}
 8001e66:	bf00      	nop
 8001e68:	3708      	adds	r7, #8
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}

08001e6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e6e:	b580      	push	{r7, lr}
 8001e70:	b086      	sub	sp, #24
 8001e72:	af00      	add	r7, sp, #0
 8001e74:	4603      	mov	r3, r0
 8001e76:	60b9      	str	r1, [r7, #8]
 8001e78:	607a      	str	r2, [r7, #4]
 8001e7a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001e7c:	f7ff ff5e 	bl	8001d3c <__NVIC_GetPriorityGrouping>
 8001e80:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e82:	687a      	ldr	r2, [r7, #4]
 8001e84:	68b9      	ldr	r1, [r7, #8]
 8001e86:	6978      	ldr	r0, [r7, #20]
 8001e88:	f7ff ff90 	bl	8001dac <NVIC_EncodePriority>
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e92:	4611      	mov	r1, r2
 8001e94:	4618      	mov	r0, r3
 8001e96:	f7ff ff5f 	bl	8001d58 <__NVIC_SetPriority>
}
 8001e9a:	bf00      	nop
 8001e9c:	3718      	adds	r7, #24
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}

08001ea2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ea2:	b580      	push	{r7, lr}
 8001ea4:	b082      	sub	sp, #8
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001eaa:	6878      	ldr	r0, [r7, #4]
 8001eac:	f7ff ffb2 	bl	8001e14 <SysTick_Config>
 8001eb0:	4603      	mov	r3, r0
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	3708      	adds	r7, #8
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}
	...

08001ebc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b087      	sub	sp, #28
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
 8001ec4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001eca:	e15a      	b.n	8002182 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	681a      	ldr	r2, [r3, #0]
 8001ed0:	2101      	movs	r1, #1
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ed8:	4013      	ands	r3, r2
 8001eda:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	f000 814c 	beq.w	800217c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	f003 0303 	and.w	r3, r3, #3
 8001eec:	2b01      	cmp	r3, #1
 8001eee:	d005      	beq.n	8001efc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001ef8:	2b02      	cmp	r3, #2
 8001efa:	d130      	bne.n	8001f5e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	689b      	ldr	r3, [r3, #8]
 8001f00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001f02:	697b      	ldr	r3, [r7, #20]
 8001f04:	005b      	lsls	r3, r3, #1
 8001f06:	2203      	movs	r2, #3
 8001f08:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0c:	43db      	mvns	r3, r3
 8001f0e:	693a      	ldr	r2, [r7, #16]
 8001f10:	4013      	ands	r3, r2
 8001f12:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	68da      	ldr	r2, [r3, #12]
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	005b      	lsls	r3, r3, #1
 8001f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f20:	693a      	ldr	r2, [r7, #16]
 8001f22:	4313      	orrs	r3, r2
 8001f24:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	693a      	ldr	r2, [r7, #16]
 8001f2a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001f32:	2201      	movs	r2, #1
 8001f34:	697b      	ldr	r3, [r7, #20]
 8001f36:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3a:	43db      	mvns	r3, r3
 8001f3c:	693a      	ldr	r2, [r7, #16]
 8001f3e:	4013      	ands	r3, r2
 8001f40:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	091b      	lsrs	r3, r3, #4
 8001f48:	f003 0201 	and.w	r2, r3, #1
 8001f4c:	697b      	ldr	r3, [r7, #20]
 8001f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f52:	693a      	ldr	r2, [r7, #16]
 8001f54:	4313      	orrs	r3, r2
 8001f56:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	693a      	ldr	r2, [r7, #16]
 8001f5c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	f003 0303 	and.w	r3, r3, #3
 8001f66:	2b03      	cmp	r3, #3
 8001f68:	d017      	beq.n	8001f9a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	68db      	ldr	r3, [r3, #12]
 8001f6e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001f70:	697b      	ldr	r3, [r7, #20]
 8001f72:	005b      	lsls	r3, r3, #1
 8001f74:	2203      	movs	r2, #3
 8001f76:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7a:	43db      	mvns	r3, r3
 8001f7c:	693a      	ldr	r2, [r7, #16]
 8001f7e:	4013      	ands	r3, r2
 8001f80:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	689a      	ldr	r2, [r3, #8]
 8001f86:	697b      	ldr	r3, [r7, #20]
 8001f88:	005b      	lsls	r3, r3, #1
 8001f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8e:	693a      	ldr	r2, [r7, #16]
 8001f90:	4313      	orrs	r3, r2
 8001f92:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	693a      	ldr	r2, [r7, #16]
 8001f98:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	f003 0303 	and.w	r3, r3, #3
 8001fa2:	2b02      	cmp	r3, #2
 8001fa4:	d123      	bne.n	8001fee <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001fa6:	697b      	ldr	r3, [r7, #20]
 8001fa8:	08da      	lsrs	r2, r3, #3
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	3208      	adds	r2, #8
 8001fae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fb2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001fb4:	697b      	ldr	r3, [r7, #20]
 8001fb6:	f003 0307 	and.w	r3, r3, #7
 8001fba:	009b      	lsls	r3, r3, #2
 8001fbc:	220f      	movs	r2, #15
 8001fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc2:	43db      	mvns	r3, r3
 8001fc4:	693a      	ldr	r2, [r7, #16]
 8001fc6:	4013      	ands	r3, r2
 8001fc8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	691a      	ldr	r2, [r3, #16]
 8001fce:	697b      	ldr	r3, [r7, #20]
 8001fd0:	f003 0307 	and.w	r3, r3, #7
 8001fd4:	009b      	lsls	r3, r3, #2
 8001fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fda:	693a      	ldr	r2, [r7, #16]
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	08da      	lsrs	r2, r3, #3
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	3208      	adds	r2, #8
 8001fe8:	6939      	ldr	r1, [r7, #16]
 8001fea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001ff4:	697b      	ldr	r3, [r7, #20]
 8001ff6:	005b      	lsls	r3, r3, #1
 8001ff8:	2203      	movs	r2, #3
 8001ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffe:	43db      	mvns	r3, r3
 8002000:	693a      	ldr	r2, [r7, #16]
 8002002:	4013      	ands	r3, r2
 8002004:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	f003 0203 	and.w	r2, r3, #3
 800200e:	697b      	ldr	r3, [r7, #20]
 8002010:	005b      	lsls	r3, r3, #1
 8002012:	fa02 f303 	lsl.w	r3, r2, r3
 8002016:	693a      	ldr	r2, [r7, #16]
 8002018:	4313      	orrs	r3, r2
 800201a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	693a      	ldr	r2, [r7, #16]
 8002020:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800202a:	2b00      	cmp	r3, #0
 800202c:	f000 80a6 	beq.w	800217c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002030:	4b5b      	ldr	r3, [pc, #364]	@ (80021a0 <HAL_GPIO_Init+0x2e4>)
 8002032:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002034:	4a5a      	ldr	r2, [pc, #360]	@ (80021a0 <HAL_GPIO_Init+0x2e4>)
 8002036:	f043 0301 	orr.w	r3, r3, #1
 800203a:	6613      	str	r3, [r2, #96]	@ 0x60
 800203c:	4b58      	ldr	r3, [pc, #352]	@ (80021a0 <HAL_GPIO_Init+0x2e4>)
 800203e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002040:	f003 0301 	and.w	r3, r3, #1
 8002044:	60bb      	str	r3, [r7, #8]
 8002046:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002048:	4a56      	ldr	r2, [pc, #344]	@ (80021a4 <HAL_GPIO_Init+0x2e8>)
 800204a:	697b      	ldr	r3, [r7, #20]
 800204c:	089b      	lsrs	r3, r3, #2
 800204e:	3302      	adds	r3, #2
 8002050:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002054:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002056:	697b      	ldr	r3, [r7, #20]
 8002058:	f003 0303 	and.w	r3, r3, #3
 800205c:	009b      	lsls	r3, r3, #2
 800205e:	220f      	movs	r2, #15
 8002060:	fa02 f303 	lsl.w	r3, r2, r3
 8002064:	43db      	mvns	r3, r3
 8002066:	693a      	ldr	r2, [r7, #16]
 8002068:	4013      	ands	r3, r2
 800206a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002072:	d01f      	beq.n	80020b4 <HAL_GPIO_Init+0x1f8>
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	4a4c      	ldr	r2, [pc, #304]	@ (80021a8 <HAL_GPIO_Init+0x2ec>)
 8002078:	4293      	cmp	r3, r2
 800207a:	d019      	beq.n	80020b0 <HAL_GPIO_Init+0x1f4>
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	4a4b      	ldr	r2, [pc, #300]	@ (80021ac <HAL_GPIO_Init+0x2f0>)
 8002080:	4293      	cmp	r3, r2
 8002082:	d013      	beq.n	80020ac <HAL_GPIO_Init+0x1f0>
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	4a4a      	ldr	r2, [pc, #296]	@ (80021b0 <HAL_GPIO_Init+0x2f4>)
 8002088:	4293      	cmp	r3, r2
 800208a:	d00d      	beq.n	80020a8 <HAL_GPIO_Init+0x1ec>
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	4a49      	ldr	r2, [pc, #292]	@ (80021b4 <HAL_GPIO_Init+0x2f8>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d007      	beq.n	80020a4 <HAL_GPIO_Init+0x1e8>
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	4a48      	ldr	r2, [pc, #288]	@ (80021b8 <HAL_GPIO_Init+0x2fc>)
 8002098:	4293      	cmp	r3, r2
 800209a:	d101      	bne.n	80020a0 <HAL_GPIO_Init+0x1e4>
 800209c:	2305      	movs	r3, #5
 800209e:	e00a      	b.n	80020b6 <HAL_GPIO_Init+0x1fa>
 80020a0:	2306      	movs	r3, #6
 80020a2:	e008      	b.n	80020b6 <HAL_GPIO_Init+0x1fa>
 80020a4:	2304      	movs	r3, #4
 80020a6:	e006      	b.n	80020b6 <HAL_GPIO_Init+0x1fa>
 80020a8:	2303      	movs	r3, #3
 80020aa:	e004      	b.n	80020b6 <HAL_GPIO_Init+0x1fa>
 80020ac:	2302      	movs	r3, #2
 80020ae:	e002      	b.n	80020b6 <HAL_GPIO_Init+0x1fa>
 80020b0:	2301      	movs	r3, #1
 80020b2:	e000      	b.n	80020b6 <HAL_GPIO_Init+0x1fa>
 80020b4:	2300      	movs	r3, #0
 80020b6:	697a      	ldr	r2, [r7, #20]
 80020b8:	f002 0203 	and.w	r2, r2, #3
 80020bc:	0092      	lsls	r2, r2, #2
 80020be:	4093      	lsls	r3, r2
 80020c0:	693a      	ldr	r2, [r7, #16]
 80020c2:	4313      	orrs	r3, r2
 80020c4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80020c6:	4937      	ldr	r1, [pc, #220]	@ (80021a4 <HAL_GPIO_Init+0x2e8>)
 80020c8:	697b      	ldr	r3, [r7, #20]
 80020ca:	089b      	lsrs	r3, r3, #2
 80020cc:	3302      	adds	r3, #2
 80020ce:	693a      	ldr	r2, [r7, #16]
 80020d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80020d4:	4b39      	ldr	r3, [pc, #228]	@ (80021bc <HAL_GPIO_Init+0x300>)
 80020d6:	689b      	ldr	r3, [r3, #8]
 80020d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	43db      	mvns	r3, r3
 80020de:	693a      	ldr	r2, [r7, #16]
 80020e0:	4013      	ands	r3, r2
 80020e2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d003      	beq.n	80020f8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80020f0:	693a      	ldr	r2, [r7, #16]
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	4313      	orrs	r3, r2
 80020f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80020f8:	4a30      	ldr	r2, [pc, #192]	@ (80021bc <HAL_GPIO_Init+0x300>)
 80020fa:	693b      	ldr	r3, [r7, #16]
 80020fc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80020fe:	4b2f      	ldr	r3, [pc, #188]	@ (80021bc <HAL_GPIO_Init+0x300>)
 8002100:	68db      	ldr	r3, [r3, #12]
 8002102:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	43db      	mvns	r3, r3
 8002108:	693a      	ldr	r2, [r7, #16]
 800210a:	4013      	ands	r3, r2
 800210c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002116:	2b00      	cmp	r3, #0
 8002118:	d003      	beq.n	8002122 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800211a:	693a      	ldr	r2, [r7, #16]
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	4313      	orrs	r3, r2
 8002120:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002122:	4a26      	ldr	r2, [pc, #152]	@ (80021bc <HAL_GPIO_Init+0x300>)
 8002124:	693b      	ldr	r3, [r7, #16]
 8002126:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002128:	4b24      	ldr	r3, [pc, #144]	@ (80021bc <HAL_GPIO_Init+0x300>)
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	43db      	mvns	r3, r3
 8002132:	693a      	ldr	r2, [r7, #16]
 8002134:	4013      	ands	r3, r2
 8002136:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002140:	2b00      	cmp	r3, #0
 8002142:	d003      	beq.n	800214c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002144:	693a      	ldr	r2, [r7, #16]
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	4313      	orrs	r3, r2
 800214a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800214c:	4a1b      	ldr	r2, [pc, #108]	@ (80021bc <HAL_GPIO_Init+0x300>)
 800214e:	693b      	ldr	r3, [r7, #16]
 8002150:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002152:	4b1a      	ldr	r3, [pc, #104]	@ (80021bc <HAL_GPIO_Init+0x300>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	43db      	mvns	r3, r3
 800215c:	693a      	ldr	r2, [r7, #16]
 800215e:	4013      	ands	r3, r2
 8002160:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800216a:	2b00      	cmp	r3, #0
 800216c:	d003      	beq.n	8002176 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800216e:	693a      	ldr	r2, [r7, #16]
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	4313      	orrs	r3, r2
 8002174:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002176:	4a11      	ldr	r2, [pc, #68]	@ (80021bc <HAL_GPIO_Init+0x300>)
 8002178:	693b      	ldr	r3, [r7, #16]
 800217a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	3301      	adds	r3, #1
 8002180:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	681a      	ldr	r2, [r3, #0]
 8002186:	697b      	ldr	r3, [r7, #20]
 8002188:	fa22 f303 	lsr.w	r3, r2, r3
 800218c:	2b00      	cmp	r3, #0
 800218e:	f47f ae9d 	bne.w	8001ecc <HAL_GPIO_Init+0x10>
  }
}
 8002192:	bf00      	nop
 8002194:	bf00      	nop
 8002196:	371c      	adds	r7, #28
 8002198:	46bd      	mov	sp, r7
 800219a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219e:	4770      	bx	lr
 80021a0:	40021000 	.word	0x40021000
 80021a4:	40010000 	.word	0x40010000
 80021a8:	48000400 	.word	0x48000400
 80021ac:	48000800 	.word	0x48000800
 80021b0:	48000c00 	.word	0x48000c00
 80021b4:	48001000 	.word	0x48001000
 80021b8:	48001400 	.word	0x48001400
 80021bc:	40010400 	.word	0x40010400

080021c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b083      	sub	sp, #12
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
 80021c8:	460b      	mov	r3, r1
 80021ca:	807b      	strh	r3, [r7, #2]
 80021cc:	4613      	mov	r3, r2
 80021ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80021d0:	787b      	ldrb	r3, [r7, #1]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d003      	beq.n	80021de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80021d6:	887a      	ldrh	r2, [r7, #2]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80021dc:	e002      	b.n	80021e4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80021de:	887a      	ldrh	r2, [r7, #2]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80021e4:	bf00      	nop
 80021e6:	370c      	adds	r7, #12
 80021e8:	46bd      	mov	sp, r7
 80021ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ee:	4770      	bx	lr

080021f0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b082      	sub	sp, #8
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d101      	bne.n	8002202 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80021fe:	2301      	movs	r3, #1
 8002200:	e08d      	b.n	800231e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002208:	b2db      	uxtb	r3, r3
 800220a:	2b00      	cmp	r3, #0
 800220c:	d106      	bne.n	800221c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2200      	movs	r2, #0
 8002212:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002216:	6878      	ldr	r0, [r7, #4]
 8002218:	f7fe feca 	bl	8000fb0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2224      	movs	r2, #36	@ 0x24
 8002220:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	681a      	ldr	r2, [r3, #0]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f022 0201 	bic.w	r2, r2, #1
 8002232:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	685a      	ldr	r2, [r3, #4]
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002240:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	689a      	ldr	r2, [r3, #8]
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002250:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	68db      	ldr	r3, [r3, #12]
 8002256:	2b01      	cmp	r3, #1
 8002258:	d107      	bne.n	800226a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	689a      	ldr	r2, [r3, #8]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002266:	609a      	str	r2, [r3, #8]
 8002268:	e006      	b.n	8002278 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	689a      	ldr	r2, [r3, #8]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002276:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	68db      	ldr	r3, [r3, #12]
 800227c:	2b02      	cmp	r3, #2
 800227e:	d108      	bne.n	8002292 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	685a      	ldr	r2, [r3, #4]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800228e:	605a      	str	r2, [r3, #4]
 8002290:	e007      	b.n	80022a2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	685a      	ldr	r2, [r3, #4]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80022a0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	687a      	ldr	r2, [r7, #4]
 80022aa:	6812      	ldr	r2, [r2, #0]
 80022ac:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80022b0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80022b4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	68da      	ldr	r2, [r3, #12]
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80022c4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	691a      	ldr	r2, [r3, #16]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	695b      	ldr	r3, [r3, #20]
 80022ce:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	699b      	ldr	r3, [r3, #24]
 80022d6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	430a      	orrs	r2, r1
 80022de:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	69d9      	ldr	r1, [r3, #28]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6a1a      	ldr	r2, [r3, #32]
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	430a      	orrs	r2, r1
 80022ee:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	681a      	ldr	r2, [r3, #0]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f042 0201 	orr.w	r2, r2, #1
 80022fe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2200      	movs	r2, #0
 8002304:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2220      	movs	r2, #32
 800230a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2200      	movs	r2, #0
 8002312:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2200      	movs	r2, #0
 8002318:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800231c:	2300      	movs	r3, #0
}
 800231e:	4618      	mov	r0, r3
 8002320:	3708      	adds	r7, #8
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}

08002326 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002326:	b480      	push	{r7}
 8002328:	b083      	sub	sp, #12
 800232a:	af00      	add	r7, sp, #0
 800232c:	6078      	str	r0, [r7, #4]
 800232e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002336:	b2db      	uxtb	r3, r3
 8002338:	2b20      	cmp	r3, #32
 800233a:	d138      	bne.n	80023ae <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002342:	2b01      	cmp	r3, #1
 8002344:	d101      	bne.n	800234a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002346:	2302      	movs	r3, #2
 8002348:	e032      	b.n	80023b0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2201      	movs	r2, #1
 800234e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2224      	movs	r2, #36	@ 0x24
 8002356:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	681a      	ldr	r2, [r3, #0]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f022 0201 	bic.w	r2, r2, #1
 8002368:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	681a      	ldr	r2, [r3, #0]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002378:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	6819      	ldr	r1, [r3, #0]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	683a      	ldr	r2, [r7, #0]
 8002386:	430a      	orrs	r2, r1
 8002388:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	681a      	ldr	r2, [r3, #0]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f042 0201 	orr.w	r2, r2, #1
 8002398:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2220      	movs	r2, #32
 800239e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2200      	movs	r2, #0
 80023a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80023aa:	2300      	movs	r3, #0
 80023ac:	e000      	b.n	80023b0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80023ae:	2302      	movs	r3, #2
  }
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	370c      	adds	r7, #12
 80023b4:	46bd      	mov	sp, r7
 80023b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ba:	4770      	bx	lr

080023bc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80023bc:	b480      	push	{r7}
 80023be:	b085      	sub	sp, #20
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
 80023c4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80023cc:	b2db      	uxtb	r3, r3
 80023ce:	2b20      	cmp	r3, #32
 80023d0:	d139      	bne.n	8002446 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80023d8:	2b01      	cmp	r3, #1
 80023da:	d101      	bne.n	80023e0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80023dc:	2302      	movs	r3, #2
 80023de:	e033      	b.n	8002448 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2201      	movs	r2, #1
 80023e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2224      	movs	r2, #36	@ 0x24
 80023ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	681a      	ldr	r2, [r3, #0]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f022 0201 	bic.w	r2, r2, #1
 80023fe:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800240e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	021b      	lsls	r3, r3, #8
 8002414:	68fa      	ldr	r2, [r7, #12]
 8002416:	4313      	orrs	r3, r2
 8002418:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	68fa      	ldr	r2, [r7, #12]
 8002420:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	681a      	ldr	r2, [r3, #0]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f042 0201 	orr.w	r2, r2, #1
 8002430:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2220      	movs	r2, #32
 8002436:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2200      	movs	r2, #0
 800243e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002442:	2300      	movs	r3, #0
 8002444:	e000      	b.n	8002448 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002446:	2302      	movs	r3, #2
  }
}
 8002448:	4618      	mov	r0, r3
 800244a:	3714      	adds	r7, #20
 800244c:	46bd      	mov	sp, r7
 800244e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002452:	4770      	bx	lr

08002454 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002454:	b480      	push	{r7}
 8002456:	b085      	sub	sp, #20
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d141      	bne.n	80024e6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002462:	4b4b      	ldr	r3, [pc, #300]	@ (8002590 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800246a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800246e:	d131      	bne.n	80024d4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002470:	4b47      	ldr	r3, [pc, #284]	@ (8002590 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002472:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002476:	4a46      	ldr	r2, [pc, #280]	@ (8002590 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002478:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800247c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002480:	4b43      	ldr	r3, [pc, #268]	@ (8002590 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002488:	4a41      	ldr	r2, [pc, #260]	@ (8002590 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800248a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800248e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002490:	4b40      	ldr	r3, [pc, #256]	@ (8002594 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	2232      	movs	r2, #50	@ 0x32
 8002496:	fb02 f303 	mul.w	r3, r2, r3
 800249a:	4a3f      	ldr	r2, [pc, #252]	@ (8002598 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800249c:	fba2 2303 	umull	r2, r3, r2, r3
 80024a0:	0c9b      	lsrs	r3, r3, #18
 80024a2:	3301      	adds	r3, #1
 80024a4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80024a6:	e002      	b.n	80024ae <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	3b01      	subs	r3, #1
 80024ac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80024ae:	4b38      	ldr	r3, [pc, #224]	@ (8002590 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024b0:	695b      	ldr	r3, [r3, #20]
 80024b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80024ba:	d102      	bne.n	80024c2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d1f2      	bne.n	80024a8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80024c2:	4b33      	ldr	r3, [pc, #204]	@ (8002590 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024c4:	695b      	ldr	r3, [r3, #20]
 80024c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80024ce:	d158      	bne.n	8002582 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80024d0:	2303      	movs	r3, #3
 80024d2:	e057      	b.n	8002584 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80024d4:	4b2e      	ldr	r3, [pc, #184]	@ (8002590 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80024da:	4a2d      	ldr	r2, [pc, #180]	@ (8002590 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024dc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80024e0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80024e4:	e04d      	b.n	8002582 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80024ec:	d141      	bne.n	8002572 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80024ee:	4b28      	ldr	r3, [pc, #160]	@ (8002590 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80024f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80024fa:	d131      	bne.n	8002560 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80024fc:	4b24      	ldr	r3, [pc, #144]	@ (8002590 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002502:	4a23      	ldr	r2, [pc, #140]	@ (8002590 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002504:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002508:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800250c:	4b20      	ldr	r3, [pc, #128]	@ (8002590 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002514:	4a1e      	ldr	r2, [pc, #120]	@ (8002590 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002516:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800251a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800251c:	4b1d      	ldr	r3, [pc, #116]	@ (8002594 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	2232      	movs	r2, #50	@ 0x32
 8002522:	fb02 f303 	mul.w	r3, r2, r3
 8002526:	4a1c      	ldr	r2, [pc, #112]	@ (8002598 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002528:	fba2 2303 	umull	r2, r3, r2, r3
 800252c:	0c9b      	lsrs	r3, r3, #18
 800252e:	3301      	adds	r3, #1
 8002530:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002532:	e002      	b.n	800253a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	3b01      	subs	r3, #1
 8002538:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800253a:	4b15      	ldr	r3, [pc, #84]	@ (8002590 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800253c:	695b      	ldr	r3, [r3, #20]
 800253e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002542:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002546:	d102      	bne.n	800254e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d1f2      	bne.n	8002534 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800254e:	4b10      	ldr	r3, [pc, #64]	@ (8002590 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002550:	695b      	ldr	r3, [r3, #20]
 8002552:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002556:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800255a:	d112      	bne.n	8002582 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800255c:	2303      	movs	r3, #3
 800255e:	e011      	b.n	8002584 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002560:	4b0b      	ldr	r3, [pc, #44]	@ (8002590 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002562:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002566:	4a0a      	ldr	r2, [pc, #40]	@ (8002590 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002568:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800256c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002570:	e007      	b.n	8002582 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002572:	4b07      	ldr	r3, [pc, #28]	@ (8002590 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800257a:	4a05      	ldr	r2, [pc, #20]	@ (8002590 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800257c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002580:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002582:	2300      	movs	r3, #0
}
 8002584:	4618      	mov	r0, r3
 8002586:	3714      	adds	r7, #20
 8002588:	46bd      	mov	sp, r7
 800258a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258e:	4770      	bx	lr
 8002590:	40007000 	.word	0x40007000
 8002594:	20000010 	.word	0x20000010
 8002598:	431bde83 	.word	0x431bde83

0800259c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800259c:	b480      	push	{r7}
 800259e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80025a0:	4b05      	ldr	r3, [pc, #20]	@ (80025b8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80025a2:	689b      	ldr	r3, [r3, #8]
 80025a4:	4a04      	ldr	r2, [pc, #16]	@ (80025b8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80025a6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80025aa:	6093      	str	r3, [r2, #8]
}
 80025ac:	bf00      	nop
 80025ae:	46bd      	mov	sp, r7
 80025b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b4:	4770      	bx	lr
 80025b6:	bf00      	nop
 80025b8:	40007000 	.word	0x40007000

080025bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b088      	sub	sp, #32
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d101      	bne.n	80025ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80025ca:	2301      	movs	r3, #1
 80025cc:	e2fe      	b.n	8002bcc <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f003 0301 	and.w	r3, r3, #1
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d075      	beq.n	80026c6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80025da:	4b97      	ldr	r3, [pc, #604]	@ (8002838 <HAL_RCC_OscConfig+0x27c>)
 80025dc:	689b      	ldr	r3, [r3, #8]
 80025de:	f003 030c 	and.w	r3, r3, #12
 80025e2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80025e4:	4b94      	ldr	r3, [pc, #592]	@ (8002838 <HAL_RCC_OscConfig+0x27c>)
 80025e6:	68db      	ldr	r3, [r3, #12]
 80025e8:	f003 0303 	and.w	r3, r3, #3
 80025ec:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80025ee:	69bb      	ldr	r3, [r7, #24]
 80025f0:	2b0c      	cmp	r3, #12
 80025f2:	d102      	bne.n	80025fa <HAL_RCC_OscConfig+0x3e>
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	2b03      	cmp	r3, #3
 80025f8:	d002      	beq.n	8002600 <HAL_RCC_OscConfig+0x44>
 80025fa:	69bb      	ldr	r3, [r7, #24]
 80025fc:	2b08      	cmp	r3, #8
 80025fe:	d10b      	bne.n	8002618 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002600:	4b8d      	ldr	r3, [pc, #564]	@ (8002838 <HAL_RCC_OscConfig+0x27c>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002608:	2b00      	cmp	r3, #0
 800260a:	d05b      	beq.n	80026c4 <HAL_RCC_OscConfig+0x108>
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d157      	bne.n	80026c4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002614:	2301      	movs	r3, #1
 8002616:	e2d9      	b.n	8002bcc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002620:	d106      	bne.n	8002630 <HAL_RCC_OscConfig+0x74>
 8002622:	4b85      	ldr	r3, [pc, #532]	@ (8002838 <HAL_RCC_OscConfig+0x27c>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a84      	ldr	r2, [pc, #528]	@ (8002838 <HAL_RCC_OscConfig+0x27c>)
 8002628:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800262c:	6013      	str	r3, [r2, #0]
 800262e:	e01d      	b.n	800266c <HAL_RCC_OscConfig+0xb0>
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002638:	d10c      	bne.n	8002654 <HAL_RCC_OscConfig+0x98>
 800263a:	4b7f      	ldr	r3, [pc, #508]	@ (8002838 <HAL_RCC_OscConfig+0x27c>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4a7e      	ldr	r2, [pc, #504]	@ (8002838 <HAL_RCC_OscConfig+0x27c>)
 8002640:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002644:	6013      	str	r3, [r2, #0]
 8002646:	4b7c      	ldr	r3, [pc, #496]	@ (8002838 <HAL_RCC_OscConfig+0x27c>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4a7b      	ldr	r2, [pc, #492]	@ (8002838 <HAL_RCC_OscConfig+0x27c>)
 800264c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002650:	6013      	str	r3, [r2, #0]
 8002652:	e00b      	b.n	800266c <HAL_RCC_OscConfig+0xb0>
 8002654:	4b78      	ldr	r3, [pc, #480]	@ (8002838 <HAL_RCC_OscConfig+0x27c>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a77      	ldr	r2, [pc, #476]	@ (8002838 <HAL_RCC_OscConfig+0x27c>)
 800265a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800265e:	6013      	str	r3, [r2, #0]
 8002660:	4b75      	ldr	r3, [pc, #468]	@ (8002838 <HAL_RCC_OscConfig+0x27c>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a74      	ldr	r2, [pc, #464]	@ (8002838 <HAL_RCC_OscConfig+0x27c>)
 8002666:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800266a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d013      	beq.n	800269c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002674:	f7ff fb32 	bl	8001cdc <HAL_GetTick>
 8002678:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800267a:	e008      	b.n	800268e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800267c:	f7ff fb2e 	bl	8001cdc <HAL_GetTick>
 8002680:	4602      	mov	r2, r0
 8002682:	693b      	ldr	r3, [r7, #16]
 8002684:	1ad3      	subs	r3, r2, r3
 8002686:	2b64      	cmp	r3, #100	@ 0x64
 8002688:	d901      	bls.n	800268e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800268a:	2303      	movs	r3, #3
 800268c:	e29e      	b.n	8002bcc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800268e:	4b6a      	ldr	r3, [pc, #424]	@ (8002838 <HAL_RCC_OscConfig+0x27c>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002696:	2b00      	cmp	r3, #0
 8002698:	d0f0      	beq.n	800267c <HAL_RCC_OscConfig+0xc0>
 800269a:	e014      	b.n	80026c6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800269c:	f7ff fb1e 	bl	8001cdc <HAL_GetTick>
 80026a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80026a2:	e008      	b.n	80026b6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026a4:	f7ff fb1a 	bl	8001cdc <HAL_GetTick>
 80026a8:	4602      	mov	r2, r0
 80026aa:	693b      	ldr	r3, [r7, #16]
 80026ac:	1ad3      	subs	r3, r2, r3
 80026ae:	2b64      	cmp	r3, #100	@ 0x64
 80026b0:	d901      	bls.n	80026b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80026b2:	2303      	movs	r3, #3
 80026b4:	e28a      	b.n	8002bcc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80026b6:	4b60      	ldr	r3, [pc, #384]	@ (8002838 <HAL_RCC_OscConfig+0x27c>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d1f0      	bne.n	80026a4 <HAL_RCC_OscConfig+0xe8>
 80026c2:	e000      	b.n	80026c6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f003 0302 	and.w	r3, r3, #2
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d075      	beq.n	80027be <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026d2:	4b59      	ldr	r3, [pc, #356]	@ (8002838 <HAL_RCC_OscConfig+0x27c>)
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	f003 030c 	and.w	r3, r3, #12
 80026da:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80026dc:	4b56      	ldr	r3, [pc, #344]	@ (8002838 <HAL_RCC_OscConfig+0x27c>)
 80026de:	68db      	ldr	r3, [r3, #12]
 80026e0:	f003 0303 	and.w	r3, r3, #3
 80026e4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80026e6:	69bb      	ldr	r3, [r7, #24]
 80026e8:	2b0c      	cmp	r3, #12
 80026ea:	d102      	bne.n	80026f2 <HAL_RCC_OscConfig+0x136>
 80026ec:	697b      	ldr	r3, [r7, #20]
 80026ee:	2b02      	cmp	r3, #2
 80026f0:	d002      	beq.n	80026f8 <HAL_RCC_OscConfig+0x13c>
 80026f2:	69bb      	ldr	r3, [r7, #24]
 80026f4:	2b04      	cmp	r3, #4
 80026f6:	d11f      	bne.n	8002738 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80026f8:	4b4f      	ldr	r3, [pc, #316]	@ (8002838 <HAL_RCC_OscConfig+0x27c>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002700:	2b00      	cmp	r3, #0
 8002702:	d005      	beq.n	8002710 <HAL_RCC_OscConfig+0x154>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	68db      	ldr	r3, [r3, #12]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d101      	bne.n	8002710 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800270c:	2301      	movs	r3, #1
 800270e:	e25d      	b.n	8002bcc <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002710:	4b49      	ldr	r3, [pc, #292]	@ (8002838 <HAL_RCC_OscConfig+0x27c>)
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	691b      	ldr	r3, [r3, #16]
 800271c:	061b      	lsls	r3, r3, #24
 800271e:	4946      	ldr	r1, [pc, #280]	@ (8002838 <HAL_RCC_OscConfig+0x27c>)
 8002720:	4313      	orrs	r3, r2
 8002722:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002724:	4b45      	ldr	r3, [pc, #276]	@ (800283c <HAL_RCC_OscConfig+0x280>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4618      	mov	r0, r3
 800272a:	f7ff fa8b 	bl	8001c44 <HAL_InitTick>
 800272e:	4603      	mov	r3, r0
 8002730:	2b00      	cmp	r3, #0
 8002732:	d043      	beq.n	80027bc <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002734:	2301      	movs	r3, #1
 8002736:	e249      	b.n	8002bcc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	68db      	ldr	r3, [r3, #12]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d023      	beq.n	8002788 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002740:	4b3d      	ldr	r3, [pc, #244]	@ (8002838 <HAL_RCC_OscConfig+0x27c>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a3c      	ldr	r2, [pc, #240]	@ (8002838 <HAL_RCC_OscConfig+0x27c>)
 8002746:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800274a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800274c:	f7ff fac6 	bl	8001cdc <HAL_GetTick>
 8002750:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002752:	e008      	b.n	8002766 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002754:	f7ff fac2 	bl	8001cdc <HAL_GetTick>
 8002758:	4602      	mov	r2, r0
 800275a:	693b      	ldr	r3, [r7, #16]
 800275c:	1ad3      	subs	r3, r2, r3
 800275e:	2b02      	cmp	r3, #2
 8002760:	d901      	bls.n	8002766 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002762:	2303      	movs	r3, #3
 8002764:	e232      	b.n	8002bcc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002766:	4b34      	ldr	r3, [pc, #208]	@ (8002838 <HAL_RCC_OscConfig+0x27c>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800276e:	2b00      	cmp	r3, #0
 8002770:	d0f0      	beq.n	8002754 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002772:	4b31      	ldr	r3, [pc, #196]	@ (8002838 <HAL_RCC_OscConfig+0x27c>)
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	691b      	ldr	r3, [r3, #16]
 800277e:	061b      	lsls	r3, r3, #24
 8002780:	492d      	ldr	r1, [pc, #180]	@ (8002838 <HAL_RCC_OscConfig+0x27c>)
 8002782:	4313      	orrs	r3, r2
 8002784:	604b      	str	r3, [r1, #4]
 8002786:	e01a      	b.n	80027be <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002788:	4b2b      	ldr	r3, [pc, #172]	@ (8002838 <HAL_RCC_OscConfig+0x27c>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a2a      	ldr	r2, [pc, #168]	@ (8002838 <HAL_RCC_OscConfig+0x27c>)
 800278e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002792:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002794:	f7ff faa2 	bl	8001cdc <HAL_GetTick>
 8002798:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800279a:	e008      	b.n	80027ae <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800279c:	f7ff fa9e 	bl	8001cdc <HAL_GetTick>
 80027a0:	4602      	mov	r2, r0
 80027a2:	693b      	ldr	r3, [r7, #16]
 80027a4:	1ad3      	subs	r3, r2, r3
 80027a6:	2b02      	cmp	r3, #2
 80027a8:	d901      	bls.n	80027ae <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80027aa:	2303      	movs	r3, #3
 80027ac:	e20e      	b.n	8002bcc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80027ae:	4b22      	ldr	r3, [pc, #136]	@ (8002838 <HAL_RCC_OscConfig+0x27c>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d1f0      	bne.n	800279c <HAL_RCC_OscConfig+0x1e0>
 80027ba:	e000      	b.n	80027be <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80027bc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f003 0308 	and.w	r3, r3, #8
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d041      	beq.n	800284e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	695b      	ldr	r3, [r3, #20]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d01c      	beq.n	800280c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027d2:	4b19      	ldr	r3, [pc, #100]	@ (8002838 <HAL_RCC_OscConfig+0x27c>)
 80027d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80027d8:	4a17      	ldr	r2, [pc, #92]	@ (8002838 <HAL_RCC_OscConfig+0x27c>)
 80027da:	f043 0301 	orr.w	r3, r3, #1
 80027de:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027e2:	f7ff fa7b 	bl	8001cdc <HAL_GetTick>
 80027e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80027e8:	e008      	b.n	80027fc <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027ea:	f7ff fa77 	bl	8001cdc <HAL_GetTick>
 80027ee:	4602      	mov	r2, r0
 80027f0:	693b      	ldr	r3, [r7, #16]
 80027f2:	1ad3      	subs	r3, r2, r3
 80027f4:	2b02      	cmp	r3, #2
 80027f6:	d901      	bls.n	80027fc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80027f8:	2303      	movs	r3, #3
 80027fa:	e1e7      	b.n	8002bcc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80027fc:	4b0e      	ldr	r3, [pc, #56]	@ (8002838 <HAL_RCC_OscConfig+0x27c>)
 80027fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002802:	f003 0302 	and.w	r3, r3, #2
 8002806:	2b00      	cmp	r3, #0
 8002808:	d0ef      	beq.n	80027ea <HAL_RCC_OscConfig+0x22e>
 800280a:	e020      	b.n	800284e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800280c:	4b0a      	ldr	r3, [pc, #40]	@ (8002838 <HAL_RCC_OscConfig+0x27c>)
 800280e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002812:	4a09      	ldr	r2, [pc, #36]	@ (8002838 <HAL_RCC_OscConfig+0x27c>)
 8002814:	f023 0301 	bic.w	r3, r3, #1
 8002818:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800281c:	f7ff fa5e 	bl	8001cdc <HAL_GetTick>
 8002820:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002822:	e00d      	b.n	8002840 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002824:	f7ff fa5a 	bl	8001cdc <HAL_GetTick>
 8002828:	4602      	mov	r2, r0
 800282a:	693b      	ldr	r3, [r7, #16]
 800282c:	1ad3      	subs	r3, r2, r3
 800282e:	2b02      	cmp	r3, #2
 8002830:	d906      	bls.n	8002840 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002832:	2303      	movs	r3, #3
 8002834:	e1ca      	b.n	8002bcc <HAL_RCC_OscConfig+0x610>
 8002836:	bf00      	nop
 8002838:	40021000 	.word	0x40021000
 800283c:	20000014 	.word	0x20000014
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002840:	4b8c      	ldr	r3, [pc, #560]	@ (8002a74 <HAL_RCC_OscConfig+0x4b8>)
 8002842:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002846:	f003 0302 	and.w	r3, r3, #2
 800284a:	2b00      	cmp	r3, #0
 800284c:	d1ea      	bne.n	8002824 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f003 0304 	and.w	r3, r3, #4
 8002856:	2b00      	cmp	r3, #0
 8002858:	f000 80a6 	beq.w	80029a8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800285c:	2300      	movs	r3, #0
 800285e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002860:	4b84      	ldr	r3, [pc, #528]	@ (8002a74 <HAL_RCC_OscConfig+0x4b8>)
 8002862:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002864:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002868:	2b00      	cmp	r3, #0
 800286a:	d101      	bne.n	8002870 <HAL_RCC_OscConfig+0x2b4>
 800286c:	2301      	movs	r3, #1
 800286e:	e000      	b.n	8002872 <HAL_RCC_OscConfig+0x2b6>
 8002870:	2300      	movs	r3, #0
 8002872:	2b00      	cmp	r3, #0
 8002874:	d00d      	beq.n	8002892 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002876:	4b7f      	ldr	r3, [pc, #508]	@ (8002a74 <HAL_RCC_OscConfig+0x4b8>)
 8002878:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800287a:	4a7e      	ldr	r2, [pc, #504]	@ (8002a74 <HAL_RCC_OscConfig+0x4b8>)
 800287c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002880:	6593      	str	r3, [r2, #88]	@ 0x58
 8002882:	4b7c      	ldr	r3, [pc, #496]	@ (8002a74 <HAL_RCC_OscConfig+0x4b8>)
 8002884:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002886:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800288a:	60fb      	str	r3, [r7, #12]
 800288c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800288e:	2301      	movs	r3, #1
 8002890:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002892:	4b79      	ldr	r3, [pc, #484]	@ (8002a78 <HAL_RCC_OscConfig+0x4bc>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800289a:	2b00      	cmp	r3, #0
 800289c:	d118      	bne.n	80028d0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800289e:	4b76      	ldr	r3, [pc, #472]	@ (8002a78 <HAL_RCC_OscConfig+0x4bc>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a75      	ldr	r2, [pc, #468]	@ (8002a78 <HAL_RCC_OscConfig+0x4bc>)
 80028a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80028a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028aa:	f7ff fa17 	bl	8001cdc <HAL_GetTick>
 80028ae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80028b0:	e008      	b.n	80028c4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028b2:	f7ff fa13 	bl	8001cdc <HAL_GetTick>
 80028b6:	4602      	mov	r2, r0
 80028b8:	693b      	ldr	r3, [r7, #16]
 80028ba:	1ad3      	subs	r3, r2, r3
 80028bc:	2b02      	cmp	r3, #2
 80028be:	d901      	bls.n	80028c4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80028c0:	2303      	movs	r3, #3
 80028c2:	e183      	b.n	8002bcc <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80028c4:	4b6c      	ldr	r3, [pc, #432]	@ (8002a78 <HAL_RCC_OscConfig+0x4bc>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d0f0      	beq.n	80028b2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	689b      	ldr	r3, [r3, #8]
 80028d4:	2b01      	cmp	r3, #1
 80028d6:	d108      	bne.n	80028ea <HAL_RCC_OscConfig+0x32e>
 80028d8:	4b66      	ldr	r3, [pc, #408]	@ (8002a74 <HAL_RCC_OscConfig+0x4b8>)
 80028da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028de:	4a65      	ldr	r2, [pc, #404]	@ (8002a74 <HAL_RCC_OscConfig+0x4b8>)
 80028e0:	f043 0301 	orr.w	r3, r3, #1
 80028e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80028e8:	e024      	b.n	8002934 <HAL_RCC_OscConfig+0x378>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	689b      	ldr	r3, [r3, #8]
 80028ee:	2b05      	cmp	r3, #5
 80028f0:	d110      	bne.n	8002914 <HAL_RCC_OscConfig+0x358>
 80028f2:	4b60      	ldr	r3, [pc, #384]	@ (8002a74 <HAL_RCC_OscConfig+0x4b8>)
 80028f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028f8:	4a5e      	ldr	r2, [pc, #376]	@ (8002a74 <HAL_RCC_OscConfig+0x4b8>)
 80028fa:	f043 0304 	orr.w	r3, r3, #4
 80028fe:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002902:	4b5c      	ldr	r3, [pc, #368]	@ (8002a74 <HAL_RCC_OscConfig+0x4b8>)
 8002904:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002908:	4a5a      	ldr	r2, [pc, #360]	@ (8002a74 <HAL_RCC_OscConfig+0x4b8>)
 800290a:	f043 0301 	orr.w	r3, r3, #1
 800290e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002912:	e00f      	b.n	8002934 <HAL_RCC_OscConfig+0x378>
 8002914:	4b57      	ldr	r3, [pc, #348]	@ (8002a74 <HAL_RCC_OscConfig+0x4b8>)
 8002916:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800291a:	4a56      	ldr	r2, [pc, #344]	@ (8002a74 <HAL_RCC_OscConfig+0x4b8>)
 800291c:	f023 0301 	bic.w	r3, r3, #1
 8002920:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002924:	4b53      	ldr	r3, [pc, #332]	@ (8002a74 <HAL_RCC_OscConfig+0x4b8>)
 8002926:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800292a:	4a52      	ldr	r2, [pc, #328]	@ (8002a74 <HAL_RCC_OscConfig+0x4b8>)
 800292c:	f023 0304 	bic.w	r3, r3, #4
 8002930:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	689b      	ldr	r3, [r3, #8]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d016      	beq.n	800296a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800293c:	f7ff f9ce 	bl	8001cdc <HAL_GetTick>
 8002940:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002942:	e00a      	b.n	800295a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002944:	f7ff f9ca 	bl	8001cdc <HAL_GetTick>
 8002948:	4602      	mov	r2, r0
 800294a:	693b      	ldr	r3, [r7, #16]
 800294c:	1ad3      	subs	r3, r2, r3
 800294e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002952:	4293      	cmp	r3, r2
 8002954:	d901      	bls.n	800295a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002956:	2303      	movs	r3, #3
 8002958:	e138      	b.n	8002bcc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800295a:	4b46      	ldr	r3, [pc, #280]	@ (8002a74 <HAL_RCC_OscConfig+0x4b8>)
 800295c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002960:	f003 0302 	and.w	r3, r3, #2
 8002964:	2b00      	cmp	r3, #0
 8002966:	d0ed      	beq.n	8002944 <HAL_RCC_OscConfig+0x388>
 8002968:	e015      	b.n	8002996 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800296a:	f7ff f9b7 	bl	8001cdc <HAL_GetTick>
 800296e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002970:	e00a      	b.n	8002988 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002972:	f7ff f9b3 	bl	8001cdc <HAL_GetTick>
 8002976:	4602      	mov	r2, r0
 8002978:	693b      	ldr	r3, [r7, #16]
 800297a:	1ad3      	subs	r3, r2, r3
 800297c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002980:	4293      	cmp	r3, r2
 8002982:	d901      	bls.n	8002988 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002984:	2303      	movs	r3, #3
 8002986:	e121      	b.n	8002bcc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002988:	4b3a      	ldr	r3, [pc, #232]	@ (8002a74 <HAL_RCC_OscConfig+0x4b8>)
 800298a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800298e:	f003 0302 	and.w	r3, r3, #2
 8002992:	2b00      	cmp	r3, #0
 8002994:	d1ed      	bne.n	8002972 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002996:	7ffb      	ldrb	r3, [r7, #31]
 8002998:	2b01      	cmp	r3, #1
 800299a:	d105      	bne.n	80029a8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800299c:	4b35      	ldr	r3, [pc, #212]	@ (8002a74 <HAL_RCC_OscConfig+0x4b8>)
 800299e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029a0:	4a34      	ldr	r2, [pc, #208]	@ (8002a74 <HAL_RCC_OscConfig+0x4b8>)
 80029a2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80029a6:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f003 0320 	and.w	r3, r3, #32
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d03c      	beq.n	8002a2e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	699b      	ldr	r3, [r3, #24]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d01c      	beq.n	80029f6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80029bc:	4b2d      	ldr	r3, [pc, #180]	@ (8002a74 <HAL_RCC_OscConfig+0x4b8>)
 80029be:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80029c2:	4a2c      	ldr	r2, [pc, #176]	@ (8002a74 <HAL_RCC_OscConfig+0x4b8>)
 80029c4:	f043 0301 	orr.w	r3, r3, #1
 80029c8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029cc:	f7ff f986 	bl	8001cdc <HAL_GetTick>
 80029d0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80029d2:	e008      	b.n	80029e6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80029d4:	f7ff f982 	bl	8001cdc <HAL_GetTick>
 80029d8:	4602      	mov	r2, r0
 80029da:	693b      	ldr	r3, [r7, #16]
 80029dc:	1ad3      	subs	r3, r2, r3
 80029de:	2b02      	cmp	r3, #2
 80029e0:	d901      	bls.n	80029e6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80029e2:	2303      	movs	r3, #3
 80029e4:	e0f2      	b.n	8002bcc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80029e6:	4b23      	ldr	r3, [pc, #140]	@ (8002a74 <HAL_RCC_OscConfig+0x4b8>)
 80029e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80029ec:	f003 0302 	and.w	r3, r3, #2
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d0ef      	beq.n	80029d4 <HAL_RCC_OscConfig+0x418>
 80029f4:	e01b      	b.n	8002a2e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80029f6:	4b1f      	ldr	r3, [pc, #124]	@ (8002a74 <HAL_RCC_OscConfig+0x4b8>)
 80029f8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80029fc:	4a1d      	ldr	r2, [pc, #116]	@ (8002a74 <HAL_RCC_OscConfig+0x4b8>)
 80029fe:	f023 0301 	bic.w	r3, r3, #1
 8002a02:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a06:	f7ff f969 	bl	8001cdc <HAL_GetTick>
 8002a0a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002a0c:	e008      	b.n	8002a20 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002a0e:	f7ff f965 	bl	8001cdc <HAL_GetTick>
 8002a12:	4602      	mov	r2, r0
 8002a14:	693b      	ldr	r3, [r7, #16]
 8002a16:	1ad3      	subs	r3, r2, r3
 8002a18:	2b02      	cmp	r3, #2
 8002a1a:	d901      	bls.n	8002a20 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002a1c:	2303      	movs	r3, #3
 8002a1e:	e0d5      	b.n	8002bcc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002a20:	4b14      	ldr	r3, [pc, #80]	@ (8002a74 <HAL_RCC_OscConfig+0x4b8>)
 8002a22:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002a26:	f003 0302 	and.w	r3, r3, #2
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d1ef      	bne.n	8002a0e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	69db      	ldr	r3, [r3, #28]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	f000 80c9 	beq.w	8002bca <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002a38:	4b0e      	ldr	r3, [pc, #56]	@ (8002a74 <HAL_RCC_OscConfig+0x4b8>)
 8002a3a:	689b      	ldr	r3, [r3, #8]
 8002a3c:	f003 030c 	and.w	r3, r3, #12
 8002a40:	2b0c      	cmp	r3, #12
 8002a42:	f000 8083 	beq.w	8002b4c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	69db      	ldr	r3, [r3, #28]
 8002a4a:	2b02      	cmp	r3, #2
 8002a4c:	d15e      	bne.n	8002b0c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a4e:	4b09      	ldr	r3, [pc, #36]	@ (8002a74 <HAL_RCC_OscConfig+0x4b8>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a08      	ldr	r2, [pc, #32]	@ (8002a74 <HAL_RCC_OscConfig+0x4b8>)
 8002a54:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002a58:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a5a:	f7ff f93f 	bl	8001cdc <HAL_GetTick>
 8002a5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a60:	e00c      	b.n	8002a7c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a62:	f7ff f93b 	bl	8001cdc <HAL_GetTick>
 8002a66:	4602      	mov	r2, r0
 8002a68:	693b      	ldr	r3, [r7, #16]
 8002a6a:	1ad3      	subs	r3, r2, r3
 8002a6c:	2b02      	cmp	r3, #2
 8002a6e:	d905      	bls.n	8002a7c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002a70:	2303      	movs	r3, #3
 8002a72:	e0ab      	b.n	8002bcc <HAL_RCC_OscConfig+0x610>
 8002a74:	40021000 	.word	0x40021000
 8002a78:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a7c:	4b55      	ldr	r3, [pc, #340]	@ (8002bd4 <HAL_RCC_OscConfig+0x618>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d1ec      	bne.n	8002a62 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a88:	4b52      	ldr	r3, [pc, #328]	@ (8002bd4 <HAL_RCC_OscConfig+0x618>)
 8002a8a:	68da      	ldr	r2, [r3, #12]
 8002a8c:	4b52      	ldr	r3, [pc, #328]	@ (8002bd8 <HAL_RCC_OscConfig+0x61c>)
 8002a8e:	4013      	ands	r3, r2
 8002a90:	687a      	ldr	r2, [r7, #4]
 8002a92:	6a11      	ldr	r1, [r2, #32]
 8002a94:	687a      	ldr	r2, [r7, #4]
 8002a96:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002a98:	3a01      	subs	r2, #1
 8002a9a:	0112      	lsls	r2, r2, #4
 8002a9c:	4311      	orrs	r1, r2
 8002a9e:	687a      	ldr	r2, [r7, #4]
 8002aa0:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8002aa2:	0212      	lsls	r2, r2, #8
 8002aa4:	4311      	orrs	r1, r2
 8002aa6:	687a      	ldr	r2, [r7, #4]
 8002aa8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002aaa:	0852      	lsrs	r2, r2, #1
 8002aac:	3a01      	subs	r2, #1
 8002aae:	0552      	lsls	r2, r2, #21
 8002ab0:	4311      	orrs	r1, r2
 8002ab2:	687a      	ldr	r2, [r7, #4]
 8002ab4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002ab6:	0852      	lsrs	r2, r2, #1
 8002ab8:	3a01      	subs	r2, #1
 8002aba:	0652      	lsls	r2, r2, #25
 8002abc:	4311      	orrs	r1, r2
 8002abe:	687a      	ldr	r2, [r7, #4]
 8002ac0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002ac2:	06d2      	lsls	r2, r2, #27
 8002ac4:	430a      	orrs	r2, r1
 8002ac6:	4943      	ldr	r1, [pc, #268]	@ (8002bd4 <HAL_RCC_OscConfig+0x618>)
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002acc:	4b41      	ldr	r3, [pc, #260]	@ (8002bd4 <HAL_RCC_OscConfig+0x618>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a40      	ldr	r2, [pc, #256]	@ (8002bd4 <HAL_RCC_OscConfig+0x618>)
 8002ad2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002ad6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002ad8:	4b3e      	ldr	r3, [pc, #248]	@ (8002bd4 <HAL_RCC_OscConfig+0x618>)
 8002ada:	68db      	ldr	r3, [r3, #12]
 8002adc:	4a3d      	ldr	r2, [pc, #244]	@ (8002bd4 <HAL_RCC_OscConfig+0x618>)
 8002ade:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002ae2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ae4:	f7ff f8fa 	bl	8001cdc <HAL_GetTick>
 8002ae8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002aea:	e008      	b.n	8002afe <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002aec:	f7ff f8f6 	bl	8001cdc <HAL_GetTick>
 8002af0:	4602      	mov	r2, r0
 8002af2:	693b      	ldr	r3, [r7, #16]
 8002af4:	1ad3      	subs	r3, r2, r3
 8002af6:	2b02      	cmp	r3, #2
 8002af8:	d901      	bls.n	8002afe <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002afa:	2303      	movs	r3, #3
 8002afc:	e066      	b.n	8002bcc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002afe:	4b35      	ldr	r3, [pc, #212]	@ (8002bd4 <HAL_RCC_OscConfig+0x618>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d0f0      	beq.n	8002aec <HAL_RCC_OscConfig+0x530>
 8002b0a:	e05e      	b.n	8002bca <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b0c:	4b31      	ldr	r3, [pc, #196]	@ (8002bd4 <HAL_RCC_OscConfig+0x618>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a30      	ldr	r2, [pc, #192]	@ (8002bd4 <HAL_RCC_OscConfig+0x618>)
 8002b12:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002b16:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b18:	f7ff f8e0 	bl	8001cdc <HAL_GetTick>
 8002b1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b1e:	e008      	b.n	8002b32 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b20:	f7ff f8dc 	bl	8001cdc <HAL_GetTick>
 8002b24:	4602      	mov	r2, r0
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	1ad3      	subs	r3, r2, r3
 8002b2a:	2b02      	cmp	r3, #2
 8002b2c:	d901      	bls.n	8002b32 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8002b2e:	2303      	movs	r3, #3
 8002b30:	e04c      	b.n	8002bcc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b32:	4b28      	ldr	r3, [pc, #160]	@ (8002bd4 <HAL_RCC_OscConfig+0x618>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d1f0      	bne.n	8002b20 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002b3e:	4b25      	ldr	r3, [pc, #148]	@ (8002bd4 <HAL_RCC_OscConfig+0x618>)
 8002b40:	68da      	ldr	r2, [r3, #12]
 8002b42:	4924      	ldr	r1, [pc, #144]	@ (8002bd4 <HAL_RCC_OscConfig+0x618>)
 8002b44:	4b25      	ldr	r3, [pc, #148]	@ (8002bdc <HAL_RCC_OscConfig+0x620>)
 8002b46:	4013      	ands	r3, r2
 8002b48:	60cb      	str	r3, [r1, #12]
 8002b4a:	e03e      	b.n	8002bca <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	69db      	ldr	r3, [r3, #28]
 8002b50:	2b01      	cmp	r3, #1
 8002b52:	d101      	bne.n	8002b58 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8002b54:	2301      	movs	r3, #1
 8002b56:	e039      	b.n	8002bcc <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002b58:	4b1e      	ldr	r3, [pc, #120]	@ (8002bd4 <HAL_RCC_OscConfig+0x618>)
 8002b5a:	68db      	ldr	r3, [r3, #12]
 8002b5c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	f003 0203 	and.w	r2, r3, #3
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6a1b      	ldr	r3, [r3, #32]
 8002b68:	429a      	cmp	r2, r3
 8002b6a:	d12c      	bne.n	8002bc6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b76:	3b01      	subs	r3, #1
 8002b78:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b7a:	429a      	cmp	r2, r3
 8002b7c:	d123      	bne.n	8002bc6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b88:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002b8a:	429a      	cmp	r2, r3
 8002b8c:	d11b      	bne.n	8002bc6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002b8e:	697b      	ldr	r3, [r7, #20]
 8002b90:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b98:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002b9a:	429a      	cmp	r2, r3
 8002b9c:	d113      	bne.n	8002bc6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b9e:	697b      	ldr	r3, [r7, #20]
 8002ba0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ba8:	085b      	lsrs	r3, r3, #1
 8002baa:	3b01      	subs	r3, #1
 8002bac:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002bae:	429a      	cmp	r2, r3
 8002bb0:	d109      	bne.n	8002bc6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002bb2:	697b      	ldr	r3, [r7, #20]
 8002bb4:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002bbc:	085b      	lsrs	r3, r3, #1
 8002bbe:	3b01      	subs	r3, #1
 8002bc0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002bc2:	429a      	cmp	r2, r3
 8002bc4:	d001      	beq.n	8002bca <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e000      	b.n	8002bcc <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8002bca:	2300      	movs	r3, #0
}
 8002bcc:	4618      	mov	r0, r3
 8002bce:	3720      	adds	r7, #32
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bd80      	pop	{r7, pc}
 8002bd4:	40021000 	.word	0x40021000
 8002bd8:	019f800c 	.word	0x019f800c
 8002bdc:	feeefffc 	.word	0xfeeefffc

08002be0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b086      	sub	sp, #24
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
 8002be8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002bea:	2300      	movs	r3, #0
 8002bec:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d101      	bne.n	8002bf8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	e11e      	b.n	8002e36 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002bf8:	4b91      	ldr	r3, [pc, #580]	@ (8002e40 <HAL_RCC_ClockConfig+0x260>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f003 030f 	and.w	r3, r3, #15
 8002c00:	683a      	ldr	r2, [r7, #0]
 8002c02:	429a      	cmp	r2, r3
 8002c04:	d910      	bls.n	8002c28 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c06:	4b8e      	ldr	r3, [pc, #568]	@ (8002e40 <HAL_RCC_ClockConfig+0x260>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f023 020f 	bic.w	r2, r3, #15
 8002c0e:	498c      	ldr	r1, [pc, #560]	@ (8002e40 <HAL_RCC_ClockConfig+0x260>)
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	4313      	orrs	r3, r2
 8002c14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c16:	4b8a      	ldr	r3, [pc, #552]	@ (8002e40 <HAL_RCC_ClockConfig+0x260>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f003 030f 	and.w	r3, r3, #15
 8002c1e:	683a      	ldr	r2, [r7, #0]
 8002c20:	429a      	cmp	r2, r3
 8002c22:	d001      	beq.n	8002c28 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002c24:	2301      	movs	r3, #1
 8002c26:	e106      	b.n	8002e36 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f003 0301 	and.w	r3, r3, #1
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d073      	beq.n	8002d1c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	2b03      	cmp	r3, #3
 8002c3a:	d129      	bne.n	8002c90 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c3c:	4b81      	ldr	r3, [pc, #516]	@ (8002e44 <HAL_RCC_ClockConfig+0x264>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d101      	bne.n	8002c4c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002c48:	2301      	movs	r3, #1
 8002c4a:	e0f4      	b.n	8002e36 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002c4c:	f000 f99e 	bl	8002f8c <RCC_GetSysClockFreqFromPLLSource>
 8002c50:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002c52:	693b      	ldr	r3, [r7, #16]
 8002c54:	4a7c      	ldr	r2, [pc, #496]	@ (8002e48 <HAL_RCC_ClockConfig+0x268>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d93f      	bls.n	8002cda <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002c5a:	4b7a      	ldr	r3, [pc, #488]	@ (8002e44 <HAL_RCC_ClockConfig+0x264>)
 8002c5c:	689b      	ldr	r3, [r3, #8]
 8002c5e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d009      	beq.n	8002c7a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d033      	beq.n	8002cda <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d12f      	bne.n	8002cda <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002c7a:	4b72      	ldr	r3, [pc, #456]	@ (8002e44 <HAL_RCC_ClockConfig+0x264>)
 8002c7c:	689b      	ldr	r3, [r3, #8]
 8002c7e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002c82:	4a70      	ldr	r2, [pc, #448]	@ (8002e44 <HAL_RCC_ClockConfig+0x264>)
 8002c84:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002c88:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002c8a:	2380      	movs	r3, #128	@ 0x80
 8002c8c:	617b      	str	r3, [r7, #20]
 8002c8e:	e024      	b.n	8002cda <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	2b02      	cmp	r3, #2
 8002c96:	d107      	bne.n	8002ca8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c98:	4b6a      	ldr	r3, [pc, #424]	@ (8002e44 <HAL_RCC_ClockConfig+0x264>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d109      	bne.n	8002cb8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	e0c6      	b.n	8002e36 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ca8:	4b66      	ldr	r3, [pc, #408]	@ (8002e44 <HAL_RCC_ClockConfig+0x264>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d101      	bne.n	8002cb8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	e0be      	b.n	8002e36 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002cb8:	f000 f8ce 	bl	8002e58 <HAL_RCC_GetSysClockFreq>
 8002cbc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	4a61      	ldr	r2, [pc, #388]	@ (8002e48 <HAL_RCC_ClockConfig+0x268>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d909      	bls.n	8002cda <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002cc6:	4b5f      	ldr	r3, [pc, #380]	@ (8002e44 <HAL_RCC_ClockConfig+0x264>)
 8002cc8:	689b      	ldr	r3, [r3, #8]
 8002cca:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002cce:	4a5d      	ldr	r2, [pc, #372]	@ (8002e44 <HAL_RCC_ClockConfig+0x264>)
 8002cd0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002cd4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002cd6:	2380      	movs	r3, #128	@ 0x80
 8002cd8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002cda:	4b5a      	ldr	r3, [pc, #360]	@ (8002e44 <HAL_RCC_ClockConfig+0x264>)
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	f023 0203 	bic.w	r2, r3, #3
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	4957      	ldr	r1, [pc, #348]	@ (8002e44 <HAL_RCC_ClockConfig+0x264>)
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002cec:	f7fe fff6 	bl	8001cdc <HAL_GetTick>
 8002cf0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cf2:	e00a      	b.n	8002d0a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cf4:	f7fe fff2 	bl	8001cdc <HAL_GetTick>
 8002cf8:	4602      	mov	r2, r0
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	1ad3      	subs	r3, r2, r3
 8002cfe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d901      	bls.n	8002d0a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002d06:	2303      	movs	r3, #3
 8002d08:	e095      	b.n	8002e36 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d0a:	4b4e      	ldr	r3, [pc, #312]	@ (8002e44 <HAL_RCC_ClockConfig+0x264>)
 8002d0c:	689b      	ldr	r3, [r3, #8]
 8002d0e:	f003 020c 	and.w	r2, r3, #12
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	009b      	lsls	r3, r3, #2
 8002d18:	429a      	cmp	r2, r3
 8002d1a:	d1eb      	bne.n	8002cf4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f003 0302 	and.w	r3, r3, #2
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d023      	beq.n	8002d70 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f003 0304 	and.w	r3, r3, #4
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d005      	beq.n	8002d40 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d34:	4b43      	ldr	r3, [pc, #268]	@ (8002e44 <HAL_RCC_ClockConfig+0x264>)
 8002d36:	689b      	ldr	r3, [r3, #8]
 8002d38:	4a42      	ldr	r2, [pc, #264]	@ (8002e44 <HAL_RCC_ClockConfig+0x264>)
 8002d3a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002d3e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f003 0308 	and.w	r3, r3, #8
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d007      	beq.n	8002d5c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002d4c:	4b3d      	ldr	r3, [pc, #244]	@ (8002e44 <HAL_RCC_ClockConfig+0x264>)
 8002d4e:	689b      	ldr	r3, [r3, #8]
 8002d50:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002d54:	4a3b      	ldr	r2, [pc, #236]	@ (8002e44 <HAL_RCC_ClockConfig+0x264>)
 8002d56:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002d5a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d5c:	4b39      	ldr	r3, [pc, #228]	@ (8002e44 <HAL_RCC_ClockConfig+0x264>)
 8002d5e:	689b      	ldr	r3, [r3, #8]
 8002d60:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	689b      	ldr	r3, [r3, #8]
 8002d68:	4936      	ldr	r1, [pc, #216]	@ (8002e44 <HAL_RCC_ClockConfig+0x264>)
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	608b      	str	r3, [r1, #8]
 8002d6e:	e008      	b.n	8002d82 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	2b80      	cmp	r3, #128	@ 0x80
 8002d74:	d105      	bne.n	8002d82 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002d76:	4b33      	ldr	r3, [pc, #204]	@ (8002e44 <HAL_RCC_ClockConfig+0x264>)
 8002d78:	689b      	ldr	r3, [r3, #8]
 8002d7a:	4a32      	ldr	r2, [pc, #200]	@ (8002e44 <HAL_RCC_ClockConfig+0x264>)
 8002d7c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002d80:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002d82:	4b2f      	ldr	r3, [pc, #188]	@ (8002e40 <HAL_RCC_ClockConfig+0x260>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f003 030f 	and.w	r3, r3, #15
 8002d8a:	683a      	ldr	r2, [r7, #0]
 8002d8c:	429a      	cmp	r2, r3
 8002d8e:	d21d      	bcs.n	8002dcc <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d90:	4b2b      	ldr	r3, [pc, #172]	@ (8002e40 <HAL_RCC_ClockConfig+0x260>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f023 020f 	bic.w	r2, r3, #15
 8002d98:	4929      	ldr	r1, [pc, #164]	@ (8002e40 <HAL_RCC_ClockConfig+0x260>)
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002da0:	f7fe ff9c 	bl	8001cdc <HAL_GetTick>
 8002da4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002da6:	e00a      	b.n	8002dbe <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002da8:	f7fe ff98 	bl	8001cdc <HAL_GetTick>
 8002dac:	4602      	mov	r2, r0
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	1ad3      	subs	r3, r2, r3
 8002db2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d901      	bls.n	8002dbe <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002dba:	2303      	movs	r3, #3
 8002dbc:	e03b      	b.n	8002e36 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dbe:	4b20      	ldr	r3, [pc, #128]	@ (8002e40 <HAL_RCC_ClockConfig+0x260>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f003 030f 	and.w	r3, r3, #15
 8002dc6:	683a      	ldr	r2, [r7, #0]
 8002dc8:	429a      	cmp	r2, r3
 8002dca:	d1ed      	bne.n	8002da8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f003 0304 	and.w	r3, r3, #4
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d008      	beq.n	8002dea <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002dd8:	4b1a      	ldr	r3, [pc, #104]	@ (8002e44 <HAL_RCC_ClockConfig+0x264>)
 8002dda:	689b      	ldr	r3, [r3, #8]
 8002ddc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	68db      	ldr	r3, [r3, #12]
 8002de4:	4917      	ldr	r1, [pc, #92]	@ (8002e44 <HAL_RCC_ClockConfig+0x264>)
 8002de6:	4313      	orrs	r3, r2
 8002de8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f003 0308 	and.w	r3, r3, #8
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d009      	beq.n	8002e0a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002df6:	4b13      	ldr	r3, [pc, #76]	@ (8002e44 <HAL_RCC_ClockConfig+0x264>)
 8002df8:	689b      	ldr	r3, [r3, #8]
 8002dfa:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	691b      	ldr	r3, [r3, #16]
 8002e02:	00db      	lsls	r3, r3, #3
 8002e04:	490f      	ldr	r1, [pc, #60]	@ (8002e44 <HAL_RCC_ClockConfig+0x264>)
 8002e06:	4313      	orrs	r3, r2
 8002e08:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002e0a:	f000 f825 	bl	8002e58 <HAL_RCC_GetSysClockFreq>
 8002e0e:	4602      	mov	r2, r0
 8002e10:	4b0c      	ldr	r3, [pc, #48]	@ (8002e44 <HAL_RCC_ClockConfig+0x264>)
 8002e12:	689b      	ldr	r3, [r3, #8]
 8002e14:	091b      	lsrs	r3, r3, #4
 8002e16:	f003 030f 	and.w	r3, r3, #15
 8002e1a:	490c      	ldr	r1, [pc, #48]	@ (8002e4c <HAL_RCC_ClockConfig+0x26c>)
 8002e1c:	5ccb      	ldrb	r3, [r1, r3]
 8002e1e:	f003 031f 	and.w	r3, r3, #31
 8002e22:	fa22 f303 	lsr.w	r3, r2, r3
 8002e26:	4a0a      	ldr	r2, [pc, #40]	@ (8002e50 <HAL_RCC_ClockConfig+0x270>)
 8002e28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002e2a:	4b0a      	ldr	r3, [pc, #40]	@ (8002e54 <HAL_RCC_ClockConfig+0x274>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f7fe ff08 	bl	8001c44 <HAL_InitTick>
 8002e34:	4603      	mov	r3, r0
}
 8002e36:	4618      	mov	r0, r3
 8002e38:	3718      	adds	r7, #24
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}
 8002e3e:	bf00      	nop
 8002e40:	40022000 	.word	0x40022000
 8002e44:	40021000 	.word	0x40021000
 8002e48:	04c4b400 	.word	0x04c4b400
 8002e4c:	08005cf4 	.word	0x08005cf4
 8002e50:	20000010 	.word	0x20000010
 8002e54:	20000014 	.word	0x20000014

08002e58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b087      	sub	sp, #28
 8002e5c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002e5e:	4b2c      	ldr	r3, [pc, #176]	@ (8002f10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002e60:	689b      	ldr	r3, [r3, #8]
 8002e62:	f003 030c 	and.w	r3, r3, #12
 8002e66:	2b04      	cmp	r3, #4
 8002e68:	d102      	bne.n	8002e70 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002e6a:	4b2a      	ldr	r3, [pc, #168]	@ (8002f14 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002e6c:	613b      	str	r3, [r7, #16]
 8002e6e:	e047      	b.n	8002f00 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002e70:	4b27      	ldr	r3, [pc, #156]	@ (8002f10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002e72:	689b      	ldr	r3, [r3, #8]
 8002e74:	f003 030c 	and.w	r3, r3, #12
 8002e78:	2b08      	cmp	r3, #8
 8002e7a:	d102      	bne.n	8002e82 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002e7c:	4b26      	ldr	r3, [pc, #152]	@ (8002f18 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002e7e:	613b      	str	r3, [r7, #16]
 8002e80:	e03e      	b.n	8002f00 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002e82:	4b23      	ldr	r3, [pc, #140]	@ (8002f10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002e84:	689b      	ldr	r3, [r3, #8]
 8002e86:	f003 030c 	and.w	r3, r3, #12
 8002e8a:	2b0c      	cmp	r3, #12
 8002e8c:	d136      	bne.n	8002efc <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002e8e:	4b20      	ldr	r3, [pc, #128]	@ (8002f10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002e90:	68db      	ldr	r3, [r3, #12]
 8002e92:	f003 0303 	and.w	r3, r3, #3
 8002e96:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002e98:	4b1d      	ldr	r3, [pc, #116]	@ (8002f10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002e9a:	68db      	ldr	r3, [r3, #12]
 8002e9c:	091b      	lsrs	r3, r3, #4
 8002e9e:	f003 030f 	and.w	r3, r3, #15
 8002ea2:	3301      	adds	r3, #1
 8002ea4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	2b03      	cmp	r3, #3
 8002eaa:	d10c      	bne.n	8002ec6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002eac:	4a1a      	ldr	r2, [pc, #104]	@ (8002f18 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002eae:	68bb      	ldr	r3, [r7, #8]
 8002eb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002eb4:	4a16      	ldr	r2, [pc, #88]	@ (8002f10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002eb6:	68d2      	ldr	r2, [r2, #12]
 8002eb8:	0a12      	lsrs	r2, r2, #8
 8002eba:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002ebe:	fb02 f303 	mul.w	r3, r2, r3
 8002ec2:	617b      	str	r3, [r7, #20]
      break;
 8002ec4:	e00c      	b.n	8002ee0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002ec6:	4a13      	ldr	r2, [pc, #76]	@ (8002f14 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002ec8:	68bb      	ldr	r3, [r7, #8]
 8002eca:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ece:	4a10      	ldr	r2, [pc, #64]	@ (8002f10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002ed0:	68d2      	ldr	r2, [r2, #12]
 8002ed2:	0a12      	lsrs	r2, r2, #8
 8002ed4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002ed8:	fb02 f303 	mul.w	r3, r2, r3
 8002edc:	617b      	str	r3, [r7, #20]
      break;
 8002ede:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002ee0:	4b0b      	ldr	r3, [pc, #44]	@ (8002f10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002ee2:	68db      	ldr	r3, [r3, #12]
 8002ee4:	0e5b      	lsrs	r3, r3, #25
 8002ee6:	f003 0303 	and.w	r3, r3, #3
 8002eea:	3301      	adds	r3, #1
 8002eec:	005b      	lsls	r3, r3, #1
 8002eee:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002ef0:	697a      	ldr	r2, [r7, #20]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ef8:	613b      	str	r3, [r7, #16]
 8002efa:	e001      	b.n	8002f00 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002efc:	2300      	movs	r3, #0
 8002efe:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002f00:	693b      	ldr	r3, [r7, #16]
}
 8002f02:	4618      	mov	r0, r3
 8002f04:	371c      	adds	r7, #28
 8002f06:	46bd      	mov	sp, r7
 8002f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0c:	4770      	bx	lr
 8002f0e:	bf00      	nop
 8002f10:	40021000 	.word	0x40021000
 8002f14:	00f42400 	.word	0x00f42400
 8002f18:	007a1200 	.word	0x007a1200

08002f1c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f20:	4b03      	ldr	r3, [pc, #12]	@ (8002f30 <HAL_RCC_GetHCLKFreq+0x14>)
 8002f22:	681b      	ldr	r3, [r3, #0]
}
 8002f24:	4618      	mov	r0, r3
 8002f26:	46bd      	mov	sp, r7
 8002f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2c:	4770      	bx	lr
 8002f2e:	bf00      	nop
 8002f30:	20000010 	.word	0x20000010

08002f34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002f38:	f7ff fff0 	bl	8002f1c <HAL_RCC_GetHCLKFreq>
 8002f3c:	4602      	mov	r2, r0
 8002f3e:	4b06      	ldr	r3, [pc, #24]	@ (8002f58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f40:	689b      	ldr	r3, [r3, #8]
 8002f42:	0a1b      	lsrs	r3, r3, #8
 8002f44:	f003 0307 	and.w	r3, r3, #7
 8002f48:	4904      	ldr	r1, [pc, #16]	@ (8002f5c <HAL_RCC_GetPCLK1Freq+0x28>)
 8002f4a:	5ccb      	ldrb	r3, [r1, r3]
 8002f4c:	f003 031f 	and.w	r3, r3, #31
 8002f50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f54:	4618      	mov	r0, r3
 8002f56:	bd80      	pop	{r7, pc}
 8002f58:	40021000 	.word	0x40021000
 8002f5c:	08005d04 	.word	0x08005d04

08002f60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002f64:	f7ff ffda 	bl	8002f1c <HAL_RCC_GetHCLKFreq>
 8002f68:	4602      	mov	r2, r0
 8002f6a:	4b06      	ldr	r3, [pc, #24]	@ (8002f84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f6c:	689b      	ldr	r3, [r3, #8]
 8002f6e:	0adb      	lsrs	r3, r3, #11
 8002f70:	f003 0307 	and.w	r3, r3, #7
 8002f74:	4904      	ldr	r1, [pc, #16]	@ (8002f88 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002f76:	5ccb      	ldrb	r3, [r1, r3]
 8002f78:	f003 031f 	and.w	r3, r3, #31
 8002f7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f80:	4618      	mov	r0, r3
 8002f82:	bd80      	pop	{r7, pc}
 8002f84:	40021000 	.word	0x40021000
 8002f88:	08005d04 	.word	0x08005d04

08002f8c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b087      	sub	sp, #28
 8002f90:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002f92:	4b1e      	ldr	r3, [pc, #120]	@ (800300c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002f94:	68db      	ldr	r3, [r3, #12]
 8002f96:	f003 0303 	and.w	r3, r3, #3
 8002f9a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002f9c:	4b1b      	ldr	r3, [pc, #108]	@ (800300c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002f9e:	68db      	ldr	r3, [r3, #12]
 8002fa0:	091b      	lsrs	r3, r3, #4
 8002fa2:	f003 030f 	and.w	r3, r3, #15
 8002fa6:	3301      	adds	r3, #1
 8002fa8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	2b03      	cmp	r3, #3
 8002fae:	d10c      	bne.n	8002fca <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002fb0:	4a17      	ldr	r2, [pc, #92]	@ (8003010 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fb8:	4a14      	ldr	r2, [pc, #80]	@ (800300c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002fba:	68d2      	ldr	r2, [r2, #12]
 8002fbc:	0a12      	lsrs	r2, r2, #8
 8002fbe:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002fc2:	fb02 f303 	mul.w	r3, r2, r3
 8002fc6:	617b      	str	r3, [r7, #20]
    break;
 8002fc8:	e00c      	b.n	8002fe4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002fca:	4a12      	ldr	r2, [pc, #72]	@ (8003014 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fd2:	4a0e      	ldr	r2, [pc, #56]	@ (800300c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002fd4:	68d2      	ldr	r2, [r2, #12]
 8002fd6:	0a12      	lsrs	r2, r2, #8
 8002fd8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002fdc:	fb02 f303 	mul.w	r3, r2, r3
 8002fe0:	617b      	str	r3, [r7, #20]
    break;
 8002fe2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002fe4:	4b09      	ldr	r3, [pc, #36]	@ (800300c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002fe6:	68db      	ldr	r3, [r3, #12]
 8002fe8:	0e5b      	lsrs	r3, r3, #25
 8002fea:	f003 0303 	and.w	r3, r3, #3
 8002fee:	3301      	adds	r3, #1
 8002ff0:	005b      	lsls	r3, r3, #1
 8002ff2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002ff4:	697a      	ldr	r2, [r7, #20]
 8002ff6:	68bb      	ldr	r3, [r7, #8]
 8002ff8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ffc:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002ffe:	687b      	ldr	r3, [r7, #4]
}
 8003000:	4618      	mov	r0, r3
 8003002:	371c      	adds	r7, #28
 8003004:	46bd      	mov	sp, r7
 8003006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300a:	4770      	bx	lr
 800300c:	40021000 	.word	0x40021000
 8003010:	007a1200 	.word	0x007a1200
 8003014:	00f42400 	.word	0x00f42400

08003018 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b086      	sub	sp, #24
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003020:	2300      	movs	r3, #0
 8003022:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003024:	2300      	movs	r3, #0
 8003026:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003030:	2b00      	cmp	r3, #0
 8003032:	f000 8098 	beq.w	8003166 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003036:	2300      	movs	r3, #0
 8003038:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800303a:	4b43      	ldr	r3, [pc, #268]	@ (8003148 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800303c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800303e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003042:	2b00      	cmp	r3, #0
 8003044:	d10d      	bne.n	8003062 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003046:	4b40      	ldr	r3, [pc, #256]	@ (8003148 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003048:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800304a:	4a3f      	ldr	r2, [pc, #252]	@ (8003148 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800304c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003050:	6593      	str	r3, [r2, #88]	@ 0x58
 8003052:	4b3d      	ldr	r3, [pc, #244]	@ (8003148 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003054:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003056:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800305a:	60bb      	str	r3, [r7, #8]
 800305c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800305e:	2301      	movs	r3, #1
 8003060:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003062:	4b3a      	ldr	r3, [pc, #232]	@ (800314c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a39      	ldr	r2, [pc, #228]	@ (800314c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003068:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800306c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800306e:	f7fe fe35 	bl	8001cdc <HAL_GetTick>
 8003072:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003074:	e009      	b.n	800308a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003076:	f7fe fe31 	bl	8001cdc <HAL_GetTick>
 800307a:	4602      	mov	r2, r0
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	1ad3      	subs	r3, r2, r3
 8003080:	2b02      	cmp	r3, #2
 8003082:	d902      	bls.n	800308a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003084:	2303      	movs	r3, #3
 8003086:	74fb      	strb	r3, [r7, #19]
        break;
 8003088:	e005      	b.n	8003096 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800308a:	4b30      	ldr	r3, [pc, #192]	@ (800314c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003092:	2b00      	cmp	r3, #0
 8003094:	d0ef      	beq.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003096:	7cfb      	ldrb	r3, [r7, #19]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d159      	bne.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800309c:	4b2a      	ldr	r3, [pc, #168]	@ (8003148 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800309e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80030a6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80030a8:	697b      	ldr	r3, [r7, #20]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d01e      	beq.n	80030ec <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030b2:	697a      	ldr	r2, [r7, #20]
 80030b4:	429a      	cmp	r2, r3
 80030b6:	d019      	beq.n	80030ec <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80030b8:	4b23      	ldr	r3, [pc, #140]	@ (8003148 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80030ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030be:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80030c2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80030c4:	4b20      	ldr	r3, [pc, #128]	@ (8003148 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80030c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030ca:	4a1f      	ldr	r2, [pc, #124]	@ (8003148 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80030cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030d0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80030d4:	4b1c      	ldr	r3, [pc, #112]	@ (8003148 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80030d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030da:	4a1b      	ldr	r2, [pc, #108]	@ (8003148 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80030dc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80030e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80030e4:	4a18      	ldr	r2, [pc, #96]	@ (8003148 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80030e6:	697b      	ldr	r3, [r7, #20]
 80030e8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80030ec:	697b      	ldr	r3, [r7, #20]
 80030ee:	f003 0301 	and.w	r3, r3, #1
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d016      	beq.n	8003124 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030f6:	f7fe fdf1 	bl	8001cdc <HAL_GetTick>
 80030fa:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030fc:	e00b      	b.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030fe:	f7fe fded 	bl	8001cdc <HAL_GetTick>
 8003102:	4602      	mov	r2, r0
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	1ad3      	subs	r3, r2, r3
 8003108:	f241 3288 	movw	r2, #5000	@ 0x1388
 800310c:	4293      	cmp	r3, r2
 800310e:	d902      	bls.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003110:	2303      	movs	r3, #3
 8003112:	74fb      	strb	r3, [r7, #19]
            break;
 8003114:	e006      	b.n	8003124 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003116:	4b0c      	ldr	r3, [pc, #48]	@ (8003148 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003118:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800311c:	f003 0302 	and.w	r3, r3, #2
 8003120:	2b00      	cmp	r3, #0
 8003122:	d0ec      	beq.n	80030fe <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003124:	7cfb      	ldrb	r3, [r7, #19]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d10b      	bne.n	8003142 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800312a:	4b07      	ldr	r3, [pc, #28]	@ (8003148 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800312c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003130:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003138:	4903      	ldr	r1, [pc, #12]	@ (8003148 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800313a:	4313      	orrs	r3, r2
 800313c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003140:	e008      	b.n	8003154 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003142:	7cfb      	ldrb	r3, [r7, #19]
 8003144:	74bb      	strb	r3, [r7, #18]
 8003146:	e005      	b.n	8003154 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003148:	40021000 	.word	0x40021000
 800314c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003150:	7cfb      	ldrb	r3, [r7, #19]
 8003152:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003154:	7c7b      	ldrb	r3, [r7, #17]
 8003156:	2b01      	cmp	r3, #1
 8003158:	d105      	bne.n	8003166 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800315a:	4ba6      	ldr	r3, [pc, #664]	@ (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800315c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800315e:	4aa5      	ldr	r2, [pc, #660]	@ (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003160:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003164:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f003 0301 	and.w	r3, r3, #1
 800316e:	2b00      	cmp	r3, #0
 8003170:	d00a      	beq.n	8003188 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003172:	4ba0      	ldr	r3, [pc, #640]	@ (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003174:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003178:	f023 0203 	bic.w	r2, r3, #3
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	499c      	ldr	r1, [pc, #624]	@ (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003182:	4313      	orrs	r3, r2
 8003184:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f003 0302 	and.w	r3, r3, #2
 8003190:	2b00      	cmp	r3, #0
 8003192:	d00a      	beq.n	80031aa <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003194:	4b97      	ldr	r3, [pc, #604]	@ (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003196:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800319a:	f023 020c 	bic.w	r2, r3, #12
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	689b      	ldr	r3, [r3, #8]
 80031a2:	4994      	ldr	r1, [pc, #592]	@ (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80031a4:	4313      	orrs	r3, r2
 80031a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f003 0304 	and.w	r3, r3, #4
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d00a      	beq.n	80031cc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80031b6:	4b8f      	ldr	r3, [pc, #572]	@ (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80031b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031bc:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	68db      	ldr	r3, [r3, #12]
 80031c4:	498b      	ldr	r1, [pc, #556]	@ (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80031c6:	4313      	orrs	r3, r2
 80031c8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f003 0308 	and.w	r3, r3, #8
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d00a      	beq.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80031d8:	4b86      	ldr	r3, [pc, #536]	@ (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80031da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031de:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	691b      	ldr	r3, [r3, #16]
 80031e6:	4983      	ldr	r1, [pc, #524]	@ (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80031e8:	4313      	orrs	r3, r2
 80031ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f003 0320 	and.w	r3, r3, #32
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d00a      	beq.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80031fa:	4b7e      	ldr	r3, [pc, #504]	@ (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80031fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003200:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	695b      	ldr	r3, [r3, #20]
 8003208:	497a      	ldr	r1, [pc, #488]	@ (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800320a:	4313      	orrs	r3, r2
 800320c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003218:	2b00      	cmp	r3, #0
 800321a:	d00a      	beq.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800321c:	4b75      	ldr	r3, [pc, #468]	@ (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800321e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003222:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	699b      	ldr	r3, [r3, #24]
 800322a:	4972      	ldr	r1, [pc, #456]	@ (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800322c:	4313      	orrs	r3, r2
 800322e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800323a:	2b00      	cmp	r3, #0
 800323c:	d00a      	beq.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800323e:	4b6d      	ldr	r3, [pc, #436]	@ (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003240:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003244:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	69db      	ldr	r3, [r3, #28]
 800324c:	4969      	ldr	r1, [pc, #420]	@ (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800324e:	4313      	orrs	r3, r2
 8003250:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800325c:	2b00      	cmp	r3, #0
 800325e:	d00a      	beq.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003260:	4b64      	ldr	r3, [pc, #400]	@ (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003262:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003266:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6a1b      	ldr	r3, [r3, #32]
 800326e:	4961      	ldr	r1, [pc, #388]	@ (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003270:	4313      	orrs	r3, r2
 8003272:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800327e:	2b00      	cmp	r3, #0
 8003280:	d00a      	beq.n	8003298 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003282:	4b5c      	ldr	r3, [pc, #368]	@ (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003284:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003288:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003290:	4958      	ldr	r1, [pc, #352]	@ (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003292:	4313      	orrs	r3, r2
 8003294:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d015      	beq.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80032a4:	4b53      	ldr	r3, [pc, #332]	@ (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80032a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032aa:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032b2:	4950      	ldr	r1, [pc, #320]	@ (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80032b4:	4313      	orrs	r3, r2
 80032b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032be:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80032c2:	d105      	bne.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80032c4:	4b4b      	ldr	r3, [pc, #300]	@ (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80032c6:	68db      	ldr	r3, [r3, #12]
 80032c8:	4a4a      	ldr	r2, [pc, #296]	@ (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80032ca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80032ce:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d015      	beq.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80032dc:	4b45      	ldr	r3, [pc, #276]	@ (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80032de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032e2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032ea:	4942      	ldr	r1, [pc, #264]	@ (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80032ec:	4313      	orrs	r3, r2
 80032ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032f6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80032fa:	d105      	bne.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80032fc:	4b3d      	ldr	r3, [pc, #244]	@ (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80032fe:	68db      	ldr	r3, [r3, #12]
 8003300:	4a3c      	ldr	r2, [pc, #240]	@ (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003302:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003306:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003310:	2b00      	cmp	r3, #0
 8003312:	d015      	beq.n	8003340 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003314:	4b37      	ldr	r3, [pc, #220]	@ (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003316:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800331a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003322:	4934      	ldr	r1, [pc, #208]	@ (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003324:	4313      	orrs	r3, r2
 8003326:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800332e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003332:	d105      	bne.n	8003340 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003334:	4b2f      	ldr	r3, [pc, #188]	@ (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003336:	68db      	ldr	r3, [r3, #12]
 8003338:	4a2e      	ldr	r2, [pc, #184]	@ (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800333a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800333e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003348:	2b00      	cmp	r3, #0
 800334a:	d015      	beq.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800334c:	4b29      	ldr	r3, [pc, #164]	@ (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800334e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003352:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800335a:	4926      	ldr	r1, [pc, #152]	@ (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800335c:	4313      	orrs	r3, r2
 800335e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003366:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800336a:	d105      	bne.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800336c:	4b21      	ldr	r3, [pc, #132]	@ (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800336e:	68db      	ldr	r3, [r3, #12]
 8003370:	4a20      	ldr	r2, [pc, #128]	@ (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003372:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003376:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003380:	2b00      	cmp	r3, #0
 8003382:	d015      	beq.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003384:	4b1b      	ldr	r3, [pc, #108]	@ (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003386:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800338a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003392:	4918      	ldr	r1, [pc, #96]	@ (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003394:	4313      	orrs	r3, r2
 8003396:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800339e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80033a2:	d105      	bne.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80033a4:	4b13      	ldr	r3, [pc, #76]	@ (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033a6:	68db      	ldr	r3, [r3, #12]
 80033a8:	4a12      	ldr	r2, [pc, #72]	@ (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033aa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80033ae:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d015      	beq.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80033bc:	4b0d      	ldr	r3, [pc, #52]	@ (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033c2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033ca:	490a      	ldr	r1, [pc, #40]	@ (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033cc:	4313      	orrs	r3, r2
 80033ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033d6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80033da:	d105      	bne.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80033dc:	4b05      	ldr	r3, [pc, #20]	@ (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033de:	68db      	ldr	r3, [r3, #12]
 80033e0:	4a04      	ldr	r2, [pc, #16]	@ (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033e2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033e6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80033e8:	7cbb      	ldrb	r3, [r7, #18]
}
 80033ea:	4618      	mov	r0, r3
 80033ec:	3718      	adds	r7, #24
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}
 80033f2:	bf00      	nop
 80033f4:	40021000 	.word	0x40021000

080033f8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b084      	sub	sp, #16
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d101      	bne.n	800340a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003406:	2301      	movs	r3, #1
 8003408:	e09d      	b.n	8003546 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800340e:	2b00      	cmp	r3, #0
 8003410:	d108      	bne.n	8003424 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800341a:	d009      	beq.n	8003430 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2200      	movs	r2, #0
 8003420:	61da      	str	r2, [r3, #28]
 8003422:	e005      	b.n	8003430 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2200      	movs	r2, #0
 8003428:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2200      	movs	r2, #0
 800342e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2200      	movs	r2, #0
 8003434:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800343c:	b2db      	uxtb	r3, r3
 800343e:	2b00      	cmp	r3, #0
 8003440:	d106      	bne.n	8003450 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2200      	movs	r2, #0
 8003446:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800344a:	6878      	ldr	r0, [r7, #4]
 800344c:	f7fd feec 	bl	8001228 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2202      	movs	r2, #2
 8003454:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	681a      	ldr	r2, [r3, #0]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003466:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	68db      	ldr	r3, [r3, #12]
 800346c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003470:	d902      	bls.n	8003478 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003472:	2300      	movs	r3, #0
 8003474:	60fb      	str	r3, [r7, #12]
 8003476:	e002      	b.n	800347e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003478:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800347c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	68db      	ldr	r3, [r3, #12]
 8003482:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8003486:	d007      	beq.n	8003498 <HAL_SPI_Init+0xa0>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	68db      	ldr	r3, [r3, #12]
 800348c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003490:	d002      	beq.n	8003498 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2200      	movs	r2, #0
 8003496:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	689b      	ldr	r3, [r3, #8]
 80034a4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80034a8:	431a      	orrs	r2, r3
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	691b      	ldr	r3, [r3, #16]
 80034ae:	f003 0302 	and.w	r3, r3, #2
 80034b2:	431a      	orrs	r2, r3
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	695b      	ldr	r3, [r3, #20]
 80034b8:	f003 0301 	and.w	r3, r3, #1
 80034bc:	431a      	orrs	r2, r3
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	699b      	ldr	r3, [r3, #24]
 80034c2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80034c6:	431a      	orrs	r2, r3
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	69db      	ldr	r3, [r3, #28]
 80034cc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80034d0:	431a      	orrs	r2, r3
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6a1b      	ldr	r3, [r3, #32]
 80034d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034da:	ea42 0103 	orr.w	r1, r2, r3
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034e2:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	430a      	orrs	r2, r1
 80034ec:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	699b      	ldr	r3, [r3, #24]
 80034f2:	0c1b      	lsrs	r3, r3, #16
 80034f4:	f003 0204 	and.w	r2, r3, #4
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034fc:	f003 0310 	and.w	r3, r3, #16
 8003500:	431a      	orrs	r2, r3
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003506:	f003 0308 	and.w	r3, r3, #8
 800350a:	431a      	orrs	r2, r3
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	68db      	ldr	r3, [r3, #12]
 8003510:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003514:	ea42 0103 	orr.w	r1, r2, r3
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	430a      	orrs	r2, r1
 8003524:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	69da      	ldr	r2, [r3, #28]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003534:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2200      	movs	r2, #0
 800353a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2201      	movs	r2, #1
 8003540:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8003544:	2300      	movs	r3, #0
}
 8003546:	4618      	mov	r0, r3
 8003548:	3710      	adds	r7, #16
 800354a:	46bd      	mov	sp, r7
 800354c:	bd80      	pop	{r7, pc}

0800354e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800354e:	b580      	push	{r7, lr}
 8003550:	b082      	sub	sp, #8
 8003552:	af00      	add	r7, sp, #0
 8003554:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d101      	bne.n	8003560 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800355c:	2301      	movs	r3, #1
 800355e:	e049      	b.n	80035f4 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003566:	b2db      	uxtb	r3, r3
 8003568:	2b00      	cmp	r3, #0
 800356a:	d106      	bne.n	800357a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2200      	movs	r2, #0
 8003570:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003574:	6878      	ldr	r0, [r7, #4]
 8003576:	f7fe f9ef 	bl	8001958 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2202      	movs	r2, #2
 800357e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681a      	ldr	r2, [r3, #0]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	3304      	adds	r3, #4
 800358a:	4619      	mov	r1, r3
 800358c:	4610      	mov	r0, r2
 800358e:	f000 fcad 	bl	8003eec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2201      	movs	r2, #1
 8003596:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2201      	movs	r2, #1
 800359e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2201      	movs	r2, #1
 80035a6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2201      	movs	r2, #1
 80035ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2201      	movs	r2, #1
 80035b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2201      	movs	r2, #1
 80035be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2201      	movs	r2, #1
 80035c6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2201      	movs	r2, #1
 80035ce:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2201      	movs	r2, #1
 80035d6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2201      	movs	r2, #1
 80035de:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2201      	movs	r2, #1
 80035e6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2201      	movs	r2, #1
 80035ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80035f2:	2300      	movs	r3, #0
}
 80035f4:	4618      	mov	r0, r3
 80035f6:	3708      	adds	r7, #8
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bd80      	pop	{r7, pc}

080035fc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80035fc:	b480      	push	{r7}
 80035fe:	b085      	sub	sp, #20
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800360a:	b2db      	uxtb	r3, r3
 800360c:	2b01      	cmp	r3, #1
 800360e:	d001      	beq.n	8003614 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003610:	2301      	movs	r3, #1
 8003612:	e042      	b.n	800369a <HAL_TIM_Base_Start+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2202      	movs	r2, #2
 8003618:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a21      	ldr	r2, [pc, #132]	@ (80036a8 <HAL_TIM_Base_Start+0xac>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d018      	beq.n	8003658 <HAL_TIM_Base_Start+0x5c>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800362e:	d013      	beq.n	8003658 <HAL_TIM_Base_Start+0x5c>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a1d      	ldr	r2, [pc, #116]	@ (80036ac <HAL_TIM_Base_Start+0xb0>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d00e      	beq.n	8003658 <HAL_TIM_Base_Start+0x5c>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4a1c      	ldr	r2, [pc, #112]	@ (80036b0 <HAL_TIM_Base_Start+0xb4>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d009      	beq.n	8003658 <HAL_TIM_Base_Start+0x5c>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a1a      	ldr	r2, [pc, #104]	@ (80036b4 <HAL_TIM_Base_Start+0xb8>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d004      	beq.n	8003658 <HAL_TIM_Base_Start+0x5c>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4a19      	ldr	r2, [pc, #100]	@ (80036b8 <HAL_TIM_Base_Start+0xbc>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d115      	bne.n	8003684 <HAL_TIM_Base_Start+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	689a      	ldr	r2, [r3, #8]
 800365e:	4b17      	ldr	r3, [pc, #92]	@ (80036bc <HAL_TIM_Base_Start+0xc0>)
 8003660:	4013      	ands	r3, r2
 8003662:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	2b06      	cmp	r3, #6
 8003668:	d015      	beq.n	8003696 <HAL_TIM_Base_Start+0x9a>
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003670:	d011      	beq.n	8003696 <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	681a      	ldr	r2, [r3, #0]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f042 0201 	orr.w	r2, r2, #1
 8003680:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003682:	e008      	b.n	8003696 <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	681a      	ldr	r2, [r3, #0]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f042 0201 	orr.w	r2, r2, #1
 8003692:	601a      	str	r2, [r3, #0]
 8003694:	e000      	b.n	8003698 <HAL_TIM_Base_Start+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003696:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003698:	2300      	movs	r3, #0
}
 800369a:	4618      	mov	r0, r3
 800369c:	3714      	adds	r7, #20
 800369e:	46bd      	mov	sp, r7
 80036a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a4:	4770      	bx	lr
 80036a6:	bf00      	nop
 80036a8:	40012c00 	.word	0x40012c00
 80036ac:	40000400 	.word	0x40000400
 80036b0:	40000800 	.word	0x40000800
 80036b4:	40013400 	.word	0x40013400
 80036b8:	40014000 	.word	0x40014000
 80036bc:	00010007 	.word	0x00010007

080036c0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b082      	sub	sp, #8
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d101      	bne.n	80036d2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80036ce:	2301      	movs	r3, #1
 80036d0:	e049      	b.n	8003766 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80036d8:	b2db      	uxtb	r3, r3
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d106      	bne.n	80036ec <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2200      	movs	r2, #0
 80036e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80036e6:	6878      	ldr	r0, [r7, #4]
 80036e8:	f000 f841 	bl	800376e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2202      	movs	r2, #2
 80036f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681a      	ldr	r2, [r3, #0]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	3304      	adds	r3, #4
 80036fc:	4619      	mov	r1, r3
 80036fe:	4610      	mov	r0, r2
 8003700:	f000 fbf4 	bl	8003eec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2201      	movs	r2, #1
 8003708:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2201      	movs	r2, #1
 8003710:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2201      	movs	r2, #1
 8003718:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2201      	movs	r2, #1
 8003720:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2201      	movs	r2, #1
 8003728:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2201      	movs	r2, #1
 8003730:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2201      	movs	r2, #1
 8003738:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2201      	movs	r2, #1
 8003740:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2201      	movs	r2, #1
 8003748:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2201      	movs	r2, #1
 8003750:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2201      	movs	r2, #1
 8003758:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2201      	movs	r2, #1
 8003760:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003764:	2300      	movs	r3, #0
}
 8003766:	4618      	mov	r0, r3
 8003768:	3708      	adds	r7, #8
 800376a:	46bd      	mov	sp, r7
 800376c:	bd80      	pop	{r7, pc}

0800376e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800376e:	b480      	push	{r7}
 8003770:	b083      	sub	sp, #12
 8003772:	af00      	add	r7, sp, #0
 8003774:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003776:	bf00      	nop
 8003778:	370c      	adds	r7, #12
 800377a:	46bd      	mov	sp, r7
 800377c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003780:	4770      	bx	lr
	...

08003784 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b084      	sub	sp, #16
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
 800378c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d109      	bne.n	80037a8 <HAL_TIM_PWM_Start+0x24>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800379a:	b2db      	uxtb	r3, r3
 800379c:	2b01      	cmp	r3, #1
 800379e:	bf14      	ite	ne
 80037a0:	2301      	movne	r3, #1
 80037a2:	2300      	moveq	r3, #0
 80037a4:	b2db      	uxtb	r3, r3
 80037a6:	e03c      	b.n	8003822 <HAL_TIM_PWM_Start+0x9e>
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	2b04      	cmp	r3, #4
 80037ac:	d109      	bne.n	80037c2 <HAL_TIM_PWM_Start+0x3e>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80037b4:	b2db      	uxtb	r3, r3
 80037b6:	2b01      	cmp	r3, #1
 80037b8:	bf14      	ite	ne
 80037ba:	2301      	movne	r3, #1
 80037bc:	2300      	moveq	r3, #0
 80037be:	b2db      	uxtb	r3, r3
 80037c0:	e02f      	b.n	8003822 <HAL_TIM_PWM_Start+0x9e>
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	2b08      	cmp	r3, #8
 80037c6:	d109      	bne.n	80037dc <HAL_TIM_PWM_Start+0x58>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80037ce:	b2db      	uxtb	r3, r3
 80037d0:	2b01      	cmp	r3, #1
 80037d2:	bf14      	ite	ne
 80037d4:	2301      	movne	r3, #1
 80037d6:	2300      	moveq	r3, #0
 80037d8:	b2db      	uxtb	r3, r3
 80037da:	e022      	b.n	8003822 <HAL_TIM_PWM_Start+0x9e>
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	2b0c      	cmp	r3, #12
 80037e0:	d109      	bne.n	80037f6 <HAL_TIM_PWM_Start+0x72>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80037e8:	b2db      	uxtb	r3, r3
 80037ea:	2b01      	cmp	r3, #1
 80037ec:	bf14      	ite	ne
 80037ee:	2301      	movne	r3, #1
 80037f0:	2300      	moveq	r3, #0
 80037f2:	b2db      	uxtb	r3, r3
 80037f4:	e015      	b.n	8003822 <HAL_TIM_PWM_Start+0x9e>
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	2b10      	cmp	r3, #16
 80037fa:	d109      	bne.n	8003810 <HAL_TIM_PWM_Start+0x8c>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003802:	b2db      	uxtb	r3, r3
 8003804:	2b01      	cmp	r3, #1
 8003806:	bf14      	ite	ne
 8003808:	2301      	movne	r3, #1
 800380a:	2300      	moveq	r3, #0
 800380c:	b2db      	uxtb	r3, r3
 800380e:	e008      	b.n	8003822 <HAL_TIM_PWM_Start+0x9e>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003816:	b2db      	uxtb	r3, r3
 8003818:	2b01      	cmp	r3, #1
 800381a:	bf14      	ite	ne
 800381c:	2301      	movne	r3, #1
 800381e:	2300      	moveq	r3, #0
 8003820:	b2db      	uxtb	r3, r3
 8003822:	2b00      	cmp	r3, #0
 8003824:	d001      	beq.n	800382a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003826:	2301      	movs	r3, #1
 8003828:	e097      	b.n	800395a <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d104      	bne.n	800383a <HAL_TIM_PWM_Start+0xb6>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2202      	movs	r2, #2
 8003834:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003838:	e023      	b.n	8003882 <HAL_TIM_PWM_Start+0xfe>
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	2b04      	cmp	r3, #4
 800383e:	d104      	bne.n	800384a <HAL_TIM_PWM_Start+0xc6>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2202      	movs	r2, #2
 8003844:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003848:	e01b      	b.n	8003882 <HAL_TIM_PWM_Start+0xfe>
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	2b08      	cmp	r3, #8
 800384e:	d104      	bne.n	800385a <HAL_TIM_PWM_Start+0xd6>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2202      	movs	r2, #2
 8003854:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003858:	e013      	b.n	8003882 <HAL_TIM_PWM_Start+0xfe>
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	2b0c      	cmp	r3, #12
 800385e:	d104      	bne.n	800386a <HAL_TIM_PWM_Start+0xe6>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2202      	movs	r2, #2
 8003864:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003868:	e00b      	b.n	8003882 <HAL_TIM_PWM_Start+0xfe>
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	2b10      	cmp	r3, #16
 800386e:	d104      	bne.n	800387a <HAL_TIM_PWM_Start+0xf6>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2202      	movs	r2, #2
 8003874:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003878:	e003      	b.n	8003882 <HAL_TIM_PWM_Start+0xfe>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2202      	movs	r2, #2
 800387e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	2201      	movs	r2, #1
 8003888:	6839      	ldr	r1, [r7, #0]
 800388a:	4618      	mov	r0, r3
 800388c:	f000 ffc4 	bl	8004818 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a33      	ldr	r2, [pc, #204]	@ (8003964 <HAL_TIM_PWM_Start+0x1e0>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d013      	beq.n	80038c2 <HAL_TIM_PWM_Start+0x13e>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a32      	ldr	r2, [pc, #200]	@ (8003968 <HAL_TIM_PWM_Start+0x1e4>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d00e      	beq.n	80038c2 <HAL_TIM_PWM_Start+0x13e>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a30      	ldr	r2, [pc, #192]	@ (800396c <HAL_TIM_PWM_Start+0x1e8>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d009      	beq.n	80038c2 <HAL_TIM_PWM_Start+0x13e>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a2f      	ldr	r2, [pc, #188]	@ (8003970 <HAL_TIM_PWM_Start+0x1ec>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d004      	beq.n	80038c2 <HAL_TIM_PWM_Start+0x13e>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a2d      	ldr	r2, [pc, #180]	@ (8003974 <HAL_TIM_PWM_Start+0x1f0>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d101      	bne.n	80038c6 <HAL_TIM_PWM_Start+0x142>
 80038c2:	2301      	movs	r3, #1
 80038c4:	e000      	b.n	80038c8 <HAL_TIM_PWM_Start+0x144>
 80038c6:	2300      	movs	r3, #0
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d007      	beq.n	80038dc <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80038da:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4a20      	ldr	r2, [pc, #128]	@ (8003964 <HAL_TIM_PWM_Start+0x1e0>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d018      	beq.n	8003918 <HAL_TIM_PWM_Start+0x194>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038ee:	d013      	beq.n	8003918 <HAL_TIM_PWM_Start+0x194>
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4a20      	ldr	r2, [pc, #128]	@ (8003978 <HAL_TIM_PWM_Start+0x1f4>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d00e      	beq.n	8003918 <HAL_TIM_PWM_Start+0x194>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4a1f      	ldr	r2, [pc, #124]	@ (800397c <HAL_TIM_PWM_Start+0x1f8>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d009      	beq.n	8003918 <HAL_TIM_PWM_Start+0x194>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a17      	ldr	r2, [pc, #92]	@ (8003968 <HAL_TIM_PWM_Start+0x1e4>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d004      	beq.n	8003918 <HAL_TIM_PWM_Start+0x194>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4a16      	ldr	r2, [pc, #88]	@ (800396c <HAL_TIM_PWM_Start+0x1e8>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d115      	bne.n	8003944 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	689a      	ldr	r2, [r3, #8]
 800391e:	4b18      	ldr	r3, [pc, #96]	@ (8003980 <HAL_TIM_PWM_Start+0x1fc>)
 8003920:	4013      	ands	r3, r2
 8003922:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	2b06      	cmp	r3, #6
 8003928:	d015      	beq.n	8003956 <HAL_TIM_PWM_Start+0x1d2>
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003930:	d011      	beq.n	8003956 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	681a      	ldr	r2, [r3, #0]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f042 0201 	orr.w	r2, r2, #1
 8003940:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003942:	e008      	b.n	8003956 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	681a      	ldr	r2, [r3, #0]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f042 0201 	orr.w	r2, r2, #1
 8003952:	601a      	str	r2, [r3, #0]
 8003954:	e000      	b.n	8003958 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003956:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003958:	2300      	movs	r3, #0
}
 800395a:	4618      	mov	r0, r3
 800395c:	3710      	adds	r7, #16
 800395e:	46bd      	mov	sp, r7
 8003960:	bd80      	pop	{r7, pc}
 8003962:	bf00      	nop
 8003964:	40012c00 	.word	0x40012c00
 8003968:	40013400 	.word	0x40013400
 800396c:	40014000 	.word	0x40014000
 8003970:	40014400 	.word	0x40014400
 8003974:	40014800 	.word	0x40014800
 8003978:	40000400 	.word	0x40000400
 800397c:	40000800 	.word	0x40000800
 8003980:	00010007 	.word	0x00010007

08003984 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b086      	sub	sp, #24
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
 800398c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d101      	bne.n	8003998 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003994:	2301      	movs	r3, #1
 8003996:	e097      	b.n	8003ac8 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800399e:	b2db      	uxtb	r3, r3
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d106      	bne.n	80039b2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2200      	movs	r2, #0
 80039a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80039ac:	6878      	ldr	r0, [r7, #4]
 80039ae:	f7fd ff41 	bl	8001834 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2202      	movs	r2, #2
 80039b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	689b      	ldr	r3, [r3, #8]
 80039c0:	687a      	ldr	r2, [r7, #4]
 80039c2:	6812      	ldr	r2, [r2, #0]
 80039c4:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 80039c8:	f023 0307 	bic.w	r3, r3, #7
 80039cc:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681a      	ldr	r2, [r3, #0]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	3304      	adds	r3, #4
 80039d6:	4619      	mov	r1, r3
 80039d8:	4610      	mov	r0, r2
 80039da:	f000 fa87 	bl	8003eec <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	689b      	ldr	r3, [r3, #8]
 80039e4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	699b      	ldr	r3, [r3, #24]
 80039ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	6a1b      	ldr	r3, [r3, #32]
 80039f4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	697a      	ldr	r2, [r7, #20]
 80039fc:	4313      	orrs	r3, r2
 80039fe:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003a00:	693b      	ldr	r3, [r7, #16]
 8003a02:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003a06:	f023 0303 	bic.w	r3, r3, #3
 8003a0a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	689a      	ldr	r2, [r3, #8]
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	699b      	ldr	r3, [r3, #24]
 8003a14:	021b      	lsls	r3, r3, #8
 8003a16:	4313      	orrs	r3, r2
 8003a18:	693a      	ldr	r2, [r7, #16]
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003a1e:	693b      	ldr	r3, [r7, #16]
 8003a20:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8003a24:	f023 030c 	bic.w	r3, r3, #12
 8003a28:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003a2a:	693b      	ldr	r3, [r7, #16]
 8003a2c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003a30:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003a34:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	68da      	ldr	r2, [r3, #12]
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	69db      	ldr	r3, [r3, #28]
 8003a3e:	021b      	lsls	r3, r3, #8
 8003a40:	4313      	orrs	r3, r2
 8003a42:	693a      	ldr	r2, [r7, #16]
 8003a44:	4313      	orrs	r3, r2
 8003a46:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	691b      	ldr	r3, [r3, #16]
 8003a4c:	011a      	lsls	r2, r3, #4
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	6a1b      	ldr	r3, [r3, #32]
 8003a52:	031b      	lsls	r3, r3, #12
 8003a54:	4313      	orrs	r3, r2
 8003a56:	693a      	ldr	r2, [r7, #16]
 8003a58:	4313      	orrs	r3, r2
 8003a5a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8003a62:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8003a6a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	685a      	ldr	r2, [r3, #4]
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	695b      	ldr	r3, [r3, #20]
 8003a74:	011b      	lsls	r3, r3, #4
 8003a76:	4313      	orrs	r3, r2
 8003a78:	68fa      	ldr	r2, [r7, #12]
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	697a      	ldr	r2, [r7, #20]
 8003a84:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	693a      	ldr	r2, [r7, #16]
 8003a8c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	68fa      	ldr	r2, [r7, #12]
 8003a94:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2201      	movs	r2, #1
 8003a9a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2201      	movs	r2, #1
 8003aa2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2201      	movs	r2, #1
 8003aaa:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2201      	movs	r2, #1
 8003ab2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2201      	movs	r2, #1
 8003aba:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2201      	movs	r2, #1
 8003ac2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003ac6:	2300      	movs	r3, #0
}
 8003ac8:	4618      	mov	r0, r3
 8003aca:	3718      	adds	r7, #24
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bd80      	pop	{r7, pc}

08003ad0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b086      	sub	sp, #24
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	60f8      	str	r0, [r7, #12]
 8003ad8:	60b9      	str	r1, [r7, #8]
 8003ada:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003adc:	2300      	movs	r3, #0
 8003ade:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003ae6:	2b01      	cmp	r3, #1
 8003ae8:	d101      	bne.n	8003aee <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003aea:	2302      	movs	r3, #2
 8003aec:	e0ff      	b.n	8003cee <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	2201      	movs	r2, #1
 8003af2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2b14      	cmp	r3, #20
 8003afa:	f200 80f0 	bhi.w	8003cde <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003afe:	a201      	add	r2, pc, #4	@ (adr r2, 8003b04 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003b00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b04:	08003b59 	.word	0x08003b59
 8003b08:	08003cdf 	.word	0x08003cdf
 8003b0c:	08003cdf 	.word	0x08003cdf
 8003b10:	08003cdf 	.word	0x08003cdf
 8003b14:	08003b99 	.word	0x08003b99
 8003b18:	08003cdf 	.word	0x08003cdf
 8003b1c:	08003cdf 	.word	0x08003cdf
 8003b20:	08003cdf 	.word	0x08003cdf
 8003b24:	08003bdb 	.word	0x08003bdb
 8003b28:	08003cdf 	.word	0x08003cdf
 8003b2c:	08003cdf 	.word	0x08003cdf
 8003b30:	08003cdf 	.word	0x08003cdf
 8003b34:	08003c1b 	.word	0x08003c1b
 8003b38:	08003cdf 	.word	0x08003cdf
 8003b3c:	08003cdf 	.word	0x08003cdf
 8003b40:	08003cdf 	.word	0x08003cdf
 8003b44:	08003c5d 	.word	0x08003c5d
 8003b48:	08003cdf 	.word	0x08003cdf
 8003b4c:	08003cdf 	.word	0x08003cdf
 8003b50:	08003cdf 	.word	0x08003cdf
 8003b54:	08003c9d 	.word	0x08003c9d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	68b9      	ldr	r1, [r7, #8]
 8003b5e:	4618      	mov	r0, r3
 8003b60:	f000 fa60 	bl	8004024 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	699a      	ldr	r2, [r3, #24]
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f042 0208 	orr.w	r2, r2, #8
 8003b72:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	699a      	ldr	r2, [r3, #24]
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f022 0204 	bic.w	r2, r2, #4
 8003b82:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	6999      	ldr	r1, [r3, #24]
 8003b8a:	68bb      	ldr	r3, [r7, #8]
 8003b8c:	691a      	ldr	r2, [r3, #16]
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	430a      	orrs	r2, r1
 8003b94:	619a      	str	r2, [r3, #24]
      break;
 8003b96:	e0a5      	b.n	8003ce4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	68b9      	ldr	r1, [r7, #8]
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	f000 fad0 	bl	8004144 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	699a      	ldr	r2, [r3, #24]
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003bb2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	699a      	ldr	r2, [r3, #24]
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003bc2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	6999      	ldr	r1, [r3, #24]
 8003bca:	68bb      	ldr	r3, [r7, #8]
 8003bcc:	691b      	ldr	r3, [r3, #16]
 8003bce:	021a      	lsls	r2, r3, #8
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	430a      	orrs	r2, r1
 8003bd6:	619a      	str	r2, [r3, #24]
      break;
 8003bd8:	e084      	b.n	8003ce4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	68b9      	ldr	r1, [r7, #8]
 8003be0:	4618      	mov	r0, r3
 8003be2:	f000 fb39 	bl	8004258 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	69da      	ldr	r2, [r3, #28]
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f042 0208 	orr.w	r2, r2, #8
 8003bf4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	69da      	ldr	r2, [r3, #28]
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f022 0204 	bic.w	r2, r2, #4
 8003c04:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	69d9      	ldr	r1, [r3, #28]
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	691a      	ldr	r2, [r3, #16]
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	430a      	orrs	r2, r1
 8003c16:	61da      	str	r2, [r3, #28]
      break;
 8003c18:	e064      	b.n	8003ce4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	68b9      	ldr	r1, [r7, #8]
 8003c20:	4618      	mov	r0, r3
 8003c22:	f000 fba1 	bl	8004368 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	69da      	ldr	r2, [r3, #28]
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003c34:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	69da      	ldr	r2, [r3, #28]
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c44:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	69d9      	ldr	r1, [r3, #28]
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	691b      	ldr	r3, [r3, #16]
 8003c50:	021a      	lsls	r2, r3, #8
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	430a      	orrs	r2, r1
 8003c58:	61da      	str	r2, [r3, #28]
      break;
 8003c5a:	e043      	b.n	8003ce4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	68b9      	ldr	r1, [r7, #8]
 8003c62:	4618      	mov	r0, r3
 8003c64:	f000 fc0a 	bl	800447c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f042 0208 	orr.w	r2, r2, #8
 8003c76:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f022 0204 	bic.w	r2, r2, #4
 8003c86:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8003c8e:	68bb      	ldr	r3, [r7, #8]
 8003c90:	691a      	ldr	r2, [r3, #16]
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	430a      	orrs	r2, r1
 8003c98:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8003c9a:	e023      	b.n	8003ce4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	68b9      	ldr	r1, [r7, #8]
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	f000 fc4e 	bl	8004544 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003cb6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003cc6:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8003cce:	68bb      	ldr	r3, [r7, #8]
 8003cd0:	691b      	ldr	r3, [r3, #16]
 8003cd2:	021a      	lsls	r2, r3, #8
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	430a      	orrs	r2, r1
 8003cda:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8003cdc:	e002      	b.n	8003ce4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8003cde:	2301      	movs	r3, #1
 8003ce0:	75fb      	strb	r3, [r7, #23]
      break;
 8003ce2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003cec:	7dfb      	ldrb	r3, [r7, #23]
}
 8003cee:	4618      	mov	r0, r3
 8003cf0:	3718      	adds	r7, #24
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bd80      	pop	{r7, pc}
 8003cf6:	bf00      	nop

08003cf8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b084      	sub	sp, #16
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
 8003d00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003d02:	2300      	movs	r3, #0
 8003d04:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003d0c:	2b01      	cmp	r3, #1
 8003d0e:	d101      	bne.n	8003d14 <HAL_TIM_ConfigClockSource+0x1c>
 8003d10:	2302      	movs	r3, #2
 8003d12:	e0de      	b.n	8003ed2 <HAL_TIM_ConfigClockSource+0x1da>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2201      	movs	r2, #1
 8003d18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2202      	movs	r2, #2
 8003d20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	689b      	ldr	r3, [r3, #8]
 8003d2a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003d2c:	68bb      	ldr	r3, [r7, #8]
 8003d2e:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8003d32:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003d36:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d38:	68bb      	ldr	r3, [r7, #8]
 8003d3a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003d3e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	68ba      	ldr	r2, [r7, #8]
 8003d46:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a63      	ldr	r2, [pc, #396]	@ (8003edc <HAL_TIM_ConfigClockSource+0x1e4>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	f000 80a9 	beq.w	8003ea6 <HAL_TIM_ConfigClockSource+0x1ae>
 8003d54:	4a61      	ldr	r2, [pc, #388]	@ (8003edc <HAL_TIM_ConfigClockSource+0x1e4>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	f200 80ae 	bhi.w	8003eb8 <HAL_TIM_ConfigClockSource+0x1c0>
 8003d5c:	4a60      	ldr	r2, [pc, #384]	@ (8003ee0 <HAL_TIM_ConfigClockSource+0x1e8>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	f000 80a1 	beq.w	8003ea6 <HAL_TIM_ConfigClockSource+0x1ae>
 8003d64:	4a5e      	ldr	r2, [pc, #376]	@ (8003ee0 <HAL_TIM_ConfigClockSource+0x1e8>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	f200 80a6 	bhi.w	8003eb8 <HAL_TIM_ConfigClockSource+0x1c0>
 8003d6c:	4a5d      	ldr	r2, [pc, #372]	@ (8003ee4 <HAL_TIM_ConfigClockSource+0x1ec>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	f000 8099 	beq.w	8003ea6 <HAL_TIM_ConfigClockSource+0x1ae>
 8003d74:	4a5b      	ldr	r2, [pc, #364]	@ (8003ee4 <HAL_TIM_ConfigClockSource+0x1ec>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	f200 809e 	bhi.w	8003eb8 <HAL_TIM_ConfigClockSource+0x1c0>
 8003d7c:	4a5a      	ldr	r2, [pc, #360]	@ (8003ee8 <HAL_TIM_ConfigClockSource+0x1f0>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	f000 8091 	beq.w	8003ea6 <HAL_TIM_ConfigClockSource+0x1ae>
 8003d84:	4a58      	ldr	r2, [pc, #352]	@ (8003ee8 <HAL_TIM_ConfigClockSource+0x1f0>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	f200 8096 	bhi.w	8003eb8 <HAL_TIM_ConfigClockSource+0x1c0>
 8003d8c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8003d90:	f000 8089 	beq.w	8003ea6 <HAL_TIM_ConfigClockSource+0x1ae>
 8003d94:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8003d98:	f200 808e 	bhi.w	8003eb8 <HAL_TIM_ConfigClockSource+0x1c0>
 8003d9c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003da0:	d03e      	beq.n	8003e20 <HAL_TIM_ConfigClockSource+0x128>
 8003da2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003da6:	f200 8087 	bhi.w	8003eb8 <HAL_TIM_ConfigClockSource+0x1c0>
 8003daa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003dae:	f000 8086 	beq.w	8003ebe <HAL_TIM_ConfigClockSource+0x1c6>
 8003db2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003db6:	d87f      	bhi.n	8003eb8 <HAL_TIM_ConfigClockSource+0x1c0>
 8003db8:	2b70      	cmp	r3, #112	@ 0x70
 8003dba:	d01a      	beq.n	8003df2 <HAL_TIM_ConfigClockSource+0xfa>
 8003dbc:	2b70      	cmp	r3, #112	@ 0x70
 8003dbe:	d87b      	bhi.n	8003eb8 <HAL_TIM_ConfigClockSource+0x1c0>
 8003dc0:	2b60      	cmp	r3, #96	@ 0x60
 8003dc2:	d050      	beq.n	8003e66 <HAL_TIM_ConfigClockSource+0x16e>
 8003dc4:	2b60      	cmp	r3, #96	@ 0x60
 8003dc6:	d877      	bhi.n	8003eb8 <HAL_TIM_ConfigClockSource+0x1c0>
 8003dc8:	2b50      	cmp	r3, #80	@ 0x50
 8003dca:	d03c      	beq.n	8003e46 <HAL_TIM_ConfigClockSource+0x14e>
 8003dcc:	2b50      	cmp	r3, #80	@ 0x50
 8003dce:	d873      	bhi.n	8003eb8 <HAL_TIM_ConfigClockSource+0x1c0>
 8003dd0:	2b40      	cmp	r3, #64	@ 0x40
 8003dd2:	d058      	beq.n	8003e86 <HAL_TIM_ConfigClockSource+0x18e>
 8003dd4:	2b40      	cmp	r3, #64	@ 0x40
 8003dd6:	d86f      	bhi.n	8003eb8 <HAL_TIM_ConfigClockSource+0x1c0>
 8003dd8:	2b30      	cmp	r3, #48	@ 0x30
 8003dda:	d064      	beq.n	8003ea6 <HAL_TIM_ConfigClockSource+0x1ae>
 8003ddc:	2b30      	cmp	r3, #48	@ 0x30
 8003dde:	d86b      	bhi.n	8003eb8 <HAL_TIM_ConfigClockSource+0x1c0>
 8003de0:	2b20      	cmp	r3, #32
 8003de2:	d060      	beq.n	8003ea6 <HAL_TIM_ConfigClockSource+0x1ae>
 8003de4:	2b20      	cmp	r3, #32
 8003de6:	d867      	bhi.n	8003eb8 <HAL_TIM_ConfigClockSource+0x1c0>
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d05c      	beq.n	8003ea6 <HAL_TIM_ConfigClockSource+0x1ae>
 8003dec:	2b10      	cmp	r3, #16
 8003dee:	d05a      	beq.n	8003ea6 <HAL_TIM_ConfigClockSource+0x1ae>
 8003df0:	e062      	b.n	8003eb8 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003e02:	f000 fce9 	bl	80047d8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	689b      	ldr	r3, [r3, #8]
 8003e0c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003e0e:	68bb      	ldr	r3, [r7, #8]
 8003e10:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003e14:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	68ba      	ldr	r2, [r7, #8]
 8003e1c:	609a      	str	r2, [r3, #8]
      break;
 8003e1e:	e04f      	b.n	8003ec0 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003e30:	f000 fcd2 	bl	80047d8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	689a      	ldr	r2, [r3, #8]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003e42:	609a      	str	r2, [r3, #8]
      break;
 8003e44:	e03c      	b.n	8003ec0 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e52:	461a      	mov	r2, r3
 8003e54:	f000 fc44 	bl	80046e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	2150      	movs	r1, #80	@ 0x50
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f000 fc9d 	bl	800479e <TIM_ITRx_SetConfig>
      break;
 8003e64:	e02c      	b.n	8003ec0 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e72:	461a      	mov	r2, r3
 8003e74:	f000 fc63 	bl	800473e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	2160      	movs	r1, #96	@ 0x60
 8003e7e:	4618      	mov	r0, r3
 8003e80:	f000 fc8d 	bl	800479e <TIM_ITRx_SetConfig>
      break;
 8003e84:	e01c      	b.n	8003ec0 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e92:	461a      	mov	r2, r3
 8003e94:	f000 fc24 	bl	80046e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	2140      	movs	r1, #64	@ 0x40
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	f000 fc7d 	bl	800479e <TIM_ITRx_SetConfig>
      break;
 8003ea4:	e00c      	b.n	8003ec0 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681a      	ldr	r2, [r3, #0]
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4619      	mov	r1, r3
 8003eb0:	4610      	mov	r0, r2
 8003eb2:	f000 fc74 	bl	800479e <TIM_ITRx_SetConfig>
      break;
 8003eb6:	e003      	b.n	8003ec0 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8003eb8:	2301      	movs	r3, #1
 8003eba:	73fb      	strb	r3, [r7, #15]
      break;
 8003ebc:	e000      	b.n	8003ec0 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8003ebe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2201      	movs	r2, #1
 8003ec4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2200      	movs	r2, #0
 8003ecc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003ed0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	3710      	adds	r7, #16
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bd80      	pop	{r7, pc}
 8003eda:	bf00      	nop
 8003edc:	00100070 	.word	0x00100070
 8003ee0:	00100040 	.word	0x00100040
 8003ee4:	00100030 	.word	0x00100030
 8003ee8:	00100020 	.word	0x00100020

08003eec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003eec:	b480      	push	{r7}
 8003eee:	b085      	sub	sp, #20
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
 8003ef4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	4a42      	ldr	r2, [pc, #264]	@ (8004008 <TIM_Base_SetConfig+0x11c>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d00f      	beq.n	8003f24 <TIM_Base_SetConfig+0x38>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f0a:	d00b      	beq.n	8003f24 <TIM_Base_SetConfig+0x38>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	4a3f      	ldr	r2, [pc, #252]	@ (800400c <TIM_Base_SetConfig+0x120>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d007      	beq.n	8003f24 <TIM_Base_SetConfig+0x38>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	4a3e      	ldr	r2, [pc, #248]	@ (8004010 <TIM_Base_SetConfig+0x124>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d003      	beq.n	8003f24 <TIM_Base_SetConfig+0x38>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	4a3d      	ldr	r2, [pc, #244]	@ (8004014 <TIM_Base_SetConfig+0x128>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d108      	bne.n	8003f36 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f2a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	68fa      	ldr	r2, [r7, #12]
 8003f32:	4313      	orrs	r3, r2
 8003f34:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	4a33      	ldr	r2, [pc, #204]	@ (8004008 <TIM_Base_SetConfig+0x11c>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d01b      	beq.n	8003f76 <TIM_Base_SetConfig+0x8a>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f44:	d017      	beq.n	8003f76 <TIM_Base_SetConfig+0x8a>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	4a30      	ldr	r2, [pc, #192]	@ (800400c <TIM_Base_SetConfig+0x120>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d013      	beq.n	8003f76 <TIM_Base_SetConfig+0x8a>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	4a2f      	ldr	r2, [pc, #188]	@ (8004010 <TIM_Base_SetConfig+0x124>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d00f      	beq.n	8003f76 <TIM_Base_SetConfig+0x8a>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	4a2e      	ldr	r2, [pc, #184]	@ (8004014 <TIM_Base_SetConfig+0x128>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d00b      	beq.n	8003f76 <TIM_Base_SetConfig+0x8a>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	4a2d      	ldr	r2, [pc, #180]	@ (8004018 <TIM_Base_SetConfig+0x12c>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d007      	beq.n	8003f76 <TIM_Base_SetConfig+0x8a>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	4a2c      	ldr	r2, [pc, #176]	@ (800401c <TIM_Base_SetConfig+0x130>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d003      	beq.n	8003f76 <TIM_Base_SetConfig+0x8a>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	4a2b      	ldr	r2, [pc, #172]	@ (8004020 <TIM_Base_SetConfig+0x134>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d108      	bne.n	8003f88 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003f7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	68db      	ldr	r3, [r3, #12]
 8003f82:	68fa      	ldr	r2, [r7, #12]
 8003f84:	4313      	orrs	r3, r2
 8003f86:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	695b      	ldr	r3, [r3, #20]
 8003f92:	4313      	orrs	r3, r2
 8003f94:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	68fa      	ldr	r2, [r7, #12]
 8003f9a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	689a      	ldr	r2, [r3, #8]
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	681a      	ldr	r2, [r3, #0]
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	4a16      	ldr	r2, [pc, #88]	@ (8004008 <TIM_Base_SetConfig+0x11c>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d00f      	beq.n	8003fd4 <TIM_Base_SetConfig+0xe8>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	4a17      	ldr	r2, [pc, #92]	@ (8004014 <TIM_Base_SetConfig+0x128>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d00b      	beq.n	8003fd4 <TIM_Base_SetConfig+0xe8>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	4a16      	ldr	r2, [pc, #88]	@ (8004018 <TIM_Base_SetConfig+0x12c>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d007      	beq.n	8003fd4 <TIM_Base_SetConfig+0xe8>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	4a15      	ldr	r2, [pc, #84]	@ (800401c <TIM_Base_SetConfig+0x130>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d003      	beq.n	8003fd4 <TIM_Base_SetConfig+0xe8>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	4a14      	ldr	r2, [pc, #80]	@ (8004020 <TIM_Base_SetConfig+0x134>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d103      	bne.n	8003fdc <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	691a      	ldr	r2, [r3, #16]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2201      	movs	r2, #1
 8003fe0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	691b      	ldr	r3, [r3, #16]
 8003fe6:	f003 0301 	and.w	r3, r3, #1
 8003fea:	2b01      	cmp	r3, #1
 8003fec:	d105      	bne.n	8003ffa <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	691b      	ldr	r3, [r3, #16]
 8003ff2:	f023 0201 	bic.w	r2, r3, #1
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	611a      	str	r2, [r3, #16]
  }
}
 8003ffa:	bf00      	nop
 8003ffc:	3714      	adds	r7, #20
 8003ffe:	46bd      	mov	sp, r7
 8004000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004004:	4770      	bx	lr
 8004006:	bf00      	nop
 8004008:	40012c00 	.word	0x40012c00
 800400c:	40000400 	.word	0x40000400
 8004010:	40000800 	.word	0x40000800
 8004014:	40013400 	.word	0x40013400
 8004018:	40014000 	.word	0x40014000
 800401c:	40014400 	.word	0x40014400
 8004020:	40014800 	.word	0x40014800

08004024 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004024:	b480      	push	{r7}
 8004026:	b087      	sub	sp, #28
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
 800402c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6a1b      	ldr	r3, [r3, #32]
 8004032:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6a1b      	ldr	r3, [r3, #32]
 8004038:	f023 0201 	bic.w	r2, r3, #1
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	699b      	ldr	r3, [r3, #24]
 800404a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004052:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004056:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	f023 0303 	bic.w	r3, r3, #3
 800405e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	68fa      	ldr	r2, [r7, #12]
 8004066:	4313      	orrs	r3, r2
 8004068:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800406a:	697b      	ldr	r3, [r7, #20]
 800406c:	f023 0302 	bic.w	r3, r3, #2
 8004070:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	689b      	ldr	r3, [r3, #8]
 8004076:	697a      	ldr	r2, [r7, #20]
 8004078:	4313      	orrs	r3, r2
 800407a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	4a2c      	ldr	r2, [pc, #176]	@ (8004130 <TIM_OC1_SetConfig+0x10c>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d00f      	beq.n	80040a4 <TIM_OC1_SetConfig+0x80>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	4a2b      	ldr	r2, [pc, #172]	@ (8004134 <TIM_OC1_SetConfig+0x110>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d00b      	beq.n	80040a4 <TIM_OC1_SetConfig+0x80>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	4a2a      	ldr	r2, [pc, #168]	@ (8004138 <TIM_OC1_SetConfig+0x114>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d007      	beq.n	80040a4 <TIM_OC1_SetConfig+0x80>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	4a29      	ldr	r2, [pc, #164]	@ (800413c <TIM_OC1_SetConfig+0x118>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d003      	beq.n	80040a4 <TIM_OC1_SetConfig+0x80>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	4a28      	ldr	r2, [pc, #160]	@ (8004140 <TIM_OC1_SetConfig+0x11c>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d10c      	bne.n	80040be <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80040a4:	697b      	ldr	r3, [r7, #20]
 80040a6:	f023 0308 	bic.w	r3, r3, #8
 80040aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	68db      	ldr	r3, [r3, #12]
 80040b0:	697a      	ldr	r2, [r7, #20]
 80040b2:	4313      	orrs	r3, r2
 80040b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80040b6:	697b      	ldr	r3, [r7, #20]
 80040b8:	f023 0304 	bic.w	r3, r3, #4
 80040bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	4a1b      	ldr	r2, [pc, #108]	@ (8004130 <TIM_OC1_SetConfig+0x10c>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d00f      	beq.n	80040e6 <TIM_OC1_SetConfig+0xc2>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	4a1a      	ldr	r2, [pc, #104]	@ (8004134 <TIM_OC1_SetConfig+0x110>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d00b      	beq.n	80040e6 <TIM_OC1_SetConfig+0xc2>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	4a19      	ldr	r2, [pc, #100]	@ (8004138 <TIM_OC1_SetConfig+0x114>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d007      	beq.n	80040e6 <TIM_OC1_SetConfig+0xc2>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	4a18      	ldr	r2, [pc, #96]	@ (800413c <TIM_OC1_SetConfig+0x118>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d003      	beq.n	80040e6 <TIM_OC1_SetConfig+0xc2>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	4a17      	ldr	r2, [pc, #92]	@ (8004140 <TIM_OC1_SetConfig+0x11c>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d111      	bne.n	800410a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80040e6:	693b      	ldr	r3, [r7, #16]
 80040e8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80040ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80040ee:	693b      	ldr	r3, [r7, #16]
 80040f0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80040f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	695b      	ldr	r3, [r3, #20]
 80040fa:	693a      	ldr	r2, [r7, #16]
 80040fc:	4313      	orrs	r3, r2
 80040fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	699b      	ldr	r3, [r3, #24]
 8004104:	693a      	ldr	r2, [r7, #16]
 8004106:	4313      	orrs	r3, r2
 8004108:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	693a      	ldr	r2, [r7, #16]
 800410e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	68fa      	ldr	r2, [r7, #12]
 8004114:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	685a      	ldr	r2, [r3, #4]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	697a      	ldr	r2, [r7, #20]
 8004122:	621a      	str	r2, [r3, #32]
}
 8004124:	bf00      	nop
 8004126:	371c      	adds	r7, #28
 8004128:	46bd      	mov	sp, r7
 800412a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412e:	4770      	bx	lr
 8004130:	40012c00 	.word	0x40012c00
 8004134:	40013400 	.word	0x40013400
 8004138:	40014000 	.word	0x40014000
 800413c:	40014400 	.word	0x40014400
 8004140:	40014800 	.word	0x40014800

08004144 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004144:	b480      	push	{r7}
 8004146:	b087      	sub	sp, #28
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
 800414c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6a1b      	ldr	r3, [r3, #32]
 8004152:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6a1b      	ldr	r3, [r3, #32]
 8004158:	f023 0210 	bic.w	r2, r3, #16
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	699b      	ldr	r3, [r3, #24]
 800416a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004172:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004176:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800417e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	021b      	lsls	r3, r3, #8
 8004186:	68fa      	ldr	r2, [r7, #12]
 8004188:	4313      	orrs	r3, r2
 800418a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800418c:	697b      	ldr	r3, [r7, #20]
 800418e:	f023 0320 	bic.w	r3, r3, #32
 8004192:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	689b      	ldr	r3, [r3, #8]
 8004198:	011b      	lsls	r3, r3, #4
 800419a:	697a      	ldr	r2, [r7, #20]
 800419c:	4313      	orrs	r3, r2
 800419e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	4a28      	ldr	r2, [pc, #160]	@ (8004244 <TIM_OC2_SetConfig+0x100>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d003      	beq.n	80041b0 <TIM_OC2_SetConfig+0x6c>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	4a27      	ldr	r2, [pc, #156]	@ (8004248 <TIM_OC2_SetConfig+0x104>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d10d      	bne.n	80041cc <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80041b0:	697b      	ldr	r3, [r7, #20]
 80041b2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80041b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	68db      	ldr	r3, [r3, #12]
 80041bc:	011b      	lsls	r3, r3, #4
 80041be:	697a      	ldr	r2, [r7, #20]
 80041c0:	4313      	orrs	r3, r2
 80041c2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80041c4:	697b      	ldr	r3, [r7, #20]
 80041c6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80041ca:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	4a1d      	ldr	r2, [pc, #116]	@ (8004244 <TIM_OC2_SetConfig+0x100>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d00f      	beq.n	80041f4 <TIM_OC2_SetConfig+0xb0>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	4a1c      	ldr	r2, [pc, #112]	@ (8004248 <TIM_OC2_SetConfig+0x104>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d00b      	beq.n	80041f4 <TIM_OC2_SetConfig+0xb0>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	4a1b      	ldr	r2, [pc, #108]	@ (800424c <TIM_OC2_SetConfig+0x108>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d007      	beq.n	80041f4 <TIM_OC2_SetConfig+0xb0>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	4a1a      	ldr	r2, [pc, #104]	@ (8004250 <TIM_OC2_SetConfig+0x10c>)
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d003      	beq.n	80041f4 <TIM_OC2_SetConfig+0xb0>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	4a19      	ldr	r2, [pc, #100]	@ (8004254 <TIM_OC2_SetConfig+0x110>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d113      	bne.n	800421c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80041f4:	693b      	ldr	r3, [r7, #16]
 80041f6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80041fa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80041fc:	693b      	ldr	r3, [r7, #16]
 80041fe:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004202:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	695b      	ldr	r3, [r3, #20]
 8004208:	009b      	lsls	r3, r3, #2
 800420a:	693a      	ldr	r2, [r7, #16]
 800420c:	4313      	orrs	r3, r2
 800420e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	699b      	ldr	r3, [r3, #24]
 8004214:	009b      	lsls	r3, r3, #2
 8004216:	693a      	ldr	r2, [r7, #16]
 8004218:	4313      	orrs	r3, r2
 800421a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	693a      	ldr	r2, [r7, #16]
 8004220:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	68fa      	ldr	r2, [r7, #12]
 8004226:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	685a      	ldr	r2, [r3, #4]
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	697a      	ldr	r2, [r7, #20]
 8004234:	621a      	str	r2, [r3, #32]
}
 8004236:	bf00      	nop
 8004238:	371c      	adds	r7, #28
 800423a:	46bd      	mov	sp, r7
 800423c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004240:	4770      	bx	lr
 8004242:	bf00      	nop
 8004244:	40012c00 	.word	0x40012c00
 8004248:	40013400 	.word	0x40013400
 800424c:	40014000 	.word	0x40014000
 8004250:	40014400 	.word	0x40014400
 8004254:	40014800 	.word	0x40014800

08004258 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004258:	b480      	push	{r7}
 800425a:	b087      	sub	sp, #28
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
 8004260:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6a1b      	ldr	r3, [r3, #32]
 8004266:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6a1b      	ldr	r3, [r3, #32]
 800426c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	685b      	ldr	r3, [r3, #4]
 8004278:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	69db      	ldr	r3, [r3, #28]
 800427e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004286:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800428a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	f023 0303 	bic.w	r3, r3, #3
 8004292:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	68fa      	ldr	r2, [r7, #12]
 800429a:	4313      	orrs	r3, r2
 800429c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800429e:	697b      	ldr	r3, [r7, #20]
 80042a0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80042a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	689b      	ldr	r3, [r3, #8]
 80042aa:	021b      	lsls	r3, r3, #8
 80042ac:	697a      	ldr	r2, [r7, #20]
 80042ae:	4313      	orrs	r3, r2
 80042b0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	4a27      	ldr	r2, [pc, #156]	@ (8004354 <TIM_OC3_SetConfig+0xfc>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d003      	beq.n	80042c2 <TIM_OC3_SetConfig+0x6a>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	4a26      	ldr	r2, [pc, #152]	@ (8004358 <TIM_OC3_SetConfig+0x100>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d10d      	bne.n	80042de <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80042c2:	697b      	ldr	r3, [r7, #20]
 80042c4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80042c8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	68db      	ldr	r3, [r3, #12]
 80042ce:	021b      	lsls	r3, r3, #8
 80042d0:	697a      	ldr	r2, [r7, #20]
 80042d2:	4313      	orrs	r3, r2
 80042d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80042d6:	697b      	ldr	r3, [r7, #20]
 80042d8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80042dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	4a1c      	ldr	r2, [pc, #112]	@ (8004354 <TIM_OC3_SetConfig+0xfc>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d00f      	beq.n	8004306 <TIM_OC3_SetConfig+0xae>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	4a1b      	ldr	r2, [pc, #108]	@ (8004358 <TIM_OC3_SetConfig+0x100>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d00b      	beq.n	8004306 <TIM_OC3_SetConfig+0xae>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	4a1a      	ldr	r2, [pc, #104]	@ (800435c <TIM_OC3_SetConfig+0x104>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d007      	beq.n	8004306 <TIM_OC3_SetConfig+0xae>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	4a19      	ldr	r2, [pc, #100]	@ (8004360 <TIM_OC3_SetConfig+0x108>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d003      	beq.n	8004306 <TIM_OC3_SetConfig+0xae>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	4a18      	ldr	r2, [pc, #96]	@ (8004364 <TIM_OC3_SetConfig+0x10c>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d113      	bne.n	800432e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004306:	693b      	ldr	r3, [r7, #16]
 8004308:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800430c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800430e:	693b      	ldr	r3, [r7, #16]
 8004310:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004314:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	695b      	ldr	r3, [r3, #20]
 800431a:	011b      	lsls	r3, r3, #4
 800431c:	693a      	ldr	r2, [r7, #16]
 800431e:	4313      	orrs	r3, r2
 8004320:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	699b      	ldr	r3, [r3, #24]
 8004326:	011b      	lsls	r3, r3, #4
 8004328:	693a      	ldr	r2, [r7, #16]
 800432a:	4313      	orrs	r3, r2
 800432c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	693a      	ldr	r2, [r7, #16]
 8004332:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	68fa      	ldr	r2, [r7, #12]
 8004338:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	685a      	ldr	r2, [r3, #4]
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	697a      	ldr	r2, [r7, #20]
 8004346:	621a      	str	r2, [r3, #32]
}
 8004348:	bf00      	nop
 800434a:	371c      	adds	r7, #28
 800434c:	46bd      	mov	sp, r7
 800434e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004352:	4770      	bx	lr
 8004354:	40012c00 	.word	0x40012c00
 8004358:	40013400 	.word	0x40013400
 800435c:	40014000 	.word	0x40014000
 8004360:	40014400 	.word	0x40014400
 8004364:	40014800 	.word	0x40014800

08004368 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004368:	b480      	push	{r7}
 800436a:	b087      	sub	sp, #28
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
 8004370:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6a1b      	ldr	r3, [r3, #32]
 8004376:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6a1b      	ldr	r3, [r3, #32]
 800437c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	685b      	ldr	r3, [r3, #4]
 8004388:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	69db      	ldr	r3, [r3, #28]
 800438e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004396:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800439a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80043a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	021b      	lsls	r3, r3, #8
 80043aa:	68fa      	ldr	r2, [r7, #12]
 80043ac:	4313      	orrs	r3, r2
 80043ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80043b0:	697b      	ldr	r3, [r7, #20]
 80043b2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80043b6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	689b      	ldr	r3, [r3, #8]
 80043bc:	031b      	lsls	r3, r3, #12
 80043be:	697a      	ldr	r2, [r7, #20]
 80043c0:	4313      	orrs	r3, r2
 80043c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	4a28      	ldr	r2, [pc, #160]	@ (8004468 <TIM_OC4_SetConfig+0x100>)
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d003      	beq.n	80043d4 <TIM_OC4_SetConfig+0x6c>
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	4a27      	ldr	r2, [pc, #156]	@ (800446c <TIM_OC4_SetConfig+0x104>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d10d      	bne.n	80043f0 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80043d4:	697b      	ldr	r3, [r7, #20]
 80043d6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80043da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	68db      	ldr	r3, [r3, #12]
 80043e0:	031b      	lsls	r3, r3, #12
 80043e2:	697a      	ldr	r2, [r7, #20]
 80043e4:	4313      	orrs	r3, r2
 80043e6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80043e8:	697b      	ldr	r3, [r7, #20]
 80043ea:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80043ee:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	4a1d      	ldr	r2, [pc, #116]	@ (8004468 <TIM_OC4_SetConfig+0x100>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d00f      	beq.n	8004418 <TIM_OC4_SetConfig+0xb0>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	4a1c      	ldr	r2, [pc, #112]	@ (800446c <TIM_OC4_SetConfig+0x104>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d00b      	beq.n	8004418 <TIM_OC4_SetConfig+0xb0>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	4a1b      	ldr	r2, [pc, #108]	@ (8004470 <TIM_OC4_SetConfig+0x108>)
 8004404:	4293      	cmp	r3, r2
 8004406:	d007      	beq.n	8004418 <TIM_OC4_SetConfig+0xb0>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	4a1a      	ldr	r2, [pc, #104]	@ (8004474 <TIM_OC4_SetConfig+0x10c>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d003      	beq.n	8004418 <TIM_OC4_SetConfig+0xb0>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	4a19      	ldr	r2, [pc, #100]	@ (8004478 <TIM_OC4_SetConfig+0x110>)
 8004414:	4293      	cmp	r3, r2
 8004416:	d113      	bne.n	8004440 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004418:	693b      	ldr	r3, [r7, #16]
 800441a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800441e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8004420:	693b      	ldr	r3, [r7, #16]
 8004422:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004426:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	695b      	ldr	r3, [r3, #20]
 800442c:	019b      	lsls	r3, r3, #6
 800442e:	693a      	ldr	r2, [r7, #16]
 8004430:	4313      	orrs	r3, r2
 8004432:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	699b      	ldr	r3, [r3, #24]
 8004438:	019b      	lsls	r3, r3, #6
 800443a:	693a      	ldr	r2, [r7, #16]
 800443c:	4313      	orrs	r3, r2
 800443e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	693a      	ldr	r2, [r7, #16]
 8004444:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	68fa      	ldr	r2, [r7, #12]
 800444a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	685a      	ldr	r2, [r3, #4]
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	697a      	ldr	r2, [r7, #20]
 8004458:	621a      	str	r2, [r3, #32]
}
 800445a:	bf00      	nop
 800445c:	371c      	adds	r7, #28
 800445e:	46bd      	mov	sp, r7
 8004460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004464:	4770      	bx	lr
 8004466:	bf00      	nop
 8004468:	40012c00 	.word	0x40012c00
 800446c:	40013400 	.word	0x40013400
 8004470:	40014000 	.word	0x40014000
 8004474:	40014400 	.word	0x40014400
 8004478:	40014800 	.word	0x40014800

0800447c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800447c:	b480      	push	{r7}
 800447e:	b087      	sub	sp, #28
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
 8004484:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6a1b      	ldr	r3, [r3, #32]
 800448a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6a1b      	ldr	r3, [r3, #32]
 8004490:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80044a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80044aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80044ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	68fa      	ldr	r2, [r7, #12]
 80044b6:	4313      	orrs	r3, r2
 80044b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80044ba:	693b      	ldr	r3, [r7, #16]
 80044bc:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80044c0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	689b      	ldr	r3, [r3, #8]
 80044c6:	041b      	lsls	r3, r3, #16
 80044c8:	693a      	ldr	r2, [r7, #16]
 80044ca:	4313      	orrs	r3, r2
 80044cc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	4a17      	ldr	r2, [pc, #92]	@ (8004530 <TIM_OC5_SetConfig+0xb4>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d00f      	beq.n	80044f6 <TIM_OC5_SetConfig+0x7a>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	4a16      	ldr	r2, [pc, #88]	@ (8004534 <TIM_OC5_SetConfig+0xb8>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d00b      	beq.n	80044f6 <TIM_OC5_SetConfig+0x7a>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	4a15      	ldr	r2, [pc, #84]	@ (8004538 <TIM_OC5_SetConfig+0xbc>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d007      	beq.n	80044f6 <TIM_OC5_SetConfig+0x7a>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	4a14      	ldr	r2, [pc, #80]	@ (800453c <TIM_OC5_SetConfig+0xc0>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d003      	beq.n	80044f6 <TIM_OC5_SetConfig+0x7a>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	4a13      	ldr	r2, [pc, #76]	@ (8004540 <TIM_OC5_SetConfig+0xc4>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d109      	bne.n	800450a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80044f6:	697b      	ldr	r3, [r7, #20]
 80044f8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80044fc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	695b      	ldr	r3, [r3, #20]
 8004502:	021b      	lsls	r3, r3, #8
 8004504:	697a      	ldr	r2, [r7, #20]
 8004506:	4313      	orrs	r3, r2
 8004508:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	697a      	ldr	r2, [r7, #20]
 800450e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	68fa      	ldr	r2, [r7, #12]
 8004514:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	685a      	ldr	r2, [r3, #4]
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	693a      	ldr	r2, [r7, #16]
 8004522:	621a      	str	r2, [r3, #32]
}
 8004524:	bf00      	nop
 8004526:	371c      	adds	r7, #28
 8004528:	46bd      	mov	sp, r7
 800452a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452e:	4770      	bx	lr
 8004530:	40012c00 	.word	0x40012c00
 8004534:	40013400 	.word	0x40013400
 8004538:	40014000 	.word	0x40014000
 800453c:	40014400 	.word	0x40014400
 8004540:	40014800 	.word	0x40014800

08004544 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004544:	b480      	push	{r7}
 8004546:	b087      	sub	sp, #28
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
 800454c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6a1b      	ldr	r3, [r3, #32]
 8004552:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6a1b      	ldr	r3, [r3, #32]
 8004558:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800456a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004572:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004576:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	021b      	lsls	r3, r3, #8
 800457e:	68fa      	ldr	r2, [r7, #12]
 8004580:	4313      	orrs	r3, r2
 8004582:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004584:	693b      	ldr	r3, [r7, #16]
 8004586:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800458a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	689b      	ldr	r3, [r3, #8]
 8004590:	051b      	lsls	r3, r3, #20
 8004592:	693a      	ldr	r2, [r7, #16]
 8004594:	4313      	orrs	r3, r2
 8004596:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	4a18      	ldr	r2, [pc, #96]	@ (80045fc <TIM_OC6_SetConfig+0xb8>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d00f      	beq.n	80045c0 <TIM_OC6_SetConfig+0x7c>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	4a17      	ldr	r2, [pc, #92]	@ (8004600 <TIM_OC6_SetConfig+0xbc>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d00b      	beq.n	80045c0 <TIM_OC6_SetConfig+0x7c>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	4a16      	ldr	r2, [pc, #88]	@ (8004604 <TIM_OC6_SetConfig+0xc0>)
 80045ac:	4293      	cmp	r3, r2
 80045ae:	d007      	beq.n	80045c0 <TIM_OC6_SetConfig+0x7c>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	4a15      	ldr	r2, [pc, #84]	@ (8004608 <TIM_OC6_SetConfig+0xc4>)
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d003      	beq.n	80045c0 <TIM_OC6_SetConfig+0x7c>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	4a14      	ldr	r2, [pc, #80]	@ (800460c <TIM_OC6_SetConfig+0xc8>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d109      	bne.n	80045d4 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80045c0:	697b      	ldr	r3, [r7, #20]
 80045c2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80045c6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	695b      	ldr	r3, [r3, #20]
 80045cc:	029b      	lsls	r3, r3, #10
 80045ce:	697a      	ldr	r2, [r7, #20]
 80045d0:	4313      	orrs	r3, r2
 80045d2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	697a      	ldr	r2, [r7, #20]
 80045d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	68fa      	ldr	r2, [r7, #12]
 80045de:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	685a      	ldr	r2, [r3, #4]
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	693a      	ldr	r2, [r7, #16]
 80045ec:	621a      	str	r2, [r3, #32]
}
 80045ee:	bf00      	nop
 80045f0:	371c      	adds	r7, #28
 80045f2:	46bd      	mov	sp, r7
 80045f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f8:	4770      	bx	lr
 80045fa:	bf00      	nop
 80045fc:	40012c00 	.word	0x40012c00
 8004600:	40013400 	.word	0x40013400
 8004604:	40014000 	.word	0x40014000
 8004608:	40014400 	.word	0x40014400
 800460c:	40014800 	.word	0x40014800

08004610 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004610:	b480      	push	{r7}
 8004612:	b087      	sub	sp, #28
 8004614:	af00      	add	r7, sp, #0
 8004616:	60f8      	str	r0, [r7, #12]
 8004618:	60b9      	str	r1, [r7, #8]
 800461a:	607a      	str	r2, [r7, #4]
 800461c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	6a1b      	ldr	r3, [r3, #32]
 8004622:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	6a1b      	ldr	r3, [r3, #32]
 8004628:	f023 0201 	bic.w	r2, r3, #1
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	699b      	ldr	r3, [r3, #24]
 8004634:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	4a24      	ldr	r2, [pc, #144]	@ (80046cc <TIM_TI1_SetConfig+0xbc>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d013      	beq.n	8004666 <TIM_TI1_SetConfig+0x56>
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004644:	d00f      	beq.n	8004666 <TIM_TI1_SetConfig+0x56>
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	4a21      	ldr	r2, [pc, #132]	@ (80046d0 <TIM_TI1_SetConfig+0xc0>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d00b      	beq.n	8004666 <TIM_TI1_SetConfig+0x56>
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	4a20      	ldr	r2, [pc, #128]	@ (80046d4 <TIM_TI1_SetConfig+0xc4>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d007      	beq.n	8004666 <TIM_TI1_SetConfig+0x56>
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	4a1f      	ldr	r2, [pc, #124]	@ (80046d8 <TIM_TI1_SetConfig+0xc8>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d003      	beq.n	8004666 <TIM_TI1_SetConfig+0x56>
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	4a1e      	ldr	r2, [pc, #120]	@ (80046dc <TIM_TI1_SetConfig+0xcc>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d101      	bne.n	800466a <TIM_TI1_SetConfig+0x5a>
 8004666:	2301      	movs	r3, #1
 8004668:	e000      	b.n	800466c <TIM_TI1_SetConfig+0x5c>
 800466a:	2300      	movs	r3, #0
 800466c:	2b00      	cmp	r3, #0
 800466e:	d008      	beq.n	8004682 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004670:	697b      	ldr	r3, [r7, #20]
 8004672:	f023 0303 	bic.w	r3, r3, #3
 8004676:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004678:	697a      	ldr	r2, [r7, #20]
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	4313      	orrs	r3, r2
 800467e:	617b      	str	r3, [r7, #20]
 8004680:	e003      	b.n	800468a <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004682:	697b      	ldr	r3, [r7, #20]
 8004684:	f043 0301 	orr.w	r3, r3, #1
 8004688:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800468a:	697b      	ldr	r3, [r7, #20]
 800468c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004690:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	011b      	lsls	r3, r3, #4
 8004696:	b2db      	uxtb	r3, r3
 8004698:	697a      	ldr	r2, [r7, #20]
 800469a:	4313      	orrs	r3, r2
 800469c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800469e:	693b      	ldr	r3, [r7, #16]
 80046a0:	f023 030a 	bic.w	r3, r3, #10
 80046a4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80046a6:	68bb      	ldr	r3, [r7, #8]
 80046a8:	f003 030a 	and.w	r3, r3, #10
 80046ac:	693a      	ldr	r2, [r7, #16]
 80046ae:	4313      	orrs	r3, r2
 80046b0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	697a      	ldr	r2, [r7, #20]
 80046b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	693a      	ldr	r2, [r7, #16]
 80046bc:	621a      	str	r2, [r3, #32]
}
 80046be:	bf00      	nop
 80046c0:	371c      	adds	r7, #28
 80046c2:	46bd      	mov	sp, r7
 80046c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c8:	4770      	bx	lr
 80046ca:	bf00      	nop
 80046cc:	40012c00 	.word	0x40012c00
 80046d0:	40000400 	.word	0x40000400
 80046d4:	40000800 	.word	0x40000800
 80046d8:	40013400 	.word	0x40013400
 80046dc:	40014000 	.word	0x40014000

080046e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80046e0:	b480      	push	{r7}
 80046e2:	b087      	sub	sp, #28
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	60f8      	str	r0, [r7, #12]
 80046e8:	60b9      	str	r1, [r7, #8]
 80046ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	6a1b      	ldr	r3, [r3, #32]
 80046f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	6a1b      	ldr	r3, [r3, #32]
 80046f6:	f023 0201 	bic.w	r2, r3, #1
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	699b      	ldr	r3, [r3, #24]
 8004702:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004704:	693b      	ldr	r3, [r7, #16]
 8004706:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800470a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	011b      	lsls	r3, r3, #4
 8004710:	693a      	ldr	r2, [r7, #16]
 8004712:	4313      	orrs	r3, r2
 8004714:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004716:	697b      	ldr	r3, [r7, #20]
 8004718:	f023 030a 	bic.w	r3, r3, #10
 800471c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800471e:	697a      	ldr	r2, [r7, #20]
 8004720:	68bb      	ldr	r3, [r7, #8]
 8004722:	4313      	orrs	r3, r2
 8004724:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	693a      	ldr	r2, [r7, #16]
 800472a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	697a      	ldr	r2, [r7, #20]
 8004730:	621a      	str	r2, [r3, #32]
}
 8004732:	bf00      	nop
 8004734:	371c      	adds	r7, #28
 8004736:	46bd      	mov	sp, r7
 8004738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473c:	4770      	bx	lr

0800473e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800473e:	b480      	push	{r7}
 8004740:	b087      	sub	sp, #28
 8004742:	af00      	add	r7, sp, #0
 8004744:	60f8      	str	r0, [r7, #12]
 8004746:	60b9      	str	r1, [r7, #8]
 8004748:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	6a1b      	ldr	r3, [r3, #32]
 800474e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	6a1b      	ldr	r3, [r3, #32]
 8004754:	f023 0210 	bic.w	r2, r3, #16
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	699b      	ldr	r3, [r3, #24]
 8004760:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004762:	693b      	ldr	r3, [r7, #16]
 8004764:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004768:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	031b      	lsls	r3, r3, #12
 800476e:	693a      	ldr	r2, [r7, #16]
 8004770:	4313      	orrs	r3, r2
 8004772:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004774:	697b      	ldr	r3, [r7, #20]
 8004776:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800477a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	011b      	lsls	r3, r3, #4
 8004780:	697a      	ldr	r2, [r7, #20]
 8004782:	4313      	orrs	r3, r2
 8004784:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	693a      	ldr	r2, [r7, #16]
 800478a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	697a      	ldr	r2, [r7, #20]
 8004790:	621a      	str	r2, [r3, #32]
}
 8004792:	bf00      	nop
 8004794:	371c      	adds	r7, #28
 8004796:	46bd      	mov	sp, r7
 8004798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479c:	4770      	bx	lr

0800479e <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800479e:	b480      	push	{r7}
 80047a0:	b085      	sub	sp, #20
 80047a2:	af00      	add	r7, sp, #0
 80047a4:	6078      	str	r0, [r7, #4]
 80047a6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	689b      	ldr	r3, [r3, #8]
 80047ac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80047b4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80047b8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80047ba:	683a      	ldr	r2, [r7, #0]
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	4313      	orrs	r3, r2
 80047c0:	f043 0307 	orr.w	r3, r3, #7
 80047c4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	68fa      	ldr	r2, [r7, #12]
 80047ca:	609a      	str	r2, [r3, #8]
}
 80047cc:	bf00      	nop
 80047ce:	3714      	adds	r7, #20
 80047d0:	46bd      	mov	sp, r7
 80047d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d6:	4770      	bx	lr

080047d8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80047d8:	b480      	push	{r7}
 80047da:	b087      	sub	sp, #28
 80047dc:	af00      	add	r7, sp, #0
 80047de:	60f8      	str	r0, [r7, #12]
 80047e0:	60b9      	str	r1, [r7, #8]
 80047e2:	607a      	str	r2, [r7, #4]
 80047e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	689b      	ldr	r3, [r3, #8]
 80047ea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80047ec:	697b      	ldr	r3, [r7, #20]
 80047ee:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80047f2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	021a      	lsls	r2, r3, #8
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	431a      	orrs	r2, r3
 80047fc:	68bb      	ldr	r3, [r7, #8]
 80047fe:	4313      	orrs	r3, r2
 8004800:	697a      	ldr	r2, [r7, #20]
 8004802:	4313      	orrs	r3, r2
 8004804:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	697a      	ldr	r2, [r7, #20]
 800480a:	609a      	str	r2, [r3, #8]
}
 800480c:	bf00      	nop
 800480e:	371c      	adds	r7, #28
 8004810:	46bd      	mov	sp, r7
 8004812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004816:	4770      	bx	lr

08004818 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004818:	b480      	push	{r7}
 800481a:	b087      	sub	sp, #28
 800481c:	af00      	add	r7, sp, #0
 800481e:	60f8      	str	r0, [r7, #12]
 8004820:	60b9      	str	r1, [r7, #8]
 8004822:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004824:	68bb      	ldr	r3, [r7, #8]
 8004826:	f003 031f 	and.w	r3, r3, #31
 800482a:	2201      	movs	r2, #1
 800482c:	fa02 f303 	lsl.w	r3, r2, r3
 8004830:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	6a1a      	ldr	r2, [r3, #32]
 8004836:	697b      	ldr	r3, [r7, #20]
 8004838:	43db      	mvns	r3, r3
 800483a:	401a      	ands	r2, r3
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	6a1a      	ldr	r2, [r3, #32]
 8004844:	68bb      	ldr	r3, [r7, #8]
 8004846:	f003 031f 	and.w	r3, r3, #31
 800484a:	6879      	ldr	r1, [r7, #4]
 800484c:	fa01 f303 	lsl.w	r3, r1, r3
 8004850:	431a      	orrs	r2, r3
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	621a      	str	r2, [r3, #32]
}
 8004856:	bf00      	nop
 8004858:	371c      	adds	r7, #28
 800485a:	46bd      	mov	sp, r7
 800485c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004860:	4770      	bx	lr

08004862 <HAL_TIMEx_HallSensor_Init>:
  * @param  htim TIM Hall Sensor Interface handle
  * @param  sConfig TIM Hall Sensor configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Init(TIM_HandleTypeDef *htim, const TIM_HallSensor_InitTypeDef *sConfig)
{
 8004862:	b580      	push	{r7, lr}
 8004864:	b08a      	sub	sp, #40	@ 0x28
 8004866:	af00      	add	r7, sp, #0
 8004868:	6078      	str	r0, [r7, #4]
 800486a:	6039      	str	r1, [r7, #0]
  TIM_OC_InitTypeDef OC_Config;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d101      	bne.n	8004876 <HAL_TIMEx_HallSensor_Init+0x14>
  {
    return HAL_ERROR;
 8004872:	2301      	movs	r3, #1
 8004874:	e0a0      	b.n	80049b8 <HAL_TIMEx_HallSensor_Init+0x156>
  assert_param(IS_TIM_IC_POLARITY(sConfig->IC1Polarity));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800487c:	b2db      	uxtb	r3, r3
 800487e:	2b00      	cmp	r3, #0
 8004880:	d106      	bne.n	8004890 <HAL_TIMEx_HallSensor_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2200      	movs	r2, #0
 8004886:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->HallSensor_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIMEx_HallSensor_MspInit(htim);
 800488a:	6878      	ldr	r0, [r7, #4]
 800488c:	f7fc ff8e 	bl	80017ac <HAL_TIMEx_HallSensor_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2202      	movs	r2, #2
 8004894:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681a      	ldr	r2, [r3, #0]
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	3304      	adds	r3, #4
 80048a0:	4619      	mov	r1, r3
 80048a2:	4610      	mov	r0, r2
 80048a4:	f7ff fb22 	bl	8003eec <TIM_Base_SetConfig>

  /* Configure the Channel 1 as Input Channel to interface with the three Outputs of the  Hall sensor */
  TIM_TI1_SetConfig(htim->Instance, sConfig->IC1Polarity, TIM_ICSELECTION_TRC, sConfig->IC1Filter);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6818      	ldr	r0, [r3, #0]
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	6819      	ldr	r1, [r3, #0]
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	689b      	ldr	r3, [r3, #8]
 80048b4:	2203      	movs	r2, #3
 80048b6:	f7ff feab 	bl	8004610 <TIM_TI1_SetConfig>

  /* Reset the IC1PSC Bits */
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	699a      	ldr	r2, [r3, #24]
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f022 020c 	bic.w	r2, r2, #12
 80048c8:	619a      	str	r2, [r3, #24]
  /* Set the IC1PSC value */
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	6999      	ldr	r1, [r3, #24]
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	685a      	ldr	r2, [r3, #4]
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	430a      	orrs	r2, r1
 80048da:	619a      	str	r2, [r3, #24]

  /* Enable the Hall sensor interface (XOR function of the three inputs) */
  htim->Instance->CR2 |= TIM_CR2_TI1S;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	685a      	ldr	r2, [r3, #4]
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80048ea:	605a      	str	r2, [r3, #4]

  /* Select the TIM_TS_TI1F_ED signal as Input trigger for the TIM */
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	689b      	ldr	r3, [r3, #8]
 80048f2:	687a      	ldr	r2, [r7, #4]
 80048f4:	6812      	ldr	r2, [r2, #0]
 80048f6:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80048fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80048fe:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_TS_TI1F_ED;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	689a      	ldr	r2, [r3, #8]
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800490e:	609a      	str	r2, [r3, #8]

  /* Use the TIM_TS_TI1F_ED signal to reset the TIM counter each edge detection */
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	689b      	ldr	r3, [r3, #8]
 8004916:	687a      	ldr	r2, [r7, #4]
 8004918:	6812      	ldr	r2, [r2, #0]
 800491a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800491e:	f023 0307 	bic.w	r3, r3, #7
 8004922:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_SLAVEMODE_RESET;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	689a      	ldr	r2, [r3, #8]
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f042 0204 	orr.w	r2, r2, #4
 8004932:	609a      	str	r2, [r3, #8]

  /* Program channel 2 in PWM 2 mode with the desired Commutation_Delay*/
  OC_Config.OCFastMode = TIM_OCFAST_DISABLE;
 8004934:	2300      	movs	r3, #0
 8004936:	61fb      	str	r3, [r7, #28]
  OC_Config.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004938:	2300      	movs	r3, #0
 800493a:	623b      	str	r3, [r7, #32]
  OC_Config.OCMode = TIM_OCMODE_PWM2;
 800493c:	2370      	movs	r3, #112	@ 0x70
 800493e:	60fb      	str	r3, [r7, #12]
  OC_Config.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004940:	2300      	movs	r3, #0
 8004942:	627b      	str	r3, [r7, #36]	@ 0x24
  OC_Config.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004944:	2300      	movs	r3, #0
 8004946:	61bb      	str	r3, [r7, #24]
  OC_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004948:	2300      	movs	r3, #0
 800494a:	617b      	str	r3, [r7, #20]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	68db      	ldr	r3, [r3, #12]
 8004950:	613b      	str	r3, [r7, #16]

  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f107 020c 	add.w	r2, r7, #12
 800495a:	4611      	mov	r1, r2
 800495c:	4618      	mov	r0, r3
 800495e:	f7ff fbf1 	bl	8004144 <TIM_OC2_SetConfig>

  /* Select OC2REF as trigger output on TRGO: write the MMS bits in the TIMx_CR2
    register to 101 */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	685b      	ldr	r3, [r3, #4]
 8004968:	687a      	ldr	r2, [r7, #4]
 800496a:	6812      	ldr	r2, [r2, #0]
 800496c:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8004970:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004974:	6053      	str	r3, [r2, #4]
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	685a      	ldr	r2, [r3, #4]
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f042 0250 	orr.w	r2, r2, #80	@ 0x50
 8004984:	605a      	str	r2, [r3, #4]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2201      	movs	r2, #1
 800498a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2201      	movs	r2, #1
 8004992:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2201      	movs	r2, #1
 800499a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2201      	movs	r2, #1
 80049a2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2201      	movs	r2, #1
 80049aa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2201      	movs	r2, #1
 80049b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80049b6:	2300      	movs	r3, #0
}
 80049b8:	4618      	mov	r0, r3
 80049ba:	3728      	adds	r7, #40	@ 0x28
 80049bc:	46bd      	mov	sp, r7
 80049be:	bd80      	pop	{r7, pc}

080049c0 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b084      	sub	sp, #16
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
 80049c8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d109      	bne.n	80049e4 <HAL_TIMEx_PWMN_Start+0x24>
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80049d6:	b2db      	uxtb	r3, r3
 80049d8:	2b01      	cmp	r3, #1
 80049da:	bf14      	ite	ne
 80049dc:	2301      	movne	r3, #1
 80049de:	2300      	moveq	r3, #0
 80049e0:	b2db      	uxtb	r3, r3
 80049e2:	e022      	b.n	8004a2a <HAL_TIMEx_PWMN_Start+0x6a>
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	2b04      	cmp	r3, #4
 80049e8:	d109      	bne.n	80049fe <HAL_TIMEx_PWMN_Start+0x3e>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80049f0:	b2db      	uxtb	r3, r3
 80049f2:	2b01      	cmp	r3, #1
 80049f4:	bf14      	ite	ne
 80049f6:	2301      	movne	r3, #1
 80049f8:	2300      	moveq	r3, #0
 80049fa:	b2db      	uxtb	r3, r3
 80049fc:	e015      	b.n	8004a2a <HAL_TIMEx_PWMN_Start+0x6a>
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	2b08      	cmp	r3, #8
 8004a02:	d109      	bne.n	8004a18 <HAL_TIMEx_PWMN_Start+0x58>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8004a0a:	b2db      	uxtb	r3, r3
 8004a0c:	2b01      	cmp	r3, #1
 8004a0e:	bf14      	ite	ne
 8004a10:	2301      	movne	r3, #1
 8004a12:	2300      	moveq	r3, #0
 8004a14:	b2db      	uxtb	r3, r3
 8004a16:	e008      	b.n	8004a2a <HAL_TIMEx_PWMN_Start+0x6a>
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8004a1e:	b2db      	uxtb	r3, r3
 8004a20:	2b01      	cmp	r3, #1
 8004a22:	bf14      	ite	ne
 8004a24:	2301      	movne	r3, #1
 8004a26:	2300      	moveq	r3, #0
 8004a28:	b2db      	uxtb	r3, r3
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d001      	beq.n	8004a32 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8004a2e:	2301      	movs	r3, #1
 8004a30:	e069      	b.n	8004b06 <HAL_TIMEx_PWMN_Start+0x146>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d104      	bne.n	8004a42 <HAL_TIMEx_PWMN_Start+0x82>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2202      	movs	r2, #2
 8004a3c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004a40:	e013      	b.n	8004a6a <HAL_TIMEx_PWMN_Start+0xaa>
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	2b04      	cmp	r3, #4
 8004a46:	d104      	bne.n	8004a52 <HAL_TIMEx_PWMN_Start+0x92>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2202      	movs	r2, #2
 8004a4c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004a50:	e00b      	b.n	8004a6a <HAL_TIMEx_PWMN_Start+0xaa>
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	2b08      	cmp	r3, #8
 8004a56:	d104      	bne.n	8004a62 <HAL_TIMEx_PWMN_Start+0xa2>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2202      	movs	r2, #2
 8004a5c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004a60:	e003      	b.n	8004a6a <HAL_TIMEx_PWMN_Start+0xaa>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2202      	movs	r2, #2
 8004a66:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	2204      	movs	r2, #4
 8004a70:	6839      	ldr	r1, [r7, #0]
 8004a72:	4618      	mov	r0, r3
 8004a74:	f000 f966 	bl	8004d44 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004a86:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4a20      	ldr	r2, [pc, #128]	@ (8004b10 <HAL_TIMEx_PWMN_Start+0x150>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d018      	beq.n	8004ac4 <HAL_TIMEx_PWMN_Start+0x104>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a9a:	d013      	beq.n	8004ac4 <HAL_TIMEx_PWMN_Start+0x104>
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4a1c      	ldr	r2, [pc, #112]	@ (8004b14 <HAL_TIMEx_PWMN_Start+0x154>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d00e      	beq.n	8004ac4 <HAL_TIMEx_PWMN_Start+0x104>
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	4a1b      	ldr	r2, [pc, #108]	@ (8004b18 <HAL_TIMEx_PWMN_Start+0x158>)
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d009      	beq.n	8004ac4 <HAL_TIMEx_PWMN_Start+0x104>
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	4a19      	ldr	r2, [pc, #100]	@ (8004b1c <HAL_TIMEx_PWMN_Start+0x15c>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d004      	beq.n	8004ac4 <HAL_TIMEx_PWMN_Start+0x104>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	4a18      	ldr	r2, [pc, #96]	@ (8004b20 <HAL_TIMEx_PWMN_Start+0x160>)
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d115      	bne.n	8004af0 <HAL_TIMEx_PWMN_Start+0x130>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	689a      	ldr	r2, [r3, #8]
 8004aca:	4b16      	ldr	r3, [pc, #88]	@ (8004b24 <HAL_TIMEx_PWMN_Start+0x164>)
 8004acc:	4013      	ands	r3, r2
 8004ace:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	2b06      	cmp	r3, #6
 8004ad4:	d015      	beq.n	8004b02 <HAL_TIMEx_PWMN_Start+0x142>
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004adc:	d011      	beq.n	8004b02 <HAL_TIMEx_PWMN_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	681a      	ldr	r2, [r3, #0]
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f042 0201 	orr.w	r2, r2, #1
 8004aec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004aee:	e008      	b.n	8004b02 <HAL_TIMEx_PWMN_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	681a      	ldr	r2, [r3, #0]
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f042 0201 	orr.w	r2, r2, #1
 8004afe:	601a      	str	r2, [r3, #0]
 8004b00:	e000      	b.n	8004b04 <HAL_TIMEx_PWMN_Start+0x144>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b02:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004b04:	2300      	movs	r3, #0
}
 8004b06:	4618      	mov	r0, r3
 8004b08:	3710      	adds	r7, #16
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bd80      	pop	{r7, pc}
 8004b0e:	bf00      	nop
 8004b10:	40012c00 	.word	0x40012c00
 8004b14:	40000400 	.word	0x40000400
 8004b18:	40000800 	.word	0x40000800
 8004b1c:	40013400 	.word	0x40013400
 8004b20:	40014000 	.word	0x40014000
 8004b24:	00010007 	.word	0x00010007

08004b28 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004b28:	b480      	push	{r7}
 8004b2a:	b085      	sub	sp, #20
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
 8004b30:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004b38:	2b01      	cmp	r3, #1
 8004b3a:	d101      	bne.n	8004b40 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004b3c:	2302      	movs	r3, #2
 8004b3e:	e065      	b.n	8004c0c <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2201      	movs	r2, #1
 8004b44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2202      	movs	r2, #2
 8004b4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	685b      	ldr	r3, [r3, #4]
 8004b56:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	689b      	ldr	r3, [r3, #8]
 8004b5e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	4a2c      	ldr	r2, [pc, #176]	@ (8004c18 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d004      	beq.n	8004b74 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	4a2b      	ldr	r2, [pc, #172]	@ (8004c1c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004b70:	4293      	cmp	r3, r2
 8004b72:	d108      	bne.n	8004b86 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004b7a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	685b      	ldr	r3, [r3, #4]
 8004b80:	68fa      	ldr	r2, [r7, #12]
 8004b82:	4313      	orrs	r3, r2
 8004b84:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8004b8c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b90:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	68fa      	ldr	r2, [r7, #12]
 8004b98:	4313      	orrs	r3, r2
 8004b9a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	68fa      	ldr	r2, [r7, #12]
 8004ba2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	4a1b      	ldr	r2, [pc, #108]	@ (8004c18 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d018      	beq.n	8004be0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004bb6:	d013      	beq.n	8004be0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	4a18      	ldr	r2, [pc, #96]	@ (8004c20 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d00e      	beq.n	8004be0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	4a17      	ldr	r2, [pc, #92]	@ (8004c24 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	d009      	beq.n	8004be0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4a12      	ldr	r2, [pc, #72]	@ (8004c1c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d004      	beq.n	8004be0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4a13      	ldr	r2, [pc, #76]	@ (8004c28 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d10c      	bne.n	8004bfa <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004be6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	689b      	ldr	r3, [r3, #8]
 8004bec:	68ba      	ldr	r2, [r7, #8]
 8004bee:	4313      	orrs	r3, r2
 8004bf0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	68ba      	ldr	r2, [r7, #8]
 8004bf8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2201      	movs	r2, #1
 8004bfe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2200      	movs	r2, #0
 8004c06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004c0a:	2300      	movs	r3, #0
}
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	3714      	adds	r7, #20
 8004c10:	46bd      	mov	sp, r7
 8004c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c16:	4770      	bx	lr
 8004c18:	40012c00 	.word	0x40012c00
 8004c1c:	40013400 	.word	0x40013400
 8004c20:	40000400 	.word	0x40000400
 8004c24:	40000800 	.word	0x40000800
 8004c28:	40014000 	.word	0x40014000

08004c2c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004c2c:	b480      	push	{r7}
 8004c2e:	b085      	sub	sp, #20
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
 8004c34:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004c36:	2300      	movs	r3, #0
 8004c38:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004c40:	2b01      	cmp	r3, #1
 8004c42:	d101      	bne.n	8004c48 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004c44:	2302      	movs	r3, #2
 8004c46:	e073      	b.n	8004d30 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2201      	movs	r2, #1
 8004c4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	68db      	ldr	r3, [r3, #12]
 8004c5a:	4313      	orrs	r3, r2
 8004c5c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	689b      	ldr	r3, [r3, #8]
 8004c68:	4313      	orrs	r3, r2
 8004c6a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	685b      	ldr	r3, [r3, #4]
 8004c76:	4313      	orrs	r3, r2
 8004c78:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4313      	orrs	r3, r2
 8004c86:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	691b      	ldr	r3, [r3, #16]
 8004c92:	4313      	orrs	r3, r2
 8004c94:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	695b      	ldr	r3, [r3, #20]
 8004ca0:	4313      	orrs	r3, r2
 8004ca2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cae:	4313      	orrs	r3, r2
 8004cb0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	699b      	ldr	r3, [r3, #24]
 8004cbc:	041b      	lsls	r3, r3, #16
 8004cbe:	4313      	orrs	r3, r2
 8004cc0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	69db      	ldr	r3, [r3, #28]
 8004ccc:	4313      	orrs	r3, r2
 8004cce:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	4a19      	ldr	r2, [pc, #100]	@ (8004d3c <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d004      	beq.n	8004ce4 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4a18      	ldr	r2, [pc, #96]	@ (8004d40 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d11c      	bne.n	8004d1e <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cee:	051b      	lsls	r3, r3, #20
 8004cf0:	4313      	orrs	r3, r2
 8004cf2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	6a1b      	ldr	r3, [r3, #32]
 8004cfe:	4313      	orrs	r3, r2
 8004d00:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d0c:	4313      	orrs	r3, r2
 8004d0e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d1a:	4313      	orrs	r3, r2
 8004d1c:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	68fa      	ldr	r2, [r7, #12]
 8004d24:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2200      	movs	r2, #0
 8004d2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004d2e:	2300      	movs	r3, #0
}
 8004d30:	4618      	mov	r0, r3
 8004d32:	3714      	adds	r7, #20
 8004d34:	46bd      	mov	sp, r7
 8004d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3a:	4770      	bx	lr
 8004d3c:	40012c00 	.word	0x40012c00
 8004d40:	40013400 	.word	0x40013400

08004d44 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8004d44:	b480      	push	{r7}
 8004d46:	b087      	sub	sp, #28
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	60f8      	str	r0, [r7, #12]
 8004d4c:	60b9      	str	r1, [r7, #8]
 8004d4e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 8004d50:	68bb      	ldr	r3, [r7, #8]
 8004d52:	f003 030f 	and.w	r3, r3, #15
 8004d56:	2204      	movs	r2, #4
 8004d58:	fa02 f303 	lsl.w	r3, r2, r3
 8004d5c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	6a1a      	ldr	r2, [r3, #32]
 8004d62:	697b      	ldr	r3, [r7, #20]
 8004d64:	43db      	mvns	r3, r3
 8004d66:	401a      	ands	r2, r3
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	6a1a      	ldr	r2, [r3, #32]
 8004d70:	68bb      	ldr	r3, [r7, #8]
 8004d72:	f003 030f 	and.w	r3, r3, #15
 8004d76:	6879      	ldr	r1, [r7, #4]
 8004d78:	fa01 f303 	lsl.w	r3, r1, r3
 8004d7c:	431a      	orrs	r2, r3
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	621a      	str	r2, [r3, #32]
}
 8004d82:	bf00      	nop
 8004d84:	371c      	adds	r7, #28
 8004d86:	46bd      	mov	sp, r7
 8004d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8c:	4770      	bx	lr

08004d8e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004d8e:	b580      	push	{r7, lr}
 8004d90:	b082      	sub	sp, #8
 8004d92:	af00      	add	r7, sp, #0
 8004d94:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d101      	bne.n	8004da0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	e042      	b.n	8004e26 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d106      	bne.n	8004db8 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2200      	movs	r2, #0
 8004dae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004db2:	6878      	ldr	r0, [r7, #4]
 8004db4:	f7fc feac 	bl	8001b10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2224      	movs	r2, #36	@ 0x24
 8004dbc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	681a      	ldr	r2, [r3, #0]
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f022 0201 	bic.w	r2, r2, #1
 8004dce:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d002      	beq.n	8004dde <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004dd8:	6878      	ldr	r0, [r7, #4]
 8004dda:	f000 faf5 	bl	80053c8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004dde:	6878      	ldr	r0, [r7, #4]
 8004de0:	f000 f826 	bl	8004e30 <UART_SetConfig>
 8004de4:	4603      	mov	r3, r0
 8004de6:	2b01      	cmp	r3, #1
 8004de8:	d101      	bne.n	8004dee <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004dea:	2301      	movs	r3, #1
 8004dec:	e01b      	b.n	8004e26 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	685a      	ldr	r2, [r3, #4]
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004dfc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	689a      	ldr	r2, [r3, #8]
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004e0c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	681a      	ldr	r2, [r3, #0]
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f042 0201 	orr.w	r2, r2, #1
 8004e1c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004e1e:	6878      	ldr	r0, [r7, #4]
 8004e20:	f000 fb74 	bl	800550c <UART_CheckIdleState>
 8004e24:	4603      	mov	r3, r0
}
 8004e26:	4618      	mov	r0, r3
 8004e28:	3708      	adds	r7, #8
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	bd80      	pop	{r7, pc}
	...

08004e30 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e34:	b08c      	sub	sp, #48	@ 0x30
 8004e36:	af00      	add	r7, sp, #0
 8004e38:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004e40:	697b      	ldr	r3, [r7, #20]
 8004e42:	689a      	ldr	r2, [r3, #8]
 8004e44:	697b      	ldr	r3, [r7, #20]
 8004e46:	691b      	ldr	r3, [r3, #16]
 8004e48:	431a      	orrs	r2, r3
 8004e4a:	697b      	ldr	r3, [r7, #20]
 8004e4c:	695b      	ldr	r3, [r3, #20]
 8004e4e:	431a      	orrs	r2, r3
 8004e50:	697b      	ldr	r3, [r7, #20]
 8004e52:	69db      	ldr	r3, [r3, #28]
 8004e54:	4313      	orrs	r3, r2
 8004e56:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004e58:	697b      	ldr	r3, [r7, #20]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	681a      	ldr	r2, [r3, #0]
 8004e5e:	4bab      	ldr	r3, [pc, #684]	@ (800510c <UART_SetConfig+0x2dc>)
 8004e60:	4013      	ands	r3, r2
 8004e62:	697a      	ldr	r2, [r7, #20]
 8004e64:	6812      	ldr	r2, [r2, #0]
 8004e66:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004e68:	430b      	orrs	r3, r1
 8004e6a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e6c:	697b      	ldr	r3, [r7, #20]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	685b      	ldr	r3, [r3, #4]
 8004e72:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004e76:	697b      	ldr	r3, [r7, #20]
 8004e78:	68da      	ldr	r2, [r3, #12]
 8004e7a:	697b      	ldr	r3, [r7, #20]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	430a      	orrs	r2, r1
 8004e80:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004e82:	697b      	ldr	r3, [r7, #20]
 8004e84:	699b      	ldr	r3, [r3, #24]
 8004e86:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004e88:	697b      	ldr	r3, [r7, #20]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	4aa0      	ldr	r2, [pc, #640]	@ (8005110 <UART_SetConfig+0x2e0>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d004      	beq.n	8004e9c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004e92:	697b      	ldr	r3, [r7, #20]
 8004e94:	6a1b      	ldr	r3, [r3, #32]
 8004e96:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004e98:	4313      	orrs	r3, r2
 8004e9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004e9c:	697b      	ldr	r3, [r7, #20]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	689b      	ldr	r3, [r3, #8]
 8004ea2:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8004ea6:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8004eaa:	697a      	ldr	r2, [r7, #20]
 8004eac:	6812      	ldr	r2, [r2, #0]
 8004eae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004eb0:	430b      	orrs	r3, r1
 8004eb2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004eb4:	697b      	ldr	r3, [r7, #20]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004eba:	f023 010f 	bic.w	r1, r3, #15
 8004ebe:	697b      	ldr	r3, [r7, #20]
 8004ec0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004ec2:	697b      	ldr	r3, [r7, #20]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	430a      	orrs	r2, r1
 8004ec8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004eca:	697b      	ldr	r3, [r7, #20]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4a91      	ldr	r2, [pc, #580]	@ (8005114 <UART_SetConfig+0x2e4>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d125      	bne.n	8004f20 <UART_SetConfig+0xf0>
 8004ed4:	4b90      	ldr	r3, [pc, #576]	@ (8005118 <UART_SetConfig+0x2e8>)
 8004ed6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004eda:	f003 0303 	and.w	r3, r3, #3
 8004ede:	2b03      	cmp	r3, #3
 8004ee0:	d81a      	bhi.n	8004f18 <UART_SetConfig+0xe8>
 8004ee2:	a201      	add	r2, pc, #4	@ (adr r2, 8004ee8 <UART_SetConfig+0xb8>)
 8004ee4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ee8:	08004ef9 	.word	0x08004ef9
 8004eec:	08004f09 	.word	0x08004f09
 8004ef0:	08004f01 	.word	0x08004f01
 8004ef4:	08004f11 	.word	0x08004f11
 8004ef8:	2301      	movs	r3, #1
 8004efa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004efe:	e0d6      	b.n	80050ae <UART_SetConfig+0x27e>
 8004f00:	2302      	movs	r3, #2
 8004f02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f06:	e0d2      	b.n	80050ae <UART_SetConfig+0x27e>
 8004f08:	2304      	movs	r3, #4
 8004f0a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f0e:	e0ce      	b.n	80050ae <UART_SetConfig+0x27e>
 8004f10:	2308      	movs	r3, #8
 8004f12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f16:	e0ca      	b.n	80050ae <UART_SetConfig+0x27e>
 8004f18:	2310      	movs	r3, #16
 8004f1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f1e:	e0c6      	b.n	80050ae <UART_SetConfig+0x27e>
 8004f20:	697b      	ldr	r3, [r7, #20]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	4a7d      	ldr	r2, [pc, #500]	@ (800511c <UART_SetConfig+0x2ec>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d138      	bne.n	8004f9c <UART_SetConfig+0x16c>
 8004f2a:	4b7b      	ldr	r3, [pc, #492]	@ (8005118 <UART_SetConfig+0x2e8>)
 8004f2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f30:	f003 030c 	and.w	r3, r3, #12
 8004f34:	2b0c      	cmp	r3, #12
 8004f36:	d82d      	bhi.n	8004f94 <UART_SetConfig+0x164>
 8004f38:	a201      	add	r2, pc, #4	@ (adr r2, 8004f40 <UART_SetConfig+0x110>)
 8004f3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f3e:	bf00      	nop
 8004f40:	08004f75 	.word	0x08004f75
 8004f44:	08004f95 	.word	0x08004f95
 8004f48:	08004f95 	.word	0x08004f95
 8004f4c:	08004f95 	.word	0x08004f95
 8004f50:	08004f85 	.word	0x08004f85
 8004f54:	08004f95 	.word	0x08004f95
 8004f58:	08004f95 	.word	0x08004f95
 8004f5c:	08004f95 	.word	0x08004f95
 8004f60:	08004f7d 	.word	0x08004f7d
 8004f64:	08004f95 	.word	0x08004f95
 8004f68:	08004f95 	.word	0x08004f95
 8004f6c:	08004f95 	.word	0x08004f95
 8004f70:	08004f8d 	.word	0x08004f8d
 8004f74:	2300      	movs	r3, #0
 8004f76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f7a:	e098      	b.n	80050ae <UART_SetConfig+0x27e>
 8004f7c:	2302      	movs	r3, #2
 8004f7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f82:	e094      	b.n	80050ae <UART_SetConfig+0x27e>
 8004f84:	2304      	movs	r3, #4
 8004f86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f8a:	e090      	b.n	80050ae <UART_SetConfig+0x27e>
 8004f8c:	2308      	movs	r3, #8
 8004f8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f92:	e08c      	b.n	80050ae <UART_SetConfig+0x27e>
 8004f94:	2310      	movs	r3, #16
 8004f96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f9a:	e088      	b.n	80050ae <UART_SetConfig+0x27e>
 8004f9c:	697b      	ldr	r3, [r7, #20]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	4a5f      	ldr	r2, [pc, #380]	@ (8005120 <UART_SetConfig+0x2f0>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d125      	bne.n	8004ff2 <UART_SetConfig+0x1c2>
 8004fa6:	4b5c      	ldr	r3, [pc, #368]	@ (8005118 <UART_SetConfig+0x2e8>)
 8004fa8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fac:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004fb0:	2b30      	cmp	r3, #48	@ 0x30
 8004fb2:	d016      	beq.n	8004fe2 <UART_SetConfig+0x1b2>
 8004fb4:	2b30      	cmp	r3, #48	@ 0x30
 8004fb6:	d818      	bhi.n	8004fea <UART_SetConfig+0x1ba>
 8004fb8:	2b20      	cmp	r3, #32
 8004fba:	d00a      	beq.n	8004fd2 <UART_SetConfig+0x1a2>
 8004fbc:	2b20      	cmp	r3, #32
 8004fbe:	d814      	bhi.n	8004fea <UART_SetConfig+0x1ba>
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d002      	beq.n	8004fca <UART_SetConfig+0x19a>
 8004fc4:	2b10      	cmp	r3, #16
 8004fc6:	d008      	beq.n	8004fda <UART_SetConfig+0x1aa>
 8004fc8:	e00f      	b.n	8004fea <UART_SetConfig+0x1ba>
 8004fca:	2300      	movs	r3, #0
 8004fcc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004fd0:	e06d      	b.n	80050ae <UART_SetConfig+0x27e>
 8004fd2:	2302      	movs	r3, #2
 8004fd4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004fd8:	e069      	b.n	80050ae <UART_SetConfig+0x27e>
 8004fda:	2304      	movs	r3, #4
 8004fdc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004fe0:	e065      	b.n	80050ae <UART_SetConfig+0x27e>
 8004fe2:	2308      	movs	r3, #8
 8004fe4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004fe8:	e061      	b.n	80050ae <UART_SetConfig+0x27e>
 8004fea:	2310      	movs	r3, #16
 8004fec:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004ff0:	e05d      	b.n	80050ae <UART_SetConfig+0x27e>
 8004ff2:	697b      	ldr	r3, [r7, #20]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	4a4b      	ldr	r2, [pc, #300]	@ (8005124 <UART_SetConfig+0x2f4>)
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d125      	bne.n	8005048 <UART_SetConfig+0x218>
 8004ffc:	4b46      	ldr	r3, [pc, #280]	@ (8005118 <UART_SetConfig+0x2e8>)
 8004ffe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005002:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005006:	2bc0      	cmp	r3, #192	@ 0xc0
 8005008:	d016      	beq.n	8005038 <UART_SetConfig+0x208>
 800500a:	2bc0      	cmp	r3, #192	@ 0xc0
 800500c:	d818      	bhi.n	8005040 <UART_SetConfig+0x210>
 800500e:	2b80      	cmp	r3, #128	@ 0x80
 8005010:	d00a      	beq.n	8005028 <UART_SetConfig+0x1f8>
 8005012:	2b80      	cmp	r3, #128	@ 0x80
 8005014:	d814      	bhi.n	8005040 <UART_SetConfig+0x210>
 8005016:	2b00      	cmp	r3, #0
 8005018:	d002      	beq.n	8005020 <UART_SetConfig+0x1f0>
 800501a:	2b40      	cmp	r3, #64	@ 0x40
 800501c:	d008      	beq.n	8005030 <UART_SetConfig+0x200>
 800501e:	e00f      	b.n	8005040 <UART_SetConfig+0x210>
 8005020:	2300      	movs	r3, #0
 8005022:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005026:	e042      	b.n	80050ae <UART_SetConfig+0x27e>
 8005028:	2302      	movs	r3, #2
 800502a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800502e:	e03e      	b.n	80050ae <UART_SetConfig+0x27e>
 8005030:	2304      	movs	r3, #4
 8005032:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005036:	e03a      	b.n	80050ae <UART_SetConfig+0x27e>
 8005038:	2308      	movs	r3, #8
 800503a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800503e:	e036      	b.n	80050ae <UART_SetConfig+0x27e>
 8005040:	2310      	movs	r3, #16
 8005042:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005046:	e032      	b.n	80050ae <UART_SetConfig+0x27e>
 8005048:	697b      	ldr	r3, [r7, #20]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	4a30      	ldr	r2, [pc, #192]	@ (8005110 <UART_SetConfig+0x2e0>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d12a      	bne.n	80050a8 <UART_SetConfig+0x278>
 8005052:	4b31      	ldr	r3, [pc, #196]	@ (8005118 <UART_SetConfig+0x2e8>)
 8005054:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005058:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800505c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005060:	d01a      	beq.n	8005098 <UART_SetConfig+0x268>
 8005062:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005066:	d81b      	bhi.n	80050a0 <UART_SetConfig+0x270>
 8005068:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800506c:	d00c      	beq.n	8005088 <UART_SetConfig+0x258>
 800506e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005072:	d815      	bhi.n	80050a0 <UART_SetConfig+0x270>
 8005074:	2b00      	cmp	r3, #0
 8005076:	d003      	beq.n	8005080 <UART_SetConfig+0x250>
 8005078:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800507c:	d008      	beq.n	8005090 <UART_SetConfig+0x260>
 800507e:	e00f      	b.n	80050a0 <UART_SetConfig+0x270>
 8005080:	2300      	movs	r3, #0
 8005082:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005086:	e012      	b.n	80050ae <UART_SetConfig+0x27e>
 8005088:	2302      	movs	r3, #2
 800508a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800508e:	e00e      	b.n	80050ae <UART_SetConfig+0x27e>
 8005090:	2304      	movs	r3, #4
 8005092:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005096:	e00a      	b.n	80050ae <UART_SetConfig+0x27e>
 8005098:	2308      	movs	r3, #8
 800509a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800509e:	e006      	b.n	80050ae <UART_SetConfig+0x27e>
 80050a0:	2310      	movs	r3, #16
 80050a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80050a6:	e002      	b.n	80050ae <UART_SetConfig+0x27e>
 80050a8:	2310      	movs	r3, #16
 80050aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80050ae:	697b      	ldr	r3, [r7, #20]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	4a17      	ldr	r2, [pc, #92]	@ (8005110 <UART_SetConfig+0x2e0>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	f040 80a8 	bne.w	800520a <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80050ba:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80050be:	2b08      	cmp	r3, #8
 80050c0:	d834      	bhi.n	800512c <UART_SetConfig+0x2fc>
 80050c2:	a201      	add	r2, pc, #4	@ (adr r2, 80050c8 <UART_SetConfig+0x298>)
 80050c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050c8:	080050ed 	.word	0x080050ed
 80050cc:	0800512d 	.word	0x0800512d
 80050d0:	080050f5 	.word	0x080050f5
 80050d4:	0800512d 	.word	0x0800512d
 80050d8:	080050fb 	.word	0x080050fb
 80050dc:	0800512d 	.word	0x0800512d
 80050e0:	0800512d 	.word	0x0800512d
 80050e4:	0800512d 	.word	0x0800512d
 80050e8:	08005103 	.word	0x08005103
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80050ec:	f7fd ff22 	bl	8002f34 <HAL_RCC_GetPCLK1Freq>
 80050f0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80050f2:	e021      	b.n	8005138 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80050f4:	4b0c      	ldr	r3, [pc, #48]	@ (8005128 <UART_SetConfig+0x2f8>)
 80050f6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80050f8:	e01e      	b.n	8005138 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80050fa:	f7fd fead 	bl	8002e58 <HAL_RCC_GetSysClockFreq>
 80050fe:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005100:	e01a      	b.n	8005138 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005102:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005106:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005108:	e016      	b.n	8005138 <UART_SetConfig+0x308>
 800510a:	bf00      	nop
 800510c:	cfff69f3 	.word	0xcfff69f3
 8005110:	40008000 	.word	0x40008000
 8005114:	40013800 	.word	0x40013800
 8005118:	40021000 	.word	0x40021000
 800511c:	40004400 	.word	0x40004400
 8005120:	40004800 	.word	0x40004800
 8005124:	40004c00 	.word	0x40004c00
 8005128:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800512c:	2300      	movs	r3, #0
 800512e:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005130:	2301      	movs	r3, #1
 8005132:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005136:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005138:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800513a:	2b00      	cmp	r3, #0
 800513c:	f000 812a 	beq.w	8005394 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005140:	697b      	ldr	r3, [r7, #20]
 8005142:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005144:	4a9e      	ldr	r2, [pc, #632]	@ (80053c0 <UART_SetConfig+0x590>)
 8005146:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800514a:	461a      	mov	r2, r3
 800514c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800514e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005152:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005154:	697b      	ldr	r3, [r7, #20]
 8005156:	685a      	ldr	r2, [r3, #4]
 8005158:	4613      	mov	r3, r2
 800515a:	005b      	lsls	r3, r3, #1
 800515c:	4413      	add	r3, r2
 800515e:	69ba      	ldr	r2, [r7, #24]
 8005160:	429a      	cmp	r2, r3
 8005162:	d305      	bcc.n	8005170 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005164:	697b      	ldr	r3, [r7, #20]
 8005166:	685b      	ldr	r3, [r3, #4]
 8005168:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800516a:	69ba      	ldr	r2, [r7, #24]
 800516c:	429a      	cmp	r2, r3
 800516e:	d903      	bls.n	8005178 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8005170:	2301      	movs	r3, #1
 8005172:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005176:	e10d      	b.n	8005394 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005178:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800517a:	2200      	movs	r2, #0
 800517c:	60bb      	str	r3, [r7, #8]
 800517e:	60fa      	str	r2, [r7, #12]
 8005180:	697b      	ldr	r3, [r7, #20]
 8005182:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005184:	4a8e      	ldr	r2, [pc, #568]	@ (80053c0 <UART_SetConfig+0x590>)
 8005186:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800518a:	b29b      	uxth	r3, r3
 800518c:	2200      	movs	r2, #0
 800518e:	603b      	str	r3, [r7, #0]
 8005190:	607a      	str	r2, [r7, #4]
 8005192:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005196:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800519a:	f7fb fd03 	bl	8000ba4 <__aeabi_uldivmod>
 800519e:	4602      	mov	r2, r0
 80051a0:	460b      	mov	r3, r1
 80051a2:	4610      	mov	r0, r2
 80051a4:	4619      	mov	r1, r3
 80051a6:	f04f 0200 	mov.w	r2, #0
 80051aa:	f04f 0300 	mov.w	r3, #0
 80051ae:	020b      	lsls	r3, r1, #8
 80051b0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80051b4:	0202      	lsls	r2, r0, #8
 80051b6:	6979      	ldr	r1, [r7, #20]
 80051b8:	6849      	ldr	r1, [r1, #4]
 80051ba:	0849      	lsrs	r1, r1, #1
 80051bc:	2000      	movs	r0, #0
 80051be:	460c      	mov	r4, r1
 80051c0:	4605      	mov	r5, r0
 80051c2:	eb12 0804 	adds.w	r8, r2, r4
 80051c6:	eb43 0905 	adc.w	r9, r3, r5
 80051ca:	697b      	ldr	r3, [r7, #20]
 80051cc:	685b      	ldr	r3, [r3, #4]
 80051ce:	2200      	movs	r2, #0
 80051d0:	469a      	mov	sl, r3
 80051d2:	4693      	mov	fp, r2
 80051d4:	4652      	mov	r2, sl
 80051d6:	465b      	mov	r3, fp
 80051d8:	4640      	mov	r0, r8
 80051da:	4649      	mov	r1, r9
 80051dc:	f7fb fce2 	bl	8000ba4 <__aeabi_uldivmod>
 80051e0:	4602      	mov	r2, r0
 80051e2:	460b      	mov	r3, r1
 80051e4:	4613      	mov	r3, r2
 80051e6:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80051e8:	6a3b      	ldr	r3, [r7, #32]
 80051ea:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80051ee:	d308      	bcc.n	8005202 <UART_SetConfig+0x3d2>
 80051f0:	6a3b      	ldr	r3, [r7, #32]
 80051f2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80051f6:	d204      	bcs.n	8005202 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 80051f8:	697b      	ldr	r3, [r7, #20]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	6a3a      	ldr	r2, [r7, #32]
 80051fe:	60da      	str	r2, [r3, #12]
 8005200:	e0c8      	b.n	8005394 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8005202:	2301      	movs	r3, #1
 8005204:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005208:	e0c4      	b.n	8005394 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800520a:	697b      	ldr	r3, [r7, #20]
 800520c:	69db      	ldr	r3, [r3, #28]
 800520e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005212:	d167      	bne.n	80052e4 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8005214:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005218:	2b08      	cmp	r3, #8
 800521a:	d828      	bhi.n	800526e <UART_SetConfig+0x43e>
 800521c:	a201      	add	r2, pc, #4	@ (adr r2, 8005224 <UART_SetConfig+0x3f4>)
 800521e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005222:	bf00      	nop
 8005224:	08005249 	.word	0x08005249
 8005228:	08005251 	.word	0x08005251
 800522c:	08005259 	.word	0x08005259
 8005230:	0800526f 	.word	0x0800526f
 8005234:	0800525f 	.word	0x0800525f
 8005238:	0800526f 	.word	0x0800526f
 800523c:	0800526f 	.word	0x0800526f
 8005240:	0800526f 	.word	0x0800526f
 8005244:	08005267 	.word	0x08005267
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005248:	f7fd fe74 	bl	8002f34 <HAL_RCC_GetPCLK1Freq>
 800524c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800524e:	e014      	b.n	800527a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005250:	f7fd fe86 	bl	8002f60 <HAL_RCC_GetPCLK2Freq>
 8005254:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005256:	e010      	b.n	800527a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005258:	4b5a      	ldr	r3, [pc, #360]	@ (80053c4 <UART_SetConfig+0x594>)
 800525a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800525c:	e00d      	b.n	800527a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800525e:	f7fd fdfb 	bl	8002e58 <HAL_RCC_GetSysClockFreq>
 8005262:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005264:	e009      	b.n	800527a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005266:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800526a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800526c:	e005      	b.n	800527a <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 800526e:	2300      	movs	r3, #0
 8005270:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005272:	2301      	movs	r3, #1
 8005274:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005278:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800527a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800527c:	2b00      	cmp	r3, #0
 800527e:	f000 8089 	beq.w	8005394 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005282:	697b      	ldr	r3, [r7, #20]
 8005284:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005286:	4a4e      	ldr	r2, [pc, #312]	@ (80053c0 <UART_SetConfig+0x590>)
 8005288:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800528c:	461a      	mov	r2, r3
 800528e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005290:	fbb3 f3f2 	udiv	r3, r3, r2
 8005294:	005a      	lsls	r2, r3, #1
 8005296:	697b      	ldr	r3, [r7, #20]
 8005298:	685b      	ldr	r3, [r3, #4]
 800529a:	085b      	lsrs	r3, r3, #1
 800529c:	441a      	add	r2, r3
 800529e:	697b      	ldr	r3, [r7, #20]
 80052a0:	685b      	ldr	r3, [r3, #4]
 80052a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80052a6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80052a8:	6a3b      	ldr	r3, [r7, #32]
 80052aa:	2b0f      	cmp	r3, #15
 80052ac:	d916      	bls.n	80052dc <UART_SetConfig+0x4ac>
 80052ae:	6a3b      	ldr	r3, [r7, #32]
 80052b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80052b4:	d212      	bcs.n	80052dc <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80052b6:	6a3b      	ldr	r3, [r7, #32]
 80052b8:	b29b      	uxth	r3, r3
 80052ba:	f023 030f 	bic.w	r3, r3, #15
 80052be:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80052c0:	6a3b      	ldr	r3, [r7, #32]
 80052c2:	085b      	lsrs	r3, r3, #1
 80052c4:	b29b      	uxth	r3, r3
 80052c6:	f003 0307 	and.w	r3, r3, #7
 80052ca:	b29a      	uxth	r2, r3
 80052cc:	8bfb      	ldrh	r3, [r7, #30]
 80052ce:	4313      	orrs	r3, r2
 80052d0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80052d2:	697b      	ldr	r3, [r7, #20]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	8bfa      	ldrh	r2, [r7, #30]
 80052d8:	60da      	str	r2, [r3, #12]
 80052da:	e05b      	b.n	8005394 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80052dc:	2301      	movs	r3, #1
 80052de:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80052e2:	e057      	b.n	8005394 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 80052e4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80052e8:	2b08      	cmp	r3, #8
 80052ea:	d828      	bhi.n	800533e <UART_SetConfig+0x50e>
 80052ec:	a201      	add	r2, pc, #4	@ (adr r2, 80052f4 <UART_SetConfig+0x4c4>)
 80052ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052f2:	bf00      	nop
 80052f4:	08005319 	.word	0x08005319
 80052f8:	08005321 	.word	0x08005321
 80052fc:	08005329 	.word	0x08005329
 8005300:	0800533f 	.word	0x0800533f
 8005304:	0800532f 	.word	0x0800532f
 8005308:	0800533f 	.word	0x0800533f
 800530c:	0800533f 	.word	0x0800533f
 8005310:	0800533f 	.word	0x0800533f
 8005314:	08005337 	.word	0x08005337
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005318:	f7fd fe0c 	bl	8002f34 <HAL_RCC_GetPCLK1Freq>
 800531c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800531e:	e014      	b.n	800534a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005320:	f7fd fe1e 	bl	8002f60 <HAL_RCC_GetPCLK2Freq>
 8005324:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005326:	e010      	b.n	800534a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005328:	4b26      	ldr	r3, [pc, #152]	@ (80053c4 <UART_SetConfig+0x594>)
 800532a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800532c:	e00d      	b.n	800534a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800532e:	f7fd fd93 	bl	8002e58 <HAL_RCC_GetSysClockFreq>
 8005332:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005334:	e009      	b.n	800534a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005336:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800533a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800533c:	e005      	b.n	800534a <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800533e:	2300      	movs	r3, #0
 8005340:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005342:	2301      	movs	r3, #1
 8005344:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005348:	bf00      	nop
    }

    if (pclk != 0U)
 800534a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800534c:	2b00      	cmp	r3, #0
 800534e:	d021      	beq.n	8005394 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005350:	697b      	ldr	r3, [r7, #20]
 8005352:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005354:	4a1a      	ldr	r2, [pc, #104]	@ (80053c0 <UART_SetConfig+0x590>)
 8005356:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800535a:	461a      	mov	r2, r3
 800535c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800535e:	fbb3 f2f2 	udiv	r2, r3, r2
 8005362:	697b      	ldr	r3, [r7, #20]
 8005364:	685b      	ldr	r3, [r3, #4]
 8005366:	085b      	lsrs	r3, r3, #1
 8005368:	441a      	add	r2, r3
 800536a:	697b      	ldr	r3, [r7, #20]
 800536c:	685b      	ldr	r3, [r3, #4]
 800536e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005372:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005374:	6a3b      	ldr	r3, [r7, #32]
 8005376:	2b0f      	cmp	r3, #15
 8005378:	d909      	bls.n	800538e <UART_SetConfig+0x55e>
 800537a:	6a3b      	ldr	r3, [r7, #32]
 800537c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005380:	d205      	bcs.n	800538e <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005382:	6a3b      	ldr	r3, [r7, #32]
 8005384:	b29a      	uxth	r2, r3
 8005386:	697b      	ldr	r3, [r7, #20]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	60da      	str	r2, [r3, #12]
 800538c:	e002      	b.n	8005394 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800538e:	2301      	movs	r3, #1
 8005390:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005394:	697b      	ldr	r3, [r7, #20]
 8005396:	2201      	movs	r2, #1
 8005398:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800539c:	697b      	ldr	r3, [r7, #20]
 800539e:	2201      	movs	r2, #1
 80053a0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80053a4:	697b      	ldr	r3, [r7, #20]
 80053a6:	2200      	movs	r2, #0
 80053a8:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80053aa:	697b      	ldr	r3, [r7, #20]
 80053ac:	2200      	movs	r2, #0
 80053ae:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80053b0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80053b4:	4618      	mov	r0, r3
 80053b6:	3730      	adds	r7, #48	@ 0x30
 80053b8:	46bd      	mov	sp, r7
 80053ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80053be:	bf00      	nop
 80053c0:	08005d0c 	.word	0x08005d0c
 80053c4:	00f42400 	.word	0x00f42400

080053c8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80053c8:	b480      	push	{r7}
 80053ca:	b083      	sub	sp, #12
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053d4:	f003 0308 	and.w	r3, r3, #8
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d00a      	beq.n	80053f2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	685b      	ldr	r3, [r3, #4]
 80053e2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	430a      	orrs	r2, r1
 80053f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053f6:	f003 0301 	and.w	r3, r3, #1
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d00a      	beq.n	8005414 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	685b      	ldr	r3, [r3, #4]
 8005404:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	430a      	orrs	r2, r1
 8005412:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005418:	f003 0302 	and.w	r3, r3, #2
 800541c:	2b00      	cmp	r3, #0
 800541e:	d00a      	beq.n	8005436 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	685b      	ldr	r3, [r3, #4]
 8005426:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	430a      	orrs	r2, r1
 8005434:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800543a:	f003 0304 	and.w	r3, r3, #4
 800543e:	2b00      	cmp	r3, #0
 8005440:	d00a      	beq.n	8005458 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	685b      	ldr	r3, [r3, #4]
 8005448:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	430a      	orrs	r2, r1
 8005456:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800545c:	f003 0310 	and.w	r3, r3, #16
 8005460:	2b00      	cmp	r3, #0
 8005462:	d00a      	beq.n	800547a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	689b      	ldr	r3, [r3, #8]
 800546a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	430a      	orrs	r2, r1
 8005478:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800547e:	f003 0320 	and.w	r3, r3, #32
 8005482:	2b00      	cmp	r3, #0
 8005484:	d00a      	beq.n	800549c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	689b      	ldr	r3, [r3, #8]
 800548c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	430a      	orrs	r2, r1
 800549a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d01a      	beq.n	80054de <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	685b      	ldr	r3, [r3, #4]
 80054ae:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	430a      	orrs	r2, r1
 80054bc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054c2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80054c6:	d10a      	bne.n	80054de <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	685b      	ldr	r3, [r3, #4]
 80054ce:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	430a      	orrs	r2, r1
 80054dc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d00a      	beq.n	8005500 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	685b      	ldr	r3, [r3, #4]
 80054f0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	430a      	orrs	r2, r1
 80054fe:	605a      	str	r2, [r3, #4]
  }
}
 8005500:	bf00      	nop
 8005502:	370c      	adds	r7, #12
 8005504:	46bd      	mov	sp, r7
 8005506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550a:	4770      	bx	lr

0800550c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b098      	sub	sp, #96	@ 0x60
 8005510:	af02      	add	r7, sp, #8
 8005512:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2200      	movs	r2, #0
 8005518:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800551c:	f7fc fbde 	bl	8001cdc <HAL_GetTick>
 8005520:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f003 0308 	and.w	r3, r3, #8
 800552c:	2b08      	cmp	r3, #8
 800552e:	d12f      	bne.n	8005590 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005530:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005534:	9300      	str	r3, [sp, #0]
 8005536:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005538:	2200      	movs	r2, #0
 800553a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800553e:	6878      	ldr	r0, [r7, #4]
 8005540:	f000 f88e 	bl	8005660 <UART_WaitOnFlagUntilTimeout>
 8005544:	4603      	mov	r3, r0
 8005546:	2b00      	cmp	r3, #0
 8005548:	d022      	beq.n	8005590 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005550:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005552:	e853 3f00 	ldrex	r3, [r3]
 8005556:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005558:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800555a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800555e:	653b      	str	r3, [r7, #80]	@ 0x50
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	461a      	mov	r2, r3
 8005566:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005568:	647b      	str	r3, [r7, #68]	@ 0x44
 800556a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800556c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800556e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005570:	e841 2300 	strex	r3, r2, [r1]
 8005574:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005576:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005578:	2b00      	cmp	r3, #0
 800557a:	d1e6      	bne.n	800554a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2220      	movs	r2, #32
 8005580:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2200      	movs	r2, #0
 8005588:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800558c:	2303      	movs	r3, #3
 800558e:	e063      	b.n	8005658 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f003 0304 	and.w	r3, r3, #4
 800559a:	2b04      	cmp	r3, #4
 800559c:	d149      	bne.n	8005632 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800559e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80055a2:	9300      	str	r3, [sp, #0]
 80055a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80055a6:	2200      	movs	r2, #0
 80055a8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80055ac:	6878      	ldr	r0, [r7, #4]
 80055ae:	f000 f857 	bl	8005660 <UART_WaitOnFlagUntilTimeout>
 80055b2:	4603      	mov	r3, r0
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d03c      	beq.n	8005632 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055c0:	e853 3f00 	ldrex	r3, [r3]
 80055c4:	623b      	str	r3, [r7, #32]
   return(result);
 80055c6:	6a3b      	ldr	r3, [r7, #32]
 80055c8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80055cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	461a      	mov	r2, r3
 80055d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80055d6:	633b      	str	r3, [r7, #48]	@ 0x30
 80055d8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055da:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80055dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80055de:	e841 2300 	strex	r3, r2, [r1]
 80055e2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80055e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d1e6      	bne.n	80055b8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	3308      	adds	r3, #8
 80055f0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055f2:	693b      	ldr	r3, [r7, #16]
 80055f4:	e853 3f00 	ldrex	r3, [r3]
 80055f8:	60fb      	str	r3, [r7, #12]
   return(result);
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	f023 0301 	bic.w	r3, r3, #1
 8005600:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	3308      	adds	r3, #8
 8005608:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800560a:	61fa      	str	r2, [r7, #28]
 800560c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800560e:	69b9      	ldr	r1, [r7, #24]
 8005610:	69fa      	ldr	r2, [r7, #28]
 8005612:	e841 2300 	strex	r3, r2, [r1]
 8005616:	617b      	str	r3, [r7, #20]
   return(result);
 8005618:	697b      	ldr	r3, [r7, #20]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d1e5      	bne.n	80055ea <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2220      	movs	r2, #32
 8005622:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2200      	movs	r2, #0
 800562a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800562e:	2303      	movs	r3, #3
 8005630:	e012      	b.n	8005658 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2220      	movs	r2, #32
 8005636:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2220      	movs	r2, #32
 800563e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2200      	movs	r2, #0
 8005646:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2200      	movs	r2, #0
 800564c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2200      	movs	r2, #0
 8005652:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005656:	2300      	movs	r3, #0
}
 8005658:	4618      	mov	r0, r3
 800565a:	3758      	adds	r7, #88	@ 0x58
 800565c:	46bd      	mov	sp, r7
 800565e:	bd80      	pop	{r7, pc}

08005660 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b084      	sub	sp, #16
 8005664:	af00      	add	r7, sp, #0
 8005666:	60f8      	str	r0, [r7, #12]
 8005668:	60b9      	str	r1, [r7, #8]
 800566a:	603b      	str	r3, [r7, #0]
 800566c:	4613      	mov	r3, r2
 800566e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005670:	e04f      	b.n	8005712 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005672:	69bb      	ldr	r3, [r7, #24]
 8005674:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005678:	d04b      	beq.n	8005712 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800567a:	f7fc fb2f 	bl	8001cdc <HAL_GetTick>
 800567e:	4602      	mov	r2, r0
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	1ad3      	subs	r3, r2, r3
 8005684:	69ba      	ldr	r2, [r7, #24]
 8005686:	429a      	cmp	r2, r3
 8005688:	d302      	bcc.n	8005690 <UART_WaitOnFlagUntilTimeout+0x30>
 800568a:	69bb      	ldr	r3, [r7, #24]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d101      	bne.n	8005694 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005690:	2303      	movs	r3, #3
 8005692:	e04e      	b.n	8005732 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f003 0304 	and.w	r3, r3, #4
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d037      	beq.n	8005712 <UART_WaitOnFlagUntilTimeout+0xb2>
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	2b80      	cmp	r3, #128	@ 0x80
 80056a6:	d034      	beq.n	8005712 <UART_WaitOnFlagUntilTimeout+0xb2>
 80056a8:	68bb      	ldr	r3, [r7, #8]
 80056aa:	2b40      	cmp	r3, #64	@ 0x40
 80056ac:	d031      	beq.n	8005712 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	69db      	ldr	r3, [r3, #28]
 80056b4:	f003 0308 	and.w	r3, r3, #8
 80056b8:	2b08      	cmp	r3, #8
 80056ba:	d110      	bne.n	80056de <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	2208      	movs	r2, #8
 80056c2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80056c4:	68f8      	ldr	r0, [r7, #12]
 80056c6:	f000 f838 	bl	800573a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	2208      	movs	r2, #8
 80056ce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	2200      	movs	r2, #0
 80056d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80056da:	2301      	movs	r3, #1
 80056dc:	e029      	b.n	8005732 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	69db      	ldr	r3, [r3, #28]
 80056e4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80056e8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80056ec:	d111      	bne.n	8005712 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80056f6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80056f8:	68f8      	ldr	r0, [r7, #12]
 80056fa:	f000 f81e 	bl	800573a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	2220      	movs	r2, #32
 8005702:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	2200      	movs	r2, #0
 800570a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800570e:	2303      	movs	r3, #3
 8005710:	e00f      	b.n	8005732 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	69da      	ldr	r2, [r3, #28]
 8005718:	68bb      	ldr	r3, [r7, #8]
 800571a:	4013      	ands	r3, r2
 800571c:	68ba      	ldr	r2, [r7, #8]
 800571e:	429a      	cmp	r2, r3
 8005720:	bf0c      	ite	eq
 8005722:	2301      	moveq	r3, #1
 8005724:	2300      	movne	r3, #0
 8005726:	b2db      	uxtb	r3, r3
 8005728:	461a      	mov	r2, r3
 800572a:	79fb      	ldrb	r3, [r7, #7]
 800572c:	429a      	cmp	r2, r3
 800572e:	d0a0      	beq.n	8005672 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005730:	2300      	movs	r3, #0
}
 8005732:	4618      	mov	r0, r3
 8005734:	3710      	adds	r7, #16
 8005736:	46bd      	mov	sp, r7
 8005738:	bd80      	pop	{r7, pc}

0800573a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800573a:	b480      	push	{r7}
 800573c:	b095      	sub	sp, #84	@ 0x54
 800573e:	af00      	add	r7, sp, #0
 8005740:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005748:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800574a:	e853 3f00 	ldrex	r3, [r3]
 800574e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005750:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005752:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005756:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	461a      	mov	r2, r3
 800575e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005760:	643b      	str	r3, [r7, #64]	@ 0x40
 8005762:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005764:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005766:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005768:	e841 2300 	strex	r3, r2, [r1]
 800576c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800576e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005770:	2b00      	cmp	r3, #0
 8005772:	d1e6      	bne.n	8005742 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	3308      	adds	r3, #8
 800577a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800577c:	6a3b      	ldr	r3, [r7, #32]
 800577e:	e853 3f00 	ldrex	r3, [r3]
 8005782:	61fb      	str	r3, [r7, #28]
   return(result);
 8005784:	69fb      	ldr	r3, [r7, #28]
 8005786:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800578a:	f023 0301 	bic.w	r3, r3, #1
 800578e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	3308      	adds	r3, #8
 8005796:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005798:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800579a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800579c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800579e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80057a0:	e841 2300 	strex	r3, r2, [r1]
 80057a4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80057a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d1e3      	bne.n	8005774 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80057b0:	2b01      	cmp	r3, #1
 80057b2:	d118      	bne.n	80057e6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	e853 3f00 	ldrex	r3, [r3]
 80057c0:	60bb      	str	r3, [r7, #8]
   return(result);
 80057c2:	68bb      	ldr	r3, [r7, #8]
 80057c4:	f023 0310 	bic.w	r3, r3, #16
 80057c8:	647b      	str	r3, [r7, #68]	@ 0x44
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	461a      	mov	r2, r3
 80057d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80057d2:	61bb      	str	r3, [r7, #24]
 80057d4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057d6:	6979      	ldr	r1, [r7, #20]
 80057d8:	69ba      	ldr	r2, [r7, #24]
 80057da:	e841 2300 	strex	r3, r2, [r1]
 80057de:	613b      	str	r3, [r7, #16]
   return(result);
 80057e0:	693b      	ldr	r3, [r7, #16]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d1e6      	bne.n	80057b4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2220      	movs	r2, #32
 80057ea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	2200      	movs	r2, #0
 80057f2:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2200      	movs	r2, #0
 80057f8:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80057fa:	bf00      	nop
 80057fc:	3754      	adds	r7, #84	@ 0x54
 80057fe:	46bd      	mov	sp, r7
 8005800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005804:	4770      	bx	lr

08005806 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005806:	b480      	push	{r7}
 8005808:	b085      	sub	sp, #20
 800580a:	af00      	add	r7, sp, #0
 800580c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005814:	2b01      	cmp	r3, #1
 8005816:	d101      	bne.n	800581c <HAL_UARTEx_DisableFifoMode+0x16>
 8005818:	2302      	movs	r3, #2
 800581a:	e027      	b.n	800586c <HAL_UARTEx_DisableFifoMode+0x66>
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2201      	movs	r2, #1
 8005820:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2224      	movs	r2, #36	@ 0x24
 8005828:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	681a      	ldr	r2, [r3, #0]
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f022 0201 	bic.w	r2, r2, #1
 8005842:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800584a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2200      	movs	r2, #0
 8005850:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	68fa      	ldr	r2, [r7, #12]
 8005858:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	2220      	movs	r2, #32
 800585e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2200      	movs	r2, #0
 8005866:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800586a:	2300      	movs	r3, #0
}
 800586c:	4618      	mov	r0, r3
 800586e:	3714      	adds	r7, #20
 8005870:	46bd      	mov	sp, r7
 8005872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005876:	4770      	bx	lr

08005878 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b084      	sub	sp, #16
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
 8005880:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005888:	2b01      	cmp	r3, #1
 800588a:	d101      	bne.n	8005890 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800588c:	2302      	movs	r3, #2
 800588e:	e02d      	b.n	80058ec <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2201      	movs	r2, #1
 8005894:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2224      	movs	r2, #36	@ 0x24
 800589c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	681a      	ldr	r2, [r3, #0]
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f022 0201 	bic.w	r2, r2, #1
 80058b6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	689b      	ldr	r3, [r3, #8]
 80058be:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	683a      	ldr	r2, [r7, #0]
 80058c8:	430a      	orrs	r2, r1
 80058ca:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80058cc:	6878      	ldr	r0, [r7, #4]
 80058ce:	f000 f84f 	bl	8005970 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	68fa      	ldr	r2, [r7, #12]
 80058d8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	2220      	movs	r2, #32
 80058de:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2200      	movs	r2, #0
 80058e6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80058ea:	2300      	movs	r3, #0
}
 80058ec:	4618      	mov	r0, r3
 80058ee:	3710      	adds	r7, #16
 80058f0:	46bd      	mov	sp, r7
 80058f2:	bd80      	pop	{r7, pc}

080058f4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b084      	sub	sp, #16
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
 80058fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005904:	2b01      	cmp	r3, #1
 8005906:	d101      	bne.n	800590c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005908:	2302      	movs	r3, #2
 800590a:	e02d      	b.n	8005968 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2201      	movs	r2, #1
 8005910:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2224      	movs	r2, #36	@ 0x24
 8005918:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	681a      	ldr	r2, [r3, #0]
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f022 0201 	bic.w	r2, r2, #1
 8005932:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	689b      	ldr	r3, [r3, #8]
 800593a:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	683a      	ldr	r2, [r7, #0]
 8005944:	430a      	orrs	r2, r1
 8005946:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005948:	6878      	ldr	r0, [r7, #4]
 800594a:	f000 f811 	bl	8005970 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	68fa      	ldr	r2, [r7, #12]
 8005954:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2220      	movs	r2, #32
 800595a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2200      	movs	r2, #0
 8005962:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005966:	2300      	movs	r3, #0
}
 8005968:	4618      	mov	r0, r3
 800596a:	3710      	adds	r7, #16
 800596c:	46bd      	mov	sp, r7
 800596e:	bd80      	pop	{r7, pc}

08005970 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005970:	b480      	push	{r7}
 8005972:	b085      	sub	sp, #20
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800597c:	2b00      	cmp	r3, #0
 800597e:	d108      	bne.n	8005992 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2201      	movs	r2, #1
 8005984:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2201      	movs	r2, #1
 800598c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005990:	e031      	b.n	80059f6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005992:	2308      	movs	r3, #8
 8005994:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005996:	2308      	movs	r3, #8
 8005998:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	689b      	ldr	r3, [r3, #8]
 80059a0:	0e5b      	lsrs	r3, r3, #25
 80059a2:	b2db      	uxtb	r3, r3
 80059a4:	f003 0307 	and.w	r3, r3, #7
 80059a8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	689b      	ldr	r3, [r3, #8]
 80059b0:	0f5b      	lsrs	r3, r3, #29
 80059b2:	b2db      	uxtb	r3, r3
 80059b4:	f003 0307 	and.w	r3, r3, #7
 80059b8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80059ba:	7bbb      	ldrb	r3, [r7, #14]
 80059bc:	7b3a      	ldrb	r2, [r7, #12]
 80059be:	4911      	ldr	r1, [pc, #68]	@ (8005a04 <UARTEx_SetNbDataToProcess+0x94>)
 80059c0:	5c8a      	ldrb	r2, [r1, r2]
 80059c2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80059c6:	7b3a      	ldrb	r2, [r7, #12]
 80059c8:	490f      	ldr	r1, [pc, #60]	@ (8005a08 <UARTEx_SetNbDataToProcess+0x98>)
 80059ca:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80059cc:	fb93 f3f2 	sdiv	r3, r3, r2
 80059d0:	b29a      	uxth	r2, r3
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80059d8:	7bfb      	ldrb	r3, [r7, #15]
 80059da:	7b7a      	ldrb	r2, [r7, #13]
 80059dc:	4909      	ldr	r1, [pc, #36]	@ (8005a04 <UARTEx_SetNbDataToProcess+0x94>)
 80059de:	5c8a      	ldrb	r2, [r1, r2]
 80059e0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80059e4:	7b7a      	ldrb	r2, [r7, #13]
 80059e6:	4908      	ldr	r1, [pc, #32]	@ (8005a08 <UARTEx_SetNbDataToProcess+0x98>)
 80059e8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80059ea:	fb93 f3f2 	sdiv	r3, r3, r2
 80059ee:	b29a      	uxth	r2, r3
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80059f6:	bf00      	nop
 80059f8:	3714      	adds	r7, #20
 80059fa:	46bd      	mov	sp, r7
 80059fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a00:	4770      	bx	lr
 8005a02:	bf00      	nop
 8005a04:	08005d24 	.word	0x08005d24
 8005a08:	08005d2c 	.word	0x08005d2c

08005a0c <Servo_Init>:
uint8_t Servo_Init(
		Servo_Structure *Sx,
		float cpu_freq,
		bool isCHN
)
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b086      	sub	sp, #24
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	60f8      	str	r0, [r7, #12]
 8005a14:	ed87 0a02 	vstr	s0, [r7, #8]
 8005a18:	460b      	mov	r3, r1
 8005a1a:	71fb      	strb	r3, [r7, #7]
	HAL_TIM_Base_Start(Sx->htimx);
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	4618      	mov	r0, r3
 8005a22:	f7fd fdeb 	bl	80035fc <HAL_TIM_Base_Start>
	if (isCHN) HAL_TIMEx_PWMN_Start(Sx->htimx, Sx->channelx);
 8005a26:	79fb      	ldrb	r3, [r7, #7]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d008      	beq.n	8005a3e <Servo_Init+0x32>
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	681a      	ldr	r2, [r3, #0]
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	685b      	ldr	r3, [r3, #4]
 8005a34:	4619      	mov	r1, r3
 8005a36:	4610      	mov	r0, r2
 8005a38:	f7fe ffc2 	bl	80049c0 <HAL_TIMEx_PWMN_Start>
 8005a3c:	e007      	b.n	8005a4e <Servo_Init+0x42>
	else HAL_TIM_PWM_Start(Sx->htimx, Sx->channelx);
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681a      	ldr	r2, [r3, #0]
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	685b      	ldr	r3, [r3, #4]
 8005a46:	4619      	mov	r1, r3
 8005a48:	4610      	mov	r0, r2
 8005a4a:	f7fd fe9b 	bl	8003784 <HAL_TIM_PWM_Start>

	if (50.0 >= cpu_freq / 2.0) return -1;
 8005a4e:	68b8      	ldr	r0, [r7, #8]
 8005a50:	f7fa fd46 	bl	80004e0 <__aeabi_f2d>
 8005a54:	f04f 0200 	mov.w	r2, #0
 8005a58:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8005a5c:	f7fa fec2 	bl	80007e4 <__aeabi_ddiv>
 8005a60:	4602      	mov	r2, r0
 8005a62:	460b      	mov	r3, r1
 8005a64:	4610      	mov	r0, r2
 8005a66:	4619      	mov	r1, r3
 8005a68:	f04f 0200 	mov.w	r2, #0
 8005a6c:	4b27      	ldr	r3, [pc, #156]	@ (8005b0c <Servo_Init+0x100>)
 8005a6e:	f7fb f80b 	bl	8000a88 <__aeabi_dcmple>
 8005a72:	4603      	mov	r3, r0
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d001      	beq.n	8005a7c <Servo_Init+0x70>
 8005a78:	23ff      	movs	r3, #255	@ 0xff
 8005a7a:	e042      	b.n	8005b02 <Servo_Init+0xf6>
	uint32_t period_cyc = (uint32_t) (cpu_freq / 50.0);
 8005a7c:	68b8      	ldr	r0, [r7, #8]
 8005a7e:	f7fa fd2f 	bl	80004e0 <__aeabi_f2d>
 8005a82:	f04f 0200 	mov.w	r2, #0
 8005a86:	4b21      	ldr	r3, [pc, #132]	@ (8005b0c <Servo_Init+0x100>)
 8005a88:	f7fa feac 	bl	80007e4 <__aeabi_ddiv>
 8005a8c:	4602      	mov	r2, r0
 8005a8e:	460b      	mov	r3, r1
 8005a90:	4610      	mov	r0, r2
 8005a92:	4619      	mov	r1, r3
 8005a94:	f7fb f816 	bl	8000ac4 <__aeabi_d2uiz>
 8005a98:	4603      	mov	r3, r0
 8005a9a:	617b      	str	r3, [r7, #20]
	uint16_t prescaler = (uint16_t) (period_cyc / 65535 + 1);
 8005a9c:	697b      	ldr	r3, [r7, #20]
 8005a9e:	4a1c      	ldr	r2, [pc, #112]	@ (8005b10 <Servo_Init+0x104>)
 8005aa0:	fba2 2303 	umull	r2, r3, r2, r3
 8005aa4:	0bdb      	lsrs	r3, r3, #15
 8005aa6:	b29b      	uxth	r3, r3
 8005aa8:	3301      	adds	r3, #1
 8005aaa:	827b      	strh	r3, [r7, #18]
	uint16_t overflow = (uint16_t) ((period_cyc + (prescaler / 2)) / prescaler);
 8005aac:	8a7b      	ldrh	r3, [r7, #18]
 8005aae:	085b      	lsrs	r3, r3, #1
 8005ab0:	b29b      	uxth	r3, r3
 8005ab2:	461a      	mov	r2, r3
 8005ab4:	697b      	ldr	r3, [r7, #20]
 8005ab6:	441a      	add	r2, r3
 8005ab8:	8a7b      	ldrh	r3, [r7, #18]
 8005aba:	fbb2 f3f3 	udiv	r3, r2, r3
 8005abe:	823b      	strh	r3, [r7, #16]
	__HAL_TIM_SET_PRESCALER(Sx->htimx, prescaler);
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	8a7a      	ldrh	r2, [r7, #18]
 8005ac8:	629a      	str	r2, [r3, #40]	@ 0x28
	__HAL_TIM_SET_AUTORELOAD(Sx->htimx, overflow);
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	8a3a      	ldrh	r2, [r7, #16]
 8005ad2:	62da      	str	r2, [r3, #44]	@ 0x2c
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	8a3a      	ldrh	r2, [r7, #16]
 8005ada:	60da      	str	r2, [r3, #12]
	Sx->gain = overflow / 20.0;
 8005adc:	8a3b      	ldrh	r3, [r7, #16]
 8005ade:	4618      	mov	r0, r3
 8005ae0:	f7fa fcec 	bl	80004bc <__aeabi_i2d>
 8005ae4:	f04f 0200 	mov.w	r2, #0
 8005ae8:	4b0a      	ldr	r3, [pc, #40]	@ (8005b14 <Servo_Init+0x108>)
 8005aea:	f7fa fe7b 	bl	80007e4 <__aeabi_ddiv>
 8005aee:	4602      	mov	r2, r0
 8005af0:	460b      	mov	r3, r1
 8005af2:	4610      	mov	r0, r2
 8005af4:	4619      	mov	r1, r3
 8005af6:	f7fb f805 	bl	8000b04 <__aeabi_d2f>
 8005afa:	4602      	mov	r2, r0
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	609a      	str	r2, [r3, #8]
	return 0;
 8005b00:	2300      	movs	r3, #0
}
 8005b02:	4618      	mov	r0, r3
 8005b04:	3718      	adds	r7, #24
 8005b06:	46bd      	mov	sp, r7
 8005b08:	bd80      	pop	{r7, pc}
 8005b0a:	bf00      	nop
 8005b0c:	40490000 	.word	0x40490000
 8005b10:	80008001 	.word	0x80008001
 8005b14:	40340000 	.word	0x40340000

08005b18 <RC_Set_Input_Range>:
void RC_Set_Input_Range(
		Servo_Structure *Sx,
		float _min, //degree
		float _max
)
{
 8005b18:	b480      	push	{r7}
 8005b1a:	b087      	sub	sp, #28
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	60f8      	str	r0, [r7, #12]
 8005b20:	ed87 0a02 	vstr	s0, [r7, #8]
 8005b24:	edc7 0a01 	vstr	s1, [r7, #4]
	float m = (2.5 - 0.5) / (_max - _min);
 8005b28:	ed97 7a01 	vldr	s14, [r7, #4]
 8005b2c:	edd7 7a02 	vldr	s15, [r7, #8]
 8005b30:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005b34:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8005b38:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005b3c:	edc7 7a05 	vstr	s15, [r7, #20]
	float c = 0.5 - (m * _min);
 8005b40:	ed97 7a05 	vldr	s14, [r7, #20]
 8005b44:	edd7 7a02 	vldr	s15, [r7, #8]
 8005b48:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b4c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005b50:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005b54:	edc7 7a04 	vstr	s15, [r7, #16]

	Sx->offset = Sx->gain * c;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	ed93 7a02 	vldr	s14, [r3, #8]
 8005b5e:	edd7 7a04 	vldr	s15, [r7, #16]
 8005b62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	edc3 7a03 	vstr	s15, [r3, #12]
	Sx->gain *= m;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	ed93 7a02 	vldr	s14, [r3, #8]
 8005b72:	edd7 7a05 	vldr	s15, [r7, #20]
 8005b76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8005b80:	bf00      	nop
 8005b82:	371c      	adds	r7, #28
 8005b84:	46bd      	mov	sp, r7
 8005b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8a:	4770      	bx	lr

08005b8c <RC_Signal_Write>:

void RC_Signal_Write(
		Servo_Structure *Sx,
		int32_t cmd
)
{
 8005b8c:	b480      	push	{r7}
 8005b8e:	b085      	sub	sp, #20
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
 8005b94:	6039      	str	r1, [r7, #0]
	float pwm = (Sx->gain * cmd) + Sx->offset;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	ed93 7a02 	vldr	s14, [r3, #8]
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	ee07 3a90 	vmov	s15, r3
 8005ba2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005ba6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	edd3 7a03 	vldr	s15, [r3, #12]
 8005bb0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005bb4:	edc7 7a03 	vstr	s15, [r7, #12]
	__HAL_TIM_SET_COMPARE(Sx->htimx, Sx->channelx, (uint16_t) pwm);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	685b      	ldr	r3, [r3, #4]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d10b      	bne.n	8005bd8 <RC_Signal_Write+0x4c>
 8005bc0:	edd7 7a03 	vldr	s15, [r7, #12]
 8005bc4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005bc8:	ee17 3a90 	vmov	r3, s15
 8005bcc:	b29a      	uxth	r2, r3
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8005bd6:	e04f      	b.n	8005c78 <RC_Signal_Write+0xec>
	__HAL_TIM_SET_COMPARE(Sx->htimx, Sx->channelx, (uint16_t) pwm);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	685b      	ldr	r3, [r3, #4]
 8005bdc:	2b04      	cmp	r3, #4
 8005bde:	d10c      	bne.n	8005bfa <RC_Signal_Write+0x6e>
 8005be0:	edd7 7a03 	vldr	s15, [r7, #12]
 8005be4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005be8:	ee17 3a90 	vmov	r3, s15
 8005bec:	b299      	uxth	r1, r3
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	681a      	ldr	r2, [r3, #0]
 8005bf4:	460b      	mov	r3, r1
 8005bf6:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8005bf8:	e03e      	b.n	8005c78 <RC_Signal_Write+0xec>
	__HAL_TIM_SET_COMPARE(Sx->htimx, Sx->channelx, (uint16_t) pwm);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	685b      	ldr	r3, [r3, #4]
 8005bfe:	2b08      	cmp	r3, #8
 8005c00:	d10c      	bne.n	8005c1c <RC_Signal_Write+0x90>
 8005c02:	edd7 7a03 	vldr	s15, [r7, #12]
 8005c06:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005c0a:	ee17 3a90 	vmov	r3, s15
 8005c0e:	b299      	uxth	r1, r3
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	681a      	ldr	r2, [r3, #0]
 8005c16:	460b      	mov	r3, r1
 8005c18:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8005c1a:	e02d      	b.n	8005c78 <RC_Signal_Write+0xec>
	__HAL_TIM_SET_COMPARE(Sx->htimx, Sx->channelx, (uint16_t) pwm);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	685b      	ldr	r3, [r3, #4]
 8005c20:	2b0c      	cmp	r3, #12
 8005c22:	d10c      	bne.n	8005c3e <RC_Signal_Write+0xb2>
 8005c24:	edd7 7a03 	vldr	s15, [r7, #12]
 8005c28:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005c2c:	ee17 3a90 	vmov	r3, s15
 8005c30:	b299      	uxth	r1, r3
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	681a      	ldr	r2, [r3, #0]
 8005c38:	460b      	mov	r3, r1
 8005c3a:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8005c3c:	e01c      	b.n	8005c78 <RC_Signal_Write+0xec>
	__HAL_TIM_SET_COMPARE(Sx->htimx, Sx->channelx, (uint16_t) pwm);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	685b      	ldr	r3, [r3, #4]
 8005c42:	2b10      	cmp	r3, #16
 8005c44:	d10c      	bne.n	8005c60 <RC_Signal_Write+0xd4>
 8005c46:	edd7 7a03 	vldr	s15, [r7, #12]
 8005c4a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005c4e:	ee17 3a90 	vmov	r3, s15
 8005c52:	b299      	uxth	r1, r3
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	681a      	ldr	r2, [r3, #0]
 8005c5a:	460b      	mov	r3, r1
 8005c5c:	6493      	str	r3, [r2, #72]	@ 0x48
}
 8005c5e:	e00b      	b.n	8005c78 <RC_Signal_Write+0xec>
	__HAL_TIM_SET_COMPARE(Sx->htimx, Sx->channelx, (uint16_t) pwm);
 8005c60:	edd7 7a03 	vldr	s15, [r7, #12]
 8005c64:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005c68:	ee17 3a90 	vmov	r3, s15
 8005c6c:	b299      	uxth	r1, r3
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	681a      	ldr	r2, [r3, #0]
 8005c74:	460b      	mov	r3, r1
 8005c76:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8005c78:	bf00      	nop
 8005c7a:	3714      	adds	r7, #20
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c82:	4770      	bx	lr

08005c84 <memset>:
 8005c84:	4402      	add	r2, r0
 8005c86:	4603      	mov	r3, r0
 8005c88:	4293      	cmp	r3, r2
 8005c8a:	d100      	bne.n	8005c8e <memset+0xa>
 8005c8c:	4770      	bx	lr
 8005c8e:	f803 1b01 	strb.w	r1, [r3], #1
 8005c92:	e7f9      	b.n	8005c88 <memset+0x4>

08005c94 <__libc_init_array>:
 8005c94:	b570      	push	{r4, r5, r6, lr}
 8005c96:	4d0d      	ldr	r5, [pc, #52]	@ (8005ccc <__libc_init_array+0x38>)
 8005c98:	4c0d      	ldr	r4, [pc, #52]	@ (8005cd0 <__libc_init_array+0x3c>)
 8005c9a:	1b64      	subs	r4, r4, r5
 8005c9c:	10a4      	asrs	r4, r4, #2
 8005c9e:	2600      	movs	r6, #0
 8005ca0:	42a6      	cmp	r6, r4
 8005ca2:	d109      	bne.n	8005cb8 <__libc_init_array+0x24>
 8005ca4:	4d0b      	ldr	r5, [pc, #44]	@ (8005cd4 <__libc_init_array+0x40>)
 8005ca6:	4c0c      	ldr	r4, [pc, #48]	@ (8005cd8 <__libc_init_array+0x44>)
 8005ca8:	f000 f818 	bl	8005cdc <_init>
 8005cac:	1b64      	subs	r4, r4, r5
 8005cae:	10a4      	asrs	r4, r4, #2
 8005cb0:	2600      	movs	r6, #0
 8005cb2:	42a6      	cmp	r6, r4
 8005cb4:	d105      	bne.n	8005cc2 <__libc_init_array+0x2e>
 8005cb6:	bd70      	pop	{r4, r5, r6, pc}
 8005cb8:	f855 3b04 	ldr.w	r3, [r5], #4
 8005cbc:	4798      	blx	r3
 8005cbe:	3601      	adds	r6, #1
 8005cc0:	e7ee      	b.n	8005ca0 <__libc_init_array+0xc>
 8005cc2:	f855 3b04 	ldr.w	r3, [r5], #4
 8005cc6:	4798      	blx	r3
 8005cc8:	3601      	adds	r6, #1
 8005cca:	e7f2      	b.n	8005cb2 <__libc_init_array+0x1e>
 8005ccc:	08005d3c 	.word	0x08005d3c
 8005cd0:	08005d3c 	.word	0x08005d3c
 8005cd4:	08005d3c 	.word	0x08005d3c
 8005cd8:	08005d40 	.word	0x08005d40

08005cdc <_init>:
 8005cdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cde:	bf00      	nop
 8005ce0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ce2:	bc08      	pop	{r3}
 8005ce4:	469e      	mov	lr, r3
 8005ce6:	4770      	bx	lr

08005ce8 <_fini>:
 8005ce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cea:	bf00      	nop
 8005cec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005cee:	bc08      	pop	{r3}
 8005cf0:	469e      	mov	lr, r3
 8005cf2:	4770      	bx	lr
